{"test_class": {"identifier": "LigancyFourChiralityTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static IAtomContainer molecule;", "modifier": "private static", "type": "IAtomContainer", "declarator": "molecule", "var_name": "molecule"}, {"original_string": "private static ILigand[]      ligands;", "modifier": "private static", "type": "ILigand[]", "declarator": "ligands", "var_name": "ligands"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/LigancyFourChiralityTest.java"}, "test_case": {"identifier": "testProject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProject() {\n        LigancyFourChirality chirality = new LigancyFourChirality(molecule.getAtom(1), ligands, Stereo.CLOCKWISE);\n        chirality.project(ligands);\n        Assert.assertEquals(Stereo.CLOCKWISE, chirality.getStereo());\n    }", "signature": "void testProject()", "full_signature": "@Test public void testProject()", "class_method_signature": "LigancyFourChiralityTest.testProject()", "testcase": true, "constructor": false, "invocations": ["getAtom", "project", "assertEquals", "getStereo"]}, "focal_class": {"identifier": "LigancyFourChirality", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IAtom                        chiralAtom;", "modifier": "private", "type": "IAtom", "declarator": "chiralAtom", "var_name": "chiralAtom"}, {"original_string": "private ILigand[]                    ligands;", "modifier": "private", "type": "ILigand[]", "declarator": "ligands", "var_name": "ligands"}, {"original_string": "private ITetrahedralChirality.Stereo stereo;", "modifier": "private", "type": "ITetrahedralChirality.Stereo", "declarator": "stereo", "var_name": "stereo"}], "methods": [{"identifier": "LigancyFourChirality", "parameters": "(IAtom chiralAtom, ILigand[] ligands, ITetrahedralChirality.Stereo stereo)", "modifiers": "public", "return": "", "signature": " LigancyFourChirality(IAtom chiralAtom, ILigand[] ligands, ITetrahedralChirality.Stereo stereo)", "full_signature": "public  LigancyFourChirality(IAtom chiralAtom, ILigand[] ligands, ITetrahedralChirality.Stereo stereo)", "class_method_signature": "LigancyFourChirality.LigancyFourChirality(IAtom chiralAtom, ILigand[] ligands, ITetrahedralChirality.Stereo stereo)", "testcase": false, "constructor": true}, {"identifier": "LigancyFourChirality", "parameters": "(IAtomContainer container, ITetrahedralChirality cdkChirality)", "modifiers": "public", "return": "", "signature": " LigancyFourChirality(IAtomContainer container, ITetrahedralChirality cdkChirality)", "full_signature": "public  LigancyFourChirality(IAtomContainer container, ITetrahedralChirality cdkChirality)", "class_method_signature": "LigancyFourChirality.LigancyFourChirality(IAtomContainer container, ITetrahedralChirality cdkChirality)", "testcase": false, "constructor": true}, {"identifier": "getLigands", "parameters": "()", "modifiers": "public", "return": "ILigand[]", "signature": "ILigand[] getLigands()", "full_signature": "public ILigand[] getLigands()", "class_method_signature": "LigancyFourChirality.getLigands()", "testcase": false, "constructor": false}, {"identifier": "getChiralAtom", "parameters": "()", "modifiers": "public", "return": "IAtom", "signature": "IAtom getChiralAtom()", "full_signature": "public IAtom getChiralAtom()", "class_method_signature": "LigancyFourChirality.getChiralAtom()", "testcase": false, "constructor": false}, {"identifier": "getStereo", "parameters": "()", "modifiers": "public", "return": "ITetrahedralChirality.Stereo", "signature": "ITetrahedralChirality.Stereo getStereo()", "full_signature": "public ITetrahedralChirality.Stereo getStereo()", "class_method_signature": "LigancyFourChirality.getStereo()", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(ILigand[] newOrder)", "modifiers": "public", "return": "LigancyFourChirality", "signature": "LigancyFourChirality project(ILigand[] newOrder)", "full_signature": "public LigancyFourChirality project(ILigand[] newOrder)", "class_method_signature": "LigancyFourChirality.project(ILigand[] newOrder)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(ILigand[] ligands, int first, int second)", "modifiers": "private", "return": "void", "signature": "void swap(ILigand[] ligands, int first, int second)", "full_signature": "private void swap(ILigand[] ligands, int first, int second)", "class_method_signature": "LigancyFourChirality.swap(ILigand[] ligands, int first, int second)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/LigancyFourChirality.java"}, "focal_method": {"identifier": "project", "parameters": "(ILigand[] newOrder)", "modifiers": "public", "return": "LigancyFourChirality", "body": "public LigancyFourChirality project(ILigand[] newOrder) {\n        ITetrahedralChirality.Stereo newStereo = this.stereo;\n        // copy the current ordering, and work with that\n        ILigand[] newAtoms = new ILigand[4];\n        System.arraycopy(this.ligands, 0, newAtoms, 0, 4);\n\n        // now move atoms around to match the newOrder\n        for (int i = 0; i < 3; i++) {\n            if (!newAtoms[i].getLigandAtom().equals(newOrder[i].getLigandAtom())) {\n                // OK, not in the right position\n                // find the incorrect, old position\n                for (int j = i; j < 4; j++) {\n                    if (newAtoms[j].getLigandAtom().equals(newOrder[i].getLigandAtom())) {\n                        // found the incorrect position\n                        swap(newAtoms, i, j);\n                        // and swap the stereochemistry\n                        if (newStereo == Stereo.CLOCKWISE) {\n                            newStereo = Stereo.ANTI_CLOCKWISE;\n                        } else {\n                            newStereo = Stereo.CLOCKWISE;\n                        }\n                    }\n                }\n            }\n        }\n        return new LigancyFourChirality(chiralAtom, newAtoms, newStereo);\n    }", "signature": "LigancyFourChirality project(ILigand[] newOrder)", "full_signature": "public LigancyFourChirality project(ILigand[] newOrder)", "class_method_signature": "LigancyFourChirality.project(ILigand[] newOrder)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "equals", "getLigandAtom", "getLigandAtom", "equals", "getLigandAtom", "getLigandAtom", "swap"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}