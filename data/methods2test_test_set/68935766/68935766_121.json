{"test_class": {"identifier": "PlayerTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Player player = mock(Player.class);", "modifier": "static", "type": "Player", "declarator": "player = mock(Player.class)", "var_name": "player"}, {"original_string": "static CommandSender sender = mock(CommandSender.class);", "modifier": "static", "type": "CommandSender", "declarator": "sender = mock(CommandSender.class)", "var_name": "sender"}, {"original_string": "PlayerType type = new PlayerType();", "modifier": "", "type": "PlayerType", "declarator": "type = new PlayerType()", "var_name": "type"}], "file": "commons/src/test/java/com/karuslabs/commons/command/types/PlayerTypeTest.java"}, "test_case": {"identifier": "parse_throws_exception", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void parse_throws_exception() throws CommandSyntaxException {\n        assertEquals(\n            \"Unknown player: invalid\",\n            assertThrows(CommandSyntaxException.class, () -> type.parse(new StringReader(\"invalid\"))).getRawMessage().toString()\n        );\n    }", "signature": "void parse_throws_exception()", "full_signature": "@Test void parse_throws_exception()", "class_method_signature": "PlayerTypeTest.parse_throws_exception()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "getRawMessage", "assertThrows", "parse"]}, "focal_class": {"identifier": "PlayerType", "superclass": "", "interfaces": "implements WordType<Player>", "fields": [{"original_string": "private static final DynamicCommandExceptionType EXCEPTION = new DynamicCommandExceptionType(name -> new LiteralMessage(\"Unknown player: \" + name));", "modifier": "private static final", "type": "DynamicCommandExceptionType", "declarator": "EXCEPTION = new DynamicCommandExceptionType(name -> new LiteralMessage(\"Unknown player: \" + name))", "var_name": "EXCEPTION"}, {"original_string": "private static final List<String> EXAMPLES = List.of(\"Bob\", \"Pante\");", "modifier": "private static final", "type": "List<String>", "declarator": "EXAMPLES = List.of(\"Bob\", \"Pante\")", "var_name": "EXAMPLES"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}], "methods": [{"identifier": "PlayerType", "parameters": "()", "modifiers": "public", "return": "", "signature": " PlayerType()", "full_signature": "public  PlayerType()", "class_method_signature": "PlayerType.PlayerType()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(StringReader reader)", "modifiers": "@Override public", "return": "Player", "signature": "Player parse(StringReader reader)", "full_signature": "@Override public Player parse(StringReader reader)", "class_method_signature": "PlayerType.parse(StringReader reader)", "testcase": false, "constructor": false}, {"identifier": "listSuggestions", "parameters": "(S source, CommandContext<S> context, SuggestionsBuilder builder)", "modifiers": "@Override public", "return": "CompletableFuture<Suggestions>", "signature": "CompletableFuture<Suggestions> listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "full_signature": "@Override public CompletableFuture<Suggestions> listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "class_method_signature": "PlayerType.listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getExamples", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getExamples()", "full_signature": "@Override public List<String> getExamples()", "class_method_signature": "PlayerType.getExamples()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/types/PlayerType.java"}, "focal_method": {"identifier": "parse", "parameters": "(StringReader reader)", "modifiers": "@Override public", "return": "Player", "body": "@Override\n    public Player parse(StringReader reader) throws CommandSyntaxException {\n        var name = reader.readUnquotedString();\n        var player = Bukkit.getPlayerExact(name);\n        \n        if (player == null) {\n            throw EXCEPTION.createWithContext(reader, name);\n        }\n        \n        return player;\n    }", "signature": "Player parse(StringReader reader)", "full_signature": "@Override public Player parse(StringReader reader)", "class_method_signature": "PlayerType.parse(StringReader reader)", "testcase": false, "constructor": false, "invocations": ["readUnquotedString", "getPlayerExact", "createWithContext"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}