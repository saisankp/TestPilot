{"test_class": {"identifier": "ReplayablePseudoRandomTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReplayablePseudoRandom random;", "modifier": "private", "type": "ReplayablePseudoRandom", "declarator": "random", "var_name": "random"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/random/ReplayablePseudoRandomTest.java"}, "test_case": {"identifier": "randomShouldBeSameWithDifferentSeeds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void randomShouldBeSameWithDifferentSeeds() {\n\n        double seed = System.currentTimeMillis() % 100000000;\n\n        ReplayablePseudoRandom random1 = new ReplayablePseudoRandom(seed);\n        ReplayablePseudoRandom random2 = new ReplayablePseudoRandom(seed);\n\n        String firstRandom = \"\";\n        for (int i = 0; i < 10000; i++) {\n            float number = random1.nextInt(2);\n            firstRandom = firstRandom + number;\n        }\n\n        String secondRandom = \"\";\n        for (int i = 0; i < 10000; i++) {\n            float number = random2.nextInt(2);\n            secondRandom = secondRandom + number;\n        }\n\n        assertEquals(firstRandom, secondRandom);\n    }", "signature": "void randomShouldBeSameWithDifferentSeeds()", "full_signature": "@Test public void randomShouldBeSameWithDifferentSeeds()", "class_method_signature": "ReplayablePseudoRandomTest.randomShouldBeSameWithDifferentSeeds()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "nextInt", "nextInt", "assertEquals"]}, "focal_class": {"identifier": "ReplayablePseudoRandom", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double seed;", "modifier": "private", "type": "double", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "ReplayablePseudoRandom", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReplayablePseudoRandom()", "full_signature": "public  ReplayablePseudoRandom()", "class_method_signature": "ReplayablePseudoRandom.ReplayablePseudoRandom()", "testcase": false, "constructor": true}, {"identifier": "ReplayablePseudoRandom", "parameters": "(double seed)", "modifiers": "public", "return": "", "signature": " ReplayablePseudoRandom(double seed)", "full_signature": "public  ReplayablePseudoRandom(double seed)", "class_method_signature": "ReplayablePseudoRandom.ReplayablePseudoRandom(double seed)", "testcase": false, "constructor": true}, {"identifier": "random", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double random()", "full_signature": "public double random()", "class_method_signature": "ReplayablePseudoRandom.random()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "(int bound)", "modifiers": "public", "return": "int", "signature": "int nextInt(int bound)", "full_signature": "public int nextInt(int bound)", "class_method_signature": "ReplayablePseudoRandom.nextInt(int bound)", "testcase": false, "constructor": false}, {"identifier": "nextDouble", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nextDouble()", "full_signature": "public double nextDouble()", "class_method_signature": "ReplayablePseudoRandom.nextDouble()", "testcase": false, "constructor": false}, {"identifier": "nextBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean nextBoolean()", "full_signature": "public boolean nextBoolean()", "class_method_signature": "ReplayablePseudoRandom.nextBoolean()", "testcase": false, "constructor": false}, {"identifier": "nextFloat", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float nextFloat()", "full_signature": "public float nextFloat()", "class_method_signature": "ReplayablePseudoRandom.nextFloat()", "testcase": false, "constructor": false}, {"identifier": "getSeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeed()", "full_signature": "public double getSeed()", "class_method_signature": "ReplayablePseudoRandom.getSeed()", "testcase": false, "constructor": false}, {"identifier": "setSeed", "parameters": "(double seed)", "modifiers": "public", "return": "void", "signature": "void setSeed(double seed)", "full_signature": "public void setSeed(double seed)", "class_method_signature": "ReplayablePseudoRandom.setSeed(double seed)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/random/ReplayablePseudoRandom.java"}, "focal_method": {"identifier": "nextInt", "parameters": "(int bound)", "modifiers": "public", "return": "int", "body": "public int nextInt(int bound) {\n        return (int) (this.nextDouble() * bound);\n    }", "signature": "int nextInt(int bound)", "full_signature": "public int nextInt(int bound)", "class_method_signature": "ReplayablePseudoRandom.nextInt(int bound)", "testcase": false, "constructor": false, "invocations": ["nextDouble"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}