{"test_class": {"identifier": "GeneralEnvelopeTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/referencing/src/test/java/org/geotools/geometry/GeneralEnvelopeTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        /*\n         * Initialize an empty envelope. The new envelope is empty and null.\n         */\n        final GeneralEnvelope e1 = new GeneralEnvelope(4);\n        assertTrue(e1.isEmpty());\n        assertTrue(e1.isNull());\n        assertEquals(e1.getLowerCorner(), e1.getUpperCorner());\n        /*\n         * Initialize with arbitrary coordinate values. Should not be empty anymore.\n         */\n        for (int i = e1.getDimension(); --i >= 0;) {\n            e1.setRange(i, i * 5 + 2, i * 6 + 5);\n        }\n        assertFalse(e1.isNull());\n        assertFalse(e1.isEmpty());\n        assertFalse(e1.getLowerCorner().equals(e1.getUpperCorner()));\n        /*\n         * Creates a new envelope initialized with the same coordinate values. The two envelope\n         * should be equals.\n         */\n        final GeneralEnvelope e2 = new GeneralEnvelope(e1);\n        assertPositionEquals(e1.getLowerCorner(), e2.getLowerCorner());\n        assertPositionEquals(e1.getUpperCorner(), e2.getUpperCorner());\n        assertTrue(e1.contains(e2, true));\n        assertFalse(e1.contains(e2, false));\n        assertNotSame(e1, e2);\n        assertEquals(e1, e2);\n        assertTrue(e1.equals(e2, 1E-4, true));\n        assertTrue(e1.equals(e2, 1E-4, false));\n        assertEquals(e1.hashCode(), e2.hashCode());\n        /*\n         * Offset slightly one coordinate value. Should not be equals anymore, except when comparing\n         * with a tolerance value.\n         */\n        e2.setRange(2, e2.getMinimum(2) + 3E-5, e2.getMaximum(2) - 3E-5);\n        assertTrue(e1.contains(e2, true));\n        assertFalse(e1.contains(e2, false));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2, 1E-4, true));\n        assertTrue(e1.equals(e2, 1E-4, false));\n        assertFalse(e1.hashCode() == e2.hashCode());\n        /*\n         * Apply a greater offset. Should not be equals, even when comparing with a tolerance value.\n         */\n        e2.setRange(1, e2.getMinimum(1) + 3, e2.getMaximum(1) - 3);\n        assertTrue(e1.contains(e2, true));\n        assertFalse(e1.contains(e2, false));\n        assertFalse(e1.equals(e2));\n        assertFalse(e1.equals(e2, 1E-4, true));\n        assertFalse(e1.equals(e2, 1E-4, false));\n        assertFalse(e1.hashCode() == e2.hashCode());\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "GeneralEnvelopeTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "assertTrue", "isNull", "assertEquals", "getLowerCorner", "getUpperCorner", "getDimension", "setRange", "assertFalse", "isNull", "assertFalse", "isEmpty", "assertFalse", "equals", "getLowerCorner", "getUpperCorner", "assertPositionEquals", "getLowerCorner", "getLowerCorner", "assertPositionEquals", "getUpperCorner", "getUpperCorner", "assertTrue", "contains", "assertFalse", "contains", "assertNotSame", "assertEquals", "assertTrue", "equals", "assertTrue", "equals", "assertEquals", "hashCode", "hashCode", "setRange", "getMinimum", "getMaximum", "assertTrue", "contains", "assertFalse", "contains", "assertFalse", "equals", "assertTrue", "equals", "assertTrue", "equals", "assertFalse", "hashCode", "hashCode", "setRange", "getMinimum", "getMaximum", "assertTrue", "contains", "assertFalse", "contains", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "hashCode", "hashCode"]}, "focal_class": {"identifier": "GeneralEnvelope", "superclass": "extends AbstractEnvelope", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1752330560227688940L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1752330560227688940L", "var_name": "serialVersionUID"}, {"original_string": "private double[] ordinates;", "modifier": "private", "type": "double[]", "declarator": "ordinates", "var_name": "ordinates"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}], "methods": [{"identifier": "GeneralEnvelope", "parameters": "(final int dimension)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final int dimension)", "full_signature": "public  GeneralEnvelope(final int dimension)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final int dimension)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final double min, final double max)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final double min, final double max)", "full_signature": "public  GeneralEnvelope(final double min, final double max)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final double min, final double max)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final double[] minDP, final double[] maxDP)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final double[] minDP, final double[] maxDP)", "full_signature": "public  GeneralEnvelope(final double[] minDP, final double[] maxDP)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final double[] minDP, final double[] maxDP)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final GeneralDirectPosition minDP, final GeneralDirectPosition maxDP)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final GeneralDirectPosition minDP, final GeneralDirectPosition maxDP)", "full_signature": "public  GeneralEnvelope(final GeneralDirectPosition minDP, final GeneralDirectPosition maxDP)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final GeneralDirectPosition minDP, final GeneralDirectPosition maxDP)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final CoordinateReferenceSystem crs)", "full_signature": "public  GeneralEnvelope(final CoordinateReferenceSystem crs)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": true}, {"identifier": "toGeneralEnvelope", "parameters": "(final Envelope envelope)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope toGeneralEnvelope(final Envelope envelope)", "full_signature": "public static GeneralEnvelope toGeneralEnvelope(final Envelope envelope)", "class_method_signature": "GeneralEnvelope.toGeneralEnvelope(final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "GeneralEnvelope", "parameters": "(final Envelope envelope)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final Envelope envelope)", "full_signature": "public  GeneralEnvelope(final Envelope envelope)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final Envelope envelope)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final GeographicBoundingBox box)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final GeographicBoundingBox box)", "full_signature": "public  GeneralEnvelope(final GeographicBoundingBox box)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final GeographicBoundingBox box)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final Rectangle2D rect)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final Rectangle2D rect)", "full_signature": "public  GeneralEnvelope(final Rectangle2D rect)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final Rectangle2D rect)", "testcase": false, "constructor": true}, {"identifier": "GeneralEnvelope", "parameters": "(final GridEnvelope gridRange, final PixelInCell anchor,\n            final MathTransform gridToCRS, final CoordinateReferenceSystem crs)", "modifiers": "public", "return": "", "signature": " GeneralEnvelope(final GridEnvelope gridRange, final PixelInCell anchor,\n            final MathTransform gridToCRS, final CoordinateReferenceSystem crs)", "full_signature": "public  GeneralEnvelope(final GridEnvelope gridRange, final PixelInCell anchor,\n            final MathTransform gridToCRS, final CoordinateReferenceSystem crs)", "class_method_signature": "GeneralEnvelope.GeneralEnvelope(final GridEnvelope gridRange, final PixelInCell anchor,\n            final MathTransform gridToCRS, final CoordinateReferenceSystem crs)", "testcase": false, "constructor": true}, {"identifier": "ensureNonNull", "parameters": "(final String name, final Object object)", "modifiers": "private static", "return": "void", "signature": "void ensureNonNull(final String name, final Object object)", "full_signature": "private static void ensureNonNull(final String name, final Object object)", "class_method_signature": "GeneralEnvelope.ensureNonNull(final String name, final Object object)", "testcase": false, "constructor": false}, {"identifier": "ensureSameDimension", "parameters": "(final int dim1, final int dim2)", "modifiers": "private static", "return": "void", "signature": "void ensureSameDimension(final int dim1, final int dim2)", "full_signature": "private static void ensureSameDimension(final int dim1, final int dim2)", "class_method_signature": "GeneralEnvelope.ensureSameDimension(final int dim1, final int dim2)", "testcase": false, "constructor": false}, {"identifier": "checkCoordinates", "parameters": "(final double[] ordinates)", "modifiers": "private static", "return": "void", "signature": "void checkCoordinates(final double[] ordinates)", "full_signature": "private static void checkCoordinates(final double[] ordinates)", "class_method_signature": "GeneralEnvelope.checkCoordinates(final double[] ordinates)", "testcase": false, "constructor": false}, {"identifier": "getCoordinateReferenceSystem", "parameters": "()", "modifiers": "public final", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem()", "full_signature": "public final CoordinateReferenceSystem getCoordinateReferenceSystem()", "class_method_signature": "GeneralEnvelope.getCoordinateReferenceSystem()", "testcase": false, "constructor": false}, {"identifier": "setCoordinateReferenceSystem", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public", "return": "void", "signature": "void setCoordinateReferenceSystem(final CoordinateReferenceSystem crs)", "full_signature": "public void setCoordinateReferenceSystem(final CoordinateReferenceSystem crs)", "class_method_signature": "GeneralEnvelope.setCoordinateReferenceSystem(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(final boolean crsDomain)", "modifiers": "public", "return": "boolean", "signature": "boolean normalize(final boolean crsDomain)", "full_signature": "public boolean normalize(final boolean crsDomain)", "class_method_signature": "GeneralEnvelope.normalize(final boolean crsDomain)", "testcase": false, "constructor": false}, {"identifier": "getDimension", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getDimension()", "full_signature": "public final int getDimension()", "class_method_signature": "GeneralEnvelope.getDimension()", "testcase": false, "constructor": false}, {"identifier": "getLowerCorner", "parameters": "()", "modifiers": "@Override public", "return": "DirectPosition", "signature": "DirectPosition getLowerCorner()", "full_signature": "@Override public DirectPosition getLowerCorner()", "class_method_signature": "GeneralEnvelope.getLowerCorner()", "testcase": false, "constructor": false}, {"identifier": "getUpperCorner", "parameters": "()", "modifiers": "@Override public", "return": "DirectPosition", "signature": "DirectPosition getUpperCorner()", "full_signature": "@Override public DirectPosition getUpperCorner()", "class_method_signature": "GeneralEnvelope.getUpperCorner()", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "()", "modifiers": "public", "return": "DirectPosition", "signature": "DirectPosition getMedian()", "full_signature": "public DirectPosition getMedian()", "class_method_signature": "GeneralEnvelope.getMedian()", "testcase": false, "constructor": false}, {"identifier": "indexOutOfBounds", "parameters": "(final int dimension)", "modifiers": "private static", "return": "IndexOutOfBoundsException", "signature": "IndexOutOfBoundsException indexOutOfBounds(final int dimension)", "full_signature": "private static IndexOutOfBoundsException indexOutOfBounds(final int dimension)", "class_method_signature": "GeneralEnvelope.indexOutOfBounds(final int dimension)", "testcase": false, "constructor": false}, {"identifier": "getMinimum", "parameters": "(final int dimension)", "modifiers": "public final", "return": "double", "signature": "double getMinimum(final int dimension)", "full_signature": "public final double getMinimum(final int dimension)", "class_method_signature": "GeneralEnvelope.getMinimum(final int dimension)", "testcase": false, "constructor": false}, {"identifier": "getMaximum", "parameters": "(final int dimension)", "modifiers": "public final", "return": "double", "signature": "double getMaximum(final int dimension)", "full_signature": "public final double getMaximum(final int dimension)", "class_method_signature": "GeneralEnvelope.getMaximum(final int dimension)", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "(final int dimension)", "modifiers": "public final", "return": "double", "signature": "double getMedian(final int dimension)", "full_signature": "public final double getMedian(final int dimension)", "class_method_signature": "GeneralEnvelope.getMedian(final int dimension)", "testcase": false, "constructor": false}, {"identifier": "getSpan", "parameters": "(final int dimension)", "modifiers": "public final", "return": "double", "signature": "double getSpan(final int dimension)", "full_signature": "public final double getSpan(final int dimension)", "class_method_signature": "GeneralEnvelope.getSpan(final int dimension)", "testcase": false, "constructor": false}, {"identifier": "getSpan", "parameters": "(final int dimension, final Unit<?> unit)", "modifiers": "public", "return": "double", "signature": "double getSpan(final int dimension, final Unit<?> unit)", "full_signature": "public double getSpan(final int dimension, final Unit<?> unit)", "class_method_signature": "GeneralEnvelope.getSpan(final int dimension, final Unit<?> unit)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(final int dimension, double minimum, double maximum)", "modifiers": "public", "return": "void", "signature": "void setRange(final int dimension, double minimum, double maximum)", "full_signature": "public void setRange(final int dimension, double minimum, double maximum)", "class_method_signature": "GeneralEnvelope.setRange(final int dimension, double minimum, double maximum)", "testcase": false, "constructor": false}, {"identifier": "setEnvelope", "parameters": "(final double... ordinates)", "modifiers": "public", "return": "void", "signature": "void setEnvelope(final double... ordinates)", "full_signature": "public void setEnvelope(final double... ordinates)", "class_method_signature": "GeneralEnvelope.setEnvelope(final double... ordinates)", "testcase": false, "constructor": false}, {"identifier": "setEnvelope", "parameters": "(final GeneralEnvelope envelope)", "modifiers": "public", "return": "void", "signature": "void setEnvelope(final GeneralEnvelope envelope)", "full_signature": "public void setEnvelope(final GeneralEnvelope envelope)", "class_method_signature": "GeneralEnvelope.setEnvelope(final GeneralEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "setToInfinite", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setToInfinite()", "full_signature": "public void setToInfinite()", "class_method_signature": "GeneralEnvelope.setToInfinite()", "testcase": false, "constructor": false}, {"identifier": "isInfinite", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfinite()", "full_signature": "public boolean isInfinite()", "class_method_signature": "GeneralEnvelope.isInfinite()", "testcase": false, "constructor": false}, {"identifier": "setToNull", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setToNull()", "full_signature": "public void setToNull()", "class_method_signature": "GeneralEnvelope.setToNull()", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNull()", "full_signature": "public boolean isNull()", "class_method_signature": "GeneralEnvelope.isNull()", "testcase": false, "constructor": false}, {"identifier": "isNilCoordinates", "parameters": "(final double[] ordinates)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNilCoordinates(final double[] ordinates)", "full_signature": "private static boolean isNilCoordinates(final double[] ordinates)", "class_method_signature": "GeneralEnvelope.isNilCoordinates(final double[] ordinates)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "GeneralEnvelope.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isEmptyOrdinates", "parameters": "( double ordinates[] )", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmptyOrdinates( double ordinates[] )", "full_signature": "private static boolean isEmptyOrdinates( double ordinates[] )", "class_method_signature": "GeneralEnvelope.isEmptyOrdinates( double ordinates[] )", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreMetadata", "parameters": "(final CoordinateReferenceSystem crs1,\n            final CoordinateReferenceSystem crs2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equalsIgnoreMetadata(final CoordinateReferenceSystem crs1,\n            final CoordinateReferenceSystem crs2)", "full_signature": "private static boolean equalsIgnoreMetadata(final CoordinateReferenceSystem crs1,\n            final CoordinateReferenceSystem crs2)", "class_method_signature": "GeneralEnvelope.equalsIgnoreMetadata(final CoordinateReferenceSystem crs1,\n            final CoordinateReferenceSystem crs2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final DirectPosition position)", "modifiers": "public", "return": "void", "signature": "void add(final DirectPosition position)", "full_signature": "public void add(final DirectPosition position)", "class_method_signature": "GeneralEnvelope.add(final DirectPosition position)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Envelope envelope)", "modifiers": "public", "return": "void", "signature": "void add(final Envelope envelope)", "full_signature": "public void add(final Envelope envelope)", "class_method_signature": "GeneralEnvelope.add(final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final DirectPosition position)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(final DirectPosition position)", "full_signature": "public boolean contains(final DirectPosition position)", "class_method_signature": "GeneralEnvelope.contains(final DirectPosition position)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final Envelope envelope, final boolean edgesInclusive)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(final Envelope envelope, final boolean edgesInclusive)", "full_signature": "public boolean contains(final Envelope envelope, final boolean edgesInclusive)", "class_method_signature": "GeneralEnvelope.contains(final Envelope envelope, final boolean edgesInclusive)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(final Envelope envelope, final boolean edgesInclusive)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(final Envelope envelope, final boolean edgesInclusive)", "full_signature": "public boolean intersects(final Envelope envelope, final boolean edgesInclusive)", "class_method_signature": "GeneralEnvelope.intersects(final Envelope envelope, final boolean edgesInclusive)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(final Envelope envelope)", "modifiers": "public", "return": "void", "signature": "void intersect(final Envelope envelope)", "full_signature": "public void intersect(final Envelope envelope)", "class_method_signature": "GeneralEnvelope.intersect(final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "getSubEnvelope", "parameters": "(final int lower, final int upper)", "modifiers": "public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getSubEnvelope(final int lower, final int upper)", "full_signature": "public GeneralEnvelope getSubEnvelope(final int lower, final int upper)", "class_method_signature": "GeneralEnvelope.getSubEnvelope(final int lower, final int upper)", "testcase": false, "constructor": false}, {"identifier": "getReducedEnvelope", "parameters": "(final int lower, final int upper)", "modifiers": "public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getReducedEnvelope(final int lower, final int upper)", "full_signature": "public GeneralEnvelope getReducedEnvelope(final int lower, final int upper)", "class_method_signature": "GeneralEnvelope.getReducedEnvelope(final int lower, final int upper)", "testcase": false, "constructor": false}, {"identifier": "toRectangle2D", "parameters": "()", "modifiers": "public", "return": "Rectangle2D", "signature": "Rectangle2D toRectangle2D()", "full_signature": "public Rectangle2D toRectangle2D()", "class_method_signature": "GeneralEnvelope.toRectangle2D()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GeneralEnvelope.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object object)", "full_signature": "@Override public boolean equals(final Object object)", "class_method_signature": "GeneralEnvelope.equals(final Object object)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Envelope envelope, final double eps, final boolean epsIsRelative)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(final Envelope envelope, final double eps, final boolean epsIsRelative)", "full_signature": "public boolean equals(final Envelope envelope, final double eps, final boolean epsIsRelative)", "class_method_signature": "GeneralEnvelope.equals(final Envelope envelope, final double eps, final boolean epsIsRelative)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope clone()", "full_signature": "@Override public GeneralEnvelope clone()", "class_method_signature": "GeneralEnvelope.clone()", "testcase": false, "constructor": false}], "file": "modules/library/referencing/src/main/java/org/geotools/geometry/GeneralEnvelope.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object object)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(final Object object) {\n        if (object != null && object.getClass().equals(getClass())) {\n            final GeneralEnvelope that = (GeneralEnvelope) object;\n            return Arrays.equals(this.ordinates, that.ordinates)\n                    && Utilities.equals(this.crs, that.crs);\n        }\n        return false;\n    }", "signature": "boolean equals(final Object object)", "full_signature": "@Override public boolean equals(final Object object)", "class_method_signature": "GeneralEnvelope.equals(final Object object)", "testcase": false, "constructor": false, "invocations": ["equals", "getClass", "getClass", "equals", "equals"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}