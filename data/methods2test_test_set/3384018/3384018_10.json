{"test_class": {"identifier": "TestRequestAddCookies", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpHost target;", "modifier": "private", "type": "HttpHost", "declarator": "target", "var_name": "target"}, {"original_string": "private CookieStore cookieStore;", "modifier": "private", "type": "CookieStore", "declarator": "cookieStore", "var_name": "cookieStore"}, {"original_string": "private CookieSpecRegistry cookieSpecRegistry;", "modifier": "private", "type": "CookieSpecRegistry", "declarator": "cookieSpecRegistry", "var_name": "cookieSpecRegistry"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestRequestAddCookies.java"}, "test_case": {"identifier": "testRequestParameterCheck", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void testRequestParameterCheck() throws Exception {\n        HttpContext context = new BasicHttpContext();\n        HttpRequestInterceptor interceptor = new RequestAddCookies();\n        interceptor.process(null, context);\n    }", "signature": "void testRequestParameterCheck()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testRequestParameterCheck()", "class_method_signature": "TestRequestAddCookies.testRequestParameterCheck()", "testcase": true, "constructor": false, "invocations": ["process"]}, "focal_class": {"identifier": "RequestAddCookies", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "RequestAddCookies", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequestAddCookies()", "full_signature": "public  RequestAddCookies()", "class_method_signature": "RequestAddCookies.RequestAddCookies()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestAddCookies.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/RequestAddCookies.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpRequest request, final HttpContext context)\n            throws HttpException, IOException {\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n        if (context == null) {\n            throw new IllegalArgumentException(\"HTTP context may not be null\");\n        }\n\n        String method = request.getRequestLine().getMethod();\n        if (method.equalsIgnoreCase(\"CONNECT\")) {\n            return;\n        }\n\n        // Obtain cookie store\n        CookieStore cookieStore = (CookieStore) context.getAttribute(\n                ClientContext.COOKIE_STORE);\n        if (cookieStore == null) {\n            this.log.debug(\"Cookie store not specified in HTTP context\");\n            return;\n        }\n\n        // Obtain the registry of cookie specs\n        CookieSpecRegistry registry = (CookieSpecRegistry) context.getAttribute(\n                ClientContext.COOKIESPEC_REGISTRY);\n        if (registry == null) {\n            this.log.debug(\"CookieSpec registry not specified in HTTP context\");\n            return;\n        }\n\n        // Obtain the target host (required)\n        HttpHost targetHost = (HttpHost) context.getAttribute(\n                ExecutionContext.HTTP_TARGET_HOST);\n        if (targetHost == null) {\n            this.log.debug(\"Target host not set in the context\");\n            return;\n        }\n\n        // Obtain the client connection (required)\n        HttpRoutedConnection conn = (HttpRoutedConnection) context.getAttribute(\n                ExecutionContext.HTTP_CONNECTION);\n        if (conn == null) {\n            this.log.debug(\"HTTP connection not set in the context\");\n            return;\n        }\n\n        String policy = HttpClientParams.getCookiePolicy(request.getParams());\n        if (this.log.isDebugEnabled()) {\n            this.log.debug(\"CookieSpec selected: \" + policy);\n        }\n\n        URI requestURI;\n        if (request instanceof HttpUriRequest) {\n            requestURI = ((HttpUriRequest) request).getURI();\n        } else {\n            try {\n                requestURI = new URI(request.getRequestLine().getUri());\n            } catch (URISyntaxException ex) {\n                throw new ProtocolException(\"Invalid request URI: \" +\n                        request.getRequestLine().getUri(), ex);\n            }\n        }\n\n        String hostName = targetHost.getHostName();\n        int port = targetHost.getPort();\n        if (port < 0) {\n            HttpRoute route = conn.getRoute();\n            if (route.getHopCount() == 1) {\n                port = conn.getRemotePort();\n            } else {\n                // Target port will be selected by the proxy.\n                // Use conventional ports for known schemes\n                String scheme = targetHost.getSchemeName();\n                if (scheme.equalsIgnoreCase(\"http\")) {\n                    port = 80;\n                } else if (scheme.equalsIgnoreCase(\"https\")) {\n                    port = 443;\n                } else {\n                    port = 0;\n                }\n            }\n        }\n\n        CookieOrigin cookieOrigin = new CookieOrigin(\n                hostName,\n                port,\n                requestURI.getPath(),\n                conn.isSecure());\n\n        // Get an instance of the selected cookie policy\n        CookieSpec cookieSpec = registry.getCookieSpec(policy, request.getParams());\n        // Get all cookies available in the HTTP state\n        List<Cookie> cookies = new ArrayList<Cookie>(cookieStore.getCookies());\n        // Find cookies matching the given origin\n        List<Cookie> matchedCookies = new ArrayList<Cookie>();\n        Date now = new Date();\n        for (Cookie cookie : cookies) {\n            if (!cookie.isExpired(now)) {\n                if (cookieSpec.match(cookie, cookieOrigin)) {\n                    if (this.log.isDebugEnabled()) {\n                        this.log.debug(\"Cookie \" + cookie + \" match \" + cookieOrigin);\n                    }\n                    matchedCookies.add(cookie);\n                }\n            } else {\n                if (this.log.isDebugEnabled()) {\n                    this.log.debug(\"Cookie \" + cookie + \" expired\");\n                }\n            }\n        }\n        // Generate Cookie request headers\n        if (!matchedCookies.isEmpty()) {\n            List<Header> headers = cookieSpec.formatCookies(matchedCookies);\n            for (Header header : headers) {\n                request.addHeader(header);\n            }\n        }\n\n        int ver = cookieSpec.getVersion();\n        if (ver > 0) {\n            boolean needVersionHeader = false;\n            for (Cookie cookie : matchedCookies) {\n                if (ver != cookie.getVersion() || !(cookie instanceof SetCookie2)) {\n                    needVersionHeader = true;\n                }\n            }\n\n            if (needVersionHeader) {\n                Header header = cookieSpec.getVersionHeader();\n                if (header != null) {\n                    // Advertise cookie version support\n                    request.addHeader(header);\n                }\n            }\n        }\n\n        // Stick the CookieSpec and CookieOrigin instances to the HTTP context\n        // so they could be obtained by the response interceptor\n        context.setAttribute(ClientContext.COOKIE_SPEC, cookieSpec);\n        context.setAttribute(ClientContext.COOKIE_ORIGIN, cookieOrigin);\n    }", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestAddCookies.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getMethod", "getRequestLine", "equalsIgnoreCase", "getAttribute", "debug", "getAttribute", "debug", "getAttribute", "debug", "getAttribute", "debug", "getCookiePolicy", "getParams", "isDebugEnabled", "debug", "getURI", "getUri", "getRequestLine", "getUri", "getRequestLine", "getHostName", "getPort", "getRoute", "getHopCount", "getRemotePort", "getSchemeName", "equalsIgnoreCase", "equalsIgnoreCase", "getPath", "isSecure", "getCookieSpec", "getParams", "getCookies", "isExpired", "match", "isDebugEnabled", "debug", "add", "isDebugEnabled", "debug", "isEmpty", "formatCookies", "addHeader", "getVersion", "getVersion", "getVersionHeader", "addHeader", "setAttribute", "setAttribute"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}