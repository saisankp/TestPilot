{"test_class": {"identifier": "OptionalConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/converters/OptionalConverterTest.java"}, "test_case": {"identifier": "nullConversionYieldsEmptyOptional", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nullConversionYieldsEmptyOptional() {\n        ConversionContext context = Mockito.mock(ConversionContext.class);\n        final Optional<?> result = new OptionalConverter().convert(null, context);\n        assertThat(result).isNotNull();\n        assertThat(result.isPresent()).isFalse();\n    }", "signature": "void nullConversionYieldsEmptyOptional()", "full_signature": "@Test public void nullConversionYieldsEmptyOptional()", "class_method_signature": "OptionalConverterTest.nullConversionYieldsEmptyOptional()", "testcase": true, "constructor": false, "invocations": ["mock", "convert", "isNotNull", "assertThat", "isFalse", "assertThat", "isPresent"]}, "focal_class": {"identifier": "OptionalConverter", "superclass": "", "interfaces": "implements PropertyConverter<Optional>", "fields": [], "methods": [{"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Optional", "signature": "Optional convert(String value, ConversionContext ctx)", "full_signature": "@Override public Optional convert(String value, ConversionContext ctx)", "class_method_signature": "OptionalConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "OptionalConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "OptionalConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/converters/OptionalConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Optional", "body": "@Override\n    public Optional convert(String value, ConversionContext ctx) {\n        if(value==null){\n            return Optional.empty();\n        }\n        try{\n            Type targetType = ctx.getTargetType().getType();\n            ParameterizedType pt = (ParameterizedType) targetType;\n            if(String.class.equals(pt.getActualTypeArguments()[0])){\n                return Optional.of(value);\n            }\n            ConvertQuery converter = new ConvertQuery(value, TypeLiteral.of(pt.getActualTypeArguments()[0]));\n            return Optional.ofNullable(ctx.getConfiguration().adapt(converter));\n        }catch(Exception e){\n            throw new ConfigException(\"Error evaluating config createValue.\", e);\n        }\n    }", "signature": "Optional convert(String value, ConversionContext ctx)", "full_signature": "@Override public Optional convert(String value, ConversionContext ctx)", "class_method_signature": "OptionalConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false, "invocations": ["empty", "getType", "getTargetType", "equals", "getActualTypeArguments", "of", "of", "getActualTypeArguments", "ofNullable", "adapt", "getConfiguration"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}