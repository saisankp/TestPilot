{"test_class": {"identifier": "MemoryDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeMemoryService myService = new FakeMemoryService();", "modifier": "private final", "type": "FakeMemoryService", "declarator": "myService = new FakeMemoryService()", "var_name": "myService"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"MemoryDataSeriesTestChannel\", myService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"MemoryDataSeriesTestChannel\", myService)", "var_name": "myGrpcChannel"}], "file": "profilers/testSrc/com/android/tools/profilers/memory/MemoryDataSeriesTest.java"}, "test_case": {"identifier": "testDataIncludeMultipleSamples", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDataIncludeMultipleSamples() {\n    MemoryData memoryData = MemoryData.newBuilder()\n      .setEndTimestamp(TimeUnit.MICROSECONDS.toNanos(555))\n      .addMemSamples(0, MemoryData.MemorySample.newBuilder()\n        .setTimestamp(TimeUnit.MICROSECONDS.toNanos(333))\n        .setMemoryUsage(Memory.MemoryUsageData.newBuilder()\n          .setJavaMem(333).setTotalMem(333)))\n      .addMemSamples(1, MemoryData.MemorySample.newBuilder()\n        .setTimestamp(TimeUnit.MICROSECONDS.toNanos(444))\n        .setMemoryUsage(Memory.MemoryUsageData.newBuilder()\n          .setNativeMem(444).setTotalMem(444)))\n      .build();\n    myService.setMemoryData(memoryData);\n    MemoryDataSeries series =\n      new MemoryDataSeries(new ProfilerClient(myGrpcChannel.getName()).getMemoryClient(), ProfilersTestData.SESSION_DATA, data -> 111L);\n    List<SeriesData<Long>> seriesDataList = series.getDataForRange(new Range(0, Double.MAX_VALUE));\n    assertEquals(2, seriesDataList.size());\n    assertEquals(333, seriesDataList.get(0).x);\n    assertEquals(111, seriesDataList.get(0).value.longValue());\n    assertEquals(444, seriesDataList.get(1).x);\n    assertEquals(111, seriesDataList.get(1).value.longValue());\n  }", "signature": "void testDataIncludeMultipleSamples()", "full_signature": "@Test public void testDataIncludeMultipleSamples()", "class_method_signature": "MemoryDataSeriesTest.testDataIncludeMultipleSamples()", "testcase": true, "constructor": false, "invocations": ["build", "addMemSamples", "addMemSamples", "setEndTimestamp", "newBuilder", "toNanos", "setMemoryUsage", "setTimestamp", "newBuilder", "toNanos", "setTotalMem", "setJavaMem", "newBuilder", "setMemoryUsage", "setTimestamp", "newBuilder", "toNanos", "setTotalMem", "setNativeMem", "newBuilder", "setMemoryData", "getMemoryClient", "getName", "getDataForRange", "assertEquals", "size", "assertEquals", "get", "assertEquals", "longValue", "get", "assertEquals", "get", "assertEquals", "longValue", "get"]}, "focal_class": {"identifier": "MemoryDataSeries", "superclass": "", "interfaces": "implements DataSeries<Long>", "fields": [{"original_string": "@NotNull private MemoryServiceGrpc.MemoryServiceBlockingStub myClient;", "modifier": "@NotNull private", "type": "MemoryServiceGrpc.MemoryServiceBlockingStub", "declarator": "myClient", "var_name": "myClient"}, {"original_string": "@NotNull private final Common.Session mySession;", "modifier": "@NotNull private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}, {"original_string": "@NotNull private Function<MemorySample, Long> mySampleTransformer;", "modifier": "@NotNull private", "type": "Function<MemorySample, Long>", "declarator": "mySampleTransformer", "var_name": "mySampleTransformer"}], "methods": [{"identifier": "MemoryDataSeries", "parameters": "(@NotNull MemoryServiceGrpc.MemoryServiceBlockingStub client,\n                          @NotNull Common.Session session,\n                          @NotNull Function<MemorySample, Long> transformer)", "modifiers": "public", "return": "", "signature": " MemoryDataSeries(@NotNull MemoryServiceGrpc.MemoryServiceBlockingStub client,\n                          @NotNull Common.Session session,\n                          @NotNull Function<MemorySample, Long> transformer)", "full_signature": "public  MemoryDataSeries(@NotNull MemoryServiceGrpc.MemoryServiceBlockingStub client,\n                          @NotNull Common.Session session,\n                          @NotNull Function<MemorySample, Long> transformer)", "class_method_signature": "MemoryDataSeries.MemoryDataSeries(@NotNull MemoryServiceGrpc.MemoryServiceBlockingStub client,\n                          @NotNull Common.Session session,\n                          @NotNull Function<MemorySample, Long> transformer)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "MemoryDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/MemoryDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "body": "@Override\n  public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs) {\n    // TODO: Change the Memory API to allow specifying padding in the request as number of samples.\n    long bufferNs = TimeUnit.SECONDS.toNanos(1);\n    MemoryRequest.Builder dataRequestBuilder = MemoryRequest.newBuilder()\n      .setSession(mySession)\n      .setStartTime(TimeUnit.MICROSECONDS.toNanos((long)timeCurrentRangeUs.getMin()) - bufferNs)\n      .setEndTime(TimeUnit.MICROSECONDS.toNanos((long)timeCurrentRangeUs.getMax()) + bufferNs);\n    MemoryData response = myClient.getData(dataRequestBuilder.build());\n\n    List<SeriesData<Long>> seriesData = new ArrayList<>();\n    for (MemoryData.MemorySample sample : response.getMemSamplesList()) {\n      long dataTimestamp = TimeUnit.NANOSECONDS.toMicros(sample.getTimestamp());\n      seriesData.add(new SeriesData<>(dataTimestamp, mySampleTransformer.apply(sample)));\n    }\n    return seriesData;\n  }", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "MemoryDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false, "invocations": ["toNanos", "setEndTime", "setStartTime", "setSession", "newBuilder", "toNanos", "getMin", "toNanos", "getMax", "getData", "build", "getMemSamplesList", "toMicros", "getTimestamp", "add", "apply"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}