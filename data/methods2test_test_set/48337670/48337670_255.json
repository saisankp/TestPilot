{"test_class": {"identifier": "CronSchedulerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CronSchedulerImpl cronScheduler = new CronSchedulerImpl(new SchedulerImpl());", "modifier": "private final", "type": "CronSchedulerImpl", "declarator": "cronScheduler = new CronSchedulerImpl(new SchedulerImpl())", "var_name": "cronScheduler"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/internal/scheduler/CronSchedulerImplTest.java"}, "test_case": {"identifier": "testCronReboot", "parameters": "()", "modifiers": "@Test @Timeout(value = 1, unit = TimeUnit.SECONDS) public", "return": "void", "body": "@Test\n    @Timeout(value = 1, unit = TimeUnit.SECONDS)\n    public void testCronReboot() throws Exception {\n        long now = System.currentTimeMillis();\n        Semaphore s = new Semaphore(0);\n        ScheduledCompletableFuture<Void> future = cronScheduler.schedule(() -> {\n        }, \"@reboot\");\n        future.getPromise().thenAccept(x -> s.release());\n        s.acquire(1);\n\n        long diff = System.currentTimeMillis() - now;\n        assertTrue(diff < 200, \"Time difference should be less 200 but was: \" + diff);\n        assertTrue(future.isDone(), \"Scheduler should be done once reboot call done.\");\n    }", "signature": "void testCronReboot()", "full_signature": "@Test @Timeout(value = 1, unit = TimeUnit.SECONDS) public void testCronReboot()", "class_method_signature": "CronSchedulerImplTest.testCronReboot()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "schedule", "thenAccept", "getPromise", "release", "acquire", "currentTimeMillis", "assertTrue", "assertTrue", "isDone"]}, "focal_class": {"identifier": "CronSchedulerImpl", "superclass": "", "interfaces": "implements CronScheduler", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(CronSchedulerImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CronSchedulerImpl.class)", "var_name": "logger"}, {"original_string": "private final List<Cron> crons = new ArrayList<>();", "modifier": "private final", "type": "List<Cron>", "declarator": "crons = new ArrayList<>()", "var_name": "crons"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "CronSchedulerImpl", "parameters": "(final @Reference Scheduler scheduler)", "modifiers": "@Activate public", "return": "", "signature": " CronSchedulerImpl(final @Reference Scheduler scheduler)", "full_signature": "@Activate public  CronSchedulerImpl(final @Reference Scheduler scheduler)", "class_method_signature": "CronSchedulerImpl.CronSchedulerImpl(final @Reference Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(SchedulerRunnable runnable, String cronExpression)", "modifiers": "@Override public", "return": "ScheduledCompletableFuture<@Nullable Void>", "signature": "ScheduledCompletableFuture<@Nullable Void> schedule(SchedulerRunnable runnable, String cronExpression)", "full_signature": "@Override public ScheduledCompletableFuture<@Nullable Void> schedule(SchedulerRunnable runnable, String cronExpression)", "class_method_signature": "CronSchedulerImpl.schedule(SchedulerRunnable runnable, String cronExpression)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(CronJob job, Map<String, Object> config,\n            String cronExpression)", "modifiers": "@Override public", "return": "ScheduledCompletableFuture<@Nullable Void>", "signature": "ScheduledCompletableFuture<@Nullable Void> schedule(CronJob job, Map<String, Object> config,\n            String cronExpression)", "full_signature": "@Override public ScheduledCompletableFuture<@Nullable Void> schedule(CronJob job, Map<String, Object> config,\n            String cronExpression)", "class_method_signature": "CronSchedulerImpl.schedule(CronJob job, Map<String, Object> config,\n            String cronExpression)", "testcase": false, "constructor": false}, {"identifier": "addSchedule", "parameters": "(CronJob cronJob, Map<String, Object> map)", "modifiers": "@Reference(policy = ReferencePolicy.DYNAMIC, cardinality = ReferenceCardinality.MULTIPLE)", "return": "void", "signature": "void addSchedule(CronJob cronJob, Map<String, Object> map)", "full_signature": "@Reference(policy = ReferencePolicy.DYNAMIC, cardinality = ReferenceCardinality.MULTIPLE) void addSchedule(CronJob cronJob, Map<String, Object> map)", "class_method_signature": "CronSchedulerImpl.addSchedule(CronJob cronJob, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "removeSchedule", "parameters": "(CronJob s)", "modifiers": "", "return": "void", "signature": "void removeSchedule(CronJob s)", "full_signature": " void removeSchedule(CronJob s)", "class_method_signature": "CronSchedulerImpl.removeSchedule(CronJob s)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/scheduler/CronSchedulerImpl.java"}, "focal_method": {"identifier": "schedule", "parameters": "(SchedulerRunnable runnable, String cronExpression)", "modifiers": "@Override public", "return": "ScheduledCompletableFuture<@Nullable Void>", "body": "@Override\n    public ScheduledCompletableFuture<@Nullable Void> schedule(SchedulerRunnable runnable, String cronExpression) {\n        return schedule(d -> runnable.run(), Collections.emptyMap(), cronExpression);\n    }", "signature": "ScheduledCompletableFuture<@Nullable Void> schedule(SchedulerRunnable runnable, String cronExpression)", "full_signature": "@Override public ScheduledCompletableFuture<@Nullable Void> schedule(SchedulerRunnable runnable, String cronExpression)", "class_method_signature": "CronSchedulerImpl.schedule(SchedulerRunnable runnable, String cronExpression)", "testcase": false, "constructor": false, "invocations": ["schedule", "run", "emptyMap"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}