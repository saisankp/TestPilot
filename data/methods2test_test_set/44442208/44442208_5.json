{"test_class": {"identifier": "VaultSecurityManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VaultSecurityManager vaultSecurityManager;", "modifier": "private", "type": "VaultSecurityManager", "declarator": "vaultSecurityManager", "var_name": "vaultSecurityManager"}, {"original_string": "@Mock\n    private VaultTemplate vaultTemplate;", "modifier": "@Mock\n    private", "type": "VaultTemplate", "declarator": "vaultTemplate", "var_name": "vaultTemplate"}], "file": "gemfire-utils/gemfire-security/src/test/java/io/pivotal/bds/gemfire/security/VaultSecurityManagerTest.java"}, "test_case": {"identifier": "authenticate_success", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void authenticate_success() {\n        String username = \"some-user\";\n        String password = \"some-password\";\n\n        VaultResponse vaultResponse = mock(VaultResponse.class);\n        Map<String, Object> data = new HashMap<>();\n        data.put(\"password\", password);\n        when(vaultResponse.getData()).thenReturn(data);\n        when(vaultTemplate.read(anyString())).thenReturn(vaultResponse);\n\n        Properties props = new Properties();\n        props.setProperty(\"security-username\",username);\n        props.setProperty(\"security-password\",password);\n        vaultSecurityManager.authenticate(props);\n    }", "signature": "void authenticate_success()", "full_signature": "@Test void authenticate_success()", "class_method_signature": "VaultSecurityManagerTest.authenticate_success()", "testcase": true, "constructor": false, "invocations": ["mock", "put", "thenReturn", "when", "getData", "thenReturn", "when", "read", "anyString", "setProperty", "setProperty", "authenticate"]}, "focal_class": {"identifier": "VaultSecurityManager", "superclass": "", "interfaces": "implements SecurityManager", "fields": [{"original_string": "private VaultTemplate vaultTemplate;", "modifier": "private", "type": "VaultTemplate", "declarator": "vaultTemplate", "var_name": "vaultTemplate"}, {"original_string": "private String readPath = \"secret/\";", "modifier": "private", "type": "String", "declarator": "readPath = \"secret/\"", "var_name": "readPath"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(VaultSecurityManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(VaultSecurityManager.class)", "var_name": "LOG"}], "methods": [{"identifier": "VaultSecurityManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " VaultSecurityManager()", "full_signature": "public  VaultSecurityManager()", "class_method_signature": "VaultSecurityManager.VaultSecurityManager()", "testcase": false, "constructor": true}, {"identifier": "VaultSecurityManager", "parameters": "(VaultTemplate vaultTemplate, String readPath)", "modifiers": "public", "return": "", "signature": " VaultSecurityManager(VaultTemplate vaultTemplate, String readPath)", "full_signature": "public  VaultSecurityManager(VaultTemplate vaultTemplate, String readPath)", "class_method_signature": "VaultSecurityManager.VaultSecurityManager(VaultTemplate vaultTemplate, String readPath)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(Properties properties)", "modifiers": "@Override public", "return": "Object", "signature": "Object authenticate(Properties properties)", "full_signature": "@Override public Object authenticate(Properties properties)", "class_method_signature": "VaultSecurityManager.authenticate(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Properties securityProps)", "modifiers": "@Override public", "return": "void", "signature": "void init(Properties securityProps)", "full_signature": "@Override public void init(Properties securityProps)", "class_method_signature": "VaultSecurityManager.init(Properties securityProps)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(Object principal, ResourcePermission permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authorize(Object principal, ResourcePermission permission)", "full_signature": "@Override public boolean authorize(Object principal, ResourcePermission permission)", "class_method_signature": "VaultSecurityManager.authorize(Object principal, ResourcePermission permission)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VaultSecurityManager.close()", "testcase": false, "constructor": false}], "file": "gemfire-utils/gemfire-security/src/main/java/io/pivotal/bds/gemfire/security/VaultSecurityManager.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Properties properties)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object authenticate(Properties properties) throws AuthenticationFailedException {\n        String username = properties.getProperty(\"security-username\");\n        Assert.hasText(username, \"Missing username\");\n        LOG.info(\"authenticate: username={}\", username);\n\n        String password = properties.getProperty(\"security-password\");\n        Assert.hasText(password, \"Missing password\");\n        LOG.trace(\"authenticate: username={}, password={}\", username, password);\n\n        VaultResponse vaultResponse = vaultTemplate.read(readPath + username);\n\n        if (vaultResponse == null) {\n            throw new AuthenticationFailedException(username);\n        }\n\n        String actualPassword = (String) vaultResponse.getData().get(\"password\");\n        LOG.trace(\"authenticate: username={}, password={}, actualPassword={}\", username, password, actualPassword);\n\n        if (!password.equals(actualPassword)) {\n            throw new AuthenticationFailedException(username);\n        }\n\n        return new UsernamePrincipal(username);\n    }", "signature": "Object authenticate(Properties properties)", "full_signature": "@Override public Object authenticate(Properties properties)", "class_method_signature": "VaultSecurityManager.authenticate(Properties properties)", "testcase": false, "constructor": false, "invocations": ["getProperty", "hasText", "info", "getProperty", "hasText", "trace", "read", "get", "getData", "trace", "equals"]}, "repository": {"repo_id": 44442208, "url": "https://github.com/Pivotal-Field-Engineering/gemfire-fe", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 20, "size": 75522, "license": "licensed"}}