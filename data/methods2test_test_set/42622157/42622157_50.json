{"test_class": {"identifier": "SubstitutionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String GRANDFATHER = \"grandfather\";", "modifier": "private final static", "type": "String", "declarator": "GRANDFATHER = \"grandfather\"", "var_name": "GRANDFATHER"}, {"original_string": "private final static String PARENT = \"parent\";", "modifier": "private final static", "type": "String", "declarator": "PARENT = \"parent\"", "var_name": "PARENT"}, {"original_string": "private final static String MOTHER = \"mother\";", "modifier": "private final static", "type": "String", "declarator": "MOTHER = \"mother\"", "var_name": "MOTHER"}, {"original_string": "private final static String AUNT = \"aunt\";", "modifier": "private final static", "type": "String", "declarator": "AUNT = \"aunt\"", "var_name": "AUNT"}, {"original_string": "private final static String CHILD = \"child\";", "modifier": "private final static", "type": "String", "declarator": "CHILD = \"child\"", "var_name": "CHILD"}, {"original_string": "private final static String GRANDCHILD = \"grandchild\";", "modifier": "private final static", "type": "String", "declarator": "GRANDCHILD = \"grandchild\"", "var_name": "GRANDCHILD"}, {"original_string": "private final static String STRANGER = \"stranger\";", "modifier": "private final static", "type": "String", "declarator": "STRANGER = \"stranger\"", "var_name": "STRANGER"}, {"original_string": "private static Map<QName, TNodeType> nodeTypes;", "modifier": "private static", "type": "Map<QName, TNodeType>", "declarator": "nodeTypes", "var_name": "nodeTypes"}, {"original_string": "private static QName grandFather = new QName(\"https://example.org/tosca/substiution\", GRANDFATHER);", "modifier": "private static", "type": "QName", "declarator": "grandFather = new QName(\"https://example.org/tosca/substiution\", GRANDFATHER)", "var_name": "grandFather"}, {"original_string": "private static QName parent = new QName(\"https://example.org/tosca/substiution\", PARENT);", "modifier": "private static", "type": "QName", "declarator": "parent = new QName(\"https://example.org/tosca/substiution\", PARENT)", "var_name": "parent"}, {"original_string": "private static QName child = new QName(\"https://example.org/tosca/substiution\", CHILD);", "modifier": "private static", "type": "QName", "declarator": "child = new QName(\"https://example.org/tosca/substiution\", CHILD)", "var_name": "child"}, {"original_string": "private static QName grandChild = new QName(\"https://example.org/tosca/substiution\", GRANDCHILD);", "modifier": "private static", "type": "QName", "declarator": "grandChild = new QName(\"https://example.org/tosca/substiution\", GRANDCHILD)", "var_name": "grandChild"}, {"original_string": "private static QName mother = new QName(\"https://example.org/tosca/substiution\", MOTHER);", "modifier": "private static", "type": "QName", "declarator": "mother = new QName(\"https://example.org/tosca/substiution\", MOTHER)", "var_name": "mother"}, {"original_string": "private static QName aunt = new QName(\"https://my.example.org/tosca/substiution\", AUNT);", "modifier": "private static", "type": "QName", "declarator": "aunt = new QName(\"https://my.example.org/tosca/substiution\", AUNT)", "var_name": "aunt"}, {"original_string": "private static QName stranger = new QName(\"ftp://example.org/stranger\", STRANGER);", "modifier": "private static", "type": "QName", "declarator": "stranger = new QName(\"ftp://example.org/stranger\", STRANGER)", "var_name": "stranger"}], "file": "org.eclipse.winery.model.adaptation/src/test/java/org/eclipse/winery/model/adaptation/substitution/SubstitutionUtilsTest.java"}, "test_case": {"identifier": "retrieveTypeHierarchy2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void retrieveTypeHierarchy2() {\n        Optional<List<Subtypes<TNodeType>>> tNodeTypeSubtypes = SubstitutionUtils.collectTypeHierarchy(nodeTypes, parent);\n\n        assertTrue(tNodeTypeSubtypes.isPresent());\n\n        List<Subtypes<TNodeType>> subtypes = tNodeTypeSubtypes.get();\n        assertEquals(1, subtypes.size());\n\n        Subtypes<TNodeType> firstChild = subtypes.get(0);\n        assertEquals(CHILD, firstChild.getElement().getName());\n        assertEquals(1, firstChild.getChildren().size());\n\n        Subtypes<TNodeType> childOfFirstChild = firstChild.getChildren().get(0);\n        assertEquals(GRANDCHILD, childOfFirstChild.getElement().getName());\n        assertNull(childOfFirstChild.getChildren());\n    }", "signature": "void retrieveTypeHierarchy2()", "full_signature": "@Test public void retrieveTypeHierarchy2()", "class_method_signature": "SubstitutionUtilsTest.retrieveTypeHierarchy2()", "testcase": true, "constructor": false, "invocations": ["collectTypeHierarchy", "assertTrue", "isPresent", "get", "assertEquals", "size", "get", "assertEquals", "getName", "getElement", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "getName", "getElement", "assertNull", "getChildren"]}, "focal_class": {"identifier": "SubstitutionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "collectSubstitutableTemplates", "parameters": "(List<R> templates, Map<QName, T> types)", "modifiers": "public static", "return": "Map<R, List<Subtypes<T>>>", "signature": "Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "full_signature": "public static Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "class_method_signature": "SubstitutionUtils.collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "testcase": false, "constructor": false}, {"identifier": "collectTypeHierarchy", "parameters": "(Map<QName, T> types, QName parent)", "modifiers": "public static", "return": "Optional<List<Subtypes<T>>>", "signature": "Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "full_signature": "public static Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "class_method_signature": "SubstitutionUtils.collectTypeHierarchy(Map<QName, T> types, QName parent)", "testcase": false, "constructor": false}, {"identifier": "containsPatterns", "parameters": "(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "full_signature": "public static boolean containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "class_method_signature": "SubstitutionUtils.containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.model.adaptation/src/main/java/org/eclipse/winery/model/adaptation/substitution/SubstitutionUtils.java"}, "focal_method": {"identifier": "collectTypeHierarchy", "parameters": "(Map<QName, T> types, QName parent)", "modifiers": "public static", "return": "Optional<List<Subtypes<T>>>", "body": "public static <T extends HasInheritance> Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent) {\n        T type = types.get(parent);\n\n        if (Objects.nonNull(type) && type.getAbstract().equals(TBoolean.YES)) {\n            List<Subtypes<T>> subtypes = new ArrayList<>();\n            types.forEach((key, current) -> {\n                if (Objects.nonNull(current.getDerivedFrom()) && current.getDerivedFrom().getTypeAsQName().equals(parent)) {\n                    Subtypes<T> child = new Subtypes<>(current);\n                    subtypes.add(child);\n                    collectTypeHierarchy(types, key)\n                        .ifPresent(child::addChildren);\n                }\n            });\n            return Optional.of(subtypes);\n        }\n\n        return Optional.empty();\n    }", "signature": "Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "full_signature": "public static Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "class_method_signature": "SubstitutionUtils.collectTypeHierarchy(Map<QName, T> types, QName parent)", "testcase": false, "constructor": false, "invocations": ["get", "nonNull", "equals", "getAbstract", "forEach", "nonNull", "getDerivedFrom", "equals", "getTypeAsQName", "getDerivedFrom", "add", "ifPresent", "collectTypeHierarchy", "of", "empty"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}