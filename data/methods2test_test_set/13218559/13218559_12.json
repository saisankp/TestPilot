{"test_class": {"identifier": "WhoopsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static InputStream STANDARD_IN = System.in;", "modifier": "public final static", "type": "InputStream", "declarator": "STANDARD_IN = System.in", "var_name": "STANDARD_IN"}, {"original_string": "public final static PrintStream STANDARD_OUT = System.out;", "modifier": "public final static", "type": "PrintStream", "declarator": "STANDARD_OUT = System.out", "var_name": "STANDARD_OUT"}, {"original_string": "public final static String LINE_SEPARATOR = System.getProperty(\"line.separator\");", "modifier": "public final static", "type": "String", "declarator": "LINE_SEPARATOR = System.getProperty(\"line.separator\")", "var_name": "LINE_SEPARATOR"}], "file": "Whoops/Whoops! Solution/src/WhoopsTest.java"}, "test_case": {"identifier": "testSampleIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSampleIn() throws IOException\n    {\n        System.setIn(new FileInputStream(\"sample.in\"));\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n        Whoops.main();\n        Scanner scanner = new Scanner(new File(\"sample.out\"));\n        String expected = scanner.useDelimiter(\"\\\\A\").next();\n        String actual = output.toString();\n        Assert.assertEquals(expected, actual);\n        scanner.close();\n    }", "signature": "void testSampleIn()", "full_signature": "@Test public void testSampleIn()", "class_method_signature": "WhoopsTest.testSampleIn()", "testcase": true, "constructor": false, "invocations": ["setIn", "setOut", "main", "next", "useDelimiter", "toString", "assertEquals", "close"]}, "focal_class": {"identifier": "Whoops", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<String, Player> players = new HashMap<>();", "modifier": "", "type": "Map<String, Player>", "declarator": "players = new HashMap<>()", "var_name": "players"}], "methods": [{"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Whoops.main(String... args)", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "(Player firstPlayer, int rounds)", "modifiers": "", "return": "void", "signature": "void play(Player firstPlayer, int rounds)", "full_signature": " void play(Player firstPlayer, int rounds)", "class_method_signature": "Whoops.play(Player firstPlayer, int rounds)", "testcase": false, "constructor": false}], "file": "Whoops/Whoops! Solution/src/Whoops.java"}, "focal_method": {"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "body": "public static void main(String... args) throws IOException\n    {\n        // grab data from standard in\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        while (reader.ready())\n        {\n            String firstLine = reader.readLine();\n            String[] playerNames = firstLine.split(\" \");\n            String secondLine = reader.readLine();\n            int rounds = Integer.parseInt(secondLine);\n\n            // create a double linked list of players\n            Whoops whoops = new Whoops();\n            Player firstPlayer = null;\n            Player previousPlayer = null;\n            for (String player : playerNames)\n            {\n                Player newPlayer = whoops.players.get(player);\n                if (newPlayer == null)\n                {\n                    newPlayer = new Player(player);\n                }\n                if (firstPlayer == null)\n                {\n                    firstPlayer = previousPlayer = newPlayer;\n                }\n                else\n                {\n                    previousPlayer.nextPlayer = newPlayer;\n                    newPlayer.previousPlayer = previousPlayer;\n                    // always update the ends so we always have a circle\n                    firstPlayer.previousPlayer = newPlayer;\n                    newPlayer.nextPlayer = firstPlayer;\n                }\n                previousPlayer = newPlayer;\n            }\n\n            // play Whoops! for n rounds\n            whoops.play(firstPlayer, rounds);\n        }\n        reader.close();\n\n    }", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Whoops.main(String... args)", "testcase": false, "constructor": false, "invocations": ["ready", "readLine", "split", "readLine", "parseInt", "get", "play", "close"]}, "repository": {"repo_id": 13218559, "url": "https://github.com/LexmarkES/codedash2013", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 988, "license": "licensed"}}