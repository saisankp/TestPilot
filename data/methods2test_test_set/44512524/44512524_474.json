{"test_class": {"identifier": "SSTableIndexIndexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INDEX_FILE = \"/data/Keyspace1-Standard1-ic-0-Index.db\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_FILE = \"/data/Keyspace1-Standard1-ic-0-Index.db\"", "var_name": "INDEX_FILE"}, {"original_string": "private LocalFileSystem fileSystem;", "modifier": "private", "type": "LocalFileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}], "file": "db/cassandra-intro/src/test/java/com/fullcontact/sstable/index/SSTableIndexIndexerTest.java"}, "test_case": {"identifier": "testIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIndex() throws Exception {\n\n        // Create a temp dir...\n        final File tmpDir = Files.createTempDir();\n        tmpDir.deleteOnExit();\n\n        // Copy the .Index.db file to the temp dir...\n        File sampleFile = new File(getClass().getResource(INDEX_FILE).getFile());\n        File tmpSampleFile = new File(tmpDir, sampleFile.getName());\n        Files.copy(sampleFile, tmpSampleFile);\n\n        fileSystem.getConf().set(\"hadoop.sstable.split.mb\", \"1\");\n\n        SSTableIndexIndexer indexer = new SSTableIndexIndexer(fileSystem.getConf());\n\n        indexer.index(new Path(tmpDir.getAbsolutePath(), sampleFile.getName()));\n\n        indexer.complete();\n\n        SSTableIndexIndex index =\n                SSTableIndexIndex.readIndex(fileSystem, new Path(tmpDir.getAbsolutePath(), sampleFile.getName()));\n        assertNotNull(index);\n        assertEquals(1, index.getOffsets().size());\n        assertEquals(0, index.getOffsets().get(0).getStart());\n        assertEquals(18, index.getOffsets().get(0).getEnd());\n    }", "signature": "void testIndex()", "full_signature": "@Test public void testIndex()", "class_method_signature": "SSTableIndexIndexerTest.testIndex()", "testcase": true, "constructor": false, "invocations": ["createTempDir", "deleteOnExit", "getFile", "getResource", "getClass", "getName", "copy", "set", "getConf", "getConf", "index", "getAbsolutePath", "getName", "complete", "readIndex", "getAbsolutePath", "getName", "assertNotNull", "assertEquals", "size", "getOffsets", "assertEquals", "getStart", "get", "getOffsets", "assertEquals", "getEnd", "get", "getOffsets"]}, "focal_class": {"identifier": "SSTableIndexIndexer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SSTableIndexIndexer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SSTableIndexIndexer.class)", "var_name": "LOG"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final DecimalFormat decimalFormat;", "modifier": "private final", "type": "DecimalFormat", "declarator": "decimalFormat", "var_name": "decimalFormat"}, {"original_string": "private final ListeningExecutorService service;", "modifier": "private final", "type": "ListeningExecutorService", "declarator": "service", "var_name": "service"}, {"original_string": "private static final String SST_EXTENSION = \"-Index.db\";", "modifier": "private static final", "type": "String", "declarator": "SST_EXTENSION = \"-Index.db\"", "var_name": "SST_EXTENSION"}], "methods": [{"identifier": "SSTableIndexIndexer", "parameters": "(final Configuration configuration)", "modifiers": "public", "return": "", "signature": " SSTableIndexIndexer(final Configuration configuration)", "full_signature": "public  SSTableIndexIndexer(final Configuration configuration)", "class_method_signature": "SSTableIndexIndexer.SSTableIndexIndexer(final Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "index", "parameters": "(final Path sstablePath)", "modifiers": "public", "return": "void", "signature": "void index(final Path sstablePath)", "full_signature": "public void index(final Path sstablePath)", "class_method_signature": "SSTableIndexIndexer.index(final Path sstablePath)", "testcase": false, "constructor": false}, {"identifier": "indexSingleFile", "parameters": "(final FileSystem fileSystem, final Path sstablePath)", "modifiers": "private", "return": "void", "signature": "void indexSingleFile(final FileSystem fileSystem, final Path sstablePath)", "full_signature": "private void indexSingleFile(final FileSystem fileSystem, final Path sstablePath)", "class_method_signature": "SSTableIndexIndexer.indexSingleFile(final FileSystem fileSystem, final Path sstablePath)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "SSTableIndexIndexer.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void complete()", "full_signature": "public void complete()", "class_method_signature": "SSTableIndexIndexer.complete()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "SSTableIndexIndexer.printUsage()", "testcase": false, "constructor": false}], "file": "db/cassandra-intro/src/main/java/com/fullcontact/sstable/index/SSTableIndexIndexer.java"}, "focal_method": {"identifier": "index", "parameters": "(final Path sstablePath)", "modifiers": "public", "return": "void", "body": "public void index(final Path sstablePath) throws IOException {\n\n        final FileSystem fileSystem = FileSystem.get(URI.create(sstablePath.toString()), configuration);\n        final FileStatus fileStatus = fileSystem.getFileStatus(sstablePath);\n\n        if (fileStatus.isDir()) {\n            LOG.info(\"SSTable Indexing directory {}\", sstablePath);\n            final FileStatus[] statuses = fileSystem.listStatus(sstablePath);\n            for (final FileStatus childStatus : statuses) {\n                index(childStatus.getPath());\n            }\n        } else if (sstablePath.toString().endsWith(SST_EXTENSION)) {\n            final Path sstableIndexPath = new Path(sstablePath.toString() + SSTableIndexIndex.SSTABLE_INDEX_SUFFIX);\n            if (fileSystem.exists(sstableIndexPath)) {\n                LOG.info(\"Skipping as SSTable index file already exists for {}\", sstablePath);\n            } else {\n                // Kick a thread for the index.\n                final ListenableFuture<IndexRequest> indexFuture = service.submit(new Callable<IndexRequest>() {\n                    @Override\n                    public IndexRequest call() throws Exception {\n                        final long startTime = System.currentTimeMillis();\n                        final long fileSize = fileStatus.getLen();\n\n                        LOG.info(\"Indexing SSTABLE Indexing file {}, size {} GB...\", sstablePath,\n                                decimalFormat.format(fileSize / (1024.0 * 1024.0 * 1024.0)));\n\n                        indexSingleFile(fileSystem, sstablePath);\n\n                        return new IndexRequest(sstableIndexPath, startTime, fileSize);\n                    }\n                });\n\n                Futures.addCallback(indexFuture, new FutureCallback<IndexRequest>() {\n                    public void onSuccess(final IndexRequest indexRequest) {\n                        long indexSize = 0;\n\n                        try {\n                            indexSize = fileSystem.getFileStatus(indexRequest.getIndexPath()).getLen();\n                        } catch (IOException e) {\n                            LOG.error(\"Error getting file status for index path: {}\", indexRequest.getIndexPath());\n                        }\n\n                        final double elapsed = (System.currentTimeMillis() - indexRequest.getStartTime()) / 1000.0;\n\n                        LOG.info(\"Completed SSTABLE Indexing in {} seconds ({} MB/s).  Index size is {} KB.\",\n                                decimalFormat.format(elapsed),\n                                decimalFormat.format(indexRequest.getFileSize() / (1024.0 * 1024.0 * elapsed)),\n                                decimalFormat.format(indexSize / 1024.0));\n                    }\n\n                    public void onFailure(Throwable e) {\n                        LOG.error(\"Failed to index.\", e);\n                    }\n                });\n\n            }\n        }\n    }", "signature": "void index(final Path sstablePath)", "full_signature": "public void index(final Path sstablePath)", "class_method_signature": "SSTableIndexIndexer.index(final Path sstablePath)", "testcase": false, "constructor": false, "invocations": ["get", "create", "toString", "getFileStatus", "isDir", "info", "listStatus", "index", "getPath", "endsWith", "toString", "toString", "exists", "info", "submit", "currentTimeMillis", "getLen", "info", "format", "indexSingleFile", "addCallback", "getLen", "getFileStatus", "getIndexPath", "error", "getIndexPath", "currentTimeMillis", "getStartTime", "info", "format", "format", "getFileSize", "format", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}