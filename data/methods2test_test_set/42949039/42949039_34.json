{"test_class": {"identifier": "HerdThreadHelperTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private HerdThreadHelper herdThreadHelper;", "modifier": "@Autowired\n    private", "type": "HerdThreadHelper", "declarator": "herdThreadHelper", "var_name": "herdThreadHelper"}], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/helper/HerdThreadHelperTest.java"}, "test_case": {"identifier": "testExecuteAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteAsync() throws Exception\n    {\n        // The \"token\" queue\n        final BlockingQueue<String> queue = new LinkedBlockingQueue<>(1);\n\n        // Schedule an asynchronous task\n        herdThreadHelper.executeAsync(new Runnable()\n        {\n            public void run()\n            {\n                try\n                {\n                    Thread.sleep(500);\n                    queue.offer(\"testToken\");\n                }\n                catch (InterruptedException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n        });\n\n        /*\n         * Poll the queue, which blocks this thread.\n         * For safety, a short timeout of 1 second is added, so in case of deadlock or other threading nightmares, this test doesn't block the rest of test\n         * execution.\n         * The token will be null if the timeout is reached, otherwise\n         */\n        String token = queue.poll(1000, TimeUnit.MILLISECONDS);\n\n        Assert.assertNotNull(\"Expected the async task to have put a token in the queue, but none was found after a timeout. Ensure that the async task \"\n            + \"actually ran and pushed a token into queue.\", token);\n    }", "signature": "void testExecuteAsync()", "full_signature": "@Test public void testExecuteAsync()", "class_method_signature": "HerdThreadHelperTest.testExecuteAsync()", "testcase": true, "constructor": false, "invocations": ["executeAsync", "sleep", "offer", "poll", "assertNotNull"]}, "focal_class": {"identifier": "HerdThreadHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdThreadHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdThreadHelper.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "sleep", "parameters": "(Long millis)", "modifiers": "public", "return": "void", "signature": "void sleep(Long millis)", "full_signature": "public void sleep(Long millis)", "class_method_signature": "HerdThreadHelper.sleep(Long millis)", "testcase": false, "constructor": false}, {"identifier": "executeAsync", "parameters": "(Runnable runnable)", "modifiers": "@Async public", "return": "void", "signature": "void executeAsync(Runnable runnable)", "full_signature": "@Async public void executeAsync(Runnable runnable)", "class_method_signature": "HerdThreadHelper.executeAsync(Runnable runnable)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/helper/HerdThreadHelper.java"}, "focal_method": {"identifier": "executeAsync", "parameters": "(Runnable runnable)", "modifiers": "@Async public", "return": "void", "body": "@Async\n    public void executeAsync(Runnable runnable)\n    {\n        runnable.run();\n    }", "signature": "void executeAsync(Runnable runnable)", "full_signature": "@Async public void executeAsync(Runnable runnable)", "class_method_signature": "HerdThreadHelper.executeAsync(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["run"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}