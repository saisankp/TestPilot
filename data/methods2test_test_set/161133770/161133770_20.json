{"test_class": {"identifier": "FeatureRowDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FeatureSetProto.EntitySpec entity =\n      FeatureSetProto.EntitySpec.newBuilder().setName(\"entity1\").build();", "modifier": "private", "type": "FeatureSetProto.EntitySpec", "declarator": "entity =\n      FeatureSetProto.EntitySpec.newBuilder().setName(\"entity1\").build()", "var_name": "entity"}, {"original_string": "private FeatureSetSpec spec =\n      FeatureSetSpec.newBuilder()\n          .addAllEntities(Collections.singletonList(entity))\n          .addFeatures(\n              FeatureSetProto.FeatureSpec.newBuilder()\n                  .setName(\"feature1\")\n                  .setValueType(ValueType.Enum.FLOAT))\n          .addFeatures(\n              FeatureSetProto.FeatureSpec.newBuilder()\n                  .setName(\"feature2\")\n                  .setValueType(ValueType.Enum.INT32))\n          .setName(\"feature_set_name\")\n          .build();", "modifier": "private", "type": "FeatureSetSpec", "declarator": "spec =\n      FeatureSetSpec.newBuilder()\n          .addAllEntities(Collections.singletonList(entity))\n          .addFeatures(\n              FeatureSetProto.FeatureSpec.newBuilder()\n                  .setName(\"feature1\")\n                  .setValueType(ValueType.Enum.FLOAT))\n          .addFeatures(\n              FeatureSetProto.FeatureSpec.newBuilder()\n                  .setName(\"feature2\")\n                  .setValueType(ValueType.Enum.INT32))\n          .setName(\"feature_set_name\")\n          .build()", "var_name": "spec"}], "file": "storage/connectors/redis/src/test/java/feast/storage/connectors/redis/retriever/FeatureRowDecoderTest.java"}, "test_case": {"identifier": "shouldDecodeValidFeatureRowV2WithIncompleteFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldDecodeValidFeatureRowV2WithIncompleteFields() {\n    FeatureRowDecoder decoder = new FeatureRowDecoder(\"feature_set_ref\", spec);\n\n    FeatureRowProto.FeatureRow encodedFeatureRow =\n        FeatureRowProto.FeatureRow.newBuilder()\n            .setEventTimestamp(Timestamp.newBuilder().setNanos(1000))\n            .addFields(\n                Field.newBuilder()\n                    .setName(\n                        Hashing.murmur3_32()\n                            .hashString(\"feature1\", StandardCharsets.UTF_8)\n                            .toString())\n                    .setValue(Value.newBuilder().setInt32Val(2)))\n            .build();\n\n    // should decode missing fields as fields with unset value.\n    FeatureRowProto.FeatureRow expectedFeatureRow =\n        FeatureRowProto.FeatureRow.newBuilder()\n            .setFeatureSet(\"feature_set_ref\")\n            .setEventTimestamp(Timestamp.newBuilder().setNanos(1000))\n            .addFields(\n                Field.newBuilder().setName(\"feature1\").setValue(Value.newBuilder().setInt32Val(2)))\n            .addFields(Field.newBuilder().setName(\"feature2\").setValue(Value.newBuilder().build()))\n            .build();\n\n    assertEquals(expectedFeatureRow, decoder.decode(encodedFeatureRow));\n  }", "signature": "void shouldDecodeValidFeatureRowV2WithIncompleteFields()", "full_signature": "@Test public void shouldDecodeValidFeatureRowV2WithIncompleteFields()", "class_method_signature": "FeatureRowDecoderTest.shouldDecodeValidFeatureRowV2WithIncompleteFields()", "testcase": true, "constructor": false, "invocations": ["build", "addFields", "setEventTimestamp", "newBuilder", "setNanos", "newBuilder", "setValue", "setName", "newBuilder", "toString", "hashString", "murmur3_32", "setInt32Val", "newBuilder", "build", "addFields", "addFields", "setEventTimestamp", "setFeatureSet", "newBuilder", "setNanos", "newBuilder", "setValue", "setName", "newBuilder", "setInt32Val", "newBuilder", "setValue", "setName", "newBuilder", "build", "newBuilder", "assertEquals", "decode"]}, "focal_class": {"identifier": "FeatureRowDecoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String featureSetRef;", "modifier": "private final", "type": "String", "declarator": "featureSetRef", "var_name": "featureSetRef"}, {"original_string": "private final FeatureSetSpec spec;", "modifier": "private final", "type": "FeatureSetSpec", "declarator": "spec", "var_name": "spec"}], "methods": [{"identifier": "FeatureRowDecoder", "parameters": "(String featureSetRef, FeatureSetSpec spec)", "modifiers": "public", "return": "", "signature": " FeatureRowDecoder(String featureSetRef, FeatureSetSpec spec)", "full_signature": "public  FeatureRowDecoder(String featureSetRef, FeatureSetSpec spec)", "class_method_signature": "FeatureRowDecoder.FeatureRowDecoder(String featureSetRef, FeatureSetSpec spec)", "testcase": false, "constructor": true}, {"identifier": "isEncodedV1", "parameters": "(FeatureRow featureRow)", "modifiers": "@Deprecated private", "return": "boolean", "signature": "boolean isEncodedV1(FeatureRow featureRow)", "full_signature": "@Deprecated private boolean isEncodedV1(FeatureRow featureRow)", "class_method_signature": "FeatureRowDecoder.isEncodedV1(FeatureRow featureRow)", "testcase": false, "constructor": false}, {"identifier": "isEncodedV2", "parameters": "(FeatureRow featureRow)", "modifiers": "private", "return": "boolean", "signature": "boolean isEncodedV2(FeatureRow featureRow)", "full_signature": "private boolean isEncodedV2(FeatureRow featureRow)", "class_method_signature": "FeatureRowDecoder.isEncodedV2(FeatureRow featureRow)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(FeatureRow encodedFeatureRow)", "modifiers": "public", "return": "FeatureRow", "signature": "FeatureRow decode(FeatureRow encodedFeatureRow)", "full_signature": "public FeatureRow decode(FeatureRow encodedFeatureRow)", "class_method_signature": "FeatureRowDecoder.decode(FeatureRow encodedFeatureRow)", "testcase": false, "constructor": false}], "file": "storage/connectors/redis/src/main/java/feast/storage/connectors/redis/retriever/FeatureRowDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(FeatureRow encodedFeatureRow)", "modifiers": "public", "return": "FeatureRow", "body": "public FeatureRow decode(FeatureRow encodedFeatureRow) {\n    if (isEncodedV1(encodedFeatureRow)) {\n      // TODO: remove v1 feature row decoder in Feast 0.7\n      // Decode Feature Rows using the v1 Decoder.\n      final List<Field> fieldsWithoutName = encodedFeatureRow.getFieldsList();\n      List<String> featureNames =\n          spec.getFeaturesList().stream()\n              .sorted(Comparator.comparing(FeatureSpec::getName))\n              .map(FeatureSpec::getName)\n              .collect(Collectors.toList());\n\n      List<Field> fields =\n          IntStream.range(0, featureNames.size())\n              .mapToObj(\n                  featureNameIndex -> {\n                    String featureName = featureNames.get(featureNameIndex);\n                    return fieldsWithoutName\n                        .get(featureNameIndex)\n                        .toBuilder()\n                        .setName(featureName)\n                        .build();\n                  })\n              .collect(Collectors.toList());\n\n      return encodedFeatureRow\n          .toBuilder()\n          .clearFields()\n          .setFeatureSet(featureSetRef)\n          .addAllFields(fields)\n          .build();\n    }\n    if (isEncodedV2(encodedFeatureRow)) {\n      // Decode Feature Rows using the v2 Decoder.\n      // v2 Decoder input Feature Rows should use a hashed name as the field name and\n      // should not have feature set reference set.\n      // Decoding reverts the field name to a unhashed string and set feature set reference.\n      Map<String, Value> nameHashValueMap =\n          encodedFeatureRow.getFieldsList().stream()\n              .collect(Collectors.toMap(field -> field.getName(), field -> field.getValue()));\n\n      List<String> featureNames =\n          spec.getFeaturesList().stream().map(FeatureSpec::getName).collect(Collectors.toList());\n\n      List<Field> fields =\n          featureNames.stream()\n              .map(\n                  name -> {\n                    String nameHash =\n                        Hashing.murmur3_32().hashString(name, StandardCharsets.UTF_8).toString();\n                    Value value =\n                        nameHashValueMap.getOrDefault(nameHash, Value.newBuilder().build());\n                    return Field.newBuilder().setName(name).setValue(value).build();\n                  })\n              .collect(Collectors.toList());\n\n      return encodedFeatureRow\n          .toBuilder()\n          .clearFields()\n          .setFeatureSet(featureSetRef)\n          .addAllFields(fields)\n          .build();\n    }\n    throw new IllegalArgumentException(\"Failed to decode FeatureRow row: Possible data corruption\");\n  }", "signature": "FeatureRow decode(FeatureRow encodedFeatureRow)", "full_signature": "public FeatureRow decode(FeatureRow encodedFeatureRow)", "class_method_signature": "FeatureRowDecoder.decode(FeatureRow encodedFeatureRow)", "testcase": false, "constructor": false, "invocations": ["isEncodedV1", "getFieldsList", "collect", "map", "sorted", "stream", "getFeaturesList", "comparing", "toList", "collect", "mapToObj", "range", "size", "get", "build", "setName", "toBuilder", "get", "toList", "build", "addAllFields", "setFeatureSet", "clearFields", "toBuilder", "isEncodedV2", "collect", "stream", "getFieldsList", "toMap", "getName", "getValue", "collect", "map", "stream", "getFeaturesList", "toList", "collect", "map", "stream", "toString", "hashString", "murmur3_32", "getOrDefault", "build", "newBuilder", "build", "setValue", "setName", "newBuilder", "toList", "build", "addAllFields", "setFeatureSet", "clearFields", "toBuilder"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}