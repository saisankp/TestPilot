{"test_class": {"identifier": "SimpleFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SimpleFactory factory = new SimpleFactory(\"a\");", "modifier": "private final", "type": "SimpleFactory", "declarator": "factory = new SimpleFactory(\"a\")", "var_name": "factory"}, {"original_string": "private final SimpleUpdaterFactory updaterFactory = simpleUpdaterFactory(factory);", "modifier": "private final", "type": "SimpleUpdaterFactory", "declarator": "updaterFactory = simpleUpdaterFactory(factory)", "var_name": "updaterFactory"}], "file": "examples/basic/src/test/java/net/zerobuilder/examples/instaup/SimpleFactoryTest.java"}, "test_case": {"identifier": "simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void simple() throws Exception {\n    SimpleFactory.Simple simple = factory.simple(\"b\");\n    SimpleFactoryBuilders.SimpleUpdater updater = updaterFactory.updater(simple);\n    SimpleFactory.Simple updatedSimple = updater\n        .appendix(\"c\")\n        .done();\n    assertThat(simple.concat(), is(\"ab\"));\n    assertThat(updatedSimple.concat(), is(\"ac\"));\n    // updater is recycled\n    assertTrue(updater\n        == updaterFactory.updater(factory.simple(\"x\")));\n  }", "signature": "void simple()", "full_signature": "@Test public void simple()", "class_method_signature": "SimpleFactoryTest.simple()", "testcase": true, "constructor": false, "invocations": ["simple", "updater", "done", "appendix", "assertThat", "concat", "is", "assertThat", "concat", "is", "assertTrue", "updater", "simple"]}, "focal_class": {"identifier": "SimpleFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String string;", "modifier": "private final", "type": "String", "declarator": "string", "var_name": "string"}], "methods": [{"identifier": "SimpleFactory", "parameters": "(String string)", "modifiers": "", "return": "", "signature": " SimpleFactory(String string)", "full_signature": "  SimpleFactory(String string)", "class_method_signature": "SimpleFactory.SimpleFactory(String string)", "testcase": false, "constructor": true}, {"identifier": "simple", "parameters": "(String appendix)", "modifiers": "@Updater @Recycle", "return": "Simple", "signature": "Simple simple(String appendix)", "full_signature": "@Updater @Recycle Simple simple(String appendix)", "class_method_signature": "SimpleFactory.simple(String appendix)", "testcase": false, "constructor": false}], "file": "examples/basic/src/main/java/net/zerobuilder/examples/instaup/SimpleFactory.java"}, "focal_method": {"identifier": "simple", "parameters": "(String appendix)", "modifiers": "@Updater @Recycle", "return": "Simple", "body": "@Updater\n  @Recycle\n  Simple simple(String appendix) throws IOException {\n    return new Simple(string, appendix);\n  }", "signature": "Simple simple(String appendix)", "full_signature": "@Updater @Recycle Simple simple(String appendix)", "class_method_signature": "SimpleFactory.simple(String appendix)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 66055507, "url": "https://github.com/h908714124/zerobuilder", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 19, "size": 1962, "license": "licensed"}}