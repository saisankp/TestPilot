{"test_class": {"identifier": "MyControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MockMvc mockMvc;", "modifier": "@Autowired\n    private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "how-to-handle-mock-mvc/src/test/java/me/siyoon/howtohandlemockmvc/MyControllerTest.java"}, "test_case": {"identifier": "helloTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void helloTest() throws Exception {\n//        mockMvc.perform(get(\"/hello\").accept(MediaType.TEXT_HTML))\n//                .andExpect(status().isOk())\n//                .andDo(print());\n\n        //\ud30c\ub77c\uba38\ud2f0\ub85c \ubb50\uac00 \ub4e4\uc5b4\uac00\ub294\uc9c0 \uc54c\uae30\uac00 \uc5b4\ub824\uc6b4\ub370 \uc2e4\uc81c \uac1d\uccb4\ub97c \ub123\uc73c\uba74 \uc5b4\ub5a4 \uba54\uc18c\ub4dc\uac00 \uc788\ub294\uc9c0 IDE\ub85c \uc27d\uac8c \uc54c \uc218 \uc788\ub2e4 \uac1c\uafc0\ud301\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello\").accept(MediaType.TEXT_HTML))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n\n        System.out.println(\"mockMvc = \" + mockMvc.getDispatcherServlet().getEnvironment().toString());\n    }", "signature": "void helloTest()", "full_signature": "@Test public void helloTest()", "class_method_signature": "MyControllerTest.helloTest()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "get", "isOk", "status", "print", "println", "toString", "getEnvironment", "getDispatcherServlet"]}, "focal_class": {"identifier": "MyController", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "hello", "parameters": "(Model model)", "modifiers": "@GetMapping(\"/hello\") public", "return": "String", "signature": "String hello(Model model)", "full_signature": "@GetMapping(\"/hello\") public String hello(Model model)", "class_method_signature": "MyController.hello(Model model)", "testcase": false, "constructor": false}, {"identifier": "helloName", "parameters": "(@PathVariable String name)", "modifiers": "@GetMapping(\"/hello/{name}\") public @ResponseBody", "return": "String", "signature": "String helloName(@PathVariable String name)", "full_signature": "@GetMapping(\"/hello/{name}\") public @ResponseBody String helloName(@PathVariable String name)", "class_method_signature": "MyController.helloName(@PathVariable String name)", "testcase": false, "constructor": false}, {"identifier": "helloName", "parameters": "(@PathVariable(name = \"name1\") String name1, @PathVariable(name = \"name2\") String name2)", "modifiers": "@GetMapping(\"/hello/{name1}/{name2}\") public @ResponseBody", "return": "String", "signature": "String helloName(@PathVariable(name = \"name1\") String name1, @PathVariable(name = \"name2\") String name2)", "full_signature": "@GetMapping(\"/hello/{name1}/{name2}\") public @ResponseBody String helloName(@PathVariable(name = \"name1\") String name1, @PathVariable(name = \"name2\") String name2)", "class_method_signature": "MyController.helloName(@PathVariable(name = \"name1\") String name1, @PathVariable(name = \"name2\") String name2)", "testcase": false, "constructor": false}], "file": "how-to-handle-mock-mvc/src/main/java/me/siyoon/howtohandlemockmvc/MyController.java"}, "focal_method": {"identifier": "hello", "parameters": "(Model model)", "modifiers": "@GetMapping(\"/hello\") public", "return": "String", "body": "@GetMapping(\"/hello\")\n    public String hello(Model model) {\n        model.addAttribute(\"name\", \"siyoon\");\n        return \"index\";\n    }", "signature": "String hello(Model model)", "full_signature": "@GetMapping(\"/hello\") public String hello(Model model)", "class_method_signature": "MyController.hello(Model model)", "testcase": false, "constructor": false, "invocations": ["addAttribute"]}, "repository": {"repo_id": 152217753, "url": "https://github.com/siyoon210/spring-framework", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7064, "license": "licensed"}}