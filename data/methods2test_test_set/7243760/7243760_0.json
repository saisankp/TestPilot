{"test_class": {"identifier": "AnalyticNodeDescriptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "series/src/test/java/com/barchart/feed/series/network/AnalyticNodeDescriptorTest.java"}, "test_case": {"identifier": "testInstantiateAnalytic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstantiateAnalytic() {\n       String entry = \"PivotPointOverlay;PP_S3L,Overlay,Base;com.barchart.feed.series.analytics.PivotPoint;2;Support3;Overlay,IO;Base,IO\";\n       AnalyticNodeDescriptor desc = NetworkSchema.loadDescriptor(entry.split(\";\"));\n       assertNotNull(desc);\n       \n       Analytic analytic = desc.instantiateAnalytic();\n       assertNotNull(analytic);\n    }", "signature": "void testInstantiateAnalytic()", "full_signature": "@Test public void testInstantiateAnalytic()", "class_method_signature": "AnalyticNodeDescriptorTest.testInstantiateAnalytic()", "testcase": true, "constructor": false, "invocations": ["loadDescriptor", "split", "assertNotNull", "instantiateAnalytic", "assertNotNull"]}, "focal_class": {"identifier": "AnalyticNodeDescriptor", "superclass": "", "interfaces": "implements AnalyticDescriptor", "fields": [{"original_string": "private String networkName;", "modifier": "private", "type": "String", "declarator": "networkName", "var_name": "networkName"}, {"original_string": "private String nodeName;", "modifier": "private", "type": "String", "declarator": "nodeName", "var_name": "nodeName"}, {"original_string": "private Class<? extends Analytic> analyticClass;", "modifier": "private", "type": "Class<? extends Analytic>", "declarator": "analyticClass", "var_name": "analyticClass"}, {"original_string": "private int[] constructorArgs = new int[0];", "modifier": "private", "type": "int[]", "declarator": "constructorArgs = new int[0]", "var_name": "constructorArgs"}, {"original_string": "private String outputKey;", "modifier": "private", "type": "String", "declarator": "outputKey", "var_name": "outputKey"}, {"original_string": "private String[] timeFrames;", "modifier": "private", "type": "String[]", "declarator": "timeFrames", "var_name": "timeFrames"}, {"original_string": "private Map<String,AnalyticNodeDescriptor> inputDescriptors;", "modifier": "private", "type": "Map<String,AnalyticNodeDescriptor>", "declarator": "inputDescriptors", "var_name": "inputDescriptors"}, {"original_string": "private Map<String,String[]> inputTimeFrames;", "modifier": "private", "type": "Map<String,String[]>", "declarator": "inputTimeFrames", "var_name": "inputTimeFrames"}], "methods": [{"identifier": "AnalyticNodeDescriptor", "parameters": "(String networkName, String nodeName)", "modifiers": "public", "return": "", "signature": " AnalyticNodeDescriptor(String networkName, String nodeName)", "full_signature": "public  AnalyticNodeDescriptor(String networkName, String nodeName)", "class_method_signature": "AnalyticNodeDescriptor.AnalyticNodeDescriptor(String networkName, String nodeName)", "testcase": false, "constructor": true}, {"identifier": "getSpecifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSpecifier()", "full_signature": "@Override public String getSpecifier()", "class_method_signature": "AnalyticNodeDescriptor.getSpecifier()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType getType()", "full_signature": "@Override public NodeType getType()", "class_method_signature": "AnalyticNodeDescriptor.getType()", "testcase": false, "constructor": false}, {"identifier": "getNetworkName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNetworkName()", "full_signature": "public String getNetworkName()", "class_method_signature": "AnalyticNodeDescriptor.getNetworkName()", "testcase": false, "constructor": false}, {"identifier": "setNetworkName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setNetworkName(String name)", "full_signature": "public void setNetworkName(String name)", "class_method_signature": "AnalyticNodeDescriptor.setNetworkName(String name)", "testcase": false, "constructor": false}, {"identifier": "getTimeFrames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getTimeFrames()", "full_signature": "public String[] getTimeFrames()", "class_method_signature": "AnalyticNodeDescriptor.getTimeFrames()", "testcase": false, "constructor": false}, {"identifier": "setTimeFrames", "parameters": "(String[] timeFrames)", "modifiers": "public", "return": "void", "signature": "void setTimeFrames(String[] timeFrames)", "full_signature": "public void setTimeFrames(String[] timeFrames)", "class_method_signature": "AnalyticNodeDescriptor.setTimeFrames(String[] timeFrames)", "testcase": false, "constructor": false}, {"identifier": "getAnalyticClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<? extends Analytic>", "signature": "Class<? extends Analytic> getAnalyticClass()", "full_signature": "@Override public Class<? extends Analytic> getAnalyticClass()", "class_method_signature": "AnalyticNodeDescriptor.getAnalyticClass()", "testcase": false, "constructor": false}, {"identifier": "setAnalyticClass", "parameters": "(Class<? extends Analytic> clazz)", "modifiers": "@Override public", "return": "void", "signature": "void setAnalyticClass(Class<? extends Analytic> clazz)", "full_signature": "@Override public void setAnalyticClass(Class<? extends Analytic> clazz)", "class_method_signature": "AnalyticNodeDescriptor.setAnalyticClass(Class<? extends Analytic> clazz)", "testcase": false, "constructor": false}, {"identifier": "getConstructorArgs", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getConstructorArgs()", "full_signature": "@Override public int[] getConstructorArgs()", "class_method_signature": "AnalyticNodeDescriptor.getConstructorArgs()", "testcase": false, "constructor": false}, {"identifier": "setConstructorArgs", "parameters": "(int[] args)", "modifiers": "@Override public", "return": "void", "signature": "void setConstructorArgs(int[] args)", "full_signature": "@Override public void setConstructorArgs(int[] args)", "class_method_signature": "AnalyticNodeDescriptor.setConstructorArgs(int[] args)", "testcase": false, "constructor": false}, {"identifier": "getOutputKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputKey()", "full_signature": "public String getOutputKey()", "class_method_signature": "AnalyticNodeDescriptor.getOutputKey()", "testcase": false, "constructor": false}, {"identifier": "setOutputKey", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void setOutputKey(String key)", "full_signature": "public void setOutputKey(String key)", "class_method_signature": "AnalyticNodeDescriptor.setOutputKey(String key)", "testcase": false, "constructor": false}, {"identifier": "mapInputDescriptor", "parameters": "(String key, AnalyticNodeDescriptor desc)", "modifiers": "public", "return": "void", "signature": "void mapInputDescriptor(String key, AnalyticNodeDescriptor desc)", "full_signature": "public void mapInputDescriptor(String key, AnalyticNodeDescriptor desc)", "class_method_signature": "AnalyticNodeDescriptor.mapInputDescriptor(String key, AnalyticNodeDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "mapTimeFrame", "parameters": "(String key, String[] timeFrames)", "modifiers": "public", "return": "void", "signature": "void mapTimeFrame(String key, String[] timeFrames)", "full_signature": "public void mapTimeFrame(String key, String[] timeFrames)", "class_method_signature": "AnalyticNodeDescriptor.mapTimeFrame(String key, String[] timeFrames)", "testcase": false, "constructor": false}, {"identifier": "instantiateAnalytic", "parameters": "()", "modifiers": "public", "return": "Analytic", "signature": "Analytic instantiateAnalytic()", "full_signature": "public Analytic instantiateAnalytic()", "class_method_signature": "AnalyticNodeDescriptor.instantiateAnalytic()", "testcase": false, "constructor": false}, {"identifier": "getInputNodeDescriptors", "parameters": "()", "modifiers": "public", "return": "List<AnalyticNodeDescriptor>", "signature": "List<AnalyticNodeDescriptor> getInputNodeDescriptors()", "full_signature": "public List<AnalyticNodeDescriptor> getInputNodeDescriptors()", "class_method_signature": "AnalyticNodeDescriptor.getInputNodeDescriptors()", "testcase": false, "constructor": false}, {"identifier": "getInputNodeDescriptor", "parameters": "(String sourceKey)", "modifiers": "public", "return": "AnalyticNodeDescriptor", "signature": "AnalyticNodeDescriptor getInputNodeDescriptor(String sourceKey)", "full_signature": "public AnalyticNodeDescriptor getInputNodeDescriptor(String sourceKey)", "class_method_signature": "AnalyticNodeDescriptor.getInputNodeDescriptor(String sourceKey)", "testcase": false, "constructor": false}, {"identifier": "getInputTimeframes", "parameters": "(String sourceKey)", "modifiers": "public", "return": "String[]", "signature": "String[] getInputTimeframes(String sourceKey)", "full_signature": "public String[] getInputTimeframes(String sourceKey)", "class_method_signature": "AnalyticNodeDescriptor.getInputTimeframes(String sourceKey)", "testcase": false, "constructor": false}, {"identifier": "getTimeframeIndex", "parameters": "(String tf)", "modifiers": "public", "return": "int", "signature": "int getTimeframeIndex(String tf)", "full_signature": "public int getTimeframeIndex(String tf)", "class_method_signature": "AnalyticNodeDescriptor.getTimeframeIndex(String tf)", "testcase": false, "constructor": false}, {"identifier": "loadSearchDescriptor", "parameters": "(SearchDescriptor desc, SeriesSubscription subscription)", "modifiers": "public", "return": "void", "signature": "void loadSearchDescriptor(SearchDescriptor desc, SeriesSubscription subscription)", "full_signature": "public void loadSearchDescriptor(SearchDescriptor desc, SeriesSubscription subscription)", "class_method_signature": "AnalyticNodeDescriptor.loadSearchDescriptor(SearchDescriptor desc, SeriesSubscription subscription)", "testcase": false, "constructor": false}, {"identifier": "getRequiredSubscriptions", "parameters": "(SeriesSubscription subscription)", "modifiers": "public", "return": "Map<String,SeriesSubscription>", "signature": "Map<String,SeriesSubscription> getRequiredSubscriptions(SeriesSubscription subscription)", "full_signature": "public Map<String,SeriesSubscription> getRequiredSubscriptions(SeriesSubscription subscription)", "class_method_signature": "AnalyticNodeDescriptor.getRequiredSubscriptions(SeriesSubscription subscription)", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/network/AnalyticNodeDescriptor.java"}, "focal_method": {"identifier": "instantiateAnalytic", "parameters": "()", "modifiers": "public", "return": "Analytic", "body": "public Analytic instantiateAnalytic() {\n        Constructor<?>[] constructorArray = analyticClass.getConstructors();\n        for (Constructor<?> constructor : constructorArray) {\n            Class<?>[] parameterTypes = constructor.getParameterTypes();\n            if(parameterTypes.length == constructorArgs.length) {\n                Object[] parameters = new Object[parameterTypes.length];\n                for (int i = 0;i < parameterTypes.length;i++) {\n                    parameters[i] = new Integer(this.constructorArgs[i]);\n                }\n                try {\n                    Analytic a = (Analytic)constructor.newInstance(parameters);\n                    a.setName(nodeName);\n                    return a;\n                }catch(Exception e) { }\n            }\n        }\n        throw new IllegalStateException(\"Unable to instantiate Analytic class using constructor containing \" + \n            (constructorArgs == null ? 0:constructorArgs.length) + \" arguments\");\n    }", "signature": "Analytic instantiateAnalytic()", "full_signature": "public Analytic instantiateAnalytic()", "class_method_signature": "AnalyticNodeDescriptor.instantiateAnalytic()", "testcase": false, "constructor": false, "invocations": ["getConstructors", "getParameterTypes", "newInstance", "setName"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}