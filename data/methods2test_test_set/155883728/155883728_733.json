{"test_class": {"identifier": "SlingNodetypesScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File baseDir = new File(\"src/test/resources/SlingNodetypesScannerTest\");", "modifier": "final", "type": "File", "declarator": "baseDir = new File(\"src/test/resources/SlingNodetypesScannerTest\")", "var_name": "baseDir"}, {"original_string": "final File testTarget = new File(\"target/test-output/SlingNodetypesScannerTest\");", "modifier": "final", "type": "File", "declarator": "testTarget = new File(\"target/test-output/SlingNodetypesScannerTest\")", "var_name": "testTarget"}, {"original_string": "final String alphaSrc = \"has_a_src\";", "modifier": "final", "type": "String", "declarator": "alphaSrc = \"has_a_src\"", "var_name": "alphaSrc"}, {"original_string": "final String bravoSrc = \"has_b_src\";", "modifier": "final", "type": "String", "declarator": "bravoSrc = \"has_b_src\"", "var_name": "bravoSrc"}, {"original_string": "final String charlieSrc = \"has_c_src\";", "modifier": "final", "type": "String", "declarator": "charlieSrc = \"has_c_src\"", "var_name": "charlieSrc"}, {"original_string": "final String deltaSrc = \"has_d_src\";", "modifier": "final", "type": "String", "declarator": "deltaSrc = \"has_d_src\"", "var_name": "deltaSrc"}, {"original_string": "final String echoSrc = \"has_e_src\";", "modifier": "final", "type": "String", "declarator": "echoSrc = \"has_e_src\"", "var_name": "echoSrc"}, {"original_string": "final String foxtrotSrc = \"has_f_src\";", "modifier": "final", "type": "String", "declarator": "foxtrotSrc = \"has_f_src\"", "var_name": "foxtrotSrc"}, {"original_string": "final String yankeeSrc = \"has_y_src\";", "modifier": "final", "type": "String", "declarator": "yankeeSrc = \"has_y_src\"", "var_name": "yankeeSrc"}, {"original_string": "final String zuluSrc = \"has_z_src\";", "modifier": "final", "type": "String", "declarator": "zuluSrc = \"has_z_src\"", "var_name": "zuluSrc"}], "file": "core/src/test/java/net/adamcin/oakpal/core/SlingNodetypesScannerTest.java"}, "test_case": {"identifier": "testFindNodeTypeDefinitions_zips", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindNodeTypeDefinitions_zips() throws Exception {\n        final File testBaseDir = new File(testTarget, \"testFindNodeTypeDefinitions_zips\");\n        FileUtils.deleteDirectory(testBaseDir);\n        testBaseDir.mkdirs();\n        buildAllJars(testBaseDir);\n        final List<URL> jarUrls = SlingNodetypesScanner\n                .findNodeTypeDefinitions(getJars(testBaseDir).collect(Collectors.toList()));\n        assertEquals(\"jar urls size should be: \" + jarUrls, 8, jarUrls.size());\n        final List<URL> dirUrls = SlingNodetypesScanner\n                .findNodeTypeDefinitions(getDirs().collect(Collectors.toList()));\n        assertEquals(\"dir urls size should be: \" + dirUrls, 8, dirUrls.size());\n    }", "signature": "void testFindNodeTypeDefinitions_zips()", "full_signature": "@Test public void testFindNodeTypeDefinitions_zips()", "class_method_signature": "SlingNodetypesScannerTest.testFindNodeTypeDefinitions_zips()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "buildAllJars", "findNodeTypeDefinitions", "collect", "getJars", "toList", "assertEquals", "size", "findNodeTypeDefinitions", "collect", "getDirs", "toList", "assertEquals", "size"]}, "focal_class": {"identifier": "SlingNodetypesScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SLING_NODETYPES = \"Sling-Nodetypes\";", "modifier": "public static final", "type": "String", "declarator": "SLING_NODETYPES = \"Sling-Nodetypes\"", "var_name": "SLING_NODETYPES"}], "methods": [{"identifier": "SlingNodetypesScanner", "parameters": "()", "modifiers": "private", "return": "", "signature": " SlingNodetypesScanner()", "full_signature": "private  SlingNodetypesScanner()", "class_method_signature": "SlingNodetypesScanner.SlingNodetypesScanner()", "testcase": false, "constructor": true}, {"identifier": "findNodeTypeDefinitions", "parameters": "()", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> findNodeTypeDefinitions()", "full_signature": "public static List<URL> findNodeTypeDefinitions()", "class_method_signature": "SlingNodetypesScanner.findNodeTypeDefinitions()", "testcase": false, "constructor": false}, {"identifier": "findNodeTypeDefinitions", "parameters": "(final ClassLoader classLoader)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> findNodeTypeDefinitions(final ClassLoader classLoader)", "full_signature": "public static List<URL> findNodeTypeDefinitions(final ClassLoader classLoader)", "class_method_signature": "SlingNodetypesScanner.findNodeTypeDefinitions(final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "findNodeTypeDefinitions", "parameters": "(final List<File> zipFiles)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> findNodeTypeDefinitions(final List<File> zipFiles)", "full_signature": "public static List<URL> findNodeTypeDefinitions(final List<File> zipFiles)", "class_method_signature": "SlingNodetypesScanner.findNodeTypeDefinitions(final List<File> zipFiles)", "testcase": false, "constructor": false}, {"identifier": "resolveNodeTypeDefinitions", "parameters": "(final List<String> resourceNames)", "modifiers": "public static", "return": "Map<String, URL>", "signature": "Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames)", "full_signature": "public static Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames)", "class_method_signature": "SlingNodetypesScanner.resolveNodeTypeDefinitions(final List<String> resourceNames)", "testcase": false, "constructor": false}, {"identifier": "resolveNodeTypeDefinitions", "parameters": "(final List<String> resourceNames,\n                                                              final ClassLoader classLoader)", "modifiers": "public static", "return": "Map<String, URL>", "signature": "Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final ClassLoader classLoader)", "full_signature": "public static Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final ClassLoader classLoader)", "class_method_signature": "SlingNodetypesScanner.resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "resolveNodeTypeDefinitions", "parameters": "(final List<String> resourceNames,\n                                                              final List<File> zipFiles)", "modifiers": "public static", "return": "Map<String, URL>", "signature": "Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final List<File> zipFiles)", "full_signature": "public static Map<String, URL> resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final List<File> zipFiles)", "class_method_signature": "SlingNodetypesScanner.resolveNodeTypeDefinitions(final List<String> resourceNames,\n                                                              final List<File> zipFiles)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/SlingNodetypesScanner.java"}, "focal_method": {"identifier": "findNodeTypeDefinitions", "parameters": "()", "modifiers": "public static", "return": "List<URL>", "body": "public static List<URL> findNodeTypeDefinitions() throws IOException {\n        return findNodeTypeDefinitions(Util.getDefaultClassLoader());\n    }", "signature": "List<URL> findNodeTypeDefinitions()", "full_signature": "public static List<URL> findNodeTypeDefinitions()", "class_method_signature": "SlingNodetypesScanner.findNodeTypeDefinitions()", "testcase": false, "constructor": false, "invocations": ["findNodeTypeDefinitions", "getDefaultClassLoader"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}