{"test_class": {"identifier": "RpIdHashValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Origin origin = null;", "modifier": "private final", "type": "Origin", "declarator": "origin = null", "var_name": "origin"}, {"original_string": "private final RpIdHashValidator target = new RpIdHashValidator();", "modifier": "private final", "type": "RpIdHashValidator", "declarator": "target = new RpIdHashValidator()", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/validator/RpIdHashValidatorTest.java"}, "test_case": {"identifier": "verifyRpIdHash_test_with_relyingParty_rpId_null", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void verifyRpIdHash_test_with_relyingParty_rpId_null() {\n\n        String rpIdA = \"example.com\";\n        String rpIdB = \"example.com\";\n        byte[] rpIdBytesA = rpIdA.getBytes(StandardCharsets.UTF_8);\n        byte[] rpIdHashA = MessageDigestUtil.createSHA256().digest(rpIdBytesA);\n\n        ServerProperty serverProperty = new ServerProperty(origin, null, null, null);\n\n        //When\n        assertThrows(IllegalArgumentException.class,\n                () -> target.validate(rpIdHashA, serverProperty)\n        );\n    }", "signature": "void verifyRpIdHash_test_with_relyingParty_rpId_null()", "full_signature": "@Test void verifyRpIdHash_test_with_relyingParty_rpId_null()", "class_method_signature": "RpIdHashValidatorTest.verifyRpIdHash_test_with_relyingParty_rpId_null()", "testcase": true, "constructor": false, "invocations": ["getBytes", "digest", "createSHA256", "assertThrows", "validate"]}, "focal_class": {"identifier": "RpIdHashValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(byte[] rpIdHash, CoreServerProperty serverProperty)", "modifiers": "public", "return": "void", "signature": "void validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "full_signature": "public void validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "class_method_signature": "RpIdHashValidator.validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/validator/RpIdHashValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(byte[] rpIdHash, CoreServerProperty serverProperty)", "modifiers": "public", "return": "void", "body": "public void validate(byte[] rpIdHash, CoreServerProperty serverProperty) {\n        AssertUtil.notNull(serverProperty, \"serverProperty must not be null\");\n        String rpId = serverProperty.getRpId();\n        AssertUtil.notNull(rpId, \"rpId must not be null\");\n\n        MessageDigest messageDigest = MessageDigestUtil.createSHA256();\n        byte[] relyingPartyRpIdBytes = rpId.getBytes(StandardCharsets.UTF_8);\n        byte[] relyingPartyRpIdHash = messageDigest.digest(relyingPartyRpIdBytes);\n        if (!Arrays.equals(rpIdHash, relyingPartyRpIdHash)) {\n            throw new BadRpIdException(\"rpIdHash doesn't match the hash of preconfigured rpId.\");\n        }\n    }", "signature": "void validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "full_signature": "public void validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "class_method_signature": "RpIdHashValidator.validate(byte[] rpIdHash, CoreServerProperty serverProperty)", "testcase": false, "constructor": false, "invocations": ["notNull", "getRpId", "notNull", "createSHA256", "getBytes", "digest", "equals"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}