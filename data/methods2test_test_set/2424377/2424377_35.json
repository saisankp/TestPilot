{"test_class": {"identifier": "SubstringComparatorTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/text/preprocessing/SubstringComparatorTest.java"}, "test_case": {"identifier": "testComparatorContract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComparatorContract() {\n    int[] tokensWordIndex = new int[2];\n    int[] wordsStemIndex = new int[1];\n    Substring a = new Substring(0, 0, 1, 0);\n\n    Assert.assertEquals(0, new SubstringComparator(tokensWordIndex, wordsStemIndex).compare(a, a));\n  }", "signature": "void testComparatorContract()", "full_signature": "@Test public void testComparatorContract()", "class_method_signature": "SubstringComparatorTest.testComparatorContract()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare"]}, "focal_class": {"identifier": "SubstringComparator", "superclass": "", "interfaces": "implements Comparator<Substring>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final int[] tokensWordIndex;", "modifier": "private final", "type": "int[]", "declarator": "tokensWordIndex", "var_name": "tokensWordIndex"}, {"original_string": "private final int[] wordsStemIndex;", "modifier": "private final", "type": "int[]", "declarator": "wordsStemIndex", "var_name": "wordsStemIndex"}], "methods": [{"identifier": "SubstringComparator", "parameters": "(int[] tokensWordIndex, int[] wordsStemIndex)", "modifiers": "public", "return": "", "signature": " SubstringComparator(int[] tokensWordIndex, int[] wordsStemIndex)", "full_signature": "public  SubstringComparator(int[] tokensWordIndex, int[] wordsStemIndex)", "class_method_signature": "SubstringComparator.SubstringComparator(int[] tokensWordIndex, int[] wordsStemIndex)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(Substring s1, Substring s2)", "modifiers": "public", "return": "int", "signature": "int compare(Substring s1, Substring s2)", "full_signature": "public int compare(Substring s1, Substring s2)", "class_method_signature": "SubstringComparator.compare(Substring s1, Substring s2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/text/preprocessing/SubstringComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(Substring s1, Substring s2)", "modifiers": "public", "return": "int", "body": "public int compare(Substring s1, Substring s2) {\n    final int s1From = s1.from;\n    final int s1To = s1.to;\n    final int s2From = s2.from;\n    final int s2To = s2.to;\n\n    final int s2Length = s2To - s2From;\n    final int s1Length = s1To - s1From;\n    if (s1Length != s2Length) {\n      return s1Length - s2Length;\n    }\n\n    assert s1Length == s2Length;\n    for (int i = 0; i < s1Length; i++) {\n      final int stemIndex1 = wordsStemIndex[tokensWordIndex[s1From + i]];\n      final int stemIndex2 = wordsStemIndex[tokensWordIndex[s2From + i]];\n      if (stemIndex1 != stemIndex2) {\n        return stemIndex1 - stemIndex2;\n      }\n    }\n\n    // If the substrings are equal in the inflection-insensitive way, return 0 (equivalence class).\n    return 0;\n  }", "signature": "int compare(Substring s1, Substring s2)", "full_signature": "public int compare(Substring s1, Substring s2)", "class_method_signature": "SubstringComparator.compare(Substring s1, Substring s2)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}