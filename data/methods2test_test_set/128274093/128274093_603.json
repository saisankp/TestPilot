{"test_class": {"identifier": "ObjectHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/functions/ObjectHelperTest.java"}, "test_case": {"identifier": "compareLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareLong() {\n        assertEquals(-1, ObjectHelper.compare(0L, 2L));\n        assertEquals(0, ObjectHelper.compare(0L, 0L));\n        assertEquals(1, ObjectHelper.compare(2L, 0L));\n    }", "signature": "void compareLong()", "full_signature": "@Test public void compareLong()", "class_method_signature": "ObjectHelperTest.compareLong()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "ObjectHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final BiPredicate<Object, Object> EQUALS = new BiObjectPredicate();", "modifier": "static final", "type": "BiPredicate<Object, Object>", "declarator": "EQUALS = new BiObjectPredicate()", "var_name": "EQUALS"}], "methods": [{"identifier": "ObjectHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObjectHelper()", "full_signature": "private  ObjectHelper()", "class_method_signature": "ObjectHelper.ObjectHelper()", "testcase": false, "constructor": true}, {"identifier": "requireNonNull", "parameters": "(T object, String message)", "modifiers": "public static", "return": "T", "signature": "T requireNonNull(T object, String message)", "full_signature": "public static T requireNonNull(T object, String message)", "class_method_signature": "ObjectHelper.requireNonNull(T object, String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o1, Object o2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Object o1, Object o2)", "full_signature": "public static boolean equals(Object o1, Object o2)", "class_method_signature": "ObjectHelper.equals(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(Object o)", "modifiers": "public static", "return": "int", "signature": "int hashCode(Object o)", "full_signature": "public static int hashCode(Object o)", "class_method_signature": "ObjectHelper.hashCode(Object o)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(int v1, int v2)", "modifiers": "public static", "return": "int", "signature": "int compare(int v1, int v2)", "full_signature": "public static int compare(int v1, int v2)", "class_method_signature": "ObjectHelper.compare(int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(long v1, long v2)", "modifiers": "public static", "return": "int", "signature": "int compare(long v1, long v2)", "full_signature": "public static int compare(long v1, long v2)", "class_method_signature": "ObjectHelper.compare(long v1, long v2)", "testcase": false, "constructor": false}, {"identifier": "equalsPredicate", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "BiPredicate<T, T>", "signature": "BiPredicate<T, T> equalsPredicate()", "full_signature": "@SuppressWarnings(\"unchecked\") public static BiPredicate<T, T> equalsPredicate()", "class_method_signature": "ObjectHelper.equalsPredicate()", "testcase": false, "constructor": false}, {"identifier": "verifyPositive", "parameters": "(int value, String paramName)", "modifiers": "public static", "return": "int", "signature": "int verifyPositive(int value, String paramName)", "full_signature": "public static int verifyPositive(int value, String paramName)", "class_method_signature": "ObjectHelper.verifyPositive(int value, String paramName)", "testcase": false, "constructor": false}, {"identifier": "verifyPositive", "parameters": "(long value, String paramName)", "modifiers": "public static", "return": "long", "signature": "long verifyPositive(long value, String paramName)", "full_signature": "public static long verifyPositive(long value, String paramName)", "class_method_signature": "ObjectHelper.verifyPositive(long value, String paramName)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/functions/ObjectHelper.java"}, "focal_method": {"identifier": "compare", "parameters": "(int v1, int v2)", "modifiers": "public static", "return": "int", "body": "public static int compare(int v1, int v2) {\n        return v1 < v2 ? -1 : (v1 > v2 ? 1 : 0);\n    }", "signature": "int compare(int v1, int v2)", "full_signature": "public static int compare(int v1, int v2)", "class_method_signature": "ObjectHelper.compare(int v1, int v2)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}