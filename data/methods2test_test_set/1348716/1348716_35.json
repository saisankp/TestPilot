{"test_class": {"identifier": "QuestionGroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TITLE = \"Title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"Title\"", "var_name": "TITLE"}, {"original_string": "@Mock\n    private QuestionnaireServiceFacade questionnaireServiceFacade;", "modifier": "@Mock\n    private", "type": "QuestionnaireServiceFacade", "declarator": "questionnaireServiceFacade", "var_name": "questionnaireServiceFacade"}, {"original_string": "private QuestionGroupController questionGroupController;", "modifier": "private", "type": "QuestionGroupController", "declarator": "questionGroupController", "var_name": "questionGroupController"}, {"original_string": "@Mock\n    private RequestContext requestContext;", "modifier": "@Mock\n    private", "type": "RequestContext", "declarator": "requestContext", "var_name": "requestContext"}, {"original_string": "@Mock\n    private MessageContext messageContext;", "modifier": "@Mock\n    private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}, {"original_string": "@Mock\n    private ModelMap model;", "modifier": "@Mock\n    private", "type": "ModelMap", "declarator": "model", "var_name": "model"}, {"original_string": "@Mock\n    private HttpServletRequest httpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}, {"original_string": "MifosBeanValidator validator = new MifosBeanValidator();", "modifier": "", "type": "MifosBeanValidator", "declarator": "validator = new MifosBeanValidator()", "var_name": "validator"}, {"original_string": "LocalValidatorFactoryBean targetValidator = new LocalValidatorFactoryBean();", "modifier": "", "type": "LocalValidatorFactoryBean", "declarator": "targetValidator = new LocalValidatorFactoryBean()", "var_name": "targetValidator"}], "file": "questionnaire/src/test/java/org/mifos/platform/questionnaire/ui/controller/QuestionGroupControllerTest.java"}, "test_case": {"identifier": "testAddQuestionForEmptyType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddQuestionForEmptyType() {\n        QuestionGroupForm questionGroupForm = getQuestionGroupForm(TITLE, \"Create.Client\", \"Default\");\n        questionGroupForm.setValidator(validator);\n        questionGroupForm.getCurrentQuestion().setText(TITLE);\n        questionGroupForm.getCurrentQuestion().setType(null);\n        when(messageContext.hasErrorMessages()).thenReturn(true);\n        when(requestContext.getMessageContext()).thenReturn(messageContext);\n        String result = questionGroupController.addQuestion(questionGroupForm, requestContext);\n        assertThat(result, is(\"failure\"));\n        verify(requestContext, times(1)).getMessageContext();\n        verify(messageContext).addMessage(argThat(new MessageMatcher(\"NotNull.QuestionGroupForm.currentQuestion.type\")));\n    }", "signature": "void testAddQuestionForEmptyType()", "full_signature": "@Test public void testAddQuestionForEmptyType()", "class_method_signature": "QuestionGroupControllerTest.testAddQuestionForEmptyType()", "testcase": true, "constructor": false, "invocations": ["getQuestionGroupForm", "setValidator", "setText", "getCurrentQuestion", "setType", "getCurrentQuestion", "thenReturn", "when", "hasErrorMessages", "thenReturn", "when", "getMessageContext", "addQuestion", "assertThat", "is", "getMessageContext", "verify", "times", "addMessage", "verify", "argThat"]}, "focal_class": {"identifier": "QuestionGroupController", "superclass": "extends QuestionnaireController", "interfaces": "", "fields": [], "methods": [{"identifier": "QuestionGroupController", "parameters": "()", "modifiers": "@SuppressWarnings({\"UnusedDeclaration\"}) public", "return": "", "signature": " QuestionGroupController()", "full_signature": "@SuppressWarnings({\"UnusedDeclaration\"}) public  QuestionGroupController()", "class_method_signature": "QuestionGroupController.QuestionGroupController()", "testcase": false, "constructor": true}, {"identifier": "QuestionGroupController", "parameters": "(QuestionnaireServiceFacade questionnaireServiceFacade)", "modifiers": "public", "return": "", "signature": " QuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "full_signature": "public  QuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "class_method_signature": "QuestionGroupController.QuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "testcase": false, "constructor": true}, {"identifier": "getAllQuestionGroups", "parameters": "(ModelMap model, HttpServletRequest request)", "modifiers": "@RequestMapping(\"/viewQuestionGroups.ftl\") public", "return": "String", "signature": "String getAllQuestionGroups(ModelMap model, HttpServletRequest request)", "full_signature": "@RequestMapping(\"/viewQuestionGroups.ftl\") public String getAllQuestionGroups(ModelMap model, HttpServletRequest request)", "class_method_signature": "QuestionGroupController.getAllQuestionGroups(ModelMap model, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "groupByEventSource", "parameters": "(List <QuestionGroupDetail> questionGroups)", "modifiers": "private", "return": "Map<String,List <QuestionGroupDetail>>", "signature": "Map<String,List <QuestionGroupDetail>> groupByEventSource(List <QuestionGroupDetail> questionGroups)", "full_signature": "private Map<String,List <QuestionGroupDetail>> groupByEventSource(List <QuestionGroupDetail> questionGroups)", "class_method_signature": "QuestionGroupController.groupByEventSource(List <QuestionGroupDetail> questionGroups)", "testcase": false, "constructor": false}, {"identifier": "getQuestionGroup", "parameters": "(ModelMap model, HttpServletRequest httpServletRequest)", "modifiers": "@RequestMapping(\"/viewQuestionGroupDetail.ftl\") public", "return": "String", "signature": "String getQuestionGroup(ModelMap model, HttpServletRequest httpServletRequest)", "full_signature": "@RequestMapping(\"/viewQuestionGroupDetail.ftl\") public String getQuestionGroup(ModelMap model, HttpServletRequest httpServletRequest)", "class_method_signature": "QuestionGroupController.getQuestionGroup(ModelMap model, HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "getHiddenVisibleQuestions", "parameters": "(\n            @RequestParam Integer questionId, @RequestParam String response)", "modifiers": "@RequestMapping(value=\"/getHiddenVisibleQuestions.ftl\", method=RequestMethod.POST) public @ResponseBody", "return": "Map<String, Map<Integer, Boolean>>", "signature": "Map<String, Map<Integer, Boolean>> getHiddenVisibleQuestions(\n            @RequestParam Integer questionId, @RequestParam String response)", "full_signature": "@RequestMapping(value=\"/getHiddenVisibleQuestions.ftl\", method=RequestMethod.POST) public @ResponseBody Map<String, Map<Integer, Boolean>> getHiddenVisibleQuestions(\n            @RequestParam Integer questionId, @RequestParam String response)", "class_method_signature": "QuestionGroupController.getHiddenVisibleQuestions(\n            @RequestParam Integer questionId, @RequestParam String response)", "testcase": false, "constructor": false}, {"identifier": "hideAttachedQuestions", "parameters": "(\n            @RequestParam String questionsId, @RequestParam String sectionsId)", "modifiers": "@RequestMapping(value=\"/hideAttachedQuestions.ftl\", method=RequestMethod.POST) public @ResponseBody", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> hideAttachedQuestions(\n            @RequestParam String questionsId, @RequestParam String sectionsId)", "full_signature": "@RequestMapping(value=\"/hideAttachedQuestions.ftl\", method=RequestMethod.POST) public @ResponseBody Map<String, List<String>> hideAttachedQuestions(\n            @RequestParam String questionsId, @RequestParam String sectionsId)", "class_method_signature": "QuestionGroupController.hideAttachedQuestions(\n            @RequestParam String questionsId, @RequestParam String sectionsId)", "testcase": false, "constructor": false}, {"identifier": "defineQuestionGroup", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext, boolean createMode)", "modifiers": "@SuppressWarnings({\"ThrowableInstanceNeverThrown\"}) public", "return": "String", "signature": "String defineQuestionGroup(QuestionGroupForm questionGroupForm, RequestContext requestContext, boolean createMode)", "full_signature": "@SuppressWarnings({\"ThrowableInstanceNeverThrown\"}) public String defineQuestionGroup(QuestionGroupForm questionGroupForm, RequestContext requestContext, boolean createMode)", "class_method_signature": "QuestionGroupController.defineQuestionGroup(QuestionGroupForm questionGroupForm, RequestContext requestContext, boolean createMode)", "testcase": false, "constructor": false}, {"identifier": "containsCreateLoanEventSource", "parameters": "(List<EventSourceDto> eventSources)", "modifiers": "private", "return": "boolean", "signature": "boolean containsCreateLoanEventSource(List<EventSourceDto> eventSources)", "full_signature": "private boolean containsCreateLoanEventSource(List<EventSourceDto> eventSources)", "class_method_signature": "QuestionGroupController.containsCreateLoanEventSource(List<EventSourceDto> eventSources)", "testcase": false, "constructor": false}, {"identifier": "getAllQgEventSources", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getAllQgEventSources()", "full_signature": "public Map<String, String> getAllQgEventSources()", "class_method_signature": "QuestionGroupController.getAllQgEventSources()", "testcase": false, "constructor": false}, {"identifier": "questionGroupLinkHasErrors", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext, String sourceQuestionId, \n            String linkType, String appliesTo, String affectedQuestionId, String affectedSectionName, \n            String value, String additionalValue)", "modifiers": "private", "return": "boolean", "signature": "boolean questionGroupLinkHasErrors(QuestionGroupForm questionGroupForm, RequestContext requestContext, String sourceQuestionId, \n            String linkType, String appliesTo, String affectedQuestionId, String affectedSectionName, \n            String value, String additionalValue)", "full_signature": "private boolean questionGroupLinkHasErrors(QuestionGroupForm questionGroupForm, RequestContext requestContext, String sourceQuestionId, \n            String linkType, String appliesTo, String affectedQuestionId, String affectedSectionName, \n            String value, String additionalValue)", "class_method_signature": "QuestionGroupController.questionGroupLinkHasErrors(QuestionGroupForm questionGroupForm, RequestContext requestContext, String sourceQuestionId, \n            String linkType, String appliesTo, String affectedQuestionId, String affectedSectionName, \n            String value, String additionalValue)", "testcase": false, "constructor": false}, {"identifier": "isValueNotPresent", "parameters": "(String value)", "modifiers": "private", "return": "boolean", "signature": "boolean isValueNotPresent(String value)", "full_signature": "private boolean isValueNotPresent(String value)", "class_method_signature": "QuestionGroupController.isValueNotPresent(String value)", "testcase": false, "constructor": false}, {"identifier": "isLinkTypeNotChoosen", "parameters": "(String linkType)", "modifiers": "private", "return": "boolean", "signature": "boolean isLinkTypeNotChoosen(String linkType)", "full_signature": "private boolean isLinkTypeNotChoosen(String linkType)", "class_method_signature": "QuestionGroupController.isLinkTypeNotChoosen(String linkType)", "testcase": false, "constructor": false}, {"identifier": "isSourceQuestionPresent", "parameters": "(String sourceQuestionId)", "modifiers": "private", "return": "boolean", "signature": "boolean isSourceQuestionPresent(String sourceQuestionId)", "full_signature": "private boolean isSourceQuestionPresent(String sourceQuestionId)", "class_method_signature": "QuestionGroupController.isSourceQuestionPresent(String sourceQuestionId)", "testcase": false, "constructor": false}, {"identifier": "isAffectedQuestionPresent", "parameters": "(String affectedQuestionId)", "modifiers": "private", "return": "boolean", "signature": "boolean isAffectedQuestionPresent(String affectedQuestionId)", "full_signature": "private boolean isAffectedQuestionPresent(String affectedQuestionId)", "class_method_signature": "QuestionGroupController.isAffectedQuestionPresent(String affectedQuestionId)", "testcase": false, "constructor": false}, {"identifier": "isAffectedSectionPresent", "parameters": "(String affectedSectionName)", "modifiers": "private", "return": "boolean", "signature": "boolean isAffectedSectionPresent(String affectedSectionName)", "full_signature": "private boolean isAffectedSectionPresent(String affectedSectionName)", "class_method_signature": "QuestionGroupController.isAffectedSectionPresent(String affectedSectionName)", "testcase": false, "constructor": false}, {"identifier": "setQuestionLinkDetail", "parameters": "(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedQuestionId, String value, String additionalValue, String linkType, String linkTypeDisplay)", "modifiers": "public", "return": "QuestionLinkDetail", "signature": "QuestionLinkDetail setQuestionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedQuestionId, String value, String additionalValue, String linkType, String linkTypeDisplay)", "full_signature": "public QuestionLinkDetail setQuestionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedQuestionId, String value, String additionalValue, String linkType, String linkTypeDisplay)", "class_method_signature": "QuestionGroupController.setQuestionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedQuestionId, String value, String additionalValue, String linkType, String linkTypeDisplay)", "testcase": false, "constructor": false}, {"identifier": "setSectionLinkDetail", "parameters": "(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedSectionName, String value, String additionalValue, String linkType, String linkTypeDisplay)", "modifiers": "public", "return": "SectionLinkDetail", "signature": "SectionLinkDetail setSectionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedSectionName, String value, String additionalValue, String linkType, String linkTypeDisplay)", "full_signature": "public SectionLinkDetail setSectionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedSectionName, String value, String additionalValue, String linkType, String linkTypeDisplay)", "class_method_signature": "QuestionGroupController.setSectionLinkDetail(QuestionGroupForm questionGroupForm, String sourceQuestionId, \n            String affectedSectionName, String value, String additionalValue, String linkType, String linkTypeDisplay)", "testcase": false, "constructor": false}, {"identifier": "findQuestionDetailById", "parameters": "(QuestionGroupDetail questionGroupDetail, String questionId)", "modifiers": "public", "return": "SectionQuestionDetail", "signature": "SectionQuestionDetail findQuestionDetailById(QuestionGroupDetail questionGroupDetail, String questionId)", "full_signature": "public SectionQuestionDetail findQuestionDetailById(QuestionGroupDetail questionGroupDetail, String questionId)", "class_method_signature": "QuestionGroupController.findQuestionDetailById(QuestionGroupDetail questionGroupDetail, String questionId)", "testcase": false, "constructor": false}, {"identifier": "findQuestionDetailByNickname", "parameters": "(QuestionGroupDetail questionGroupDetail, String nickname)", "modifiers": "public", "return": "SectionQuestionDetail", "signature": "SectionQuestionDetail findQuestionDetailByNickname(QuestionGroupDetail questionGroupDetail, String nickname)", "full_signature": "public SectionQuestionDetail findQuestionDetailByNickname(QuestionGroupDetail questionGroupDetail, String nickname)", "class_method_signature": "QuestionGroupController.findQuestionDetailByNickname(QuestionGroupDetail questionGroupDetail, String nickname)", "testcase": false, "constructor": false}, {"identifier": "findSectionDetailByName", "parameters": "(QuestionGroupDetail questionGroupDetail, String sectionName)", "modifiers": "public", "return": "SectionDetail", "signature": "SectionDetail findSectionDetailByName(QuestionGroupDetail questionGroupDetail, String sectionName)", "full_signature": "public SectionDetail findSectionDetailByName(QuestionGroupDetail questionGroupDetail, String sectionName)", "class_method_signature": "QuestionGroupController.findSectionDetailByName(QuestionGroupDetail questionGroupDetail, String sectionName)", "testcase": false, "constructor": false}, {"identifier": "setFilledQuestionDetailForQuestionLinks", "parameters": "(List<QuestionLinkDetail> questionLinkDetails, QuestionGroupDetail questionGroupDetail)", "modifiers": "public", "return": "List<QuestionLinkDetail>", "signature": "List<QuestionLinkDetail> setFilledQuestionDetailForQuestionLinks(List<QuestionLinkDetail> questionLinkDetails, QuestionGroupDetail questionGroupDetail)", "full_signature": "public List<QuestionLinkDetail> setFilledQuestionDetailForQuestionLinks(List<QuestionLinkDetail> questionLinkDetails, QuestionGroupDetail questionGroupDetail)", "class_method_signature": "QuestionGroupController.setFilledQuestionDetailForQuestionLinks(List<QuestionLinkDetail> questionLinkDetails, QuestionGroupDetail questionGroupDetail)", "testcase": false, "constructor": false}, {"identifier": "setFilledSectionDetailForQuestionLinks", "parameters": "(List<SectionLinkDetail> sectionLinkDetails, QuestionGroupDetail questionGroupDetail)", "modifiers": "public", "return": "List<SectionLinkDetail>", "signature": "List<SectionLinkDetail> setFilledSectionDetailForQuestionLinks(List<SectionLinkDetail> sectionLinkDetails, QuestionGroupDetail questionGroupDetail)", "full_signature": "public List<SectionLinkDetail> setFilledSectionDetailForQuestionLinks(List<SectionLinkDetail> sectionLinkDetails, QuestionGroupDetail questionGroupDetail)", "class_method_signature": "QuestionGroupController.setFilledSectionDetailForQuestionLinks(List<SectionLinkDetail> sectionLinkDetails, QuestionGroupDetail questionGroupDetail)", "testcase": false, "constructor": false}, {"identifier": "addLink", "parameters": "(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String linkType, String appliesTo,\n            String affectedQuestionId, String affectedSectionName,\n            String value, String additionalValue, Map<String, String> linkTypes, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String addLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String linkType, String appliesTo,\n            String affectedQuestionId, String affectedSectionName,\n            String value, String additionalValue, Map<String, String> linkTypes, RequestContext requestContext)", "full_signature": "public String addLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String linkType, String appliesTo,\n            String affectedQuestionId, String affectedSectionName,\n            String value, String additionalValue, Map<String, String> linkTypes, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.addLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String linkType, String appliesTo,\n            String affectedQuestionId, String affectedSectionName,\n            String value, String additionalValue, Map<String, String> linkTypes, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "removeLink", "parameters": "(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String affectedQuestionId, String affectedSectionName, String value, String additionalValue, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String removeLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String affectedQuestionId, String affectedSectionName, String value, String additionalValue, RequestContext requestContext)", "full_signature": "public String removeLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String affectedQuestionId, String affectedSectionName, String value, String additionalValue, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.removeLink(QuestionGroupForm questionGroupForm,\n            String sourceQuestionId, String affectedQuestionId, String affectedSectionName, String value, String additionalValue, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "addSection", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String addSection(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "full_signature": "public String addSection(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.addSection(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "deleteSection", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName)", "modifiers": "public", "return": "String", "signature": "String deleteSection(QuestionGroupForm questionGroupForm, String sectionName)", "full_signature": "public String deleteSection(QuestionGroupForm questionGroupForm, String sectionName)", "class_method_signature": "QuestionGroupController.deleteSection(QuestionGroupForm questionGroupForm, String sectionName)", "testcase": false, "constructor": false}, {"identifier": "deleteQuestion", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "modifiers": "public", "return": "String", "signature": "String deleteQuestion(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "full_signature": "public String deleteQuestion(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "class_method_signature": "QuestionGroupController.deleteQuestion(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "testcase": false, "constructor": false}, {"identifier": "moveQuestionUp", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "modifiers": "public", "return": "String", "signature": "String moveQuestionUp(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "full_signature": "public String moveQuestionUp(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "class_method_signature": "QuestionGroupController.moveQuestionUp(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "testcase": false, "constructor": false}, {"identifier": "moveQuestionDown", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "modifiers": "public", "return": "String", "signature": "String moveQuestionDown(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "full_signature": "public String moveQuestionDown(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "class_method_signature": "QuestionGroupController.moveQuestionDown(QuestionGroupForm questionGroupForm, String sectionName, String questionId)", "testcase": false, "constructor": false}, {"identifier": "moveSectionUp", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName)", "modifiers": "public", "return": "String", "signature": "String moveSectionUp(QuestionGroupForm questionGroupForm, String sectionName)", "full_signature": "public String moveSectionUp(QuestionGroupForm questionGroupForm, String sectionName)", "class_method_signature": "QuestionGroupController.moveSectionUp(QuestionGroupForm questionGroupForm, String sectionName)", "testcase": false, "constructor": false}, {"identifier": "moveSectionDown", "parameters": "(QuestionGroupForm questionGroupForm, String sectionName)", "modifiers": "public", "return": "String", "signature": "String moveSectionDown(QuestionGroupForm questionGroupForm, String sectionName)", "full_signature": "public String moveSectionDown(QuestionGroupForm questionGroupForm, String sectionName)", "class_method_signature": "QuestionGroupController.moveSectionDown(QuestionGroupForm questionGroupForm, String sectionName)", "testcase": false, "constructor": false}, {"identifier": "getEventSourceId", "parameters": "(EventSourceDto evtSrc)", "modifiers": "private", "return": "String", "signature": "String getEventSourceId(EventSourceDto evtSrc)", "full_signature": "private String getEventSourceId(EventSourceDto evtSrc)", "class_method_signature": "QuestionGroupController.getEventSourceId(EventSourceDto evtSrc)", "testcase": false, "constructor": false}, {"identifier": "getAllSectionQuestions", "parameters": "()", "modifiers": "public", "return": "List<SectionQuestionDetail>", "signature": "List<SectionQuestionDetail> getAllSectionQuestions()", "full_signature": "public List<SectionQuestionDetail> getAllSectionQuestions()", "class_method_signature": "QuestionGroupController.getAllSectionQuestions()", "testcase": false, "constructor": false}, {"identifier": "getAllSectionQuestions", "parameters": "(QuestionGroupForm questionGroupForm)", "modifiers": "public", "return": "List<SectionQuestionDetail>", "signature": "List<SectionQuestionDetail> getAllSectionQuestions(QuestionGroupForm questionGroupForm)", "full_signature": "public List<SectionQuestionDetail> getAllSectionQuestions(QuestionGroupForm questionGroupForm)", "class_method_signature": "QuestionGroupController.getAllSectionQuestions(QuestionGroupForm questionGroupForm)", "testcase": false, "constructor": false}, {"identifier": "getAllLinkTypes", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getAllLinkTypes()", "full_signature": "public Map<String, String> getAllLinkTypes()", "class_method_signature": "QuestionGroupController.getAllLinkTypes()", "testcase": false, "constructor": false}, {"identifier": "saveQuestionnaire", "parameters": "(QuestionGroupDetails questionGroupDetails, int questionGroupIndex, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String saveQuestionnaire(QuestionGroupDetails questionGroupDetails, int questionGroupIndex, RequestContext requestContext)", "full_signature": "public String saveQuestionnaire(QuestionGroupDetails questionGroupDetails, int questionGroupIndex, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.saveQuestionnaire(QuestionGroupDetails questionGroupDetails, int questionGroupIndex, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "populateError", "parameters": "(RequestContext requestContext, BadNumericResponseException exception)", "modifiers": "private", "return": "void", "signature": "void populateError(RequestContext requestContext, BadNumericResponseException exception)", "full_signature": "private void populateError(RequestContext requestContext, BadNumericResponseException exception)", "class_method_signature": "QuestionGroupController.populateError(RequestContext requestContext, BadNumericResponseException exception)", "testcase": false, "constructor": false}, {"identifier": "populateError", "parameters": "(RequestContext requestContext, MandatoryAnswerNotFoundException exception)", "modifiers": "private", "return": "void", "signature": "void populateError(RequestContext requestContext, MandatoryAnswerNotFoundException exception)", "full_signature": "private void populateError(RequestContext requestContext, MandatoryAnswerNotFoundException exception)", "class_method_signature": "QuestionGroupController.populateError(RequestContext requestContext, MandatoryAnswerNotFoundException exception)", "testcase": false, "constructor": false}, {"identifier": "questionGroupHasErrors", "parameters": "(QuestionGroupForm questionGroup, RequestContext requestContext)", "modifiers": "private", "return": "boolean", "signature": "boolean questionGroupHasErrors(QuestionGroupForm questionGroup, RequestContext requestContext)", "full_signature": "private boolean questionGroupHasErrors(QuestionGroupForm questionGroup, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.questionGroupHasErrors(QuestionGroupForm questionGroup, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "appliesToNotPresent", "parameters": "(List<String> eventSourceIds)", "modifiers": "private", "return": "boolean", "signature": "boolean appliesToNotPresent(List<String> eventSourceIds)", "full_signature": "private boolean appliesToNotPresent(List<String> eventSourceIds)", "class_method_signature": "QuestionGroupController.appliesToNotPresent(List<String> eventSourceIds)", "testcase": false, "constructor": false}, {"identifier": "sectionsNotPresent", "parameters": "(List<SectionDetailForm> sections)", "modifiers": "private", "return": "boolean", "signature": "boolean sectionsNotPresent(List<SectionDetailForm> sections)", "full_signature": "private boolean sectionsNotPresent(List<SectionDetailForm> sections)", "class_method_signature": "QuestionGroupController.sectionsNotPresent(List<SectionDetailForm> sections)", "testcase": false, "constructor": false}, {"identifier": "isInvalidTitle", "parameters": "(String title)", "modifiers": "private", "return": "boolean", "signature": "boolean isInvalidTitle(String title)", "full_signature": "private boolean isInvalidTitle(String title)", "class_method_signature": "QuestionGroupController.isInvalidTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "addQuestion", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "full_signature": "public String addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "addSmartChoiceTag", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext, int choiceIndex)", "modifiers": "public", "return": "String", "signature": "String addSmartChoiceTag(QuestionGroupForm questionGroupForm, RequestContext requestContext, int choiceIndex)", "full_signature": "public String addSmartChoiceTag(QuestionGroupForm questionGroupForm, RequestContext requestContext, int choiceIndex)", "class_method_signature": "QuestionGroupController.addSmartChoiceTag(QuestionGroupForm questionGroupForm, RequestContext requestContext, int choiceIndex)", "testcase": false, "constructor": false}, {"identifier": "validateSmartChoice", "parameters": "(QuestionGroupForm questionGroupForm, MessageContext context, int choiceIndex)", "modifiers": "private", "return": "boolean", "signature": "boolean validateSmartChoice(QuestionGroupForm questionGroupForm, MessageContext context, int choiceIndex)", "full_signature": "private boolean validateSmartChoice(QuestionGroupForm questionGroupForm, MessageContext context, int choiceIndex)", "class_method_signature": "QuestionGroupController.validateSmartChoice(QuestionGroupForm questionGroupForm, MessageContext context, int choiceIndex)", "testcase": false, "constructor": false}, {"identifier": "validateQuestion", "parameters": "(QuestionGroupForm questionGroupForm, MessageContext context)", "modifiers": "private", "return": "boolean", "signature": "boolean validateQuestion(QuestionGroupForm questionGroupForm, MessageContext context)", "full_signature": "private boolean validateQuestion(QuestionGroupForm questionGroupForm, MessageContext context)", "class_method_signature": "QuestionGroupController.validateQuestion(QuestionGroupForm questionGroupForm, MessageContext context)", "testcase": false, "constructor": false}, {"identifier": "checkDuplicateText", "parameters": "(QuestionGroupForm questionGroupForm)", "modifiers": "private", "return": "boolean", "signature": "boolean checkDuplicateText(QuestionGroupForm questionGroupForm)", "full_signature": "private boolean checkDuplicateText(QuestionGroupForm questionGroupForm)", "class_method_signature": "QuestionGroupController.checkDuplicateText(QuestionGroupForm questionGroupForm)", "testcase": false, "constructor": false}], "file": "questionnaire/src/main/java/org/mifos/platform/questionnaire/ui/controller/QuestionGroupController.java"}, "focal_method": {"identifier": "addQuestion", "parameters": "(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "body": "public String addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext) {\n        MessageContext context = requestContext.getMessageContext();\n        boolean result = validateQuestion(questionGroupForm, context);\n        if (result) {\n            questionGroupForm.addCurrentSection();\n        }\n        return result? \"success\": \"failure\";\n    }", "signature": "String addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "full_signature": "public String addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "class_method_signature": "QuestionGroupController.addQuestion(QuestionGroupForm questionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false, "invocations": ["getMessageContext", "validateQuestion", "addCurrentSection"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}