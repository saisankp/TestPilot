{"test_class": {"identifier": "DatabaseConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  JdbcTemplate jdbcTemplate;", "modifier": "@Autowired", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Autowired\n  DatabaseConnector connector;", "modifier": "@Autowired", "type": "DatabaseConnector", "declarator": "connector", "var_name": "connector"}], "file": "databasemigration/src/test/java/de/governikus/eumw/databasemigration/DatabaseConnectorTest.java"}, "test_case": {"identifier": "testRemoveOutdatedSectorIDs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRemoveOutdatedSectorIDs()\n  {\n    assertThat(\"The initial database must contain 5 entries\", getNumberOfRows(), is(5));\n    connector.removeOutdatedSectorIDsFromBlacklistentry();\n    assertThat(\"No entry should be deleted\", getNumberOfRows(), is(5));\n\n    // Add 10 outdated SectorIDs\n    for ( int i = 0 ; i < 10 ; i++ )\n    {\n      addEntryToBlacklistentry(Base64.getEncoder().encodeToString(\"XXX\".getBytes(StandardCharsets.UTF_8)),\n                               UUID.randomUUID().toString(),\n                               \"1338\");\n    }\n\n    assertThat(\"There should be 15 entries\", getNumberOfRows(), is(15));\n    assertThat(\"There should be two different SectorIDs\", getUniqueSectorIDs().size(), is(2));\n\n    // Remove outdated SectorIDs\n    connector.removeOutdatedSectorIDsFromBlacklistentry();\n    assertThat(\"The 10 unused entries should be deleted\", getNumberOfRows(), is(5));\n    assertThat(\"There should be only the original SectorID\",\n               getUniqueSectorIDs(),\n               Matchers.containsInAnyOrder(Base64.getEncoder()\n                                                 .encodeToString(\"AAA\".getBytes(StandardCharsets.UTF_8))));\n  }", "signature": "void testRemoveOutdatedSectorIDs()", "full_signature": "@Test public void testRemoveOutdatedSectorIDs()", "class_method_signature": "DatabaseConnectorTest.testRemoveOutdatedSectorIDs()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getNumberOfRows", "is", "removeOutdatedSectorIDsFromBlacklistentry", "assertThat", "getNumberOfRows", "is", "addEntryToBlacklistentry", "encodeToString", "getEncoder", "getBytes", "toString", "randomUUID", "assertThat", "getNumberOfRows", "is", "assertThat", "size", "getUniqueSectorIDs", "is", "removeOutdatedSectorIDsFromBlacklistentry", "assertThat", "getNumberOfRows", "is", "assertThat", "getUniqueSectorIDs", "containsInAnyOrder", "encodeToString", "getEncoder", "getBytes"]}, "focal_class": {"identifier": "DatabaseConnector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JdbcTemplate jdbcTemplate;", "modifier": "private final", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "methods": [{"identifier": "DatabaseConnector", "parameters": "(JdbcTemplate jdbcTemplate)", "modifiers": "public", "return": "", "signature": " DatabaseConnector(JdbcTemplate jdbcTemplate)", "full_signature": "public  DatabaseConnector(JdbcTemplate jdbcTemplate)", "class_method_signature": "DatabaseConnector.DatabaseConnector(JdbcTemplate jdbcTemplate)", "testcase": false, "constructor": true}, {"identifier": "getTerminalsFromTerminalpermission", "parameters": "()", "modifiers": "public", "return": "List<byte[]>", "signature": "List<byte[]> getTerminalsFromTerminalpermission()", "full_signature": "public List<byte[]> getTerminalsFromTerminalpermission()", "class_method_signature": "DatabaseConnector.getTerminalsFromTerminalpermission()", "testcase": false, "constructor": false}, {"identifier": "removeOutdatedSectorIDsFromBlacklistentry", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeOutdatedSectorIDsFromBlacklistentry()", "full_signature": "public void removeOutdatedSectorIDsFromBlacklistentry()", "class_method_signature": "DatabaseConnector.removeOutdatedSectorIDsFromBlacklistentry()", "testcase": false, "constructor": false}, {"identifier": "removeOutdatedVersionsFromBlacklistentry", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeOutdatedVersionsFromBlacklistentry()", "full_signature": "public void removeOutdatedVersionsFromBlacklistentry()", "class_method_signature": "DatabaseConnector.removeOutdatedVersionsFromBlacklistentry()", "testcase": false, "constructor": false}, {"identifier": "checkPrimaryKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean checkPrimaryKey()", "full_signature": "public boolean checkPrimaryKey()", "class_method_signature": "DatabaseConnector.checkPrimaryKey()", "testcase": false, "constructor": false}, {"identifier": "performMigrationWithoutData", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean performMigrationWithoutData()", "full_signature": "public boolean performMigrationWithoutData()", "class_method_signature": "DatabaseConnector.performMigrationWithoutData()", "testcase": false, "constructor": false}, {"identifier": "performMigrationWithData", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean performMigrationWithData()", "full_signature": "public boolean performMigrationWithData()", "class_method_signature": "DatabaseConnector.performMigrationWithData()", "testcase": false, "constructor": false}, {"identifier": "getColumnCountForBlacklistentry", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getColumnCountForBlacklistentry()", "full_signature": "private int getColumnCountForBlacklistentry()", "class_method_signature": "DatabaseConnector.getColumnCountForBlacklistentry()", "testcase": false, "constructor": false}], "file": "databasemigration/src/main/java/de/governikus/eumw/databasemigration/DatabaseConnector.java"}, "focal_method": {"identifier": "removeOutdatedSectorIDsFromBlacklistentry", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void removeOutdatedSectorIDsFromBlacklistentry()\n  {\n    int rowsAffected = jdbcTemplate.update(\"DELETE FROM BLACKLISTENTRY WHERE SECTORID <> ?\",\n                                           Base64.getEncoder()\n                                                 .encodeToString(getTerminalsFromTerminalpermission().get(0)));\n    log.info(\"Deleted {} entries with outdated sectorIDs from Blacklistentry\", rowsAffected);\n  }", "signature": "void removeOutdatedSectorIDsFromBlacklistentry()", "full_signature": "public void removeOutdatedSectorIDsFromBlacklistentry()", "class_method_signature": "DatabaseConnector.removeOutdatedSectorIDsFromBlacklistentry()", "testcase": false, "constructor": false, "invocations": ["update", "encodeToString", "getEncoder", "get", "getTerminalsFromTerminalpermission", "info"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}