{"test_class": {"identifier": "TaskExecutionStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskExecutionStateTest.java"}, "test_case": {"identifier": "testSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSerialization() {\n\t\ttry {\n\t\t\tfinal JobID jid = new JobID();\n\t\t\tfinal ExecutionAttemptID executionId = new ExecutionAttemptID();\n\t\t\tfinal ExecutionState state = ExecutionState.DEPLOYING;\n\t\t\tfinal Throwable error = new IOException(\"fubar\");\n\t\t\t\n\t\t\tTaskExecutionState original1 = new TaskExecutionState(jid, executionId, state, error);\n\t\t\tTaskExecutionState original2 = new TaskExecutionState(jid, executionId, state);\n\t\t\t\n\t\t\tTaskExecutionState javaSerCopy1 = CommonTestUtils.createCopySerializable(original1);\n\t\t\tTaskExecutionState javaSerCopy2 = CommonTestUtils.createCopySerializable(original2);\n\n\t\t\t// equalities\n\t\t\tassertEquals(original1, javaSerCopy1);\n\t\t\tassertEquals(javaSerCopy1, original1);\n\n\t\t\tassertEquals(original2, javaSerCopy2);\n\t\t\tassertEquals(javaSerCopy2, original2);\n\n\t\t\t// hash codes\n\t\t\tassertEquals(original1.hashCode(), javaSerCopy1.hashCode());\n\t\t\tassertEquals(original2.hashCode(), javaSerCopy2.hashCode());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testSerialization()", "full_signature": "@Test public void testSerialization()", "class_method_signature": "TaskExecutionStateTest.testSerialization()", "testcase": true, "constructor": false, "invocations": ["createCopySerializable", "createCopySerializable", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "TaskExecutionState", "superclass": "", "interfaces": "implements java.io.Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final JobID jobID;", "modifier": "private final", "type": "JobID", "declarator": "jobID", "var_name": "jobID"}, {"original_string": "private final ExecutionAttemptID executionId;", "modifier": "private final", "type": "ExecutionAttemptID", "declarator": "executionId", "var_name": "executionId"}, {"original_string": "private final ExecutionState executionState;", "modifier": "private final", "type": "ExecutionState", "declarator": "executionState", "var_name": "executionState"}, {"original_string": "private final SerializedThrowable throwable;", "modifier": "private final", "type": "SerializedThrowable", "declarator": "throwable", "var_name": "throwable"}, {"original_string": "private final AccumulatorSnapshot accumulators;", "modifier": "private final", "type": "AccumulatorSnapshot", "declarator": "accumulators", "var_name": "accumulators"}], "methods": [{"identifier": "TaskExecutionState", "parameters": "(JobID jobID, ExecutionAttemptID executionId, ExecutionState executionState)", "modifiers": "public", "return": "", "signature": " TaskExecutionState(JobID jobID, ExecutionAttemptID executionId, ExecutionState executionState)", "full_signature": "public  TaskExecutionState(JobID jobID, ExecutionAttemptID executionId, ExecutionState executionState)", "class_method_signature": "TaskExecutionState.TaskExecutionState(JobID jobID, ExecutionAttemptID executionId, ExecutionState executionState)", "testcase": false, "constructor": true}, {"identifier": "TaskExecutionState", "parameters": "(JobID jobID, ExecutionAttemptID executionId,\n\t\t\t\t\t\t\tExecutionState executionState, Throwable error)", "modifiers": "public", "return": "", "signature": " TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\t\t\t\t\tExecutionState executionState, Throwable error)", "full_signature": "public  TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\t\t\t\t\tExecutionState executionState, Throwable error)", "class_method_signature": "TaskExecutionState.TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\t\t\t\t\tExecutionState executionState, Throwable error)", "testcase": false, "constructor": true}, {"identifier": "TaskExecutionState", "parameters": "(JobID jobID, ExecutionAttemptID executionId,\n\t\t\tExecutionState executionState, Throwable error,\n\t\t\tAccumulatorSnapshot accumulators)", "modifiers": "public", "return": "", "signature": " TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\tExecutionState executionState, Throwable error,\n\t\t\tAccumulatorSnapshot accumulators)", "full_signature": "public  TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\tExecutionState executionState, Throwable error,\n\t\t\tAccumulatorSnapshot accumulators)", "class_method_signature": "TaskExecutionState.TaskExecutionState(JobID jobID, ExecutionAttemptID executionId,\n\t\t\tExecutionState executionState, Throwable error,\n\t\t\tAccumulatorSnapshot accumulators)", "testcase": false, "constructor": true}, {"identifier": "getError", "parameters": "(ClassLoader userCodeClassloader)", "modifiers": "public", "return": "Throwable", "signature": "Throwable getError(ClassLoader userCodeClassloader)", "full_signature": "public Throwable getError(ClassLoader userCodeClassloader)", "class_method_signature": "TaskExecutionState.getError(ClassLoader userCodeClassloader)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "public", "return": "ExecutionAttemptID", "signature": "ExecutionAttemptID getID()", "full_signature": "public ExecutionAttemptID getID()", "class_method_signature": "TaskExecutionState.getID()", "testcase": false, "constructor": false}, {"identifier": "getExecutionState", "parameters": "()", "modifiers": "public", "return": "ExecutionState", "signature": "ExecutionState getExecutionState()", "full_signature": "public ExecutionState getExecutionState()", "class_method_signature": "TaskExecutionState.getExecutionState()", "testcase": false, "constructor": false}, {"identifier": "getJobID", "parameters": "()", "modifiers": "public", "return": "JobID", "signature": "JobID getJobID()", "full_signature": "public JobID getJobID()", "class_method_signature": "TaskExecutionState.getJobID()", "testcase": false, "constructor": false}, {"identifier": "getAccumulators", "parameters": "()", "modifiers": "public", "return": "AccumulatorSnapshot", "signature": "AccumulatorSnapshot getAccumulators()", "full_signature": "public AccumulatorSnapshot getAccumulators()", "class_method_signature": "TaskExecutionState.getAccumulators()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TaskExecutionState.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TaskExecutionState.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TaskExecutionState.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/taskmanager/TaskExecutionState.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int hashCode() {\n\t\treturn jobID.hashCode() + executionId.hashCode() + executionState.ordinal();\n\t}", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TaskExecutionState.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode", "ordinal"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}