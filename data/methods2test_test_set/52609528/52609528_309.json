{"test_class": {"identifier": "ExpansionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ROOT = \"/gateleen\";", "modifier": "private static final", "type": "String", "declarator": "ROOT = \"/gateleen\"", "var_name": "ROOT"}, {"original_string": "private static final String RULES_ROOT = ROOT + \"/server/admin/v1/routing/rules\";", "modifier": "private static final", "type": "String", "declarator": "RULES_ROOT = ROOT + \"/server/admin/v1/routing/rules\"", "var_name": "RULES_ROOT"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private ExpansionHandler expansionHandler;", "modifier": "private", "type": "ExpansionHandler", "declarator": "expansionHandler", "var_name": "expansionHandler"}], "file": "gateleen-expansion/src/test/java/org/swisspush/gateleen/expansion/ExpansionHandlerTest.java"}, "test_case": {"identifier": "testIsBackendExpand", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsBackendExpand(TestContext context) {\n        expansionHandler = new ExpansionHandler(vertx, storage, httpClient, new HashMap<>(), ROOT, RULES_ROOT);\n\n        context.assertFalse(expansionHandler.isBackendExpand(\"/some/request/uri\"),\n                \"uri should not be a backend expand since no routing rules have been defined yet\");\n\n        List<Rule> rules = new ArrayList<>();\n        Rule rule1 = new Rule();\n        rule1.setUrlPattern(\"/test/rules/rule/backendExpand\");\n        rule1.setExpandOnBackend(true);\n        rules.add(rule1);\n\n        Rule rule2 = new Rule();\n        rule2.setUrlPattern(\"/test/rules/rule/notBackendExpand\");\n        rule2.setExpandOnBackend(false);\n        rules.add(rule2);\n\n        expansionHandler.rulesChanged(rules);\n\n        context.assertTrue(expansionHandler.isBackendExpand(\"/test/rules/rule/backendExpand\"),\n                \"uri should be a backend expand\");\n        context.assertFalse(expansionHandler.isBackendExpand(\"/test/rules/rule/notBackendExpand\"),\n                \"uri should not be a backend expand\");\n        context.assertFalse(expansionHandler.isBackendExpand(\"/some/other/request/uri\"),\n                \"uri should not be a backend expand\");\n    }", "signature": "void testIsBackendExpand(TestContext context)", "full_signature": "@Test public void testIsBackendExpand(TestContext context)", "class_method_signature": "ExpansionHandlerTest.testIsBackendExpand(TestContext context)", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isBackendExpand", "setUrlPattern", "setExpandOnBackend", "add", "setUrlPattern", "setExpandOnBackend", "add", "rulesChanged", "assertTrue", "isBackendExpand", "assertFalse", "isBackendExpand", "assertFalse", "isBackendExpand"]}, "focal_class": {"identifier": "ExpansionHandler", "superclass": "", "interfaces": "implements RuleChangesObserver", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(ExpansionHandler.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExpansionHandler.class)", "var_name": "log"}, {"original_string": "public static final String SERIOUS_EXCEPTION = \"a serious exception happend \";", "modifier": "public static final", "type": "String", "declarator": "SERIOUS_EXCEPTION = \"a serious exception happend \"", "var_name": "SERIOUS_EXCEPTION"}, {"original_string": "public static final String EXPAND_PARAM = \"expand\";", "modifier": "public static final", "type": "String", "declarator": "EXPAND_PARAM = \"expand\"", "var_name": "EXPAND_PARAM"}, {"original_string": "public static final String ZIP_PARAM = \"zip\";", "modifier": "public static final", "type": "String", "declarator": "ZIP_PARAM = \"zip\"", "var_name": "ZIP_PARAM"}, {"original_string": "private static final int NO_PARAMETER_FOUND = -1;", "modifier": "private static final", "type": "int", "declarator": "NO_PARAMETER_FOUND = -1", "var_name": "NO_PARAMETER_FOUND"}, {"original_string": "private static final int START_INDEX = 0;", "modifier": "private static final", "type": "int", "declarator": "START_INDEX = 0", "var_name": "START_INDEX"}, {"original_string": "private static final int TIMEOUT = 120000;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT = 120000", "var_name": "TIMEOUT"}, {"original_string": "private static final int DECREMENT_BY_ONE = 1;", "modifier": "private static final", "type": "int", "declarator": "DECREMENT_BY_ONE = 1", "var_name": "DECREMENT_BY_ONE"}, {"original_string": "private static final int MAX_RECURSION_LEVEL = 0;", "modifier": "private static final", "type": "int", "declarator": "MAX_RECURSION_LEVEL = 0", "var_name": "MAX_RECURSION_LEVEL"}, {"original_string": "public static final String MAX_EXPANSION_LEVEL_SOFT_PROPERTY = \"max.expansion.level.soft\";", "modifier": "public static final", "type": "String", "declarator": "MAX_EXPANSION_LEVEL_SOFT_PROPERTY = \"max.expansion.level.soft\"", "var_name": "MAX_EXPANSION_LEVEL_SOFT_PROPERTY"}, {"original_string": "public static final String MAX_EXPANSION_LEVEL_HARD_PROPERTY = \"max.expansion.level.hard\";", "modifier": "public static final", "type": "String", "declarator": "MAX_EXPANSION_LEVEL_HARD_PROPERTY = \"max.expansion.level.hard\"", "var_name": "MAX_EXPANSION_LEVEL_HARD_PROPERTY"}, {"original_string": "public static final String MAX_SUBREQUEST_PROPERTY = \"max.expansion.subrequests\";", "modifier": "public static final", "type": "String", "declarator": "MAX_SUBREQUEST_PROPERTY = \"max.expansion.subrequests\"", "var_name": "MAX_SUBREQUEST_PROPERTY"}, {"original_string": "private static final int MAX_SUBREQUEST_COUNT_DEFAULT = 20000;", "modifier": "private static final", "type": "int", "declarator": "MAX_SUBREQUEST_COUNT_DEFAULT = 20000", "var_name": "MAX_SUBREQUEST_COUNT_DEFAULT"}, {"original_string": "private static final String ETAG_HEADER = \"Etag\";", "modifier": "private static final", "type": "String", "declarator": "ETAG_HEADER = \"Etag\"", "var_name": "ETAG_HEADER"}, {"original_string": "private static final String SELF_REQUEST_HEADER = \"x-self-request\";", "modifier": "private static final", "type": "String", "declarator": "SELF_REQUEST_HEADER = \"x-self-request\"", "var_name": "SELF_REQUEST_HEADER"}, {"original_string": "private int maxSubRequestCount;", "modifier": "private", "type": "int", "declarator": "maxSubRequestCount", "var_name": "maxSubRequestCount"}, {"original_string": "private int maxExpansionLevelSoft = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "maxExpansionLevelSoft = Integer.MAX_VALUE", "var_name": "maxExpansionLevelSoft"}, {"original_string": "private int maxExpansionLevelHard = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "maxExpansionLevelHard = Integer.MAX_VALUE", "var_name": "maxExpansionLevelHard"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private Map<String, Object> properties;", "modifier": "private", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String serverRoot;", "modifier": "private", "type": "String", "declarator": "serverRoot", "var_name": "serverRoot"}, {"original_string": "private RuleProvider ruleProvider;", "modifier": "private", "type": "RuleProvider", "declarator": "ruleProvider", "var_name": "ruleProvider"}, {"original_string": "private List<String> parameter_to_remove_for_all_request;", "modifier": "private", "type": "List<String>", "declarator": "parameter_to_remove_for_all_request", "var_name": "parameter_to_remove_for_all_request"}, {"original_string": "private List<String> parameter_to_remove_after_initial_request;", "modifier": "private", "type": "List<String>", "declarator": "parameter_to_remove_after_initial_request", "var_name": "parameter_to_remove_after_initial_request"}, {"original_string": "private RuleFeaturesProvider ruleFeaturesProvider = new RuleFeaturesProvider(new ArrayList<>());", "modifier": "private", "type": "RuleFeaturesProvider", "declarator": "ruleFeaturesProvider = new RuleFeaturesProvider(new ArrayList<>())", "var_name": "ruleFeaturesProvider"}], "methods": [{"identifier": "ExpansionHandler", "parameters": "(Vertx vertx, final ResourceStorage storage, HttpClient httpClient, final Map<String, Object> properties, String serverRoot, final String rulesPath)", "modifiers": "public", "return": "", "signature": " ExpansionHandler(Vertx vertx, final ResourceStorage storage, HttpClient httpClient, final Map<String, Object> properties, String serverRoot, final String rulesPath)", "full_signature": "public  ExpansionHandler(Vertx vertx, final ResourceStorage storage, HttpClient httpClient, final Map<String, Object> properties, String serverRoot, final String rulesPath)", "class_method_signature": "ExpansionHandler.ExpansionHandler(Vertx vertx, final ResourceStorage storage, HttpClient httpClient, final Map<String, Object> properties, String serverRoot, final String rulesPath)", "testcase": false, "constructor": true}, {"identifier": "rulesChanged", "parameters": "(List<Rule> rules)", "modifiers": "@Override public", "return": "void", "signature": "void rulesChanged(List<Rule> rules)", "full_signature": "@Override public void rulesChanged(List<Rule> rules)", "class_method_signature": "ExpansionHandler.rulesChanged(List<Rule> rules)", "testcase": false, "constructor": false}, {"identifier": "getMaxExpansionLevelSoft", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxExpansionLevelSoft()", "full_signature": "public int getMaxExpansionLevelSoft()", "class_method_signature": "ExpansionHandler.getMaxExpansionLevelSoft()", "testcase": false, "constructor": false}, {"identifier": "getMaxExpansionLevelHard", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxExpansionLevelHard()", "full_signature": "public int getMaxExpansionLevelHard()", "class_method_signature": "ExpansionHandler.getMaxExpansionLevelHard()", "testcase": false, "constructor": false}, {"identifier": "getMaxSubRequestCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxSubRequestCount()", "full_signature": "public int getMaxSubRequestCount()", "class_method_signature": "ExpansionHandler.getMaxSubRequestCount()", "testcase": false, "constructor": false}, {"identifier": "initParameterRemovalLists", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initParameterRemovalLists()", "full_signature": "private void initParameterRemovalLists()", "class_method_signature": "ExpansionHandler.initParameterRemovalLists()", "testcase": false, "constructor": false}, {"identifier": "initConfigurationValues", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initConfigurationValues()", "full_signature": "private void initConfigurationValues()", "class_method_signature": "ExpansionHandler.initConfigurationValues()", "testcase": false, "constructor": false}, {"identifier": "isExpansionRequest", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isExpansionRequest(HttpServerRequest request)", "full_signature": "public boolean isExpansionRequest(HttpServerRequest request)", "class_method_signature": "ExpansionHandler.isExpansionRequest(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isBackendExpand", "parameters": "(String uri)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBackendExpand(String uri)", "full_signature": "protected boolean isBackendExpand(String uri)", "class_method_signature": "ExpansionHandler.isBackendExpand(String uri)", "testcase": false, "constructor": false}, {"identifier": "isStorageExpand", "parameters": "(String uri)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStorageExpand(String uri)", "full_signature": "protected boolean isStorageExpand(String uri)", "class_method_signature": "ExpansionHandler.isStorageExpand(String uri)", "testcase": false, "constructor": false}, {"identifier": "isZipRequest", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isZipRequest(HttpServerRequest request)", "full_signature": "public boolean isZipRequest(HttpServerRequest request)", "class_method_signature": "ExpansionHandler.isZipRequest(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleExpansionRequest", "parameters": "(final HttpServerRequest req, final RecursiveHandlerFactory.RecursiveHandlerTypes recursiveHandlerType)", "modifiers": "private", "return": "void", "signature": "void handleExpansionRequest(final HttpServerRequest req, final RecursiveHandlerFactory.RecursiveHandlerTypes recursiveHandlerType)", "full_signature": "private void handleExpansionRequest(final HttpServerRequest req, final RecursiveHandlerFactory.RecursiveHandlerTypes recursiveHandlerType)", "class_method_signature": "ExpansionHandler.handleExpansionRequest(final HttpServerRequest req, final RecursiveHandlerFactory.RecursiveHandlerTypes recursiveHandlerType)", "testcase": false, "constructor": false}, {"identifier": "extractExpandParamValue", "parameters": "(final HttpServerRequest request, final Logger log)", "modifiers": "private", "return": "Integer", "signature": "Integer extractExpandParamValue(final HttpServerRequest request, final Logger log)", "full_signature": "private Integer extractExpandParamValue(final HttpServerRequest request, final Logger log)", "class_method_signature": "ExpansionHandler.extractExpandParamValue(final HttpServerRequest request, final Logger log)", "testcase": false, "constructor": false}, {"identifier": "handleExpansionRecursion", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "void", "signature": "void handleExpansionRecursion(final HttpServerRequest request)", "full_signature": "public void handleExpansionRecursion(final HttpServerRequest request)", "class_method_signature": "ExpansionHandler.handleExpansionRecursion(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleZipRecursion", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "void", "signature": "void handleZipRecursion(final HttpServerRequest request)", "full_signature": "public void handleZipRecursion(final HttpServerRequest request)", "class_method_signature": "ExpansionHandler.handleZipRecursion(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "removeZipParameter", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void removeZipParameter(final HttpServerRequest request)", "full_signature": "private void removeZipParameter(final HttpServerRequest request)", "class_method_signature": "ExpansionHandler.removeZipParameter(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "makeStorageExpandRequest", "parameters": "(final String targetUri, final List subResourceNames, final HttpServerRequest req, final DeltaHandler<ResourceNode> handler)", "modifiers": "private", "return": "void", "signature": "void makeStorageExpandRequest(final String targetUri, final List subResourceNames, final HttpServerRequest req, final DeltaHandler<ResourceNode> handler)", "full_signature": "private void makeStorageExpandRequest(final String targetUri, final List subResourceNames, final HttpServerRequest req, final DeltaHandler<ResourceNode> handler)", "class_method_signature": "ExpansionHandler.makeStorageExpandRequest(final String targetUri, final List subResourceNames, final HttpServerRequest req, final DeltaHandler<ResourceNode> handler)", "testcase": false, "constructor": false}, {"identifier": "makeResourceSubRequest", "parameters": "(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final boolean collection)", "modifiers": "private", "return": "void", "signature": "void makeResourceSubRequest(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final boolean collection)", "full_signature": "private void makeResourceSubRequest(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final boolean collection)", "class_method_signature": "ExpansionHandler.makeResourceSubRequest(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final boolean collection)", "testcase": false, "constructor": false}, {"identifier": "handleSimpleResource", "parameters": "(final String targetUri, final Handler<ResourceNode> handler, final Buffer data, final String eTag)", "modifiers": "private", "return": "void", "signature": "void handleSimpleResource(final String targetUri, final Handler<ResourceNode> handler, final Buffer data, final String eTag)", "full_signature": "private void handleSimpleResource(final String targetUri, final Handler<ResourceNode> handler, final Buffer data, final String eTag)", "class_method_signature": "ExpansionHandler.handleSimpleResource(final String targetUri, final Handler<ResourceNode> handler, final Buffer data, final String eTag)", "testcase": false, "constructor": false}, {"identifier": "removeParameters", "parameters": "(String targetUri)", "modifiers": "private", "return": "String", "signature": "String removeParameters(String targetUri)", "full_signature": "private String removeParameters(String targetUri)", "class_method_signature": "ExpansionHandler.removeParameters(String targetUri)", "testcase": false, "constructor": false}, {"identifier": "respondBadRequest", "parameters": "(final HttpServerRequest request, String body)", "modifiers": "private", "return": "void", "signature": "void respondBadRequest(final HttpServerRequest request, String body)", "full_signature": "private void respondBadRequest(final HttpServerRequest request, String body)", "class_method_signature": "ExpansionHandler.respondBadRequest(final HttpServerRequest request, String body)", "testcase": false, "constructor": false}, {"identifier": "handleCollectionResource", "parameters": "(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final Buffer data, final String eTag)", "modifiers": "private", "return": "void", "signature": "void handleCollectionResource(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final Buffer data, final String eTag)", "full_signature": "private void handleCollectionResource(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final Buffer data, final String eTag)", "class_method_signature": "ExpansionHandler.handleCollectionResource(final String targetUri, final HttpServerRequest req, final int recursionLevel, final AtomicInteger subRequestCounter, final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType, final DeltaHandler<ResourceNode> handler, final Buffer data, final String eTag)", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "(String target)", "modifiers": "public", "return": "boolean", "signature": "boolean isCollection(String target)", "full_signature": "public boolean isCollection(String target)", "class_method_signature": "ExpansionHandler.isCollection(String target)", "testcase": false, "constructor": false}, {"identifier": "geteTag", "parameters": "(MultiMap headers)", "modifiers": "private", "return": "String", "signature": "String geteTag(MultiMap headers)", "full_signature": "private String geteTag(MultiMap headers)", "class_method_signature": "ExpansionHandler.geteTag(MultiMap headers)", "testcase": false, "constructor": false}], "file": "gateleen-expansion/src/main/java/org/swisspush/gateleen/expansion/ExpansionHandler.java"}, "focal_method": {"identifier": "isBackendExpand", "parameters": "(String uri)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isBackendExpand(String uri) {\n        return ruleFeaturesProvider.isFeatureRequest(EXPAND_ON_BACKEND, uri);\n    }", "signature": "boolean isBackendExpand(String uri)", "full_signature": "protected boolean isBackendExpand(String uri)", "class_method_signature": "ExpansionHandler.isBackendExpand(String uri)", "testcase": false, "constructor": false, "invocations": ["isFeatureRequest"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}