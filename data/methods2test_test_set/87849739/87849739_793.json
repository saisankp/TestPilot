{"test_class": {"identifier": "ImmutableTopicPathPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_NAMESPACE = \"org.eclipse.ditto.test\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_NAMESPACE = \"org.eclipse.ditto.test\"", "var_name": "KNOWN_NAMESPACE"}, {"original_string": "private static final String KNOWN_ID = \"myThing\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_ID = \"myThing\"", "var_name": "KNOWN_ID"}, {"original_string": "private static final TopicPath.Channel KNOWN_CHANNEL = TopicPath.Channel.TWIN;", "modifier": "private static final", "type": "TopicPath.Channel", "declarator": "KNOWN_CHANNEL = TopicPath.Channel.TWIN", "var_name": "KNOWN_CHANNEL"}, {"original_string": "private static final TopicPath.Group KNOWN_GROUP = TopicPath.Group.THINGS;", "modifier": "private static final", "type": "TopicPath.Group", "declarator": "KNOWN_GROUP = TopicPath.Group.THINGS", "var_name": "KNOWN_GROUP"}, {"original_string": "private static final TopicPath.Criterion KNOWN_CRITERION = TopicPath.Criterion.COMMANDS;", "modifier": "private static final", "type": "TopicPath.Criterion", "declarator": "KNOWN_CRITERION = TopicPath.Criterion.COMMANDS", "var_name": "KNOWN_CRITERION"}, {"original_string": "private static final TopicPath.Action KNOWN_ACTION = TopicPath.Action.MODIFY;", "modifier": "private static final", "type": "TopicPath.Action", "declarator": "KNOWN_ACTION = TopicPath.Action.MODIFY", "var_name": "KNOWN_ACTION"}, {"original_string": "private static final String KNOWN_SUBJECT = \"mySubject\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_SUBJECT = \"mySubject\"", "var_name": "KNOWN_SUBJECT"}, {"original_string": "private static final String KNOWN_SUBJECT2 = \"$set.configuration/steps\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_SUBJECT2 = \"$set.configuration/steps\"", "var_name": "KNOWN_SUBJECT2"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .twin().things().commands().modify().build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .twin().things().commands().modify().build()", "var_name": "KNOWN_TOPIC_PATH"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH_SUBJECT1 = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .live().things().messages().subject(KNOWN_SUBJECT).build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH_SUBJECT1 = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .live().things().messages().subject(KNOWN_SUBJECT).build()", "var_name": "KNOWN_TOPIC_PATH_SUBJECT1"}, {"original_string": "private static final TopicPath KNOWN_TOPIC_PATH_SUBJECT2 = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .live().things().messages().subject(KNOWN_SUBJECT2).build();", "modifier": "private static final", "type": "TopicPath", "declarator": "KNOWN_TOPIC_PATH_SUBJECT2 = TopicPath.newBuilder(ThingId.of(KNOWN_NAMESPACE, KNOWN_ID))\n        .live().things().messages().subject(KNOWN_SUBJECT2).build()", "var_name": "KNOWN_TOPIC_PATH_SUBJECT2"}, {"original_string": "private static final ImmutableTopicPathPlaceholder UNDER_TEST = ImmutableTopicPathPlaceholder.INSTANCE;", "modifier": "private static final", "type": "ImmutableTopicPathPlaceholder", "declarator": "UNDER_TEST = ImmutableTopicPathPlaceholder.INSTANCE", "var_name": "UNDER_TEST"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutableTopicPathPlaceholderTest.java"}, "test_case": {"identifier": "testReplaceActionOrSubjectWithSubject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReplaceActionOrSubjectWithSubject() {\n        assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT1, \"action-subject\")).contains(KNOWN_SUBJECT);\n    }", "signature": "void testReplaceActionOrSubjectWithSubject()", "full_signature": "@Test public void testReplaceActionOrSubjectWithSubject()", "class_method_signature": "ImmutableTopicPathPlaceholderTest.testReplaceActionOrSubjectWithSubject()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "resolve"]}, "focal_class": {"identifier": "ImmutableTopicPathPlaceholder", "superclass": "", "interfaces": "implements TopicPathPlaceholder", "fields": [{"original_string": "static final ImmutableTopicPathPlaceholder INSTANCE = new ImmutableTopicPathPlaceholder();", "modifier": "static final", "type": "ImmutableTopicPathPlaceholder", "declarator": "INSTANCE = new ImmutableTopicPathPlaceholder()", "var_name": "INSTANCE"}, {"original_string": "private static final String FULL_PLACEHOLDER = \"full\";", "modifier": "private static final", "type": "String", "declarator": "FULL_PLACEHOLDER = \"full\"", "var_name": "FULL_PLACEHOLDER"}, {"original_string": "private static final String NAMESPACE_PLACEHOLDER = \"namespace\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE_PLACEHOLDER = \"namespace\"", "var_name": "NAMESPACE_PLACEHOLDER"}, {"original_string": "private static final String ENTITYID_PLACEHOLDER = \"entityId\";", "modifier": "private static final", "type": "String", "declarator": "ENTITYID_PLACEHOLDER = \"entityId\"", "var_name": "ENTITYID_PLACEHOLDER"}, {"original_string": "private static final String GROUP_PLACEHOLDER = \"group\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_PLACEHOLDER = \"group\"", "var_name": "GROUP_PLACEHOLDER"}, {"original_string": "private static final String CHANNEL_PLACEHOLDER = \"channel\";", "modifier": "private static final", "type": "String", "declarator": "CHANNEL_PLACEHOLDER = \"channel\"", "var_name": "CHANNEL_PLACEHOLDER"}, {"original_string": "private static final String CRITERION_PLACEHOLDER = \"criterion\";", "modifier": "private static final", "type": "String", "declarator": "CRITERION_PLACEHOLDER = \"criterion\"", "var_name": "CRITERION_PLACEHOLDER"}, {"original_string": "private static final String ACTION_PLACEHOLDER = \"action\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_PLACEHOLDER = \"action\"", "var_name": "ACTION_PLACEHOLDER"}, {"original_string": "private static final String SUBJECT_PLACEHOLDER = \"subject\";", "modifier": "private static final", "type": "String", "declarator": "SUBJECT_PLACEHOLDER = \"subject\"", "var_name": "SUBJECT_PLACEHOLDER"}, {"original_string": "private static final String ACTION_OR_SUBJECT_PLACEHOLDER = \"action-subject\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_OR_SUBJECT_PLACEHOLDER = \"action-subject\"", "var_name": "ACTION_OR_SUBJECT_PLACEHOLDER"}, {"original_string": "private static final List<String> SUPPORTED = Collections.unmodifiableList(\n            Arrays.asList(FULL_PLACEHOLDER, NAMESPACE_PLACEHOLDER, ENTITYID_PLACEHOLDER, GROUP_PLACEHOLDER,\n                    CHANNEL_PLACEHOLDER, CRITERION_PLACEHOLDER, ACTION_PLACEHOLDER, SUBJECT_PLACEHOLDER,\n                    ACTION_OR_SUBJECT_PLACEHOLDER));", "modifier": "private static final", "type": "List<String>", "declarator": "SUPPORTED = Collections.unmodifiableList(\n            Arrays.asList(FULL_PLACEHOLDER, NAMESPACE_PLACEHOLDER, ENTITYID_PLACEHOLDER, GROUP_PLACEHOLDER,\n                    CHANNEL_PLACEHOLDER, CRITERION_PLACEHOLDER, ACTION_PLACEHOLDER, SUBJECT_PLACEHOLDER,\n                    ACTION_OR_SUBJECT_PLACEHOLDER))", "var_name": "SUPPORTED"}], "methods": [{"identifier": "ImmutableTopicPathPlaceholder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ImmutableTopicPathPlaceholder()", "full_signature": "private  ImmutableTopicPathPlaceholder()", "class_method_signature": "ImmutableTopicPathPlaceholder.ImmutableTopicPathPlaceholder()", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutableTopicPathPlaceholder.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSupportedNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedNames()", "full_signature": "@Override public List<String> getSupportedNames()", "class_method_signature": "ImmutableTopicPathPlaceholder.getSupportedNames()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(final String name)", "full_signature": "@Override public boolean supports(final String name)", "class_method_signature": "ImmutableTopicPathPlaceholder.supports(final String name)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final TopicPath topicPath, final String placeholder)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> resolve(final TopicPath topicPath, final String placeholder)", "full_signature": "@Override public Optional<String> resolve(final TopicPath topicPath, final String placeholder)", "class_method_signature": "ImmutableTopicPathPlaceholder.resolve(final TopicPath topicPath, final String placeholder)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableTopicPathPlaceholder.toString()", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutableTopicPathPlaceholder.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final TopicPath topicPath, final String placeholder)", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> resolve(final TopicPath topicPath, final String placeholder) {\n        ConditionChecker.argumentNotEmpty(placeholder, \"placeholder\");\n        switch (placeholder) {\n            case NAMESPACE_PLACEHOLDER:\n                return Optional.of(topicPath.getNamespace());\n            case ENTITYID_PLACEHOLDER:\n                return Optional.of(topicPath.getId());\n            case GROUP_PLACEHOLDER:\n                return Optional.of(topicPath.getGroup().getName());\n            case CHANNEL_PLACEHOLDER:\n                return Optional.of(topicPath.getChannel().getName());\n            case CRITERION_PLACEHOLDER:\n                return Optional.of(topicPath.getCriterion().getName());\n            case ACTION_PLACEHOLDER:\n                return topicPath.getAction().map(TopicPath.Action::getName);\n            case SUBJECT_PLACEHOLDER:\n                return topicPath.getSubject();\n            case ACTION_OR_SUBJECT_PLACEHOLDER:\n                // treat action-subject as synonyms:\n                return Optional.ofNullable(\n                        topicPath.getSubject()\n                                .orElseGet(() ->\n                                        topicPath.getAction().map(TopicPath.Action::getName).orElse(null)\n                                )\n                );\n            case FULL_PLACEHOLDER:\n                return Optional.of(topicPath.getPath());\n            default:\n                return Optional.empty();\n        }\n    }", "signature": "Optional<String> resolve(final TopicPath topicPath, final String placeholder)", "full_signature": "@Override public Optional<String> resolve(final TopicPath topicPath, final String placeholder)", "class_method_signature": "ImmutableTopicPathPlaceholder.resolve(final TopicPath topicPath, final String placeholder)", "testcase": false, "constructor": false, "invocations": ["argumentNotEmpty", "of", "getNamespace", "of", "getId", "of", "getName", "getGroup", "of", "getName", "getChannel", "of", "getName", "getCriterion", "map", "getAction", "getSubject", "ofNullable", "orElseGet", "getSubject", "orElse", "map", "getAction", "of", "getPath", "empty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}