{"test_class": {"identifier": "TestLineDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String mini;", "modifier": "private", "type": "String", "declarator": "mini", "var_name": "mini"}], "file": "flume-ng-core/src/test/java/org/apache/flume/serialization/TestLineDeserializer.java"}, "test_case": {"identifier": "testMaxLineLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMaxLineLength() throws IOException {\n    String longLine = \"abcdefghijklmnopqrstuvwxyz\\n\";\n    Context ctx = new Context();\n    ctx.put(LineDeserializer.MAXLINE_KEY, \"10\");\n\n    ResettableInputStream in = new ResettableTestStringInputStream(longLine);\n    EventDeserializer des = new LineDeserializer(ctx, in);\n\n    assertEventBodyEquals(\"abcdefghij\", des.readEvent());\n    assertEventBodyEquals(\"klmnopqrst\", des.readEvent());\n    assertEventBodyEquals(\"uvwxyz\", des.readEvent());\n    Assert.assertNull(des.readEvent());\n  }", "signature": "void testMaxLineLength()", "full_signature": "@Test public void testMaxLineLength()", "class_method_signature": "TestLineDeserializer.testMaxLineLength()", "testcase": true, "constructor": false, "invocations": ["put", "assertEventBodyEquals", "readEvent", "assertEventBodyEquals", "readEvent", "assertEventBodyEquals", "readEvent", "assertNull", "readEvent"]}, "focal_class": {"identifier": "LineDeserializer", "superclass": "", "interfaces": "implements EventDeserializer", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LineDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LineDeserializer.class)", "var_name": "logger"}, {"original_string": "private final ResettableInputStream in;", "modifier": "private final", "type": "ResettableInputStream", "declarator": "in", "var_name": "in"}, {"original_string": "private final Charset outputCharset;", "modifier": "private final", "type": "Charset", "declarator": "outputCharset", "var_name": "outputCharset"}, {"original_string": "private final int maxLineLength;", "modifier": "private final", "type": "int", "declarator": "maxLineLength", "var_name": "maxLineLength"}, {"original_string": "private volatile boolean isOpen;", "modifier": "private volatile", "type": "boolean", "declarator": "isOpen", "var_name": "isOpen"}, {"original_string": "public static final String OUT_CHARSET_KEY = \"outputCharset\";", "modifier": "public static final", "type": "String", "declarator": "OUT_CHARSET_KEY = \"outputCharset\"", "var_name": "OUT_CHARSET_KEY"}, {"original_string": "public static final String CHARSET_DFLT = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "CHARSET_DFLT = \"UTF-8\"", "var_name": "CHARSET_DFLT"}, {"original_string": "public static final String MAXLINE_KEY = \"maxLineLength\";", "modifier": "public static final", "type": "String", "declarator": "MAXLINE_KEY = \"maxLineLength\"", "var_name": "MAXLINE_KEY"}, {"original_string": "public static final int MAXLINE_DFLT = 2048;", "modifier": "public static final", "type": "int", "declarator": "MAXLINE_DFLT = 2048", "var_name": "MAXLINE_DFLT"}], "methods": [{"identifier": "LineDeserializer", "parameters": "(Context context, ResettableInputStream in)", "modifiers": "", "return": "", "signature": " LineDeserializer(Context context, ResettableInputStream in)", "full_signature": "  LineDeserializer(Context context, ResettableInputStream in)", "class_method_signature": "LineDeserializer.LineDeserializer(Context context, ResettableInputStream in)", "testcase": false, "constructor": true}, {"identifier": "readEvent", "parameters": "()", "modifiers": "@Override public", "return": "Event", "signature": "Event readEvent()", "full_signature": "@Override public Event readEvent()", "class_method_signature": "LineDeserializer.readEvent()", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(int numEvents)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> readEvents(int numEvents)", "full_signature": "@Override public List<Event> readEvents(int numEvents)", "class_method_signature": "LineDeserializer.readEvents(int numEvents)", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void mark()", "full_signature": "@Override public void mark()", "class_method_signature": "LineDeserializer.mark()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "LineDeserializer.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LineDeserializer.close()", "testcase": false, "constructor": false}, {"identifier": "ensureOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureOpen()", "full_signature": "private void ensureOpen()", "class_method_signature": "LineDeserializer.ensureOpen()", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readLine()", "full_signature": "private String readLine()", "class_method_signature": "LineDeserializer.readLine()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/serialization/LineDeserializer.java"}, "focal_method": {"identifier": "readEvent", "parameters": "()", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event readEvent() throws IOException {\n    ensureOpen();\n    String line = readLine();\n    if (line == null) {\n      return null;\n    } else {\n      return EventBuilder.withBody(line, outputCharset);\n    }\n  }", "signature": "Event readEvent()", "full_signature": "@Override public Event readEvent()", "class_method_signature": "LineDeserializer.readEvent()", "testcase": false, "constructor": false, "invocations": ["ensureOpen", "readLine", "withBody"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}