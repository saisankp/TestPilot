{"test_class": {"identifier": "HostRequestIntervalRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HostRequestIntervalRegistry registry;", "modifier": "private", "type": "HostRequestIntervalRegistry", "declarator": "registry", "var_name": "registry"}], "file": "common/transport/src/test/java/com/hashmapinc/server/common/transport/quota/inmemory/HostRequestIntervalRegistryTest.java"}, "test_case": {"identifier": "emptyWhitelistParsedOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyWhitelistParsedOk(){\n        registry = new HostRequestIntervalRegistry(10000L, 100L,\"\", \"b1\");\n        assertEquals(1L, registry.tick(\"aaa\"));\n    }", "signature": "void emptyWhitelistParsedOk()", "full_signature": "@Test public void emptyWhitelistParsedOk()", "class_method_signature": "HostRequestIntervalRegistryTest.emptyWhitelistParsedOk()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "tick"]}, "focal_class": {"identifier": "HostRequestIntervalRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, IntervalCount> hostCounts = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, IntervalCount>", "declarator": "hostCounts = new ConcurrentHashMap<>()", "var_name": "hostCounts"}, {"original_string": "private final long intervalDurationMs;", "modifier": "private final", "type": "long", "declarator": "intervalDurationMs", "var_name": "intervalDurationMs"}, {"original_string": "private final long ttlMs;", "modifier": "private final", "type": "long", "declarator": "ttlMs", "var_name": "ttlMs"}, {"original_string": "private final Set<String> whiteList;", "modifier": "private final", "type": "Set<String>", "declarator": "whiteList", "var_name": "whiteList"}, {"original_string": "private final Set<String> blackList;", "modifier": "private final", "type": "Set<String>", "declarator": "blackList", "var_name": "blackList"}], "methods": [{"identifier": "HostRequestIntervalRegistry", "parameters": "(@Value(\"${quota.host.intervalMs}\") long intervalDurationMs,\n                                       @Value(\"${quota.host.ttlMs}\") long ttlMs,\n                                       @Value(\"${quota.host.whitelist}\") String whiteList,\n                                       @Value(\"${quota.host.blacklist}\") String blackList)", "modifiers": "public", "return": "", "signature": " HostRequestIntervalRegistry(@Value(\"${quota.host.intervalMs}\") long intervalDurationMs,\n                                       @Value(\"${quota.host.ttlMs}\") long ttlMs,\n                                       @Value(\"${quota.host.whitelist}\") String whiteList,\n                                       @Value(\"${quota.host.blacklist}\") String blackList)", "full_signature": "public  HostRequestIntervalRegistry(@Value(\"${quota.host.intervalMs}\") long intervalDurationMs,\n                                       @Value(\"${quota.host.ttlMs}\") long ttlMs,\n                                       @Value(\"${quota.host.whitelist}\") String whiteList,\n                                       @Value(\"${quota.host.blacklist}\") String blackList)", "class_method_signature": "HostRequestIntervalRegistry.HostRequestIntervalRegistry(@Value(\"${quota.host.intervalMs}\") long intervalDurationMs,\n                                       @Value(\"${quota.host.ttlMs}\") long ttlMs,\n                                       @Value(\"${quota.host.whitelist}\") String whiteList,\n                                       @Value(\"${quota.host.blacklist}\") String blackList)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "HostRequestIntervalRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "tick", "parameters": "(String clientHostId)", "modifiers": "public", "return": "long", "signature": "long tick(String clientHostId)", "full_signature": "public long tick(String clientHostId)", "class_method_signature": "HostRequestIntervalRegistry.tick(String clientHostId)", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clean()", "full_signature": "public void clean()", "class_method_signature": "HostRequestIntervalRegistry.clean()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getContent()", "full_signature": "public Map<String, Long> getContent()", "class_method_signature": "HostRequestIntervalRegistry.getContent()", "testcase": false, "constructor": false}], "file": "common/transport/src/main/java/com/hashmapinc/server/common/transport/quota/inmemory/HostRequestIntervalRegistry.java"}, "focal_method": {"identifier": "tick", "parameters": "(String clientHostId)", "modifiers": "public", "return": "long", "body": "public long tick(String clientHostId) {\n        if (whiteList.contains(clientHostId)) {\n            return 0;\n        } else if (blackList.contains(clientHostId)) {\n            return Long.MAX_VALUE;\n        }\n        IntervalCount intervalCount = hostCounts.computeIfAbsent(clientHostId, s -> new IntervalCount(intervalDurationMs));\n        return intervalCount.resetIfExpiredAndTick();\n    }", "signature": "long tick(String clientHostId)", "full_signature": "public long tick(String clientHostId)", "class_method_signature": "HostRequestIntervalRegistry.tick(String clientHostId)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "computeIfAbsent", "resetIfExpiredAndTick"]}, "repository": {"repo_id": 120339465, "url": "https://github.com/hashmapinc/Tempus", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 22, "size": 57693, "license": "licensed"}}