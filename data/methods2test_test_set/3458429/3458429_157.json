{"test_class": {"identifier": "IteratingCallbackTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScheduledExecutorService scheduler;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "scheduler", "var_name": "scheduler"}], "file": "firefly-common/src/test/java/com/fireflysource/common/concurrent/IteratingCallbackTest.java"}, "test_case": {"identifier": "testWaitingProcessFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWaitingProcessFailure() throws Exception {\n        TestCB cb = new TestCB() {\n            int i = 4;\n\n            @Override\n            protected Action process() {\n                processed++;\n                if (i-- > 1) {\n                    scheduler.schedule(i > 2 ? successTask : failTask, 50, TimeUnit.MILLISECONDS);\n                    return Action.SCHEDULED;\n                }\n                return Action.SUCCEEDED;\n            }\n        };\n\n        cb.iterate();\n\n        assertFalse(cb.waitForComplete());\n        assertEquals(2, cb.processed);\n    }", "signature": "void testWaitingProcessFailure()", "full_signature": "@Test public void testWaitingProcessFailure()", "class_method_signature": "IteratingCallbackTest.testWaitingProcessFailure()", "testcase": true, "constructor": false, "invocations": ["schedule", "iterate", "assertFalse", "waitForComplete", "assertEquals"]}, "focal_class": {"identifier": "IteratingCallback", "superclass": "", "interfaces": "implements Consumer<Result<Void>>", "fields": [{"original_string": "private Locker locker = new Locker();", "modifier": "private", "type": "Locker", "declarator": "locker = new Locker()", "var_name": "locker"}, {"original_string": "private State state;", "modifier": "private", "type": "State", "declarator": "state", "var_name": "state"}, {"original_string": "private boolean iterate;", "modifier": "private", "type": "boolean", "declarator": "iterate", "var_name": "iterate"}], "methods": [{"identifier": "IteratingCallback", "parameters": "()", "modifiers": "protected", "return": "", "signature": " IteratingCallback()", "full_signature": "protected  IteratingCallback()", "class_method_signature": "IteratingCallback.IteratingCallback()", "testcase": false, "constructor": true}, {"identifier": "IteratingCallback", "parameters": "(boolean needReset)", "modifiers": "protected", "return": "", "signature": " IteratingCallback(boolean needReset)", "full_signature": "protected  IteratingCallback(boolean needReset)", "class_method_signature": "IteratingCallback.IteratingCallback(boolean needReset)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "()", "modifiers": "protected abstract", "return": "Action", "signature": "Action process()", "full_signature": "protected abstract Action process()", "class_method_signature": "IteratingCallback.process()", "testcase": false, "constructor": false}, {"identifier": "onCompleteSuccess", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onCompleteSuccess()", "full_signature": "protected void onCompleteSuccess()", "class_method_signature": "IteratingCallback.onCompleteSuccess()", "testcase": false, "constructor": false}, {"identifier": "onCompleteFailure", "parameters": "(Throwable cause)", "modifiers": "protected", "return": "void", "signature": "void onCompleteFailure(Throwable cause)", "full_signature": "protected void onCompleteFailure(Throwable cause)", "class_method_signature": "IteratingCallback.onCompleteFailure(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void iterate()", "full_signature": "public void iterate()", "class_method_signature": "IteratingCallback.iterate()", "testcase": false, "constructor": false}, {"identifier": "processing", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processing()", "full_signature": "private void processing()", "class_method_signature": "IteratingCallback.processing()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Result<Void> result)", "modifiers": "@Override public", "return": "void", "signature": "void accept(Result<Void> result)", "full_signature": "@Override public void accept(Result<Void> result)", "class_method_signature": "IteratingCallback.accept(Result<Void> result)", "testcase": false, "constructor": false}, {"identifier": "success", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void success()", "full_signature": "private void success()", "class_method_signature": "IteratingCallback.success()", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(Throwable x)", "modifiers": "private", "return": "void", "signature": "void failure(Throwable x)", "full_signature": "private void failure(Throwable x)", "class_method_signature": "IteratingCallback.failure(Throwable x)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "IteratingCallback.close()", "testcase": false, "constructor": false}, {"identifier": "isIdle", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isIdle()", "full_signature": " boolean isIdle()", "class_method_signature": "IteratingCallback.isIdle()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "IteratingCallback.isClosed()", "testcase": false, "constructor": false}, {"identifier": "isFailed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFailed()", "full_signature": "public boolean isFailed()", "class_method_signature": "IteratingCallback.isFailed()", "testcase": false, "constructor": false}, {"identifier": "isSucceeded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSucceeded()", "full_signature": "public boolean isSucceeded()", "class_method_signature": "IteratingCallback.isSucceeded()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean reset()", "full_signature": "public boolean reset()", "class_method_signature": "IteratingCallback.reset()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IteratingCallback.toString()", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/concurrent/IteratingCallback.java"}, "focal_method": {"identifier": "iterate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void iterate() {\n        boolean process = false;\n\n        loop:\n        while (true) {\n            try (Locker.Lock lock = locker.lock()) {\n                switch (state) {\n                    case PENDING:\n                    case CALLED:\n                        // process will be called when callback is handled\n                        break loop;\n\n                    case IDLE:\n                        state = State.PROCESSING;\n                        process = true;\n                        break loop;\n\n                    case PROCESSING:\n                        iterate = true;\n                        break loop;\n\n                    case FAILED:\n                    case SUCCEEDED:\n                        break loop;\n\n                    case CLOSED:\n                    default:\n                        throw new IllegalStateException(toString());\n                }\n            }\n        }\n        if (process)\n            processing();\n    }", "signature": "void iterate()", "full_signature": "public void iterate()", "class_method_signature": "IteratingCallback.iterate()", "testcase": false, "constructor": false, "invocations": ["lock", "toString", "processing"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}