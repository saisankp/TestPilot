{"test_class": {"identifier": "TestUrlSessionTracking", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UrlSessionTracking urlSessionTracking;", "modifier": "private", "type": "UrlSessionTracking", "declarator": "urlSessionTracking", "var_name": "urlSessionTracking"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestUrlSessionTracking.java"}, "test_case": {"identifier": "testEncodeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEncodeUrl() {\n    SessionConfiguration sc = new SessionConfiguration();\n    sc.setSessionIdName(\"asession\");\n    urlSessionTracking.configure(sc);\n    RequestWithSession request = mock(RequestWithSession.class, withSettings().extraInterfaces(HttpServletRequest.class));\n    RepositoryBackedSession session = mock(RepositoryBackedSession.class);\n    when(request.getRepositoryBackedSession(false)).thenReturn(session);\n    when(session.isValid()).thenReturn(Boolean.FALSE);\n    String url = urlSessionTracking.encodeUrl(request, \"http://www.example.com\");\n    assertEquals(\"Session is not valid, so URL should stay the same\", \"http://www.example.com\", url);\n    when(session.isValid()).thenReturn(Boolean.TRUE);\n    when(session.getId()).thenReturn(\"1234\");\n    url = urlSessionTracking.encodeUrl(request, \"http://www.example.com\");\n    assertEquals(\"Session is valid, so URL should be encoded\", \"http://www.example.com;asession=1234\", url);\n    url = urlSessionTracking.encodeUrl(request, \"http://www.example.com/abc\");\n    assertEquals(\"Session is valid, so URL should be encoded\", \"http://www.example.com/abc;asession=1234\", url);\n    url = urlSessionTracking.encodeUrl(request, \"http://www.example.com/def?abc\");\n    assertEquals(\"Session is valid, so URL should be encoded\", \"http://www.example.com/def;asession=1234?abc\", url);\n    url = urlSessionTracking.encodeUrl(request, \"http://www.example.com/def?abc?\");\n    assertEquals(\"Session is valid, so URL should be encoded\", \"http://www.example.com/def;asession=1234?abc?\", url);\n  }", "signature": "void testEncodeUrl()", "full_signature": "@Test public void testEncodeUrl()", "class_method_signature": "TestUrlSessionTracking.testEncodeUrl()", "testcase": true, "constructor": false, "invocations": ["setSessionIdName", "configure", "mock", "extraInterfaces", "withSettings", "mock", "thenReturn", "when", "getRepositoryBackedSession", "thenReturn", "when", "isValid", "encodeUrl", "assertEquals", "thenReturn", "when", "isValid", "thenReturn", "when", "getId", "encodeUrl", "assertEquals", "encodeUrl", "assertEquals", "encodeUrl", "assertEquals", "encodeUrl", "assertEquals"]}, "focal_class": {"identifier": "UrlSessionTracking", "superclass": "extends BaseSessionTracking", "interfaces": "implements SessionTracking", "fields": [{"original_string": "private String sessionIdPathItem;", "modifier": "private", "type": "String", "declarator": "sessionIdPathItem", "var_name": "sessionIdPathItem"}], "methods": [{"identifier": "configure", "parameters": "(SessionConfiguration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void configure(SessionConfiguration configuration)", "full_signature": "@Override public void configure(SessionConfiguration configuration)", "class_method_signature": "UrlSessionTracking.configure(SessionConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "UrlSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "(RequestWithSession request, Object response)", "modifiers": "@Override public", "return": "void", "signature": "void propagateSession(RequestWithSession request, Object response)", "full_signature": "@Override public void propagateSession(RequestWithSession request, Object response)", "class_method_signature": "UrlSessionTracking.propagateSession(RequestWithSession request, Object response)", "testcase": false, "constructor": false}, {"identifier": "encodeUrl", "parameters": "(RequestWithSession request, String url)", "modifiers": "@Override public", "return": "String", "signature": "String encodeUrl(RequestWithSession request, String url)", "full_signature": "@Override public String encodeUrl(RequestWithSession request, String url)", "class_method_signature": "UrlSessionTracking.encodeUrl(RequestWithSession request, String url)", "testcase": false, "constructor": false}, {"identifier": "isCookieTracking", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCookieTracking()", "full_signature": "@Override public boolean isCookieTracking()", "class_method_signature": "UrlSessionTracking.isCookieTracking()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/UrlSessionTracking.java"}, "focal_method": {"identifier": "encodeUrl", "parameters": "(RequestWithSession request, String url)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String encodeUrl(RequestWithSession request, String url) {\n    RepositoryBackedSession session = request.getRepositoryBackedSession(false);\n    if (session == null || !session.isValid()) {\n      return url;\n    }\n    String encodedSessionAlias;\n    try {\n      encodedSessionAlias = URLEncoder.encode(session.getId(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"This exception should never happen!\", e);\n    }\n\n    int queryStart = url.indexOf('?');\n    if (queryStart < 0) {\n      return url + sessionIdPathItem + encodedSessionAlias;\n    }\n    String path = url.substring(0, queryStart);\n    String query = url.substring(queryStart + 1, url.length());\n    path += sessionIdPathItem + encodedSessionAlias;\n\n    return path + '?' + query;\n  }", "signature": "String encodeUrl(RequestWithSession request, String url)", "full_signature": "@Override public String encodeUrl(RequestWithSession request, String url)", "class_method_signature": "UrlSessionTracking.encodeUrl(RequestWithSession request, String url)", "testcase": false, "constructor": false, "invocations": ["getRepositoryBackedSession", "isValid", "encode", "getId", "indexOf", "substring", "substring", "length"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}