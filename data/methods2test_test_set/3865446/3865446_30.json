{"test_class": {"identifier": "UniformStochasticSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected UniformStochasticSelectionOperator operator;", "modifier": "protected", "type": "UniformStochasticSelectionOperator", "declarator": "operator", "var_name": "operator"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/UniformStochasticSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelect1", "parameters": "()", "modifiers": "@Test // tests selection of more Individuals than given from one Population public", "return": "void", "body": "@Test\n    // tests selection of more Individuals than given from one Population\n    public void testSelect1() throws Exception {\n        SimplePopulation popIn1 = new SimplePopulation();\n        Individual[] individuals1 = new SimpleIndividual[2];\n        for (int i = 0; i < individuals1.length; i++){\n            individuals1[i] = new SimpleIndividual(0, 0.0, new SimplePhenotypeRepresentation());\n            individuals1[i].setFitness((i-1)*(i-1)); // shifted parabola with prescription y = x^2 and bottom at position (x = -1).\n        }\n        popIn1.setIndividuals(individuals1);\n        this.operator.setInputArity(1);\n        this.operator.setOutputArity(1);\n        this.operator.setIndividualsPerPopulation(4);\n        Population[] popsOut = this.operator.select(new SimplePopulation[]{popIn1});\n        assertTrue(popsOut.length == 1);\n        assertTrue(popsOut[0].getIndividuals().length == 4);\n        for (Individual ind : popsOut[0].getIndividuals()){\n            assertTrue(ind != null);\n        }\n    }", "signature": "void testSelect1()", "full_signature": "@Test // tests selection of more Individuals than given from one Population public void testSelect1()", "class_method_signature": "UniformStochasticSelectionOperatorTest.testSelect1()", "testcase": true, "constructor": false, "invocations": ["setFitness", "setIndividuals", "setInputArity", "setOutputArity", "setIndividualsPerPopulation", "select", "assertTrue", "assertTrue", "getIndividuals", "getIndividuals", "assertTrue"]}, "focal_class": {"identifier": "UniformStochasticSelectionOperator", "superclass": "extends AbstractSelectionOperator", "interfaces": "", "fields": [{"original_string": "protected RandomGenerator randomGenerator;", "modifier": "protected", "type": "RandomGenerator", "declarator": "randomGenerator", "var_name": "randomGenerator"}], "methods": [{"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "UniformStochasticSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "checkConsistency", "parameters": "(Population[] inputPopulations)", "modifiers": "@Override public", "return": "void", "signature": "void checkConsistency(Population[] inputPopulations)", "full_signature": "@Override public void checkConsistency(Population[] inputPopulations)", "class_method_signature": "UniformStochasticSelectionOperator.checkConsistency(Population[] inputPopulations)", "testcase": false, "constructor": false}, {"identifier": "setRandomGenerator", "parameters": "(RandomGenerator randomGenerator)", "modifiers": "public", "return": "void", "signature": "void setRandomGenerator(RandomGenerator randomGenerator)", "full_signature": "public void setRandomGenerator(RandomGenerator randomGenerator)", "class_method_signature": "UniformStochasticSelectionOperator.setRandomGenerator(RandomGenerator randomGenerator)", "testcase": false, "constructor": false}, {"identifier": "resetGenerationCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetGenerationCount()", "full_signature": "public void resetGenerationCount()", "class_method_signature": "UniformStochasticSelectionOperator.resetGenerationCount()", "testcase": false, "constructor": false}, {"identifier": "nextGeneration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextGeneration()", "full_signature": "public void nextGeneration()", "class_method_signature": "UniformStochasticSelectionOperator.nextGeneration()", "testcase": false, "constructor": false}, {"identifier": "setGeneration", "parameters": "(int currentGeneration)", "modifiers": "public", "return": "void", "signature": "void setGeneration(int currentGeneration)", "full_signature": "public void setGeneration(int currentGeneration)", "class_method_signature": "UniformStochasticSelectionOperator.setGeneration(int currentGeneration)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/UniformStochasticSelectionOperator.java"}, "focal_method": {"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "body": "public Population[] select(Population[] populations) {\n        checkConsistency(populations);\n\n        // unify populations for easy linear access to all input Individuals\n        Individual[] inputIndividuals = this.concatenateIndividualsFromPopulations(populations, this.inputArity);\n        int inputSize = inputIndividuals.length;\n        int resultSize = this.getOutputArity() * this.getIndividualsPerPopulation();\n        List<Individual> selectedIndividuals = new ArrayList<Individual>(resultSize);\n        // random selection of Individuals from input\n        for (int i = 0; i < resultSize; i++){\n            selectedIndividuals.add(inputIndividuals[this.randomGenerator.nextInt(inputSize)]);\n        }\n\n        // wrapping result into return values\n        Population[] outputPopulations = this.createOutputPopulations();\n        Individual[][] outputIndividuals = this.createOutputIndividuals();\n        this.mapByColumns(selectedIndividuals, outputIndividuals);\n        this.assignIndividualsToPopulations(outputIndividuals, outputPopulations);\n\n        return outputPopulations;\n    }", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "UniformStochasticSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false, "invocations": ["checkConsistency", "concatenateIndividualsFromPopulations", "getOutputArity", "getIndividualsPerPopulation", "add", "nextInt", "createOutputPopulations", "createOutputIndividuals", "mapByColumns", "assignIndividualsToPopulations"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}