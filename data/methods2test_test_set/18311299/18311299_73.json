{"test_class": {"identifier": "ReactiveDatasourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private EventChannel<Integer> channel;", "modifier": "@Mock\n    private", "type": "EventChannel<Integer>", "declarator": "channel", "var_name": "channel"}, {"original_string": "@Mock\n    private EventListener<Integer> listener;", "modifier": "@Mock\n    private", "type": "EventListener<Integer>", "declarator": "listener", "var_name": "listener"}, {"original_string": "@Mock\n    private EventPoller<Integer> poller;", "modifier": "@Mock\n    private", "type": "EventPoller<Integer>", "declarator": "poller", "var_name": "poller"}, {"original_string": "private ReactiveDatasource<Integer> reactiveDatasource;", "modifier": "private", "type": "ReactiveDatasource<Integer>", "declarator": "reactiveDatasource", "var_name": "reactiveDatasource"}], "file": "reactive-source-core/src/test/java/org/reactivesource/ReactiveDatasourceTest.java"}, "test_case": {"identifier": "testAddingEventListenerAddsTheListenerToTheChannel", "parameters": "()", "modifiers": "@Test(groups = SMALL) public", "return": "void", "body": "@Test(groups = SMALL)\n    public void testAddingEventListenerAddsTheListenerToTheChannel() {\n        reactiveDatasource.addEventListener(listener);\n        verify(channel).addEventListener(listener);\n    }", "signature": "void testAddingEventListenerAddsTheListenerToTheChannel()", "full_signature": "@Test(groups = SMALL) public void testAddingEventListenerAddsTheListenerToTheChannel()", "class_method_signature": "ReactiveDatasourceTest.testAddingEventListenerAddsTheListenerToTheChannel()", "testcase": true, "constructor": false, "invocations": ["addEventListener", "addEventListener", "verify"]}, "focal_class": {"identifier": "ReactiveDatasource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private EventChannel<T> eventChannel;", "modifier": "private", "type": "EventChannel<T>", "declarator": "eventChannel", "var_name": "eventChannel"}, {"original_string": "private EventPoller<T> eventPoller;", "modifier": "private", "type": "EventPoller<T>", "declarator": "eventPoller", "var_name": "eventPoller"}, {"original_string": "private Thread pollerDaemon;", "modifier": "private", "type": "Thread", "declarator": "pollerDaemon", "var_name": "pollerDaemon"}], "methods": [{"identifier": "ReactiveDatasource", "parameters": "(EventSource eventSource)", "modifiers": "public", "return": "", "signature": " ReactiveDatasource(EventSource eventSource)", "full_signature": "public  ReactiveDatasource(EventSource eventSource)", "class_method_signature": "ReactiveDatasource.ReactiveDatasource(EventSource eventSource)", "testcase": false, "constructor": true}, {"identifier": "ReactiveDatasource", "parameters": "(EventSource eventSource, EventChannel<T> eventChannel)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ReactiveDatasource(EventSource eventSource, EventChannel<T> eventChannel)", "full_signature": "@VisibleForTesting  ReactiveDatasource(EventSource eventSource, EventChannel<T> eventChannel)", "class_method_signature": "ReactiveDatasource.ReactiveDatasource(EventSource eventSource, EventChannel<T> eventChannel)", "testcase": false, "constructor": true}, {"identifier": "ReactiveDatasource", "parameters": "(EventChannel<T> eventChannel, EventPoller<T> eventPoller)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ReactiveDatasource(EventChannel<T> eventChannel, EventPoller<T> eventPoller)", "full_signature": "@VisibleForTesting  ReactiveDatasource(EventChannel<T> eventChannel, EventPoller<T> eventPoller)", "class_method_signature": "ReactiveDatasource.ReactiveDatasource(EventChannel<T> eventChannel, EventPoller<T> eventPoller)", "testcase": false, "constructor": true}, {"identifier": "addEventListener", "parameters": "(EventListener<T> listener)", "modifiers": "public", "return": "void", "signature": "void addEventListener(EventListener<T> listener)", "full_signature": "public void addEventListener(EventListener<T> listener)", "class_method_signature": "ReactiveDatasource.addEventListener(EventListener<T> listener)", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "ReactiveDatasource.isStarted()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "ReactiveDatasource.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "ReactiveDatasource.stop()", "testcase": false, "constructor": false}], "file": "reactive-source-core/src/main/java/org/reactivesource/ReactiveDatasource.java"}, "focal_method": {"identifier": "addEventListener", "parameters": "(EventListener<T> listener)", "modifiers": "public", "return": "void", "body": "public void addEventListener(EventListener<T> listener) {\n        logger.info(\"Adding listener to ReactiveDatasource.\");\n        notNull(listener, \"Can not add null eventListener\");\n        eventChannel.addEventListener(listener);\n    }", "signature": "void addEventListener(EventListener<T> listener)", "full_signature": "public void addEventListener(EventListener<T> listener)", "class_method_signature": "ReactiveDatasource.addEventListener(EventListener<T> listener)", "testcase": false, "constructor": false, "invocations": ["info", "notNull", "addEventListener"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}