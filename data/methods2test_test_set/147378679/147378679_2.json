{"test_class": {"identifier": "MathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "momentsolver/src/test/java/com/github/stanfordfuturedata/momentsketch/MathUtilTest.java"}, "test_case": {"identifier": "testConvertMoments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertMoments() {\n        // integers from 0...1000\n        double[] uniformPowerSums = {1001,500500,333833500,250500250000L};\n        double[] convertedChebyshevMoments = MathUtil.powerSumsToChebyMoments(0, 1000, uniformPowerSums);\n\n        double[] expectedChebyshevMoments = {1.0, 0, -.332, 0};\n        assertArrayEquals(expectedChebyshevMoments, convertedChebyshevMoments, 1e-14);\n    }", "signature": "void testConvertMoments()", "full_signature": "@Test public void testConvertMoments()", "class_method_signature": "MathUtilTest.testConvertMoments()", "testcase": true, "constructor": false, "invocations": ["powerSumsToChebyMoments", "assertArrayEquals"]}, "focal_class": {"identifier": "MathUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getBinomials", "parameters": "(int m)", "modifiers": "public static", "return": "long[][]", "signature": "long[][] getBinomials(int m)", "full_signature": "public static long[][] getBinomials(int m)", "class_method_signature": "MathUtil.getBinomials(int m)", "testcase": false, "constructor": false}, {"identifier": "getChebyCoefficients", "parameters": "(int k)", "modifiers": "public static", "return": "int[][]", "signature": "int[][] getChebyCoefficients(int k)", "full_signature": "public static int[][] getChebyCoefficients(int k)", "class_method_signature": "MathUtil.getChebyCoefficients(int k)", "testcase": false, "constructor": false}, {"identifier": "shiftPowerSum", "parameters": "(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "full_signature": "public static double[] shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "class_method_signature": "MathUtil.shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "testcase": false, "constructor": false}, {"identifier": "powerSumsToZerodMoments", "parameters": "(\n            double[] powerSums,\n            double min,\n            double max\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "full_signature": "public static double[] powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "class_method_signature": "MathUtil.powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "testcase": false, "constructor": false}, {"identifier": "powerSumsToChebyMoments", "parameters": "(\n            double min,\n            double max,\n            double[] powerSums\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "full_signature": "public static double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "class_method_signature": "MathUtil.powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "testcase": false, "constructor": false}, {"identifier": "arrayMean", "parameters": "(double[] xs)", "modifiers": "public static", "return": "double", "signature": "double arrayMean(double[] xs)", "full_signature": "public static double arrayMean(double[] xs)", "class_method_signature": "MathUtil.arrayMean(double[] xs)", "testcase": false, "constructor": false}, {"identifier": "calcPowers", "parameters": "(double x, double[] powers)", "modifiers": "public static", "return": "void", "signature": "void calcPowers(double x, double[] powers)", "full_signature": "public static void calcPowers(double x, double[] powers)", "class_method_signature": "MathUtil.calcPowers(double x, double[] powers)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(double[] ps)", "modifiers": "public static", "return": "double", "signature": "double entropy(double[] ps)", "full_signature": "public static double entropy(double[] ps)", "class_method_signature": "MathUtil.entropy(double[] ps)", "testcase": false, "constructor": false}, {"identifier": "getMSE", "parameters": "(double[] error)", "modifiers": "public static", "return": "double", "signature": "double getMSE(double[] error)", "full_signature": "public static double getMSE(double[] error)", "class_method_signature": "MathUtil.getMSE(double[] error)", "testcase": false, "constructor": false}], "file": "momentsolver/src/main/java/com/github/stanfordfuturedata/momentsketch/MathUtil.java"}, "focal_method": {"identifier": "powerSumsToChebyMoments", "parameters": "(\n            double min,\n            double max,\n            double[] powerSums\n    )", "modifiers": "public static", "return": "double[]", "body": "public static double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    ) {\n        int k = powerSums.length - 1;\n        double r = (max - min) / 2;\n        double xc = (max + min) / 2;\n        // First rescale the variables so that they lie in [-1,1]\n        double[] scaledPowerSums = MathUtil.shiftPowerSum(\n                powerSums,r,xc\n        );\n\n        double count = powerSums[0];\n        int[][] cCoeffs = MathUtil.getChebyCoefficients(k);\n        // Then convert from power sums to chebyshev moments\n        double[] scaledChebyMoments = new double[k+1];\n        for (int i = 0; i <=k; i++) {\n            double sum = 0.0;\n            for (int j = 0; j <= i; j++) {\n                sum += cCoeffs[i][j]*scaledPowerSums[j];\n            }\n            scaledChebyMoments[i] = sum / count;\n        }\n\n        return scaledChebyMoments;\n    }", "signature": "double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "full_signature": "public static double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "class_method_signature": "MathUtil.powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "testcase": false, "constructor": false, "invocations": ["shiftPowerSum", "getChebyCoefficients"]}, "repository": {"repo_id": 147378679, "url": "https://github.com/stanford-futuredata/momentsketch", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 28, "size": 59, "license": "licensed"}}