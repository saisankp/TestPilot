{"test_class": {"identifier": "VirtualMachineManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n    VirtualMachineManagerImpl _vmMgr = new VirtualMachineManagerImpl();", "modifier": "@Spy", "type": "VirtualMachineManagerImpl", "declarator": "_vmMgr = new VirtualMachineManagerImpl()", "var_name": "_vmMgr"}, {"original_string": "@Mock\n    VolumeOrchestrationService _storageMgr;", "modifier": "@Mock", "type": "VolumeOrchestrationService", "declarator": "_storageMgr", "var_name": "_storageMgr"}, {"original_string": "@Mock\n    Account _account;", "modifier": "@Mock", "type": "Account", "declarator": "_account", "var_name": "_account"}, {"original_string": "@Mock\n    CapacityManager _capacityMgr;", "modifier": "@Mock", "type": "CapacityManager", "declarator": "_capacityMgr", "var_name": "_capacityMgr"}, {"original_string": "@Mock\n    AgentManager _agentMgr;", "modifier": "@Mock", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Mock\n    AccountDao _accountDao;", "modifier": "@Mock", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Mock\n    ConfigurationDao _configDao;", "modifier": "@Mock", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock\n    HostDao _hostDao;", "modifier": "@Mock", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Mock\n    UserDao _userDao;", "modifier": "@Mock", "type": "UserDao", "declarator": "_userDao", "var_name": "_userDao"}, {"original_string": "@Mock\n    UserVmDao _vmDao;", "modifier": "@Mock", "type": "UserVmDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Mock\n    ItWorkDao _workDao;", "modifier": "@Mock", "type": "ItWorkDao", "declarator": "_workDao", "var_name": "_workDao"}, {"original_string": "@Mock\n    VMInstanceDao _vmInstanceDao;", "modifier": "@Mock", "type": "VMInstanceDao", "declarator": "_vmInstanceDao", "var_name": "_vmInstanceDao"}, {"original_string": "@Mock\n    VMTemplateDao _templateDao;", "modifier": "@Mock", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Mock\n    VolumeDao _volsDao;", "modifier": "@Mock", "type": "VolumeDao", "declarator": "_volsDao", "var_name": "_volsDao"}, {"original_string": "@Mock\n    RestoreVMCmd _restoreVMCmd;", "modifier": "@Mock", "type": "RestoreVMCmd", "declarator": "_restoreVMCmd", "var_name": "_restoreVMCmd"}, {"original_string": "@Mock\n    AccountVO _accountMock;", "modifier": "@Mock", "type": "AccountVO", "declarator": "_accountMock", "var_name": "_accountMock"}, {"original_string": "@Mock\n    UserVO _userMock;", "modifier": "@Mock", "type": "UserVO", "declarator": "_userMock", "var_name": "_userMock"}, {"original_string": "@Mock\n    UserVmVO _vmMock;", "modifier": "@Mock", "type": "UserVmVO", "declarator": "_vmMock", "var_name": "_vmMock"}, {"original_string": "@Mock\n    VMInstanceVO _vmInstance;", "modifier": "@Mock", "type": "VMInstanceVO", "declarator": "_vmInstance", "var_name": "_vmInstance"}, {"original_string": "@Mock\n    HostVO _host;", "modifier": "@Mock", "type": "HostVO", "declarator": "_host", "var_name": "_host"}, {"original_string": "@Mock\n    VMTemplateVO _templateMock;", "modifier": "@Mock", "type": "VMTemplateVO", "declarator": "_templateMock", "var_name": "_templateMock"}, {"original_string": "@Mock\n    VolumeVO _volumeMock;", "modifier": "@Mock", "type": "VolumeVO", "declarator": "_volumeMock", "var_name": "_volumeMock"}, {"original_string": "@Mock\n    List<VolumeVO> _rootVols;", "modifier": "@Mock", "type": "List<VolumeVO>", "declarator": "_rootVols", "var_name": "_rootVols"}, {"original_string": "@Mock\n    ItWorkVO _work;", "modifier": "@Mock", "type": "ItWorkVO", "declarator": "_work", "var_name": "_work"}, {"original_string": "@Mock\n    HostVO hostVO;", "modifier": "@Mock", "type": "HostVO", "declarator": "hostVO", "var_name": "hostVO"}, {"original_string": "@Mock\n    UserVmDetailVO _vmDetailVO;", "modifier": "@Mock", "type": "UserVmDetailVO", "declarator": "_vmDetailVO", "var_name": "_vmDetailVO"}, {"original_string": "@Mock\n    ClusterDao _clusterDao;", "modifier": "@Mock", "type": "ClusterDao", "declarator": "_clusterDao", "var_name": "_clusterDao"}, {"original_string": "@Mock\n    HostPodDao _podDao;", "modifier": "@Mock", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Mock\n    DataCenterDao _dcDao;", "modifier": "@Mock", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock\n    DiskOfferingDao _diskOfferingDao;", "modifier": "@Mock", "type": "DiskOfferingDao", "declarator": "_diskOfferingDao", "var_name": "_diskOfferingDao"}, {"original_string": "@Mock\n    PrimaryDataStoreDao _storagePoolDao;", "modifier": "@Mock", "type": "PrimaryDataStoreDao", "declarator": "_storagePoolDao", "var_name": "_storagePoolDao"}, {"original_string": "@Mock\n    UserVmDetailsDao _vmDetailsDao;", "modifier": "@Mock", "type": "UserVmDetailsDao", "declarator": "_vmDetailsDao", "var_name": "_vmDetailsDao"}, {"original_string": "@Mock\n    StoragePoolHostDao _poolHostDao;", "modifier": "@Mock", "type": "StoragePoolHostDao", "declarator": "_poolHostDao", "var_name": "_poolHostDao"}, {"original_string": "@Mock\n    NetworkOrchestrationService _networkMgr;", "modifier": "@Mock", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Mock\n    HypervisorGuruManager _hvGuruMgr;", "modifier": "@Mock", "type": "HypervisorGuruManager", "declarator": "_hvGuruMgr", "var_name": "_hvGuruMgr"}, {"original_string": "@Mock\n    VMSnapshotManager _vmSnapshotMgr;", "modifier": "@Mock", "type": "VMSnapshotManager", "declarator": "_vmSnapshotMgr", "var_name": "_vmSnapshotMgr"}, {"original_string": "@Mock\n    DiskOfferingVO _diskOfferingMock;", "modifier": "@Mock", "type": "DiskOfferingVO", "declarator": "_diskOfferingMock", "var_name": "_diskOfferingMock"}, {"original_string": "@Mock\n    StoragePoolVO _srcStoragePoolMock;", "modifier": "@Mock", "type": "StoragePoolVO", "declarator": "_srcStoragePoolMock", "var_name": "_srcStoragePoolMock"}, {"original_string": "@Mock\n    StoragePoolVO _destStoragePoolMock;", "modifier": "@Mock", "type": "StoragePoolVO", "declarator": "_destStoragePoolMock", "var_name": "_destStoragePoolMock"}, {"original_string": "@Mock\n    HostVO _srcHostMock;", "modifier": "@Mock", "type": "HostVO", "declarator": "_srcHostMock", "var_name": "_srcHostMock"}, {"original_string": "@Mock\n    HostVO _destHostMock;", "modifier": "@Mock", "type": "HostVO", "declarator": "_destHostMock", "var_name": "_destHostMock"}, {"original_string": "@Mock\n    Map<Long, Long> _volumeToPoolMock;", "modifier": "@Mock", "type": "Map<Long, Long>", "declarator": "_volumeToPoolMock", "var_name": "_volumeToPoolMock"}, {"original_string": "@Mock\n    EntityManager _entityMgr;", "modifier": "@Mock", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Mock\n    ConfigDepot _configDepot;", "modifier": "@Mock", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}], "file": "engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java"}, "test_case": {"identifier": "testMigrateWithVolumeAcrossCluster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMigrateWithVolumeAcrossCluster() throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException,\n    VirtualMachineMigrationException, OperationTimedoutException {\n\n        initializeMockConfigForMigratingVmWithVolumes();\n        when(_srcHostMock.getClusterId()).thenReturn(3L);\n        when(_destHostMock.getClusterId()).thenReturn(4L);\n\n        _vmMgr.migrateWithStorage(_vmInstance.getUuid(), _srcHostMock.getId(), _destHostMock.getId(), _volumeToPoolMock);\n    }", "signature": "void testMigrateWithVolumeAcrossCluster()", "full_signature": "@Test public void testMigrateWithVolumeAcrossCluster()", "class_method_signature": "VirtualMachineManagerImplTest.testMigrateWithVolumeAcrossCluster()", "testcase": true, "constructor": false, "invocations": ["initializeMockConfigForMigratingVmWithVolumes", "thenReturn", "when", "getClusterId", "thenReturn", "when", "getClusterId", "migrateWithStorage", "getUuid", "getId", "getId"]}, "focal_class": {"identifier": "VirtualMachineManagerImpl", "superclass": "extends ManagerBase", "interfaces": "implements VirtualMachineManager, VmWorkJobHandler, Listener, Configurable", "fields": [{"original_string": "private static final Logger s_logger = Logger.getLogger(VirtualMachineManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = Logger.getLogger(VirtualMachineManagerImpl.class)", "var_name": "s_logger"}, {"original_string": "public static final String VM_WORK_JOB_HANDLER = VirtualMachineManagerImpl.class.getSimpleName();", "modifier": "public static final", "type": "String", "declarator": "VM_WORK_JOB_HANDLER = VirtualMachineManagerImpl.class.getSimpleName()", "var_name": "VM_WORK_JOB_HANDLER"}, {"original_string": "private static final String VM_SYNC_ALERT_SUBJECT = \"VM state sync alert\";", "modifier": "private static final", "type": "String", "declarator": "VM_SYNC_ALERT_SUBJECT = \"VM state sync alert\"", "var_name": "VM_SYNC_ALERT_SUBJECT"}, {"original_string": "@Inject\n    DataStoreManager dataStoreMgr;", "modifier": "@Inject", "type": "DataStoreManager", "declarator": "dataStoreMgr", "var_name": "dataStoreMgr"}, {"original_string": "@Inject\n    protected NetworkOrchestrationService _networkMgr;", "modifier": "@Inject\n    protected", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Inject\n    protected NetworkModel _networkModel;", "modifier": "@Inject\n    protected", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    protected AgentManager _agentMgr;", "modifier": "@Inject\n    protected", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    protected VMInstanceDao _vmDao;", "modifier": "@Inject\n    protected", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Inject\n    protected ServiceOfferingDao _offeringDao;", "modifier": "@Inject\n    protected", "type": "ServiceOfferingDao", "declarator": "_offeringDao", "var_name": "_offeringDao"}, {"original_string": "@Inject\n    protected DiskOfferingDao _diskOfferingDao;", "modifier": "@Inject\n    protected", "type": "DiskOfferingDao", "declarator": "_diskOfferingDao", "var_name": "_diskOfferingDao"}, {"original_string": "@Inject\n    protected VMTemplateDao _templateDao;", "modifier": "@Inject\n    protected", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Inject\n    protected DomainDao _domainDao;", "modifier": "@Inject\n    protected", "type": "DomainDao", "declarator": "_domainDao", "var_name": "_domainDao"}, {"original_string": "@Inject\n    protected ItWorkDao _workDao;", "modifier": "@Inject\n    protected", "type": "ItWorkDao", "declarator": "_workDao", "var_name": "_workDao"}, {"original_string": "@Inject\n    protected UserVmDao _userVmDao;", "modifier": "@Inject\n    protected", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    protected CapacityManager _capacityMgr;", "modifier": "@Inject\n    protected", "type": "CapacityManager", "declarator": "_capacityMgr", "var_name": "_capacityMgr"}, {"original_string": "@Inject\n    protected NicDao _nicsDao;", "modifier": "@Inject\n    protected", "type": "NicDao", "declarator": "_nicsDao", "var_name": "_nicsDao"}, {"original_string": "@Inject\n    protected HostDao _hostDao;", "modifier": "@Inject\n    protected", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    protected AlertManager _alertMgr;", "modifier": "@Inject\n    protected", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    protected GuestOSCategoryDao _guestOsCategoryDao;", "modifier": "@Inject\n    protected", "type": "GuestOSCategoryDao", "declarator": "_guestOsCategoryDao", "var_name": "_guestOsCategoryDao"}, {"original_string": "@Inject\n    protected GuestOSDao _guestOsDao;", "modifier": "@Inject\n    protected", "type": "GuestOSDao", "declarator": "_guestOsDao", "var_name": "_guestOsDao"}, {"original_string": "@Inject\n    protected VolumeDao _volsDao;", "modifier": "@Inject\n    protected", "type": "VolumeDao", "declarator": "_volsDao", "var_name": "_volsDao"}, {"original_string": "@Inject\n    protected HighAvailabilityManager _haMgr;", "modifier": "@Inject\n    protected", "type": "HighAvailabilityManager", "declarator": "_haMgr", "var_name": "_haMgr"}, {"original_string": "@Inject\n    protected HostPodDao _podDao;", "modifier": "@Inject\n    protected", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Inject\n    protected DataCenterDao _dcDao;", "modifier": "@Inject\n    protected", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Inject\n    protected ClusterDao _clusterDao;", "modifier": "@Inject\n    protected", "type": "ClusterDao", "declarator": "_clusterDao", "var_name": "_clusterDao"}, {"original_string": "@Inject\n    protected PrimaryDataStoreDao _storagePoolDao;", "modifier": "@Inject\n    protected", "type": "PrimaryDataStoreDao", "declarator": "_storagePoolDao", "var_name": "_storagePoolDao"}, {"original_string": "@Inject\n    protected HypervisorGuruManager _hvGuruMgr;", "modifier": "@Inject\n    protected", "type": "HypervisorGuruManager", "declarator": "_hvGuruMgr", "var_name": "_hvGuruMgr"}, {"original_string": "@Inject\n    protected NetworkDao _networkDao;", "modifier": "@Inject\n    protected", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    protected StoragePoolHostDao _poolHostDao;", "modifier": "@Inject\n    protected", "type": "StoragePoolHostDao", "declarator": "_poolHostDao", "var_name": "_poolHostDao"}, {"original_string": "@Inject\n    protected VMSnapshotDao _vmSnapshotDao;", "modifier": "@Inject\n    protected", "type": "VMSnapshotDao", "declarator": "_vmSnapshotDao", "var_name": "_vmSnapshotDao"}, {"original_string": "@Inject\n    protected RulesManager rulesMgr;", "modifier": "@Inject\n    protected", "type": "RulesManager", "declarator": "rulesMgr", "var_name": "rulesMgr"}, {"original_string": "@Inject\n    protected AffinityGroupVMMapDao _affinityGroupVMMapDao;", "modifier": "@Inject\n    protected", "type": "AffinityGroupVMMapDao", "declarator": "_affinityGroupVMMapDao", "var_name": "_affinityGroupVMMapDao"}, {"original_string": "@Inject\n    protected VGPUTypesDao _vgpuTypesDao;", "modifier": "@Inject\n    protected", "type": "VGPUTypesDao", "declarator": "_vgpuTypesDao", "var_name": "_vgpuTypesDao"}, {"original_string": "@Inject\n    protected EntityManager _entityMgr;", "modifier": "@Inject\n    protected", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    protected GuestOSCategoryDao _guestOSCategoryDao;", "modifier": "@Inject\n    protected", "type": "GuestOSCategoryDao", "declarator": "_guestOSCategoryDao", "var_name": "_guestOSCategoryDao"}, {"original_string": "@Inject\n    protected GuestOSDao _guestOSDao = null;", "modifier": "@Inject\n    protected", "type": "GuestOSDao", "declarator": "_guestOSDao = null", "var_name": "_guestOSDao"}, {"original_string": "@Inject\n    protected UserVmDetailsDao _vmDetailsDao;", "modifier": "@Inject\n    protected", "type": "UserVmDetailsDao", "declarator": "_vmDetailsDao", "var_name": "_vmDetailsDao"}, {"original_string": "@Inject\n    ServiceOfferingDao _serviceOfferingDao = null;", "modifier": "@Inject", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao = null", "var_name": "_serviceOfferingDao"}, {"original_string": "@Inject\n    ConfigDepot _configDepot;", "modifier": "@Inject", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "protected List<HostAllocator> hostAllocators;", "modifier": "protected", "type": "List<HostAllocator>", "declarator": "hostAllocators", "var_name": "hostAllocators"}, {"original_string": "protected List<StoragePoolAllocator> _storagePoolAllocators;", "modifier": "protected", "type": "List<StoragePoolAllocator>", "declarator": "_storagePoolAllocators", "var_name": "_storagePoolAllocators"}, {"original_string": "@Inject\n    protected ResourceManager _resourceMgr;", "modifier": "@Inject\n    protected", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Inject\n    protected VMSnapshotManager _vmSnapshotMgr = null;", "modifier": "@Inject\n    protected", "type": "VMSnapshotManager", "declarator": "_vmSnapshotMgr = null", "var_name": "_vmSnapshotMgr"}, {"original_string": "@Inject\n    protected ClusterDetailsDao _clusterDetailsDao;", "modifier": "@Inject\n    protected", "type": "ClusterDetailsDao", "declarator": "_clusterDetailsDao", "var_name": "_clusterDetailsDao"}, {"original_string": "@Inject\n    protected UserVmDetailsDao _uservmDetailsDao;", "modifier": "@Inject\n    protected", "type": "UserVmDetailsDao", "declarator": "_uservmDetailsDao", "var_name": "_uservmDetailsDao"}, {"original_string": "@Inject\n    protected ConfigurationDao _configDao;", "modifier": "@Inject\n    protected", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    VolumeOrchestrationService volumeMgr;", "modifier": "@Inject", "type": "VolumeOrchestrationService", "declarator": "volumeMgr", "var_name": "volumeMgr"}, {"original_string": "@Inject\n    DeploymentPlanningManager _dpMgr;", "modifier": "@Inject", "type": "DeploymentPlanningManager", "declarator": "_dpMgr", "var_name": "_dpMgr"}, {"original_string": "@Inject\n    protected MessageBus _messageBus;", "modifier": "@Inject\n    protected", "type": "MessageBus", "declarator": "_messageBus", "var_name": "_messageBus"}, {"original_string": "@Inject\n    protected VirtualMachinePowerStateSync _syncMgr;", "modifier": "@Inject\n    protected", "type": "VirtualMachinePowerStateSync", "declarator": "_syncMgr", "var_name": "_syncMgr"}, {"original_string": "@Inject\n    protected VmWorkJobDao _workJobDao;", "modifier": "@Inject\n    protected", "type": "VmWorkJobDao", "declarator": "_workJobDao", "var_name": "_workJobDao"}, {"original_string": "@Inject\n    protected AsyncJobManager _jobMgr;", "modifier": "@Inject\n    protected", "type": "AsyncJobManager", "declarator": "_jobMgr", "var_name": "_jobMgr"}, {"original_string": "VmWorkJobHandlerProxy _jobHandlerProxy = new VmWorkJobHandlerProxy(this);", "modifier": "", "type": "VmWorkJobHandlerProxy", "declarator": "_jobHandlerProxy = new VmWorkJobHandlerProxy(this)", "var_name": "_jobHandlerProxy"}, {"original_string": "Map<VirtualMachine.Type, VirtualMachineGuru> _vmGurus = new HashMap<>();", "modifier": "", "type": "Map<VirtualMachine.Type, VirtualMachineGuru>", "declarator": "_vmGurus = new HashMap<>()", "var_name": "_vmGurus"}, {"original_string": "protected StateMachine2<State, VirtualMachine.Event, VirtualMachine> _stateMachine;", "modifier": "protected", "type": "StateMachine2<State, VirtualMachine.Event, VirtualMachine>", "declarator": "_stateMachine", "var_name": "_stateMachine"}, {"original_string": "static final ConfigKey<Integer> StartRetry = new ConfigKey<>(\"Advanced\", Integer.class, \"start.retry\", \"10\",\n            \"Number of times to retry create and start commands\", true);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "StartRetry = new ConfigKey<>(\"Advanced\", Integer.class, \"start.retry\", \"10\",\n            \"Number of times to retry create and start commands\", true)", "var_name": "StartRetry"}, {"original_string": "static final ConfigKey<Integer> VmOpWaitInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"vm.op.wait.interval\", \"120\",\n            \"Time (in seconds) to wait before checking if a previous operation has succeeded\", true);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "VmOpWaitInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"vm.op.wait.interval\", \"120\",\n            \"Time (in seconds) to wait before checking if a previous operation has succeeded\", true)", "var_name": "VmOpWaitInterval"}, {"original_string": "static final ConfigKey<Integer> VmOpLockStateRetry = new ConfigKey<>(\"Advanced\", Integer.class, \"vm.op.lock.state.retry\", \"5\",\n            \"Times to retry locking the state of a VM for operations, -1 means forever\", true);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "VmOpLockStateRetry = new ConfigKey<>(\"Advanced\", Integer.class, \"vm.op.lock.state.retry\", \"5\",\n            \"Times to retry locking the state of a VM for operations, -1 means forever\", true)", "var_name": "VmOpLockStateRetry"}, {"original_string": "static final ConfigKey<Long> VmOpCleanupInterval = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cleanup.interval\", \"86400\",\n            \"Interval to run the thread that cleans up the vm operations (in seconds)\", false);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmOpCleanupInterval = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cleanup.interval\", \"86400\",\n            \"Interval to run the thread that cleans up the vm operations (in seconds)\", false)", "var_name": "VmOpCleanupInterval"}, {"original_string": "static final ConfigKey<Long> VmOpCleanupWait = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cleanup.wait\", \"3600\",\n            \"Time (in seconds) to wait before cleanuping up any vm work items\", true);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmOpCleanupWait = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cleanup.wait\", \"3600\",\n            \"Time (in seconds) to wait before cleanuping up any vm work items\", true)", "var_name": "VmOpCleanupWait"}, {"original_string": "static final ConfigKey<Long> VmOpCancelInterval = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cancel.interval\", \"3600\",\n            \"Time (in seconds) to wait before cancelling a operation\", false);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmOpCancelInterval = new ConfigKey<>(\"Advanced\", Long.class, \"vm.op.cancel.interval\", \"3600\",\n            \"Time (in seconds) to wait before cancelling a operation\", false)", "var_name": "VmOpCancelInterval"}, {"original_string": "static final ConfigKey<Boolean> VmDestroyForcestop = new ConfigKey<>(\"Advanced\", Boolean.class, \"vm.destroy.forcestop\", \"false\",\n            \"On destroy, force-stop takes this value \", true);", "modifier": "static final", "type": "ConfigKey<Boolean>", "declarator": "VmDestroyForcestop = new ConfigKey<>(\"Advanced\", Boolean.class, \"vm.destroy.forcestop\", \"false\",\n            \"On destroy, force-stop takes this value \", true)", "var_name": "VmDestroyForcestop"}, {"original_string": "static final ConfigKey<Integer> ClusterDeltaSyncInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"sync.interval\", \"60\",\n            \"Cluster Delta sync interval in seconds\",\n            false);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "ClusterDeltaSyncInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"sync.interval\", \"60\",\n            \"Cluster Delta sync interval in seconds\",\n            false)", "var_name": "ClusterDeltaSyncInterval"}, {"original_string": "static final ConfigKey<Integer> ClusterVMMetaDataSyncInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"vmmetadata.sync.interval\", \"180\", \"Cluster VM metadata sync interval in seconds\",\n            false);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "ClusterVMMetaDataSyncInterval = new ConfigKey<>(\"Advanced\", Integer.class, \"vmmetadata.sync.interval\", \"180\", \"Cluster VM metadata sync interval in seconds\",\n            false)", "var_name": "ClusterVMMetaDataSyncInterval"}, {"original_string": "static final ConfigKey<Long> VmJobCheckInterval = new ConfigKey<>(\"Advanced\",\n            Long.class, \"vm.job.check.interval\", \"3000\",\n            \"Interval in milliseconds to check if the job is complete\", false);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmJobCheckInterval = new ConfigKey<>(\"Advanced\",\n            Long.class, \"vm.job.check.interval\", \"3000\",\n            \"Interval in milliseconds to check if the job is complete\", false)", "var_name": "VmJobCheckInterval"}, {"original_string": "static final ConfigKey<Long> VmJobTimeout = new ConfigKey<>(\"Advanced\",\n            Long.class, \"vm.job.timeout\", \"600000\",\n            \"Time in milliseconds to wait before attempting to cancel a job\", false);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmJobTimeout = new ConfigKey<>(\"Advanced\",\n            Long.class, \"vm.job.timeout\", \"600000\",\n            \"Time in milliseconds to wait before attempting to cancel a job\", false)", "var_name": "VmJobTimeout"}, {"original_string": "static final ConfigKey<Integer> VmJobStateReportInterval = new ConfigKey<>(\"Advanced\",\n            Integer.class, \"vm.job.report.interval\", \"60\",\n            \"Interval to send application level pings to make sure the connection is still working\", false);", "modifier": "static final", "type": "ConfigKey<Integer>", "declarator": "VmJobStateReportInterval = new ConfigKey<>(\"Advanced\",\n            Integer.class, \"vm.job.report.interval\", \"60\",\n            \"Interval to send application level pings to make sure the connection is still working\", false)", "var_name": "VmJobStateReportInterval"}, {"original_string": "ScheduledExecutorService _executor = null;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_executor = null", "var_name": "_executor"}, {"original_string": "protected long _nodeId;", "modifier": "protected", "type": "long", "declarator": "_nodeId", "var_name": "_nodeId"}], "methods": [{"identifier": "getHostAllocators", "parameters": "()", "modifiers": "public", "return": "List<HostAllocator>", "signature": "List<HostAllocator> getHostAllocators()", "full_signature": "public List<HostAllocator> getHostAllocators()", "class_method_signature": "VirtualMachineManagerImpl.getHostAllocators()", "testcase": false, "constructor": false}, {"identifier": "setHostAllocators", "parameters": "(final List<HostAllocator> hostAllocators)", "modifiers": "public", "return": "void", "signature": "void setHostAllocators(final List<HostAllocator> hostAllocators)", "full_signature": "public void setHostAllocators(final List<HostAllocator> hostAllocators)", "class_method_signature": "VirtualMachineManagerImpl.setHostAllocators(final List<HostAllocator> hostAllocators)", "testcase": false, "constructor": false}, {"identifier": "registerGuru", "parameters": "(final VirtualMachine.Type type, final VirtualMachineGuru guru)", "modifiers": "@Override public", "return": "void", "signature": "void registerGuru(final VirtualMachine.Type type, final VirtualMachineGuru guru)", "full_signature": "@Override public void registerGuru(final VirtualMachine.Type type, final VirtualMachineGuru guru)", "class_method_signature": "VirtualMachineManagerImpl.registerGuru(final VirtualMachine.Type type, final VirtualMachineGuru guru)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final DiskOfferingInfo rootDiskOfferingInfo, final List<DiskOfferingInfo> dataDiskOfferings,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> auxiliaryNetworks, final DeploymentPlan plan, final HypervisorType hyperType)", "modifiers": "@Override @DB public", "return": "void", "signature": "void allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final DiskOfferingInfo rootDiskOfferingInfo, final List<DiskOfferingInfo> dataDiskOfferings,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> auxiliaryNetworks, final DeploymentPlan plan, final HypervisorType hyperType)", "full_signature": "@Override @DB public void allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final DiskOfferingInfo rootDiskOfferingInfo, final List<DiskOfferingInfo> dataDiskOfferings,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> auxiliaryNetworks, final DeploymentPlan plan, final HypervisorType hyperType)", "class_method_signature": "VirtualMachineManagerImpl.allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final DiskOfferingInfo rootDiskOfferingInfo, final List<DiskOfferingInfo> dataDiskOfferings,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> auxiliaryNetworks, final DeploymentPlan plan, final HypervisorType hyperType)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final DeploymentPlan plan, final HypervisorType hyperType)", "modifiers": "@Override public", "return": "void", "signature": "void allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final DeploymentPlan plan, final HypervisorType hyperType)", "full_signature": "@Override public void allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final DeploymentPlan plan, final HypervisorType hyperType)", "class_method_signature": "VirtualMachineManagerImpl.allocate(final String vmInstanceName, final VirtualMachineTemplate template, final ServiceOffering serviceOffering,\n                         final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final DeploymentPlan plan, final HypervisorType hyperType)", "testcase": false, "constructor": false}, {"identifier": "getVmGuru", "parameters": "(final VirtualMachine vm)", "modifiers": "private", "return": "VirtualMachineGuru", "signature": "VirtualMachineGuru getVmGuru(final VirtualMachine vm)", "full_signature": "private VirtualMachineGuru getVmGuru(final VirtualMachine vm)", "class_method_signature": "VirtualMachineManagerImpl.getVmGuru(final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "expunge", "parameters": "(final String vmUuid)", "modifiers": "@Override public", "return": "void", "signature": "void expunge(final String vmUuid)", "full_signature": "@Override public void expunge(final String vmUuid)", "class_method_signature": "VirtualMachineManagerImpl.expunge(final String vmUuid)", "testcase": false, "constructor": false}, {"identifier": "advanceExpunge", "parameters": "(final String vmUuid)", "modifiers": "@Override public", "return": "void", "signature": "void advanceExpunge(final String vmUuid)", "full_signature": "@Override public void advanceExpunge(final String vmUuid)", "class_method_signature": "VirtualMachineManagerImpl.advanceExpunge(final String vmUuid)", "testcase": false, "constructor": false}, {"identifier": "advanceExpunge", "parameters": "(VMInstanceVO vm)", "modifiers": "protected", "return": "void", "signature": "void advanceExpunge(VMInstanceVO vm)", "full_signature": "protected void advanceExpunge(VMInstanceVO vm)", "class_method_signature": "VirtualMachineManagerImpl.advanceExpunge(VMInstanceVO vm)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "VirtualMachineManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "VirtualMachineManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> xmlParams)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> xmlParams)", "full_signature": "@Override public boolean configure(final String name, final Map<String, Object> xmlParams)", "class_method_signature": "VirtualMachineManagerImpl.configure(final String name, final Map<String, Object> xmlParams)", "testcase": false, "constructor": false}, {"identifier": "VirtualMachineManagerImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " VirtualMachineManagerImpl()", "full_signature": "protected  VirtualMachineManagerImpl()", "class_method_signature": "VirtualMachineManagerImpl.VirtualMachineManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "modifiers": "@Override public", "return": "void", "signature": "void start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "full_signature": "@Override public void start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "class_method_signature": "VirtualMachineManagerImpl.start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "modifiers": "@Override public", "return": "void", "signature": "void start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "full_signature": "@Override public void start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.start(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "checkWorkItems", "parameters": "(final VMInstanceVO vm, final State state)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkWorkItems(final VMInstanceVO vm, final State state)", "full_signature": "protected boolean checkWorkItems(final VMInstanceVO vm, final State state)", "class_method_signature": "VirtualMachineManagerImpl.checkWorkItems(final VMInstanceVO vm, final State state)", "testcase": false, "constructor": false}, {"identifier": "changeToStartState", "parameters": "(final VirtualMachineGuru vmGuru, final VMInstanceVO vm, final User caller,\n                                                                                     final Account account)", "modifiers": "@DB protected", "return": "Ternary<VMInstanceVO, ReservationContext, ItWorkVO>", "signature": "Ternary<VMInstanceVO, ReservationContext, ItWorkVO> changeToStartState(final VirtualMachineGuru vmGuru, final VMInstanceVO vm, final User caller,\n                                                                                     final Account account)", "full_signature": "@DB protected Ternary<VMInstanceVO, ReservationContext, ItWorkVO> changeToStartState(final VirtualMachineGuru vmGuru, final VMInstanceVO vm, final User caller,\n                                                                                     final Account account)", "class_method_signature": "VirtualMachineManagerImpl.changeToStartState(final VirtualMachineGuru vmGuru, final VMInstanceVO vm, final User caller,\n                                                                                     final Account account)", "testcase": false, "constructor": false}, {"identifier": "changeState", "parameters": "(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step)", "modifiers": "protected", "return": "boolean", "signature": "boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step)", "full_signature": "protected boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step)", "class_method_signature": "VirtualMachineManagerImpl.changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step)", "testcase": false, "constructor": false}, {"identifier": "areAffinityGroupsAssociated", "parameters": "(final VirtualMachineProfile vmProfile)", "modifiers": "protected", "return": "boolean", "signature": "boolean areAffinityGroupsAssociated(final VirtualMachineProfile vmProfile)", "full_signature": "protected boolean areAffinityGroupsAssociated(final VirtualMachineProfile vmProfile)", "class_method_signature": "VirtualMachineManagerImpl.areAffinityGroupsAssociated(final VirtualMachineProfile vmProfile)", "testcase": false, "constructor": false}, {"identifier": "advanceStart", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlanner planner)", "modifiers": "@Override public", "return": "void", "signature": "void advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlanner planner)", "full_signature": "@Override public void advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "advanceStart", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "modifiers": "@Override public", "return": "void", "signature": "void advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "full_signature": "@Override public void advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.advanceStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStart", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "modifiers": "@Override public", "return": "void", "signature": "void orchestrateStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "full_signature": "@Override public void orchestrateStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStart(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params, final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "checkIfPlanIsDeployable", "parameters": "(final VMInstanceVO vm, final Long rootVolClusterId, final Long clusterIdSpecified)", "modifiers": "private", "return": "void", "signature": "void checkIfPlanIsDeployable(final VMInstanceVO vm, final Long rootVolClusterId, final Long clusterIdSpecified)", "full_signature": "private void checkIfPlanIsDeployable(final VMInstanceVO vm, final Long rootVolClusterId, final Long clusterIdSpecified)", "class_method_signature": "VirtualMachineManagerImpl.checkIfPlanIsDeployable(final VMInstanceVO vm, final Long rootVolClusterId, final Long clusterIdSpecified)", "testcase": false, "constructor": false}, {"identifier": "handlePath", "parameters": "(final DiskTO[] disks, final HypervisorType hypervisorType)", "modifiers": "private", "return": "void", "signature": "void handlePath(final DiskTO[] disks, final HypervisorType hypervisorType)", "full_signature": "private void handlePath(final DiskTO[] disks, final HypervisorType hypervisorType)", "class_method_signature": "VirtualMachineManagerImpl.handlePath(final DiskTO[] disks, final HypervisorType hypervisorType)", "testcase": false, "constructor": false}, {"identifier": "handlePath", "parameters": "(final DiskTO[] disks, final Map<String, String> iqnToPath)", "modifiers": "private", "return": "void", "signature": "void handlePath(final DiskTO[] disks, final Map<String, String> iqnToPath)", "full_signature": "private void handlePath(final DiskTO[] disks, final Map<String, String> iqnToPath)", "class_method_signature": "VirtualMachineManagerImpl.handlePath(final DiskTO[] disks, final Map<String, String> iqnToPath)", "testcase": false, "constructor": false}, {"identifier": "syncDiskChainChange", "parameters": "(final StartAnswer answer)", "modifiers": "private", "return": "void", "signature": "void syncDiskChainChange(final StartAnswer answer)", "full_signature": "private void syncDiskChainChange(final StartAnswer answer)", "class_method_signature": "VirtualMachineManagerImpl.syncDiskChainChange(final StartAnswer answer)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(final String vmUuid)", "modifiers": "@Override public", "return": "void", "signature": "void stop(final String vmUuid)", "full_signature": "@Override public void stop(final String vmUuid)", "class_method_signature": "VirtualMachineManagerImpl.stop(final String vmUuid)", "testcase": false, "constructor": false}, {"identifier": "getExecuteInSequence", "parameters": "(final HypervisorType hypervisorType)", "modifiers": "protected", "return": "boolean", "signature": "boolean getExecuteInSequence(final HypervisorType hypervisorType)", "full_signature": "protected boolean getExecuteInSequence(final HypervisorType hypervisorType)", "class_method_signature": "VirtualMachineManagerImpl.getExecuteInSequence(final HypervisorType hypervisorType)", "testcase": false, "constructor": false}, {"identifier": "sendStop", "parameters": "(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final boolean force, final boolean checkBeforeCleanup)", "modifiers": "protected", "return": "boolean", "signature": "boolean sendStop(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final boolean force, final boolean checkBeforeCleanup)", "full_signature": "protected boolean sendStop(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final boolean force, final boolean checkBeforeCleanup)", "class_method_signature": "VirtualMachineManagerImpl.sendStop(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final boolean force, final boolean checkBeforeCleanup)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final ItWorkVO work, final Event event, final boolean cleanUpEvenIfUnableToStop)", "modifiers": "protected", "return": "boolean", "signature": "boolean cleanup(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final ItWorkVO work, final Event event, final boolean cleanUpEvenIfUnableToStop)", "full_signature": "protected boolean cleanup(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final ItWorkVO work, final Event event, final boolean cleanUpEvenIfUnableToStop)", "class_method_signature": "VirtualMachineManagerImpl.cleanup(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final ItWorkVO work, final Event event, final boolean cleanUpEvenIfUnableToStop)", "testcase": false, "constructor": false}, {"identifier": "advanceStop", "parameters": "(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "modifiers": "@Override public", "return": "void", "signature": "void advanceStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "full_signature": "@Override public void advanceStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "class_method_signature": "VirtualMachineManagerImpl.advanceStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStop", "parameters": "(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "modifiers": "private", "return": "void", "signature": "void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "full_signature": "private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUnableToStop)", "testcase": false, "constructor": false}, {"identifier": "advanceStop", "parameters": "(final VMInstanceVO vm, final boolean cleanUpEvenIfUnableToStop)", "modifiers": "private", "return": "void", "signature": "void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnableToStop)", "full_signature": "private void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnableToStop)", "class_method_signature": "VirtualMachineManagerImpl.advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnableToStop)", "testcase": false, "constructor": false}, {"identifier": "setStateMachine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setStateMachine()", "full_signature": "private void setStateMachine()", "class_method_signature": "VirtualMachineManagerImpl.setStateMachine()", "testcase": false, "constructor": false}, {"identifier": "stateTransitTo", "parameters": "(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId)", "modifiers": "protected", "return": "boolean", "signature": "boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId)", "full_signature": "protected boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId)", "class_method_signature": "VirtualMachineManagerImpl.stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId)", "testcase": false, "constructor": false}, {"identifier": "stateTransitTo", "parameters": "(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stateTransitTo(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId)", "full_signature": "@Override public boolean stateTransitTo(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId)", "class_method_signature": "VirtualMachineManagerImpl.stateTransitTo(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(final String vmUuid)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(final String vmUuid)", "full_signature": "@Override public void destroy(final String vmUuid)", "class_method_signature": "VirtualMachineManagerImpl.destroy(final String vmUuid)", "testcase": false, "constructor": false}, {"identifier": "checkVmOnHost", "parameters": "(final VirtualMachine vm, final long hostId)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkVmOnHost(final VirtualMachine vm, final long hostId)", "full_signature": "protected boolean checkVmOnHost(final VirtualMachine vm, final long hostId)", "class_method_signature": "VirtualMachineManagerImpl.checkVmOnHost(final VirtualMachine vm, final long hostId)", "testcase": false, "constructor": false}, {"identifier": "storageMigration", "parameters": "(final String vmUuid, final StoragePool destPool)", "modifiers": "@Override public", "return": "void", "signature": "void storageMigration(final String vmUuid, final StoragePool destPool)", "full_signature": "@Override public void storageMigration(final String vmUuid, final StoragePool destPool)", "class_method_signature": "VirtualMachineManagerImpl.storageMigration(final String vmUuid, final StoragePool destPool)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStorageMigration", "parameters": "(final String vmUuid, final StoragePool destPool)", "modifiers": "private", "return": "void", "signature": "void orchestrateStorageMigration(final String vmUuid, final StoragePool destPool)", "full_signature": "private void orchestrateStorageMigration(final String vmUuid, final StoragePool destPool)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStorageMigration(final String vmUuid, final StoragePool destPool)", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(final String vmUuid, final long srcHostId, final DeployDestination dest)", "modifiers": "@Override public", "return": "void", "signature": "void migrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "full_signature": "@Override public void migrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.migrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrate", "parameters": "(final String vmUuid, final long srcHostId, final DeployDestination dest)", "modifiers": "private", "return": "void", "signature": "void orchestrateMigrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "full_signature": "private void orchestrateMigrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrate(final String vmUuid, final long srcHostId, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(final VMInstanceVO vm, final long srcHostId, final DeployDestination dest)", "modifiers": "protected", "return": "void", "signature": "void migrate(final VMInstanceVO vm, final long srcHostId, final DeployDestination dest)", "full_signature": "protected void migrate(final VMInstanceVO vm, final long srcHostId, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.migrate(final VMInstanceVO vm, final long srcHostId, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "getPoolListForVolumesForMigration", "parameters": "(final VirtualMachineProfile profile, final Host host, final Map<Long, Long> volumeToPool)", "modifiers": "private", "return": "Map<Volume, StoragePool>", "signature": "Map<Volume, StoragePool> getPoolListForVolumesForMigration(final VirtualMachineProfile profile, final Host host, final Map<Long, Long> volumeToPool)", "full_signature": "private Map<Volume, StoragePool> getPoolListForVolumesForMigration(final VirtualMachineProfile profile, final Host host, final Map<Long, Long> volumeToPool)", "class_method_signature": "VirtualMachineManagerImpl.getPoolListForVolumesForMigration(final VirtualMachineProfile profile, final Host host, final Map<Long, Long> volumeToPool)", "testcase": false, "constructor": false}, {"identifier": "moveVmToMigratingState", "parameters": "(final T vm, final Long hostId, final ItWorkVO work)", "modifiers": "private", "return": "void", "signature": "void moveVmToMigratingState(final T vm, final Long hostId, final ItWorkVO work)", "full_signature": "private void moveVmToMigratingState(final T vm, final Long hostId, final ItWorkVO work)", "class_method_signature": "VirtualMachineManagerImpl.moveVmToMigratingState(final T vm, final Long hostId, final ItWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "moveVmOutofMigratingStateOnSuccess", "parameters": "(final T vm, final Long hostId, final ItWorkVO work)", "modifiers": "private", "return": "void", "signature": "void moveVmOutofMigratingStateOnSuccess(final T vm, final Long hostId, final ItWorkVO work)", "full_signature": "private void moveVmOutofMigratingStateOnSuccess(final T vm, final Long hostId, final ItWorkVO work)", "class_method_signature": "VirtualMachineManagerImpl.moveVmOutofMigratingStateOnSuccess(final T vm, final Long hostId, final ItWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "migrateWithStorage", "parameters": "(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "modifiers": "@Override public", "return": "void", "signature": "void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "full_signature": "@Override public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "class_method_signature": "VirtualMachineManagerImpl.migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateWithStorage", "parameters": "(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "modifiers": "private", "return": "void", "signature": "void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "full_signature": "private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "testcase": false, "constructor": false}, {"identifier": "toVmTO", "parameters": "(final VirtualMachineProfile profile)", "modifiers": "@Override public", "return": "VirtualMachineTO", "signature": "VirtualMachineTO toVmTO(final VirtualMachineProfile profile)", "full_signature": "@Override public VirtualMachineTO toVmTO(final VirtualMachineProfile profile)", "class_method_signature": "VirtualMachineManagerImpl.toVmTO(final VirtualMachineProfile profile)", "testcase": false, "constructor": false}, {"identifier": "cancelWorkItems", "parameters": "(final long nodeId)", "modifiers": "protected", "return": "void", "signature": "void cancelWorkItems(final long nodeId)", "full_signature": "protected void cancelWorkItems(final long nodeId)", "class_method_signature": "VirtualMachineManagerImpl.cancelWorkItems(final long nodeId)", "testcase": false, "constructor": false}, {"identifier": "migrateAway", "parameters": "(final String vmUuid, final long srcHostId)", "modifiers": "@Override public", "return": "void", "signature": "void migrateAway(final String vmUuid, final long srcHostId)", "full_signature": "@Override public void migrateAway(final String vmUuid, final long srcHostId)", "class_method_signature": "VirtualMachineManagerImpl.migrateAway(final String vmUuid, final long srcHostId)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateAway", "parameters": "(final String vmUuid, final long srcHostId, final DeploymentPlanner planner)", "modifiers": "private", "return": "void", "signature": "void orchestrateMigrateAway(final String vmUuid, final long srcHostId, final DeploymentPlanner planner)", "full_signature": "private void orchestrateMigrateAway(final String vmUuid, final long srcHostId, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateAway(final String vmUuid, final long srcHostId, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "isVirtualMachineUpgradable", "parameters": "(final VirtualMachine vm, final ServiceOffering offering)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVirtualMachineUpgradable(final VirtualMachine vm, final ServiceOffering offering)", "full_signature": "@Override public boolean isVirtualMachineUpgradable(final VirtualMachine vm, final ServiceOffering offering)", "class_method_signature": "VirtualMachineManagerImpl.isVirtualMachineUpgradable(final VirtualMachine vm, final ServiceOffering offering)", "testcase": false, "constructor": false}, {"identifier": "reboot", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "modifiers": "@Override public", "return": "void", "signature": "void reboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "full_signature": "@Override public void reboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "class_method_signature": "VirtualMachineManagerImpl.reboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "advanceReboot", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "modifiers": "@Override public", "return": "void", "signature": "void advanceReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "full_signature": "@Override public void advanceReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "class_method_signature": "VirtualMachineManagerImpl.advanceReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "orchestrateReboot", "parameters": "(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "modifiers": "private", "return": "void", "signature": "void orchestrateReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "full_signature": "private void orchestrateReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateReboot(final String vmUuid, final Map<VirtualMachineProfile.Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(final VirtualMachine vm)", "modifiers": "public", "return": "Command", "signature": "Command cleanup(final VirtualMachine vm)", "full_signature": "public Command cleanup(final VirtualMachine vm)", "class_method_signature": "VirtualMachineManagerImpl.cleanup(final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(final String vmName)", "modifiers": "public", "return": "Command", "signature": "Command cleanup(final String vmName)", "full_signature": "public Command cleanup(final String vmName)", "class_method_signature": "VirtualMachineManagerImpl.cleanup(final String vmName)", "testcase": false, "constructor": false}, {"identifier": "syncVMMetaData", "parameters": "(final Map<String, String> vmMetadatum)", "modifiers": "public", "return": "void", "signature": "void syncVMMetaData(final Map<String, String> vmMetadatum)", "full_signature": "public void syncVMMetaData(final Map<String, String> vmMetadatum)", "class_method_signature": "VirtualMachineManagerImpl.syncVMMetaData(final Map<String, String> vmMetadatum)", "testcase": false, "constructor": false}, {"identifier": "updateVmMetaData", "parameters": "(final Long vmId, final String platform)", "modifiers": "private", "return": "void", "signature": "void updateVmMetaData(final Long vmId, final String platform)", "full_signature": "private void updateVmMetaData(final Long vmId, final String platform)", "class_method_signature": "VirtualMachineManagerImpl.updateVmMetaData(final Long vmId, final String platform)", "testcase": false, "constructor": false}, {"identifier": "ensureVmRunningContext", "parameters": "(final long hostId, VMInstanceVO vm, final Event cause)", "modifiers": "private", "return": "void", "signature": "void ensureVmRunningContext(final long hostId, VMInstanceVO vm, final Event cause)", "full_signature": "private void ensureVmRunningContext(final long hostId, VMInstanceVO vm, final Event cause)", "class_method_signature": "VirtualMachineManagerImpl.ensureVmRunningContext(final long hostId, VMInstanceVO vm, final Event cause)", "testcase": false, "constructor": false}, {"identifier": "isRecurring", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRecurring()", "full_signature": "@Override public boolean isRecurring()", "class_method_signature": "VirtualMachineManagerImpl.isRecurring()", "testcase": false, "constructor": false}, {"identifier": "processAnswers", "parameters": "(final long agentId, final long seq, final Answer[] answers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "full_signature": "@Override public boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "class_method_signature": "VirtualMachineManagerImpl.processAnswers(final long agentId, final long seq, final Answer[] answers)", "testcase": false, "constructor": false}, {"identifier": "processTimeout", "parameters": "(final long agentId, final long seq)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processTimeout(final long agentId, final long seq)", "full_signature": "@Override public boolean processTimeout(final long agentId, final long seq)", "class_method_signature": "VirtualMachineManagerImpl.processTimeout(final long agentId, final long seq)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTimeout()", "full_signature": "@Override public int getTimeout()", "class_method_signature": "VirtualMachineManagerImpl.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "processCommands", "parameters": "(final long agentId, final long seq, final Command[] cmds)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processCommands(final long agentId, final long seq, final Command[] cmds)", "full_signature": "@Override public boolean processCommands(final long agentId, final long seq, final Command[] cmds)", "class_method_signature": "VirtualMachineManagerImpl.processCommands(final long agentId, final long seq, final Command[] cmds)", "testcase": false, "constructor": false}, {"identifier": "processControlCommand", "parameters": "(final long agentId, final AgentControlCommand cmd)", "modifiers": "@Override public", "return": "AgentControlAnswer", "signature": "AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "full_signature": "@Override public AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "class_method_signature": "VirtualMachineManagerImpl.processControlCommand(final long agentId, final AgentControlCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "processDisconnect", "parameters": "(final long agentId, final Status state)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processDisconnect(final long agentId, final Status state)", "full_signature": "@Override public boolean processDisconnect(final long agentId, final Status state)", "class_method_signature": "VirtualMachineManagerImpl.processDisconnect(final long agentId, final Status state)", "testcase": false, "constructor": false}, {"identifier": "processConnect", "parameters": "(final Host agent, final StartupCommand cmd, final boolean forRebalance)", "modifiers": "@Override public", "return": "void", "signature": "void processConnect(final Host agent, final StartupCommand cmd, final boolean forRebalance)", "full_signature": "@Override public void processConnect(final Host agent, final StartupCommand cmd, final boolean forRebalance)", "class_method_signature": "VirtualMachineManagerImpl.processConnect(final Host agent, final StartupCommand cmd, final boolean forRebalance)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(final long vmId)", "modifiers": "@Override public", "return": "VMInstanceVO", "signature": "VMInstanceVO findById(final long vmId)", "full_signature": "@Override public VMInstanceVO findById(final long vmId)", "class_method_signature": "VirtualMachineManagerImpl.findById(final long vmId)", "testcase": false, "constructor": false}, {"identifier": "checkIfCanUpgrade", "parameters": "(final VirtualMachine vmInstance, final ServiceOffering newServiceOffering)", "modifiers": "@Override public", "return": "void", "signature": "void checkIfCanUpgrade(final VirtualMachine vmInstance, final ServiceOffering newServiceOffering)", "full_signature": "@Override public void checkIfCanUpgrade(final VirtualMachine vmInstance, final ServiceOffering newServiceOffering)", "class_method_signature": "VirtualMachineManagerImpl.checkIfCanUpgrade(final VirtualMachine vmInstance, final ServiceOffering newServiceOffering)", "testcase": false, "constructor": false}, {"identifier": "upgradeVmDb", "parameters": "(final long vmId, final long serviceOfferingId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean upgradeVmDb(final long vmId, final long serviceOfferingId)", "full_signature": "@Override public boolean upgradeVmDb(final long vmId, final long serviceOfferingId)", "class_method_signature": "VirtualMachineManagerImpl.upgradeVmDb(final long vmId, final long serviceOfferingId)", "testcase": false, "constructor": false}, {"identifier": "addVmToNetwork", "parameters": "(final VirtualMachine vm, final Network network, final NicProfile requested)", "modifiers": "@Override public", "return": "NicProfile", "signature": "NicProfile addVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "full_signature": "@Override public NicProfile addVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "class_method_signature": "VirtualMachineManagerImpl.addVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "testcase": false, "constructor": false}, {"identifier": "orchestrateAddVmToNetwork", "parameters": "(final VirtualMachine vm, final Network network, final NicProfile requested)", "modifiers": "private", "return": "NicProfile", "signature": "NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "full_signature": "private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested)", "testcase": false, "constructor": false}, {"identifier": "toNicTO", "parameters": "(final NicProfile nic, final HypervisorType hypervisorType)", "modifiers": "@Override public", "return": "NicTO", "signature": "NicTO toNicTO(final NicProfile nic, final HypervisorType hypervisorType)", "full_signature": "@Override public NicTO toNicTO(final NicProfile nic, final HypervisorType hypervisorType)", "class_method_signature": "VirtualMachineManagerImpl.toNicTO(final NicProfile nic, final HypervisorType hypervisorType)", "testcase": false, "constructor": false}, {"identifier": "removeNicFromVm", "parameters": "(final VirtualMachine vm, final Nic nic)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeNicFromVm(final VirtualMachine vm, final Nic nic)", "full_signature": "@Override public boolean removeNicFromVm(final VirtualMachine vm, final Nic nic)", "class_method_signature": "VirtualMachineManagerImpl.removeNicFromVm(final VirtualMachine vm, final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "orchestrateRemoveNicFromVm", "parameters": "(final VirtualMachine vm, final Nic nic)", "modifiers": "private", "return": "boolean", "signature": "boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic)", "full_signature": "private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "removeVmFromNetwork", "parameters": "(final VirtualMachine vm, final Network network, final URI broadcastUri)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean removeVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "full_signature": "@Override @DB public boolean removeVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "class_method_signature": "VirtualMachineManagerImpl.removeVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "testcase": false, "constructor": false}, {"identifier": "orchestrateRemoveVmFromNetwork", "parameters": "(final VirtualMachine vm, final Network network, final URI broadcastUri)", "modifiers": "@DB private", "return": "boolean", "signature": "boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "full_signature": "@DB private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri)", "testcase": false, "constructor": false}, {"identifier": "findHostAndMigrate", "parameters": "(final String vmUuid, final Long newSvcOfferingId, final ExcludeList excludes)", "modifiers": "@Override public", "return": "void", "signature": "void findHostAndMigrate(final String vmUuid, final Long newSvcOfferingId, final ExcludeList excludes)", "full_signature": "@Override public void findHostAndMigrate(final String vmUuid, final Long newSvcOfferingId, final ExcludeList excludes)", "class_method_signature": "VirtualMachineManagerImpl.findHostAndMigrate(final String vmUuid, final Long newSvcOfferingId, final ExcludeList excludes)", "testcase": false, "constructor": false}, {"identifier": "migrateForScale", "parameters": "(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "modifiers": "@Override public", "return": "void", "signature": "void migrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "full_signature": "@Override public void migrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "class_method_signature": "VirtualMachineManagerImpl.migrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateForScale", "parameters": "(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "modifiers": "private", "return": "void", "signature": "void orchestrateMigrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "full_signature": "private void orchestrateMigrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateForScale(final String vmUuid, final long srcHostId, final DeployDestination dest, final Long oldSvcOfferingId)", "testcase": false, "constructor": false}, {"identifier": "plugNic", "parameters": "(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "modifiers": "public", "return": "boolean", "signature": "boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "full_signature": "public boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "unplugNic", "parameters": "(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "modifiers": "public", "return": "boolean", "signature": "boolean unplugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "full_signature": "public boolean unplugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.unplugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "reConfigureVm", "parameters": "(final String vmUuid, final ServiceOffering oldServiceOffering,\n                                      final boolean reconfiguringOnExistingHost)", "modifiers": "@Override public", "return": "VMInstanceVO", "signature": "VMInstanceVO reConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering,\n                                      final boolean reconfiguringOnExistingHost)", "full_signature": "@Override public VMInstanceVO reConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering,\n                                      final boolean reconfiguringOnExistingHost)", "class_method_signature": "VirtualMachineManagerImpl.reConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering,\n                                      final boolean reconfiguringOnExistingHost)", "testcase": false, "constructor": false}, {"identifier": "orchestrateReConfigureVm", "parameters": "(final String vmUuid, final ServiceOffering oldServiceOffering, final boolean reconfiguringOnExistingHost)", "modifiers": "private", "return": "VMInstanceVO", "signature": "VMInstanceVO orchestrateReConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering, final boolean reconfiguringOnExistingHost)", "full_signature": "private VMInstanceVO orchestrateReConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering, final boolean reconfiguringOnExistingHost)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateReConfigureVm(final String vmUuid, final ServiceOffering oldServiceOffering, final boolean reconfiguringOnExistingHost)", "testcase": false, "constructor": false}, {"identifier": "getConfigComponentName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getConfigComponentName()", "full_signature": "@Override public String getConfigComponentName()", "class_method_signature": "VirtualMachineManagerImpl.getConfigComponentName()", "testcase": false, "constructor": false}, {"identifier": "getConfigKeys", "parameters": "()", "modifiers": "@Override public", "return": "ConfigKey<?>[]", "signature": "ConfigKey<?>[] getConfigKeys()", "full_signature": "@Override public ConfigKey<?>[] getConfigKeys()", "class_method_signature": "VirtualMachineManagerImpl.getConfigKeys()", "testcase": false, "constructor": false}, {"identifier": "getStoragePoolAllocators", "parameters": "()", "modifiers": "public", "return": "List<StoragePoolAllocator>", "signature": "List<StoragePoolAllocator> getStoragePoolAllocators()", "full_signature": "public List<StoragePoolAllocator> getStoragePoolAllocators()", "class_method_signature": "VirtualMachineManagerImpl.getStoragePoolAllocators()", "testcase": false, "constructor": false}, {"identifier": "setStoragePoolAllocators", "parameters": "(final List<StoragePoolAllocator> storagePoolAllocators)", "modifiers": "@Inject public", "return": "void", "signature": "void setStoragePoolAllocators(final List<StoragePoolAllocator> storagePoolAllocators)", "full_signature": "@Inject public void setStoragePoolAllocators(final List<StoragePoolAllocator> storagePoolAllocators)", "class_method_signature": "VirtualMachineManagerImpl.setStoragePoolAllocators(final List<StoragePoolAllocator> storagePoolAllocators)", "testcase": false, "constructor": false}, {"identifier": "HandlePowerStateReport", "parameters": "(final String subject, final String senderAddress, final Object args)", "modifiers": "@MessageHandler(topic = Topics.VM_POWER_STATE) private", "return": "void", "signature": "void HandlePowerStateReport(final String subject, final String senderAddress, final Object args)", "full_signature": "@MessageHandler(topic = Topics.VM_POWER_STATE) private void HandlePowerStateReport(final String subject, final String senderAddress, final Object args)", "class_method_signature": "VirtualMachineManagerImpl.HandlePowerStateReport(final String subject, final String senderAddress, final Object args)", "testcase": false, "constructor": false}, {"identifier": "handlePowerOnReportWithNoPendingJobsOnVM", "parameters": "(final VMInstanceVO vm)", "modifiers": "private", "return": "void", "signature": "void handlePowerOnReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "full_signature": "private void handlePowerOnReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "class_method_signature": "VirtualMachineManagerImpl.handlePowerOnReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "testcase": false, "constructor": false}, {"identifier": "handlePowerOffReportWithNoPendingJobsOnVM", "parameters": "(final VMInstanceVO vm)", "modifiers": "private", "return": "void", "signature": "void handlePowerOffReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "full_signature": "private void handlePowerOffReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "class_method_signature": "VirtualMachineManagerImpl.handlePowerOffReportWithNoPendingJobsOnVM(final VMInstanceVO vm)", "testcase": false, "constructor": false}, {"identifier": "scanStalledVMInTransitionStateOnUpHost", "parameters": "(final long hostId)", "modifiers": "private", "return": "void", "signature": "void scanStalledVMInTransitionStateOnUpHost(final long hostId)", "full_signature": "private void scanStalledVMInTransitionStateOnUpHost(final long hostId)", "class_method_signature": "VirtualMachineManagerImpl.scanStalledVMInTransitionStateOnUpHost(final long hostId)", "testcase": false, "constructor": false}, {"identifier": "scanStalledVMInTransitionStateOnDisconnectedHosts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanStalledVMInTransitionStateOnDisconnectedHosts()", "full_signature": "private void scanStalledVMInTransitionStateOnDisconnectedHosts()", "class_method_signature": "VirtualMachineManagerImpl.scanStalledVMInTransitionStateOnDisconnectedHosts()", "testcase": false, "constructor": false}, {"identifier": "listStalledVMInTransitionStateOnUpHost", "parameters": "(final long hostId, final Date cutTime)", "modifiers": "private", "return": "List<Long>", "signature": "List<Long> listStalledVMInTransitionStateOnUpHost(final long hostId, final Date cutTime)", "full_signature": "private List<Long> listStalledVMInTransitionStateOnUpHost(final long hostId, final Date cutTime)", "class_method_signature": "VirtualMachineManagerImpl.listStalledVMInTransitionStateOnUpHost(final long hostId, final Date cutTime)", "testcase": false, "constructor": false}, {"identifier": "listVMInTransitionStateWithRecentReportOnUpHost", "parameters": "(final long hostId, final Date cutTime)", "modifiers": "private", "return": "List<Long>", "signature": "List<Long> listVMInTransitionStateWithRecentReportOnUpHost(final long hostId, final Date cutTime)", "full_signature": "private List<Long> listVMInTransitionStateWithRecentReportOnUpHost(final long hostId, final Date cutTime)", "class_method_signature": "VirtualMachineManagerImpl.listVMInTransitionStateWithRecentReportOnUpHost(final long hostId, final Date cutTime)", "testcase": false, "constructor": false}, {"identifier": "listStalledVMInTransitionStateOnDisconnectedHosts", "parameters": "(final Date cutTime)", "modifiers": "private", "return": "List<Long>", "signature": "List<Long> listStalledVMInTransitionStateOnDisconnectedHosts(final Date cutTime)", "full_signature": "private List<Long> listStalledVMInTransitionStateOnDisconnectedHosts(final Date cutTime)", "class_method_signature": "VirtualMachineManagerImpl.listStalledVMInTransitionStateOnDisconnectedHosts(final Date cutTime)", "testcase": false, "constructor": false}, {"identifier": "startVmThroughJobQueue", "parameters": "(final String vmUuid,\n                                                          final Map<VirtualMachineProfile.Param, Object> params,\n                                                          final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> startVmThroughJobQueue(final String vmUuid,\n                                                          final Map<VirtualMachineProfile.Param, Object> params,\n                                                          final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "full_signature": "public Outcome<VirtualMachine> startVmThroughJobQueue(final String vmUuid,\n                                                          final Map<VirtualMachineProfile.Param, Object> params,\n                                                          final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "class_method_signature": "VirtualMachineManagerImpl.startVmThroughJobQueue(final String vmUuid,\n                                                          final Map<VirtualMachineProfile.Param, Object> params,\n                                                          final DeploymentPlan planToDeploy, final DeploymentPlanner planner)", "testcase": false, "constructor": false}, {"identifier": "stopVmThroughJobQueue", "parameters": "(final String vmUuid, final boolean cleanup)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> stopVmThroughJobQueue(final String vmUuid, final boolean cleanup)", "full_signature": "public Outcome<VirtualMachine> stopVmThroughJobQueue(final String vmUuid, final boolean cleanup)", "class_method_signature": "VirtualMachineManagerImpl.stopVmThroughJobQueue(final String vmUuid, final boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "rebootVmThroughJobQueue", "parameters": "(final String vmUuid,\n                                                           final Map<VirtualMachineProfile.Param, Object> params)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> rebootVmThroughJobQueue(final String vmUuid,\n                                                           final Map<VirtualMachineProfile.Param, Object> params)", "full_signature": "public Outcome<VirtualMachine> rebootVmThroughJobQueue(final String vmUuid,\n                                                           final Map<VirtualMachineProfile.Param, Object> params)", "class_method_signature": "VirtualMachineManagerImpl.rebootVmThroughJobQueue(final String vmUuid,\n                                                           final Map<VirtualMachineProfile.Param, Object> params)", "testcase": false, "constructor": false}, {"identifier": "migrateVmThroughJobQueue", "parameters": "(final String vmUuid, final long srcHostId, final DeployDestination dest)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest)", "full_signature": "public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest)", "class_method_signature": "VirtualMachineManagerImpl.migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "migrateVmAwayThroughJobQueue", "parameters": "(final String vmUuid, final long srcHostId)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> migrateVmAwayThroughJobQueue(final String vmUuid, final long srcHostId)", "full_signature": "public Outcome<VirtualMachine> migrateVmAwayThroughJobQueue(final String vmUuid, final long srcHostId)", "class_method_signature": "VirtualMachineManagerImpl.migrateVmAwayThroughJobQueue(final String vmUuid, final long srcHostId)", "testcase": false, "constructor": false}, {"identifier": "migrateVmWithStorageThroughJobQueue", "parameters": "(\n            final String vmUuid, final long srcHostId, final long destHostId,\n            final Map<Long, Long> volumeToPool)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> migrateVmWithStorageThroughJobQueue(\n            final String vmUuid, final long srcHostId, final long destHostId,\n            final Map<Long, Long> volumeToPool)", "full_signature": "public Outcome<VirtualMachine> migrateVmWithStorageThroughJobQueue(\n            final String vmUuid, final long srcHostId, final long destHostId,\n            final Map<Long, Long> volumeToPool)", "class_method_signature": "VirtualMachineManagerImpl.migrateVmWithStorageThroughJobQueue(\n            final String vmUuid, final long srcHostId, final long destHostId,\n            final Map<Long, Long> volumeToPool)", "testcase": false, "constructor": false}, {"identifier": "migrateVmForScaleThroughJobQueue", "parameters": "(\n            final String vmUuid, final long srcHostId, final DeployDestination dest, final Long newSvcOfferingId)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> migrateVmForScaleThroughJobQueue(\n            final String vmUuid, final long srcHostId, final DeployDestination dest, final Long newSvcOfferingId)", "full_signature": "public Outcome<VirtualMachine> migrateVmForScaleThroughJobQueue(\n            final String vmUuid, final long srcHostId, final DeployDestination dest, final Long newSvcOfferingId)", "class_method_signature": "VirtualMachineManagerImpl.migrateVmForScaleThroughJobQueue(\n            final String vmUuid, final long srcHostId, final DeployDestination dest, final Long newSvcOfferingId)", "testcase": false, "constructor": false}, {"identifier": "migrateVmStorageThroughJobQueue", "parameters": "(\n            final String vmUuid, final StoragePool destPool)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> migrateVmStorageThroughJobQueue(\n            final String vmUuid, final StoragePool destPool)", "full_signature": "public Outcome<VirtualMachine> migrateVmStorageThroughJobQueue(\n            final String vmUuid, final StoragePool destPool)", "class_method_signature": "VirtualMachineManagerImpl.migrateVmStorageThroughJobQueue(\n            final String vmUuid, final StoragePool destPool)", "testcase": false, "constructor": false}, {"identifier": "addVmToNetworkThroughJobQueue", "parameters": "(\n            final VirtualMachine vm, final Network network, final NicProfile requested)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> addVmToNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final NicProfile requested)", "full_signature": "public Outcome<VirtualMachine> addVmToNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final NicProfile requested)", "class_method_signature": "VirtualMachineManagerImpl.addVmToNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final NicProfile requested)", "testcase": false, "constructor": false}, {"identifier": "removeNicFromVmThroughJobQueue", "parameters": "(\n            final VirtualMachine vm, final Nic nic)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> removeNicFromVmThroughJobQueue(\n            final VirtualMachine vm, final Nic nic)", "full_signature": "public Outcome<VirtualMachine> removeNicFromVmThroughJobQueue(\n            final VirtualMachine vm, final Nic nic)", "class_method_signature": "VirtualMachineManagerImpl.removeNicFromVmThroughJobQueue(\n            final VirtualMachine vm, final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "removeVmFromNetworkThroughJobQueue", "parameters": "(\n            final VirtualMachine vm, final Network network, final URI broadcastUri)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> removeVmFromNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final URI broadcastUri)", "full_signature": "public Outcome<VirtualMachine> removeVmFromNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final URI broadcastUri)", "class_method_signature": "VirtualMachineManagerImpl.removeVmFromNetworkThroughJobQueue(\n            final VirtualMachine vm, final Network network, final URI broadcastUri)", "testcase": false, "constructor": false}, {"identifier": "reconfigureVmThroughJobQueue", "parameters": "(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost)", "modifiers": "public", "return": "Outcome<VirtualMachine>", "signature": "Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost)", "full_signature": "public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost)", "class_method_signature": "VirtualMachineManagerImpl.reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStart", "parameters": "(final VmWorkStart work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateStart(final VmWorkStart work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateStart(final VmWorkStart work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStart(final VmWorkStart work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStop", "parameters": "(final VmWorkStop work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateStop(final VmWorkStop work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateStop(final VmWorkStop work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStop(final VmWorkStop work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrate", "parameters": "(final VmWorkMigrate work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateMigrate(final VmWorkMigrate work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateMigrate(final VmWorkMigrate work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrate(final VmWorkMigrate work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateAway", "parameters": "(final VmWorkMigrateAway work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateMigrateAway(final VmWorkMigrateAway work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateMigrateAway(final VmWorkMigrateAway work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateAway(final VmWorkMigrateAway work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateWithStorage", "parameters": "(final VmWorkMigrateWithStorage work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateMigrateWithStorage(final VmWorkMigrateWithStorage work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateMigrateWithStorage(final VmWorkMigrateWithStorage work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateWithStorage(final VmWorkMigrateWithStorage work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateForScale", "parameters": "(final VmWorkMigrateForScale work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateMigrateForScale(final VmWorkMigrateForScale work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateMigrateForScale(final VmWorkMigrateForScale work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateMigrateForScale(final VmWorkMigrateForScale work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateReboot", "parameters": "(final VmWorkReboot work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateReboot(final VmWorkReboot work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateReboot(final VmWorkReboot work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateReboot(final VmWorkReboot work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateAddVmToNetwork", "parameters": "(final VmWorkAddVmToNetwork work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateAddVmToNetwork(final VmWorkAddVmToNetwork work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateAddVmToNetwork(final VmWorkAddVmToNetwork work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateAddVmToNetwork(final VmWorkAddVmToNetwork work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateRemoveNicFromVm", "parameters": "(final VmWorkRemoveNicFromVm work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateRemoveNicFromVm(final VmWorkRemoveNicFromVm work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateRemoveNicFromVm(final VmWorkRemoveNicFromVm work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateRemoveNicFromVm(final VmWorkRemoveNicFromVm work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateRemoveVmFromNetwork", "parameters": "(final VmWorkRemoveVmFromNetwork work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateRemoveVmFromNetwork(final VmWorkRemoveVmFromNetwork work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateRemoveVmFromNetwork(final VmWorkRemoveVmFromNetwork work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateRemoveVmFromNetwork(final VmWorkRemoveVmFromNetwork work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateReconfigure", "parameters": "(final VmWorkReconfigure work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateReconfigure(final VmWorkReconfigure work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateReconfigure(final VmWorkReconfigure work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateReconfigure(final VmWorkReconfigure work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateStorageMigration", "parameters": "(final VmWorkStorageMigration work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateStorageMigration(final VmWorkStorageMigration work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateStorageMigration(final VmWorkStorageMigration work)", "class_method_signature": "VirtualMachineManagerImpl.orchestrateStorageMigration(final VmWorkStorageMigration work)", "testcase": false, "constructor": false}, {"identifier": "handleVmWorkJob", "parameters": "(final VmWork work)", "modifiers": "@Override public", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> handleVmWorkJob(final VmWork work)", "full_signature": "@Override public Pair<JobInfo.Status, String> handleVmWorkJob(final VmWork work)", "class_method_signature": "VirtualMachineManagerImpl.handleVmWorkJob(final VmWork work)", "testcase": false, "constructor": false}, {"identifier": "createPlaceHolderWork", "parameters": "(final long instanceId)", "modifiers": "private", "return": "VmWorkJobVO", "signature": "VmWorkJobVO createPlaceHolderWork(final long instanceId)", "full_signature": "private VmWorkJobVO createPlaceHolderWork(final long instanceId)", "class_method_signature": "VirtualMachineManagerImpl.createPlaceHolderWork(final long instanceId)", "testcase": false, "constructor": false}], "file": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java"}, "focal_method": {"identifier": "migrateWithStorage", "parameters": "(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)\n            throws ResourceUnavailableException, ConcurrentOperationException {\n\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            // avoid re-entrance\n\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmWithStorageThroughJobQueue(vmUuid, srcHostId, destHostId, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobException != null) {\n                if (jobException instanceof ResourceUnavailableException) {\n                    throw (ResourceUnavailableException) jobException;\n                } else if (jobException instanceof ConcurrentOperationException) {\n                    throw (ConcurrentOperationException) jobException;\n                } else if (jobException instanceof RuntimeException) {\n                    throw (RuntimeException) jobException;\n                } else if (jobException instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable) jobException);\n                }\n            }\n        }\n    }", "signature": "void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "full_signature": "@Override public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "class_method_signature": "VirtualMachineManagerImpl.migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)", "testcase": false, "constructor": false, "invocations": ["getCurrentExecutionContext", "isJobDispatchedBy", "findByUuid", "createPlaceHolderWork", "getId", "orchestrateMigrateWithStorage", "expunge", "getId", "migrateVmWithStorageThroughJobQueue", "get", "unmarshallResultObject", "getJob"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}