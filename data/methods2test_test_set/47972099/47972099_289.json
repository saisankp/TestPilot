{"test_class": {"identifier": "StreamMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamMapTest.java"}, "test_case": {"identifier": "testOpenClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOpenClose() throws Exception {\n\t\tStreamMap<String, String> operator = new StreamMap<String, String>(new TestOpenCloseMapFunction());\n\n\t\tOneInputStreamOperatorTestHarness<String, String> testHarness = new OneInputStreamOperatorTestHarness<String, String>(operator);\n\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello\", initialTime));\n\n\t\ttestHarness.close();\n\n\t\tAssert.assertTrue(\"RichFunction methods where not called.\", TestOpenCloseMapFunction.closeCalled);\n\t\tAssert.assertTrue(\"Output contains no elements.\", testHarness.getOutput().size() > 0);\n\t}", "signature": "void testOpenClose()", "full_signature": "@Test public void testOpenClose()", "class_method_signature": "StreamMapTest.testOpenClose()", "testcase": true, "constructor": false, "invocations": ["open", "processElement", "close", "assertTrue", "assertTrue", "size", "getOutput"]}, "focal_class": {"identifier": "StreamMap", "superclass": "extends AbstractUdfStreamOperator<OUT, MapFunction<IN, OUT>>", "interfaces": "implements OneInputStreamOperator<IN, OUT>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "StreamMap", "parameters": "(MapFunction<IN, OUT> mapper)", "modifiers": "public", "return": "", "signature": " StreamMap(MapFunction<IN, OUT> mapper)", "full_signature": "public  StreamMap(MapFunction<IN, OUT> mapper)", "class_method_signature": "StreamMap.StreamMap(MapFunction<IN, OUT> mapper)", "testcase": false, "constructor": true}, {"identifier": "processElement", "parameters": "(StreamRecord<IN> element)", "modifiers": "@Override public", "return": "void", "signature": "void processElement(StreamRecord<IN> element)", "full_signature": "@Override public void processElement(StreamRecord<IN> element)", "class_method_signature": "StreamMap.processElement(StreamRecord<IN> element)", "testcase": false, "constructor": false}, {"identifier": "processWatermark", "parameters": "(Watermark mark)", "modifiers": "@Override public", "return": "void", "signature": "void processWatermark(Watermark mark)", "full_signature": "@Override public void processWatermark(Watermark mark)", "class_method_signature": "StreamMap.processWatermark(Watermark mark)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamMap.java"}, "focal_method": {"identifier": "processElement", "parameters": "(StreamRecord<IN> element)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void processElement(StreamRecord<IN> element) throws Exception {\n\t\toutput.collect(element.replace(userFunction.map(element.getValue())));\n\t}", "signature": "void processElement(StreamRecord<IN> element)", "full_signature": "@Override public void processElement(StreamRecord<IN> element)", "class_method_signature": "StreamMap.processElement(StreamRecord<IN> element)", "testcase": false, "constructor": false, "invocations": ["collect", "replace", "map", "getValue"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}