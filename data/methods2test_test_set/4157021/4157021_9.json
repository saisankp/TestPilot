{"test_class": {"identifier": "AdministratorGeostoreClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AdministratorGeoStoreClient geoStoreClient;", "modifier": "", "type": "AdministratorGeoStoreClient", "declarator": "geoStoreClient", "var_name": "geoStoreClient"}, {"original_string": "GeoStoreClient geoStoreUserClient;", "modifier": "", "type": "GeoStoreClient", "declarator": "geoStoreUserClient", "var_name": "geoStoreUserClient"}, {"original_string": "private final static Logger LOGGER = Logger.getLogger(AdministratorGeostoreClientTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(AdministratorGeostoreClientTest.class)", "var_name": "LOGGER"}, {"original_string": "final String DEFAULTCATEGORYNAME = \"TestCategory1\";", "modifier": "final", "type": "String", "declarator": "DEFAULTCATEGORYNAME = \"TestCategory1\"", "var_name": "DEFAULTCATEGORYNAME"}, {"original_string": "final String KEY_STRING = \"stringAtt\";", "modifier": "final", "type": "String", "declarator": "KEY_STRING = \"stringAtt\"", "var_name": "KEY_STRING"}, {"original_string": "final String origString = \"OrigStringValue\";", "modifier": "final", "type": "String", "declarator": "origString = \"OrigStringValue\"", "var_name": "origString"}], "file": "src/modules/rest/client/src/test/java/it/geosolutions/geostore/services/rest/AdministratorGeostoreClientTest.java"}, "test_case": {"identifier": "updateSecurityRulesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateSecurityRulesTest() {\n        \n        // Create a group\n        UserGroup ug = new UserGroup();\n        ug.setGroupName(\"usergroupTest1\");\n        long gid = geoStoreClient.insertUserGroup(ug);\n        \n        UserGroup ug2 = new UserGroup();\n        ug2.setGroupName(\"unusedGroup\");\n        long gid2 = geoStoreClient.insertUserGroup(ug2);\n        \n        UserGroup anotherGroup = new UserGroup();\n        anotherGroup.setGroupName(\"anotherGroup\");\n        long anotherGid = geoStoreClient.insertUserGroup(anotherGroup);\n        \n        Set<UserGroup> ugroups = new HashSet<>();\n        ugroups.add(ug);\n        ugroups.add(anotherGroup);\n        \n        // Create 2 user\n        createUser(\"u1\", Role.USER, \"u1\");\n        createUser(\"u2\", Role.USER, \"u2\", ug, anotherGroup);\n                \n        GeoStoreClient u1Client = createUserClient(\"u1\", \"u1\");\n        GeoStoreClient u2Client = createUserClient(\"u2\", \"u2\");\n        \n        // Create a resource with the user \"user\". So user will be the owner\n        createUser(\"user\", Role.USER, \"user\");\n        createDefaultCategory();\n        ShortResource sr = createAResource();\n        ShortResource sr2 = createAResource();\n        \n        \n        // Since \"user\" is the owner the users\n        // \"u1\" and \"u2\" should not be allowed to READ or WRITE, because they are not the owner of the reosource, it belong to at least one group and the resource doesn't have any groups rule security\n        try{\n            u1Client.getResource(sr.getId(), true);\n            fail(\"Untrapped exception\");\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        try{\n            u2Client.getResource(sr.getId(), true);\n            fail(\"Untrapped exception\");\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        try{\n            u1Client.updateResource(sr.getId(), new RESTResource());\n            fail(\"Untrapped exception\");\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        try{\n            u2Client.updateResource(sr.getId(), new RESTResource());\n            fail(\"Untrapped exception\");\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        \n        // Update permissions for users belong to \"usergroupTest1\" (\"u1\") group\n        // The effect of this service call will be: \n        // 1) The resource will be added with a group rule on usergroupTest1\n        // 2) \"u2\" will have WRITE permission but not READ permissions\n        // 3) Nothing will change for \"u1\"\n        List<ShortResource> srl = new ArrayList<ShortResource>();\n        srl.add(sr);\n        ShortResourceList srll = new ShortResourceList(srl);\n        \n        ShortResourceList srlf = geoStoreClient.getAllShortResource(0, 1000);\n        assertEquals(2, srlf.getList().size());\n        geoStoreClient.updateSecurityRules(srll, gid, false, true);\n        geoStoreClient.updateSecurityRules(srll, gid2, false, false);\n        srlf = geoStoreClient.getAllShortResource(0, 1000);\n        assertEquals(2, srlf.getList().size());\n        \n        // READ shouldn't allowed, WRITE allowed\n        try{\n            u1Client.getResource(sr.getId(), true);\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        try{\n            u2Client.getResource(sr.getId(), true);\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        try{\n            u1Client.updateResource(sr.getId(), new RESTResource());\n        }\n        catch(UniformInterfaceException e){\n            assertEquals(403, e.getResponse().getStatus());\n        }\n\n        u2Client.updateResource(sr.getId(), new RESTResource());\n    }", "signature": "void updateSecurityRulesTest()", "full_signature": "@Test public void updateSecurityRulesTest()", "class_method_signature": "AdministratorGeostoreClientTest.updateSecurityRulesTest()", "testcase": true, "constructor": false, "invocations": ["setGroupName", "insertUserGroup", "setGroupName", "insertUserGroup", "setGroupName", "insertUserGroup", "add", "add", "createUser", "createUser", "createUserClient", "createUserClient", "createUser", "createDefaultCategory", "createAResource", "createAResource", "getResource", "getId", "fail", "assertEquals", "getStatus", "getResponse", "getResource", "getId", "fail", "assertEquals", "getStatus", "getResponse", "updateResource", "getId", "fail", "assertEquals", "getStatus", "getResponse", "updateResource", "getId", "fail", "assertEquals", "getStatus", "getResponse", "add", "getAllShortResource", "assertEquals", "size", "getList", "updateSecurityRules", "updateSecurityRules", "getAllShortResource", "assertEquals", "size", "getList", "getResource", "getId", "assertEquals", "getStatus", "getResponse", "getResource", "getId", "assertEquals", "getStatus", "getResponse", "updateResource", "getId", "assertEquals", "getStatus", "getResponse", "updateResource", "getId"]}, "focal_class": {"identifier": "AdministratorGeoStoreClient", "superclass": "extends GeoStoreClient", "interfaces": "", "fields": [], "methods": [{"identifier": "getUser", "parameters": "(long id)", "modifiers": "public", "return": "User", "signature": "User getUser(long id)", "full_signature": "public User getUser(long id)", "class_method_signature": "AdministratorGeoStoreClient.getUser(long id)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String name)", "modifiers": "public", "return": "User", "signature": "User getUser(String name)", "full_signature": "public User getUser(String name)", "class_method_signature": "AdministratorGeoStoreClient.getUser(String name)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(long id, Boolean includeAttributes)", "modifiers": "public", "return": "User", "signature": "User getUser(long id, Boolean includeAttributes)", "full_signature": "public User getUser(long id, Boolean includeAttributes)", "class_method_signature": "AdministratorGeoStoreClient.getUser(long id, Boolean includeAttributes)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "public", "return": "UserList", "signature": "UserList getUsers()", "full_signature": "public UserList getUsers()", "class_method_signature": "AdministratorGeoStoreClient.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "(Integer page, Integer entries)", "modifiers": "public", "return": "UserList", "signature": "UserList getUsers(Integer page, Integer entries)", "full_signature": "public UserList getUsers(Integer page, Integer entries)", "class_method_signature": "AdministratorGeoStoreClient.getUsers(Integer page, Integer entries)", "testcase": false, "constructor": false}, {"identifier": "getUserDetails", "parameters": "()", "modifiers": "public", "return": "User", "signature": "User getUserDetails()", "full_signature": "public User getUserDetails()", "class_method_signature": "AdministratorGeoStoreClient.getUserDetails()", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(User user)", "modifiers": "public", "return": "Long", "signature": "Long insert(User user)", "full_signature": "public Long insert(User user)", "class_method_signature": "AdministratorGeoStoreClient.insert(User user)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(Long id)", "modifiers": "public", "return": "void", "signature": "void deleteUser(Long id)", "full_signature": "public void deleteUser(Long id)", "class_method_signature": "AdministratorGeoStoreClient.deleteUser(Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Long id, User user)", "modifiers": "public", "return": "void", "signature": "void update(Long id, User user)", "full_signature": "public void update(Long id, User user)", "class_method_signature": "AdministratorGeoStoreClient.update(Long id, User user)", "testcase": false, "constructor": false}, {"identifier": "insertUserGroup", "parameters": "(UserGroup usergroup)", "modifiers": "public", "return": "long", "signature": "long insertUserGroup(UserGroup usergroup)", "full_signature": "public long insertUserGroup(UserGroup usergroup)", "class_method_signature": "AdministratorGeoStoreClient.insertUserGroup(UserGroup usergroup)", "testcase": false, "constructor": false}, {"identifier": "deleteUserGroup", "parameters": "(long usergroupId)", "modifiers": "public", "return": "void", "signature": "void deleteUserGroup(long usergroupId)", "full_signature": "public void deleteUserGroup(long usergroupId)", "class_method_signature": "AdministratorGeoStoreClient.deleteUserGroup(long usergroupId)", "testcase": false, "constructor": false}, {"identifier": "assignUserGroup", "parameters": "(long userId, long usergroupId)", "modifiers": "public", "return": "void", "signature": "void assignUserGroup(long userId, long usergroupId)", "full_signature": "public void assignUserGroup(long userId, long usergroupId)", "class_method_signature": "AdministratorGeoStoreClient.assignUserGroup(long userId, long usergroupId)", "testcase": false, "constructor": false}, {"identifier": "deassignUserGroup", "parameters": "(long userId, long usergroupId)", "modifiers": "public", "return": "void", "signature": "void deassignUserGroup(long userId, long usergroupId)", "full_signature": "public void deassignUserGroup(long userId, long usergroupId)", "class_method_signature": "AdministratorGeoStoreClient.deassignUserGroup(long userId, long usergroupId)", "testcase": false, "constructor": false}, {"identifier": "getUserGroup", "parameters": "(long usergroupId)", "modifiers": "public", "return": "RESTUserGroup", "signature": "RESTUserGroup getUserGroup(long usergroupId)", "full_signature": "public RESTUserGroup getUserGroup(long usergroupId)", "class_method_signature": "AdministratorGeoStoreClient.getUserGroup(long usergroupId)", "testcase": false, "constructor": false}, {"identifier": "getUserGroups", "parameters": "(Integer page, Integer entries, boolean all)", "modifiers": "public", "return": "UserGroupList", "signature": "UserGroupList getUserGroups(Integer page, Integer entries, boolean all)", "full_signature": "public UserGroupList getUserGroups(Integer page, Integer entries, boolean all)", "class_method_signature": "AdministratorGeoStoreClient.getUserGroups(Integer page, Integer entries, boolean all)", "testcase": false, "constructor": false}, {"identifier": "updateSecurityRules", "parameters": "(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "modifiers": "public", "return": "ShortResourceList", "signature": "ShortResourceList updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "full_signature": "public ShortResourceList updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "class_method_signature": "AdministratorGeoStoreClient.updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "testcase": false, "constructor": false}, {"identifier": "getUserGroup", "parameters": "(String name)", "modifiers": "public", "return": "RESTUserGroup", "signature": "RESTUserGroup getUserGroup(String name)", "full_signature": "public RESTUserGroup getUserGroup(String name)", "class_method_signature": "AdministratorGeoStoreClient.getUserGroup(String name)", "testcase": false, "constructor": false}], "file": "src/modules/rest/client/src/main/java/it/geosolutions/geostore/services/rest/AdministratorGeoStoreClient.java"}, "focal_method": {"identifier": "updateSecurityRules", "parameters": "(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "modifiers": "public", "return": "ShortResourceList", "body": "public ShortResourceList updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite) {\n        WebResource wr = getBaseWebResource(\"usergroups\",\"update_security_rules\", groupId, canRead, canWrite);\n        ShortResourceList updatedResources = wr.header(\"Content-Type\", MediaType.TEXT_XML)\n                .accept(MediaType.TEXT_XML).put(ShortResourceList.class, resourcesToSet);\n        return updatedResources;\n    }", "signature": "ShortResourceList updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "full_signature": "public ShortResourceList updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "class_method_signature": "AdministratorGeoStoreClient.updateSecurityRules(ShortResourceList resourcesToSet, Long groupId,\n            boolean canRead, boolean canWrite)", "testcase": false, "constructor": false, "invocations": ["getBaseWebResource", "put", "accept", "header"]}, "repository": {"repo_id": 4157021, "url": "https://github.com/geosolutions-it/geostore", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 19, "size": 1798, "license": "licensed"}}