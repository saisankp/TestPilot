{"test_class": {"identifier": "PageLabelUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/util/PageLabelUtilsTest.java"}, "test_case": {"identifier": "removeFirstPages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeFirstPages() throws IOException {\n        PDDocument doc = new DocBuilder().withPages(10)\n                .withPageLabelRange(0, \"r\")\n                .withPageLabelRange(2, \"D\")\n                .get();\n\n        removePages(doc, asList(1, 2), result -> {\n            assertPageLabelIndexesAre(result, 0);\n            assertPageLabelRangeIs(result, 0, \"D\");\n        });\n    }", "signature": "void removeFirstPages()", "full_signature": "@Test public void removeFirstPages()", "class_method_signature": "PageLabelUtilsTest.removeFirstPages()", "testcase": true, "constructor": false, "invocations": ["get", "withPageLabelRange", "withPageLabelRange", "withPages", "removePages", "asList", "assertPageLabelIndexesAre", "assertPageLabelRangeIs"]}, "focal_class": {"identifier": "PageLabelUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PageLabelUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PageLabelUtils.class)", "var_name": "LOG"}, {"original_string": "private static final Map<PdfLabelNumberingStyle, String> PAGE_NUMBERS_STYLES;", "modifier": "private static final", "type": "Map<PdfLabelNumberingStyle, String>", "declarator": "PAGE_NUMBERS_STYLES", "var_name": "PAGE_NUMBERS_STYLES"}], "methods": [{"identifier": "PageLabelUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PageLabelUtils()", "full_signature": "private  PageLabelUtils()", "class_method_signature": "PageLabelUtils.PageLabelUtils()", "testcase": false, "constructor": true}, {"identifier": "getLabels", "parameters": "(Map<Integer, PdfPageLabel> labels, int totalPages)", "modifiers": "public static", "return": "PDPageLabels", "signature": "PDPageLabels getLabels(Map<Integer, PdfPageLabel> labels, int totalPages)", "full_signature": "public static PDPageLabels getLabels(Map<Integer, PdfPageLabel> labels, int totalPages)", "class_method_signature": "PageLabelUtils.getLabels(Map<Integer, PdfPageLabel> labels, int totalPages)", "testcase": false, "constructor": false}, {"identifier": "removePages", "parameters": "(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "modifiers": "public static", "return": "PDPageLabels", "signature": "PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "full_signature": "public static PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "class_method_signature": "PageLabelUtils.removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/util/PageLabelUtils.java"}, "focal_method": {"identifier": "removePages", "parameters": "(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "modifiers": "public static", "return": "PDPageLabels", "body": "public static PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages) {\n        Map<Integer, PDPageLabelRange> labels = new TreeMap<>(pageLabels.getLabels());\n\n        List<Integer> pagesToRemoveSortedLastFirst = new ArrayList<>(pagesToRemove);\n        pagesToRemoveSortedLastFirst.sort(Collections.reverseOrder());\n\n        // go backwards from last to first\n        // why? otherwise pagesToRemove would need to be shifted -1 after each page removal\n        for(int pageToRemove : pagesToRemoveSortedLastFirst) {\n            // make a copy to avoid ConcurrentModificationException\n            Map<Integer, PDPageLabelRange> updatedLabels = new TreeMap<>();\n            // pagesToRemove are 1-based, indices 0-based\n            int pageIndex = pageToRemove - 1;\n\n            for(int key : labels.keySet()) {\n                if(key <= pageIndex) {\n                    // just copy over as is\n                    updatedLabels.put(key, labels.get(key));\n                } else if(key > pageIndex) {\n                    // shift index - 1\n                    int prevKey = key - 1;\n                    if (prevKey >= 0) {\n                        updatedLabels.put(prevKey, labels.get(key));\n                    }\n                }\n            }\n\n            // overwrite\n            labels = updatedLabels;\n        }\n\n        // calculate the new page total\n        int newTotalPages = totalPages - pagesToRemove.size();\n\n        PDPageLabels result = new PDPageLabels();\n        for(int index: labels.keySet()) {\n            // exclude the last label range, if index is larger that new total page num\n            if(index < newTotalPages) {\n                result.setLabelItem(index, labels.get(index));\n            }\n        }\n        return result;\n    }", "signature": "PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "full_signature": "public static PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "class_method_signature": "PageLabelUtils.removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages)", "testcase": false, "constructor": false, "invocations": ["getLabels", "sort", "reverseOrder", "keySet", "put", "get", "put", "get", "size", "keySet", "setLabelItem", "get"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}