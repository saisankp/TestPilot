{"test_class": {"identifier": "MemcacheClientWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MemcachedClient client;", "modifier": "private", "type": "MemcachedClient", "declarator": "client", "var_name": "client"}, {"original_string": "private MemcacheClientWrapper clientWrapper;", "modifier": "private", "type": "MemcacheClientWrapper", "declarator": "clientWrapper", "var_name": "clientWrapper"}], "file": "xmemcached-provider/src/test/java/com/google/code/ssm/providers/xmemcached/MemcacheClientWrapperTest.java"}, "test_case": {"identifier": "incrStringIntLongInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void incrStringIntLongInt() throws TimeoutException, InterruptedException, MemcachedException, CacheException {\n        EasyMock.expect(client.getOpTimeout()).andReturn(100L);\n        EasyMock.expect(client.incr(\"key1\", 1, 10L, 100L, 1000)).andReturn(2L);\n        EasyMock.replay(client);\n        assertEquals(2L, clientWrapper.incr(\"key1\", 1, 10L, 1000));\n        EasyMock.verify(client);\n    }", "signature": "void incrStringIntLongInt()", "full_signature": "@Test public void incrStringIntLongInt()", "class_method_signature": "MemcacheClientWrapperTest.incrStringIntLongInt()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getOpTimeout", "andReturn", "expect", "incr", "replay", "assertEquals", "incr", "verify"]}, "focal_class": {"identifier": "MemcacheClientWrapper", "superclass": "extends AbstractMemcacheClientWrapper", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MemcacheClientWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MemcacheClientWrapper.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<CacheTranscoder, Object> adapters = new HashMap<CacheTranscoder, Object>();", "modifier": "private final", "type": "Map<CacheTranscoder, Object>", "declarator": "adapters = new HashMap<CacheTranscoder, Object>()", "var_name": "adapters"}, {"original_string": "private final MemcachedClient memcachedClient;", "modifier": "private final", "type": "MemcachedClient", "declarator": "memcachedClient", "var_name": "memcachedClient"}], "methods": [{"identifier": "MemcacheClientWrapper", "parameters": "(final MemcachedClient memcachedClient)", "modifiers": "", "return": "", "signature": " MemcacheClientWrapper(final MemcachedClient memcachedClient)", "full_signature": "  MemcacheClientWrapper(final MemcachedClient memcachedClient)", "class_method_signature": "MemcacheClientWrapper.MemcacheClientWrapper(final MemcachedClient memcachedClient)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final String key, final int exp, final Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final String key, final int exp, final Object value)", "full_signature": "@Override public boolean add(final String key, final int exp, final Object value)", "class_method_signature": "MemcacheClientWrapper.add(final String key, final int exp, final Object value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "full_signature": "@Override public boolean add(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "class_method_signature": "MemcacheClientWrapper.add(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "testcase": false, "constructor": false}, {"identifier": "decr", "parameters": "(final String key, final int by)", "modifiers": "@Override public", "return": "long", "signature": "long decr(final String key, final int by)", "full_signature": "@Override public long decr(final String key, final int by)", "class_method_signature": "MemcacheClientWrapper.decr(final String key, final int by)", "testcase": false, "constructor": false}, {"identifier": "decr", "parameters": "(final String key, final int by, final long def)", "modifiers": "@Override public", "return": "long", "signature": "long decr(final String key, final int by, final long def)", "full_signature": "@Override public long decr(final String key, final int by, final long def)", "class_method_signature": "MemcacheClientWrapper.decr(final String key, final int by, final long def)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(final String key)", "full_signature": "@Override public boolean delete(final String key)", "class_method_signature": "MemcacheClientWrapper.delete(final String key)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "MemcacheClientWrapper.flush()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(final String key)", "full_signature": "@Override public Object get(final String key)", "class_method_signature": "MemcacheClientWrapper.get(final String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String key, final CacheTranscoder transcoder)", "modifiers": "@Override public", "return": "T", "signature": "T get(final String key, final CacheTranscoder transcoder)", "full_signature": "@Override public T get(final String key, final CacheTranscoder transcoder)", "class_method_signature": "MemcacheClientWrapper.get(final String key, final CacheTranscoder transcoder)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String key, final CacheTranscoder transcoder, final long timeout)", "modifiers": "@Override public", "return": "T", "signature": "T get(final String key, final CacheTranscoder transcoder, final long timeout)", "full_signature": "@Override public T get(final String key, final CacheTranscoder transcoder, final long timeout)", "class_method_signature": "MemcacheClientWrapper.get(final String key, final CacheTranscoder transcoder, final long timeout)", "testcase": false, "constructor": false}, {"identifier": "getAvailableServers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<SocketAddress>", "signature": "Collection<SocketAddress> getAvailableServers()", "full_signature": "@Override public Collection<SocketAddress> getAvailableServers()", "class_method_signature": "MemcacheClientWrapper.getAvailableServers()", "testcase": false, "constructor": false}, {"identifier": "getBulk", "parameters": "(final Collection<String> keys)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getBulk(final Collection<String> keys)", "full_signature": "@Override public Map<String, Object> getBulk(final Collection<String> keys)", "class_method_signature": "MemcacheClientWrapper.getBulk(final Collection<String> keys)", "testcase": false, "constructor": false}, {"identifier": "getBulk", "parameters": "(final Collection<String> keys, final CacheTranscoder transcoder)", "modifiers": "@Override public", "return": "Map<String, T>", "signature": "Map<String, T> getBulk(final Collection<String> keys, final CacheTranscoder transcoder)", "full_signature": "@Override public Map<String, T> getBulk(final Collection<String> keys, final CacheTranscoder transcoder)", "class_method_signature": "MemcacheClientWrapper.getBulk(final Collection<String> keys, final CacheTranscoder transcoder)", "testcase": false, "constructor": false}, {"identifier": "incr", "parameters": "(final String key, final int by)", "modifiers": "@Override public", "return": "long", "signature": "long incr(final String key, final int by)", "full_signature": "@Override public long incr(final String key, final int by)", "class_method_signature": "MemcacheClientWrapper.incr(final String key, final int by)", "testcase": false, "constructor": false}, {"identifier": "incr", "parameters": "(final String key, final int by, final long def)", "modifiers": "@Override public", "return": "long", "signature": "long incr(final String key, final int by, final long def)", "full_signature": "@Override public long incr(final String key, final int by, final long def)", "class_method_signature": "MemcacheClientWrapper.incr(final String key, final int by, final long def)", "testcase": false, "constructor": false}, {"identifier": "incr", "parameters": "(final String key, final int by, final long def, final int expiration)", "modifiers": "@Override public", "return": "long", "signature": "long incr(final String key, final int by, final long def, final int expiration)", "full_signature": "@Override public long incr(final String key, final int by, final long def, final int expiration)", "class_method_signature": "MemcacheClientWrapper.incr(final String key, final int by, final long def, final int expiration)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final String key, final int exp, final Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean set(final String key, final int exp, final Object value)", "full_signature": "@Override public boolean set(final String key, final int exp, final Object value)", "class_method_signature": "MemcacheClientWrapper.set(final String key, final int exp, final Object value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean set(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "full_signature": "@Override public boolean set(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "class_method_signature": "MemcacheClientWrapper.set(final String key, final int exp, final T value, final CacheTranscoder transcoder)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "MemcacheClientWrapper.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getTranscoder", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "CacheTranscoder", "signature": "CacheTranscoder getTranscoder()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public CacheTranscoder getTranscoder()", "class_method_signature": "MemcacheClientWrapper.getTranscoder()", "testcase": false, "constructor": false}, {"identifier": "getNativeClient", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getNativeClient()", "full_signature": "@Override public Object getNativeClient()", "class_method_signature": "MemcacheClientWrapper.getNativeClient()", "testcase": false, "constructor": false}, {"identifier": "getTranscoder", "parameters": "(final CacheTranscoder transcoder)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Transcoder<T>", "signature": "Transcoder<T> getTranscoder(final CacheTranscoder transcoder)", "full_signature": "@SuppressWarnings(\"unchecked\") private Transcoder<T> getTranscoder(final CacheTranscoder transcoder)", "class_method_signature": "MemcacheClientWrapper.getTranscoder(final CacheTranscoder transcoder)", "testcase": false, "constructor": false}], "file": "xmemcached-provider/src/main/java/com/google/code/ssm/providers/xmemcached/MemcacheClientWrapper.java"}, "focal_method": {"identifier": "incr", "parameters": "(final String key, final int by)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long incr(final String key, final int by) throws TimeoutException, CacheException {\n        try {\n            return memcachedClient.incr(key, by);\n        } catch (MemcachedException | InterruptedException e) {\n            throw new CacheException(e);\n        }\n    }", "signature": "long incr(final String key, final int by)", "full_signature": "@Override public long incr(final String key, final int by)", "class_method_signature": "MemcacheClientWrapper.incr(final String key, final int by)", "testcase": false, "constructor": false, "invocations": ["incr"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}