{"test_class": {"identifier": "NumericLoggingDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Numeric delegate;", "modifier": "private", "type": "Numeric", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private NumericLoggingDecorator decorator;", "modifier": "private", "type": "NumericLoggingDecorator", "declarator": "decorator", "var_name": "decorator"}], "file": "core/src/test/java/dk/alexandra/fresco/logging/arithmetic/NumericLoggingDecoratorTest.java"}, "test_case": {"identifier": "known", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void known() {\n    BigInteger firstArgument = mock(BigInteger.class);\n    decorator.known(firstArgument);\n    verify(delegate, times(1)).known(firstArgument);\n  }", "signature": "void known()", "full_signature": "@Test public void known()", "class_method_signature": "NumericLoggingDecoratorTest.known()", "testcase": true, "constructor": false, "invocations": ["mock", "known", "known", "verify", "times"]}, "focal_class": {"identifier": "NumericLoggingDecorator", "superclass": "", "interfaces": "implements Numeric, PerformanceLogger", "fields": [{"original_string": "public static final String ARITHMETIC_BASIC_MULT = \"MULT_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "ARITHMETIC_BASIC_MULT = \"MULT_COUNT\"", "var_name": "ARITHMETIC_BASIC_MULT"}, {"original_string": "public static final String ARITHMETIC_BASIC_ADD = \"ADD_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "ARITHMETIC_BASIC_ADD = \"ADD_COUNT\"", "var_name": "ARITHMETIC_BASIC_ADD"}, {"original_string": "public static final String ARITHMETIC_BASIC_SUB = \"SUB_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "ARITHMETIC_BASIC_SUB = \"SUB_COUNT\"", "var_name": "ARITHMETIC_BASIC_SUB"}, {"original_string": "public static final String ARITHMETIC_BASIC_BIT = \"BIT_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "ARITHMETIC_BASIC_BIT = \"BIT_COUNT\"", "var_name": "ARITHMETIC_BASIC_BIT"}, {"original_string": "public static final String ARITHMETIC_BASIC_RAND = \"RANDOM_ELEMENT_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "ARITHMETIC_BASIC_RAND = \"RANDOM_ELEMENT_COUNT\"", "var_name": "ARITHMETIC_BASIC_RAND"}, {"original_string": "private Numeric delegate;", "modifier": "private", "type": "Numeric", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private long addCount;", "modifier": "private", "type": "long", "declarator": "addCount", "var_name": "addCount"}, {"original_string": "private long subCount;", "modifier": "private", "type": "long", "declarator": "subCount", "var_name": "subCount"}, {"original_string": "private long bitCount;", "modifier": "private", "type": "long", "declarator": "bitCount", "var_name": "bitCount"}, {"original_string": "private long randElmCount;", "modifier": "private", "type": "long", "declarator": "randElmCount", "var_name": "randElmCount"}, {"original_string": "private long multCount;", "modifier": "private", "type": "long", "declarator": "multCount", "var_name": "multCount"}], "methods": [{"identifier": "NumericLoggingDecorator", "parameters": "(Numeric delegate)", "modifiers": "public", "return": "", "signature": " NumericLoggingDecorator(Numeric delegate)", "full_signature": "public  NumericLoggingDecorator(Numeric delegate)", "class_method_signature": "NumericLoggingDecorator.NumericLoggingDecorator(Numeric delegate)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(DRes<SInt> a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> add(DRes<SInt> a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> add(DRes<SInt> a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.add(DRes<SInt> a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(BigInteger a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> add(BigInteger a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> add(BigInteger a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.add(BigInteger a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(DRes<SInt> a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> sub(DRes<SInt> a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> sub(DRes<SInt> a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.sub(DRes<SInt> a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(BigInteger a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> sub(BigInteger a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> sub(BigInteger a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.sub(BigInteger a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(DRes<SInt> a, BigInteger b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> sub(DRes<SInt> a, BigInteger b)", "full_signature": "@Override public DRes<SInt> sub(DRes<SInt> a, BigInteger b)", "class_method_signature": "NumericLoggingDecorator.sub(DRes<SInt> a, BigInteger b)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(DRes<SInt> a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> mult(DRes<SInt> a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> mult(DRes<SInt> a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.mult(DRes<SInt> a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(BigInteger a, DRes<SInt> b)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> mult(BigInteger a, DRes<SInt> b)", "full_signature": "@Override public DRes<SInt> mult(BigInteger a, DRes<SInt> b)", "class_method_signature": "NumericLoggingDecorator.mult(BigInteger a, DRes<SInt> b)", "testcase": false, "constructor": false}, {"identifier": "randomBit", "parameters": "()", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> randomBit()", "full_signature": "@Override public DRes<SInt> randomBit()", "class_method_signature": "NumericLoggingDecorator.randomBit()", "testcase": false, "constructor": false}, {"identifier": "randomElement", "parameters": "()", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> randomElement()", "full_signature": "@Override public DRes<SInt> randomElement()", "class_method_signature": "NumericLoggingDecorator.randomElement()", "testcase": false, "constructor": false}, {"identifier": "known", "parameters": "(BigInteger value)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> known(BigInteger value)", "full_signature": "@Override public DRes<SInt> known(BigInteger value)", "class_method_signature": "NumericLoggingDecorator.known(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(BigInteger value, int inputParty)", "modifiers": "@Override public", "return": "DRes<SInt>", "signature": "DRes<SInt> input(BigInteger value, int inputParty)", "full_signature": "@Override public DRes<SInt> input(BigInteger value, int inputParty)", "class_method_signature": "NumericLoggingDecorator.input(BigInteger value, int inputParty)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(DRes<SInt> secretShare)", "modifiers": "@Override public", "return": "DRes<BigInteger>", "signature": "DRes<BigInteger> open(DRes<SInt> secretShare)", "full_signature": "@Override public DRes<BigInteger> open(DRes<SInt> secretShare)", "class_method_signature": "NumericLoggingDecorator.open(DRes<SInt> secretShare)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(DRes<SInt> secretShare, int outputParty)", "modifiers": "@Override public", "return": "DRes<BigInteger>", "signature": "DRes<BigInteger> open(DRes<SInt> secretShare, int outputParty)", "full_signature": "@Override public DRes<BigInteger> open(DRes<SInt> secretShare, int outputParty)", "class_method_signature": "NumericLoggingDecorator.open(DRes<SInt> secretShare, int outputParty)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "NumericLoggingDecorator.reset()", "testcase": false, "constructor": false}, {"identifier": "getLoggedValues", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> getLoggedValues()", "full_signature": "@Override public Map<String, Long> getLoggedValues()", "class_method_signature": "NumericLoggingDecorator.getLoggedValues()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/logging/arithmetic/NumericLoggingDecorator.java"}, "focal_method": {"identifier": "known", "parameters": "(BigInteger value)", "modifiers": "@Override public", "return": "DRes<SInt>", "body": "@Override\n  public DRes<SInt> known(BigInteger value) {\n    return this.delegate.known(value);\n  }", "signature": "DRes<SInt> known(BigInteger value)", "full_signature": "@Override public DRes<SInt> known(BigInteger value)", "class_method_signature": "NumericLoggingDecorator.known(BigInteger value)", "testcase": false, "constructor": false, "invocations": ["known"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}