{"test_class": {"identifier": "ShrtTest", "superclass": "", "interfaces": "", "fields": [], "file": "reflekt/src/test/java/io/advantageous/boon/primitive/ShrtTest.java"}, "test_case": {"identifier": "testSliceOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSliceOf() {\n        short[] array = Shrt.array((short) 0, (short) 1, (short) 2, (short) 3,\n                (short) 4, (short) 5, (short) 6);\n        short[] array2 = Shrt.sliceOf(array, 0, 100);\n        Shrt.equalsOrDie(array, array2);\n\n    }", "signature": "void testSliceOf()", "full_signature": "@Test public void testSliceOf()", "class_method_signature": "ShrtTest.testSliceOf()", "testcase": true, "constructor": false, "invocations": ["array", "sliceOf", "equalsOrDie"]}, "focal_class": {"identifier": "Shrt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "shorts", "parameters": "( short... array )", "modifiers": "public static", "return": "short[]", "signature": "short[] shorts( short... array )", "full_signature": "public static short[] shorts( short... array )", "class_method_signature": "Shrt.shorts( short... array )", "testcase": false, "constructor": false}, {"identifier": "grow", "parameters": "( short[] array, final int size )", "modifiers": "public static", "return": "short[]", "signature": "short[] grow( short[] array, final int size )", "full_signature": "public static short[] grow( short[] array, final int size )", "class_method_signature": "Shrt.grow( short[] array, final int size )", "testcase": false, "constructor": false}, {"identifier": "grow", "parameters": "( short[] array )", "modifiers": "public static", "return": "short[]", "signature": "short[] grow( short[] array )", "full_signature": "public static short[] grow( short[] array )", "class_method_signature": "Shrt.grow( short[] array )", "testcase": false, "constructor": false}, {"identifier": "shrink", "parameters": "( short[] array, int size )", "modifiers": "public static", "return": "short[]", "signature": "short[] shrink( short[] array, int size )", "full_signature": "public static short[] shrink( short[] array, int size )", "class_method_signature": "Shrt.shrink( short[] array, int size )", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "( short[] array )", "modifiers": "public static", "return": "short[]", "signature": "short[] compact( short[] array )", "full_signature": "public static short[] compact( short[] array )", "class_method_signature": "Shrt.compact( short[] array )", "testcase": false, "constructor": false}, {"identifier": "arrayOfShort", "parameters": "( final int size )", "modifiers": "public static", "return": "short[]", "signature": "short[] arrayOfShort( final int size )", "full_signature": "public static short[] arrayOfShort( final int size )", "class_method_signature": "Shrt.arrayOfShort( final int size )", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "( final short... array )", "modifiers": "public static", "return": "short[]", "signature": "short[] array( final short... array )", "full_signature": "public static short[] array( final short... array )", "class_method_signature": "Shrt.array( final short... array )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( short[] array )", "modifiers": "public static", "return": "int", "signature": "int len( short[] array )", "full_signature": "public static int len( short[] array )", "class_method_signature": "Shrt.len( short[] array )", "testcase": false, "constructor": false}, {"identifier": "lengthOf", "parameters": "( short[] array )", "modifiers": "public static", "return": "int", "signature": "int lengthOf( short[] array )", "full_signature": "public static int lengthOf( short[] array )", "class_method_signature": "Shrt.lengthOf( short[] array )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final short[] array, final int index )", "modifiers": "public static", "return": "short", "signature": "short idx( final short[] array, final int index )", "full_signature": "public static short idx( final short[] array, final int index )", "class_method_signature": "Shrt.idx( final short[] array, final int index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final short[] array, int index, short value )", "modifiers": "public static", "return": "void", "signature": "void idx( final short[] array, int index, short value )", "full_signature": "public static void idx( final short[] array, int index, short value )", "class_method_signature": "Shrt.idx( final short[] array, int index, short value )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( short[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] slc( short[] array, int startIndex, int endIndex )", "full_signature": "public static short[] slc( short[] array, int startIndex, int endIndex )", "class_method_signature": "Shrt.slc( short[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( short[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] sliceOf( short[] array, int startIndex, int endIndex )", "full_signature": "public static short[] sliceOf( short[] array, int startIndex, int endIndex )", "class_method_signature": "Shrt.sliceOf( short[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( short[] array, int startIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] slc( short[] array, int startIndex )", "full_signature": "public static short[] slc( short[] array, int startIndex )", "class_method_signature": "Shrt.slc( short[] array, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( short[] array, int startIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] sliceOf( short[] array, int startIndex )", "full_signature": "public static short[] sliceOf( short[] array, int startIndex )", "class_method_signature": "Shrt.sliceOf( short[] array, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "endSliceOf", "parameters": "( short[] array, int endIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] endSliceOf( short[] array, int endIndex )", "full_signature": "public static short[] endSliceOf( short[] array, int endIndex )", "class_method_signature": "Shrt.endSliceOf( short[] array, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( short[] array, int endIndex )", "modifiers": "public static", "return": "short[]", "signature": "short[] slcEnd( short[] array, int endIndex )", "full_signature": "public static short[] slcEnd( short[] array, int endIndex )", "class_method_signature": "Shrt.slcEnd( short[] array, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( short value, short[] array )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( short value, short[] array )", "full_signature": "public static boolean in( short value, short[] array )", "class_method_signature": "Shrt.in( short value, short[] array )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( short[] array )", "modifiers": "public static", "return": "short[]", "signature": "short[] copy( short[] array )", "full_signature": "public static short[] copy( short[] array )", "class_method_signature": "Shrt.copy( short[] array )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( short[] array, short v )", "modifiers": "public static", "return": "short[]", "signature": "short[] add( short[] array, short v )", "full_signature": "public static short[] add( short[] array, short v )", "class_method_signature": "Shrt.add( short[] array, short v )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( short[] array, short[] array2 )", "modifiers": "public static", "return": "short[]", "signature": "short[] add( short[] array, short[] array2 )", "full_signature": "public static short[] add( short[] array, short[] array2 )", "class_method_signature": "Shrt.add( short[] array, short[] array2 )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final short[] array, final int idx, final short v )", "modifiers": "public static", "return": "short[]", "signature": "short[] insert( final short[] array, final int idx, final short v )", "full_signature": "public static short[] insert( final short[] array, final int idx, final short v )", "class_method_signature": "Shrt.insert( final short[] array, final int idx, final short v )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final short[] array, final int fromIndex, final short[] values )", "modifiers": "public static", "return": "short[]", "signature": "short[] insert( final short[] array, final int fromIndex, final short[] values )", "full_signature": "public static short[] insert( final short[] array, final int fromIndex, final short[] values )", "class_method_signature": "Shrt.insert( final short[] array, final int fromIndex, final short[] values )", "testcase": false, "constructor": false}, {"identifier": "calculateIndex", "parameters": "( short[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateIndex( short[] array, int originalIndex )", "full_signature": "private static int calculateIndex( short[] array, int originalIndex )", "class_method_signature": "Shrt.calculateIndex( short[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "calculateEndIndex", "parameters": "( short[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateEndIndex( short[] array, int originalIndex )", "full_signature": "private static int calculateEndIndex( short[] array, int originalIndex )", "class_method_signature": "Shrt.calculateEndIndex( short[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final short[] array, Object object )", "modifiers": "public static", "return": "int", "signature": "int reduceBy( final short[] array, Object object )", "full_signature": "public static int reduceBy( final short[] array, Object object )", "class_method_signature": "Shrt.reduceBy( final short[] array, Object object )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(short[] expected, short[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOrDie(short[] expected, short[] got)", "full_signature": "public static boolean equalsOrDie(short[] expected, short[] got)", "class_method_signature": "Shrt.equalsOrDie(short[] expected, short[] got)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(short[] expected, short[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(short[] expected, short[] got)", "full_signature": "public static boolean equals(short[] expected, short[] got)", "class_method_signature": "Shrt.equals(short[] expected, short[] got)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/primitive/Shrt.java"}, "focal_method": {"identifier": "sliceOf", "parameters": "( short[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "short[]", "body": "public static short[] sliceOf( short[] array, int startIndex, int endIndex ) {\n\n        final int start = calculateIndex( array, startIndex );\n        final int end = calculateEndIndex( array, endIndex );\n        final int newLength = end - start;\n\n        if ( newLength < 0 ) {\n            throw new ArrayIndexOutOfBoundsException(\n                    String.format( \"start index %d, end index %d, length %d\",\n                            startIndex, endIndex, array.length )\n            );\n        }\n\n        short[] newArray = new short[ newLength ];\n        System.arraycopy( array, start, newArray, 0, newLength );\n        return newArray;\n    }", "signature": "short[] sliceOf( short[] array, int startIndex, int endIndex )", "full_signature": "public static short[] sliceOf( short[] array, int startIndex, int endIndex )", "class_method_signature": "Shrt.sliceOf( short[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false, "invocations": ["calculateIndex", "calculateEndIndex", "format", "arraycopy"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}