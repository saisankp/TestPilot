{"test_class": {"identifier": "TopTenControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TopTenController topTenController;", "modifier": "@Autowired\n    private", "type": "TopTenController", "declarator": "topTenController", "var_name": "topTenController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TopTenControllerTest.java"}, "test_case": {"identifier": "topTenLargestSuppliers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void topTenLargestSuppliers() throws Exception {\n        final List<Document> topTenLargestSuppliers = topTenController\n                .topTenLargestSuppliers(new YearFilterPagingRequest());\n\n\n        final Document first = topTenLargestSuppliers.get(0);\n        Assert.assertEquals(6000000d, first.get(TopTenController.Keys.TOTAL_AWARD_AMOUNT));\n        Assert.assertEquals(1, first.get(TopTenController.Keys.TOTAL_CONTRACTS));\n        Assert.assertEquals(\"E09000005\",\n                ((Collection) first.get(TopTenController.Keys.PROCURING_ENTITY_IDS)).iterator().next());\n        Assert.assertEquals(\"GB-COH-1234567845\", first.get(TopTenController.Keys.SUPPLIER_ID));\n        Assert.assertEquals(1, first.get(TopTenController.Keys.PROCURING_ENTITY_IDS_COUNT));\n\n        Assert.assertEquals(2, topTenLargestSuppliers.size());\n\n    }", "signature": "void topTenLargestSuppliers()", "full_signature": "@Test public void topTenLargestSuppliers()", "class_method_signature": "TopTenControllerTest.topTenLargestSuppliers()", "testcase": true, "constructor": false, "invocations": ["topTenLargestSuppliers", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "next", "iterator", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "TopTenController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "topTenLargestAwards", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the top ten largest active awards.\" + \" The amount is taken from the award.value field. The returned data will contain\" + \"the following fields: \" + \"awards.date, awards.suppliers.name, \" + \"awards.value.amount, awards.suppliers.name, planning.budget (if any)\") @RequestMapping(value = \"/api/topTenLargestAwards\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the top ten largest active awards.\" + \" The amount is taken from the award.value field. The returned data will contain\" + \"the following fields: \" + \"awards.date, awards.suppliers.name, \" + \"awards.value.amount, awards.suppliers.name, planning.budget (if any)\") @RequestMapping(value = \"/api/topTenLargestAwards\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestAwards(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "topTenLargestTenders", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns the top ten largest active tenders.\" + \" The amount is taken from the tender.value.amount field.\" + \" The returned data will contain\" + \"the following fields: \" + \"tender.date, tender.value.amount, tender.tenderPeriod, \" + \"tender.procuringEntity.name\") @RequestMapping(value = \"/api/topTenLargestTenders\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestTenders(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "topTenLargestSuppliers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TopTenController.java"}, "focal_method": {"identifier": "topTenLargestSuppliers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\"\n            + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\"\n            + \"Ids of the procuring entities from which they have received an award, and their count. \"\n            + \"All filters ally here, the year filter uses the awards.date field.\")\n    @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST,\n            RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        BasicDBObject project = new BasicDBObject();\n        project.put(Fields.UNDERSCORE_ID, 0);\n        project.put(MongoConstants.FieldNames.AWARDS_SUPPLIERS_ID, 1);\n        project.put(MongoConstants.FieldNames.AWARDS_VALUE_AMOUNT, 1);\n        project.put(MongoConstants.FieldNames.TENDER_PROCURING_ENTITY_ID, 1);\n\n        BasicDBObject group = new BasicDBObject();\n        group.put(Fields.UNDERSCORE_ID, ref(MongoConstants.FieldNames.AWARDS_SUPPLIERS_ID));\n        group.put(\n                Keys.TOTAL_AWARD_AMOUNT, new BasicDBObject(\"$sum\", ref(MongoConstants.FieldNames.AWARDS_VALUE_AMOUNT)));\n        group.put(Keys.TOTAL_CONTRACTS, new BasicDBObject(\"$sum\", 1));\n        group.put(\n                Keys.PROCURING_ENTITY_IDS,\n                new BasicDBObject(\"$addToSet\", ref(MongoConstants.FieldNames.TENDER_PROCURING_ENTITY_ID))\n        );\n\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.AWARDS_VALUE_AMOUNT).exists(true)\n                        .and(MongoConstants.FieldNames.AWARDS_STATUS)\n                        .is(Award.Status.active.toString())\n                        .andOperator(getDefaultFilterCriteria(filter))),\n                unwind(\"awards\"),\n                match(where(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())),\n                unwind(\"awards.suppliers\"),\n                match(getYearFilterCriteria(filter.awardFiltering(), MongoConstants.FieldNames.AWARDS_DATE)),\n                new CustomProjectionOperation(project),\n                new CustomGroupingOperation(group),\n                sort(Direction.DESC, Keys.TOTAL_AWARD_AMOUNT),\n                limit(10),\n                project().and(Fields.UNDERSCORE_ID).\n                        as(Keys.SUPPLIER_ID).\n                        andInclude(Keys.TOTAL_AWARD_AMOUNT, Keys.TOTAL_CONTRACTS, Keys.PROCURING_ENTITY_IDS)\n                        .andExclude(Fields.UNDERSCORE_ID)\n                        .and(Keys.PROCURING_ENTITY_IDS).size().as(Keys.PROCURING_ENTITY_IDS_COUNT)\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"This endpoint should return the following data for the Top 10 suppliers (by award value).\" + \"Returns supplier id, total awarded amount of all awarded contracts, count of awarded contracts,\" + \"Ids of the procuring entities from which they have received an award, and their count. \" + \"All filters ally here, the year filter uses the awards.date field.\") @RequestMapping(value = \"/api/topTenSuppliers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TopTenController.topTenLargestSuppliers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "ref", "put", "ref", "put", "put", "ref", "newAggregation", "match", "andOperator", "is", "and", "exists", "where", "toString", "getDefaultFilterCriteria", "unwind", "match", "is", "where", "toString", "unwind", "match", "getYearFilterCriteria", "awardFiltering", "sort", "limit", "as", "size", "and", "andExclude", "andInclude", "as", "and", "project", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}