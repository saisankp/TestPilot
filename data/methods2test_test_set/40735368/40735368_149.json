{"test_class": {"identifier": "TransformFeatureStoreTest", "superclass": "extends AbstractTransformTest", "interfaces": "", "fields": [{"original_string": "WKTReader wkt = new WKTReader();", "modifier": "", "type": "WKTReader", "declarator": "wkt = new WKTReader()", "var_name": "wkt"}], "file": "modules/extension/transform/src/test/java/org/geotools/data/transform/TransformFeatureStoreTest.java"}, "test_case": {"identifier": "testInsertOnTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testInsertOnTransform() throws Exception {\n        SimpleFeatureStore transformed = (SimpleFeatureStore) transformWithPartialTransform();\n        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(transformed.getSchema());\n        fb.add(wkt.read(\"POINT (-120 40)\").buffer(3));\n        fb.add(\"baloon\");\n        fb.add(1);\n        fb.add(1);\n        SimpleFeature sf = fb.buildFeature(\"states_mini.11\");\n        \n        // add the feature\n        transformed.addFeatures(DataUtilities.collection(sf));\n        \n        // check it's there\n        int size = STATES.getCount(Query.ALL);\n        assertEquals(11, size);\n        \n        // the name won't be preserved since it's transformed, we use the population instead\n        assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter(\"persons = 1\"))).size());\n        assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter(\"people = 1\"))).size());\n    }", "signature": "void testInsertOnTransform()", "full_signature": "@Test public void testInsertOnTransform()", "class_method_signature": "TransformFeatureStoreTest.testInsertOnTransform()", "testcase": true, "constructor": false, "invocations": ["transformWithPartialTransform", "getSchema", "add", "buffer", "read", "add", "add", "add", "buildFeature", "addFeatures", "collection", "getCount", "assertEquals", "assertEquals", "size", "getFeatures", "toFilter", "assertEquals", "size", "getFeatures", "toFilter"]}, "focal_class": {"identifier": "TransformFeatureStore", "superclass": "extends TransformFeatureSource", "interfaces": "implements SimpleFeatureStore", "fields": [{"original_string": "protected SimpleFeatureStore store;", "modifier": "protected", "type": "SimpleFeatureStore", "declarator": "store", "var_name": "store"}, {"original_string": "protected Transformer invertedTransformer;", "modifier": "protected", "type": "Transformer", "declarator": "invertedTransformer", "var_name": "invertedTransformer"}], "methods": [{"identifier": "TransformFeatureStore", "parameters": "(SimpleFeatureStore store, Name name, List<Definition> definitions)", "modifiers": "public", "return": "", "signature": " TransformFeatureStore(SimpleFeatureStore store, Name name, List<Definition> definitions)", "full_signature": "public  TransformFeatureStore(SimpleFeatureStore store, Name name, List<Definition> definitions)", "class_method_signature": "TransformFeatureStore.TransformFeatureStore(SimpleFeatureStore store, Name name, List<Definition> definitions)", "testcase": false, "constructor": true}, {"identifier": "getRequiredAttributes", "parameters": "(SimpleFeatureType schema)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getRequiredAttributes(SimpleFeatureType schema)", "full_signature": "private List<String> getRequiredAttributes(SimpleFeatureType schema)", "class_method_signature": "TransformFeatureStore.getRequiredAttributes(SimpleFeatureType schema)", "testcase": false, "constructor": false}, {"identifier": "setTransaction", "parameters": "(Transaction transaction)", "modifiers": "@Override public", "return": "void", "signature": "void setTransaction(Transaction transaction)", "full_signature": "@Override public void setTransaction(Transaction transaction)", "class_method_signature": "TransformFeatureStore.setTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "()", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction getTransaction()", "full_signature": "@Override public Transaction getTransaction()", "class_method_signature": "TransformFeatureStore.getTransaction()", "testcase": false, "constructor": false}, {"identifier": "removeFeatures", "parameters": "(Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void removeFeatures(Filter filter)", "full_signature": "@Override public void removeFeatures(Filter filter)", "class_method_signature": "TransformFeatureStore.removeFeatures(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "addFeatures", "parameters": "(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "modifiers": "@Override public", "return": "List<FeatureId>", "signature": "List<FeatureId> addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "full_signature": "@Override public List<FeatureId> addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "class_method_signature": "TransformFeatureStore.addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "testcase": false, "constructor": false}, {"identifier": "setFeatures", "parameters": "(FeatureReader<SimpleFeatureType, SimpleFeature> reader)", "modifiers": "@Override public", "return": "void", "signature": "void setFeatures(FeatureReader<SimpleFeatureType, SimpleFeature> reader)", "full_signature": "@Override public void setFeatures(FeatureReader<SimpleFeatureType, SimpleFeature> reader)", "class_method_signature": "TransformFeatureStore.setFeatures(FeatureReader<SimpleFeatureType, SimpleFeature> reader)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(Name[] attributeNames, Object[] attributeValues, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(Name[] attributeNames, Object[] attributeValues, Filter filter)", "full_signature": "@Override public void modifyFeatures(Name[] attributeNames, Object[] attributeValues, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(Name[] attributeNames, Object[] attributeValues, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(AttributeDescriptor[] type, Object[] value, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(AttributeDescriptor[] type, Object[] value, Filter filter)", "full_signature": "@Override public void modifyFeatures(AttributeDescriptor[] type, Object[] value, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(AttributeDescriptor[] type, Object[] value, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(Name attributeName, Object attributeValue, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(Name attributeName, Object attributeValue, Filter filter)", "full_signature": "@Override public void modifyFeatures(Name attributeName, Object attributeValue, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(Name attributeName, Object attributeValue, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(AttributeDescriptor type, Object value, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(AttributeDescriptor type, Object value, Filter filter)", "full_signature": "@Override public void modifyFeatures(AttributeDescriptor type, Object value, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(AttributeDescriptor type, Object value, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(String name, Object attributeValue, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(String name, Object attributeValue, Filter filter)", "full_signature": "@Override public void modifyFeatures(String name, Object attributeValue, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(String name, Object attributeValue, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "modifyFeatures", "parameters": "(String[] nameArray, Object[] attributeValues, Filter filter)", "modifiers": "@Override public", "return": "void", "signature": "void modifyFeatures(String[] nameArray, Object[] attributeValues, Filter filter)", "full_signature": "@Override public void modifyFeatures(String[] nameArray, Object[] attributeValues, Filter filter)", "class_method_signature": "TransformFeatureStore.modifyFeatures(String[] nameArray, Object[] attributeValues, Filter filter)", "testcase": false, "constructor": false}], "file": "modules/extension/transform/src/main/java/org/geotools/data/transform/TransformFeatureStore.java"}, "focal_method": {"identifier": "addFeatures", "parameters": "(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "modifiers": "@Override public", "return": "List<FeatureId>", "body": "@Override\n    public List<FeatureId> addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection) throws IOException {\n        // re-shape back the collection provided, and then just call the wrapper store\n        TransformFeatureCollectionWrapper transformed = new TransformFeatureCollectionWrapper(collection, invertedTransformer);\n        return store.addFeatures(transformed);\n\n        // TODO: re-shape feature ids...\n    }", "signature": "List<FeatureId> addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "full_signature": "@Override public List<FeatureId> addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "class_method_signature": "TransformFeatureStore.addFeatures(\n            FeatureCollection<SimpleFeatureType, SimpleFeature> collection)", "testcase": false, "constructor": false, "invocations": ["addFeatures"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}