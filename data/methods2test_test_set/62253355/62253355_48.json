{"test_class": {"identifier": "FloatValueConverterTest", "superclass": "extends ValueConverterTestCase<Float>", "interfaces": "", "fields": [], "file": "rdf-orm/com.mobi.rdf.orm/src/test/java/com/mobi/rdf/orm/conversion/impl/FloatValueConverterTest.java"}, "test_case": {"identifier": "testEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmpty() {\n        try {\n            valueConverter.convertValue(valueFactory.createLiteral(\"\"), null, type);\n            TestCase.fail(\"Empty string should cause ValueConversionException\");\n        } catch (ValueConversionException e) {\n            TestCase.assertTrue(\"Cause of error should have been NumberFormatException\",\n                    e.getCause() instanceof NumberFormatException);\n        }\n    }", "signature": "void testEmpty()", "full_signature": "@Test public void testEmpty()", "class_method_signature": "FloatValueConverterTest.testEmpty()", "testcase": true, "constructor": false, "invocations": ["convertValue", "createLiteral", "fail", "assertTrue", "getCause"]}, "focal_class": {"identifier": "FloatValueConverter", "superclass": "extends AbstractValueConverter<Float>", "interfaces": "", "fields": [], "methods": [{"identifier": "FloatValueConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " FloatValueConverter()", "full_signature": "public  FloatValueConverter()", "class_method_signature": "FloatValueConverter.FloatValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convertValue", "parameters": "(Value value, Thing thing, Class<? extends Float> desiredType)", "modifiers": "@Override public", "return": "Float", "signature": "Float convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "full_signature": "@Override public Float convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "class_method_signature": "FloatValueConverter.convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "testcase": false, "constructor": false}, {"identifier": "convertType", "parameters": "(Float type, Thing thing)", "modifiers": "@Override public", "return": "Value", "signature": "Value convertType(Float type, Thing thing)", "full_signature": "@Override public Value convertType(Float type, Thing thing)", "class_method_signature": "FloatValueConverter.convertType(Float type, Thing thing)", "testcase": false, "constructor": false}], "file": "rdf-orm/com.mobi.rdf.orm/src/main/java/com/mobi/rdf/orm/conversion/impl/FloatValueConverter.java"}, "focal_method": {"identifier": "convertValue", "parameters": "(Value value, Thing thing, Class<? extends Float> desiredType)", "modifiers": "@Override public", "return": "Float", "body": "@Override\n    public Float convertValue(Value value, Thing thing, Class<? extends Float> desiredType)\n            throws ValueConversionException {\n        try {\n            return Float.parseFloat(value.stringValue());\n        } catch (NumberFormatException e) {\n            throw new ValueConversionException(\"Issue getting float value from statement\", e);\n        }\n    }", "signature": "Float convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "full_signature": "@Override public Float convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "class_method_signature": "FloatValueConverter.convertValue(Value value, Thing thing, Class<? extends Float> desiredType)", "testcase": false, "constructor": false, "invocations": ["parseFloat", "stringValue"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}