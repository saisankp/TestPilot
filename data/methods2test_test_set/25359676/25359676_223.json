{"test_class": {"identifier": "UifControllerHandlerInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UifControllerHandlerInterceptor handlerInterceptor;", "modifier": "private", "type": "UifControllerHandlerInterceptor", "declarator": "handlerInterceptor", "var_name": "handlerInterceptor"}, {"original_string": "private MockController controller;", "modifier": "private", "type": "MockController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private MockHttpServletRequest request;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private UifFormBase model;", "modifier": "private", "type": "UifFormBase", "declarator": "model", "var_name": "model"}], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/web/controller/UifControllerHandlerInterceptorTest.java"}, "test_case": {"identifier": "testCheckHandlerMethodAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckHandlerMethodAccess() throws Exception {\n        ViewPostMetadata viewPostMetadata = new ViewPostMetadata();\n        model.setViewPostMetadata(viewPostMetadata);\n\n        assertMethodAccess(\"Accessible annotation not picked up\", \"method1\", true);\n        assertMethodAccess(\"Custom method should be allowed due to not being in the available methods\", \"method2\", true);\n        viewPostMetadata.addAvailableMethodToCall( \"method2\" );\n        assertMethodAccess(\"Accessible annotation picked up where not present\", \"method2\", false);\n\n        viewPostMetadata.addAccessibleMethodToCall(\"method4\");\n        viewPostMetadata.addAccessibleMethodToCall(\"method6\");\n\n        assertMethodAccess(\"Accessible method by view not picked up\", \"method4\", true);\n        assertMethodAccess(\"Accessible method by view not picked up\", \"method6\", true);\n\n        assertMethodAccess(\"Method not accessible for empty method to call\", null, true);\n    }", "signature": "void testCheckHandlerMethodAccess()", "full_signature": "@Test public void testCheckHandlerMethodAccess()", "class_method_signature": "UifControllerHandlerInterceptorTest.testCheckHandlerMethodAccess()", "testcase": true, "constructor": false, "invocations": ["setViewPostMetadata", "assertMethodAccess", "assertMethodAccess", "addAvailableMethodToCall", "assertMethodAccess", "addAccessibleMethodToCall", "addAccessibleMethodToCall", "assertMethodAccess", "assertMethodAccess", "assertMethodAccess"]}, "focal_class": {"identifier": "UifControllerHandlerInterceptor", "superclass": "", "interfaces": "implements HandlerInterceptor", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(UifControllerHandlerInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(UifControllerHandlerInterceptor.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private ModelAndViewService modelAndViewService;", "modifier": "@Autowired\n    private", "type": "ModelAndViewService", "declarator": "modelAndViewService", "var_name": "modelAndViewService"}], "methods": [{"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response,\n            Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response,\n            Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response,\n            Object handler)", "class_method_signature": "UifControllerHandlerInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response,\n            Object handler)", "testcase": false, "constructor": false}, {"identifier": "checkHandlerMethodAccess", "parameters": "(HttpServletRequest request, Object handler)", "modifiers": "protected", "return": "void", "signature": "void checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "full_signature": "protected void checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "class_method_signature": "UifControllerHandlerInterceptor.checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "testcase": false, "constructor": false}, {"identifier": "checkForMethodAccess", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkForMethodAccess(HttpServletRequest request)", "full_signature": "protected boolean checkForMethodAccess(HttpServletRequest request)", "class_method_signature": "UifControllerHandlerInterceptor.checkForMethodAccess(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "createUifFormManagerIfNecessary", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "void", "signature": "void createUifFormManagerIfNecessary(HttpServletRequest request)", "full_signature": "protected void createUifFormManagerIfNecessary(HttpServletRequest request)", "class_method_signature": "UifControllerHandlerInterceptor.createUifFormManagerIfNecessary(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "postHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler,\n            ModelAndView modelAndView)", "modifiers": "@Override public", "return": "void", "signature": "void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n            ModelAndView modelAndView)", "full_signature": "@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n            ModelAndView modelAndView)", "class_method_signature": "UifControllerHandlerInterceptor.postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n            ModelAndView modelAndView)", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler,\n            Exception ex)", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n            Exception ex)", "full_signature": "@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n            Exception ex)", "class_method_signature": "UifControllerHandlerInterceptor.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n            Exception ex)", "testcase": false, "constructor": false}, {"identifier": "getModelAndViewService", "parameters": "()", "modifiers": "protected", "return": "ModelAndViewService", "signature": "ModelAndViewService getModelAndViewService()", "full_signature": "protected ModelAndViewService getModelAndViewService()", "class_method_signature": "UifControllerHandlerInterceptor.getModelAndViewService()", "testcase": false, "constructor": false}, {"identifier": "setModelAndViewService", "parameters": "(ModelAndViewService modelAndViewService)", "modifiers": "public", "return": "void", "signature": "void setModelAndViewService(ModelAndViewService modelAndViewService)", "full_signature": "public void setModelAndViewService(ModelAndViewService modelAndViewService)", "class_method_signature": "UifControllerHandlerInterceptor.setModelAndViewService(ModelAndViewService modelAndViewService)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/web/controller/UifControllerHandlerInterceptor.java"}, "focal_method": {"identifier": "checkHandlerMethodAccess", "parameters": "(HttpServletRequest request, Object handler)", "modifiers": "protected", "return": "void", "body": "protected void checkHandlerMethodAccess(HttpServletRequest request, Object handler) throws Exception {\n        String requestMethod = request.getMethod();\n\n        // if it is a GET request then we allow without any check\n        if(requestMethod.equalsIgnoreCase(RequestMethod.GET.name())) {\n            return;\n        }\n\n        HandlerMethod handlerMethod = (HandlerMethod) handler;\n        MethodAccessible methodAccessible = handlerMethod.getMethodAnnotation(MethodAccessible.class);\n\n        // if accessible by annotation then return, otherwise go on to check view configuration\n        if (methodAccessible != null) {\n            return;\n        }\n\n        boolean isMethodAccessible = checkForMethodAccess(request);\n\n        if (!isMethodAccessible) {\n            throw new MethodAccessException(handlerMethod.getBeanType(), handlerMethod.getMethod().getName());\n        }\n    }", "signature": "void checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "full_signature": "protected void checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "class_method_signature": "UifControllerHandlerInterceptor.checkHandlerMethodAccess(HttpServletRequest request, Object handler)", "testcase": false, "constructor": false, "invocations": ["getMethod", "equalsIgnoreCase", "name", "getMethodAnnotation", "checkForMethodAccess", "getBeanType", "getName", "getMethod"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}