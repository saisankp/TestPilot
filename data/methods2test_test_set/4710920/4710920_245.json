{"test_class": {"identifier": "AbstractRegistryFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistryFactory registryFactory = new AbstractRegistryFactory() {\n\n        @Override\n        protected Registry createRegistry(final URL url) {\n            return new Registry() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return false;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                @Override\n                public void register(URL url) {\n                }\n\n                @Override\n                public void unregister(URL url) {\n                }\n\n                @Override\n                public void subscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public void unsubscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public List<URL> lookup(URL url) {\n                    return null;\n                }\n\n            };\n        }\n    };", "modifier": "private", "type": "RegistryFactory", "declarator": "registryFactory = new AbstractRegistryFactory() {\n\n        @Override\n        protected Registry createRegistry(final URL url) {\n            return new Registry() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return false;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                @Override\n                public void register(URL url) {\n                }\n\n                @Override\n                public void unregister(URL url) {\n                }\n\n                @Override\n                public void subscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public void unsubscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public List<URL> lookup(URL url) {\n                    return null;\n                }\n\n            };\n        }\n    }", "var_name": "registryFactory"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/AbstractRegistryFactoryTest.java"}, "test_case": {"identifier": "testRegistryFactoryCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegistryFactoryCache() throws Exception {\n        URL url = URL.valueOf(\"dubbo://\" + NetUtils.getLocalAddress().getHostAddress() + \":2233\");\n        Registry registry1 = registryFactory.getRegistry(url);\n        Registry registry2 = registryFactory.getRegistry(url);\n        Assertions.assertEquals(registry1, registry2);\n    }", "signature": "void testRegistryFactoryCache()", "full_signature": "@Test public void testRegistryFactoryCache()", "class_method_signature": "AbstractRegistryFactoryTest.testRegistryFactoryCache()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getHostAddress", "getLocalAddress", "getRegistry", "getRegistry", "assertEquals"]}, "focal_class": {"identifier": "AbstractRegistryFactory", "superclass": "", "interfaces": "implements RegistryFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AbstractRegistryFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AbstractRegistryFactory.class)", "var_name": "LOGGER"}, {"original_string": "protected static final ReentrantLock LOCK = new ReentrantLock();", "modifier": "protected static final", "type": "ReentrantLock", "declarator": "LOCK = new ReentrantLock()", "var_name": "LOCK"}, {"original_string": "protected static final Map<String, Registry> REGISTRIES = new HashMap<>();", "modifier": "protected static final", "type": "Map<String, Registry>", "declarator": "REGISTRIES = new HashMap<>()", "var_name": "REGISTRIES"}, {"original_string": "private static final AtomicBoolean destroyed = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "destroyed = new AtomicBoolean(false)", "var_name": "destroyed"}, {"original_string": "private static Registry DEFAULT_NOP_REGISTRY = new Registry() {\n        @Override\n        public URL getUrl() {\n            return null;\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public void destroy() {\n\n        }\n\n        @Override\n        public void register(URL url) {\n\n        }\n\n        @Override\n        public void unregister(URL url) {\n\n        }\n\n        @Override\n        public void subscribe(URL url, NotifyListener listener) {\n\n        }\n\n        @Override\n        public void unsubscribe(URL url, NotifyListener listener) {\n\n        }\n\n        @Override\n        public List<URL> lookup(URL url) {\n            return null;\n        }\n    };", "modifier": "private static", "type": "Registry", "declarator": "DEFAULT_NOP_REGISTRY = new Registry() {\n        @Override\n        public URL getUrl() {\n            return null;\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public void destroy() {\n\n        }\n\n        @Override\n        public void register(URL url) {\n\n        }\n\n        @Override\n        public void unregister(URL url) {\n\n        }\n\n        @Override\n        public void subscribe(URL url, NotifyListener listener) {\n\n        }\n\n        @Override\n        public void unsubscribe(URL url, NotifyListener listener) {\n\n        }\n\n        @Override\n        public List<URL> lookup(URL url) {\n            return null;\n        }\n    }", "var_name": "DEFAULT_NOP_REGISTRY"}], "methods": [{"identifier": "getRegistries", "parameters": "()", "modifiers": "public static", "return": "Collection<Registry>", "signature": "Collection<Registry> getRegistries()", "full_signature": "public static Collection<Registry> getRegistries()", "class_method_signature": "AbstractRegistryFactory.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "(String key)", "modifiers": "public static", "return": "Registry", "signature": "Registry getRegistry(String key)", "full_signature": "public static Registry getRegistry(String key)", "class_method_signature": "AbstractRegistryFactory.getRegistry(String key)", "testcase": false, "constructor": false}, {"identifier": "getServiceDiscoveries", "parameters": "()", "modifiers": "public static", "return": "List<ServiceDiscovery>", "signature": "List<ServiceDiscovery> getServiceDiscoveries()", "full_signature": "public static List<ServiceDiscovery> getServiceDiscoveries()", "class_method_signature": "AbstractRegistryFactory.getServiceDiscoveries()", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "AbstractRegistryFactory.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Registry", "signature": "Registry getRegistry(URL url)", "full_signature": "@Override public Registry getRegistry(URL url)", "class_method_signature": "AbstractRegistryFactory.getRegistry(URL url)", "testcase": false, "constructor": false}, {"identifier": "createRegistryCacheKey", "parameters": "(URL url)", "modifiers": "protected", "return": "String", "signature": "String createRegistryCacheKey(URL url)", "full_signature": "protected String createRegistryCacheKey(URL url)", "class_method_signature": "AbstractRegistryFactory.createRegistryCacheKey(URL url)", "testcase": false, "constructor": false}, {"identifier": "createRegistry", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "Registry", "signature": "Registry createRegistry(URL url)", "full_signature": "protected abstract Registry createRegistry(URL url)", "class_method_signature": "AbstractRegistryFactory.createRegistry(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeDestroyedRegistry", "parameters": "(Registry toRm)", "modifiers": "public static", "return": "void", "signature": "void removeDestroyedRegistry(Registry toRm)", "full_signature": "public static void removeDestroyedRegistry(Registry toRm)", "class_method_signature": "AbstractRegistryFactory.removeDestroyedRegistry(Registry toRm)", "testcase": false, "constructor": false}, {"identifier": "clearRegistryNotDestroy", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearRegistryNotDestroy()", "full_signature": "public static void clearRegistryNotDestroy()", "class_method_signature": "AbstractRegistryFactory.clearRegistryNotDestroy()", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistryFactory.java"}, "focal_method": {"identifier": "getRegistry", "parameters": "(String key)", "modifiers": "public static", "return": "Registry", "body": "public static Registry getRegistry(String key) {\n        return REGISTRIES.get(key);\n    }", "signature": "Registry getRegistry(String key)", "full_signature": "public static Registry getRegistry(String key)", "class_method_signature": "AbstractRegistryFactory.getRegistry(String key)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}