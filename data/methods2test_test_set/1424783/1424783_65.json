{"test_class": {"identifier": "CandlestickRendererTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "XYPlot xyPlot;", "modifier": "", "type": "XYPlot", "declarator": "xyPlot", "var_name": "xyPlot"}, {"original_string": "Canvas canvas;", "modifier": "", "type": "Canvas", "declarator": "canvas", "var_name": "canvas"}, {"original_string": "RectF plotArea = new RectF(0, 0, 100, 100);", "modifier": "", "type": "RectF", "declarator": "plotArea = new RectF(0, 0, 100, 100)", "var_name": "plotArea"}, {"original_string": "@Mock\n    RenderStack renderStack;", "modifier": "@Mock", "type": "RenderStack", "declarator": "renderStack", "var_name": "renderStack"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/CandlestickRendererTest.java"}, "test_case": {"identifier": "testOnRender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnRender() throws Exception {\n        CandlestickFormatter formatter = spy(new CandlestickFormatter());\n        CandlestickRenderer renderer = spy((CandlestickRenderer) formatter.doGetRendererInstance(xyPlot));\n        doReturn(renderer.getClass()).when(formatter).getRendererClass();\n        doReturn(renderer).when(formatter).doGetRendererInstance(any(XYPlot.class));\n\n        XYSeries openVals = new SimpleXYSeries(SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"open\", 1, 2, 3, 4);\n        XYSeries closeVals = new SimpleXYSeries(SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"open\", 1, 2, 3, 4);\n        XYSeries highVals = new SimpleXYSeries(SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"open\", 1, 2, 3, 4);\n        XYSeries lowVals = new SimpleXYSeries(SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"open\", 1, 2, 3, 4);\n        CandlestickMaker.make(xyPlot, formatter, openVals, closeVals, highVals, lowVals);\n\n        renderer.onRender(canvas, plotArea, openVals, formatter, renderStack);\n    }", "signature": "void testOnRender()", "full_signature": "@Test public void testOnRender()", "class_method_signature": "CandlestickRendererTest.testOnRender()", "testcase": true, "constructor": false, "invocations": ["spy", "spy", "doGetRendererInstance", "getRendererClass", "when", "doReturn", "getClass", "doGetRendererInstance", "when", "doReturn", "any", "make", "onRender"]}, "focal_class": {"identifier": "CandlestickRenderer", "superclass": "extends GroupRenderer<FormatterType>", "interfaces": "", "fields": [{"original_string": "protected static final int HIGH_INDEX = 0;", "modifier": "protected static final", "type": "int", "declarator": "HIGH_INDEX = 0", "var_name": "HIGH_INDEX"}, {"original_string": "protected static final int LOW_INDEX = 1;", "modifier": "protected static final", "type": "int", "declarator": "LOW_INDEX = 1", "var_name": "LOW_INDEX"}, {"original_string": "protected static final int OPEN_INDEX = 2;", "modifier": "protected static final", "type": "int", "declarator": "OPEN_INDEX = 2", "var_name": "OPEN_INDEX"}, {"original_string": "protected static final int CLOSE_INDEX = 3;", "modifier": "protected static final", "type": "int", "declarator": "CLOSE_INDEX = 3", "var_name": "CLOSE_INDEX"}], "methods": [{"identifier": "CandlestickRenderer", "parameters": "(XYPlot plot)", "modifiers": "public", "return": "", "signature": " CandlestickRenderer(XYPlot plot)", "full_signature": "public  CandlestickRenderer(XYPlot plot)", "class_method_signature": "CandlestickRenderer.CandlestickRenderer(XYPlot plot)", "testcase": false, "constructor": true}, {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "modifiers": "@Override public", "return": "void", "signature": "void onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "full_signature": "@Override public void onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "class_method_signature": "CandlestickRenderer.onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "testcase": false, "constructor": false}, {"identifier": "drawTextLabel", "parameters": "(Canvas canvas, PointF coords, String text, PointLabelFormatter plf)", "modifiers": "protected", "return": "void", "signature": "void drawTextLabel(Canvas canvas, PointF coords, String text, PointLabelFormatter plf)", "full_signature": "protected void drawTextLabel(Canvas canvas, PointF coords, String text, PointLabelFormatter plf)", "class_method_signature": "CandlestickRenderer.drawTextLabel(Canvas canvas, PointF coords, String text, PointLabelFormatter plf)", "testcase": false, "constructor": false}, {"identifier": "drawWick", "parameters": "(Canvas canvas, PointF min, PointF max, FormatterType formatter)", "modifiers": "protected", "return": "void", "signature": "void drawWick(Canvas canvas, PointF min, PointF max, FormatterType formatter)", "full_signature": "protected void drawWick(Canvas canvas, PointF min, PointF max, FormatterType formatter)", "class_method_signature": "CandlestickRenderer.drawWick(Canvas canvas, PointF min, PointF max, FormatterType formatter)", "testcase": false, "constructor": false}, {"identifier": "drawBody", "parameters": "(Canvas canvas, PointF open, PointF close, FormatterType formatter)", "modifiers": "protected", "return": "void", "signature": "void drawBody(Canvas canvas, PointF open, PointF close, FormatterType formatter)", "full_signature": "protected void drawBody(Canvas canvas, PointF open, PointF close, FormatterType formatter)", "class_method_signature": "CandlestickRenderer.drawBody(Canvas canvas, PointF open, PointF close, FormatterType formatter)", "testcase": false, "constructor": false}, {"identifier": "drawUpperCap", "parameters": "(Canvas canvas, PointF val, FormatterType formatter)", "modifiers": "protected", "return": "void", "signature": "void drawUpperCap(Canvas canvas, PointF val, FormatterType formatter)", "full_signature": "protected void drawUpperCap(Canvas canvas, PointF val, FormatterType formatter)", "class_method_signature": "CandlestickRenderer.drawUpperCap(Canvas canvas, PointF val, FormatterType formatter)", "testcase": false, "constructor": false}, {"identifier": "drawLowerCap", "parameters": "(Canvas canvas, PointF val, FormatterType formatter)", "modifiers": "protected", "return": "void", "signature": "void drawLowerCap(Canvas canvas, PointF val, FormatterType formatter)", "full_signature": "protected void drawLowerCap(Canvas canvas, PointF val, FormatterType formatter)", "class_method_signature": "CandlestickRenderer.drawLowerCap(Canvas canvas, PointF val, FormatterType formatter)", "testcase": false, "constructor": false}, {"identifier": "doDrawLegendIcon", "parameters": "(Canvas canvas, RectF rect, FormatterType formatter)", "modifiers": "@Override protected", "return": "void", "signature": "void doDrawLegendIcon(Canvas canvas, RectF rect, FormatterType formatter)", "full_signature": "@Override protected void doDrawLegendIcon(Canvas canvas, RectF rect, FormatterType formatter)", "class_method_signature": "CandlestickRenderer.doDrawLegendIcon(Canvas canvas, RectF rect, FormatterType formatter)", "testcase": false, "constructor": false}, {"identifier": "drawTriangle", "parameters": "(Canvas canvas, RectF rect,\n                                Paint fillPaint, Paint strokePaint)", "modifiers": "protected", "return": "void", "signature": "void drawTriangle(Canvas canvas, RectF rect,\n                                Paint fillPaint, Paint strokePaint)", "full_signature": "protected void drawTriangle(Canvas canvas, RectF rect,\n                                Paint fillPaint, Paint strokePaint)", "class_method_signature": "CandlestickRenderer.drawTriangle(Canvas canvas, RectF rect,\n                                Paint fillPaint, Paint strokePaint)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/CandlestickRenderer.java"}, "focal_method": {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack) {\n\n        final FormatterType formatter = sfList.get(0).getFormatter();\n        for(int i = 0; i < seriesSize; i++) {\n\n            final XYSeries highSeries = sfList.get(HIGH_INDEX).getSeries();\n            final XYSeries lowSeries = sfList.get(LOW_INDEX).getSeries();\n            final XYSeries openSeries = sfList.get(OPEN_INDEX).getSeries();\n            final XYSeries closeSeries = sfList.get(CLOSE_INDEX).getSeries();\n\n            // x-val for all series should be identical so just grab x from the first series:\n            Number x = highSeries.getX(i);\n\n            Number high = highSeries.getY(i);\n            Number low = lowSeries.getY(i);\n            Number open = openSeries.getY(i);\n            Number close = closeSeries.getY(i);\n\n            // draw the candlestick:\n            final PointF highPix = getPlot().getBounds().transformScreen(x, high, plotArea);\n            final PointF lowPix = getPlot().getBounds().transformScreen(x, low, plotArea);\n            final PointF openPix = getPlot().getBounds().transformScreen(x, open, plotArea);\n            final PointF closePix = getPlot().getBounds().transformScreen(x, close, plotArea);\n\n            drawWick(canvas, highPix, lowPix, formatter);\n            drawBody(canvas, openPix, closePix, formatter);\n            drawUpperCap(canvas, highPix, formatter);\n            drawLowerCap(canvas, lowPix, formatter);\n\n            // draw labels, if any:\n            final PointLabelFormatter plf = formatter.hasPointLabelFormatter()\n                                            ? formatter.getPointLabelFormatter() : null;\n            final PointLabeler pointLabeler = formatter.getPointLabeler();\n            if(plf != null && pointLabeler != null) {\n                drawTextLabel(canvas, highPix, pointLabeler.getLabel(highSeries, i), plf);\n                drawTextLabel(canvas, lowPix, pointLabeler.getLabel(lowSeries, i), plf);\n                drawTextLabel(canvas, openPix, pointLabeler.getLabel(openSeries, i), plf);\n                drawTextLabel(canvas, closePix, pointLabeler.getLabel(closeSeries, i), plf);\n            }\n        }\n    }", "signature": "void onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "full_signature": "@Override public void onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "class_method_signature": "CandlestickRenderer.onRender(Canvas canvas, RectF plotArea, List<SeriesBundle<XYSeries,\n                ? extends FormatterType>> sfList, int seriesSize,  RenderStack stack)", "testcase": false, "constructor": false, "invocations": ["getFormatter", "get", "getSeries", "get", "getSeries", "get", "getSeries", "get", "getSeries", "get", "getX", "getY", "getY", "getY", "getY", "transformScreen", "getBounds", "getPlot", "transformScreen", "getBounds", "getPlot", "transformScreen", "getBounds", "getPlot", "transformScreen", "getBounds", "getPlot", "drawWick", "drawBody", "drawUpperCap", "drawLowerCap", "hasPointLabelFormatter", "getPointLabelFormatter", "getPointLabeler", "drawTextLabel", "getLabel", "drawTextLabel", "getLabel", "drawTextLabel", "getLabel", "drawTextLabel", "getLabel"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}