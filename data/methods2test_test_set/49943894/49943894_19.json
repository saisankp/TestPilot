{"test_class": {"identifier": "VirtualRoutingResourceTest", "superclass": "", "interfaces": "implements VirtualRouterDeployer", "fields": [{"original_string": "VirtualRoutingResource _resource;", "modifier": "", "type": "VirtualRoutingResource", "declarator": "_resource", "var_name": "_resource"}, {"original_string": "NetworkElementCommand _currentCmd;", "modifier": "", "type": "NetworkElementCommand", "declarator": "_currentCmd", "var_name": "_currentCmd"}, {"original_string": "int _count;", "modifier": "", "type": "int", "declarator": "_count", "var_name": "_count"}, {"original_string": "String _file;", "modifier": "", "type": "String", "declarator": "_file", "var_name": "_file"}, {"original_string": "String ROUTERIP = \"169.254.3.4\";", "modifier": "", "type": "String", "declarator": "ROUTERIP = \"169.254.3.4\"", "var_name": "ROUTERIP"}, {"original_string": "String ROUTERGUESTIP = \"10.200.1.1\";", "modifier": "", "type": "String", "declarator": "ROUTERGUESTIP = \"10.200.1.1\"", "var_name": "ROUTERGUESTIP"}, {"original_string": "String ROUTERNAME = \"r-4-VM\";", "modifier": "", "type": "String", "declarator": "ROUTERNAME = \"r-4-VM\"", "var_name": "ROUTERNAME"}], "file": "nucleo/src/test/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResourceTest.java"}, "test_case": {"identifier": "testDnsMasqConfigCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDnsMasqConfigCommand() {\n        final Answer answer = _resource.executeRequest(generateDnsMasqConfigCommand());\n        assertTrue(answer.getResult());\n    }", "signature": "void testDnsMasqConfigCommand()", "full_signature": "@Test public void testDnsMasqConfigCommand()", "class_method_signature": "VirtualRoutingResourceTest.testDnsMasqConfigCommand()", "testcase": true, "constructor": false, "invocations": ["executeRequest", "generateDnsMasqConfigCommand", "assertTrue", "getResult"]}, "focal_class": {"identifier": "VirtualRoutingResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VirtualRoutingResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VirtualRoutingResource.class)", "var_name": "s_logger"}, {"original_string": "private VirtualRouterDeployer _vrDeployer;", "modifier": "private", "type": "VirtualRouterDeployer", "declarator": "_vrDeployer", "var_name": "_vrDeployer"}, {"original_string": "private Map<String, Queue<NetworkElementCommand>> _vrAggregateCommandsSet;", "modifier": "private", "type": "Map<String, Queue<NetworkElementCommand>>", "declarator": "_vrAggregateCommandsSet", "var_name": "_vrAggregateCommandsSet"}, {"original_string": "protected Map<String, Lock> _vrLockMap = new HashMap<String, Lock>();", "modifier": "protected", "type": "Map<String, Lock>", "declarator": "_vrLockMap = new HashMap<String, Lock>()", "var_name": "_vrLockMap"}, {"original_string": "private String _name;", "modifier": "private", "type": "String", "declarator": "_name", "var_name": "_name"}, {"original_string": "private int _sleep;", "modifier": "private", "type": "int", "declarator": "_sleep", "var_name": "_sleep"}, {"original_string": "private int _retry;", "modifier": "private", "type": "int", "declarator": "_retry", "var_name": "_retry"}, {"original_string": "private int _port;", "modifier": "private", "type": "int", "declarator": "_port", "var_name": "_port"}, {"original_string": "private int _eachTimeout;", "modifier": "private", "type": "int", "declarator": "_eachTimeout", "var_name": "_eachTimeout"}, {"original_string": "private String _cfgVersion = \"1.0\";", "modifier": "private", "type": "String", "declarator": "_cfgVersion = \"1.0\"", "var_name": "_cfgVersion"}], "methods": [{"identifier": "VirtualRoutingResource", "parameters": "(VirtualRouterDeployer deployer)", "modifiers": "public", "return": "", "signature": " VirtualRoutingResource(VirtualRouterDeployer deployer)", "full_signature": "public  VirtualRoutingResource(VirtualRouterDeployer deployer)", "class_method_signature": "VirtualRoutingResource.VirtualRoutingResource(VirtualRouterDeployer deployer)", "testcase": false, "constructor": true}, {"identifier": "executeRequest", "parameters": "(final NetworkElementCommand cmd)", "modifiers": "public", "return": "Answer", "signature": "Answer executeRequest(final NetworkElementCommand cmd)", "full_signature": "public Answer executeRequest(final NetworkElementCommand cmd)", "class_method_signature": "VirtualRoutingResource.executeRequest(final NetworkElementCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "executeQueryCommand", "parameters": "(NetworkElementCommand cmd)", "modifiers": "private", "return": "Answer", "signature": "Answer executeQueryCommand(NetworkElementCommand cmd)", "full_signature": "private Answer executeQueryCommand(NetworkElementCommand cmd)", "class_method_signature": "VirtualRoutingResource.executeQueryCommand(NetworkElementCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "applyConfigToVR", "parameters": "(String routerAccessIp, ConfigItem c)", "modifiers": "private", "return": "ExecutionResult", "signature": "ExecutionResult applyConfigToVR(String routerAccessIp, ConfigItem c)", "full_signature": "private ExecutionResult applyConfigToVR(String routerAccessIp, ConfigItem c)", "class_method_signature": "VirtualRoutingResource.applyConfigToVR(String routerAccessIp, ConfigItem c)", "testcase": false, "constructor": false}, {"identifier": "applyConfigToVR", "parameters": "(String routerAccessIp, ConfigItem c, int timeout)", "modifiers": "private", "return": "ExecutionResult", "signature": "ExecutionResult applyConfigToVR(String routerAccessIp, ConfigItem c, int timeout)", "full_signature": "private ExecutionResult applyConfigToVR(String routerAccessIp, ConfigItem c, int timeout)", "class_method_signature": "VirtualRoutingResource.applyConfigToVR(String routerAccessIp, ConfigItem c, int timeout)", "testcase": false, "constructor": false}, {"identifier": "applyConfig", "parameters": "(NetworkElementCommand cmd, List<ConfigItem> cfg)", "modifiers": "private", "return": "Answer", "signature": "Answer applyConfig(NetworkElementCommand cmd, List<ConfigItem> cfg)", "full_signature": "private Answer applyConfig(NetworkElementCommand cmd, List<ConfigItem> cfg)", "class_method_signature": "VirtualRoutingResource.applyConfig(NetworkElementCommand cmd, List<ConfigItem> cfg)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(CheckS2SVpnConnectionsCommand cmd)", "modifiers": "private", "return": "CheckS2SVpnConnectionsAnswer", "signature": "CheckS2SVpnConnectionsAnswer execute(CheckS2SVpnConnectionsCommand cmd)", "full_signature": "private CheckS2SVpnConnectionsAnswer execute(CheckS2SVpnConnectionsCommand cmd)", "class_method_signature": "VirtualRoutingResource.execute(CheckS2SVpnConnectionsCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GetRouterAlertsCommand cmd)", "modifiers": "private", "return": "GetRouterAlertsAnswer", "signature": "GetRouterAlertsAnswer execute(GetRouterAlertsCommand cmd)", "full_signature": "private GetRouterAlertsAnswer execute(GetRouterAlertsCommand cmd)", "class_method_signature": "VirtualRoutingResource.execute(GetRouterAlertsCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(CheckRouterCommand cmd)", "modifiers": "private", "return": "Answer", "signature": "Answer execute(CheckRouterCommand cmd)", "full_signature": "private Answer execute(CheckRouterCommand cmd)", "class_method_signature": "VirtualRoutingResource.execute(CheckRouterCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GetDomRVersionCmd cmd)", "modifiers": "private", "return": "Answer", "signature": "Answer execute(GetDomRVersionCmd cmd)", "full_signature": "private Answer execute(GetDomRVersionCmd cmd)", "class_method_signature": "VirtualRoutingResource.execute(GetDomRVersionCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "VirtualRoutingResource.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final String ipAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean connect(final String ipAddress)", "full_signature": "public boolean connect(final String ipAddress)", "class_method_signature": "VirtualRoutingResource.connect(final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final String ipAddress, final int port)", "modifiers": "public", "return": "boolean", "signature": "boolean connect(final String ipAddress, final int port)", "full_signature": "public boolean connect(final String ipAddress, final int port)", "class_method_signature": "VirtualRoutingResource.connect(final String ipAddress, final int port)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final String ipAddress, int retry, int sleep)", "modifiers": "public", "return": "boolean", "signature": "boolean connect(final String ipAddress, int retry, int sleep)", "full_signature": "public boolean connect(final String ipAddress, int retry, int sleep)", "class_method_signature": "VirtualRoutingResource.connect(final String ipAddress, int retry, int sleep)", "testcase": false, "constructor": false}, {"identifier": "generateCommandCfg", "parameters": "(NetworkElementCommand cmd)", "modifiers": "private", "return": "List<ConfigItem>", "signature": "List<ConfigItem> generateCommandCfg(NetworkElementCommand cmd)", "full_signature": "private List<ConfigItem> generateCommandCfg(NetworkElementCommand cmd)", "class_method_signature": "VirtualRoutingResource.generateCommandCfg(NetworkElementCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(AggregationControlCommand cmd)", "modifiers": "private", "return": "Answer", "signature": "Answer execute(AggregationControlCommand cmd)", "full_signature": "private Answer execute(AggregationControlCommand cmd)", "class_method_signature": "VirtualRoutingResource.execute(AggregationControlCommand cmd)", "testcase": false, "constructor": false}], "file": "nucleo/src/main/java/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java"}, "focal_method": {"identifier": "executeRequest", "parameters": "(final NetworkElementCommand cmd)", "modifiers": "public", "return": "Answer", "body": "public Answer executeRequest(final NetworkElementCommand cmd) {\n        boolean aggregated = false;\n        String routerName = cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);\n        Lock lock;\n        if (_vrLockMap.containsKey(routerName)) {\n            lock = _vrLockMap.get(routerName);\n        } else {\n            lock = new ReentrantLock();\n            _vrLockMap.put(routerName, lock);\n        }\n        lock.lock();\n\n        try {\n            ExecutionResult rc = _vrDeployer.prepareCommand(cmd);\n            if (!rc.isSuccess()) {\n                s_logger.error(\"Failed to prepare VR command due to \" + rc.getDetails());\n                return new Answer(cmd, false, rc.getDetails());\n            }\n\n            assert cmd.getRouterAccessIp() != null : \"Why there is no access IP for VR?\";\n\n            if (cmd.isQuery()) {\n                return executeQueryCommand(cmd);\n            }\n\n            if (cmd instanceof AggregationControlCommand) {\n                return execute((AggregationControlCommand)cmd);\n            }\n\n            if (_vrAggregateCommandsSet.containsKey(routerName)) {\n                _vrAggregateCommandsSet.get(routerName).add(cmd);\n                aggregated = true;\n                // Clean up would be done after command has been executed\n                //TODO: Deal with group answer as well\n                return new Answer(cmd);\n            }\n\n            List<ConfigItem> cfg = generateCommandCfg(cmd);\n            if (cfg == null) {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n\n            return applyConfig(cmd, cfg);\n        } catch (final IllegalArgumentException e) {\n            return new Answer(cmd, false, e.getMessage());\n        } finally {\n            lock.unlock();\n            if (!aggregated) {\n                ExecutionResult rc = _vrDeployer.cleanupCommand(cmd);\n                if (!rc.isSuccess()) {\n                    s_logger.error(\"Failed to cleanup VR command due to \" + rc.getDetails());\n                }\n            }\n        }\n    }", "signature": "Answer executeRequest(final NetworkElementCommand cmd)", "full_signature": "public Answer executeRequest(final NetworkElementCommand cmd)", "class_method_signature": "VirtualRoutingResource.executeRequest(final NetworkElementCommand cmd)", "testcase": false, "constructor": false, "invocations": ["getAccessDetail", "containsKey", "get", "put", "lock", "prepareCommand", "isSuccess", "error", "getDetails", "getDetails", "getRouterAccessIp", "isQuery", "executeQueryCommand", "execute", "containsKey", "add", "get", "generateCommandCfg", "createUnsupportedCommandAnswer", "applyConfig", "getMessage", "unlock", "cleanupCommand", "isSuccess", "error", "getDetails"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}