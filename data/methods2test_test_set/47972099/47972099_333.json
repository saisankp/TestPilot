{"test_class": {"identifier": "CoLocationConstraintTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/CoLocationConstraintTest.java"}, "test_case": {"identifier": "testCreateConstraints", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateConstraints() {\n\t\ttry {\n\t\t\tJobVertexID id1 = new JobVertexID();\n\t\t\tJobVertexID id2 = new JobVertexID();\n\n\t\t\tJobVertex vertex1 = new JobVertex(\"vertex1\", id1);\n\t\t\tvertex1.setParallelism(2);\n\t\t\t\n\t\t\tJobVertex vertex2 = new JobVertex(\"vertex2\", id2);\n\t\t\tvertex2.setParallelism(3);\n\t\t\t\n\t\t\tCoLocationGroup group = new CoLocationGroup(vertex1, vertex2);\n\t\t\t\n\t\t\tAbstractID groupId = group.getId();\n\t\t\tassertNotNull(groupId);\n\t\t\t\n\t\t\tCoLocationConstraint constraint1 = group.getLocationConstraint(0);\n\t\t\tCoLocationConstraint constraint2 = group.getLocationConstraint(1);\n\t\t\tCoLocationConstraint constraint3 = group.getLocationConstraint(2);\n\t\t\t\n\t\t\tassertFalse(constraint1 == constraint2);\n\t\t\tassertFalse(constraint1 == constraint3);\n\t\t\tassertFalse(constraint2 == constraint3);\n\t\t\t\n\t\t\tassertEquals(groupId, constraint1.getGroupId());\n\t\t\tassertEquals(groupId, constraint2.getGroupId());\n\t\t\tassertEquals(groupId, constraint3.getGroupId());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testCreateConstraints()", "full_signature": "@Test public void testCreateConstraints()", "class_method_signature": "CoLocationConstraintTest.testCreateConstraints()", "testcase": true, "constructor": false, "invocations": ["setParallelism", "setParallelism", "getId", "assertNotNull", "getLocationConstraint", "getLocationConstraint", "getLocationConstraint", "assertFalse", "assertFalse", "assertFalse", "assertEquals", "getGroupId", "assertEquals", "getGroupId", "assertEquals", "getGroupId", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "CoLocationConstraint", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CoLocationGroup group;", "modifier": "private final", "type": "CoLocationGroup", "declarator": "group", "var_name": "group"}, {"original_string": "private volatile SharedSlot sharedSlot;", "modifier": "private volatile", "type": "SharedSlot", "declarator": "sharedSlot", "var_name": "sharedSlot"}, {"original_string": "private volatile boolean locationLocked;", "modifier": "private volatile", "type": "boolean", "declarator": "locationLocked", "var_name": "locationLocked"}], "methods": [{"identifier": "CoLocationConstraint", "parameters": "(CoLocationGroup group)", "modifiers": "", "return": "", "signature": " CoLocationConstraint(CoLocationGroup group)", "full_signature": "  CoLocationConstraint(CoLocationGroup group)", "class_method_signature": "CoLocationConstraint.CoLocationConstraint(CoLocationGroup group)", "testcase": false, "constructor": true}, {"identifier": "getSharedSlot", "parameters": "()", "modifiers": "public", "return": "SharedSlot", "signature": "SharedSlot getSharedSlot()", "full_signature": "public SharedSlot getSharedSlot()", "class_method_signature": "CoLocationConstraint.getSharedSlot()", "testcase": false, "constructor": false}, {"identifier": "getGroupId", "parameters": "()", "modifiers": "public", "return": "AbstractID", "signature": "AbstractID getGroupId()", "full_signature": "public AbstractID getGroupId()", "class_method_signature": "CoLocationConstraint.getGroupId()", "testcase": false, "constructor": false}, {"identifier": "isAssigned", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAssigned()", "full_signature": "public boolean isAssigned()", "class_method_signature": "CoLocationConstraint.isAssigned()", "testcase": false, "constructor": false}, {"identifier": "isAssignedAndAlive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAssignedAndAlive()", "full_signature": "public boolean isAssignedAndAlive()", "class_method_signature": "CoLocationConstraint.isAssignedAndAlive()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "()", "modifiers": "public", "return": "Instance", "signature": "Instance getLocation()", "full_signature": "public Instance getLocation()", "class_method_signature": "CoLocationConstraint.getLocation()", "testcase": false, "constructor": false}, {"identifier": "setSharedSlot", "parameters": "(SharedSlot newSlot)", "modifiers": "public", "return": "void", "signature": "void setSharedSlot(SharedSlot newSlot)", "full_signature": "public void setSharedSlot(SharedSlot newSlot)", "class_method_signature": "CoLocationConstraint.setSharedSlot(SharedSlot newSlot)", "testcase": false, "constructor": false}, {"identifier": "lockLocation", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void lockLocation()", "full_signature": "public void lockLocation()", "class_method_signature": "CoLocationConstraint.lockLocation()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CoLocationConstraint.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/scheduler/CoLocationConstraint.java"}, "focal_method": {"identifier": "getGroupId", "parameters": "()", "modifiers": "public", "return": "AbstractID", "body": "public AbstractID getGroupId() {\n\t\treturn this.group.getId();\n\t}", "signature": "AbstractID getGroupId()", "full_signature": "public AbstractID getGroupId()", "class_method_signature": "CoLocationConstraint.getGroupId()", "testcase": false, "constructor": false, "invocations": ["getId"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}