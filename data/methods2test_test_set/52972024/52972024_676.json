{"test_class": {"identifier": "OnFeatureLoadingSectionProcessingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IQueue<ITask> taskQueue;", "modifier": "private", "type": "IQueue<ITask>", "declarator": "taskQueue", "var_name": "taskQueue"}, {"original_string": "private IChainStorage chainStorage;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorage", "var_name": "chainStorage"}, {"original_string": "private IResolveDependencyStrategy sequenceResolveStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "sequenceResolveStrategy", "var_name": "sequenceResolveStrategy"}, {"original_string": "private IResolveDependencyStrategy chainMapIdResolveStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "chainMapIdResolveStrategy", "var_name": "chainMapIdResolveStrategy"}, {"original_string": "private IMessageProcessingSequence sequence;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "private IMessageProcessor messageProcessor;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessor", "var_name": "messageProcessor"}, {"original_string": "private int stackDepth;", "modifier": "private", "type": "int", "declarator": "stackDepth", "var_name": "stackDepth"}, {"original_string": "private IObject context;", "modifier": "private", "type": "IObject", "declarator": "context", "var_name": "context"}], "file": "Starters/OnFeatureLoadingServiceStarter/OnFeatureLoadingStarter/src/test/java/info/smart_tools/smartactors/on_feature_loading_service_starter/on_feature_loading_starter/OnFeatureLoadingSectionProcessingStrategyTest.java"}, "test_case": {"identifier": "checkConfigurationProcessingExceptionOnWrongConfig", "parameters": "()", "modifiers": "@Test (expected = ConfigurationProcessingException.class) public", "return": "void", "body": "@Test (expected = ConfigurationProcessingException.class)\n    public void checkConfigurationProcessingExceptionOnWrongConfig()\n            throws Exception {\n        ISectionStrategy strategy = new OnFeatureLoadingSectionProcessingStrategy();\n        IObject config = new DSObject(\"{\\\"onFeatureLoading\\\": [\\n\" +\n                \"    {\\n\" +\n                \"      \\\"chain\\\": \\\"unknownChain\\\",\\n\" +\n                \"      \\\"messages\\\": [\\n\" +\n                \"        {\\n\" +\n                \"          \\\"key\\\": \\\"value\\\"\\n\" +\n                \"        }\\n\" +\n                \"      ]\\n\" +\n                \"    }]}\");\n        strategy.onLoadConfig(config);\n        fail();\n    }", "signature": "void checkConfigurationProcessingExceptionOnWrongConfig()", "full_signature": "@Test (expected = ConfigurationProcessingException.class) public void checkConfigurationProcessingExceptionOnWrongConfig()", "class_method_signature": "OnFeatureLoadingSectionProcessingStrategyTest.checkConfigurationProcessingExceptionOnWrongConfig()", "testcase": true, "constructor": false, "invocations": ["onLoadConfig", "fail"]}, "focal_class": {"identifier": "OnFeatureLoadingSectionProcessingStrategy", "superclass": "", "interfaces": "implements ISectionStrategy", "fields": [{"original_string": "private final IFieldName sectionNameFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "sectionNameFieldName", "var_name": "sectionNameFieldName"}, {"original_string": "private final IFieldName chainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "chainFieldName", "var_name": "chainFieldName"}, {"original_string": "private final IFieldName messagesFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messagesFieldName", "var_name": "messagesFieldName"}], "methods": [{"identifier": "OnFeatureLoadingSectionProcessingStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " OnFeatureLoadingSectionProcessingStrategy()", "full_signature": "public  OnFeatureLoadingSectionProcessingStrategy()", "class_method_signature": "OnFeatureLoadingSectionProcessingStrategy.OnFeatureLoadingSectionProcessingStrategy()", "testcase": false, "constructor": true}, {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "OnFeatureLoadingSectionProcessingStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false}, {"identifier": "getSectionName", "parameters": "()", "modifiers": "@Override public", "return": "IFieldName", "signature": "IFieldName getSectionName()", "full_signature": "@Override public IFieldName getSectionName()", "class_method_signature": "OnFeatureLoadingSectionProcessingStrategy.getSectionName()", "testcase": false, "constructor": false}], "file": "Starters/OnFeatureLoadingServiceStarter/OnFeatureLoadingStarter/src/main/java/info/smart_tools/smartactors/on_feature_loading_service_starter/on_feature_loading_starter/OnFeatureLoadingSectionProcessingStrategy.java"}, "focal_method": {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onLoadConfig(final IObject config)\n            throws ConfigurationProcessingException {\n        try {\n            List<IObject> onFeatureLoadingConfig = (List<IObject>) config.getValue(this.sectionNameFieldName);\n            IChainStorage chainStorage = IOC.resolve(IOC.resolve(IOC.getKeyForKeyStorage(),\n                    IChainStorage.class.getCanonicalName()));\n            IQueue<ITask> queue = IOC.resolve(Keys.getOrAdd(\"task_queue\"));\n\n            Integer stackDepth;\n            try {\n                stackDepth = IOC.resolve(Keys.getOrAdd(\"default_stack_depth\"));\n            } catch (ResolutionException e) {\n                stackDepth = 5;\n            }\n\n            for (IObject task : onFeatureLoadingConfig) {\n                String chainName = (String) task.getValue(this.chainFieldName);\n                Object mapId = IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), chainName);\n                IReceiverChain chain = chainStorage.resolve(mapId);\n                List<IObject> messages = (List<IObject>)task.getValue(this.messagesFieldName);\n                for (IObject message : messages) {\n                    IMessageProcessingSequence processingSequence = IOC.resolve(\n                            IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessingSequence\"),\n                            stackDepth,\n                            chain\n                    );\n                    IMessageProcessor messageProcessor = IOC.resolve(\n                            IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessor\"),\n                            queue,\n                            processingSequence\n                    );\n                    messageProcessor.process(message, (IObject) IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")));\n                }\n            }\n        } catch (ReadValueException | InvalidArgumentException | ResolutionException | MessageProcessorProcessException e) {\n            throw new ConfigurationProcessingException(\"Error occurred executing \\\"onFeatureLoading\\\" configuration section.\", e);\n        } catch (ChainNotFoundException e) {\n            throw new ConfigurationProcessingException(\"Error occurred resolving \\\"chain\\\".\", e);\n        }\n    }", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "OnFeatureLoadingSectionProcessingStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false, "invocations": ["getValue", "resolve", "resolve", "getKeyForKeyStorage", "getCanonicalName", "resolve", "getOrAdd", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "resolve", "getValue", "resolve", "resolve", "getKeyForKeyStorage", "resolve", "resolve", "getKeyForKeyStorage", "process", "resolve", "getOrAdd"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}