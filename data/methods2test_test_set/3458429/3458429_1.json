{"test_class": {"identifier": "MultiPartParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/codec/MultiPartParserTest.java"}, "test_case": {"identifier": "testBadHeaderNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadHeaderNames() {\n        String[] bad = new String[]\n                {\n                        \"Foo\\\\Bar: value\\r\\n\",\n                        \"Foo@Bar: value\\r\\n\",\n                        \"Foo,Bar: value\\r\\n\",\n                        \"Foo}Bar: value\\r\\n\",\n                        \"Foo{Bar: value\\r\\n\",\n                        \"Foo=Bar: value\\r\\n\",\n                        \"Foo>Bar: value\\r\\n\",\n                        \"Foo<Bar: value\\r\\n\",\n                        \"Foo)Bar: value\\r\\n\",\n                        \"Foo(Bar: value\\r\\n\",\n                        \"Foo?Bar: value\\r\\n\",\n                        \"Foo\\\"Bar: value\\r\\n\",\n                        \"Foo/Bar: value\\r\\n\",\n                        \"Foo]Bar: value\\r\\n\",\n                        \"Foo[Bar: value\\r\\n\",\n                        \"\\u0192\\u00f8\\u00f8\\u00df\\u00e5\\u00ae: value\\r\\n\"\n                };\n\n        for (String s : bad) {\n            ByteBuffer buffer = BufferUtils.toBuffer(\n                    \"--AaB03x\\r\\n\" + s + \"\\r\\n--AaB03x--\\r\\n\");\n\n            MultiPartParser.Handler handler = new TestHandler();\n            MultiPartParser parser = new MultiPartParser(handler, \"AaB03x\");\n\n            try {\n                parser.parse(buffer, true);\n            } catch (BadMessageException e) {\n                assertTrue(e.getMessage().contains(\"Illegal character\"));\n            }\n        }\n    }", "signature": "void testBadHeaderNames()", "full_signature": "@Test public void testBadHeaderNames()", "class_method_signature": "MultiPartParserTest.testBadHeaderNames()", "testcase": true, "constructor": false, "invocations": ["toBuffer", "parse", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "MultiPartParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final LazyLogger LOG = SystemLogger.create(MultiPartParser.class);", "modifier": "public static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(MultiPartParser.class)", "var_name": "LOG"}, {"original_string": "private static final EnumSet<State> DELIMITER_STATES = EnumSet.of(State.DELIMITER, State.DELIMITER_CLOSE, State.DELIMITER_PADDING);", "modifier": "private static final", "type": "EnumSet<State>", "declarator": "DELIMITER_STATES = EnumSet.of(State.DELIMITER, State.DELIMITER_CLOSE, State.DELIMITER_PADDING)", "var_name": "DELIMITER_STATES"}, {"original_string": "private static final int MAX_HEADER_LINE_LENGTH = 998;", "modifier": "private static final", "type": "int", "declarator": "MAX_HEADER_LINE_LENGTH = 998", "var_name": "MAX_HEADER_LINE_LENGTH"}, {"original_string": "private final Handler handler;", "modifier": "private final", "type": "Handler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private final SearchPattern delimiterSearch;", "modifier": "private final", "type": "SearchPattern", "declarator": "delimiterSearch", "var_name": "delimiterSearch"}, {"original_string": "private String fieldName;", "modifier": "private", "type": "String", "declarator": "fieldName", "var_name": "fieldName"}, {"original_string": "private String fieldValue;", "modifier": "private", "type": "String", "declarator": "fieldValue", "var_name": "fieldValue"}, {"original_string": "private State state = State.PREAMBLE;", "modifier": "private", "type": "State", "declarator": "state = State.PREAMBLE", "var_name": "state"}, {"original_string": "private FieldState fieldState = FieldState.FIELD;", "modifier": "private", "type": "FieldState", "declarator": "fieldState = FieldState.FIELD", "var_name": "fieldState"}, {"original_string": "private int partialBoundary = 2;", "modifier": "private", "type": "int", "declarator": "partialBoundary = 2", "var_name": "partialBoundary"}, {"original_string": "private boolean cr;", "modifier": "private", "type": "boolean", "declarator": "cr", "var_name": "cr"}, {"original_string": "private ByteBuffer patternBuffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "patternBuffer", "var_name": "patternBuffer"}, {"original_string": "private final Utf8StringBuilder string = new Utf8StringBuilder();", "modifier": "private final", "type": "Utf8StringBuilder", "declarator": "string = new Utf8StringBuilder()", "var_name": "string"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private int totalHeaderLineLength = -1;", "modifier": "private", "type": "int", "declarator": "totalHeaderLineLength = -1", "var_name": "totalHeaderLineLength"}], "methods": [{"identifier": "MultiPartParser", "parameters": "(Handler handler, String boundary)", "modifiers": "public", "return": "", "signature": " MultiPartParser(Handler handler, String boundary)", "full_signature": "public  MultiPartParser(Handler handler, String boundary)", "class_method_signature": "MultiPartParser.MultiPartParser(Handler handler, String boundary)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MultiPartParser.reset()", "testcase": false, "constructor": false}, {"identifier": "getHandler", "parameters": "()", "modifiers": "public", "return": "Handler", "signature": "Handler getHandler()", "full_signature": "public Handler getHandler()", "class_method_signature": "MultiPartParser.getHandler()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "MultiPartParser.getState()", "testcase": false, "constructor": false}, {"identifier": "isState", "parameters": "(State state)", "modifiers": "public", "return": "boolean", "signature": "boolean isState(State state)", "full_signature": "public boolean isState(State state)", "class_method_signature": "MultiPartParser.isState(State state)", "testcase": false, "constructor": false}, {"identifier": "hasNextByte", "parameters": "(ByteBuffer buffer)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasNextByte(ByteBuffer buffer)", "full_signature": "private static boolean hasNextByte(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.hasNextByte(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "HttpTokens.Token", "signature": "HttpTokens.Token next(ByteBuffer buffer)", "full_signature": "private HttpTokens.Token next(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.next(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "setString", "parameters": "(String s)", "modifiers": "private", "return": "void", "signature": "void setString(String s)", "full_signature": "private void setString(String s)", "class_method_signature": "MultiPartParser.setString(String s)", "testcase": false, "constructor": false}, {"identifier": "takeString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String takeString()", "full_signature": "private String takeString()", "class_method_signature": "MultiPartParser.takeString()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(ByteBuffer buffer, boolean last)", "modifiers": "public", "return": "boolean", "signature": "boolean parse(ByteBuffer buffer, boolean last)", "full_signature": "public boolean parse(ByteBuffer buffer, boolean last)", "class_method_signature": "MultiPartParser.parse(ByteBuffer buffer, boolean last)", "testcase": false, "constructor": false}, {"identifier": "parsePreamble", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "void", "signature": "void parsePreamble(ByteBuffer buffer)", "full_signature": "private void parsePreamble(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.parsePreamble(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parseDelimiter", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "void", "signature": "void parseDelimiter(ByteBuffer buffer)", "full_signature": "private void parseDelimiter(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.parseDelimiter(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parseMimePartHeaders", "parameters": "(ByteBuffer buffer)", "modifiers": "protected", "return": "boolean", "signature": "boolean parseMimePartHeaders(ByteBuffer buffer)", "full_signature": "protected boolean parseMimePartHeaders(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.parseMimePartHeaders(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "handleField", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleField()", "full_signature": "private void handleField()", "class_method_signature": "MultiPartParser.handleField()", "testcase": false, "constructor": false}, {"identifier": "parseOctetContent", "parameters": "(ByteBuffer buffer)", "modifiers": "protected", "return": "boolean", "signature": "boolean parseOctetContent(ByteBuffer buffer)", "full_signature": "protected boolean parseOctetContent(ByteBuffer buffer)", "class_method_signature": "MultiPartParser.parseOctetContent(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(State state)", "modifiers": "private", "return": "void", "signature": "void setState(State state)", "full_signature": "private void setState(State state)", "class_method_signature": "MultiPartParser.setState(State state)", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(FieldState state)", "modifiers": "private", "return": "void", "signature": "void setState(FieldState state)", "full_signature": "private void setState(FieldState state)", "class_method_signature": "MultiPartParser.setState(FieldState state)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiPartParser.toString()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/codec/MultiPartParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(ByteBuffer buffer, boolean last)", "modifiers": "public", "return": "boolean", "body": "public boolean parse(ByteBuffer buffer, boolean last) {\n        boolean handle = false;\n        while (!handle && BufferUtils.hasContent(buffer)) {\n            switch (state) {\n                case PREAMBLE:\n                    parsePreamble(buffer);\n                    continue;\n\n                case DELIMITER:\n                case DELIMITER_PADDING:\n                case DELIMITER_CLOSE:\n                    parseDelimiter(buffer);\n                    continue;\n\n                case BODY_PART:\n                    handle = parseMimePartHeaders(buffer);\n                    break;\n\n                case FIRST_OCTETS:\n                case OCTETS:\n                    handle = parseOctetContent(buffer);\n                    break;\n\n                case EPILOGUE:\n                    BufferUtils.clear(buffer);\n                    break;\n\n                case END:\n                    handle = true;\n                    break;\n\n                default:\n                    throw new IllegalStateException();\n            }\n        }\n\n        if (last && BufferUtils.isEmpty(buffer)) {\n            if (state == State.EPILOGUE) {\n                state = State.END;\n\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"messageComplete {}\", this);\n\n                return handler.messageComplete();\n            } else {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"earlyEOF {}\", this);\n\n                handler.earlyEOF();\n                return true;\n            }\n        }\n\n        return handle;\n    }", "signature": "boolean parse(ByteBuffer buffer, boolean last)", "full_signature": "public boolean parse(ByteBuffer buffer, boolean last)", "class_method_signature": "MultiPartParser.parse(ByteBuffer buffer, boolean last)", "testcase": false, "constructor": false, "invocations": ["hasContent", "parsePreamble", "parseDelimiter", "parseMimePartHeaders", "parseOctetContent", "clear", "isEmpty", "isDebugEnabled", "debug", "messageComplete", "isDebugEnabled", "debug", "earlyEOF"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}