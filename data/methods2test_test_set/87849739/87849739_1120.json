{"test_class": {"identifier": "ImmutableAccessControlListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AuthorizationSubject KNOWN_AUTH_SUBJECT_FOO = newAuthSubject(\"foo\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "KNOWN_AUTH_SUBJECT_FOO = newAuthSubject(\"foo\")", "var_name": "KNOWN_AUTH_SUBJECT_FOO"}, {"original_string": "private static final AuthorizationSubject KNOWN_AUTH_SUBJECT_BAR = newAuthSubject(\"bar\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "KNOWN_AUTH_SUBJECT_BAR = newAuthSubject(\"bar\")", "var_name": "KNOWN_AUTH_SUBJECT_BAR"}, {"original_string": "private static final AuthorizationSubject KNOWN_AUTH_SUBJECT_BAZ = newAuthSubject(\"baz\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "KNOWN_AUTH_SUBJECT_BAZ = newAuthSubject(\"baz\")", "var_name": "KNOWN_AUTH_SUBJECT_BAZ"}, {"original_string": "private AccessControlList underTest = null;", "modifier": "private", "type": "AccessControlList", "declarator": "underTest = null", "var_name": "underTest"}], "file": "model/things/src/test/java/org/eclipse/ditto/model/things/ImmutableAccessControlListTest.java"}, "test_case": {"identifier": "mergeAclPermissionWithMultipleAuthorizationSubjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeAclPermissionWithMultipleAuthorizationSubjects() {\n        final Permission permission = Permission.READ;\n        underTest = underTest.merge(permission, KNOWN_AUTH_SUBJECT_FOO, KNOWN_AUTH_SUBJECT_BAZ);\n\n        assertThat(underTest).containsOnly(newAclEntry(KNOWN_AUTH_SUBJECT_FOO, permission),\n                newAclEntry(KNOWN_AUTH_SUBJECT_BAZ, permission));\n    }", "signature": "void mergeAclPermissionWithMultipleAuthorizationSubjects()", "full_signature": "@Test public void mergeAclPermissionWithMultipleAuthorizationSubjects()", "class_method_signature": "ImmutableAccessControlListTest.mergeAclPermissionWithMultipleAuthorizationSubjects()", "testcase": true, "constructor": false, "invocations": ["merge", "containsOnly", "assertThat", "newAclEntry", "newAclEntry"]}, "focal_class": {"identifier": "ImmutableAccessControlList", "superclass": "", "interfaces": "implements AccessControlList", "fields": [{"original_string": "private static final JsonFieldDefinition<Integer> JSON_SCHEMA_VERSION =\n            JsonFactory.newIntFieldDefinition(JsonSchemaVersion.getJsonKey(), FieldType.SPECIAL, FieldType.HIDDEN,\n                    JsonSchemaVersion.V_1);", "modifier": "private static final", "type": "JsonFieldDefinition<Integer>", "declarator": "JSON_SCHEMA_VERSION =\n            JsonFactory.newIntFieldDefinition(JsonSchemaVersion.getJsonKey(), FieldType.SPECIAL, FieldType.HIDDEN,\n                    JsonSchemaVersion.V_1)", "var_name": "JSON_SCHEMA_VERSION"}, {"original_string": "private final Map<AuthorizationSubject, AclEntry> entries;", "modifier": "private final", "type": "Map<AuthorizationSubject, AclEntry>", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "ImmutableAccessControlList", "parameters": "(final Map<AuthorizationSubject, AclEntry> theEntries)", "modifiers": "private", "return": "", "signature": " ImmutableAccessControlList(final Map<AuthorizationSubject, AclEntry> theEntries)", "full_signature": "private  ImmutableAccessControlList(final Map<AuthorizationSubject, AclEntry> theEntries)", "class_method_signature": "ImmutableAccessControlList.ImmutableAccessControlList(final Map<AuthorizationSubject, AclEntry> theEntries)", "testcase": false, "constructor": true}, {"identifier": "ImmutableAccessControlList", "parameters": "(final Collection<AclEntry> theEntries)", "modifiers": "private", "return": "", "signature": " ImmutableAccessControlList(final Collection<AclEntry> theEntries)", "full_signature": "private  ImmutableAccessControlList(final Collection<AclEntry> theEntries)", "class_method_signature": "ImmutableAccessControlList.ImmutableAccessControlList(final Collection<AclEntry> theEntries)", "testcase": false, "constructor": true}, {"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "AccessControlList", "signature": "AccessControlList empty()", "full_signature": "public static AccessControlList empty()", "class_method_signature": "ImmutableAccessControlList.empty()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final AclEntry entry, final AclEntry... furtherEntries)", "modifiers": "public static", "return": "AccessControlList", "signature": "AccessControlList of(final AclEntry entry, final AclEntry... furtherEntries)", "full_signature": "public static AccessControlList of(final AclEntry entry, final AclEntry... furtherEntries)", "class_method_signature": "ImmutableAccessControlList.of(final AclEntry entry, final AclEntry... furtherEntries)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final Iterable<AclEntry> entries)", "modifiers": "public static", "return": "AccessControlList", "signature": "AccessControlList of(final Iterable<AclEntry> entries)", "full_signature": "public static AccessControlList of(final Iterable<AclEntry> entries)", "class_method_signature": "ImmutableAccessControlList.of(final Iterable<AclEntry> entries)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "AccessControlList", "signature": "AccessControlList fromJson(final JsonObject jsonObject)", "full_signature": "public static AccessControlList fromJson(final JsonObject jsonObject)", "class_method_signature": "ImmutableAccessControlList.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final AclEntry entry)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList merge(final AclEntry entry)", "full_signature": "@Override public AccessControlList merge(final AclEntry entry)", "class_method_signature": "ImmutableAccessControlList.merge(final AclEntry entry)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList merge(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "full_signature": "@Override public AccessControlList merge(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "class_method_signature": "ImmutableAccessControlList.merge(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final Permission permission, final AuthorizationSubject authorizationSubject,\n            final AuthorizationSubject... furtherAuthorizationSubjects)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList merge(final Permission permission, final AuthorizationSubject authorizationSubject,\n            final AuthorizationSubject... furtherAuthorizationSubjects)", "full_signature": "@Override public AccessControlList merge(final Permission permission, final AuthorizationSubject authorizationSubject,\n            final AuthorizationSubject... furtherAuthorizationSubjects)", "class_method_signature": "ImmutableAccessControlList.merge(final Permission permission, final AuthorizationSubject authorizationSubject,\n            final AuthorizationSubject... furtherAuthorizationSubjects)", "testcase": false, "constructor": false}, {"identifier": "setEntry", "parameters": "(final AclEntry aclEntry)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList setEntry(final AclEntry aclEntry)", "full_signature": "@Override public AccessControlList setEntry(final AclEntry aclEntry)", "class_method_signature": "ImmutableAccessControlList.setEntry(final AclEntry aclEntry)", "testcase": false, "constructor": false}, {"identifier": "setForAllAuthorizationSubjects", "parameters": "(final Permissions permissions)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList setForAllAuthorizationSubjects(final Permissions permissions)", "full_signature": "@Override public AccessControlList setForAllAuthorizationSubjects(final Permissions permissions)", "class_method_signature": "ImmutableAccessControlList.setForAllAuthorizationSubjects(final Permissions permissions)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedSubjectsFor", "parameters": "(final Permission permission,\n            final Permission... furtherPermissions)", "modifiers": "@Override public", "return": "Set<AuthorizationSubject>", "signature": "Set<AuthorizationSubject> getAuthorizedSubjectsFor(final Permission permission,\n            final Permission... furtherPermissions)", "full_signature": "@Override public Set<AuthorizationSubject> getAuthorizedSubjectsFor(final Permission permission,\n            final Permission... furtherPermissions)", "class_method_signature": "ImmutableAccessControlList.getAuthorizedSubjectsFor(final Permission permission,\n            final Permission... furtherPermissions)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(final AuthorizationContext authorizationContext, final Permission permission,\n            final Permission... furtherPermissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(final AuthorizationContext authorizationContext, final Permission permission,\n            final Permission... furtherPermissions)", "full_signature": "@Override public boolean hasPermission(final AuthorizationContext authorizationContext, final Permission permission,\n            final Permission... furtherPermissions)", "class_method_signature": "ImmutableAccessControlList.hasPermission(final AuthorizationContext authorizationContext, final Permission permission,\n            final Permission... furtherPermissions)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "full_signature": "@Override public boolean hasPermission(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "class_method_signature": "ImmutableAccessControlList.hasPermission(final AuthorizationSubject authorizationSubject, final Permission permission,\n            final Permission... furtherPermissions)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedSubjectsFor", "parameters": "(final Permissions expectedPermissions)", "modifiers": "@Override public", "return": "Set<AuthorizationSubject>", "signature": "Set<AuthorizationSubject> getAuthorizedSubjectsFor(final Permissions expectedPermissions)", "full_signature": "@Override public Set<AuthorizationSubject> getAuthorizedSubjectsFor(final Permissions expectedPermissions)", "class_method_signature": "ImmutableAccessControlList.getAuthorizedSubjectsFor(final Permissions expectedPermissions)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final AuthorizationSubject authorizationSubject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final AuthorizationSubject authorizationSubject)", "full_signature": "@Override public boolean contains(final AuthorizationSubject authorizationSubject)", "class_method_signature": "ImmutableAccessControlList.contains(final AuthorizationSubject authorizationSubject)", "testcase": false, "constructor": false}, {"identifier": "getEntryFor", "parameters": "(final AuthorizationSubject authorizationSubject)", "modifiers": "@Override public", "return": "Optional<AclEntry>", "signature": "Optional<AclEntry> getEntryFor(final AuthorizationSubject authorizationSubject)", "full_signature": "@Override public Optional<AclEntry> getEntryFor(final AuthorizationSubject authorizationSubject)", "class_method_signature": "ImmutableAccessControlList.getEntryFor(final AuthorizationSubject authorizationSubject)", "testcase": false, "constructor": false}, {"identifier": "getPermissionsOf", "parameters": "(final AuthorizationSubject authorizationSubject)", "modifiers": "@Override public", "return": "Permissions", "signature": "Permissions getPermissionsOf(final AuthorizationSubject authorizationSubject)", "full_signature": "@Override public Permissions getPermissionsOf(final AuthorizationSubject authorizationSubject)", "class_method_signature": "ImmutableAccessControlList.getPermissionsOf(final AuthorizationSubject authorizationSubject)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(final AclEntry entry)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList removeEntry(final AclEntry entry)", "full_signature": "@Override public AccessControlList removeEntry(final AclEntry entry)", "class_method_signature": "ImmutableAccessControlList.removeEntry(final AclEntry entry)", "testcase": false, "constructor": false}, {"identifier": "removePermission", "parameters": "(final AuthorizationSubject authorizationSubject,\n            final Permission permission, final Permission... furtherPermissions)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList removePermission(final AuthorizationSubject authorizationSubject,\n            final Permission permission, final Permission... furtherPermissions)", "full_signature": "@Override public AccessControlList removePermission(final AuthorizationSubject authorizationSubject,\n            final Permission permission, final Permission... furtherPermissions)", "class_method_signature": "ImmutableAccessControlList.removePermission(final AuthorizationSubject authorizationSubject,\n            final Permission permission, final Permission... furtherPermissions)", "testcase": false, "constructor": false}, {"identifier": "removeAllPermissionsOf", "parameters": "(final AuthorizationSubject authorizationSubject)", "modifiers": "@Override public", "return": "AccessControlList", "signature": "AccessControlList removeAllPermissionsOf(final AuthorizationSubject authorizationSubject)", "full_signature": "@Override public AccessControlList removeAllPermissionsOf(final AuthorizationSubject authorizationSubject)", "class_method_signature": "ImmutableAccessControlList.removeAllPermissionsOf(final AuthorizationSubject authorizationSubject)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutableAccessControlList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ImmutableAccessControlList.getSize()", "testcase": false, "constructor": false}, {"identifier": "getEntriesSet", "parameters": "()", "modifiers": "@Override public", "return": "Set<AclEntry>", "signature": "Set<AclEntry> getEntriesSet()", "full_signature": "@Override public Set<AclEntry> getEntriesSet()", "class_method_signature": "ImmutableAccessControlList.getEntriesSet()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<AclEntry>", "signature": "Stream<AclEntry> stream()", "full_signature": "@Override public Stream<AclEntry> stream()", "class_method_signature": "ImmutableAccessControlList.stream()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<AclEntry>", "signature": "Iterator<AclEntry> iterator()", "full_signature": "@Override public Iterator<AclEntry> iterator()", "class_method_signature": "ImmutableAccessControlList.iterator()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutableAccessControlList.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableAccessControlList.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableAccessControlList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableAccessControlList.toString()", "testcase": false, "constructor": false}, {"identifier": "copyEntries", "parameters": "()", "modifiers": "private", "return": "Map<AuthorizationSubject, AclEntry>", "signature": "Map<AuthorizationSubject, AclEntry> copyEntries()", "full_signature": "private Map<AuthorizationSubject, AclEntry> copyEntries()", "class_method_signature": "ImmutableAccessControlList.copyEntries()", "testcase": false, "constructor": false}], "file": "model/things/src/main/java/org/eclipse/ditto/model/things/ImmutableAccessControlList.java"}, "focal_method": {"identifier": "merge", "parameters": "(final AclEntry entry)", "modifiers": "@Override public", "return": "AccessControlList", "body": "@Override\n    public AccessControlList merge(final AclEntry entry) {\n        checkNotNull(entry, \"ACL entry to be added\");\n\n        final AuthorizationSubject authSubject = entry.getAuthorizationSubject();\n        final Permissions permissions = getPermissionsOf(authSubject);\n        permissions.addAll(entry.getPermissions());\n\n        final Map<AuthorizationSubject, AclEntry> entriesCopy = copyEntries();\n        entriesCopy.put(authSubject, AccessControlListModelFactory.newAclEntry(authSubject, permissions));\n\n        return new ImmutableAccessControlList(entriesCopy);\n    }", "signature": "AccessControlList merge(final AclEntry entry)", "full_signature": "@Override public AccessControlList merge(final AclEntry entry)", "class_method_signature": "ImmutableAccessControlList.merge(final AclEntry entry)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getAuthorizationSubject", "getPermissionsOf", "addAll", "getPermissions", "copyEntries", "put", "newAclEntry"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}