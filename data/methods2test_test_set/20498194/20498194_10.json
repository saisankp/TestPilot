{"test_class": {"identifier": "TestPropertyLoader", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/pig/oink/common/config/TestPropertyLoader.java"}, "test_case": {"identifier": "testPropertyLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPropertyLoader() {\n\t\tPropertyLoader.getInstance().init(\"TraverserTests.properties\");\n\t\tAssert.assertNotNull(PropertyLoader.getInstance().getProperty(\"FileTraverser.basePath\"));\n\t\tAssert.assertNotNull(PropertyLoader.getInstance().getProperty(\"HDFSTraverser.basePath\"));\n\t\tPropertyLoader.getInstance().setProperty(\"test\", \"test1\");\n\t\tAssert.assertEquals(PropertyLoader.getInstance().getProperty(\"test\"), \"test1\");\n\t\tSystem.setProperty(\"test1\", \"test2\");\n\t\tAssert.assertEquals(PropertyLoader.getInstance().getProperty(\"test1\"), \"test2\");\n\t\tAssert.assertNull(PropertyLoader.getInstance().getProperty(\"test2\"));\n\t\t\n\t\ttry {\n\t\t\tPropertyLoader.getInstance().init(null);\n\t\t\tAssert.fail();\n\t\t} catch(IllegalArgumentException e) {\n\t\t}\n\t\ttry {\n\t\t\tPropertyLoader.getInstance().init(\"abc\");\n\t\t\tAssert.fail();\n\t\t} catch(Exception e) {\n\t\t}\n\n\t}", "signature": "void testPropertyLoader()", "full_signature": "@Test public void testPropertyLoader()", "class_method_signature": "TestPropertyLoader.testPropertyLoader()", "testcase": true, "constructor": false, "invocations": ["init", "getInstance", "assertNotNull", "getProperty", "getInstance", "assertNotNull", "getProperty", "getInstance", "setProperty", "getInstance", "assertEquals", "getProperty", "getInstance", "setProperty", "assertEquals", "getProperty", "getInstance", "assertNull", "getProperty", "getInstance", "init", "getInstance", "fail", "init", "getInstance", "fail"]}, "focal_class": {"identifier": "PropertyLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(PropertyLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(PropertyLoader.class)", "var_name": "logger"}, {"original_string": "private static Properties properties = new Properties();", "modifier": "private static", "type": "Properties", "declarator": "properties = new Properties()", "var_name": "properties"}, {"original_string": "private static final PropertyLoader instance = new  PropertyLoader();", "modifier": "private static final", "type": "PropertyLoader", "declarator": "instance = new  PropertyLoader()", "var_name": "instance"}], "methods": [{"identifier": "PropertyLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertyLoader()", "full_signature": "private  PropertyLoader()", "class_method_signature": "PropertyLoader.PropertyLoader()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "PropertyLoader", "signature": "PropertyLoader getInstance()", "full_signature": "public static PropertyLoader getInstance()", "class_method_signature": "PropertyLoader.getInstance()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void init(String path)", "full_signature": "public void init(String path)", "class_method_signature": "PropertyLoader.init(String path)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getProperty(String key)", "full_signature": "public String getProperty(String key)", "class_method_signature": "PropertyLoader.getProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void setProperty(String key, String value)", "full_signature": "public void setProperty(String key, String value)", "class_method_signature": "PropertyLoader.setProperty(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getKeySet", "parameters": "()", "modifiers": "public", "return": "Set<Object>", "signature": "Set<Object> getKeySet()", "full_signature": "public Set<Object> getKeySet()", "class_method_signature": "PropertyLoader.getKeySet()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/pig/oink/common/config/PropertyLoader.java"}, "focal_method": {"identifier": "PropertyLoader", "parameters": "()", "modifiers": "private", "return": "", "body": "private PropertyLoader() {\n\t}", "signature": " PropertyLoader()", "full_signature": "private  PropertyLoader()", "class_method_signature": "PropertyLoader.PropertyLoader()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 20498194, "url": "https://github.com/eBay/oink", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 25, "size": 8039, "license": "licensed"}}