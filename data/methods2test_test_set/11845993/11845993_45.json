{"test_class": {"identifier": "StagemonitorJdbcEventListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-jdbc/src/test/java/org/stagemonitor/jdbc/StagemonitorJdbcEventListenerTest.java"}, "test_case": {"identifier": "getMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getMethod() throws Exception {\n\t\tassertSoftly(softly -> {\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(\"select * from stagemonitor\")).isEqualTo(\"SELECT\");\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(\" update stagemonitor set bug=false\")).isEqualTo(\"UPDATE\");\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(\"Commit\")).isEqualTo(\"COMMIT\");\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(\"\")).isEqualTo(\"\");\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(\" \")).isEqualTo(\"\");\n\t\t\tsoftly.assertThat(StagemonitorJdbcEventListener.getMethod(null)).isNull();\n\t\t});\n\t}", "signature": "void getMethod()", "full_signature": "@Test public void getMethod()", "class_method_signature": "StagemonitorJdbcEventListenerTest.getMethod()", "testcase": true, "constructor": false, "invocations": ["assertSoftly", "isEqualTo", "assertThat", "getMethod", "isEqualTo", "assertThat", "getMethod", "isEqualTo", "assertThat", "getMethod", "isEqualTo", "assertThat", "getMethod", "isEqualTo", "assertThat", "getMethod", "isNull", "assertThat", "getMethod"]}, "focal_class": {"identifier": "StagemonitorJdbcEventListener", "superclass": "extends SimpleJdbcEventListener", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StagemonitorJdbcEventListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StagemonitorJdbcEventListener.class)", "var_name": "logger"}, {"original_string": "private static final String DB_STATEMENT = \"db.statement\";", "modifier": "private static final", "type": "String", "declarator": "DB_STATEMENT = \"db.statement\"", "var_name": "DB_STATEMENT"}, {"original_string": "private static final double MILLISECOND_IN_NANOS = TimeUnit.MILLISECONDS.toNanos(1);", "modifier": "private static final", "type": "double", "declarator": "MILLISECOND_IN_NANOS = TimeUnit.MILLISECONDS.toNanos(1)", "var_name": "MILLISECOND_IN_NANOS"}, {"original_string": "private static final String CONNECTION_WRAPPED_COUNT_ATTRIBUTE = StagemonitorJdbcEventListener.class.getName() + \".wrappedCount\";", "modifier": "private static final", "type": "String", "declarator": "CONNECTION_WRAPPED_COUNT_ATTRIBUTE = StagemonitorJdbcEventListener.class.getName() + \".wrappedCount\"", "var_name": "CONNECTION_WRAPPED_COUNT_ATTRIBUTE"}, {"original_string": "private static final String TIME_TO_GET_CONNECTION_MS_ATTRIBUTE = StagemonitorJdbcEventListener.class.getName() + \".getTimeToGetConnect\";", "modifier": "private static final", "type": "String", "declarator": "TIME_TO_GET_CONNECTION_MS_ATTRIBUTE = StagemonitorJdbcEventListener.class.getName() + \".getTimeToGetConnect\"", "var_name": "TIME_TO_GET_CONNECTION_MS_ATTRIBUTE"}, {"original_string": "private final JdbcPlugin jdbcPlugin;", "modifier": "private final", "type": "JdbcPlugin", "declarator": "jdbcPlugin", "var_name": "jdbcPlugin"}, {"original_string": "private final MetricName.MetricNameTemplate getConnectionTemplate = name(\"get_jdbc_connection\").templateFor(\"url\");", "modifier": "private final", "type": "MetricName.MetricNameTemplate", "declarator": "getConnectionTemplate = name(\"get_jdbc_connection\").templateFor(\"url\")", "var_name": "getConnectionTemplate"}, {"original_string": "private final ConcurrentMap<DataSource, MetaData> dataSourceUrlMap = new ConcurrentHashMap<DataSource, MetaData>();", "modifier": "private final", "type": "ConcurrentMap<DataSource, MetaData>", "declarator": "dataSourceUrlMap = new ConcurrentHashMap<DataSource, MetaData>()", "var_name": "dataSourceUrlMap"}, {"original_string": "private CorePlugin corePlugin;", "modifier": "private", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "methods": [{"identifier": "StagemonitorJdbcEventListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " StagemonitorJdbcEventListener()", "full_signature": "public  StagemonitorJdbcEventListener()", "class_method_signature": "StagemonitorJdbcEventListener.StagemonitorJdbcEventListener()", "testcase": false, "constructor": true}, {"identifier": "StagemonitorJdbcEventListener", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "public", "return": "", "signature": " StagemonitorJdbcEventListener(ConfigurationRegistry configuration)", "full_signature": "public  StagemonitorJdbcEventListener(ConfigurationRegistry configuration)", "class_method_signature": "StagemonitorJdbcEventListener.StagemonitorJdbcEventListener(ConfigurationRegistry configuration)", "testcase": false, "constructor": true}, {"identifier": "onConnectionWrapped", "parameters": "(ConnectionInformation connectionInformation)", "modifiers": "@Override public", "return": "void", "signature": "void onConnectionWrapped(ConnectionInformation connectionInformation)", "full_signature": "@Override public void onConnectionWrapped(ConnectionInformation connectionInformation)", "class_method_signature": "StagemonitorJdbcEventListener.onConnectionWrapped(ConnectionInformation connectionInformation)", "testcase": false, "constructor": false}, {"identifier": "incrementAndGetContextValue", "parameters": "(final Span span, final String contextAttributeName, final T incrementValue)", "modifiers": "private static", "return": "T", "signature": "T incrementAndGetContextValue(final Span span, final String contextAttributeName, final T incrementValue)", "full_signature": "private static T incrementAndGetContextValue(final Span span, final String contextAttributeName, final T incrementValue)", "class_method_signature": "StagemonitorJdbcEventListener.incrementAndGetContextValue(final Span span, final String contextAttributeName, final T incrementValue)", "testcase": false, "constructor": false}, {"identifier": "ensureUrlExistsForDataSource", "parameters": "(DataSource dataSource, Connection connection)", "modifiers": "private", "return": "DataSource", "signature": "DataSource ensureUrlExistsForDataSource(DataSource dataSource, Connection connection)", "full_signature": "private DataSource ensureUrlExistsForDataSource(DataSource dataSource, Connection connection)", "class_method_signature": "StagemonitorJdbcEventListener.ensureUrlExistsForDataSource(DataSource dataSource, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "onBeforeAnyExecute", "parameters": "(StatementInformation statementInformation)", "modifiers": "@Override public", "return": "void", "signature": "void onBeforeAnyExecute(StatementInformation statementInformation)", "full_signature": "@Override public void onBeforeAnyExecute(StatementInformation statementInformation)", "class_method_signature": "StagemonitorJdbcEventListener.onBeforeAnyExecute(StatementInformation statementInformation)", "testcase": false, "constructor": false}, {"identifier": "onAfterAnyExecute", "parameters": "(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)", "modifiers": "@Override public", "return": "void", "signature": "void onAfterAnyExecute(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)", "full_signature": "@Override public void onAfterAnyExecute(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)", "class_method_signature": "StagemonitorJdbcEventListener.onAfterAnyExecute(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(String sql)", "modifiers": "static", "return": "String", "signature": "String getMethod(String sql)", "full_signature": "static String getMethod(String sql)", "class_method_signature": "StagemonitorJdbcEventListener.getMethod(String sql)", "testcase": false, "constructor": false}, {"identifier": "getSql", "parameters": "(String prepared, String sql)", "modifiers": "private", "return": "String", "signature": "String getSql(String prepared, String sql)", "full_signature": "private String getSql(String prepared, String sql)", "class_method_signature": "StagemonitorJdbcEventListener.getSql(String prepared, String sql)", "testcase": false, "constructor": false}], "file": "stagemonitor-jdbc/src/main/java/org/stagemonitor/jdbc/StagemonitorJdbcEventListener.java"}, "focal_method": {"identifier": "getMethod", "parameters": "(String sql)", "modifiers": "static", "return": "String", "body": "static String getMethod(String sql) {\n\t\tif (sql == null) {\n\t\t\treturn null;\n\t\t}\n\t\tsql = sql.trim();\n\t\tfinal int indexOfWhitespace = sql.indexOf(' ');\n\t\tif (indexOfWhitespace > 0) {\n\t\t\treturn sql.substring(0, indexOfWhitespace).toUpperCase();\n\t\t} else {\n\t\t\t// for example COMMIT\n\t\t\treturn sql.toUpperCase();\n\t\t}\n\t}", "signature": "String getMethod(String sql)", "full_signature": "static String getMethod(String sql)", "class_method_signature": "StagemonitorJdbcEventListener.getMethod(String sql)", "testcase": false, "constructor": false, "invocations": ["trim", "indexOf", "toUpperCase", "substring", "toUpperCase"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}