{"test_class": {"identifier": "DataTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DataTable dt = new DataTable(1);", "modifier": "private static final", "type": "DataTable", "declarator": "dt = new DataTable(1)", "var_name": "dt"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/excel/DataTableTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        DataTable data = new DataTable(1);\n        data.addRow(\"Name\", \"Surname\", \"Age\", \"Sex\");\n        data.addRow(\"John\", \"Doe\", \"14\", \"M\");\n        data.addRow(\"Alexander\", \"Appleseed\", \"99\", \"M\");\n        data.addRow(\"Alex\", \"Jones\", \"\", \"F\");\n        data.addRow(\"Felix\", \"Fog\");\n        \n        String expected = \"\\n\" +\n                \"+---------------------------+\\n\" +\n                \"|Name     |Surname  |Age|Sex|\\n\" +\n                \"+---------------------------+\\n\" +\n                \"|John     |Doe      |14 |M  |\\n\" +\n                \"+---------------------------+\\n\" +\n                \"|Alexander|Appleseed|99 |M  |\\n\" +\n                \"+---------------------------+\\n\" +\n                \"|Alex     |Jones    |   |F  |\\n\" +\n                \"+---------------------------+\\n\" +\n                \"|Felix    |Fog      |   |   |\\n\" +\n                \"+---------------------------+\\n\";\n        \n        assertThat(data.toString(), is(expected));\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "DataTableTest.testToString()", "testcase": true, "constructor": false, "invocations": ["addRow", "addRow", "addRow", "addRow", "addRow", "assertThat", "toString", "is"]}, "focal_class": {"identifier": "DataTable", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTable.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTable.class)", "var_name": "LOG"}, {"original_string": "private final List<List<String>> data = new ArrayList<>();", "modifier": "private final", "type": "List<List<String>>", "declarator": "data = new ArrayList<>()", "var_name": "data"}, {"original_string": "private final TreeSet<Integer> pageNumbers = new TreeSet<>();", "modifier": "private final", "type": "TreeSet<Integer>", "declarator": "pageNumbers = new TreeSet<>()", "var_name": "pageNumbers"}], "methods": [{"identifier": "DataTable", "parameters": "(int pageNumber)", "modifiers": "public", "return": "", "signature": " DataTable(int pageNumber)", "full_signature": "public  DataTable(int pageNumber)", "class_method_signature": "DataTable.DataTable(int pageNumber)", "testcase": false, "constructor": true}, {"identifier": "DataTable", "parameters": "(Collection<Integer> pageNumbers)", "modifiers": "public", "return": "", "signature": " DataTable(Collection<Integer> pageNumbers)", "full_signature": "public  DataTable(Collection<Integer> pageNumbers)", "class_method_signature": "DataTable.DataTable(Collection<Integer> pageNumbers)", "testcase": false, "constructor": true}, {"identifier": "addRow", "parameters": "(String... dataRow)", "modifiers": "public", "return": "DataTable", "signature": "DataTable addRow(String... dataRow)", "full_signature": "public DataTable addRow(String... dataRow)", "class_method_signature": "DataTable.addRow(String... dataRow)", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(List<String> dataRow)", "modifiers": "public", "return": "void", "signature": "void addRow(List<String> dataRow)", "full_signature": "public void addRow(List<String> dataRow)", "class_method_signature": "DataTable.addRow(List<String> dataRow)", "testcase": false, "constructor": false}, {"identifier": "addRows", "parameters": "(List<List<String>> dataRows)", "modifiers": "public", "return": "void", "signature": "void addRows(List<List<String>> dataRows)", "full_signature": "public void addRows(List<List<String>> dataRows)", "class_method_signature": "DataTable.addRows(List<List<String>> dataRows)", "testcase": false, "constructor": false}, {"identifier": "headerRow", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> headerRow()", "full_signature": "public List<String> headerRow()", "class_method_signature": "DataTable.headerRow()", "testcase": false, "constructor": false}, {"identifier": "headerRowIgnoreBlanks", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> headerRowIgnoreBlanks()", "full_signature": "public List<String> headerRowIgnoreBlanks()", "class_method_signature": "DataTable.headerRowIgnoreBlanks()", "testcase": false, "constructor": false}, {"identifier": "hasSameHeaderAs", "parameters": "(DataTable other)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSameHeaderAs(DataTable other)", "full_signature": "public boolean hasSameHeaderAs(DataTable other)", "class_method_signature": "DataTable.hasSameHeaderAs(DataTable other)", "testcase": false, "constructor": false}, {"identifier": "hasSameHeaderBlanksIgnoredAs", "parameters": "(DataTable other)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSameHeaderBlanksIgnoredAs(DataTable other)", "full_signature": "public boolean hasSameHeaderBlanksIgnoredAs(DataTable other)", "class_method_signature": "DataTable.hasSameHeaderBlanksIgnoredAs(DataTable other)", "testcase": false, "constructor": false}, {"identifier": "hasSameColumnCountAs", "parameters": "(DataTable other)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSameColumnCountAs(DataTable other)", "full_signature": "public boolean hasSameColumnCountAs(DataTable other)", "class_method_signature": "DataTable.hasSameColumnCountAs(DataTable other)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "List<List<String>>", "signature": "List<List<String>> getData()", "full_signature": "public List<List<String>> getData()", "class_method_signature": "DataTable.getData()", "testcase": false, "constructor": false}, {"identifier": "getPageNumbers", "parameters": "()", "modifiers": "public", "return": "TreeSet<Integer>", "signature": "TreeSet<Integer> getPageNumbers()", "full_signature": "public TreeSet<Integer> getPageNumbers()", "class_method_signature": "DataTable.getPageNumbers()", "testcase": false, "constructor": false}, {"identifier": "mergeWith", "parameters": "(DataTable other)", "modifiers": "public", "return": "DataTable", "signature": "DataTable mergeWith(DataTable other)", "full_signature": "public DataTable mergeWith(DataTable other)", "class_method_signature": "DataTable.mergeWith(DataTable other)", "testcase": false, "constructor": false}, {"identifier": "hasConsecutivePages", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasConsecutivePages()", "full_signature": "private boolean hasConsecutivePages()", "class_method_signature": "DataTable.hasConsecutivePages()", "testcase": false, "constructor": false}, {"identifier": "getPagesAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPagesAsString()", "full_signature": "public String getPagesAsString()", "class_method_signature": "DataTable.getPagesAsString()", "testcase": false, "constructor": false}, {"identifier": "hasData", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasData()", "full_signature": "public boolean hasData()", "class_method_signature": "DataTable.hasData()", "testcase": false, "constructor": false}, {"identifier": "getColumnsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnsCount()", "full_signature": "public int getColumnsCount()", "class_method_signature": "DataTable.getColumnsCount()", "testcase": false, "constructor": false}, {"identifier": "getRowsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowsCount()", "full_signature": "public int getRowsCount()", "class_method_signature": "DataTable.getRowsCount()", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(int c)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getColumn(int c)", "full_signature": "public List<String> getColumn(int c)", "class_method_signature": "DataTable.getColumn(int c)", "testcase": false, "constructor": false}, {"identifier": "getRow", "parameters": "(int r)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRow(int r)", "full_signature": "public List<String> getRow(int r)", "class_method_signature": "DataTable.getRow(int r)", "testcase": false, "constructor": false}, {"identifier": "mergeColumns", "parameters": "(int c1, int c2)", "modifiers": "public", "return": "DataTable", "signature": "DataTable mergeColumns(int c1, int c2)", "full_signature": "public DataTable mergeColumns(int c1, int c2)", "class_method_signature": "DataTable.mergeColumns(int c1, int c2)", "testcase": false, "constructor": false}, {"identifier": "addBlankColumn", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void addBlankColumn(int index)", "full_signature": "public void addBlankColumn(int index)", "class_method_signature": "DataTable.addBlankColumn(int index)", "testcase": false, "constructor": false}, {"identifier": "getOrEmpty", "parameters": "(List<String> list, int index)", "modifiers": "private static", "return": "String", "signature": "String getOrEmpty(List<String> list, int index)", "full_signature": "private static String getOrEmpty(List<String> list, int index)", "class_method_signature": "DataTable.getOrEmpty(List<String> list, int index)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataTable.toString()", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/excel/DataTable.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        \n        int totalWidth = 0;\n        int colCount = getColumnsCount();\n        List<Integer> colWidths = new ArrayList<>();\n        \n        for (int i = 0; i < colCount; i++) {\n            List<String> col = getColumn(i);\n            int colWidth = 0;\n            for (int j = 0; j < col.size(); j++) {\n                colWidth = Math.max(colWidth, col.get(j).length());\n            }\n            colWidths.add(colWidth);\n            totalWidth += colWidth;\n        }\n        \n        String line = \"+\" + StringUtils.repeat(\"-\", totalWidth + colCount - 1) + \"+\";\n        \n        for(int i = 0; i < getRowsCount(); i++) {\n            List<String> row = getRow(i);\n\n            sb.append(\"\\n\").append(line).append(\"\\n\");\n            for(int j = 0; j < colWidths.size(); j++) {\n                // TODO: fix padding for arabic when unprintable chars are present\n                // TODO: ensure unprintable characters are not counted when padding (all columns have same width)\n                String cellPadded = rightPad(\"\", colWidths.get(j));\n                \n                if(j < row.size()) {\n                    cellPadded = isolateRTLIfRequired(rightPad(row.get(j), colWidths.get(j)));\n                }\n\n                sb.append(\"|\").append(cellPadded);\n\n            }\n            \n            sb.append(\"|\");\n        }\n\n        sb.append(\"\\n\").append(line).append(\"\\n\");\n        \n        return sb.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataTable.toString()", "testcase": false, "constructor": false, "invocations": ["getColumnsCount", "getColumn", "size", "max", "length", "get", "add", "repeat", "getRowsCount", "getRow", "append", "append", "append", "size", "rightPad", "get", "size", "isolateRTLIfRequired", "rightPad", "get", "get", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}