{"test_class": {"identifier": "WordsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jhelper/src/test/java/com/hwangjr/jhelper/WordsTest.java"}, "test_case": {"identifier": "testWrap_StringIntStringBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrap_StringIntStringBoolean() {\n        assertEquals(null, wrap(null, 20, \"\\n\", false));\n        assertEquals(null, wrap(null, 20, \"\\n\", true));\n        assertEquals(null, wrap(null, 20, null, true));\n        assertEquals(null, wrap(null, 20, null, false));\n        assertEquals(null, wrap(null, -1, null, true));\n        assertEquals(null, wrap(null, -1, null, false));\n\n        assertEquals(\"\", wrap(\"\", 20, \"\\n\", false));\n        assertEquals(\"\", wrap(\"\", 20, \"\\n\", true));\n        assertEquals(\"\", wrap(\"\", 20, null, false));\n        assertEquals(\"\", wrap(\"\", 20, null, true));\n        assertEquals(\"\", wrap(\"\", -1, null, false));\n        assertEquals(\"\", wrap(\"\", -1, null, true));\n\n        // normal\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n\n        // unusual newline char\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n        assertEquals(expected, wrap(input, 20, \"<br />\", false));\n        assertEquals(expected, wrap(input, 20, \"<br />\", true));\n\n        // short line length\n        input = \"Here is one line\";\n        expected = \"Here\\nis one\\nline\";\n        assertEquals(expected, wrap(input, 6, \"\\n\", false));\n        expected = \"Here\\nis\\none\\nline\";\n        assertEquals(expected, wrap(input, 2, \"\\n\", false));\n        assertEquals(expected, wrap(input, -1, \"\\n\", false));\n\n        // system newline char\n        String systemNewLine = System.getProperty(\"line.separator\");\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine\n                + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, wrap(input, 20, null, false));\n        assertEquals(expected, wrap(input, 20, null, true));\n\n        // with extra spaces\n        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n\n        // with tab\n        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n\n        // with tab at wrapColumn\n        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n\n        // difference because of long word\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n\n        // difference because of long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", false));\n        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n        assertEquals(expected, wrap(input, 20, \"\\n\", true));\n//        System.err.println(expected);\n//        System.err.println(Words.wrap(input, 20, \"\\n\", false));\n    }", "signature": "void testWrap_StringIntStringBoolean()", "full_signature": "@Test public void testWrap_StringIntStringBoolean()", "class_method_signature": "WordsTest.testWrap_StringIntStringBoolean()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "getProperty", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap", "assertEquals", "wrap"]}, "focal_class": {"identifier": "Words", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Words", "parameters": "()", "modifiers": "private", "return": "", "signature": " Words()", "full_signature": "private  Words()", "class_method_signature": "Words.Words()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(String str, int wrapLength)", "modifiers": "public static", "return": "String", "signature": "String wrap(String str, int wrapLength)", "full_signature": "public static String wrap(String str, int wrapLength)", "class_method_signature": "Words.wrap(String str, int wrapLength)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(String str, int wrapLength, String newLineStr, boolean wrapLongWords)", "modifiers": "public static", "return": "String", "signature": "String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)", "full_signature": "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)", "class_method_signature": "Words.wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String str)", "full_signature": "public static String capitalize(String str)", "class_method_signature": "Words.capitalize(String str)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String str, char[] delimiters)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String str, char[] delimiters)", "full_signature": "public static String capitalize(String str, char[] delimiters)", "class_method_signature": "Words.capitalize(String str, char[] delimiters)", "testcase": false, "constructor": false}, {"identifier": "capitalizeFully", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String capitalizeFully(String str)", "full_signature": "public static String capitalizeFully(String str)", "class_method_signature": "Words.capitalizeFully(String str)", "testcase": false, "constructor": false}, {"identifier": "capitalizeFully", "parameters": "(String str, char[] delimiters)", "modifiers": "public static", "return": "String", "signature": "String capitalizeFully(String str, char[] delimiters)", "full_signature": "public static String capitalizeFully(String str, char[] delimiters)", "class_method_signature": "Words.capitalizeFully(String str, char[] delimiters)", "testcase": false, "constructor": false}, {"identifier": "uncapitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String uncapitalize(String str)", "full_signature": "public static String uncapitalize(String str)", "class_method_signature": "Words.uncapitalize(String str)", "testcase": false, "constructor": false}, {"identifier": "uncapitalize", "parameters": "(String str, char[] delimiters)", "modifiers": "public static", "return": "String", "signature": "String uncapitalize(String str, char[] delimiters)", "full_signature": "public static String uncapitalize(String str, char[] delimiters)", "class_method_signature": "Words.uncapitalize(String str, char[] delimiters)", "testcase": false, "constructor": false}, {"identifier": "initials", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String initials(String str)", "full_signature": "public static String initials(String str)", "class_method_signature": "Words.initials(String str)", "testcase": false, "constructor": false}, {"identifier": "initials", "parameters": "(String str, char[] delimiters)", "modifiers": "public static", "return": "String", "signature": "String initials(String str, char[] delimiters)", "full_signature": "public static String initials(String str, char[] delimiters)", "class_method_signature": "Words.initials(String str, char[] delimiters)", "testcase": false, "constructor": false}, {"identifier": "isDelimiter", "parameters": "(char ch, char[] delimiters)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDelimiter(char ch, char[] delimiters)", "full_signature": "private static boolean isDelimiter(char ch, char[] delimiters)", "class_method_signature": "Words.isDelimiter(char ch, char[] delimiters)", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/Words.java"}, "focal_method": {"identifier": "wrap", "parameters": "(String str, int wrapLength)", "modifiers": "public static", "return": "String", "body": "public static String wrap(String str, int wrapLength) {\n        return wrap(str, wrapLength, null, false);\n    }", "signature": "String wrap(String str, int wrapLength)", "full_signature": "public static String wrap(String str, int wrapLength)", "class_method_signature": "Words.wrap(String str, int wrapLength)", "testcase": false, "constructor": false, "invocations": ["wrap"]}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}