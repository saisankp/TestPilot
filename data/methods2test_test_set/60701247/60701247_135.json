{"test_class": {"identifier": "SdkUpdaterConfigurableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long USABLE_DISK_SPACE = 1024*1024*1024L;", "modifier": "private static final", "type": "long", "declarator": "USABLE_DISK_SPACE = 1024*1024*1024L", "var_name": "USABLE_DISK_SPACE"}, {"original_string": "private static final String SDK_ROOT_PATH = \"/sdk\";", "modifier": "private static final", "type": "String", "declarator": "SDK_ROOT_PATH = \"/sdk\"", "var_name": "SDK_ROOT_PATH"}, {"original_string": "private static final String DISK_USAGE_HTML_TEMPLATE =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Disk space that will be freed: %1$s\" +\n    \"<DD>-&NBSP;Estimated download size: %2$s\" +\n    \"<DD>-&NBSP;Estimated disk space to be additionally occupied on SDK partition after installation: %3$s\" +\n    \"<DD>-&NBSP;Currently available disk space in SDK root (\" + SDK_ROOT_PATH + \"): %4$s</DL>\";", "modifier": "private static final", "type": "String", "declarator": "DISK_USAGE_HTML_TEMPLATE =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Disk space that will be freed: %1$s\" +\n    \"<DD>-&NBSP;Estimated download size: %2$s\" +\n    \"<DD>-&NBSP;Estimated disk space to be additionally occupied on SDK partition after installation: %3$s\" +\n    \"<DD>-&NBSP;Currently available disk space in SDK root (\" + SDK_ROOT_PATH + \"): %4$s</DL>\"", "var_name": "DISK_USAGE_HTML_TEMPLATE"}, {"original_string": "private static final String DISK_USAGE_HTML_TEMPLATE_WITHOUT_SPACE_TO_FREE_UP =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Estimated download size: %1$s\" +\n    \"<DD>-&NBSP;Estimated disk space to be additionally occupied on SDK partition after installation: %2$s\" +\n    \"<DD>-&NBSP;Currently available disk space in SDK root (\" + SDK_ROOT_PATH + \"): %3$s</DL>\";", "modifier": "private static final", "type": "String", "declarator": "DISK_USAGE_HTML_TEMPLATE_WITHOUT_SPACE_TO_FREE_UP =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Estimated download size: %1$s\" +\n    \"<DD>-&NBSP;Estimated disk space to be additionally occupied on SDK partition after installation: %2$s\" +\n    \"<DD>-&NBSP;Currently available disk space in SDK root (\" + SDK_ROOT_PATH + \"): %3$s</DL>\"", "var_name": "DISK_USAGE_HTML_TEMPLATE_WITHOUT_SPACE_TO_FREE_UP"}, {"original_string": "private static final String DISK_USAGE_HTML_TEMPLATE_WITHOUT_DOWNLOADS =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Disk space that will be freed: %1$s</DL>\";", "modifier": "private static final", "type": "String", "declarator": "DISK_USAGE_HTML_TEMPLATE_WITHOUT_DOWNLOADS =\n    \"Disk usage:\\n\" +\n    \"<DL><DD>-&NBSP;Disk space that will be freed: %1$s</DL>\"", "var_name": "DISK_USAGE_HTML_TEMPLATE_WITHOUT_DOWNLOADS"}, {"original_string": "private static final String WARNING_HTML =\n    \"<FONT color=\\\"#ff0000\\\"><B>WARNING: There might be insufficient disk space to perform this operation. \" +\n    \"</B><BR/><BR/>Estimated disk usage is presented below. Consider freeing up more disk space before proceeding. </FONT><BR/><BR/>\";", "modifier": "private static final", "type": "String", "declarator": "WARNING_HTML =\n    \"<FONT color=\\\"#ff0000\\\"><B>WARNING: There might be insufficient disk space to perform this operation. \" +\n    \"</B><BR/><BR/>Estimated disk usage is presented below. Consider freeing up more disk space before proceeding. </FONT><BR/><BR/>\"", "var_name": "WARNING_HTML"}, {"original_string": "private File mySdkRoot;", "modifier": "private", "type": "File", "declarator": "mySdkRoot", "var_name": "mySdkRoot"}], "file": "sdk-updates/testSrc/com/android/tools/idea/updater/configure/SdkUpdaterConfigurableTest.java"}, "test_case": {"identifier": "testDiskSpaceMessagesPatchAndUninstall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDiskSpaceMessagesPatchAndUninstall() throws Exception {\n    final long fullInstallationDownloadSize = 0;\n    final long patchesDownloadSize = 20 * 1024 * 1024L + 42;\n    final long spaceToBeFreedUp = 9 * 1024 * 1024L + 42;\n\n    Pair<HtmlBuilder, HtmlBuilder> messages = SdkUpdaterConfigurable.getDiskUsageMessages(mySdkRoot, fullInstallationDownloadSize,\n                                                                                          patchesDownloadSize, spaceToBeFreedUp);\n    assertEquals(String.format(DISK_USAGE_HTML_TEMPLATE, \"9.0 MB\", \"20.0 MB\", \"11.0 MB\", \"1.0 GB\"),\n                 messages.getFirst().getHtml());\n    assertNull(messages.getSecond());\n  }", "signature": "void testDiskSpaceMessagesPatchAndUninstall()", "full_signature": "@Test public void testDiskSpaceMessagesPatchAndUninstall()", "class_method_signature": "SdkUpdaterConfigurableTest.testDiskSpaceMessagesPatchAndUninstall()", "testcase": true, "constructor": false, "invocations": ["getDiskUsageMessages", "assertEquals", "format", "getHtml", "getFirst", "assertNull", "getSecond"]}, "focal_class": {"identifier": "SdkUpdaterConfigurable", "superclass": "", "interfaces": "implements SearchableConfigurable", "fields": [{"original_string": "private static final int ESTIMATED_ZIP_DECOMPRESSION_RATE = 4;", "modifier": "private static final", "type": "int", "declarator": "ESTIMATED_ZIP_DECOMPRESSION_RATE = 4", "var_name": "ESTIMATED_ZIP_DECOMPRESSION_RATE"}, {"original_string": "private SdkUpdaterConfigPanel myPanel;", "modifier": "private", "type": "SdkUpdaterConfigPanel", "declarator": "myPanel", "var_name": "myPanel"}, {"original_string": "private Channel myCurrentChannel;", "modifier": "private", "type": "Channel", "declarator": "myCurrentChannel", "var_name": "myCurrentChannel"}, {"original_string": "private Runnable myChannelChangedCallback;", "modifier": "private", "type": "Runnable", "declarator": "myChannelChangedCallback", "var_name": "myChannelChangedCallback"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getId()", "full_signature": "@NotNull @Override public String getId()", "class_method_signature": "SdkUpdaterConfigurable.getId()", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "@Nls @Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@Nls @Override public String getDisplayName()", "class_method_signature": "SdkUpdaterConfigurable.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getHelpTopic", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getHelpTopic()", "full_signature": "@Nullable @Override public String getHelpTopic()", "class_method_signature": "SdkUpdaterConfigurable.getHelpTopic()", "testcase": false, "constructor": false}, {"identifier": "createComponent", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "JComponent", "signature": "JComponent createComponent()", "full_signature": "@Nullable @Override public JComponent createComponent()", "class_method_signature": "SdkUpdaterConfigurable.createComponent()", "testcase": false, "constructor": false}, {"identifier": "getSdkHandler", "parameters": "()", "modifiers": "", "return": "AndroidSdkHandler", "signature": "AndroidSdkHandler getSdkHandler()", "full_signature": " AndroidSdkHandler getSdkHandler()", "class_method_signature": "SdkUpdaterConfigurable.getSdkHandler()", "testcase": false, "constructor": false}, {"identifier": "getRepoManager", "parameters": "()", "modifiers": "", "return": "RepoManager", "signature": "RepoManager getRepoManager()", "full_signature": " RepoManager getRepoManager()", "class_method_signature": "SdkUpdaterConfigurable.getRepoManager()", "testcase": false, "constructor": false}, {"identifier": "isModified", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isModified()", "full_signature": "@Override public boolean isModified()", "class_method_signature": "SdkUpdaterConfigurable.isModified()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void apply()", "full_signature": "@Override public void apply()", "class_method_signature": "SdkUpdaterConfigurable.apply()", "testcase": false, "constructor": false}, {"identifier": "getLocalInstallationSize", "parameters": "(@NotNull Collection<LocalPackage> localPackages)", "modifiers": "private static", "return": "long", "signature": "long getLocalInstallationSize(@NotNull Collection<LocalPackage> localPackages)", "full_signature": "private static long getLocalInstallationSize(@NotNull Collection<LocalPackage> localPackages)", "class_method_signature": "SdkUpdaterConfigurable.getLocalInstallationSize(@NotNull Collection<LocalPackage> localPackages)", "testcase": false, "constructor": false}, {"identifier": "calculateDownloadSizeForPackage", "parameters": "(@NotNull RemotePackage remotePackage,\n                                                                     @NotNull RepositoryPackages packages)", "modifiers": "private static", "return": "Pair<Long, Boolean>", "signature": "Pair<Long, Boolean> calculateDownloadSizeForPackage(@NotNull RemotePackage remotePackage,\n                                                                     @NotNull RepositoryPackages packages)", "full_signature": "private static Pair<Long, Boolean> calculateDownloadSizeForPackage(@NotNull RemotePackage remotePackage,\n                                                                     @NotNull RepositoryPackages packages)", "class_method_signature": "SdkUpdaterConfigurable.calculateDownloadSizeForPackage(@NotNull RemotePackage remotePackage,\n                                                                     @NotNull RepositoryPackages packages)", "testcase": false, "constructor": false}, {"identifier": "getDiskUsageMessages", "parameters": "(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "modifiers": "@VisibleForTesting static", "return": "Pair<HtmlBuilder, HtmlBuilder>", "signature": "Pair<HtmlBuilder, HtmlBuilder> getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "full_signature": "@VisibleForTesting static Pair<HtmlBuilder, HtmlBuilder> getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "class_method_signature": "SdkUpdaterConfigurable.getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "testcase": false, "constructor": false}, {"identifier": "confirmChange", "parameters": "(HtmlBuilder message)", "modifiers": "static", "return": "boolean", "signature": "boolean confirmChange(HtmlBuilder message)", "full_signature": "static boolean confirmChange(HtmlBuilder message)", "class_method_signature": "SdkUpdaterConfigurable.confirmChange(HtmlBuilder message)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "SdkUpdaterConfigurable.reset()", "testcase": false, "constructor": false}, {"identifier": "disposeUIResources", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disposeUIResources()", "full_signature": "@Override public void disposeUIResources()", "class_method_signature": "SdkUpdaterConfigurable.disposeUIResources()", "testcase": false, "constructor": false}], "file": "sdk-updates/src/com/android/tools/idea/updater/configure/SdkUpdaterConfigurable.java"}, "focal_method": {"identifier": "getDiskUsageMessages", "parameters": "(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "modifiers": "@VisibleForTesting static", "return": "Pair<HtmlBuilder, HtmlBuilder>", "body": "@VisibleForTesting\n  static Pair<HtmlBuilder, HtmlBuilder> getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp) {\n    HtmlBuilder message = new HtmlBuilder();\n    message.add(\"Disk usage:\\n\");\n    boolean issueDiskSpaceWarning = false;\n    message.beginList();\n    if (spaceToBeFreedUp > 0) {\n      message.listItem().add(\"Disk space that will be freed: \" + new Storage(spaceToBeFreedUp).toUiString());\n    }\n    long totalDownloadSize = patchesDownloadSize + fullInstallationsDownloadSize;\n    if (totalDownloadSize > 0) {\n      message.listItem().add(\"Estimated download size: \" + new Storage(totalDownloadSize).toUiString());\n      long sdkRootUsageAfterInstallation = patchesDownloadSize + ESTIMATED_ZIP_DECOMPRESSION_RATE * fullInstallationsDownloadSize\n                                           - spaceToBeFreedUp;\n      message.listItem().add(\"Estimated disk space to be additionally occupied on SDK partition after installation: \"\n                             + new Storage(sdkRootUsageAfterInstallation).toUiString());\n      if (sdkRoot != null) {\n        long sdkRootUsableSpace = sdkRoot.getUsableSpace();\n        message.listItem().add(String.format(\"Currently available disk space in SDK root (%1$s): %2$s\", sdkRoot.getAbsolutePath(),\n                                             new Storage(sdkRootUsableSpace).toUiString()));\n        long totalSdkUsableSpace = sdkRootUsableSpace + spaceToBeFreedUp;\n        issueDiskSpaceWarning = (totalSdkUsableSpace < sdkRootUsageAfterInstallation);\n      }\n    }\n    message.endList();\n    if (issueDiskSpaceWarning) {\n      HtmlBuilder warningMessage = new HtmlBuilder();\n      warningMessage.beginColor(JBColor.RED)\n                    .addBold(\"WARNING: There might be insufficient disk space to perform this operation. \")\n                    .newline().newline()\n                    .add(\"Estimated disk usage is presented below. \")\n                    .add(\"Consider freeing up more disk space before proceeding. \")\n                    .endColor()\n                    .newline().newline();\n      return Pair.of(message, warningMessage);\n    }\n    return Pair.of(message, null);\n  }", "signature": "Pair<HtmlBuilder, HtmlBuilder> getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "full_signature": "@VisibleForTesting static Pair<HtmlBuilder, HtmlBuilder> getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "class_method_signature": "SdkUpdaterConfigurable.getDiskUsageMessages(@Nullable File sdkRoot, long fullInstallationsDownloadSize,\n                                                             long patchesDownloadSize, long spaceToBeFreedUp)", "testcase": false, "constructor": false, "invocations": ["add", "beginList", "add", "listItem", "toUiString", "add", "listItem", "toUiString", "add", "listItem", "toUiString", "getUsableSpace", "add", "listItem", "format", "getAbsolutePath", "toUiString", "endList", "newline", "newline", "endColor", "add", "add", "newline", "newline", "addBold", "beginColor", "of", "of"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}