{"test_class": {"identifier": "MessageDigestUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "webauthn4j-util/src/test/java/com/webauthn4j/util/MessageDigestUtilTest.java"}, "test_case": {"identifier": "createMessageDigest_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void createMessageDigest_test() {\n        MessageDigest s256 = MessageDigestUtil.createMessageDigest(\"S256\");\n        MessageDigest s384 = MessageDigestUtil.createMessageDigest(\"S384\");\n        MessageDigest s512 = MessageDigestUtil.createMessageDigest(\"S512\");\n\n        MessageDigest sha256 = MessageDigestUtil.createMessageDigest(\"SHA-256\");\n\n        assertAll(\n                () -> assertThat(s256.getAlgorithm()).isEqualTo(\"SHA-256\"),\n                () -> assertThat(s384.getAlgorithm()).isEqualTo(\"SHA-384\"),\n                () -> assertThat(s512.getAlgorithm()).isEqualTo(\"SHA-512\"),\n                () -> assertThat(sha256.getAlgorithm()).isEqualTo(\"SHA-256\")\n        );\n    }", "signature": "void createMessageDigest_test()", "full_signature": "@Test void createMessageDigest_test()", "class_method_signature": "MessageDigestUtilTest.createMessageDigest_test()", "testcase": true, "constructor": false, "invocations": ["createMessageDigest", "createMessageDigest", "createMessageDigest", "createMessageDigest", "assertAll", "isEqualTo", "assertThat", "getAlgorithm", "isEqualTo", "assertThat", "getAlgorithm", "isEqualTo", "assertThat", "getAlgorithm", "isEqualTo", "assertThat", "getAlgorithm"]}, "focal_class": {"identifier": "MessageDigestUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MessageDigestUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " MessageDigestUtil()", "full_signature": "private  MessageDigestUtil()", "class_method_signature": "MessageDigestUtil.MessageDigestUtil()", "testcase": false, "constructor": true}, {"identifier": "createMessageDigest", "parameters": "(String hashAlgorithm)", "modifiers": "public static", "return": "MessageDigest", "signature": "MessageDigest createMessageDigest(String hashAlgorithm)", "full_signature": "public static MessageDigest createMessageDigest(String hashAlgorithm)", "class_method_signature": "MessageDigestUtil.createMessageDigest(String hashAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "createSHA256", "parameters": "()", "modifiers": "public static", "return": "MessageDigest", "signature": "MessageDigest createSHA256()", "full_signature": "public static MessageDigest createSHA256()", "class_method_signature": "MessageDigestUtil.createSHA256()", "testcase": false, "constructor": false}], "file": "webauthn4j-util/src/main/java/com/webauthn4j/util/MessageDigestUtil.java"}, "focal_method": {"identifier": "createMessageDigest", "parameters": "(String hashAlgorithm)", "modifiers": "public static", "return": "MessageDigest", "body": "public static MessageDigest createMessageDigest(String hashAlgorithm) {\n        try {\n            switch (hashAlgorithm) {\n                case \"S256\":\n                    return MessageDigest.getInstance(\"SHA-256\");\n                case \"S384\":\n                    return MessageDigest.getInstance(\"SHA-384\");\n                case \"S512\":\n                    return MessageDigest.getInstance(\"SHA-512\");\n                default:\n                    return MessageDigest.getInstance(hashAlgorithm);\n            }\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "signature": "MessageDigest createMessageDigest(String hashAlgorithm)", "full_signature": "public static MessageDigest createMessageDigest(String hashAlgorithm)", "class_method_signature": "MessageDigestUtil.createMessageDigest(String hashAlgorithm)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getInstance", "getInstance", "getInstance"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}