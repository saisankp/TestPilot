{"test_class": {"identifier": "CusumDetectorFactoryProviderTest", "superclass": "extends AbstractDetectorFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/cusum/CusumDetectorFactoryProviderTest.java"}, "test_case": {"identifier": "testBuildDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildDetector() {\n        val factoryUnderTest = new CusumDetectorFactoryProvider();\n        val document = readDocument(\"cusum\");\n        val detector = factoryUnderTest.buildDetector(document);\n        val params = detector.getParams();\n\n        assertNotNull(detector);\n        assertEquals(CusumDetector.class, detector.getClass());\n        assertEquals(\"3ec81aa2-2cdc-415e-b4f3-c1beb223ae60\", detector.getUuid().toString());\n        assertEquals(120.0, params.getTargetValue(), TOLERANCE);\n        assertEquals(0.8, params.getSlackParam(), TOLERANCE);\n        assertEquals(110.0, params.getInitMeanEstimate(), TOLERANCE);\n        assertEquals(AnomalyType.RIGHT_TAILED, params.getType());\n        assertEquals(2.5, params.getWeakSigmas(), TOLERANCE);\n        assertEquals(3.5, params.getStrongSigmas(), TOLERANCE);\n    }", "signature": "void testBuildDetector()", "full_signature": "@Test public void testBuildDetector()", "class_method_signature": "CusumDetectorFactoryProviderTest.testBuildDetector()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector", "getParams", "assertNotNull", "assertEquals", "getClass", "assertEquals", "toString", "getUuid", "assertEquals", "getTargetValue", "assertEquals", "getSlackParam", "assertEquals", "getInitMeanEstimate", "assertEquals", "getType", "assertEquals", "getWeakSigmas", "assertEquals", "getStrongSigmas"]}, "focal_class": {"identifier": "CusumDetectorFactoryProvider", "superclass": "", "interfaces": "implements DetectorFactoryProvider<CusumDetector>", "fields": [{"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "methods": [{"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "CusumDetector", "signature": "CusumDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public CusumDetector buildDetector(DetectorDocument document)", "class_method_signature": "CusumDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/cusum/CusumDetectorFactoryProvider.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "CusumDetector", "body": "@Override\n    public CusumDetector buildDetector(DetectorDocument document) {\n        notNull(document, \"document can't be null\");\n        val paramsMap = document.getConfig().get(\"params\");\n        val params = objectMapper.convertValue(paramsMap, CusumDetectorParams.class);\n        val trusted = document.isTrusted();\n        return new CusumDetector(document.getUuid(), params, trusted);\n    }", "signature": "CusumDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public CusumDetector buildDetector(DetectorDocument document)", "class_method_signature": "CusumDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["notNull", "get", "getConfig", "convertValue", "isTrusted", "getUuid"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}