{"test_class": {"identifier": "CollectorFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "support-metrics-client/src/test/java/io/confluent/support/metrics/collectors/CollectorFactoryTest.java"}, "test_case": {"identifier": "testBasicType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicType() {\n        // Given\n        TimeUtils time = new TimeUtils();\n        CollectorFactory factory = new CollectorFactory(CollectorType.BASIC, time, null, null, null);\n\n        // when\n        CollectorType type = factory.getType();\n\n        // Then\n        assertThat(type).isEqualTo(CollectorType.BASIC);\n    }", "signature": "void testBasicType()", "full_signature": "@Test public void testBasicType()", "class_method_signature": "CollectorFactoryTest.testBasicType()", "testcase": true, "constructor": false, "invocations": ["getType", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "CollectorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CollectorType type;", "modifier": "private final", "type": "CollectorType", "declarator": "type", "var_name": "type"}, {"original_string": "private final Collector collector;", "modifier": "private final", "type": "Collector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private static CollectorConstructorSupplier\n      basicCollectorSupplier =\n      new CollectorFactory.CollectorConstructorSupplier(new CollectorFactory.ConstructorSupplier() {\n        @Override\n        public Constructor get() throws ClassNotFoundException, NoSuchMethodException {\n          return Class.forName(\"io.confluent.support.metrics.collectors.BasicCollector\")\n              .getConstructor(KafkaServer.class, TimeUtils.class);\n        }\n      });", "modifier": "private static", "type": "CollectorConstructorSupplier", "declarator": "basicCollectorSupplier =\n      new CollectorFactory.CollectorConstructorSupplier(new CollectorFactory.ConstructorSupplier() {\n        @Override\n        public Constructor get() throws ClassNotFoundException, NoSuchMethodException {\n          return Class.forName(\"io.confluent.support.metrics.collectors.BasicCollector\")\n              .getConstructor(KafkaServer.class, TimeUtils.class);\n        }\n      })", "var_name": "basicCollectorSupplier"}, {"original_string": "private static CollectorConstructorSupplier\n      fullCollectorSupplier =\n      new CollectorFactory.CollectorConstructorSupplier(new CollectorFactory.ConstructorSupplier() {\n        @Override\n        public Constructor get() throws ClassNotFoundException, NoSuchMethodException {\n          return Class.forName(\"io.confluent.support.metrics.collectors.FullCollector\")\n              .getConstructor(KafkaServer.class, Properties.class, Runtime.class, TimeUtils.class);\n        }\n      });", "modifier": "private static", "type": "CollectorConstructorSupplier", "declarator": "fullCollectorSupplier =\n      new CollectorFactory.CollectorConstructorSupplier(new CollectorFactory.ConstructorSupplier() {\n        @Override\n        public Constructor get() throws ClassNotFoundException, NoSuchMethodException {\n          return Class.forName(\"io.confluent.support.metrics.collectors.FullCollector\")\n              .getConstructor(KafkaServer.class, Properties.class, Runtime.class, TimeUtils.class);\n        }\n      })", "var_name": "fullCollectorSupplier"}], "methods": [{"identifier": "CollectorFactory", "parameters": "(\n      CollectorType type,\n      TimeUtils time,\n      KafkaServer server,\n      Properties serverConfiguration,\n      Runtime serverRuntime\n  )", "modifiers": "public", "return": "", "signature": " CollectorFactory(\n      CollectorType type,\n      TimeUtils time,\n      KafkaServer server,\n      Properties serverConfiguration,\n      Runtime serverRuntime\n  )", "full_signature": "public  CollectorFactory(\n      CollectorType type,\n      TimeUtils time,\n      KafkaServer server,\n      Properties serverConfiguration,\n      Runtime serverRuntime\n  )", "class_method_signature": "CollectorFactory.CollectorFactory(\n      CollectorType type,\n      TimeUtils time,\n      KafkaServer server,\n      Properties serverConfiguration,\n      Runtime serverRuntime\n  )", "testcase": false, "constructor": true}, {"identifier": "getCollector", "parameters": "()", "modifiers": "public", "return": "Collector", "signature": "Collector getCollector()", "full_signature": "public Collector getCollector()", "class_method_signature": "CollectorFactory.getCollector()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "CollectorType", "signature": "CollectorType getType()", "full_signature": "public CollectorType getType()", "class_method_signature": "CollectorFactory.getType()", "testcase": false, "constructor": false}], "file": "support-metrics-client/src/main/java/io/confluent/support/metrics/collectors/CollectorFactory.java"}, "focal_method": {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "CollectorType", "body": "public CollectorType getType() {\n    return type;\n  }", "signature": "CollectorType getType()", "full_signature": "public CollectorType getType()", "class_method_signature": "CollectorFactory.getType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 45926632, "url": "https://github.com/confluentinc/support-metrics-client", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 5, "size": 858, "license": "licensed"}}