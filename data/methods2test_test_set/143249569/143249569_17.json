{"test_class": {"identifier": "SlotModelArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArgumentResolver resolver = new SlotModelArgumentResolver(IntentMapper.fromModel(MappingsController.buildPetSkillDefinition().getModel()));", "modifier": "private", "type": "ArgumentResolver", "declarator": "resolver = new SlotModelArgumentResolver(IntentMapper.fromModel(MappingsController.buildPetSkillDefinition().getModel()))", "var_name": "resolver"}, {"original_string": "@Mock\n    SkillContext mockSkillContext;", "modifier": "@Mock", "type": "SkillContext", "declarator": "mockSkillContext", "var_name": "mockSkillContext"}], "file": "ask-sdk-mvc/src/test/java/com/amazon/ask/mvc/argument/SlotModelArgumentResolverTest.java"}, "test_case": {"identifier": "testSupportAndResolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupportAndResolve() throws NoSuchMethodException {\n        Method method = MappingsController.class.getMethod(\"handleModelSlot\", MappingsController.PetType.class);\n        MethodParameter methodParameter = new MethodParameter(\n                method,\n                0,\n                MappingsController.PetType.class,\n                method.getParameterAnnotations()[0]\n        );\n\n        RequestEnvelope envelope = Utils.buildSimpleEnvelope(\"PetTypeIntentTwo\", \"pet\", \"DRAGON\");\n        ArgumentResolverContext input = new ArgumentResolverContext(mockSkillContext, methodParameter, HandlerInput.builder().withRequestEnvelope(envelope).build());\n\n        assertEquals(MappingsController.PetType.DRAGON, resolver.resolve(input).get());\n    }", "signature": "void testSupportAndResolve()", "full_signature": "@Test public void testSupportAndResolve()", "class_method_signature": "SlotModelArgumentResolverTest.testSupportAndResolve()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getParameterAnnotations", "buildSimpleEnvelope", "build", "withRequestEnvelope", "builder", "assertEquals", "get", "resolve"]}, "focal_class": {"identifier": "SlotModelArgumentResolver", "superclass": "", "interfaces": "implements ArgumentResolver", "fields": [{"original_string": "protected final IntentMapper intentMapper;", "modifier": "protected final", "type": "IntentMapper", "declarator": "intentMapper", "var_name": "intentMapper"}], "methods": [{"identifier": "SlotModelArgumentResolver", "parameters": "(IntentMapper intentMapper)", "modifiers": "public", "return": "", "signature": " SlotModelArgumentResolver(IntentMapper intentMapper)", "full_signature": "public  SlotModelArgumentResolver(IntentMapper intentMapper)", "class_method_signature": "SlotModelArgumentResolver.SlotModelArgumentResolver(IntentMapper intentMapper)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotModelArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false}], "file": "ask-sdk-mvc/src/main/java/com/amazon/ask/mvc/argument/SlotModelArgumentResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> resolve(ArgumentResolverContext input) {\n        try {\n            if (input.requestTypeEquals(IntentRequest.class)) {\n                Optional<Slot> annotation = input.getMethodParameter().findAnnotation(Slot.class);\n                if (annotation.isPresent()) {\n                    return Optional.of(intentMapper.parseIntentSlot((IntentRequest) input.unwrapRequest(), annotation.get().value()));\n                }\n            }\n        } catch (IntentParseException e) {\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotModelArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false, "invocations": ["requestTypeEquals", "findAnnotation", "getMethodParameter", "isPresent", "of", "parseIntentSlot", "unwrapRequest", "value", "get", "empty"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}