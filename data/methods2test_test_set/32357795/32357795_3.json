{"test_class": {"identifier": "RelatedTopicsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"nav2\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"nav2\"", "var_name": "testdataDirectory"}, {"original_string": "private RelatedTopics portlet;", "modifier": "private", "type": "RelatedTopics", "declarator": "portlet", "var_name": "portlet"}], "file": "ontopia-navigator/src/test/java/net/ontopia/topicmaps/nav2/portlets/pojos/RelatedTopicsTest.java"}, "test_case": {"identifier": "testNoAssociations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNoAssociations() throws IOException {\n    TopicMapIF tm = load(\"screwed-up.ltm\");\n    TopicIF topic = getTopicById(tm, \"no-name\");\n    List headings = portlet.makeModel(topic);\n    Assert.assertTrue(\"topic with no associations had headings\",\n               headings.isEmpty());\n  }", "signature": "void testNoAssociations()", "full_signature": "@Test public void testNoAssociations()", "class_method_signature": "RelatedTopicsTest.testNoAssociations()", "testcase": true, "constructor": false, "invocations": ["load", "getTopicById", "makeModel", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "RelatedTopics", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int ORDERING_ASC = 1;", "modifier": "public static final", "type": "int", "declarator": "ORDERING_ASC = 1", "var_name": "ORDERING_ASC"}, {"original_string": "public static final int ORDERING_DESC = 2;", "modifier": "public static final", "type": "int", "declarator": "ORDERING_DESC = 2", "var_name": "ORDERING_DESC"}, {"original_string": "private Set weaktypes;", "modifier": "private", "type": "Set", "declarator": "weaktypes", "var_name": "weaktypes"}, {"original_string": "private Set exclassocs;", "modifier": "private", "type": "Set", "declarator": "exclassocs", "var_name": "exclassocs"}, {"original_string": "private Set exclroles;", "modifier": "private", "type": "Set", "declarator": "exclroles", "var_name": "exclroles"}, {"original_string": "private Set excltopics;", "modifier": "private", "type": "Set", "declarator": "excltopics", "var_name": "excltopics"}, {"original_string": "private Set inclassocs;", "modifier": "private", "type": "Set", "declarator": "inclassocs", "var_name": "inclassocs"}, {"original_string": "private Set incltopics;", "modifier": "private", "type": "Set", "declarator": "incltopics", "var_name": "incltopics"}, {"original_string": "private Set weaktypes_cache;", "modifier": "private", "type": "Set", "declarator": "weaktypes_cache", "var_name": "weaktypes_cache"}, {"original_string": "private Set exclassocs_cache;", "modifier": "private", "type": "Set", "declarator": "exclassocs_cache", "var_name": "exclassocs_cache"}, {"original_string": "private Set exclroles_cache;", "modifier": "private", "type": "Set", "declarator": "exclroles_cache", "var_name": "exclroles_cache"}, {"original_string": "private Set excltopics_cache;", "modifier": "private", "type": "Set", "declarator": "excltopics_cache", "var_name": "excltopics_cache"}, {"original_string": "private StringifierIF sort;", "modifier": "private", "type": "StringifierIF", "declarator": "sort", "var_name": "sort"}, {"original_string": "private int maxchildren = -1;", "modifier": "private", "type": "int", "declarator": "maxchildren = -1", "var_name": "maxchildren"}, {"original_string": "private String headingOrderQueryString;", "modifier": "private", "type": "String", "declarator": "headingOrderQueryString", "var_name": "headingOrderQueryString"}, {"original_string": "private int headingOrdering = ORDERING_ASC;", "modifier": "private", "type": "int", "declarator": "headingOrdering = ORDERING_ASC", "var_name": "headingOrdering"}, {"original_string": "private String childOrderQueryString;", "modifier": "private", "type": "String", "declarator": "childOrderQueryString", "var_name": "childOrderQueryString"}, {"original_string": "private int childOrdering = ORDERING_ASC;", "modifier": "private", "type": "int", "declarator": "childOrdering = ORDERING_ASC", "var_name": "childOrdering"}, {"original_string": "private String filterquery;", "modifier": "private", "type": "String", "declarator": "filterquery", "var_name": "filterquery"}, {"original_string": "private DeclarationContextIF tologctx;", "modifier": "private", "type": "DeclarationContextIF", "declarator": "tologctx", "var_name": "tologctx"}, {"original_string": "private boolean aggregateHierarchy;", "modifier": "private", "type": "boolean", "declarator": "aggregateHierarchy", "var_name": "aggregateHierarchy"}, {"original_string": "private Set aggregateAssociations;", "modifier": "private", "type": "Set", "declarator": "aggregateAssociations", "var_name": "aggregateAssociations"}, {"original_string": "private int storeid;", "modifier": "private", "type": "int", "declarator": "storeid", "var_name": "storeid"}, {"original_string": "private int tmid;", "modifier": "private", "type": "int", "declarator": "tmid", "var_name": "tmid"}, {"original_string": "private boolean useOntopolyNames;", "modifier": "private", "type": "boolean", "declarator": "useOntopolyNames", "var_name": "useOntopolyNames"}], "methods": [{"identifier": "setWeakAssociationTypes", "parameters": "(Set weaktypes)", "modifiers": "public", "return": "void", "signature": "void setWeakAssociationTypes(Set weaktypes)", "full_signature": "public void setWeakAssociationTypes(Set weaktypes)", "class_method_signature": "RelatedTopics.setWeakAssociationTypes(Set weaktypes)", "testcase": false, "constructor": false}, {"identifier": "setExcludeAssociationTypes", "parameters": "(Set types)", "modifiers": "public", "return": "void", "signature": "void setExcludeAssociationTypes(Set types)", "full_signature": "public void setExcludeAssociationTypes(Set types)", "class_method_signature": "RelatedTopics.setExcludeAssociationTypes(Set types)", "testcase": false, "constructor": false}, {"identifier": "setExcludeRoleTypes", "parameters": "(Set types)", "modifiers": "public", "return": "void", "signature": "void setExcludeRoleTypes(Set types)", "full_signature": "public void setExcludeRoleTypes(Set types)", "class_method_signature": "RelatedTopics.setExcludeRoleTypes(Set types)", "testcase": false, "constructor": false}, {"identifier": "setExcludeTopicTypes", "parameters": "(Set types)", "modifiers": "public", "return": "void", "signature": "void setExcludeTopicTypes(Set types)", "full_signature": "public void setExcludeTopicTypes(Set types)", "class_method_signature": "RelatedTopics.setExcludeTopicTypes(Set types)", "testcase": false, "constructor": false}, {"identifier": "setIncludeAssociationTypes", "parameters": "(Set types)", "modifiers": "public", "return": "void", "signature": "void setIncludeAssociationTypes(Set types)", "full_signature": "public void setIncludeAssociationTypes(Set types)", "class_method_signature": "RelatedTopics.setIncludeAssociationTypes(Set types)", "testcase": false, "constructor": false}, {"identifier": "setIncludeTopicTypes", "parameters": "(Set types)", "modifiers": "public", "return": "void", "signature": "void setIncludeTopicTypes(Set types)", "full_signature": "public void setIncludeTopicTypes(Set types)", "class_method_signature": "RelatedTopics.setIncludeTopicTypes(Set types)", "testcase": false, "constructor": false}, {"identifier": "setFilterQuery", "parameters": "(String query)", "modifiers": "public", "return": "void", "signature": "void setFilterQuery(String query)", "full_signature": "public void setFilterQuery(String query)", "class_method_signature": "RelatedTopics.setFilterQuery(String query)", "testcase": false, "constructor": false}, {"identifier": "setMaxChildren", "parameters": "(int maxchildren)", "modifiers": "public", "return": "void", "signature": "void setMaxChildren(int maxchildren)", "full_signature": "public void setMaxChildren(int maxchildren)", "class_method_signature": "RelatedTopics.setMaxChildren(int maxchildren)", "testcase": false, "constructor": false}, {"identifier": "setHeadingOrderQuery", "parameters": "(String headingOrderQueryString)", "modifiers": "public", "return": "void", "signature": "void setHeadingOrderQuery(String headingOrderQueryString)", "full_signature": "public void setHeadingOrderQuery(String headingOrderQueryString)", "class_method_signature": "RelatedTopics.setHeadingOrderQuery(String headingOrderQueryString)", "testcase": false, "constructor": false}, {"identifier": "setHeadingOrdering", "parameters": "(int headingOrdering)", "modifiers": "public", "return": "void", "signature": "void setHeadingOrdering(int headingOrdering)", "full_signature": "public void setHeadingOrdering(int headingOrdering)", "class_method_signature": "RelatedTopics.setHeadingOrdering(int headingOrdering)", "testcase": false, "constructor": false}, {"identifier": "setChildOrderQuery", "parameters": "(String childOrderQueryString)", "modifiers": "public", "return": "void", "signature": "void setChildOrderQuery(String childOrderQueryString)", "full_signature": "public void setChildOrderQuery(String childOrderQueryString)", "class_method_signature": "RelatedTopics.setChildOrderQuery(String childOrderQueryString)", "testcase": false, "constructor": false}, {"identifier": "setChildOrdering", "parameters": "(int childOrdering)", "modifiers": "public", "return": "void", "signature": "void setChildOrdering(int childOrdering)", "full_signature": "public void setChildOrdering(int childOrdering)", "class_method_signature": "RelatedTopics.setChildOrdering(int childOrdering)", "testcase": false, "constructor": false}, {"identifier": "setAggregateHierarchy", "parameters": "(boolean aggregateHierarchy)", "modifiers": "public", "return": "void", "signature": "void setAggregateHierarchy(boolean aggregateHierarchy)", "full_signature": "public void setAggregateHierarchy(boolean aggregateHierarchy)", "class_method_signature": "RelatedTopics.setAggregateHierarchy(boolean aggregateHierarchy)", "testcase": false, "constructor": false}, {"identifier": "setAggregateAssociations", "parameters": "(Set aggregateAssociations)", "modifiers": "public", "return": "void", "signature": "void setAggregateAssociations(Set aggregateAssociations)", "full_signature": "public void setAggregateAssociations(Set aggregateAssociations)", "class_method_signature": "RelatedTopics.setAggregateAssociations(Set aggregateAssociations)", "testcase": false, "constructor": false}, {"identifier": "setTologContext", "parameters": "(DeclarationContextIF tologctx)", "modifiers": "public", "return": "void", "signature": "void setTologContext(DeclarationContextIF tologctx)", "full_signature": "public void setTologContext(DeclarationContextIF tologctx)", "class_method_signature": "RelatedTopics.setTologContext(DeclarationContextIF tologctx)", "testcase": false, "constructor": false}, {"identifier": "makeModel", "parameters": "(TopicIF topic)", "modifiers": "public", "return": "List", "signature": "List makeModel(TopicIF topic)", "full_signature": "public List makeModel(TopicIF topic)", "class_method_signature": "RelatedTopics.makeModel(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "(TopicIF topic)", "modifiers": "private", "return": "Collection", "signature": "Collection getRoles(TopicIF topic)", "full_signature": "private Collection getRoles(TopicIF topic)", "class_method_signature": "RelatedTopics.getRoles(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "isRoleHidden", "parameters": "(AssociationRoleIF role, ParsedQueryIF pquery)", "modifiers": "private", "return": "boolean", "signature": "boolean isRoleHidden(AssociationRoleIF role, ParsedQueryIF pquery)", "full_signature": "private boolean isRoleHidden(AssociationRoleIF role, ParsedQueryIF pquery)", "class_method_signature": "RelatedTopics.isRoleHidden(AssociationRoleIF role, ParsedQueryIF pquery)", "testcase": false, "constructor": false}, {"identifier": "isTopicHidden", "parameters": "(TopicIF topic, Set hide, ParsedQueryIF pquery)", "modifiers": "private", "return": "boolean", "signature": "boolean isTopicHidden(TopicIF topic, Set hide, ParsedQueryIF pquery)", "full_signature": "private boolean isTopicHidden(TopicIF topic, Set hide, ParsedQueryIF pquery)", "class_method_signature": "RelatedTopics.isTopicHidden(TopicIF topic, Set hide, ParsedQueryIF pquery)", "testcase": false, "constructor": false}, {"identifier": "getSortKey", "parameters": "(TopicIF topic, ParsedQueryIF skquery)", "modifiers": "private", "return": "Object", "signature": "Object getSortKey(TopicIF topic, ParsedQueryIF skquery)", "full_signature": "private Object getSortKey(TopicIF topic, ParsedQueryIF skquery)", "class_method_signature": "RelatedTopics.getSortKey(TopicIF topic, ParsedQueryIF skquery)", "testcase": false, "constructor": false}, {"identifier": "getWeakTypes", "parameters": "()", "modifiers": "private", "return": "Set", "signature": "Set getWeakTypes()", "full_signature": "private Set getWeakTypes()", "class_method_signature": "RelatedTopics.getWeakTypes()", "testcase": false, "constructor": false}, {"identifier": "getObjectId", "parameters": "(TMObjectIF object)", "modifiers": "private", "return": "String", "signature": "String getObjectId(TMObjectIF object)", "full_signature": "private String getObjectId(TMObjectIF object)", "class_method_signature": "RelatedTopics.getObjectId(TMObjectIF object)", "testcase": false, "constructor": false}, {"identifier": "getOtherRole", "parameters": "(AssociationIF assoc,\n                                                AssociationRoleIF role)", "modifiers": "private static", "return": "AssociationRoleIF", "signature": "AssociationRoleIF getOtherRole(AssociationIF assoc,\n                                                AssociationRoleIF role)", "full_signature": "private static AssociationRoleIF getOtherRole(AssociationIF assoc,\n                                                AssociationRoleIF role)", "class_method_signature": "RelatedTopics.getOtherRole(AssociationIF assoc,\n                                                AssociationRoleIF role)", "testcase": false, "constructor": false}, {"identifier": "mapToObjectIds", "parameters": "(Set objects)", "modifiers": "private", "return": "Set", "signature": "Set mapToObjectIds(Set objects)", "full_signature": "private Set mapToObjectIds(Set objects)", "class_method_signature": "RelatedTopics.mapToObjectIds(Set objects)", "testcase": false, "constructor": false}, {"identifier": "updateCache", "parameters": "(TopicMapIF topicmap)", "modifiers": "private", "return": "void", "signature": "void updateCache(TopicMapIF topicmap)", "full_signature": "private void updateCache(TopicMapIF topicmap)", "class_method_signature": "RelatedTopics.updateCache(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(TopicMapIF tm, String query)", "modifiers": "private", "return": "ParsedQueryIF", "signature": "ParsedQueryIF parse(TopicMapIF tm, String query)", "full_signature": "private ParsedQueryIF parse(TopicMapIF tm, String query)", "class_method_signature": "RelatedTopics.parse(TopicMapIF tm, String query)", "testcase": false, "constructor": false}, {"identifier": "istrue", "parameters": "(ParsedQueryIF pquery, TopicIF topic)", "modifiers": "private", "return": "boolean", "signature": "boolean istrue(ParsedQueryIF pquery, TopicIF topic)", "full_signature": "private boolean istrue(ParsedQueryIF pquery, TopicIF topic)", "class_method_signature": "RelatedTopics.istrue(ParsedQueryIF pquery, TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "compareHeadings", "parameters": "(Object o1, Object o2)", "modifiers": "private", "return": "int", "signature": "int compareHeadings(Object o1, Object o2)", "full_signature": "private int compareHeadings(Object o1, Object o2)", "class_method_signature": "RelatedTopics.compareHeadings(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "compareChildren", "parameters": "(Object o1, Object o2)", "modifiers": "private", "return": "int", "signature": "int compareChildren(Object o1, Object o2)", "full_signature": "private int compareChildren(Object o1, Object o2)", "class_method_signature": "RelatedTopics.compareChildren(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "_compare", "parameters": "(Object o1, Object o2)", "modifiers": "private", "return": "int", "signature": "int _compare(Object o1, Object o2)", "full_signature": "private int _compare(Object o1, Object o2)", "class_method_signature": "RelatedTopics._compare(Object o1, Object o2)", "testcase": false, "constructor": false}, {"identifier": "setUseOntopolyNames", "parameters": "(boolean useOntopolyNames)", "modifiers": "public", "return": "void", "signature": "void setUseOntopolyNames(boolean useOntopolyNames)", "full_signature": "public void setUseOntopolyNames(boolean useOntopolyNames)", "class_method_signature": "RelatedTopics.setUseOntopolyNames(boolean useOntopolyNames)", "testcase": false, "constructor": false}], "file": "ontopia-navigator/src/main/java/net/ontopia/topicmaps/nav2/portlets/pojos/RelatedTopics.java"}, "focal_method": {"identifier": "makeModel", "parameters": "(TopicIF topic)", "modifiers": "public", "return": "List", "body": "public List makeModel(TopicIF topic) {\n    // first, validate the configuration\n    if (excltopics != null && !excltopics.isEmpty() &&\n        incltopics != null && !incltopics.isEmpty())\n      throw new OntopiaRuntimeException(\"Configuration fields includeTopicTypes and excludeTopicTypes cannot both be specified.\");\n    if (exclassocs != null && !exclassocs.isEmpty() &&\n        inclassocs != null && !inclassocs.isEmpty())\n      throw new OntopiaRuntimeException(\"Configuration fields includeAssociationTypes and excludeAssociationTypes cannot both be specified.\");\n        \n    // then, update the configuration cache\n    updateCache(topic.getTopicMap());\n\n    ParsedQueryIF pquery = null;\n    if (filterquery != null)\n      pquery = parse(topic.getTopicMap(), filterquery);\n\n    ParsedQueryIF headingOrderQuery = null;\n    if (headingOrderQueryString != null)\n      headingOrderQuery = parse(topic.getTopicMap(), headingOrderQueryString);\n      \n    ParsedQueryIF childOrderQuery = null;\n    if (childOrderQueryString != null)\n      childOrderQuery = parse(topic.getTopicMap(), childOrderQueryString);\n    \n    // group associations by the headings they will wind up under\n    Map typemap = new HashMap();\n    Iterator it = getRoles(topic).iterator();\n    while (it.hasNext()) {\n      AssociationRoleIF role = (AssociationRoleIF) it.next();\n      if (isRoleHidden(role, pquery))\n        continue; // if the filter hides this association we just skip it\n\n      AssociationIF assoc = role.getAssociation();\n      if (getWeakTypes().contains(getObjectId(assoc.getType()))) {\n        // this is a weak type\n        if (assoc.getRoles().size() != 2)\n          throw new OntopiaRuntimeException(\"Weak associations cannot be \" +\n                                            \"n-ary or unary\");\n        AssociationRoleIF other = getOtherRole(assoc, role);\n        TopicIF player = other.getPlayer();\n        TopicIF ttype = null;\n        if (player.getTypes().size() > 0)\n          ttype = (TopicIF) player.getTypes().iterator().next();\n        String key = getObjectId(ttype);\n        Heading heading = (Heading) typemap.get(key);\n        if (heading == null) {\n          heading = new Heading(ttype);\n          if (headingOrderQuery != null)\n            heading.setSortKey(getSortKey(ttype, headingOrderQuery));\n          typemap.put(key, heading);\n        }\n        Association child = new Association(role, false);\n        if (childOrderQuery != null)\n          child.setSortKey(getSortKey(child.getPlayer(), childOrderQuery));\n        heading.addChild(child);\n      } else {\n        // not a weak type\n        String key = getObjectId(assoc.getType()) + \".\" +\n                     getObjectId(role.getType());\n        Heading heading = (Heading) typemap.get(key);\n        if (heading == null) {\n          heading = new Heading(assoc.getType(), role.getType());\n          if (headingOrderQuery != null)\n            heading.setSortKey(getSortKey(assoc.getType(), headingOrderQuery));\n          typemap.put(key, heading);\n        }\n        Association child = new Association(role, true);\n        if (childOrderQuery != null)\n          child.setSortKey(getSortKey(child.getPlayer(), childOrderQuery));\n        heading.addChild(child);\n      }\n    }\n\n    // sort the headings\n    List headings = new ArrayList(typemap.values());\n    Collections.sort(headings);\n\n    // sort the children\n    for (int i=0; i < headings.size(); i++) {\n      Heading heading = (Heading)headings.get(i);\n      Collections.sort(heading.children);      \n    }\n    \n    // we're done\n    return headings;\n  }", "signature": "List makeModel(TopicIF topic)", "full_signature": "public List makeModel(TopicIF topic)", "class_method_signature": "RelatedTopics.makeModel(TopicIF topic)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "isEmpty", "isEmpty", "updateCache", "getTopicMap", "parse", "getTopicMap", "parse", "getTopicMap", "parse", "getTopicMap", "iterator", "getRoles", "hasNext", "next", "isRoleHidden", "getAssociation", "contains", "getWeakTypes", "getObjectId", "getType", "size", "getRoles", "getOtherRole", "getPlayer", "size", "getTypes", "next", "iterator", "getTypes", "getObjectId", "get", "setSortKey", "getSortKey", "put", "setSortKey", "getSortKey", "getPlayer", "addChild", "getObjectId", "getType", "getObjectId", "getType", "get", "getType", "getType", "setSortKey", "getSortKey", "getType", "put", "setSortKey", "getSortKey", "getPlayer", "addChild", "values", "sort", "size", "get", "sort"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}