{"test_class": {"identifier": "FileAppenderStepTest", "superclass": "", "interfaces": "", "fields": [], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/utils/FileAppenderStepTest.java"}, "test_case": {"identifier": "doTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doTest() throws SaxonApiException, FileNotFoundException, IOException {\n        Configuration config = Configuration.newConfiguration();\n        Processor processor = new Processor(config);\n        XsltTransformer transformer = processor.newXsltCompiler().compile(new StreamSource(\"src/test/resources/identity.xsl\")).load();\n        Serializer serializer = processor.newSerializer(new File(\"target/generated-test-files/output.xml\"));\n        FileAppenderStep fas = new FileAppenderStep();\n        fas.setParameter(FileAppenderStep.FILE_NAME, new XdmAtomicValue(\"target/generated-test-files/appendee.txt\"));\n        fas.setParameter(FileAppenderStep.VALUE, new XdmAtomicValue(\"blablabla\"));\n        fas.setParameter(FileAppenderStep.LINE_SEPARATOR, new XdmAtomicValue(\"LF\"));\n        fas.setDestination(serializer);\n        transformer.setDestination(fas);\n        transformer.setSource(new StreamSource(\"src/test/resources/source.xml\"));\n        File expect = new File(\"target/generated-test-files/appendee.txt\");\n        if(expect.exists()) expect.delete();\n        transformer.transform();\n        assertTrue(expect.isFile());\n        BufferedReader br = new BufferedReader(new FileReader(expect));\n        char[] buff = new char[30];\n        int ret = br.read(buff);\n        br.close();\n        assertEquals(10, ret);\n        char[] ex = new char[] { 'b', 'l', 'a', 'b', 'l', 'a', 'b', 'l', 'a', '\\n'};\n        assertArrayEquals(ex, Arrays.copyOf(buff, ret));\n        fas.setDestination(processor.newSerializer(new File(\"target/generated-test-files/output2.xml\")));\n        transformer.transform();\n        br = new BufferedReader(new FileReader(expect));\n        ret = br.read(buff);\n        br.close();\n        assertEquals(20, ret);\n    }", "signature": "void doTest()", "full_signature": "@Test public void doTest()", "class_method_signature": "FileAppenderStepTest.doTest()", "testcase": true, "constructor": false, "invocations": ["newConfiguration", "load", "compile", "newXsltCompiler", "newSerializer", "setParameter", "setParameter", "setParameter", "setDestination", "setDestination", "setSource", "exists", "delete", "transform", "assertTrue", "isFile", "read", "close", "assertEquals", "assertArrayEquals", "copyOf", "setDestination", "newSerializer", "transform", "read", "close", "assertEquals"]}, "focal_class": {"identifier": "FileAppenderStep", "superclass": "extends StepJava", "interfaces": "", "fields": [{"original_string": "public static final QName FILE_NAME = new QName(\"filePath\");", "modifier": "public static final", "type": "QName", "declarator": "FILE_NAME = new QName(\"filePath\")", "var_name": "FILE_NAME"}, {"original_string": "public static final QName VALUE = new QName(\"value\");", "modifier": "public static final", "type": "QName", "declarator": "VALUE = new QName(\"value\")", "var_name": "VALUE"}, {"original_string": "public static final QName LINE_SEPARATOR = new QName(\"lineSeparator\");", "modifier": "public static final", "type": "QName", "declarator": "LINE_SEPARATOR = new QName(\"lineSeparator\")", "var_name": "LINE_SEPARATOR"}, {"original_string": "public static final QName ENCODING = new QName(\"encoding\");", "modifier": "public static final", "type": "QName", "declarator": "ENCODING = new QName(\"encoding\")", "var_name": "ENCODING"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileAppenderStep.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileAppenderStep.class)", "var_name": "LOGGER"}, {"original_string": "private Receiver underlyingReceiver;", "modifier": "private", "type": "Receiver", "declarator": "underlyingReceiver", "var_name": "underlyingReceiver"}], "methods": [{"identifier": "getReceiver", "parameters": "(Configuration c)", "modifiers": "@Override public", "return": "Receiver", "signature": "Receiver getReceiver(Configuration c)", "full_signature": "@Override public Receiver getReceiver(Configuration c)", "class_method_signature": "FileAppenderStep.getReceiver(Configuration c)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileAppenderStep.close()", "testcase": false, "constructor": false}, {"identifier": "getLineSeparator", "parameters": "(final XdmValue in)", "modifiers": "static", "return": "String", "signature": "String getLineSeparator(final XdmValue in)", "full_signature": "static String getLineSeparator(final XdmValue in)", "class_method_signature": "FileAppenderStep.getLineSeparator(final XdmValue in)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(final XdmValue value)", "modifiers": "static", "return": "Charset", "signature": "Charset getCharset(final XdmValue value)", "full_signature": "static Charset getCharset(final XdmValue value)", "class_method_signature": "FileAppenderStep.getCharset(final XdmValue value)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/utils/FileAppenderStep.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() throws SaxonApiException {\n        // nothing to do\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileAppenderStep.close()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}