{"test_class": {"identifier": "SourceTreeTableTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [{"original_string": "private final SourceType sourceType = new MockSourceType();", "modifier": "private final", "type": "SourceType", "declarator": "sourceType = new MockSourceType()", "var_name": "sourceType"}, {"original_string": "private final TreeItem<SourceEntry> root = new FilterableTreeItem<>(sourceType.createRootSourceEntry());", "modifier": "private final", "type": "TreeItem<SourceEntry>", "declarator": "root = new FilterableTreeItem<>(sourceType.createRootSourceEntry())", "var_name": "root"}, {"original_string": "private SourceTreeTable<SourceEntry, ?> tree;", "modifier": "private", "type": "SourceTreeTable<SourceEntry, ?>", "declarator": "tree", "var_name": "tree"}], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/components/SourceTreeTableTest.java"}, "test_case": {"identifier": "testUpdateFirstLevelEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdateFirstLevelEntry() {\n    SourceEntry entry = sourceType.createSourceEntryForUri(\"firstLevel\");\n    tree.updateEntry(entry);\n    ObservableList<TreeItem<SourceEntry>> children = root.getChildren();\n    assertEquals(1, children.size(), \"Should be 1 child\");\n    TreeItem<SourceEntry> child = children.get(0);\n    assertAll(\"\", () -> {\n      assertEquals(\"firstLevel\", child.getValue().getName());\n    });\n  }", "signature": "void testUpdateFirstLevelEntry()", "full_signature": "@Test public void testUpdateFirstLevelEntry()", "class_method_signature": "SourceTreeTableTest.testUpdateFirstLevelEntry()", "testcase": true, "constructor": false, "invocations": ["createSourceEntryForUri", "updateEntry", "getChildren", "assertEquals", "size", "get", "assertAll", "assertEquals", "getName", "getValue"]}, "focal_class": {"identifier": "SourceTreeTable", "superclass": "extends TreeTableView<S>", "interfaces": "", "fields": [{"original_string": "public static final Comparator<TreeItem<? extends SourceEntry>> branchesFirst\n      = (o1, o2) -> Boolean.compare(o1.isLeaf(), o2.isLeaf());", "modifier": "public static final", "type": "Comparator<TreeItem<? extends SourceEntry>>", "declarator": "branchesFirst\n      = (o1, o2) -> Boolean.compare(o1.isLeaf(), o2.isLeaf())", "var_name": "branchesFirst"}, {"original_string": "public static final Comparator<TreeItem<? extends SourceEntry>> alphabetical\n      = Comparator.comparing(item -> item.getValue().getViewName(), AlphanumComparator.INSTANCE);", "modifier": "public static final", "type": "Comparator<TreeItem<? extends SourceEntry>>", "declarator": "alphabetical\n      = Comparator.comparing(item -> item.getValue().getViewName(), AlphanumComparator.INSTANCE)", "var_name": "alphabetical"}, {"original_string": "private final ObjectProperty<SourceType> sourceType = new SimpleObjectProperty<>(this, \"sourceType\", null);", "modifier": "private final", "type": "ObjectProperty<SourceType>", "declarator": "sourceType = new SimpleObjectProperty<>(this, \"sourceType\", null)", "var_name": "sourceType"}, {"original_string": "private final TreeTableColumn<S, String> keyColumn = new TreeTableColumn<>(\"Name\");", "modifier": "private final", "type": "TreeTableColumn<S, String>", "declarator": "keyColumn = new TreeTableColumn<>(\"Name\")", "var_name": "keyColumn"}, {"original_string": "private final TreeTableColumn<S, V> valueColumn = new TreeTableColumn<>(\"Value\");", "modifier": "private final", "type": "TreeTableColumn<S, V>", "declarator": "valueColumn = new TreeTableColumn<>(\"Value\")", "var_name": "valueColumn"}], "methods": [{"identifier": "SourceTreeTable", "parameters": "()", "modifiers": "public", "return": "", "signature": " SourceTreeTable()", "full_signature": "public  SourceTreeTable()", "class_method_signature": "SourceTreeTable.SourceTreeTable()", "testcase": false, "constructor": true}, {"identifier": "updateEntry", "parameters": "(S entry)", "modifiers": "public", "return": "void", "signature": "void updateEntry(S entry)", "full_signature": "public void updateEntry(S entry)", "class_method_signature": "SourceTreeTable.updateEntry(S entry)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(S entry)", "modifiers": "public", "return": "void", "signature": "void removeEntry(S entry)", "full_signature": "public void removeEntry(S entry)", "class_method_signature": "SourceTreeTable.removeEntry(S entry)", "testcase": false, "constructor": false}, {"identifier": "makeBranches", "parameters": "(S entry, boolean deleted)", "modifiers": "private", "return": "void", "signature": "void makeBranches(S entry, boolean deleted)", "full_signature": "private void makeBranches(S entry, boolean deleted)", "class_method_signature": "SourceTreeTable.makeBranches(S entry, boolean deleted)", "testcase": false, "constructor": false}, {"identifier": "getEntryForCellData", "parameters": "(TreeTableColumn.CellDataFeatures<T, ?> features)", "modifiers": "protected static", "return": "T", "signature": "T getEntryForCellData(TreeTableColumn.CellDataFeatures<T, ?> features)", "full_signature": "protected static T getEntryForCellData(TreeTableColumn.CellDataFeatures<T, ?> features)", "class_method_signature": "SourceTreeTable.getEntryForCellData(TreeTableColumn.CellDataFeatures<T, ?> features)", "testcase": false, "constructor": false}, {"identifier": "getSourceType", "parameters": "()", "modifiers": "public final", "return": "SourceType", "signature": "SourceType getSourceType()", "full_signature": "public final SourceType getSourceType()", "class_method_signature": "SourceTreeTable.getSourceType()", "testcase": false, "constructor": false}, {"identifier": "sourceTypeProperty", "parameters": "()", "modifiers": "public final", "return": "ObjectProperty<SourceType>", "signature": "ObjectProperty<SourceType> sourceTypeProperty()", "full_signature": "public final ObjectProperty<SourceType> sourceTypeProperty()", "class_method_signature": "SourceTreeTable.sourceTypeProperty()", "testcase": false, "constructor": false}, {"identifier": "setSourceType", "parameters": "(SourceType sourceType)", "modifiers": "public final", "return": "void", "signature": "void setSourceType(SourceType sourceType)", "full_signature": "public final void setSourceType(SourceType sourceType)", "class_method_signature": "SourceTreeTable.setSourceType(SourceType sourceType)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/components/SourceTreeTable.java"}, "focal_method": {"identifier": "updateEntry", "parameters": "(S entry)", "modifiers": "public", "return": "void", "body": "public void updateEntry(S entry) {\n    makeBranches(entry, false);\n  }", "signature": "void updateEntry(S entry)", "full_signature": "public void updateEntry(S entry)", "class_method_signature": "SourceTreeTable.updateEntry(S entry)", "testcase": false, "constructor": false, "invocations": ["makeBranches"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}