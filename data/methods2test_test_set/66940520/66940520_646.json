{"test_class": {"identifier": "QuarterlyPeriodTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateTime startDate;", "modifier": "private", "type": "DateTime", "declarator": "startDate", "var_name": "startDate"}, {"original_string": "private DateTime endDate;", "modifier": "private", "type": "DateTime", "declarator": "endDate", "var_name": "endDate"}, {"original_string": "private DateTime testDate;", "modifier": "private", "type": "DateTime", "declarator": "testDate", "var_name": "testDate"}, {"original_string": "private QuarterlyPeriodType periodType;", "modifier": "private", "type": "QuarterlyPeriodType", "declarator": "periodType", "var_name": "periodType"}], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/period/QuarterlyPeriodTypeTest.java"}, "test_case": {"identifier": "testGetPreviousPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPreviousPeriod()\n    {\n        testDate = new DateTime( 2009, 8, 15, 0, 0 );\n\n        Period period = periodType.createPeriod( testDate.toDate() );\n\n        period = periodType.getPreviousPeriod( period );\n\n        startDate = new DateTime( 2009, 4, 1, 0, 0 );\n        endDate = new DateTime( 2009, 6, 30, 0, 0 );\n\n        assertEquals( startDate.toDate(), period.getStartDate() );\n        assertEquals( endDate.toDate(), period.getEndDate() );\n    }", "signature": "void testGetPreviousPeriod()", "full_signature": "@Test public void testGetPreviousPeriod()", "class_method_signature": "QuarterlyPeriodTypeTest.testGetPreviousPeriod()", "testcase": true, "constructor": false, "invocations": ["createPeriod", "toDate", "getPreviousPeriod", "assertEquals", "toDate", "getStartDate", "assertEquals", "toDate", "getEndDate"]}, "focal_class": {"identifier": "QuarterlyPeriodType", "superclass": "extends CalendarPeriodType", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5973809094923012052L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5973809094923012052L", "var_name": "serialVersionUID"}, {"original_string": "private static final String ISO_FORMAT = \"yyyyQn\";", "modifier": "private static final", "type": "String", "declarator": "ISO_FORMAT = \"yyyyQn\"", "var_name": "ISO_FORMAT"}, {"original_string": "private static final String ISO8601_DURATION = \"P3M\";", "modifier": "private static final", "type": "String", "declarator": "ISO8601_DURATION = \"P3M\"", "var_name": "ISO8601_DURATION"}, {"original_string": "private static final String ISO_CALENDAR_NAME = org.hisp.dhis.calendar.impl.Iso8601Calendar.getInstance().name();", "modifier": "private static final", "type": "String", "declarator": "ISO_CALENDAR_NAME = org.hisp.dhis.calendar.impl.Iso8601Calendar.getInstance().name()", "var_name": "ISO_CALENDAR_NAME"}, {"original_string": "public static final String NAME = \"Quarterly\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"Quarterly\"", "var_name": "NAME"}, {"original_string": "public static final int FREQUENCY_ORDER = 91;", "modifier": "public static final", "type": "int", "declarator": "FREQUENCY_ORDER = 91", "var_name": "FREQUENCY_ORDER"}, {"original_string": "public static final String SQL_INTERVAL = \"3 months\";", "modifier": "public static final", "type": "String", "declarator": "SQL_INTERVAL = \"3 months\"", "var_name": "SQL_INTERVAL"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "QuarterlyPeriodType.getName()", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "Period", "signature": "Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "QuarterlyPeriodType.createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getFrequencyOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFrequencyOrder()", "full_signature": "@Override public int getFrequencyOrder()", "class_method_signature": "QuarterlyPeriodType.getFrequencyOrder()", "testcase": false, "constructor": false}, {"identifier": "getSqlInterval", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSqlInterval()", "full_signature": "@Override public String getSqlInterval()", "class_method_signature": "QuarterlyPeriodType.getSqlInterval()", "testcase": false, "constructor": false}, {"identifier": "getDateWithOffset", "parameters": "( DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "modifiers": "@Override public", "return": "DateTimeUnit", "signature": "DateTimeUnit getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "full_signature": "@Override public DateTimeUnit getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "class_method_signature": "QuarterlyPeriodType.getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "generatePeriods", "parameters": "( DateTimeUnit dateTimeUnit )", "modifiers": "@Override public", "return": "List<Period>", "signature": "List<Period> generatePeriods( DateTimeUnit dateTimeUnit )", "full_signature": "@Override public List<Period> generatePeriods( DateTimeUnit dateTimeUnit )", "class_method_signature": "QuarterlyPeriodType.generatePeriods( DateTimeUnit dateTimeUnit )", "testcase": false, "constructor": false}, {"identifier": "generateRollingPeriods", "parameters": "( Date date )", "modifiers": "@Override public", "return": "List<Period>", "signature": "List<Period> generateRollingPeriods( Date date )", "full_signature": "@Override public List<Period> generateRollingPeriods( Date date )", "class_method_signature": "QuarterlyPeriodType.generateRollingPeriods( Date date )", "testcase": false, "constructor": false}, {"identifier": "generateRollingPeriods", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "List<Period>", "signature": "List<Period> generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public List<Period> generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "QuarterlyPeriodType.generateRollingPeriods( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "String", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "QuarterlyPeriodType.getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getIsoFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIsoFormat()", "full_signature": "@Override public String getIsoFormat()", "class_method_signature": "QuarterlyPeriodType.getIsoFormat()", "testcase": false, "constructor": false}, {"identifier": "getIso8601Duration", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIso8601Duration()", "full_signature": "@Override public String getIso8601Duration()", "class_method_signature": "QuarterlyPeriodType.getIso8601Duration()", "testcase": false, "constructor": false}, {"identifier": "getRewindedDate", "parameters": "( Date date, Integer rewindedPeriods )", "modifiers": "@Override public", "return": "Date", "signature": "Date getRewindedDate( Date date, Integer rewindedPeriods )", "full_signature": "@Override public Date getRewindedDate( Date date, Integer rewindedPeriods )", "class_method_signature": "QuarterlyPeriodType.getRewindedDate( Date date, Integer rewindedPeriods )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/QuarterlyPeriodType.java"}, "focal_method": {"identifier": "createPeriod", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "Period", "body": "@Override\n    public Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )\n    {\n        DateTimeUnit start = new DateTimeUnit( dateTimeUnit );\n\n        start.setMonth( ((dateTimeUnit.getMonth() - 1) - ((dateTimeUnit.getMonth() - 1) % 3)) + 1 );\n        start.setDay( 1 );\n\n        if ( start.getMonth() > 12 )\n        {\n            start.setYear( start.getYear() + 1 );\n            start.setMonth( 1 );\n        }\n\n        DateTimeUnit end = new DateTimeUnit( start );\n        end = calendar.plusMonths( end, 2 );\n        end.setDay( calendar.daysInMonth( end.getYear(), end.getMonth() ) );\n\n        return toIsoPeriod( start, end, calendar );\n    }", "signature": "Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public Period createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "QuarterlyPeriodType.createPeriod( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false, "invocations": ["setMonth", "getMonth", "getMonth", "setDay", "getMonth", "setYear", "getYear", "setMonth", "plusMonths", "setDay", "daysInMonth", "getYear", "getMonth", "toIsoPeriod"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}