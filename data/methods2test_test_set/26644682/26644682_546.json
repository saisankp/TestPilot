{"test_class": {"identifier": "XlsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/xls/XlsUtilsTest.java"}, "test_case": {"identifier": "get_active_sheets_simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get_active_sheets_simple() throws Exception {\n\n        List<String> names =\n                XlsUtils.getActiveSheetsFromWorkbookSpec(getClass().getResourceAsStream(\"simple_workbook.xml\"));\n\n        Assertions\n                .assertThat(names)\n                .isNotEmpty() //\n                .containsExactly(\"Feuille1\", \"Feuille2\", \"Feuille3\");\n\n    }", "signature": "void get_active_sheets_simple()", "full_signature": "@Test public void get_active_sheets_simple()", "class_method_signature": "XlsUtilsTest.get_active_sheets_simple()", "testcase": true, "constructor": false, "invocations": ["getActiveSheetsFromWorkbookSpec", "getResourceAsStream", "getClass", "containsExactly", "isNotEmpty", "assertThat"]}, "focal_class": {"identifier": "XlsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XlsUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XlsUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory;", "modifier": "private static final", "type": "XMLInputFactory", "declarator": "XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory", "var_name": "XML_INPUT_FACTORY"}], "methods": [{"identifier": "XlsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XlsUtils()", "full_signature": "private  XlsUtils()", "class_method_signature": "XlsUtils.XlsUtils()", "testcase": false, "constructor": true}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, FormulaEvaluator formulaEvaluator)", "modifiers": "public static", "return": "String", "signature": "String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "full_signature": "public static String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "testcase": false, "constructor": false}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, CellValue cellValue)", "modifiers": "private static", "return": "String", "signature": "String getCellValueAsString(Cell cell, CellValue cellValue)", "full_signature": "private static String getCellValueAsString(Cell cell, CellValue cellValue)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, CellValue cellValue)", "testcase": false, "constructor": false}, {"identifier": "getNumericValue", "parameters": "(Cell cell, CellValue cellValue, boolean fromFormula)", "modifiers": "private static", "return": "String", "signature": "String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "full_signature": "private static String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "class_method_signature": "XlsUtils.getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "testcase": false, "constructor": false}, {"identifier": "isNewExcelFormat", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNewExcelFormat(InputStream inputStream)", "full_signature": "public static boolean isNewExcelFormat(InputStream inputStream)", "class_method_signature": "XlsUtils.isNewExcelFormat(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getActiveSheetsFromWorkbookSpec", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "full_signature": "public static List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "class_method_signature": "XlsUtils.getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumber", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumber(InputStream inputStream)", "full_signature": "public static int getColumnsNumber(InputStream inputStream)", "class_method_signature": "XlsUtils.getColumnsNumber(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttributesNameValue", "parameters": "(XMLStreamReader streamReader)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "full_signature": "private static Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "class_method_signature": "XlsUtils.getAttributesNameValue(XMLStreamReader streamReader)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumberFromDimension", "parameters": "(String dimension)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumberFromDimension(String dimension)", "full_signature": "public static int getColumnsNumberFromDimension(String dimension)", "class_method_signature": "XlsUtils.getColumnsNumberFromDimension(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getColumnNumberFromCellRef", "parameters": "(String lastCell)", "modifiers": "public static", "return": "int", "signature": "int getColumnNumberFromCellRef(String lastCell)", "full_signature": "public static int getColumnNumberFromCellRef(String lastCell)", "class_method_signature": "XlsUtils.getColumnNumberFromCellRef(String lastCell)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/xls/XlsUtils.java"}, "focal_method": {"identifier": "getActiveSheetsFromWorkbookSpec", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream) throws XMLStreamException {\n        // If doesn't support mark, wrap up\n        if (!inputStream.markSupported()) {\n            inputStream = new PushbackInputStream(inputStream, 8);\n        }\n        XMLStreamReader streamReader = XML_INPUT_FACTORY.createXMLStreamReader(inputStream);\n        try {\n            /*\n             *\n             * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <workbook\n             * xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n             * xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"> <fileVersion appName=\"xl\"\n             * lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"9303\" codeName=\"{8C4F1C90-05EB-6A55-5F09-09C24B55AC0B}\"/>\n             * <workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion=\"124226\"/> <bookViews> <workbookView xWindow=\"0\"\n             * yWindow=\"732\" windowWidth=\"22980\" windowHeight=\"8868\" firstSheet=\"1\" activeTab=\"8\"/> </bookViews>\n             * <sheets> <sheet name=\"formdata\" sheetId=\"4\" state=\"hidden\" r:id=\"rId1\"/> <sheet name=\"MONDAY\" sheetId=\"1\"\n             * r:id=\"rId2\"/> <sheet name=\"TUESDAY\" sheetId=\"8\" r:id=\"rId3\"/> <sheet name=\"WEDNESDAY\" sheetId=\"10\"\n             * r:id=\"rId4\"/> <sheet name=\"THURSDAY\" sheetId=\"11\" r:id=\"rId5\"/> <sheet name=\"FRIDAY\" sheetId=\"12\"\n             * r:id=\"rId6\"/> <sheet name=\"SATURDAY\" sheetId=\"13\" r:id=\"rId7\"/> <sheet name=\"SUNDAY\" sheetId=\"14\"\n             * r:id=\"rId8\"/> <sheet name=\"WEEK SUMMARY\" sheetId=\"15\" r:id=\"rId9\"/> </sheets>\n             *\n             */\n            // we only want sheets not with state=hidden\n\n            List<String> names = new ArrayList<>();\n\n            while (streamReader.hasNext()) {\n                switch (streamReader.next()) {\n                case START_ELEMENT:\n                    if (StringUtils.equals(streamReader.getLocalName(), \"sheet\")) {\n                        Map<String, String> attributesValues = getAttributesNameValue(streamReader);\n                        if (!attributesValues.isEmpty()) {\n                            String sheetState = attributesValues.get(\"state\");\n                            if (!StringUtils.equals(sheetState, \"hidden\")) {\n                                String sheetName = attributesValues.get(\"name\");\n                                names.add(sheetName);\n                            }\n                        }\n                    }\n                    break;\n                case XMLStreamConstants.END_ELEMENT:\n                    if (StringUtils.equals(streamReader.getLocalName(), \"sheets\")) {\n                        // shortcut to stop parsing\n                        return names;\n                    }\n                    break;\n                default:\n                    // no op\n                }\n            }\n            return names;\n        } finally {\n            if (streamReader != null) {\n                streamReader.close();\n            }\n        }\n    }", "signature": "List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "full_signature": "public static List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "class_method_signature": "XlsUtils.getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["markSupported", "createXMLStreamReader", "hasNext", "next", "equals", "getLocalName", "getAttributesNameValue", "isEmpty", "get", "equals", "get", "add", "equals", "getLocalName", "close"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}