{"test_class": {"identifier": "WriteProjectFileTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/WriteProjectFileTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest(WriteProjectFile.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(WriteProjectFile.class)\n  public void testExecute() throws Exception {\n    // Given\n    mockStatic(Files.class);\n    final BufferedWriter bufferedWriter = mock(BufferedWriter.class);\n    when(Files.newBufferedWriter(any(Path.class))).thenReturn(bufferedWriter);\n\n    // When\n    final WriteProjectFile command = new WriteProjectFile();\n    command.setArguments(singletonList(randomUUID().toString()));\n    command.execute();\n\n    // Then\n    verify(bufferedWriter).write(any(char[].class), anyInt(), anyInt());\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest(WriteProjectFile.class) public void testExecute()", "class_method_signature": "WriteProjectFileTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "mock", "thenReturn", "when", "newBufferedWriter", "any", "setArguments", "singletonList", "toString", "randomUUID", "execute", "write", "verify", "any", "anyInt", "anyInt"]}, "focal_class": {"identifier": "WriteProjectFile", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "@Getter\n  @Setter\n  protected ProjectFile project = new ProjectFile();", "modifier": "@Getter\n  @Setter\n  protected", "type": "ProjectFile", "declarator": "project = new ProjectFile()", "var_name": "project"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "WriteProjectFile.execute()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/WriteProjectFile.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    assertTrue(1 == arguments.size());\n    final Path projectFilePath = Paths.get(arguments.get(0));\n    final ObjectMapper mapper = new ObjectMapper();\n    if (Files.exists(projectFilePath)) {\n      logger.warn(\"Project file already exists\");\n      return;\n    }\n    try (final BufferedWriter writer = newBufferedWriter(projectFilePath)) {\n      mapper.writerWithDefaultPrettyPrinter().writeValue(writer, project);\n    }\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "WriteProjectFile.execute()", "testcase": false, "constructor": false, "invocations": ["assertTrue", "size", "get", "get", "exists", "warn", "newBufferedWriter", "writeValue", "writerWithDefaultPrettyPrinter"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}