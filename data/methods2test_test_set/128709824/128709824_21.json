{"test_class": {"identifier": "NacosRegistryHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "registry/registry-nacos/src/test/java/com/alipay/sofa/rpc/registry/nacos/NacosRegistryHelperTest.java"}, "test_case": {"identifier": "convertProviderToInstances", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertProviderToInstances() {\n        ServerConfig serverConfig = new ServerConfig()\n            .setProtocol(\"bolt\")\n            .setHost(\"0.0.0.0\")\n            .setPort(12200);\n\n        ProviderConfig<?> provider = new ProviderConfig();\n        provider.setInterfaceId(\"com.alipay.xxx.TestService\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setUniqueId(\"nacos-test\")\n            .setProxy(\"javassist\")\n            .setRegister(true)\n            .setSerialization(\"hessian2\")\n            .setServer(serverConfig)\n            .setWeight(222)\n            .setTimeout(3000);\n\n        List<Instance> instances = NacosRegistryHelper.convertProviderToInstances(provider);\n        assertNotNull(instances);\n        assertEquals(1, instances.size());\n\n        Instance instance = instances.get(0);\n        assertNotNull(instance);\n        assertEquals(NacosRegistryHelper.DEFAULT_CLUSTER, instance.getClusterName());\n        assertEquals(serverConfig.getPort(), instance.getPort());\n        assertEquals(serverConfig.getProtocol(), instance.getMetadata().get(RpcConstants.CONFIG_KEY_PROTOCOL));\n        assertEquals(provider.getSerialization(), instance.getMetadata().get(RpcConstants.CONFIG_KEY_SERIALIZATION));\n        assertEquals(provider.getUniqueId(), instance.getMetadata().get(RpcConstants.CONFIG_KEY_UNIQUEID));\n        assertEquals(provider.getWeight(),\n            Integer.parseInt(instance.getMetadata().get(RpcConstants.CONFIG_KEY_WEIGHT)));\n        assertEquals(provider.getTimeout(),\n            Integer.parseInt(instance.getMetadata().get(RpcConstants.CONFIG_KEY_TIMEOUT)));\n        assertEquals(provider.getSerialization(), instance.getMetadata().get(RpcConstants.CONFIG_KEY_SERIALIZATION));\n        assertEquals(provider.getAppName(), instance.getMetadata().get(RpcConstants.CONFIG_KEY_APP_NAME));\n        assertEquals(\"com.alipay.xxx.TestService:nacos-test:DEFAULT\", instance.getServiceName());\n    }", "signature": "void convertProviderToInstances()", "full_signature": "@Test public void convertProviderToInstances()", "class_method_signature": "NacosRegistryHelperTest.convertProviderToInstances()", "testcase": true, "constructor": false, "invocations": ["setPort", "setHost", "setProtocol", "setTimeout", "setWeight", "setServer", "setSerialization", "setRegister", "setProxy", "setUniqueId", "setApplication", "setInterfaceId", "setAppName", "convertProviderToInstances", "assertNotNull", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "getClusterName", "assertEquals", "getPort", "getPort", "assertEquals", "getProtocol", "get", "getMetadata", "assertEquals", "getSerialization", "get", "getMetadata", "assertEquals", "getUniqueId", "get", "getMetadata", "assertEquals", "getWeight", "parseInt", "get", "getMetadata", "assertEquals", "getTimeout", "parseInt", "get", "getMetadata", "assertEquals", "getSerialization", "get", "getMetadata", "assertEquals", "getAppName", "get", "getMetadata", "assertEquals", "getServiceName"]}, "focal_class": {"identifier": "NacosRegistryHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String DEFAULT_CLUSTER = \"default-cluster\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_CLUSTER = \"default-cluster\"", "var_name": "DEFAULT_CLUSTER"}], "methods": [{"identifier": "buildServiceName", "parameters": "(AbstractInterfaceConfig config, String protocol)", "modifiers": "static", "return": "String", "signature": "String buildServiceName(AbstractInterfaceConfig config, String protocol)", "full_signature": "static String buildServiceName(AbstractInterfaceConfig config, String protocol)", "class_method_signature": "NacosRegistryHelper.buildServiceName(AbstractInterfaceConfig config, String protocol)", "testcase": false, "constructor": false}, {"identifier": "convertProviderToInstances", "parameters": "(ProviderConfig providerConfig)", "modifiers": "static", "return": "List<Instance>", "signature": "List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "full_signature": "static List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "class_method_signature": "NacosRegistryHelper.convertProviderToInstances(ProviderConfig providerConfig)", "testcase": false, "constructor": false}, {"identifier": "convertInstancesToProviders", "parameters": "(List<Instance> allInstances)", "modifiers": "static", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> convertInstancesToProviders(List<Instance> allInstances)", "full_signature": "static List<ProviderInfo> convertInstancesToProviders(List<Instance> allInstances)", "class_method_signature": "NacosRegistryHelper.convertInstancesToProviders(List<Instance> allInstances)", "testcase": false, "constructor": false}, {"identifier": "convertInstanceToUrl", "parameters": "(Instance instance)", "modifiers": "private static", "return": "String", "signature": "String convertInstanceToUrl(Instance instance)", "full_signature": "private static String convertInstanceToUrl(Instance instance)", "class_method_signature": "NacosRegistryHelper.convertInstanceToUrl(Instance instance)", "testcase": false, "constructor": false}], "file": "registry/registry-nacos/src/main/java/com/alipay/sofa/rpc/registry/nacos/NacosRegistryHelper.java"}, "focal_method": {"identifier": "convertProviderToInstances", "parameters": "(ProviderConfig providerConfig)", "modifiers": "static", "return": "List<Instance>", "body": "static List<Instance> convertProviderToInstances(ProviderConfig providerConfig) {\n        @SuppressWarnings(\"unchecked\")\n        List<ServerConfig> servers = providerConfig.getServer();\n        if (servers != null && !servers.isEmpty()) {\n            List<Instance> instances = new ArrayList<Instance>();\n            for (ServerConfig server : servers) {\n                String serviceName = buildServiceName(providerConfig, server.getProtocol());\n                Instance instance = new Instance();\n                instance.setClusterName(DEFAULT_CLUSTER);\n                instance.setServiceName(serviceName);\n\n                // set host port\n                String host = server.getVirtualHost();\n                if (host == null) {\n                    host = server.getHost();\n                    if (NetUtils.isLocalHost(host) || NetUtils.isAnyHost(host)) {\n                        host = SystemInfo.getLocalHost();\n                    }\n                }\n                instance.setIp(host);\n                instance.setPort(server.getPort());\n\n                // set meta data\n                Map<String, String> metaData = RegistryUtils.convertProviderToMap(providerConfig, server);\n                instance.setMetadata(metaData);\n\n                instances.add(instance);\n            }\n            return instances;\n        }\n        return null;\n    }", "signature": "List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "full_signature": "static List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "class_method_signature": "NacosRegistryHelper.convertProviderToInstances(ProviderConfig providerConfig)", "testcase": false, "constructor": false, "invocations": ["getServer", "isEmpty", "buildServiceName", "getProtocol", "setClusterName", "setServiceName", "getVirtualHost", "getHost", "isLocalHost", "isAnyHost", "getLocalHost", "setIp", "setPort", "getPort", "convertProviderToMap", "setMetadata", "add"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}