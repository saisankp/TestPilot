{"test_class": {"identifier": "ServiceEmitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypescriptServiceGeneratorConfiguration settings;", "modifier": "private", "type": "TypescriptServiceGeneratorConfiguration", "declarator": "settings", "var_name": "settings"}, {"original_string": "private IndentedOutputWriter writer;", "modifier": "private", "type": "IndentedOutputWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private ByteArrayOutputStream stream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private ServiceClassParser serviceClassParser;", "modifier": "private", "type": "ServiceClassParser", "declarator": "serviceClassParser", "var_name": "serviceClassParser"}], "file": "typescript-service-generator-core/src/test/java/com/palantir/code/ts/generator/ServiceEmitterTest.java"}, "test_case": {"identifier": "testAdditionalClassesToOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdditionalClassesToOutput() {\n        ServiceModel model = serviceClassParser.parseServiceClass(TestServiceClass.class, settings);\n        ServiceEmitter serviceEmitter = new ServiceEmitter(model, settings, writer);\n        serviceEmitter.emitTypescriptTypes(settings, Lists.newArrayList(MyObject.class));\n        writer.close();\n        String expectedOutput = \"\\n\" +\n\"    export interface MyObject {\\n\" +\n\"        y: MyObject;\\n\" +\n\"    }\\n\\n\\n    // Added by 'EnumConstantsExtension' extension\\n\";\n        assertEquals(expectedOutput, new String(stream.toByteArray()));\n    }", "signature": "void testAdditionalClassesToOutput()", "full_signature": "@Test public void testAdditionalClassesToOutput()", "class_method_signature": "ServiceEmitterTest.testAdditionalClassesToOutput()", "testcase": true, "constructor": false, "invocations": ["parseServiceClass", "emitTypescriptTypes", "newArrayList", "close", "assertEquals", "toByteArray"]}, "focal_class": {"identifier": "ServiceEmitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper()", "var_name": "OBJECT_MAPPER"}, {"original_string": "private final ServiceModel model;", "modifier": "private final", "type": "ServiceModel", "declarator": "model", "var_name": "model"}, {"original_string": "private final TypescriptServiceGeneratorConfiguration settings;", "modifier": "private final", "type": "TypescriptServiceGeneratorConfiguration", "declarator": "settings", "var_name": "settings"}, {"original_string": "private final IndentedOutputWriter writer;", "modifier": "private final", "type": "IndentedOutputWriter", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "ServiceEmitter", "parameters": "(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "modifiers": "public", "return": "", "signature": " ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "full_signature": "public  ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "class_method_signature": "ServiceEmitter.ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "testcase": false, "constructor": true}, {"identifier": "emitTypescriptTypes", "parameters": "(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "modifiers": "public", "return": "void", "signature": "void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "full_signature": "public void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "class_method_signature": "ServiceEmitter.emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "testcase": false, "constructor": false}, {"identifier": "emitTypescriptClass", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void emitTypescriptClass()", "full_signature": "public void emitTypescriptClass()", "class_method_signature": "ServiceEmitter.emitTypescriptClass()", "testcase": false, "constructor": false}, {"identifier": "emitTypescriptInterface", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void emitTypescriptInterface()", "full_signature": "public void emitTypescriptInterface()", "class_method_signature": "ServiceEmitter.emitTypescriptInterface()", "testcase": false, "constructor": false}, {"identifier": "getDuplicateEndpointNames", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getDuplicateEndpointNames()", "full_signature": "private Set<String> getDuplicateEndpointNames()", "class_method_signature": "ServiceEmitter.getDuplicateEndpointNames()", "testcase": false, "constructor": false}, {"identifier": "getEndpointPathString", "parameters": "(InnerServiceModel model, ServiceEndpointModel endpointModel)", "modifiers": "private", "return": "String", "signature": "String getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "full_signature": "private String getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "class_method_signature": "ServiceEmitter.getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "testcase": false, "constructor": false}, {"identifier": "getEndpointParametersString", "parameters": "(ServiceEndpointModel endpointModel)", "modifiers": "private", "return": "String", "signature": "String getEndpointParametersString(ServiceEndpointModel endpointModel)", "full_signature": "private String getEndpointParametersString(ServiceEndpointModel endpointModel)", "class_method_signature": "ServiceEmitter.getEndpointParametersString(ServiceEndpointModel endpointModel)", "testcase": false, "constructor": false}, {"identifier": "filterInputClasses", "parameters": "(Set<Class<?>> referencedClasses)", "modifiers": "private", "return": "Set<Class<?>>", "signature": "Set<Class<?>> filterInputClasses(Set<Class<?>> referencedClasses)", "full_signature": "private Set<Class<?>> filterInputClasses(Set<Class<?>> referencedClasses)", "class_method_signature": "ServiceEmitter.filterInputClasses(Set<Class<?>> referencedClasses)", "testcase": false, "constructor": false}, {"identifier": "getReferencedClasses", "parameters": "(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "full_signature": "public static Set<Class<?>> getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "class_method_signature": "ServiceEmitter.getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "testcase": false, "constructor": false}, {"identifier": "optionalToString", "parameters": "(Optional<T> payload)", "modifiers": "private static", "return": "String", "signature": "String optionalToString(Optional<T> payload)", "full_signature": "private static String optionalToString(Optional<T> payload)", "class_method_signature": "ServiceEmitter.optionalToString(Optional<T> payload)", "testcase": false, "constructor": false}], "file": "typescript-service-generator-core/src/main/java/com/palantir/code/ts/generator/ServiceEmitter.java"}, "focal_method": {"identifier": "emitTypescriptTypes", "parameters": "(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "modifiers": "public", "return": "void", "body": "public void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput) {\n        Settings settingsToUse = settings.getSettings();\n        TypeProcessor baseTypeProcessor = settingsToUse.customTypeProcessor;\n\n        Set<Type> referencedTypes = Sets.newHashSet(model.referencedTypes().iterator());\n        referencedTypes.addAll(additionalTypesToOutput);\n        Set<Class<?>> referencedClasses = getReferencedClasses(referencedTypes, settings);\n        final Set<Type> discoveredTypes = Sets.newHashSet(referencedClasses.iterator());\n        referencedClasses = filterInputClasses(referencedClasses);\n        TypeProcessor discoveringProcessor = new TypeProcessor() {\n            @Override\n            public Result processType(Type javaType, Context context) {\n                discoveredTypes.add(javaType);\n                return null;\n            }\n        };\n\n        settingsToUse.customTypeProcessor = discoveringProcessor;\n        if (baseTypeProcessor != null) {\n            settingsToUse.customTypeProcessor = new TypeProcessor.Chain(discoveringProcessor, baseTypeProcessor);\n        }\n\n        TypeScriptGenerator typescriptGenerator = new TypeScriptGenerator(settingsToUse);\n        ByteArrayOutputStream typeDeclarations = new ByteArrayOutputStream();\n        Type[] types = new Type[referencedClasses.size()];\n        referencedClasses.toArray(types);\n        int intendationLevel = 1;\n        if (!settings.typescriptModule().isPresent()) {\n        \tintendationLevel = 0;\n        }\n        typescriptGenerator.generateEmbeddableTypeScript(Input.from(types), Output.to(typeDeclarations), true, intendationLevel);\n        writer.write(new String(typeDeclarations.toByteArray()));\n    }", "signature": "void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "full_signature": "public void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "class_method_signature": "ServiceEmitter.emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "testcase": false, "constructor": false, "invocations": ["getSettings", "newHashSet", "iterator", "referencedTypes", "addAll", "getReferencedClasses", "newHashSet", "iterator", "filterInputClasses", "add", "size", "toArray", "isPresent", "typescriptModule", "generateEmbeddableTypeScript", "from", "to", "write", "toByteArray"]}, "repository": {"repo_id": 47846388, "url": "https://github.com/palantir/typescript-service-generator", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 20, "size": 371, "license": "licensed"}}