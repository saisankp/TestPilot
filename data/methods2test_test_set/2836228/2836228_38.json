{"test_class": {"identifier": "FeedGroupMapTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private ConfigurationStore store = ConfigurationStore.get();", "modifier": "private", "type": "ConfigurationStore", "declarator": "store = ConfigurationStore.get()", "var_name": "store"}, {"original_string": "private static Cluster cluster;", "modifier": "private static", "type": "Cluster", "declarator": "cluster", "var_name": "cluster"}], "file": "common/src/test/java/org/apache/ivory/group/FeedGroupMapTest.java"}, "test_case": {"identifier": "testOnAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOnAdd() throws IvoryException, JAXBException {\n\t\tstore.publish(EntityType.CLUSTER, cluster);\n\t\tFeed feed1 = (Feed) EntityType.FEED.getUnmarshaller().unmarshal(\n\t\t\t\tFeedGroupMapTest.class\n\t\t\t\t\t\t.getResourceAsStream(\"/config/feed/feed-0.1.xml\"));\n\t\tfeed1.setName(\"f1\");\n\t\tfeed1.setGroups(\"group1,group2,group3\");\n\t\tLocation location = new Location();\n\t\tlocation.setPath(\"/projects/bi/rmc/daily/ad/${YEAR}/fraud/${MONTH}-${DAY}/ad\");\n\t\tlocation.setType(LocationType.DATA);\n\t\tfeed1.setLocations(new Locations());\n\t\tfeed1.getLocations().getLocations().add(location);\n\t\tstore.publish(EntityType.FEED, feed1);\n\t\tMap<String, FeedGroup> groupMapping = FeedGroupMap.get()\n\t\t\t\t.getGroupsMapping();\n\n\t\tFeedGroup group = groupMapping.get(\"group1\");\n\t\tAssert.assertEquals(group.getName(), \"group1\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 1);\n\t\tassertFields(group, feed1);\n\n\t\tgroup = groupMapping.get(\"group2\");\n\t\tAssert.assertEquals(group.getName(), \"group2\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 1);\n\t\tassertFields(group, feed1);\n\n\t\tgroup = groupMapping.get(\"group3\");\n\t\tAssert.assertEquals(group.getName(), \"group3\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 1);\n\t\tassertFields(group, feed1);\n\n\t\tFeed feed2 = (Feed) EntityType.FEED.getUnmarshaller().unmarshal(\n\t\t\t\tFeedGroupMapTest.class\n\t\t\t\t\t\t.getResourceAsStream(\"/config/feed/feed-0.1.xml\"));\n\n\t\tfeed2.setName(\"f2\");\n\t\tfeed2.setGroups(\"group1,group5,group3\");\n\t\tlocation.setPath(\"/projects/bi/rmc/daily/ad/${YEAR}/${MONTH}/${DAY}/ad2\");\n        location.setType(LocationType.DATA);\n        feed2.setLocations(new Locations());\n        feed2.getLocations().getLocations().add(location);\n\t\tstore.publish(EntityType.FEED, feed2);\n\t\tgroupMapping = FeedGroupMap.get().getGroupsMapping();\n\n\t\tgroup = groupMapping.get(\"group1\");\n\t\tAssert.assertEquals(group.getName(), \"group1\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 2);\n\t\tassertFields(group, feed2);\n\n\t\tgroup = groupMapping.get(\"group2\");\n\t\tAssert.assertEquals(group.getName(), \"group2\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 1);\n\t\tassertFields(group, feed2);\n\n\t\tgroup = groupMapping.get(\"group3\");\n\t\tAssert.assertEquals(group.getName(), \"group3\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 2);\n\t\tassertFields(group, feed2);\n\n\t\tgroup = groupMapping.get(\"group5\");\n\t\tAssert.assertEquals(group.getName(), \"group5\");\n\t\tAssert.assertEquals(group.getFeeds().size(), 1);\n\t\tassertFields(group, feed2);\n\n\t}", "signature": "void testOnAdd()", "full_signature": "@Test public void testOnAdd()", "class_method_signature": "FeedGroupMapTest.testOnAdd()", "testcase": true, "constructor": false, "invocations": ["publish", "unmarshal", "getUnmarshaller", "getResourceAsStream", "setName", "setGroups", "setPath", "setType", "setLocations", "add", "getLocations", "getLocations", "publish", "getGroupsMapping", "get", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "unmarshal", "getUnmarshaller", "getResourceAsStream", "setName", "setGroups", "setPath", "setType", "setLocations", "add", "getLocations", "getLocations", "publish", "getGroupsMapping", "get", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields", "get", "assertEquals", "getName", "assertEquals", "size", "getFeeds", "assertFields"]}, "focal_class": {"identifier": "FeedGroupMap", "superclass": "", "interfaces": "implements ConfigurationChangeListener", "fields": [{"original_string": "private static final FeedGroupMap instance = new FeedGroupMap();", "modifier": "private static final", "type": "FeedGroupMap", "declarator": "instance = new FeedGroupMap()", "var_name": "instance"}, {"original_string": "private Map<String, FeedGroup> groupsMapping = new ConcurrentHashMap<String, FeedGroup>();", "modifier": "private", "type": "Map<String, FeedGroup>", "declarator": "groupsMapping = new ConcurrentHashMap<String, FeedGroup>()", "var_name": "groupsMapping"}], "methods": [{"identifier": "FeedGroupMap", "parameters": "()", "modifiers": "private", "return": "", "signature": " FeedGroupMap()", "full_signature": "private  FeedGroupMap()", "class_method_signature": "FeedGroupMap.FeedGroupMap()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "FeedGroupMap", "signature": "FeedGroupMap get()", "full_signature": "public static FeedGroupMap get()", "class_method_signature": "FeedGroupMap.get()", "testcase": false, "constructor": false}, {"identifier": "getGroupsMapping", "parameters": "()", "modifiers": "public", "return": "Map<String, FeedGroup>", "signature": "Map<String, FeedGroup> getGroupsMapping()", "full_signature": "public Map<String, FeedGroup> getGroupsMapping()", "class_method_signature": "FeedGroupMap.getGroupsMapping()", "testcase": false, "constructor": false}, {"identifier": "onAdd", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onAdd(Entity entity)", "full_signature": "@Override public void onAdd(Entity entity)", "class_method_signature": "FeedGroupMap.onAdd(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onRemove", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onRemove(Entity entity)", "full_signature": "@Override public void onRemove(Entity entity)", "class_method_signature": "FeedGroupMap.onRemove(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onChange", "parameters": "(Entity oldEntity, Entity newEntity)", "modifiers": "@Override public", "return": "void", "signature": "void onChange(Entity oldEntity, Entity newEntity)", "full_signature": "@Override public void onChange(Entity oldEntity, Entity newEntity)", "class_method_signature": "FeedGroupMap.onChange(Entity oldEntity, Entity newEntity)", "testcase": false, "constructor": false}, {"identifier": "addGroups", "parameters": "(String feed, Set<FeedGroup> groups)", "modifiers": "private", "return": "void", "signature": "void addGroups(String feed, Set<FeedGroup> groups)", "full_signature": "private void addGroups(String feed, Set<FeedGroup> groups)", "class_method_signature": "FeedGroupMap.addGroups(String feed, Set<FeedGroup> groups)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(String groups, Frequency frequency, String path)", "modifiers": "public", "return": "Set<FeedGroup>", "signature": "Set<FeedGroup> getGroups(String groups, Frequency frequency, String path)", "full_signature": "public Set<FeedGroup> getGroups(String groups, Frequency frequency, String path)", "class_method_signature": "FeedGroupMap.getGroups(String groups, Frequency frequency, String path)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(org.apache.ivory.entity.v0.feed.Feed feed)", "modifiers": "public", "return": "Set<FeedGroup>", "signature": "Set<FeedGroup> getGroups(org.apache.ivory.entity.v0.feed.Feed feed)", "full_signature": "public Set<FeedGroup> getGroups(org.apache.ivory.entity.v0.feed.Feed feed)", "class_method_signature": "FeedGroupMap.getGroups(org.apache.ivory.entity.v0.feed.Feed feed)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/group/FeedGroupMap.java"}, "focal_method": {"identifier": "onAdd", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void onAdd(Entity entity) throws IvoryException {\n\n\t\tif (entity.getEntityType().equals(EntityType.FEED)) {\n\t\t\tFeed feed = (Feed) entity;\n\t\t\tif (feed.getGroups() == null || feed.getGroups().equals(\"\")) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tSet<FeedGroup> groupSet = getGroups(feed);\n\t\t\taddGroups(feed.getName(), groupSet);\n\t\t}\n\n\t}", "signature": "void onAdd(Entity entity)", "full_signature": "@Override public void onAdd(Entity entity)", "class_method_signature": "FeedGroupMap.onAdd(Entity entity)", "testcase": false, "constructor": false, "invocations": ["equals", "getEntityType", "getGroups", "equals", "getGroups", "getGroups", "addGroups", "getName"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}