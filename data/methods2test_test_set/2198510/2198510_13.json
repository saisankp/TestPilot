{"test_class": {"identifier": "TestFlumeEventQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "FlumeEventPointer pointer1 = new FlumeEventPointer(1, 1);", "modifier": "", "type": "FlumeEventPointer", "declarator": "pointer1 = new FlumeEventPointer(1, 1)", "var_name": "pointer1"}, {"original_string": "FlumeEventPointer pointer2 = new FlumeEventPointer(2, 2);", "modifier": "", "type": "FlumeEventPointer", "declarator": "pointer2 = new FlumeEventPointer(2, 2)", "var_name": "pointer2"}, {"original_string": "FlumeEventPointer pointer3 = new FlumeEventPointer(3, 3);", "modifier": "", "type": "FlumeEventPointer", "declarator": "pointer3 = new FlumeEventPointer(3, 3)", "var_name": "pointer3"}, {"original_string": "FlumeEventQueue queue;", "modifier": "", "type": "FlumeEventQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "EventQueueBackingStoreSupplier backingStoreSupplier;", "modifier": "", "type": "EventQueueBackingStoreSupplier", "declarator": "backingStoreSupplier", "var_name": "backingStoreSupplier"}, {"original_string": "EventQueueBackingStore backingStore;", "modifier": "", "type": "EventQueueBackingStore", "declarator": "backingStore", "var_name": "backingStore"}], "file": "flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFlumeEventQueue.java"}, "test_case": {"identifier": "testQueueIsEmptyAfterCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testQueueIsEmptyAfterCreation() throws Exception {\n    queue = new FlumeEventQueue(backingStore,\n                                backingStoreSupplier.getInflightTakes(),\n                                backingStoreSupplier.getInflightPuts(),\n                                backingStoreSupplier.getQueueSetDir());\n    Assert.assertNull(queue.removeHead(0L));\n  }", "signature": "void testQueueIsEmptyAfterCreation()", "full_signature": "@Test public void testQueueIsEmptyAfterCreation()", "class_method_signature": "TestFlumeEventQueue.testQueueIsEmptyAfterCreation()", "testcase": true, "constructor": false, "invocations": ["getInflightTakes", "getInflightPuts", "getQueueSetDir", "assertNull", "removeHead"]}, "focal_class": {"identifier": "FlumeEventQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory\n      .getLogger(FlumeEventQueue.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n      .getLogger(FlumeEventQueue.class)", "var_name": "LOG"}, {"original_string": "private static final int EMPTY = 0;", "modifier": "private static final", "type": "int", "declarator": "EMPTY = 0", "var_name": "EMPTY"}, {"original_string": "private final EventQueueBackingStore backingStore;", "modifier": "private final", "type": "EventQueueBackingStore", "declarator": "backingStore", "var_name": "backingStore"}, {"original_string": "private final String channelNameDescriptor;", "modifier": "private final", "type": "String", "declarator": "channelNameDescriptor", "var_name": "channelNameDescriptor"}, {"original_string": "private final InflightEventWrapper inflightTakes;", "modifier": "private final", "type": "InflightEventWrapper", "declarator": "inflightTakes", "var_name": "inflightTakes"}, {"original_string": "private final InflightEventWrapper inflightPuts;", "modifier": "private final", "type": "InflightEventWrapper", "declarator": "inflightPuts", "var_name": "inflightPuts"}, {"original_string": "private long searchTime = 0;", "modifier": "private", "type": "long", "declarator": "searchTime = 0", "var_name": "searchTime"}, {"original_string": "private long searchCount = 0;", "modifier": "private", "type": "long", "declarator": "searchCount = 0", "var_name": "searchCount"}, {"original_string": "private long copyTime = 0;", "modifier": "private", "type": "long", "declarator": "copyTime = 0", "var_name": "copyTime"}, {"original_string": "private long copyCount = 0;", "modifier": "private", "type": "long", "declarator": "copyCount = 0", "var_name": "copyCount"}, {"original_string": "private DB db;", "modifier": "private", "type": "DB", "declarator": "db", "var_name": "db"}, {"original_string": "private Set<Long> queueSet;", "modifier": "private", "type": "Set<Long>", "declarator": "queueSet", "var_name": "queueSet"}], "methods": [{"identifier": "FlumeEventQueue", "parameters": "(EventQueueBackingStore backingStore, File inflightTakesFile,\n                  File inflightPutsFile, File queueSetDBDir)", "modifiers": "", "return": "", "signature": " FlumeEventQueue(EventQueueBackingStore backingStore, File inflightTakesFile,\n                  File inflightPutsFile, File queueSetDBDir)", "full_signature": "  FlumeEventQueue(EventQueueBackingStore backingStore, File inflightTakesFile,\n                  File inflightPutsFile, File queueSetDBDir)", "class_method_signature": "FlumeEventQueue.FlumeEventQueue(EventQueueBackingStore backingStore, File inflightTakesFile,\n                  File inflightPutsFile, File queueSetDBDir)", "testcase": false, "constructor": true}, {"identifier": "deserializeInflightPuts", "parameters": "()", "modifiers": "", "return": "SetMultimap<Long, Long>", "signature": "SetMultimap<Long, Long> deserializeInflightPuts()", "full_signature": " SetMultimap<Long, Long> deserializeInflightPuts()", "class_method_signature": "FlumeEventQueue.deserializeInflightPuts()", "testcase": false, "constructor": false}, {"identifier": "deserializeInflightTakes", "parameters": "()", "modifiers": "", "return": "SetMultimap<Long, Long>", "signature": "SetMultimap<Long, Long> deserializeInflightTakes()", "full_signature": " SetMultimap<Long, Long> deserializeInflightTakes()", "class_method_signature": "FlumeEventQueue.deserializeInflightTakes()", "testcase": false, "constructor": false}, {"identifier": "getLogWriteOrderID", "parameters": "()", "modifiers": "synchronized", "return": "long", "signature": "long getLogWriteOrderID()", "full_signature": "synchronized long getLogWriteOrderID()", "class_method_signature": "FlumeEventQueue.getLogWriteOrderID()", "testcase": false, "constructor": false}, {"identifier": "checkpoint", "parameters": "(boolean force)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean checkpoint(boolean force)", "full_signature": "synchronized boolean checkpoint(boolean force)", "class_method_signature": "FlumeEventQueue.checkpoint(boolean force)", "testcase": false, "constructor": false}, {"identifier": "removeHead", "parameters": "(long transactionID)", "modifiers": "synchronized", "return": "FlumeEventPointer", "signature": "FlumeEventPointer removeHead(long transactionID)", "full_signature": "synchronized FlumeEventPointer removeHead(long transactionID)", "class_method_signature": "FlumeEventQueue.removeHead(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "addHead", "parameters": "(FlumeEventPointer e)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean addHead(FlumeEventPointer e)", "full_signature": "synchronized boolean addHead(FlumeEventPointer e)", "class_method_signature": "FlumeEventQueue.addHead(FlumeEventPointer e)", "testcase": false, "constructor": false}, {"identifier": "addTail", "parameters": "(FlumeEventPointer e)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean addTail(FlumeEventPointer e)", "full_signature": "synchronized boolean addTail(FlumeEventPointer e)", "class_method_signature": "FlumeEventQueue.addTail(FlumeEventPointer e)", "testcase": false, "constructor": false}, {"identifier": "addWithoutCommit", "parameters": "(FlumeEventPointer e, long transactionID)", "modifiers": "synchronized", "return": "void", "signature": "void addWithoutCommit(FlumeEventPointer e, long transactionID)", "full_signature": "synchronized void addWithoutCommit(FlumeEventPointer e, long transactionID)", "class_method_signature": "FlumeEventQueue.addWithoutCommit(FlumeEventPointer e, long transactionID)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(FlumeEventPointer e)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean remove(FlumeEventPointer e)", "full_signature": "synchronized boolean remove(FlumeEventPointer e)", "class_method_signature": "FlumeEventQueue.remove(FlumeEventPointer e)", "testcase": false, "constructor": false}, {"identifier": "getFileIDs", "parameters": "()", "modifiers": "synchronized", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> getFileIDs()", "full_signature": "synchronized SortedSet<Integer> getFileIDs()", "class_method_signature": "FlumeEventQueue.getFileIDs()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "protected", "return": "long", "signature": "long get(int index)", "full_signature": "protected long get(int index)", "class_method_signature": "FlumeEventQueue.get(int index)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, long value)", "modifiers": "private", "return": "void", "signature": "void set(int index, long value)", "full_signature": "private void set(int index, long value)", "class_method_signature": "FlumeEventQueue.set(int index, long value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, long value)", "modifiers": "protected", "return": "boolean", "signature": "boolean add(int index, long value)", "full_signature": "protected boolean add(int index, long value)", "class_method_signature": "FlumeEventQueue.add(int index, long value)", "testcase": false, "constructor": false}, {"identifier": "completeTransaction", "parameters": "(long transactionID)", "modifiers": "synchronized", "return": "void", "signature": "void completeTransaction(long transactionID)", "full_signature": "synchronized void completeTransaction(long transactionID)", "class_method_signature": "FlumeEventQueue.completeTransaction(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index, long transactionID)", "modifiers": "protected synchronized", "return": "long", "signature": "long remove(int index, long transactionID)", "full_signature": "protected synchronized long remove(int index, long transactionID)", "class_method_signature": "FlumeEventQueue.remove(int index, long transactionID)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "protected synchronized", "return": "int", "signature": "int getSize()", "full_signature": "protected synchronized int getSize()", "class_method_signature": "FlumeEventQueue.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "FlumeEventQueue.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "synchronized", "return": "void", "signature": "void close()", "full_signature": "synchronized void close()", "class_method_signature": "FlumeEventQueue.close()", "testcase": false, "constructor": false}, {"identifier": "replayComplete", "parameters": "()", "modifiers": "synchronized", "return": "void", "signature": "void replayComplete()", "full_signature": "synchronized void replayComplete()", "class_method_signature": "FlumeEventQueue.replayComplete()", "testcase": false, "constructor": false}, {"identifier": "getSearchCount", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "long", "signature": "long getSearchCount()", "full_signature": "@VisibleForTesting long getSearchCount()", "class_method_signature": "FlumeEventQueue.getSearchCount()", "testcase": false, "constructor": false}, {"identifier": "getCopyCount", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "long", "signature": "long getCopyCount()", "full_signature": "@VisibleForTesting long getCopyCount()", "class_method_signature": "FlumeEventQueue.getCopyCount()", "testcase": false, "constructor": false}], "file": "flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java"}, "focal_method": {"identifier": "removeHead", "parameters": "(long transactionID)", "modifiers": "synchronized", "return": "FlumeEventPointer", "body": "synchronized FlumeEventPointer removeHead(long transactionID) {\n    if (backingStore.getSize() == 0) {\n      return null;\n    }\n\n    long value = remove(0, transactionID);\n    Preconditions.checkState(value != EMPTY, \"Empty value \"\n        + channelNameDescriptor);\n\n    FlumeEventPointer ptr = FlumeEventPointer.fromLong(value);\n    backingStore.decrementFileID(ptr.getFileID());\n    return ptr;\n  }", "signature": "FlumeEventPointer removeHead(long transactionID)", "full_signature": "synchronized FlumeEventPointer removeHead(long transactionID)", "class_method_signature": "FlumeEventQueue.removeHead(long transactionID)", "testcase": false, "constructor": false, "invocations": ["getSize", "remove", "checkState", "fromLong", "decrementFileID", "getFileID"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}