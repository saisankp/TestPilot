{"test_class": {"identifier": "QuorumPeerMainTest", "superclass": "extends QuorumPeerTestBase", "interfaces": "", "fields": [{"original_string": "private Servers servers;", "modifier": "private", "type": "Servers", "declarator": "servers", "var_name": "servers"}, {"original_string": "private int numServers = 0;", "modifier": "private", "type": "int", "declarator": "numServers = 0", "var_name": "numServers"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java"}, "test_case": {"identifier": "testLeaderOutOfView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLeaderOutOfView() throws Exception {\n        ClientBase.setupTestEnv();\n\n        int numServers = 3;\n\n        // used for assertions later\n        boolean foundLeading = false;\n        boolean foundFollowing = false;\n\n        // capture QuorumPeer logging\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        WriterAppender appender = getConsoleAppender(os, Level.DEBUG);\n        Logger qlogger = Logger.getLogger(\"org.apache.zookeeper.server.quorum\");\n        qlogger.addAppender(appender);\n\n        try {\n            Servers svrs = new Servers();\n            svrs.clientPorts = new int[numServers];\n            for (int i = 0; i < numServers; i++) {\n                svrs.clientPorts[i] = PortAssignment.unique();\n            }\n\n            String quorumCfgIncomplete = getUniquePortCfgForId(1) + \"\\n\" + getUniquePortCfgForId(2);\n            String quorumCfgComplete = quorumCfgIncomplete + \"\\n\" + getUniquePortCfgForId(3);\n            svrs.mt = new MainThread[3];\n\n            // Node 1 is started without the leader (3) in its config view\n            svrs.mt[0] = new MainThread(1, svrs.clientPorts[0], quorumCfgIncomplete);\n            for (int i = 1; i < numServers; i++) {\n                svrs.mt[i] = new MainThread(i + 1, svrs.clientPorts[i], quorumCfgComplete);\n            }\n\n            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3\n            svrs.mt[0].start();\n            QuorumPeer quorumPeer1 = waitForQuorumPeer(svrs.mt[0], CONNECTION_TIMEOUT);\n            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);\n\n            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up\n            int highestServerIndex = numServers - 1;\n            svrs.mt[highestServerIndex].start();\n            QuorumPeer quorumPeer3 = waitForQuorumPeer(svrs.mt[highestServerIndex], CONNECTION_TIMEOUT);\n            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);\n\n            // Node 2 started last, kicks off leader election\n            for (int i = 1; i < highestServerIndex; i++) {\n                svrs.mt[i].start();\n            }\n\n            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state\n            for (int i = 1; i < numServers; i++) {\n                Assert.assertTrue(\"waiting for server to start\",\n                        ClientBase.waitForServerUp(\"127.0.0.1:\" + svrs.clientPorts[i], CONNECTION_TIMEOUT));\n            }\n\n            Assert.assertTrue(svrs.mt[0].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);\n            Assert.assertTrue(svrs.mt[highestServerIndex].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);\n            for (int i = 1; i < highestServerIndex; i++) {\n                Assert.assertTrue(svrs.mt[i].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);\n            }\n\n            // Look through the logs for output that indicates Node 1 is LEADING or FOLLOWING\n            LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));\n            Pattern leading = Pattern.compile(\".*myid=1.*QuorumPeer.*LEADING.*\");\n            Pattern following = Pattern.compile(\".*myid=1.*QuorumPeer.*FOLLOWING.*\");\n\n            String line;\n            while ((line = r.readLine()) != null && !foundLeading && !foundFollowing) {\n                foundLeading = leading.matcher(line).matches();\n                foundFollowing = following.matcher(line).matches();\n            }\n\n        } finally {\n            qlogger.removeAppender(appender);\n        }\n\n        Assert.assertFalse(\"Corrupt peer should never become leader\", foundLeading);\n        Assert.assertFalse(\"Corrupt peer should not attempt connection to out of view leader\", foundFollowing);\n    }", "signature": "void testLeaderOutOfView()", "full_signature": "@Test public void testLeaderOutOfView()", "class_method_signature": "QuorumPeerMainTest.testLeaderOutOfView()", "testcase": true, "constructor": false, "invocations": ["setupTestEnv", "getConsoleAppender", "getLogger", "addAppender", "unique", "getUniquePortCfgForId", "getUniquePortCfgForId", "getUniquePortCfgForId", "start", "waitForQuorumPeer", "assertTrue", "getPeerState", "start", "waitForQuorumPeer", "assertTrue", "getPeerState", "start", "assertTrue", "waitForServerUp", "assertTrue", "getPeerState", "getQuorumPeer", "assertTrue", "getPeerState", "getQuorumPeer", "assertTrue", "getPeerState", "getQuorumPeer", "toString", "compile", "compile", "readLine", "matches", "matcher", "matches", "matcher", "removeAppender", "assertFalse", "assertFalse"]}, "focal_class": {"identifier": "QuorumPeerMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(QuorumPeerMain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(QuorumPeerMain.class)", "var_name": "LOG"}, {"original_string": "private static final String USAGE = \"Usage: QuorumPeerMain configfile\";", "modifier": "private static final", "type": "String", "declarator": "USAGE = \"Usage: QuorumPeerMain configfile\"", "var_name": "USAGE"}, {"original_string": "protected QuorumPeer quorumPeer;", "modifier": "protected", "type": "QuorumPeer", "declarator": "quorumPeer", "var_name": "quorumPeer"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "QuorumPeerMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "initializeAndRun", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "signature": "void initializeAndRun(String[] args)", "full_signature": "protected void initializeAndRun(String[] args)", "class_method_signature": "QuorumPeerMain.initializeAndRun(String[] args)", "testcase": false, "constructor": false}, {"identifier": "runFromConfig", "parameters": "(QuorumPeerConfig config)", "modifiers": "public", "return": "void", "signature": "void runFromConfig(QuorumPeerConfig config)", "full_signature": "public void runFromConfig(QuorumPeerConfig config)", "class_method_signature": "QuorumPeerMain.runFromConfig(QuorumPeerConfig config)", "testcase": false, "constructor": false}, {"identifier": "getQuorumPeer", "parameters": "()", "modifiers": "protected", "return": "QuorumPeer", "signature": "QuorumPeer getQuorumPeer()", "full_signature": "protected QuorumPeer getQuorumPeer()", "class_method_signature": "QuorumPeerMain.getQuorumPeer()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java"}, "focal_method": {"identifier": "getQuorumPeer", "parameters": "()", "modifiers": "protected", "return": "QuorumPeer", "body": "protected QuorumPeer getQuorumPeer() throws SaslException {\n        return new QuorumPeer();\n    }", "signature": "QuorumPeer getQuorumPeer()", "full_signature": "protected QuorumPeer getQuorumPeer()", "class_method_signature": "QuorumPeerMain.getQuorumPeer()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}