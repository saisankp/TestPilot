{"test_class": {"identifier": "ClassFileNameHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Charset UTF8 = Charset.forName(\"UTF-8\");", "modifier": "private final", "type": "Charset", "declarator": "UTF8 = Charset.forName(\"UTF-8\")", "var_name": "UTF8"}], "file": "util/src/test/java/org/jf/util/ClassFileNameHandlerTest.java"}, "test_case": {"identifier": "testCaseInsensitiveFilesystem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCaseInsensitiveFilesystem() {\n        File tempDir = Files.createTempDir();\n        ClassFileNameHandler handler = new ClassFileNameHandler(tempDir, \".smali\", false, false);\n\n        File file = handler.getUniqueFilenameForClass(\"La/b/c;\");\n        checkFilename(tempDir, file, \"a\", \"b\", \"c.smali\");\n\n        file = handler.getUniqueFilenameForClass(\"La/b/C;\");\n        checkFilename(tempDir, file, \"a\", \"b\", \"C.1.smali\");\n\n        file = handler.getUniqueFilenameForClass(\"La/B/c;\");\n        checkFilename(tempDir, file, \"a\", \"B.1\", \"c.smali\");\n    }", "signature": "void testCaseInsensitiveFilesystem()", "full_signature": "@Test public void testCaseInsensitiveFilesystem()", "class_method_signature": "ClassFileNameHandlerTest.testCaseInsensitiveFilesystem()", "testcase": true, "constructor": false, "invocations": ["createTempDir", "getUniqueFilenameForClass", "checkFilename", "getUniqueFilenameForClass", "checkFilename", "getUniqueFilenameForClass", "checkFilename"]}, "focal_class": {"identifier": "ClassFileNameHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_FILENAME_LENGTH = 255;", "modifier": "private static final", "type": "int", "declarator": "MAX_FILENAME_LENGTH = 255", "var_name": "MAX_FILENAME_LENGTH"}, {"original_string": "private static final int NUMERIC_SUFFIX_RESERVE = 6;", "modifier": "private static final", "type": "int", "declarator": "NUMERIC_SUFFIX_RESERVE = 6", "var_name": "NUMERIC_SUFFIX_RESERVE"}, {"original_string": "private final int NO_VALUE = -1;", "modifier": "private final", "type": "int", "declarator": "NO_VALUE = -1", "var_name": "NO_VALUE"}, {"original_string": "private final int CASE_INSENSITIVE = 0;", "modifier": "private final", "type": "int", "declarator": "CASE_INSENSITIVE = 0", "var_name": "CASE_INSENSITIVE"}, {"original_string": "private final int CASE_SENSITIVE = 1;", "modifier": "private final", "type": "int", "declarator": "CASE_SENSITIVE = 1", "var_name": "CASE_SENSITIVE"}, {"original_string": "private int forcedCaseSensitivity = NO_VALUE;", "modifier": "private", "type": "int", "declarator": "forcedCaseSensitivity = NO_VALUE", "var_name": "forcedCaseSensitivity"}, {"original_string": "private DirectoryEntry top;", "modifier": "private", "type": "DirectoryEntry", "declarator": "top", "var_name": "top"}, {"original_string": "private String fileExtension;", "modifier": "private", "type": "String", "declarator": "fileExtension", "var_name": "fileExtension"}, {"original_string": "private boolean modifyWindowsReservedFilenames;", "modifier": "private", "type": "boolean", "declarator": "modifyWindowsReservedFilenames", "var_name": "modifyWindowsReservedFilenames"}, {"original_string": "private static Pattern reservedFileNameRegex = Pattern.compile(\"^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..*)?$\",\n            Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "reservedFileNameRegex = Pattern.compile(\"^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..*)?$\",\n            Pattern.CASE_INSENSITIVE)", "var_name": "reservedFileNameRegex"}], "methods": [{"identifier": "ClassFileNameHandler", "parameters": "(File path, String fileExtension)", "modifiers": "public", "return": "", "signature": " ClassFileNameHandler(File path, String fileExtension)", "full_signature": "public  ClassFileNameHandler(File path, String fileExtension)", "class_method_signature": "ClassFileNameHandler.ClassFileNameHandler(File path, String fileExtension)", "testcase": false, "constructor": true}, {"identifier": "ClassFileNameHandler", "parameters": "(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "modifiers": "public", "return": "", "signature": " ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "full_signature": "public  ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "class_method_signature": "ClassFileNameHandler.ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "testcase": false, "constructor": true}, {"identifier": "getMaxFilenameLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getMaxFilenameLength()", "full_signature": "private int getMaxFilenameLength()", "class_method_signature": "ClassFileNameHandler.getMaxFilenameLength()", "testcase": false, "constructor": false}, {"identifier": "getUniqueFilenameForClass", "parameters": "(String className)", "modifiers": "public", "return": "File", "signature": "File getUniqueFilenameForClass(String className)", "full_signature": "public File getUniqueFilenameForClass(String className)", "class_method_signature": "ClassFileNameHandler.getUniqueFilenameForClass(String className)", "testcase": false, "constructor": false}, {"identifier": "addUniqueChild", "parameters": "(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "modifiers": "@Nonnull private", "return": "File", "signature": "File addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "full_signature": "@Nonnull private File addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "class_method_signature": "ClassFileNameHandler.addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "testcase": false, "constructor": false}, {"identifier": "utf8Length", "parameters": "(String str)", "modifiers": "private static", "return": "int", "signature": "int utf8Length(String str)", "full_signature": "private static int utf8Length(String str)", "class_method_signature": "ClassFileNameHandler.utf8Length(String str)", "testcase": false, "constructor": false}, {"identifier": "utf8Length", "parameters": "(int codePoint)", "modifiers": "private static", "return": "int", "signature": "int utf8Length(int codePoint)", "full_signature": "private static int utf8Length(int codePoint)", "class_method_signature": "ClassFileNameHandler.utf8Length(int codePoint)", "testcase": false, "constructor": false}, {"identifier": "shortenPathComponent", "parameters": "(@Nonnull String pathComponent, int bytesToRemove)", "modifiers": "@Nonnull static", "return": "String", "signature": "String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "full_signature": "@Nonnull static String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "class_method_signature": "ClassFileNameHandler.shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "private static boolean isWindows()", "class_method_signature": "ClassFileNameHandler.isWindows()", "testcase": false, "constructor": false}, {"identifier": "isReservedFileName", "parameters": "(String className)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReservedFileName(String className)", "full_signature": "private static boolean isReservedFileName(String className)", "class_method_signature": "ClassFileNameHandler.isReservedFileName(String className)", "testcase": false, "constructor": false}, {"identifier": "addSuffixBeforeExtension", "parameters": "(String pathElement, String suffix)", "modifiers": "private static", "return": "String", "signature": "String addSuffixBeforeExtension(String pathElement, String suffix)", "full_signature": "private static String addSuffixBeforeExtension(String pathElement, String suffix)", "class_method_signature": "ClassFileNameHandler.addSuffixBeforeExtension(String pathElement, String suffix)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/jf/util/ClassFileNameHandler.java"}, "focal_method": {"identifier": "getUniqueFilenameForClass", "parameters": "(String className)", "modifiers": "public", "return": "File", "body": "public File getUniqueFilenameForClass(String className) {\n        //class names should be passed in the normal dalvik style, with a leading L, a trailing ;, and using\n        //'/' as a separator.\n        if (className.charAt(0) != 'L' || className.charAt(className.length()-1) != ';') {\n            throw new RuntimeException(\"Not a valid dalvik class name\");\n        }\n\n        int packageElementCount = 1;\n        for (int i=1; i<className.length()-1; i++) {\n            if (className.charAt(i) == '/') {\n                packageElementCount++;\n            }\n        }\n\n        String[] packageElements = new String[packageElementCount];\n        int elementIndex = 0;\n        int elementStart = 1;\n        for (int i=1; i<className.length()-1; i++) {\n            if (className.charAt(i) == '/') {\n                //if the first char after the initial L is a '/', or if there are\n                //two consecutive '/'\n                if (i-elementStart==0) {\n                    throw new RuntimeException(\"Not a valid dalvik class name\");\n                }\n\n                packageElements[elementIndex++] = className.substring(elementStart, i);\n                elementStart = ++i;\n            }\n        }\n\n        //at this point, we have added all the package elements to packageElements, but still need to add\n        //the final class name. elementStart should point to the beginning of the class name\n\n        //this will be true if the class ends in a '/', i.e. Lsome/package/className/;\n        if (elementStart >= className.length()-1) {\n            throw new RuntimeException(\"Not a valid dalvik class name\");\n        }\n\n        packageElements[elementIndex] = className.substring(elementStart, className.length()-1);\n\n        return addUniqueChild(top, packageElements, 0);\n    }", "signature": "File getUniqueFilenameForClass(String className)", "full_signature": "public File getUniqueFilenameForClass(String className)", "class_method_signature": "ClassFileNameHandler.getUniqueFilenameForClass(String className)", "testcase": false, "constructor": false, "invocations": ["charAt", "charAt", "length", "length", "charAt", "length", "charAt", "substring", "length", "substring", "length", "addUniqueChild"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}