{"test_class": {"identifier": "ExecutorPipelineTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/ExecutorPipelineTest.java"}, "test_case": {"identifier": "joinTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void joinTest() throws InterruptedException {\n        ExecutorPipeline<Integer, Integer> exec1 = new ExecutorPipeline<>(8, 100, true,\n                integer -> {\n            try {\n                Thread.sleep(2);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            return integer;\n        }, Throwable::printStackTrace);\n\n        final List<Integer> consumed = new ArrayList<>();\n\n        ExecutorPipeline<Integer, Void> exec2 = exec1.add(1, 100, consumed::add);\n\n        int cnt = 1000;\n        for (int i = 0; i < cnt; i++) {\n            exec1.push(i);\n        }\n        exec1.join();\n\n        Assert.assertEquals(cnt, consumed.size());\n    }", "signature": "void joinTest()", "full_signature": "@Test public void joinTest()", "class_method_signature": "ExecutorPipelineTest.joinTest()", "testcase": true, "constructor": false, "invocations": ["sleep", "add", "push", "join", "assertEquals", "size"]}, "focal_class": {"identifier": "ExecutorPipeline", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BlockingQueue<Runnable> queue;", "modifier": "private", "type": "BlockingQueue<Runnable>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private ThreadPoolExecutor exec;", "modifier": "private", "type": "ThreadPoolExecutor", "declarator": "exec", "var_name": "exec"}, {"original_string": "private boolean preserveOrder = false;", "modifier": "private", "type": "boolean", "declarator": "preserveOrder = false", "var_name": "preserveOrder"}, {"original_string": "private Function<In, Out> processor;", "modifier": "private", "type": "Function<In, Out>", "declarator": "processor", "var_name": "processor"}, {"original_string": "private Consumer<Throwable> exceptionHandler;", "modifier": "private", "type": "Consumer<Throwable>", "declarator": "exceptionHandler", "var_name": "exceptionHandler"}, {"original_string": "private ExecutorPipeline <Out, ?> next;", "modifier": "private", "type": "ExecutorPipeline <Out, ?>", "declarator": "next", "var_name": "next"}, {"original_string": "private AtomicLong orderCounter = new AtomicLong();", "modifier": "private", "type": "AtomicLong", "declarator": "orderCounter = new AtomicLong()", "var_name": "orderCounter"}, {"original_string": "private long nextOutTaskNumber = 0;", "modifier": "private", "type": "long", "declarator": "nextOutTaskNumber = 0", "var_name": "nextOutTaskNumber"}, {"original_string": "private Map<Long, Out> orderMap = new HashMap<>();", "modifier": "private", "type": "Map<Long, Out>", "declarator": "orderMap = new HashMap<>()", "var_name": "orderMap"}, {"original_string": "private ReentrantLock lock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private String threadPoolName;", "modifier": "private", "type": "String", "declarator": "threadPoolName", "var_name": "threadPoolName"}, {"original_string": "private static AtomicInteger pipeNumber = new AtomicInteger(1);", "modifier": "private static", "type": "AtomicInteger", "declarator": "pipeNumber = new AtomicInteger(1)", "var_name": "pipeNumber"}, {"original_string": "private AtomicInteger threadNumber = new AtomicInteger(1);", "modifier": "private", "type": "AtomicInteger", "declarator": "threadNumber = new AtomicInteger(1)", "var_name": "threadNumber"}], "methods": [{"identifier": "ExecutorPipeline", "parameters": "(int threads, int queueSize, boolean preserveOrder, Function<In, Out> processor,\n                            Consumer<Throwable> exceptionHandler)", "modifiers": "public", "return": "", "signature": " ExecutorPipeline(int threads, int queueSize, boolean preserveOrder, Function<In, Out> processor,\n                            Consumer<Throwable> exceptionHandler)", "full_signature": "public  ExecutorPipeline(int threads, int queueSize, boolean preserveOrder, Function<In, Out> processor,\n                            Consumer<Throwable> exceptionHandler)", "class_method_signature": "ExecutorPipeline.ExecutorPipeline(int threads, int queueSize, boolean preserveOrder, Function<In, Out> processor,\n                            Consumer<Throwable> exceptionHandler)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(int threads, int queueSize, final Consumer<Out> consumer)", "modifiers": "public", "return": "ExecutorPipeline<Out, Void>", "signature": "ExecutorPipeline<Out, Void> add(int threads, int queueSize, final Consumer<Out> consumer)", "full_signature": "public ExecutorPipeline<Out, Void> add(int threads, int queueSize, final Consumer<Out> consumer)", "class_method_signature": "ExecutorPipeline.add(int threads, int queueSize, final Consumer<Out> consumer)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int threads, int queueSize, boolean preserveOrder,\n                                                        Function<Out, NextOut> processor)", "modifiers": "public", "return": "ExecutorPipeline<Out, NextOut>", "signature": "ExecutorPipeline<Out, NextOut> add(int threads, int queueSize, boolean preserveOrder,\n                                                        Function<Out, NextOut> processor)", "full_signature": "public ExecutorPipeline<Out, NextOut> add(int threads, int queueSize, boolean preserveOrder,\n                                                        Function<Out, NextOut> processor)", "class_method_signature": "ExecutorPipeline.add(int threads, int queueSize, boolean preserveOrder,\n                                                        Function<Out, NextOut> processor)", "testcase": false, "constructor": false}, {"identifier": "pushNext", "parameters": "(long order, Out res)", "modifiers": "private", "return": "void", "signature": "void pushNext(long order, Out res)", "full_signature": "private void pushNext(long order, Out res)", "class_method_signature": "ExecutorPipeline.pushNext(long order, Out res)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(final In in)", "modifiers": "public", "return": "void", "signature": "void push(final In in)", "full_signature": "public void push(final In in)", "class_method_signature": "ExecutorPipeline.push(final In in)", "testcase": false, "constructor": false}, {"identifier": "pushAll", "parameters": "(final List<In> list)", "modifiers": "public", "return": "void", "signature": "void pushAll(final List<In> list)", "full_signature": "public void pushAll(final List<In> list)", "class_method_signature": "ExecutorPipeline.pushAll(final List<In> list)", "testcase": false, "constructor": false}, {"identifier": "setThreadPoolName", "parameters": "(String threadPoolName)", "modifiers": "public", "return": "ExecutorPipeline<In, Out>", "signature": "ExecutorPipeline<In, Out> setThreadPoolName(String threadPoolName)", "full_signature": "public ExecutorPipeline<In, Out> setThreadPoolName(String threadPoolName)", "class_method_signature": "ExecutorPipeline.setThreadPoolName(String threadPoolName)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "()", "modifiers": "public", "return": "BlockingQueue<Runnable>", "signature": "BlockingQueue<Runnable> getQueue()", "full_signature": "public BlockingQueue<Runnable> getQueue()", "class_method_signature": "ExecutorPipeline.getQueue()", "testcase": false, "constructor": false}, {"identifier": "getOrderMap", "parameters": "()", "modifiers": "public", "return": "Map<Long, Out>", "signature": "Map<Long, Out> getOrderMap()", "full_signature": "public Map<Long, Out> getOrderMap()", "class_method_signature": "ExecutorPipeline.getOrderMap()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "ExecutorPipeline.shutdown()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "public boolean isShutdown()", "class_method_signature": "ExecutorPipeline.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void join()", "full_signature": "public void join()", "class_method_signature": "ExecutorPipeline.join()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/ExecutorPipeline.java"}, "focal_method": {"identifier": "join", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void join() throws InterruptedException {\n        exec.shutdown();\n        exec.awaitTermination(10, TimeUnit.MINUTES);\n        if (next != null) next.join();\n    }", "signature": "void join()", "full_signature": "public void join()", "class_method_signature": "ExecutorPipeline.join()", "testcase": false, "constructor": false, "invocations": ["shutdown", "awaitTermination", "join"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}