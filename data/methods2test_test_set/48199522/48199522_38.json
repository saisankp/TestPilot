{"test_class": {"identifier": "BatchWindowMaxTest", "superclass": "", "interfaces": "", "fields": [], "file": "contrib/src/test/java/macrobase/analysis/transform/aggregate/BatchWindowMaxTest.java"}, "test_case": {"identifier": "testAggregate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAggregate() throws Exception {\n        Random r = new Random(0);\n        List<Datum> data = new ArrayList<>();\n        for (int i = 0; i < 10; i ++) {\n            Datum d = new Datum(new ArrayList<>(), new ArrayRealVector(3));\n            d.metrics().setEntry(0, 1);\n            if (i == 0) {\n                d.metrics().setEntry(1, r.nextInt());\n            } else {\n                d.metrics().setEntry(1, Integer.MAX_VALUE);\n            }\n            d.metrics().setEntry(2, i);\n            data.add(d);\n        }\n\n        BatchWindowMax windowMax = new BatchWindowMax();\n        Datum max = windowMax.aggregate(data);\n        assert(max.metrics().getEntry(0) == 1);\n        assert(max.metrics().getEntry(1) == Integer.MAX_VALUE);\n        assert(max.metrics().getEntry(2) == 9);\n\n        /* Test datum with time column */\n        MacroBaseConf conf = new MacroBaseConf().set(MacroBaseConf.TIME_COLUMN, 2);\n        windowMax = new BatchWindowMax(conf);\n        max = windowMax.aggregate(data);\n        assert(max.metrics().getEntry(0) == 1);\n        assert(max.metrics().getEntry(1) == Integer.MAX_VALUE);\n    }", "signature": "void testAggregate()", "full_signature": "@Test public void testAggregate()", "class_method_signature": "BatchWindowMaxTest.testAggregate()", "testcase": true, "constructor": false, "invocations": ["setEntry", "metrics", "setEntry", "metrics", "nextInt", "setEntry", "metrics", "setEntry", "metrics", "add", "aggregate", "getEntry", "metrics", "getEntry", "metrics", "getEntry", "metrics", "set", "aggregate", "getEntry", "metrics", "getEntry", "metrics"]}, "focal_class": {"identifier": "BatchWindowMax", "superclass": "extends BatchWindowAggregate", "interfaces": "", "fields": [], "methods": [{"identifier": "BatchWindowMax", "parameters": "()", "modifiers": "public", "return": "", "signature": " BatchWindowMax()", "full_signature": "public  BatchWindowMax()", "class_method_signature": "BatchWindowMax.BatchWindowMax()", "testcase": false, "constructor": true}, {"identifier": "BatchWindowMax", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " BatchWindowMax(MacroBaseConf conf)", "full_signature": "public  BatchWindowMax(MacroBaseConf conf)", "class_method_signature": "BatchWindowMax.BatchWindowMax(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "Datum", "signature": "Datum aggregate(List<Datum> data)", "full_signature": "public Datum aggregate(List<Datum> data)", "class_method_signature": "BatchWindowMax.aggregate(List<Datum> data)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/transform/aggregate/BatchWindowMax.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "Datum", "body": "public Datum aggregate(List<Datum> data) {\n        if (data.isEmpty())\n            return new Datum(new ArrayList<>(), new ArrayRealVector(dim));\n\n        dim = data.get(0).metrics().getDimension();\n        RealVector results = new ArrayRealVector(dim);\n        results.set(Double.MIN_VALUE);\n\n        for (Datum d : data) {\n            RealVector metrics = d.metrics();\n            for (int i = 0; i < dim; i ++) {\n                if (timeColumn != null && i == timeColumn)\n                    continue;\n                results.setEntry(i, Math.max(results.getEntry(i), metrics.getEntry(i)));\n            }\n        }\n\n        return new Datum(new ArrayList<>(), results);\n    }", "signature": "Datum aggregate(List<Datum> data)", "full_signature": "public Datum aggregate(List<Datum> data)", "class_method_signature": "BatchWindowMax.aggregate(List<Datum> data)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getDimension", "metrics", "get", "set", "metrics", "setEntry", "max", "getEntry", "getEntry"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}