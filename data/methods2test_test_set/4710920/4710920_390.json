{"test_class": {"identifier": "ExtensionLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java"}, "test_case": {"identifier": "test_getExtensionLoader_Null", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_getExtensionLoader_Null() throws Exception {\n        try {\n            getExtensionLoader(null);\n            fail();\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(),\n                    containsString(\"Extension type == null\"));\n        }\n    }", "signature": "void test_getExtensionLoader_Null()", "full_signature": "@Test public void test_getExtensionLoader_Null()", "class_method_signature": "ExtensionLoaderTest.test_getExtensionLoader_Null()", "testcase": true, "constructor": false, "invocations": ["getExtensionLoader", "fail", "assertThat", "getMessage", "containsString"]}, "focal_class": {"identifier": "ExtensionLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExtensionLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExtensionLoader.class)", "var_name": "logger"}, {"original_string": "private static final Pattern NAME_SEPARATOR = Pattern.compile(\"\\\\s*[,]+\\\\s*\");", "modifier": "private static final", "type": "Pattern", "declarator": "NAME_SEPARATOR = Pattern.compile(\"\\\\s*[,]+\\\\s*\")", "var_name": "NAME_SEPARATOR"}, {"original_string": "private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>(64);", "modifier": "private static final", "type": "ConcurrentMap<Class<?>, ExtensionLoader<?>>", "declarator": "EXTENSION_LOADERS = new ConcurrentHashMap<>(64)", "var_name": "EXTENSION_LOADERS"}, {"original_string": "private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>(64);", "modifier": "private static final", "type": "ConcurrentMap<Class<?>, Object>", "declarator": "EXTENSION_INSTANCES = new ConcurrentHashMap<>(64)", "var_name": "EXTENSION_INSTANCES"}, {"original_string": "private final Class<?> type;", "modifier": "private final", "type": "Class<?>", "declarator": "type", "var_name": "type"}, {"original_string": "private final ExtensionFactory objectFactory;", "modifier": "private final", "type": "ExtensionFactory", "declarator": "objectFactory", "var_name": "objectFactory"}, {"original_string": "private final ConcurrentMap<Class<?>, String> cachedNames = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Class<?>, String>", "declarator": "cachedNames = new ConcurrentHashMap<>()", "var_name": "cachedNames"}, {"original_string": "private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>();", "modifier": "private final", "type": "Holder<Map<String, Class<?>>>", "declarator": "cachedClasses = new Holder<>()", "var_name": "cachedClasses"}, {"original_string": "private final Map<String, Object> cachedActivates = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "cachedActivates = new ConcurrentHashMap<>()", "var_name": "cachedActivates"}, {"original_string": "private final ConcurrentMap<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, Holder<Object>>", "declarator": "cachedInstances = new ConcurrentHashMap<>()", "var_name": "cachedInstances"}, {"original_string": "private final Holder<Object> cachedAdaptiveInstance = new Holder<>();", "modifier": "private final", "type": "Holder<Object>", "declarator": "cachedAdaptiveInstance = new Holder<>()", "var_name": "cachedAdaptiveInstance"}, {"original_string": "private volatile Class<?> cachedAdaptiveClass = null;", "modifier": "private volatile", "type": "Class<?>", "declarator": "cachedAdaptiveClass = null", "var_name": "cachedAdaptiveClass"}, {"original_string": "private String cachedDefaultName;", "modifier": "private", "type": "String", "declarator": "cachedDefaultName", "var_name": "cachedDefaultName"}, {"original_string": "private volatile Throwable createAdaptiveInstanceError;", "modifier": "private volatile", "type": "Throwable", "declarator": "createAdaptiveInstanceError", "var_name": "createAdaptiveInstanceError"}, {"original_string": "private Set<Class<?>> cachedWrapperClasses;", "modifier": "private", "type": "Set<Class<?>>", "declarator": "cachedWrapperClasses", "var_name": "cachedWrapperClasses"}, {"original_string": "private Map<String, IllegalStateException> exceptions = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, IllegalStateException>", "declarator": "exceptions = new ConcurrentHashMap<>()", "var_name": "exceptions"}, {"original_string": "private static volatile LoadingStrategy[] strategies = loadLoadingStrategies();", "modifier": "private static volatile", "type": "LoadingStrategy[]", "declarator": "strategies = loadLoadingStrategies()", "var_name": "strategies"}], "methods": [{"identifier": "setLoadingStrategies", "parameters": "(LoadingStrategy... strategies)", "modifiers": "public static", "return": "void", "signature": "void setLoadingStrategies(LoadingStrategy... strategies)", "full_signature": "public static void setLoadingStrategies(LoadingStrategy... strategies)", "class_method_signature": "ExtensionLoader.setLoadingStrategies(LoadingStrategy... strategies)", "testcase": false, "constructor": false}, {"identifier": "loadLoadingStrategies", "parameters": "()", "modifiers": "private static", "return": "LoadingStrategy[]", "signature": "LoadingStrategy[] loadLoadingStrategies()", "full_signature": "private static LoadingStrategy[] loadLoadingStrategies()", "class_method_signature": "ExtensionLoader.loadLoadingStrategies()", "testcase": false, "constructor": false}, {"identifier": "getLoadingStrategies", "parameters": "()", "modifiers": "public static", "return": "List<LoadingStrategy>", "signature": "List<LoadingStrategy> getLoadingStrategies()", "full_signature": "public static List<LoadingStrategy> getLoadingStrategies()", "class_method_signature": "ExtensionLoader.getLoadingStrategies()", "testcase": false, "constructor": false}, {"identifier": "ExtensionLoader", "parameters": "(Class<?> type)", "modifiers": "private", "return": "", "signature": " ExtensionLoader(Class<?> type)", "full_signature": "private  ExtensionLoader(Class<?> type)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<?> type)", "testcase": false, "constructor": true}, {"identifier": "withExtensionAnnotation", "parameters": "(Class<T> type)", "modifiers": "private static", "return": "boolean", "signature": "boolean withExtensionAnnotation(Class<T> type)", "full_signature": "private static boolean withExtensionAnnotation(Class<T> type)", "class_method_signature": "ExtensionLoader.withExtensionAnnotation(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getExtensionLoader", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ExtensionLoader<T>", "signature": "ExtensionLoader<T> getExtensionLoader(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ExtensionLoader<T> getExtensionLoader(Class<T> type)", "class_method_signature": "ExtensionLoader.getExtensionLoader(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "resetExtensionLoader", "parameters": "(Class type)", "modifiers": "public static", "return": "void", "signature": "void resetExtensionLoader(Class type)", "full_signature": "public static void resetExtensionLoader(Class type)", "class_method_signature": "ExtensionLoader.resetExtensionLoader(Class type)", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "ExtensionLoader.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "findClassLoader", "parameters": "()", "modifiers": "private static", "return": "ClassLoader", "signature": "ClassLoader findClassLoader()", "full_signature": "private static ClassLoader findClassLoader()", "class_method_signature": "ExtensionLoader.findClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getExtensionName", "parameters": "(T extensionInstance)", "modifiers": "public", "return": "String", "signature": "String getExtensionName(T extensionInstance)", "full_signature": "public String getExtensionName(T extensionInstance)", "class_method_signature": "ExtensionLoader.getExtensionName(T extensionInstance)", "testcase": false, "constructor": false}, {"identifier": "getExtensionName", "parameters": "(Class<?> extensionClass)", "modifiers": "public", "return": "String", "signature": "String getExtensionName(Class<?> extensionClass)", "full_signature": "public String getExtensionName(Class<?> extensionClass)", "class_method_signature": "ExtensionLoader.getExtensionName(Class<?> extensionClass)", "testcase": false, "constructor": false}, {"identifier": "getActivateExtension", "parameters": "(URL url, String key)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getActivateExtension(URL url, String key)", "full_signature": "public List<T> getActivateExtension(URL url, String key)", "class_method_signature": "ExtensionLoader.getActivateExtension(URL url, String key)", "testcase": false, "constructor": false}, {"identifier": "getActivateExtension", "parameters": "(URL url, String[] values)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getActivateExtension(URL url, String[] values)", "full_signature": "public List<T> getActivateExtension(URL url, String[] values)", "class_method_signature": "ExtensionLoader.getActivateExtension(URL url, String[] values)", "testcase": false, "constructor": false}, {"identifier": "getActivateExtension", "parameters": "(URL url, String key, String group)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getActivateExtension(URL url, String key, String group)", "full_signature": "public List<T> getActivateExtension(URL url, String key, String group)", "class_method_signature": "ExtensionLoader.getActivateExtension(URL url, String key, String group)", "testcase": false, "constructor": false}, {"identifier": "getActivateExtension", "parameters": "(URL url, String[] values, String group)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getActivateExtension(URL url, String[] values, String group)", "full_signature": "public List<T> getActivateExtension(URL url, String[] values, String group)", "class_method_signature": "ExtensionLoader.getActivateExtension(URL url, String[] values, String group)", "testcase": false, "constructor": false}, {"identifier": "isMatchGroup", "parameters": "(String group, String[] groups)", "modifiers": "private", "return": "boolean", "signature": "boolean isMatchGroup(String group, String[] groups)", "full_signature": "private boolean isMatchGroup(String group, String[] groups)", "class_method_signature": "ExtensionLoader.isMatchGroup(String group, String[] groups)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "(String[] keys, URL url)", "modifiers": "private", "return": "boolean", "signature": "boolean isActive(String[] keys, URL url)", "full_signature": "private boolean isActive(String[] keys, URL url)", "class_method_signature": "ExtensionLoader.isActive(String[] keys, URL url)", "testcase": false, "constructor": false}, {"identifier": "getLoadedExtension", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getLoadedExtension(String name)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getLoadedExtension(String name)", "class_method_signature": "ExtensionLoader.getLoadedExtension(String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateHolder", "parameters": "(String name)", "modifiers": "private", "return": "Holder<Object>", "signature": "Holder<Object> getOrCreateHolder(String name)", "full_signature": "private Holder<Object> getOrCreateHolder(String name)", "class_method_signature": "ExtensionLoader.getOrCreateHolder(String name)", "testcase": false, "constructor": false}, {"identifier": "getLoadedExtensions", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getLoadedExtensions()", "full_signature": "public Set<String> getLoadedExtensions()", "class_method_signature": "ExtensionLoader.getLoadedExtensions()", "testcase": false, "constructor": false}, {"identifier": "getLoadedExtensionInstances", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getLoadedExtensionInstances()", "full_signature": "public List<T> getLoadedExtensionInstances()", "class_method_signature": "ExtensionLoader.getLoadedExtensionInstances()", "testcase": false, "constructor": false}, {"identifier": "getLoadedAdaptiveExtensionInstances", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getLoadedAdaptiveExtensionInstances()", "full_signature": "public Object getLoadedAdaptiveExtensionInstances()", "class_method_signature": "ExtensionLoader.getLoadedAdaptiveExtensionInstances()", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getExtension(String name)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getExtension(String name)", "class_method_signature": "ExtensionLoader.getExtension(String name)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String name, boolean wrap)", "modifiers": "public", "return": "T", "signature": "T getExtension(String name, boolean wrap)", "full_signature": "public T getExtension(String name, boolean wrap)", "class_method_signature": "ExtensionLoader.getExtension(String name, boolean wrap)", "testcase": false, "constructor": false}, {"identifier": "getOrDefaultExtension", "parameters": "(String name)", "modifiers": "public", "return": "T", "signature": "T getOrDefaultExtension(String name)", "full_signature": "public T getOrDefaultExtension(String name)", "class_method_signature": "ExtensionLoader.getOrDefaultExtension(String name)", "testcase": false, "constructor": false}, {"identifier": "getDefaultExtension", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getDefaultExtension()", "full_signature": "public T getDefaultExtension()", "class_method_signature": "ExtensionLoader.getDefaultExtension()", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasExtension(String name)", "full_signature": "public boolean hasExtension(String name)", "class_method_signature": "ExtensionLoader.hasExtension(String name)", "testcase": false, "constructor": false}, {"identifier": "getSupportedExtensions", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSupportedExtensions()", "full_signature": "public Set<String> getSupportedExtensions()", "class_method_signature": "ExtensionLoader.getSupportedExtensions()", "testcase": false, "constructor": false}, {"identifier": "getSupportedExtensionInstances", "parameters": "()", "modifiers": "public", "return": "Set<T>", "signature": "Set<T> getSupportedExtensionInstances()", "full_signature": "public Set<T> getSupportedExtensionInstances()", "class_method_signature": "ExtensionLoader.getSupportedExtensionInstances()", "testcase": false, "constructor": false}, {"identifier": "getDefaultExtensionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultExtensionName()", "full_signature": "public String getDefaultExtensionName()", "class_method_signature": "ExtensionLoader.getDefaultExtensionName()", "testcase": false, "constructor": false}, {"identifier": "addExtension", "parameters": "(String name, Class<?> clazz)", "modifiers": "public", "return": "void", "signature": "void addExtension(String name, Class<?> clazz)", "full_signature": "public void addExtension(String name, Class<?> clazz)", "class_method_signature": "ExtensionLoader.addExtension(String name, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "replaceExtension", "parameters": "(String name, Class<?> clazz)", "modifiers": "@Deprecated public", "return": "void", "signature": "void replaceExtension(String name, Class<?> clazz)", "full_signature": "@Deprecated public void replaceExtension(String name, Class<?> clazz)", "class_method_signature": "ExtensionLoader.replaceExtension(String name, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAdaptiveExtension", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getAdaptiveExtension()", "full_signature": "@SuppressWarnings(\"unchecked\") public T getAdaptiveExtension()", "class_method_signature": "ExtensionLoader.getAdaptiveExtension()", "testcase": false, "constructor": false}, {"identifier": "findException", "parameters": "(String name)", "modifiers": "private", "return": "IllegalStateException", "signature": "IllegalStateException findException(String name)", "full_signature": "private IllegalStateException findException(String name)", "class_method_signature": "ExtensionLoader.findException(String name)", "testcase": false, "constructor": false}, {"identifier": "createExtension", "parameters": "(String name, boolean wrap)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T createExtension(String name, boolean wrap)", "full_signature": "@SuppressWarnings(\"unchecked\") private T createExtension(String name, boolean wrap)", "class_method_signature": "ExtensionLoader.createExtension(String name, boolean wrap)", "testcase": false, "constructor": false}, {"identifier": "containsExtension", "parameters": "(String name)", "modifiers": "private", "return": "boolean", "signature": "boolean containsExtension(String name)", "full_signature": "private boolean containsExtension(String name)", "class_method_signature": "ExtensionLoader.containsExtension(String name)", "testcase": false, "constructor": false}, {"identifier": "injectExtension", "parameters": "(T instance)", "modifiers": "private", "return": "T", "signature": "T injectExtension(T instance)", "full_signature": "private T injectExtension(T instance)", "class_method_signature": "ExtensionLoader.injectExtension(T instance)", "testcase": false, "constructor": false}, {"identifier": "initExtension", "parameters": "(T instance)", "modifiers": "private", "return": "void", "signature": "void initExtension(T instance)", "full_signature": "private void initExtension(T instance)", "class_method_signature": "ExtensionLoader.initExtension(T instance)", "testcase": false, "constructor": false}, {"identifier": "getSetterProperty", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String getSetterProperty(Method method)", "full_signature": "private String getSetterProperty(Method method)", "class_method_signature": "ExtensionLoader.getSetterProperty(Method method)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isSetter(Method method)", "full_signature": "private boolean isSetter(Method method)", "class_method_signature": "ExtensionLoader.isSetter(Method method)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClass", "parameters": "(String name)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getExtensionClass(String name)", "full_signature": "private Class<?> getExtensionClass(String name)", "class_method_signature": "ExtensionLoader.getExtensionClass(String name)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClasses", "parameters": "()", "modifiers": "private", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getExtensionClasses()", "full_signature": "private Map<String, Class<?>> getExtensionClasses()", "class_method_signature": "ExtensionLoader.getExtensionClasses()", "testcase": false, "constructor": false}, {"identifier": "loadExtensionClasses", "parameters": "()", "modifiers": "private", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> loadExtensionClasses()", "full_signature": "private Map<String, Class<?>> loadExtensionClasses()", "class_method_signature": "ExtensionLoader.loadExtensionClasses()", "testcase": false, "constructor": false}, {"identifier": "cacheDefaultExtensionName", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cacheDefaultExtensionName()", "full_signature": "private void cacheDefaultExtensionName()", "class_method_signature": "ExtensionLoader.cacheDefaultExtensionName()", "testcase": false, "constructor": false}, {"identifier": "loadDirectory", "parameters": "(Map<String, Class<?>> extensionClasses, String dir, String type)", "modifiers": "private", "return": "void", "signature": "void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type)", "full_signature": "private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type)", "class_method_signature": "ExtensionLoader.loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type)", "testcase": false, "constructor": false}, {"identifier": "loadDirectory", "parameters": "(Map<String, Class<?>> extensionClasses, String dir, String type,\n                               boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages)", "modifiers": "private", "return": "void", "signature": "void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                               boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages)", "full_signature": "private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                               boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages)", "class_method_signature": "ExtensionLoader.loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                               boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages)", "testcase": false, "constructor": false}, {"identifier": "loadResource", "parameters": "(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                              java.net.URL resourceURL, boolean overridden, String... excludedPackages)", "modifiers": "private", "return": "void", "signature": "void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                              java.net.URL resourceURL, boolean overridden, String... excludedPackages)", "full_signature": "private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                              java.net.URL resourceURL, boolean overridden, String... excludedPackages)", "class_method_signature": "ExtensionLoader.loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                              java.net.URL resourceURL, boolean overridden, String... excludedPackages)", "testcase": false, "constructor": false}, {"identifier": "isExcluded", "parameters": "(String className, String... excludedPackages)", "modifiers": "private", "return": "boolean", "signature": "boolean isExcluded(String className, String... excludedPackages)", "full_signature": "private boolean isExcluded(String className, String... excludedPackages)", "class_method_signature": "ExtensionLoader.isExcluded(String className, String... excludedPackages)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                           boolean overridden)", "modifiers": "private", "return": "void", "signature": "void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                           boolean overridden)", "full_signature": "private void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                           boolean overridden)", "class_method_signature": "ExtensionLoader.loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                           boolean overridden)", "testcase": false, "constructor": false}, {"identifier": "cacheName", "parameters": "(Class<?> clazz, String name)", "modifiers": "private", "return": "void", "signature": "void cacheName(Class<?> clazz, String name)", "full_signature": "private void cacheName(Class<?> clazz, String name)", "class_method_signature": "ExtensionLoader.cacheName(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "saveInExtensionClass", "parameters": "(Map<String, Class<?>> extensionClasses, Class<?> clazz, String name, boolean overridden)", "modifiers": "private", "return": "void", "signature": "void saveInExtensionClass(Map<String, Class<?>> extensionClasses, Class<?> clazz, String name, boolean overridden)", "full_signature": "private void saveInExtensionClass(Map<String, Class<?>> extensionClasses, Class<?> clazz, String name, boolean overridden)", "class_method_signature": "ExtensionLoader.saveInExtensionClass(Map<String, Class<?>> extensionClasses, Class<?> clazz, String name, boolean overridden)", "testcase": false, "constructor": false}, {"identifier": "cacheActivateClass", "parameters": "(Class<?> clazz, String name)", "modifiers": "private", "return": "void", "signature": "void cacheActivateClass(Class<?> clazz, String name)", "full_signature": "private void cacheActivateClass(Class<?> clazz, String name)", "class_method_signature": "ExtensionLoader.cacheActivateClass(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "cacheAdaptiveClass", "parameters": "(Class<?> clazz, boolean overridden)", "modifiers": "private", "return": "void", "signature": "void cacheAdaptiveClass(Class<?> clazz, boolean overridden)", "full_signature": "private void cacheAdaptiveClass(Class<?> clazz, boolean overridden)", "class_method_signature": "ExtensionLoader.cacheAdaptiveClass(Class<?> clazz, boolean overridden)", "testcase": false, "constructor": false}, {"identifier": "cacheWrapperClass", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "void", "signature": "void cacheWrapperClass(Class<?> clazz)", "full_signature": "private void cacheWrapperClass(Class<?> clazz)", "class_method_signature": "ExtensionLoader.cacheWrapperClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isWrapperClass", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "boolean", "signature": "boolean isWrapperClass(Class<?> clazz)", "full_signature": "private boolean isWrapperClass(Class<?> clazz)", "class_method_signature": "ExtensionLoader.isWrapperClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "findAnnotationName", "parameters": "(Class<?> clazz)", "modifiers": "@SuppressWarnings(\"deprecation\") private", "return": "String", "signature": "String findAnnotationName(Class<?> clazz)", "full_signature": "@SuppressWarnings(\"deprecation\") private String findAnnotationName(Class<?> clazz)", "class_method_signature": "ExtensionLoader.findAnnotationName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "createAdaptiveExtension", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T createAdaptiveExtension()", "full_signature": "@SuppressWarnings(\"unchecked\") private T createAdaptiveExtension()", "class_method_signature": "ExtensionLoader.createAdaptiveExtension()", "testcase": false, "constructor": false}, {"identifier": "getAdaptiveExtensionClass", "parameters": "()", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getAdaptiveExtensionClass()", "full_signature": "private Class<?> getAdaptiveExtensionClass()", "class_method_signature": "ExtensionLoader.getAdaptiveExtensionClass()", "testcase": false, "constructor": false}, {"identifier": "createAdaptiveExtensionClass", "parameters": "()", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> createAdaptiveExtensionClass()", "full_signature": "private Class<?> createAdaptiveExtensionClass()", "class_method_signature": "ExtensionLoader.createAdaptiveExtensionClass()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ExtensionLoader.toString()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java"}, "focal_method": {"identifier": "getExtensionLoader", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ExtensionLoader<T>", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Extension type == null\");\n        }\n        if (!type.isInterface()) {\n            throw new IllegalArgumentException(\"Extension type (\" + type + \") is not an interface!\");\n        }\n        if (!withExtensionAnnotation(type)) {\n            throw new IllegalArgumentException(\"Extension type (\" + type +\n                    \") is not an extension, because it is NOT annotated with @\" + SPI.class.getSimpleName() + \"!\");\n        }\n\n        ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        if (loader == null) {\n            EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n            loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        }\n        return loader;\n    }", "signature": "ExtensionLoader<T> getExtensionLoader(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ExtensionLoader<T> getExtensionLoader(Class<T> type)", "class_method_signature": "ExtensionLoader.getExtensionLoader(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["isInterface", "withExtensionAnnotation", "getSimpleName", "get", "putIfAbsent", "get"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}