{"test_class": {"identifier": "NamespaceCatalogResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEST_STREAMING_ENGINE = \"STORM\";", "modifier": "public static final", "type": "String", "declarator": "TEST_STREAMING_ENGINE = \"STORM\"", "var_name": "TEST_STREAMING_ENGINE"}, {"original_string": "public static final String TEST_TIME_SERIES_DB = \"AMBARI_METRICS\";", "modifier": "public static final", "type": "String", "declarator": "TEST_TIME_SERIES_DB = \"AMBARI_METRICS\"", "var_name": "TEST_TIME_SERIES_DB"}, {"original_string": "@Tested\n    private NamespaceCatalogResource namespaceCatalogResource;", "modifier": "@Tested\n    private", "type": "NamespaceCatalogResource", "declarator": "namespaceCatalogResource", "var_name": "namespaceCatalogResource"}, {"original_string": "@Injectable\n    private StreamlineAuthorizer authorizer = new NoopAuthorizer();", "modifier": "@Injectable\n    private", "type": "StreamlineAuthorizer", "declarator": "authorizer = new NoopAuthorizer()", "var_name": "authorizer"}, {"original_string": "@Injectable\n    private StreamCatalogService catalogService;", "modifier": "@Injectable\n    private", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "@Injectable\n    private TopologyActionsService topologyActionsService;", "modifier": "@Injectable\n    private", "type": "TopologyActionsService", "declarator": "topologyActionsService", "var_name": "topologyActionsService"}, {"original_string": "@Injectable\n    private EnvironmentService environmentService;", "modifier": "@Injectable\n    private", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}, {"original_string": "@Injectable\n    private SecurityContext securityContext;", "modifier": "@Injectable\n    private", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "file": "streams/service/src/test/java/com/hortonworks/streamline/streams/service/NamespaceCatalogResourceTest.java"}, "test_case": {"identifier": "testOverwriteSameStreamingEngineMappingViaMapServiceToClusterInNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverwriteSameStreamingEngineMappingViaMapServiceToClusterInNamespace() throws Exception {\n        Long testNamespaceId = 1L;\n\n        Namespace testNamespace = createTestNamespace(testNamespaceId, TEST_STREAMING_ENGINE, TEST_TIME_SERIES_DB);\n\n        Collection<NamespaceServiceClusterMap> existingMappings = createTestMappingsForExisting(testNamespaceId);\n\n        new Expectations() {{\n            environmentService.getNamespace(testNamespaceId);\n            result = testNamespace;\n            environmentService.listServiceClusterMapping(testNamespaceId);\n            result = existingMappings;\n        }};\n\n        NamespaceServiceClusterMap existingStreamingEngineMapping = existingMappings.stream()\n                .filter(m -> m.getServiceName().equals(TEST_STREAMING_ENGINE)).findAny().get();\n\n        namespaceCatalogResource.mapServiceToClusterInNamespace(testNamespaceId, existingStreamingEngineMapping, securityContext);\n\n        new Verifications() {{\n            environmentService.addOrUpdateServiceClusterMapping(withAny(new NamespaceServiceClusterMap()));\n            times = 1;\n        }};\n    }", "signature": "void testOverwriteSameStreamingEngineMappingViaMapServiceToClusterInNamespace()", "full_signature": "@Test public void testOverwriteSameStreamingEngineMappingViaMapServiceToClusterInNamespace()", "class_method_signature": "NamespaceCatalogResourceTest.testOverwriteSameStreamingEngineMappingViaMapServiceToClusterInNamespace()", "testcase": true, "constructor": false, "invocations": ["createTestNamespace", "createTestMappingsForExisting", "getNamespace", "listServiceClusterMapping", "get", "findAny", "filter", "stream", "equals", "getServiceName", "mapServiceToClusterInNamespace", "addOrUpdateServiceClusterMapping", "withAny"]}, "focal_class": {"identifier": "NamespaceCatalogResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NamespaceCatalogResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NamespaceCatalogResource.class)", "var_name": "LOG"}, {"original_string": "private final StreamlineAuthorizer authorizer;", "modifier": "private final", "type": "StreamlineAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private final StreamCatalogService catalogService;", "modifier": "private final", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "private final TopologyActionsService topologyActionsService;", "modifier": "private final", "type": "TopologyActionsService", "declarator": "topologyActionsService", "var_name": "topologyActionsService"}, {"original_string": "private final EnvironmentService environmentService;", "modifier": "private final", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}], "methods": [{"identifier": "NamespaceCatalogResource", "parameters": "(StreamlineAuthorizer authorizer, StreamCatalogService catalogService,\n                                  TopologyActionsService topologyActionsService, EnvironmentService environmentService)", "modifiers": "public", "return": "", "signature": " NamespaceCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService,\n                                  TopologyActionsService topologyActionsService, EnvironmentService environmentService)", "full_signature": "public  NamespaceCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService,\n                                  TopologyActionsService topologyActionsService, EnvironmentService environmentService)", "class_method_signature": "NamespaceCatalogResource.NamespaceCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService,\n                                  TopologyActionsService topologyActionsService, EnvironmentService environmentService)", "testcase": false, "constructor": true}, {"identifier": "listNamespaces", "parameters": "(@Context UriInfo uriInfo,\n                                 @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/namespaces\") @Timed public", "return": "Response", "signature": "Response listNamespaces(@Context UriInfo uriInfo,\n                                 @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/namespaces\") @Timed public Response listNamespaces(@Context UriInfo uriInfo,\n                                 @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.listNamespaces(@Context UriInfo uriInfo,\n                                 @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceById", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                   @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                   @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/namespaces/{id}\") @Timed public", "return": "Response", "signature": "Response getNamespaceById(@PathParam(\"id\") Long namespaceId,\n                                   @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                   @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/namespaces/{id}\") @Timed public Response getNamespaceById(@PathParam(\"id\") Long namespaceId,\n                                   @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                   @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.getNamespaceById(@PathParam(\"id\") Long namespaceId,\n                                   @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                   @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceByName", "parameters": "(@PathParam(\"namespaceName\") String namespaceName,\n                                     @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                     @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/namespaces/name/{namespaceName}\") @Timed public", "return": "Response", "signature": "Response getNamespaceByName(@PathParam(\"namespaceName\") String namespaceName,\n                                     @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                     @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/namespaces/name/{namespaceName}\") @Timed public Response getNamespaceByName(@PathParam(\"namespaceName\") String namespaceName,\n                                     @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                     @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.getNamespaceByName(@PathParam(\"namespaceName\") String namespaceName,\n                                     @javax.ws.rs.QueryParam(\"detail\") Boolean detail,\n                                     @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addNamespace", "parameters": "(Namespace namespace, @Context SecurityContext securityContext)", "modifiers": "@Timed @POST @Path(\"/namespaces\") public", "return": "Response", "signature": "Response addNamespace(Namespace namespace, @Context SecurityContext securityContext)", "full_signature": "@Timed @POST @Path(\"/namespaces\") public Response addNamespace(Namespace namespace, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.addNamespace(Namespace namespace, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "removeNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "modifiers": "@DELETE @Path(\"/namespaces/{id}\") @Timed public", "return": "Response", "signature": "Response removeNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "full_signature": "@DELETE @Path(\"/namespaces/{id}\") @Timed public Response removeNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.removeNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n      Namespace namespace, @Context SecurityContext securityContext)", "modifiers": "@PUT @Path(\"/namespaces/{id}\") @Timed public", "return": "Response", "signature": "Response addOrUpdateNamespace(@PathParam(\"id\") Long namespaceId,\n      Namespace namespace, @Context SecurityContext securityContext)", "full_signature": "@PUT @Path(\"/namespaces/{id}\") @Timed public Response addOrUpdateNamespace(@PathParam(\"id\") Long namespaceId,\n      Namespace namespace, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.addOrUpdateNamespace(@PathParam(\"id\") Long namespaceId,\n      Namespace namespace, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "listServiceToClusterMappingInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/namespaces/{id}/mapping\") @Timed public", "return": "Response", "signature": "Response listServiceToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/namespaces/{id}/mapping\") @Timed public Response listServiceToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.listServiceToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "findServicesToClusterMappingInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                          @PathParam(\"serviceName\") String serviceName,\n                                                          @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/namespaces/{id}/mapping/{serviceName}\") @Timed public", "return": "Response", "signature": "Response findServicesToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                          @PathParam(\"serviceName\") String serviceName,\n                                                          @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/namespaces/{id}/mapping/{serviceName}\") @Timed public Response findServicesToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                          @PathParam(\"serviceName\") String serviceName,\n                                                          @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.findServicesToClusterMappingInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                          @PathParam(\"serviceName\") String serviceName,\n                                                          @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "setServicesToClusterInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                  List<NamespaceServiceClusterMap> mappings,\n                                                  @Context SecurityContext securityContext)", "modifiers": "@POST @Path(\"/namespaces/{id}/mapping/bulk\") @Timed public", "return": "Response", "signature": "Response setServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                  List<NamespaceServiceClusterMap> mappings,\n                                                  @Context SecurityContext securityContext)", "full_signature": "@POST @Path(\"/namespaces/{id}/mapping/bulk\") @Timed public Response setServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                  List<NamespaceServiceClusterMap> mappings,\n                                                  @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.setServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                  List<NamespaceServiceClusterMap> mappings,\n                                                  @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "mapServiceToClusterInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "modifiers": "@POST @Path(\"/namespaces/{id}/mapping\") @Timed public", "return": "Response", "signature": "Response mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "full_signature": "@POST @Path(\"/namespaces/{id}/mapping\") @Timed public Response mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "unmapServiceToClusterInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                   @PathParam(\"serviceName\") String serviceName,\n                                                   @PathParam(\"clusterId\") Long clusterId,\n                                                   @Context SecurityContext securityContext)", "modifiers": "@DELETE @Path(\"/namespaces/{id}/mapping/{serviceName}/cluster/{clusterId}\") @Timed public", "return": "Response", "signature": "Response unmapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                   @PathParam(\"serviceName\") String serviceName,\n                                                   @PathParam(\"clusterId\") Long clusterId,\n                                                   @Context SecurityContext securityContext)", "full_signature": "@DELETE @Path(\"/namespaces/{id}/mapping/{serviceName}/cluster/{clusterId}\") @Timed public Response unmapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                   @PathParam(\"serviceName\") String serviceName,\n                                                   @PathParam(\"clusterId\") Long clusterId,\n                                                   @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.unmapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                   @PathParam(\"serviceName\") String serviceName,\n                                                   @PathParam(\"clusterId\") Long clusterId,\n                                                   @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "unmapAllServicesToClusterInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                       @Context SecurityContext securityContext)", "modifiers": "@DELETE @Path(\"/namespaces/{id}/mapping\") @Timed public", "return": "Response", "signature": "Response unmapAllServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                       @Context SecurityContext securityContext)", "full_signature": "@DELETE @Path(\"/namespaces/{id}/mapping\") @Timed public Response unmapAllServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                       @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.unmapAllServicesToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                       @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "assertNoTopologyRefersNamespace", "parameters": "(Long namespaceId)", "modifiers": "private", "return": "void", "signature": "void assertNoTopologyRefersNamespace(Long namespaceId)", "full_signature": "private void assertNoTopologyRefersNamespace(Long namespaceId)", "class_method_signature": "NamespaceCatalogResource.assertNoTopologyRefersNamespace(Long namespaceId)", "testcase": false, "constructor": false}, {"identifier": "assertNoTopologyReferringNamespaceIsRunning", "parameters": "(Long namespaceId, String asUser)", "modifiers": "private", "return": "void", "signature": "void assertNoTopologyReferringNamespaceIsRunning(Long namespaceId, String asUser)", "full_signature": "private void assertNoTopologyReferringNamespaceIsRunning(Long namespaceId, String asUser)", "class_method_signature": "NamespaceCatalogResource.assertNoTopologyReferringNamespaceIsRunning(Long namespaceId, String asUser)", "testcase": false, "constructor": false}, {"identifier": "assertServiceIsUnique", "parameters": "(Collection<NamespaceServiceClusterMap> mappings, String service)", "modifiers": "private", "return": "void", "signature": "void assertServiceIsUnique(Collection<NamespaceServiceClusterMap> mappings, String service)", "full_signature": "private void assertServiceIsUnique(Collection<NamespaceServiceClusterMap> mappings, String service)", "class_method_signature": "NamespaceCatalogResource.assertServiceIsUnique(Collection<NamespaceServiceClusterMap> mappings, String service)", "testcase": false, "constructor": false}, {"identifier": "buildNamespacesGetResponse", "parameters": "(Collection<Namespace> namespaces, Boolean detail)", "modifiers": "private", "return": "Response", "signature": "Response buildNamespacesGetResponse(Collection<Namespace> namespaces, Boolean detail)", "full_signature": "private Response buildNamespacesGetResponse(Collection<Namespace> namespaces, Boolean detail)", "class_method_signature": "NamespaceCatalogResource.buildNamespacesGetResponse(Collection<Namespace> namespaces, Boolean detail)", "testcase": false, "constructor": false}, {"identifier": "buildNamespaceGetResponse", "parameters": "(Namespace namespace, Boolean detail)", "modifiers": "private", "return": "Response", "signature": "Response buildNamespaceGetResponse(Namespace namespace, Boolean detail)", "full_signature": "private Response buildNamespaceGetResponse(Namespace namespace, Boolean detail)", "class_method_signature": "NamespaceCatalogResource.buildNamespaceGetResponse(Namespace namespace, Boolean detail)", "testcase": false, "constructor": false}, {"identifier": "buildMessageForCompositeId", "parameters": "(Long namespaceId, String serviceName, Long clusterId)", "modifiers": "private", "return": "String", "signature": "String buildMessageForCompositeId(Long namespaceId, String serviceName, Long clusterId)", "full_signature": "private String buildMessageForCompositeId(Long namespaceId, String serviceName, Long clusterId)", "class_method_signature": "NamespaceCatalogResource.buildMessageForCompositeId(Long namespaceId, String serviceName, Long clusterId)", "testcase": false, "constructor": false}], "file": "streams/service/src/main/java/com/hortonworks/streamline/streams/service/NamespaceCatalogResource.java"}, "focal_method": {"identifier": "mapServiceToClusterInNamespace", "parameters": "(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "modifiers": "@POST @Path(\"/namespaces/{id}/mapping\") @Timed public", "return": "Response", "body": "@POST\n  @Path(\"/namespaces/{id}/mapping\")\n  @Timed\n  public Response mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext) {\n    SecurityUtil.checkRoleOrPermissions(authorizer, securityContext, Roles.ROLE_ENVIRONMENT_SUPER_ADMIN,\n            Namespace.NAMESPACE, namespaceId, WRITE);\n    Namespace namespace = environmentService.getNamespace(namespaceId);\n    if (namespace == null) {\n      throw EntityNotFoundException.byId(namespaceId.toString());\n    }\n\n    Collection<NamespaceServiceClusterMap> existingMappings = environmentService.listServiceClusterMapping(namespaceId);\n    if (!existingMappings.contains(mapping)) {\n      existingMappings.add(mapping);\n    }\n\n    String streamingEngine = namespace.getStreamingEngine();\n    String timeSeriesDB = namespace.getTimeSeriesDB();\n\n    assertServiceIsUnique(existingMappings, streamingEngine);\n    assertServiceIsUnique(existingMappings, timeSeriesDB);\n\n    NamespaceServiceClusterMap newMapping = environmentService.addOrUpdateServiceClusterMapping(mapping);\n    return WSUtils.respondEntity(newMapping, CREATED);\n  }", "signature": "Response mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "full_signature": "@POST @Path(\"/namespaces/{id}/mapping\") @Timed public Response mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "class_method_signature": "NamespaceCatalogResource.mapServiceToClusterInNamespace(@PathParam(\"id\") Long namespaceId,\n                                                 NamespaceServiceClusterMap mapping, @Context SecurityContext securityContext)", "testcase": false, "constructor": false, "invocations": ["checkRoleOrPermissions", "getNamespace", "byId", "toString", "listServiceClusterMapping", "contains", "add", "getStreamingEngine", "getTimeSeriesDB", "assertServiceIsUnique", "assertServiceIsUnique", "addOrUpdateServiceClusterMapping", "respondEntity"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}