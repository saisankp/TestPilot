{"test_class": {"identifier": "MessageQueueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MessageQueue<String> messageQueue = new MessageQueue<>();", "modifier": "private final", "type": "MessageQueue<String>", "declarator": "messageQueue = new MessageQueue<>()", "var_name": "messageQueue"}], "file": "jumi-actors/src/test/java/fi/jumi/actors/queue/MessageQueueTest.java"}, "test_case": {"identifier": "send_does_not_change_the_interrupt_status_of_the_current_thread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void send_does_not_change_the_interrupt_status_of_the_current_thread() {\n        Thread.currentThread().interrupt();\n\n        messageQueue.send(\"any message\");\n\n        assertThat(\"interrupt status after send\", Thread.currentThread().isInterrupted(), is(true));\n    }", "signature": "void send_does_not_change_the_interrupt_status_of_the_current_thread()", "full_signature": "@Test public void send_does_not_change_the_interrupt_status_of_the_current_thread()", "class_method_signature": "MessageQueueTest.send_does_not_change_the_interrupt_status_of_the_current_thread()", "testcase": true, "constructor": false, "invocations": ["interrupt", "currentThread", "send", "assertThat", "isInterrupted", "currentThread", "is"]}, "focal_class": {"identifier": "MessageQueue", "superclass": "", "interfaces": "implements MessageSender<T>, MessageReceiver<T>", "fields": [{"original_string": "private final BlockingQueue<T> queue = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "BlockingQueue<T>", "declarator": "queue = new LinkedBlockingQueue<>()", "var_name": "queue"}], "methods": [{"identifier": "send", "parameters": "(T message)", "modifiers": "@Override public", "return": "void", "signature": "void send(T message)", "full_signature": "@Override public void send(T message)", "class_method_signature": "MessageQueue.send(T message)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T take()", "full_signature": "@Override public T take()", "class_method_signature": "MessageQueue.take()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "T", "signature": "T poll()", "full_signature": "@Nullable @Override public T poll()", "class_method_signature": "MessageQueue.poll()", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/queue/MessageQueue.java"}, "focal_method": {"identifier": "send", "parameters": "(T message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void send(T message) {\n        queue.add(message);\n    }", "signature": "void send(T message)", "full_signature": "@Override public void send(T message)", "class_method_signature": "MessageQueue.send(T message)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}