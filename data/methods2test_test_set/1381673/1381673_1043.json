{"test_class": {"identifier": "PatternInspectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnalyzerConfigurationMock configurationMock;", "modifier": "private", "type": "AnalyzerConfigurationMock", "declarator": "configurationMock", "var_name": "configurationMock"}, {"original_string": "private PatternInspector a;", "modifier": "private", "type": "PatternInspector", "declarator": "a", "var_name": "a"}, {"original_string": "private PatternInspector b;", "modifier": "private", "type": "PatternInspector", "declarator": "b", "var_name": "b"}], "file": "drools-verifier/drools-verifier-core/src/test/java/org/drools/verifier/core/cache/inspectors/PatternInspectorTest.java"}, "test_case": {"identifier": "testRedundancy01", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRedundancy01() throws\n            Exception {\n        assertTrue(a.isRedundant(b));\n        assertTrue(b.isRedundant(a));\n    }", "signature": "void testRedundancy01()", "full_signature": "@Test public void testRedundancy01()", "class_method_signature": "PatternInspectorTest.testRedundancy01()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isRedundant", "assertTrue", "isRedundant"]}, "focal_class": {"identifier": "PatternInspector", "superclass": "", "interfaces": "implements HasConflicts,\n                   IsConflicting,\n                   IsSubsuming,\n                   IsRedundant,\n                   HumanReadable,\n                   HasKeys", "fields": [{"original_string": "private final UUIDKey uuidKey;", "modifier": "private final", "type": "UUIDKey", "declarator": "uuidKey", "var_name": "uuidKey"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final AnalyzerConfiguration configuration;", "modifier": "private final", "type": "AnalyzerConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final InspectorList<FieldInspector> inspectorList;", "modifier": "private final", "type": "InspectorList<FieldInspector>", "declarator": "inspectorList", "var_name": "inspectorList"}, {"original_string": "private final RelationResolver relationResolver;", "modifier": "private final", "type": "RelationResolver", "declarator": "relationResolver", "var_name": "relationResolver"}], "methods": [{"identifier": "PatternInspector", "parameters": "(final Pattern pattern,\n                            final RuleInspectorUpdater ruleInspectorUpdater,\n                            final AnalyzerConfiguration configuration)", "modifiers": "public", "return": "", "signature": " PatternInspector(final Pattern pattern,\n                            final RuleInspectorUpdater ruleInspectorUpdater,\n                            final AnalyzerConfiguration configuration)", "full_signature": "public  PatternInspector(final Pattern pattern,\n                            final RuleInspectorUpdater ruleInspectorUpdater,\n                            final AnalyzerConfiguration configuration)", "class_method_signature": "PatternInspector.PatternInspector(final Pattern pattern,\n                            final RuleInspectorUpdater ruleInspectorUpdater,\n                            final AnalyzerConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "makeFieldInspectors", "parameters": "(final Collection<Field> fields,\n                                     final RuleInspectorUpdater ruleInspectorUpdater)", "modifiers": "private", "return": "void", "signature": "void makeFieldInspectors(final Collection<Field> fields,\n                                     final RuleInspectorUpdater ruleInspectorUpdater)", "full_signature": "private void makeFieldInspectors(final Collection<Field> fields,\n                                     final RuleInspectorUpdater ruleInspectorUpdater)", "class_method_signature": "PatternInspector.makeFieldInspectors(final Collection<Field> fields,\n                                     final RuleInspectorUpdater ruleInspectorUpdater)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "Pattern", "signature": "Pattern getPattern()", "full_signature": "public Pattern getPattern()", "class_method_signature": "PatternInspector.getPattern()", "testcase": false, "constructor": false}, {"identifier": "conflicts", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean conflicts(final Object other)", "full_signature": "@Override public boolean conflicts(final Object other)", "class_method_signature": "PatternInspector.conflicts(final Object other)", "testcase": false, "constructor": false}, {"identifier": "isRedundant", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRedundant(final Object other)", "full_signature": "@Override public boolean isRedundant(final Object other)", "class_method_signature": "PatternInspector.isRedundant(final Object other)", "testcase": false, "constructor": false}, {"identifier": "subsumes", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean subsumes(final Object other)", "full_signature": "@Override public boolean subsumes(final Object other)", "class_method_signature": "PatternInspector.subsumes(final Object other)", "testcase": false, "constructor": false}, {"identifier": "hasConflicts", "parameters": "()", "modifiers": "@Override public", "return": "Conflict", "signature": "Conflict hasConflicts()", "full_signature": "@Override public Conflict hasConflicts()", "class_method_signature": "PatternInspector.hasConflicts()", "testcase": false, "constructor": false}, {"identifier": "getActionsInspector", "parameters": "()", "modifiers": "public", "return": "ActionsInspectorMultiMap", "signature": "ActionsInspectorMultiMap getActionsInspector()", "full_signature": "public ActionsInspectorMultiMap getActionsInspector()", "class_method_signature": "PatternInspector.getActionsInspector()", "testcase": false, "constructor": false}, {"identifier": "getConditionsInspector", "parameters": "()", "modifiers": "public", "return": "ConditionsInspectorMultiMap", "signature": "ConditionsInspectorMultiMap getConditionsInspector()", "full_signature": "public ConditionsInspectorMultiMap getConditionsInspector()", "class_method_signature": "PatternInspector.getConditionsInspector()", "testcase": false, "constructor": false}, {"identifier": "toHumanReadableString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toHumanReadableString()", "full_signature": "@Override public String toHumanReadableString()", "class_method_signature": "PatternInspector.toHumanReadableString()", "testcase": false, "constructor": false}, {"identifier": "getUuidKey", "parameters": "()", "modifiers": "@Override public", "return": "UUIDKey", "signature": "UUIDKey getUuidKey()", "full_signature": "@Override public UUIDKey getUuidKey()", "class_method_signature": "PatternInspector.getUuidKey()", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "@Override public", "return": "Key[]", "signature": "Key[] keys()", "full_signature": "@Override public Key[] keys()", "class_method_signature": "PatternInspector.keys()", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/PatternInspector.java"}, "focal_method": {"identifier": "isRedundant", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isRedundant(final Object other) {\n        if (other instanceof PatternInspector) {\n            if (pattern.getObjectType()\n                    .getType()\n                    .equals(((PatternInspector) other).getPattern()\n                                    .getObjectType()\n                                    .getType())) {\n                return inspectorList.isRedundant(((PatternInspector) other).inspectorList);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }", "signature": "boolean isRedundant(final Object other)", "full_signature": "@Override public boolean isRedundant(final Object other)", "class_method_signature": "PatternInspector.isRedundant(final Object other)", "testcase": false, "constructor": false, "invocations": ["equals", "getType", "getObjectType", "getType", "getObjectType", "getPattern", "isRedundant"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}