{"test_class": {"identifier": "StageAggregationTest", "superclass": "extends BaseOtterTest", "interfaces": "", "fields": [], "file": "node/etl/src/test/java/com/alibaba/otter/node/etl/common/jmx/StageAggregationTest.java"}, "test_case": {"identifier": "test_zero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_zero() {\n        StageAggregation aggregation = new StageAggregation(256);\n        String result = aggregation.histogram();\n        System.out.println(result);\n    }", "signature": "void test_zero()", "full_signature": "@Test public void test_zero()", "class_method_signature": "StageAggregationTest.test_zero()", "testcase": true, "constructor": false, "invocations": ["histogram", "println"]}, "focal_class": {"identifier": "StageAggregation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HISTOGRAM_FORMAT = \"{total:%s,count:%s,maximum:%s,minimum:%s,average:%s,tps:%s,tpm:%s}\";", "modifier": "private static final", "type": "String", "declarator": "HISTOGRAM_FORMAT = \"{total:%s,count:%s,maximum:%s,minimum:%s,average:%s,tps:%s,tpm:%s}\"", "var_name": "HISTOGRAM_FORMAT"}, {"original_string": "private static final Long   ONE_SECOND       = 1000L;", "modifier": "private static final", "type": "Long", "declarator": "ONE_SECOND       = 1000L", "var_name": "ONE_SECOND"}, {"original_string": "private static final Long   ONE_MINUTE       = 60 * 1000L;", "modifier": "private static final", "type": "Long", "declarator": "ONE_MINUTE       = 60 * 1000L", "var_name": "ONE_MINUTE"}, {"original_string": "private int                 bufferSize       = 1 * 1024;", "modifier": "private", "type": "int", "declarator": "bufferSize       = 1 * 1024", "var_name": "bufferSize"}, {"original_string": "private int                 indexMask;", "modifier": "private", "type": "int", "declarator": "indexMask", "var_name": "indexMask"}, {"original_string": "private AggregationItem[]   table;", "modifier": "private", "type": "AggregationItem[]", "declarator": "table", "var_name": "table"}, {"original_string": "private AtomicLong          sequence         = new AtomicLong(-1);", "modifier": "private", "type": "AtomicLong", "declarator": "sequence         = new AtomicLong(-1)", "var_name": "sequence"}], "methods": [{"identifier": "StageAggregation", "parameters": "(int bufferSize)", "modifiers": "public", "return": "", "signature": " StageAggregation(int bufferSize)", "full_signature": "public  StageAggregation(int bufferSize)", "class_method_signature": "StageAggregation.StageAggregation(int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "push", "parameters": "(AggregationItem aggregation)", "modifiers": "public", "return": "void", "signature": "void push(AggregationItem aggregation)", "full_signature": "public void push(AggregationItem aggregation)", "class_method_signature": "StageAggregation.push(AggregationItem aggregation)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long count()", "full_signature": "public Long count()", "class_method_signature": "StageAggregation.count()", "testcase": false, "constructor": false}, {"identifier": "histogram", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String histogram()", "full_signature": "public String histogram()", "class_method_signature": "StageAggregation.histogram()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "(long sequcnce)", "modifiers": "private", "return": "int", "signature": "int getIndex(long sequcnce)", "full_signature": "private int getIndex(long sequcnce)", "class_method_signature": "StageAggregation.getIndex(long sequcnce)", "testcase": false, "constructor": false}], "file": "node/etl/src/main/java/com/alibaba/otter/node/etl/common/jmx/StageAggregation.java"}, "focal_method": {"identifier": "histogram", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String histogram() {\n        Long costs = 0L;\n        Long items = 0L;\n        Long max = 0L;\n        Long min = Long.MAX_VALUE;\n        Long tps = 0L;\n        Long tpm = 0L;\n        Long avg = 0L;\n\n        Long lastTime = 0L;\n        Long tpsCount = 0L;// \u8bb0\u5f55\u6bcf\u79d2\u7684\u8bf7\u6c42\u6570\uff0c\u4e34\u65f6\u53d8\u91cf\n        Long tpsTotal = 0L;// \u603btps\u6570\u591a\u5c11\n        Long tpsSecond = 0L;// \u591a\u5c11\u79d2\u4e2d\u6709\u6570\u636e\n\n        Long tpmCount = 0L; // \u8bb0\u5f55\u6bcf\u5206\u949f\u7684\u8bf7\u6c42\u6570\uff0c\u4e34\u65f6\u53d8\u91cf\n        Long tpmTotal = 0L; // \u603btps\u6570\u591a\u5c11\n        Long tpmMinute = 0L;// \u591a\u5c11\u5206\u949f\u6709\u6570\u636e\n        for (int i = 0; i < table.length; i++) {\n            AggregationItem aggregation = table[i];\n            if (aggregation != null) {\n                Long cost = aggregation.getEndTime() - aggregation.getStartTime();\n                items += 1;\n                costs += cost;\n                if (cost > max) {\n                    max = cost;\n                }\n                if (cost < min) {\n                    min = cost;\n                }\n\n                if (lastTime != 0) {\n                    if (lastTime > aggregation.getEndTime() - ONE_SECOND) {// \u8bf4\u660e\u5728\u540c\u4e00\u79d2\n                        tpsCount++;\n                    } else {\n                        tpsTotal += tpsCount;\n                        tpsSecond++;\n                        tpsCount = 0L;\n                    }\n\n                    if (lastTime > aggregation.getEndTime() - ONE_MINUTE) {// \u8bf4\u660e\u5728\u540c\u4e00\u5206\u949f\n                        tpmCount++;\n                    } else {\n                        tpmTotal += tpmCount;\n                        tpmMinute++;\n                        tpmCount = 0L;\n                    }\n\n                }\n\n                lastTime = aggregation.getEndTime();\n            }\n        }\n        // \u8bbe\u7f6e\u4e00\u4e0b\u6700\u540e\u4e00\u6279tps/m\u7edf\u8ba1\u4fe1\u606f\n        tpsTotal += tpsCount;\n        tpsSecond++;\n        tpsCount = 0L;\n        tpmTotal += tpmCount;\n        tpmMinute++;\n        tpmCount = 0L;\n\n        if (items != 0) {\n            avg = costs / items;\n        }\n\n        if (tpsSecond != 0) {\n            tps = tpsTotal / tpsSecond;\n        }\n\n        if (tpmMinute != 0) {\n            tpm = tpmTotal / tpmMinute;\n        }\n\n        if (min == Long.MAX_VALUE) {\n            min = 0L;\n        }\n\n        return String.format(HISTOGRAM_FORMAT, new Object[] { sequence.get() + 1, items, max, min, avg, tps, tpm });\n    }", "signature": "String histogram()", "full_signature": "public String histogram()", "class_method_signature": "StageAggregation.histogram()", "testcase": false, "constructor": false, "invocations": ["getEndTime", "getStartTime", "getEndTime", "getEndTime", "getEndTime", "format", "get"]}, "repository": {"repo_id": 11997640, "url": "https://github.com/alibaba/otter", "language": "Java", "is_fork": false, "fork_count": 2159, "stargazer_count": 6015, "size": 12017, "license": "licensed"}}