{"test_class": {"identifier": "SigmaElectronegativityDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/SigmaElectronegativityDescriptorTest.java"}, "test_case": {"identifier": "testSigmaElectronegativityDescriptor_Isopentyl_iodide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSigmaElectronegativityDescriptor_Isopentyl_iodide() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        double testResult = 9.2264; /*\n                                     * from Petra online:\n                                     * http://www2.chemie.uni-\n                                     * erlangen.de/services/petra/smiles.phtml\n                                     */\n        IAtomicDescriptor descriptor = new SigmaElectronegativityDescriptor();\n\n        SmilesParser sp = new SmilesParser(builder);\n        IAtomContainer mol = sp.parseSmiles(\"C(C)(C)CCI\");\n        addExplicitHydrogens(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getAtom(5), mol).getValue()).doubleValue();\n        Assert.assertEquals(testResult, result, 0.08);\n    }", "signature": "void testSigmaElectronegativityDescriptor_Isopentyl_iodide()", "full_signature": "@Test public void testSigmaElectronegativityDescriptor_Isopentyl_iodide()", "class_method_signature": "SigmaElectronegativityDescriptorTest.testSigmaElectronegativityDescriptor_Isopentyl_iodide()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "addExplicitHydrogens", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "SigmaElectronegativityDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private int                   maxIterations   = 0;", "modifier": "private", "type": "int", "declarator": "maxIterations   = 0", "var_name": "maxIterations"}, {"original_string": "private static final String[] NAMES = {\"elecSigmA\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"elecSigmA\"}", "var_name": "NAMES"}, {"original_string": "private Electronegativity     electronegativity;", "modifier": "private", "type": "Electronegativity", "declarator": "electronegativity", "var_name": "electronegativity"}], "methods": [{"identifier": "SigmaElectronegativityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SigmaElectronegativityDescriptor()", "full_signature": "public  SigmaElectronegativityDescriptor()", "class_method_signature": "SigmaElectronegativityDescriptor.SigmaElectronegativityDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "SigmaElectronegativityDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "SigmaElectronegativityDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "SigmaElectronegativityDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "SigmaElectronegativityDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "SigmaElectronegativityDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "SigmaElectronegativityDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "SigmaElectronegativityDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/SigmaElectronegativityDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer ac) {\n\n        IAtomContainer clone;\n        IAtom localAtom;\n        try {\n            clone = (IAtomContainer) ac.clone();\n            localAtom = clone.getAtom(ac.indexOf(atom));\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone);\n        } catch (CDKException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, e);\n        } catch (CloneNotSupportedException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, e);\n        }\n\n        if (maxIterations != -1 && maxIterations != 0) electronegativity.setMaxIterations(maxIterations);\n\n        double result = electronegativity.calculateSigmaElectronegativity(clone, localAtom);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(result),\n                                   NAMES);\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "SigmaElectronegativityDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["clone", "getAtom", "indexOf", "percieveAtomTypesAndConfigureAtoms", "getSpecification", "getParameterNames", "getParameters", "getSpecification", "getParameterNames", "getParameters", "setMaxIterations", "calculateSigmaElectronegativity", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}