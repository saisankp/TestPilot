{"test_class": {"identifier": "FlowableFlatMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java"}, "test_case": {"identifier": "testFlatMapTransformsMaxConcurrentNormal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMapTransformsMaxConcurrentNormal() {\n        final int m = 2;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> onNext =\n                composer(\n                        Flowable.fromIterable(Arrays.asList(1, 2, 3))\n                        .observeOn(Schedulers.computation())\n                        ,\n                subscriptionCount, m)\n                .subscribeOn(Schedulers.computation())\n                ;\n\n        Flowable<Integer> onComplete = composer(Flowable.fromIterable(Arrays.asList(4)), subscriptionCount, m)\n                .subscribeOn(Schedulers.computation());\n\n        Flowable<Integer> onError = Flowable.fromIterable(Arrays.asList(5));\n\n        Flowable<Integer> source = Flowable.fromIterable(Arrays.asList(10, 20, 30));\n\n        Subscriber<Object> o = TestHelper.mockSubscriber();\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(o);\n\n        Function<Integer, Flowable<Integer>> just = just(onNext);\n        Function<Throwable, Flowable<Integer>> just2 = just(onError);\n        Callable<Flowable<Integer>> just0 = just0(onComplete);\n        source.flatMap(just, just2, just0, m).subscribe(ts);\n\n        ts.awaitTerminalEvent(1, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertTerminated();\n\n        verify(o, times(3)).onNext(1);\n        verify(o, times(3)).onNext(2);\n        verify(o, times(3)).onNext(3);\n        verify(o).onNext(4);\n        verify(o).onComplete();\n\n        verify(o, never()).onNext(5);\n        verify(o, never()).onError(any(Throwable.class));\n    }", "signature": "void testFlatMapTransformsMaxConcurrentNormal()", "full_signature": "@Test public void testFlatMapTransformsMaxConcurrentNormal()", "class_method_signature": "FlowableFlatMapTest.testFlatMapTransformsMaxConcurrentNormal()", "testcase": true, "constructor": false, "invocations": ["subscribeOn", "composer", "observeOn", "fromIterable", "asList", "computation", "computation", "subscribeOn", "composer", "fromIterable", "asList", "computation", "fromIterable", "asList", "fromIterable", "asList", "mockSubscriber", "just", "just", "just0", "subscribe", "flatMap", "awaitTerminalEvent", "assertNoErrors", "assertTerminated", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "onComplete", "verify", "onNext", "verify", "never", "onError", "verify", "never", "any"]}, "focal_class": {"identifier": "FlowableFlatMap", "superclass": "extends AbstractFlowableWithUpstream<T, U>", "interfaces": "", "fields": [{"original_string": "final Function<? super T, ? extends Publisher<? extends U>> mapper;", "modifier": "final", "type": "Function<? super T, ? extends Publisher<? extends U>>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "final boolean delayErrors;", "modifier": "final", "type": "boolean", "declarator": "delayErrors", "var_name": "delayErrors"}, {"original_string": "final int maxConcurrency;", "modifier": "final", "type": "int", "declarator": "maxConcurrency", "var_name": "maxConcurrency"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}], "methods": [{"identifier": "FlowableFlatMap", "parameters": "(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public", "return": "", "signature": " FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public  FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super U> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super U> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super U> s)", "class_method_signature": "FlowableFlatMap.subscribeActual(Subscriber<? super U> s)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "body": "public static <T, U> FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize) {\n        return new MergeSubscriber<T, U>(s, mapper, delayErrors, maxConcurrency, bufferSize);\n    }", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}