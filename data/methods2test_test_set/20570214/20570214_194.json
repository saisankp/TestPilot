{"test_class": {"identifier": "PublicKeySignFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/signature/PublicKeySignFactoryTest.java"}, "test_case": {"identifier": "testMultipleKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleKeys() throws Exception {\n    EcdsaPrivateKey tinkPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P521, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key tink =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                tinkPrivateKey,\n                new EcdsaSignKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            1,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.TINK);\n\n    EcdsaPrivateKey legacyPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P256, HashType.SHA256, EcdsaSignatureEncoding.DER);\n    Key legacy =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                legacyPrivateKey,\n                new EcdsaSignKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            2,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.LEGACY);\n\n    EcdsaPrivateKey rawPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P384, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key raw =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                rawPrivateKey,\n                new EcdsaSignKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            3,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n\n    EcdsaPrivateKey crunchyPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P384, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key crunchy =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                crunchyPrivateKey,\n                new EcdsaSignKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            4,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.CRUNCHY);\n\n    Key[] keys = new Key[] {tink, legacy, raw, crunchy};\n    EcdsaPrivateKey[] privateKeys =\n        new EcdsaPrivateKey[] {tinkPrivateKey, legacyPrivateKey, rawPrivateKey, crunchyPrivateKey};\n\n    int j = keys.length;\n    for (int i = 0; i < j; i++) {\n      KeysetHandle keysetHandle =\n          TestUtil.createKeysetHandle(\n              TestUtil.createKeyset(\n                  keys[i], keys[(i + 1) % j], keys[(i + 2) % j], keys[(i + 3) % j]));\n      // Signs with the primary private key.\n      PublicKeySign signer = PublicKeySignFactory.getPrimitive(keysetHandle);\n      byte[] plaintext = Random.randBytes(1211);\n      byte[] sig = signer.sign(plaintext);\n      if (keys[i].getOutputPrefixType() != OutputPrefixType.RAW) {\n        byte[] prefix = Arrays.copyOfRange(sig, 0, CryptoFormat.NON_RAW_PREFIX_SIZE);\n        assertArrayEquals(prefix, CryptoFormat.getOutputPrefix(keys[i]));\n      }\n\n      // Verifying with the primary public key should work.\n      PublicKeyVerify verifier =\n          PublicKeyVerifyFactory.getPrimitive(\n              TestUtil.createKeysetHandle(\n                  TestUtil.createKeyset(\n                      TestUtil.createKey(\n                          TestUtil.createKeyData(\n                              privateKeys[i].getPublicKey(),\n                              new EcdsaVerifyKeyManager().getKeyType(),\n                              KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n                          keys[i].getKeyId(),\n                          KeyStatusType.ENABLED,\n                          keys[i].getOutputPrefixType()))));\n      try {\n        verifier.verify(sig, plaintext);\n      } catch (GeneralSecurityException ex) {\n        fail(\"Valid signature, should not throw exception\");\n      }\n\n      // Verifying with a random public key should fail.\n      EcdsaPrivateKey randomPrivKey =\n          TestUtil.generateEcdsaPrivKey(\n              EllipticCurveType.NIST_P521, HashType.SHA512, EcdsaSignatureEncoding.DER);\n      verifier =\n          PublicKeyVerifyFactory.getPrimitive(\n              TestUtil.createKeysetHandle(\n                  TestUtil.createKeyset(\n                      TestUtil.createKey(\n                          TestUtil.createKeyData(\n                              randomPrivKey.getPublicKey(),\n                              new EcdsaVerifyKeyManager().getKeyType(),\n                              KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n                          keys[i].getKeyId(),\n                          KeyStatusType.ENABLED,\n                          keys[i].getOutputPrefixType()))));\n      try {\n        verifier.verify(sig, plaintext);\n        fail(\"Invalid signature, should have thrown exception\");\n      } catch (GeneralSecurityException expected) {\n        // Expected\n      }\n    }\n  }", "signature": "void testMultipleKeys()", "full_signature": "@Test public void testMultipleKeys()", "class_method_signature": "PublicKeySignFactoryTest.testMultipleKeys()", "testcase": true, "constructor": false, "invocations": ["generateEcdsaPrivKey", "createKey", "createKeyData", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getKeyType", "createKeysetHandle", "createKeyset", "getPrimitive", "randBytes", "sign", "getOutputPrefixType", "copyOfRange", "assertArrayEquals", "getOutputPrefix", "getPrimitive", "createKeysetHandle", "createKeyset", "createKey", "createKeyData", "getPublicKey", "getKeyType", "getKeyId", "getOutputPrefixType", "verify", "fail", "generateEcdsaPrivKey", "getPrimitive", "createKeysetHandle", "createKeyset", "createKey", "createKeyData", "getPublicKey", "getKeyType", "getKeyId", "getOutputPrefixType", "verify", "fail"]}, "focal_class": {"identifier": "PublicKeySignFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "PublicKeySign", "signature": "PublicKeySign getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static PublicKeySign getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "PublicKeySignFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(\n      KeysetHandle keysetHandle, final KeyManager<PublicKeySign> keyManager)", "modifiers": "@Deprecated public static", "return": "PublicKeySign", "signature": "PublicKeySign getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<PublicKeySign> keyManager)", "full_signature": "@Deprecated public static PublicKeySign getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<PublicKeySign> keyManager)", "class_method_signature": "PublicKeySignFactory.getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<PublicKeySign> keyManager)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/signature/PublicKeySignFactory.java"}, "focal_method": {"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "PublicKeySign", "body": "@Deprecated\n  public static PublicKeySign getPrimitive(KeysetHandle keysetHandle)\n      throws GeneralSecurityException {\n    return getPrimitive(keysetHandle, /* keyManager= */ null);\n  }", "signature": "PublicKeySign getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static PublicKeySign getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "PublicKeySignFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false, "invocations": ["getPrimitive"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}