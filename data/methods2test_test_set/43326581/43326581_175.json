{"test_class": {"identifier": "CombinedCLIParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_XML_FILENAME = \"CombinedCLITest.xml\";", "modifier": "private static final", "type": "String", "declarator": "TEST_XML_FILENAME = \"CombinedCLITest.xml\"", "var_name": "TEST_XML_FILENAME"}, {"original_string": "@Mock\n    private AttachmentConnector connector;", "modifier": "@Mock\n    private", "type": "AttachmentConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private CombinedCLIParser parser;", "modifier": "private", "type": "CombinedCLIParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private AttachmentContent content;", "modifier": "private", "type": "AttachmentContent", "declarator": "content", "var_name": "content"}, {"original_string": "private Attachment attachment;", "modifier": "private", "type": "Attachment", "declarator": "attachment", "var_name": "attachment"}, {"original_string": "@Mock\n    private ComponentDatabaseHandler componentDatabaseHandler;", "modifier": "@Mock\n    private", "type": "ComponentDatabaseHandler", "declarator": "componentDatabaseHandler", "var_name": "componentDatabaseHandler"}, {"original_string": "private String cliTestfile;", "modifier": "private", "type": "String", "declarator": "cliTestfile", "var_name": "cliTestfile"}], "file": "backend/src/src-licenseinfo/src/test/java/org/eclipse/sw360/licenseinfo/parsers/CombinedCLIParserTest.java"}, "test_case": {"identifier": "testIsApplicableToFailsOnIncorrectRootElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsApplicableToFailsOnIncorrectRootElement() throws Exception {\n        AttachmentContent content = new AttachmentContent().setId(\"A1\").setFilename(\"a.xml\").setContentType(\"application/xml\");\n        when(connector.getAttachmentStream(content, new User(), new Project())).thenReturn(new ReaderInputStream(new StringReader(\"<wrong-root/>\")));\n        assertFalse(parser.isApplicableTo(attachment, new User(), new Project()));\n    }", "signature": "void testIsApplicableToFailsOnIncorrectRootElement()", "full_signature": "@Test public void testIsApplicableToFailsOnIncorrectRootElement()", "class_method_signature": "CombinedCLIParserTest.testIsApplicableToFailsOnIncorrectRootElement()", "testcase": true, "constructor": false, "invocations": ["setContentType", "setFilename", "setId", "thenReturn", "when", "getAttachmentStream", "assertFalse", "isApplicableTo"]}, "focal_class": {"identifier": "CombinedCLIParser", "superclass": "extends AbstractCLIParser", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CombinedCLIParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CombinedCLIParser.class)", "var_name": "log"}, {"original_string": "private static final String COPYRIGHTS_XPATH = \"/CombinedCLI/Copyright\";", "modifier": "private static final", "type": "String", "declarator": "COPYRIGHTS_XPATH = \"/CombinedCLI/Copyright\"", "var_name": "COPYRIGHTS_XPATH"}, {"original_string": "private static final String LICENSES_XPATH = \"/CombinedCLI/License\";", "modifier": "private static final", "type": "String", "declarator": "LICENSES_XPATH = \"/CombinedCLI/License\"", "var_name": "LICENSES_XPATH"}, {"original_string": "private static final String COPYRIGHT_CONTENT_ELEMENT_NAME = \"Content\";", "modifier": "private static final", "type": "String", "declarator": "COPYRIGHT_CONTENT_ELEMENT_NAME = \"Content\"", "var_name": "COPYRIGHT_CONTENT_ELEMENT_NAME"}, {"original_string": "private static final String EXTERNAL_ID_ATTRIBUTE_NAME = \"srcComponent\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_ID_ATTRIBUTE_NAME = \"srcComponent\"", "var_name": "EXTERNAL_ID_ATTRIBUTE_NAME"}, {"original_string": "private static final String COMBINED_CLI_ROOT_ELEMENT_NAME = \"CombinedCLI\";", "modifier": "private static final", "type": "String", "declarator": "COMBINED_CLI_ROOT_ELEMENT_NAME = \"CombinedCLI\"", "var_name": "COMBINED_CLI_ROOT_ELEMENT_NAME"}, {"original_string": "private static final String COMBINED_CLI_ROOT_ELEMENT_NAMESPACE = null;", "modifier": "private static final", "type": "String", "declarator": "COMBINED_CLI_ROOT_ELEMENT_NAMESPACE = null", "var_name": "COMBINED_CLI_ROOT_ELEMENT_NAMESPACE"}, {"original_string": "private static final String PROPERTIES_FILE_PATH = \"/sw360.properties\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTIES_FILE_PATH = \"/sw360.properties\"", "var_name": "PROPERTIES_FILE_PATH"}, {"original_string": "public static final String EXTERNAL_ID_CORRELATION_KEY = \"combined.cli.parser.external.id.correlation.key\";", "modifier": "public static final", "type": "String", "declarator": "EXTERNAL_ID_CORRELATION_KEY = \"combined.cli.parser.external.id.correlation.key\"", "var_name": "EXTERNAL_ID_CORRELATION_KEY"}, {"original_string": "private ComponentDatabaseHandler componentDatabaseHandler;", "modifier": "private", "type": "ComponentDatabaseHandler", "declarator": "componentDatabaseHandler", "var_name": "componentDatabaseHandler"}], "methods": [{"identifier": "CombinedCLIParser", "parameters": "(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider, ComponentDatabaseHandler componentDatabaseHandler)", "modifiers": "public", "return": "", "signature": " CombinedCLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider, ComponentDatabaseHandler componentDatabaseHandler)", "full_signature": "public  CombinedCLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider, ComponentDatabaseHandler componentDatabaseHandler)", "class_method_signature": "CombinedCLIParser.CombinedCLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider, ComponentDatabaseHandler componentDatabaseHandler)", "testcase": false, "constructor": true}, {"identifier": "getCorrelationKey", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCorrelationKey()", "full_signature": " String getCorrelationKey()", "class_method_signature": "CombinedCLIParser.getCorrelationKey()", "testcase": false, "constructor": false}, {"identifier": "isApplicableTo", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicableTo(Attachment attachment, User user, T context)", "full_signature": "@Override public boolean isApplicableTo(Attachment attachment, User user, T context)", "class_method_signature": "CombinedCLIParser.isApplicableTo(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "hasCombinedCLIRootElement", "parameters": "(AttachmentContent content, User user, T context)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCombinedCLIRootElement(AttachmentContent content, User user, T context)", "full_signature": "private boolean hasCombinedCLIRootElement(AttachmentContent content, User user, T context)", "class_method_signature": "CombinedCLIParser.hasCombinedCLIRootElement(AttachmentContent content, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfos", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "full_signature": "@Override public List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "class_method_signature": "CombinedCLIParser.getLicenseInfos(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseNamesWithTextsByExternalIdsMap", "parameters": "(Document doc)", "modifiers": "private", "return": "Map<String, Set<LicenseNameWithText>>", "signature": "Map<String, Set<LicenseNameWithText>> getLicenseNamesWithTextsByExternalIdsMap(Document doc)", "full_signature": "private Map<String, Set<LicenseNameWithText>> getLicenseNamesWithTextsByExternalIdsMap(Document doc)", "class_method_signature": "CombinedCLIParser.getLicenseNamesWithTextsByExternalIdsMap(Document doc)", "testcase": false, "constructor": false}, {"identifier": "getCopyrightSetsByExternalIdsMap", "parameters": "(Document doc)", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getCopyrightSetsByExternalIdsMap(Document doc)", "full_signature": "private Map<String, Set<String>> getCopyrightSetsByExternalIdsMap(Document doc)", "class_method_signature": "CombinedCLIParser.getCopyrightSetsByExternalIdsMap(Document doc)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfoParsingResultForExternalId", "parameters": "(AttachmentContent attachmentContent, Map<String, Release> releasesByExternalId, Map<String, Set<String>> copyrightSetsByExternalId, Map<String, Set<LicenseNameWithText>> licenseNamesWithTextsByExternalId, String extId)", "modifiers": "@NotNull private", "return": "LicenseInfoParsingResult", "signature": "LicenseInfoParsingResult getLicenseInfoParsingResultForExternalId(AttachmentContent attachmentContent, Map<String, Release> releasesByExternalId, Map<String, Set<String>> copyrightSetsByExternalId, Map<String, Set<LicenseNameWithText>> licenseNamesWithTextsByExternalId, String extId)", "full_signature": "@NotNull private LicenseInfoParsingResult getLicenseInfoParsingResultForExternalId(AttachmentContent attachmentContent, Map<String, Release> releasesByExternalId, Map<String, Set<String>> copyrightSetsByExternalId, Map<String, Set<LicenseNameWithText>> licenseNamesWithTextsByExternalId, String extId)", "class_method_signature": "CombinedCLIParser.getLicenseInfoParsingResultForExternalId(AttachmentContent attachmentContent, Map<String, Release> releasesByExternalId, Map<String, Set<String>> copyrightSetsByExternalId, Map<String, Set<LicenseNameWithText>> licenseNamesWithTextsByExternalId, String extId)", "testcase": false, "constructor": false}, {"identifier": "prepareReleasesByExternalId", "parameters": "(String correlationKey)", "modifiers": "private", "return": "Map<String, Release>", "signature": "Map<String, Release> prepareReleasesByExternalId(String correlationKey)", "full_signature": "private Map<String, Release> prepareReleasesByExternalId(String correlationKey)", "class_method_signature": "CombinedCLIParser.prepareReleasesByExternalId(String correlationKey)", "testcase": false, "constructor": false}, {"identifier": "nodeListToStringSetsByExternalId", "parameters": "(NodeList nodes, String externalIdAttributeName, String contentElementName)", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> nodeListToStringSetsByExternalId(NodeList nodes, String externalIdAttributeName, String contentElementName)", "full_signature": "private Map<String, Set<String>> nodeListToStringSetsByExternalId(NodeList nodes, String externalIdAttributeName, String contentElementName)", "class_method_signature": "CombinedCLIParser.nodeListToStringSetsByExternalId(NodeList nodes, String externalIdAttributeName, String contentElementName)", "testcase": false, "constructor": false}, {"identifier": "nodeListToLicenseNamesWithTextsSetsByExternalId", "parameters": "(NodeList nodes, String externalIdAttributeName)", "modifiers": "private", "return": "Map<String, Set<LicenseNameWithText>>", "signature": "Map<String, Set<LicenseNameWithText>> nodeListToLicenseNamesWithTextsSetsByExternalId(NodeList nodes, String externalIdAttributeName)", "full_signature": "private Map<String, Set<LicenseNameWithText>> nodeListToLicenseNamesWithTextsSetsByExternalId(NodeList nodes, String externalIdAttributeName)", "class_method_signature": "CombinedCLIParser.nodeListToLicenseNamesWithTextsSetsByExternalId(NodeList nodes, String externalIdAttributeName)", "testcase": false, "constructor": false}], "file": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/parsers/CombinedCLIParser.java"}, "focal_method": {"identifier": "isApplicableTo", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public <T> boolean isApplicableTo(Attachment attachment, User user, T context) throws TException {\n        AttachmentContent attachmentContent = attachmentContentProvider.getAttachmentContent(attachment);\n        return attachmentContent.getFilename().endsWith(XML_FILE_EXTENSION) && hasCombinedCLIRootElement(attachmentContent, user, context);\n    }", "signature": "boolean isApplicableTo(Attachment attachment, User user, T context)", "full_signature": "@Override public boolean isApplicableTo(Attachment attachment, User user, T context)", "class_method_signature": "CombinedCLIParser.isApplicableTo(Attachment attachment, User user, T context)", "testcase": false, "constructor": false, "invocations": ["getAttachmentContent", "endsWith", "getFilename", "hasCombinedCLIRootElement"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}