{"test_class": {"identifier": "BondRefinableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "public static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/group/src/test/java/org/openscience/cdk/group/BondRefinableTest.java"}, "test_case": {"identifier": "getConnectivity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getConnectivity() {\n        String acpString = \"C0C1C2C3 0:1(1),0:3(1),1:2(1),2:3(1)\";\n        BondRefinable bondRefinable = refinable(acpString);\n        assertEquals(1, bondRefinable.getConnectivity(0, 1));\n        assertEquals(1, bondRefinable.getConnectivity(0, 2));\n        assertEquals(1, bondRefinable.getConnectivity(1, 3));\n        assertEquals(1, bondRefinable.getConnectivity(2, 3));\n    }", "signature": "void getConnectivity()", "full_signature": "@Test public void getConnectivity()", "class_method_signature": "BondRefinableTest.getConnectivity()", "testcase": true, "constructor": false, "invocations": ["refinable", "assertEquals", "getConnectivity", "assertEquals", "getConnectivity", "assertEquals", "getConnectivity", "assertEquals", "getConnectivity"]}, "focal_class": {"identifier": "BondRefinable", "superclass": "", "interfaces": "implements Refinable", "fields": [{"original_string": "private final IAtomContainer atomContainer;", "modifier": "private final", "type": "IAtomContainer", "declarator": "atomContainer", "var_name": "atomContainer"}, {"original_string": "private int[][] connectionTable;", "modifier": "private", "type": "int[][]", "declarator": "connectionTable", "var_name": "connectionTable"}, {"original_string": "private boolean ignoreBondOrders;", "modifier": "private", "type": "boolean", "declarator": "ignoreBondOrders", "var_name": "ignoreBondOrders"}], "methods": [{"identifier": "BondRefinable", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "", "signature": " BondRefinable(IAtomContainer atomContainer)", "full_signature": "public  BondRefinable(IAtomContainer atomContainer)", "class_method_signature": "BondRefinable.BondRefinable(IAtomContainer atomContainer)", "testcase": false, "constructor": true}, {"identifier": "BondRefinable", "parameters": "(IAtomContainer atomContainer, boolean ignoreBondOrders)", "modifiers": "public", "return": "", "signature": " BondRefinable(IAtomContainer atomContainer, boolean ignoreBondOrders)", "full_signature": "public  BondRefinable(IAtomContainer atomContainer, boolean ignoreBondOrders)", "class_method_signature": "BondRefinable.BondRefinable(IAtomContainer atomContainer, boolean ignoreBondOrders)", "testcase": false, "constructor": true}, {"identifier": "getVertexCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVertexCount()", "full_signature": "@Override public int getVertexCount()", "class_method_signature": "BondRefinable.getVertexCount()", "testcase": false, "constructor": false}, {"identifier": "getConnectivity", "parameters": "(int vertexI, int vertexJ)", "modifiers": "@Override public", "return": "int", "signature": "int getConnectivity(int vertexI, int vertexJ)", "full_signature": "@Override public int getConnectivity(int vertexI, int vertexJ)", "class_method_signature": "BondRefinable.getConnectivity(int vertexI, int vertexJ)", "testcase": false, "constructor": false}, {"identifier": "neighboursInBlock", "parameters": "(Set<Integer> block, int vertexIndex)", "modifiers": "@Override public", "return": "Invariant", "signature": "Invariant neighboursInBlock(Set<Integer> block, int vertexIndex)", "full_signature": "@Override public Invariant neighboursInBlock(Set<Integer> block, int vertexIndex)", "class_method_signature": "BondRefinable.neighboursInBlock(Set<Integer> block, int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "getConnectedIndices", "parameters": "(int vertexIndex)", "modifiers": "private", "return": "int[]", "signature": "int[] getConnectedIndices(int vertexIndex)", "full_signature": "private int[] getConnectedIndices(int vertexIndex)", "class_method_signature": "BondRefinable.getConnectedIndices(int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "getInitialPartition", "parameters": "()", "modifiers": "public", "return": "Partition", "signature": "Partition getInitialPartition()", "full_signature": "public Partition getInitialPartition()", "class_method_signature": "BondRefinable.getInitialPartition()", "testcase": false, "constructor": false}, {"identifier": "setupConnectionTable", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "void", "signature": "void setupConnectionTable(IAtomContainer atomContainer)", "full_signature": "private void setupConnectionTable(IAtomContainer atomContainer)", "class_method_signature": "BondRefinable.setupConnectionTable(IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "tool/group/src/main/java/org/openscience/cdk/group/BondRefinable.java"}, "focal_method": {"identifier": "getConnectivity", "parameters": "(int vertexI, int vertexJ)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getConnectivity(int vertexI, int vertexJ) {\n        int indexInRow;\n        int maxRowIndex = connectionTable[vertexI].length;\n        for (indexInRow = 0; indexInRow < maxRowIndex; indexInRow++) {\n            if (connectionTable[vertexI][indexInRow] == vertexJ) {\n                return 1;\n            }\n        }\n        return 0;\n    }", "signature": "int getConnectivity(int vertexI, int vertexJ)", "full_signature": "@Override public int getConnectivity(int vertexI, int vertexJ)", "class_method_signature": "BondRefinable.getConnectivity(int vertexI, int vertexJ)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}