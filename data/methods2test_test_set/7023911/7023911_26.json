{"test_class": {"identifier": "C32DocumentLogicTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected C32DocumentLogic docLogic;", "modifier": "protected", "type": "C32DocumentLogic", "declarator": "docLogic", "var_name": "docLogic"}, {"original_string": "protected DateTimeFormatter dateFormat = DateTimeFormat.forPattern(\"yyyyMMdd\");", "modifier": "protected", "type": "DateTimeFormatter", "declarator": "dateFormat = DateTimeFormat.forPattern(\"yyyyMMdd\")", "var_name": "dateFormat"}, {"original_string": "protected DateTimeFormatter dateTimeFormat = DateTimeFormat.forPattern(\"yyyyMMddHHmmss\");", "modifier": "protected", "type": "DateTimeFormatter", "declarator": "dateTimeFormat = DateTimeFormat.forPattern(\"yyyyMMddHHmmss\")", "var_name": "dateTimeFormat"}], "file": "das/das_wrap_nwhin/src/test/java/org/osehra/das/wrapper/nwhin/C32DocumentLogicTest.java"}, "test_case": {"identifier": "createDocument_noFiltering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createDocument_noFiltering() throws Exception {\n\t\tString aDoc = getFileAsString(\"/VA_C32_NWHINONE.xml\");\n\t\tBuilder builder = new Builder();\n\t\tDocument doc = builder.build(new StringReader(aDoc));\n\t\tString expectedDoc = doc.toXML();\n\t\tC32DocumentEntity c32 = docLogic.createDocument(\"1012638924V546709\", aDoc);\n\t\tboolean matched = expectedDoc.equals(c32.getDocument());\n\t\tif (!matched) {\n\t\t\tFileWriter fileWriter = new FileWriter(\"errorOutput.txt\");\n\t\t\tPrintWriter printWriter = new PrintWriter(fileWriter);\n\t\t\tprintWriter.println(\"===============\");\n\t\t\tprintWriter.println(expectedDoc);\n\t\t\tprintWriter.println(\"===============\");\n\t\t\tprintWriter.println(c32.getDocument());\n\t\t\tprintWriter.close();\n\t\t}\n\t\tAssert.assertTrue(matched);\n\t}", "signature": "void createDocument_noFiltering()", "full_signature": "@Test public void createDocument_noFiltering()", "class_method_signature": "C32DocumentLogicTest.createDocument_noFiltering()", "testcase": true, "constructor": false, "invocations": ["getFileAsString", "build", "toXML", "createDocument", "equals", "getDocument", "println", "println", "println", "println", "getDocument", "close", "assertTrue"]}, "focal_class": {"identifier": "C32DocumentLogic", "superclass": "", "interfaces": "implements C32DocumentEntityFactory, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Log LOG = LogFactory.getLog(C32DocumentLogic.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(C32DocumentLogic.class)", "var_name": "LOG"}, {"original_string": "protected DateTimeFormatter jodaDateFormat = DateTimeFormat.forPattern(\"yyyyMMdd\");", "modifier": "protected", "type": "DateTimeFormatter", "declarator": "jodaDateFormat = DateTimeFormat.forPattern(\"yyyyMMdd\")", "var_name": "jodaDateFormat"}], "methods": [{"identifier": "getJodaDateFormat", "parameters": "()", "modifiers": "public", "return": "DateTimeFormatter", "signature": "DateTimeFormatter getJodaDateFormat()", "full_signature": "public DateTimeFormatter getJodaDateFormat()", "class_method_signature": "C32DocumentLogic.getJodaDateFormat()", "testcase": false, "constructor": false}, {"identifier": "setJodaDateFormat", "parameters": "(DateTimeFormatter jodaDateFormat)", "modifiers": "public", "return": "void", "signature": "void setJodaDateFormat(DateTimeFormatter jodaDateFormat)", "full_signature": "public void setJodaDateFormat(DateTimeFormatter jodaDateFormat)", "class_method_signature": "C32DocumentLogic.setJodaDateFormat(DateTimeFormatter jodaDateFormat)", "testcase": false, "constructor": false}, {"identifier": "createDocument", "parameters": "(String patientId, String doc)", "modifiers": "public", "return": "C32DocumentEntity", "signature": "C32DocumentEntity createDocument(String patientId, String doc)", "full_signature": "public C32DocumentEntity createDocument(String patientId, String doc)", "class_method_signature": "C32DocumentLogic.createDocument(String patientId, String doc)", "testcase": false, "constructor": false}, {"identifier": "getFilteredDocument", "parameters": "(Document xmlDoc)", "modifiers": "protected", "return": "String", "signature": "String getFilteredDocument(Document xmlDoc)", "full_signature": "protected String getFilteredDocument(Document xmlDoc)", "class_method_signature": "C32DocumentLogic.getFilteredDocument(Document xmlDoc)", "testcase": false, "constructor": false}, {"identifier": "filterProblemList", "parameters": "(Document xmlDoc)", "modifiers": "protected", "return": "void", "signature": "void filterProblemList(Document xmlDoc)", "full_signature": "protected void filterProblemList(Document xmlDoc)", "class_method_signature": "C32DocumentLogic.filterProblemList(Document xmlDoc)", "testcase": false, "constructor": false}, {"identifier": "maybeDebugLocalName", "parameters": "(boolean debugging, Elements elements, int index)", "modifiers": "protected", "return": "void", "signature": "void maybeDebugLocalName(boolean debugging, Elements elements, int index)", "full_signature": "protected void maybeDebugLocalName(boolean debugging, Elements elements, int index)", "class_method_signature": "C32DocumentLogic.maybeDebugLocalName(boolean debugging, Elements elements, int index)", "testcase": false, "constructor": false}, {"identifier": "filterLabs", "parameters": "(Document xmlDoc)", "modifiers": "protected", "return": "void", "signature": "void filterLabs(Document xmlDoc)", "full_signature": "protected void filterLabs(Document xmlDoc)", "class_method_signature": "C32DocumentLogic.filterLabs(Document xmlDoc)", "testcase": false, "constructor": false}, {"identifier": "getPatientId", "parameters": "(Document xmlDoc)", "modifiers": "protected", "return": "String", "signature": "String getPatientId(Document xmlDoc)", "full_signature": "protected String getPatientId(Document xmlDoc)", "class_method_signature": "C32DocumentLogic.getPatientId(Document xmlDoc)", "testcase": false, "constructor": false}], "file": "das/das_wrap_nwhin/src/main/java/org/osehra/das/wrapper/nwhin/C32DocumentLogic.java"}, "focal_method": {"identifier": "createDocument", "parameters": "(String patientId, String doc)", "modifiers": "public", "return": "C32DocumentEntity", "body": "public C32DocumentEntity createDocument(String patientId, String doc) throws Exception {\n\t\tDocument xmlDoc = null;\n\t\tif (doc!=null) {\n\t\t\tdoc = doc.trim();\n\t\t\tif (!\"\".equals(doc)) {\n\t\t\t\tBuilder builder = new Builder();\n\t\t\t\txmlDoc = builder.build(new StringReader(doc));\n\t\t\t}\n\t\t}\n\n\t\treturn new C32DocumentEntity(patientId, getPatientId(xmlDoc), new java.sql.Timestamp(new java.util.Date().getTime()), getFilteredDocument(xmlDoc));\n\t}", "signature": "C32DocumentEntity createDocument(String patientId, String doc)", "full_signature": "public C32DocumentEntity createDocument(String patientId, String doc)", "class_method_signature": "C32DocumentLogic.createDocument(String patientId, String doc)", "testcase": false, "constructor": false, "invocations": ["trim", "equals", "build", "getPatientId", "getTime", "getFilteredDocument"]}, "repository": {"repo_id": 7023911, "url": "https://github.com/WorldVistA/Blue-Button-Document-Adapter", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2081, "license": "licensed"}}