{"test_class": {"identifier": "CharacterReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jsoup/parser/CharacterReaderTest.java"}, "test_case": {"identifier": "advance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void advance() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertEquals('O', r.consume());\n        r.advance();\n        assertEquals('e', r.consume());\n    }", "signature": "void advance()", "full_signature": "@Test public void advance()", "class_method_signature": "CharacterReaderTest.advance()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "consume", "advance", "assertEquals", "consume"]}, "focal_class": {"identifier": "CharacterReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final char EOF = (char) -1;", "modifier": "static final", "type": "char", "declarator": "EOF = (char) -1", "var_name": "EOF"}, {"original_string": "private final char[] input;", "modifier": "private final", "type": "char[]", "declarator": "input", "var_name": "input"}, {"original_string": "private final int length;", "modifier": "private final", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private int pos = 0;", "modifier": "private", "type": "int", "declarator": "pos = 0", "var_name": "pos"}, {"original_string": "private int mark = 0;", "modifier": "private", "type": "int", "declarator": "mark = 0", "var_name": "mark"}], "methods": [{"identifier": "CharacterReader", "parameters": "(String input)", "modifiers": "", "return": "", "signature": " CharacterReader(String input)", "full_signature": "  CharacterReader(String input)", "class_method_signature": "CharacterReader.CharacterReader(String input)", "testcase": false, "constructor": true}, {"identifier": "pos", "parameters": "()", "modifiers": "", "return": "int", "signature": "int pos()", "full_signature": " int pos()", "class_method_signature": "CharacterReader.pos()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "CharacterReader.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "current", "parameters": "()", "modifiers": "", "return": "char", "signature": "char current()", "full_signature": " char current()", "class_method_signature": "CharacterReader.current()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "()", "modifiers": "", "return": "char", "signature": "char consume()", "full_signature": " char consume()", "class_method_signature": "CharacterReader.consume()", "testcase": false, "constructor": false}, {"identifier": "unconsume", "parameters": "()", "modifiers": "", "return": "void", "signature": "void unconsume()", "full_signature": " void unconsume()", "class_method_signature": "CharacterReader.unconsume()", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "()", "modifiers": "", "return": "void", "signature": "void advance()", "full_signature": " void advance()", "class_method_signature": "CharacterReader.advance()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "()", "modifiers": "", "return": "void", "signature": "void mark()", "full_signature": " void mark()", "class_method_signature": "CharacterReader.mark()", "testcase": false, "constructor": false}, {"identifier": "rewindToMark", "parameters": "()", "modifiers": "", "return": "void", "signature": "void rewindToMark()", "full_signature": " void rewindToMark()", "class_method_signature": "CharacterReader.rewindToMark()", "testcase": false, "constructor": false}, {"identifier": "consumeAsString", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeAsString()", "full_signature": " String consumeAsString()", "class_method_signature": "CharacterReader.consumeAsString()", "testcase": false, "constructor": false}, {"identifier": "nextIndexOf", "parameters": "(char c)", "modifiers": "", "return": "int", "signature": "int nextIndexOf(char c)", "full_signature": " int nextIndexOf(char c)", "class_method_signature": "CharacterReader.nextIndexOf(char c)", "testcase": false, "constructor": false}, {"identifier": "nextIndexOf", "parameters": "(CharSequence seq)", "modifiers": "", "return": "int", "signature": "int nextIndexOf(CharSequence seq)", "full_signature": " int nextIndexOf(CharSequence seq)", "class_method_signature": "CharacterReader.nextIndexOf(CharSequence seq)", "testcase": false, "constructor": false}, {"identifier": "consumeTo", "parameters": "(char c)", "modifiers": "", "return": "String", "signature": "String consumeTo(char c)", "full_signature": " String consumeTo(char c)", "class_method_signature": "CharacterReader.consumeTo(char c)", "testcase": false, "constructor": false}, {"identifier": "consumeTo", "parameters": "(String seq)", "modifiers": "", "return": "String", "signature": "String consumeTo(String seq)", "full_signature": " String consumeTo(String seq)", "class_method_signature": "CharacterReader.consumeTo(String seq)", "testcase": false, "constructor": false}, {"identifier": "consumeToAny", "parameters": "(final char... chars)", "modifiers": "", "return": "String", "signature": "String consumeToAny(final char... chars)", "full_signature": " String consumeToAny(final char... chars)", "class_method_signature": "CharacterReader.consumeToAny(final char... chars)", "testcase": false, "constructor": false}, {"identifier": "consumeToEnd", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeToEnd()", "full_signature": " String consumeToEnd()", "class_method_signature": "CharacterReader.consumeToEnd()", "testcase": false, "constructor": false}, {"identifier": "consumeLetterSequence", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeLetterSequence()", "full_signature": " String consumeLetterSequence()", "class_method_signature": "CharacterReader.consumeLetterSequence()", "testcase": false, "constructor": false}, {"identifier": "consumeLetterThenDigitSequence", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeLetterThenDigitSequence()", "full_signature": " String consumeLetterThenDigitSequence()", "class_method_signature": "CharacterReader.consumeLetterThenDigitSequence()", "testcase": false, "constructor": false}, {"identifier": "consumeHexSequence", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeHexSequence()", "full_signature": " String consumeHexSequence()", "class_method_signature": "CharacterReader.consumeHexSequence()", "testcase": false, "constructor": false}, {"identifier": "consumeDigitSequence", "parameters": "()", "modifiers": "", "return": "String", "signature": "String consumeDigitSequence()", "full_signature": " String consumeDigitSequence()", "class_method_signature": "CharacterReader.consumeDigitSequence()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(char c)", "modifiers": "", "return": "boolean", "signature": "boolean matches(char c)", "full_signature": " boolean matches(char c)", "class_method_signature": "CharacterReader.matches(char c)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String seq)", "modifiers": "", "return": "boolean", "signature": "boolean matches(String seq)", "full_signature": " boolean matches(String seq)", "class_method_signature": "CharacterReader.matches(String seq)", "testcase": false, "constructor": false}, {"identifier": "matchesIgnoreCase", "parameters": "(String seq)", "modifiers": "", "return": "boolean", "signature": "boolean matchesIgnoreCase(String seq)", "full_signature": " boolean matchesIgnoreCase(String seq)", "class_method_signature": "CharacterReader.matchesIgnoreCase(String seq)", "testcase": false, "constructor": false}, {"identifier": "matchesAny", "parameters": "(char... seq)", "modifiers": "", "return": "boolean", "signature": "boolean matchesAny(char... seq)", "full_signature": " boolean matchesAny(char... seq)", "class_method_signature": "CharacterReader.matchesAny(char... seq)", "testcase": false, "constructor": false}, {"identifier": "matchesLetter", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean matchesLetter()", "full_signature": " boolean matchesLetter()", "class_method_signature": "CharacterReader.matchesLetter()", "testcase": false, "constructor": false}, {"identifier": "matchesDigit", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean matchesDigit()", "full_signature": " boolean matchesDigit()", "class_method_signature": "CharacterReader.matchesDigit()", "testcase": false, "constructor": false}, {"identifier": "matchConsume", "parameters": "(String seq)", "modifiers": "", "return": "boolean", "signature": "boolean matchConsume(String seq)", "full_signature": " boolean matchConsume(String seq)", "class_method_signature": "CharacterReader.matchConsume(String seq)", "testcase": false, "constructor": false}, {"identifier": "matchConsumeIgnoreCase", "parameters": "(String seq)", "modifiers": "", "return": "boolean", "signature": "boolean matchConsumeIgnoreCase(String seq)", "full_signature": " boolean matchConsumeIgnoreCase(String seq)", "class_method_signature": "CharacterReader.matchConsumeIgnoreCase(String seq)", "testcase": false, "constructor": false}, {"identifier": "consumedIgnroeCase", "parameters": "(String seq)", "modifiers": "", "return": "String", "signature": "String consumedIgnroeCase(String seq)", "full_signature": " String consumedIgnroeCase(String seq)", "class_method_signature": "CharacterReader.consumedIgnroeCase(String seq)", "testcase": false, "constructor": false}, {"identifier": "containsIgnoreCase", "parameters": "(String seq)", "modifiers": "", "return": "boolean", "signature": "boolean containsIgnoreCase(String seq)", "full_signature": " boolean containsIgnoreCase(String seq)", "class_method_signature": "CharacterReader.containsIgnoreCase(String seq)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CharacterReader.toString()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/parser/CharacterReader.java"}, "focal_method": {"identifier": "advance", "parameters": "()", "modifiers": "", "return": "void", "body": "void advance() {\n        pos++;\n    }", "signature": "void advance()", "full_signature": " void advance()", "class_method_signature": "CharacterReader.advance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}