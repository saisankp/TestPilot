{"test_class": {"identifier": "CustomerServiceProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CUSTOMER_SERVICE_URL = \"http://mycustomerservice/customers/{customerId}\";", "modifier": "public static final", "type": "String", "declarator": "CUSTOMER_SERVICE_URL = \"http://mycustomerservice/customers/{customerId}\"", "var_name": "CUSTOMER_SERVICE_URL"}, {"original_string": "private static final String CUSTOMER_ID = \"customer_id\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOMER_ID = \"customer_id\"", "var_name": "CUSTOMER_ID"}, {"original_string": "private RestTemplate restTemplate;", "modifier": "private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private CustomerServiceProxy proxy;", "modifier": "private", "type": "CustomerServiceProxy", "declarator": "proxy", "var_name": "proxy"}], "file": "orders-service/src/test/java/net/chrisrichardson/eventstore/examples/customersandorders/ordersservice/backend/CustomerServiceProxyTest.java"}, "test_case": {"identifier": "shouldNotFindCustomer", "parameters": "()", "modifiers": "@Test(expected=CustomerNotFoundException.class) public", "return": "void", "body": "@Test(expected=CustomerNotFoundException.class)\n  public void shouldNotFindCustomer() {\n    when(restTemplate.getForEntity(CUSTOMER_SERVICE_URL, Customer.class, CUSTOMER_ID))\n            .thenReturn(new ResponseEntity<>(HttpStatus.NOT_FOUND));\n    proxy.verifyCustomerCustomerId(CUSTOMER_ID);\n  }", "signature": "void shouldNotFindCustomer()", "full_signature": "@Test(expected=CustomerNotFoundException.class) public void shouldNotFindCustomer()", "class_method_signature": "CustomerServiceProxyTest.shouldNotFindCustomer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getForEntity", "verifyCustomerCustomerId"]}, "focal_class": {"identifier": "CustomerServiceProxy", "superclass": "", "interfaces": "implements CustomerService", "fields": [{"original_string": "@Value(\"${customer.service.url}\")\n  private String customerServiceUrl;", "modifier": "@Value(\"${customer.service.url}\")\n  private", "type": "String", "declarator": "customerServiceUrl", "var_name": "customerServiceUrl"}, {"original_string": "private RestTemplate restTemplate;", "modifier": "private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "CustomerServiceProxy", "parameters": "(RestTemplate restTemplate)", "modifiers": "@Inject public", "return": "", "signature": " CustomerServiceProxy(RestTemplate restTemplate)", "full_signature": "@Inject public  CustomerServiceProxy(RestTemplate restTemplate)", "class_method_signature": "CustomerServiceProxy.CustomerServiceProxy(RestTemplate restTemplate)", "testcase": false, "constructor": true}, {"identifier": "setCustomerServiceUrl", "parameters": "(String customerServiceUrl)", "modifiers": "public", "return": "void", "signature": "void setCustomerServiceUrl(String customerServiceUrl)", "full_signature": "public void setCustomerServiceUrl(String customerServiceUrl)", "class_method_signature": "CustomerServiceProxy.setCustomerServiceUrl(String customerServiceUrl)", "testcase": false, "constructor": false}, {"identifier": "verifyCustomerCustomerId", "parameters": "(String customerId)", "modifiers": "@Override public", "return": "void", "signature": "void verifyCustomerCustomerId(String customerId)", "full_signature": "@Override public void verifyCustomerCustomerId(String customerId)", "class_method_signature": "CustomerServiceProxy.verifyCustomerCustomerId(String customerId)", "testcase": false, "constructor": false}, {"identifier": "unrecognizedStatusCode", "parameters": "(String customerId, HttpStatus statusCode)", "modifiers": "private", "return": "void", "signature": "void unrecognizedStatusCode(String customerId, HttpStatus statusCode)", "full_signature": "private void unrecognizedStatusCode(String customerId, HttpStatus statusCode)", "class_method_signature": "CustomerServiceProxy.unrecognizedStatusCode(String customerId, HttpStatus statusCode)", "testcase": false, "constructor": false}], "file": "orders-service/src/main/java/net/chrisrichardson/eventstore/examples/customersandorders/ordersservice/backend/CustomerServiceProxy.java"}, "focal_method": {"identifier": "verifyCustomerCustomerId", "parameters": "(String customerId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void verifyCustomerCustomerId(String customerId) {\n    Assert.notNull(customerServiceUrl, \"Should not be null: \" + customerServiceUrl);\n    ResponseEntity<Customer> result = null;\n    try {\n      result = restTemplate.getForEntity(customerServiceUrl, Customer.class, customerId);\n    } catch (HttpClientErrorException e) {\n      switch (e.getStatusCode()) {\n        case NOT_FOUND:\n          throw new CustomerNotFoundException();\n        default:\n          unrecognizedStatusCode(customerId, e.getStatusCode());\n      }\n    }\n    switch (result.getStatusCode()) {\n      case OK:\n        return;\n      case NOT_FOUND:\n        throw new CustomerNotFoundException();\n      default:\n        unrecognizedStatusCode(customerId, result.getStatusCode());\n    }\n  }", "signature": "void verifyCustomerCustomerId(String customerId)", "full_signature": "@Override public void verifyCustomerCustomerId(String customerId)", "class_method_signature": "CustomerServiceProxy.verifyCustomerCustomerId(String customerId)", "testcase": false, "constructor": false, "invocations": ["notNull", "getForEntity", "getStatusCode", "unrecognizedStatusCode", "getStatusCode", "getStatusCode", "unrecognizedStatusCode", "getStatusCode"]}, "repository": {"repo_id": 212184596, "url": "https://github.com/eventuate-examples/eventuate-micronaut-examples-customers-and-orders", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 2529, "license": "licensed"}}