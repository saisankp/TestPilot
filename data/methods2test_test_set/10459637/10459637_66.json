{"test_class": {"identifier": "RoleChangerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public RoleChanger roleChanger;", "modifier": "public", "type": "RoleChanger", "declarator": "roleChanger", "var_name": "roleChanger"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/core/internal/RoleChangerTest.java"}, "test_case": {"identifier": "testSubmitRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubmitRequest() throws Exception {\n        LinkedList<OFSwitchImpl> switches = new LinkedList<OFSwitchImpl>();\n        roleChanger.timeout = 500*1000*1000; // 500 ms\n        \n        // a switch that supports role requests\n        OFSwitchImpl sw1 = EasyMock.createStrictMock(OFSwitchImpl.class);\n        // No support for NX_ROLE\n        expect(sw1.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE))\n                        .andReturn(true); \n        expect(sw1.sendNxRoleRequest(EasyMock.same(Role.MASTER), EasyMock.anyLong()))\n                       .andReturn(1);\n        expect(sw1.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE))\n                        .andReturn(true); \n        expect(sw1.sendNxRoleRequest(EasyMock.same(Role.SLAVE), EasyMock.anyLong()))\n                       .andReturn(1);\n        // The following calls happen for timeout handling:\n        expect(sw1.checkFirstPendingRoleRequestCookie(EasyMock.anyLong()))\n                        .andReturn(false);\n        expect(sw1.checkFirstPendingRoleRequestCookie(EasyMock.anyLong()))\n                        .andReturn(false);\n        switches.add(sw1);\n        \n        \n        replay(sw1);\n        roleChanger.submitRequest(switches, Role.MASTER);\n        roleChanger.submitRequest(switches, Role.SLAVE);\n        // Wait until role request has been sent. \n        // TODO: need to get rid of this sleep somehow\n        Thread.sleep(100);\n        // Now there should be exactly one timeout task pending\n        assertEquals(2, roleChanger.pendingTasks.size());\n        // Make sure it's indeed a timeout task\n        assertSame(RoleChanger.RoleChangeTask.Type.TIMEOUT, \n                     roleChanger.pendingTasks.peek().type);\n        // Check that RoleChanger indeed made a copy of switches collection\n        assertNotSame(switches, roleChanger.pendingTasks.peek().switches);\n        \n        // Wait until the timeout triggers \n        // TODO: get rid of this sleep too.\n        Thread.sleep(500);\n        assertEquals(0, roleChanger.pendingTasks.size());\n        verify(sw1);\n        \n    }", "signature": "void testSubmitRequest()", "full_signature": "@Test public void testSubmitRequest()", "class_method_signature": "RoleChangerTest.testSubmitRequest()", "testcase": true, "constructor": false, "invocations": ["createStrictMock", "andReturn", "expect", "getAttribute", "andReturn", "expect", "sendNxRoleRequest", "same", "anyLong", "andReturn", "expect", "getAttribute", "andReturn", "expect", "sendNxRoleRequest", "same", "anyLong", "andReturn", "expect", "checkFirstPendingRoleRequestCookie", "anyLong", "andReturn", "expect", "checkFirstPendingRoleRequestCookie", "anyLong", "add", "replay", "submitRequest", "submitRequest", "sleep", "assertEquals", "size", "assertSame", "peek", "assertNotSame", "peek", "sleep", "assertEquals", "size", "verify"]}, "focal_class": {"identifier": "RoleChanger", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected DelayQueue<RoleChangeTask> pendingTasks;", "modifier": "protected", "type": "DelayQueue<RoleChangeTask>", "declarator": "pendingTasks", "var_name": "pendingTasks"}, {"original_string": "protected long lastSubmitTime;", "modifier": "protected", "type": "long", "declarator": "lastSubmitTime", "var_name": "lastSubmitTime"}, {"original_string": "protected Thread workerThread;", "modifier": "protected", "type": "Thread", "declarator": "workerThread", "var_name": "workerThread"}, {"original_string": "protected long timeout;", "modifier": "protected", "type": "long", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "protected static long DEFAULT_TIMEOUT = 15L*1000*1000*1000L;", "modifier": "protected static", "type": "long", "declarator": "DEFAULT_TIMEOUT = 15L*1000*1000*1000L", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "protected static Logger log = LoggerFactory.getLogger(RoleChanger.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RoleChanger.class)", "var_name": "log"}], "methods": [{"identifier": "RoleChanger", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoleChanger()", "full_signature": "public  RoleChanger()", "class_method_signature": "RoleChanger.RoleChanger()", "testcase": false, "constructor": true}, {"identifier": "submitRequest", "parameters": "(Collection<OFSwitchImpl> switches, Role role)", "modifiers": "public synchronized", "return": "void", "signature": "void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "full_signature": "public synchronized void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "class_method_signature": "RoleChanger.submitRequest(Collection<OFSwitchImpl> switches, Role role)", "testcase": false, "constructor": false}, {"identifier": "sendRoleRequest", "parameters": "(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Failed to send role request message \" + \"to switch {switch}: {message}. Disconnecting\", explanation=\"An I/O error occurred while attempting to change \" + \"the switch HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Failed to send role request message \" + \"to switch {switch}: {message}. Disconnecting\", explanation=\"An I/O error occurred while attempting to change \" + \"the switch HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "class_method_signature": "RoleChanger.sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "testcase": false, "constructor": false}, {"identifier": "verifyRoleReplyReceived", "parameters": "(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "class_method_signature": "RoleChanger.verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/core/internal/RoleChanger.java"}, "focal_method": {"identifier": "submitRequest", "parameters": "(Collection<OFSwitchImpl> switches, Role role)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void submitRequest(Collection<OFSwitchImpl> switches, Role role) {\n        long deadline = System.nanoTime();\n        // Grrr. stupid DelayQueue. Make sre we have at least 10ms between \n        // role request messages.\n        if (deadline - lastSubmitTime < 10 * 1000*1000) \n            deadline = lastSubmitTime + 10 * 1000*1000;\n        // make a copy of the list \n        ArrayList<OFSwitchImpl> switches_copy = new ArrayList<OFSwitchImpl>(switches);\n        RoleChangeTask req = new RoleChangeTask(switches_copy, role, deadline);\n        pendingTasks.put(req);\n        lastSubmitTime = deadline;\n    }", "signature": "void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "full_signature": "public synchronized void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "class_method_signature": "RoleChanger.submitRequest(Collection<OFSwitchImpl> switches, Role role)", "testcase": false, "constructor": false, "invocations": ["nanoTime", "put"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}