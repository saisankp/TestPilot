{"test_class": {"identifier": "QueueingEventSubjectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueueingEventSubject<String> eventSubject;", "modifier": "private", "type": "QueueingEventSubject<String>", "declarator": "eventSubject", "var_name": "eventSubject"}, {"original_string": "private RecordingConsumer<String> receiver;", "modifier": "private", "type": "RecordingConsumer<String>", "declarator": "receiver", "var_name": "receiver"}], "file": "mobius-extras/src/test/java/com/spotify/mobius/extras/QueueingEventSubjectTest.java"}, "test_case": {"identifier": "shouldOnlySupportASingleSubscriber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldOnlySupportASingleSubscriber() throws Exception {\n    eventSubject.subscribe(receiver);\n\n    assertThatThrownBy(() -> eventSubject.subscribe(new RecordingConsumer<>()))\n        .isInstanceOf(IllegalStateException.class);\n  }", "signature": "void shouldOnlySupportASingleSubscriber()", "full_signature": "@Test public void shouldOnlySupportASingleSubscriber()", "class_method_signature": "QueueingEventSubjectTest.shouldOnlySupportASingleSubscriber()", "testcase": true, "constructor": false, "invocations": ["subscribe", "isInstanceOf", "assertThatThrownBy", "subscribe"]}, "focal_class": {"identifier": "QueueingEventSubject", "superclass": "", "interfaces": "implements EventSource<E>, Consumer<E>", "fields": [{"original_string": "private final BlockingQueue<E> queue;", "modifier": "private final", "type": "BlockingQueue<E>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private State state;", "modifier": "private", "type": "State", "declarator": "state", "var_name": "state"}, {"original_string": "private Consumer<E> subscriber;", "modifier": "private", "type": "Consumer<E>", "declarator": "subscriber", "var_name": "subscriber"}], "methods": [{"identifier": "QueueingEventSubject", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " QueueingEventSubject(int capacity)", "full_signature": "public  QueueingEventSubject(int capacity)", "class_method_signature": "QueueingEventSubject.QueueingEventSubject(int capacity)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "(Consumer<E> eventConsumer)", "modifiers": "@Nonnull @Override public", "return": "Disposable", "signature": "Disposable subscribe(Consumer<E> eventConsumer)", "full_signature": "@Nonnull @Override public Disposable subscribe(Consumer<E> eventConsumer)", "class_method_signature": "QueueingEventSubject.subscribe(Consumer<E> eventConsumer)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(E value)", "modifiers": "@Override public", "return": "void", "signature": "void accept(E value)", "full_signature": "@Override public void accept(E value)", "class_method_signature": "QueueingEventSubject.accept(E value)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void unsubscribe()", "full_signature": "private synchronized void unsubscribe()", "class_method_signature": "QueueingEventSubject.unsubscribe()", "testcase": false, "constructor": false}], "file": "mobius-extras/src/main/java/com/spotify/mobius/extras/QueueingEventSubject.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Consumer<E> eventConsumer)", "modifiers": "@Nonnull @Override public", "return": "Disposable", "body": "@Nonnull\n  @Override\n  public Disposable subscribe(Consumer<E> eventConsumer) {\n    List<E> queued = new ArrayList<>();\n\n    // avoid calling the consumer from the synchronized section\n    synchronized (this) {\n      if (state == State.SUBSCRIBED) {\n        throw new IllegalStateException(\n            \"Only a single subscription is supported, previous subscriber is: \" + subscriber);\n      }\n\n      state = State.SUBSCRIBED;\n      subscriber = eventConsumer;\n      queue.drainTo(queued);\n    }\n\n    for (E event : queued) {\n      eventConsumer.accept(event);\n    }\n\n    return new Unsubscriber();\n  }", "signature": "Disposable subscribe(Consumer<E> eventConsumer)", "full_signature": "@Nonnull @Override public Disposable subscribe(Consumer<E> eventConsumer)", "class_method_signature": "QueueingEventSubject.subscribe(Consumer<E> eventConsumer)", "testcase": false, "constructor": false, "invocations": ["drainTo", "accept"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}