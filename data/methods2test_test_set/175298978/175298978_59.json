{"test_class": {"identifier": "SmellDuplicationCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SHA_A = \"commit\";", "modifier": "public static final", "type": "String", "declarator": "SHA_A = \"commit\"", "var_name": "SHA_A"}, {"original_string": "public static final String SHA_B = \"commit2\";", "modifier": "public static final", "type": "String", "declarator": "SHA_B = \"commit2\"", "var_name": "SHA_B"}, {"original_string": "private static SmellDuplicationChecker.FileRenameEntry fileRename;", "modifier": "private static", "type": "SmellDuplicationChecker.FileRenameEntry", "declarator": "fileRename", "var_name": "fileRename"}, {"original_string": "private static SmellDuplicationChecker.FileRenameEntry sameCommit;", "modifier": "private static", "type": "SmellDuplicationChecker.FileRenameEntry", "declarator": "sameCommit", "var_name": "sameCommit"}, {"original_string": "private static SmellDuplicationChecker.FileRenameEntry sameOldFile;", "modifier": "private static", "type": "SmellDuplicationChecker.FileRenameEntry", "declarator": "sameOldFile", "var_name": "sameOldFile"}, {"original_string": "private static SmellDuplicationChecker.FileRenameEntry j2gRename;", "modifier": "private static", "type": "SmellDuplicationChecker.FileRenameEntry", "declarator": "j2gRename", "var_name": "j2gRename"}, {"original_string": "private static SmellDuplicationChecker.FileRenameEntry g2jRename;", "modifier": "private static", "type": "SmellDuplicationChecker.FileRenameEntry", "declarator": "g2jRename", "var_name": "g2jRename"}, {"original_string": "private List<Map<String, Object>> filesRenames;", "modifier": "private", "type": "List<Map<String, Object>>", "declarator": "filesRenames", "var_name": "filesRenames"}, {"original_string": "private Commit parent;", "modifier": "private", "type": "Commit", "declarator": "parent", "var_name": "parent"}, {"original_string": "private QueryEngine queryEngine;", "modifier": "private", "type": "QueryEngine", "declarator": "queryEngine", "var_name": "queryEngine"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/query/smell/duplication/SmellDuplicationCheckerTest.java"}, "test_case": {"identifier": "oldInstanceNameIsCorrectlyGuessedNoMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oldInstanceNameIsCorrectlyGuessedNoMethod() {\n        // The instance name format is critical there.\n        Smell instance = new Smell(\"MIM\", \"d.e.f$myInnerClass$AnotherInnerClass\", sameOldFile.newFile);\n        Commit commit = new Commit(sameOldFile.sha1, 1);\n\n        mockPreviousQualifiedName(\"a.b.c\");\n        SmellDuplicationChecker checker = getDuplicationChecker();\n        Smell original = checker.original(instance, commit, parent);\n\n        assertNotNull(original);\n        assertEquals(\"a.b.c$myInnerClass$AnotherInnerClass\", original.instance);\n        assertEquals(sameOldFile.oldFile, original.file);\n    }", "signature": "void oldInstanceNameIsCorrectlyGuessedNoMethod()", "full_signature": "@Test public void oldInstanceNameIsCorrectlyGuessedNoMethod()", "class_method_signature": "SmellDuplicationCheckerTest.oldInstanceNameIsCorrectlyGuessedNoMethod()", "testcase": true, "constructor": false, "invocations": ["mockPreviousQualifiedName", "getDuplicationChecker", "original", "assertNotNull", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SmellDuplicationChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String SHA1_COLUMN = \"sha1\";", "modifier": "static final", "type": "String", "declarator": "SHA1_COLUMN = \"sha1\"", "var_name": "SHA1_COLUMN"}, {"original_string": "static final String OLD_FILE_COLUMN = \"old_file\";", "modifier": "static final", "type": "String", "declarator": "OLD_FILE_COLUMN = \"old_file\"", "var_name": "OLD_FILE_COLUMN"}, {"original_string": "static final String NEW_FILE_COLUMN = \"new_file\";", "modifier": "static final", "type": "String", "declarator": "NEW_FILE_COLUMN = \"new_file\"", "var_name": "NEW_FILE_COLUMN"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SmellDuplicationChecker.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SmellDuplicationChecker.class.getName())", "var_name": "logger"}, {"original_string": "public static final String QUALIFIED_NAME = \"qualified_name\";", "modifier": "public static final", "type": "String", "declarator": "QUALIFIED_NAME = \"qualified_name\"", "var_name": "QUALIFIED_NAME"}, {"original_string": "private final List<FileRenameEntry> fileRenamings;", "modifier": "private final", "type": "List<FileRenameEntry>", "declarator": "fileRenamings", "var_name": "fileRenamings"}, {"original_string": "private final QueryEngine queryEngine;", "modifier": "private final", "type": "QueryEngine", "declarator": "queryEngine", "var_name": "queryEngine"}], "methods": [{"identifier": "SmellDuplicationChecker", "parameters": "(int projectId, Persistence persistence, QueryEngine queryEngine)", "modifiers": "public", "return": "", "signature": " SmellDuplicationChecker(int projectId, Persistence persistence, QueryEngine queryEngine)", "full_signature": "public  SmellDuplicationChecker(int projectId, Persistence persistence, QueryEngine queryEngine)", "class_method_signature": "SmellDuplicationChecker.SmellDuplicationChecker(int projectId, Persistence persistence, QueryEngine queryEngine)", "testcase": false, "constructor": true}, {"identifier": "getFileRenameStatement", "parameters": "(int projectId)", "modifiers": "private static", "return": "String", "signature": "String getFileRenameStatement(int projectId)", "full_signature": "private static String getFileRenameStatement(int projectId)", "class_method_signature": "SmellDuplicationChecker.getFileRenameStatement(int projectId)", "testcase": false, "constructor": false}, {"identifier": "loadFileRename", "parameters": "(int projectId, Persistence persistence)", "modifiers": "private", "return": "List<FileRenameEntry>", "signature": "List<FileRenameEntry> loadFileRename(int projectId, Persistence persistence)", "full_signature": "private List<FileRenameEntry> loadFileRename(int projectId, Persistence persistence)", "class_method_signature": "SmellDuplicationChecker.loadFileRename(int projectId, Persistence persistence)", "testcase": false, "constructor": false}, {"identifier": "original", "parameters": "(Smell instance, Commit commit, Commit previous)", "modifiers": "public", "return": "Smell", "signature": "Smell original(Smell instance, Commit commit, Commit previous)", "full_signature": "public Smell original(Smell instance, Commit commit, Commit previous)", "class_method_signature": "SmellDuplicationChecker.original(Smell instance, Commit commit, Commit previous)", "testcase": false, "constructor": false}, {"identifier": "guessOriginalSmell", "parameters": "(Smell instance, Commit commit, FileRenameEntry renaming)", "modifiers": "private", "return": "Smell", "signature": "Smell guessOriginalSmell(Smell instance, Commit commit, FileRenameEntry renaming)", "full_signature": "private Smell guessOriginalSmell(Smell instance, Commit commit, FileRenameEntry renaming)", "class_method_signature": "SmellDuplicationChecker.guessOriginalSmell(Smell instance, Commit commit, FileRenameEntry renaming)", "testcase": false, "constructor": false}, {"identifier": "fetchQualifiedName", "parameters": "(String sha, String file)", "modifiers": "private", "return": "String", "signature": "String fetchQualifiedName(String sha, String file)", "full_signature": "private String fetchQualifiedName(String sha, String file)", "class_method_signature": "SmellDuplicationChecker.fetchQualifiedName(String sha, String file)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifierStart", "parameters": "(String instance)", "modifiers": "private", "return": "String", "signature": "String extractIdentifierStart(String instance)", "full_signature": "private String extractIdentifierStart(String instance)", "class_method_signature": "SmellDuplicationChecker.extractIdentifierStart(String instance)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifierEnding", "parameters": "(String instance)", "modifiers": "private", "return": "String", "signature": "String extractIdentifierEnding(String instance)", "full_signature": "private String extractIdentifierEnding(String instance)", "class_method_signature": "SmellDuplicationChecker.extractIdentifierEnding(String instance)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/query/smell/duplication/SmellDuplicationChecker.java"}, "focal_method": {"identifier": "original", "parameters": "(Smell instance, Commit commit, Commit previous)", "modifiers": "public", "return": "Smell", "body": "public Smell original(Smell instance, Commit commit, Commit previous) {\n        logger.trace(\"==> Trying to guess original smell for: \" + instance);\n\n        // If we find a renaming of the smell file in this specific commit, try to guess the original smell.\n        int index = fileRenamings.indexOf(FileRenameEntry.fromSmell(instance, commit));\n        if (index > -1) {\n            logger.trace(\"  ==> Guessing new original smell!\");\n            return guessOriginalSmell(instance, previous, fileRenamings.get(index));\n        }\n\n        logger.trace(\"  ==> No original smell found\");\n\n        return null;\n    }", "signature": "Smell original(Smell instance, Commit commit, Commit previous)", "full_signature": "public Smell original(Smell instance, Commit commit, Commit previous)", "class_method_signature": "SmellDuplicationChecker.original(Smell instance, Commit commit, Commit previous)", "testcase": false, "constructor": false, "invocations": ["trace", "indexOf", "fromSmell", "trace", "guessOriginalSmell", "get", "trace"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}