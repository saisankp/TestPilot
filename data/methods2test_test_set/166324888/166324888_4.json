{"test_class": {"identifier": "ReceiveTransactionPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "private ReceiveTransactionPresenter presenter;", "modifier": "private", "type": "ReceiveTransactionPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    private ReceiveTransationContract.View view;", "modifier": "@Mock\n    private", "type": "ReceiveTransationContract.View", "declarator": "view", "var_name": "view"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/ReceiveTransactionPresenterTest.java"}, "test_case": {"identifier": "loadData2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadData2(){\n\n        presenter.loadData();\n        Mockito.verify(view).setWalletInfo(Mockito.any());\n    }", "signature": "void loadData2()", "full_signature": "@Test public void loadData2()", "class_method_signature": "ReceiveTransactionPresenterTest.loadData2()", "testcase": true, "constructor": false, "invocations": ["loadData", "setWalletInfo", "verify", "any"]}, "focal_class": {"identifier": "ReceiveTransactionPresenter", "superclass": "extends BasePresenter<ReceiveTransationContract.View>", "interfaces": "implements ReceiveTransationContract.Presenter", "fields": [{"original_string": "private Wallet walletEntity;", "modifier": "private", "type": "Wallet", "declarator": "walletEntity", "var_name": "walletEntity"}, {"original_string": "private Bitmap mQRCodeBitmap;", "modifier": "private", "type": "Bitmap", "declarator": "mQRCodeBitmap", "var_name": "mQRCodeBitmap"}], "methods": [{"identifier": "getWalletEntity", "parameters": "()", "modifiers": "public", "return": "Wallet", "signature": "Wallet getWalletEntity()", "full_signature": "public Wallet getWalletEntity()", "class_method_signature": "ReceiveTransactionPresenter.getWalletEntity()", "testcase": false, "constructor": false}, {"identifier": "setWalletEntity", "parameters": "(Wallet walletEntity)", "modifiers": "public", "return": "void", "signature": "void setWalletEntity(Wallet walletEntity)", "full_signature": "public void setWalletEntity(Wallet walletEntity)", "class_method_signature": "ReceiveTransactionPresenter.setWalletEntity(Wallet walletEntity)", "testcase": false, "constructor": false}, {"identifier": "getmQRCodeBitmap", "parameters": "()", "modifiers": "public", "return": "Bitmap", "signature": "Bitmap getmQRCodeBitmap()", "full_signature": "public Bitmap getmQRCodeBitmap()", "class_method_signature": "ReceiveTransactionPresenter.getmQRCodeBitmap()", "testcase": false, "constructor": false}, {"identifier": "setmQRCodeBitmap", "parameters": "(Bitmap mQRCodeBitmap)", "modifiers": "public", "return": "void", "signature": "void setmQRCodeBitmap(Bitmap mQRCodeBitmap)", "full_signature": "public void setmQRCodeBitmap(Bitmap mQRCodeBitmap)", "class_method_signature": "ReceiveTransactionPresenter.setmQRCodeBitmap(Bitmap mQRCodeBitmap)", "testcase": false, "constructor": false}, {"identifier": "loadData", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadData()", "full_signature": "@Override public void loadData()", "class_method_signature": "ReceiveTransactionPresenter.loadData()", "testcase": false, "constructor": false}, {"identifier": "screenShot", "parameters": "(@NonNull final View decorView)", "modifiers": "private", "return": "Bitmap", "signature": "Bitmap screenShot(@NonNull final View decorView)", "full_signature": "private Bitmap screenShot(@NonNull final View decorView)", "class_method_signature": "ReceiveTransactionPresenter.screenShot(@NonNull final View decorView)", "testcase": false, "constructor": false}, {"identifier": "shareView", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shareView()", "full_signature": "@Override public void shareView()", "class_method_signature": "ReceiveTransactionPresenter.shareView()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void copy()", "full_signature": "@Override public void copy()", "class_method_signature": "ReceiveTransactionPresenter.copy()", "testcase": false, "constructor": false}, {"identifier": "getImageName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getImageName()", "full_signature": "private String getImageName()", "class_method_signature": "ReceiveTransactionPresenter.getImageName()", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/ReceiveTransactionPresenter.java"}, "focal_method": {"identifier": "loadData", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void loadData() {\n        walletEntity = WalletManager.getInstance().getSelectedWallet();\n        if (isViewAttached() && walletEntity != null) {\n\n            getView().setWalletInfo(walletEntity);\n\n            Flowable.fromCallable(new Callable<Bitmap>() {\n\n                @Override\n                public Bitmap call() throws Exception {\n                    String text = walletEntity.getPrefixAddress();\n                    return QRCodeEncoder.syncEncodeQRCode(text, DensityUtil.dp2px(getContext(), 250f));\n                }\n            }).compose(RxUtils.getFlowableSchedulerTransformer())\n                    .subscribe(new Consumer<Bitmap>() {\n                        @Override\n                        public void accept(Bitmap bitmap) throws Exception {\n                            mQRCodeBitmap = bitmap;\n                            if (isViewAttached() && bitmap != null) {\n                                getView().setWalletAddressQrCode(bitmap);\n                            }\n                        }\n                    });\n        }\n    }", "signature": "void loadData()", "full_signature": "@Override public void loadData()", "class_method_signature": "ReceiveTransactionPresenter.loadData()", "testcase": false, "constructor": false, "invocations": ["getSelectedWallet", "getInstance", "isViewAttached", "setWalletInfo", "getView", "subscribe", "compose", "fromCallable", "getPrefixAddress", "syncEncodeQRCode", "dp2px", "getContext", "getFlowableSchedulerTransformer", "isViewAttached", "setWalletAddressQrCode", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}