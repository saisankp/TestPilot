{"test_class": {"identifier": "PDBReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [], "file": "storage/pdb/src/test/java/org/openscience/cdk/io/PDBReaderTest.java"}, "test_case": {"identifier": "testProtein", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProtein() throws Exception {\n        String filename = \"data/pdb/Test-1crn.pdb\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n\n        ISimpleChemObjectReader reader = new PDBReader(ins);\n        Assert.assertNotNull(reader);\n\n        ChemFile chemFile = (ChemFile) reader.read(new ChemFile());\n        Assert.assertNotNull(chemFile);\n        Assert.assertEquals(1, chemFile.getChemSequenceCount());\n\n        org.openscience.cdk.interfaces.IChemSequence seq = chemFile.getChemSequence(0);\n        Assert.assertNotNull(seq);\n        Assert.assertEquals(1, seq.getChemModelCount());\n\n        IChemModel model = seq.getChemModel(0);\n        Assert.assertNotNull(model);\n        Assert.assertEquals(1, model.getMoleculeSet().getAtomContainerCount());\n\n        IAtomContainer container = model.getMoleculeSet().getAtomContainer(0);\n        Assert.assertTrue(container instanceof IBioPolymer);\n        IBioPolymer mol = (IBioPolymer) container;\n        Assert.assertNotNull(mol);\n        Assert.assertEquals(327, mol.getAtomCount());\n        Assert.assertEquals(46, mol.getMonomerCount());\n        Assert.assertNotNull(mol.getMonomer(\"THRA1\", \"A\"));\n        Assert.assertEquals(7, mol.getMonomer(\"THRA1\", \"A\").getAtomCount());\n        Assert.assertNotNull(mol.getMonomer(\"ILEA7\", \"A\"));\n        Assert.assertEquals(8, mol.getMonomer(\"ILEA7\", \"A\").getAtomCount());\n\n        IAtom nAtom = mol.getAtom(94);\n        Assert.assertNotNull(nAtom);\n        Assert.assertTrue(nAtom instanceof PDBAtom);\n        PDBAtom atom = (PDBAtom) nAtom;\n        Assert.assertEquals(\"C\", atom.getSymbol());\n        Assert.assertEquals(95, atom.getSerial().intValue());\n        Assert.assertEquals(\"CZ\", atom.getName());\n        Assert.assertEquals(\"PHE\", atom.getResName());\n        Assert.assertEquals(\"13\", atom.getResSeq());\n        Assert.assertEquals(1.0, atom.getOccupancy(), 0.001);\n        Assert.assertEquals(6.84, atom.getTempFactor(), 0.001);\n\n    }", "signature": "void testProtein()", "full_signature": "@Test public void testProtein()", "class_method_signature": "PDBReaderTest.testProtein()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "assertNotNull", "read", "assertNotNull", "assertEquals", "getChemSequenceCount", "getChemSequence", "assertNotNull", "assertEquals", "getChemModelCount", "getChemModel", "assertNotNull", "assertEquals", "getAtomContainerCount", "getMoleculeSet", "getAtomContainer", "getMoleculeSet", "assertTrue", "assertNotNull", "assertEquals", "getAtomCount", "assertEquals", "getMonomerCount", "assertNotNull", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertNotNull", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "getAtom", "assertNotNull", "assertTrue", "assertEquals", "getSymbol", "assertEquals", "intValue", "getSerial", "assertEquals", "getName", "assertEquals", "getResName", "assertEquals", "getResSeq", "assertEquals", "getOccupancy", "assertEquals", "getTempFactor"]}, "focal_class": {"identifier": "PDBReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool    logger            = LoggingToolFactory.createLoggingTool(PDBReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger            = LoggingToolFactory.createLoggingTool(PDBReader.class)", "var_name": "logger"}, {"original_string": "private BufferedReader         _oInput;", "modifier": "private", "type": "BufferedReader", "declarator": "_oInput", "var_name": "_oInput"}, {"original_string": "private BooleanIOSetting       useRebondTool;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "useRebondTool", "var_name": "useRebondTool"}, {"original_string": "private BooleanIOSetting       readConnect;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "readConnect", "var_name": "readConnect"}, {"original_string": "private BooleanIOSetting       useHetDictionary;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "useHetDictionary", "var_name": "useHetDictionary"}, {"original_string": "private Map<Integer, IAtom>    atomNumberMap;", "modifier": "private", "type": "Map<Integer, IAtom>", "declarator": "atomNumberMap", "var_name": "atomNumberMap"}, {"original_string": "private List<IBond>            bondsFromConnectRecords;", "modifier": "private", "type": "List<IBond>", "declarator": "bondsFromConnectRecords", "var_name": "bondsFromConnectRecords"}, {"original_string": "private Map<String, String>    hetDictionary;", "modifier": "private", "type": "Map<String, String>", "declarator": "hetDictionary", "var_name": "hetDictionary"}, {"original_string": "private AtomTypeFactory        cdkAtomTypeFactory;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "cdkAtomTypeFactory", "var_name": "cdkAtomTypeFactory"}, {"original_string": "private static final String    hetDictionaryPath = \"type_map.txt\";", "modifier": "private static final", "type": "String", "declarator": "hetDictionaryPath = \"type_map.txt\"", "var_name": "hetDictionaryPath"}], "methods": [{"identifier": "PDBReader", "parameters": "(InputStream oIn)", "modifiers": "public", "return": "", "signature": " PDBReader(InputStream oIn)", "full_signature": "public  PDBReader(InputStream oIn)", "class_method_signature": "PDBReader.PDBReader(InputStream oIn)", "testcase": false, "constructor": true}, {"identifier": "PDBReader", "parameters": "(Reader oIn)", "modifiers": "public", "return": "", "signature": " PDBReader(Reader oIn)", "full_signature": "public  PDBReader(Reader oIn)", "class_method_signature": "PDBReader.PDBReader(Reader oIn)", "testcase": false, "constructor": true}, {"identifier": "PDBReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " PDBReader()", "full_signature": "public  PDBReader()", "class_method_signature": "PDBReader.PDBReader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "PDBReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "PDBReader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "PDBReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "PDBReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T oObj)", "modifiers": "@Override public", "return": "T", "signature": "T read(T oObj)", "full_signature": "@Override public T read(T oObj)", "class_method_signature": "PDBReader.read(T oObj)", "testcase": false, "constructor": false}, {"identifier": "readChemFile", "parameters": "(IChemFile oFile)", "modifiers": "private", "return": "IChemFile", "signature": "IChemFile readChemFile(IChemFile oFile)", "full_signature": "private IChemFile readChemFile(IChemFile oFile)", "class_method_signature": "PDBReader.readChemFile(IChemFile oFile)", "testcase": false, "constructor": false}, {"identifier": "addBond", "parameters": "(IAtomContainer molecule, int bondAtomNo, int bondedAtomNo)", "modifiers": "private", "return": "void", "signature": "void addBond(IAtomContainer molecule, int bondAtomNo, int bondedAtomNo)", "full_signature": "private void addBond(IAtomContainer molecule, int bondAtomNo, int bondedAtomNo)", "class_method_signature": "PDBReader.addBond(IAtomContainer molecule, int bondAtomNo, int bondedAtomNo)", "testcase": false, "constructor": false}, {"identifier": "createBondsWithRebondTool", "parameters": "(IAtomContainer molecule)", "modifiers": "private", "return": "boolean", "signature": "boolean createBondsWithRebondTool(IAtomContainer molecule)", "full_signature": "private boolean createBondsWithRebondTool(IAtomContainer molecule)", "class_method_signature": "PDBReader.createBondsWithRebondTool(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "isUpper", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUpper(char c)", "full_signature": "private static boolean isUpper(char c)", "class_method_signature": "PDBReader.isUpper(char c)", "testcase": false, "constructor": false}, {"identifier": "isLower", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLower(char c)", "full_signature": "private static boolean isLower(char c)", "class_method_signature": "PDBReader.isLower(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private static boolean isDigit(char c)", "class_method_signature": "PDBReader.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "parseAtomSymbol", "parameters": "(String str)", "modifiers": "private", "return": "String", "signature": "String parseAtomSymbol(String str)", "full_signature": "private String parseAtomSymbol(String str)", "class_method_signature": "PDBReader.parseAtomSymbol(String str)", "testcase": false, "constructor": false}, {"identifier": "readAtom", "parameters": "(String cLine, int lineLength)", "modifiers": "private", "return": "PDBAtom", "signature": "PDBAtom readAtom(String cLine, int lineLength)", "full_signature": "private PDBAtom readAtom(String cLine, int lineLength)", "class_method_signature": "PDBReader.readAtom(String cLine, int lineLength)", "testcase": false, "constructor": false}, {"identifier": "typeHetatm", "parameters": "(String resName, String atomName)", "modifiers": "private", "return": "String", "signature": "String typeHetatm(String resName, String atomName)", "full_signature": "private String typeHetatm(String resName, String atomName)", "class_method_signature": "PDBReader.typeHetatm(String resName, String atomName)", "testcase": false, "constructor": false}, {"identifier": "readHetDictionary", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readHetDictionary()", "full_signature": "private void readHetDictionary()", "class_method_signature": "PDBReader.readHetDictionary()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PDBReader.close()", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "PDBReader.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "PDBReader.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/pdb/src/main/java/org/openscience/cdk/io/PDBReader.java"}, "focal_method": {"identifier": "read", "parameters": "(T oObj)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends IChemObject> T read(T oObj) throws CDKException {\n        if (oObj instanceof IChemFile) {\n            return (T) readChemFile((IChemFile) oObj);\n        } else {\n            throw new CDKException(\"Only supported is reading of ChemFile objects.\");\n        }\n    }", "signature": "T read(T oObj)", "full_signature": "@Override public T read(T oObj)", "class_method_signature": "PDBReader.read(T oObj)", "testcase": false, "constructor": false, "invocations": ["readChemFile"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}