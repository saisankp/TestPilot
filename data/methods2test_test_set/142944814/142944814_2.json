{"test_class": {"identifier": "ContractInvocationHandlerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private final ContractAddress contractAddress = new AergoKeyGenerator().create().getAddress()\n      .adapt(ContractAddress.class);", "modifier": "private final", "type": "ContractAddress", "declarator": "contractAddress = new AergoKeyGenerator().create().getAddress()\n      .adapt(ContractAddress.class)", "var_name": "contractAddress"}, {"original_string": "private final ClassLoader classLoader = getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = getClass().getClassLoader()", "var_name": "classLoader"}], "file": "client/smart-contract/src/test/java/hera/contract/ContractInvocationHandlerTest.java"}, "test_case": {"identifier": "testPrepareSigner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPrepareSigner() {\n    final ContractInvocationHandler invocationHandler = new ContractInvocationHandler(\n        contractAddress, mock(\n        TxRequester.class));\n    final Signer signer = new AergoKeyGenerator().create();\n    invocationHandler.prepareSigner(signer);\n  }", "signature": "void testPrepareSigner()", "full_signature": "@Test public void testPrepareSigner()", "class_method_signature": "ContractInvocationHandlerTest.testPrepareSigner()", "testcase": true, "constructor": false, "invocations": ["mock", "create", "prepareSigner"]}, "focal_class": {"identifier": "ContractInvocationHandler", "superclass": "", "interfaces": "implements InvocationHandler, ClientPrepareable, SignerPreparable", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final ThreadLocal<AergoClient> clientCabinet = new ThreadLocal<>();", "modifier": "protected final", "type": "ThreadLocal<AergoClient>", "declarator": "clientCabinet = new ThreadLocal<>()", "var_name": "clientCabinet"}, {"original_string": "protected final ThreadLocal<Signer> signerCabinet = new ThreadLocal<>();", "modifier": "protected final", "type": "ThreadLocal<Signer>", "declarator": "signerCabinet = new ThreadLocal<>()", "var_name": "signerCabinet"}, {"original_string": "@NonNull\n  protected final ContractAddress contractAddress;", "modifier": "@NonNull\n  protected final", "type": "ContractAddress", "declarator": "contractAddress", "var_name": "contractAddress"}, {"original_string": "@NonNull\n  protected final TxRequester txRequester;", "modifier": "@NonNull\n  protected final", "type": "TxRequester", "declarator": "txRequester", "var_name": "txRequester"}, {"original_string": "protected final Object lock = new Object();", "modifier": "protected final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "protected volatile ContractInterface cached;", "modifier": "protected volatile", "type": "ContractInterface", "declarator": "cached", "var_name": "cached"}], "methods": [{"identifier": "prepareClient", "parameters": "(final AergoClient aergoClient)", "modifiers": "@Override public", "return": "void", "signature": "void prepareClient(final AergoClient aergoClient)", "full_signature": "@Override public void prepareClient(final AergoClient aergoClient)", "class_method_signature": "ContractInvocationHandler.prepareClient(final AergoClient aergoClient)", "testcase": false, "constructor": false}, {"identifier": "prepareSigner", "parameters": "(final Signer signer)", "modifiers": "@Override public", "return": "void", "signature": "void prepareSigner(final Signer signer)", "full_signature": "@Override public void prepareSigner(final Signer signer)", "class_method_signature": "ContractInvocationHandler.prepareSigner(final Signer signer)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(final Object proxy, final Method method, final Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(final Object proxy, final Method method, final Object[] args)", "full_signature": "@Override public Object invoke(final Object proxy, final Method method, final Object[] args)", "class_method_signature": "ContractInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "isContractExecution", "parameters": "(final Class<?> returnType)", "modifiers": "protected", "return": "boolean", "signature": "boolean isContractExecution(final Class<?> returnType)", "full_signature": "protected boolean isContractExecution(final Class<?> returnType)", "class_method_signature": "ContractInvocationHandler.isContractExecution(final Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "getContractInterface", "parameters": "()", "modifiers": "protected", "return": "ContractInterface", "signature": "ContractInterface getContractInterface()", "full_signature": "protected ContractInterface getContractInterface()", "class_method_signature": "ContractInvocationHandler.getContractInterface()", "testcase": false, "constructor": false}, {"identifier": "filterFee", "parameters": "(final Object[] args)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> filterFee(final Object[] args)", "full_signature": "protected List<Object> filterFee(final Object[] args)", "class_method_signature": "ContractInvocationHandler.filterFee(final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "parseFee", "parameters": "(final Object[] args)", "modifiers": "protected", "return": "Fee", "signature": "Fee parseFee(final Object[] args)", "full_signature": "protected Fee parseFee(final Object[] args)", "class_method_signature": "ContractInvocationHandler.parseFee(final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "()", "modifiers": "protected", "return": "AergoClient", "signature": "AergoClient getClient()", "full_signature": "protected AergoClient getClient()", "class_method_signature": "ContractInvocationHandler.getClient()", "testcase": false, "constructor": false}, {"identifier": "getSigner", "parameters": "()", "modifiers": "protected", "return": "Signer", "signature": "Signer getSigner()", "full_signature": "protected Signer getSigner()", "class_method_signature": "ContractInvocationHandler.getSigner()", "testcase": false, "constructor": false}, {"identifier": "flushCabinet", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void flushCabinet()", "full_signature": "protected void flushCabinet()", "class_method_signature": "ContractInvocationHandler.flushCabinet()", "testcase": false, "constructor": false}], "file": "client/smart-contract/src/main/java/hera/contract/ContractInvocationHandler.java"}, "focal_method": {"identifier": "prepareSigner", "parameters": "(final Signer signer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void prepareSigner(final Signer signer) {\n    assertNotNull(signer, \"Signer must not null\");\n    logger.trace(\"Prepare signer: {}\", signer);\n    this.signerCabinet.set(signer);\n  }", "signature": "void prepareSigner(final Signer signer)", "full_signature": "@Override public void prepareSigner(final Signer signer)", "class_method_signature": "ContractInvocationHandler.prepareSigner(final Signer signer)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "trace", "set"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}