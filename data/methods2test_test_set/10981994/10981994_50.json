{"test_class": {"identifier": "ReactiveInvocationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private Target target;", "modifier": "@Mock\n  private", "type": "Target", "declarator": "target", "var_name": "target"}, {"original_string": "@Mock\n  private MethodHandler methodHandler;", "modifier": "@Mock\n  private", "type": "MethodHandler", "declarator": "methodHandler", "var_name": "methodHandler"}, {"original_string": "private Method method;", "modifier": "private", "type": "Method", "declarator": "method", "var_name": "method"}], "file": "reactive/src/test/java/feign/reactive/ReactiveInvocationHandlerTest.java"}, "test_case": {"identifier": "invokeFailureRxJava", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invokeFailureRxJava() throws Throwable {\n    given(this.methodHandler.invoke(any())).willThrow(new IOException(\"Could Not Decode\"));\n    RxJavaInvocationHandler handler =\n        new RxJavaInvocationHandler(this.target,\n            Collections.singletonMap(this.method, this.methodHandler),\n            io.reactivex.schedulers.Schedulers.trampoline());\n\n    Object result = handler.invoke(this.method, this.methodHandler, new Object[] {});\n    assertThat(result).isInstanceOf(Flowable.class);\n    verifyZeroInteractions(this.methodHandler);\n\n    /* subscribe and execute the method */\n    StepVerifier.create((Flowable) result)\n        .expectError(IOException.class)\n        .verify();\n    verify(this.methodHandler, times(1)).invoke(any());\n  }", "signature": "void invokeFailureRxJava()", "full_signature": "@Test public void invokeFailureRxJava()", "class_method_signature": "ReactiveInvocationHandlerTest.invokeFailureRxJava()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "invoke", "any", "singletonMap", "trampoline", "invoke", "isInstanceOf", "assertThat", "verifyZeroInteractions", "verify", "expectError", "create", "invoke", "verify", "times", "any"]}, "focal_class": {"identifier": "ReactiveInvocationHandler", "superclass": "", "interfaces": "implements InvocationHandler", "fields": [{"original_string": "private final Target<?> target;", "modifier": "private final", "type": "Target<?>", "declarator": "target", "var_name": "target"}, {"original_string": "private final Map<Method, MethodHandler> dispatch;", "modifier": "private final", "type": "Map<Method, MethodHandler>", "declarator": "dispatch", "var_name": "dispatch"}], "methods": [{"identifier": "ReactiveInvocationHandler", "parameters": "(Target<?> target,\n      Map<Method, MethodHandler> dispatch)", "modifiers": "public", "return": "", "signature": " ReactiveInvocationHandler(Target<?> target,\n      Map<Method, MethodHandler> dispatch)", "full_signature": "public  ReactiveInvocationHandler(Target<?> target,\n      Map<Method, MethodHandler> dispatch)", "class_method_signature": "ReactiveInvocationHandler.ReactiveInvocationHandler(Target<?> target,\n      Map<Method, MethodHandler> dispatch)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "ReactiveInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReactiveInvocationHandler.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ReactiveInvocationHandler.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReactiveInvocationHandler.toString()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Method method,\n                                      MethodHandler methodHandler,\n                                      Object[] arguments)", "modifiers": "protected abstract", "return": "Publisher", "signature": "Publisher invoke(Method method,\n                                      MethodHandler methodHandler,\n                                      Object[] arguments)", "full_signature": "protected abstract Publisher invoke(Method method,\n                                      MethodHandler methodHandler,\n                                      Object[] arguments)", "class_method_signature": "ReactiveInvocationHandler.invoke(Method method,\n                                      MethodHandler methodHandler,\n                                      Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(MethodHandler methodHandler, Object[] arguments)", "modifiers": "", "return": "Publisher<?>", "signature": "Publisher<?> invokeMethod(MethodHandler methodHandler, Object[] arguments)", "full_signature": " Publisher<?> invokeMethod(MethodHandler methodHandler, Object[] arguments)", "class_method_signature": "ReactiveInvocationHandler.invokeMethod(MethodHandler methodHandler, Object[] arguments)", "testcase": false, "constructor": false}], "file": "reactive/src/main/java/feign/reactive/ReactiveInvocationHandler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    if (\"equals\".equals(method.getName())) {\n      try {\n        Object otherHandler =\n            args.length > 0 && args[0] != null ? Proxy.getInvocationHandler(args[0]) : null;\n        return equals(otherHandler);\n      } catch (IllegalArgumentException e) {\n        return false;\n      }\n    } else if (\"hashCode\".equals(method.getName())) {\n      return hashCode();\n    } else if (\"toString\".equals(method.getName())) {\n      return toString();\n    }\n    return this.invoke(method, this.dispatch.get(method), args);\n  }", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "ReactiveInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false, "invocations": ["equals", "getName", "getInvocationHandler", "equals", "equals", "getName", "hashCode", "equals", "getName", "toString", "invoke", "get"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}