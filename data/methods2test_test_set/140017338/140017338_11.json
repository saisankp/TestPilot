{"test_class": {"identifier": "ManifestResolverTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Mock\n    private IProject iProject = mock(IProject.class);", "modifier": "@Mock\n    private", "type": "IProject", "declarator": "iProject = mock(IProject.class)", "var_name": "iProject"}, {"original_string": "private JarCreator jarCreator;", "modifier": "private", "type": "JarCreator", "declarator": "jarCreator", "var_name": "jarCreator"}, {"original_string": "private ManifestResolver resolver;", "modifier": "private", "type": "ManifestResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "modules/maven/src/test/java/org/eclipse/sw360/antenna/maven/workflow/processors/enricher/ManifestResolverTest.java"}, "test_case": {"identifier": "testWithoutManifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutManifest() throws IOException {\n        Path jarWithoutManifest = jarCreator.createJarWithoutManifest();\n        List<Artifact> artifacts = makeArtifacts(jarWithoutManifest);\n\n        resolver.process(artifacts);\n\n        Assertions.assertThat(artifacts.get(0).getCoordinateForType(Coordinate.Types.P2).isPresent())\n                .isFalse();\n    }", "signature": "void testWithoutManifest()", "full_signature": "@Test public void testWithoutManifest()", "class_method_signature": "ManifestResolverTest.testWithoutManifest()", "testcase": true, "constructor": false, "invocations": ["createJarWithoutManifest", "makeArtifacts", "process", "isFalse", "assertThat", "isPresent", "getCoordinateForType", "get"]}, "focal_class": {"identifier": "ManifestResolver", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ManifestResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ManifestResolver.class)", "var_name": "LOGGER"}, {"original_string": "private Path basePath;", "modifier": "private", "type": "Path", "declarator": "basePath", "var_name": "basePath"}], "methods": [{"identifier": "ManifestResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " ManifestResolver()", "full_signature": "public  ManifestResolver()", "class_method_signature": "ManifestResolver.ManifestResolver()", "testcase": false, "constructor": true}, {"identifier": "setAntennaContext", "parameters": "(AntennaContext context)", "modifiers": "@Override public", "return": "void", "signature": "void setAntennaContext(AntennaContext context)", "full_signature": "@Override public void setAntennaContext(AntennaContext context)", "class_method_signature": "ManifestResolver.setAntennaContext(AntennaContext context)", "testcase": false, "constructor": false}, {"identifier": "resolveManifest", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "private", "return": "void", "signature": "void resolveManifest(Collection<Artifact> artifacts)", "full_signature": "private void resolveManifest(Collection<Artifact> artifacts)", "class_method_signature": "ManifestResolver.resolveManifest(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "resolveManifest", "parameters": "(Path pathname, Artifact artifact)", "modifiers": "private", "return": "void", "signature": "void resolveManifest(Path pathname, Artifact artifact)", "full_signature": "private void resolveManifest(Path pathname, Artifact artifact)", "class_method_signature": "ManifestResolver.resolveManifest(Path pathname, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setBundleCoordinates", "parameters": "(Artifact artifact, Manifest manifest)", "modifiers": "private", "return": "void", "signature": "void setBundleCoordinates(Artifact artifact, Manifest manifest)", "full_signature": "private void setBundleCoordinates(Artifact artifact, Manifest manifest)", "class_method_signature": "ManifestResolver.setBundleCoordinates(Artifact artifact, Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(Manifest manifest, String attributeName)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getAttribute(Manifest manifest, String attributeName)", "full_signature": "private Optional<String> getAttribute(Manifest manifest, String attributeName)", "class_method_signature": "ManifestResolver.getAttribute(Manifest manifest, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "ManifestResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}], "file": "modules/maven/src/main/java/org/eclipse/sw360/antenna/maven/workflow/processors/enricher/ManifestResolver.java"}, "focal_method": {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "body": "@Override\n    public Collection<Artifact> process(Collection<Artifact> artifacts) {\n        LOGGER.debug(\"Resolve manifest...\");\n        resolveManifest(artifacts);\n        LOGGER.debug(\"Resolve manifest... done\");\n        return artifacts;\n    }", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "ManifestResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["debug", "resolveManifest", "debug"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}