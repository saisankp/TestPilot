{"test_class": {"identifier": "FileDocumentFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static File SEARCH_TEST_FOLDER = new File(System.getProperty(\"java.io.tmpdir\"), \"SearchTestFolder\");", "modifier": "private static", "type": "File", "declarator": "SEARCH_TEST_FOLDER = new File(System.getProperty(\"java.io.tmpdir\"), \"SearchTestFolder\")", "var_name": "SEARCH_TEST_FOLDER"}, {"original_string": "private static FileDocumentFactory fileDocumentFactory;", "modifier": "private static", "type": "FileDocumentFactory", "declarator": "fileDocumentFactory", "var_name": "fileDocumentFactory"}, {"original_string": "private static OLATResourceable olatResourcable;", "modifier": "private static", "type": "OLATResourceable", "declarator": "olatResourcable", "var_name": "olatResourcable"}], "file": "olat7.8/src/test/java/org/olat/lms/search/document/file/FileDocumentFactoryTest.java"}, "test_case": {"identifier": "testCreateHtmlDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateHtmlDocument() throws Exception {\n\n        final String htmlFileName = \"test.html\";\n        final String htmlText = \"<html><head><meta name=\\\"generator\\\" content=\\\"olat-tinymce-1\\\"><meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"></head><body>\"\n                + \"<H1>Test HTML Seite fuer JUnit Test</H1>\" + \"Dies ist<br />der Test&nbsp;Text\" + \"</body></html>\"; // Text = 'Dies ist der Test Text'\n        final String text = \"Test HTML Seite fuer JUnit Test Dies ist der Test\\u00A0Text\"; // must include '\\u00A0' !!! 19.5.2010/cg\n\n        // Create a test HTML File\n        final File htmlFile = new File(SEARCH_TEST_FOLDER, htmlFileName);\n        if (htmlFile.exists()) {\n            htmlFile.delete();\n        }\n\n        String filePath = \"anyFilePath\";\n        FileUtils.save(htmlFile, htmlText, \"utf-8\");\n        try {\n            final SearchResourceContext resourceContext = new SearchResourceContext();\n            resourceContext.setBusinessControlFor(OresHelper.createOLATResourceableType(\"FileDocumentFactoryITCase\"));\n            resourceContext.setFilePath(filePath + \"/\" + htmlFileName);\n            final Document htmlDocument = FileDocumentFactory.createDocument(resourceContext, new LocalFileImpl(htmlFile));\n            // 1. Check content\n            final String content = htmlDocument.get(AbstractOlatDocument.CONTENT_FIELD_NAME);\n            assertEquals(\"Wrong HTML content=\" + content.trim() + \" , must be =\" + text.trim(), text.trim(), content.trim());\n            // 2. Check resourceUrl\n            final String resourceUrl = htmlDocument.get(AbstractOlatDocument.RESOURCEURL_FIELD_NAME);\n            assertEquals(\"Wrong ResourceUrl\", \"[FileDocumentFactoryITCase:0][path=\" + filePath + \"/\" + htmlFileName + \"]\", resourceUrl);\n            // 3. Check File-Type\n            final String fileType = htmlDocument.get(AbstractOlatDocument.FILETYPE_FIELD_NAME);\n            assertEquals(\"Wrong file-type\", \"type.file.html\", fileType);\n        } catch (final IOException e) {\n            fail(\"IOException=\" + e.getMessage());\n        } catch (final DocumentException e) {\n            fail(\"DocumentException=\" + e.getMessage());\n        }\n    }", "signature": "void testCreateHtmlDocument()", "full_signature": "@Test public void testCreateHtmlDocument()", "class_method_signature": "FileDocumentFactoryTest.testCreateHtmlDocument()", "testcase": true, "constructor": false, "invocations": ["exists", "delete", "save", "setBusinessControlFor", "createOLATResourceableType", "setFilePath", "createDocument", "get", "assertEquals", "trim", "trim", "trim", "trim", "get", "assertEquals", "get", "assertEquals", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "FileDocumentFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static boolean pptFileEnabled;", "modifier": "private static", "type": "boolean", "declarator": "pptFileEnabled", "var_name": "pptFileEnabled"}, {"original_string": "private static boolean excelFileEnabled;", "modifier": "private static", "type": "boolean", "declarator": "excelFileEnabled", "var_name": "excelFileEnabled"}, {"original_string": "private final static String PDF_SUFFIX = \"pdf\";", "modifier": "private final static", "type": "String", "declarator": "PDF_SUFFIX = \"pdf\"", "var_name": "PDF_SUFFIX"}, {"original_string": "private final static String EXCEL_SUFFIX = \"xls\";", "modifier": "private final static", "type": "String", "declarator": "EXCEL_SUFFIX = \"xls\"", "var_name": "EXCEL_SUFFIX"}, {"original_string": "private final static String WORD_SUFFIX = \"doc\";", "modifier": "private final static", "type": "String", "declarator": "WORD_SUFFIX = \"doc\"", "var_name": "WORD_SUFFIX"}, {"original_string": "private final static String POWERPOINT_SUFFIX = \"ppt\";", "modifier": "private final static", "type": "String", "declarator": "POWERPOINT_SUFFIX = \"ppt\"", "var_name": "POWERPOINT_SUFFIX"}, {"original_string": "private final static String EXCEL_X_SUFFIX = \"xlsx\";", "modifier": "private final static", "type": "String", "declarator": "EXCEL_X_SUFFIX = \"xlsx\"", "var_name": "EXCEL_X_SUFFIX"}, {"original_string": "private final static String WORD_X_SUFFIX = \"docx\";", "modifier": "private final static", "type": "String", "declarator": "WORD_X_SUFFIX = \"docx\"", "var_name": "WORD_X_SUFFIX"}, {"original_string": "private final static String POWERPOINT_X_SUFFIX = \"pptx\";", "modifier": "private final static", "type": "String", "declarator": "POWERPOINT_X_SUFFIX = \"pptx\"", "var_name": "POWERPOINT_X_SUFFIX"}, {"original_string": "private final static String OD_TEXT_SUFFIX = \"odt\";", "modifier": "private final static", "type": "String", "declarator": "OD_TEXT_SUFFIX = \"odt\"", "var_name": "OD_TEXT_SUFFIX"}, {"original_string": "private final static String OD_SPREADSHEET_SUFFIX = \"ods\";", "modifier": "private final static", "type": "String", "declarator": "OD_SPREADSHEET_SUFFIX = \"ods\"", "var_name": "OD_SPREADSHEET_SUFFIX"}, {"original_string": "private final static String OD_PRESENTATION_SUFFIX = \"odp\";", "modifier": "private final static", "type": "String", "declarator": "OD_PRESENTATION_SUFFIX = \"odp\"", "var_name": "OD_PRESENTATION_SUFFIX"}, {"original_string": "private final static String OD_FORMULA_SUFFIX = \"odf\";", "modifier": "private final static", "type": "String", "declarator": "OD_FORMULA_SUFFIX = \"odf\"", "var_name": "OD_FORMULA_SUFFIX"}, {"original_string": "private final static String OD_GRAPHIC_SUFFIX = \"odg\";", "modifier": "private final static", "type": "String", "declarator": "OD_GRAPHIC_SUFFIX = \"odg\"", "var_name": "OD_GRAPHIC_SUFFIX"}, {"original_string": "private final static String HTML_SUFFIX = \"htm html xhtml\";", "modifier": "private final static", "type": "String", "declarator": "HTML_SUFFIX = \"htm html xhtml\"", "var_name": "HTML_SUFFIX"}, {"original_string": "private final static String XML_SUFFIX = \"xml\";", "modifier": "private final static", "type": "String", "declarator": "XML_SUFFIX = \"xml\"", "var_name": "XML_SUFFIX"}, {"original_string": "private final static String TEXT_SUFFIX = \"txt tex readme csv\";", "modifier": "private final static", "type": "String", "declarator": "TEXT_SUFFIX = \"txt tex readme csv\"", "var_name": "TEXT_SUFFIX"}, {"original_string": "private static final String IMS_MANIFEST_FILE = \"imsmanifest.xml\";", "modifier": "private static final", "type": "String", "declarator": "IMS_MANIFEST_FILE = \"imsmanifest.xml\"", "var_name": "IMS_MANIFEST_FILE"}, {"original_string": "private static List<String> checkFileSizeSuffixes;", "modifier": "private static", "type": "List<String>", "declarator": "checkFileSizeSuffixes", "var_name": "checkFileSizeSuffixes"}, {"original_string": "private static long maxFileSize;", "modifier": "private static", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private final List<String> fileBlackList;", "modifier": "private final", "type": "List<String>", "declarator": "fileBlackList", "var_name": "fileBlackList"}, {"original_string": "private static MimeTypeProvider mimeTypeProvider;", "modifier": "private static", "type": "MimeTypeProvider", "declarator": "mimeTypeProvider", "var_name": "mimeTypeProvider"}, {"original_string": "private int excludedFileSizeCount = 0;", "modifier": "private", "type": "int", "declarator": "excludedFileSizeCount = 0", "var_name": "excludedFileSizeCount"}], "methods": [{"identifier": "FileDocumentFactory", "parameters": "(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "modifiers": "", "return": "", "signature": " FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "full_signature": "  FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "class_method_signature": "FileDocumentFactory.FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "testcase": false, "constructor": true}, {"identifier": "FileDocumentFactory", "parameters": "(final SearchModule searchModule)", "modifiers": "public", "return": "", "signature": " FileDocumentFactory(final SearchModule searchModule)", "full_signature": "public  FileDocumentFactory(final SearchModule searchModule)", "class_method_signature": "FileDocumentFactory.FileDocumentFactory(final SearchModule searchModule)", "testcase": false, "constructor": true}, {"identifier": "createDocument", "parameters": "(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "modifiers": "public static", "return": "Document", "signature": "Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "full_signature": "public static Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "testcase": false, "constructor": false}, {"identifier": "getSuffix", "parameters": "(final String fileName)", "modifiers": "private static", "return": "String", "signature": "String getSuffix(final String fileName)", "full_signature": "private static String getSuffix(final String fileName)", "class_method_signature": "FileDocumentFactory.getSuffix(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "isFileSupported", "parameters": "(final VFSLeaf leaf)", "modifiers": "public", "return": "boolean", "signature": "boolean isFileSupported(final VFSLeaf leaf)", "full_signature": "public boolean isFileSupported(final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.isFileSupported(final VFSLeaf leaf)", "testcase": false, "constructor": false}, {"identifier": "getExcludedFileSizeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExcludedFileSizeCount()", "full_signature": "public int getExcludedFileSizeCount()", "class_method_signature": "FileDocumentFactory.getExcludedFileSizeCount()", "testcase": false, "constructor": false}, {"identifier": "resetExcludedFileSizeCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetExcludedFileSizeCount()", "full_signature": "public void resetExcludedFileSizeCount()", "class_method_signature": "FileDocumentFactory.resetExcludedFileSizeCount()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/search/document/file/FileDocumentFactory.java"}, "focal_method": {"identifier": "createDocument", "parameters": "(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "modifiers": "public static", "return": "Document", "body": "public static Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf) throws IOException, DocumentException {\n\n        final String fileName = leaf.getName();\n        final String suffix = getSuffix(fileName);\n        if (log.isDebugEnabled()) {\n            log.debug(\"suffix=\" + suffix);\n        }\n\n        if (PDF_SUFFIX.indexOf(suffix) >= 0) {\n            return PdfDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n        if (HTML_SUFFIX.indexOf(suffix) >= 0) {\n            return HtmlDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n        if (XML_SUFFIX.indexOf(suffix) >= 0) {\n            if (IMS_MANIFEST_FILE.equals(fileName)) {\n                return IMSMetadataDocument.createDocument(leafResourceContext, leaf);\n            }\n            return XmlDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n        if (TEXT_SUFFIX.indexOf(suffix) >= 0) {\n            return TextDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n\n        // microsoft openxml\n        if (suffix.indexOf(WORD_X_SUFFIX) >= 0) {\n            return WordOOXMLDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n        if (suffix.indexOf(EXCEL_X_SUFFIX) >= 0) {\n            if (excelFileEnabled) {\n                return ExcelOOXMLDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n            }\n            throw new DocumentNotEnabledException(\"Indexing of Excel files (xlsx) is not enabled.\");\n        }\n        if (suffix.indexOf(POWERPOINT_X_SUFFIX) >= 0) {\n            if (pptFileEnabled) {\n                return PowerPointOOXMLDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n            }\n            throw new DocumentNotEnabledException(\"Indexing of PowerPoint files (pptx) is not enabled.\");\n        }\n\n        // microsoft\n        if (WORD_SUFFIX.indexOf(suffix) >= 0) {\n            return WordDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n        if (POWERPOINT_SUFFIX.indexOf(suffix) >= 0) {\n            if (pptFileEnabled) {\n                return PowerPointDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n            }\n            throw new DocumentNotEnabledException(\"Indexing of PowerPoint files (ppt) is not enabled.\");\n        }\n        if (EXCEL_SUFFIX.indexOf(suffix) >= 0) {\n            if (excelFileEnabled) {\n                return ExcelDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n            }\n            throw new DocumentNotEnabledException(\"Indexing of Excel files (xls) is not enabled.\");\n        }\n\n        // open document\n        if (OD_TEXT_SUFFIX.indexOf(suffix) >= 0 || OD_SPREADSHEET_SUFFIX.indexOf(suffix) >= 0 || OD_PRESENTATION_SUFFIX.indexOf(suffix) >= 0\n                || OD_FORMULA_SUFFIX.indexOf(suffix) >= 0 || OD_GRAPHIC_SUFFIX.indexOf(suffix) >= 0) {\n            return OpenDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n        }\n\n        return UnkownDocument.createDocument(leafResourceContext, leaf, mimeTypeProvider.getMimeType(suffix));\n    }", "signature": "Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "full_signature": "public static Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "testcase": false, "constructor": false, "invocations": ["getName", "getSuffix", "isDebugEnabled", "debug", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "equals", "createDocument", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "createDocument", "getMimeType", "indexOf", "indexOf", "indexOf", "indexOf", "indexOf", "createDocument", "getMimeType", "createDocument", "getMimeType"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}