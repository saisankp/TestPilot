{"test_class": {"identifier": "WebServiceMessageReceiverHandlerAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REQUEST = \" <SOAP-ENV:Envelope\\n\"\n\t\t\t+ \"  xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\n\"\n\t\t\t+ \"  SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\\n\" + \"\t  <SOAP-ENV:Body>\\n\"\n\t\t\t+ \"\t\t<m:GetLastTradePrice xmlns:m=\\\"Some-URI\\\">\\n\" + \"\t\t\t<symbol>DIS</symbol>\\n\"\n\t\t\t+ \"\t\t</m:GetLastTradePrice>\\n\" + \"\t</SOAP-ENV:Body>\\n\" + \"</SOAP-ENV:Envelope>\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST = \" <SOAP-ENV:Envelope\\n\"\n\t\t\t+ \"  xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\n\"\n\t\t\t+ \"  SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\\n\" + \"\t  <SOAP-ENV:Body>\\n\"\n\t\t\t+ \"\t\t<m:GetLastTradePrice xmlns:m=\\\"Some-URI\\\">\\n\" + \"\t\t\t<symbol>DIS</symbol>\\n\"\n\t\t\t+ \"\t\t</m:GetLastTradePrice>\\n\" + \"\t</SOAP-ENV:Body>\\n\" + \"</SOAP-ENV:Envelope>\"", "var_name": "REQUEST"}, {"original_string": "private WebServiceMessageReceiverHandlerAdapter adapter;", "modifier": "private", "type": "WebServiceMessageReceiverHandlerAdapter", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "private MockHttpServletRequest httpRequest;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "httpRequest", "var_name": "httpRequest"}, {"original_string": "private MockHttpServletResponse httpResponse;", "modifier": "private", "type": "MockHttpServletResponse", "declarator": "httpResponse", "var_name": "httpResponse"}, {"original_string": "private WebServiceMessageFactory factoryMock;", "modifier": "private", "type": "WebServiceMessageFactory", "declarator": "factoryMock", "var_name": "factoryMock"}, {"original_string": "private FaultAwareWebServiceMessage responseMock;", "modifier": "private", "type": "FaultAwareWebServiceMessage", "declarator": "responseMock", "var_name": "responseMock"}, {"original_string": "private FaultAwareWebServiceMessage requestMock;", "modifier": "private", "type": "FaultAwareWebServiceMessage", "declarator": "requestMock", "var_name": "requestMock"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/transport/http/WebServiceMessageReceiverHandlerAdapterTest.java"}, "test_case": {"identifier": "testHandlePostFault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHandlePostFault() throws Exception {\n\t\thttpRequest.setMethod(HttpTransportConstants.METHOD_POST);\n\t\thttpRequest.setContent(REQUEST.getBytes(\"UTF-8\"));\n\t\thttpRequest.setContentType(\"text/xml; charset=\\\"utf-8\\\"\");\n\t\thttpRequest.setCharacterEncoding(\"UTF-8\");\n\t\texpect(factoryMock.createWebServiceMessage(isA(InputStream.class))).andReturn(requestMock);\n\t\texpect(factoryMock.createWebServiceMessage()).andReturn(responseMock);\n\t\texpect(responseMock.getFaultCode()).andReturn(SoapVersion.SOAP_11.getServerOrReceiverFaultName());\n\t\tresponseMock.writeTo(isA(OutputStream.class));\n\n\t\treplayMockControls();\n\t\tWebServiceMessageReceiver endpoint = new WebServiceMessageReceiver() {\n\n\t\t\t@Override\n\t\t\tpublic void receive(MessageContext messageContext) throws Exception {\n\t\t\t\tmessageContext.getResponse();\n\t\t\t}\n\t\t};\n\n\t\tadapter.handle(httpRequest, httpResponse, endpoint);\n\n\t\tAssert.assertEquals(\"Invalid status code on response\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\t\t\t\thttpResponse.getStatus());\n\t\tverifyMockControls();\n\t}", "signature": "void testHandlePostFault()", "full_signature": "@Test public void testHandlePostFault()", "class_method_signature": "WebServiceMessageReceiverHandlerAdapterTest.testHandlePostFault()", "testcase": true, "constructor": false, "invocations": ["setMethod", "setContent", "getBytes", "setContentType", "setCharacterEncoding", "andReturn", "expect", "createWebServiceMessage", "isA", "andReturn", "expect", "createWebServiceMessage", "andReturn", "expect", "getFaultCode", "getServerOrReceiverFaultName", "writeTo", "isA", "replayMockControls", "getResponse", "handle", "assertEquals", "getStatus", "verifyMockControls"]}, "focal_class": {"identifier": "WebServiceMessageReceiverHandlerAdapter", "superclass": "extends WebServiceMessageReceiverObjectSupport", "interfaces": "implements HandlerAdapter", "fields": [], "methods": [{"identifier": "getLastModified", "parameters": "(HttpServletRequest request, Object handler)", "modifiers": "@Override public", "return": "long", "signature": "long getLastModified(HttpServletRequest request, Object handler)", "full_signature": "@Override public long getLastModified(HttpServletRequest request, Object handler)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.getLastModified(HttpServletRequest request, Object handler)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "modifiers": "@Override public", "return": "ModelAndView", "signature": "ModelAndView handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "full_signature": "@Override public ModelAndView handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Object handler)", "full_signature": "@Override public boolean supports(Object handler)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.supports(Object handler)", "testcase": false, "constructor": false}, {"identifier": "handleNonPostMethod", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "modifiers": "protected", "return": "void", "signature": "void handleNonPostMethod(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "full_signature": "protected void handleNonPostMethod(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.handleNonPostMethod(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "testcase": false, "constructor": false}, {"identifier": "handleInvalidXmlException", "parameters": "(HttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse, Object handler, InvalidXmlException ex)", "modifiers": "protected", "return": "void", "signature": "void handleInvalidXmlException(HttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse, Object handler, InvalidXmlException ex)", "full_signature": "protected void handleInvalidXmlException(HttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse, Object handler, InvalidXmlException ex)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.handleInvalidXmlException(HttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse, Object handler, InvalidXmlException ex)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/transport/http/WebServiceMessageReceiverHandlerAdapter.java"}, "focal_method": {"identifier": "handle", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "modifiers": "@Override public", "return": "ModelAndView", "body": "@Override\n\tpublic ModelAndView handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler) throws Exception {\n\t\tif (HttpTransportConstants.METHOD_POST.equals(httpServletRequest.getMethod())) {\n\t\t\tWebServiceConnection connection = new HttpServletConnection(httpServletRequest, httpServletResponse);\n\t\t\ttry {\n\t\t\t\thandleConnection(connection, (WebServiceMessageReceiver) handler);\n\t\t\t} catch (InvalidXmlException ex) {\n\t\t\t\thandleInvalidXmlException(httpServletRequest, httpServletResponse, handler, ex);\n\t\t\t}\n\t\t} else {\n\t\t\thandleNonPostMethod(httpServletRequest, httpServletResponse, handler);\n\t\t}\n\t\treturn null;\n\t}", "signature": "ModelAndView handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "full_signature": "@Override public ModelAndView handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "class_method_signature": "WebServiceMessageReceiverHandlerAdapter.handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n\t\t\tObject handler)", "testcase": false, "constructor": false, "invocations": ["equals", "getMethod", "handleConnection", "handleInvalidXmlException", "handleNonPostMethod"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}