{"test_class": {"identifier": "LongRunningProcessManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/tensorflow/src/test/java/org/apache/ignite/tensorflow/core/longrunning/LongRunningProcessManagerTest.java"}, "test_case": {"identifier": "testStart", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testStart() {\n        UUID nodeId = UUID.randomUUID();\n        UUID procId = UUID.randomUUID();\n\n        Ignite ignite = mock(Ignite.class);\n        IgniteCluster cluster = mock(IgniteCluster.class);\n        ClusterGroup clusterGrp = mock(ClusterGroup.class);\n        IgniteCompute igniteCompute = mock(IgniteCompute.class);\n        doReturn(cluster).when(ignite).cluster();\n        doReturn(igniteCompute).when(ignite).compute(eq(clusterGrp));\n        doReturn(clusterGrp).when(cluster).forNodeId(eq(nodeId));\n        doReturn(Collections.singletonList(procId)).when(igniteCompute).call(any(IgniteCallable.class));\n\n        List<LongRunningProcess> list = Collections.singletonList(new LongRunningProcess(nodeId, () -> {}));\n\n        LongRunningProcessManager mgr = new LongRunningProcessManager(ignite);\n        Map<UUID, List<UUID>> res = mgr.start(list);\n\n        assertEquals(1, res.size());\n        assertTrue(res.containsKey(nodeId));\n        assertEquals(procId, res.get(nodeId).iterator().next());\n\n        verify(igniteCompute).call(any(LongRunningProcessStartTask.class));\n    }", "signature": "void testStart()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testStart()", "class_method_signature": "LongRunningProcessManagerTest.testStart()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "randomUUID", "mock", "mock", "mock", "mock", "cluster", "when", "doReturn", "compute", "when", "doReturn", "eq", "forNodeId", "when", "doReturn", "eq", "call", "when", "doReturn", "singletonList", "any", "singletonList", "start", "assertEquals", "size", "assertTrue", "containsKey", "assertEquals", "next", "iterator", "get", "call", "verify", "any"]}, "focal_class": {"identifier": "LongRunningProcessManager", "superclass": "", "interfaces": "implements ProcessManager<LongRunningProcess>", "fields": [{"original_string": "private final Ignite ignite;", "modifier": "private final", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}], "methods": [{"identifier": "LongRunningProcessManager", "parameters": "(Ignite ignite)", "modifiers": "public", "return": "", "signature": " LongRunningProcessManager(Ignite ignite)", "full_signature": "public  LongRunningProcessManager(Ignite ignite)", "class_method_signature": "LongRunningProcessManager.LongRunningProcessManager(Ignite ignite)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(List<LongRunningProcess> specifications)", "modifiers": "@Override public", "return": "Map<UUID, List<UUID>>", "signature": "Map<UUID, List<UUID>> start(List<LongRunningProcess> specifications)", "full_signature": "@Override public Map<UUID, List<UUID>> start(List<LongRunningProcess> specifications)", "class_method_signature": "LongRunningProcessManager.start(List<LongRunningProcess> specifications)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "(Map<UUID, List<UUID>> procIds)", "modifiers": "@Override public", "return": "Map<UUID, List<LongRunningProcessStatus>>", "signature": "Map<UUID, List<LongRunningProcessStatus>> ping(Map<UUID, List<UUID>> procIds)", "full_signature": "@Override public Map<UUID, List<LongRunningProcessStatus>> ping(Map<UUID, List<UUID>> procIds)", "class_method_signature": "LongRunningProcessManager.ping(Map<UUID, List<UUID>> procIds)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(Map<UUID, List<UUID>> procIds, boolean clear)", "modifiers": "@Override public", "return": "Map<UUID, List<LongRunningProcessStatus>>", "signature": "Map<UUID, List<LongRunningProcessStatus>> stop(Map<UUID, List<UUID>> procIds, boolean clear)", "full_signature": "@Override public Map<UUID, List<LongRunningProcessStatus>> stop(Map<UUID, List<UUID>> procIds, boolean clear)", "class_method_signature": "LongRunningProcessManager.stop(Map<UUID, List<UUID>> procIds, boolean clear)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(Map<UUID, List<UUID>> procIds)", "modifiers": "@Override public", "return": "Map<UUID, List<LongRunningProcessStatus>>", "signature": "Map<UUID, List<LongRunningProcessStatus>> clear(Map<UUID, List<UUID>> procIds)", "full_signature": "@Override public Map<UUID, List<LongRunningProcessStatus>> clear(Map<UUID, List<UUID>> procIds)", "class_method_signature": "LongRunningProcessManager.clear(Map<UUID, List<UUID>> procIds)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(Map<UUID, List<T>> params,\n        Function<List<T>, LongRunningProcessTask<List<E>>> taskSupplier, Consumer<Map<UUID, List<E>>> rollback,\n        boolean onlyIfNodeExists)", "modifiers": "private", "return": "Map<UUID, List<E>>", "signature": "Map<UUID, List<E>> call(Map<UUID, List<T>> params,\n        Function<List<T>, LongRunningProcessTask<List<E>>> taskSupplier, Consumer<Map<UUID, List<E>>> rollback,\n        boolean onlyIfNodeExists)", "full_signature": "private Map<UUID, List<E>> call(Map<UUID, List<T>> params,\n        Function<List<T>, LongRunningProcessTask<List<E>>> taskSupplier, Consumer<Map<UUID, List<E>>> rollback,\n        boolean onlyIfNodeExists)", "class_method_signature": "LongRunningProcessManager.call(Map<UUID, List<T>> params,\n        Function<List<T>, LongRunningProcessTask<List<E>>> taskSupplier, Consumer<Map<UUID, List<E>>> rollback,\n        boolean onlyIfNodeExists)", "testcase": false, "constructor": false}, {"identifier": "groupByNodeId", "parameters": "(List<LongRunningProcess> specifications)", "modifiers": "private", "return": "Map<UUID, List<LongRunningProcess>>", "signature": "Map<UUID, List<LongRunningProcess>> groupByNodeId(List<LongRunningProcess> specifications)", "full_signature": "private Map<UUID, List<LongRunningProcess>> groupByNodeId(List<LongRunningProcess> specifications)", "class_method_signature": "LongRunningProcessManager.groupByNodeId(List<LongRunningProcess> specifications)", "testcase": false, "constructor": false}, {"identifier": "rollbackStartTask", "parameters": "(Map<UUID, List<UUID>> procIds)", "modifiers": "private", "return": "void", "signature": "void rollbackStartTask(Map<UUID, List<UUID>> procIds)", "full_signature": "private void rollbackStartTask(Map<UUID, List<UUID>> procIds)", "class_method_signature": "LongRunningProcessManager.rollbackStartTask(Map<UUID, List<UUID>> procIds)", "testcase": false, "constructor": false}, {"identifier": "rollbackNothing", "parameters": "(Map<UUID, List<LongRunningProcessStatus>> processes)", "modifiers": "private", "return": "void", "signature": "void rollbackNothing(Map<UUID, List<LongRunningProcessStatus>> processes)", "full_signature": "private void rollbackNothing(Map<UUID, List<LongRunningProcessStatus>> processes)", "class_method_signature": "LongRunningProcessManager.rollbackNothing(Map<UUID, List<LongRunningProcessStatus>> processes)", "testcase": false, "constructor": false}], "file": "modules/tensorflow/src/main/java/org/apache/ignite/tensorflow/core/longrunning/LongRunningProcessManager.java"}, "focal_method": {"identifier": "start", "parameters": "(List<LongRunningProcess> specifications)", "modifiers": "@Override public", "return": "Map<UUID, List<UUID>>", "body": "@Override public Map<UUID, List<UUID>> start(List<LongRunningProcess> specifications) {\n        return call(groupByNodeId(specifications), LongRunningProcessStartTask::new, this::rollbackStartTask, false);\n    }", "signature": "Map<UUID, List<UUID>> start(List<LongRunningProcess> specifications)", "full_signature": "@Override public Map<UUID, List<UUID>> start(List<LongRunningProcess> specifications)", "class_method_signature": "LongRunningProcessManager.start(List<LongRunningProcess> specifications)", "testcase": false, "constructor": false, "invocations": ["call", "groupByNodeId"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}