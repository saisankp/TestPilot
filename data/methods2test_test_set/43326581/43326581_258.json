{"test_class": {"identifier": "AttachmentStreamConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    public DatabaseConnector connector;", "modifier": "@Mock\n    public", "type": "DatabaseConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "@Mock\n    private AttachmentContentDownloader attachmentContentDownloader;", "modifier": "@Mock\n    private", "type": "AttachmentContentDownloader", "declarator": "attachmentContentDownloader", "var_name": "attachmentContentDownloader"}, {"original_string": "private User dummyUser = new User().setEmail(\"dummy@some.domain\");", "modifier": "private", "type": "User", "declarator": "dummyUser = new User().setEmail(\"dummy@some.domain\")", "var_name": "dummyUser"}, {"original_string": "AttachmentStreamConnector attachmentStreamConnector;", "modifier": "", "type": "AttachmentStreamConnector", "declarator": "attachmentStreamConnector", "var_name": "attachmentStreamConnector"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/couchdb/AttachmentStreamConnectorTest.java"}, "test_case": {"identifier": "testGetConcatenatedStreamReadThrowsOnNonExistent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConcatenatedStreamReadThrowsOnNonExistent() throws Exception {\n        AttachmentContent attachment = mock(AttachmentContent.class);\n        when(attachment.isOnlyRemote()).thenReturn(false);\n\n        when(attachment.isSetPartsCount()).thenReturn(true);\n        when(attachment.getPartsCount()).thenReturn(\"2\");\n\n        when(attachment.getFilename()).thenReturn(\"fil\");\n\n        String attachmentId = \"id\";\n        when(attachment.getId()).thenReturn(attachmentId);\n\n        AttachmentInputStream part1 = mock(AttachmentInputStream.class);\n        when(connector.getAttachment(attachmentId, \"fil_part1\")).thenReturn(part1);\n\n        when(connector.getAttachment(attachmentId, \"fil_part2\")).thenThrow(new DocumentNotFoundException(\"\"));\n\n        when(part1.read()).thenReturn(1, -1);\n        InputStream attachmentStream = attachmentStreamConnector.getAttachmentStream(attachment, dummyUser,\n                new Project()\n                        .setVisbility(Visibility.ME_AND_MODERATORS)\n                        .setCreatedBy(dummyUser.getEmail())\n                        .setAttachments(Collections.singleton(new Attachment().setAttachmentContentId(attachmentId))));\n\n        assertThat(attachmentStream.read(), is(1));\n\n        try {\n            assertThat(attachmentStream.read(), is(2));\n            fail(\"expected Exception not thrown\");\n        } catch (IOException ignored) {\n\n        }\n\n        verify(part1).close();\n    }", "signature": "void testGetConcatenatedStreamReadThrowsOnNonExistent()", "full_signature": "@Test public void testGetConcatenatedStreamReadThrowsOnNonExistent()", "class_method_signature": "AttachmentStreamConnectorTest.testGetConcatenatedStreamReadThrowsOnNonExistent()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isOnlyRemote", "thenReturn", "when", "isSetPartsCount", "thenReturn", "when", "getPartsCount", "thenReturn", "when", "getFilename", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "getAttachment", "thenThrow", "when", "getAttachment", "thenReturn", "when", "read", "getAttachmentStream", "setAttachments", "setCreatedBy", "setVisbility", "getEmail", "singleton", "setAttachmentContentId", "assertThat", "read", "is", "assertThat", "read", "is", "fail", "close", "verify"]}, "focal_class": {"identifier": "AttachmentStreamConnector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(AttachmentStreamConnector.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(AttachmentStreamConnector.class)", "var_name": "log"}, {"original_string": "protected final DatabaseConnector connector;", "modifier": "protected final", "type": "DatabaseConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final AttachmentContentDownloader attachmentContentDownloader;", "modifier": "private final", "type": "AttachmentContentDownloader", "declarator": "attachmentContentDownloader", "var_name": "attachmentContentDownloader"}, {"original_string": "private final Duration downloadTimeout;", "modifier": "private final", "type": "Duration", "declarator": "downloadTimeout", "var_name": "downloadTimeout"}], "methods": [{"identifier": "AttachmentStreamConnector", "parameters": "(Duration downloadTimeout)", "modifiers": "public", "return": "", "signature": " AttachmentStreamConnector(Duration downloadTimeout)", "full_signature": "public  AttachmentStreamConnector(Duration downloadTimeout)", "class_method_signature": "AttachmentStreamConnector.AttachmentStreamConnector(Duration downloadTimeout)", "testcase": false, "constructor": true}, {"identifier": "AttachmentStreamConnector", "parameters": "(DatabaseConnector connector, Duration downloadTimeout)", "modifiers": "public", "return": "", "signature": " AttachmentStreamConnector(DatabaseConnector connector, Duration downloadTimeout)", "full_signature": "public  AttachmentStreamConnector(DatabaseConnector connector, Duration downloadTimeout)", "class_method_signature": "AttachmentStreamConnector.AttachmentStreamConnector(DatabaseConnector connector, Duration downloadTimeout)", "testcase": false, "constructor": true}, {"identifier": "AttachmentStreamConnector", "parameters": "(DatabaseConnector connector, AttachmentContentDownloader attachmentContentDownloader, Duration downloadTimeout)", "modifiers": "public", "return": "", "signature": " AttachmentStreamConnector(DatabaseConnector connector, AttachmentContentDownloader attachmentContentDownloader, Duration downloadTimeout)", "full_signature": "public  AttachmentStreamConnector(DatabaseConnector connector, AttachmentContentDownloader attachmentContentDownloader, Duration downloadTimeout)", "class_method_signature": "AttachmentStreamConnector.AttachmentStreamConnector(DatabaseConnector connector, AttachmentContentDownloader attachmentContentDownloader, Duration downloadTimeout)", "testcase": false, "constructor": true}, {"identifier": "getAttachmentStream", "parameters": "(AttachmentContent attachment, User user, T context)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getAttachmentStream(AttachmentContent attachment, User user, T context)", "full_signature": "public InputStream getAttachmentStream(AttachmentContent attachment, User user, T context)", "class_method_signature": "AttachmentStreamConnector.getAttachmentStream(AttachmentContent attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "unsafeGetAttachmentStream", "parameters": "(AttachmentContent attachment)", "modifiers": "public", "return": "InputStream", "signature": "InputStream unsafeGetAttachmentStream(AttachmentContent attachment)", "full_signature": "public InputStream unsafeGetAttachmentStream(AttachmentContent attachment)", "class_method_signature": "AttachmentStreamConnector.unsafeGetAttachmentStream(AttachmentContent attachment)", "testcase": false, "constructor": false}, {"identifier": "getAttachmentBundleStream", "parameters": "(Set<AttachmentContent> attachments, User user, T context)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getAttachmentBundleStream(Set<AttachmentContent> attachments, User user, T context)", "full_signature": "public InputStream getAttachmentBundleStream(Set<AttachmentContent> attachments, User user, T context)", "class_method_signature": "AttachmentStreamConnector.getAttachmentBundleStream(Set<AttachmentContent> attachments, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "downloadRemoteAttachmentAndUpdate", "parameters": "(AttachmentContent attachmentContent)", "modifiers": "private", "return": "AttachmentContent", "signature": "AttachmentContent downloadRemoteAttachmentAndUpdate(AttachmentContent attachmentContent)", "full_signature": "private AttachmentContent downloadRemoteAttachmentAndUpdate(AttachmentContent attachmentContent)", "class_method_signature": "AttachmentStreamConnector.downloadRemoteAttachmentAndUpdate(AttachmentContent attachmentContent)", "testcase": false, "constructor": false}, {"identifier": "readAttachmentStream", "parameters": "(AttachmentContent attachment)", "modifiers": "protected", "return": "InputStream", "signature": "InputStream readAttachmentStream(AttachmentContent attachment)", "full_signature": "protected InputStream readAttachmentStream(AttachmentContent attachment)", "class_method_signature": "AttachmentStreamConnector.readAttachmentStream(AttachmentContent attachment)", "testcase": false, "constructor": false}, {"identifier": "getConcatenatedAttachmentPartsStream", "parameters": "(final AttachmentContent attachment, final int partsCount)", "modifiers": "protected", "return": "InputStream", "signature": "InputStream getConcatenatedAttachmentPartsStream(final AttachmentContent attachment, final int partsCount)", "full_signature": "protected InputStream getConcatenatedAttachmentPartsStream(final AttachmentContent attachment, final int partsCount)", "class_method_signature": "AttachmentStreamConnector.getConcatenatedAttachmentPartsStream(final AttachmentContent attachment, final int partsCount)", "testcase": false, "constructor": false}, {"identifier": "uploadAttachment", "parameters": "(AttachmentContent attachment, InputStream stream)", "modifiers": "public", "return": "void", "signature": "void uploadAttachment(AttachmentContent attachment, InputStream stream)", "full_signature": "public void uploadAttachment(AttachmentContent attachment, InputStream stream)", "class_method_signature": "AttachmentStreamConnector.uploadAttachment(AttachmentContent attachment, InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uploadAttachmentPart", "parameters": "(AttachmentContent attachmentContent, int part, InputStream stream)", "modifiers": "public", "return": "void", "signature": "void uploadAttachmentPart(AttachmentContent attachmentContent, int part, InputStream stream)", "full_signature": "public void uploadAttachmentPart(AttachmentContent attachmentContent, int part, InputStream stream)", "class_method_signature": "AttachmentStreamConnector.uploadAttachmentPart(AttachmentContent attachmentContent, int part, InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "addAttachmentTo", "parameters": "(String attachmentContentId, String filename, InputStream stream)", "modifiers": "private", "return": "void", "signature": "void addAttachmentTo(String attachmentContentId, String filename, InputStream stream)", "full_signature": "private void addAttachmentTo(String attachmentContentId, String filename, InputStream stream)", "class_method_signature": "AttachmentStreamConnector.addAttachmentTo(String attachmentContentId, String filename, InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getAttachmentPartStream", "parameters": "(AttachmentContent attachment, int part)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getAttachmentPartStream(AttachmentContent attachment, int part)", "full_signature": "public InputStream getAttachmentPartStream(AttachmentContent attachment, int part)", "class_method_signature": "AttachmentStreamConnector.getAttachmentPartStream(AttachmentContent attachment, int part)", "testcase": false, "constructor": false}, {"identifier": "getPartFileName", "parameters": "(AttachmentContent attachment, int part)", "modifiers": "private", "return": "String", "signature": "String getPartFileName(AttachmentContent attachment, int part)", "full_signature": "private String getPartFileName(AttachmentContent attachment, int part)", "class_method_signature": "AttachmentStreamConnector.getPartFileName(AttachmentContent attachment, int part)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/couchdb/AttachmentStreamConnector.java"}, "focal_method": {"identifier": "getAttachmentStream", "parameters": "(AttachmentContent attachment, User user, T context)", "modifiers": "public", "return": "InputStream", "body": "public <T> InputStream getAttachmentStream(AttachmentContent attachment, User user, T context) throws TException {\n        assertNotNull(attachment);\n        assertNotNull(context);\n\n        if(!PermissionUtils.makePermission(context, user)\n                .isAllowedToDownload(attachment)){\n            String msg =\n                    \"The user=[\"+user.getEmail()+\"] tried to download attachment=[\"+ attachment.getId()+\n                    \"] without attachment permissions\";\n            log.warn(msg);\n            throw new SW360Exception(msg);\n        }\n\n        return unsafeGetAttachmentStream(attachment);\n    }", "signature": "InputStream getAttachmentStream(AttachmentContent attachment, User user, T context)", "full_signature": "public InputStream getAttachmentStream(AttachmentContent attachment, User user, T context)", "class_method_signature": "AttachmentStreamConnector.getAttachmentStream(AttachmentContent attachment, User user, T context)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "isAllowedToDownload", "makePermission", "getEmail", "getId", "warn", "unsafeGetAttachmentStream"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}