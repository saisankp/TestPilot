{"test_class": {"identifier": "FilterActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/FilterActionTest.java"}, "test_case": {"identifier": "testQueryNotInFilterMissingField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryNotInFilterMissingField() throws FoxtrotException, JsonProcessingException {\n        Query query = new Query();\n        query.setTable(TestUtils.TEST_TABLE_NAME);\n        query.setLimit(100);\n\n        ResultSort resultSort = new ResultSort();\n        resultSort.setOrder(ResultSort.Order.desc);\n        resultSort.setField(\"_timestamp\");\n        query.setSort(resultSort);\n\n        NotInFilter notInFilter = new NotInFilter();\n        notInFilter.setValues(Lists.newArrayList(\"nexus\", \"galaxy\", \"ipad\", \"iphone\"));\n        notInFilter.setField(\"dummy\");\n\n        query.setFilters(Lists.<Filter>newArrayList(notInFilter));\n        QueryResponse actualResponse = QueryResponse.class.cast(getQueryExecutor().execute(query));\n        assertEquals(9, actualResponse.getDocuments()\n                .size());\n    }", "signature": "void testQueryNotInFilterMissingField()", "full_signature": "@Test public void testQueryNotInFilterMissingField()", "class_method_signature": "FilterActionTest.testQueryNotInFilterMissingField()", "testcase": true, "constructor": false, "invocations": ["setTable", "setLimit", "setOrder", "setField", "setSort", "setValues", "newArrayList", "setField", "setFilters", "newArrayList", "cast", "execute", "getQueryExecutor", "assertEquals", "size", "getDocuments"]}, "focal_class": {"identifier": "FilterAction", "superclass": "extends Action<Query>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FilterAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FilterAction.class)", "var_name": "logger"}], "methods": [{"identifier": "FilterAction", "parameters": "(Query parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "FilterAction.FilterAction(Query parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "FilterAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "FilterAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "FilterAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(Query parameter)", "full_signature": "@Override public void validateImpl(Query parameter)", "class_method_signature": "FilterAction.validateImpl(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(Query parameter)", "full_signature": "@Override public ActionResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(Query parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(Query parameter)", "class_method_signature": "FilterAction.getRequestBuilder(Query parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "class_method_signature": "FilterAction.getResponse(org.elasticsearch.action.ActionResponse response, Query parameter)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/FilterAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(Query parameter) {\n        SearchRequestBuilder search = getRequestBuilder(parameter);\n        try {\n            logger.info(\"Search: {}\", search);\n            SearchResponse response = search.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        } catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(Query parameter)", "full_signature": "@Override public ActionResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "info", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}