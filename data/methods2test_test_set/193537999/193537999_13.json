{"test_class": {"identifier": "AscDataWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "vortex-api/src/test/java/mil/army/usace/hec/vortex/io/AscDataWriterTest.java"}, "test_case": {"identifier": "AscDataWriterWritesDssFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void AscDataWriterWritesDssFile(){\n        String inFile = new File(getClass().getResource(\n                \"/normalizer/qpe.dss\").getFile()).toString();\n        String variableName = \"///PRECIPITATION/02JAN2017:1200/02JAN2017:1300//\";\n\n        DataReader reader = DataReader.builder()\n                .path(inFile)\n                .variable(variableName)\n                .build();\n\n        List<VortexData> dtos = new ArrayList<>(reader.getDtos());\n\n        String fileName = ImageUtils.generateFileName(\"qpe\", (VortexGrid) dtos.get(0), ImageFileType.ASC);\n\n        Path destination = Paths.get(\"C:/Temp\",fileName);\n\n        DataWriter writer = DataWriter.builder()\n                .destination(destination)\n                .data(dtos)\n                .build();\n\n        writer.write();\n    }", "signature": "void AscDataWriterWritesDssFile()", "full_signature": "@Test void AscDataWriterWritesDssFile()", "class_method_signature": "AscDataWriterTest.AscDataWriterWritesDssFile()", "testcase": true, "constructor": false, "invocations": ["toString", "getFile", "getResource", "getClass", "build", "variable", "path", "builder", "getDtos", "generateFileName", "get", "get", "build", "data", "destination", "builder", "write"]}, "focal_class": {"identifier": "AscDataWriter", "superclass": "extends DataWriter", "interfaces": "", "fields": [], "methods": [{"identifier": "AscDataWriter", "parameters": "(DataWriterBuilder builder)", "modifiers": "", "return": "", "signature": " AscDataWriter(DataWriterBuilder builder)", "full_signature": "  AscDataWriter(DataWriterBuilder builder)", "class_method_signature": "AscDataWriter.AscDataWriter(DataWriterBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void write()", "full_signature": "@Override public void write()", "class_method_signature": "AscDataWriter.write()", "testcase": false, "constructor": false}], "file": "vortex-api/src/main/java/mil/army/usace/hec/vortex/io/AscDataWriter.java"}, "focal_method": {"identifier": "write", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write() {\n        List<VortexGrid> grids = data.stream()\n                .filter(vortexData -> vortexData instanceof VortexGrid)\n                .map(vortexData -> (VortexGrid) vortexData)\n                .collect(Collectors.toList());\n\n        grids.forEach(grid -> {\n            VortexGrid gridOut;\n            if (grid.dy() < 0){\n                gridOut = grid;\n            } else {\n                float[] flipped = MatrixUtils.flipArray(grid.data(), grid.nx(), grid.ny());\n                gridOut = VortexGrid.builder()\n                        .dx(grid.dx()).dy(grid.dy())\n                        .nx(grid.nx()).ny(grid.ny())\n                        .originX(grid.originX())\n                        .originY(grid.originY() + grid.dy() * grid.ny())\n                        .wkt(grid.wkt())\n                        .data(flipped)\n                        .units(grid.units())\n                        .fileName(grid.fileName())\n                        .shortName(grid.shortName())\n                        .fullName(grid.fullName())\n                        .description(grid.description())\n                        .startTime(grid.startTime())\n                        .endTime(grid.endTime())\n                        .interval(grid.interval())\n                        .build();\n            }\n\n            Dataset dataset = RasterUtils.getDatasetFromVortexGrid(gridOut);\n            ArrayList<String> gdalOptions = new ArrayList<>();\n            gdalOptions.add(\"-of\");\n            gdalOptions.add(\"AAIGrid\");\n            gdalOptions.add(\"-co\");\n            gdalOptions.add(\"FORCE_CELLSIZE=TRUE\");\n            TranslateOptions translateOptions = new TranslateOptions(new Vector<>(gdalOptions));\n            Dataset out = gdal.Translate(destination.toString(), dataset, translateOptions);\n            out.FlushCache();\n            out.delete();\n        });\n    }", "signature": "void write()", "full_signature": "@Override public void write()", "class_method_signature": "AscDataWriter.write()", "testcase": false, "constructor": false, "invocations": ["collect", "map", "filter", "stream", "toList", "forEach", "dy", "flipArray", "data", "nx", "ny", "build", "interval", "endTime", "startTime", "description", "fullName", "shortName", "fileName", "units", "data", "wkt", "originY", "originX", "ny", "nx", "dy", "dx", "builder", "dx", "dy", "nx", "ny", "originX", "originY", "dy", "ny", "wkt", "units", "fileName", "shortName", "fullName", "description", "startTime", "endTime", "interval", "getDatasetFromVortexGrid", "add", "add", "add", "add", "Translate", "toString", "FlushCache", "delete"]}, "repository": {"repo_id": 193537999, "url": "https://github.com/HydrologicEngineeringCenter/Vortex", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 448543, "license": "licensed"}}