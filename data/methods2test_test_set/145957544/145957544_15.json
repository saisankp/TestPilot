{"test_class": {"identifier": "FileMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder tmpFolder= new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "tmpFolder= new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "kilt-core/src/test/java/de/poiu/kilt/util/FileMatcherTest.java"}, "test_case": {"identifier": "testMatches_canonicalizePaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMatches_canonicalizePaths() {\n    // - preparation\n\n    final Path root= Paths.get(\"/my/root/\");\n    final String[] includes= {\n      \"sub/my.properties\"\n    };\n    final String[] excludes= {\n    };\n    final FileMatcher fileMatcher= new FileMatcher(root, includes, excludes);\n\n    // - execution && verification\n\n    assertThat(fileMatcher.matches(Paths.get(\"/my/root/sub/my.properties\"))).isTrue();\n    assertThat(fileMatcher.matches(Paths.get(\"/my//root//sub//my.properties\"))).isTrue();\n    assertThat(fileMatcher.matches(Paths.get(\"/my/root/../root/sub/my.properties\"))).isTrue();\n  }", "signature": "void testMatches_canonicalizePaths()", "full_signature": "@Test public void testMatches_canonicalizePaths()", "class_method_signature": "FileMatcherTest.testMatches_canonicalizePaths()", "testcase": true, "constructor": false, "invocations": ["get", "isTrue", "assertThat", "matches", "get", "isTrue", "assertThat", "matches", "get", "isTrue", "assertThat", "matches", "get"]}, "focal_class": {"identifier": "FileMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private final Path         root;", "modifier": "private final", "type": "Path", "declarator": "root", "var_name": "root"}, {"original_string": "private final List<String> i18nIncludes;", "modifier": "private final", "type": "List<String>", "declarator": "i18nIncludes", "var_name": "i18nIncludes"}, {"original_string": "private final List<MatchPattern> i18nIncludePatterns;", "modifier": "private final", "type": "List<MatchPattern>", "declarator": "i18nIncludePatterns", "var_name": "i18nIncludePatterns"}, {"original_string": "private final List<String> i18nExcludes;", "modifier": "private final", "type": "List<String>", "declarator": "i18nExcludes", "var_name": "i18nExcludes"}, {"original_string": "private final List<MatchPattern> i18nExcludePatterns;", "modifier": "private final", "type": "List<MatchPattern>", "declarator": "i18nExcludePatterns", "var_name": "i18nExcludePatterns"}], "methods": [{"identifier": "FileMatcher", "parameters": "(final Path root, final String[] i18nIncludes)", "modifiers": "public", "return": "", "signature": " FileMatcher(final Path root, final String[] i18nIncludes)", "full_signature": "public  FileMatcher(final Path root, final String[] i18nIncludes)", "class_method_signature": "FileMatcher.FileMatcher(final Path root, final String[] i18nIncludes)", "testcase": false, "constructor": true}, {"identifier": "FileMatcher", "parameters": "(final Path root, final List<String> i18nIncludes)", "modifiers": "public", "return": "", "signature": " FileMatcher(final Path root, final List<String> i18nIncludes)", "full_signature": "public  FileMatcher(final Path root, final List<String> i18nIncludes)", "class_method_signature": "FileMatcher.FileMatcher(final Path root, final List<String> i18nIncludes)", "testcase": false, "constructor": true}, {"identifier": "FileMatcher", "parameters": "(final Path root, final String[] i18nIncludes, final String[] i18nExcludes)", "modifiers": "public", "return": "", "signature": " FileMatcher(final Path root, final String[] i18nIncludes, final String[] i18nExcludes)", "full_signature": "public  FileMatcher(final Path root, final String[] i18nIncludes, final String[] i18nExcludes)", "class_method_signature": "FileMatcher.FileMatcher(final Path root, final String[] i18nIncludes, final String[] i18nExcludes)", "testcase": false, "constructor": true}, {"identifier": "FileMatcher", "parameters": "(final Path root, final List<String> i18nIncludes, final List<String> i18nExcludes)", "modifiers": "public", "return": "", "signature": " FileMatcher(final Path root, final List<String> i18nIncludes, final List<String> i18nExcludes)", "full_signature": "public  FileMatcher(final Path root, final List<String> i18nIncludes, final List<String> i18nExcludes)", "class_method_signature": "FileMatcher.FileMatcher(final Path root, final List<String> i18nIncludes, final List<String> i18nExcludes)", "testcase": false, "constructor": true}, {"identifier": "toMatchPatterns", "parameters": "(final List<String> filePatterns)", "modifiers": "private", "return": "List<MatchPattern>", "signature": "List<MatchPattern> toMatchPatterns(final List<String> filePatterns)", "full_signature": "private List<MatchPattern> toMatchPatterns(final List<String> filePatterns)", "class_method_signature": "FileMatcher.toMatchPatterns(final List<String> filePatterns)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final Path path)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final Path path)", "full_signature": "public boolean matches(final Path path)", "class_method_signature": "FileMatcher.matches(final Path path)", "testcase": false, "constructor": false}, {"identifier": "findMatchingFiles", "parameters": "()", "modifiers": "public", "return": "Set<File>", "signature": "Set<File> findMatchingFiles()", "full_signature": "public Set<File> findMatchingFiles()", "class_method_signature": "FileMatcher.findMatchingFiles()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getRoot()", "full_signature": "public Path getRoot()", "class_method_signature": "FileMatcher.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getI18nIncludes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getI18nIncludes()", "full_signature": "public List<String> getI18nIncludes()", "class_method_signature": "FileMatcher.getI18nIncludes()", "testcase": false, "constructor": false}, {"identifier": "getI18nExcludes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getI18nExcludes()", "full_signature": "public List<String> getI18nExcludes()", "class_method_signature": "FileMatcher.getI18nExcludes()", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/util/FileMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final Path path)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(final Path path) {\n    final Path canonicalPath= this.root.resolve(path).toAbsolutePath().normalize();\n\n    // if the path matches an exclude pattern, we can return false\n    for (final MatchPattern matchPattern : this.i18nExcludePatterns) {\n      // FIXME: How to decide whether to be case sensitive or not? Can we ask the filesystem?\n      //        No builtin way in Java. We would need to write a file to check: https://stackoverflow.com/a/58349517/572645\n      if (matchPattern.matchPath(canonicalPath.toString(), true)) {\n        return false;\n      }\n    }\n\n    // if the path matches an include pattern, we can return true\n    for (final MatchPattern matchPattern : this.i18nIncludePatterns) {\n      if (matchPattern.matchPath(canonicalPath.toString(), true)) {\n        return true;\n      }\n    }\n\n    // if there was no match, it obviously didn't match\n    return false;\n  }", "signature": "boolean matches(final Path path)", "full_signature": "public boolean matches(final Path path)", "class_method_signature": "FileMatcher.matches(final Path path)", "testcase": false, "constructor": false, "invocations": ["normalize", "toAbsolutePath", "resolve", "matchPath", "toString", "matchPath", "toString"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}