{"test_class": {"identifier": "StringIsPrefixOfTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Attribute<String, String> stringIdentity = new SelfAttribute<String>(String.class, \"identity\");", "modifier": "", "type": "Attribute<String, String>", "declarator": "stringIdentity = new SelfAttribute<String>(String.class, \"identity\")", "var_name": "stringIdentity"}], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/StringIsPrefixOfTest.java"}, "test_case": {"identifier": "testMatchesSimpleAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchesSimpleAttribute() throws Exception {\n        \n        assertTrue(isPrefixOf(stringIdentity, \"FOO\").matches(\"F\", noQueryOptions()));\n        assertTrue(isPrefixOf(stringIdentity, \"FOO\").matches(\"FO\", noQueryOptions()));\n        assertTrue(isPrefixOf(stringIdentity, \"FOO\").matches(\"FOO\", noQueryOptions()));\n        \n        assertFalse(isPrefixOf(stringIdentity, \"FOO\").matches(\"OO\", noQueryOptions()));\n        assertFalse(isPrefixOf(stringIdentity, \"FOO\").matches(\"BOO\", noQueryOptions()));\n        assertFalse(isPrefixOf(stringIdentity, \"FOO\").matches(\"FOOOD\", noQueryOptions()));\n        \n    }", "signature": "void testMatchesSimpleAttribute()", "full_signature": "@Test public void testMatchesSimpleAttribute()", "class_method_signature": "StringIsPrefixOfTest.testMatchesSimpleAttribute()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "isPrefixOf", "noQueryOptions", "assertTrue", "matches", "isPrefixOf", "noQueryOptions", "assertTrue", "matches", "isPrefixOf", "noQueryOptions", "assertFalse", "matches", "isPrefixOf", "noQueryOptions", "assertFalse", "matches", "isPrefixOf", "noQueryOptions", "assertFalse", "matches", "isPrefixOf", "noQueryOptions"]}, "focal_class": {"identifier": "StringIsPrefixOf", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [{"original_string": "private final A value;", "modifier": "private final", "type": "A", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "StringIsPrefixOf", "parameters": "(Attribute<O, A> attribute, A value)", "modifiers": "public", "return": "", "signature": " StringIsPrefixOf(Attribute<O, A> attribute, A value)", "full_signature": "public  StringIsPrefixOf(Attribute<O, A> attribute, A value)", "class_method_signature": "StringIsPrefixOf.StringIsPrefixOf(Attribute<O, A> attribute, A value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "A", "signature": "A getValue()", "full_signature": "public A getValue()", "class_method_signature": "StringIsPrefixOf.getValue()", "testcase": false, "constructor": false}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringIsPrefixOf.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringIsPrefixOf.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override public int calcHashCode()", "class_method_signature": "StringIsPrefixOf.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "StringIsPrefixOf.equals(Object o)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/StringIsPrefixOf.java"}, "focal_method": {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n    protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions) {\n        CharSequence attributeValue = attribute.getValue(object, queryOptions);\n        //swap the order of values\n        return StringStartsWith.matchesValue(value, attributeValue, queryOptions);\n    }", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringIsPrefixOf.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false, "invocations": ["getValue", "matchesValue"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}