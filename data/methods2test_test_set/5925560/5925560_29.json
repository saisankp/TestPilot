{"test_class": {"identifier": "LinearSearchTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/org/jf/util/LinearSearchTest.java"}, "test_case": {"identifier": "testLinearSearch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLinearSearch() {\n        List<Integer> list = Lists.newArrayList(0, 1, 3, 4);\n\n        doTest(list, 5, 10);\n        doTest(list, 5, 4);\n        doTest(list, 5, 3);\n        doTest(list, 5, 2);\n        doTest(list, 5, 1);\n        doTest(list, 5, 0);\n\n        doTest(list, 4, 10);\n        doTest(list, 4, 4);\n        doTest(list, 4, 3);\n        doTest(list, 4, 2);\n        doTest(list, 4, 1);\n        doTest(list, 4, 0);\n\n        doTest(list, 3, 10);\n        doTest(list, 3, 4);\n        doTest(list, 3, 3);\n        doTest(list, 3, 2);\n        doTest(list, 3, 1);\n        doTest(list, 3, 0);\n\n        doTest(list, 2, 10);\n        doTest(list, 2, 4);\n        doTest(list, 2, 3);\n        doTest(list, 2, 2);\n        doTest(list, 2, 1);\n        doTest(list, 2, 0);\n\n        doTest(list, 1, 10);\n        doTest(list, 1, 4);\n        doTest(list, 1, 3);\n        doTest(list, 1, 2);\n        doTest(list, 1, 1);\n        doTest(list, 1, 0);\n\n        doTest(list, 0, 10);\n        doTest(list, 0, 4);\n        doTest(list, 0, 3);\n        doTest(list, 0, 2);\n        doTest(list, 0, 1);\n        doTest(list, 0, 0);\n\n        doTest(list, -1, 10);\n        doTest(list, -1, 4);\n        doTest(list, -1, 3);\n        doTest(list, -1, 2);\n        doTest(list, -1, 1);\n        doTest(list, -1, 0);\n    }", "signature": "void testLinearSearch()", "full_signature": "@Test public void testLinearSearch()", "class_method_signature": "LinearSearchTest.testLinearSearch()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest", "doTest"]}, "focal_class": {"identifier": "LinearSearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "linearSearch", "parameters": "(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "modifiers": "public static", "return": "int", "signature": "int linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "full_signature": "public static int linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "class_method_signature": "LinearSearch.linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/jf/util/LinearSearch.java"}, "focal_method": {"identifier": "linearSearch", "parameters": "(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "modifiers": "public static", "return": "int", "body": "public static <T> int linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess) {\n        int guess = initialGuess;\n        if (guess >= list.size()) {\n            guess = list.size()-1;\n        }\n        int comparison = comparator.compare(list.get(guess), key);\n        if (comparison == 0) {\n            return guess;\n        }\n        if (comparison < 0) {\n            guess++;\n            while (guess < list.size()) {\n                comparison = comparator.compare(list.get(guess), key);\n                if (comparison == 0) {\n                    return guess;\n                }\n                if (comparison > 0) {\n                    return -(guess+1);\n                }\n                guess++;\n            }\n            return -(list.size()+1);\n        } else {\n            guess--;\n            while (guess >= 0) {\n                comparison = comparator.compare(list.get(guess), key);\n                if (comparison == 0) {\n                    return guess;\n                }\n                if (comparison < 0) {\n                    return -(guess+2);\n                }\n                guess--;\n            }\n            return -1;\n        }\n    }", "signature": "int linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "full_signature": "public static int linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "class_method_signature": "LinearSearch.linearSearch(List<? extends T> list, Comparator<T> comparator, T key, int initialGuess)", "testcase": false, "constructor": false, "invocations": ["size", "size", "compare", "get", "size", "compare", "get", "size", "compare", "get"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}