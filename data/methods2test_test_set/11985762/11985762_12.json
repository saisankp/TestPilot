{"test_class": {"identifier": "ConnectionDescriptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/core/src/test/java/org/jfastcgi/client/ConnectionDescriptorTest.java"}, "test_case": {"identifier": "testMakeConnDesc_localhost_port1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMakeConnDesc_localhost_port1() throws Exception {\n        final TcpConnectionDescriptor desc = (TcpConnectionDescriptor) ConnectionDescriptor\n                .makeConnDesc(\"localhost:1\");\n        assertThat(desc).isNotNull();\n        assertThat(desc.getAddr().isReachable(1)).isTrue();\n        assertThat(desc.getPort()).isEqualTo(1);\n    }", "signature": "void testMakeConnDesc_localhost_port1()", "full_signature": "@Test public void testMakeConnDesc_localhost_port1()", "class_method_signature": "ConnectionDescriptorTest.testMakeConnDesc_localhost_port1()", "testcase": true, "constructor": false, "invocations": ["makeConnDesc", "isNotNull", "assertThat", "isTrue", "assertThat", "isReachable", "getAddr", "isEqualTo", "assertThat", "getPort"]}, "focal_class": {"identifier": "ConnectionDescriptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERR_MSG = \"Invalid address (%) -- Try something like tcp://localhost:9000 or unix:///var/run/app.sock\";", "modifier": "private static final", "type": "String", "declarator": "ERR_MSG = \"Invalid address (%) -- Try something like tcp://localhost:9000 or unix:///var/run/app.sock\"", "var_name": "ERR_MSG"}, {"original_string": "private final static Pattern PATTERN_HOSTNAME_PORT = Pattern\n            .compile(\"([^:]+):([1-9][0-9]*)$\");", "modifier": "private final static", "type": "Pattern", "declarator": "PATTERN_HOSTNAME_PORT = Pattern\n            .compile(\"([^:]+):([1-9][0-9]*)$\")", "var_name": "PATTERN_HOSTNAME_PORT"}, {"original_string": "private final static Pattern PATTERN_IPV6_PORT = Pattern\n            .compile(\"\\\\[((?:(?:(?:[0-9a-fA-F]{0,4}):){2,7})(?:[0-9a-fA-F]{1,4}))\\\\]:([1-9][0-9]*)\");", "modifier": "private final static", "type": "Pattern", "declarator": "PATTERN_IPV6_PORT = Pattern\n            .compile(\"\\\\[((?:(?:(?:[0-9a-fA-F]{0,4}):){2,7})(?:[0-9a-fA-F]{1,4}))\\\\]:([1-9][0-9]*)\")", "var_name": "PATTERN_IPV6_PORT"}], "methods": [{"identifier": "makeConnDesc", "parameters": "(String address)", "modifiers": "public static", "return": "ConnectionDescriptor", "signature": "ConnectionDescriptor makeConnDesc(String address)", "full_signature": "public static ConnectionDescriptor makeConnDesc(String address)", "class_method_signature": "ConnectionDescriptor.makeConnDesc(String address)", "testcase": false, "constructor": false}, {"identifier": "makeSocket", "parameters": "()", "modifiers": "public abstract", "return": "ISocket", "signature": "ISocket makeSocket()", "full_signature": "public abstract ISocket makeSocket()", "class_method_signature": "ConnectionDescriptor.makeSocket()", "testcase": false, "constructor": false}], "file": "client/core/src/main/java/org/jfastcgi/client/ConnectionDescriptor.java"}, "focal_method": {"identifier": "makeConnDesc", "parameters": "(String address)", "modifiers": "public static", "return": "ConnectionDescriptor", "body": "public static ConnectionDescriptor makeConnDesc(String address) {\n        if (address == null || address.trim().length() == 0) {\n            throw new IllegalArgumentException(String.format(ERR_MSG, \"The given address is empty\"));\n        }\n\n        // address used to look like <host>:<port>. now that we switched to an\n        // url-like syntax, we handle those legacy adresses like tcp:// ones\n        address = address.replaceFirst(\"^tcp://\", \"\");\n\n        if (address.startsWith(\"unix://\")) {\n            final String path = address.substring(\"unix://\".length()).trim();\n            // check if the file name is valid\n            if (path.isEmpty()) {\n                throw new IllegalArgumentException(\n                        \"Unix socket file name is empty.\");\n            }\n            final File f = new File(path);\n            if (!f.getAbsolutePath().matches(\"^[^*&%\\\\s]+$\")) {\n                throw new IllegalArgumentException(String.format(ERR_MSG,\"Not a regular file name : \"\n                        + f.getAbsolutePath()));\n            }\n            return new UnixSocketConnectionDescriptor(path);\n        }\n\n        final Matcher ipv4Matcher = PATTERN_HOSTNAME_PORT.matcher(address);\n        final Matcher ipv6Matcher = PATTERN_IPV6_PORT.matcher(address);\n        if (ipv4Matcher.matches()) {\n            try {\n                final InetAddress addr = InetAddress.getByName(ipv4Matcher\n                        .group(1));\n                final int port = Integer.parseInt(ipv4Matcher.group(2));\n                return new TcpConnectionDescriptor(addr, port);\n            }\n            catch (final UnknownHostException e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n        else if (ipv6Matcher.matches()) {\n            try {\n                final InetAddress addr = InetAddress.getByName(ipv6Matcher\n                        .group(1));\n                final int port = Integer.parseInt(ipv6Matcher.group(2));\n                return new TcpConnectionDescriptor(addr, port);\n            }\n            catch (final UnknownHostException e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n        else {\n            throw new IllegalArgumentException(String.format(ERR_MSG, \"Not a valid address\"));\n        }\n    }", "signature": "ConnectionDescriptor makeConnDesc(String address)", "full_signature": "public static ConnectionDescriptor makeConnDesc(String address)", "class_method_signature": "ConnectionDescriptor.makeConnDesc(String address)", "testcase": false, "constructor": false, "invocations": ["length", "trim", "format", "replaceFirst", "startsWith", "trim", "substring", "length", "isEmpty", "matches", "getAbsolutePath", "format", "getAbsolutePath", "matcher", "matcher", "matches", "getByName", "group", "parseInt", "group", "matches", "getByName", "group", "parseInt", "group", "format"]}, "repository": {"repo_id": 11985762, "url": "https://github.com/jFastCGI/jfastcgi", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 32, "size": 5079, "license": "licensed"}}