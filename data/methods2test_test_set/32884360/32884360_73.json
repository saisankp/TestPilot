{"test_class": {"identifier": "SchemaDDLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected SQLParser parser;", "modifier": "protected", "type": "SQLParser", "declarator": "parser", "var_name": "parser"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/aisddl/SchemaDDLTest.java"}, "test_case": {"identifier": "createSchemaEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createSchemaEmpty () throws Exception\n    {\n        String sql = \"CREATE SCHEMA EMPTY\";\n        AkibanInformationSchema ais = new AkibanInformationSchema();\n        \n        StatementNode stmt = parser.parseStatement(sql);\n        assertTrue (stmt instanceof CreateSchemaNode);\n        \n        SchemaDDL.createSchema(ais, null, (CreateSchemaNode)stmt, null);\n    }", "signature": "void createSchemaEmpty()", "full_signature": "@Test public void createSchemaEmpty()", "class_method_signature": "SchemaDDLTest.createSchemaEmpty()", "testcase": true, "constructor": false, "invocations": ["parseStatement", "assertTrue", "createSchema"]}, "focal_class": {"identifier": "SchemaDDL", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SchemaDDL", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaDDL()", "full_signature": "private  SchemaDDL()", "class_method_signature": "SchemaDDL.SchemaDDL()", "testcase": false, "constructor": true}, {"identifier": "createSchema", "parameters": "(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "full_signature": "public static void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "class_method_signature": "SchemaDDL.createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "dropSchema", "parameters": "(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "full_signature": "public static void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "class_method_signature": "SchemaDDL.dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/aisddl/SchemaDDL.java"}, "focal_method": {"identifier": "createSchema", "parameters": "(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "modifiers": "public static", "return": "void", "body": "public static void createSchema (AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)\n    {\n        final String schemaName = createSchema.getSchemaName();\n\n        Schema curSchema = ais.getSchema(schemaName);\n        if((curSchema != null) &&\n           skipOrThrow(context, createSchema.getExistenceCheck(), curSchema, new DuplicateSchemaException(schemaName))) {\n            return;\n        }\n\n        // If you get to this point, the schema name isn't being used by any user or group table\n        // therefore is a valid \"new\" schema. \n        // TODO: update the AIS to store the new schema. \n    }", "signature": "void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "full_signature": "public static void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "class_method_signature": "SchemaDDL.createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "testcase": false, "constructor": false, "invocations": ["getSchemaName", "getSchema", "skipOrThrow", "getExistenceCheck"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}