{"test_class": {"identifier": "BeanUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/BeanUtilsTest.java"}, "test_case": {"identifier": "testCopyPropterties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopyPropterties() throws Exception {\n        TestBean bean = new TestBean();\n        bean.setAlias(\"aaa:1.0.0\");\n        List<TestSubBean> subBeans = new ArrayList<TestSubBean>();\n        TestSubBean sub = new TestSubBean();\n        sub.setName(\"xxxxxx\");\n        sub.setParameter(\"maaaaak\", \"maaaav\");\n        subBeans.add(sub);\n        bean.setSubBeans(subBeans);\n\n        TestOtherBean otherBean = new TestOtherBean();\n        BeanUtils.copyProperties(bean, otherBean, \"alias\");\n\n        Assert.assertEquals(bean.getHeartbeat(), otherBean.getHeartbeat());\n        Assert.assertFalse(bean.getAlias().equals(otherBean.getAlias()));\n        Assert.assertEquals(bean.getSubBeans(), otherBean.getSubBeans());\n        Assert.assertEquals(bean.isRegister(), otherBean.isRegister());\n    }", "signature": "void testCopyPropterties()", "full_signature": "@Test public void testCopyPropterties()", "class_method_signature": "BeanUtilsTest.testCopyPropterties()", "testcase": true, "constructor": false, "invocations": ["setAlias", "setName", "setParameter", "add", "setSubBeans", "copyProperties", "assertEquals", "getHeartbeat", "getHeartbeat", "assertFalse", "equals", "getAlias", "getAlias", "assertEquals", "getSubBeans", "getSubBeans", "assertEquals", "isRegister", "isRegister"]}, "focal_class": {"identifier": "BeanUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "setProperty", "parameters": "(Object bean, String name, Class<T> clazz, T value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(Object bean, String name, Class<T> clazz, T value)", "full_signature": "public static void setProperty(Object bean, String name, Class<T> clazz, T value)", "class_method_signature": "BeanUtils.setProperty(Object bean, String name, Class<T> clazz, T value)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object bean, String name, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Object bean, String name, Class<T> clazz)", "full_signature": "public static T getProperty(Object bean, String name, Class<T> clazz)", "class_method_signature": "BeanUtils.getProperty(Object bean, String name, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesToMap", "parameters": "(Object bean, String prefix, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "full_signature": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "class_method_signature": "BeanUtils.copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object src, Object dst, String... ignoreFields)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object src, Object dst, String... ignoreFields)", "full_signature": "public static void copyProperties(Object src, Object dst, String... ignoreFields)", "class_method_signature": "BeanUtils.copyProperties(Object src, Object dst, String... ignoreFields)", "testcase": false, "constructor": false}, {"identifier": "getModifiedFields", "parameters": "(T src, T dst, String... ignoreFields)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "full_signature": "public static List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "class_method_signature": "BeanUtils.getModifiedFields(T src, T dst, String... ignoreFields)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/BeanUtils.java"}, "focal_method": {"identifier": "copyProperties", "parameters": "(Object src, Object dst, String... ignoreFields)", "modifiers": "public static", "return": "void", "body": "public static void copyProperties(Object src, Object dst, String... ignoreFields) {\n        Class srcClazz = src.getClass();\n        Class distClazz = dst.getClass();\n        Method[] methods = distClazz.getMethods();\n        List<String> ignoreFiledList = Arrays.asList(ignoreFields);\n        for (Method dstMethod : methods) { // \u904d\u5386\u76ee\u6807\u5bf9\u8c61\u7684\u65b9\u6cd5\n            if (Modifier.isStatic(dstMethod.getModifiers())\n                || !ReflectUtils.isBeanPropertyReadMethod(dstMethod)) {\n                // \u4e0d\u662fstatic\u65b9\u6cd5\uff0c \u662fgetter\u65b9\u6cd5\n                continue;\n            }\n            String propertyName = ReflectUtils.getPropertyNameFromBeanReadMethod(dstMethod);\n            if (ignoreFiledList.contains(propertyName)) {\n                // \u5ffd\u7565\u5b57\u6bb5\n                continue;\n            }\n            Class dstReturnType = dstMethod.getReturnType();\n            try { // \u540c\u65f6\u76ee\u6807\u5b57\u6bb5\u8fd8\u9700\u8981\u6709set\u65b9\u6cd5\n                Method dstSetterMethod = ReflectUtils.getPropertySetterMethod(distClazz, propertyName, dstReturnType);\n                if (dstSetterMethod != null) {\n                    // \u518d\u68c0\u67e5\u539f\u59cb\u5bf9\u8c61\u65b9\u6cd5\n                    Method srcGetterMethod = ReflectUtils.getPropertyGetterMethod(srcClazz, propertyName);\n                    // \u539f\u59cb\u5b57\u6bb5\u6709getter\u65b9\u6cd5\n                    Class srcReturnType = srcGetterMethod.getReturnType();\n                    if (srcReturnType.equals(dstReturnType)) { // \u539f\u59cb\u5b57\u6bb5\u548c\u76ee\u6807\u5b57\u6bb5\u8fd4\u56de\u7c7b\u578b\u4e00\u6837\n                        Object val = srcGetterMethod.invoke(src); // \u4ece\u539f\u59cb\u5bf9\u8c61\u8bfb\u53d6\u503c\n                        if (val != null) {\n                            dstSetterMethod.invoke(dst, val); // \u8bbe\u7f6e\u5230\u76ee\u6807\u5bf9\u8c61\n                        }\n                    }\n                }\n            } catch (Exception ignore) {\n                // ignore \u4e0b\u4e00\u5faa\u73af\n            }\n        }\n    }", "signature": "void copyProperties(Object src, Object dst, String... ignoreFields)", "full_signature": "public static void copyProperties(Object src, Object dst, String... ignoreFields)", "class_method_signature": "BeanUtils.copyProperties(Object src, Object dst, String... ignoreFields)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "getMethods", "asList", "isStatic", "getModifiers", "isBeanPropertyReadMethod", "getPropertyNameFromBeanReadMethod", "contains", "getReturnType", "getPropertySetterMethod", "getPropertyGetterMethod", "getReturnType", "equals", "invoke", "invoke"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}