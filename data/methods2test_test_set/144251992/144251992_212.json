{"test_class": {"identifier": "RootTermDistanceCalculatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/normalizer/RootTermDistanceCalculatorTest.java"}, "test_case": {"identifier": "nearestRootTermReturnsTermWhenThresholdIsExceeded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nearestRootTermReturnsTermWhenThresholdIsExceeded() {\n        // given\n        var rootTerm = \"banana\";\n        var derivedTerms = Set.of(\"yellow-thing\", \"monkey-snack\");\n        var term = \"ylow-thing\";\n        var threshold = 1; // smaller than the editing distance of 2\n\n        var calculator = new RootTermDistanceCalculator(rootTerm, derivedTerms);\n\n        // when\n        var actualRootTerm = RootTermDistanceCalculator.nearestRootTerm(Set.of(calculator), term, threshold);\n\n        // then\n        assertThat(actualRootTerm).isEqualTo(term);\n    }", "signature": "void nearestRootTermReturnsTermWhenThresholdIsExceeded()", "full_signature": "@Test public void nearestRootTermReturnsTermWhenThresholdIsExceeded()", "class_method_signature": "RootTermDistanceCalculatorTest.nearestRootTermReturnsTermWhenThresholdIsExceeded()", "testcase": true, "constructor": false, "invocations": ["of", "nearestRootTerm", "of", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RootTermDistanceCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String originalRootTerm;", "modifier": "private final", "type": "String", "declarator": "originalRootTerm", "var_name": "originalRootTerm"}, {"original_string": "private final String lowerCaseRootTerm;", "modifier": "private final", "type": "String", "declarator": "lowerCaseRootTerm", "var_name": "lowerCaseRootTerm"}, {"original_string": "private final Set<String> derivedTerms;", "modifier": "private final", "type": "Set<String>", "declarator": "derivedTerms", "var_name": "derivedTerms"}], "methods": [{"identifier": "RootTermDistanceCalculator", "parameters": "(String rootTerm, Set<String> derivedTerms)", "modifiers": "public", "return": "", "signature": " RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "full_signature": "public  RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "class_method_signature": "RootTermDistanceCalculator.RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "testcase": false, "constructor": true}, {"identifier": "calculateMinimalDistance", "parameters": "(String stringToMatch)", "modifiers": "public", "return": "int", "signature": "int calculateMinimalDistance(String stringToMatch)", "full_signature": "public int calculateMinimalDistance(String stringToMatch)", "class_method_signature": "RootTermDistanceCalculator.calculateMinimalDistance(String stringToMatch)", "testcase": false, "constructor": false}, {"identifier": "nearestRootTerm", "parameters": "(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "modifiers": "public static", "return": "String", "signature": "String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "full_signature": "public static String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "class_method_signature": "RootTermDistanceCalculator.nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "testcase": false, "constructor": false}, {"identifier": "calculateLevenshteinDistance", "parameters": "(String firstString, String secondString)", "modifiers": "private", "return": "int", "signature": "int calculateLevenshteinDistance(String firstString, String secondString)", "full_signature": "private int calculateLevenshteinDistance(String firstString, String secondString)", "class_method_signature": "RootTermDistanceCalculator.calculateLevenshteinDistance(String firstString, String secondString)", "testcase": false, "constructor": false}, {"identifier": "mergeRootTermAndDerivedTerms", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> mergeRootTermAndDerivedTerms()", "full_signature": "private Set<String> mergeRootTermAndDerivedTerms()", "class_method_signature": "RootTermDistanceCalculator.mergeRootTermAndDerivedTerms()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/normalizer/RootTermDistanceCalculator.java"}, "focal_method": {"identifier": "nearestRootTerm", "parameters": "(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "modifiers": "public static", "return": "String", "body": "public static String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold) {\n        if(threshold < 0) {\n            throw new IllegalArgumentException(\"Threshold must be greater than or equal to 0\");\n        }\n\n        var calculatorMindDistanceEntries = distanceCalculators.parallelStream()\n                .collect(Collectors.toMap(\n                        Function.identity(),\n                        distanceCalculator -> distanceCalculator.calculateMinimalDistance(term)\n                ))\n                .entrySet();\n\n        var minDistanceEntry = Collections.min(calculatorMindDistanceEntries, Comparator.comparingInt(Map.Entry::getValue));\n\n        if(minDistanceEntry.getValue() <= threshold) {\n            return minDistanceEntry.getKey().getOriginalRootTerm();\n        } else {\n            return term;\n        }\n    }", "signature": "String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "full_signature": "public static String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "class_method_signature": "RootTermDistanceCalculator.nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "testcase": false, "constructor": false, "invocations": ["entrySet", "collect", "parallelStream", "toMap", "identity", "calculateMinimalDistance", "min", "comparingInt", "getValue", "getOriginalRootTerm", "getKey"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}