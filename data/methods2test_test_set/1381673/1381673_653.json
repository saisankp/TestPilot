{"test_class": {"identifier": "BeforeFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BeforeFunction beforeFunction;", "modifier": "private", "type": "BeforeFunction", "declarator": "beforeFunction", "var_name": "beforeFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/interval/BeforeFunctionTest.java"}, "test_case": {"identifier": "invokeParamRangeAndRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeParamRangeAndRange() {\n        FunctionTestUtil.assertResult( beforeFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ),\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ) ),\n                Boolean.FALSE );\n        FunctionTestUtil.assertResult( beforeFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ),\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"g\", \"k\", Range.RangeBoundary.CLOSED ) ),\n                Boolean.TRUE );\n        FunctionTestUtil.assertResult( beforeFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ),\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"f\", \"k\", Range.RangeBoundary.CLOSED ) ),\n                Boolean.FALSE );\n        FunctionTestUtil.assertResult( beforeFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ),\n                new RangeImpl( Range.RangeBoundary.OPEN, \"f\", \"k\", Range.RangeBoundary.CLOSED ) ),\n                Boolean.TRUE );\n        FunctionTestUtil.assertResult( beforeFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.OPEN ),\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"f\", \"k\", Range.RangeBoundary.CLOSED ) ),\n                Boolean.TRUE );\n    }", "signature": "void invokeParamRangeAndRange()", "full_signature": "@Test public void invokeParamRangeAndRange()", "class_method_signature": "BeforeFunctionTest.invokeParamRangeAndRange()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "assertResult", "invoke", "assertResult", "invoke", "assertResult", "invoke", "assertResult", "invoke"]}, "focal_class": {"identifier": "BeforeFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final BeforeFunction INSTANCE = new BeforeFunction();", "modifier": "public static final", "type": "BeforeFunction", "declarator": "INSTANCE = new BeforeFunction()", "var_name": "INSTANCE"}], "methods": [{"identifier": "BeforeFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " BeforeFunction()", "full_signature": "public  BeforeFunction()", "class_method_signature": "BeforeFunction.BeforeFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "class_method_signature": "BeforeFunction.invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"value\" ) Comparable value, @ParameterName( \"range\" ) Range range)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"value\" ) Comparable value, @ParameterName( \"range\" ) Range range)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"value\" ) Comparable value, @ParameterName( \"range\" ) Range range)", "class_method_signature": "BeforeFunction.invoke(@ParameterName( \"value\" ) Comparable value, @ParameterName( \"range\" ) Range range)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"range\" ) Range range, @ParameterName( \"value\" ) Comparable value)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"range\" ) Range range, @ParameterName( \"value\" ) Comparable value)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"range\" ) Range range, @ParameterName( \"value\" ) Comparable value)", "class_method_signature": "BeforeFunction.invoke(@ParameterName( \"range\" ) Range range, @ParameterName( \"value\" ) Comparable value)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "class_method_signature": "BeforeFunction.invoke(@ParameterName( \"range1\" ) Range range1, @ParameterName( \"range2\" ) Range range2)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/interval/BeforeFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "body": "public FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2) {\n        if ( value1 == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value1\", \"cannot be null\"));\n        }\n        if ( value2 == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value2\", \"cannot be null\"));\n        }\n        try {\n            boolean result = value1.compareTo( value2 ) < 0;\n            return FEELFnResult.ofResult( result );\n        } catch( Exception e ) {\n            // values are not comparable\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value1\", \"cannot be compared to value2\"));\n        }\n    }", "signature": "FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "class_method_signature": "BeforeFunction.invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "compareTo", "ofResult", "ofError"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}