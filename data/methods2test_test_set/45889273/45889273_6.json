{"test_class": {"identifier": "IntegratorOutputNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ClassLoader cl = IntegratorOutputNodeTest.class.getClassLoader();", "modifier": "private static final", "type": "ClassLoader", "declarator": "cl = IntegratorOutputNodeTest.class.getClassLoader()", "var_name": "cl"}], "file": "integrator/src/test/java/edu/upenn/library/xmlaminar/integrator/IntegratorOutputNodeTest.java"}, "test_case": {"identifier": "testIntegrate7", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntegrate7() throws TransformerConfigurationException, TransformerException, ParserConfigurationException, SAXException, IOException {\n        String testId = \"testIntegrate7\";\n        System.out.println(\"running test: \"+testId);\n        IntegratorOutputNode root = new IntegratorOutputNode();\n        root.addDescendent(\"/record/marc\", new PreConfiguredXMLReader(new InputSource(cl.getResourceAsStream(\"input/marc.xml\"))), true);\n        root.addDescendent(\"/record/marcOdd\", new PreConfiguredXMLReader(new InputSource(cl.getResourceAsStream(\"input/marcOdd.xml\"))), true);\n        verify(root, testId.concat(\".xml\"), true);\n    }", "signature": "void testIntegrate7()", "full_signature": "@Test public void testIntegrate7()", "class_method_signature": "IntegratorOutputNodeTest.testIntegrate7()", "testcase": true, "constructor": false, "invocations": ["println", "addDescendent", "getResourceAsStream", "addDescendent", "getResourceAsStream", "verify", "concat"]}, "focal_class": {"identifier": "IntegratorOutputNode", "superclass": "extends VolatileXMLFilterImpl", "interfaces": "implements IdQueryable", "fields": [{"original_string": "private static final boolean debugging = true;", "modifier": "private static final", "type": "boolean", "declarator": "debugging = true", "var_name": "debugging"}, {"original_string": "private final StatefulXMLFilter inputFilter;", "modifier": "private final", "type": "StatefulXMLFilter", "declarator": "inputFilter", "var_name": "inputFilter"}, {"original_string": "private ContentHandler output;", "modifier": "private", "type": "ContentHandler", "declarator": "output", "var_name": "output"}, {"original_string": "private ContentHandler rawOutput;", "modifier": "private", "type": "ContentHandler", "declarator": "rawOutput", "var_name": "rawOutput"}, {"original_string": "private String[] childElementNames;", "modifier": "private", "type": "String[]", "declarator": "childElementNames", "var_name": "childElementNames"}, {"original_string": "private IdQueryable[] childNodes;", "modifier": "private", "type": "IdQueryable[]", "declarator": "childNodes", "var_name": "childNodes"}, {"original_string": "private Boolean[] requireForWrite;", "modifier": "private", "type": "Boolean[]", "declarator": "requireForWrite", "var_name": "requireForWrite"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private File dumpFile;", "modifier": "private", "type": "File", "declarator": "dumpFile", "var_name": "dumpFile"}, {"original_string": "private DataSourceFactory dsf;", "modifier": "private", "type": "DataSourceFactory", "declarator": "dsf", "var_name": "dsf"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(IntegratorOutputNode.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(IntegratorOutputNode.class)", "var_name": "logger"}, {"original_string": "private static final SAXParserFactory spf = SAXParserFactory.newInstance();", "modifier": "private static final", "type": "SAXParserFactory", "declarator": "spf = SAXParserFactory.newInstance()", "var_name": "spf"}, {"original_string": "private List<String> descendentsSpring = null;", "modifier": "private", "type": "List<String>", "declarator": "descendentsSpring = null", "var_name": "descendentsSpring"}, {"original_string": "private List<XMLReader> subIntegratorsSpring = null;", "modifier": "private", "type": "List<XMLReader>", "declarator": "subIntegratorsSpring = null", "var_name": "subIntegratorsSpring"}, {"original_string": "private static final int DEPTH_LIMIT = 10;", "modifier": "private static final", "type": "int", "declarator": "DEPTH_LIMIT = 10", "var_name": "DEPTH_LIMIT"}, {"original_string": "private static final Map<String,Boolean> unmodifiableFeatures;", "modifier": "private static final", "type": "Map<String,Boolean>", "declarator": "unmodifiableFeatures", "var_name": "unmodifiableFeatures"}, {"original_string": "LexicalHandler lexicalHandler = null;", "modifier": "", "type": "LexicalHandler", "declarator": "lexicalHandler = null", "var_name": "lexicalHandler"}, {"original_string": "private DTDHandler dtdHandler = null;", "modifier": "private", "type": "DTDHandler", "declarator": "dtdHandler = null", "var_name": "dtdHandler"}, {"original_string": "private ErrorHandler errorHandler = null;", "modifier": "private", "type": "ErrorHandler", "declarator": "errorHandler = null", "var_name": "errorHandler"}, {"original_string": "private Boolean aggregating = null;", "modifier": "private", "type": "Boolean", "declarator": "aggregating = null", "var_name": "aggregating"}, {"original_string": "private boolean initialzed = false;", "modifier": "private", "type": "boolean", "declarator": "initialzed = false", "var_name": "initialzed"}, {"original_string": "private static final ThreadFactory DAEMON_THREAD_FACTORY = new ThreadFactory() {\n\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    };", "modifier": "private static final", "type": "ThreadFactory", "declarator": "DAEMON_THREAD_FACTORY = new ThreadFactory() {\n\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    }", "var_name": "DAEMON_THREAD_FACTORY"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private JobMonitor<Void> childJobMonitor;", "modifier": "private", "type": "JobMonitor<Void>", "declarator": "childJobMonitor", "var_name": "childJobMonitor"}, {"original_string": "private Future<?> childJobFuture;", "modifier": "private", "type": "Future<?>", "declarator": "childJobFuture", "var_name": "childJobFuture"}, {"original_string": "private final LinkedHashSet<Integer> requiredIndexes = new LinkedHashSet<Integer>();", "modifier": "private final", "type": "LinkedHashSet<Integer>", "declarator": "requiredIndexes = new LinkedHashSet<Integer>()", "var_name": "requiredIndexes"}, {"original_string": "private static final int[] bitMasks = new int[Integer.SIZE];", "modifier": "private static final", "type": "int[]", "declarator": "bitMasks = new int[Integer.SIZE]", "var_name": "bitMasks"}, {"original_string": "private static final int[] notBitMasks = new int[Integer.SIZE];", "modifier": "private static final", "type": "int[]", "declarator": "notBitMasks = new int[Integer.SIZE]", "var_name": "notBitMasks"}, {"original_string": "private final AttributesImpl attRunner = new AttributesImpl();", "modifier": "private final", "type": "AttributesImpl", "declarator": "attRunner = new AttributesImpl()", "var_name": "attRunner"}, {"original_string": "private final LinkedList<String> names = new LinkedList<String>();", "modifier": "private final", "type": "LinkedList<String>", "declarator": "names = new LinkedList<String>()", "var_name": "names"}, {"original_string": "private final LinkedList<IdQueryable> nodes = new LinkedList<IdQueryable>();", "modifier": "private final", "type": "LinkedList<IdQueryable>", "declarator": "nodes = new LinkedList<IdQueryable>()", "var_name": "nodes"}, {"original_string": "private final LinkedList<Boolean> requires = new LinkedList<Boolean>();", "modifier": "private final", "type": "LinkedList<Boolean>", "declarator": "requires = new LinkedList<Boolean>()", "var_name": "requires"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "IntegratorOutputNode.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "IntegratorOutputNode.reset()", "testcase": false, "constructor": false}, {"identifier": "setDescendentsSpring", "parameters": "(List<String> descendentsSpring)", "modifiers": "public", "return": "void", "signature": "void setDescendentsSpring(List<String> descendentsSpring)", "full_signature": "public void setDescendentsSpring(List<String> descendentsSpring)", "class_method_signature": "IntegratorOutputNode.setDescendentsSpring(List<String> descendentsSpring)", "testcase": false, "constructor": false}, {"identifier": "getDescendentsSpring", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDescendentsSpring()", "full_signature": "public List<String> getDescendentsSpring()", "class_method_signature": "IntegratorOutputNode.getDescendentsSpring()", "testcase": false, "constructor": false}, {"identifier": "setSubIntegratorsSpring", "parameters": "(List<XMLReader> writeDuplicateIdsSpring)", "modifiers": "public", "return": "void", "signature": "void setSubIntegratorsSpring(List<XMLReader> writeDuplicateIdsSpring)", "full_signature": "public void setSubIntegratorsSpring(List<XMLReader> writeDuplicateIdsSpring)", "class_method_signature": "IntegratorOutputNode.setSubIntegratorsSpring(List<XMLReader> writeDuplicateIdsSpring)", "testcase": false, "constructor": false}, {"identifier": "getSubIntegratorsSpring", "parameters": "()", "modifiers": "public", "return": "List<XMLReader>", "signature": "List<XMLReader> getSubIntegratorsSpring()", "full_signature": "public List<XMLReader> getSubIntegratorsSpring()", "class_method_signature": "IntegratorOutputNode.getSubIntegratorsSpring()", "testcase": false, "constructor": false}, {"identifier": "initSpring", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initSpring()", "full_signature": "public void initSpring()", "class_method_signature": "IntegratorOutputNode.initSpring()", "testcase": false, "constructor": false}, {"identifier": "addDescendent", "parameters": "(String path, XMLReader source, boolean requireForWrite)", "modifiers": "public", "return": "StatefulXMLFilter", "signature": "StatefulXMLFilter addDescendent(String path, XMLReader source, boolean requireForWrite)", "full_signature": "public StatefulXMLFilter addDescendent(String path, XMLReader source, boolean requireForWrite)", "class_method_signature": "IntegratorOutputNode.addDescendent(String path, XMLReader source, boolean requireForWrite)", "testcase": false, "constructor": false}, {"identifier": "addDescendent", "parameters": "(LinkedList<String> pathElements, XMLReader source, boolean requireForWrite)", "modifiers": "public", "return": "StatefulXMLFilter", "signature": "StatefulXMLFilter addDescendent(LinkedList<String> pathElements, XMLReader source, boolean requireForWrite)", "full_signature": "public StatefulXMLFilter addDescendent(LinkedList<String> pathElements, XMLReader source, boolean requireForWrite)", "class_method_signature": "IntegratorOutputNode.addDescendent(LinkedList<String> pathElements, XMLReader source, boolean requireForWrite)", "testcase": false, "constructor": false}, {"identifier": "setAggregating", "parameters": "(boolean aggregating)", "modifiers": "public", "return": "void", "signature": "void setAggregating(boolean aggregating)", "full_signature": "public void setAggregating(boolean aggregating)", "class_method_signature": "IntegratorOutputNode.setAggregating(boolean aggregating)", "testcase": false, "constructor": false}, {"identifier": "isAggregating", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean isAggregating()", "full_signature": "public Boolean isAggregating()", "class_method_signature": "IntegratorOutputNode.isAggregating()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Override public void setName(String name)", "class_method_signature": "IntegratorOutputNode.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IntegratorOutputNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getFeature", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getFeature(String name)", "full_signature": "@Override public boolean getFeature(String name)", "class_method_signature": "IntegratorOutputNode.getFeature(String name)", "testcase": false, "constructor": false}, {"identifier": "setFeature", "parameters": "(String name, boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setFeature(String name, boolean value)", "full_signature": "@Override public void setFeature(String name, boolean value)", "class_method_signature": "IntegratorOutputNode.setFeature(String name, boolean value)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getProperty(String name)", "full_signature": "@Override public Object getProperty(String name)", "class_method_signature": "IntegratorOutputNode.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "localSetProperty", "parameters": "(String name, Object value, T exception)", "modifiers": "private", "return": "void", "signature": "void localSetProperty(String name, Object value, T exception)", "full_signature": "private void localSetProperty(String name, Object value, T exception)", "class_method_signature": "IntegratorOutputNode.localSetProperty(String name, Object value, T exception)", "testcase": false, "constructor": false}, {"identifier": "localSetProperty", "parameters": "(String name, Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean localSetProperty(String name, Object value)", "full_signature": "private boolean localSetProperty(String name, Object value)", "class_method_signature": "IntegratorOutputNode.localSetProperty(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(String name, Object value)", "full_signature": "@Override public void setProperty(String name, Object value)", "class_method_signature": "IntegratorOutputNode.setProperty(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "setEntityResolver", "parameters": "(EntityResolver resolver)", "modifiers": "@Override public", "return": "void", "signature": "void setEntityResolver(EntityResolver resolver)", "full_signature": "@Override public void setEntityResolver(EntityResolver resolver)", "class_method_signature": "IntegratorOutputNode.setEntityResolver(EntityResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getEntityResolver", "parameters": "()", "modifiers": "@Override public", "return": "EntityResolver", "signature": "EntityResolver getEntityResolver()", "full_signature": "@Override public EntityResolver getEntityResolver()", "class_method_signature": "IntegratorOutputNode.getEntityResolver()", "testcase": false, "constructor": false}, {"identifier": "setDTDHandler", "parameters": "(DTDHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void setDTDHandler(DTDHandler handler)", "full_signature": "@Override public void setDTDHandler(DTDHandler handler)", "class_method_signature": "IntegratorOutputNode.setDTDHandler(DTDHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getDTDHandler", "parameters": "()", "modifiers": "@Override public", "return": "DTDHandler", "signature": "DTDHandler getDTDHandler()", "full_signature": "@Override public DTDHandler getDTDHandler()", "class_method_signature": "IntegratorOutputNode.getDTDHandler()", "testcase": false, "constructor": false}, {"identifier": "getContentHandler", "parameters": "()", "modifiers": "@Override public", "return": "ContentHandler", "signature": "ContentHandler getContentHandler()", "full_signature": "@Override public ContentHandler getContentHandler()", "class_method_signature": "IntegratorOutputNode.getContentHandler()", "testcase": false, "constructor": false}, {"identifier": "setErrorHandler", "parameters": "(ErrorHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void setErrorHandler(ErrorHandler handler)", "full_signature": "@Override public void setErrorHandler(ErrorHandler handler)", "class_method_signature": "IntegratorOutputNode.setErrorHandler(ErrorHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getErrorHandler", "parameters": "()", "modifiers": "@Override public", "return": "ErrorHandler", "signature": "ErrorHandler getErrorHandler()", "full_signature": "@Override public ErrorHandler getErrorHandler()", "class_method_signature": "IntegratorOutputNode.getErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputSource input)", "modifiers": "@Override public", "return": "void", "signature": "void parse(InputSource input)", "full_signature": "@Override public void parse(InputSource input)", "class_method_signature": "IntegratorOutputNode.parse(InputSource input)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String systemId)", "modifiers": "@Override public", "return": "void", "signature": "void parse(String systemId)", "full_signature": "@Override public void parse(String systemId)", "class_method_signature": "IntegratorOutputNode.parse(String systemId)", "testcase": false, "constructor": false}, {"identifier": "setContentHandler", "parameters": "(ContentHandler ch)", "modifiers": "@Override public", "return": "void", "signature": "void setContentHandler(ContentHandler ch)", "full_signature": "@Override public void setContentHandler(ContentHandler ch)", "class_method_signature": "IntegratorOutputNode.setContentHandler(ContentHandler ch)", "testcase": false, "constructor": false}, {"identifier": "assignOutput", "parameters": "(ContentHandler ch)", "modifiers": "private", "return": "void", "signature": "void assignOutput(ContentHandler ch)", "full_signature": "private void assignOutput(ContentHandler ch)", "class_method_signature": "IntegratorOutputNode.assignOutput(ContentHandler ch)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean init()", "full_signature": "private boolean init()", "class_method_signature": "IntegratorOutputNode.init()", "testcase": false, "constructor": false}, {"identifier": "setParentProperties", "parameters": "(XMLReader parent)", "modifiers": "private", "return": "void", "signature": "void setParentProperties(XMLReader parent)", "full_signature": "private void setParentProperties(XMLReader parent)", "class_method_signature": "IntegratorOutputNode.setParentProperties(XMLReader parent)", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "ExecutorService", "signature": "ExecutorService getExecutor()", "full_signature": "public ExecutorService getExecutor()", "class_method_signature": "IntegratorOutputNode.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "setExecutor", "parameters": "(ExecutorService executor)", "modifiers": "public", "return": "void", "signature": "void setExecutor(ExecutorService executor)", "full_signature": "public void setExecutor(ExecutorService executor)", "class_method_signature": "IntegratorOutputNode.setExecutor(ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "getDataSourceFactory", "parameters": "()", "modifiers": "public", "return": "DataSourceFactory", "signature": "DataSourceFactory getDataSourceFactory()", "full_signature": "public DataSourceFactory getDataSourceFactory()", "class_method_signature": "IntegratorOutputNode.getDataSourceFactory()", "testcase": false, "constructor": false}, {"identifier": "setDataSourceFactory", "parameters": "(DataSourceFactory dsf)", "modifiers": "public", "return": "void", "signature": "void setDataSourceFactory(DataSourceFactory dsf)", "full_signature": "public void setDataSourceFactory(DataSourceFactory dsf)", "class_method_signature": "IntegratorOutputNode.setDataSourceFactory(DataSourceFactory dsf)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "IntegratorOutputNode.run()", "testcase": false, "constructor": false}, {"identifier": "handleLocalException", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleLocalException()", "full_signature": "private void handleLocalException()", "class_method_signature": "IntegratorOutputNode.handleLocalException()", "testcase": false, "constructor": false}, {"identifier": "getSP", "parameters": "()", "modifiers": "private static", "return": "SAXParser", "signature": "SAXParser getSP()", "full_signature": "private static SAXParser getSP()", "class_method_signature": "IntegratorOutputNode.getSP()", "testcase": false, "constructor": false}, {"identifier": "getXR", "parameters": "()", "modifiers": "private static", "return": "XMLReader", "signature": "XMLReader getXR()", "full_signature": "private static XMLReader getXR()", "class_method_signature": "IntegratorOutputNode.getXR()", "testcase": false, "constructor": false}, {"identifier": "getResettableSR", "parameters": "(InputSource source)", "modifiers": "private static", "return": "InputSourceXMLReader", "signature": "InputSourceXMLReader getResettableSR(InputSource source)", "full_signature": "private static InputSourceXMLReader getResettableSR(InputSource source)", "class_method_signature": "IntegratorOutputNode.getResettableSR(InputSource source)", "testcase": false, "constructor": false}, {"identifier": "main2", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main2(String[] args)", "full_signature": "public static void main2(String[] args)", "class_method_signature": "IntegratorOutputNode.main2(String[] args)", "testcase": false, "constructor": false}, {"identifier": "one", "parameters": "(Transformer t, IntegratorOutputNode root, String systemId)", "modifiers": "private static", "return": "void", "signature": "void one(Transformer t, IntegratorOutputNode root, String systemId)", "full_signature": "private static void one(Transformer t, IntegratorOutputNode root, String systemId)", "class_method_signature": "IntegratorOutputNode.one(Transformer t, IntegratorOutputNode root, String systemId)", "testcase": false, "constructor": false}, {"identifier": "two", "parameters": "(Transformer t, IntegratorOutputNode root)", "modifiers": "private static", "return": "void", "signature": "void two(Transformer t, IntegratorOutputNode root)", "full_signature": "private static void two(Transformer t, IntegratorOutputNode root)", "class_method_signature": "IntegratorOutputNode.two(Transformer t, IntegratorOutputNode root)", "testcase": false, "constructor": false}, {"identifier": "run2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void run2()", "full_signature": "private void run2()", "class_method_signature": "IntegratorOutputNode.run2()", "testcase": false, "constructor": false}, {"identifier": "run2", "parameters": "(int requiredIndexesBitflags)", "modifiers": "private", "return": "void", "signature": "void run2(int requiredIndexesBitflags)", "full_signature": "private void run2(int requiredIndexesBitflags)", "class_method_signature": "IntegratorOutputNode.run2(int requiredIndexesBitflags)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void step()", "full_signature": "@Override public void step()", "class_method_signature": "IntegratorOutputNode.step()", "testcase": false, "constructor": false}, {"identifier": "IntegratorOutputNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntegratorOutputNode()", "full_signature": "public  IntegratorOutputNode()", "class_method_signature": "IntegratorOutputNode.IntegratorOutputNode()", "testcase": false, "constructor": true}, {"identifier": "IntegratorOutputNode", "parameters": "(StatefulXMLFilter payload)", "modifiers": "public", "return": "", "signature": " IntegratorOutputNode(StatefulXMLFilter payload)", "full_signature": "public  IntegratorOutputNode(StatefulXMLFilter payload)", "class_method_signature": "IntegratorOutputNode.IntegratorOutputNode(StatefulXMLFilter payload)", "testcase": false, "constructor": true}, {"identifier": "isFinished", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFinished()", "full_signature": "@Override public boolean isFinished()", "class_method_signature": "IntegratorOutputNode.isFinished()", "testcase": false, "constructor": false}, {"identifier": "skipOutput", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void skipOutput()", "full_signature": "@Override public void skipOutput()", "class_method_signature": "IntegratorOutputNode.skipOutput()", "testcase": false, "constructor": false}, {"identifier": "writeOutput", "parameters": "(ContentHandler ch)", "modifiers": "@Override public", "return": "void", "signature": "void writeOutput(ContentHandler ch)", "full_signature": "@Override public void writeOutput(ContentHandler ch)", "class_method_signature": "IntegratorOutputNode.writeOutput(ContentHandler ch)", "testcase": false, "constructor": false}, {"identifier": "buffersToString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String buffersToString()", "full_signature": "@Override public String buffersToString()", "class_method_signature": "IntegratorOutputNode.buffersToString()", "testcase": false, "constructor": false}, {"identifier": "writeEndElements", "parameters": "(ContentHandler ch, int lowerLevel, boolean aggregate)", "modifiers": "@Override public", "return": "void", "signature": "void writeEndElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "full_signature": "@Override public void writeEndElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "class_method_signature": "IntegratorOutputNode.writeEndElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "testcase": false, "constructor": false}, {"identifier": "writeStartElements", "parameters": "(ContentHandler ch, int lowerLevel, boolean aggregate)", "modifiers": "@Override public", "return": "void", "signature": "void writeStartElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "full_signature": "@Override public void writeStartElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "class_method_signature": "IntegratorOutputNode.writeStartElements(ContentHandler ch, int lowerLevel, boolean aggregate)", "testcase": false, "constructor": false}, {"identifier": "writeRootElement", "parameters": "(ContentHandler ch)", "modifiers": "@Override public", "return": "void", "signature": "void writeRootElement(ContentHandler ch)", "full_signature": "@Override public void writeRootElement(ContentHandler ch)", "class_method_signature": "IntegratorOutputNode.writeRootElement(ContentHandler ch)", "testcase": false, "constructor": false}, {"identifier": "self", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean self()", "full_signature": "@Override public boolean self()", "class_method_signature": "IntegratorOutputNode.self()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "Comparable", "signature": "Comparable getId()", "full_signature": "@Override public Comparable getId()", "class_method_signature": "IntegratorOutputNode.getId()", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLevel()", "full_signature": "@Override public int getLevel()", "class_method_signature": "IntegratorOutputNode.getLevel()", "testcase": false, "constructor": false}, {"identifier": "blockForOutputFilterInitialization", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void blockForOutputFilterInitialization()", "full_signature": "private void blockForOutputFilterInitialization()", "class_method_signature": "IntegratorOutputNode.blockForOutputFilterInitialization()", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(String childElementName, IdQueryable child, boolean requireForWrite)", "modifiers": "public", "return": "void", "signature": "void addChild(String childElementName, IdQueryable child, boolean requireForWrite)", "full_signature": "public void addChild(String childElementName, IdQueryable child, boolean requireForWrite)", "class_method_signature": "IntegratorOutputNode.addChild(String childElementName, IdQueryable child, boolean requireForWrite)", "testcase": false, "constructor": false}], "file": "integrator/src/main/java/edu/upenn/library/xmlaminar/integrator/IntegratorOutputNode.java"}, "focal_method": {"identifier": "addDescendent", "parameters": "(String path, XMLReader source, boolean requireForWrite)", "modifiers": "public", "return": "StatefulXMLFilter", "body": "public StatefulXMLFilter addDescendent(String path, XMLReader source, boolean requireForWrite) {\n        String[] pe = path.substring(1).split(\"/\");\n        LinkedList<String> pathElements = new LinkedList<String>(Arrays.asList(pe));\n        return addDescendent(pathElements, source, requireForWrite);\n    }", "signature": "StatefulXMLFilter addDescendent(String path, XMLReader source, boolean requireForWrite)", "full_signature": "public StatefulXMLFilter addDescendent(String path, XMLReader source, boolean requireForWrite)", "class_method_signature": "IntegratorOutputNode.addDescendent(String path, XMLReader source, boolean requireForWrite)", "testcase": false, "constructor": false, "invocations": ["split", "substring", "asList", "addDescendent"]}, "repository": {"repo_id": 45889273, "url": "https://github.com/upenn-libraries/xmlaminar", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 12, "size": 1025, "license": "licensed"}}