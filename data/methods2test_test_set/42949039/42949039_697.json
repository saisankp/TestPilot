{"test_class": {"identifier": "HerdCommandInvokerTest", "superclass": "extends HerdActivitiServiceTaskTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/activiti/HerdCommandInvokerTest.java"}, "test_case": {"identifier": "testExecuteWithExceptionAndGetCreateTransactionException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithExceptionAndGetCreateTransactionException()\n    {\n        // Mock dependencies.\n        CommandConfig config = mock(CommandConfig.class);\n        JobEntity job = mock(JobEntity.class);\n        JobEntityManager jobEntityManager = mock(JobEntityManager.class);\n        CommandContext commandContext = mock(CommandContext.class);\n        //Save the command context to use later\n        CommandContext commandContextSaved = Context.getCommandContext();\n        Context.setCommandContext(commandContext);\n        String jobId = \"testId100\";\n        when(job.getId()).thenReturn(jobId);\n        when(job.getProcessInstanceId()).thenReturn(\"testProcessId100\");\n        when(job.getRetries()).thenReturn(3);\n        ExecuteAsyncJobCmd command = new ExecuteAsyncJobCmd(job);\n        doThrow(CannotCreateTransactionException.class).when(job).execute(any());\n        when(commandContext.getJobEntityManager()).thenReturn(jobEntityManager);\n        when(jobEntityManager.findJobById(jobId)).thenReturn(job);\n\n        try\n        {\n            herdCommandInvoker.execute(config, command);\n            fail();\n        }\n        catch (CannotCreateTransactionException e)\n        {\n           //Get expected exception\n        }\n        finally\n        {\n            Context.setCommandContext(commandContextSaved);\n        }\n\n    }", "signature": "void testExecuteWithExceptionAndGetCreateTransactionException()", "full_signature": "@Test public void testExecuteWithExceptionAndGetCreateTransactionException()", "class_method_signature": "HerdCommandInvokerTest.testExecuteWithExceptionAndGetCreateTransactionException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "getCommandContext", "setCommandContext", "thenReturn", "when", "getId", "thenReturn", "when", "getProcessInstanceId", "thenReturn", "when", "getRetries", "execute", "when", "doThrow", "any", "thenReturn", "when", "getJobEntityManager", "thenReturn", "when", "findJobById", "execute", "fail", "setCommandContext"]}, "focal_class": {"identifier": "HerdCommandInvoker", "superclass": "extends CommandInvoker", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdCommandInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdCommandInvoker.class)", "var_name": "LOGGER"}, {"original_string": "private static final String CANNOT_CREATE_TRANSACTION_EXCEPTION = \"CannotCreateTransactionException\";", "modifier": "private static final", "type": "String", "declarator": "CANNOT_CREATE_TRANSACTION_EXCEPTION = \"CannotCreateTransactionException\"", "var_name": "CANNOT_CREATE_TRANSACTION_EXCEPTION"}], "methods": [{"identifier": "execute", "parameters": "(CommandConfig config, Command<T> command)", "modifiers": "@Override public", "return": "T", "signature": "T execute(CommandConfig config, Command<T> command)", "full_signature": "@Override public T execute(CommandConfig config, Command<T> command)", "class_method_signature": "HerdCommandInvoker.execute(CommandConfig config, Command<T> command)", "testcase": false, "constructor": false}, {"identifier": "getJobEntity", "parameters": "(ExecuteAsyncJobCmd executeAsyncJobCmd)", "modifiers": "private", "return": "JobEntity", "signature": "JobEntity getJobEntity(ExecuteAsyncJobCmd executeAsyncJobCmd)", "full_signature": "private JobEntity getJobEntity(ExecuteAsyncJobCmd executeAsyncJobCmd)", "class_method_signature": "HerdCommandInvoker.getJobEntity(ExecuteAsyncJobCmd executeAsyncJobCmd)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/activiti/HerdCommandInvoker.java"}, "focal_method": {"identifier": "execute", "parameters": "(CommandConfig config, Command<T> command)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T execute(CommandConfig config, Command<T> command)\n    {\n        LOGGER.debug(\"command=\\\"{}\\\"\", command.getClass().getName());\n        try\n        {\n            // Perform the normal execution.\n            return super.execute(config, command);\n        }\n        catch (Exception e)\n        {\n            LOGGER.warn(String.format(\"HerdCommandInvoker caught an exception.\"), e);\n\n            /*\n             * Attempt to handle exception based on the command.\n             * If we bubble the exception up here, the transaction will be rolled back and all variables which were not committed will not be persisted.\n             * The problem with swallowing the exception, however, is that the exception message is not persisted automatically. To get around it, we must save\n             * the exception message and stacktrace into a JobEntity which is associated with the current execution.\n             */\n\n            if (command instanceof ExecuteAsyncJobCmd)\n            {\n                /*\n                 * ExecuteAsyncJobCmd is executed when a task is asynchronous.\n                 * Save the exception information in the command's JobEntity\n                 */\n                ExecuteAsyncJobCmd executeAsyncJobCmd = (ExecuteAsyncJobCmd) command;\n                JobEntity jobEntity = getJobEntity(executeAsyncJobCmd);\n\n                /*\n                 * If the exception is unable to create transaction due to JDBC connection issue,\n                 * throw out the exception, then let the Activiti engine take care of retries\n                 */\n                if (StringUtils.containsIgnoreCase(ExceptionUtils.getMessage(e), CANNOT_CREATE_TRANSACTION_EXCEPTION))\n                {\n                    LOGGER.warn(String.format(\"HerdCommandInvoker caught a CannotCreateTransactionException. Job id %s, Process instance id %s, Retries %d.\",\n                        jobEntity.getId(), jobEntity.getProcessInstanceId(), jobEntity.getRetries()), e);\n                    throw e;\n                }\n\n                jobEntity.setExceptionMessage(ExceptionUtils.getMessage(e));\n                jobEntity.setExceptionStacktrace(ExceptionUtils.getStackTrace(e));\n                return null;\n            }\n            else\n            {\n                /*\n                 * We do not know how to handle any other commands, so just bubble it up and let Activiti's default mechanism kick in.\n                 */\n                throw e;\n            }\n        }\n    }", "signature": "T execute(CommandConfig config, Command<T> command)", "full_signature": "@Override public T execute(CommandConfig config, Command<T> command)", "class_method_signature": "HerdCommandInvoker.execute(CommandConfig config, Command<T> command)", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "getClass", "execute", "warn", "format", "getJobEntity", "containsIgnoreCase", "getMessage", "warn", "format", "getId", "getProcessInstanceId", "getRetries", "setExceptionMessage", "getMessage", "setExceptionStacktrace", "getStackTrace"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}