{"test_class": {"identifier": "ConcurrentGaugedMethodBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String C_GAUGE_NAME = \"cGaugedMethod\";", "modifier": "private final static", "type": "String", "declarator": "C_GAUGE_NAME = \"cGaugedMethod\"", "var_name": "C_GAUGE_NAME"}, {"original_string": "private static MetricID cGaugeMID;", "modifier": "private static", "type": "MetricID", "declarator": "cGaugeMID", "var_name": "cGaugeMID"}, {"original_string": "private final static AtomicLong COUNTER_COUNT = new AtomicLong();", "modifier": "private final static", "type": "AtomicLong", "declarator": "COUNTER_COUNT = new AtomicLong()", "var_name": "COUNTER_COUNT"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private ConcurrentGaugedMethodBean<Long> bean;", "modifier": "@Inject\n    private", "type": "ConcurrentGaugedMethodBean<Long>", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/ConcurrentGaugedMethodBeanTest.java"}, "test_case": {"identifier": "callCountedMethodOnce", "parameters": "()", "modifiers": "@Test @InSequence(3) public", "return": "void", "body": "@Test\n    @InSequence(3)\n    public void callCountedMethodOnce() throws InterruptedException, TimeoutException {\n        ConcurrentGauge cGauge = registry.getConcurrentGauge(cGaugeMID);\n        assertThat(\"Concurrent Gauges is not registered correctly\", cGauge, notNullValue());\n\n        // Call the counted method, block and assert it's been counted\n        final Exchanger<Long> exchanger = new Exchanger<>();\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    exchanger.exchange(bean.countedMethod(new Callable<Long>() {\n                        @Override\n                        public Long call() throws Exception {\n                            exchanger.exchange(0L);\n                            return exchanger.exchange(0L);\n                        }\n                    }));\n                }\n                catch (InterruptedException cause) {\n                    throw new RuntimeException(cause);\n                }\n            }\n        });\n        final AtomicInteger uncaught = new AtomicInteger();\n        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n            @Override\n            public void uncaughtException(Thread t, Throwable e) {\n                uncaught.incrementAndGet();\n            }\n        });\n        thread.start();\n\n        // Wait until the method is executing and make sure that the counter has been incremented\n        exchanger.exchange(0L, 5L, TimeUnit.SECONDS);\n        assertThat(\"Concurrent Gauges count is incorrect\", cGauge.getCount(), is(equalTo(COUNTER_COUNT.incrementAndGet())));\n\n        // Exchange the result and unblock the method execution\n        Long random = 1 + Math.round(Math.random() * (Long.MAX_VALUE - 1));\n        exchanger.exchange(random, 5L, TimeUnit.SECONDS);\n\n        // Wait until the method has returned\n        assertThat(\"Concurrent Gauges method return value is incorrect\", exchanger.exchange(0L), is(equalTo(random)));\n\n        // Then make sure that the counter has been decremented\n        assertThat(\"Concurrent Gauges count is incorrect\", cGauge.getCount(), is(equalTo(COUNTER_COUNT.decrementAndGet())));\n\n        // Finally make sure calling thread is returns correctly\n        thread.join();\n        assertThat(\"Exception thrown in method call thread\", uncaught.get(), is(equalTo(0)));\n    }", "signature": "void callCountedMethodOnce()", "full_signature": "@Test @InSequence(3) public void callCountedMethodOnce()", "class_method_signature": "ConcurrentGaugedMethodBeanTest.callCountedMethodOnce()", "testcase": true, "constructor": false, "invocations": ["getConcurrentGauge", "assertThat", "notNullValue", "exchange", "countedMethod", "exchange", "exchange", "setUncaughtExceptionHandler", "incrementAndGet", "start", "exchange", "assertThat", "getCount", "is", "equalTo", "incrementAndGet", "round", "random", "exchange", "assertThat", "exchange", "is", "equalTo", "assertThat", "getCount", "is", "equalTo", "decrementAndGet", "join", "assertThat", "get", "is", "equalTo"]}, "focal_class": {"identifier": "ConcurrentGaugedMethodBean", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countedMethod", "parameters": "(Callable<T> callable)", "modifiers": "@ConcurrentGauge(name = \"cGaugedMethod\", absolute = true) public", "return": "T", "signature": "T countedMethod(Callable<T> callable)", "full_signature": "@ConcurrentGauge(name = \"cGaugedMethod\", absolute = true) public T countedMethod(Callable<T> callable)", "class_method_signature": "ConcurrentGaugedMethodBean.countedMethod(Callable<T> callable)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/ConcurrentGaugedMethodBean.java"}, "focal_method": {"identifier": "countedMethod", "parameters": "(Callable<T> callable)", "modifiers": "@ConcurrentGauge(name = \"cGaugedMethod\", absolute = true) public", "return": "T", "body": "@ConcurrentGauge(name = \"cGaugedMethod\", absolute = true)\n    public T countedMethod(Callable<T> callable) {\n        try {\n            return callable.call();\n        }\n        catch (Exception cause) {\n            throw new RuntimeException(cause);\n        }\n    }", "signature": "T countedMethod(Callable<T> callable)", "full_signature": "@ConcurrentGauge(name = \"cGaugedMethod\", absolute = true) public T countedMethod(Callable<T> callable)", "class_method_signature": "ConcurrentGaugedMethodBean.countedMethod(Callable<T> callable)", "testcase": false, "constructor": false, "invocations": ["call"]}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}