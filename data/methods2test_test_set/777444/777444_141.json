{"test_class": {"identifier": "AbstractMBeanServerExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TestExecutor executor;", "modifier": "", "type": "TestExecutor", "declarator": "executor", "var_name": "executor"}], "file": "agent/core/src/test/java/org/jolokia/backend/executor/AbstractMBeanServerExecutorTest.java"}, "test_case": {"identifier": "call", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void call() throws MalformedObjectNameException, MBeanException, InstanceAlreadyExistsException, NotCompliantMBeanException, IOException, ReflectionException, AttributeNotFoundException, InstanceNotFoundException {\n        String name = getAttribute(executor,\"test:type=one\",\"Name\");\n        assertEquals(name,\"jolokia\");\n    }", "signature": "void call()", "full_signature": "@Test public void call()", "class_method_signature": "AbstractMBeanServerExecutorTest.call()", "testcase": true, "constructor": false, "invocations": ["getAttribute", "assertEquals"]}, "focal_class": {"identifier": "AbstractMBeanServerExecutor", "superclass": "", "interfaces": "implements MBeanServerExecutor, NotificationListener", "fields": [{"original_string": "private long lastMBeanRegistrationChange;", "modifier": "private", "type": "long", "declarator": "lastMBeanRegistrationChange", "var_name": "lastMBeanRegistrationChange"}], "methods": [{"identifier": "getMBeanServers", "parameters": "()", "modifiers": "protected abstract", "return": "Set<MBeanServerConnection>", "signature": "Set<MBeanServerConnection> getMBeanServers()", "full_signature": "protected abstract Set<MBeanServerConnection> getMBeanServers()", "class_method_signature": "AbstractMBeanServerExecutor.getMBeanServers()", "testcase": false, "constructor": false}, {"identifier": "getJolokiaMBeanServer", "parameters": "()", "modifiers": "protected", "return": "MBeanServerConnection", "signature": "MBeanServerConnection getJolokiaMBeanServer()", "full_signature": "protected MBeanServerConnection getJolokiaMBeanServer()", "class_method_signature": "AbstractMBeanServerExecutor.getJolokiaMBeanServer()", "testcase": false, "constructor": false}, {"identifier": "each", "parameters": "(ObjectName pObjectName, MBeanEachCallback pCallback)", "modifiers": "public", "return": "void", "signature": "void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "full_signature": "public void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "class_method_signature": "AbstractMBeanServerExecutor.each(ObjectName pObjectName, MBeanEachCallback pCallback)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "modifiers": "public", "return": "T", "signature": "T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "full_signature": "public T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "class_method_signature": "AbstractMBeanServerExecutor.call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "testcase": false, "constructor": false}, {"identifier": "queryNames", "parameters": "(ObjectName pObjectName)", "modifiers": "public", "return": "Set<ObjectName>", "signature": "Set<ObjectName> queryNames(ObjectName pObjectName)", "full_signature": "public Set<ObjectName> queryNames(ObjectName pObjectName)", "class_method_signature": "AbstractMBeanServerExecutor.queryNames(ObjectName pObjectName)", "testcase": false, "constructor": false}, {"identifier": "registerForMBeanNotifications", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void registerForMBeanNotifications()", "full_signature": "protected void registerForMBeanNotifications()", "class_method_signature": "AbstractMBeanServerExecutor.registerForMBeanNotifications()", "testcase": false, "constructor": false}, {"identifier": "unregisterFromMBeanNotifications", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unregisterFromMBeanNotifications()", "full_signature": "public void unregisterFromMBeanNotifications()", "class_method_signature": "AbstractMBeanServerExecutor.unregisterFromMBeanNotifications()", "testcase": false, "constructor": false}, {"identifier": "handleNotification", "parameters": "(Notification pNotification, Object pHandback)", "modifiers": "public", "return": "void", "signature": "void handleNotification(Notification pNotification, Object pHandback)", "full_signature": "public void handleNotification(Notification pNotification, Object pHandback)", "class_method_signature": "AbstractMBeanServerExecutor.handleNotification(Notification pNotification, Object pHandback)", "testcase": false, "constructor": false}, {"identifier": "hasMBeansListChangedSince", "parameters": "(long pTimestamp)", "modifiers": "public", "return": "boolean", "signature": "boolean hasMBeansListChangedSince(long pTimestamp)", "full_signature": "public boolean hasMBeansListChangedSince(long pTimestamp)", "class_method_signature": "AbstractMBeanServerExecutor.hasMBeansListChangedSince(long pTimestamp)", "testcase": false, "constructor": false}, {"identifier": "updateErrorMsg", "parameters": "(StringBuilder pErrors, Exception exp)", "modifiers": "private", "return": "Exception", "signature": "Exception updateErrorMsg(StringBuilder pErrors, Exception exp)", "full_signature": "private Exception updateErrorMsg(StringBuilder pErrors, Exception exp)", "class_method_signature": "AbstractMBeanServerExecutor.updateErrorMsg(StringBuilder pErrors, Exception exp)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/backend/executor/AbstractMBeanServerExecutor.java"}, "focal_method": {"identifier": "call", "parameters": "(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "modifiers": "public", "return": "T", "body": "public <T> T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)\n            throws IOException, ReflectionException, MBeanException, AttributeNotFoundException, InstanceNotFoundException {\n        InstanceNotFoundException objNotFoundException = null;\n        for (MBeanServerConnection server : getMBeanServers()) {\n            // Only the first MBeanServer holding the MBean wins\n            try {\n                // Still to decide: Should we check eagerly or let an InstanceNotFound Exception\n                // bubble ? Exception bubbling was the former behaviour, so it is left in. However,\n                // it would be interesting how large the performance impact is here. All unit tests BTW are\n                // prepared for switching the guard below on or off.\n\n                //if (server.isRegistered(pObjectName)) {\n                return pMBeanAction.execute(server, pObjectName, pExtraArgs);\n                //}\n            } catch (InstanceNotFoundException exp) {\n                // Remember exceptions for later use\n                objNotFoundException = exp;\n            }\n        }\n\n        // Must be != null, otherwise we would not have left the loop\n        throw objNotFoundException;\n\n        // When we reach this, no MBeanServer know about the requested MBean.\n        // Hence, we throw our own InstanceNotFoundException here\n\n        //throw exception != null ?\n        //        new IllegalArgumentException(errorMsg + \": \" + exception,exception) :\n        //        new IllegalArgumentException(errorMsg);\n    }", "signature": "T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "full_signature": "public T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "class_method_signature": "AbstractMBeanServerExecutor.call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "testcase": false, "constructor": false, "invocations": ["getMBeanServers", "execute"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}