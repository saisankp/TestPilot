{"test_class": {"identifier": "MaybeSwitchIfEmptySingleTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/maybe/MaybeSwitchIfEmptySingleTest.java"}, "test_case": {"identifier": "source", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Test public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Test\n    public void source() {\n        assertSame(Maybe.empty(),\n                ((HasUpstreamMaybeSource)(Maybe.<Integer>empty().switchIfEmpty(Single.just(1)))).source()\n        );\n    }", "signature": "void source()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Test public void source()", "class_method_signature": "MaybeSwitchIfEmptySingleTest.source()", "testcase": true, "constructor": false, "invocations": ["assertSame", "empty", "source", "switchIfEmpty", "empty", "just"]}, "focal_class": {"identifier": "MaybeSwitchIfEmptySingle", "superclass": "extends Single<T>", "interfaces": "implements HasUpstreamMaybeSource<T>", "fields": [{"original_string": "final MaybeSource<T> source;", "modifier": "final", "type": "MaybeSource<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final SingleSource<? extends T> other;", "modifier": "final", "type": "SingleSource<? extends T>", "declarator": "other", "var_name": "other"}], "methods": [{"identifier": "MaybeSwitchIfEmptySingle", "parameters": "(MaybeSource<T> source, SingleSource<? extends T> other)", "modifiers": "public", "return": "", "signature": " MaybeSwitchIfEmptySingle(MaybeSource<T> source, SingleSource<? extends T> other)", "full_signature": "public  MaybeSwitchIfEmptySingle(MaybeSource<T> source, SingleSource<? extends T> other)", "class_method_signature": "MaybeSwitchIfEmptySingle.MaybeSwitchIfEmptySingle(MaybeSource<T> source, SingleSource<? extends T> other)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "MaybeSource<T>", "signature": "MaybeSource<T> source()", "full_signature": "@Override public MaybeSource<T> source()", "class_method_signature": "MaybeSwitchIfEmptySingle.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(SingleObserver<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(SingleObserver<? super T> observer)", "full_signature": "@Override protected void subscribeActual(SingleObserver<? super T> observer)", "class_method_signature": "MaybeSwitchIfEmptySingle.subscribeActual(SingleObserver<? super T> observer)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/maybe/MaybeSwitchIfEmptySingle.java"}, "focal_method": {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "MaybeSource<T>", "body": "@Override\n    public MaybeSource<T> source() {\n        return source;\n    }", "signature": "MaybeSource<T> source()", "full_signature": "@Override public MaybeSource<T> source()", "class_method_signature": "MaybeSwitchIfEmptySingle.source()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}