{"test_class": {"identifier": "AddressBookPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "private AddressBookPresenter presenter;", "modifier": "private", "type": "AddressBookPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    private AddressBookContract.View view;", "modifier": "@Mock\n    private", "type": "AddressBookContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "private List<AddressEntity> entityList;", "modifier": "private", "type": "List<AddressEntity>", "declarator": "entityList", "var_name": "entityList"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/AddressBookPresenterTest.java"}, "test_case": {"identifier": "testFetchAddressList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchAddressList() {\n\n\n        List<Address> list = Flowable.fromIterable(entityList).filter(new Predicate<AddressEntity>() {\n            @Override\n            public boolean test(AddressEntity addressInfoEntity) throws Exception {\n                return addressInfoEntity != null;\n            }\n        }).map(new Function<AddressEntity, Address>() {\n            @Override\n            public Address apply(AddressEntity addressInfoEntity) throws Exception {\n                return new Address(addressInfoEntity.getUuid(), addressInfoEntity.getName(), addressInfoEntity.getAddress(), addressInfoEntity.getAvatar());\n            }\n        }).toList().blockingGet();\n\n        assertNotNull(list);\n        for(Address address :list){\n            System.out.println(address.getUuid() + \"=====================\" +address.getName());\n        }\n\n\n    }", "signature": "void testFetchAddressList()", "full_signature": "@Test public void testFetchAddressList()", "class_method_signature": "AddressBookPresenterTest.testFetchAddressList()", "testcase": true, "constructor": false, "invocations": ["blockingGet", "toList", "map", "filter", "fromIterable", "getUuid", "getName", "getAddress", "getAvatar", "assertNotNull", "println", "getUuid", "getName"]}, "focal_class": {"identifier": "AddressBookPresenter", "superclass": "extends BasePresenter<AddressBookContract.View>", "interfaces": "implements AddressBookContract.Presenter", "fields": [{"original_string": "private List<Address> addressEntityList;", "modifier": "private", "type": "List<Address>", "declarator": "addressEntityList", "var_name": "addressEntityList"}], "methods": [{"identifier": "getAddressEntityList", "parameters": "()", "modifiers": "public", "return": "List<Address>", "signature": "List<Address> getAddressEntityList()", "full_signature": "public List<Address> getAddressEntityList()", "class_method_signature": "AddressBookPresenter.getAddressEntityList()", "testcase": false, "constructor": false}, {"identifier": "setAddressEntityList", "parameters": "(List<Address> addressEntityList)", "modifiers": "public", "return": "void", "signature": "void setAddressEntityList(List<Address> addressEntityList)", "full_signature": "public void setAddressEntityList(List<Address> addressEntityList)", "class_method_signature": "AddressBookPresenter.setAddressEntityList(List<Address> addressEntityList)", "testcase": false, "constructor": false}, {"identifier": "fetchAddressList", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fetchAddressList()", "full_signature": "@Override public void fetchAddressList()", "class_method_signature": "AddressBookPresenter.fetchAddressList()", "testcase": false, "constructor": false}, {"identifier": "deleteAddress", "parameters": "(int position)", "modifiers": "@Override public", "return": "void", "signature": "void deleteAddress(int position)", "full_signature": "@Override public void deleteAddress(int position)", "class_method_signature": "AddressBookPresenter.deleteAddress(int position)", "testcase": false, "constructor": false}, {"identifier": "editAddress", "parameters": "(int position)", "modifiers": "@Override public", "return": "void", "signature": "void editAddress(int position)", "full_signature": "@Override public void editAddress(int position)", "class_method_signature": "AddressBookPresenter.editAddress(int position)", "testcase": false, "constructor": false}, {"identifier": "selectAddress", "parameters": "(int position)", "modifiers": "@Override public", "return": "void", "signature": "void selectAddress(int position)", "full_signature": "@Override public void selectAddress(int position)", "class_method_signature": "AddressBookPresenter.selectAddress(int position)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/AddressBookPresenter.java"}, "focal_method": {"identifier": "fetchAddressList", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void fetchAddressList() {\n        Flowable.fromIterable(AddressDao.getAddressInfoList()).filter(new Predicate<AddressEntity>() {\n            @Override\n            public boolean test(AddressEntity addressInfoEntity) throws Exception {\n                return addressInfoEntity != null;\n            }\n        }).compose(((BaseActivity) getView()).bindToLifecycle()).map(new Function<AddressEntity, Address>() {\n            @Override\n            public Address apply(AddressEntity addressInfoEntity) throws Exception {\n                return new Address(addressInfoEntity.getUuid(), addressInfoEntity.getName(),addressInfoEntity.getAddress(),addressInfoEntity.getAvatar());\n            }\n        }).toList().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BiConsumer<List<Address>, Throwable>() {\n            @Override\n            public void accept(List<Address> addressEntities, Throwable throwable) throws Exception {\n                addressEntityList = addressEntities;\n                if (isViewAttached()) {\n                    getView().notifyAddressListChanged(addressEntities);\n                }\n            }\n        });\n    }", "signature": "void fetchAddressList()", "full_signature": "@Override public void fetchAddressList()", "class_method_signature": "AddressBookPresenter.fetchAddressList()", "testcase": false, "constructor": false, "invocations": ["subscribe", "observeOn", "subscribeOn", "toList", "map", "compose", "filter", "fromIterable", "getAddressInfoList", "bindToLifecycle", "getView", "getUuid", "getName", "getAddress", "getAvatar", "io", "mainThread", "isViewAttached", "notifyAddressListChanged", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}