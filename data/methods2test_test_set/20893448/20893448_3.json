{"test_class": {"identifier": "MimicCreatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MimicCreator mimicCreator;", "modifier": "private", "type": "MimicCreator", "declarator": "mimicCreator", "var_name": "mimicCreator"}, {"original_string": "private CtClass src;", "modifier": "private", "type": "CtClass", "declarator": "src", "var_name": "src"}, {"original_string": "private CtClass dst;", "modifier": "private", "type": "CtClass", "declarator": "dst", "var_name": "dst"}], "file": "mimic-library/src/test/java/com/github/stephanenicolas/mimic/MimicCreatorTest.java"}, "test_case": {"identifier": "testMimicConstructors_with_same_constructor_with_params", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMimicConstructors_with_same_constructor_with_params() throws Exception {\n        // GIVEN\n        mimicCreator = new MimicCreator(\"bar\");\n        src.addConstructor(CtNewConstructor.make(\"public Src(int a) {}\", src));\n        dst.addConstructor(CtNewConstructor.make(\"public Dst(int a) {}\", dst));\n\n        // WHEN\n        mimicCreator.mimicConstructors(src, dst);\n\n        // THEN\n        assertHasConstructor(dst, dst.toClass(), new CtClass[] { CtClass.intType });\n    }", "signature": "void testMimicConstructors_with_same_constructor_with_params()", "full_signature": "@Test public void testMimicConstructors_with_same_constructor_with_params()", "class_method_signature": "MimicCreatorTest.testMimicConstructors_with_same_constructor_with_params()", "testcase": true, "constructor": false, "invocations": ["addConstructor", "make", "addConstructor", "make", "mimicConstructors", "assertHasConstructor", "toClass"]}, "focal_class": {"identifier": "MimicCreator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Getter\n    private String key;", "modifier": "@Getter\n    private", "type": "String", "declarator": "key", "var_name": "key"}], "methods": [{"identifier": "MimicCreator", "parameters": "()", "modifiers": "public", "return": "", "signature": " MimicCreator()", "full_signature": "public  MimicCreator()", "class_method_signature": "MimicCreator.MimicCreator()", "testcase": false, "constructor": true}, {"identifier": "MimicCreator", "parameters": "(String key)", "modifiers": "public", "return": "", "signature": " MimicCreator(String key)", "full_signature": "public  MimicCreator(String key)", "class_method_signature": "MimicCreator.MimicCreator(String key)", "testcase": false, "constructor": true}, {"identifier": "buildMimicModeMethodMap", "parameters": "(MimicMethod[] mimicMethods)", "modifiers": "private", "return": "HashMap<String, MimicMode>", "signature": "HashMap<String, MimicMode> buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "full_signature": "private HashMap<String, MimicMode> buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "buildInsertionMethodMap", "parameters": "(MimicMethod[] mimicMethods)", "modifiers": "private", "return": "HashMap<String, String>", "signature": "HashMap<String, String> buildInsertionMethodMap(MimicMethod[] mimicMethods)", "full_signature": "private HashMap<String, String> buildInsertionMethodMap(MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.buildInsertionMethodMap(MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "createInvocation", "parameters": "(CtMethod method, String copiedMethodName)", "modifiers": "private", "return": "String", "signature": "String createInvocation(CtMethod method, String copiedMethodName)", "full_signature": "private String createInvocation(CtMethod method, String copiedMethodName)", "class_method_signature": "MimicCreator.createInvocation(CtMethod method, String copiedMethodName)", "testcase": false, "constructor": false}, {"identifier": "hasField", "parameters": "(CtClass clazz, CtField field)", "modifiers": "public", "return": "boolean", "signature": "boolean hasField(CtClass clazz, CtField field)", "full_signature": "public boolean hasField(CtClass clazz, CtField field)", "class_method_signature": "MimicCreator.hasField(CtClass clazz, CtField field)", "testcase": false, "constructor": false}, {"identifier": "hasInterface", "parameters": "(CtClass dst, CtClass interfazz)", "modifiers": "public", "return": "boolean", "signature": "boolean hasInterface(CtClass dst, CtClass interfazz)", "full_signature": "public boolean hasInterface(CtClass dst, CtClass interfazz)", "class_method_signature": "MimicCreator.hasInterface(CtClass dst, CtClass interfazz)", "testcase": false, "constructor": false}, {"identifier": "mimicClass", "parameters": "(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "modifiers": "public", "return": "void", "signature": "void mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "full_signature": "public void mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "mimicConstructors", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicConstructors(CtClass src, CtClass dst)", "full_signature": "public void mimicConstructors(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicConstructors(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicFields", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicFields(CtClass src, CtClass dst)", "full_signature": "public void mimicFields(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicFields(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicInterfaces", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicInterfaces(CtClass src, CtClass dst)", "full_signature": "public void mimicInterfaces(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicInterfaces(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicMethods", "parameters": "(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "modifiers": "public", "return": "void", "signature": "void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "full_signature": "public void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "modifiers": "private", "return": "CtMethod", "signature": "CtMethod findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "full_signature": "private CtMethod findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "class_method_signature": "MimicCreator.findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "testcase": false, "constructor": false}], "file": "mimic-library/src/main/java/com/github/stephanenicolas/mimic/MimicCreator.java"}, "focal_method": {"identifier": "mimicConstructors", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "body": "public void mimicConstructors(CtClass src, CtClass dst) throws CannotCompileException, NotFoundException {\n        for (final CtConstructor constructor : src.getDeclaredConstructors()) {\n            log.fine(\"Mimic constructor \" + constructor.getName());\n            boolean destHasSameConstructor = false;\n            for (CtConstructor constructorInDest : dst.getDeclaredConstructors()) {\n                String signature = constructor.getSignature();\n                String signatureInDest = constructorInDest.getSignature();\n                if (signatureInDest.equals(signature)) {\n                    destHasSameConstructor = true;\n                    log.fine(\"Forwarding \" + constructor.getName());\n                    String key = this.key == null ? \"\" : (this.key + \"_\");\n                    final String copiedConstructorName = \"_copy_\" + key + constructor.getName();\n                    dst.addMethod(constructor.toMethod(copiedConstructorName, dst));\n                    StringBuffer buffer = new StringBuffer();\n                    for (int j = 0; j < constructor.getParameterTypes().length; j++) {\n                        buffer.append(\" $\");\n                        buffer.append(j + 1);\n                        buffer.append(\",\");\n                    }\n                    String params = buffer.toString();\n                    if (params.length() > 0) {\n                        params = params.substring(0, params.length() - 1);\n                    }\n                    String string = copiedConstructorName + \"(\" + params + \");\\n\";\n                    log.fine(\"Injected constructor \" + string);\n                    constructorInDest.insertAfter(string);\n                }\n            }\n            if (!destHasSameConstructor) {\n                log.fine(\"Copying \" + constructor.getName());\n                dst.addConstructor(CtNewConstructor.copy(constructor, dst, null));\n            }\n        }\n    }", "signature": "void mimicConstructors(CtClass src, CtClass dst)", "full_signature": "public void mimicConstructors(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicConstructors(CtClass src, CtClass dst)", "testcase": false, "constructor": false, "invocations": ["getDeclaredConstructors", "fine", "getName", "getDeclaredConstructors", "getSignature", "getSignature", "equals", "fine", "getName", "getName", "addMethod", "toMethod", "getParameterTypes", "append", "append", "append", "toString", "length", "substring", "length", "fine", "insertAfter", "fine", "getName", "addConstructor", "copy"]}, "repository": {"repo_id": 20893448, "url": "https://github.com/stephanenicolas/mimic", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 18, "size": 673, "license": "licensed"}}