{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "success_ToByteArray_from_BigInteger_1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_ToByteArray_from_BigInteger_1() {\n        byte[] input1 = new byte[]{19, -16, 82, 23, 24, -5, 62, 17, 82, 3, 67, 121, -16, -83, 14, 25, -13, 37, 13, -19, 20, 21, -82, 3, 94, -5, 26, 57, 18, 91, 110, 78};\n        byte[] input2 = new byte[]{-82, 4, -22, 3, 94, -115, -22, 27, 12, 35, -14, 1, -26, 3, -44, 13, -113, -31, 93, 29, 2, -33, -72, 42, 14, -9, 13, 40, -28, 79, -13, 38};\n        byte[] input3 = new byte[]{0, -4, -22, 3, 94, -115, -22, 27, 12, 35, -14, 1, -26, 3, -44, 13, -113, -31, 93, 29, 2, -33, -72, 42, 14, -9, 13, 40, -28, 79, -13, 38};\n        byte[] input4 = new byte[]{-34, 4, -22, 3, 94, -115, -22, 27, 12, 35, -14, 1, -26, 3, -44, 13, -113, -31, 93, 29, 2, -33, -72, 42, 14, -9, 13, 40, -28, 79, -13, 38};\n\n        BigInteger integer1 = new BigInteger(1, input1);\n        BigInteger integer2 = new BigInteger(1, input2);\n        BigInteger integer3 = new BigInteger(1, input3);\n        BigInteger integer4 = new BigInteger(1, input4);\n\n        assertThat(integer1.toByteArray(), is(input1));\n        assertThat(integer2.toByteArray(), not(input2));\n        assertThat(integer3.toByteArray(), is(input3));\n        assertThat(integer4.toByteArray(), not(input4));\n\n        assertThat(ArrayUtils.toByteArray(integer1, 32), is(input1));\n        assertThat(ArrayUtils.toByteArray(integer2, 32), is(input2));\n        assertThat(ArrayUtils.toByteArray(integer3, 32), is(input3));\n        assertThat(ArrayUtils.toByteArray(integer4, 32), is(input4));\n    }", "signature": "void success_ToByteArray_from_BigInteger_1()", "full_signature": "@Test public void success_ToByteArray_from_BigInteger_1()", "class_method_signature": "ArrayUtilsTest.success_ToByteArray_from_BigInteger_1()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toByteArray", "is", "assertThat", "toByteArray", "not", "assertThat", "toByteArray", "is", "assertThat", "toByteArray", "not", "assertThat", "toByteArray", "is", "assertThat", "toByteArray", "is", "assertThat", "toByteArray", "is", "assertThat", "toByteArray", "is"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "split", "parameters": "(byte[] bytes, int splitIndex)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] split(byte[] bytes, int splitIndex)", "full_signature": "public static byte[][] split(byte[] bytes, int splitIndex)", "class_method_signature": "ArrayUtils.split(byte[] bytes, int splitIndex)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] input)", "modifiers": "public static", "return": "int[]", "signature": "int[] reverse(int[] input)", "full_signature": "public static int[] reverse(int[] input)", "class_method_signature": "ArrayUtils.reverse(int[] input)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(BigInteger value, int expectedBytesLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(BigInteger value, int expectedBytesLength)", "full_signature": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength)", "class_method_signature": "ArrayUtils.toByteArray(BigInteger value, int expectedBytesLength)", "testcase": false, "constructor": false}, {"identifier": "toBinaryArray", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toBinaryArray(BigInteger integer)", "full_signature": "public static int[] toBinaryArray(BigInteger integer)", "class_method_signature": "ArrayUtils.toBinaryArray(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "toMutualOppositeForm", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toMutualOppositeForm(BigInteger integer)", "full_signature": "public static int[] toMutualOppositeForm(BigInteger integer)", "class_method_signature": "ArrayUtils.toMutualOppositeForm(BigInteger integer)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/util/ArrayUtils.java"}, "focal_method": {"identifier": "toByteArray", "parameters": "(BigInteger value, int expectedBytesLength)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength) {\n        byte[] input = value.toByteArray();\n        int byteTmpLength = input.length;\n\n        if (byteTmpLength <= expectedBytesLength) {\n            return input;\n        }\n\n        int copyStartIndex = 0;\n        byte[] result;\n\n        if (input[0] == 0x00) {\n            copyStartIndex = 1;\n        }\n\n        result = new byte[expectedBytesLength];\n\n        System.arraycopy(input, copyStartIndex, result, 0, expectedBytesLength);\n\n        return result;\n    }", "signature": "byte[] toByteArray(BigInteger value, int expectedBytesLength)", "full_signature": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength)", "class_method_signature": "ArrayUtils.toByteArray(BigInteger value, int expectedBytesLength)", "testcase": false, "constructor": false, "invocations": ["toByteArray", "arraycopy"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}