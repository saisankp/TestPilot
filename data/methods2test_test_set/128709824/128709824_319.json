{"test_class": {"identifier": "WeightRoundRobinLoadBalancerTest", "superclass": "extends BaseLoadBalancerTest", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/lb/WeightRoundRobinLoadBalancerTest.java"}, "test_case": {"identifier": "doSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doSelect() throws Exception {\n        WeightRoundRobinLoadBalancer loadBalancer = new WeightRoundRobinLoadBalancer(null);\n\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        int size = 20;\n        int total = 19000; // too slow\n        SofaRequest request = new SofaRequest();\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildSameWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            int avg = total / size;\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(avg == cnt.get(9000 + i));\n            }\n        }\n\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildDiffWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            Assert.assertTrue(cnt.get(9000) == 0);\n            int count = 0;\n            int sum = 0;\n            for (int i = 0; i < size; i++) {\n                count += i;\n                sum += cnt.get(9000 + i);\n            }\n            Assert.assertTrue(sum == total);\n\n            int per = total / count;\n            for (int i = 1; i < size; i++) {\n                Assert.assertTrue(per * i == cnt.get(9000 + i));\n            }\n        }\n    }", "signature": "void doSelect()", "full_signature": "@Test public void doSelect()", "class_method_signature": "WeightRoundRobinLoadBalancerTest.doSelect()", "testcase": true, "constructor": false, "invocations": ["put", "buildSameWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "put", "buildDiffWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "get", "assertTrue", "assertTrue", "get"]}, "focal_class": {"identifier": "WeightRoundRobinLoadBalancer", "superclass": "extends AbstractLoadBalancer", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<String, PositiveAtomicCounter> sequences = new ConcurrentHashMap<String, PositiveAtomicCounter>();", "modifier": "private final", "type": "ConcurrentMap<String, PositiveAtomicCounter>", "declarator": "sequences = new ConcurrentHashMap<String, PositiveAtomicCounter>()", "var_name": "sequences"}], "methods": [{"identifier": "WeightRoundRobinLoadBalancer", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "public", "return": "", "signature": " WeightRoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "full_signature": "public  WeightRoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "WeightRoundRobinLoadBalancer.WeightRoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "WeightRoundRobinLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false}, {"identifier": "getServiceKey", "parameters": "(SofaRequest request)", "modifiers": "private", "return": "String", "signature": "String getServiceKey(SofaRequest request)", "full_signature": "private String getServiceKey(SofaRequest request)", "class_method_signature": "WeightRoundRobinLoadBalancer.getServiceKey(SofaRequest request)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/lb/WeightRoundRobinLoadBalancer.java"}, "focal_method": {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "body": "@Override\n    public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos) {\n        String key = getServiceKey(request); // \u6bcf\u4e2a\u65b9\u6cd5\u7ea7\u81ea\u5df1\u8f6e\u8be2\uff0c\u4e92\u4e0d\u5f71\u54cd\n        int length = providerInfos.size(); // \u603b\u4e2a\u6570\n        int maxWeight = 0; // \u6700\u5927\u6743\u91cd\n        int minWeight = Integer.MAX_VALUE; // \u6700\u5c0f\u6743\u91cd\n\n        final LinkedHashMap<ProviderInfo, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<ProviderInfo, IntegerWrapper>();\n        int weightSum = 0;\n        for (ProviderInfo providerInfo : providerInfos) {\n            int weight = getWeight(providerInfo);\n            maxWeight = Math.max(maxWeight, weight); // \u7d2f\u8ba1\u6700\u5927\u6743\u91cd\n            minWeight = Math.min(minWeight, weight); // \u7d2f\u8ba1\u6700\u5c0f\u6743\u91cd\n            if (weight > 0) {\n                invokerToWeightMap.put(providerInfo, new IntegerWrapper(weight));\n                weightSum += weight;\n            }\n        }\n        PositiveAtomicCounter sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new PositiveAtomicCounter());\n            sequence = sequences.get(key);\n        }\n        int currentSequence = sequence.getAndIncrement();\n        if (maxWeight > 0 && minWeight < maxWeight) { // \u6743\u91cd\u4e0d\u4e00\u6837\n            int mod = currentSequence % weightSum;\n            for (int i = 0; i < maxWeight; i++) {\n                for (Map.Entry<ProviderInfo, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n                    final ProviderInfo k = each.getKey();\n                    final IntegerWrapper v = each.getValue();\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        return providerInfos.get(currentSequence % length);\n        /*\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(providerInfos.get(i));\n            maxWeight = Math.max(maxWeight, weight); // \u7d2f\u8ba1\u6700\u5927\u6743\u91cd\n            minWeight = Math.min(minWeight, weight); // \u7d2f\u8ba1\u6700\u5c0f\u6743\u91cd\n        }\n        if (maxWeight > 0 && minWeight < maxWeight) { // \u6743\u91cd\u4e0d\u4e00\u6837,\u4e0d\u518d\u6309\u7167\u4e4b\u524d\u8f6e\u8be2\u987a\u5e8f\uff0c\n            PositiveAtomicCounter weightSequence = weightSequences.get(key);\n            if (weightSequence == null) {\n                weightSequences.putIfAbsent(key, new PositiveAtomicCounter());\n                weightSequence = weightSequences.get(key);\n            }\n            int currentWeight = weightSequence.getAndIncrement() % maxWeight;\n            List<ProviderInfo> weightInvokers = new ArrayList<ProviderInfo>();\n            for (ProviderInfo invoker : providerInfos) { // \u7b5b\u9009\u6743\u91cd\u5927\u4e8e\u5f53\u524d\u6743\u91cd\u57fa\u6570\u7684provider,\u4fdd\u8bc1\u6743\u91cd\u5927\u7684\u670d\u52a1\u54ea\u6015\u662f\u8f6e\u8be2\uff0c\u88ab\u8c03\u7528\u7684\u673a\u4f1a\u4e5f\u662f\u6700\u591a\u7684\n                if (getWeight(invoker) > currentWeight) {\n                    weightInvokers.add(invoker);\n                }\n            }\n            int weightLength = weightInvokers.size();\n            if (weightLength == 1) {\n                return weightInvokers.get(0);\n            } else if (weightLength > 1) {\n                providerInfos = weightInvokers;\n                length = providerInfos.size();\n            }\n        }\n        PositiveAtomicCounter sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new PositiveAtomicCounter());\n            sequence = sequences.get(key);\n        }\n        return providerInfos.get(sequence.getAndIncrement() % length);*/\n    }", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "WeightRoundRobinLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false, "invocations": ["getServiceKey", "size", "getWeight", "max", "min", "put", "get", "putIfAbsent", "get", "getAndIncrement", "entrySet", "getKey", "getValue", "getValue", "getValue", "decrement", "get"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}