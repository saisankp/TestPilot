{"test_class": {"identifier": "PreparationUtilsTest", "superclass": "extends ServiceBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private VersionService versionService;", "modifier": "@Autowired\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/api/preparation/PreparationUtilsTest.java"}, "test_case": {"identifier": "should_list_steps_history_from_root", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_list_steps_history_from_root() {\n        // given\n        final List<Action> actions = getSimpleAction(\"uppercase\", \"column_name\", \"lastname\");\n        final PreparationActions newContent1 = PreparationActions.ROOT_ACTIONS.append(actions);\n        final PreparationActions newContent2 = newContent1.append(actions);\n\n        final String version = versionService.version().getVersionId();\n        final Step step1 = new Step(Step.ROOT_STEP.id(), newContent1.id(), version);\n        final Step step2 = new Step(step1.id(), newContent2.id(), version);\n\n        repository.add(newContent1);\n        repository.add(newContent2);\n        repository.add(step1);\n        repository.add(step2);\n\n        // when\n        List<Step> steps = preparationUtils.listSteps(step1.id(), repository);\n\n        // then\n        assertThat(steps, hasItem(Step.ROOT_STEP));\n        assertThat(steps, hasItem(step1));\n        assertThat(steps, not(hasItem(step2)));\n\n        // when\n        steps = preparationUtils.listSteps(step2.id(), repository);\n\n        // then\n        assertThat(steps, hasItem(Step.ROOT_STEP));\n        assertThat(steps, hasItem(step1));\n        assertThat(steps, hasItem(step2));\n    }", "signature": "void should_list_steps_history_from_root()", "full_signature": "@Test public void should_list_steps_history_from_root()", "class_method_signature": "PreparationUtilsTest.should_list_steps_history_from_root()", "testcase": true, "constructor": false, "invocations": ["getSimpleAction", "append", "append", "getVersionId", "version", "id", "id", "id", "id", "add", "add", "add", "add", "listSteps", "id", "assertThat", "hasItem", "assertThat", "hasItem", "assertThat", "not", "hasItem", "listSteps", "id", "assertThat", "hasItem", "assertThat", "hasItem", "assertThat", "hasItem"]}, "focal_class": {"identifier": "PreparationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "prettyPrint", "parameters": "(PreparationRepository repository, String stepId, OutputStream out)", "modifiers": "private static", "return": "void", "signature": "void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "full_signature": "private static void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(PreparationActions blob, OutputStream out)", "modifiers": "private static", "return": "void", "signature": "void prettyPrint(PreparationActions blob, OutputStream out)", "full_signature": "private static void prettyPrint(PreparationActions blob, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationActions blob, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(PreparationRepository repository, Preparation preparation, OutputStream out)", "modifiers": "public static", "return": "void", "signature": "void prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "full_signature": "public static void prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "scatter", "parameters": "(Identifiable source)", "modifiers": "public static", "return": "Collection<Identifiable>", "signature": "Collection<Identifiable> scatter(Identifiable source)", "full_signature": "public static Collection<Identifiable> scatter(Identifiable source)", "class_method_signature": "PreparationUtils.scatter(Identifiable source)", "testcase": false, "constructor": false}, {"identifier": "walk", "parameters": "(Object object, Predicate<Object> callback)", "modifiers": "private static", "return": "void", "signature": "void walk(Object object, Predicate<Object> callback)", "full_signature": "private static void walk(Object object, Predicate<Object> callback)", "class_method_signature": "PreparationUtils.walk(Object object, Predicate<Object> callback)", "testcase": false, "constructor": false}, {"identifier": "__listSteps", "parameters": "(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "modifiers": "private", "return": "void", "signature": "void __listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "full_signature": "private void __listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "class_method_signature": "PreparationUtils.__listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listStepsIds", "parameters": "(final String stepId, final PreparationRepository repository)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listStepsIds(final String stepId, final PreparationRepository repository)", "full_signature": "public List<String> listStepsIds(final String stepId, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listStepsIds(final String stepId, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listStepsIds", "parameters": "(final String stepId, final String limit, final PreparationRepository repository)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "full_signature": "public List<String> listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listSteps", "parameters": "(String headStepId, PreparationRepository repository)", "modifiers": "public", "return": "List<Step>", "signature": "List<Step> listSteps(String headStepId, PreparationRepository repository)", "full_signature": "public List<Step> listSteps(String headStepId, PreparationRepository repository)", "class_method_signature": "PreparationUtils.listSteps(String headStepId, PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listSteps", "parameters": "(final Step step, final String limit, final PreparationRepository repository)", "modifiers": "public", "return": "List<Step>", "signature": "List<Step> listSteps(final Step step, final String limit, final PreparationRepository repository)", "full_signature": "public List<Step> listSteps(final Step step, final String limit, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listSteps(final Step step, final String limit, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "getPreparationIdForStepRowMetadata", "parameters": "(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "full_signature": "public static List<String> getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "class_method_signature": "PreparationUtils.getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/api/preparation/PreparationUtils.java"}, "focal_method": {"identifier": "listSteps", "parameters": "(String headStepId, PreparationRepository repository)", "modifiers": "public", "return": "List<Step>", "body": "public List<Step> listSteps(String headStepId, PreparationRepository repository) {\n        return listSteps(repository.get(headStepId, Step.class), Step.ROOT_STEP.getId(), repository);\n    }", "signature": "List<Step> listSteps(String headStepId, PreparationRepository repository)", "full_signature": "public List<Step> listSteps(String headStepId, PreparationRepository repository)", "class_method_signature": "PreparationUtils.listSteps(String headStepId, PreparationRepository repository)", "testcase": false, "constructor": false, "invocations": ["listSteps", "get", "getId"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}