{"test_class": {"identifier": "JavaBeanSerializeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java"}, "test_case": {"identifier": "testBeanSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBeanSerialize() throws Exception {\n        Bean bean = new Bean();\n        bean.setDate(new Date());\n        bean.setStatus(PersonStatus.ENABLED);\n        bean.setType(Bean.class);\n        bean.setArray(new Phone[]{});\n\n        Collection<Phone> collection = new ArrayList<Phone>();\n        bean.setCollection(collection);\n        Phone phone = new Phone();\n        collection.add(phone);\n\n        Map<String, FullAddress> map = new HashMap<String, FullAddress>();\n        FullAddress address = new FullAddress();\n        map.put(\"first\", address);\n        bean.setAddresses(map);\n\n        JavaBeanDescriptor descriptor = JavaBeanSerializeUtil.serialize(bean, JavaBeanAccessor.METHOD);\n        Assert.assertTrue(descriptor.isBeanType());\n        assertEqualsPrimitive(bean.getDate(), descriptor.getProperty(\"date\"));\n        assertEqualsEnum(bean.getStatus(), descriptor.getProperty(\"status\"));\n        Assert.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"type\")).isClassType());\n        Assert.assertEquals(Bean.class.getName(), ((JavaBeanDescriptor) descriptor.getProperty(\"type\")).getClassNameProperty());\n        Assert.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"array\")).isArrayType());\n        Assert.assertEquals(0, ((JavaBeanDescriptor) descriptor.getProperty(\"array\")).propertySize());\n\n        JavaBeanDescriptor property = (JavaBeanDescriptor) descriptor.getProperty(\"collection\");\n        Assert.assertTrue(property.isCollectionType());\n        Assert.assertEquals(1, property.propertySize());\n        property = (JavaBeanDescriptor) property.getProperty(0);\n        Assert.assertTrue(property.isBeanType());\n        Assert.assertEquals(Phone.class.getName(), property.getClassName());\n        Assert.assertEquals(0, property.propertySize());\n\n        property = (JavaBeanDescriptor) descriptor.getProperty(\"addresses\");\n        Assert.assertTrue(property.isMapType());\n        Assert.assertEquals(bean.getAddresses().getClass().getName(), property.getClassName());\n        Assert.assertEquals(1, property.propertySize());\n\n\n        Map.Entry<Object, Object> entry = property.iterator().next();\n        Assert.assertTrue(((JavaBeanDescriptor) entry.getKey()).isPrimitiveType());\n        Assert.assertEquals(\"first\", ((JavaBeanDescriptor) entry.getKey()).getPrimitiveProperty());\n\n        Assert.assertTrue(((JavaBeanDescriptor) entry.getValue()).isBeanType());\n        Assert.assertEquals(FullAddress.class.getName(), ((JavaBeanDescriptor) entry.getValue()).getClassName());\n        Assert.assertEquals(0, ((JavaBeanDescriptor) entry.getValue()).propertySize());\n    }", "signature": "void testBeanSerialize()", "full_signature": "@Test public void testBeanSerialize()", "class_method_signature": "JavaBeanSerializeUtilTest.testBeanSerialize()", "testcase": true, "constructor": false, "invocations": ["setDate", "setStatus", "setType", "setArray", "setCollection", "add", "put", "setAddresses", "serialize", "assertTrue", "isBeanType", "assertEqualsPrimitive", "getDate", "getProperty", "assertEqualsEnum", "getStatus", "getProperty", "assertTrue", "isClassType", "getProperty", "assertEquals", "getName", "getClassNameProperty", "getProperty", "assertTrue", "isArrayType", "getProperty", "assertEquals", "propertySize", "getProperty", "getProperty", "assertTrue", "isCollectionType", "assertEquals", "propertySize", "getProperty", "assertTrue", "isBeanType", "assertEquals", "getName", "getClassName", "assertEquals", "propertySize", "getProperty", "assertTrue", "isMapType", "assertEquals", "getName", "getClass", "getAddresses", "getClassName", "assertEquals", "propertySize", "next", "iterator", "assertTrue", "isPrimitiveType", "getKey", "assertEquals", "getPrimitiveProperty", "getKey", "assertTrue", "isBeanType", "getValue", "assertEquals", "getName", "getClassName", "getValue", "assertEquals", "propertySize", "getValue"]}, "focal_class": {"identifier": "JavaBeanSerializeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, Class<?>> TYPES = new HashMap<String, Class<?>>();", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "TYPES = new HashMap<String, Class<?>>()", "var_name": "TYPES"}, {"original_string": "private static final String ARRAY_PREFIX = \"[\";", "modifier": "private static final", "type": "String", "declarator": "ARRAY_PREFIX = \"[\"", "var_name": "ARRAY_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_PREFIX = \"L\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_PREFIX = \"L\"", "var_name": "REFERENCE_TYPE_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_SUFFIX = \";\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_SUFFIX = \";\"", "var_name": "REFERENCE_TYPE_SUFFIX"}], "methods": [{"identifier": "JavaBeanSerializeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaBeanSerializeUtil()", "full_signature": "private  JavaBeanSerializeUtil()", "class_method_signature": "JavaBeanSerializeUtil.JavaBeanSerializeUtil()", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(Object obj)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object obj, JavaBeanAccessor accessor)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj, JavaBeanAccessor accessor)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorForSerialize", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "full_signature": "private static JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorForSerialize(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorIfAbsent", "parameters": "(Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "serializeInternal", "parameters": "(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "void", "signature": "void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor, IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "deserializeInternal", "parameters": "(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "void", "signature": "void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "getSetterMethod", "parameters": "(Class<?> cls, String property, Class<?> valueCls)", "modifiers": "private static", "return": "Method", "signature": "Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "full_signature": "private static Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "class_method_signature": "JavaBeanSerializeUtil.getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "Object", "signature": "Object instantiate(Class<?> cl)", "full_signature": "private static Object instantiate(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.instantiate(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "getConstructorArg", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "Object", "signature": "Object getConstructorArg(Class<?> cl)", "full_signature": "private static Object getConstructorArg(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.getConstructorArg(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "instantiateForDeserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "Object", "signature": "Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader, IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "name2Class", "parameters": "(ClassLoader loader, String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> name2Class(ClassLoader loader, String name)", "full_signature": "public static Class<?> name2Class(ClassLoader loader, String name)", "class_method_signature": "JavaBeanSerializeUtil.name2Class(ClassLoader loader, String name)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isArray(String type)", "full_signature": "private static boolean isArray(String type)", "class_method_signature": "JavaBeanSerializeUtil.isArray(String type)", "testcase": false, "constructor": false}, {"identifier": "isReferenceType", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReferenceType(String type)", "full_signature": "private static boolean isReferenceType(String type)", "class_method_signature": "JavaBeanSerializeUtil.isReferenceType(String type)", "testcase": false, "constructor": false}, {"identifier": "getEnumValueOfMethod", "parameters": "(Class cl)", "modifiers": "private static", "return": "Method", "signature": "Method getEnumValueOfMethod(Class cl)", "full_signature": "private static Method getEnumValueOfMethod(Class cl)", "class_method_signature": "JavaBeanSerializeUtil.getEnumValueOfMethod(Class cl)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/beanutil/JavaBeanSerializeUtil.java"}, "focal_method": {"identifier": "serialize", "parameters": "(Object obj)", "modifiers": "public static", "return": "JavaBeanDescriptor", "body": "public static JavaBeanDescriptor serialize(Object obj) {\n        JavaBeanDescriptor result = serialize(obj, JavaBeanAccessor.FIELD);\n        return result;\n    }", "signature": "JavaBeanDescriptor serialize(Object obj)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj)", "testcase": false, "constructor": false, "invocations": ["serialize"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}