{"test_class": {"identifier": "TestKafkaBrokerTopicObserver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TestKafkaBrokerTopicObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TestKafkaBrokerTopicObserver.class)", "var_name": "LOGGER"}, {"original_string": "private static KafkaBrokerTopicObserver kafkaBrokerTopicObserver;", "modifier": "private static", "type": "KafkaBrokerTopicObserver", "declarator": "kafkaBrokerTopicObserver", "var_name": "kafkaBrokerTopicObserver"}, {"original_string": "private KafkaServerStartable kafkaStarter;", "modifier": "private", "type": "KafkaServerStartable", "declarator": "kafkaStarter", "var_name": "kafkaStarter"}], "file": "uReplicator-Common/src/test/java/com/uber/stream/kafka/mirrormaker/common/core/TestKafkaBrokerTopicObserver.java"}, "test_case": {"identifier": "testKafkaBrokerTopicObserver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testKafkaBrokerTopicObserver() {\n    Assert.assertEquals(kafkaBrokerTopicObserver.getNumTopics(), 1);\n    Assert.assertEquals(kafkaBrokerTopicObserver.getTopicPartition(\"testTopic0\").getPartition(), 1);\n\n    Random random = new Random();\n    int topicCount = 3 + random.nextInt(5);\n    for (int i = 1; i < topicCount; ++i) {\n      String topicName = \"testTopic\" + i;\n      // Create Kafka topic\n      KafkaStarterUtils.createTopic(topicName, KafkaStarterUtils.DEFAULT_ZK_STR);\n      try {\n        Thread.sleep(1000);\n      } catch (Exception e) {\n      }\n      Assert.assertEquals(kafkaBrokerTopicObserver.getNumTopics(), 1 + i);\n      for (int j = 0; j <= i; ++j) {\n        Assert.assertTrue(kafkaBrokerTopicObserver.getAllTopics().contains(\"testTopic\" + j));\n        Assert.assertEquals(kafkaBrokerTopicObserver.getTopicPartition(\"testTopic\" + j).getPartition(), 1);\n      }\n    }\n  }", "signature": "void testKafkaBrokerTopicObserver()", "full_signature": "@Test public void testKafkaBrokerTopicObserver()", "class_method_signature": "TestKafkaBrokerTopicObserver.testKafkaBrokerTopicObserver()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNumTopics", "assertEquals", "getPartition", "getTopicPartition", "nextInt", "createTopic", "sleep", "assertEquals", "getNumTopics", "assertTrue", "contains", "getAllTopics", "assertEquals", "getPartition", "getTopicPartition"]}, "focal_class": {"identifier": "KafkaBrokerTopicObserver", "superclass": "", "interfaces": "implements IZkChildListener", "fields": [{"original_string": "private static final Logger LOGGER =\n      LoggerFactory.getLogger(KafkaBrokerTopicObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n      LoggerFactory.getLogger(KafkaBrokerTopicObserver.class)", "var_name": "LOGGER"}, {"original_string": "private final static String KAFKA_TOPICS_PATH = \"/brokers/topics\";", "modifier": "private final static", "type": "String", "declarator": "KAFKA_TOPICS_PATH = \"/brokers/topics\"", "var_name": "KAFKA_TOPICS_PATH"}, {"original_string": "private final static Set<String> KAFKA_INNER_TOPICS = ImmutableSet.of(\"__consumer_offsets\", \"__transaction_state\");", "modifier": "private final static", "type": "Set<String>", "declarator": "KAFKA_INNER_TOPICS = ImmutableSet.of(\"__consumer_offsets\", \"__transaction_state\")", "var_name": "KAFKA_INNER_TOPICS"}, {"original_string": "private final static String METRIC_TEMPLATE = \"KafkaBrokerTopicObserver.%s.%s\";", "modifier": "private final static", "type": "String", "declarator": "METRIC_TEMPLATE = \"KafkaBrokerTopicObserver.%s.%s\"", "var_name": "METRIC_TEMPLATE"}, {"original_string": "private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "executorService = Executors.newScheduledThreadPool(1)", "var_name": "executorService"}, {"original_string": "private final ZkClient _zkClient;", "modifier": "private final", "type": "ZkClient", "declarator": "_zkClient", "var_name": "_zkClient"}, {"original_string": "private final ZkUtils _zkUtils;", "modifier": "private final", "type": "ZkUtils", "declarator": "_zkUtils", "var_name": "_zkUtils"}, {"original_string": "private final String _kakfaClusterName;", "modifier": "private final", "type": "String", "declarator": "_kakfaClusterName", "var_name": "_kakfaClusterName"}, {"original_string": "private final Object _lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "_lock = new Object()", "var_name": "_lock"}, {"original_string": "private final Map<String, TopicPartition> _topicPartitionInfoMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, TopicPartition>", "declarator": "_topicPartitionInfoMap = new ConcurrentHashMap<>()", "var_name": "_topicPartitionInfoMap"}, {"original_string": "private final Set<String> _nonExistingRequestedTopicCache = new ConcurrentSkipListSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "_nonExistingRequestedTopicCache = new ConcurrentSkipListSet<>()", "var_name": "_nonExistingRequestedTopicCache"}, {"original_string": "private long _refreshTimeIntervalInMillis;", "modifier": "private", "type": "long", "declarator": "_refreshTimeIntervalInMillis", "var_name": "_refreshTimeIntervalInMillis"}, {"original_string": "private final AtomicLong _lastRefreshTime = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "_lastRefreshTime = new AtomicLong(0)", "var_name": "_lastRefreshTime"}, {"original_string": "private final Timer _refreshLatency = new Timer();", "modifier": "private final", "type": "Timer", "declarator": "_refreshLatency = new Timer()", "var_name": "_refreshLatency"}, {"original_string": "private final Counter _refreshFailureCounter = new Counter();", "modifier": "private final", "type": "Counter", "declarator": "_refreshFailureCounter = new Counter()", "var_name": "_refreshFailureCounter"}, {"original_string": "private final Counter _kafkaTopicsCounter = new Counter();", "modifier": "private final", "type": "Counter", "declarator": "_kafkaTopicsCounter = new Counter()", "var_name": "_kafkaTopicsCounter"}], "methods": [{"identifier": "KafkaBrokerTopicObserver", "parameters": "(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "modifiers": "public", "return": "", "signature": " KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "full_signature": "public  KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "class_method_signature": "KafkaBrokerTopicObserver.KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "KafkaBrokerTopicObserver.start()", "testcase": false, "constructor": false}, {"identifier": "registerMetric", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerMetric()", "full_signature": "private void registerMetric()", "class_method_signature": "KafkaBrokerTopicObserver.registerMetric()", "testcase": false, "constructor": false}, {"identifier": "handleChildChange", "parameters": "(String parentPath, List<String> currentChilds)", "modifiers": "@Override public", "return": "void", "signature": "void handleChildChange(String parentPath, List<String> currentChilds)", "full_signature": "@Override public void handleChildChange(String parentPath, List<String> currentChilds)", "class_method_signature": "KafkaBrokerTopicObserver.handleChildChange(String parentPath, List<String> currentChilds)", "testcase": false, "constructor": false}, {"identifier": "tryUpdateTopic", "parameters": "(String topic)", "modifiers": "public", "return": "void", "signature": "void tryUpdateTopic(String topic)", "full_signature": "public void tryUpdateTopic(String topic)", "class_method_signature": "KafkaBrokerTopicObserver.tryUpdateTopic(String topic)", "testcase": false, "constructor": false}, {"identifier": "tryAddTopic", "parameters": "(String topic)", "modifiers": "private", "return": "void", "signature": "void tryAddTopic(String topic)", "full_signature": "private void tryAddTopic(String topic)", "class_method_signature": "KafkaBrokerTopicObserver.tryAddTopic(String topic)", "testcase": false, "constructor": false}, {"identifier": "refreshCache", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshCache()", "full_signature": "private void refreshCache()", "class_method_signature": "KafkaBrokerTopicObserver.refreshCache()", "testcase": false, "constructor": false}, {"identifier": "tryToRefreshCache", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean tryToRefreshCache()", "full_signature": "private boolean tryToRefreshCache()", "class_method_signature": "KafkaBrokerTopicObserver.tryToRefreshCache()", "testcase": false, "constructor": false}, {"identifier": "getTopicPartition", "parameters": "(String topic)", "modifiers": "public", "return": "TopicPartition", "signature": "TopicPartition getTopicPartition(String topic)", "full_signature": "public TopicPartition getTopicPartition(String topic)", "class_method_signature": "KafkaBrokerTopicObserver.getTopicPartition(String topic)", "testcase": false, "constructor": false}, {"identifier": "getTopicPartitionWithRefresh", "parameters": "(String topic)", "modifiers": "public", "return": "TopicPartition", "signature": "TopicPartition getTopicPartitionWithRefresh(String topic)", "full_signature": "public TopicPartition getTopicPartitionWithRefresh(String topic)", "class_method_signature": "KafkaBrokerTopicObserver.getTopicPartitionWithRefresh(String topic)", "testcase": false, "constructor": false}, {"identifier": "getAllTopics", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAllTopics()", "full_signature": "public Set<String> getAllTopics()", "class_method_signature": "KafkaBrokerTopicObserver.getAllTopics()", "testcase": false, "constructor": false}, {"identifier": "getNumTopics", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumTopics()", "full_signature": "public long getNumTopics()", "class_method_signature": "KafkaBrokerTopicObserver.getNumTopics()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "KafkaBrokerTopicObserver.stop()", "testcase": false, "constructor": false}], "file": "uReplicator-Common/src/main/java/com/uber/stream/kafka/mirrormaker/common/core/KafkaBrokerTopicObserver.java"}, "focal_method": {"identifier": "KafkaBrokerTopicObserver", "parameters": "(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "modifiers": "public", "return": "", "body": "public KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis) {\n    LOGGER.info(\"Trying to init KafkaBrokerTopicObserver {} with ZK: {}\", brokerClusterName,\n        zkString);\n    _kakfaClusterName = brokerClusterName;\n    _refreshTimeIntervalInMillis = refreshTimeIntervalInMillis;\n    _zkClient = new ZkClient(zkString, 30000, 30000, ZKStringSerializer$.MODULE$);\n    _zkClient.subscribeChildChanges(KAFKA_TOPICS_PATH, this);\n    _zkUtils = ZkUtils.apply(_zkClient, false);\n    executorService.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        tryToRefreshCache();\n      }\n    }, 0, refreshTimeIntervalInMillis, TimeUnit.MILLISECONDS);\n    registerMetric();\n  }", "signature": " KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "full_signature": "public  KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "class_method_signature": "KafkaBrokerTopicObserver.KafkaBrokerTopicObserver(String brokerClusterName, String zkString, long refreshTimeIntervalInMillis)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}