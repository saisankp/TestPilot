{"test_class": {"identifier": "StudentServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private StudentService studentService;", "modifier": "@Autowired\n    private", "type": "StudentService", "declarator": "studentService", "var_name": "studentService"}, {"original_string": "@Autowired\n    private StudentRepository studentRepository;", "modifier": "@Autowired\n    private", "type": "StudentRepository", "declarator": "studentRepository", "var_name": "studentRepository"}], "file": "spring-boot-demo/src/test/java/bd/edu/seu/springbootdemo/service/StudentServiceTest.java"}, "test_case": {"identifier": "testInsertExistingStudent", "parameters": "()", "modifiers": "@Test(expected = ResourceAlreadyExistsException.class) public", "return": "void", "body": "@Test(expected = ResourceAlreadyExistsException.class)\n    public void testInsertExistingStudent() throws ResourceAlreadyExistsException {\n        Student student1 = new Student(1234, \"John Doe\", LocalDate.of(2011, Month.JANUARY, 1));\n        Student student2 = new Student(1234, \"Jane Doe\", LocalDate.of(2012, Month.MAY, 1));\n        try {\n            Student insertedStudent = studentService.insertStudent(student1);\n            assertEquals(student1, insertedStudent);\n        } catch (ResourceAlreadyExistsException e) {\n            e.printStackTrace();\n        }\n\n//        try {\n            Student insertedStudent = studentService.insertStudent(student2);\n            assertEquals(student2, insertedStudent);\n//        } catch (ResourceAlreadyExistsException e) {\n//            throw e;\n//        }\n    }", "signature": "void testInsertExistingStudent()", "full_signature": "@Test(expected = ResourceAlreadyExistsException.class) public void testInsertExistingStudent()", "class_method_signature": "StudentServiceTest.testInsertExistingStudent()", "testcase": true, "constructor": false, "invocations": ["of", "of", "insertStudent", "assertEquals", "printStackTrace", "insertStudent", "assertEquals"]}, "focal_class": {"identifier": "StudentService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StudentRepository studentRepository;", "modifier": "private", "type": "StudentRepository", "declarator": "studentRepository", "var_name": "studentRepository"}], "methods": [{"identifier": "StudentService", "parameters": "(StudentRepository studentRepository)", "modifiers": "public", "return": "", "signature": " StudentService(StudentRepository studentRepository)", "full_signature": "public  StudentService(StudentRepository studentRepository)", "class_method_signature": "StudentService.StudentService(StudentRepository studentRepository)", "testcase": false, "constructor": true}, {"identifier": "findById", "parameters": "(long id)", "modifiers": "public", "return": "Student", "signature": "Student findById(long id)", "full_signature": "public Student findById(long id)", "class_method_signature": "StudentService.findById(long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "public", "return": "List<Student>", "signature": "List<Student> findAll()", "full_signature": "public List<Student> findAll()", "class_method_signature": "StudentService.findAll()", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(long id)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteById(long id)", "full_signature": "public boolean deleteById(long id)", "class_method_signature": "StudentService.deleteById(long id)", "testcase": false, "constructor": false}, {"identifier": "insertStudent", "parameters": "(Student student)", "modifiers": "public", "return": "Student", "signature": "Student insertStudent(Student student)", "full_signature": "public Student insertStudent(Student student)", "class_method_signature": "StudentService.insertStudent(Student student)", "testcase": false, "constructor": false}, {"identifier": "updateStudent", "parameters": "(long id, Student student)", "modifiers": "public", "return": "Student", "signature": "Student updateStudent(long id, Student student)", "full_signature": "public Student updateStudent(long id, Student student)", "class_method_signature": "StudentService.updateStudent(long id, Student student)", "testcase": false, "constructor": false}], "file": "spring-boot-demo/src/main/java/bd/edu/seu/springbootdemo/service/StudentService.java"}, "focal_method": {"identifier": "insertStudent", "parameters": "(Student student)", "modifiers": "public", "return": "Student", "body": "public Student insertStudent(Student student) throws ResourceAlreadyExistsException {\n        Optional<Student> optionalStudent = studentRepository.findById(student.getId());\n        if (optionalStudent.isPresent()) {\n            throw new ResourceAlreadyExistsException(student.getId() + \"\");\n        } else {\n            return studentRepository.save(student);\n        }\n    }", "signature": "Student insertStudent(Student student)", "full_signature": "public Student insertStudent(Student student)", "class_method_signature": "StudentService.insertStudent(Student student)", "testcase": false, "constructor": false, "invocations": ["findById", "getId", "isPresent", "getId", "save"]}, "repository": {"repo_id": 188705852, "url": "https://github.com/kmhasan-class/summer2019aj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 3443, "license": "licensed"}}