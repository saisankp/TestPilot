{"test_class": {"identifier": "FlajoletMartinTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/FlajoletMartinTest.java"}, "test_case": {"identifier": "testOffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOffer() {\n        System.out.println(\"offer\");\n        FlajoletMartin instance = new FlajoletMartin(32, 1024, 32);\n        \n        long cardinality = 500L;\n        \n        for (long i = 0; i < cardinality; i++) {\n            instance.offer(Long.valueOf(i));\n            if (i % 50 == 0) {\n                System.out.println(\"actual: \" + i + \", estimated: \" + instance.cardinality());\n            }\n        }\n\n        System.out.println(\"actual: \" + cardinality + \", estimated: \" + instance.cardinality());\n        \n        assertEquals(cardinality, instance.cardinality(), 100);\n    }", "signature": "void testOffer()", "full_signature": "@Test public void testOffer()", "class_method_signature": "FlajoletMartinTest.testOffer()", "testcase": true, "constructor": false, "invocations": ["println", "offer", "valueOf", "println", "cardinality", "println", "cardinality", "assertEquals", "cardinality"]}, "focal_class": {"identifier": "FlajoletMartin", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double PHI = 0.77351D;", "modifier": "private static final", "type": "double", "declarator": "PHI = 0.77351D", "var_name": "PHI"}, {"original_string": "private int numHashGroups;", "modifier": "private", "type": "int", "declarator": "numHashGroups", "var_name": "numHashGroups"}, {"original_string": "private int numHashFunctionsInHashGroup;", "modifier": "private", "type": "int", "declarator": "numHashFunctionsInHashGroup", "var_name": "numHashFunctionsInHashGroup"}, {"original_string": "private HashFunction[][] hashes;", "modifier": "private", "type": "HashFunction[][]", "declarator": "hashes", "var_name": "hashes"}, {"original_string": "private int bitmapSize;", "modifier": "private", "type": "int", "declarator": "bitmapSize", "var_name": "bitmapSize"}, {"original_string": "private boolean[][][] bitmaps;", "modifier": "private", "type": "boolean[][][]", "declarator": "bitmaps", "var_name": "bitmaps"}, {"original_string": "private long numWords;", "modifier": "private", "type": "long", "declarator": "numWords", "var_name": "numWords"}], "methods": [{"identifier": "FlajoletMartin", "parameters": "(int bitmapSize, int numHashGroups, int numHashFunctionsInEachGroup)", "modifiers": "public", "return": "", "signature": " FlajoletMartin(int bitmapSize, int numHashGroups, int numHashFunctionsInEachGroup)", "full_signature": "public  FlajoletMartin(int bitmapSize, int numHashGroups, int numHashFunctionsInEachGroup)", "class_method_signature": "FlajoletMartin.FlajoletMartin(int bitmapSize, int numHashGroups, int numHashFunctionsInEachGroup)", "testcase": false, "constructor": true}, {"identifier": "generateHashFunctions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void generateHashFunctions()", "full_signature": "private void generateHashFunctions()", "class_method_signature": "FlajoletMartin.generateHashFunctions()", "testcase": false, "constructor": false}, {"identifier": "generateUniqueHashFunction", "parameters": "(Map<Integer, Collection<Integer>> mnMap)", "modifiers": "private", "return": "HashFunction", "signature": "HashFunction generateUniqueHashFunction(Map<Integer, Collection<Integer>> mnMap)", "full_signature": "private HashFunction generateUniqueHashFunction(Map<Integer, Collection<Integer>> mnMap)", "class_method_signature": "FlajoletMartin.generateUniqueHashFunction(Map<Integer, Collection<Integer>> mnMap)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Map<Integer, Collection<Integer>> map, int m, int n)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(Map<Integer, Collection<Integer>> map, int m, int n)", "full_signature": "private static boolean contains(Map<Integer, Collection<Integer>> map, int m, int n)", "class_method_signature": "FlajoletMartin.contains(Map<Integer, Collection<Integer>> map, int m, int n)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean offer(Object o)", "full_signature": "public boolean offer(Object o)", "class_method_signature": "FlajoletMartin.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "cardinality", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long cardinality()", "full_signature": "public long cardinality()", "class_method_signature": "FlajoletMartin.cardinality()", "testcase": false, "constructor": false}, {"identifier": "rho", "parameters": "(long v)", "modifiers": "private", "return": "int", "signature": "int rho(long v)", "full_signature": "private int rho(long v)", "class_method_signature": "FlajoletMartin.rho(long v)", "testcase": false, "constructor": false}, {"identifier": "getFirstZeroBit", "parameters": "(boolean[] b)", "modifiers": "private static", "return": "int", "signature": "int getFirstZeroBit(boolean[] b)", "full_signature": "private static int getFirstZeroBit(boolean[] b)", "class_method_signature": "FlajoletMartin.getFirstZeroBit(boolean[] b)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/FlajoletMartin.java"}, "focal_method": {"identifier": "offer", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "body": "public boolean offer(Object o) {\n        boolean affected = false;\n\n        for (int i=0; i<numHashGroups; i++) {\n            for (int j=0; j<numHashFunctionsInHashGroup; j++) {\n                HashFunction f = hashes[i][j];\n                long v = f.hash(o);\n                int index = rho(v);\n                if (!bitmaps[i][j][index]) {\n                    bitmaps[i][j][index] = true;\n                    affected = true;\n                }\n            }\n        }\n\n        return affected;\n    }", "signature": "boolean offer(Object o)", "full_signature": "public boolean offer(Object o)", "class_method_signature": "FlajoletMartin.offer(Object o)", "testcase": false, "constructor": false, "invocations": ["hash", "rho"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}