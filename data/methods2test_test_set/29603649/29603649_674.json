{"test_class": {"identifier": "TemplateFileReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESOURCE_NAME = \"resource-name\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_NAME = \"resource-name\"", "var_name": "RESOURCE_NAME"}, {"original_string": "@Mock\n    private FileFactory fileFactory;", "modifier": "@Mock\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private FileUtils fileUtils;", "modifier": "@Mock\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private TemporaryStubResourceHolder stubResourceHolder;", "modifier": "@Mock\n    private", "type": "TemporaryStubResourceHolder", "declarator": "stubResourceHolder", "var_name": "stubResourceHolder"}, {"original_string": "@Mock\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Mock\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Mock\n    private Map<String, byte[]> templatesMap;", "modifier": "@Mock\n    private", "type": "Map<String, byte[]>", "declarator": "templatesMap", "var_name": "templatesMap"}, {"original_string": "@InjectMocks\n    private TemplateFileReader underTest;", "modifier": "@InjectMocks\n    private", "type": "TemplateFileReader", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/initializer/template/TemplateFileReaderTest.java"}, "test_case": {"identifier": "testReadTemplateShouldThrowExceptionWhenTheSpecifiedTemplateDoesntExist", "parameters": "()", "modifiers": "@Test(expectedExceptions = DescriptorValidationFailedException.class) public", "return": "void", "body": "@Test(expectedExceptions = DescriptorValidationFailedException.class)\n    public void testReadTemplateShouldThrowExceptionWhenTheSpecifiedTemplateDoesntExist() throws IOException {\n        //GIVEN\n        given(stubResourceHolder.getTemplates()).willReturn(templatesMap);\n        given(templatesMap.containsKey(RESOURCE_NAME)).willReturn(false);\n        given(fileFactory.createFile(Mockito.anyString())).willReturn(file);\n        given(fileUtils.getFileAsByteArray(file)).willThrow(new IOException());\n        //WHEN\n        underTest.readTemplate(RESOURCE_NAME);\n        //THEN exception is thrown\n    }", "signature": "void testReadTemplateShouldThrowExceptionWhenTheSpecifiedTemplateDoesntExist()", "full_signature": "@Test(expectedExceptions = DescriptorValidationFailedException.class) public void testReadTemplateShouldThrowExceptionWhenTheSpecifiedTemplateDoesntExist()", "class_method_signature": "TemplateFileReaderTest.testReadTemplateShouldThrowExceptionWhenTheSpecifiedTemplateDoesntExist()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getTemplates", "willReturn", "given", "containsKey", "willReturn", "given", "createFile", "anyString", "willThrow", "given", "getFileAsByteArray", "readTemplate"]}, "focal_class": {"identifier": "TemplateFileReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Autowired\n    private FileUtils fileUtils;", "modifier": "@Autowired\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Autowired\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Autowired\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Autowired\n    private TemporaryStubResourceHolder resourceHolder;", "modifier": "@Autowired\n    private", "type": "TemporaryStubResourceHolder", "declarator": "resourceHolder", "var_name": "resourceHolder"}], "methods": [{"identifier": "readTemplate", "parameters": "(final String templatesName)", "modifiers": "public", "return": "byte[]", "signature": "byte[] readTemplate(final String templatesName)", "full_signature": "public byte[] readTemplate(final String templatesName)", "class_method_signature": "TemplateFileReader.readTemplate(final String templatesName)", "testcase": false, "constructor": false}, {"identifier": "readTemplateFromFileSystem", "parameters": "(final String templatesName)", "modifiers": "private", "return": "byte[]", "signature": "byte[] readTemplateFromFileSystem(final String templatesName)", "full_signature": "private byte[] readTemplateFromFileSystem(final String templatesName)", "class_method_signature": "TemplateFileReader.readTemplateFromFileSystem(final String templatesName)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/initializer/template/TemplateFileReader.java"}, "focal_method": {"identifier": "readTemplate", "parameters": "(final String templatesName)", "modifiers": "public", "return": "byte[]", "body": "public byte[] readTemplate(final String templatesName) {\n        byte[] result;\n        Map<String, byte[]> templatesMap = resourceHolder.getTemplates();\n        if (templatesMap.containsKey(templatesName)) {\n            result = templatesMap.get(templatesName);\n        } else {\n            result = readTemplateFromFileSystem(templatesName);\n            resourceHolder.addTemplate(templatesName, result);\n        }\n        return result;\n    }", "signature": "byte[] readTemplate(final String templatesName)", "full_signature": "public byte[] readTemplate(final String templatesName)", "class_method_signature": "TemplateFileReader.readTemplate(final String templatesName)", "testcase": false, "constructor": false, "invocations": ["getTemplates", "containsKey", "get", "readTemplateFromFileSystem", "addTemplate"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}