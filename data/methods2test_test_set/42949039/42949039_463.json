{"test_class": {"identifier": "SecurityFunctionDaoHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private SecurityFunctionDao securityFunctionDao;", "modifier": "@Mock\n    private", "type": "SecurityFunctionDao", "declarator": "securityFunctionDao", "var_name": "securityFunctionDao"}, {"original_string": "@InjectMocks\n    private SecurityFunctionDaoHelper securityFunctionDaoHelper = new SecurityFunctionDaoHelper();", "modifier": "@InjectMocks\n    private", "type": "SecurityFunctionDaoHelper", "declarator": "securityFunctionDaoHelper = new SecurityFunctionDaoHelper()", "var_name": "securityFunctionDaoHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/SecurityFunctionDaoHelperTest.java"}, "test_case": {"identifier": "testGetSecurityFunctionEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSecurityFunctionEntity()\n    {\n        // Create a security function entity.\n        SecurityFunctionEntity securityFunctionEntity = new SecurityFunctionEntity();\n\n        // Mock the external calls.\n        when(securityFunctionDao.getSecurityFunctionByName(SECURITY_FUNCTION)).thenReturn(securityFunctionEntity);\n\n        // Call the method under test.\n        SecurityFunctionEntity result = securityFunctionDaoHelper.getSecurityFunctionEntity(SECURITY_FUNCTION);\n\n        // Validate the results.\n        assertEquals(securityFunctionEntity, result);\n\n        // Verify the external calls.\n        verify(securityFunctionDao).getSecurityFunctionByName(SECURITY_FUNCTION);\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testGetSecurityFunctionEntity()", "full_signature": "@Test public void testGetSecurityFunctionEntity()", "class_method_signature": "SecurityFunctionDaoHelperTest.testGetSecurityFunctionEntity()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSecurityFunctionByName", "getSecurityFunctionEntity", "assertEquals", "getSecurityFunctionByName", "verify", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "SecurityFunctionDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SecurityFunctionDao securityFunctionDao;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionDao", "declarator": "securityFunctionDao", "var_name": "securityFunctionDao"}], "methods": [{"identifier": "getSecurityFunctionEntity", "parameters": "(String securityFunctionName)", "modifiers": "public", "return": "SecurityFunctionEntity", "signature": "SecurityFunctionEntity getSecurityFunctionEntity(String securityFunctionName)", "full_signature": "public SecurityFunctionEntity getSecurityFunctionEntity(String securityFunctionName)", "class_method_signature": "SecurityFunctionDaoHelper.getSecurityFunctionEntity(String securityFunctionName)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/SecurityFunctionDaoHelper.java"}, "focal_method": {"identifier": "getSecurityFunctionEntity", "parameters": "(String securityFunctionName)", "modifiers": "public", "return": "SecurityFunctionEntity", "body": "public SecurityFunctionEntity getSecurityFunctionEntity(String securityFunctionName)\n    {\n        SecurityFunctionEntity securityFunctionEntity = securityFunctionDao.getSecurityFunctionByName(securityFunctionName);\n\n        if (securityFunctionEntity == null)\n        {\n            throw new ObjectNotFoundException(String.format(\"Security function with name \\\"%s\\\" doesn't exist.\", securityFunctionName));\n        }\n\n        return securityFunctionEntity;\n    }", "signature": "SecurityFunctionEntity getSecurityFunctionEntity(String securityFunctionName)", "full_signature": "public SecurityFunctionEntity getSecurityFunctionEntity(String securityFunctionName)", "class_method_signature": "SecurityFunctionDaoHelper.getSecurityFunctionEntity(String securityFunctionName)", "testcase": false, "constructor": false, "invocations": ["getSecurityFunctionByName", "format"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}