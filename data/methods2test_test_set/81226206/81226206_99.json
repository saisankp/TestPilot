{"test_class": {"identifier": "FeatureParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FeatureParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FeatureParserTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/core/FeatureParserTest.java"}, "test_case": {"identifier": "testHide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHide() {\n        Feature feature = FeatureParser.parse(\"classpath:com/intuit/karate/core/test-hide.feature\");\n        Step step = feature.getStep(0, -1, 0);\n        assertTrue(step.isPrefixStar());\n        assertFalse(step.isPrint());\n        assertEquals(\"def a = 1\", step.getText());\n        step = feature.getStep(0, -1, 1);\n        assertTrue(step.isPrefixStar());\n        assertTrue(step.isPrint());\n        assertEquals(\"print a\", step.getText());\n        step = feature.getStep(0, -1, 2);\n        assertFalse(step.isPrefixStar());\n        assertTrue(step.isPrint());\n        assertEquals(\"print a\", step.getText());\n    }", "signature": "void testHide()", "full_signature": "@Test public void testHide()", "class_method_signature": "FeatureParserTest.testHide()", "testcase": true, "constructor": false, "invocations": ["parse", "getStep", "assertTrue", "isPrefixStar", "assertFalse", "isPrint", "assertEquals", "getText", "getStep", "assertTrue", "isPrefixStar", "assertTrue", "isPrint", "assertEquals", "getText", "getStep", "assertFalse", "isPrefixStar", "assertTrue", "isPrint", "assertEquals", "getText"]}, "focal_class": {"identifier": "FeatureParser", "superclass": "extends KarateParserBaseListener", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FeatureParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FeatureParser.class)", "var_name": "logger"}, {"original_string": "private final ParserErrorListener errorListener = new ParserErrorListener();", "modifier": "private final", "type": "ParserErrorListener", "declarator": "errorListener = new ParserErrorListener()", "var_name": "errorListener"}, {"original_string": "private final Feature feature;", "modifier": "private final", "type": "Feature", "declarator": "feature", "var_name": "feature"}, {"original_string": "private static final List<String> PREFIXES = Arrays.asList(\"*\", \"Given\", \"When\", \"Then\", \"And\", \"But\");", "modifier": "private static final", "type": "List<String>", "declarator": "PREFIXES = Arrays.asList(\"*\", \"Given\", \"When\", \"Then\", \"And\", \"But\")", "var_name": "PREFIXES"}, {"original_string": "private final CommonTokenStream tokenStream;", "modifier": "private final", "type": "CommonTokenStream", "declarator": "tokenStream", "var_name": "tokenStream"}, {"original_string": "private static final String TRIPLE_QUOTES = \"\\\"\\\"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "TRIPLE_QUOTES = \"\\\"\\\"\\\"\"", "var_name": "TRIPLE_QUOTES"}], "methods": [{"identifier": "parse", "parameters": "(String relativePath)", "modifiers": "public static", "return": "Feature", "signature": "Feature parse(String relativePath)", "full_signature": "public static Feature parse(String relativePath)", "class_method_signature": "FeatureParser.parse(String relativePath)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "Feature", "signature": "Feature parse(File file)", "full_signature": "public static Feature parse(File file)", "class_method_signature": "FeatureParser.parse(File file)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Resource resource)", "modifiers": "public static", "return": "Feature", "signature": "Feature parse(Resource resource)", "full_signature": "public static Feature parse(Resource resource)", "class_method_signature": "FeatureParser.parse(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "parseText", "parameters": "(Feature old, String text)", "modifiers": "public static", "return": "Feature", "signature": "Feature parseText(Feature old, String text)", "full_signature": "public static Feature parseText(Feature old, String text)", "class_method_signature": "FeatureParser.parseText(Feature old, String text)", "testcase": false, "constructor": false}, {"identifier": "updateStepFromText", "parameters": "(Step step, String text)", "modifiers": "public static", "return": "void", "signature": "void updateStepFromText(Step step, String text)", "full_signature": "public static void updateStepFromText(Step step, String text)", "class_method_signature": "FeatureParser.updateStepFromText(Step step, String text)", "testcase": false, "constructor": false}, {"identifier": "toStream", "parameters": "(File file)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream toStream(File file)", "full_signature": "private static InputStream toStream(File file)", "class_method_signature": "FeatureParser.toStream(File file)", "testcase": false, "constructor": false}, {"identifier": "FeatureParser", "parameters": "(File file, String relativePath, ClassLoader cl)", "modifiers": "private", "return": "", "signature": " FeatureParser(File file, String relativePath, ClassLoader cl)", "full_signature": "private  FeatureParser(File file, String relativePath, ClassLoader cl)", "class_method_signature": "FeatureParser.FeatureParser(File file, String relativePath, ClassLoader cl)", "testcase": false, "constructor": true}, {"identifier": "FeatureParser", "parameters": "(Resource resource)", "modifiers": "private", "return": "", "signature": " FeatureParser(Resource resource)", "full_signature": "private  FeatureParser(Resource resource)", "class_method_signature": "FeatureParser.FeatureParser(Resource resource)", "testcase": false, "constructor": true}, {"identifier": "FeatureParser", "parameters": "(Feature feature, InputStream is)", "modifiers": "private", "return": "", "signature": " FeatureParser(Feature feature, InputStream is)", "full_signature": "private  FeatureParser(Feature feature, InputStream is)", "class_method_signature": "FeatureParser.FeatureParser(Feature feature, InputStream is)", "testcase": false, "constructor": true}, {"identifier": "getActualLine", "parameters": "(TerminalNode node)", "modifiers": "private static", "return": "int", "signature": "int getActualLine(TerminalNode node)", "full_signature": "private static int getActualLine(TerminalNode node)", "class_method_signature": "FeatureParser.getActualLine(TerminalNode node)", "testcase": false, "constructor": false}, {"identifier": "toTags", "parameters": "(int line, List<TerminalNode> nodes)", "modifiers": "private static", "return": "List<Tag>", "signature": "List<Tag> toTags(int line, List<TerminalNode> nodes)", "full_signature": "private static List<Tag> toTags(int line, List<TerminalNode> nodes)", "class_method_signature": "FeatureParser.toTags(int line, List<TerminalNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(KarateParser.TableContext ctx)", "modifiers": "private static", "return": "Table", "signature": "Table toTable(KarateParser.TableContext ctx)", "full_signature": "private static Table toTable(KarateParser.TableContext ctx)", "class_method_signature": "FeatureParser.toTable(KarateParser.TableContext ctx)", "testcase": false, "constructor": false}, {"identifier": "indexOfFirstText", "parameters": "(String s)", "modifiers": "private static", "return": "int", "signature": "int indexOfFirstText(String s)", "full_signature": "private static int indexOfFirstText(String s)", "class_method_signature": "FeatureParser.indexOfFirstText(String s)", "testcase": false, "constructor": false}, {"identifier": "fixDocString", "parameters": "(String temp)", "modifiers": "private static", "return": "String", "signature": "String fixDocString(String temp)", "full_signature": "private static String fixDocString(String temp)", "class_method_signature": "FeatureParser.fixDocString(String temp)", "testcase": false, "constructor": false}, {"identifier": "collectComments", "parameters": "(ParserRuleContext prc)", "modifiers": "private", "return": "List<String>", "signature": "List<String> collectComments(ParserRuleContext prc)", "full_signature": "private List<String> collectComments(ParserRuleContext prc)", "class_method_signature": "FeatureParser.collectComments(ParserRuleContext prc)", "testcase": false, "constructor": false}, {"identifier": "toSteps", "parameters": "(Scenario scenario, List<KarateParser.StepContext> list)", "modifiers": "private", "return": "List<Step>", "signature": "List<Step> toSteps(Scenario scenario, List<KarateParser.StepContext> list)", "full_signature": "private List<Step> toSteps(Scenario scenario, List<KarateParser.StepContext> list)", "class_method_signature": "FeatureParser.toSteps(Scenario scenario, List<KarateParser.StepContext> list)", "testcase": false, "constructor": false}, {"identifier": "enterFeatureHeader", "parameters": "(KarateParser.FeatureHeaderContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterFeatureHeader(KarateParser.FeatureHeaderContext ctx)", "full_signature": "@Override public void enterFeatureHeader(KarateParser.FeatureHeaderContext ctx)", "class_method_signature": "FeatureParser.enterFeatureHeader(KarateParser.FeatureHeaderContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterBackground", "parameters": "(KarateParser.BackgroundContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterBackground(KarateParser.BackgroundContext ctx)", "full_signature": "@Override public void enterBackground(KarateParser.BackgroundContext ctx)", "class_method_signature": "FeatureParser.enterBackground(KarateParser.BackgroundContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterScenario", "parameters": "(KarateParser.ScenarioContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterScenario(KarateParser.ScenarioContext ctx)", "full_signature": "@Override public void enterScenario(KarateParser.ScenarioContext ctx)", "class_method_signature": "FeatureParser.enterScenario(KarateParser.ScenarioContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterScenarioOutline", "parameters": "(KarateParser.ScenarioOutlineContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterScenarioOutline(KarateParser.ScenarioOutlineContext ctx)", "full_signature": "@Override public void enterScenarioOutline(KarateParser.ScenarioOutlineContext ctx)", "class_method_signature": "FeatureParser.enterScenarioOutline(KarateParser.ScenarioOutlineContext ctx)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/core/FeatureParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String relativePath)", "modifiers": "public static", "return": "Feature", "body": "public static Feature parse(String relativePath) {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        Path path = FileUtils.fromRelativeClassPath(relativePath, cl);\n        return parse(new Resource(path, relativePath, -1));\n    }", "signature": "Feature parse(String relativePath)", "full_signature": "public static Feature parse(String relativePath)", "class_method_signature": "FeatureParser.parse(String relativePath)", "testcase": false, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "fromRelativeClassPath", "parse"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}