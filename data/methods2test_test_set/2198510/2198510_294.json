{"test_class": {"identifier": "TestThriftSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ThriftSource source;", "modifier": "private", "type": "ThriftSource", "declarator": "source", "var_name": "source"}, {"original_string": "private MemoryChannel channel;", "modifier": "private", "type": "MemoryChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private RpcClient client;", "modifier": "private", "type": "RpcClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final Properties props = new Properties();", "modifier": "private final", "type": "Properties", "declarator": "props = new Properties()", "var_name": "props"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestThriftSource.java"}, "test_case": {"identifier": "testAppendSSLWithComponentKeystore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAppendSSLWithComponentKeystore() throws Exception {\n\n    Context context = new Context();\n    channel.configure(context);\n    configureSource();\n\n    context.put(ThriftSource.CONFIG_BIND, \"0.0.0.0\");\n    context.put(ThriftSource.CONFIG_PORT, String.valueOf(port));\n    context.put(\"ssl\", \"true\");\n    context.put(\"keystore\", \"src/test/resources/keystorefile.jks\");\n    context.put(\"keystore-password\", \"password\");\n    context.put(\"keystore-type\", \"JKS\");\n\n    Configurables.configure(source, context);\n\n    doAppendSSL();\n  }", "signature": "void testAppendSSLWithComponentKeystore()", "full_signature": "@Test public void testAppendSSLWithComponentKeystore()", "class_method_signature": "TestThriftSource.testAppendSSLWithComponentKeystore()", "testcase": true, "constructor": false, "invocations": ["configure", "configureSource", "put", "put", "valueOf", "put", "put", "put", "put", "configure", "doAppendSSL"]}, "focal_class": {"identifier": "ThriftSource", "superclass": "extends SslContextAwareAbstractSource", "interfaces": "implements Configurable, EventDrivenSource", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(ThriftSource.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ThriftSource.class)", "var_name": "logger"}, {"original_string": "public static final String CONFIG_THREADS = \"threads\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_THREADS = \"threads\"", "var_name": "CONFIG_THREADS"}, {"original_string": "public static final String CONFIG_BIND = \"bind\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_BIND = \"bind\"", "var_name": "CONFIG_BIND"}, {"original_string": "public static final String CONFIG_PORT = \"port\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_PORT = \"port\"", "var_name": "CONFIG_PORT"}, {"original_string": "public static final String CONFIG_PROTOCOL = \"protocol\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_PROTOCOL = \"protocol\"", "var_name": "CONFIG_PROTOCOL"}, {"original_string": "public static final String BINARY_PROTOCOL = \"binary\";", "modifier": "public static final", "type": "String", "declarator": "BINARY_PROTOCOL = \"binary\"", "var_name": "BINARY_PROTOCOL"}, {"original_string": "public static final String COMPACT_PROTOCOL = \"compact\";", "modifier": "public static final", "type": "String", "declarator": "COMPACT_PROTOCOL = \"compact\"", "var_name": "COMPACT_PROTOCOL"}, {"original_string": "private static final String KERBEROS_KEY = \"kerberos\";", "modifier": "private static final", "type": "String", "declarator": "KERBEROS_KEY = \"kerberos\"", "var_name": "KERBEROS_KEY"}, {"original_string": "private static final String AGENT_PRINCIPAL = \"agent-principal\";", "modifier": "private static final", "type": "String", "declarator": "AGENT_PRINCIPAL = \"agent-principal\"", "var_name": "AGENT_PRINCIPAL"}, {"original_string": "private static final String AGENT_KEYTAB = \"agent-keytab\";", "modifier": "private static final", "type": "String", "declarator": "AGENT_KEYTAB = \"agent-keytab\"", "var_name": "AGENT_KEYTAB"}, {"original_string": "private Integer port;", "modifier": "private", "type": "Integer", "declarator": "port", "var_name": "port"}, {"original_string": "private String bindAddress;", "modifier": "private", "type": "String", "declarator": "bindAddress", "var_name": "bindAddress"}, {"original_string": "private int maxThreads = 0;", "modifier": "private", "type": "int", "declarator": "maxThreads = 0", "var_name": "maxThreads"}, {"original_string": "private SourceCounter sourceCounter;", "modifier": "private", "type": "SourceCounter", "declarator": "sourceCounter", "var_name": "sourceCounter"}, {"original_string": "private TServer server;", "modifier": "private", "type": "TServer", "declarator": "server", "var_name": "server"}, {"original_string": "private ExecutorService servingExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "servingExecutor", "var_name": "servingExecutor"}, {"original_string": "private String protocol;", "modifier": "private", "type": "String", "declarator": "protocol", "var_name": "protocol"}, {"original_string": "private boolean enableKerberos = false;", "modifier": "private", "type": "boolean", "declarator": "enableKerberos = false", "var_name": "enableKerberos"}, {"original_string": "private String principal;", "modifier": "private", "type": "String", "declarator": "principal", "var_name": "principal"}, {"original_string": "private FlumeAuthenticator flumeAuth;", "modifier": "private", "type": "FlumeAuthenticator", "declarator": "flumeAuth", "var_name": "flumeAuth"}], "methods": [{"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "ThriftSource.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ThriftSource.start()", "testcase": false, "constructor": false}, {"identifier": "getSSLServerTransport", "parameters": "()", "modifiers": "private", "return": "TServerTransport", "signature": "TServerTransport getSSLServerTransport()", "full_signature": "private TServerTransport getSSLServerTransport()", "class_method_signature": "ThriftSource.getSSLServerTransport()", "testcase": false, "constructor": false}, {"identifier": "getTServerTransport", "parameters": "()", "modifiers": "private", "return": "TServerTransport", "signature": "TServerTransport getTServerTransport()", "full_signature": "private TServerTransport getTServerTransport()", "class_method_signature": "ThriftSource.getTServerTransport()", "testcase": false, "constructor": false}, {"identifier": "getProtocolFactory", "parameters": "()", "modifiers": "private", "return": "TProtocolFactory", "signature": "TProtocolFactory getProtocolFactory()", "full_signature": "private TProtocolFactory getProtocolFactory()", "class_method_signature": "ThriftSource.getProtocolFactory()", "testcase": false, "constructor": false}, {"identifier": "getTThreadedSelectorServer", "parameters": "()", "modifiers": "private", "return": "TServer", "signature": "TServer getTThreadedSelectorServer()", "full_signature": "private TServer getTThreadedSelectorServer()", "class_method_signature": "ThriftSource.getTThreadedSelectorServer()", "testcase": false, "constructor": false}, {"identifier": "getTThreadPoolServer", "parameters": "()", "modifiers": "private", "return": "TServer", "signature": "TServer getTThreadPoolServer()", "full_signature": "private TServer getTThreadPoolServer()", "class_method_signature": "ThriftSource.getTThreadPoolServer()", "testcase": false, "constructor": false}, {"identifier": "populateServerParams", "parameters": "(TServer.AbstractServerArgs args)", "modifiers": "private", "return": "void", "signature": "void populateServerParams(TServer.AbstractServerArgs args)", "full_signature": "private void populateServerParams(TServer.AbstractServerArgs args)", "class_method_signature": "ThriftSource.populateServerParams(TServer.AbstractServerArgs args)", "testcase": false, "constructor": false}, {"identifier": "getSASLTransportFactory", "parameters": "()", "modifiers": "private", "return": "TTransportFactory", "signature": "TTransportFactory getSASLTransportFactory()", "full_signature": "private TTransportFactory getSASLTransportFactory()", "class_method_signature": "ThriftSource.getSASLTransportFactory()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ThriftSource.stop()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/ThriftSource.java"}, "focal_method": {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure(Context context) {\n    configureSsl(context);\n    logger.info(\"Configuring thrift source.\");\n    port = context.getInteger(CONFIG_PORT);\n    Preconditions.checkNotNull(port, \"Port must be specified for Thrift \" +\n        \"Source.\");\n    bindAddress = context.getString(CONFIG_BIND);\n    Preconditions.checkNotNull(bindAddress, \"Bind address must be specified \" +\n        \"for Thrift Source.\");\n\n    try {\n      maxThreads = context.getInteger(CONFIG_THREADS, 0);\n      maxThreads = (maxThreads <= 0) ? Integer.MAX_VALUE : maxThreads;\n    } catch (NumberFormatException e) {\n      logger.warn(\"Thrift source\\'s \\\"threads\\\" property must specify an \" +\n                  \"integer value: \" + context.getString(CONFIG_THREADS));\n    }\n\n    if (sourceCounter == null) {\n      sourceCounter = new SourceCounter(getName());\n    }\n\n    protocol = context.getString(CONFIG_PROTOCOL);\n    if (protocol == null) {\n      // default is to use the compact protocol.\n      protocol = COMPACT_PROTOCOL;\n    }\n    Preconditions.checkArgument(\n        (protocol.equalsIgnoreCase(BINARY_PROTOCOL) ||\n                protocol.equalsIgnoreCase(COMPACT_PROTOCOL)),\n        \"binary or compact are the only valid Thrift protocol types to \" +\n                \"choose from.\");\n\n    principal = context.getString(AGENT_PRINCIPAL);\n    String keytab = context.getString(AGENT_KEYTAB);\n    enableKerberos = context.getBoolean(KERBEROS_KEY, false);\n    this.flumeAuth = FlumeAuthenticationUtil.getAuthenticator(principal, keytab);\n    if (enableKerberos) {\n      if (!flumeAuth.isAuthenticated()) {\n        throw new FlumeException(\"Authentication failed in Kerberos mode for \" +\n                \"principal \" + principal + \" keytab \" + keytab);\n      }\n      flumeAuth.startCredentialRefresher();\n    }\n  }", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "ThriftSource.configure(Context context)", "testcase": false, "constructor": false, "invocations": ["configureSsl", "info", "getInteger", "checkNotNull", "getString", "checkNotNull", "getInteger", "warn", "getString", "getName", "getString", "checkArgument", "equalsIgnoreCase", "equalsIgnoreCase", "getString", "getString", "getBoolean", "getAuthenticator", "isAuthenticated", "startCredentialRefresher"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}