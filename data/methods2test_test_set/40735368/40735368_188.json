{"test_class": {"identifier": "AppSchemaConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaConfigurationTest.class.getPackage().getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaConfigurationTest.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "private static final boolean ADJUST_LOGLEVEL = false;", "modifier": "private static final", "type": "boolean", "declarator": "ADJUST_LOGLEVEL = false", "var_name": "ADJUST_LOGLEVEL"}, {"original_string": "private static final Level LOGLEVEL = Level.FINE;", "modifier": "private static final", "type": "Level", "declarator": "LOGLEVEL = Level.FINE", "var_name": "LOGLEVEL"}, {"original_string": "private Level logLevel;", "modifier": "private", "type": "Level", "declarator": "logLevel", "var_name": "logLevel"}, {"original_string": "private Level rootLogLevel;", "modifier": "private", "type": "Level", "declarator": "rootLogLevel", "var_name": "rootLogLevel"}], "file": "modules/extension/app-schema/app-schema-resolver/src/test/java/org/geotools/xml/AppSchemaConfigurationTest.java"}, "test_case": {"identifier": "catalogCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void catalogCache() throws Exception {\n        File cacheDirectory = DataUtilities.urlToFile(AppSchemaConfigurationTest.class\n                .getResource(\"/test-data/cache\"));\n        SchemaResolver resolver = new SchemaResolver(SchemaCatalog.build(getClass()\n                .getResource(\"/test-data/catalog.xml\")), new SchemaCache(cacheDirectory, false));\n        Configuration configuration = new AppSchemaConfiguration(\n                \"http://schemas.example.org/catalog-test\",\n                \"http://schemas.example.org/catalog-test/catalog-cache-test.xsd\", resolver);\n        SchemaIndex schemaIndex = null;\n        try {\n            schemaIndex = Schemas.findSchemas(configuration);\n            Assert.assertEquals(3, schemaIndex.getSchemas().length);\n            String schemaLocation = null;\n            for (XSDSchema schema : schemaIndex.getSchemas()) {\n                if (schema.getSchemaLocation().endsWith(\"catalog-cache-test.xsd\")) {\n                    schemaLocation = schema.getSchemaLocation();\n                    break;\n                }\n            }\n            Assert.assertNotNull(schemaLocation);\n            Assert.assertTrue(schemaLocation.startsWith(\"file:\"));\n            Assert.assertTrue(DataUtilities.urlToFile(new URL(schemaLocation)).exists());\n            Assert.assertNotNull(schemaIndex.getElementDeclaration(new QName(\n                    \"http://schemas.example.org/demo\", \"GeologicUnit\")));\n            // test that relative include can be resolved\n            Assert.assertNotNull(schemaIndex.getElementDeclaration(new QName(\n                    \"http://schemas.example.org/demo\", \"InnerGeologicUnit\")));\n        } finally {\n            if (schemaIndex != null) {\n                schemaIndex.destroy();\n            }\n        }\n    }", "signature": "void catalogCache()", "full_signature": "@Test public void catalogCache()", "class_method_signature": "AppSchemaConfigurationTest.catalogCache()", "testcase": true, "constructor": false, "invocations": ["urlToFile", "getResource", "build", "getResource", "getClass", "findSchemas", "assertEquals", "getSchemas", "getSchemas", "endsWith", "getSchemaLocation", "getSchemaLocation", "assertNotNull", "assertTrue", "startsWith", "assertTrue", "exists", "urlToFile", "assertNotNull", "getElementDeclaration", "assertNotNull", "getElementDeclaration", "destroy"]}, "focal_class": {"identifier": "AppSchemaConfiguration", "superclass": "extends Configuration", "interfaces": "", "fields": [{"original_string": "private final String originalSchemaLocation;", "modifier": "private final", "type": "String", "declarator": "originalSchemaLocation", "var_name": "originalSchemaLocation"}], "methods": [{"identifier": "AppSchemaConfiguration", "parameters": "(String namespace, String schemaLocation,\n            SchemaResolver resolver)", "modifiers": "public", "return": "", "signature": " AppSchemaConfiguration(String namespace, String schemaLocation,\n            SchemaResolver resolver)", "full_signature": "public  AppSchemaConfiguration(String namespace, String schemaLocation,\n            SchemaResolver resolver)", "class_method_signature": "AppSchemaConfiguration.AppSchemaConfiguration(String namespace, String schemaLocation,\n            SchemaResolver resolver)", "testcase": false, "constructor": true}, {"identifier": "getSchemaLocation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchemaLocation()", "full_signature": "public String getSchemaLocation()", "class_method_signature": "AppSchemaConfiguration.getSchemaLocation()", "testcase": false, "constructor": false}, {"identifier": "addDependency", "parameters": "(Configuration dependency)", "modifiers": "@Override public", "return": "void", "signature": "void addDependency(Configuration dependency)", "full_signature": "@Override public void addDependency(Configuration dependency)", "class_method_signature": "AppSchemaConfiguration.addDependency(Configuration dependency)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema-resolver/src/main/java/org/geotools/xml/AppSchemaConfiguration.java"}, "focal_method": {"identifier": "getSchemaLocation", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getSchemaLocation() {\n        return originalSchemaLocation;\n    }", "signature": "String getSchemaLocation()", "full_signature": "public String getSchemaLocation()", "class_method_signature": "AppSchemaConfiguration.getSchemaLocation()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}