{"test_class": {"identifier": "BackupReminderTooltipManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int RECEIPTS_FEW = 10;", "modifier": "private final static", "type": "int", "declarator": "RECEIPTS_FEW = 10", "var_name": "RECEIPTS_FEW"}, {"original_string": "private final static int RECEIPTS_LOT = 20;", "modifier": "private final static", "type": "int", "declarator": "RECEIPTS_LOT = 20", "var_name": "RECEIPTS_LOT"}, {"original_string": "private final static int DAYS_FEW = 7;", "modifier": "private final static", "type": "int", "declarator": "DAYS_FEW = 7", "var_name": "DAYS_FEW"}, {"original_string": "private final static int DAYS_LOT = 12;", "modifier": "private final static", "type": "int", "declarator": "DAYS_LOT = 12", "var_name": "DAYS_LOT"}, {"original_string": "private static final int NO_PREVIOUS_BACKUPS = -1;", "modifier": "private static final", "type": "int", "declarator": "NO_PREVIOUS_BACKUPS = -1", "var_name": "NO_PREVIOUS_BACKUPS"}, {"original_string": "private BackupReminderTooltipManager manager;", "modifier": "private", "type": "BackupReminderTooltipManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock\n    BackupProvidersManager backupProvidersManager;", "modifier": "@Mock", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "@Mock\n    BackupReminderTooltipStorage storage;", "modifier": "@Mock", "type": "BackupReminderTooltipStorage", "declarator": "storage", "var_name": "storage"}], "file": "app/src/test/java/co/smartreceipts/android/widget/tooltip/report/backup/BackupReminderTooltipManagerTest.java"}, "test_case": {"identifier": "getDays", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDays() {\n        when(storage.getReceiptsCountWithoutBackup()).thenReturn(RECEIPTS_LOT);\n        when(storage.getLastManualBackupDate()).thenReturn(new Date(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(DAYS_LOT)));\n\n        final TestObserver<Integer> testObserver = manager.needToShowBackupReminder().test();\n        testObserver.awaitTerminalEvent();\n        testObserver.assertComplete()\n                .assertComplete()\n                .assertNoErrors()\n                .assertValue(days -> days == DAYS_LOT);\n    }", "signature": "void getDays()", "full_signature": "@Test public void getDays()", "class_method_signature": "BackupReminderTooltipManagerTest.getDays()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getReceiptsCountWithoutBackup", "thenReturn", "when", "getLastManualBackupDate", "currentTimeMillis", "toMillis", "test", "needToShowBackupReminder", "awaitTerminalEvent", "assertValue", "assertNoErrors", "assertComplete", "assertComplete"]}, "focal_class": {"identifier": "BackupReminderTooltipManager", "superclass": "", "interfaces": "implements TooltipManager", "fields": [{"original_string": "private static final int DAYS_WITHOUT_BACKUP_LIMIT = 10;", "modifier": "private static final", "type": "int", "declarator": "DAYS_WITHOUT_BACKUP_LIMIT = 10", "var_name": "DAYS_WITHOUT_BACKUP_LIMIT"}, {"original_string": "private static final int NEW_RECEIPTS_LIMIT = 15;", "modifier": "private static final", "type": "int", "declarator": "NEW_RECEIPTS_LIMIT = 15", "var_name": "NEW_RECEIPTS_LIMIT"}, {"original_string": "private static final int NO_PREVIOUS_BACKUPS_DAY = -1;", "modifier": "private static final", "type": "int", "declarator": "NO_PREVIOUS_BACKUPS_DAY = -1", "var_name": "NO_PREVIOUS_BACKUPS_DAY"}, {"original_string": "private final BackupProvidersManager backupProvidersManager;", "modifier": "private final", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "private final BackupReminderTooltipStorage backupReminderTooltipStorage;", "modifier": "private final", "type": "BackupReminderTooltipStorage", "declarator": "backupReminderTooltipStorage", "var_name": "backupReminderTooltipStorage"}], "methods": [{"identifier": "BackupReminderTooltipManager", "parameters": "(@NonNull BackupProvidersManager backupProvidersManager,\n                                        @NonNull BackupReminderTooltipStorage backupReminderTooltipStorage)", "modifiers": "@Inject public", "return": "", "signature": " BackupReminderTooltipManager(@NonNull BackupProvidersManager backupProvidersManager,\n                                        @NonNull BackupReminderTooltipStorage backupReminderTooltipStorage)", "full_signature": "@Inject public  BackupReminderTooltipManager(@NonNull BackupProvidersManager backupProvidersManager,\n                                        @NonNull BackupReminderTooltipStorage backupReminderTooltipStorage)", "class_method_signature": "BackupReminderTooltipManager.BackupReminderTooltipManager(@NonNull BackupProvidersManager backupProvidersManager,\n                                        @NonNull BackupReminderTooltipStorage backupReminderTooltipStorage)", "testcase": false, "constructor": true}, {"identifier": "needToShowBackupReminder", "parameters": "()", "modifiers": "public", "return": "Maybe<Integer>", "signature": "Maybe<Integer> needToShowBackupReminder()", "full_signature": "public Maybe<Integer> needToShowBackupReminder()", "class_method_signature": "BackupReminderTooltipManager.needToShowBackupReminder()", "testcase": false, "constructor": false}, {"identifier": "tooltipWasDismissed", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void tooltipWasDismissed()", "full_signature": "@Override public void tooltipWasDismissed()", "class_method_signature": "BackupReminderTooltipManager.tooltipWasDismissed()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/widget/tooltip/report/backup/BackupReminderTooltipManager.java"}, "focal_method": {"identifier": "needToShowBackupReminder", "parameters": "()", "modifiers": "public", "return": "Maybe<Integer>", "body": "public Maybe<Integer> needToShowBackupReminder() {\n        return Maybe.fromCallable(() -> {\n                    int prolongationsCount = backupReminderTooltipStorage.getProlongationsCount();\n                    int receiptsLimit = NEW_RECEIPTS_LIMIT + NEW_RECEIPTS_LIMIT * prolongationsCount;\n                    int daysLimit = DAYS_WITHOUT_BACKUP_LIMIT + DAYS_WITHOUT_BACKUP_LIMIT * prolongationsCount;\n\n                    if (backupProvidersManager.getSyncProvider() == SyncProvider.None && // disabled auto backups\n                            backupReminderTooltipStorage.getReceiptsCountWithoutBackup() >= receiptsLimit) { // and user has a lot of new receipts since last backup\n\n                        long lastManualBackupTime = backupReminderTooltipStorage.getLastManualBackupDate().getTime();\n\n                        if (lastManualBackupTime == 0) { // if we didn't track any manual backup yet\n                            return NO_PREVIOUS_BACKUPS_DAY;\n                        } else {\n                            int daysSinceLastManualBackup = (int) TimeUnit.MILLISECONDS.toDays(Math.abs(lastManualBackupTime - System.currentTimeMillis()));\n                            return daysSinceLastManualBackup >= daysLimit ? daysSinceLastManualBackup : null;\n                        }\n                    } else {\n                        return null;\n                    }\n                })\n                .subscribeOn(Schedulers.io());\n    }", "signature": "Maybe<Integer> needToShowBackupReminder()", "full_signature": "public Maybe<Integer> needToShowBackupReminder()", "class_method_signature": "BackupReminderTooltipManager.needToShowBackupReminder()", "testcase": false, "constructor": false, "invocations": ["subscribeOn", "fromCallable", "getProlongationsCount", "getSyncProvider", "getReceiptsCountWithoutBackup", "getTime", "getLastManualBackupDate", "toDays", "abs", "currentTimeMillis", "io"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}