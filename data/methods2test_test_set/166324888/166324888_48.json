{"test_class": {"identifier": "ImportObservedPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n   private ImportObservedContract.View view;", "modifier": "@Mock\n   private", "type": "ImportObservedContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "private ImportObservedPresenter presenter;", "modifier": "private", "type": "ImportObservedPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/ImportObservedPresenterTest.java"}, "test_case": {"identifier": "testIsImportObservedWallet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsImportObservedWallet(){\n\n        presenter.IsImportObservedWallet(\"lat1x8z5nfgjnaryutayxxkzzkrfzenpwl7k6r2a8z\",true);\n        Mockito.verify(view).enableImportObservedWallet(Mockito.anyBoolean());\n    }", "signature": "void testIsImportObservedWallet()", "full_signature": "@Test public void testIsImportObservedWallet()", "class_method_signature": "ImportObservedPresenterTest.testIsImportObservedWallet()", "testcase": true, "constructor": false, "invocations": ["IsImportObservedWallet", "enableImportObservedWallet", "verify", "anyBoolean"]}, "focal_class": {"identifier": "ImportObservedPresenter", "superclass": "extends BasePresenter<ImportObservedContract.View>", "interfaces": "implements ImportObservedContract.Presenter", "fields": [{"original_string": "private static final int MSG_OK = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_OK = 1", "var_name": "MSG_OK"}, {"original_string": "private static final int MSG_WALLET_EXISTS = -1;", "modifier": "private static final", "type": "int", "declarator": "MSG_WALLET_EXISTS = -1", "var_name": "MSG_WALLET_EXISTS"}, {"original_string": "private static final int MSG_INVALID_ADDRESS = -2;", "modifier": "private static final", "type": "int", "declarator": "MSG_INVALID_ADDRESS = -2", "var_name": "MSG_INVALID_ADDRESS"}, {"original_string": "private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    PreferenceTool.putInt(NodeManager.getInstance().getChainId(), PreferenceTool.getInt(NodeManager.getInstance().getChainId(), 1) + 1);\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_INVALID_ADDRESS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.observed_invalid_address));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    };", "modifier": "private", "type": "Handler", "declarator": "mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    PreferenceTool.putInt(NodeManager.getInstance().getChainId(), PreferenceTool.getInt(NodeManager.getInstance().getChainId(), 1) + 1);\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_INVALID_ADDRESS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.observed_invalid_address));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }", "var_name": "mHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "ImportObservedPresenter.init()", "testcase": false, "constructor": false}, {"identifier": "parseQRCode", "parameters": "(String QRCode)", "modifiers": "@Override public", "return": "void", "signature": "void parseQRCode(String QRCode)", "full_signature": "@Override public void parseQRCode(String QRCode)", "class_method_signature": "ImportObservedPresenter.parseQRCode(String QRCode)", "testcase": false, "constructor": false}, {"identifier": "IsImportObservedWallet", "parameters": "(String content, boolean isEnableCreate)", "modifiers": "@Override public", "return": "void", "signature": "void IsImportObservedWallet(String content, boolean isEnableCreate)", "full_signature": "@Override public void IsImportObservedWallet(String content, boolean isEnableCreate)", "class_method_signature": "ImportObservedPresenter.IsImportObservedWallet(String content, boolean isEnableCreate)", "testcase": false, "constructor": false}, {"identifier": "checkPaste", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void checkPaste()", "full_signature": "@Override public void checkPaste()", "class_method_signature": "ImportObservedPresenter.checkPaste()", "testcase": false, "constructor": false}, {"identifier": "loadDBWalletNumber", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadDBWalletNumber()", "full_signature": "@Override public void loadDBWalletNumber()", "class_method_signature": "ImportObservedPresenter.loadDBWalletNumber()", "testcase": false, "constructor": false}, {"identifier": "importWalletAddress", "parameters": "(String walletAddress)", "modifiers": "@Override public", "return": "void", "signature": "void importWalletAddress(String walletAddress)", "full_signature": "@Override public void importWalletAddress(String walletAddress)", "class_method_signature": "ImportObservedPresenter.importWalletAddress(String walletAddress)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/ImportObservedPresenter.java"}, "focal_method": {"identifier": "IsImportObservedWallet", "parameters": "(String content, boolean isEnableCreate)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void IsImportObservedWallet(String content, boolean isEnableCreate) {\n        if (!TextUtils.isEmpty(content) && isEnableCreate) {\n            getView().enableImportObservedWallet(true);\n        } else {\n            getView().enableImportObservedWallet(false);\n        }\n    }", "signature": "void IsImportObservedWallet(String content, boolean isEnableCreate)", "full_signature": "@Override public void IsImportObservedWallet(String content, boolean isEnableCreate)", "class_method_signature": "ImportObservedPresenter.IsImportObservedWallet(String content, boolean isEnableCreate)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "enableImportObservedWallet", "getView", "enableImportObservedWallet", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}