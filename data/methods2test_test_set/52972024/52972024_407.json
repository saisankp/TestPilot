{"test_class": {"identifier": "HttpsEndpointPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private HttpsEndpointPlugin plugin;", "modifier": "private", "type": "HttpsEndpointPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private ResolveByTypeAndNameStrategy deserializationStrategyChooser;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "deserializationStrategyChooser", "var_name": "deserializationStrategyChooser"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveCookies;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveCookies", "var_name": "resolveCookies"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveHeaders;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveHeaders", "var_name": "resolveHeaders"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveStatusSetter;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveStatusSetter", "var_name": "resolveStatusSetter"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveResponseSender;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveResponseSender", "var_name": "resolveResponseSender"}], "file": "CoreFeatures/HttpsEndpoint-plugins/PluginHttpsEndpoint/src/test/java/info/smart_tools/smartactors/https_endpoint_plugins/https_endpoint_plugin/HttpsEndpointPluginTest.java"}, "test_case": {"identifier": "checkLoadExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkLoadExecution()\n            throws Exception {\n        Checker checker = new Checker();\n        checker.item = new BootstrapItem(\"test\");\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        List<IBootstrapItem<String>> itemList = new ArrayList<>();\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                Object[] args = invocation.getArguments();\n                checker.item = (IBootstrapItem<String>) args[0];\n                itemList.add(checker.item);\n                return null;\n            }\n        })\n                .when(bootstrap)\n                .add(any(IBootstrapItem.class));\n        IPlugin plugin = new HttpsEndpointPlugin(bootstrap);\n        plugin.load();\n        assertEquals(itemList.size(), 1);\n        IBootstrapItem<String> item = itemList.get(0);\n        item.executeProcess();\n        reset(bootstrap);\n    }", "signature": "void checkLoadExecution()", "full_signature": "@Test public void checkLoadExecution()", "class_method_signature": "HttpsEndpointPluginTest.checkLoadExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doAnswer", "getArguments", "add", "any", "load", "assertEquals", "size", "get", "executeProcess", "reset"]}, "focal_class": {"identifier": "HttpsEndpointPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IFieldName typeFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "typeFieldName", "var_name": "typeFieldName"}, {"original_string": "private IFieldName portFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "portFieldName", "var_name": "portFieldName"}, {"original_string": "private IFieldName startChainNameFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "startChainNameFieldName", "var_name": "startChainNameFieldName"}, {"original_string": "private IFieldName stackDepthFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "stackDepthFieldName", "var_name": "stackDepthFieldName"}, {"original_string": "private IFieldName maxContentLengthFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "maxContentLengthFieldName", "var_name": "maxContentLengthFieldName"}, {"original_string": "private IFieldName endpointNameFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "endpointNameFieldName", "var_name": "endpointNameFieldName"}, {"original_string": "private IFieldName queueFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "queueFieldName", "var_name": "queueFieldName"}, {"original_string": "private IFieldName templatesFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "templatesFieldName", "var_name": "templatesFieldName"}, {"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "HttpsEndpointPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " HttpsEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  HttpsEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "HttpsEndpointPlugin.HttpsEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpsEndpointPlugin.load()", "testcase": false, "constructor": false}, {"identifier": "initializeFieldNames", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeFieldNames()", "full_signature": "private void initializeFieldNames()", "class_method_signature": "HttpsEndpointPlugin.initializeFieldNames()", "testcase": false, "constructor": false}, {"identifier": "registerHttpsEndpoint", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerHttpsEndpoint()", "full_signature": "private void registerHttpsEndpoint()", "class_method_signature": "HttpsEndpointPlugin.registerHttpsEndpoint()", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpsEndpoint-plugins/PluginHttpsEndpoint/src/main/java/info/smart_tools/smartactors/https_endpoint_plugins/https_endpoint_plugin/HttpsEndpointPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CreateHttpsEndpoint\");\n            item\n//                    .after(\"IOC\")\n//                    .after(\"message_processor\")\n//                    .after(\"message_processing_sequence\")\n//                    .after(\"response\")                    // in http-endpoint-plugin\n//                    .after(\"response_content_strategy\")   // in http-endpoint-plugin\n//                    .after(\"FieldNamePlugin\")\n//                    .before(\"starter\")\n                    .process(\n                            () -> {\n                                try {\n                                    initializeFieldNames();\n                                    IOC.register(Keys.getOrAdd(ISslEngineProvider.class.getCanonicalName()),\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        ISslEngineProvider sslContextProvider = new SslEngineProvider();\n                                                        try {\n                                                            if (args != null && args.length > 0) {\n                                                                sslContextProvider.init((IObject) args[0]);\n                                                            } else {\n                                                                sslContextProvider.init(null);\n                                                            }\n                                                        } catch (SSLEngineProviderException e) {\n                                                        }\n                                                        return sslContextProvider;\n                                                    }\n                                            )\n                                    );\n\n                                    IOC.register(\n                                            Keys.getOrAdd(IEnvironmentHandler.class.getCanonicalName()),\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        IObject configuration = (IObject) args[0];\n                                                        IQueue queue = null;\n                                                        Integer stackDepth = null;\n                                                        try {\n                                                            queue = (IQueue) configuration.getValue(queueFieldName);\n                                                            stackDepth =\n                                                                    (Integer) configuration.getValue(stackDepthFieldName);\n                                                            return new EnvironmentHandler(queue, stackDepth);\n                                                        } catch (ReadValueException | InvalidArgumentException | ResolutionException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n                                    registerHttpsEndpoint();\n\n                                    IOC.register(Keys.getOrAdd(FileInputStream.class.getCanonicalName()),\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        try {\n                                                            return new FileInputStream((String) args[0]);\n                                                        } catch (FileNotFoundException e) {\n                                                        }\n                                                        return null;\n                                                    }\n                                            ));\n                                    IKey emptyIObjectKey = Keys.getOrAdd(\"EmptyIObject\");\n                                    IOC.register(emptyIObjectKey, new CreateNewInstanceStrategy(\n                                                    (args) -> new DSObject()\n                                            )\n                                    );\n\n                                    IKey channelHandlerNettyKey = Keys.getOrAdd(\"info.smart_tools.smartactors.http_endpoint.channel_handler_netty.ChannelHandlerNetty\");\n                                    IOC.register(channelHandlerNettyKey,\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        ChannelHandlerNetty channelHandlerNetty = new ChannelHandlerNetty();\n                                                        channelHandlerNetty.init((ChannelHandlerContext) args[0]);\n                                                        return channelHandlerNetty;\n                                                    }\n                                            ));\n\n                                } catch (Exception e) {\n                                    throw new RuntimeException(e);\n                                }\n\n                            }\n                    );\n            bootstrap.add(item);\n        } catch (Exception e) {\n            throw new PluginException(\"Can't load \\\"CreateHttpsEndpoint\\\" plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpsEndpointPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "initializeFieldNames", "register", "getOrAdd", "getCanonicalName", "init", "init", "register", "getOrAdd", "getCanonicalName", "getValue", "getValue", "registerHttpsEndpoint", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "register", "getOrAdd", "register", "init", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}