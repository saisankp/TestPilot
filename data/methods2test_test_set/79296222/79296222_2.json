{"test_class": {"identifier": "PostListPresenterTest", "superclass": "extends BasePresenterTest", "interfaces": "", "fields": [{"original_string": "private PostListPresenter mPresenter;", "modifier": "private", "type": "PostListPresenter", "declarator": "mPresenter", "var_name": "mPresenter"}, {"original_string": "private List<PostItem> mValidDummyData;", "modifier": "private", "type": "List<PostItem>", "declarator": "mValidDummyData", "var_name": "mValidDummyData"}, {"original_string": "@Mock private PostListPresenter.View mView;", "modifier": "@Mock private", "type": "PostListPresenter.View", "declarator": "mView", "var_name": "mView"}, {"original_string": "@Mock private DataController mDataController;", "modifier": "@Mock private", "type": "DataController", "declarator": "mDataController", "var_name": "mDataController"}, {"original_string": "private Observable<List<PostItem>> mPostListObservable;", "modifier": "private", "type": "Observable<List<PostItem>>", "declarator": "mPostListObservable", "var_name": "mPostListObservable"}], "file": "app/src/test/java/info/kimjihyok/new_york_times_client/post/list/PostListPresenterTest.java"}, "test_case": {"identifier": "givenCombinedPostsReturnsValidList_whenViewIsAttached_shouldPassItToAdapterWithoutError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void givenCombinedPostsReturnsValidList_whenViewIsAttached_shouldPassItToAdapterWithoutError() throws Exception {\n        //Test when view is attached and data controller emits valid data, onSubscribe should be called from view, which is attached to the adapter\n        mPostListObservable = Observable.just(getValidPostItems());\n        when(mDataController.getCombinedPosts()).thenReturn(mPostListObservable);\n\n        mPresenter = new PostListPresenter(mDataController);\n        mPresenter.attachView(mView);\n\n        verify(mView, atLeastOnce()).onSubscribe(getValidPostItems());\n    }", "signature": "void givenCombinedPostsReturnsValidList_whenViewIsAttached_shouldPassItToAdapterWithoutError()", "full_signature": "@Test public void givenCombinedPostsReturnsValidList_whenViewIsAttached_shouldPassItToAdapterWithoutError()", "class_method_signature": "PostListPresenterTest.givenCombinedPostsReturnsValidList_whenViewIsAttached_shouldPassItToAdapterWithoutError()", "testcase": true, "constructor": false, "invocations": ["just", "getValidPostItems", "thenReturn", "when", "getCombinedPosts", "attachView", "onSubscribe", "verify", "atLeastOnce", "getValidPostItems"]}, "focal_class": {"identifier": "PostListPresenter", "superclass": "", "interfaces": "implements BasePresenter<PostListPresenter.View>", "fields": [{"original_string": "private static final String TAG = \"PostListPresenter\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"PostListPresenter\"", "var_name": "TAG"}, {"original_string": "private static final boolean DEBUG = BuildConfig.DEBUG;", "modifier": "private static final", "type": "boolean", "declarator": "DEBUG = BuildConfig.DEBUG", "var_name": "DEBUG"}, {"original_string": "private CompositeDisposable mSubscriptions = new CompositeDisposable();", "modifier": "private", "type": "CompositeDisposable", "declarator": "mSubscriptions = new CompositeDisposable()", "var_name": "mSubscriptions"}, {"original_string": "private DataControllerInterface mDataController;", "modifier": "private", "type": "DataControllerInterface", "declarator": "mDataController", "var_name": "mDataController"}, {"original_string": "private View mMVPView;", "modifier": "private", "type": "View", "declarator": "mMVPView", "var_name": "mMVPView"}], "methods": [{"identifier": "attachView", "parameters": "(View view)", "modifiers": "@Override public", "return": "void", "signature": "void attachView(View view)", "full_signature": "@Override public void attachView(View view)", "class_method_signature": "PostListPresenter.attachView(View view)", "testcase": false, "constructor": false}, {"identifier": "detachView", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void detachView()", "full_signature": "@Override public void detachView()", "class_method_signature": "PostListPresenter.detachView()", "testcase": false, "constructor": false}, {"identifier": "PostListPresenter", "parameters": "(DataControllerInterface dataController)", "modifiers": "public", "return": "", "signature": " PostListPresenter(DataControllerInterface dataController)", "full_signature": "public  PostListPresenter(DataControllerInterface dataController)", "class_method_signature": "PostListPresenter.PostListPresenter(DataControllerInterface dataController)", "testcase": false, "constructor": true}], "file": "app/src/main/java/info/kimjihyok/new_york_times_client/post/list/PostListPresenter.java"}, "focal_method": {"identifier": "attachView", "parameters": "(View view)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void attachView(View view) {\n    mMVPView = view;\n\n    mSubscriptions.add(\n        mDataController.getCombinedPosts()\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe(onNext -> mMVPView.onSubscribe(onNext), onError -> {}));\n\n  }", "signature": "void attachView(View view)", "full_signature": "@Override public void attachView(View view)", "class_method_signature": "PostListPresenter.attachView(View view)", "testcase": false, "constructor": false, "invocations": ["add", "subscribe", "observeOn", "subscribeOn", "getCombinedPosts", "io", "mainThread", "onSubscribe"]}, "repository": {"repo_id": 79296222, "url": "https://github.com/wotomas/NewYorkTimesMVP", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 365, "license": "licensed"}}