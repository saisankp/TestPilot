{"test_class": {"identifier": "PrimitiveTypeDefinitionBuilderTest", "superclass": "extends AbstractAnnotationProcessingTest", "interfaces": "", "fields": [{"original_string": "private PrimitiveTypeDefinitionBuilder builder;", "modifier": "private", "type": "PrimitiveTypeDefinitionBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private VariableElement zField;", "modifier": "private", "type": "VariableElement", "declarator": "zField", "var_name": "zField"}, {"original_string": "private VariableElement bField;", "modifier": "private", "type": "VariableElement", "declarator": "bField", "var_name": "bField"}, {"original_string": "private VariableElement cField;", "modifier": "private", "type": "VariableElement", "declarator": "cField", "var_name": "cField"}, {"original_string": "private VariableElement sField;", "modifier": "private", "type": "VariableElement", "declarator": "sField", "var_name": "sField"}, {"original_string": "private VariableElement iField;", "modifier": "private", "type": "VariableElement", "declarator": "iField", "var_name": "iField"}, {"original_string": "private VariableElement lField;", "modifier": "private", "type": "VariableElement", "declarator": "lField", "var_name": "lField"}, {"original_string": "private VariableElement fField;", "modifier": "private", "type": "VariableElement", "declarator": "fField", "var_name": "fField"}, {"original_string": "private VariableElement dField;", "modifier": "private", "type": "VariableElement", "declarator": "dField", "var_name": "dField"}], "file": "dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/builder/PrimitiveTypeDefinitionBuilderTest.java"}, "test_case": {"identifier": "testAccept", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccept() {\n        assertTrue(builder.accept(processingEnv, zField.asType()));\n        assertTrue(builder.accept(processingEnv, bField.asType()));\n        assertTrue(builder.accept(processingEnv, cField.asType()));\n        assertTrue(builder.accept(processingEnv, sField.asType()));\n        assertTrue(builder.accept(processingEnv, iField.asType()));\n        assertTrue(builder.accept(processingEnv, lField.asType()));\n        assertTrue(builder.accept(processingEnv, fField.asType()));\n        assertTrue(builder.accept(processingEnv, dField.asType()));\n    }", "signature": "void testAccept()", "full_signature": "@Test public void testAccept()", "class_method_signature": "PrimitiveTypeDefinitionBuilderTest.testAccept()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType", "assertTrue", "accept", "asType"]}, "focal_class": {"identifier": "PrimitiveTypeDefinitionBuilder", "superclass": "", "interfaces": "implements TypeDefinitionBuilder<PrimitiveType>", "fields": [], "methods": [{"identifier": "accept", "parameters": "(ProcessingEnvironment processingEnv, TypeMirror type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(ProcessingEnvironment processingEnv, TypeMirror type)", "full_signature": "@Override public boolean accept(ProcessingEnvironment processingEnv, TypeMirror type)", "class_method_signature": "PrimitiveTypeDefinitionBuilder.accept(ProcessingEnvironment processingEnv, TypeMirror type)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(ProcessingEnvironment processingEnv, PrimitiveType type, TypeDefinition typeDefinition)", "modifiers": "@Override public", "return": "void", "signature": "void build(ProcessingEnvironment processingEnv, PrimitiveType type, TypeDefinition typeDefinition)", "full_signature": "@Override public void build(ProcessingEnvironment processingEnv, PrimitiveType type, TypeDefinition typeDefinition)", "class_method_signature": "PrimitiveTypeDefinitionBuilder.build(ProcessingEnvironment processingEnv, PrimitiveType type, TypeDefinition typeDefinition)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "PrimitiveTypeDefinitionBuilder.getPriority()", "testcase": false, "constructor": false}], "file": "dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/builder/PrimitiveTypeDefinitionBuilder.java"}, "focal_method": {"identifier": "accept", "parameters": "(ProcessingEnvironment processingEnv, TypeMirror type)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accept(ProcessingEnvironment processingEnv, TypeMirror type) {\n        return isPrimitiveType(type);\n    }", "signature": "boolean accept(ProcessingEnvironment processingEnv, TypeMirror type)", "full_signature": "@Override public boolean accept(ProcessingEnvironment processingEnv, TypeMirror type)", "class_method_signature": "PrimitiveTypeDefinitionBuilder.accept(ProcessingEnvironment processingEnv, TypeMirror type)", "testcase": false, "constructor": false, "invocations": ["isPrimitiveType"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}