{"test_class": {"identifier": "RetrieveColumnsTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/constraints/RetrieveColumnsTest.java"}, "test_case": {"identifier": "testRetrieveAllColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRetrieveAllColumns() throws Exception {\n    // setup the table\n    List<CKeyValue> values = new ArrayList<CKeyValue>();\n    values.add(new CKeyValue(new byte[] { 1 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 4 }));\n    values.add(new CKeyValue(new byte[] { 2 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 5 }));\n    values.add(new CKeyValue(new byte[] { 3 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 6 }));\n    values.add(new CKeyValue(new byte[] { 4 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 7 }));\n\n    InMemoryTable t1 = new InMemoryTable();\n    t1.put(new Put(values));\n\n    // test that we pull back any and all columns\n    SeekingCurrentIterator iter = new RetrieveColumns(new KeyOnlyFilter(t1), t1)\n        .getResultIterator();\n    assertTrue(iter.hasNext());\n    assertCount(iter, 4, 4);\n  }", "signature": "void testRetrieveAllColumns()", "full_signature": "@Test public void testRetrieveAllColumns()", "class_method_signature": "RetrieveColumnsTest.testRetrieveAllColumns()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "put", "getResultIterator", "assertTrue", "hasNext", "assertCount"]}, "focal_class": {"identifier": "RetrieveColumns", "superclass": "extends Constraint", "interfaces": "", "fields": [{"original_string": "private TableAdapter table;", "modifier": "private", "type": "TableAdapter", "declarator": "table", "var_name": "table"}, {"original_string": "private Constraint subConstraint;", "modifier": "private", "type": "Constraint", "declarator": "subConstraint", "var_name": "subConstraint"}, {"original_string": "private CColumn[] columns;", "modifier": "private", "type": "CColumn[]", "declarator": "columns", "var_name": "columns"}], "methods": [{"identifier": "RetrieveColumns", "parameters": "()", "modifiers": "public", "return": "", "signature": " RetrieveColumns()", "full_signature": "public  RetrieveColumns()", "class_method_signature": "RetrieveColumns.RetrieveColumns()", "testcase": false, "constructor": true}, {"identifier": "RetrieveColumns", "parameters": "(Constraint subConstraint, TableAdapter primaryTable)", "modifiers": "public", "return": "", "signature": " RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable)", "full_signature": "public  RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable)", "class_method_signature": "RetrieveColumns.RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable)", "testcase": false, "constructor": true}, {"identifier": "RetrieveColumns", "parameters": "(Constraint subConstraint, TableAdapter primaryTable,\n      CColumn... columns)", "modifiers": "public", "return": "", "signature": " RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable,\n      CColumn... columns)", "full_signature": "public  RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable,\n      CColumn... columns)", "class_method_signature": "RetrieveColumns.RetrieveColumns(Constraint subConstraint, TableAdapter primaryTable,\n      CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "RetrieveColumns.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "RetrieveColumns.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "RetrieveColumns.getResultIterator()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/constraints/RetrieveColumns.java"}, "focal_method": {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "body": "@Override\n  public SeekingCurrentIterator getResultIterator() {\n\n    SeekingCurrentIterator results = this.subConstraint.getResultIterator();\n    return new RetrieveColumnsIterator(results, this.table, this.columns);\n  }", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "RetrieveColumns.getResultIterator()", "testcase": false, "constructor": false, "invocations": ["getResultIterator"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}