{"test_class": {"identifier": "SimpleApplicationWrapperTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private SimpleApplicationWrapper wrapper;", "modifier": "private", "type": "SimpleApplicationWrapper", "declarator": "wrapper", "var_name": "wrapper"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private String namespace = \"http://mobi.com/applications#\";", "modifier": "private", "type": "String", "declarator": "namespace = \"http://mobi.com/applications#\"", "var_name": "namespace"}], "file": "com.mobi.platform.config.impl/src/test/java/com/mobi/platform/config/impl/application/SimpleApplicationWrapperTest.java"}, "test_case": {"identifier": "startTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void startTest() throws Exception {\n        // Setup:\n        Map<String, Object> props = new HashMap<>();\n        props.put(\"id\", \"id\");\n        props.put(\"title\", \"Title\");\n        props.put(\"description\", \"Description\");\n\n        wrapper.start(props);\n        assertEquals(props.get(\"id\").toString(), wrapper.applicationId);\n        RepositoryConnection conn = repo.getConnection();\n        Model appModel = MODEL_FACTORY.createModel();\n        Resource appIri = VALUE_FACTORY.createIRI(namespace + props.get(\"id\"));\n        conn.getStatements(appIri, null, null).forEach(appModel::add);\n        assertFalse(appModel.isEmpty());\n        assertTrue(appModel.contains(appIri, VALUE_FACTORY.createIRI(RDF.TYPE.stringValue()), VALUE_FACTORY.createIRI(Application.TYPE)));\n        assertTrue(appModel.contains(appIri, VALUE_FACTORY.createIRI(DCTERMS.TITLE.stringValue()),\n                VALUE_FACTORY.createLiteral(props.get(\"title\").toString())));\n        assertTrue(appModel.contains(appIri, VALUE_FACTORY.createIRI(DCTERMS.DESCRIPTION.stringValue()),\n                VALUE_FACTORY.createLiteral(props.get(\"description\").toString())));\n        conn.close();\n    }", "signature": "void startTest()", "full_signature": "@Test public void startTest()", "class_method_signature": "SimpleApplicationWrapperTest.startTest()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "start", "assertEquals", "toString", "get", "getConnection", "createModel", "createIRI", "get", "forEach", "getStatements", "assertFalse", "isEmpty", "assertTrue", "contains", "createIRI", "stringValue", "createIRI", "assertTrue", "contains", "createIRI", "stringValue", "createLiteral", "toString", "get", "assertTrue", "contains", "createIRI", "stringValue", "createLiteral", "toString", "get", "close"]}, "focal_class": {"identifier": "SimpleApplicationWrapper", "superclass": "", "interfaces": "implements ApplicationWrapper", "fields": [{"original_string": "private static final String NAMESPACE = \"http://mobi.com/applications#\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"http://mobi.com/applications#\"", "var_name": "NAMESPACE"}, {"original_string": "protected static final String NAME = \"com.mobi.platform.config.application\";", "modifier": "protected static final", "type": "String", "declarator": "NAME = \"com.mobi.platform.config.application\"", "var_name": "NAME"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleApplicationWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleApplicationWrapper.class)", "var_name": "LOG"}, {"original_string": "protected Repository repository;", "modifier": "protected", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected ValueFactory factory;", "modifier": "protected", "type": "ValueFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected ModelFactory modelFactory;", "modifier": "protected", "type": "ModelFactory", "declarator": "modelFactory", "var_name": "modelFactory"}, {"original_string": "protected ApplicationFactory appFactory;", "modifier": "protected", "type": "ApplicationFactory", "declarator": "appFactory", "var_name": "appFactory"}, {"original_string": "protected String applicationId;", "modifier": "protected", "type": "String", "declarator": "applicationId", "var_name": "applicationId"}], "methods": [{"identifier": "setRepository", "parameters": "(Repository repository)", "modifiers": "@Reference(name = \"repository\") protected", "return": "void", "signature": "void setRepository(Repository repository)", "full_signature": "@Reference(name = \"repository\") protected void setRepository(Repository repository)", "class_method_signature": "SimpleApplicationWrapper.setRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "(ValueFactory factory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setFactory(ValueFactory factory)", "full_signature": "@Reference protected void setFactory(ValueFactory factory)", "class_method_signature": "SimpleApplicationWrapper.setFactory(ValueFactory factory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference protected void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "SimpleApplicationWrapper.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setAppFactory", "parameters": "(ApplicationFactory appFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setAppFactory(ApplicationFactory appFactory)", "full_signature": "@Reference protected void setAppFactory(ApplicationFactory appFactory)", "class_method_signature": "SimpleApplicationWrapper.setAppFactory(ApplicationFactory appFactory)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate protected", "return": "void", "signature": "void start(Map<String, Object> props)", "full_signature": "@Activate protected void start(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.start(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> props)", "modifiers": "@Modified protected", "return": "void", "signature": "void modified(Map<String, Object> props)", "full_signature": "@Modified protected void modified(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.modified(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Deactivate protected", "return": "void", "signature": "void stop()", "full_signature": "@Deactivate protected void stop()", "class_method_signature": "SimpleApplicationWrapper.stop()", "testcase": false, "constructor": false}, {"identifier": "validateConfig", "parameters": "(Map<String, Object> props)", "modifiers": "@Override public", "return": "void", "signature": "void validateConfig(Map<String, Object> props)", "full_signature": "@Override public void validateConfig(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.validateConfig(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "SimpleApplicationWrapper.getId()", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "@Override public", "return": "Application", "signature": "Application getApplication()", "full_signature": "@Override public Application getApplication()", "class_method_signature": "SimpleApplicationWrapper.getApplication()", "testcase": false, "constructor": false}], "file": "com.mobi.platform.config.impl/src/main/java/com/mobi/platform/config/impl/application/SimpleApplicationWrapper.java"}, "focal_method": {"identifier": "start", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate protected", "return": "void", "body": "@Activate\n    protected void start(Map<String, Object> props) {\n        ApplicationConfig config = Configurable.createConfigurable(ApplicationConfig.class, props);\n        LOG.trace(\"Starting \\\"\" + config.id() + \"\\\" application...\");\n\n        validateConfig(props);\n        this.applicationId = config.id();\n\n        Application application = appFactory.createNew(factory.createIRI(NAMESPACE + applicationId));\n        application.setProperty(factory.createLiteral(config.title()), factory.createIRI(DCTERMS.TITLE.stringValue()));\n        if (config.description() != null && !config.description().equals(\"\")) {\n            application.setProperty(factory.createLiteral(config.description()),\n                    factory.createIRI(DCTERMS.DESCRIPTION.stringValue()));\n        }\n\n        try (RepositoryConnection conn = repository.getConnection()) {\n            if (conn.contains(application.getResource(), null, null)) {\n                LOG.warn(\"Replacing existing application \\\"\" + applicationId + \"\\\".\");\n                conn.remove(application.getResource(), null, null);\n            }\n            conn.add(application.getModel());\n        }\n        LOG.debug(\"Application \\\"\" + applicationId + \"\\\" started.\");\n    }", "signature": "void start(Map<String, Object> props)", "full_signature": "@Activate protected void start(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.start(Map<String, Object> props)", "testcase": false, "constructor": false, "invocations": ["createConfigurable", "trace", "id", "validateConfig", "id", "createNew", "createIRI", "setProperty", "createLiteral", "title", "createIRI", "stringValue", "description", "equals", "description", "setProperty", "createLiteral", "description", "createIRI", "stringValue", "getConnection", "contains", "getResource", "warn", "remove", "getResource", "add", "getModel", "debug"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}