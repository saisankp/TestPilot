{"test_class": {"identifier": "BinaryTreeByLevelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeByLevel binaryTreeByLevel;", "modifier": "private", "type": "BinaryTreeByLevel", "declarator": "binaryTreeByLevel", "var_name": "binaryTreeByLevel"}], "file": "algs/src/test/java/com/github/pedrovgs/problem13/BinaryTreeByLevelTest.java"}, "test_case": {"identifier": "shouldReturnTheSameNodeInTheListIfTheTreeJustContainsOneElementUsingQueue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnTheSameNodeInTheListIfTheTreeJustContainsOneElementUsingQueue() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n\n    List<BinaryNode> result = binaryTreeByLevel.getUsingQueue(root);\n\n    List<BinaryNode<Integer>> expectedList = Arrays.asList(root);\n    assertEquals(expectedList, result);\n  }", "signature": "void shouldReturnTheSameNodeInTheListIfTheTreeJustContainsOneElementUsingQueue()", "full_signature": "@Test public void shouldReturnTheSameNodeInTheListIfTheTreeJustContainsOneElementUsingQueue()", "class_method_signature": "BinaryTreeByLevelTest.shouldReturnTheSameNodeInTheListIfTheTreeJustContainsOneElementUsingQueue()", "testcase": true, "constructor": false, "invocations": ["getUsingQueue", "asList", "assertEquals"]}, "focal_class": {"identifier": "BinaryTreeByLevel", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getUsingQueue", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getUsingQueue(BinaryNode root)", "full_signature": "public List<BinaryNode> getUsingQueue(BinaryNode root)", "class_method_signature": "BinaryTreeByLevel.getUsingQueue(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getWithoutAdditionalDataStructures", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getWithoutAdditionalDataStructures(BinaryNode root)", "full_signature": "public List<BinaryNode> getWithoutAdditionalDataStructures(BinaryNode root)", "class_method_signature": "BinaryTreeByLevel.getWithoutAdditionalDataStructures(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validateBinaryNode", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateBinaryNode(BinaryNode root)", "full_signature": "private void validateBinaryNode(BinaryNode root)", "class_method_signature": "BinaryTreeByLevel.validateBinaryNode(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "int", "signature": "int getDepth(BinaryNode root)", "full_signature": "private int getDepth(BinaryNode root)", "class_method_signature": "BinaryTreeByLevel.getDepth(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getNodesForLevel", "parameters": "(BinaryNode root, int level)", "modifiers": "private", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getNodesForLevel(BinaryNode root, int level)", "full_signature": "private List<BinaryNode> getNodesForLevel(BinaryNode root, int level)", "class_method_signature": "BinaryTreeByLevel.getNodesForLevel(BinaryNode root, int level)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem13/BinaryTreeByLevel.java"}, "focal_method": {"identifier": "getUsingQueue", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "body": "public List<BinaryNode> getUsingQueue(BinaryNode root) {\n    validateBinaryNode(root);\n\n    List<BinaryNode> result = new LinkedList<BinaryNode>();\n    Queue<BinaryNode> queue = new LinkedList<BinaryNode>();\n    queue.add(root);\n    while (!queue.isEmpty()) {\n      BinaryNode binaryNode = queue.remove();\n      result.add(binaryNode);\n      if (binaryNode.getLeft() != null) queue.add(binaryNode.getLeft());\n      if (binaryNode.getRight() != null) queue.add(binaryNode.getRight());\n    }\n    return result;\n  }", "signature": "List<BinaryNode> getUsingQueue(BinaryNode root)", "full_signature": "public List<BinaryNode> getUsingQueue(BinaryNode root)", "class_method_signature": "BinaryTreeByLevel.getUsingQueue(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateBinaryNode", "add", "isEmpty", "remove", "add", "getLeft", "add", "getLeft", "getRight", "add", "getRight"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}