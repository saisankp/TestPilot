{"test_class": {"identifier": "DefaultPdfSourceOpenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/DefaultPdfSourceOpenerTest.java"}, "test_case": {"identifier": "openDocumentWrongPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void openDocumentWrongPassword() throws TaskIOException, IOException {\n        try {\n            File tmp = IOUtils.createTemporaryBufferWithName(\"dumbo.pdf\");\n            OutputStream out = new FileOutputStream(tmp);\n            InputStream in = getClass().getClassLoader().getResourceAsStream(\"pdf/encrypted_AES128_user_pwd.pdf\");\n\n            try {\n                org.apache.commons.io.IOUtils.copy(in, out);\n            } finally {\n                org.sejda.commons.util.IOUtils.closeQuietly(out);\n                org.sejda.commons.util.IOUtils.closeQuietly(in);\n            }\n\n            new DefaultPdfSourceOpener().open(PdfFileSource.newInstanceWithPassword(tmp, \"my source\"));\n            fail(\"Exception expected\");\n        } catch (TaskWrongPasswordException e) {\n            assertEquals(\"Unable to open 'dumbo.pdf' due to a wrong password.\", e.getMessage());\n        }\n    }", "signature": "void openDocumentWrongPassword()", "full_signature": "@Test public void openDocumentWrongPassword()", "class_method_signature": "DefaultPdfSourceOpenerTest.openDocumentWrongPassword()", "testcase": true, "constructor": false, "invocations": ["createTemporaryBufferWithName", "getResourceAsStream", "getClassLoader", "getClass", "copy", "closeQuietly", "closeQuietly", "open", "newInstanceWithPassword", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "DefaultPdfSourceOpener", "superclass": "", "interfaces": "implements PdfSourceOpener<PDDocumentHandler>", "fields": [{"original_string": "private static final String WRONG_PWD_MESSAGE = \"Unable to open '%s' due to a wrong password.\";", "modifier": "private static final", "type": "String", "declarator": "WRONG_PWD_MESSAGE = \"Unable to open '%s' due to a wrong password.\"", "var_name": "WRONG_PWD_MESSAGE"}, {"original_string": "private static final String ERROR_MESSAGE = \"An error occurred opening the source: %s.\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE = \"An error occurred opening the source: %s.\"", "var_name": "ERROR_MESSAGE"}], "methods": [{"identifier": "open", "parameters": "(PdfURLSource source)", "modifiers": "@Override public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler open(PdfURLSource source)", "full_signature": "@Override public PDDocumentHandler open(PdfURLSource source)", "class_method_signature": "DefaultPdfSourceOpener.open(PdfURLSource source)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(PdfFileSource source)", "modifiers": "@Override public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler open(PdfFileSource source)", "full_signature": "@Override public PDDocumentHandler open(PdfFileSource source)", "class_method_signature": "DefaultPdfSourceOpener.open(PdfFileSource source)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(PdfStreamSource source)", "modifiers": "@Override public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler open(PdfStreamSource source)", "full_signature": "@Override public PDDocumentHandler open(PdfStreamSource source)", "class_method_signature": "DefaultPdfSourceOpener.open(PdfStreamSource source)", "testcase": false, "constructor": false}, {"identifier": "openGeneric", "parameters": "(PdfSource<?> source)", "modifiers": "private", "return": "PDDocumentHandler", "signature": "PDDocumentHandler openGeneric(PdfSource<?> source)", "full_signature": "private PDDocumentHandler openGeneric(PdfSource<?> source)", "class_method_signature": "DefaultPdfSourceOpener.openGeneric(PdfSource<?> source)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/DefaultPdfSourceOpener.java"}, "focal_method": {"identifier": "open", "parameters": "(PdfURLSource source)", "modifiers": "@Override public", "return": "PDDocumentHandler", "body": "@Override\n    public PDDocumentHandler open(PdfURLSource source) throws TaskIOException {\n        return openGeneric(source);\n    }", "signature": "PDDocumentHandler open(PdfURLSource source)", "full_signature": "@Override public PDDocumentHandler open(PdfURLSource source)", "class_method_signature": "DefaultPdfSourceOpener.open(PdfURLSource source)", "testcase": false, "constructor": false, "invocations": ["openGeneric"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}