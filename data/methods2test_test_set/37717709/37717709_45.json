{"test_class": {"identifier": "TestMarySynthesizedOutput", "superclass": "", "interfaces": "implements SynthesizedOutputListener", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(TestMarySynthesizedOutput.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(TestMarySynthesizedOutput.class)", "var_name": "LOGGER"}, {"original_string": "private static final int DELAY = 1000;", "modifier": "private static final", "type": "int", "declarator": "DELAY = 1000", "var_name": "DELAY"}, {"original_string": "private MarySynthesizedOutput output;", "modifier": "private", "type": "MarySynthesizedOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private final Object outputEndedLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "outputEndedLock = new Object()", "var_name": "outputEndedLock"}, {"original_string": "private final Object outputStartedLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "outputStartedLock = new Object()", "var_name": "outputStartedLock"}, {"original_string": "private boolean outputEnded;", "modifier": "private", "type": "boolean", "declarator": "outputEnded", "var_name": "outputEnded"}, {"original_string": "private boolean outputStarted;", "modifier": "private", "type": "boolean", "declarator": "outputStarted", "var_name": "outputStarted"}, {"original_string": "private static Process process;", "modifier": "private static", "type": "Process", "declarator": "process", "var_name": "process"}, {"original_string": "private static StreamGobbler ingobbler;", "modifier": "private static", "type": "StreamGobbler", "declarator": "ingobbler", "var_name": "ingobbler"}, {"original_string": "private static StreamGobbler errgobbler;", "modifier": "private static", "type": "StreamGobbler", "declarator": "errgobbler", "var_name": "errgobbler"}, {"original_string": "private DocumentServer documentServer;", "modifier": "private", "type": "DocumentServer", "declarator": "documentServer", "var_name": "documentServer"}, {"original_string": "private String sessionId;", "modifier": "private", "type": "String", "declarator": "sessionId", "var_name": "sessionId"}], "file": "org.jvoicexml.implementation.mary/src/test/java/org/jvoicexml/implementation/mary/TestMarySynthesizedOutput.java"}, "test_case": {"identifier": "testWaitQueueEmpty", "parameters": "()", "modifiers": "@Test(timeout = 20000) public", "return": "void", "body": "@Test(timeout = 20000)\n    public void testWaitQueueEmpty() throws Exception, JVoiceXMLEvent {\n\n        final SsmlDocument doc1 = new SsmlDocument();\n        final Speak speak1 = doc1.getSpeak();\n        speak1.setXmlLang(Locale.US);\n        speak1.addText(\"Test 1 from SSML\");\n        final SpeakableSsmlText ssml1 = new SpeakableSsmlText(doc1, true,\n                BargeInType.SPEECH);\n\n        final SsmlDocument doc2 = new SsmlDocument();\n        final Speak speak2 = doc2.getSpeak();\n        speak2.setXmlLang(Locale.US);\n        speak2.addText(\"Test 2 from SSML\");\n        final SpeakableSsmlText ssml2 = new SpeakableSsmlText(doc2, true,\n                BargeInType.SPEECH);\n\n        SpeakableSsmlText plainText = new SpeakableSsmlText(\"Test 3\",\n                Locale.US);\n\n        SpeakableSsmlText plainText2 = new SpeakableSsmlText(\"Test 4\",\n                Locale.US);\n\n        final SsmlDocument doc3 = new SsmlDocument();\n        final Speak speak3 = doc3.getSpeak();\n        speak3.setXmlLang(Locale.US);\n        speak3.addText(\"Test 5 from SSML\");\n        final SpeakableSsmlText ssml3 = new SpeakableSsmlText(doc3, true,\n                BargeInType.SPEECH);\n\n        output.queueSpeakable(ssml1, sessionId, documentServer);\n        output.queueSpeakable(ssml2, sessionId, documentServer);\n        output.queueSpeakable(plainText, sessionId, documentServer);\n        output.queueSpeakable(plainText2, sessionId, documentServer);\n        output.queueSpeakable(ssml3, sessionId, documentServer);\n\n        LOGGER.info(\"Speakables offered to the synthesisQueue\");\n\n        output.waitQueueEmpty();\n\n        LOGGER.info(\"Return resources...\");\n    }", "signature": "void testWaitQueueEmpty()", "full_signature": "@Test(timeout = 20000) public void testWaitQueueEmpty()", "class_method_signature": "TestMarySynthesizedOutput.testWaitQueueEmpty()", "testcase": true, "constructor": false, "invocations": ["getSpeak", "setXmlLang", "addText", "getSpeak", "setXmlLang", "addText", "getSpeak", "setXmlLang", "addText", "queueSpeakable", "queueSpeakable", "queueSpeakable", "queueSpeakable", "queueSpeakable", "info", "waitQueueEmpty", "info"]}, "focal_class": {"identifier": "MarySynthesizedOutput", "superclass": "", "interfaces": "implements SynthesizedOutput, SynthesizedOutputListener", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(MarySynthesizedOutput.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(MarySynthesizedOutput.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<SynthesizedOutputListener> listener;", "modifier": "private final", "type": "Collection<SynthesizedOutputListener>", "declarator": "listener", "var_name": "listener"}, {"original_string": "private String type;", "modifier": "private", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final Object emptyLock;", "modifier": "private final", "type": "Object", "declarator": "emptyLock", "var_name": "emptyLock"}, {"original_string": "private boolean enableBargeIn;", "modifier": "private", "type": "boolean", "declarator": "enableBargeIn", "var_name": "enableBargeIn"}, {"original_string": "private SynthesisQueue synthesisQueue;", "modifier": "private", "type": "SynthesisQueue", "declarator": "synthesisQueue", "var_name": "synthesisQueue"}, {"original_string": "private MaryClient processor;", "modifier": "private", "type": "MaryClient", "declarator": "processor", "var_name": "processor"}, {"original_string": "private boolean isBusy;", "modifier": "private", "type": "boolean", "declarator": "isBusy", "var_name": "isBusy"}, {"original_string": "private boolean speakableQueueEmpty = true;", "modifier": "private", "type": "boolean", "declarator": "speakableQueueEmpty = true", "var_name": "speakableQueueEmpty"}, {"original_string": "private final Map<String, String> maryRequestParameters;", "modifier": "private final", "type": "Map<String, String>", "declarator": "maryRequestParameters", "var_name": "maryRequestParameters"}], "methods": [{"identifier": "MarySynthesizedOutput", "parameters": "()", "modifiers": "public", "return": "", "signature": " MarySynthesizedOutput()", "full_signature": "public  MarySynthesizedOutput()", "class_method_signature": "MarySynthesizedOutput.MarySynthesizedOutput()", "testcase": false, "constructor": true}, {"identifier": "queueSpeakable", "parameters": "(final SpeakableText speakable,\n            final String sessionId, final DocumentServer server)", "modifiers": "@Override public", "return": "void", "signature": "void queueSpeakable(final SpeakableText speakable,\n            final String sessionId, final DocumentServer server)", "full_signature": "@Override public void queueSpeakable(final SpeakableText speakable,\n            final String sessionId, final DocumentServer server)", "class_method_signature": "MarySynthesizedOutput.queueSpeakable(final SpeakableText speakable,\n            final String sessionId, final DocumentServer server)", "testcase": false, "constructor": false}, {"identifier": "waitNonBargeInPlayed", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitNonBargeInPlayed()", "full_signature": "@Override public void waitNonBargeInPlayed()", "class_method_signature": "MarySynthesizedOutput.waitNonBargeInPlayed()", "testcase": false, "constructor": false}, {"identifier": "waitQueueEmpty", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitQueueEmpty()", "full_signature": "@Override public void waitQueueEmpty()", "class_method_signature": "MarySynthesizedOutput.waitQueueEmpty()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "MarySynthesizedOutput.activate()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MarySynthesizedOutput.close()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getType()", "full_signature": "@Override public String getType()", "class_method_signature": "MarySynthesizedOutput.getType()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "MarySynthesizedOutput.open()", "testcase": false, "constructor": false}, {"identifier": "passivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void passivate()", "full_signature": "@Override public void passivate()", "class_method_signature": "MarySynthesizedOutput.passivate()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final ConnectionInformation info)", "modifiers": "@Override public", "return": "void", "signature": "void connect(final ConnectionInformation info)", "full_signature": "@Override public void connect(final ConnectionInformation info)", "class_method_signature": "MarySynthesizedOutput.connect(final ConnectionInformation info)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(final ConnectionInformation info)", "modifiers": "@Override public", "return": "void", "signature": "void disconnect(final ConnectionInformation info)", "full_signature": "@Override public void disconnect(final ConnectionInformation info)", "class_method_signature": "MarySynthesizedOutput.disconnect(final ConnectionInformation info)", "testcase": false, "constructor": false}, {"identifier": "cancelOutput", "parameters": "(final BargeInType bargeInType)", "modifiers": "@Override public", "return": "void", "signature": "void cancelOutput(final BargeInType bargeInType)", "full_signature": "@Override public void cancelOutput(final BargeInType bargeInType)", "class_method_signature": "MarySynthesizedOutput.cancelOutput(final BargeInType bargeInType)", "testcase": false, "constructor": false}, {"identifier": "supportsBargeIn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean supportsBargeIn()", "full_signature": "public boolean supportsBargeIn()", "class_method_signature": "MarySynthesizedOutput.supportsBargeIn()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(final SynthesizedOutputListener outputListener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(final SynthesizedOutputListener outputListener)", "full_signature": "@Override public void addListener(final SynthesizedOutputListener outputListener)", "class_method_signature": "MarySynthesizedOutput.addListener(final SynthesizedOutputListener outputListener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(final SynthesizedOutputListener outputListener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(final SynthesizedOutputListener outputListener)", "full_signature": "@Override public void removeListener(final SynthesizedOutputListener outputListener)", "class_method_signature": "MarySynthesizedOutput.removeListener(final SynthesizedOutputListener outputListener)", "testcase": false, "constructor": false}, {"identifier": "fireOutputStarted", "parameters": "(final SpeakableText speakable)", "modifiers": "private", "return": "void", "signature": "void fireOutputStarted(final SpeakableText speakable)", "full_signature": "private void fireOutputStarted(final SpeakableText speakable)", "class_method_signature": "MarySynthesizedOutput.fireOutputStarted(final SpeakableText speakable)", "testcase": false, "constructor": false}, {"identifier": "fireOutputEnded", "parameters": "(final SpeakableText speakable)", "modifiers": "private", "return": "void", "signature": "void fireOutputEnded(final SpeakableText speakable)", "full_signature": "private void fireOutputEnded(final SpeakableText speakable)", "class_method_signature": "MarySynthesizedOutput.fireOutputEnded(final SpeakableText speakable)", "testcase": false, "constructor": false}, {"identifier": "fireQueueEmpty", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireQueueEmpty()", "full_signature": "private void fireQueueEmpty()", "class_method_signature": "MarySynthesizedOutput.fireQueueEmpty()", "testcase": false, "constructor": false}, {"identifier": "fireOutputEvent", "parameters": "(final SynthesizedOutputEvent event)", "modifiers": "private", "return": "void", "signature": "void fireOutputEvent(final SynthesizedOutputEvent event)", "full_signature": "private void fireOutputEvent(final SynthesizedOutputEvent event)", "class_method_signature": "MarySynthesizedOutput.fireOutputEvent(final SynthesizedOutputEvent event)", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(final String resourceType)", "modifiers": "public", "return": "void", "signature": "void setType(final String resourceType)", "full_signature": "public void setType(final String resourceType)", "class_method_signature": "MarySynthesizedOutput.setType(final String resourceType)", "testcase": false, "constructor": false}, {"identifier": "outputStatusChanged", "parameters": "(final SynthesizedOutputEvent event)", "modifiers": "public", "return": "void", "signature": "void outputStatusChanged(final SynthesizedOutputEvent event)", "full_signature": "public void outputStatusChanged(final SynthesizedOutputEvent event)", "class_method_signature": "MarySynthesizedOutput.outputStatusChanged(final SynthesizedOutputEvent event)", "testcase": false, "constructor": false}, {"identifier": "isBusy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBusy()", "full_signature": "@Override public boolean isBusy()", "class_method_signature": "MarySynthesizedOutput.isBusy()", "testcase": false, "constructor": false}, {"identifier": "cancelAudioOutput", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelAudioOutput()", "full_signature": "public void cancelAudioOutput()", "class_method_signature": "MarySynthesizedOutput.cancelAudioOutput()", "testcase": false, "constructor": false}, {"identifier": "setAudioType", "parameters": "(final String value)", "modifiers": "public", "return": "void", "signature": "void setAudioType(final String value)", "full_signature": "public void setAudioType(final String value)", "class_method_signature": "MarySynthesizedOutput.setAudioType(final String value)", "testcase": false, "constructor": false}, {"identifier": "setVoiceName", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setVoiceName(final String name)", "full_signature": "public void setVoiceName(final String name)", "class_method_signature": "MarySynthesizedOutput.setVoiceName(final String name)", "testcase": false, "constructor": false}, {"identifier": "setLang", "parameters": "(final String lang)", "modifiers": "public", "return": "void", "signature": "void setLang(final String lang)", "full_signature": "public void setLang(final String lang)", "class_method_signature": "MarySynthesizedOutput.setLang(final String lang)", "testcase": false, "constructor": false}, {"identifier": "outputError", "parameters": "(final ErrorEvent error)", "modifiers": "@Override public", "return": "void", "signature": "void outputError(final ErrorEvent error)", "full_signature": "@Override public void outputError(final ErrorEvent error)", "class_method_signature": "MarySynthesizedOutput.outputError(final ErrorEvent error)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.mary/src/main/java/org/jvoicexml/implementation/mary/MarySynthesizedOutput.java"}, "focal_method": {"identifier": "waitQueueEmpty", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void waitQueueEmpty() {\n        isBusy();\n    }", "signature": "void waitQueueEmpty()", "full_signature": "@Override public void waitQueueEmpty()", "class_method_signature": "MarySynthesizedOutput.waitQueueEmpty()", "testcase": false, "constructor": false, "invocations": ["isBusy"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}