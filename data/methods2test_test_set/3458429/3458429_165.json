{"test_class": {"identifier": "SearchPatternTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/string/SearchPatternTest.java"}, "test_case": {"identifier": "testEndsWith", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEndsWith() {\n        byte[] p = \"pneumonoultramicroscopicsilicovolcanoconiosis\".getBytes(StandardCharsets.US_ASCII);\n        byte[] d = \"pneumonoultrami\".getBytes(StandardCharsets.US_ASCII);\n        SearchPattern sp = SearchPattern.compile(p);\n        assertEquals(15, sp.endsWith(d, 0, d.length));\n\n        p = \"abcdefghijklmnopqrstuvwxyz\".getBytes(StandardCharsets.US_ASCII);\n        d = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmno\".getBytes(StandardCharsets.US_ASCII);\n        sp = SearchPattern.compile(p);\n        assertEquals(0, sp.match(d, 0, d.length));\n        assertEquals(-1, sp.match(d, 1, d.length - 1));\n        assertEquals(15, sp.endsWith(d, 0, d.length));\n\n        p = \"abcdefghijklmnopqrstuvwxyz\".getBytes(StandardCharsets.US_ASCII);\n        d = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\".getBytes(StandardCharsets.US_ASCII);\n        sp = SearchPattern.compile(p);\n        assertEquals(0, sp.match(d, 0, d.length));\n        assertEquals(26, sp.match(d, 1, d.length - 1));\n        assertEquals(26, sp.endsWith(d, 0, d.length));\n\n        //test no match\n        p = \"hello world\".getBytes(StandardCharsets.US_ASCII);\n        d = \"there is definitely no match in here\".getBytes(StandardCharsets.US_ASCII);\n        sp = SearchPattern.compile(p);\n        assertEquals(0, sp.endsWith(d, 0, d.length));\n    }", "signature": "void testEndsWith()", "full_signature": "@Test public void testEndsWith()", "class_method_signature": "SearchPatternTest.testEndsWith()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "compile", "assertEquals", "endsWith", "getBytes", "getBytes", "compile", "assertEquals", "match", "assertEquals", "match", "assertEquals", "endsWith", "getBytes", "getBytes", "compile", "assertEquals", "match", "assertEquals", "match", "assertEquals", "endsWith", "getBytes", "getBytes", "compile", "assertEquals", "endsWith"]}, "focal_class": {"identifier": "SearchPattern", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int alphabetSize = 256;", "modifier": "static final", "type": "int", "declarator": "alphabetSize = 256", "var_name": "alphabetSize"}, {"original_string": "private int[] table;", "modifier": "private", "type": "int[]", "declarator": "table", "var_name": "table"}, {"original_string": "private byte[] pattern;", "modifier": "private", "type": "byte[]", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "compile", "parameters": "(byte[] pattern)", "modifiers": "public static", "return": "SearchPattern", "signature": "SearchPattern compile(byte[] pattern)", "full_signature": "public static SearchPattern compile(byte[] pattern)", "class_method_signature": "SearchPattern.compile(byte[] pattern)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(String pattern)", "modifiers": "public static", "return": "SearchPattern", "signature": "SearchPattern compile(String pattern)", "full_signature": "public static SearchPattern compile(String pattern)", "class_method_signature": "SearchPattern.compile(String pattern)", "testcase": false, "constructor": false}, {"identifier": "SearchPattern", "parameters": "(byte[] pattern)", "modifiers": "private", "return": "", "signature": " SearchPattern(byte[] pattern)", "full_signature": "private  SearchPattern(byte[] pattern)", "class_method_signature": "SearchPattern.SearchPattern(byte[] pattern)", "testcase": false, "constructor": true}, {"identifier": "match", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "int", "signature": "int match(byte[] data, int offset, int length)", "full_signature": "public int match(byte[] data, int offset, int length)", "class_method_signature": "SearchPattern.match(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "int", "signature": "int endsWith(byte[] data, int offset, int length)", "full_signature": "public int endsWith(byte[] data, int offset, int length)", "class_method_signature": "SearchPattern.endsWith(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(byte[] data, int offset, int length, int matched)", "modifiers": "public", "return": "int", "signature": "int startsWith(byte[] data, int offset, int length, int matched)", "full_signature": "public int startsWith(byte[] data, int offset, int length, int matched)", "class_method_signature": "SearchPattern.startsWith(byte[] data, int offset, int length, int matched)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(byte[] data, int offset, int length)", "modifiers": "private", "return": "void", "signature": "void validate(byte[] data, int offset, int length)", "full_signature": "private void validate(byte[] data, int offset, int length)", "class_method_signature": "SearchPattern.validate(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLength()", "full_signature": "public int getLength()", "class_method_signature": "SearchPattern.getLength()", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/string/SearchPattern.java"}, "focal_method": {"identifier": "endsWith", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "int", "body": "public int endsWith(byte[] data, int offset, int length) {\n        validate(data, offset, length);\n\n        int skip = (pattern.length <= length) ? (offset + length - pattern.length) : offset;\n        while (skip < offset + length) {\n            for (int i = (offset + length - 1) - skip; data[skip + i] == pattern[i]; --i) {\n                if (i == 0)\n                    return (offset + length - skip);\n            }\n\n            if (skip + pattern.length - 1 < data.length)\n                skip += table[0xff & data[skip + pattern.length - 1]];\n            else\n                skip++;\n        }\n\n        return 0;\n    }", "signature": "int endsWith(byte[] data, int offset, int length)", "full_signature": "public int endsWith(byte[] data, int offset, int length)", "class_method_signature": "SearchPattern.endsWith(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["validate"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}