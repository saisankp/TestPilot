{"test_class": {"identifier": "SchemaUpgradeTest", "superclass": "", "interfaces": "", "fields": [], "file": "central/src/test/java/org/glowroot/central/repo/SchemaUpgradeTest.java"}, "test_case": {"identifier": "shouldUpgradeMultiAgentPermissions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpgradeMultiAgentPermissions() throws Exception {\n        // given\n        Set<String> permissions = ImmutableSet.of(\"agent:abc,mno,xyz:view\");\n        // when\n        permissions = SchemaUpgrade.upgradePermissions(permissions);\n        // then\n        assertThat(Ordering.natural().sortedCopy(permissions)).containsExactly(\n                \"agent:abc,mno,xyz:error\", \"agent:abc,mno,xyz:jvm:environment\",\n                \"agent:abc,mno,xyz:jvm:gauges\", \"agent:abc,mno,xyz:transaction\");\n    }", "signature": "void shouldUpgradeMultiAgentPermissions()", "full_signature": "@Test public void shouldUpgradeMultiAgentPermissions()", "class_method_signature": "SchemaUpgradeTest.shouldUpgradeMultiAgentPermissions()", "testcase": true, "constructor": false, "invocations": ["of", "upgradePermissions", "containsExactly", "assertThat", "sortedCopy", "natural"]}, "focal_class": {"identifier": "SchemaUpgrade", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SchemaUpgrade.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SchemaUpgrade.class)", "var_name": "logger"}, {"original_string": "private static final Logger startupLogger = LoggerFactory.getLogger(\"org.glowroot\");", "modifier": "private static final", "type": "Logger", "declarator": "startupLogger = LoggerFactory.getLogger(\"org.glowroot\")", "var_name": "startupLogger"}, {"original_string": "private static final ObjectMapper mapper = ObjectMappers.create();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = ObjectMappers.create()", "var_name": "mapper"}, {"original_string": "private static final int CURR_SCHEMA_VERSION = 90;", "modifier": "private static final", "type": "int", "declarator": "CURR_SCHEMA_VERSION = 90", "var_name": "CURR_SCHEMA_VERSION"}, {"original_string": "private final Session session;", "modifier": "private final", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final boolean servlet;", "modifier": "private final", "type": "boolean", "declarator": "servlet", "var_name": "servlet"}, {"original_string": "private final PreparedStatement insertIntoSchemVersionPS;", "modifier": "private final", "type": "PreparedStatement", "declarator": "insertIntoSchemVersionPS", "var_name": "insertIntoSchemVersionPS"}, {"original_string": "private final @Nullable Integer initialSchemaVersion;", "modifier": "private final @Nullable", "type": "Integer", "declarator": "initialSchemaVersion", "var_name": "initialSchemaVersion"}, {"original_string": "private boolean reloadCentralConfiguration;", "modifier": "private", "type": "boolean", "declarator": "reloadCentralConfiguration", "var_name": "reloadCentralConfiguration"}], "methods": [{"identifier": "SchemaUpgrade", "parameters": "(Session session, Clock clock, boolean servlet)", "modifiers": "public", "return": "", "signature": " SchemaUpgrade(Session session, Clock clock, boolean servlet)", "full_signature": "public  SchemaUpgrade(Session session, Clock clock, boolean servlet)", "class_method_signature": "SchemaUpgrade.SchemaUpgrade(Session session, Clock clock, boolean servlet)", "testcase": false, "constructor": true}, {"identifier": "getInitialSchemaVersion", "parameters": "()", "modifiers": "public @Nullable", "return": "Integer", "signature": "Integer getInitialSchemaVersion()", "full_signature": "public @Nullable Integer getInitialSchemaVersion()", "class_method_signature": "SchemaUpgrade.getInitialSchemaVersion()", "testcase": false, "constructor": false}, {"identifier": "upgrade", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void upgrade()", "full_signature": "public void upgrade()", "class_method_signature": "SchemaUpgrade.upgrade()", "testcase": false, "constructor": false}, {"identifier": "reloadCentralConfiguration", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean reloadCentralConfiguration()", "full_signature": "public boolean reloadCentralConfiguration()", "class_method_signature": "SchemaUpgrade.reloadCentralConfiguration()", "testcase": false, "constructor": false}, {"identifier": "updateSchemaVersionToCurent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateSchemaVersionToCurent()", "full_signature": "public void updateSchemaVersionToCurent()", "class_method_signature": "SchemaUpgrade.updateSchemaVersionToCurent()", "testcase": false, "constructor": false}, {"identifier": "getCurrentSchemaVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentSchemaVersion()", "full_signature": "public int getCurrentSchemaVersion()", "class_method_signature": "SchemaUpgrade.getCurrentSchemaVersion()", "testcase": false, "constructor": false}, {"identifier": "updateToMoreRecentCassandraOptions", "parameters": "(CentralStorageConfig storageConfig)", "modifiers": "public", "return": "void", "signature": "void updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfig)", "full_signature": "public void updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfig)", "class_method_signature": "SchemaUpgrade.updateToMoreRecentCassandraOptions(CentralStorageConfig storageConfig)", "testcase": false, "constructor": false}, {"identifier": "updateSchemaVersion", "parameters": "(int schemaVersion)", "modifiers": "private", "return": "void", "signature": "void updateSchemaVersion(int schemaVersion)", "full_signature": "private void updateSchemaVersion(int schemaVersion)", "class_method_signature": "SchemaUpgrade.updateSchemaVersion(int schemaVersion)", "testcase": false, "constructor": false}, {"identifier": "renameAgentColumnFromSystemInfoToEnvironment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void renameAgentColumnFromSystemInfoToEnvironment()", "full_signature": "private void renameAgentColumnFromSystemInfoToEnvironment()", "class_method_signature": "SchemaUpgrade.renameAgentColumnFromSystemInfoToEnvironment()", "testcase": false, "constructor": false}, {"identifier": "updateRoles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateRoles()", "full_signature": "private void updateRoles()", "class_method_signature": "SchemaUpgrade.updateRoles()", "testcase": false, "constructor": false}, {"identifier": "addConfigUpdateColumns", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addConfigUpdateColumns()", "full_signature": "private void addConfigUpdateColumns()", "class_method_signature": "SchemaUpgrade.addConfigUpdateColumns()", "testcase": false, "constructor": false}, {"identifier": "revertCompressionChunkLength", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void revertCompressionChunkLength()", "full_signature": "private void revertCompressionChunkLength()", "class_method_signature": "SchemaUpgrade.revertCompressionChunkLength()", "testcase": false, "constructor": false}, {"identifier": "addTraceEntryColumns", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addTraceEntryColumns()", "full_signature": "private void addTraceEntryColumns()", "class_method_signature": "SchemaUpgrade.addTraceEntryColumns()", "testcase": false, "constructor": false}, {"identifier": "renameServerConfigTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void renameServerConfigTable()", "full_signature": "private void renameServerConfigTable()", "class_method_signature": "SchemaUpgrade.renameServerConfigTable()", "testcase": false, "constructor": false}, {"identifier": "addAgentOneTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addAgentOneTable()", "full_signature": "private void addAgentOneTable()", "class_method_signature": "SchemaUpgrade.addAgentOneTable()", "testcase": false, "constructor": false}, {"identifier": "addAgentRollupColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addAgentRollupColumn()", "full_signature": "private void addAgentRollupColumn()", "class_method_signature": "SchemaUpgrade.addAgentRollupColumn()", "testcase": false, "constructor": false}, {"identifier": "updateTwcsDtcsGcSeconds", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateTwcsDtcsGcSeconds()", "full_signature": "private void updateTwcsDtcsGcSeconds()", "class_method_signature": "SchemaUpgrade.updateTwcsDtcsGcSeconds()", "testcase": false, "constructor": false}, {"identifier": "updateNeedsRollupGcSeconds", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateNeedsRollupGcSeconds()", "full_signature": "private void updateNeedsRollupGcSeconds()", "class_method_signature": "SchemaUpgrade.updateNeedsRollupGcSeconds()", "testcase": false, "constructor": false}, {"identifier": "updateAgentRollup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateAgentRollup()", "full_signature": "private void updateAgentRollup()", "class_method_signature": "SchemaUpgrade.updateAgentRollup()", "testcase": false, "constructor": false}, {"identifier": "getAgentRollupIds", "parameters": "(String agentRollupId)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getAgentRollupIds(String agentRollupId)", "full_signature": "private static List<String> getAgentRollupIds(String agentRollupId)", "class_method_signature": "SchemaUpgrade.getAgentRollupIds(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "addTracePointPartialColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addTracePointPartialColumn()", "full_signature": "private void addTracePointPartialColumn()", "class_method_signature": "SchemaUpgrade.addTracePointPartialColumn()", "testcase": false, "constructor": false}, {"identifier": "splitUpAgentTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void splitUpAgentTable()", "full_signature": "private void splitUpAgentTable()", "class_method_signature": "SchemaUpgrade.splitUpAgentTable()", "testcase": false, "constructor": false}, {"identifier": "initialPopulationOfConfigForRollups", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialPopulationOfConfigForRollups()", "full_signature": "private void initialPopulationOfConfigForRollups()", "class_method_signature": "SchemaUpgrade.initialPopulationOfConfigForRollups()", "testcase": false, "constructor": false}, {"identifier": "redoOnTriggeredAlertTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void redoOnTriggeredAlertTable()", "full_signature": "private void redoOnTriggeredAlertTable()", "class_method_signature": "SchemaUpgrade.redoOnTriggeredAlertTable()", "testcase": false, "constructor": false}, {"identifier": "addSyntheticMonitorAndAlertPermissions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addSyntheticMonitorAndAlertPermissions()", "full_signature": "private void addSyntheticMonitorAndAlertPermissions()", "class_method_signature": "SchemaUpgrade.addSyntheticMonitorAndAlertPermissions()", "testcase": false, "constructor": false}, {"identifier": "updateWebConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateWebConfig()", "full_signature": "private void updateWebConfig()", "class_method_signature": "SchemaUpgrade.updateWebConfig()", "testcase": false, "constructor": false}, {"identifier": "removeInvalidAgentRollupRows", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeInvalidAgentRollupRows()", "full_signature": "private void removeInvalidAgentRollupRows()", "class_method_signature": "SchemaUpgrade.removeInvalidAgentRollupRows()", "testcase": false, "constructor": false}, {"identifier": "renameConfigTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void renameConfigTable()", "full_signature": "private void renameConfigTable()", "class_method_signature": "SchemaUpgrade.renameConfigTable()", "testcase": false, "constructor": false}, {"identifier": "upgradeAlertConfigs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void upgradeAlertConfigs()", "full_signature": "private void upgradeAlertConfigs()", "class_method_signature": "SchemaUpgrade.upgradeAlertConfigs()", "testcase": false, "constructor": false}, {"identifier": "addAggregateThroughputColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addAggregateThroughputColumn()", "full_signature": "private void addAggregateThroughputColumn()", "class_method_signature": "SchemaUpgrade.addAggregateThroughputColumn()", "testcase": false, "constructor": false}, {"identifier": "updateRolePermissionName", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateRolePermissionName()", "full_signature": "private void updateRolePermissionName()", "class_method_signature": "SchemaUpgrade.updateRolePermissionName()", "testcase": false, "constructor": false}, {"identifier": "updateSmtpConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSmtpConfig()", "full_signature": "private void updateSmtpConfig()", "class_method_signature": "SchemaUpgrade.updateSmtpConfig()", "testcase": false, "constructor": false}, {"identifier": "addDefaultGaugeNameToUiConfigs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addDefaultGaugeNameToUiConfigs()", "full_signature": "private void addDefaultGaugeNameToUiConfigs()", "class_method_signature": "SchemaUpgrade.addDefaultGaugeNameToUiConfigs()", "testcase": false, "constructor": false}, {"identifier": "sortOfFixWebConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sortOfFixWebConfig()", "full_signature": "private void sortOfFixWebConfig()", "class_method_signature": "SchemaUpgrade.sortOfFixWebConfig()", "testcase": false, "constructor": false}, {"identifier": "redoOnHeartbeatTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void redoOnHeartbeatTable()", "full_signature": "private void redoOnHeartbeatTable()", "class_method_signature": "SchemaUpgrade.redoOnHeartbeatTable()", "testcase": false, "constructor": false}, {"identifier": "addSyntheticResultErrorIntervalsColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addSyntheticResultErrorIntervalsColumn()", "full_signature": "private void addSyntheticResultErrorIntervalsColumn()", "class_method_signature": "SchemaUpgrade.addSyntheticResultErrorIntervalsColumn()", "testcase": false, "constructor": false}, {"identifier": "populateGaugeNameTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateGaugeNameTable()", "full_signature": "private void populateGaugeNameTable()", "class_method_signature": "SchemaUpgrade.populateGaugeNameTable()", "testcase": false, "constructor": false}, {"identifier": "populateAgentConfigGeneral", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateAgentConfigGeneral()", "full_signature": "private void populateAgentConfigGeneral()", "class_method_signature": "SchemaUpgrade.populateAgentConfigGeneral()", "testcase": false, "constructor": false}, {"identifier": "populateV09AgentCheckTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateV09AgentCheckTable()", "full_signature": "private void populateV09AgentCheckTable()", "class_method_signature": "SchemaUpgrade.populateV09AgentCheckTable()", "testcase": false, "constructor": false}, {"identifier": "getFullQueryTextExpirationHours", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getFullQueryTextExpirationHours()", "full_signature": "private int getFullQueryTextExpirationHours()", "class_method_signature": "SchemaUpgrade.getFullQueryTextExpirationHours()", "testcase": false, "constructor": false}, {"identifier": "populateAgentHistoryTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateAgentHistoryTable()", "full_signature": "private void populateAgentHistoryTable()", "class_method_signature": "SchemaUpgrade.populateAgentHistoryTable()", "testcase": false, "constructor": false}, {"identifier": "rewriteAgentConfigTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteAgentConfigTablePart1()", "full_signature": "private void rewriteAgentConfigTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteAgentConfigTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteAgentConfigTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteAgentConfigTablePart2()", "full_signature": "private void rewriteAgentConfigTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteAgentConfigTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteEnvironmentTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteEnvironmentTablePart1()", "full_signature": "private void rewriteEnvironmentTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteEnvironmentTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteEnvironmentTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteEnvironmentTablePart2()", "full_signature": "private void rewriteEnvironmentTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteEnvironmentTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteOpenIncidentTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteOpenIncidentTablePart1()", "full_signature": "private void rewriteOpenIncidentTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteOpenIncidentTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteOpenIncidentTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteOpenIncidentTablePart2()", "full_signature": "private void rewriteOpenIncidentTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteOpenIncidentTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteResolvedIncidentTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteResolvedIncidentTablePart1()", "full_signature": "private void rewriteResolvedIncidentTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteResolvedIncidentTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteResolvedIncidentTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteResolvedIncidentTablePart2()", "full_signature": "private void rewriteResolvedIncidentTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteResolvedIncidentTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteRoleTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteRoleTablePart1()", "full_signature": "private void rewriteRoleTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteRoleTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteRoleTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteRoleTablePart2()", "full_signature": "private void rewriteRoleTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteRoleTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteHeartbeatTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteHeartbeatTablePart1()", "full_signature": "private void rewriteHeartbeatTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteHeartbeatTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteHeartbeatTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteHeartbeatTablePart2()", "full_signature": "private void rewriteHeartbeatTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteHeartbeatTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteTransactionTypeTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteTransactionTypeTablePart1()", "full_signature": "private void rewriteTransactionTypeTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteTransactionTypeTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteTransactionTypeTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteTransactionTypeTablePart2()", "full_signature": "private void rewriteTransactionTypeTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteTransactionTypeTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteTraceAttributeNameTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteTraceAttributeNameTablePart1()", "full_signature": "private void rewriteTraceAttributeNameTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteTraceAttributeNameTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteTraceAttributeNameTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteTraceAttributeNameTablePart2()", "full_signature": "private void rewriteTraceAttributeNameTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteTraceAttributeNameTablePart2()", "testcase": false, "constructor": false}, {"identifier": "rewriteGaugeNameTablePart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteGaugeNameTablePart1()", "full_signature": "private void rewriteGaugeNameTablePart1()", "class_method_signature": "SchemaUpgrade.rewriteGaugeNameTablePart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteGaugeNameTablePart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteGaugeNameTablePart2()", "full_signature": "private void rewriteGaugeNameTablePart2()", "class_method_signature": "SchemaUpgrade.rewriteGaugeNameTablePart2()", "testcase": false, "constructor": false}, {"identifier": "populateV09AgentRollupTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateV09AgentRollupTable()", "full_signature": "private void populateV09AgentRollupTable()", "class_method_signature": "SchemaUpgrade.populateV09AgentRollupTable()", "testcase": false, "constructor": false}, {"identifier": "getV09AgentRollupsFromAgentRollupTable", "parameters": "()", "modifiers": "private", "return": "Map<String, V09AgentRollup>", "signature": "Map<String, V09AgentRollup> getV09AgentRollupsFromAgentRollupTable()", "full_signature": "private Map<String, V09AgentRollup> getV09AgentRollupsFromAgentRollupTable()", "class_method_signature": "SchemaUpgrade.getV09AgentRollupsFromAgentRollupTable()", "testcase": false, "constructor": false}, {"identifier": "finishV09AgentIdUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finishV09AgentIdUpdate()", "full_signature": "private void finishV09AgentIdUpdate()", "class_method_signature": "SchemaUpgrade.finishV09AgentIdUpdate()", "testcase": false, "constructor": false}, {"identifier": "removeTraceTtErrorCountPartialColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeTraceTtErrorCountPartialColumn()", "full_signature": "private void removeTraceTtErrorCountPartialColumn()", "class_method_signature": "SchemaUpgrade.removeTraceTtErrorCountPartialColumn()", "testcase": false, "constructor": false}, {"identifier": "removeTraceTnErrorCountPartialColumn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeTraceTnErrorCountPartialColumn()", "full_signature": "private void removeTraceTnErrorCountPartialColumn()", "class_method_signature": "SchemaUpgrade.removeTraceTnErrorCountPartialColumn()", "testcase": false, "constructor": false}, {"identifier": "populateTraceTtSlowCountAndPointPartialPart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTraceTtSlowCountAndPointPartialPart1()", "full_signature": "private void populateTraceTtSlowCountAndPointPartialPart1()", "class_method_signature": "SchemaUpgrade.populateTraceTtSlowCountAndPointPartialPart1()", "testcase": false, "constructor": false}, {"identifier": "populateTraceTtSlowCountAndPointPartialPart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTraceTtSlowCountAndPointPartialPart2()", "full_signature": "private void populateTraceTtSlowCountAndPointPartialPart2()", "class_method_signature": "SchemaUpgrade.populateTraceTtSlowCountAndPointPartialPart2()", "testcase": false, "constructor": false}, {"identifier": "populateTraceTnSlowCountAndPointPartialPart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTraceTnSlowCountAndPointPartialPart1()", "full_signature": "private void populateTraceTnSlowCountAndPointPartialPart1()", "class_method_signature": "SchemaUpgrade.populateTraceTnSlowCountAndPointPartialPart1()", "testcase": false, "constructor": false}, {"identifier": "populateTraceTnSlowCountAndPointPartialPart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTraceTnSlowCountAndPointPartialPart2()", "full_signature": "private void populateTraceTnSlowCountAndPointPartialPart2()", "class_method_signature": "SchemaUpgrade.populateTraceTnSlowCountAndPointPartialPart2()", "testcase": false, "constructor": false}, {"identifier": "updateLcsUncheckedTombstoneCompaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateLcsUncheckedTombstoneCompaction()", "full_signature": "private void updateLcsUncheckedTombstoneCompaction()", "class_method_signature": "SchemaUpgrade.updateLcsUncheckedTombstoneCompaction()", "testcase": false, "constructor": false}, {"identifier": "updateStcsUncheckedTombstoneCompaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateStcsUncheckedTombstoneCompaction()", "full_signature": "private void updateStcsUncheckedTombstoneCompaction()", "class_method_signature": "SchemaUpgrade.updateStcsUncheckedTombstoneCompaction()", "testcase": false, "constructor": false}, {"identifier": "optimizeTwcsTables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void optimizeTwcsTables()", "full_signature": "private void optimizeTwcsTables()", "class_method_signature": "SchemaUpgrade.optimizeTwcsTables()", "testcase": false, "constructor": false}, {"identifier": "changeV09TablesToLCS", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void changeV09TablesToLCS()", "full_signature": "private void changeV09TablesToLCS()", "class_method_signature": "SchemaUpgrade.changeV09TablesToLCS()", "testcase": false, "constructor": false}, {"identifier": "updateCentralStorageConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCentralStorageConfig()", "full_signature": "private void updateCentralStorageConfig()", "class_method_signature": "SchemaUpgrade.updateCentralStorageConfig()", "testcase": false, "constructor": false}, {"identifier": "rewriteV09AgentRollupPart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteV09AgentRollupPart1()", "full_signature": "private void rewriteV09AgentRollupPart1()", "class_method_signature": "SchemaUpgrade.rewriteV09AgentRollupPart1()", "testcase": false, "constructor": false}, {"identifier": "rewriteV09AgentRollupPart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rewriteV09AgentRollupPart2()", "full_signature": "private void rewriteV09AgentRollupPart2()", "class_method_signature": "SchemaUpgrade.rewriteV09AgentRollupPart2()", "testcase": false, "constructor": false}, {"identifier": "updateTraceAttributeNamePartitionKeyPart1", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateTraceAttributeNamePartitionKeyPart1()", "full_signature": "private void updateTraceAttributeNamePartitionKeyPart1()", "class_method_signature": "SchemaUpgrade.updateTraceAttributeNamePartitionKeyPart1()", "testcase": false, "constructor": false}, {"identifier": "updateTraceAttributeNamePartitionKeyPart2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateTraceAttributeNamePartitionKeyPart2()", "full_signature": "private void updateTraceAttributeNamePartitionKeyPart2()", "class_method_signature": "SchemaUpgrade.updateTraceAttributeNamePartitionKeyPart2()", "testcase": false, "constructor": false}, {"identifier": "populateActiveAgentTable", "parameters": "(int rollupLevel)", "modifiers": "private", "return": "void", "signature": "void populateActiveAgentTable(int rollupLevel)", "full_signature": "private void populateActiveAgentTable(int rollupLevel)", "class_method_signature": "SchemaUpgrade.populateActiveAgentTable(int rollupLevel)", "testcase": false, "constructor": false}, {"identifier": "updateRolePermissionName2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateRolePermissionName2()", "full_signature": "private void updateRolePermissionName2()", "class_method_signature": "SchemaUpgrade.updateRolePermissionName2()", "testcase": false, "constructor": false}, {"identifier": "updateEncryptedPasswordAttributeName", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateEncryptedPasswordAttributeName()", "full_signature": "private void updateEncryptedPasswordAttributeName()", "class_method_signature": "SchemaUpgrade.updateEncryptedPasswordAttributeName()", "testcase": false, "constructor": false}, {"identifier": "updateEncryptedPasswordAttributeName", "parameters": "(String key, PreparedStatement readPS,\n            PreparedStatement insertPS)", "modifiers": "private", "return": "void", "signature": "void updateEncryptedPasswordAttributeName(String key, PreparedStatement readPS,\n            PreparedStatement insertPS)", "full_signature": "private void updateEncryptedPasswordAttributeName(String key, PreparedStatement readPS,\n            PreparedStatement insertPS)", "class_method_signature": "SchemaUpgrade.updateEncryptedPasswordAttributeName(String key, PreparedStatement readPS,\n            PreparedStatement insertPS)", "testcase": false, "constructor": false}, {"identifier": "populateSyntheticMonitorIdTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateSyntheticMonitorIdTable()", "full_signature": "private void populateSyntheticMonitorIdTable()", "class_method_signature": "SchemaUpgrade.populateSyntheticMonitorIdTable()", "testcase": false, "constructor": false}, {"identifier": "getSyntheticMonitorDisplays", "parameters": "(PreparedStatement readAgentConfig,\n            String agentRollupId)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getSyntheticMonitorDisplays(PreparedStatement readAgentConfig,\n            String agentRollupId)", "full_signature": "private Map<String, String> getSyntheticMonitorDisplays(PreparedStatement readAgentConfig,\n            String agentRollupId)", "class_method_signature": "SchemaUpgrade.getSyntheticMonitorDisplays(PreparedStatement readAgentConfig,\n            String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "populateAgentDisplayTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateAgentDisplayTable()", "full_signature": "private void populateAgentDisplayTable()", "class_method_signature": "SchemaUpgrade.populateAgentDisplayTable()", "testcase": false, "constructor": false}, {"identifier": "updateTraceSlowCountAndPointPartialTables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateTraceSlowCountAndPointPartialTables()", "full_signature": "private void updateTraceSlowCountAndPointPartialTables()", "class_method_signature": "SchemaUpgrade.updateTraceSlowCountAndPointPartialTables()", "testcase": false, "constructor": false}, {"identifier": "splitActiveAgentRollupTables", "parameters": "(int rollupLevel)", "modifiers": "private", "return": "void", "signature": "void splitActiveAgentRollupTables(int rollupLevel)", "full_signature": "private void splitActiveAgentRollupTables(int rollupLevel)", "class_method_signature": "SchemaUpgrade.splitActiveAgentRollupTables(int rollupLevel)", "testcase": false, "constructor": false}, {"identifier": "addColumnIfNotExists", "parameters": "(String tableName, String columnName, String cqlType)", "modifiers": "private", "return": "void", "signature": "void addColumnIfNotExists(String tableName, String columnName, String cqlType)", "full_signature": "private void addColumnIfNotExists(String tableName, String columnName, String cqlType)", "class_method_signature": "SchemaUpgrade.addColumnIfNotExists(String tableName, String columnName, String cqlType)", "testcase": false, "constructor": false}, {"identifier": "dropColumnIfExists", "parameters": "(String tableName, String columnName)", "modifiers": "private", "return": "void", "signature": "void dropColumnIfExists(String tableName, String columnName)", "full_signature": "private void dropColumnIfExists(String tableName, String columnName)", "class_method_signature": "SchemaUpgrade.dropColumnIfExists(String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(String tableName)", "modifiers": "private", "return": "boolean", "signature": "boolean tableExists(String tableName)", "full_signature": "private boolean tableExists(String tableName)", "class_method_signature": "SchemaUpgrade.tableExists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "columnExists", "parameters": "(String tableName, String columnName)", "modifiers": "private", "return": "boolean", "signature": "boolean columnExists(String tableName, String columnName)", "full_signature": "private boolean columnExists(String tableName, String columnName)", "class_method_signature": "SchemaUpgrade.columnExists(String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "dropTableIfExists", "parameters": "(String tableName)", "modifiers": "private", "return": "void", "signature": "void dropTableIfExists(String tableName)", "full_signature": "private void dropTableIfExists(String tableName)", "class_method_signature": "SchemaUpgrade.dropTableIfExists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "waitForSome", "parameters": "(Queue<ListenableFuture<?>> futures)", "modifiers": "private static", "return": "void", "signature": "void waitForSome(Queue<ListenableFuture<?>> futures)", "full_signature": "private static void waitForSome(Queue<ListenableFuture<?>> futures)", "class_method_signature": "SchemaUpgrade.waitForSome(Queue<ListenableFuture<?>> futures)", "testcase": false, "constructor": false}, {"identifier": "upgradeOldAgentConfig", "parameters": "(AgentConfig oldAgentConfig)", "modifiers": "public static", "return": "AgentConfig", "signature": "AgentConfig upgradeOldAgentConfig(AgentConfig oldAgentConfig)", "full_signature": "public static AgentConfig upgradeOldAgentConfig(AgentConfig oldAgentConfig)", "class_method_signature": "SchemaUpgrade.upgradeOldAgentConfig(AgentConfig oldAgentConfig)", "testcase": false, "constructor": false}, {"identifier": "createTransactionTimeCondition", "parameters": "(\n            OldAlertConfig oldAlertConfig)", "modifiers": "private static", "return": "MetricCondition", "signature": "MetricCondition createTransactionTimeCondition(\n            OldAlertConfig oldAlertConfig)", "full_signature": "private static MetricCondition createTransactionTimeCondition(\n            OldAlertConfig oldAlertConfig)", "class_method_signature": "SchemaUpgrade.createTransactionTimeCondition(\n            OldAlertConfig oldAlertConfig)", "testcase": false, "constructor": false}, {"identifier": "createGaugeCondition", "parameters": "(OldAlertConfig oldAlertConfig)", "modifiers": "private static", "return": "MetricCondition", "signature": "MetricCondition createGaugeCondition(OldAlertConfig oldAlertConfig)", "full_signature": "private static MetricCondition createGaugeCondition(OldAlertConfig oldAlertConfig)", "class_method_signature": "SchemaUpgrade.createGaugeCondition(OldAlertConfig oldAlertConfig)", "testcase": false, "constructor": false}, {"identifier": "createSyntheticMonitorCondition", "parameters": "(\n            OldAlertConfig oldAlertConfig)", "modifiers": "private static", "return": "SyntheticMonitorCondition", "signature": "SyntheticMonitorCondition createSyntheticMonitorCondition(\n            OldAlertConfig oldAlertConfig)", "full_signature": "private static SyntheticMonitorCondition createSyntheticMonitorCondition(\n            OldAlertConfig oldAlertConfig)", "class_method_signature": "SchemaUpgrade.createSyntheticMonitorCondition(\n            OldAlertConfig oldAlertConfig)", "testcase": false, "constructor": false}, {"identifier": "createHeartbeatCondition", "parameters": "(OldAlertConfig oldAlertConfig)", "modifiers": "private static", "return": "HeartbeatCondition", "signature": "HeartbeatCondition createHeartbeatCondition(OldAlertConfig oldAlertConfig)", "full_signature": "private static HeartbeatCondition createHeartbeatCondition(OldAlertConfig oldAlertConfig)", "class_method_signature": "SchemaUpgrade.createHeartbeatCondition(OldAlertConfig oldAlertConfig)", "testcase": false, "constructor": false}, {"identifier": "upgradePermissions", "parameters": "(Set<String> permissions)", "modifiers": "@VisibleForTesting static @Nullable", "return": "Set<String>", "signature": "Set<String> upgradePermissions(Set<String> permissions)", "full_signature": "@VisibleForTesting static @Nullable Set<String> upgradePermissions(Set<String> permissions)", "class_method_signature": "SchemaUpgrade.upgradePermissions(Set<String> permissions)", "testcase": false, "constructor": false}, {"identifier": "upgradePermissions2", "parameters": "(Set<String> permissions)", "modifiers": "@VisibleForTesting static", "return": "Set<String>", "signature": "Set<String> upgradePermissions2(Set<String> permissions)", "full_signature": "@VisibleForTesting static Set<String> upgradePermissions2(Set<String> permissions)", "class_method_signature": "SchemaUpgrade.upgradePermissions2(Set<String> permissions)", "testcase": false, "constructor": false}, {"identifier": "updateCentralConfigurationPropertiesFile", "parameters": "(JsonNode webConfigNode)", "modifiers": "private static", "return": "boolean", "signature": "boolean updateCentralConfigurationPropertiesFile(JsonNode webConfigNode)", "full_signature": "private static boolean updateCentralConfigurationPropertiesFile(JsonNode webConfigNode)", "class_method_signature": "SchemaUpgrade.updateCentralConfigurationPropertiesFile(JsonNode webConfigNode)", "testcase": false, "constructor": false}, {"identifier": "getCentralStorageConfig", "parameters": "(Session session)", "modifiers": "private static", "return": "CentralStorageConfig", "signature": "CentralStorageConfig getCentralStorageConfig(Session session)", "full_signature": "private static CentralStorageConfig getCentralStorageConfig(Session session)", "class_method_signature": "SchemaUpgrade.getCentralStorageConfig(Session session)", "testcase": false, "constructor": false}, {"identifier": "addExpirationHours", "parameters": "(long timeInMillis, int expirationHours)", "modifiers": "private static", "return": "long", "signature": "long addExpirationHours(long timeInMillis, int expirationHours)", "full_signature": "private static long addExpirationHours(long timeInMillis, int expirationHours)", "class_method_signature": "SchemaUpgrade.addExpirationHours(long timeInMillis, int expirationHours)", "testcase": false, "constructor": false}, {"identifier": "copyString", "parameters": "(Row row, BoundStatement boundStatement, int i)", "modifiers": "private static", "return": "void", "signature": "void copyString(Row row, BoundStatement boundStatement, int i)", "full_signature": "private static void copyString(Row row, BoundStatement boundStatement, int i)", "class_method_signature": "SchemaUpgrade.copyString(Row row, BoundStatement boundStatement, int i)", "testcase": false, "constructor": false}, {"identifier": "copyLong", "parameters": "(Row row, BoundStatement boundStatement, int i)", "modifiers": "private static", "return": "void", "signature": "void copyLong(Row row, BoundStatement boundStatement, int i)", "full_signature": "private static void copyLong(Row row, BoundStatement boundStatement, int i)", "class_method_signature": "SchemaUpgrade.copyLong(Row row, BoundStatement boundStatement, int i)", "testcase": false, "constructor": false}, {"identifier": "copyBool", "parameters": "(Row row, BoundStatement boundStatement, int i)", "modifiers": "private static", "return": "void", "signature": "void copyBool(Row row, BoundStatement boundStatement, int i)", "full_signature": "private static void copyBool(Row row, BoundStatement boundStatement, int i)", "class_method_signature": "SchemaUpgrade.copyBool(Row row, BoundStatement boundStatement, int i)", "testcase": false, "constructor": false}, {"identifier": "copyTimestamp", "parameters": "(Row row, BoundStatement boundStatement, int i)", "modifiers": "private static", "return": "void", "signature": "void copyTimestamp(Row row, BoundStatement boundStatement, int i)", "full_signature": "private static void copyTimestamp(Row row, BoundStatement boundStatement, int i)", "class_method_signature": "SchemaUpgrade.copyTimestamp(Row row, BoundStatement boundStatement, int i)", "testcase": false, "constructor": false}, {"identifier": "copyBytes", "parameters": "(Row row, BoundStatement boundStatement, int i)", "modifiers": "private static", "return": "void", "signature": "void copyBytes(Row row, BoundStatement boundStatement, int i)", "full_signature": "private static void copyBytes(Row row, BoundStatement boundStatement, int i)", "class_method_signature": "SchemaUpgrade.copyBytes(Row row, BoundStatement boundStatement, int i)", "testcase": false, "constructor": false}, {"identifier": "getSchemaVersion", "parameters": "(Session session)", "modifiers": "private static @Nullable", "return": "Integer", "signature": "Integer getSchemaVersion(Session session)", "full_signature": "private static @Nullable Integer getSchemaVersion(Session session)", "class_method_signature": "SchemaUpgrade.getSchemaVersion(Session session)", "testcase": false, "constructor": false}], "file": "central/src/main/java/org/glowroot/central/repo/SchemaUpgrade.java"}, "focal_method": {"identifier": "upgradePermissions", "parameters": "(Set<String> permissions)", "modifiers": "@VisibleForTesting static @Nullable", "return": "Set<String>", "body": "@VisibleForTesting\n    static @Nullable Set<String> upgradePermissions(Set<String> permissions) {\n        Set<String> updatedPermissions = new HashSet<>();\n        ListMultimap<String, String> agentPermissions = ArrayListMultimap.create();\n        boolean needsUpgrade = false;\n        for (String permission : permissions) {\n            if (permission.startsWith(\"agent:\")) {\n                PermissionParser parser = new PermissionParser(permission);\n                parser.parse();\n                String perm = parser.getPermission();\n                agentPermissions.put(\n                        PermissionParser.quoteIfNeededAndJoin(parser.getAgentRollupIds()), perm);\n                if (perm.equals(\"agent:view\")) {\n                    needsUpgrade = true;\n                }\n            } else if (permission.equals(\"admin\") || permission.startsWith(\"admin:\")) {\n                updatedPermissions.add(permission);\n            } else {\n                logger.error(\"unexpected permission: {}\", permission);\n            }\n        }\n        if (!needsUpgrade) {\n            return null;\n        }\n        for (Map.Entry<String, List<String>> entry : Multimaps.asMap(agentPermissions).entrySet()) {\n            List<String> perms = entry.getValue();\n            PermissionParser.upgradeAgentPermissionsFrom_0_9_1_to_0_9_2(perms);\n            for (String perm : perms) {\n                updatedPermissions\n                        .add(\"agent:\" + entry.getKey() + \":\" + perm.substring(\"agent:\".length()));\n            }\n        }\n        if (updatedPermissions.contains(\"admin:view\")\n                && updatedPermissions.contains(\"admin:edit\")) {\n            updatedPermissions.remove(\"admin:view\");\n            updatedPermissions.remove(\"admin:edit\");\n            updatedPermissions.add(\"admin\");\n        }\n        return updatedPermissions;\n    }", "signature": "Set<String> upgradePermissions(Set<String> permissions)", "full_signature": "@VisibleForTesting static @Nullable Set<String> upgradePermissions(Set<String> permissions)", "class_method_signature": "SchemaUpgrade.upgradePermissions(Set<String> permissions)", "testcase": false, "constructor": false, "invocations": ["create", "startsWith", "parse", "getPermission", "put", "quoteIfNeededAndJoin", "getAgentRollupIds", "equals", "equals", "startsWith", "add", "error", "entrySet", "asMap", "getValue", "upgradeAgentPermissionsFrom_0_9_1_to_0_9_2", "add", "getKey", "substring", "length", "contains", "contains", "remove", "remove", "add"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}