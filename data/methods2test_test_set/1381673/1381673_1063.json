{"test_class": {"identifier": "PackageDescrVisitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VerifierData        verifierData;", "modifier": "private", "type": "VerifierData", "declarator": "verifierData", "var_name": "verifierData"}, {"original_string": "private PackageDescrVisitor packageDescrVisitor;", "modifier": "private", "type": "PackageDescrVisitor", "declarator": "packageDescrVisitor", "var_name": "packageDescrVisitor"}], "file": "drools-verifier/drools-verifier-drl/src/test/java/org/drools/verifier/visitor/PackageDescrVisitorTest.java"}, "test_case": {"identifier": "testSubPatterns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubPatterns() throws Exception {\n\n        PackageDescr packageDescr = getPackageDescr(getClass().getResourceAsStream(\"SubPattern.drl\"));\n\n        assertNotNull(packageDescr);\n\n        packageDescrVisitor.visitPackageDescr(packageDescr);\n\n        Collection<VerifierComponent> all = verifierData.getAll();\n\n        assertNotNull(all);\n\n        SubPattern test1SubPattern = null;\n        SubPattern test2SubPattern = null;\n        SubRule test1SubRule = null;\n        SubRule test2SubRule = null;\n\n        for (VerifierComponent verifierComponent : all) {\n            //            System.out.println( verifierComponent );\n\n            System.out.println(\"-\" + verifierComponent);\n            if (verifierComponent.getDescr() != null) {\n                System.out.println(\" \\n\\t\\t => \" + verifierComponent.getDescr().getLine() + \":\" + +verifierComponent.getDescr().getEndLine() + \" \" + verifierComponent.getDescr().getText());\n            } else { System.out.println(\" \\n\\t\\t => null for \" + verifierComponent.getClass().getSimpleName()); }\n\n\n            if (verifierComponent.getVerifierComponentType().equals(VerifierComponentType.SUB_PATTERN)) {\n                SubPattern subPattern = (SubPattern) verifierComponent;\n                if (\"Test 1\".equals(subPattern.getRuleName())) {\n                    assertNull(test1SubPattern);\n                    test1SubPattern = subPattern;\n                } else if (\"Test 2\".equals(subPattern.getRuleName())) {\n                    assertNull(test2SubPattern);\n                    test2SubPattern = subPattern;\n                }\n            }\n            if (verifierComponent.getVerifierComponentType().equals(VerifierComponentType.SUB_RULE)) {\n                SubRule subRule = (SubRule) verifierComponent;\n                if (\"Test 1\".equals(subRule.getRuleName())) {\n                    assertNull(test1SubRule);\n                    test1SubRule = subRule;\n                } else if (\"Test 2\".equals(subRule.getRuleName())) {\n                    assertNull(test2SubRule);\n                    test2SubRule = subRule;\n                }\n            }\n        }\n\n        assertNotNull(test1SubPattern);\n        assertEquals(3,\n                     test1SubPattern.getItems().size());\n        assertNotNull(test2SubPattern);\n        assertEquals(3,\n                     test2SubPattern.getItems().size());\n        assertNotNull(test1SubRule);\n        assertEquals(1,\n                     test1SubRule.getItems().size());\n        assertNotNull(test2SubRule);\n        assertEquals(1,\n                     test2SubRule.getItems().size());\n\n    }", "signature": "void testSubPatterns()", "full_signature": "@Test public void testSubPatterns()", "class_method_signature": "PackageDescrVisitorTest.testSubPatterns()", "testcase": true, "constructor": false, "invocations": ["getPackageDescr", "getResourceAsStream", "getClass", "assertNotNull", "visitPackageDescr", "getAll", "assertNotNull", "println", "getDescr", "println", "getLine", "getDescr", "getEndLine", "getDescr", "getText", "getDescr", "println", "getSimpleName", "getClass", "equals", "getVerifierComponentType", "equals", "getRuleName", "assertNull", "equals", "getRuleName", "assertNull", "equals", "getVerifierComponentType", "equals", "getRuleName", "assertNull", "equals", "getRuleName", "assertNull", "assertNotNull", "assertEquals", "size", "getItems", "assertNotNull", "assertEquals", "size", "getItems", "assertNotNull", "assertEquals", "size", "getItems", "assertNotNull", "assertEquals", "size", "getItems"]}, "focal_class": {"identifier": "PackageDescrVisitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final VerifierData data;", "modifier": "private final", "type": "VerifierData", "declarator": "data", "var_name": "data"}, {"original_string": "private List<JarInputStream> jars = null;", "modifier": "private", "type": "List<JarInputStream>", "declarator": "jars = null", "var_name": "jars"}, {"original_string": "private RulePackage rulePackage;", "modifier": "private", "type": "RulePackage", "declarator": "rulePackage", "var_name": "rulePackage"}], "methods": [{"identifier": "PackageDescrVisitor", "parameters": "(VerifierData data,\n                               List<JarInputStream> jars)", "modifiers": "public", "return": "", "signature": " PackageDescrVisitor(VerifierData data,\n                               List<JarInputStream> jars)", "full_signature": "public  PackageDescrVisitor(VerifierData data,\n                               List<JarInputStream> jars)", "class_method_signature": "PackageDescrVisitor.PackageDescrVisitor(VerifierData data,\n                               List<JarInputStream> jars)", "testcase": false, "constructor": true}, {"identifier": "visitPackageDescr", "parameters": "(PackageDescr descr)", "modifiers": "public", "return": "void", "signature": "void visitPackageDescr(PackageDescr descr)", "full_signature": "public void visitPackageDescr(PackageDescr descr)", "class_method_signature": "PackageDescrVisitor.visitPackageDescr(PackageDescr descr)", "testcase": false, "constructor": false}, {"identifier": "visitImports", "parameters": "(List<ImportDescr> importDescrs)", "modifiers": "private", "return": "void", "signature": "void visitImports(List<ImportDescr> importDescrs)", "full_signature": "private void visitImports(List<ImportDescr> importDescrs)", "class_method_signature": "PackageDescrVisitor.visitImports(List<ImportDescr> importDescrs)", "testcase": false, "constructor": false}, {"identifier": "visitRules", "parameters": "(List<RuleDescr> rules)", "modifiers": "private", "return": "void", "signature": "void visitRules(List<RuleDescr> rules)", "full_signature": "private void visitRules(List<RuleDescr> rules)", "class_method_signature": "PackageDescrVisitor.visitRules(List<RuleDescr> rules)", "testcase": false, "constructor": false}, {"identifier": "visitRuleDescr", "parameters": "(RuleDescr descr)", "modifiers": "private", "return": "void", "signature": "void visitRuleDescr(RuleDescr descr)", "full_signature": "private void visitRuleDescr(RuleDescr descr)", "class_method_signature": "PackageDescrVisitor.visitRuleDescr(RuleDescr descr)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-drl/src/main/java/org/drools/verifier/visitor/PackageDescrVisitor.java"}, "focal_method": {"identifier": "visitPackageDescr", "parameters": "(PackageDescr descr)", "modifiers": "public", "return": "void", "body": "public void visitPackageDescr(PackageDescr descr) throws UnknownDescriptionException, ClassNotFoundException, IOException {\n        rulePackage = data.getPackageByName(descr.getName());\n\n        if (rulePackage == null) {\n            rulePackage = new RulePackage(descr);\n\n            rulePackage.setName(descr.getName());\n            data.add(rulePackage);\n        }\n\n        visitImports(descr.getImports());\n\n        TypeDeclarationDescrVisitor typeDeclarationDescrVisitor = new TypeDeclarationDescrVisitor(data);\n        typeDeclarationDescrVisitor.visit(descr.getTypeDeclarations());\n\n        visitRules(descr.getRules());\n    }", "signature": "void visitPackageDescr(PackageDescr descr)", "full_signature": "public void visitPackageDescr(PackageDescr descr)", "class_method_signature": "PackageDescrVisitor.visitPackageDescr(PackageDescr descr)", "testcase": false, "constructor": false, "invocations": ["getPackageByName", "getName", "setName", "getName", "add", "visitImports", "getImports", "visit", "getTypeDeclarations", "visitRules", "getRules"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}