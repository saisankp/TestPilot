{"test_class": {"identifier": "RecyclerMixinTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private TemplateLayout mTemplateLayout;", "modifier": "private", "type": "TemplateLayout", "declarator": "mTemplateLayout", "var_name": "mTemplateLayout"}, {"original_string": "private RecyclerView mRecyclerView;", "modifier": "private", "type": "RecyclerView", "declarator": "mRecyclerView", "var_name": "mRecyclerView"}, {"original_string": "@Mock\n    private Adapter mAdapter;", "modifier": "@Mock\n    private", "type": "Adapter", "declarator": "mAdapter", "var_name": "mAdapter"}], "file": "com/android/setupwizardlib/template/RecyclerMixinTest.java"}, "test_case": {"identifier": "testGetRecyclerView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRecyclerView() {\n        RecyclerMixin mixin = new RecyclerMixin(mTemplateLayout, mRecyclerView);\n        assertSame(mRecyclerView, mixin.getRecyclerView());\n    }", "signature": "void testGetRecyclerView()", "full_signature": "@Test public void testGetRecyclerView()", "class_method_signature": "RecyclerMixinTest.testGetRecyclerView()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getRecyclerView"]}, "focal_class": {"identifier": "RecyclerMixin", "superclass": "", "interfaces": "implements Mixin", "fields": [{"original_string": "private TemplateLayout mTemplateLayout;", "modifier": "private", "type": "TemplateLayout", "declarator": "mTemplateLayout", "var_name": "mTemplateLayout"}, {"original_string": "@NonNull\n    private final RecyclerView mRecyclerView;", "modifier": "@NonNull\n    private final", "type": "RecyclerView", "declarator": "mRecyclerView", "var_name": "mRecyclerView"}, {"original_string": "@Nullable\n    private View mHeader;", "modifier": "@Nullable\n    private", "type": "View", "declarator": "mHeader", "var_name": "mHeader"}, {"original_string": "@NonNull\n    private DividerItemDecoration mDividerDecoration;", "modifier": "@NonNull\n    private", "type": "DividerItemDecoration", "declarator": "mDividerDecoration", "var_name": "mDividerDecoration"}, {"original_string": "private Drawable mDefaultDivider;", "modifier": "private", "type": "Drawable", "declarator": "mDefaultDivider", "var_name": "mDefaultDivider"}, {"original_string": "private Drawable mDivider;", "modifier": "private", "type": "Drawable", "declarator": "mDivider", "var_name": "mDivider"}, {"original_string": "private int mDividerInset;", "modifier": "private", "type": "int", "declarator": "mDividerInset", "var_name": "mDividerInset"}], "methods": [{"identifier": "RecyclerMixin", "parameters": "(@NonNull TemplateLayout layout, @NonNull RecyclerView recyclerView)", "modifiers": "public", "return": "", "signature": " RecyclerMixin(@NonNull TemplateLayout layout, @NonNull RecyclerView recyclerView)", "full_signature": "public  RecyclerMixin(@NonNull TemplateLayout layout, @NonNull RecyclerView recyclerView)", "class_method_signature": "RecyclerMixin.RecyclerMixin(@NonNull TemplateLayout layout, @NonNull RecyclerView recyclerView)", "testcase": false, "constructor": true}, {"identifier": "parseAttributes", "parameters": "(@Nullable AttributeSet attrs, int defStyleAttr)", "modifiers": "public", "return": "void", "signature": "void parseAttributes(@Nullable AttributeSet attrs, int defStyleAttr)", "full_signature": "public void parseAttributes(@Nullable AttributeSet attrs, int defStyleAttr)", "class_method_signature": "RecyclerMixin.parseAttributes(@Nullable AttributeSet attrs, int defStyleAttr)", "testcase": false, "constructor": false}, {"identifier": "getRecyclerView", "parameters": "()", "modifiers": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a recycler // view, and call this after the template is inflated, // this will not return null. public", "return": "RecyclerView", "signature": "RecyclerView getRecyclerView()", "full_signature": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a recycler // view, and call this after the template is inflated, // this will not return null. public RecyclerView getRecyclerView()", "class_method_signature": "RecyclerMixin.getRecyclerView()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a header, // this call will not return null. public", "return": "View", "signature": "View getHeader()", "full_signature": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a header, // this call will not return null. public View getHeader()", "class_method_signature": "RecyclerMixin.getHeader()", "testcase": false, "constructor": false}, {"identifier": "onLayout", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onLayout()", "full_signature": "public void onLayout()", "class_method_signature": "RecyclerMixin.onLayout()", "testcase": false, "constructor": false}, {"identifier": "getAdapter", "parameters": "()", "modifiers": "public", "return": "Adapter<? extends ViewHolder>", "signature": "Adapter<? extends ViewHolder> getAdapter()", "full_signature": "public Adapter<? extends ViewHolder> getAdapter()", "class_method_signature": "RecyclerMixin.getAdapter()", "testcase": false, "constructor": false}, {"identifier": "setAdapter", "parameters": "(Adapter<? extends ViewHolder> adapter)", "modifiers": "public", "return": "void", "signature": "void setAdapter(Adapter<? extends ViewHolder> adapter)", "full_signature": "public void setAdapter(Adapter<? extends ViewHolder> adapter)", "class_method_signature": "RecyclerMixin.setAdapter(Adapter<? extends ViewHolder> adapter)", "testcase": false, "constructor": false}, {"identifier": "setDividerInset", "parameters": "(int inset)", "modifiers": "public", "return": "void", "signature": "void setDividerInset(int inset)", "full_signature": "public void setDividerInset(int inset)", "class_method_signature": "RecyclerMixin.setDividerInset(int inset)", "testcase": false, "constructor": false}, {"identifier": "getDividerInset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDividerInset()", "full_signature": "public int getDividerInset()", "class_method_signature": "RecyclerMixin.getDividerInset()", "testcase": false, "constructor": false}, {"identifier": "updateDivider", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateDivider()", "full_signature": "private void updateDivider()", "class_method_signature": "RecyclerMixin.updateDivider()", "testcase": false, "constructor": false}, {"identifier": "getDivider", "parameters": "()", "modifiers": "public", "return": "Drawable", "signature": "Drawable getDivider()", "full_signature": "public Drawable getDivider()", "class_method_signature": "RecyclerMixin.getDivider()", "testcase": false, "constructor": false}, {"identifier": "setDividerItemDecoration", "parameters": "(@NonNull DividerItemDecoration decoration)", "modifiers": "public", "return": "void", "signature": "void setDividerItemDecoration(@NonNull DividerItemDecoration decoration)", "full_signature": "public void setDividerItemDecoration(@NonNull DividerItemDecoration decoration)", "class_method_signature": "RecyclerMixin.setDividerItemDecoration(@NonNull DividerItemDecoration decoration)", "testcase": false, "constructor": false}], "file": "com/android/setupwizardlib/template/RecyclerMixin.java"}, "focal_method": {"identifier": "getRecyclerView", "parameters": "()", "modifiers": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a recycler // view, and call this after the template is inflated, // this will not return null. public", "return": "RecyclerView", "body": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a recycler\n                                          // view, and call this after the template is inflated,\n                                          // this will not return null.\n    public RecyclerView getRecyclerView() {\n        return mRecyclerView;\n    }", "signature": "RecyclerView getRecyclerView()", "full_signature": "@SuppressWarnings(\"NullableProblems\") // If clients guarantee that the template has a recycler // view, and call this after the template is inflated, // this will not return null. public RecyclerView getRecyclerView()", "class_method_signature": "RecyclerMixin.getRecyclerView()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 109116423, "url": "https://github.com/AndroidSDKSources/android-sdk-sources-for-api-level-26", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 29147, "license": "licensed"}}