{"test_class": {"identifier": "LdapRealmTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "static int ldapPort = 1389;", "modifier": "static", "type": "int", "declarator": "ldapPort = 1389", "var_name": "ldapPort"}, {"original_string": "private static InMemoryDirectoryServer ds;", "modifier": "private static", "type": "InMemoryDirectoryServer", "declarator": "ds", "var_name": "ds"}, {"original_string": "private LdapRealm ldap;", "modifier": "private", "type": "LdapRealm", "declarator": "ldap", "var_name": "ldap"}], "file": "fathom-security-ldap/src/test/java/fathom/realm/ldap/LdapRealmTest.java"}, "test_case": {"identifier": "testComplexEmail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComplexEmail() {\n        Map<String, Object> settings = getSettings();\n        settings.put(\"emailMapping\", \"${givenName}.${surname}@gitblit.com\");\n        ldap = newRealm(settings);\n\n        Account userOne = ldap.authenticate(\"UserOne\", \"userOnePassword\");\n        assertNotNull(userOne);\n        assertTrue(userOne.getEmailAddresses().contains(\"User.One@gitblit.com\"));\n    }", "signature": "void testComplexEmail()", "full_signature": "@Test public void testComplexEmail()", "class_method_signature": "LdapRealmTest.testComplexEmail()", "testcase": true, "constructor": false, "invocations": ["getSettings", "put", "newRealm", "authenticate", "assertNotNull", "assertTrue", "contains", "getEmailAddresses"]}, "focal_class": {"identifier": "LdapRealm", "superclass": "extends CachingRealm", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(LdapRealm.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LdapRealm.class)", "var_name": "log"}, {"original_string": "protected String ldapUrl;", "modifier": "protected", "type": "String", "declarator": "ldapUrl", "var_name": "ldapUrl"}, {"original_string": "protected String ldapUsername;", "modifier": "protected", "type": "String", "declarator": "ldapUsername", "var_name": "ldapUsername"}, {"original_string": "protected String ldapPassword;", "modifier": "protected", "type": "String", "declarator": "ldapPassword", "var_name": "ldapPassword"}, {"original_string": "protected String ldapBindPattern;", "modifier": "protected", "type": "String", "declarator": "ldapBindPattern", "var_name": "ldapBindPattern"}, {"original_string": "protected String accountBase;", "modifier": "protected", "type": "String", "declarator": "accountBase", "var_name": "accountBase"}, {"original_string": "protected String accountPattern;", "modifier": "protected", "type": "String", "declarator": "accountPattern", "var_name": "accountPattern"}, {"original_string": "protected String groupBase;", "modifier": "protected", "type": "String", "declarator": "groupBase", "var_name": "groupBase"}, {"original_string": "protected String groupMemberPattern;", "modifier": "protected", "type": "String", "declarator": "groupMemberPattern", "var_name": "groupMemberPattern"}, {"original_string": "protected String nameMapping;", "modifier": "protected", "type": "String", "declarator": "nameMapping", "var_name": "nameMapping"}, {"original_string": "protected String emailMapping;", "modifier": "protected", "type": "String", "declarator": "emailMapping", "var_name": "emailMapping"}, {"original_string": "protected List<String> adminGroups;", "modifier": "protected", "type": "List<String>", "declarator": "adminGroups", "var_name": "adminGroups"}], "methods": [{"identifier": "escapeLDAPSearchFilter", "parameters": "(String filter)", "modifiers": "public static final", "return": "String", "signature": "String escapeLDAPSearchFilter(String filter)", "full_signature": "public static final String escapeLDAPSearchFilter(String filter)", "class_method_signature": "LdapRealm.escapeLDAPSearchFilter(String filter)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(Config config)", "modifiers": "@Override public", "return": "void", "signature": "void setup(Config config)", "full_signature": "@Override public void setup(Config config)", "class_method_signature": "LdapRealm.setup(Config config)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "LdapRealm.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "LdapRealm.stop()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(StandardCredentials requestCredentials)", "modifiers": "@Override public", "return": "Account", "signature": "Account authenticate(StandardCredentials requestCredentials)", "full_signature": "@Override public Account authenticate(StandardCredentials requestCredentials)", "class_method_signature": "LdapRealm.authenticate(StandardCredentials requestCredentials)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final String username, final String password)", "modifiers": "@Override public", "return": "Account", "signature": "Account authenticate(final String username, final String password)", "full_signature": "@Override public Account authenticate(final String username, final String password)", "class_method_signature": "LdapRealm.authenticate(final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "getLdapConnection", "parameters": "()", "modifiers": "private", "return": "LDAPConnection", "signature": "LDAPConnection getLdapConnection()", "full_signature": "private LDAPConnection getLdapConnection()", "class_method_signature": "LdapRealm.getLdapConnection()", "testcase": false, "constructor": false}, {"identifier": "isAuthenticated", "parameters": "(LDAPConnection ldapConnection, String userDn, String password)", "modifiers": "private", "return": "boolean", "signature": "boolean isAuthenticated(LDAPConnection ldapConnection, String userDn, String password)", "full_signature": "private boolean isAuthenticated(LDAPConnection ldapConnection, String userDn, String password)", "class_method_signature": "LdapRealm.isAuthenticated(LDAPConnection ldapConnection, String userDn, String password)", "testcase": false, "constructor": false}, {"identifier": "doSearch", "parameters": "(LDAPConnection ldapConnection, String base, String filter)", "modifiers": "private", "return": "SearchResult", "signature": "SearchResult doSearch(LDAPConnection ldapConnection, String base, String filter)", "full_signature": "private SearchResult doSearch(LDAPConnection ldapConnection, String base, String filter)", "class_method_signature": "LdapRealm.doSearch(LDAPConnection ldapConnection, String base, String filter)", "testcase": false, "constructor": false}, {"identifier": "doSearch", "parameters": "(LDAPConnection ldapConnection, String base, boolean dereferenceAliases, String filter, List<String> attributes)", "modifiers": "private", "return": "SearchResult", "signature": "SearchResult doSearch(LDAPConnection ldapConnection, String base, boolean dereferenceAliases, String filter, List<String> attributes)", "full_signature": "private SearchResult doSearch(LDAPConnection ldapConnection, String base, boolean dereferenceAliases, String filter, List<String> attributes)", "class_method_signature": "LdapRealm.doSearch(LDAPConnection ldapConnection, String base, boolean dereferenceAliases, String filter, List<String> attributes)", "testcase": false, "constructor": false}, {"identifier": "setAccountRoles", "parameters": "(LDAPConnection ldapConnection, SearchResultEntry accountSearchResult, Account account)", "modifiers": "private", "return": "void", "signature": "void setAccountRoles(LDAPConnection ldapConnection, SearchResultEntry accountSearchResult, Account account)", "full_signature": "private void setAccountRoles(LDAPConnection ldapConnection, SearchResultEntry accountSearchResult, Account account)", "class_method_signature": "LdapRealm.setAccountRoles(LDAPConnection ldapConnection, SearchResultEntry accountSearchResult, Account account)", "testcase": false, "constructor": false}, {"identifier": "setAccountAttributes", "parameters": "(SearchResultEntry userSearchResult, Account account)", "modifiers": "private", "return": "void", "signature": "void setAccountAttributes(SearchResultEntry userSearchResult, Account account)", "full_signature": "private void setAccountAttributes(SearchResultEntry userSearchResult, Account account)", "class_method_signature": "LdapRealm.setAccountAttributes(SearchResultEntry userSearchResult, Account account)", "testcase": false, "constructor": false}, {"identifier": "setAdminAttribute", "parameters": "(Account account)", "modifiers": "private", "return": "void", "signature": "void setAdminAttribute(Account account)", "full_signature": "private void setAdminAttribute(Account account)", "class_method_signature": "LdapRealm.setAdminAttribute(Account account)", "testcase": false, "constructor": false}, {"identifier": "getSimpleUsername", "parameters": "(String username)", "modifiers": "private", "return": "String", "signature": "String getSimpleUsername(String username)", "full_signature": "private String getSimpleUsername(String username)", "class_method_signature": "LdapRealm.getSimpleUsername(String username)", "testcase": false, "constructor": false}], "file": "fathom-security-ldap/src/main/java/fathom/realm/ldap/LdapRealm.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(StandardCredentials requestCredentials)", "modifiers": "@Override public", "return": "Account", "body": "@Override\n    public Account authenticate(StandardCredentials requestCredentials) {\n\n        final String username = getSimpleUsername(requestCredentials.getUsername());\n        final String password = requestCredentials.getPassword();\n\n        if (hasAccount(username)) {\n            // account is cached, authenticate against the cache\n            return super.authenticate(new StandardCredentials(username, password));\n        }\n\n        return authenticate(username, password);\n    }", "signature": "Account authenticate(StandardCredentials requestCredentials)", "full_signature": "@Override public Account authenticate(StandardCredentials requestCredentials)", "class_method_signature": "LdapRealm.authenticate(StandardCredentials requestCredentials)", "testcase": false, "constructor": false, "invocations": ["getSimpleUsername", "getUsername", "getPassword", "hasAccount", "authenticate", "authenticate"]}, "repository": {"repo_id": 35689778, "url": "https://github.com/gitblit/fathom", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1076, "license": "licensed"}}