{"test_class": {"identifier": "RoutingRuleSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Cell CELL_1 = new Cell(\"cell1\", \"cell.1\");", "modifier": "private static final", "type": "Cell", "declarator": "CELL_1 = new Cell(\"cell1\", \"cell.1\")", "var_name": "CELL_1"}, {"original_string": "private static final Cell CELL_2 = new Cell(\"cell2\", \"cell.2\");", "modifier": "private static final", "type": "Cell", "declarator": "CELL_2 = new Cell(\"cell2\", \"cell.2\")", "var_name": "CELL_2"}, {"original_string": "private final CellInfoResolver cellInfoResolver = mock(CellInfoResolver.class);", "modifier": "private final", "type": "CellInfoResolver", "declarator": "cellInfoResolver = mock(CellInfoResolver.class)", "var_name": "cellInfoResolver"}], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/router/RoutingRuleSelectorTest.java"}, "test_case": {"identifier": "testReloadFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReloadFailure() {\n        AtomicReference<String> rules = new AtomicReference<>(\"cell1=(app1.*);cell2=(app2.*)\");\n        RoutingRuleSelector selector = new RoutingRuleSelector(cellInfoResolver, rules::get);\n        assertThat(selector.select(\"app1\", cell -> true)).contains(CELL_1);\n\n        rules.set(null);\n        assertThat(selector.select(\"app1\", cell -> true)).contains(CELL_1);\n\n        rules.set(\"cell1=(app2.*);cell2=(app1.*)\");\n        assertThat(selector.select(\"app1\", cell -> true)).contains(CELL_2);\n    }", "signature": "void testReloadFailure()", "full_signature": "@Test public void testReloadFailure()", "class_method_signature": "RoutingRuleSelectorTest.testReloadFailure()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "select", "set", "contains", "assertThat", "select", "set", "contains", "assertThat", "select"]}, "focal_class": {"identifier": "RoutingRuleSelector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoutingRuleSelector.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoutingRuleSelector.class)", "var_name": "logger"}, {"original_string": "private final Function<String, Map<Cell, Pattern>> compileRoutingPatterns;", "modifier": "private final", "type": "Function<String, Map<Cell, Pattern>>", "declarator": "compileRoutingPatterns", "var_name": "compileRoutingPatterns"}, {"original_string": "private final Supplier<String> routingRulesSupplier;", "modifier": "private final", "type": "Supplier<String>", "declarator": "routingRulesSupplier", "var_name": "routingRulesSupplier"}], "methods": [{"identifier": "RoutingRuleSelector", "parameters": "(CellInfoResolver cellInfoResolver, Supplier<String> routingRulesSupplier)", "modifiers": "", "return": "", "signature": " RoutingRuleSelector(CellInfoResolver cellInfoResolver, Supplier<String> routingRulesSupplier)", "full_signature": "  RoutingRuleSelector(CellInfoResolver cellInfoResolver, Supplier<String> routingRulesSupplier)", "class_method_signature": "RoutingRuleSelector.RoutingRuleSelector(CellInfoResolver cellInfoResolver, Supplier<String> routingRulesSupplier)", "testcase": false, "constructor": true}, {"identifier": "select", "parameters": "(String routeKey, Predicate<Cell> filter)", "modifiers": "", "return": "Optional<Cell>", "signature": "Optional<Cell> select(String routeKey, Predicate<Cell> filter)", "full_signature": " Optional<Cell> select(String routeKey, Predicate<Cell> filter)", "class_method_signature": "RoutingRuleSelector.select(String routeKey, Predicate<Cell> filter)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/router/RoutingRuleSelector.java"}, "focal_method": {"identifier": "select", "parameters": "(String routeKey, Predicate<Cell> filter)", "modifiers": "", "return": "Optional<Cell>", "body": "Optional<Cell> select(String routeKey, Predicate<Cell> filter) {\n        Map<Cell, Pattern> cellRoutingPatterns = compileRoutingPatterns.apply(routingRulesSupplier.get());\n\n        return cellRoutingPatterns.entrySet().stream()\n                .filter(entry -> filter.test(entry.getKey()))\n                .filter(entry -> entry.getValue().matcher(routeKey).matches())\n                .findFirst()\n                .map(Map.Entry::getKey);\n    }", "signature": "Optional<Cell> select(String routeKey, Predicate<Cell> filter)", "full_signature": " Optional<Cell> select(String routeKey, Predicate<Cell> filter)", "class_method_signature": "RoutingRuleSelector.select(String routeKey, Predicate<Cell> filter)", "testcase": false, "constructor": false, "invocations": ["apply", "get", "map", "findFirst", "filter", "filter", "stream", "entrySet", "test", "getKey", "matches", "matcher", "getValue"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}