{"test_class": {"identifier": "HeterolyticCleavageSBReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private UniversalIsomorphismTester    uiTester;", "modifier": "private", "type": "UniversalIsomorphismTester", "declarator": "uiTester", "var_name": "uiTester"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/HeterolyticCleavageSBReactionTest.java"}, "test_case": {"identifier": "testOsp2SingleB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOsp2SingleB() throws Exception {\n        //Smiles(\"COC\")\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"O\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n        molecule.addBond(1, 2, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        molecule.addBond(0, 3, IBond.Order.SINGLE);\n        molecule.addBond(0, 4, IBond.Order.SINGLE);\n        molecule.addBond(0, 5, IBond.Order.SINGLE);\n        molecule.addBond(2, 6, IBond.Order.SINGLE);\n        molecule.addBond(2, 7, IBond.Order.SINGLE);\n        molecule.addBond(2, 8, IBond.Order.SINGLE);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        molecule.getAtom(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(2).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n\n        IAtomContainerSet setOfReactants = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        setOfReactants.addAtomContainer(molecule);\n\n        IReactionProcess type = new HeterolyticCleavageSBReaction();\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n\n        /* initiate */\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(1, setOfReactions.getReactionCount());\n\n        // expected products\n\n        //Smiles(\"C[O-]\")\n        IAtomContainer expected1 = builder.newInstance(IAtomContainer.class);\n        expected1.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        expected1.addAtom(builder.newInstance(IAtom.class, \"O\"));\n        expected1.getAtom(1).setFormalCharge(-1);\n        expected1.addBond(0, 1, IBond.Order.SINGLE);\n        expected1.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected1.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected1.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected1.addBond(0, 2, IBond.Order.SINGLE);\n        expected1.addBond(0, 3, IBond.Order.SINGLE);\n        expected1.addBond(0, 4, IBond.Order.SINGLE);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n        IAtomContainer product1 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n        QueryAtomContainer queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(expected1);\n        Assert.assertTrue(uiTester.isIsomorph(product1, queryAtom));\n\n        //Smiles(\"[C+]\")\n        IAtomContainer expected2 = builder.newInstance(IAtomContainer.class);\n        expected2.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        expected2.getAtom(0).setFormalCharge(+1);\n        expected2.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected2.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected2.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        expected2.addBond(0, 1, IBond.Order.SINGLE);\n        expected2.addBond(0, 2, IBond.Order.SINGLE);\n        expected2.addBond(0, 3, IBond.Order.SINGLE);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(expected2);\n        IAtomContainer product2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(1);\n        queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(expected2);\n        Assert.assertTrue(uiTester.isIsomorph(product2, queryAtom));\n    }", "signature": "void testOsp2SingleB()", "full_signature": "@Test public void testOsp2SingleB()", "class_method_signature": "HeterolyticCleavageSBReactionTest.testOsp2SingleB()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addBond", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "percieveAtomTypesAndConfigureAtoms", "saturate", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getBond", "newInstance", "getInstance", "addAtomContainer", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addBond", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addBond", "addBond", "percieveAtomTypesAndConfigureAtoms", "saturate", "getAtomContainer", "getProducts", "getReaction", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph", "newInstance", "addAtom", "newInstance", "setFormalCharge", "getAtom", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addBond", "addBond", "percieveAtomTypesAndConfigureAtoms", "getAtomContainer", "getProducts", "getReaction", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph"]}, "focal_class": {"identifier": "HeterolyticCleavageSBReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(HeterolyticCleavageSBReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(HeterolyticCleavageSBReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "HeterolyticCleavageSBReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " HeterolyticCleavageSBReaction()", "full_signature": "public  HeterolyticCleavageSBReaction()", "class_method_signature": "HeterolyticCleavageSBReaction.HeterolyticCleavageSBReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "HeterolyticCleavageSBReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "HeterolyticCleavageSBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "HeterolyticCleavageSBReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/HeterolyticCleavageSBReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: HeterolyticCleavageSBReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"HeterolyticCleavageSBReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"HeterolyticCleavageSBReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IBond> bondis = reactant.bonds().iterator();\n        while (bondis.hasNext()) {\n            IBond bondi = bondis.next();\n            IAtom atom1 = bondi.getBegin();\n            IAtom atom2 = bondi.getEnd();\n            if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.SINGLE\n                    && atom1.getFlag(CDKConstants.REACTIVE_CENTER) && atom2.getFlag(CDKConstants.REACTIVE_CENTER)\n                    && (atom1.getFormalCharge() == CDKConstants.UNSET ? 0 : atom1.getFormalCharge()) == 0\n                    && (atom2.getFormalCharge() == CDKConstants.UNSET ? 0 : atom2.getFormalCharge()) == 0\n                    && reactant.getConnectedSingleElectronsCount(atom1) == 0\n                    && reactant.getConnectedSingleElectronsCount(atom2) == 0) {\n\n                /**/\n                for (int j = 0; j < 2; j++) {\n\n                    ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                    if (j == 0) {\n                        atomList.add(atom1);\n                        atomList.add(atom2);\n                    } else {\n                        atomList.add(atom2);\n                        atomList.add(atom1);\n                    }\n                    ArrayList<IBond> bondList = new ArrayList<IBond>();\n                    bondList.add(bondi);\n\n                    IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class);\n                    moleculeSet.addAtomContainer(reactant);\n                    IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                    if (reaction == null)\n                        continue;\n                    else\n                        setOfReactions.addReaction(reaction);\n                }\n            }\n        }\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "HeterolyticCleavageSBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "bonds", "hasNext", "next", "getBegin", "getEnd", "getFlag", "getOrder", "getFlag", "getFlag", "getFormalCharge", "getFormalCharge", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "getConnectedSingleElectronsCount", "add", "add", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}