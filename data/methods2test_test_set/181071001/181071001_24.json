{"test_class": {"identifier": "TestSimpleFlowMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String REGISTRY_URL = \"http://localhost:18080\";", "modifier": "static final", "type": "String", "declarator": "REGISTRY_URL = \"http://localhost:18080\"", "var_name": "REGISTRY_URL"}, {"original_string": "static final String BUCKET_ID = UUID.randomUUID().toString();", "modifier": "static final", "type": "String", "declarator": "BUCKET_ID = UUID.randomUUID().toString()", "var_name": "BUCKET_ID"}, {"original_string": "private NiFiRegistryClient client;", "modifier": "private", "type": "NiFiRegistryClient", "declarator": "client", "var_name": "client"}, {"original_string": "private FlowClient flowClient;", "modifier": "private", "type": "FlowClient", "declarator": "flowClient", "var_name": "flowClient"}, {"original_string": "private C2NiFiRegistryClient clientFactory;", "modifier": "private", "type": "C2NiFiRegistryClient", "declarator": "clientFactory", "var_name": "clientFactory"}, {"original_string": "private FlowMapper flowMapper;", "modifier": "private", "type": "FlowMapper", "declarator": "flowMapper", "var_name": "flowMapper"}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/test/java/com/cloudera/cem/efm/service/flow/mapping/TestSimpleFlowMapper.java"}, "test_case": {"identifier": "testGetFlowMappingWhenExceptionHappens", "parameters": "()", "modifiers": "@Test(expected = FlowMapperException.class) public", "return": "void", "body": "@Test(expected = FlowMapperException.class)\n    public void testGetFlowMappingWhenExceptionHappens() throws FlowMapperException, IOException, NiFiRegistryException {\n        final String agentClass = \"Class A\";\n        when(flowClient.getByBucket(BUCKET_ID)).thenThrow(new NiFiRegistryException(\"Bucket not found\"));\n        flowMapper.getFlowMapping(agentClass);\n    }", "signature": "void testGetFlowMappingWhenExceptionHappens()", "full_signature": "@Test(expected = FlowMapperException.class) public void testGetFlowMappingWhenExceptionHappens()", "class_method_signature": "TestSimpleFlowMapper.testGetFlowMappingWhenExceptionHappens()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getByBucket", "getFlowMapping"]}, "focal_class": {"identifier": "SimpleFlowMapper", "superclass": "", "interfaces": "implements FlowMapper", "fields": [{"original_string": "private final C2NiFiRegistryClient clientFactory;", "modifier": "private final", "type": "C2NiFiRegistryClient", "declarator": "clientFactory", "var_name": "clientFactory"}], "methods": [{"identifier": "SimpleFlowMapper", "parameters": "(final C2NiFiRegistryClient clientFactory)", "modifiers": "@Autowired public", "return": "", "signature": " SimpleFlowMapper(final C2NiFiRegistryClient clientFactory)", "full_signature": "@Autowired public  SimpleFlowMapper(final C2NiFiRegistryClient clientFactory)", "class_method_signature": "SimpleFlowMapper.SimpleFlowMapper(final C2NiFiRegistryClient clientFactory)", "testcase": false, "constructor": true}, {"identifier": "getFlowMapping", "parameters": "(final String agentClass)", "modifiers": "@Override public", "return": "Optional<FlowUri>", "signature": "Optional<FlowUri> getFlowMapping(final String agentClass)", "full_signature": "@Override public Optional<FlowUri> getFlowMapping(final String agentClass)", "class_method_signature": "SimpleFlowMapper.getFlowMapping(final String agentClass)", "testcase": false, "constructor": false}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/main/java/com/cloudera/cem/efm/service/flow/mapping/SimpleFlowMapper.java"}, "focal_method": {"identifier": "getFlowMapping", "parameters": "(final String agentClass)", "modifiers": "@Override public", "return": "Optional<FlowUri>", "body": "@Override\n    public Optional<FlowUri> getFlowMapping(final String agentClass) throws FlowMapperException {\n        if (StringUtils.isBlank(agentClass)) {\n            throw new IllegalArgumentException(\"Agent class cannot be null or blank\");\n        }\n\n        try {\n            final String registryUrl = clientFactory.getNiFiRegistryUrl();\n            final Optional<String> bucketIdOptional = clientFactory.resolveNiFiRegistryBucketId();\n\n            if (bucketIdOptional.isPresent()) {\n                final String bucketId = bucketIdOptional.get();\n                final NiFiRegistryClient client = clientFactory.getClient();\n                final FlowClient flowClient = client.getFlowClient();\n                final List<VersionedFlow> flows = flowClient.getByBucket(bucketId);\n\n                final Optional<String> flowId = flows.stream()\n                        .filter(f -> f.getName().equals(agentClass))\n                        .map(f -> f.getIdentifier())\n                        .findFirst();\n\n                if (flowId.isPresent()) {\n                    final FlowUri flowUri = new FlowUri(registryUrl, bucketId, flowId.get());\n                    return Optional.of(flowUri);\n                }\n            }\n            return Optional.empty();\n\n        } catch (final Exception e) {\n            throw new FlowMapperException(\"Unable to get flow mapping for \" + agentClass + \" due to \" + e.getMessage(), e);\n        }\n    }", "signature": "Optional<FlowUri> getFlowMapping(final String agentClass)", "full_signature": "@Override public Optional<FlowUri> getFlowMapping(final String agentClass)", "class_method_signature": "SimpleFlowMapper.getFlowMapping(final String agentClass)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getNiFiRegistryUrl", "resolveNiFiRegistryBucketId", "isPresent", "get", "getClient", "getFlowClient", "getByBucket", "findFirst", "map", "filter", "stream", "equals", "getName", "getIdentifier", "isPresent", "get", "of", "empty", "getMessage"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}