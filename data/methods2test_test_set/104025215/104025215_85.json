{"test_class": {"identifier": "TransformationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LifecycleOwner mOwner;", "modifier": "private", "type": "LifecycleOwner", "declarator": "mOwner", "var_name": "mOwner"}], "file": "lifecycle/extensions/src/test/java/android/arch/lifecycle/TransformationsTest.java"}, "test_case": {"identifier": "testSwitchMapToNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSwitchMapToNull() {\n        LiveData<Integer> trigger = new MutableLiveData<>();\n        final LiveData<String> first = new MutableLiveData<>();\n        LiveData<String> result = Transformations.switchMap(trigger,\n                new Function<Integer, LiveData<String>>() {\n                    @Override\n                    public LiveData<String> apply(Integer input) {\n                        if (input == 1) {\n                            return first;\n                        } else {\n                            return null;\n                        }\n                    }\n                });\n\n        Observer<String> observer = mock(Observer.class);\n        result.observe(mOwner, observer);\n        verify(observer, never()).onChanged(anyString());\n        first.setValue(\"first\");\n        trigger.setValue(1);\n        verify(observer).onChanged(\"first\");\n        reset(observer);\n\n        trigger.setValue(2);\n        verify(observer, never()).onChanged(anyString());\n        assertThat(first.hasObservers(), is(false));\n    }", "signature": "void testSwitchMapToNull()", "full_signature": "@Test public void testSwitchMapToNull()", "class_method_signature": "TransformationsTest.testSwitchMapToNull()", "testcase": true, "constructor": false, "invocations": ["switchMap", "mock", "observe", "onChanged", "verify", "never", "anyString", "setValue", "setValue", "onChanged", "verify", "reset", "setValue", "onChanged", "verify", "never", "anyString", "assertThat", "hasObservers", "is"]}, "focal_class": {"identifier": "Transformations", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Transformations", "parameters": "()", "modifiers": "private", "return": "", "signature": " Transformations()", "full_signature": "private  Transformations()", "class_method_signature": "Transformations.Transformations()", "testcase": false, "constructor": true}, {"identifier": "map", "parameters": "(LiveData<X> source, final Function<X, Y> func)", "modifiers": "@MainThread public static", "return": "LiveData<Y>", "signature": "LiveData<Y> map(LiveData<X> source, final Function<X, Y> func)", "full_signature": "@MainThread public static LiveData<Y> map(LiveData<X> source, final Function<X, Y> func)", "class_method_signature": "Transformations.map(LiveData<X> source, final Function<X, Y> func)", "testcase": false, "constructor": false}, {"identifier": "switchMap", "parameters": "(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "modifiers": "@MainThread public static", "return": "LiveData<Y>", "signature": "LiveData<Y> switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "full_signature": "@MainThread public static LiveData<Y> switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "class_method_signature": "Transformations.switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "testcase": false, "constructor": false}], "file": "lifecycle/extensions/src/main/java/android/arch/lifecycle/Transformations.java"}, "focal_method": {"identifier": "switchMap", "parameters": "(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "modifiers": "@MainThread public static", "return": "LiveData<Y>", "body": "@MainThread\n    public static <X, Y> LiveData<Y> switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func) {\n        final MediatorLiveData<Y> result = new MediatorLiveData<>();\n        result.addSource(trigger, new Observer<X>() {\n            LiveData<Y> mSource;\n\n            @Override\n            public void onChanged(@Nullable X x) {\n                LiveData<Y> newLiveData = func.apply(x);\n                if (mSource == newLiveData) {\n                    return;\n                }\n                if (mSource != null) {\n                    result.removeSource(mSource);\n                }\n                mSource = newLiveData;\n                if (mSource != null) {\n                    result.addSource(mSource, new Observer<Y>() {\n                        @Override\n                        public void onChanged(@Nullable Y y) {\n                            result.setValue(y);\n                        }\n                    });\n                }\n            }\n        });\n        return result;\n    }", "signature": "LiveData<Y> switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "full_signature": "@MainThread public static LiveData<Y> switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "class_method_signature": "Transformations.switchMap(LiveData<X> trigger,\n            final Function<X, LiveData<Y>> func)", "testcase": false, "constructor": false, "invocations": ["addSource", "apply", "removeSource", "addSource", "setValue"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}