{"test_class": {"identifier": "AsyncListDifferDelegationAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DiffUtil.ItemCallback<Object> callback = new DiffUtil.ItemCallback<Object>() {\n        @Override\n        public boolean areItemsTheSame(Object oldItem, Object newItem) {\n            return false;\n        }\n\n        @Override\n        public boolean areContentsTheSame(Object oldItem, Object newItem) {\n            return false;\n        }\n    };", "modifier": "private final", "type": "DiffUtil.ItemCallback<Object>", "declarator": "callback = new DiffUtil.ItemCallback<Object>() {\n        @Override\n        public boolean areItemsTheSame(Object oldItem, Object newItem) {\n            return false;\n        }\n\n        @Override\n        public boolean areContentsTheSame(Object oldItem, Object newItem) {\n            return false;\n        }\n    }", "var_name": "callback"}], "file": "library/src/test/java/com/hannesdorfmann/adapterdelegates4/AsyncListDifferDelegationAdapterTest.java"}, "test_case": {"identifier": "checkDelegatesManagerInstance", "parameters": "()", "modifiers": "@Test @Ignore(\"Why does Mockito can't mock the final class anymore?\") public", "return": "void", "body": "@Test\n    @Ignore(\"Why does Mockito can't mock the final class anymore?\")\n    public void checkDelegatesManagerInstance() {\n\n        final AdapterDelegatesManager<List<Object>> manager = new AdapterDelegatesManager<>();\n        AsyncDifferConfig<Object> config = Mockito.mock(AsyncDifferConfig.class);\n        AsyncListDifferDelegationAdapter<Object> adapter = new AsyncListDifferDelegationAdapter<Object>(config, manager) {\n            @Override\n            public int getItemCount() {\n                // Hacky but does the job\n                Assert.assertTrue(manager == this.delegatesManager);\n                return 0;\n            }\n        };\n\n        adapter.getItemCount();\n    }", "signature": "void checkDelegatesManagerInstance()", "full_signature": "@Test @Ignore(\"Why does Mockito can't mock the final class anymore?\") public void checkDelegatesManagerInstance()", "class_method_signature": "AsyncListDifferDelegationAdapterTest.checkDelegatesManagerInstance()", "testcase": true, "constructor": false, "invocations": ["mock", "assertTrue", "getItemCount"]}, "focal_class": {"identifier": "AsyncListDifferDelegationAdapter", "superclass": "extends RecyclerView.Adapter", "interfaces": "", "fields": [{"original_string": "protected final AdapterDelegatesManager<List<T>> delegatesManager;", "modifier": "protected final", "type": "AdapterDelegatesManager<List<T>>", "declarator": "delegatesManager", "var_name": "delegatesManager"}, {"original_string": "protected final AsyncListDiffer<T> differ;", "modifier": "protected final", "type": "AsyncListDiffer<T>", "declarator": "differ", "var_name": "differ"}], "methods": [{"identifier": "AsyncListDifferDelegationAdapter", "parameters": "(@NonNull DiffUtil.ItemCallback<T> diffCallback)", "modifiers": "public", "return": "", "signature": " AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback)", "full_signature": "public  AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback)", "class_method_signature": "AsyncListDifferDelegationAdapter.AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback)", "testcase": false, "constructor": true}, {"identifier": "AsyncListDifferDelegationAdapter", "parameters": "(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "modifiers": "public", "return": "", "signature": " AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "full_signature": "public  AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "class_method_signature": "AsyncListDifferDelegationAdapter.AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "testcase": false, "constructor": true}, {"identifier": "AsyncListDifferDelegationAdapter", "parameters": "(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "modifiers": "public", "return": "", "signature": " AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "full_signature": "public  AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "class_method_signature": "AsyncListDifferDelegationAdapter.AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegatesManager<List<T>> delegatesManager)", "testcase": false, "constructor": true}, {"identifier": "AsyncListDifferDelegationAdapter", "parameters": "(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "modifiers": "public", "return": "", "signature": " AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "full_signature": "public  AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "class_method_signature": "AsyncListDifferDelegationAdapter.AsyncListDifferDelegationAdapter(@NonNull DiffUtil.ItemCallback<T> diffCallback,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "testcase": false, "constructor": true}, {"identifier": "AsyncListDifferDelegationAdapter", "parameters": "(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "modifiers": "public", "return": "", "signature": " AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "full_signature": "public  AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "class_method_signature": "AsyncListDifferDelegationAdapter.AsyncListDifferDelegationAdapter(@NonNull AsyncDifferConfig differConfig,\n                                            @NonNull AdapterDelegate<List<T>>... delegates)", "testcase": false, "constructor": true}, {"identifier": "onCreateViewHolder", "parameters": "(@NonNull ViewGroup parent, int viewType)", "modifiers": "@NonNull @Override public", "return": "RecyclerView.ViewHolder", "signature": "RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "full_signature": "@NonNull @Override public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "class_method_signature": "AsyncListDifferDelegationAdapter.onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "testcase": false, "constructor": false}, {"identifier": "onBindViewHolder", "parameters": "(@NonNull RecyclerView.ViewHolder holder, int position)", "modifiers": "@Override public", "return": "void", "signature": "void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position)", "full_signature": "@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position)", "class_method_signature": "AsyncListDifferDelegationAdapter.onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position)", "testcase": false, "constructor": false}, {"identifier": "onBindViewHolder", "parameters": "(@NonNull RecyclerView.ViewHolder holder, int position, @NonNull List payloads)", "modifiers": "@Override public", "return": "void", "signature": "void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position, @NonNull List payloads)", "full_signature": "@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position, @NonNull List payloads)", "class_method_signature": "AsyncListDifferDelegationAdapter.onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position, @NonNull List payloads)", "testcase": false, "constructor": false}, {"identifier": "getItemViewType", "parameters": "(int position)", "modifiers": "@Override public", "return": "int", "signature": "int getItemViewType(int position)", "full_signature": "@Override public int getItemViewType(int position)", "class_method_signature": "AsyncListDifferDelegationAdapter.getItemViewType(int position)", "testcase": false, "constructor": false}, {"identifier": "onViewRecycled", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "@Override public", "return": "void", "signature": "void onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "@Override public void onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AsyncListDifferDelegationAdapter.onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onFailedToRecycleView", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "@Override public boolean onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AsyncListDifferDelegationAdapter.onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onViewAttachedToWindow", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "@Override public", "return": "void", "signature": "void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "@Override public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AsyncListDifferDelegationAdapter.onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onViewDetachedFromWindow", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "@Override public", "return": "void", "signature": "void onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "@Override public void onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AsyncListDifferDelegationAdapter.onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getItems()", "full_signature": "public List<T> getItems()", "class_method_signature": "AsyncListDifferDelegationAdapter.getItems()", "testcase": false, "constructor": false}, {"identifier": "setItems", "parameters": "(List<T> items)", "modifiers": "public", "return": "void", "signature": "void setItems(List<T> items)", "full_signature": "public void setItems(List<T> items)", "class_method_signature": "AsyncListDifferDelegationAdapter.setItems(List<T> items)", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getItemCount()", "full_signature": "@Override public int getItemCount()", "class_method_signature": "AsyncListDifferDelegationAdapter.getItemCount()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/hannesdorfmann/adapterdelegates4/AsyncListDifferDelegationAdapter.java"}, "focal_method": {"identifier": "getItemCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getItemCount() {\n        return differ.getCurrentList().size();\n    }", "signature": "int getItemCount()", "full_signature": "@Override public int getItemCount()", "class_method_signature": "AsyncListDifferDelegationAdapter.getItemCount()", "testcase": false, "constructor": false, "invocations": ["size", "getCurrentList"]}, "repository": {"repo_id": 39889599, "url": "https://github.com/sockeqwe/AdapterDelegates", "language": "Java", "is_fork": false, "fork_count": 285, "stargazer_count": 2498, "size": 963, "license": "licensed"}}