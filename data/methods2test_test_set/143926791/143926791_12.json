{"test_class": {"identifier": "QuoteRemoteCallServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Value(\"${pivotal.quotesService.name}\")\n\tprivate String quotesURI;", "modifier": "@Value(\"${pivotal.quotesService.name}\")\n\tprivate", "type": "String", "declarator": "quotesURI", "var_name": "quotesURI"}, {"original_string": "@Autowired\n\t@InjectMocks\n\tQuoteRemoteCallService service;", "modifier": "@Autowired\n\t@InjectMocks", "type": "QuoteRemoteCallService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tRestTemplate restTemplate;", "modifier": "@Mock", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "file": "portfolio-service/src/test/java/io/pivotal/portfolio/service/QuoteRemoteCallServiceTest.java"}, "test_case": {"identifier": "doGetQuote", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n\t@Ignore\n\tpublic void doGetQuote() {\n\t\twhen(restTemplate.getForObject(\"http://\" + quotesURI + \"/quote/{symbol}\", Quote.class, ServiceTestConfiguration.SYMBOL)).thenReturn(ServiceTestConfiguration.quote());\n\t\tQuote quote = service.getQuote(ServiceTestConfiguration.SYMBOL);\n\t\tassertEquals(ServiceTestConfiguration.quote(),quote);\n\t}", "signature": "void doGetQuote()", "full_signature": "@Test @Ignore public void doGetQuote()", "class_method_signature": "QuoteRemoteCallServiceTest.doGetQuote()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getForObject", "quote", "getQuote", "assertEquals", "quote"]}, "focal_class": {"identifier": "QuoteRemoteCallService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(QuoteRemoteCallService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QuoteRemoteCallService.class)", "var_name": "logger"}, {"original_string": "@Value(\"${pivotal.quotesService.name}\")\n\tprivate String quotesService;", "modifier": "@Value(\"${pivotal.quotesService.name}\")\n\tprivate", "type": "String", "declarator": "quotesService", "var_name": "quotesService"}, {"original_string": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected String downstreamProtocol;", "modifier": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected", "type": "String", "declarator": "downstreamProtocol", "var_name": "downstreamProtocol"}, {"original_string": "@Autowired\n\t@LoadBalanced\n\tprivate RestTemplate restTemplate;", "modifier": "@Autowired\n\t@LoadBalanced\n\tprivate", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "getQuote", "parameters": "(String symbol)", "modifiers": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public", "return": "Quote", "signature": "Quote getQuote(String symbol)", "full_signature": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public Quote getQuote(String symbol)", "class_method_signature": "QuoteRemoteCallService.getQuote(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getQuoteFallback", "parameters": "(String symbol)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "Quote", "signature": "Quote getQuoteFallback(String symbol)", "full_signature": "@SuppressWarnings(\"unused\") private Quote getQuoteFallback(String symbol)", "class_method_signature": "QuoteRemoteCallService.getQuoteFallback(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getMultipleQuotes", "parameters": "(String symbols)", "modifiers": "public", "return": "List<Quote>", "signature": "List<Quote> getMultipleQuotes(String symbols)", "full_signature": "public List<Quote> getMultipleQuotes(String symbols)", "class_method_signature": "QuoteRemoteCallService.getMultipleQuotes(String symbols)", "testcase": false, "constructor": false}, {"identifier": "getMultipleQuotes", "parameters": "(Collection<String> symbols)", "modifiers": "public", "return": "List<Quote>", "signature": "List<Quote> getMultipleQuotes(Collection<String> symbols)", "full_signature": "public List<Quote> getMultipleQuotes(Collection<String> symbols)", "class_method_signature": "QuoteRemoteCallService.getMultipleQuotes(Collection<String> symbols)", "testcase": false, "constructor": false}], "file": "portfolio-service/src/main/java/io/pivotal/portfolio/service/QuoteRemoteCallService.java"}, "focal_method": {"identifier": "getQuote", "parameters": "(String symbol)", "modifiers": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public", "return": "Quote", "body": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\")\n\tpublic Quote getQuote(String symbol) {\n\t\tlogger.debug(\"Fetching quote: \" + symbol);\n\t\tQuote quote = restTemplate.getForObject(downstreamProtocol + \"://\" + quotesService + \"/quote/{symbol}\", Quote.class, symbol);\n\t\treturn quote;\n\t}", "signature": "Quote getQuote(String symbol)", "full_signature": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public Quote getQuote(String symbol)", "class_method_signature": "QuoteRemoteCallService.getQuote(String symbol)", "testcase": false, "constructor": false, "invocations": ["debug", "getForObject"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}