{"test_class": {"identifier": "TweetTokeniserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Gson gson;", "modifier": "private static", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "private ArrayList<String> allTweets;", "modifier": "private", "type": "ArrayList<String>", "declarator": "allTweets", "var_name": "allTweets"}], "file": "text/nlp/src/test/java/org/openimaj/text/nlp/TweetTokeniserTest.java"}, "test_case": {"identifier": "testSingleTweets", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSingleTweets() throws UnsupportedEncodingException, TweetTokeniserException {\n\t\tfinal String[] tweets = new String[] {\n\t\t// \"Listening to \\\"Rockin u Radio\\\" http://www.live365.com/stations/djmarkstevens on Live365.\",\n\t\t// \"Maigc.'everything' was'nt magic\",\n\t\t// \"Maigc.'everything' was'nt magic\",\n\t\t// \"Maigc.everything' 'a's magic\",\n\t\t// \"@CarideeChris ....Awwwww...lets hope rest of the day you are more lucky ;-)\",\n\t\t// \"Intelligence is only one variable in the equation... (c) Susan DePhillips\",\n\t\t// \"@Snuva You might be the Queen of Grump but the Wicked Witch of the South(tm) insists the weekend doesn't start til 2:00 pm tomorrow :-(\"\n\t\t// \"RT @iAmTheGreek: everybody in Lehigh Valley (& beyond) should support @homebase610 with voting during March for the Pepsi Refresh Project\"\n\t\t// \"aaaaaaah naaaaaao;;; hino do corinthiaans naaao DDDDD: IOEUIAOUEAIOUOAEIUEIO' (@stevens_adam live on http://twitcam.com/2bqv)\",\n\t\t// \"Maureen Green,the former TV anchor, blogs to keep up with social and workforce trends|Gloria Wright / The .. http://oohja.com/x7OhR\",\n\t\t// \"@avlsuresh I didnt know about it :-)). I would be even more happy when you will give the old one to me.\",\n\t\t// \"@_CarolineF_ *Nods, smiling* Just alright? *touches your arm, seeing flashes of your recent past and drawing my hand away quickly in shock*\"\n\t\t// \"RT @BThompsonWRITEZ: @libbyabrego honored?! Everybody knows the libster is nice with it...lol...(thankkkks a bunch;))\",\n\t\t// \"Big work event tonight means I've got to dress up, mix & mingle with the donors & bust out the non-granola hippy deodorant. Hurumph\",\n\t\t// \"here is a #hashTag\",\n\t\t// \"\\u30A2\\u30DE\\u30BE\\u30F3\\uFF0F\\u6D0B\\u66F8\\u306E\\u65B0\\u7740\\uFF08\\uFF13\\uFF09Alpine Glow \\u3010\\uFFE54,461\\u3011 http://tinyurl.com/3yslnw5\\u3000(http://tinyurl.com/24e8alm )\",\n\t\t// \"http://assfsdhgftgfvkcsjtbvtbgmktyhklgbmkgskdmvdthydtyhgfyhdfht (@andreesrr live on http://twitcam.com/2bl4v\"\n\t\t// \"RT @BThompsonWRITEZ: @libbyabrego honored?! Everybody knows the libster is nice with it...lol...(thankkkks a bunch;))\"\n\t\t\"@janecds RT _badbristal np VYBZ KARTEL - TURN & WINE&lt; WE DANCEN TO THIS LOL? http://blity.ax.lt/63HPL\" };\n\t\tfor (final String text : tweets) {\n\t\t\tfinal TweetTokeniser tokeniser = new TweetTokeniser(text);\n\t\t\tSystem.out.println(\"Tweet: \" + text);\n\t\t\tfinal String tokens = \"[\" + StringUtils.join(tokeniser.getTokens(), \",\") + \"]\";\n\t\t\tSystem.out.println(\"Tokens: \" + tokens);\n\t\t}\n\t}", "signature": "void testSingleTweets()", "full_signature": "@Test public void testSingleTweets()", "class_method_signature": "TweetTokeniserTest.testSingleTweets()", "testcase": true, "constructor": false, "invocations": ["println", "join", "getTokens", "println"]}, "focal_class": {"identifier": "TweetTokeniser", "superclass": "", "interfaces": "implements Iterable<Token>", "fields": [{"original_string": "private String text;", "modifier": "private", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "private ArrayList<Token> tokenize;", "modifier": "private", "type": "ArrayList<Token>", "declarator": "tokenize", "var_name": "tokenize"}, {"original_string": "private ArrayList<Token> protectedTokens;", "modifier": "private", "type": "ArrayList<Token>", "declarator": "protectedTokens", "var_name": "protectedTokens"}, {"original_string": "private ArrayList<Token> unprotectedTokens;", "modifier": "private", "type": "ArrayList<Token>", "declarator": "unprotectedTokens", "var_name": "unprotectedTokens"}, {"original_string": "private final static Locale[] invalidLanguages = new Locale[] { new Locale(\"zh\"), new Locale(\"ko\"), new Locale(\"jp\"), };", "modifier": "private final static", "type": "Locale[]", "declarator": "invalidLanguages = new Locale[] { new Locale(\"zh\"), new Locale(\"ko\"), new Locale(\"jp\"), }", "var_name": "invalidLanguages"}, {"original_string": "static EmoticonPatternProvider emoticons = new EmoticonPatternProvider();", "modifier": "static", "type": "EmoticonPatternProvider", "declarator": "emoticons = new EmoticonPatternProvider()", "var_name": "emoticons"}, {"original_string": "static PunctuationPatternProvider punctuation = new PunctuationPatternProvider();", "modifier": "static", "type": "PunctuationPatternProvider", "declarator": "punctuation = new PunctuationPatternProvider()", "var_name": "punctuation"}, {"original_string": "static EntityPatternProvider entity = new EntityPatternProvider();", "modifier": "static", "type": "EntityPatternProvider", "declarator": "entity = new EntityPatternProvider()", "var_name": "entity"}, {"original_string": "static TruncatedURLPatternProvider truncatedURL = new TruncatedURLPatternProvider();", "modifier": "static", "type": "TruncatedURLPatternProvider", "declarator": "truncatedURL = new TruncatedURLPatternProvider()", "var_name": "truncatedURL"}, {"original_string": "static URLPatternProvider url = new URLPatternProvider();", "modifier": "static", "type": "URLPatternProvider", "declarator": "url = new URLPatternProvider()", "var_name": "url"}, {"original_string": "static TimePatternProvider time = new TimePatternProvider();", "modifier": "static", "type": "TimePatternProvider", "declarator": "time = new TimePatternProvider()", "var_name": "time"}, {"original_string": "static ComplicatedNumberPatternProvider number = new ComplicatedNumberPatternProvider();", "modifier": "static", "type": "ComplicatedNumberPatternProvider", "declarator": "number = new ComplicatedNumberPatternProvider()", "var_name": "number"}, {"original_string": "static TwitterStuffPatternProvider twitterPart = new TwitterStuffPatternProvider();", "modifier": "static", "type": "TwitterStuffPatternProvider", "declarator": "twitterPart = new TwitterStuffPatternProvider()", "var_name": "twitterPart"}, {"original_string": "static EmailPatternProvider email = new EmailPatternProvider();", "modifier": "static", "type": "EmailPatternProvider", "declarator": "email = new EmailPatternProvider()", "var_name": "email"}, {"original_string": "static AbbreviationPatternProvider abbrev = new AbbreviationPatternProvider(entity);", "modifier": "static", "type": "AbbreviationPatternProvider", "declarator": "abbrev = new AbbreviationPatternProvider(entity)", "var_name": "abbrev"}, {"original_string": "private static final String spaceRegex = \"\\\\s+\";", "modifier": "private static final", "type": "String", "declarator": "spaceRegex = \"\\\\s+\"", "var_name": "spaceRegex"}, {"original_string": "static String Separators = RegexUtil.regex_or_match(\"--+\", \"\\u2015\");", "modifier": "static", "type": "String", "declarator": "Separators = RegexUtil.regex_or_match(\"--+\", \"\\u2015\")", "var_name": "Separators"}, {"original_string": "static String Decorations = new String(\" [\\u266b]+ \").replace(\" \", \"\");", "modifier": "static", "type": "String", "declarator": "Decorations = new String(\" [\\u266b]+ \").replace(\" \", \"\")", "var_name": "Decorations"}, {"original_string": "static EmbeddedApostrophePatternProvider embedded = new EmbeddedApostrophePatternProvider(punctuation);", "modifier": "static", "type": "EmbeddedApostrophePatternProvider", "declarator": "embedded = new EmbeddedApostrophePatternProvider(punctuation)", "var_name": "embedded"}, {"original_string": "static EmbeddedDashPatternProvider embeddedDash = new EmbeddedDashPatternProvider(punctuation);", "modifier": "static", "type": "EmbeddedDashPatternProvider", "declarator": "embeddedDash = new EmbeddedDashPatternProvider(punctuation)", "var_name": "embeddedDash"}, {"original_string": "static String[] ProtectThese = new String[] {\n\t\ttwitterPart.patternString(),\n\t\temoticons.patternString(),\n\t\ttruncatedURL.patternString(),\n\t\turl.patternString(),\n\t\temail.patternString(),\n\t\tentity.patternString(),\n\t\ttime.patternString(),\n\t\tnumber.patternString(),\n\t\t// embeddedDash.patternString(),\n\t\tembedded.patternString(),\n\t\tpunctuation.patternString(),\n\t\tabbrev.patternString(),\n\t\tSeparators,\n\t\tDecorations,\n\t};", "modifier": "static", "type": "String[]", "declarator": "ProtectThese = new String[] {\n\t\ttwitterPart.patternString(),\n\t\temoticons.patternString(),\n\t\ttruncatedURL.patternString(),\n\t\turl.patternString(),\n\t\temail.patternString(),\n\t\tentity.patternString(),\n\t\ttime.patternString(),\n\t\tnumber.patternString(),\n\t\t// embeddedDash.patternString(),\n\t\tembedded.patternString(),\n\t\tpunctuation.patternString(),\n\t\tabbrev.patternString(),\n\t\tSeparators,\n\t\tDecorations,\n\t}", "var_name": "ProtectThese"}, {"original_string": "static String oredProtect = RegexUtil.regex_or_match(ProtectThese);", "modifier": "static", "type": "String", "declarator": "oredProtect = RegexUtil.regex_or_match(ProtectThese)", "var_name": "oredProtect"}, {"original_string": "static Pattern Protect_RE = Pattern.compile(oredProtect, Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE);", "modifier": "static", "type": "Pattern", "declarator": "Protect_RE = Pattern.compile(oredProtect, Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE)", "var_name": "Protect_RE"}], "methods": [{"identifier": "isValid", "parameters": "(Locale locale)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(Locale locale)", "full_signature": "public static boolean isValid(Locale locale)", "class_method_signature": "TweetTokeniser.isValid(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(String locale)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(String locale)", "full_signature": "public static boolean isValid(String locale)", "class_method_signature": "TweetTokeniser.isValid(String locale)", "testcase": false, "constructor": false}, {"identifier": "TweetTokeniser", "parameters": "(String s)", "modifiers": "public", "return": "", "signature": " TweetTokeniser(String s)", "full_signature": "public  TweetTokeniser(String s)", "class_method_signature": "TweetTokeniser.TweetTokeniser(String s)", "testcase": false, "constructor": true}, {"identifier": "simple_tokenize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void simple_tokenize()", "full_signature": "private void simple_tokenize()", "class_method_signature": "TweetTokeniser.simple_tokenize()", "testcase": false, "constructor": false}, {"identifier": "post_process", "parameters": "(ArrayList<Token> res)", "modifiers": "private", "return": "ArrayList<Token>", "signature": "ArrayList<Token> post_process(ArrayList<Token> res)", "full_signature": "private ArrayList<Token> post_process(ArrayList<Token> res)", "class_method_signature": "TweetTokeniser.post_process(ArrayList<Token> res)", "testcase": false, "constructor": false}, {"identifier": "unprotected_tokenize", "parameters": "(String goodString)", "modifiers": "private", "return": "List<Token>", "signature": "List<Token> unprotected_tokenize(String goodString)", "full_signature": "private List<Token> unprotected_tokenize(String goodString)", "class_method_signature": "TweetTokeniser.unprotected_tokenize(String goodString)", "testcase": false, "constructor": false}, {"identifier": "edge_punct_munge", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void edge_punct_munge()", "full_signature": "private void edge_punct_munge()", "class_method_signature": "TweetTokeniser.edge_punct_munge()", "testcase": false, "constructor": false}, {"identifier": "squeeze_whitespace", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void squeeze_whitespace()", "full_signature": "private void squeeze_whitespace()", "class_method_signature": "TweetTokeniser.squeeze_whitespace()", "testcase": false, "constructor": false}, {"identifier": "fixEncoding", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixEncoding()", "full_signature": "private void fixEncoding()", "class_method_signature": "TweetTokeniser.fixEncoding()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Token>", "signature": "Iterator<Token> iterator()", "full_signature": "@Override public Iterator<Token> iterator()", "class_method_signature": "TweetTokeniser.iterator()", "testcase": false, "constructor": false}, {"identifier": "getTokens", "parameters": "()", "modifiers": "public", "return": "List<Token>", "signature": "List<Token> getTokens()", "full_signature": "public List<Token> getTokens()", "class_method_signature": "TweetTokeniser.getTokens()", "testcase": false, "constructor": false}, {"identifier": "getStringTokens", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getStringTokens()", "full_signature": "public List<String> getStringTokens()", "class_method_signature": "TweetTokeniser.getStringTokens()", "testcase": false, "constructor": false}, {"identifier": "getProtectedStringTokens", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getProtectedStringTokens()", "full_signature": "public List<String> getProtectedStringTokens()", "class_method_signature": "TweetTokeniser.getProtectedStringTokens()", "testcase": false, "constructor": false}, {"identifier": "getUnprotectedStringTokens", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getUnprotectedStringTokens()", "full_signature": "public List<String> getUnprotectedStringTokens()", "class_method_signature": "TweetTokeniser.getUnprotectedStringTokens()", "testcase": false, "constructor": false}], "file": "text/nlp/src/main/java/org/openimaj/text/nlp/TweetTokeniser.java"}, "focal_method": {"identifier": "getTokens", "parameters": "()", "modifiers": "public", "return": "List<Token>", "body": "public List<Token> getTokens() {\n\t\treturn this.tokenize;\n\t}", "signature": "List<Token> getTokens()", "full_signature": "public List<Token> getTokens()", "class_method_signature": "TweetTokeniser.getTokens()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4114800, "url": "https://github.com/sinjax/trendminer-java", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 10, "size": 209307, "license": "licensed"}}