{"test_class": {"identifier": "GuidedDTDRLPersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistenceTest.java"}, "test_case": {"identifier": "testLHS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLHS() {\n        GuidedDTDRLPersistence p = new GuidedDTDRLPersistence();\n        String[] row = new String[]{\"1\", \"desc\", \"a\", \"mike\", \"33 + 1\", \"age > 6\", \"stilton\"};\n        String[][] data = new String[1][];\n        data[0] = row;\n\n        List<BaseColumn> allColumns = new ArrayList<BaseColumn>();\n        List<CompositeColumn<? extends BaseColumn>> allPatterns = new ArrayList<CompositeColumn<? extends BaseColumn>>();\n        allColumns.add(new RowNumberCol52());\n        allColumns.add(new DescriptionCol52());\n        allColumns.add(new MetadataCol52());\n\n        Pattern52 p1 = new Pattern52();\n        p1.setBoundName(\"p1\");\n        p1.setFactType(\"Person\");\n        allPatterns.add(p1);\n\n        ConditionCol52 col = new ConditionCol52();\n        col.setFactField(\"name\");\n        col.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);\n        col.setOperator(\"==\");\n        p1.getChildColumns().add(col);\n        allColumns.add(col);\n\n        ConditionCol52 col2 = new ConditionCol52();\n        col2.setFactField(\"age\");\n        col2.setConstraintValueType(BaseSingleFieldConstraint.TYPE_RET_VALUE);\n        col2.setOperator(\"<\");\n        p1.getChildColumns().add(col2);\n        allColumns.add(col2);\n\n        ConditionCol52 col3 = new ConditionCol52();\n        col3.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n        p1.getChildColumns().add(col3);\n        allColumns.add(col3);\n\n        Pattern52 p2 = new Pattern52();\n        p2.setBoundName(\"c\");\n        p2.setFactType(\"Cheese\");\n        allPatterns.add(p2);\n\n        ConditionCol52 col4 = new ConditionCol52();\n        col4.setFactField(\"type\");\n        col4.setOperator(\"==\");\n        col4.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);\n        p2.getChildColumns().add(col4);\n        allColumns.add(col4);\n\n        RuleModel rm = new RuleModel();\n\n        List<DTCellValue52> rowData = DataUtilities.makeDataRowList(row);\n        TemplateDataProvider rowDataProvider = new GuidedDTTemplateDataProvider(allColumns,\n                                                                                rowData);\n\n        p.doConditions(allColumns,\n                       allPatterns,\n                       rowDataProvider,\n                       rowData,\n                       DataUtilities.makeDataLists(data),\n                       rm);\n        assertEquals(2,\n                     rm.lhs.length);\n\n        assertEquals(\"Person\",\n                     ((FactPattern) rm.lhs[0]).getFactType());\n        assertEquals(\"p1\",\n                     ((FactPattern) rm.lhs[0]).getBoundName());\n\n        assertEquals(\"Cheese\",\n                     ((FactPattern) rm.lhs[1]).getFactType());\n        assertEquals(\"c\",\n                     ((FactPattern) rm.lhs[1]).getBoundName());\n\n        // examine the first pattern\n        FactPattern person = (FactPattern) rm.lhs[0];\n        assertEquals(3,\n                     person.getConstraintList().getConstraints().length);\n        SingleFieldConstraint cons = (SingleFieldConstraint) person.getConstraint(0);\n        assertEquals(BaseSingleFieldConstraint.TYPE_LITERAL,\n                     cons.getConstraintValueType());\n        assertEquals(\"name\",\n                     cons.getFieldName());\n        assertEquals(\"==\",\n                     cons.getOperator());\n        assertEquals(\"mike\",\n                     cons.getValue());\n\n        cons = (SingleFieldConstraint) person.getConstraint(1);\n        assertEquals(BaseSingleFieldConstraint.TYPE_RET_VALUE,\n                     cons.getConstraintValueType());\n        assertEquals(\"age\",\n                     cons.getFieldName());\n        assertEquals(\"<\",\n                     cons.getOperator());\n        assertEquals(\"33 + 1\",\n                     cons.getValue());\n\n        cons = (SingleFieldConstraint) person.getConstraint(2);\n        assertEquals(BaseSingleFieldConstraint.TYPE_PREDICATE,\n                     cons.getConstraintValueType());\n        assertEquals(\"age > 6\",\n                     cons.getValue());\n\n        // examine the second pattern\n        FactPattern cheese = (FactPattern) rm.lhs[1];\n        assertEquals(1,\n                     cheese.getConstraintList().getConstraints().length);\n        cons = (SingleFieldConstraint) cheese.getConstraint(0);\n        assertEquals(\"type\",\n                     cons.getFieldName());\n        assertEquals(\"==\",\n                     cons.getOperator());\n        assertEquals(\"stilton\",\n                     cons.getValue());\n        assertEquals(BaseSingleFieldConstraint.TYPE_LITERAL,\n                     cons.getConstraintValueType());\n    }", "signature": "void testLHS()", "full_signature": "@Test public void testLHS()", "class_method_signature": "GuidedDTDRLPersistenceTest.testLHS()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "setBoundName", "setFactType", "add", "setFactField", "setConstraintValueType", "setOperator", "add", "getChildColumns", "add", "setFactField", "setConstraintValueType", "setOperator", "add", "getChildColumns", "add", "setConstraintValueType", "add", "getChildColumns", "add", "setBoundName", "setFactType", "add", "setFactField", "setOperator", "setConstraintValueType", "add", "getChildColumns", "add", "makeDataRowList", "doConditions", "makeDataLists", "assertEquals", "assertEquals", "getFactType", "assertEquals", "getBoundName", "assertEquals", "getFactType", "assertEquals", "getBoundName", "assertEquals", "getConstraints", "getConstraintList", "getConstraint", "assertEquals", "getConstraintValueType", "assertEquals", "getFieldName", "assertEquals", "getOperator", "assertEquals", "getValue", "getConstraint", "assertEquals", "getConstraintValueType", "assertEquals", "getFieldName", "assertEquals", "getOperator", "assertEquals", "getValue", "getConstraint", "assertEquals", "getConstraintValueType", "assertEquals", "getValue", "assertEquals", "getConstraints", "getConstraintList", "getConstraint", "assertEquals", "getFieldName", "assertEquals", "getOperator", "assertEquals", "getValue", "assertEquals", "getConstraintValueType"]}, "focal_class": {"identifier": "GuidedDTDRLPersistence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "GuidedDTDRLPersistence", "signature": "GuidedDTDRLPersistence getInstance()", "full_signature": "public static GuidedDTDRLPersistence getInstance()", "class_method_signature": "GuidedDTDRLPersistence.getInstance()", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(final GuidedDecisionTable52 originalDTable)", "modifiers": "public", "return": "String", "signature": "String marshal(final GuidedDecisionTable52 originalDTable)", "full_signature": "public String marshal(final GuidedDecisionTable52 originalDTable)", "class_method_signature": "GuidedDTDRLPersistence.marshal(final GuidedDecisionTable52 originalDTable)", "testcase": false, "constructor": false}, {"identifier": "doActions", "parameters": "(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLActionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLActionColumn column)", "full_signature": "private boolean hasVariables(BRLActionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLActionColumn column)", "testcase": false, "constructor": false}, {"identifier": "addAction", "parameters": "(IAction action,\n                           List<LabelledAction> actions)", "modifiers": "private", "return": "void", "signature": "void addAction(IAction action,\n                           List<LabelledAction> actions)", "full_signature": "private void addAction(IAction action,\n                           List<LabelledAction> actions)", "class_method_signature": "GuidedDTDRLPersistence.addAction(IAction action,\n                           List<LabelledAction> actions)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "testcase": false, "constructor": false}, {"identifier": "doConditions", "parameters": "(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "full_signature": " void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLConditionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLConditionColumn column)", "full_signature": "private boolean hasVariables(BRLConditionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLConditionColumn column)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "makeInList", "parameters": "(final String cell)", "modifiers": "", "return": "String", "signature": "String makeInList(final String cell)", "full_signature": " String makeInList(final String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeInList(final String cell)", "testcase": false, "constructor": false}, {"identifier": "no", "parameters": "(String operator)", "modifiers": "private", "return": "boolean", "signature": "boolean no(String operator)", "full_signature": "private boolean no(String operator)", "class_method_signature": "GuidedDTDRLPersistence.no(String operator)", "testcase": false, "constructor": false}, {"identifier": "findByFactPattern", "parameters": "(List<IPattern> patterns,\n                                       Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "full_signature": "private IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByFactPattern", "parameters": "(final List<IPattern> patterns,\n                                         final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "full_signature": "private IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByNegatedFactPattern", "parameters": "(final List<IPattern> patterns,\n                                                final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "full_signature": "private IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "checkNegatedFactPattern", "parameters": "(final FactPattern fp,\n                                                       final String factType)", "modifiers": "private", "return": "Optional<IPattern>", "signature": "Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "full_signature": "private Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "class_method_signature": "GuidedDTDRLPersistence.checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "testcase": false, "constructor": false}, {"identifier": "doAttribs", "parameters": "(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doMetadata", "parameters": "(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "full_signature": " void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "modifiers": "", "return": "String", "signature": "String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "full_signature": " String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "class_method_signature": "GuidedDTDRLPersistence.getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "testcase": false, "constructor": false}, {"identifier": "hasStringValue", "parameters": "(final DTCellValue52 dtCellValue52)", "modifiers": "private", "return": "boolean", "signature": "boolean hasStringValue(final DTCellValue52 dtCellValue52)", "full_signature": "private boolean hasStringValue(final DTCellValue52 dtCellValue52)", "class_method_signature": "GuidedDTDRLPersistence.hasStringValue(final DTCellValue52 dtCellValue52)", "testcase": false, "constructor": false}, {"identifier": "validCell", "parameters": "(String c,\n                      DataType.DataTypes dataType)", "modifiers": "", "return": "boolean", "signature": "boolean validCell(String c,\n                      DataType.DataTypes dataType)", "full_signature": " boolean validCell(String c,\n                      DataType.DataTypes dataType)", "class_method_signature": "GuidedDTDRLPersistence.validCell(String c,\n                      DataType.DataTypes dataType)", "testcase": false, "constructor": false}, {"identifier": "validateAttributeCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateAttributeCell(String c)", "full_signature": " boolean validateAttributeCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateAttributeCell(String c)", "testcase": false, "constructor": false}, {"identifier": "validateMetadataCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateMetadataCell(String c)", "full_signature": " boolean validateMetadataCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateMetadataCell(String c)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      String cell)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java"}, "focal_method": {"identifier": "doConditions", "parameters": "(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "modifiers": "", "return": "void", "body": "void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm) {\n\n        List<IPattern> patterns = new ArrayList<IPattern>();\n\n        for (CompositeColumn<?> cc : conditionPatterns) {\n\n            if (cc instanceof LimitedEntryBRLConditionColumn) {\n                doCondition(allColumns,\n                            (LimitedEntryBRLConditionColumn) cc,\n                            patterns,\n                            rowDataProvider,\n                            row,\n                            rm);\n            } else if (cc instanceof BRLConditionColumn) {\n                doCondition(allColumns,\n                            (BRLConditionColumn) cc,\n                            patterns,\n                            rowDataProvider,\n                            row,\n                            rm);\n            } else if (cc instanceof Pattern52) {\n                doCondition(allColumns,\n                            (Pattern52) cc,\n                            patterns,\n                            row,\n                            data,\n                            rm);\n            }\n        }\n        rm.lhs = patterns.toArray(new IPattern[patterns.size()]);\n    }", "signature": "void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "full_signature": " void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "testcase": false, "constructor": false, "invocations": ["doCondition", "doCondition", "doCondition", "toArray", "size"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}