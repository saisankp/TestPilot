{"test_class": {"identifier": "StoragePolicyRestControllerTest", "superclass": "extends AbstractRestTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private StoragePolicyRestController storagePolicyRestController;", "modifier": "@InjectMocks\n    private", "type": "StoragePolicyRestController", "declarator": "storagePolicyRestController", "var_name": "storagePolicyRestController"}, {"original_string": "@Mock\n    private StoragePolicyService storagePolicyService;", "modifier": "@Mock\n    private", "type": "StoragePolicyService", "declarator": "storagePolicyService", "var_name": "storagePolicyService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/StoragePolicyRestControllerTest.java"}, "test_case": {"identifier": "testGetStoragePolicy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStoragePolicy()\n    {\n        StoragePolicyKey storagePolicyKey = new StoragePolicyKey(STORAGE_POLICY_NAMESPACE_CD, STORAGE_POLICY_NAME);\n\n        StoragePolicy storagePolicy = new StoragePolicy(ID, storagePolicyKey, new StoragePolicyRule(STORAGE_POLICY_RULE_TYPE, STORAGE_POLICY_RULE_VALUE),\n            new StoragePolicyFilter(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, STORAGE_NAME),\n            new StoragePolicyTransition(STORAGE_POLICY_TRANSITION_TYPE), StoragePolicyStatusEntity.ENABLED);\n\n        when(storagePolicyService.getStoragePolicy(storagePolicyKey)).thenReturn(storagePolicy);\n\n        StoragePolicy resultStoragePolicy =\n            storagePolicyRestController.getStoragePolicy(storagePolicyKey.getNamespace(), storagePolicyKey.getStoragePolicyName());\n\n        // Verify the external calls.\n        verify(storagePolicyService).getStoragePolicy(storagePolicyKey);\n        verifyNoMoreInteractions(storagePolicyService);\n        // Validate the returned object.\n        assertEquals(storagePolicy, resultStoragePolicy);\n    }", "signature": "void testGetStoragePolicy()", "full_signature": "@Test public void testGetStoragePolicy()", "class_method_signature": "StoragePolicyRestControllerTest.testGetStoragePolicy()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getStoragePolicy", "getStoragePolicy", "getNamespace", "getStoragePolicyName", "getStoragePolicy", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "StoragePolicyRestController", "superclass": "extends HerdBaseController", "interfaces": "", "fields": [{"original_string": "public static final String STORAGE_POLICIES_URI_PREFIX = \"/storagePolicies\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_POLICIES_URI_PREFIX = \"/storagePolicies\"", "var_name": "STORAGE_POLICIES_URI_PREFIX"}, {"original_string": "@Autowired\n    private StoragePolicyService storagePolicyService;", "modifier": "@Autowired\n    private", "type": "StoragePolicyService", "declarator": "storagePolicyService", "var_name": "storagePolicyService"}], "methods": [{"identifier": "createStoragePolicy", "parameters": "(@RequestBody StoragePolicyCreateRequest request)", "modifiers": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_POST) public", "return": "StoragePolicy", "signature": "StoragePolicy createStoragePolicy(@RequestBody StoragePolicyCreateRequest request)", "full_signature": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_POST) public StoragePolicy createStoragePolicy(@RequestBody StoragePolicyCreateRequest request)", "class_method_signature": "StoragePolicyRestController.createStoragePolicy(@RequestBody StoragePolicyCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateStoragePolicy", "parameters": "(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName,\n        @RequestBody StoragePolicyUpdateRequest request)", "modifiers": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_PUT) public", "return": "StoragePolicy", "signature": "StoragePolicy updateStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName,\n        @RequestBody StoragePolicyUpdateRequest request)", "full_signature": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_PUT) public StoragePolicy updateStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName,\n        @RequestBody StoragePolicyUpdateRequest request)", "class_method_signature": "StoragePolicyRestController.updateStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName,\n        @RequestBody StoragePolicyUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicy", "parameters": "(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "modifiers": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_GET) public", "return": "StoragePolicy", "signature": "StoragePolicy getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "full_signature": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_GET) public StoragePolicy getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "class_method_signature": "StoragePolicyRestController.getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/StoragePolicyRestController.java"}, "focal_method": {"identifier": "getStoragePolicy", "parameters": "(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "modifiers": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_GET) public", "return": "StoragePolicy", "body": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\",\n        method = RequestMethod.GET)\n    @Secured(SecurityFunctions.FN_STORAGE_POLICIES_GET)\n    public StoragePolicy getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)\n    {\n        return storagePolicyService.getStoragePolicy(new StoragePolicyKey(namespace, storagePolicyName));\n    }", "signature": "StoragePolicy getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "full_signature": "@RequestMapping(value = STORAGE_POLICIES_URI_PREFIX + \"/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_GET) public StoragePolicy getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "class_method_signature": "StoragePolicyRestController.getStoragePolicy(@PathVariable(\"namespace\") String namespace, @PathVariable(\"storagePolicyName\") String storagePolicyName)", "testcase": false, "constructor": false, "invocations": ["getStoragePolicy"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}