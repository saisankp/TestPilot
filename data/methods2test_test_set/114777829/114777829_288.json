{"test_class": {"identifier": "EmbeddedPiranhaTest", "superclass": "", "interfaces": "", "fields": [], "file": "embedded/src/test/java/cloud/piranha/embedded/EmbeddedPiranhaTest.java"}, "test_case": {"identifier": "testService", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testService() throws Exception {\n        EmbeddedRequest request = new EmbeddedRequest();\n        EmbeddedResponse response = new EmbeddedResponse();\n        EmbeddedPiranha piranha = new EmbeddedPiranha();\n        piranha.initialize();\n        piranha.start();\n        piranha.service(request, response);\n        piranha.stop();\n    }", "signature": "void testService()", "full_signature": "@Test void testService()", "class_method_signature": "EmbeddedPiranhaTest.testService()", "testcase": true, "constructor": false, "invocations": ["initialize", "start", "service", "stop"]}, "focal_class": {"identifier": "EmbeddedPiranha", "superclass": "", "interfaces": "implements Piranha", "fields": [{"original_string": "private final DefaultWebApplication webApplication;", "modifier": "private final", "type": "DefaultWebApplication", "declarator": "webApplication", "var_name": "webApplication"}], "methods": [{"identifier": "EmbeddedPiranha", "parameters": "()", "modifiers": "public", "return": "", "signature": " EmbeddedPiranha()", "full_signature": "public  EmbeddedPiranha()", "class_method_signature": "EmbeddedPiranha.EmbeddedPiranha()", "testcase": false, "constructor": true}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "EmbeddedPiranha", "signature": "EmbeddedPiranha destroy()", "full_signature": "public EmbeddedPiranha destroy()", "class_method_signature": "EmbeddedPiranha.destroy()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "EmbeddedPiranha.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getWebApplication", "parameters": "()", "modifiers": "public", "return": "WebApplication", "signature": "WebApplication getWebApplication()", "full_signature": "public WebApplication getWebApplication()", "class_method_signature": "EmbeddedPiranha.getWebApplication()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "EmbeddedPiranha", "signature": "EmbeddedPiranha initialize()", "full_signature": "public EmbeddedPiranha initialize()", "class_method_signature": "EmbeddedPiranha.initialize()", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "public", "return": "void", "signature": "void service(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "EmbeddedPiranha.service(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "EmbeddedPiranha", "signature": "EmbeddedPiranha start()", "full_signature": "public EmbeddedPiranha start()", "class_method_signature": "EmbeddedPiranha.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "EmbeddedPiranha", "signature": "EmbeddedPiranha stop()", "full_signature": "public EmbeddedPiranha stop()", "class_method_signature": "EmbeddedPiranha.stop()", "testcase": false, "constructor": false}], "file": "embedded/src/main/java/cloud/piranha/embedded/EmbeddedPiranha.java"}, "focal_method": {"identifier": "service", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "public", "return": "void", "body": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n            throws IOException, ServletException {\n        if (servletRequest.getServletContext() == null\n                && servletRequest instanceof EmbeddedRequest) {\n            EmbeddedRequest embeddedRequest = (EmbeddedRequest) servletRequest;\n            embeddedRequest.setWebApplication(webApplication);\n        }\n        if (servletResponse instanceof EmbeddedResponse) {\n            EmbeddedResponse embeddedResponse = (EmbeddedResponse) servletResponse;\n            embeddedResponse.setWebApplication(webApplication);\n        }\n        webApplication.linkRequestAndResponse(servletRequest, servletResponse);\n        webApplication.service(servletRequest, servletResponse);\n        webApplication.unlinkRequestAndResponse(servletRequest, servletResponse);\n    }", "signature": "void service(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "EmbeddedPiranha.service(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false, "invocations": ["getServletContext", "setWebApplication", "setWebApplication", "linkRequestAndResponse", "service", "unlinkRequestAndResponse"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}