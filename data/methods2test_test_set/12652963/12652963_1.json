{"test_class": {"identifier": "TestApacheHttpdLogfileInputFormat", "superclass": "", "interfaces": "", "fields": [{"original_string": "String logformat = \"%h %l %u %t \\\"%r\\\" %>s %O \\\"%{%D %F %R %T %r %a %A %b %B %C %d %G %h %H %I %j %k %l %m %M %p %S %u %Y %z}t\\\" \\\"%{User-Agent}i\\\"\";", "modifier": "", "type": "String", "declarator": "logformat = \"%h %l %u %t \\\"%r\\\" %>s %O \\\"%{%D %F %R %T %r %a %A %b %B %C %d %G %h %H %I %j %k %l %m %M %p %S %u %Y %z}t\\\" \\\"%{User-Agent}i\\\"\"", "var_name": "logformat"}], "file": "httpdlog/httpdlog-inputformat/src/test/java/nl/basjes/hadoop/input/TestApacheHttpdLogfileInputFormat.java"}, "test_case": {"identifier": "checkAllOutputTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkAllOutputTypes() throws IOException, InterruptedException {\n        Configuration conf = new Configuration(false);\n        conf.set(\"fs.default.name\", \"file:///\");\n\n        // A ',' separated list of fields\n        List<String> fields = Arrays.asList(\n                \"ANY:any\",\n                \"ANY:any\",\n                \"ANY:any\",\n                \"STRING:string\",\n                \"STRING:string\",\n                \"STRING:string\",\n                \"INT:int\",\n                \"INT:int\",\n                \"INT:int\",\n                \"LONG:long\",\n                \"LONG:long\",\n                \"LONG:long\",\n                \"FLOAT:float\",\n                \"FLOAT:float\",\n                \"FLOAT:float\",\n                \"DOUBLE:double\",\n                \"DOUBLE:double\",\n                \"DOUBLE:double\");\n\n        File testFile = new File(\"src/test/resources/access.log\");\n        Path path = new Path(testFile.getAbsoluteFile().toURI());\n        FileSplit split = new FileSplit(path, 0, testFile.length(), null);\n\n        Map<String, Set<String>> typeRemappings = new HashMap<>();\n        List<Dissector> dissectors = new ArrayList<>();\n        dissectors.add(new NormalValuesDissector(HttpdLogFormatDissector.INPUT_TYPE));\n\n        InputFormat inputFormat = new ApacheHttpdLogfileInputFormat(\n            logformat,\n            fields,\n            typeRemappings,\n            dissectors);\n        TaskAttemptContext context = new TaskAttemptContextImpl(conf, new TaskAttemptID());\n        RecordReader reader = inputFormat.createRecordReader(split, context);\n\n        reader.initialize(split, context);\n\n        assertTrue(reader.nextKeyValue());\n\n        Object value = reader.getCurrentValue();\n        if (value instanceof ParsedRecord) {\n            ParsedRecord record = (ParsedRecord)value;\n            assertEquals(\"42\",          record.getString(\"ANY:any\"));             // any_string\n            assertEquals(42L,           record.getLong(\"ANY:any\").longValue());   // any_long\n            assertEquals(42D,           record.getDouble(\"ANY:any\"), 0.1D);       // any_double\n            assertEquals(\"FortyTwo\",    record.getString(\"STRING:string\"));       // string_string\n            assertEquals(null,          record.getLong(\"STRING:string\"));         // string_long\n            assertEquals(null,          record.getDouble(\"STRING:string\"));       // string_double\n            assertEquals(\"42\",          record.getString(\"INT:int\"));             // int_string\n            assertEquals(42L,           record.getLong(\"INT:int\").longValue());   // int_long\n            assertEquals(null,          record.getDouble(\"INT:int\"));             // int_double\n            assertEquals(\"42\",          record.getString(\"LONG:long\"));           // long_string\n            assertEquals(42L,           record.getLong(\"LONG:long\").longValue()); // long_long\n            assertEquals(null,          record.getDouble(\"LONG:long\"));           // long_double\n            assertEquals(\"42.0\",        record.getString(\"FLOAT:float\"));         // float_string\n            assertEquals(null,          record.getLong(\"FLOAT:float\"));           // float_long\n            assertEquals(42D,           record.getDouble(\"FLOAT:float\"), 0.1D);   // float_double\n            assertEquals(\"42.0\",        record.getString(\"DOUBLE:double\"));       // double_string\n            assertEquals(null,          record.getLong(\"DOUBLE:double\"));         // double_long\n            assertEquals(42D,           record.getDouble(\"DOUBLE:double\"), 0.1D);  // double_double\n        } else {\n            fail(\"Wrong return class type\");\n        }\n    }", "signature": "void checkAllOutputTypes()", "full_signature": "@Test public void checkAllOutputTypes()", "class_method_signature": "TestApacheHttpdLogfileInputFormat.checkAllOutputTypes()", "testcase": true, "constructor": false, "invocations": ["set", "asList", "toURI", "getAbsoluteFile", "length", "add", "createRecordReader", "initialize", "assertTrue", "nextKeyValue", "getCurrentValue", "assertEquals", "getString", "assertEquals", "longValue", "getLong", "assertEquals", "getDouble", "assertEquals", "getString", "assertEquals", "getLong", "assertEquals", "getDouble", "assertEquals", "getString", "assertEquals", "longValue", "getLong", "assertEquals", "getDouble", "assertEquals", "getString", "assertEquals", "longValue", "getLong", "assertEquals", "getDouble", "assertEquals", "getString", "assertEquals", "getLong", "assertEquals", "getDouble", "assertEquals", "getString", "assertEquals", "getLong", "assertEquals", "getDouble", "fail"]}, "focal_class": {"identifier": "ApacheHttpdLogfileInputFormat", "superclass": "extends\n        FileInputFormat<LongWritable, ParsedRecord>", "interfaces": "", "fields": [{"original_string": "private String logFormat = null;", "modifier": "private", "type": "String", "declarator": "logFormat = null", "var_name": "logFormat"}, {"original_string": "private final Set<String> requestedFields = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "requestedFields = new HashSet<>()", "var_name": "requestedFields"}, {"original_string": "private Map<String, Set<String>> typeRemappings;", "modifier": "private", "type": "Map<String, Set<String>>", "declarator": "typeRemappings", "var_name": "typeRemappings"}, {"original_string": "private List<Dissector> additionalDissectors;", "modifier": "private", "type": "List<Dissector>", "declarator": "additionalDissectors", "var_name": "additionalDissectors"}, {"original_string": "private ApacheHttpdLogfileRecordReader theRecordReader;", "modifier": "private", "type": "ApacheHttpdLogfileRecordReader", "declarator": "theRecordReader", "var_name": "theRecordReader"}], "methods": [{"identifier": "listPossibleFields", "parameters": "(String logformat)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listPossibleFields(String logformat)", "full_signature": "public List<String> listPossibleFields(String logformat)", "class_method_signature": "ApacheHttpdLogfileInputFormat.listPossibleFields(String logformat)", "testcase": false, "constructor": false}, {"identifier": "listPossibleFields", "parameters": "(String logformat, Map<String, Set<String>> typeRemappings, List<Dissector> additionalDissectors)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> listPossibleFields(String logformat, Map<String, Set<String>> typeRemappings, List<Dissector> additionalDissectors)", "full_signature": "public static List<String> listPossibleFields(String logformat, Map<String, Set<String>> typeRemappings, List<Dissector> additionalDissectors)", "class_method_signature": "ApacheHttpdLogfileInputFormat.listPossibleFields(String logformat, Map<String, Set<String>> typeRemappings, List<Dissector> additionalDissectors)", "testcase": false, "constructor": false}, {"identifier": "getLogFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLogFormat()", "full_signature": "public String getLogFormat()", "class_method_signature": "ApacheHttpdLogfileInputFormat.getLogFormat()", "testcase": false, "constructor": false}, {"identifier": "getRequestedFields", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getRequestedFields()", "full_signature": "public Set<String> getRequestedFields()", "class_method_signature": "ApacheHttpdLogfileInputFormat.getRequestedFields()", "testcase": false, "constructor": false}, {"identifier": "getTypeRemappings", "parameters": "()", "modifiers": "public", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getTypeRemappings()", "full_signature": "public Map<String, Set<String>> getTypeRemappings()", "class_method_signature": "ApacheHttpdLogfileInputFormat.getTypeRemappings()", "testcase": false, "constructor": false}, {"identifier": "getAdditionalDissectors", "parameters": "()", "modifiers": "public", "return": "List<Dissector>", "signature": "List<Dissector> getAdditionalDissectors()", "full_signature": "public List<Dissector> getAdditionalDissectors()", "class_method_signature": "ApacheHttpdLogfileInputFormat.getAdditionalDissectors()", "testcase": false, "constructor": false}, {"identifier": "ApacheHttpdLogfileInputFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApacheHttpdLogfileInputFormat()", "full_signature": "public  ApacheHttpdLogfileInputFormat()", "class_method_signature": "ApacheHttpdLogfileInputFormat.ApacheHttpdLogfileInputFormat()", "testcase": false, "constructor": true}, {"identifier": "ApacheHttpdLogfileInputFormat", "parameters": "(\n            String logformat,\n            Collection<String> requestedFields,\n            Map<String, Set<String>> typeRemappings,\n            List<Dissector> additionalDissectors)", "modifiers": "public", "return": "", "signature": " ApacheHttpdLogfileInputFormat(\n            String logformat,\n            Collection<String> requestedFields,\n            Map<String, Set<String>> typeRemappings,\n            List<Dissector> additionalDissectors)", "full_signature": "public  ApacheHttpdLogfileInputFormat(\n            String logformat,\n            Collection<String> requestedFields,\n            Map<String, Set<String>> typeRemappings,\n            List<Dissector> additionalDissectors)", "class_method_signature": "ApacheHttpdLogfileInputFormat.ApacheHttpdLogfileInputFormat(\n            String logformat,\n            Collection<String> requestedFields,\n            Map<String, Set<String>> typeRemappings,\n            List<Dissector> additionalDissectors)", "testcase": false, "constructor": true}, {"identifier": "createRecordReader", "parameters": "()", "modifiers": "public", "return": "ApacheHttpdLogfileRecordReader", "signature": "ApacheHttpdLogfileRecordReader createRecordReader()", "full_signature": "public ApacheHttpdLogfileRecordReader createRecordReader()", "class_method_signature": "ApacheHttpdLogfileInputFormat.createRecordReader()", "testcase": false, "constructor": false}, {"identifier": "getRecordReader", "parameters": "()", "modifiers": "public", "return": "ApacheHttpdLogfileRecordReader", "signature": "ApacheHttpdLogfileRecordReader getRecordReader()", "full_signature": "public ApacheHttpdLogfileRecordReader getRecordReader()", "class_method_signature": "ApacheHttpdLogfileInputFormat.getRecordReader()", "testcase": false, "constructor": false}, {"identifier": "createRecordReader", "parameters": "(\n            final InputSplit split, final TaskAttemptContext context)", "modifiers": "@Override public", "return": "RecordReader<LongWritable, ParsedRecord>", "signature": "RecordReader<LongWritable, ParsedRecord> createRecordReader(\n            final InputSplit split, final TaskAttemptContext context)", "full_signature": "@Override public RecordReader<LongWritable, ParsedRecord> createRecordReader(\n            final InputSplit split, final TaskAttemptContext context)", "class_method_signature": "ApacheHttpdLogfileInputFormat.createRecordReader(\n            final InputSplit split, final TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "isSplitable", "parameters": "(JobContext context, Path file)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isSplitable(JobContext context, Path file)", "full_signature": "@Override protected boolean isSplitable(JobContext context, Path file)", "class_method_signature": "ApacheHttpdLogfileInputFormat.isSplitable(JobContext context, Path file)", "testcase": false, "constructor": false}, {"identifier": "setTypeRemappings", "parameters": "(Map<String, Set<String>> newTypeRemappings)", "modifiers": "public", "return": "void", "signature": "void setTypeRemappings(Map<String, Set<String>> newTypeRemappings)", "full_signature": "public void setTypeRemappings(Map<String, Set<String>> newTypeRemappings)", "class_method_signature": "ApacheHttpdLogfileInputFormat.setTypeRemappings(Map<String, Set<String>> newTypeRemappings)", "testcase": false, "constructor": false}], "file": "httpdlog/httpdlog-inputformat/src/main/java/nl/basjes/hadoop/input/ApacheHttpdLogfileInputFormat.java"}, "focal_method": {"identifier": "createRecordReader", "parameters": "()", "modifiers": "public", "return": "ApacheHttpdLogfileRecordReader", "body": "public ApacheHttpdLogfileRecordReader createRecordReader() {\n        try {\n            return new ApacheHttpdLogfileRecordReader(getLogFormat(), getRequestedFields(), getTypeRemappings(), getAdditionalDissectors());\n        } catch (IOException e) {\n            return null;\n        }\n    }", "signature": "ApacheHttpdLogfileRecordReader createRecordReader()", "full_signature": "public ApacheHttpdLogfileRecordReader createRecordReader()", "class_method_signature": "ApacheHttpdLogfileInputFormat.createRecordReader()", "testcase": false, "constructor": false, "invocations": ["getLogFormat", "getRequestedFields", "getTypeRemappings", "getAdditionalDissectors"]}, "repository": {"repo_id": 12652963, "url": "https://github.com/nielsbasjes/logparser", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 94, "size": 2121, "license": "licensed"}}