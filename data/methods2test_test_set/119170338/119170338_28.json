{"test_class": {"identifier": "TermAnnotationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Ontology ontology = TestOntology.ontology();", "modifier": "private final", "type": "Ontology", "declarator": "ontology = TestOntology.ontology()", "var_name": "ontology"}, {"original_string": "private final List<TestTermAnnotation> annotations = Lists.newArrayList(\n      new TestTermAnnotation(TermId.of(\"HP:0000001\"), TermId.of(\"TEST\",\"one\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000001\"), TermId.of(\"TEST\",\"two\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000002\"), TermId.of(\"TEST\",\"one\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000002\"), TermId.of(\"TEST\",\"three\")));", "modifier": "private final", "type": "List<TestTermAnnotation>", "declarator": "annotations = Lists.newArrayList(\n      new TestTermAnnotation(TermId.of(\"HP:0000001\"), TermId.of(\"TEST\",\"one\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000001\"), TermId.of(\"TEST\",\"two\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000002\"), TermId.of(\"TEST\",\"one\")),\n      new TestTermAnnotation(TermId.of(\"HP:0000002\"), TermId.of(\"TEST\",\"three\")))", "var_name": "annotations"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/data/TermAnnotationsTest.java"}, "test_case": {"identifier": "testConstructTermLabelToAnnotationsMap", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testConstructTermLabelToAnnotationsMap() {\n    Map<TermId, Collection<TermId>> map = TermAnnotations.constructTermLabelToAnnotationsMap(ontology, annotations);\n    TermId test1 = TermId.of(\"TEST:one\");\n    assertTrue(map.containsKey(test1));\n    // there are three annotated items, so we expect 3 keys\n    assertEquals(3, map.size());\n  }", "signature": "void testConstructTermLabelToAnnotationsMap()", "full_signature": "@Test void testConstructTermLabelToAnnotationsMap()", "class_method_signature": "TermAnnotationsTest.testConstructTermLabelToAnnotationsMap()", "testcase": true, "constructor": false, "invocations": ["constructTermLabelToAnnotationsMap", "of", "assertTrue", "containsKey", "assertEquals", "size"]}, "focal_class": {"identifier": "TermAnnotations", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TermAnnotations", "parameters": "()", "modifiers": "private", "return": "", "signature": " TermAnnotations()", "full_signature": "private  TermAnnotations()", "class_method_signature": "TermAnnotations.TermAnnotations()", "testcase": false, "constructor": true}, {"identifier": "constructTermAnnotationToLabelsMap", "parameters": "(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "modifiers": "public static", "return": "Map<TermId, Collection<TermId>>", "signature": "Map<TermId, Collection<TermId>> constructTermAnnotationToLabelsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "full_signature": "public static Map<TermId, Collection<TermId>> constructTermAnnotationToLabelsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "class_method_signature": "TermAnnotations.constructTermAnnotationToLabelsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "testcase": false, "constructor": false}, {"identifier": "constructTermLabelToAnnotationsMap", "parameters": "(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "modifiers": "public static", "return": "Map<TermId, Collection<TermId>>", "signature": "Map<TermId, Collection<TermId>> constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "full_signature": "public static Map<TermId, Collection<TermId>> constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "class_method_signature": "TermAnnotations.constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/data/TermAnnotations.java"}, "focal_method": {"identifier": "constructTermLabelToAnnotationsMap", "parameters": "(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "modifiers": "public static", "return": "Map<TermId, Collection<TermId>>", "body": "public static Map<TermId, Collection<TermId>> constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations) {\n    final Map<TermId, Collection<TermId>> result = new HashMap<>();\n\n    for (TermAnnotation anno : annotations) {\n      for (TermId termId : ontology.getAncestorTermIds(anno.getTermId(), true)) {\n        if (!result.containsKey(anno.getLabel())) {\n          result.put(anno.getLabel(), Sets.newHashSet(termId));\n        } else {\n          result.get(anno.getLabel()).add(termId);\n        }\n      }\n    }\n\n    return result;\n  }", "signature": "Map<TermId, Collection<TermId>> constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "full_signature": "public static Map<TermId, Collection<TermId>> constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "class_method_signature": "TermAnnotations.constructTermLabelToAnnotationsMap(\n      Ontology ontology, Collection<? extends TermAnnotation> annotations)", "testcase": false, "constructor": false, "invocations": ["getAncestorTermIds", "getTermId", "containsKey", "getLabel", "put", "getLabel", "newHashSet", "add", "get", "getLabel"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}