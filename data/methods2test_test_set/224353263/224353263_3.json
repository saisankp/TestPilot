{"test_class": {"identifier": "ServiceMeshInspectorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServiceMeshInspectorImpl serviceMeshInspector = new ServiceMeshInspectorImpl();", "modifier": "private", "type": "ServiceMeshInspectorImpl", "declarator": "serviceMeshInspector = new ServiceMeshInspectorImpl()", "var_name": "serviceMeshInspector"}], "file": "alibaba-broker-spring-boot-starter/src/test/java/com/alibaba/spring/boot/rsocket/broker/route/impl/ServiceMeshInspectorImplTest.java"}, "test_case": {"identifier": "testAuth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuth() throws Exception {\n        String routing=\"com.alibaba.user.UserService\";\n        Set<String> serviceAccounts = toSet(\"serviceAccount1\", \"serviceAccount2\");\n        Set<String> serviceAccounts2 = toSet(\"serviceAccount3\", \"serviceAccount4\");\n        Set<String> orgs = toSet(\"org1\", \"or2\");\n        Set<String> orgs2 = toSet(\"org3\", \"or4\");\n        RSocketAppPrincipalMock requesterPrincipal = new RSocketAppPrincipalMock(\"app1\", orgs, serviceAccounts);\n        RSocketAppPrincipalMock responderPrincipal = new RSocketAppPrincipalMock(\"app1\", orgs, serviceAccounts);\n        Assertions.assertTrue(serviceMeshInspector.isRequestAllowed(requesterPrincipal, routing, responderPrincipal));\n        Assertions.assertFalse(serviceMeshInspector.isRequestAllowed(requesterPrincipal, routing,\n                new RSocketAppPrincipalMock(\"app1\", orgs2, serviceAccounts)));\n        Assertions.assertFalse(serviceMeshInspector.isRequestAllowed(requesterPrincipal, routing,\n                new RSocketAppPrincipalMock(\"app1\", orgs, serviceAccounts2)));\n    }", "signature": "void testAuth()", "full_signature": "@Test public void testAuth()", "class_method_signature": "ServiceMeshInspectorImplTest.testAuth()", "testcase": true, "constructor": false, "invocations": ["toSet", "toSet", "toSet", "toSet", "assertTrue", "isRequestAllowed", "assertFalse", "isRequestAllowed", "assertFalse", "isRequestAllowed"]}, "focal_class": {"identifier": "ServiceMeshInspectorImpl", "superclass": "", "interfaces": "implements ServiceMeshInspector", "fields": [{"original_string": "private RoaringBitmap whiteRelationBitmap = new RoaringBitmap();", "modifier": "private", "type": "RoaringBitmap", "declarator": "whiteRelationBitmap = new RoaringBitmap()", "var_name": "whiteRelationBitmap"}, {"original_string": "private boolean authRequired = true;", "modifier": "private", "type": "boolean", "declarator": "authRequired = true", "var_name": "authRequired"}], "methods": [{"identifier": "ServiceMeshInspectorImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceMeshInspectorImpl()", "full_signature": "public  ServiceMeshInspectorImpl()", "class_method_signature": "ServiceMeshInspectorImpl.ServiceMeshInspectorImpl()", "testcase": false, "constructor": true}, {"identifier": "ServiceMeshInspectorImpl", "parameters": "(boolean authRequired)", "modifiers": "public", "return": "", "signature": " ServiceMeshInspectorImpl(boolean authRequired)", "full_signature": "public  ServiceMeshInspectorImpl(boolean authRequired)", "class_method_signature": "ServiceMeshInspectorImpl.ServiceMeshInspectorImpl(boolean authRequired)", "testcase": false, "constructor": true}, {"identifier": "setAuthRequired", "parameters": "(boolean authRequired)", "modifiers": "public", "return": "void", "signature": "void setAuthRequired(boolean authRequired)", "full_signature": "public void setAuthRequired(boolean authRequired)", "class_method_signature": "ServiceMeshInspectorImpl.setAuthRequired(boolean authRequired)", "testcase": false, "constructor": false}, {"identifier": "isRequestAllowed", "parameters": "(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "full_signature": "@Override public boolean isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "class_method_signature": "ServiceMeshInspectorImpl.isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getWhiteRelationCount", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getWhiteRelationCount()", "full_signature": "@Override public Integer getWhiteRelationCount()", "class_method_signature": "ServiceMeshInspectorImpl.getWhiteRelationCount()", "testcase": false, "constructor": false}], "file": "alibaba-broker-spring-boot-starter/src/main/java/com/alibaba/spring/boot/rsocket/broker/route/impl/ServiceMeshInspectorImpl.java"}, "focal_method": {"identifier": "isRequestAllowed", "parameters": "(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal) {\n        if (!authRequired) return true;\n        //org & service account relation\n        int relationHashCode = (requesterPrincipal.hashCode() + \":\" + responderPrincipal.hashCode()).hashCode();\n        if (whiteRelationBitmap.contains(relationHashCode)) {\n            return true;\n        }\n        //acl mapping\n        int aclHashCode = (requesterPrincipal.hashCode() + \":\" + routing + \":\" + responderPrincipal.hashCode()).hashCode();\n        if (whiteRelationBitmap.contains(aclHashCode)) {\n            return true;\n        }\n        boolean orgFriendly = false;\n        for (String principalOrg : requesterPrincipal.getOrganizations()) {\n            if (responderPrincipal.getOrganizations().contains(principalOrg)) {\n                orgFriendly = true;\n                break;\n            }\n        }\n        if (orgFriendly) {\n            boolean serviceAccountFriendly = false;\n            for (String serviceAccount : requesterPrincipal.getServiceAccounts()) {\n                if (responderPrincipal.getServiceAccounts().contains(serviceAccount)) {\n                    serviceAccountFriendly = true;\n                    break;\n                }\n            }\n            if (serviceAccountFriendly) {\n                whiteRelationBitmap.add(relationHashCode);\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "full_signature": "@Override public boolean isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "class_method_signature": "ServiceMeshInspectorImpl.isRequestAllowed(RSocketAppPrincipal requesterPrincipal, String routing, RSocketAppPrincipal responderPrincipal)", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode", "hashCode", "contains", "hashCode", "hashCode", "hashCode", "contains", "getOrganizations", "contains", "getOrganizations", "getServiceAccounts", "contains", "getServiceAccounts", "add"]}, "repository": {"repo_id": 224353263, "url": "https://github.com/alibaba/alibaba-rsocket-broker", "stars": 208, "created": "11/27/2019 5:42:01 AM +00:00", "updates": "2020-01-27T22:23:55+00:00", "fork": "False", "license": "licensed"}}