{"test_class": {"identifier": "DetectionFilterChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DetectionFilterChain chainUnderTest;", "modifier": "private", "type": "DetectionFilterChain", "declarator": "chainUnderTest", "var_name": "chainUnderTest"}, {"original_string": "@Mock\n    private DetectorRequest detectorRequest;", "modifier": "@Mock\n    private", "type": "DetectorRequest", "declarator": "detectorRequest", "var_name": "detectorRequest"}, {"original_string": "@Mock\n    private DetectorResponse detectorResponse;", "modifier": "@Mock\n    private", "type": "DetectorResponse", "declarator": "detectorResponse", "var_name": "detectorResponse"}, {"original_string": "@Mock\n    private DetectorContainer detectorContainer;", "modifier": "@Mock\n    private", "type": "DetectorContainer", "declarator": "detectorContainer", "var_name": "detectorContainer"}, {"original_string": "@Mock\n    private DetectorResult detectorResult;", "modifier": "@Mock\n    private", "type": "DetectorResult", "declarator": "detectorResult", "var_name": "detectorResult"}, {"original_string": "@Mock\n    private Detector detector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}, {"original_string": "@Mock\n    private MetricData metricData;", "modifier": "@Mock\n    private", "type": "MetricData", "declarator": "metricData", "var_name": "metricData"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/filter/chain/DetectionFilterChainTest.java"}, "test_case": {"identifier": "doFilterWithEmptyChain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doFilterWithEmptyChain() {\n        when(detectorContainer.getDetector()).thenReturn(detector);\n        when(detectorRequest.getMetricData()).thenReturn(metricData);\n        chainUnderTest = new DetectionFilterChain(detectorContainer);\n        chainUnderTest.doFilter(detectorRequest, detectorResponse);\n    }", "signature": "void doFilterWithEmptyChain()", "full_signature": "@Test public void doFilterWithEmptyChain()", "class_method_signature": "DetectionFilterChainTest.doFilterWithEmptyChain()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDetector", "thenReturn", "when", "getMetricData", "doFilter"]}, "focal_class": {"identifier": "DetectionFilterChain", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull\n    private ListIterator<DetectionFilter> filtersIterator;", "modifier": "@NonNull\n    private", "type": "ListIterator<DetectionFilter>", "declarator": "filtersIterator", "var_name": "filtersIterator"}, {"original_string": "@NonNull\n    private Detector detector;", "modifier": "@NonNull\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}], "methods": [{"identifier": "DetectionFilterChain", "parameters": "(DetectorContainer detectorContainer)", "modifiers": "public", "return": "", "signature": " DetectionFilterChain(DetectorContainer detectorContainer)", "full_signature": "public  DetectionFilterChain(DetectorContainer detectorContainer)", "class_method_signature": "DetectionFilterChain.DetectionFilterChain(DetectorContainer detectorContainer)", "testcase": false, "constructor": true}, {"identifier": "doFilter", "parameters": "(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "modifiers": "public", "return": "void", "signature": "void doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "full_signature": "public void doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "class_method_signature": "DetectionFilterChain.doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/filter/chain/DetectionFilterChain.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "modifiers": "public", "return": "void", "body": "public void doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response) {\n        if (!filtersIterator.hasNext()) {\n            val result = detector.detect(request.getMetricData());\n            response.setDetectorResult(result);\n        } else {\n            DetectionFilter f = filtersIterator.next();\n            f.doFilter(request, response, this);\n        }\n    }", "signature": "void doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "full_signature": "public void doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "class_method_signature": "DetectionFilterChain.doFilter(@NonNull DetectorRequest request, @NonNull DetectorResponse response)", "testcase": false, "constructor": false, "invocations": ["hasNext", "detect", "getMetricData", "setDetectorResult", "next", "doFilter"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}