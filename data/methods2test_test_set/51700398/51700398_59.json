{"test_class": {"identifier": "AdminServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate PairService pairService;", "modifier": "@Autowired\n\tprivate", "type": "PairService", "declarator": "pairService", "var_name": "pairService"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@MockBean\n\tprivate LookupService lookupService;", "modifier": "@MockBean\n\tprivate", "type": "LookupService", "declarator": "lookupService", "var_name": "lookupService"}, {"original_string": "@MockBean\n\tprivate RateProviderService rateProviderService;", "modifier": "@MockBean\n\tprivate", "type": "RateProviderService", "declarator": "rateProviderService", "var_name": "rateProviderService"}, {"original_string": "@Autowired\n\tprivate AdminService adminService;", "modifier": "@Autowired\n\tprivate", "type": "AdminService", "declarator": "adminService", "var_name": "adminService"}, {"original_string": "@Autowired\n\tprivate HistoricalRateRepository hRateRepo;", "modifier": "@Autowired\n\tprivate", "type": "HistoricalRateRepository", "declarator": "hRateRepo", "var_name": "hRateRepo"}, {"original_string": "@Mock\n\tprivate HistoricalRateProvider hrp;", "modifier": "@Mock\n\tprivate", "type": "HistoricalRateProvider", "declarator": "hrp", "var_name": "hrp"}, {"original_string": "@Mock\n\tprivate LatestRateProvider lrp;", "modifier": "@Mock\n\tprivate", "type": "LatestRateProvider", "declarator": "lrp", "var_name": "lrp"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/admin/AdminServiceTest.java"}, "test_case": {"identifier": "testAdd_currencyNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAdd_currencyNotExist() throws Exception {\n\t\t// given\n\t\tString symbol = \"UBI.PA\";\n\t\tString name = \"Ubi\";\n\t\tString provider = \"Provider\";\n\n\t\twhen(lookupService.getDetails(symbol, provider)).thenReturn(new LookupDetails(symbol, name, \"UBI\", \"XXX\", \"EPA\", provider));\n\n\t\t// when\n\t\tassertThatThrownBy(() -> adminService.add(symbol, provider))\n\t\t\t.isInstanceOf(PairException.class)\n\t\t\t.hasMessage(\"pair.error.currency-not-found: [XXX]\");\n\t}", "signature": "void testAdd_currencyNotExist()", "full_signature": "@Test public void testAdd_currencyNotExist()", "class_method_signature": "AdminServiceTest.testAdd_currencyNotExist()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDetails", "hasMessage", "isInstanceOf", "assertThatThrownBy", "add"]}, "focal_class": {"identifier": "AdminService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolService symbolService;", "modifier": "@Autowired\n\tprivate", "type": "SymbolService", "declarator": "symbolService", "var_name": "symbolService"}, {"original_string": "@Autowired\n\tprivate PairService pairService;", "modifier": "@Autowired\n\tprivate", "type": "PairService", "declarator": "pairService", "var_name": "pairService"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate RateProviderService rateProviderService;", "modifier": "@Autowired\n\tprivate", "type": "RateProviderService", "declarator": "rateProviderService", "var_name": "rateProviderService"}, {"original_string": "@Autowired\n\tprivate LookupService lookupService;", "modifier": "@Autowired\n\tprivate", "type": "LookupService", "declarator": "lookupService", "var_name": "lookupService"}], "methods": [{"identifier": "add", "parameters": "(String code, String provider)", "modifiers": "public", "return": "SymbolInfo", "signature": "SymbolInfo add(String code, String provider)", "full_signature": "public SymbolInfo add(String code, String provider)", "class_method_signature": "AdminService.add(String code, String provider)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String code, String provider)", "modifiers": "public", "return": "void", "signature": "void delete(String code, String provider)", "full_signature": "public void delete(String code, String provider)", "class_method_signature": "AdminService.delete(String code, String provider)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String symbolOrName)", "modifiers": "public", "return": "SearchResult", "signature": "SearchResult search(String symbolOrName)", "full_signature": "public SearchResult search(String symbolOrName)", "class_method_signature": "AdminService.search(String symbolOrName)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "modifiers": "private", "return": "void", "signature": "void removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "full_signature": "private void removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "class_method_signature": "AdminService.removeDuplicates(List<LookupInfo> availableSymbols, List<UpdatedPair> existingSymbols)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/admin/AdminService.java"}, "focal_method": {"identifier": "add", "parameters": "(String code, String provider)", "modifiers": "public", "return": "SymbolInfo", "body": "public SymbolInfo add(String code, String provider) throws IOException {\n\t\tStopwatch sw = Stopwatch.createStarted();\n\n\t\tPair pair = pairService.getForCodeAndProvider(code, provider);\n\n\t\tif (pair != null) {\n\t\t\tthrow PairException.alreadyExists(pair.getSymbol(), provider);\n\t\t}\n\n\t\tLookupDetails details = lookupService.getDetails(code, provider);\n\n\t\tString source = details.getSource();\n\t\tString currency = details.getCurrency();\n\t\tString name = details.getName();\n\t\tString exchange = details.getExchange();\n\n\t\t// check if currency exists\n\t\tif (!symbolService.getForCodeWithNoCurrency(currency).isPresent()) {\n\t\t\tthrow PairException.currencyNotFound(currency);\n\t\t}\n\n\t\tOptional<Symbol> sourceSymbol = symbolService.getForCode(source);\n\n\t\tif(sourceSymbol.isPresent()) {\n\t\t\tif(sourceSymbol.get().getCurrency() == null) {\n\t\t\t\tthrow AdminException.currencyAlreadyExists(source);\n\t\t\t}\n\t\t} else {\n\t\t\tsymbolService.addSymbol(source, name, null, currency);\n\t\t}\n\n\t\tpair = pairService.create(code, name, source, currency, exchange, provider);\n\n\t\tfinal LatestRateProvider rProvider = rateProviderService.getLatestProvider(ProviderType.STOCK);\n\n\t\tQuote latestQuote = rProvider.getLatestRate(code);\n\n\t\tif (latestQuote == null) {\n\t\t\tthrow SymbolException.UNAVAILABLE(code);\n\t\t}\n\n\t\t// TODO immutability ! copy data\n\t\tlatestQuote.setCode(source);\n\t\tlatestQuote.setCurrency(currency);\n\n\t\tList<Quote> historicalQuotes = new ArrayList<>();\n\n\t\tfinal HistoricalRateProvider hRProvider = rateProviderService.getHistoricalProvider(ProviderType.STOCK);\n\n\t\ttry {\n\t\t\thistoricalQuotes.addAll(hRProvider.getHistoricalRates(code));\n\t\t} catch (IOException | RuntimeException e) {\n\t\t\t// generally, if provider cannot get historical data, it throws exception\n\t\t\tlog.warn(\"Cannot get historical data for: {} (provider: {})\", code, provider);\n\t\t}\n\n\t\tfor (Quote q : historicalQuotes) {\n\t\t\tq.setCode(source);\n\t\t\tq.setCurrency(currency);\n\t\t}\n\n\t\thistoricalQuotes.removeIf(q -> q.getTime().compareTo(latestQuote.getTime()) == 0);\n\t\t\n\t\thistoricalQuotes.add(latestQuote);\n\n\t\trateService.addHistoricalRates(historicalQuotes);\n\t\trateService.addLatestRate(latestQuote);\n\n\t\tlog.info(\"{} created in: {}\", pair, sw);\n\n\t\treturn new SymbolInfo(pair.getSymbol(), pair.getName(), !historicalQuotes.isEmpty(), latestQuote);\n\t}", "signature": "SymbolInfo add(String code, String provider)", "full_signature": "public SymbolInfo add(String code, String provider)", "class_method_signature": "AdminService.add(String code, String provider)", "testcase": false, "constructor": false, "invocations": ["createStarted", "getForCodeAndProvider", "alreadyExists", "getSymbol", "getDetails", "getSource", "getCurrency", "getName", "getExchange", "isPresent", "getForCodeWithNoCurrency", "currencyNotFound", "getForCode", "isPresent", "getCurrency", "get", "currencyAlreadyExists", "addSymbol", "create", "getLatestProvider", "getLatestRate", "UNAVAILABLE", "setCode", "setCurrency", "getHistoricalProvider", "addAll", "getHistoricalRates", "warn", "setCode", "setCurrency", "removeIf", "compareTo", "getTime", "getTime", "add", "addHistoricalRates", "addLatestRate", "info", "getSymbol", "getName", "isEmpty"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}