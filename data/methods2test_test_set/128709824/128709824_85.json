{"test_class": {"identifier": "RegistryFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/registry/RegistryFactoryTest.java"}, "test_case": {"identifier": "destroyAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void destroyAll() {\n    }", "signature": "void destroyAll()", "full_signature": "@Test public void destroyAll()", "class_method_signature": "RegistryFactoryTest.destroyAll()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "RegistryFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ConcurrentMap<RegistryConfig, Registry> ALL_REGISTRIES = new ConcurrentHashMap<RegistryConfig, Registry>();", "modifier": "private final static", "type": "ConcurrentMap<RegistryConfig, Registry>", "declarator": "ALL_REGISTRIES = new ConcurrentHashMap<RegistryConfig, Registry>()", "var_name": "ALL_REGISTRIES"}, {"original_string": "private final static Logger                                  LOGGER         = LoggerFactory\n                                                                                    .getLogger(RegistryFactory.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER         = LoggerFactory\n                                                                                    .getLogger(RegistryFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "public static synchronized", "return": "Registry", "signature": "Registry getRegistry(RegistryConfig registryConfig)", "full_signature": "public static synchronized Registry getRegistry(RegistryConfig registryConfig)", "class_method_signature": "RegistryFactory.getRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": false}, {"identifier": "getRegistryConfigs", "parameters": "()", "modifiers": "public static", "return": "List<RegistryConfig>", "signature": "List<RegistryConfig> getRegistryConfigs()", "full_signature": "public static List<RegistryConfig> getRegistryConfigs()", "class_method_signature": "RegistryFactory.getRegistryConfigs()", "testcase": false, "constructor": false}, {"identifier": "getRegistries", "parameters": "()", "modifiers": "public static", "return": "List<Registry>", "signature": "List<Registry> getRegistries()", "full_signature": "public static List<Registry> getRegistries()", "class_method_signature": "RegistryFactory.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "RegistryFactory.destroyAll()", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/registry/RegistryFactory.java"}, "focal_method": {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void destroyAll() {\n        for (Map.Entry<RegistryConfig, Registry> entry : ALL_REGISTRIES.entrySet()) {\n            RegistryConfig config = entry.getKey();\n            Registry registry = entry.getValue();\n            try {\n                registry.destroy();\n                ALL_REGISTRIES.remove(config);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_DESTRORY_REGISTRY, config), e);\n            }\n        }\n    }", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "RegistryFactory.destroyAll()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "destroy", "remove", "error", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}