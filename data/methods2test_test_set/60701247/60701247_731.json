{"test_class": {"identifier": "CaptureModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeCpuService myCpuService = new FakeCpuService();", "modifier": "private final", "type": "FakeCpuService", "declarator": "myCpuService = new FakeCpuService()", "var_name": "myCpuService"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerStageTestChannel\", myCpuService, new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService(), new FakeEventService(), FakeNetworkService.newBuilder().build());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerStageTestChannel\", myCpuService, new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService(), new FakeEventService(), FakeNetworkService.newBuilder().build())", "var_name": "myGrpcChannel"}, {"original_string": "private CaptureModel myModel;", "modifier": "private", "type": "CaptureModel", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private CpuProfilerStage myStage;", "modifier": "private", "type": "CpuProfilerStage", "declarator": "myStage", "var_name": "myStage"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/capturedetails/CaptureModelTest.java"}, "test_case": {"identifier": "testDetailsFeatureTracking", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDetailsFeatureTracking() {\n    FakeFeatureTracker tracker = (FakeFeatureTracker)myStage.getStudioProfilers().getIdeServices().getFeatureTracker();\n\n    assertThat(tracker.getLastCaptureDetailsType()).isNull();\n\n    myModel.setDetails(CaptureDetails.Type.CALL_CHART);\n    assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.CALL_CHART);\n\n    myModel.setDetails(CaptureDetails.Type.FLAME_CHART);\n    assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.FLAME_CHART);\n\n    myModel.setDetails(CaptureDetails.Type.TOP_DOWN);\n    assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.TOP_DOWN);\n\n    myModel.setDetails(CaptureDetails.Type.BOTTOM_UP);\n    assertThat(tracker.getLastCaptureDetailsType()).isEqualTo(CaptureDetails.Type.BOTTOM_UP);\n  }", "signature": "void testDetailsFeatureTracking()", "full_signature": "@Test public void testDetailsFeatureTracking()", "class_method_signature": "CaptureModelTest.testDetailsFeatureTracking()", "testcase": true, "constructor": false, "invocations": ["getFeatureTracker", "getIdeServices", "getStudioProfilers", "isNull", "assertThat", "getLastCaptureDetailsType", "setDetails", "isEqualTo", "assertThat", "getLastCaptureDetailsType", "setDetails", "isEqualTo", "assertThat", "getLastCaptureDetailsType", "setDetails", "isEqualTo", "assertThat", "getLastCaptureDetailsType", "setDetails", "isEqualTo", "assertThat", "getLastCaptureDetailsType"]}, "focal_class": {"identifier": "CaptureModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 1e-5;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 1e-5", "var_name": "EPSILON"}, {"original_string": "public static final int NO_THREAD = -1;", "modifier": "public static final", "type": "int", "declarator": "NO_THREAD = -1", "var_name": "NO_THREAD"}, {"original_string": "private static final Map<CaptureDetails.Type, Consumer<FeatureTracker>> DETAILS_TRACKERS = ImmutableMap.of(\n    CaptureDetails.Type.TOP_DOWN, FeatureTracker::trackSelectCaptureTopDown,\n    CaptureDetails.Type.BOTTOM_UP, FeatureTracker::trackSelectCaptureBottomUp,\n    CaptureDetails.Type.CALL_CHART, FeatureTracker::trackSelectCaptureCallChart,\n    CaptureDetails.Type.FLAME_CHART, FeatureTracker::trackSelectCaptureFlameChart,\n    // We don't track usage for experimental features\n    CaptureDetails.Type.RENDER_AUDIT, tracker -> {}\n  );", "modifier": "private static final", "type": "Map<CaptureDetails.Type, Consumer<FeatureTracker>>", "declarator": "DETAILS_TRACKERS = ImmutableMap.of(\n    CaptureDetails.Type.TOP_DOWN, FeatureTracker::trackSelectCaptureTopDown,\n    CaptureDetails.Type.BOTTOM_UP, FeatureTracker::trackSelectCaptureBottomUp,\n    CaptureDetails.Type.CALL_CHART, FeatureTracker::trackSelectCaptureCallChart,\n    CaptureDetails.Type.FLAME_CHART, FeatureTracker::trackSelectCaptureFlameChart,\n    // We don't track usage for experimental features\n    CaptureDetails.Type.RENDER_AUDIT, tracker -> {}\n  )", "var_name": "DETAILS_TRACKERS"}, {"original_string": "@NotNull\n  private final CpuProfilerStage myStage;", "modifier": "@NotNull\n  private final", "type": "CpuProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "@Nullable\n  private CpuCapture myCapture;", "modifier": "@Nullable\n  private", "type": "CpuCapture", "declarator": "myCapture", "var_name": "myCapture"}, {"original_string": "private int myThread;", "modifier": "private", "type": "int", "declarator": "myThread", "var_name": "myThread"}, {"original_string": "@NotNull\n  private ClockType myClockType = ClockType.GLOBAL;", "modifier": "@NotNull\n  private", "type": "ClockType", "declarator": "myClockType = ClockType.GLOBAL", "var_name": "myClockType"}, {"original_string": "@NotNull\n  private Filter myFilter = Filter.EMPTY_FILTER;", "modifier": "@NotNull\n  private", "type": "Filter", "declarator": "myFilter = Filter.EMPTY_FILTER", "var_name": "myFilter"}, {"original_string": "@NotNull\n  private FilterResult myFilterResult = new FilterResult();", "modifier": "@NotNull\n  private", "type": "FilterResult", "declarator": "myFilterResult = new FilterResult()", "var_name": "myFilterResult"}, {"original_string": "@Nullable\n  private CaptureDetails myDetails;", "modifier": "@Nullable\n  private", "type": "CaptureDetails", "declarator": "myDetails", "var_name": "myDetails"}, {"original_string": "private final Range myCaptureConvertedRange;", "modifier": "private final", "type": "Range", "declarator": "myCaptureConvertedRange", "var_name": "myCaptureConvertedRange"}], "methods": [{"identifier": "CaptureModel", "parameters": "(@NotNull CpuProfilerStage stage)", "modifiers": "public", "return": "", "signature": " CaptureModel(@NotNull CpuProfilerStage stage)", "full_signature": "public  CaptureModel(@NotNull CpuProfilerStage stage)", "class_method_signature": "CaptureModel.CaptureModel(@NotNull CpuProfilerStage stage)", "testcase": false, "constructor": true}, {"identifier": "setCapture", "parameters": "(@Nullable CpuCapture capture)", "modifiers": "public", "return": "boolean", "signature": "boolean setCapture(@Nullable CpuCapture capture)", "full_signature": "public boolean setCapture(@Nullable CpuCapture capture)", "class_method_signature": "CaptureModel.setCapture(@Nullable CpuCapture capture)", "testcase": false, "constructor": false}, {"identifier": "getCapture", "parameters": "()", "modifiers": "@Nullable public", "return": "CpuCapture", "signature": "CpuCapture getCapture()", "full_signature": "@Nullable public CpuCapture getCapture()", "class_method_signature": "CaptureModel.getCapture()", "testcase": false, "constructor": false}, {"identifier": "setThread", "parameters": "(int thread)", "modifiers": "public", "return": "void", "signature": "void setThread(int thread)", "full_signature": "public void setThread(int thread)", "class_method_signature": "CaptureModel.setThread(int thread)", "testcase": false, "constructor": false}, {"identifier": "getThread", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThread()", "full_signature": "public int getThread()", "class_method_signature": "CaptureModel.getThread()", "testcase": false, "constructor": false}, {"identifier": "setClockType", "parameters": "(@NotNull ClockType type)", "modifiers": "public", "return": "void", "signature": "void setClockType(@NotNull ClockType type)", "full_signature": "public void setClockType(@NotNull ClockType type)", "class_method_signature": "CaptureModel.setClockType(@NotNull ClockType type)", "testcase": false, "constructor": false}, {"identifier": "getClockType", "parameters": "()", "modifiers": "@NotNull public", "return": "ClockType", "signature": "ClockType getClockType()", "full_signature": "@NotNull public ClockType getClockType()", "class_method_signature": "CaptureModel.getClockType()", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(@NotNull Filter filter)", "modifiers": "@NotNull public", "return": "FilterResult", "signature": "FilterResult applyFilter(@NotNull Filter filter)", "full_signature": "@NotNull public FilterResult applyFilter(@NotNull Filter filter)", "class_method_signature": "CaptureModel.applyFilter(@NotNull Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "@NotNull public", "return": "Filter", "signature": "Filter getFilter()", "full_signature": "@NotNull public Filter getFilter()", "class_method_signature": "CaptureModel.getFilter()", "testcase": false, "constructor": false}, {"identifier": "setDetails", "parameters": "(@Nullable CaptureDetails.Type type)", "modifiers": "public", "return": "void", "signature": "void setDetails(@Nullable CaptureDetails.Type type)", "full_signature": "public void setDetails(@Nullable CaptureDetails.Type type)", "class_method_signature": "CaptureModel.setDetails(@Nullable CaptureDetails.Type type)", "testcase": false, "constructor": false}, {"identifier": "getDetails", "parameters": "()", "modifiers": "@Nullable public", "return": "CaptureDetails", "signature": "CaptureDetails getDetails()", "full_signature": "@Nullable public CaptureDetails getDetails()", "class_method_signature": "CaptureModel.getDetails()", "testcase": false, "constructor": false}, {"identifier": "rebuildDetails", "parameters": "(@Nullable CaptureDetails.Type suggestedType)", "modifiers": "private", "return": "void", "signature": "void rebuildDetails(@Nullable CaptureDetails.Type suggestedType)", "full_signature": "private void rebuildDetails(@Nullable CaptureDetails.Type suggestedType)", "class_method_signature": "CaptureModel.rebuildDetails(@Nullable CaptureDetails.Type suggestedType)", "testcase": false, "constructor": false}, {"identifier": "rebuildDetails", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rebuildDetails()", "full_signature": "private void rebuildDetails()", "class_method_signature": "CaptureModel.rebuildDetails()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "@Nullable private", "return": "CaptureNode", "signature": "CaptureNode getNode()", "full_signature": "@Nullable private CaptureNode getNode()", "class_method_signature": "CaptureModel.getNode()", "testcase": false, "constructor": false}, {"identifier": "updateCaptureConvertedRange", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCaptureConvertedRange()", "full_signature": "private void updateCaptureConvertedRange()", "class_method_signature": "CaptureModel.updateCaptureConvertedRange()", "testcase": false, "constructor": false}, {"identifier": "updateSelectionRange", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSelectionRange()", "full_signature": "private void updateSelectionRange()", "class_method_signature": "CaptureModel.updateSelectionRange()", "testcase": false, "constructor": false}, {"identifier": "setSelectionRange", "parameters": "(double min, double max)", "modifiers": "private", "return": "void", "signature": "void setSelectionRange(double min, double max)", "full_signature": "private void setSelectionRange(double min, double max)", "class_method_signature": "CaptureModel.setSelectionRange(double min, double max)", "testcase": false, "constructor": false}, {"identifier": "setConvertedRange", "parameters": "(double min, double max)", "modifiers": "private", "return": "void", "signature": "void setConvertedRange(double min, double max)", "full_signature": "private void setConvertedRange(double min, double max)", "class_method_signature": "CaptureModel.setConvertedRange(double min, double max)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/capturedetails/CaptureModel.java"}, "focal_method": {"identifier": "setDetails", "parameters": "(@Nullable CaptureDetails.Type type)", "modifiers": "public", "return": "void", "body": "public void setDetails(@Nullable CaptureDetails.Type type) {\n    if (type != null && myDetails != null && type == myDetails.getType()) {\n      return;\n    }\n\n    FeatureTracker tracker = myStage.getStudioProfilers().getIdeServices().getFeatureTracker();\n    if (type != null) {\n      DETAILS_TRACKERS.get(type).accept(tracker);\n    }\n    rebuildDetails(type);\n  }", "signature": "void setDetails(@Nullable CaptureDetails.Type type)", "full_signature": "public void setDetails(@Nullable CaptureDetails.Type type)", "class_method_signature": "CaptureModel.setDetails(@Nullable CaptureDetails.Type type)", "testcase": false, "constructor": false, "invocations": ["getType", "getFeatureTracker", "getIdeServices", "getStudioProfilers", "accept", "get", "rebuildDetails"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}