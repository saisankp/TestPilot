{"test_class": {"identifier": "IeQualityConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int IE_QUALITY_NONE = 0b00000000;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_NONE = 0b00000000", "var_name": "IE_QUALITY_NONE"}, {"original_string": "private static final int IE_QUALITY_OVERFLOW = 0b00000001;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_OVERFLOW = 0b00000001", "var_name": "IE_QUALITY_OVERFLOW"}, {"original_string": "private static final int IE_QUALITY_BLOCKED = 0b00010000;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_BLOCKED = 0b00010000", "var_name": "IE_QUALITY_BLOCKED"}, {"original_string": "private static final int IE_QUALITY_SUBSTITUTED = 0b00100000;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_SUBSTITUTED = 0b00100000", "var_name": "IE_QUALITY_SUBSTITUTED"}, {"original_string": "private static final int IE_QUALITY_NOT_TOPICAL = 0b01000000;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_NOT_TOPICAL = 0b01000000", "var_name": "IE_QUALITY_NOT_TOPICAL"}, {"original_string": "private static final int IE_QUALITY_INVALID = 0b10000000;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_INVALID = 0b10000000", "var_name": "IE_QUALITY_INVALID"}, {"original_string": "private static final int IE_QUALITY_ALL = IE_QUALITY_OVERFLOW | IE_QUALITY_BLOCKED | IE_QUALITY_SUBSTITUTED\n            | IE_QUALITY_NOT_TOPICAL | IE_QUALITY_INVALID;", "modifier": "private static final", "type": "int", "declarator": "IE_QUALITY_ALL = IE_QUALITY_OVERFLOW | IE_QUALITY_BLOCKED | IE_QUALITY_SUBSTITUTED\n            | IE_QUALITY_NOT_TOPICAL | IE_QUALITY_INVALID", "var_name": "IE_QUALITY_ALL"}, {"original_string": "private final IeQualityConverter converter = new IeQualityConverter();", "modifier": "private final", "type": "IeQualityConverter", "declarator": "converter = new IeQualityConverter()", "var_name": "converter"}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeQualityConverterTest.java"}, "test_case": {"identifier": "shouldConvertIeQualityNotTopicalToByte", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConvertIeQualityNotTopicalToByte() {\n        // Arrange\n        final BitmaskMeasurementElementDto expected = new BitmaskMeasurementElementDto((byte) IE_QUALITY_NOT_TOPICAL);\n        final IeQuality source = new IeQuality(false, false, false, true, false);\n\n        // Act\n        final BitmaskMeasurementElementDto actual = this.converter.convert(source, null, null);\n\n        // Assert\n        assertThat(actual).isEqualTo(expected);\n    }", "signature": "void shouldConvertIeQualityNotTopicalToByte()", "full_signature": "@Test public void shouldConvertIeQualityNotTopicalToByte()", "class_method_signature": "IeQualityConverterTest.shouldConvertIeQualityNotTopicalToByte()", "testcase": true, "constructor": false, "invocations": ["convert", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "IeQualityConverter", "superclass": "extends CustomConverter<IeQuality, BitmaskMeasurementElementDto>", "interfaces": "", "fields": [{"original_string": "private static final int BIT_OVERFLOW = 0b00000001;", "modifier": "private static final", "type": "int", "declarator": "BIT_OVERFLOW = 0b00000001", "var_name": "BIT_OVERFLOW"}, {"original_string": "private static final int BIT_BLOCKED = 0b00010000;", "modifier": "private static final", "type": "int", "declarator": "BIT_BLOCKED = 0b00010000", "var_name": "BIT_BLOCKED"}, {"original_string": "private static final int BIT_SUBSTITUTED = 0b00100000;", "modifier": "private static final", "type": "int", "declarator": "BIT_SUBSTITUTED = 0b00100000", "var_name": "BIT_SUBSTITUTED"}, {"original_string": "private static final int BIT_NOT_TOPICAL = 0b01000000;", "modifier": "private static final", "type": "int", "declarator": "BIT_NOT_TOPICAL = 0b01000000", "var_name": "BIT_NOT_TOPICAL"}, {"original_string": "private static final int BIT_INVALID = 0b10000000;", "modifier": "private static final", "type": "int", "declarator": "BIT_INVALID = 0b10000000", "var_name": "BIT_INVALID"}], "methods": [{"identifier": "convert", "parameters": "(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "modifiers": "@Override public", "return": "BitmaskMeasurementElementDto", "signature": "BitmaskMeasurementElementDto convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "full_signature": "@Override public BitmaskMeasurementElementDto convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "class_method_signature": "IeQualityConverter.convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeQualityConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "modifiers": "@Override public", "return": "BitmaskMeasurementElementDto", "body": "@Override\n    public BitmaskMeasurementElementDto convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext) {\n        int value = 0;\n        value += source.isOverflow() ? BIT_OVERFLOW : 0;\n        value += source.isBlocked() ? BIT_BLOCKED : 0;\n        value += source.isSubstituted() ? BIT_SUBSTITUTED : 0;\n        value += source.isNotTopical() ? BIT_NOT_TOPICAL : 0;\n        value += source.isInvalid() ? BIT_INVALID : 0;\n        return new BitmaskMeasurementElementDto((byte) value);\n    }", "signature": "BitmaskMeasurementElementDto convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "full_signature": "@Override public BitmaskMeasurementElementDto convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "class_method_signature": "IeQualityConverter.convert(final IeQuality source,\n            final Type<? extends BitmaskMeasurementElementDto> destinationType, final MappingContext mappingContext)", "testcase": false, "constructor": false, "invocations": ["isOverflow", "isBlocked", "isSubstituted", "isNotTopical", "isInvalid"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}