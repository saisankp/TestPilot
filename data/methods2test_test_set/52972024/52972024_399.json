{"test_class": {"identifier": "BlockingMessageSchedulerActionTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IMessageProcessor messageProcessorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessorMock", "var_name": "messageProcessorMock"}, {"original_string": "private IMessageProcessingSequence messageProcessingSequenceMock;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "messageProcessingSequenceMock", "var_name": "messageProcessingSequenceMock"}, {"original_string": "private IChainStorage chainStorageMock;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorageMock", "var_name": "chainStorageMock"}, {"original_string": "private IReceiverChain receiverChainMock;", "modifier": "private", "type": "IReceiverChain", "declarator": "receiverChainMock", "var_name": "receiverChainMock"}, {"original_string": "private ISchedulerEntry schedulerEntryMock;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "schedulerEntryMock", "var_name": "schedulerEntryMock"}, {"original_string": "private IQueue queueMock;", "modifier": "private", "type": "IQueue", "declarator": "queueMock", "var_name": "queueMock"}, {"original_string": "private IObject entryState;", "modifier": "private", "type": "IObject", "declarator": "entryState", "var_name": "entryState"}, {"original_string": "private IResolveDependencyStrategy sequenceStrategy, processorStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "sequenceStrategy", "var_name": "sequenceStrategy"}, {"original_string": "private ISchedulerAction action;", "modifier": "private", "type": "ISchedulerAction", "declarator": "action", "var_name": "action"}], "file": "CoreFeatures/Scheduler/SchedulerActor/src/test/java/info/smart_tools/smartactors/scheduler/actor/impl/actions/BlockingMessageSchedulerActionTest.java"}, "test_case": {"identifier": "Should_initializeEntryState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_initializeEntryState()\n            throws Exception {\n        IObject args = IOC.resolve(Keys.getOrAdd(IObject.class.getCanonicalName()),\n                (\"{\" +\n                        \"'message': {'a':'asd'},\" +\n                        \"'setEntryId': 'idFld',\" +\n                        \"'preShutdownExec': true,\" +\n                        \"'chain': 'some_chain',\" +\n                        \"'stackDepth': 13\" +\n                        \"}\").replace('\\'','\"'));\n        action.init(schedulerEntryMock, args);\n\n        assertEquals(\"asd\", ((IObject)entryState.getValue(fn(\"message\"))).getValue(fn(\"a\")));\n        assertEquals(schedulerEntryMock.getId(), ((IObject)entryState.getValue(fn(\"message\"))).getValue(fn(\"idFld\")));\n        assertEquals(Boolean.TRUE, entryState.getValue(fn(\"preShutdownExec\")));\n        assertEquals(\"some_chain\", entryState.getValue(fn(\"chain\")));\n        assertEquals(13, entryState.getValue(fn(\"stackDepth\")));\n    }", "signature": "void Should_initializeEntryState()", "full_signature": "@Test public void Should_initializeEntryState()", "class_method_signature": "BlockingMessageSchedulerActionTest.Should_initializeEntryState()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "getCanonicalName", "replace", "init", "assertEquals", "getValue", "getValue", "fn", "fn", "assertEquals", "getId", "getValue", "getValue", "fn", "fn", "assertEquals", "getValue", "fn", "assertEquals", "getValue", "fn", "assertEquals", "getValue", "fn"]}, "focal_class": {"identifier": "BlockingMessageSchedulerAction", "superclass": "", "interfaces": "implements ISchedulerAction", "fields": [{"original_string": "private final IFieldName messageFN;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFN", "var_name": "messageFN"}, {"original_string": "private final IFieldName setEntryIdFN;", "modifier": "private final", "type": "IFieldName", "declarator": "setEntryIdFN", "var_name": "setEntryIdFN"}, {"original_string": "private final IFieldName preShutdownExecFN;", "modifier": "private final", "type": "IFieldName", "declarator": "preShutdownExecFN", "var_name": "preShutdownExecFN"}, {"original_string": "private final IFieldName chainFN;", "modifier": "private final", "type": "IFieldName", "declarator": "chainFN", "var_name": "chainFN"}, {"original_string": "private final IFieldName finalActionsFN;", "modifier": "private final", "type": "IFieldName", "declarator": "finalActionsFN", "var_name": "finalActionsFN"}, {"original_string": "private final IFieldName stackDepthFN;", "modifier": "private final", "type": "IFieldName", "declarator": "stackDepthFN", "var_name": "stackDepthFN"}, {"original_string": "private final IChainStorage chainStorage;", "modifier": "private final", "type": "IChainStorage", "declarator": "chainStorage", "var_name": "chainStorage"}], "methods": [{"identifier": "BlockingMessageSchedulerAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " BlockingMessageSchedulerAction()", "full_signature": "public  BlockingMessageSchedulerAction()", "class_method_signature": "BlockingMessageSchedulerAction.BlockingMessageSchedulerAction()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "BlockingMessageSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final ISchedulerEntry entry)", "full_signature": "@Override public void execute(final ISchedulerEntry entry)", "class_method_signature": "BlockingMessageSchedulerAction.execute(final ISchedulerEntry entry)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Scheduler/SchedulerActor/src/main/java/info/smart_tools/smartactors/scheduler/actor/impl/actions/BlockingMessageSchedulerAction.java"}, "focal_method": {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(final ISchedulerEntry entry, final IObject args) throws SchedulerActionInitializationException {\n        try {\n            Object message = args.getValue(messageFN);\n            Object chainId = args.getValue(chainFN);\n\n            if (message == null || !(message instanceof IObject)) {\n                throw new SchedulerActionInitializationException(\"\\\"message\\\" field of arguments should contain a message object\", null);\n            }\n\n            if (null == chainId) {\n                throw new SchedulerActionInitializationException(\"\\\"chain\\\" field of arguments should contain name of the chain\", null);\n            }\n\n            String entryIdFieldFN = (String) args.getValue(setEntryIdFN);\n\n            if (entryIdFieldFN != null && !entryIdFieldFN.isEmpty()) {\n                ((IObject) message).setValue(IOC.resolve(Keys.getOrAdd(IFieldName.class.getCanonicalName()), entryIdFieldFN), entry.getId());\n            }\n\n            entry.getState().setValue(messageFN, message);\n            entry.getState().setValue(chainFN, chainId);\n\n            Object preShutdownExecConfig = args.getValue(preShutdownExecFN);\n            entry.getState().setValue(preShutdownExecFN,\n                    (preShutdownExecConfig == null || preShutdownExecConfig == Boolean.FALSE) ? Boolean.FALSE : Boolean.TRUE);\n\n            Number stackDepth = (Number) args.getValue(stackDepthFN);\n\n            if (null == stackDepth) {\n                stackDepth = IOC.resolve(Keys.getOrAdd(\"default_stack_depth\"));\n            }\n\n            entry.getState().setValue(stackDepthFN, stackDepth);\n        } catch (ReadValueException | ChangeValueException | InvalidArgumentException | ResolutionException e) {\n            throw new SchedulerActionInitializationException(\"Error occurred copying message from arguments to entry state.\", e);\n        }\n    }", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "BlockingMessageSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "getValue", "isEmpty", "setValue", "resolve", "getOrAdd", "getCanonicalName", "getId", "setValue", "getState", "setValue", "getState", "getValue", "setValue", "getState", "getValue", "resolve", "getOrAdd", "setValue", "getState"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}