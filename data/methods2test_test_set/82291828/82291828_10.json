{"test_class": {"identifier": "WeightedInputTest", "superclass": "", "interfaces": "", "fields": [], "file": "algo/src/test/java/org/neo4j/graphalgo/similarity/WeightedInputTest.java"}, "test_case": {"identifier": "degreeCutoffBasedOnSkipValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void degreeCutoffBasedOnSkipValue() {\n        List<Map<String, Object>> data = new ArrayList<>();\n        data.add(MapUtil.map(\"item\", 1L,\"weights\", Arrays.asList(2.0, 3.0, 4.0)));\n        data.add(MapUtil.map(\"item\", 2L,\"weights\", Arrays.asList(2.0, 3.0, Double.NaN)));\n\n        WeightedInput[] weightedInputs = WeightedInput.prepareDenseWeights(data, 2L, Double.NaN);\n\n        assertEquals(1, weightedInputs.length);\n    }", "signature": "void degreeCutoffBasedOnSkipValue()", "full_signature": "@Test public void degreeCutoffBasedOnSkipValue()", "class_method_signature": "WeightedInputTest.degreeCutoffBasedOnSkipValue()", "testcase": true, "constructor": false, "invocations": ["add", "map", "asList", "add", "map", "asList", "prepareDenseWeights", "assertEquals"]}, "focal_class": {"identifier": "WeightedInput", "superclass": "", "interfaces": "implements Comparable<WeightedInput>, SimilarityInput", "fields": [{"original_string": "private final long id;", "modifier": "private final", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "private int itemCount;", "modifier": "private", "type": "int", "declarator": "itemCount", "var_name": "itemCount"}, {"original_string": "private final double[] weights;", "modifier": "private final", "type": "double[]", "declarator": "weights", "var_name": "weights"}, {"original_string": "final int initialSize;", "modifier": "final", "type": "int", "declarator": "initialSize", "var_name": "initialSize"}], "methods": [{"identifier": "WeightedInput", "parameters": "(long id, double[] weights, int fullSize, int itemCount)", "modifiers": "public", "return": "", "signature": " WeightedInput(long id, double[] weights, int fullSize, int itemCount)", "full_signature": "public  WeightedInput(long id, double[] weights, int fullSize, int itemCount)", "class_method_signature": "WeightedInput.WeightedInput(long id, double[] weights, int fullSize, int itemCount)", "testcase": false, "constructor": true}, {"identifier": "WeightedInput", "parameters": "(long id, double[] weights, double skipValue)", "modifiers": "public", "return": "", "signature": " WeightedInput(long id, double[] weights, double skipValue)", "full_signature": "public  WeightedInput(long id, double[] weights, double skipValue)", "class_method_signature": "WeightedInput.WeightedInput(long id, double[] weights, double skipValue)", "testcase": false, "constructor": true}, {"identifier": "WeightedInput", "parameters": "(long id, double[] weights)", "modifiers": "public", "return": "", "signature": " WeightedInput(long id, double[] weights)", "full_signature": "public  WeightedInput(long id, double[] weights)", "class_method_signature": "WeightedInput.WeightedInput(long id, double[] weights)", "testcase": false, "constructor": true}, {"identifier": "calculateCount", "parameters": "(double[] weights, double skipValue)", "modifiers": "private static", "return": "int", "signature": "int calculateCount(double[] weights, double skipValue)", "full_signature": "private static int calculateCount(double[] weights, double skipValue)", "class_method_signature": "WeightedInput.calculateCount(double[] weights, double skipValue)", "testcase": false, "constructor": false}, {"identifier": "sparse", "parameters": "(long id, double[] weights, int fullSize, int compressedSize)", "modifiers": "public static", "return": "WeightedInput", "signature": "WeightedInput sparse(long id, double[] weights, int fullSize, int compressedSize)", "full_signature": "public static WeightedInput sparse(long id, double[] weights, int fullSize, int compressedSize)", "class_method_signature": "WeightedInput.sparse(long id, double[] weights, int fullSize, int compressedSize)", "testcase": false, "constructor": false}, {"identifier": "dense", "parameters": "(long id, double[] weights, double skipValue)", "modifiers": "public static", "return": "WeightedInput", "signature": "WeightedInput dense(long id, double[] weights, double skipValue)", "full_signature": "public static WeightedInput dense(long id, double[] weights, double skipValue)", "class_method_signature": "WeightedInput.dense(long id, double[] weights, double skipValue)", "testcase": false, "constructor": false}, {"identifier": "dense", "parameters": "(long id, double[] weights)", "modifiers": "public static", "return": "WeightedInput", "signature": "WeightedInput dense(long id, double[] weights)", "full_signature": "public static WeightedInput dense(long id, double[] weights)", "class_method_signature": "WeightedInput.dense(long id, double[] weights)", "testcase": false, "constructor": false}, {"identifier": "prepareDenseWeights", "parameters": "(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "modifiers": "static", "return": "WeightedInput[]", "signature": "WeightedInput[] prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "full_signature": "static WeightedInput[] prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "class_method_signature": "WeightedInput.prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "testcase": false, "constructor": false}, {"identifier": "skipSize", "parameters": "(Double skipValue, boolean skipNan, List<Number> weightList)", "modifiers": "private static", "return": "long", "signature": "long skipSize(Double skipValue, boolean skipNan, List<Number> weightList)", "full_signature": "private static long skipSize(Double skipValue, boolean skipNan, List<Number> weightList)", "class_method_signature": "WeightedInput.skipSize(Double skipValue, boolean skipNan, List<Number> weightList)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(WeightedInput o)", "modifiers": "public", "return": "int", "signature": "int compareTo(WeightedInput o)", "full_signature": "public int compareTo(WeightedInput o)", "class_method_signature": "WeightedInput.compareTo(WeightedInput o)", "testcase": false, "constructor": false}, {"identifier": "sumSquareDeltaSkip", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult sumSquareDeltaSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "full_signature": "public SimilarityResult sumSquareDeltaSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "class_method_signature": "WeightedInput.sumSquareDeltaSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "sumSquareDelta", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult sumSquareDelta(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "full_signature": "public SimilarityResult sumSquareDelta(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "class_method_signature": "WeightedInput.sumSquareDelta(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "cosineSquaresSkip", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult cosineSquaresSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "full_signature": "public SimilarityResult cosineSquaresSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "class_method_signature": "WeightedInput.cosineSquaresSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, double skipValue, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "cosineSquares", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult cosineSquares(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "full_signature": "public SimilarityResult cosineSquares(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "class_method_signature": "WeightedInput.cosineSquares(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "pearson", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult pearson(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "full_signature": "public SimilarityResult pearson(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "class_method_signature": "WeightedInput.pearson(RleDecoder decoder, double similarityCutoff, WeightedInput other, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "pearsonSkip", "parameters": "(RleDecoder decoder, double similarityCutoff, WeightedInput other, Double skipValue, boolean bidirectional)", "modifiers": "public", "return": "SimilarityResult", "signature": "SimilarityResult pearsonSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, Double skipValue, boolean bidirectional)", "full_signature": "public SimilarityResult pearsonSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, Double skipValue, boolean bidirectional)", "class_method_signature": "WeightedInput.pearsonSkip(RleDecoder decoder, double similarityCutoff, WeightedInput other, Double skipValue, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getId()", "full_signature": "@Override public long getId()", "class_method_signature": "WeightedInput.getId()", "testcase": false, "constructor": false}], "file": "algo/src/main/java/org/neo4j/graphalgo/similarity/WeightedInput.java"}, "focal_method": {"identifier": "prepareDenseWeights", "parameters": "(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "modifiers": "static", "return": "WeightedInput[]", "body": "static  WeightedInput[] prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue) {\n        WeightedInput[] inputs = new WeightedInput[data.size()];\n        int idx = 0;\n\n        boolean skipAnything = skipValue != null;\n        boolean skipNan = skipAnything && Double.isNaN(skipValue);\n\n        for (Map<String, Object> row : data) {\n            List<Number> weightList = SimilarityInput.extractValues(row.get(\"weights\"));\n\n            long weightsSize = skipAnything ? skipSize(skipValue, skipNan, weightList) : weightList.size();\n\n            if (weightsSize > degreeCutoff) {\n                double[] weights = Weights.buildWeights(weightList);\n                inputs[idx++] = skipValue == null ? dense((Long) row.get(\"item\"), weights) : dense((Long) row.get(\"item\"), weights, skipValue);\n            }\n        }\n        if (idx != inputs.length) inputs = Arrays.copyOf(inputs, idx);\n        Arrays.sort(inputs);\n        return inputs;\n    }", "signature": "WeightedInput[] prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "full_signature": "static WeightedInput[] prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "class_method_signature": "WeightedInput.prepareDenseWeights(List<Map<String, Object>> data, long degreeCutoff, Double skipValue)", "testcase": false, "constructor": false, "invocations": ["size", "isNaN", "extractValues", "get", "skipSize", "size", "buildWeights", "dense", "get", "dense", "get", "copyOf", "sort"]}, "repository": {"repo_id": 82291828, "url": "https://github.com/neo4j-contrib/neo4j-graph-algorithms", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 689, "size": 43359, "license": "licensed"}}