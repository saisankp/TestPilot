{"test_class": {"identifier": "AveragePrecisionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PreferenceData<String, String> prefs = SimplePreferenceData.load(Stream.of(\n            tuple(\"a\", \"A\", 1.0),\n            tuple(\"a\", \"B\", 1.0),\n            tuple(\"a\", \"C\", 1.0),\n            tuple(\"a\", \"D\", 1.0),\n            tuple(\"b\", \"A\", 1.0)\n    ));", "modifier": "private final", "type": "PreferenceData<String, String>", "declarator": "prefs = SimplePreferenceData.load(Stream.of(\n            tuple(\"a\", \"A\", 1.0),\n            tuple(\"a\", \"B\", 1.0),\n            tuple(\"a\", \"C\", 1.0),\n            tuple(\"a\", \"D\", 1.0),\n            tuple(\"b\", \"A\", 1.0)\n    ))", "var_name": "prefs"}, {"original_string": "private final RecommendationMetric<String, String> ap = new AveragePrecision<>(5, new BinaryRelevanceModel<>(false, prefs, 1.0));", "modifier": "private final", "type": "RecommendationMetric<String, String>", "declarator": "ap = new AveragePrecision<>(5, new BinaryRelevanceModel<>(false, prefs, 1.0))", "var_name": "ap"}], "file": "RankSys-metrics/src/test/java/es/uam/eps/ir/ranksys/metrics/basic/AveragePrecisionTest.java"}, "test_case": {"identifier": "testA", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testA() {\n        Recommendation<String, String> recA = new Recommendation<>(\"a\", Arrays.asList(\n                Tuples.tuple(\"A\", 9.0),\n                Tuples.tuple(\"L\", 8.0),\n                Tuples.tuple(\"B\", 7.0),\n                Tuples.tuple(\"N\", 6.0),\n                Tuples.tuple(\"O\", 5.0),\n                Tuples.tuple(\"P\", 4.0),\n                Tuples.tuple(\"Q\", 3.0),\n                Tuples.tuple(\"L\", 2.0),\n                Tuples.tuple(\"C\", 1.0),\n                Tuples.tuple(\"R\", 0.0)\n        ));\n\n        Assert.assertEquals(5.0 / 12.0, ap.evaluate(recA), 1e-12);\n    }", "signature": "void testA()", "full_signature": "@Test public void testA()", "class_method_signature": "AveragePrecisionTest.testA()", "testcase": true, "constructor": false, "invocations": ["asList", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "assertEquals", "evaluate"]}, "focal_class": {"identifier": "AveragePrecision", "superclass": "extends AbstractRecommendationMetric<U, I>", "interfaces": "", "fields": [{"original_string": "private final IdealRelevanceModel<U, I> relModel;", "modifier": "private final", "type": "IdealRelevanceModel<U, I>", "declarator": "relModel", "var_name": "relModel"}, {"original_string": "private final int cutoff;", "modifier": "private final", "type": "int", "declarator": "cutoff", "var_name": "cutoff"}], "methods": [{"identifier": "AveragePrecision", "parameters": "(int cutoff, IdealRelevanceModel<U, I> relevanceModel)", "modifiers": "public", "return": "", "signature": " AveragePrecision(int cutoff, IdealRelevanceModel<U, I> relevanceModel)", "full_signature": "public  AveragePrecision(int cutoff, IdealRelevanceModel<U, I> relevanceModel)", "class_method_signature": "AveragePrecision.AveragePrecision(int cutoff, IdealRelevanceModel<U, I> relevanceModel)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(Recommendation<U, I> recommendation)", "modifiers": "@Override public", "return": "double", "signature": "double evaluate(Recommendation<U, I> recommendation)", "full_signature": "@Override public double evaluate(Recommendation<U, I> recommendation)", "class_method_signature": "AveragePrecision.evaluate(Recommendation<U, I> recommendation)", "testcase": false, "constructor": false}], "file": "RankSys-metrics/src/main/java/es/uam/eps/ir/ranksys/metrics/basic/AveragePrecision.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Recommendation<U, I> recommendation)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double evaluate(Recommendation<U, I> recommendation) {\n        UserIdealRelevanceModel<U, I> userRelModel = relModel.getModel(recommendation.getUser());\n\n        int nRelItems = min(cutoff, userRelModel.getRelevantItems().size());\n        if (nRelItems == 0) {\n            return 0.0;\n        }\n\n        double ap = 0;\n        int relCount = 0;\n        int rank = 0;\n\n        for (Tuple2od<I> pair : recommendation.getItems()) {\n            rank++;\n            if (userRelModel.isRelevant(pair.v1)) {\n                relCount++;\n                ap += relCount / (double) rank;\n            }\n            if (rank == cutoff) {\n                break;\n            }\n        }\n\n        return ap / nRelItems;\n    }", "signature": "double evaluate(Recommendation<U, I> recommendation)", "full_signature": "@Override public double evaluate(Recommendation<U, I> recommendation)", "class_method_signature": "AveragePrecision.evaluate(Recommendation<U, I> recommendation)", "testcase": false, "constructor": false, "invocations": ["getModel", "getUser", "min", "size", "getRelevantItems", "getItems", "isRelevant"]}, "repository": {"repo_id": 29397553, "url": "https://github.com/RankSys/RankSys", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 248, "size": 2033, "license": "licensed"}}