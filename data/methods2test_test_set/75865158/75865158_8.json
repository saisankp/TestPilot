{"test_class": {"identifier": "PuzzleTest", "superclass": "", "interfaces": "", "fields": [], "file": "puzzlesolver/src/test/java/uk/co/samuelpratt/sudoku/puzzlesolver/PuzzleTest.java"}, "test_case": {"identifier": "InvalidCol_SetNumber_IllegalArgumentExceptionThrown", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void InvalidCol_SetNumber_IllegalArgumentExceptionThrown() {\n        Puzzle sut = new Puzzle();\n        Point invalidPoint = new Point(Puzzle.SIZE + 1, 0);\n        Integer validNumber = 0;\n\n        sut.setNumber(invalidPoint, validNumber);\n    }", "signature": "void InvalidCol_SetNumber_IllegalArgumentExceptionThrown()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void InvalidCol_SetNumber_IllegalArgumentExceptionThrown()", "class_method_signature": "PuzzleTest.InvalidCol_SetNumber_IllegalArgumentExceptionThrown()", "testcase": true, "constructor": false, "invocations": ["setNumber"]}, "focal_class": {"identifier": "Puzzle", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SIZE = 9;", "modifier": "public static final", "type": "int", "declarator": "SIZE = 9", "var_name": "SIZE"}, {"original_string": "static final int MAX_VALUE = 9;", "modifier": "static final", "type": "int", "declarator": "MAX_VALUE = 9", "var_name": "MAX_VALUE"}, {"original_string": "static final int MIN_VALUE = 1;", "modifier": "static final", "type": "int", "declarator": "MIN_VALUE = 1", "var_name": "MIN_VALUE"}, {"original_string": "private Integer[][] Numbers;", "modifier": "private", "type": "Integer[][]", "declarator": "Numbers", "var_name": "Numbers"}], "methods": [{"identifier": "Puzzle", "parameters": "()", "modifiers": "public", "return": "", "signature": " Puzzle()", "full_signature": "public  Puzzle()", "class_method_signature": "Puzzle.Puzzle()", "testcase": false, "constructor": true}, {"identifier": "Puzzle", "parameters": "(Puzzle toCopy)", "modifiers": "", "return": "", "signature": " Puzzle(Puzzle toCopy)", "full_signature": "  Puzzle(Puzzle toCopy)", "class_method_signature": "Puzzle.Puzzle(Puzzle toCopy)", "testcase": false, "constructor": true}, {"identifier": "Puzzle", "parameters": "(Integer[][] problem)", "modifiers": "public", "return": "", "signature": " Puzzle(Integer[][] problem)", "full_signature": "public  Puzzle(Integer[][] problem)", "class_method_signature": "Puzzle.Puzzle(Integer[][] problem)", "testcase": false, "constructor": true}, {"identifier": "initNumbers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initNumbers()", "full_signature": "private void initNumbers()", "class_method_signature": "Puzzle.initNumbers()", "testcase": false, "constructor": false}, {"identifier": "AssertValidIndexes", "parameters": "(Point point)", "modifiers": "private", "return": "void", "signature": "void AssertValidIndexes(Point point)", "full_signature": "private void AssertValidIndexes(Point point)", "class_method_signature": "Puzzle.AssertValidIndexes(Point point)", "testcase": false, "constructor": false}, {"identifier": "setNumber", "parameters": "(Point point, Integer value)", "modifiers": "public", "return": "void", "signature": "void setNumber(Point point, Integer value)", "full_signature": "public void setNumber(Point point, Integer value)", "class_method_signature": "Puzzle.setNumber(Point point, Integer value)", "testcase": false, "constructor": false}, {"identifier": "eraseNumber", "parameters": "(Point point)", "modifiers": "", "return": "void", "signature": "void eraseNumber(Point point)", "full_signature": " void eraseNumber(Point point)", "class_method_signature": "Puzzle.eraseNumber(Point point)", "testcase": false, "constructor": false}, {"identifier": "assertValidValue", "parameters": "(Integer value)", "modifiers": "private", "return": "void", "signature": "void assertValidValue(Integer value)", "full_signature": "private void assertValidValue(Integer value)", "class_method_signature": "Puzzle.assertValidValue(Integer value)", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "(Point point)", "modifiers": "public", "return": "Integer", "signature": "Integer getNumber(Point point)", "full_signature": "public Integer getNumber(Point point)", "class_method_signature": "Puzzle.getNumber(Point point)", "testcase": false, "constructor": false}, {"identifier": "findNextUnassignedLocation", "parameters": "()", "modifiers": "", "return": "Point", "signature": "Point findNextUnassignedLocation()", "full_signature": " Point findNextUnassignedLocation()", "class_method_signature": "Puzzle.findNextUnassignedLocation()", "testcase": false, "constructor": false}, {"identifier": "noConflicts", "parameters": "(Point point, Integer number)", "modifiers": "", "return": "Boolean", "signature": "Boolean noConflicts(Point point, Integer number)", "full_signature": " Boolean noConflicts(Point point, Integer number)", "class_method_signature": "Puzzle.noConflicts(Point point, Integer number)", "testcase": false, "constructor": false}, {"identifier": "isRowConflict", "parameters": "(int y, Integer number)", "modifiers": "private", "return": "boolean", "signature": "boolean isRowConflict(int y, Integer number)", "full_signature": "private boolean isRowConflict(int y, Integer number)", "class_method_signature": "Puzzle.isRowConflict(int y, Integer number)", "testcase": false, "constructor": false}, {"identifier": "isColumnConflict", "parameters": "(int x, Integer number)", "modifiers": "private", "return": "boolean", "signature": "boolean isColumnConflict(int x, Integer number)", "full_signature": "private boolean isColumnConflict(int x, Integer number)", "class_method_signature": "Puzzle.isColumnConflict(int x, Integer number)", "testcase": false, "constructor": false}], "file": "puzzlesolver/src/main/java/uk/co/samuelpratt/sudoku/puzzlesolver/Puzzle.java"}, "focal_method": {"identifier": "setNumber", "parameters": "(Point point, Integer value)", "modifiers": "public", "return": "void", "body": "public void setNumber(Point point, Integer value) throws IllegalArgumentException {\n        AssertValidIndexes(point);\n        assertValidValue(value);\n        Numbers[point.x][point.y] = value;\n    }", "signature": "void setNumber(Point point, Integer value)", "full_signature": "public void setNumber(Point point, Integer value)", "class_method_signature": "Puzzle.setNumber(Point point, Integer value)", "testcase": false, "constructor": false, "invocations": ["AssertValidIndexes", "assertValidValue"]}, "repository": {"repo_id": 75865158, "url": "https://github.com/samuelpratt/Sudoku", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 17, "size": 96743, "license": "licensed"}}