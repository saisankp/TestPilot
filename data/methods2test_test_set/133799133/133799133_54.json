{"test_class": {"identifier": "PoseidasCoreConfigFormTest", "superclass": "extends AbstractConfigFileTest", "interfaces": "", "fields": [], "file": "configuration-wizard/src/test/java/de/governikus/eumw/configuration/wizard/web/model/poseidasxml/PoseidasCoreConfigFormTest.java"}, "test_case": {"identifier": "testReadPoseidasXmlConfiguration", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testReadPoseidasXmlConfiguration()\n  {\n    URL poseidasXmlUrl = getPoseidasXmlFilePath(CONFIG_DIR_SUCCESS);\n    PoseidasCoreConfiguration poseidasCoreConfiguration = getPoseidasCoreConfiguration(poseidasXmlUrl);\n    PoseidasCoreConfigForm poseidasCoreConfigForm = new PoseidasCoreConfigForm();\n    poseidasCoreConfigForm.loadConfiguration(new File(poseidasXmlUrl.getFile()));\n\n    final String serverUrl = \"https://myhost:8443/eidas-middleware\";\n    EQUAL_NULL_CHECK.accept(serverUrl, poseidasCoreConfiguration.getServerUrl());\n    EQUAL_NULL_CHECK.accept(poseidasCoreConfiguration.getServerUrl().trim(),\n                            poseidasCoreConfigForm.getCoreConfig().getServerUrl());\n\n    final int maxPendingRequests = 500;\n    Assertions.assertEquals(maxPendingRequests, poseidasCoreConfiguration.getSessionMaxPendingRequests());\n\n    checkTimerConfigurationForConfigDir1(poseidasCoreConfiguration, poseidasCoreConfigForm);\n\n    Assertions.assertTrue(poseidasCoreConfigForm.getServiceProviders().size() == 1);\n    Assertions.assertNotNull(poseidasCoreConfigForm.getServiceProviders().get(0));\n    Assertions.assertEquals(1, poseidasCoreConfiguration.getServiceProvider().size());\n    checkThatServiceProviderTypesAreEqualForConfigDir1(poseidasCoreConfiguration.getServiceProvider().get(0),\n                                                       poseidasCoreConfigForm.getServiceProviders().get(0));\n  }", "signature": "void testReadPoseidasXmlConfiguration()", "full_signature": "@Test void testReadPoseidasXmlConfiguration()", "class_method_signature": "PoseidasCoreConfigFormTest.testReadPoseidasXmlConfiguration()", "testcase": true, "constructor": false, "invocations": ["getPoseidasXmlFilePath", "getPoseidasCoreConfiguration", "loadConfiguration", "getFile", "accept", "getServerUrl", "accept", "trim", "getServerUrl", "getServerUrl", "getCoreConfig", "assertEquals", "getSessionMaxPendingRequests", "checkTimerConfigurationForConfigDir1", "assertTrue", "size", "getServiceProviders", "assertNotNull", "get", "getServiceProviders", "assertEquals", "size", "getServiceProvider", "checkThatServiceProviderTypesAreEqualForConfigDir1", "get", "getServiceProvider", "get", "getServiceProviders"]}, "focal_class": {"identifier": "PoseidasCoreConfigForm", "superclass": "extends AbstractConfigurationLoader", "interfaces": "", "fields": [{"original_string": "public static final int UNIT = 11;", "modifier": "public static final", "type": "int", "declarator": "UNIT = 11", "var_name": "UNIT"}, {"original_string": "public static final int LENGTH = 2;", "modifier": "public static final", "type": "int", "declarator": "LENGTH = 2", "var_name": "LENGTH"}, {"original_string": "public static final int SESSION_MAX_PENDING_REQUESTS = 500;", "modifier": "public static final", "type": "int", "declarator": "SESSION_MAX_PENDING_REQUESTS = 500", "var_name": "SESSION_MAX_PENDING_REQUESTS"}, {"original_string": "public static final int HOURS_REFRESH_BEFORE_EXPIRE = 48;", "modifier": "public static final", "type": "int", "declarator": "HOURS_REFRESH_BEFORE_EXPIRE = 48", "var_name": "HOURS_REFRESH_BEFORE_EXPIRE"}, {"original_string": "private MultipartFile poseidasConfigXmlFile;", "modifier": "private", "type": "MultipartFile", "declarator": "poseidasConfigXmlFile", "var_name": "poseidasConfigXmlFile"}, {"original_string": "private List<ServiceProviderForm> serviceProviders = new ArrayList<>();", "modifier": "private", "type": "List<ServiceProviderForm>", "declarator": "serviceProviders = new ArrayList<>()", "var_name": "serviceProviders"}, {"original_string": "private ServiceProviderForm commonServiceProviderData = new ServiceProviderForm();", "modifier": "private", "type": "ServiceProviderForm", "declarator": "commonServiceProviderData = new ServiceProviderForm()", "var_name": "commonServiceProviderData"}, {"original_string": "private MinimalServiceProviderForm minimalServiceProviderForm = new MinimalServiceProviderForm();", "modifier": "private", "type": "MinimalServiceProviderForm", "declarator": "minimalServiceProviderForm = new MinimalServiceProviderForm()", "var_name": "minimalServiceProviderForm"}, {"original_string": "private PoseidasCoreConfiguration coreConfig;", "modifier": "private", "type": "PoseidasCoreConfiguration", "declarator": "coreConfig", "var_name": "coreConfig"}], "methods": [{"identifier": "PoseidasCoreConfigForm", "parameters": "()", "modifiers": "public", "return": "", "signature": " PoseidasCoreConfigForm()", "full_signature": "public  PoseidasCoreConfigForm()", "class_method_signature": "PoseidasCoreConfigForm.PoseidasCoreConfigForm()", "testcase": false, "constructor": true}, {"identifier": "loadConfiguration", "parameters": "(final File poseidasXml)", "modifiers": "public", "return": "boolean", "signature": "boolean loadConfiguration(final File poseidasXml)", "full_signature": "public boolean loadConfiguration(final File poseidasXml)", "class_method_signature": "PoseidasCoreConfigForm.loadConfiguration(final File poseidasXml)", "testcase": false, "constructor": false}, {"identifier": "loadConfiguration", "parameters": "(final File poseidasXml, String entityIdInt)", "modifiers": "public", "return": "boolean", "signature": "boolean loadConfiguration(final File poseidasXml, String entityIdInt)", "full_signature": "public boolean loadConfiguration(final File poseidasXml, String entityIdInt)", "class_method_signature": "PoseidasCoreConfigForm.loadConfiguration(final File poseidasXml, String entityIdInt)", "testcase": false, "constructor": false}, {"identifier": "loadConfiguration", "parameters": "(MultipartFile configurationFile)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean loadConfiguration(MultipartFile configurationFile)", "full_signature": "@Override public boolean loadConfiguration(MultipartFile configurationFile)", "class_method_signature": "PoseidasCoreConfigForm.loadConfiguration(MultipartFile configurationFile)", "testcase": false, "constructor": false}, {"identifier": "setServiceProviderFormValues", "parameters": "(List<ServiceProviderType> serviceProviderTypeList,\n                                            String publicServiceProviderEntityID)", "modifiers": "private", "return": "void", "signature": "void setServiceProviderFormValues(List<ServiceProviderType> serviceProviderTypeList,\n                                            String publicServiceProviderEntityID)", "full_signature": "private void setServiceProviderFormValues(List<ServiceProviderType> serviceProviderTypeList,\n                                            String publicServiceProviderEntityID)", "class_method_signature": "PoseidasCoreConfigForm.setServiceProviderFormValues(List<ServiceProviderType> serviceProviderTypeList,\n                                            String publicServiceProviderEntityID)", "testcase": false, "constructor": false}, {"identifier": "getSslKeysForm", "parameters": "(ServiceProviderType serviceProviderType, String entityID)", "modifiers": "private", "return": "Optional<SslKeysForm>", "signature": "Optional<SslKeysForm> getSslKeysForm(ServiceProviderType serviceProviderType, String entityID)", "full_signature": "private Optional<SslKeysForm> getSslKeysForm(ServiceProviderType serviceProviderType, String entityID)", "class_method_signature": "PoseidasCoreConfigForm.getSslKeysForm(ServiceProviderType serviceProviderType, String entityID)", "testcase": false, "constructor": false}, {"identifier": "getSslKeysForm", "parameters": "(List<SslKeysType> sslKeysTypeList, String entityID)", "modifiers": "private", "return": "Optional<SslKeysForm>", "signature": "Optional<SslKeysForm> getSslKeysForm(List<SslKeysType> sslKeysTypeList, String entityID)", "full_signature": "private Optional<SslKeysForm> getSslKeysForm(List<SslKeysType> sslKeysTypeList, String entityID)", "class_method_signature": "PoseidasCoreConfigForm.getSslKeysForm(List<SslKeysType> sslKeysTypeList, String entityID)", "testcase": false, "constructor": false}, {"identifier": "getKeystore", "parameters": "(SslKeysType sslKeysType, String entityID)", "modifiers": "private", "return": "Optional<KeystoreForm>", "signature": "Optional<KeystoreForm> getKeystore(SslKeysType sslKeysType, String entityID)", "full_signature": "private Optional<KeystoreForm> getKeystore(SslKeysType sslKeysType, String entityID)", "class_method_signature": "PoseidasCoreConfigForm.getKeystore(SslKeysType sslKeysType, String entityID)", "testcase": false, "constructor": false}, {"identifier": "getPkiConnectorConfig", "parameters": "(ServiceProviderType serviceProviderType)", "modifiers": "private", "return": "Optional<PkiConnectorConfigurationType>", "signature": "Optional<PkiConnectorConfigurationType> getPkiConnectorConfig(ServiceProviderType serviceProviderType)", "full_signature": "private Optional<PkiConnectorConfigurationType> getPkiConnectorConfig(ServiceProviderType serviceProviderType)", "class_method_signature": "PoseidasCoreConfigForm.getPkiConnectorConfig(ServiceProviderType serviceProviderType)", "testcase": false, "constructor": false}, {"identifier": "getDvcaProvider", "parameters": "(ServiceProviderType serviceProviderType)", "modifiers": "private", "return": "DvcaProvider", "signature": "DvcaProvider getDvcaProvider(ServiceProviderType serviceProviderType)", "full_signature": "private DvcaProvider getDvcaProvider(ServiceProviderType serviceProviderType)", "class_method_signature": "PoseidasCoreConfigForm.getDvcaProvider(ServiceProviderType serviceProviderType)", "testcase": false, "constructor": false}, {"identifier": "getServiceProvidersFromConfig", "parameters": "()", "modifiers": "private", "return": "Optional<List<ServiceProviderType>>", "signature": "Optional<List<ServiceProviderType>> getServiceProvidersFromConfig()", "full_signature": "private Optional<List<ServiceProviderType>> getServiceProvidersFromConfig()", "class_method_signature": "PoseidasCoreConfigForm.getServiceProvidersFromConfig()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(String directory)", "modifiers": "public", "return": "void", "signature": "void save(String directory)", "full_signature": "public void save(String directory)", "class_method_signature": "PoseidasCoreConfigForm.save(String directory)", "testcase": false, "constructor": false}, {"identifier": "fillCoreConfigWithValues", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fillCoreConfigWithValues()", "full_signature": "private void fillCoreConfigWithValues()", "class_method_signature": "PoseidasCoreConfigForm.fillCoreConfigWithValues()", "testcase": false, "constructor": false}, {"identifier": "addDvcaServices", "parameters": "(String dvcaProvider, PkiConnectorConfigurationType pki)", "modifiers": "private", "return": "void", "signature": "void addDvcaServices(String dvcaProvider, PkiConnectorConfigurationType pki)", "full_signature": "private void addDvcaServices(String dvcaProvider, PkiConnectorConfigurationType pki)", "class_method_signature": "PoseidasCoreConfigForm.addDvcaServices(String dvcaProvider, PkiConnectorConfigurationType pki)", "testcase": false, "constructor": false}, {"identifier": "createSslKeys", "parameters": "(ServiceProviderForm serviceProvider)", "modifiers": "private", "return": "SslKeysType", "signature": "SslKeysType createSslKeys(ServiceProviderForm serviceProvider)", "full_signature": "private SslKeysType createSslKeys(ServiceProviderForm serviceProvider)", "class_method_signature": "PoseidasCoreConfigForm.createSslKeys(ServiceProviderForm serviceProvider)", "testcase": false, "constructor": false}, {"identifier": "setPoseidasConfigXmlFile", "parameters": "(MultipartFile poseidasConfigXmlFile)", "modifiers": "public", "return": "void", "signature": "void setPoseidasConfigXmlFile(MultipartFile poseidasConfigXmlFile)", "full_signature": "public void setPoseidasConfigXmlFile(MultipartFile poseidasConfigXmlFile)", "class_method_signature": "PoseidasCoreConfigForm.setPoseidasConfigXmlFile(MultipartFile poseidasConfigXmlFile)", "testcase": false, "constructor": false}], "file": "configuration-wizard/src/main/java/de/governikus/eumw/configuration/wizard/web/model/poseidasxml/PoseidasCoreConfigForm.java"}, "focal_method": {"identifier": "loadConfiguration", "parameters": "(final File poseidasXml)", "modifiers": "public", "return": "boolean", "body": "public boolean loadConfiguration(final File poseidasXml)\n  {\n    return loadConfiguration(poseidasXml, \"\");\n  }", "signature": "boolean loadConfiguration(final File poseidasXml)", "full_signature": "public boolean loadConfiguration(final File poseidasXml)", "class_method_signature": "PoseidasCoreConfigForm.loadConfiguration(final File poseidasXml)", "testcase": false, "constructor": false, "invocations": ["loadConfiguration"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}