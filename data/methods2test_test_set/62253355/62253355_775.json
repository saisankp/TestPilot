{"test_class": {"identifier": "DatasetRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private DatasetRest rest;", "modifier": "private", "type": "DatasetRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private OrmFactory<Branch> branchFactory;", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory", "var_name": "branchFactory"}, {"original_string": "private DatasetRecord record1;", "modifier": "private", "type": "DatasetRecord", "declarator": "record1", "var_name": "record1"}, {"original_string": "private DatasetRecord record2;", "modifier": "private", "type": "DatasetRecord", "declarator": "record2", "var_name": "record2"}, {"original_string": "private DatasetRecord record3;", "modifier": "private", "type": "DatasetRecord", "declarator": "record3", "var_name": "record3"}, {"original_string": "private Commit commit;", "modifier": "private", "type": "Commit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private Branch branch;", "modifier": "private", "type": "Branch", "declarator": "branch", "var_name": "branch"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private CreateActivity createActivity;", "modifier": "private", "type": "CreateActivity", "declarator": "createActivity", "var_name": "createActivity"}, {"original_string": "private DeleteActivity deleteActivity;", "modifier": "private", "type": "DeleteActivity", "declarator": "deleteActivity", "var_name": "deleteActivity"}, {"original_string": "private IRI errorIRI;", "modifier": "private", "type": "IRI", "declarator": "errorIRI", "var_name": "errorIRI"}, {"original_string": "private IRI localIRI;", "modifier": "private", "type": "IRI", "declarator": "localIRI", "var_name": "localIRI"}, {"original_string": "private IRI ontologyRecordIRI;", "modifier": "private", "type": "IRI", "declarator": "ontologyRecordIRI", "var_name": "ontologyRecordIRI"}, {"original_string": "private IRI branchIRI;", "modifier": "private", "type": "IRI", "declarator": "branchIRI", "var_name": "branchIRI"}, {"original_string": "private IRI commitIRI;", "modifier": "private", "type": "IRI", "declarator": "commitIRI", "var_name": "commitIRI"}, {"original_string": "@Mock\n    private SesameTransformer transformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private DatasetManager datasetManager;", "modifier": "@Mock\n    private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "@Mock\n    private PaginatedSearchResults<DatasetRecord> results;", "modifier": "@Mock\n    private", "type": "PaginatedSearchResults<DatasetRecord>", "declarator": "results", "var_name": "results"}, {"original_string": "@Mock\n    private BNodeService service;", "modifier": "@Mock\n    private", "type": "BNodeService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private CatalogProvUtils provUtils;", "modifier": "@Mock\n    private", "type": "CatalogProvUtils", "declarator": "provUtils", "var_name": "provUtils"}, {"original_string": "@Mock\n    private RDFImportService importService;", "modifier": "@Mock\n    private", "type": "RDFImportService", "declarator": "importService", "var_name": "importService"}], "file": "com.mobi.dataset.rest/src/test/java/com/mobi/dataset/rest/DatasetRestTest.java"}, "test_case": {"identifier": "getDatasetRecordsWithErrorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDatasetRecordsWithErrorTest() {\n        // Setup:\n        when(datasetManager.getDatasetRecords(any(DatasetPaginatedSearchParams.class))).thenThrow(new MobiException());\n\n        Response response = target().path(\"datasets\").request().get();\n        assertEquals(response.getStatus(), 500);\n    }", "signature": "void getDatasetRecordsWithErrorTest()", "full_signature": "@Test public void getDatasetRecordsWithErrorTest()", "class_method_signature": "DatasetRestTest.getDatasetRecordsWithErrorTest()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getDatasetRecords", "any", "get", "request", "path", "target", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "DatasetRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatasetManager manager;", "modifier": "private", "type": "DatasetManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private CatalogConfigProvider configProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "private CatalogManager catalogManager;", "modifier": "private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private BNodeService bNodeService;", "modifier": "private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private CatalogProvUtils provUtils;", "modifier": "private", "type": "CatalogProvUtils", "declarator": "provUtils", "var_name": "provUtils"}, {"original_string": "private RDFImportService importService;", "modifier": "private", "type": "RDFImportService", "declarator": "importService", "var_name": "importService"}], "methods": [{"identifier": "setManager", "parameters": "(DatasetManager manager)", "modifiers": "@Reference", "return": "void", "signature": "void setManager(DatasetManager manager)", "full_signature": "@Reference void setManager(DatasetManager manager)", "class_method_signature": "DatasetRest.setManager(DatasetManager manager)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "DatasetRest.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "setConfigProvider", "parameters": "(CatalogConfigProvider configProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setConfigProvider(CatalogConfigProvider configProvider)", "full_signature": "@Reference void setConfigProvider(CatalogConfigProvider configProvider)", "class_method_signature": "DatasetRest.setConfigProvider(CatalogConfigProvider configProvider)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "DatasetRest.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(SesameTransformer transformer)", "modifiers": "@Reference", "return": "void", "signature": "void setTransformer(SesameTransformer transformer)", "full_signature": "@Reference void setTransformer(SesameTransformer transformer)", "class_method_signature": "DatasetRest.setTransformer(SesameTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "setBNodeService", "parameters": "(BNodeService bNodeService)", "modifiers": "@Reference", "return": "void", "signature": "void setBNodeService(BNodeService bNodeService)", "full_signature": "@Reference void setBNodeService(BNodeService bNodeService)", "class_method_signature": "DatasetRest.setBNodeService(BNodeService bNodeService)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "DatasetRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setMf", "parameters": "(ModelFactory mf)", "modifiers": "@Reference", "return": "void", "signature": "void setMf(ModelFactory mf)", "full_signature": "@Reference void setMf(ModelFactory mf)", "class_method_signature": "DatasetRest.setMf(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setProvUtils", "parameters": "(CatalogProvUtils provUtils)", "modifiers": "@Reference", "return": "void", "signature": "void setProvUtils(CatalogProvUtils provUtils)", "full_signature": "@Reference void setProvUtils(CatalogProvUtils provUtils)", "class_method_signature": "DatasetRest.setProvUtils(CatalogProvUtils provUtils)", "testcase": false, "constructor": false}, {"identifier": "setImportService", "parameters": "(RDFImportService importService)", "modifiers": "@Reference", "return": "void", "signature": "void setImportService(RDFImportService importService)", "full_signature": "@Reference void setImportService(RDFImportService importService)", "class_method_signature": "DatasetRest.setImportService(RDFImportService importService)", "testcase": false, "constructor": false}, {"identifier": "getDatasetRecords", "parameters": "(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves all DatasetRecords in the local Catalog\") public", "return": "Response", "signature": "Response getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves all DatasetRecords in the local Catalog\") public Response getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "class_method_signature": "DatasetRest.getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "testcase": false, "constructor": false}, {"identifier": "createDatasetRecord", "parameters": "(@Context ContainerRequestContext context,\n                                 @FormDataParam(\"title\") String title,\n                                 @FormDataParam(\"repositoryId\") String repositoryId,\n                                 @FormDataParam(\"datasetIRI\") String datasetIRI,\n                                 @FormDataParam(\"description\") String description,\n                                 @FormDataParam(\"markdown\") String markdown,\n                                 @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                                 @FormDataParam(\"ontologies\") List<FormDataBodyPart> ontologies)", "modifiers": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Creates a new DatasetRecord in the local Catalog and Dataset in the specified repository\") public", "return": "Response", "signature": "Response createDatasetRecord(@Context ContainerRequestContext context,\n                                 @FormDataParam(\"title\") String title,\n                                 @FormDataParam(\"repositoryId\") String repositoryId,\n                                 @FormDataParam(\"datasetIRI\") String datasetIRI,\n                                 @FormDataParam(\"description\") String description,\n                                 @FormDataParam(\"markdown\") String markdown,\n                                 @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                                 @FormDataParam(\"ontologies\") List<FormDataBodyPart> ontologies)", "full_signature": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Creates a new DatasetRecord in the local Catalog and Dataset in the specified repository\") public Response createDatasetRecord(@Context ContainerRequestContext context,\n                                 @FormDataParam(\"title\") String title,\n                                 @FormDataParam(\"repositoryId\") String repositoryId,\n                                 @FormDataParam(\"datasetIRI\") String datasetIRI,\n                                 @FormDataParam(\"description\") String description,\n                                 @FormDataParam(\"markdown\") String markdown,\n                                 @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                                 @FormDataParam(\"ontologies\") List<FormDataBodyPart> ontologies)", "class_method_signature": "DatasetRest.createDatasetRecord(@Context ContainerRequestContext context,\n                                 @FormDataParam(\"title\") String title,\n                                 @FormDataParam(\"repositoryId\") String repositoryId,\n                                 @FormDataParam(\"datasetIRI\") String datasetIRI,\n                                 @FormDataParam(\"description\") String description,\n                                 @FormDataParam(\"markdown\") String markdown,\n                                 @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                                 @FormDataParam(\"ontologies\") List<FormDataBodyPart> ontologies)", "testcase": false, "constructor": false}, {"identifier": "getDatasetRecord", "parameters": "(@PathParam(\"datasetRecordId\") String datasetRecordId)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{datasetRecordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Gets a specific DatasetRecord from the local Catalog\") public", "return": "Response", "signature": "Response getDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{datasetRecordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Gets a specific DatasetRecord from the local Catalog\") public Response getDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId)", "class_method_signature": "DatasetRest.getDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId)", "testcase": false, "constructor": false}, {"identifier": "deleteDatasetRecord", "parameters": "(@Context ContainerRequestContext context,\n                                 @PathParam(\"datasetRecordId\") String datasetRecordId,\n                                 @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "modifiers": "@DELETE @Path(\"{datasetRecordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Deletes a specific DatasetRecord in the local Catalog\") public", "return": "Response", "signature": "Response deleteDatasetRecord(@Context ContainerRequestContext context,\n                                 @PathParam(\"datasetRecordId\") String datasetRecordId,\n                                 @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "full_signature": "@DELETE @Path(\"{datasetRecordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Deletes a specific DatasetRecord in the local Catalog\") public Response deleteDatasetRecord(@Context ContainerRequestContext context,\n                                 @PathParam(\"datasetRecordId\") String datasetRecordId,\n                                 @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "class_method_signature": "DatasetRest.deleteDatasetRecord(@Context ContainerRequestContext context,\n                                 @PathParam(\"datasetRecordId\") String datasetRecordId,\n                                 @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "testcase": false, "constructor": false}, {"identifier": "clearDatasetRecord", "parameters": "(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                                @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "modifiers": "@DELETE @Path(\"{datasetRecordId}/data\") @RolesAllowed(\"user\") @ApiOperation(\"Clears the data within a specific DatasetRecord in the local Catalog\") public", "return": "Response", "signature": "Response clearDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                                @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "full_signature": "@DELETE @Path(\"{datasetRecordId}/data\") @RolesAllowed(\"user\") @ApiOperation(\"Clears the data within a specific DatasetRecord in the local Catalog\") public Response clearDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                                @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "class_method_signature": "DatasetRest.clearDatasetRecord(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                                @DefaultValue(\"false\") @QueryParam(\"force\") boolean force)", "testcase": false, "constructor": false}, {"identifier": "uploadData", "parameters": "(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                        @FormDataParam(\"file\") InputStream fileInputStream,\n                        @FormDataParam(\"file\") FormDataContentDisposition fileDetail)", "modifiers": "@POST @Path(\"{datasetRecordId}/data\") @RolesAllowed(\"user\") @ApiOperation(\"Uploads the data within an RDF file to a specific DatasetRecord in the local Catalog\") public", "return": "Response", "signature": "Response uploadData(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                        @FormDataParam(\"file\") InputStream fileInputStream,\n                        @FormDataParam(\"file\") FormDataContentDisposition fileDetail)", "full_signature": "@POST @Path(\"{datasetRecordId}/data\") @RolesAllowed(\"user\") @ApiOperation(\"Uploads the data within an RDF file to a specific DatasetRecord in the local Catalog\") public Response uploadData(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                        @FormDataParam(\"file\") InputStream fileInputStream,\n                        @FormDataParam(\"file\") FormDataContentDisposition fileDetail)", "class_method_signature": "DatasetRest.uploadData(@PathParam(\"datasetRecordId\") String datasetRecordId,\n                        @FormDataParam(\"file\") InputStream fileInputStream,\n                        @FormDataParam(\"file\") FormDataContentDisposition fileDetail)", "testcase": false, "constructor": false}, {"identifier": "getOntologyIdentifier", "parameters": "(Resource recordId)", "modifiers": "private", "return": "OntologyIdentifier", "signature": "OntologyIdentifier getOntologyIdentifier(Resource recordId)", "full_signature": "private OntologyIdentifier getOntologyIdentifier(Resource recordId)", "class_method_signature": "DatasetRest.getOntologyIdentifier(Resource recordId)", "testcase": false, "constructor": false}, {"identifier": "removeContext", "parameters": "(Model model)", "modifiers": "private", "return": "Model", "signature": "Model removeContext(Model model)", "full_signature": "private Model removeContext(Model model)", "class_method_signature": "DatasetRest.removeContext(Model model)", "testcase": false, "constructor": false}], "file": "com.mobi.dataset.rest/src/main/java/com/mobi/dataset/rest/DatasetRest.java"}, "focal_method": {"identifier": "getDatasetRecords", "parameters": "(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves all DatasetRecords in the local Catalog\") public", "return": "Response", "body": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Retrieves all DatasetRecords in the local Catalog\")\n    public Response getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText) {\n        try {\n            LinksUtils.validateParams(limit, offset);\n            DatasetPaginatedSearchParams params = new DatasetPaginatedSearchParams(vf).setOffset(offset)\n                    .setAscending(asc);\n            if (limit > 0) {\n                params.setLimit(limit);\n            }\n            if (sort != null && !sort.isEmpty()) {\n                params.setSortBy(vf.createIRI(sort));\n            }\n            if (searchText != null && !searchText.isEmpty()) {\n                params.setSearchText(searchText);\n            }\n            PaginatedSearchResults<DatasetRecord> results = manager.getDatasetRecords(params);\n            JSONArray array = JSONArray.fromObject(results.getPage().stream()\n                    .map(datasetRecord -> removeContext(datasetRecord.getModel()))\n                    .map(model -> modelToSkolemizedJsonld(model, transformer, bNodeService))\n                    .collect(Collectors.toList()));\n\n            Links links = LinksUtils.buildLinks(uriInfo, array.size(), results.getTotalSize(), limit, offset);\n            Response.ResponseBuilder response = Response.ok(array).header(\"X-Total-Count\", results.getTotalSize());\n            if (links.getNext() != null) {\n                response = response.link(links.getBase() + links.getNext(), \"next\");\n            }\n            if (links.getPrev() != null) {\n                response = response.link(links.getBase() + links.getPrev(), \"prev\");\n            }\n            return response.build();\n        } catch (IllegalArgumentException ex) {\n            throw ErrorUtils.sendError(ex, ex.getMessage(), Response.Status.BAD_REQUEST);\n        } catch (MobiException ex) {\n            throw ErrorUtils.sendError(ex, ex.getMessage(), Response.Status.INTERNAL_SERVER_ERROR);\n        }\n    }", "signature": "Response getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves all DatasetRecords in the local Catalog\") public Response getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "class_method_signature": "DatasetRest.getDatasetRecords(@Context UriInfo uriInfo,\n                               @QueryParam(\"offset\") int offset,\n                               @QueryParam(\"limit\") int limit,\n                               @QueryParam(\"sort\") String sort,\n                               @DefaultValue(\"true\") @QueryParam(\"ascending\") boolean asc,\n                               @QueryParam(\"searchText\") String searchText)", "testcase": false, "constructor": false, "invocations": ["validateParams", "setAscending", "setOffset", "setLimit", "isEmpty", "setSortBy", "createIRI", "isEmpty", "setSearchText", "getDatasetRecords", "fromObject", "collect", "map", "map", "stream", "getPage", "removeContext", "getModel", "modelToSkolemizedJsonld", "toList", "buildLinks", "size", "getTotalSize", "header", "ok", "getTotalSize", "getNext", "link", "getBase", "getNext", "getPrev", "link", "getBase", "getPrev", "build", "sendError", "getMessage", "sendError", "getMessage"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}