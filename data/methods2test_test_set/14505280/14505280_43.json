{"test_class": {"identifier": "TmsControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate TmsController tmsController;", "modifier": "@Autowired\n\tprivate", "type": "TmsController", "declarator": "tmsController", "var_name": "tmsController"}, {"original_string": "@Qualifier(\"MvcTest.path\")\n\t@Autowired\n\tprivate String imagePath;", "modifier": "@Qualifier(\"MvcTest.path\")\n\t@Autowired\n\tprivate", "type": "String", "declarator": "imagePath", "var_name": "imagePath"}, {"original_string": "@Autowired\n\tprivate SecurityManager securityManager;", "modifier": "@Autowired\n\tprivate", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "private static final double DELTA = 0.07;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.07", "var_name": "DELTA"}, {"original_string": "private boolean writeImages = false;", "modifier": "private", "type": "boolean", "declarator": "writeImages = false", "var_name": "writeImages"}], "file": "plugin/rasterizing/rasterizing/src/test/java/org/geomajas/plugin/rasterizing/mvc/TmsControllerTest.java"}, "test_case": {"identifier": "getVectorTile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getVectorTile() throws Exception {\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\ttmsController.getVectorTile(\"layerBeansMultiPolygon\", \"layerBeansMultiPolygonStyleInfo\", \"EPSG:4326\", 0, 0, 0,\n\t\t\t\t100.0 / 256.0, \"-50,-50\", 256, 256, true, false, null, response);\n\t\tresponse.flushBuffer();\n\t\tnew ResponseAssert(response).assertEqualImage(\"layerBeansMultiPolygon-0-0-0.png\", writeImages, DELTA);\n\t}", "signature": "void getVectorTile()", "full_signature": "@Test public void getVectorTile()", "class_method_signature": "TmsControllerTest.getVectorTile()", "testcase": true, "constructor": false, "invocations": ["getVectorTile", "flushBuffer", "assertEqualImage"]}, "focal_class": {"identifier": "TmsController", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int PROFILE_TILE_SIZE = 256;", "modifier": "public static final", "type": "int", "declarator": "PROFILE_TILE_SIZE = 256", "var_name": "PROFILE_TILE_SIZE"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(TmsController.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TmsController.class)", "var_name": "log"}, {"original_string": "public static final String MAPPING = \"/tms/\";", "modifier": "public static final", "type": "String", "declarator": "MAPPING = \"/tms/\"", "var_name": "MAPPING"}, {"original_string": "public static final String MAPPING_1_0_0 = \"/tms/1.0.0\";", "modifier": "public static final", "type": "String", "declarator": "MAPPING_1_0_0 = \"/tms/1.0.0\"", "var_name": "MAPPING_1_0_0"}, {"original_string": "@Autowired\n\tprivate PipelineService<GetTileContainer> pipelineService;", "modifier": "@Autowired\n\tprivate", "type": "PipelineService<GetTileContainer>", "declarator": "pipelineService", "var_name": "pipelineService"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate CacheManagerService cacheManagerService;", "modifier": "@Autowired\n\tprivate", "type": "CacheManagerService", "declarator": "cacheManagerService", "var_name": "cacheManagerService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverterService", "var_name": "dtoConverterService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate TestRecorder recorder;", "modifier": "@Autowired\n\tprivate", "type": "TestRecorder", "declarator": "recorder", "var_name": "recorder"}, {"original_string": "@Autowired\n\tprivate CachingSupportServiceSecurityContextAdder securityContextAdder;", "modifier": "@Autowired\n\tprivate", "type": "CachingSupportServiceSecurityContextAdder", "declarator": "securityContextAdder", "var_name": "securityContextAdder"}, {"original_string": "@Autowired\n\tprivate StyleService styleService;", "modifier": "@Autowired\n\tprivate", "type": "StyleService", "declarator": "styleService", "var_name": "styleService"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}, {"original_string": "@Autowired\n\tprivate RasterLayerService rasterLayerService;", "modifier": "@Autowired\n\tprivate", "type": "RasterLayerService", "declarator": "rasterLayerService", "var_name": "rasterLayerService"}, {"original_string": "@Autowired\n\tprivate LayerHttpService httpService;", "modifier": "@Autowired\n\tprivate", "type": "LayerHttpService", "declarator": "httpService", "var_name": "httpService"}, {"original_string": "@Autowired\n\tprivate TmsServiceImpl tmsService;", "modifier": "@Autowired\n\tprivate", "type": "TmsServiceImpl", "declarator": "tmsService", "var_name": "tmsService"}, {"original_string": "@Autowired\n\tprivate CachingSupportService cachingSupportService;", "modifier": "@Autowired\n\tprivate", "type": "CachingSupportService", "declarator": "cachingSupportService", "var_name": "cachingSupportService"}, {"original_string": "private boolean redirectRasterLayers = true;", "modifier": "private", "type": "boolean", "declarator": "redirectRasterLayers = true", "var_name": "redirectRasterLayers"}, {"original_string": "private static final int ERROR_MESSAGE_X = 10;", "modifier": "private static final", "type": "int", "declarator": "ERROR_MESSAGE_X = 10", "var_name": "ERROR_MESSAGE_X"}, {"original_string": "private static final String TMS_TILE_RENDERER = \"TmsTileRenderer\";", "modifier": "private static final", "type": "String", "declarator": "TMS_TILE_RENDERER = \"TmsTileRenderer\"", "var_name": "TMS_TILE_RENDERER"}, {"original_string": "private static final String[] KEYS = { PipelineCode.LAYER_ID_KEY, PipelineCode.TILE_METADATA_KEY };", "modifier": "private static final", "type": "String[]", "declarator": "KEYS = { PipelineCode.LAYER_ID_KEY, PipelineCode.TILE_METADATA_KEY }", "var_name": "KEYS"}, {"original_string": "private Map<String, TmsProfile> profiles = new HashMap<String, TmsProfile>();", "modifier": "private", "type": "Map<String, TmsProfile>", "declarator": "profiles = new HashMap<String, TmsProfile>()", "var_name": "profiles"}], "methods": [{"identifier": "TmsController", "parameters": "()", "modifiers": "public", "return": "", "signature": " TmsController()", "full_signature": "public  TmsController()", "class_method_signature": "TmsController.TmsController()", "testcase": false, "constructor": true}, {"identifier": "isRedirectRasterLayers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRedirectRasterLayers()", "full_signature": "public boolean isRedirectRasterLayers()", "class_method_signature": "TmsController.isRedirectRasterLayers()", "testcase": false, "constructor": false}, {"identifier": "setRedirectRasterLayers", "parameters": "(boolean redirectRasterLayers)", "modifiers": "public", "return": "void", "signature": "void setRedirectRasterLayers(boolean redirectRasterLayers)", "full_signature": "public void setRedirectRasterLayers(boolean redirectRasterLayers)", "class_method_signature": "TmsController.setRedirectRasterLayers(boolean redirectRasterLayers)", "testcase": false, "constructor": false}, {"identifier": "getTileMapService", "parameters": "(HttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING_1_0_0, method = RequestMethod.GET) public", "return": "void", "signature": "void getTileMapService(HttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING_1_0_0, method = RequestMethod.GET) public void getTileMapService(HttpServletResponse response)", "class_method_signature": "TmsController.getTileMapService(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getTileMap", "parameters": "(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING_1_0_0 + \"/{layerId}@{crs}/{styleKey}\", method = RequestMethod.GET) public", "return": "void", "signature": "void getTileMap(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING_1_0_0 + \"/{layerId}@{crs}/{styleKey}\", method = RequestMethod.GET) public void getTileMap(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\tHttpServletResponse response)", "class_method_signature": "TmsController.getTileMap(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getTile", "parameters": "(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING_1_0_0 + \"/{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public", "return": "void", "signature": "void getTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING_1_0_0 + \"/{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public void getTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "class_method_signature": "TmsController.getTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getVectorTile", "parameters": "(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public", "return": "void", "signature": "void getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public void getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "class_method_signature": "TmsController.getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getRasterTile", "parameters": "(@PathVariable String layerId, @PathVariable String crs, @PathVariable Integer tileLevel,\n\t\t\t@PathVariable Integer xIndex, @PathVariable Integer yIndex, @PathVariable String imageFormat,\n\t\t\tHttpServletRequest request, HttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public", "return": "void", "signature": "void getRasterTile(@PathVariable String layerId, @PathVariable String crs, @PathVariable Integer tileLevel,\n\t\t\t@PathVariable Integer xIndex, @PathVariable Integer yIndex, @PathVariable String imageFormat,\n\t\t\tHttpServletRequest request, HttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public void getRasterTile(@PathVariable String layerId, @PathVariable String crs, @PathVariable Integer tileLevel,\n\t\t\t@PathVariable Integer xIndex, @PathVariable Integer yIndex, @PathVariable String imageFormat,\n\t\t\tHttpServletRequest request, HttpServletResponse response)", "class_method_signature": "TmsController.getRasterTile(@PathVariable String layerId, @PathVariable String crs, @PathVariable Integer tileLevel,\n\t\t\t@PathVariable Integer xIndex, @PathVariable Integer yIndex, @PathVariable String imageFormat,\n\t\t\tHttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getProfileForLayer", "parameters": "(String layerId, String crs)", "modifiers": "private", "return": "TmsProfile", "signature": "TmsProfile getProfileForLayer(String layerId, String crs)", "full_signature": "private TmsProfile getProfileForLayer(String layerId, String crs)", "class_method_signature": "TmsController.getProfileForLayer(String layerId, String crs)", "testcase": false, "constructor": false}, {"identifier": "renderImage", "parameters": "(String layerId, String key, HttpServletResponse response)", "modifiers": "private", "return": "void", "signature": "void renderImage(String layerId, String key, HttpServletResponse response)", "full_signature": "private void renderImage(String layerId, String key, HttpServletResponse response)", "class_method_signature": "TmsController.renderImage(String layerId, String key, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "parseOrigin", "parameters": "(String tileOrigin)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate parseOrigin(String tileOrigin)", "full_signature": "private Coordinate parseOrigin(String tileOrigin)", "class_method_signature": "TmsController.parseOrigin(String tileOrigin)", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "(int screenWidth, int level, double width)", "modifiers": "private", "return": "double", "signature": "double getScale(int screenWidth, int level, double width)", "full_signature": "private double getScale(int screenWidth, int level, double width)", "class_method_signature": "TmsController.getScale(int screenWidth, int level, double width)", "testcase": false, "constructor": false}, {"identifier": "getLayerExtent", "parameters": "(TileMetadata tileMetadata)", "modifiers": "private", "return": "Envelope", "signature": "Envelope getLayerExtent(TileMetadata tileMetadata)", "full_signature": "private Envelope getLayerExtent(TileMetadata tileMetadata)", "class_method_signature": "TmsController.getLayerExtent(TileMetadata tileMetadata)", "testcase": false, "constructor": false}, {"identifier": "getRasterLayerExtent", "parameters": "(String layerId, String crs)", "modifiers": "private", "return": "Envelope", "signature": "Envelope getRasterLayerExtent(String layerId, String crs)", "full_signature": "private Envelope getRasterLayerExtent(String layerId, String crs)", "class_method_signature": "TmsController.getRasterLayerExtent(String layerId, String crs)", "testcase": false, "constructor": false}, {"identifier": "writeToResponse", "parameters": "(RasterLayer layer, String url, HttpServletRequest request, \n\t\t\tHttpServletResponse response)", "modifiers": "private", "return": "void", "signature": "void writeToResponse(RasterLayer layer, String url, HttpServletRequest request, \n\t\t\tHttpServletResponse response)", "full_signature": "private void writeToResponse(RasterLayer layer, String url, HttpServletRequest request, \n\t\t\tHttpServletResponse response)", "class_method_signature": "TmsController.writeToResponse(RasterLayer layer, String url, HttpServletRequest request, \n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "createErrorImage", "parameters": "(int width, int height, Exception e)", "modifiers": "private", "return": "byte[]", "signature": "byte[] createErrorImage(int width, int height, Exception e)", "full_signature": "private byte[] createErrorImage(int width, int height, Exception e)", "class_method_signature": "TmsController.createErrorImage(int width, int height, Exception e)", "testcase": false, "constructor": false}], "file": "plugin/rasterizing/rasterizing/src/main/java/org/geomajas/plugin/rasterizing/mvc/TmsController.java"}, "focal_method": {"identifier": "getVectorTile", "parameters": "(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "modifiers": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public", "return": "void", "body": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\",\n\t\t\tmethod = RequestMethod.GET)\n\tpublic void getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response) throws Exception {\n\t\ttry {\n\t\t\tCrs tileCrs = geoService.getCrs2(crs);\n\t\t\tTmsTileMetadata tileMetadata = new TmsTileMetadata();\n\t\t\ttileMetadata.setCode(new TileCode(tileLevel, xIndex, yIndex));\n\t\t\ttileMetadata.setCrs(geoService.getCodeFromCrs(tileCrs));\n\t\t\ttileMetadata.setLayerId(layerId);\n\t\t\ttileMetadata.setPaintGeometries(showGeometries);\n\t\t\ttileMetadata.setPaintLabels(showLabels);\n\t\t\ttileMetadata.setRenderer(TMS_TILE_RENDERER);\n\t\t\ttileMetadata.setTileWidth(tileWidth);\n\t\t\ttileMetadata.setTileHeight(tileHeight);\n\t\t\t// TmsTileMetadata specific\n\t\t\ttileMetadata.setStyleInfo(styleService.retrieveStyle(layerId, styleKey));\n\t\t\ttileMetadata.setFilter(filter);\n\t\t\t// if no origin or resolution, try one of the preconfigured profiles or fall back to\n\t\t\t// the layer bounds\n\t\t\tif (resolution == null || tileOrigin == null) {\n\t\t\t\tgetProfileForLayer(layerId, crs).prepareMetadata(tileMetadata);\n\t\t\t} else {\n\t\t\t\ttileMetadata.setResolution(resolution);\n\t\t\t\ttileMetadata.setTileOrigin(parseOrigin(tileOrigin));\n\t\t\t}\n\n\t\t\tRebuildCacheContainer rcc = new RebuildCacheContainer();\n\t\t\trcc.setMetadata(tileMetadata);\n\t\t\tPipelineContext context = pipelineService.createContext();\n\t\t\tcontext.put(PipelineCode.TILE_METADATA_KEY, tileMetadata);\n\t\t\tcontext.put(PipelineCode.LAYER_ID_KEY, layerId);\n\t\t\t// store container to recover the key\n\t\t\tcachingSupportService.putContainer(context, securityContextAdder, CacheCategory.REBUILD, KEYS,\n\t\t\t\t\tRasterizingPipelineCode.IMAGE_ID_KEY, RasterizingPipelineCode.IMAGE_ID_CONTEXT, rcc, null);\n\t\t\tString key = context.get(RasterizingPipelineCode.IMAGE_ID_KEY, String.class);\n\t\t\trenderImage(layerId, key, response);\n\t\t} catch (Throwable e) { // NOSONAR need to log all problems\n\t\t\tlog.error(\"Could not rasterize tile \" + layerId + \"/\" + styleKey + \"/\" + tileLevel + \"-\" + xIndex + \"-\"\n\t\t\t\t\t+ yIndex + \".png\", e);\n\t\t\tresponse.sendError(HttpServletResponse.SC_NO_CONTENT);\n\t\t}\n\t}", "signature": "void getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "full_signature": "@RequestMapping(value = MAPPING + \"{layerId}@{crs}/{styleKey}/{tileLevel}/{xIndex}/{yIndex}.{imageFormat}\", method = RequestMethod.GET) public void getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "class_method_signature": "TmsController.getVectorTile(@PathVariable String layerId, @PathVariable String styleKey, @PathVariable String crs,\n\t\t\t@PathVariable Integer tileLevel, @PathVariable Integer xIndex, @PathVariable Integer yIndex,\n\t\t\t@RequestParam(required = false) Double resolution, @RequestParam(required = false) String tileOrigin,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileWidth,\n\t\t\t@RequestParam(required = false, defaultValue = \"256\") int tileHeight,\n\t\t\t@RequestParam(required = false, defaultValue = \"true\") boolean showGeometries,\n\t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean showLabels,\n\t\t\t@RequestParam(required = false) String filter, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getCrs2", "setCode", "setCrs", "getCodeFromCrs", "setLayerId", "setPaintGeometries", "setPaintLabels", "setRenderer", "setTileWidth", "setTileHeight", "setStyleInfo", "retrieveStyle", "setFilter", "prepareMetadata", "getProfileForLayer", "setResolution", "setTileOrigin", "parseOrigin", "setMetadata", "createContext", "put", "put", "putContainer", "get", "renderImage", "error", "sendError"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}