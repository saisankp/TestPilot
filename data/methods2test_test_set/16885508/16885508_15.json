{"test_class": {"identifier": "TestValidityTools", "superclass": "", "interfaces": "", "fields": [{"original_string": "static StorageManager sm = null;", "modifier": "static", "type": "StorageManager", "declarator": "sm = null", "var_name": "sm"}], "file": "gsn-core/src/test/java/ch/epfl/gsn/utils/TestValidityTools.java"}, "test_case": {"identifier": "testIsLocalhost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsLocalhost() {\n\t\tassertTrue(ValidityTools.isLocalhost(\"127.0.0.1\"));\n\t\tassertFalse(ValidityTools.isLocalhost(\"127.0.1.1\"));\n\t\tassertTrue(ValidityTools.isLocalhost(\"localhost\"));\n\t\tassertFalse(ValidityTools.isLocalhost(\"129.0.0.1\"));\n\t}", "signature": "void testIsLocalhost()", "full_signature": "@Test public void testIsLocalhost()", "class_method_signature": "TestValidityTools.testIsLocalhost()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isLocalhost", "assertFalse", "isLocalhost", "assertTrue", "isLocalhost", "assertFalse", "isLocalhost"]}, "focal_class": {"identifier": "ValidityTools", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int              SMTP_PORT = 25;", "modifier": "public static final", "type": "int", "declarator": "SMTP_PORT = 25", "var_name": "SMTP_PORT"}, {"original_string": "static Pattern hostAndPortPattern = Pattern.compile( \"(.+):(\\\\d+)$\" );", "modifier": "static", "type": "Pattern", "declarator": "hostAndPortPattern = Pattern.compile( \"(.+):(\\\\d+)$\" )", "var_name": "hostAndPortPattern"}, {"original_string": "public static final transient Logger logger    = LoggerFactory.getLogger( ValidityTools.class );", "modifier": "public static final transient", "type": "Logger", "declarator": "logger    = LoggerFactory.getLogger( ValidityTools.class )", "var_name": "logger"}, {"original_string": "public static final ArrayList < InetAddress > NETWORK_LOCAL_INETADDRESSES = new ArrayList < InetAddress >( );", "modifier": "public static final", "type": "ArrayList < InetAddress >", "declarator": "NETWORK_LOCAL_INETADDRESSES = new ArrayList < InetAddress >( )", "var_name": "NETWORK_LOCAL_INETADDRESSES"}], "methods": [{"identifier": "isAccessibleSocket", "parameters": "( String host , int port )", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessibleSocket( String host , int port )", "full_signature": "public static boolean isAccessibleSocket( String host , int port )", "class_method_signature": "ValidityTools.isAccessibleSocket( String host , int port )", "testcase": false, "constructor": false}, {"identifier": "isAccessibleSocket", "parameters": "( String host , int port, int timeOutInMSec )", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessibleSocket( String host , int port, int timeOutInMSec )", "full_signature": "public static boolean isAccessibleSocket( String host , int port, int timeOutInMSec )", "class_method_signature": "ValidityTools.isAccessibleSocket( String host , int port, int timeOutInMSec )", "testcase": false, "constructor": false}, {"identifier": "checkAccessibilityOfDirs", "parameters": "( String ... args )", "modifiers": "public static", "return": "void", "signature": "void checkAccessibilityOfDirs( String ... args )", "full_signature": "public static void checkAccessibilityOfDirs( String ... args )", "class_method_signature": "ValidityTools.checkAccessibilityOfDirs( String ... args )", "testcase": false, "constructor": false}, {"identifier": "checkAccessibilityOfFiles", "parameters": "( String... args )", "modifiers": "public static", "return": "void", "signature": "void checkAccessibilityOfFiles( String... args )", "full_signature": "public static void checkAccessibilityOfFiles( String... args )", "class_method_signature": "ValidityTools.checkAccessibilityOfFiles( String... args )", "testcase": false, "constructor": false}, {"identifier": "isDBAccessible", "parameters": "( String driverClass , String url , String user , String password )", "modifiers": "public static", "return": "void", "signature": "void isDBAccessible( String driverClass , String url , String user , String password )", "full_signature": "public static void isDBAccessible( String driverClass , String url , String user , String password )", "class_method_signature": "ValidityTools.isDBAccessible( String driverClass , String url , String user , String password )", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "( String hostandport )", "modifiers": "public static", "return": "String", "signature": "String getHostName( String hostandport )", "full_signature": "public static String getHostName( String hostandport )", "class_method_signature": "ValidityTools.getHostName( String hostandport )", "testcase": false, "constructor": false}, {"identifier": "getPortNumber", "parameters": "( String hostandport )", "modifiers": "public static", "return": "int", "signature": "int getPortNumber( String hostandport )", "full_signature": "public static int getPortNumber( String hostandport )", "class_method_signature": "ValidityTools.getPortNumber( String hostandport )", "testcase": false, "constructor": false}, {"identifier": "isLocalhost", "parameters": "( String host )", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalhost( String host )", "full_signature": "public static boolean isLocalhost( String host )", "class_method_signature": "ValidityTools.isLocalhost( String host )", "testcase": false, "constructor": false}, {"identifier": "isInt", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isInt( String value )", "full_signature": "public static boolean isInt( String value )", "class_method_signature": "ValidityTools.isInt( String value )", "testcase": false, "constructor": false}, {"identifier": "isValidJavaVariable", "parameters": "(CharSequence string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidJavaVariable(CharSequence string)", "full_signature": "public static boolean isValidJavaVariable(CharSequence string)", "class_method_signature": "ValidityTools.isValidJavaVariable(CharSequence string)", "testcase": false, "constructor": false}], "file": "gsn-core/src/main/java/ch/epfl/gsn/utils/ValidityTools.java"}, "focal_method": {"identifier": "isLocalhost", "parameters": "( String host )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isLocalhost ( String host ) {\n\t\t// this allows us to be ipv6 compatible (we simply remove the port)\n\t\ttry {\n\t\t\tInetAddress hostAddress = InetAddress.getByName( host );\n\t\t\tif (hostAddress==null)\n\t\t\t\treturn false;\n\t\t\tfor ( InetAddress address : NETWORK_LOCAL_INETADDRESSES )\n\t\t\t\tif ( address.equals( hostAddress ) ) return true;\n\t\t\treturn hostAddress.isLoopbackAddress();\n\t\t} catch ( UnknownHostException e ) {\n\t\t\tlogger.debug( e.getMessage() );\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean isLocalhost( String host )", "full_signature": "public static boolean isLocalhost( String host )", "class_method_signature": "ValidityTools.isLocalhost( String host )", "testcase": false, "constructor": false, "invocations": ["getByName", "equals", "isLoopbackAddress", "debug", "getMessage"]}, "repository": {"repo_id": 16885508, "url": "https://github.com/LSIR/gsn", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 51, "size": 375887, "license": "licensed"}}