{"test_class": {"identifier": "LifecycleAgentStatusMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AgentInstance STARTED_INSTANCE = AgentGenerator.agentInstances().getValue().toBuilder()\n            .withDeploymentStatus(InstanceLifecycleStatus.newBuilder().withState(InstanceLifecycleState.Started).build())\n            .build();", "modifier": "private static final", "type": "AgentInstance", "declarator": "STARTED_INSTANCE = AgentGenerator.agentInstances().getValue().toBuilder()\n            .withDeploymentStatus(InstanceLifecycleStatus.newBuilder().withState(InstanceLifecycleState.Started).build())\n            .build()", "var_name": "STARTED_INSTANCE"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final LifecycleAgentStatusMonitor monitor = new LifecycleAgentStatusMonitor(agentManagementService, titusRuntime);", "modifier": "private final", "type": "LifecycleAgentStatusMonitor", "declarator": "monitor = new LifecycleAgentStatusMonitor(agentManagementService, titusRuntime)", "var_name": "monitor"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/agent/service/monitor/LifecycleAgentStatusMonitorTest.java"}, "test_case": {"identifier": "testEventStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEventStream() {\n        PublishSubject<AgentEvent> eventSubject = PublishSubject.create();\n        when(agentManagementService.events(false)).thenReturn(eventSubject);\n\n        ExtTestSubscriber<AgentStatus> testSubscriber = new ExtTestSubscriber<>();\n        monitor.monitor().subscribe(testSubscriber);\n\n        // First started\n        eventSubject.onNext(new AgentInstanceUpdateEvent(STARTED_INSTANCE));\n        assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy);\n\n        // Now terminated\n        eventSubject.onNext(new AgentInstanceRemovedEvent(STARTED_INSTANCE.getId()));\n        AgentStatus terminatedStatus = testSubscriber.takeNext();\n        assertThat(terminatedStatus.getStatusCode()).isEqualTo(AgentStatusCode.Terminated);\n        assertThat(terminatedStatus.getAgentInstance().getId()).isEqualTo(STARTED_INSTANCE.getId());\n        assertThat(terminatedStatus.getAgentInstance().getLifecycleStatus().getState()).isEqualTo(InstanceLifecycleState.Stopped);\n    }", "signature": "void testEventStream()", "full_signature": "@Test public void testEventStream()", "class_method_signature": "LifecycleAgentStatusMonitorTest.testEventStream()", "testcase": true, "constructor": false, "invocations": ["create", "thenReturn", "when", "events", "subscribe", "monitor", "onNext", "isEqualTo", "assertThat", "getStatusCode", "takeNext", "onNext", "getId", "takeNext", "isEqualTo", "assertThat", "getStatusCode", "isEqualTo", "assertThat", "getId", "getAgentInstance", "getId", "isEqualTo", "assertThat", "getState", "getLifecycleStatus", "getAgentInstance"]}, "focal_class": {"identifier": "LifecycleAgentStatusMonitor", "superclass": "", "interfaces": "implements AgentStatusMonitor", "fields": [{"original_string": "static final String SOURCE_ID = \"lifecycle\";", "modifier": "static final", "type": "String", "declarator": "SOURCE_ID = \"lifecycle\"", "var_name": "SOURCE_ID"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final ConcurrentMap<String, AgentInstance> knownInstances = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, AgentInstance>", "declarator": "knownInstances = new ConcurrentHashMap<>()", "var_name": "knownInstances"}], "methods": [{"identifier": "LifecycleAgentStatusMonitor", "parameters": "(AgentManagementService agentManagementService, TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " LifecycleAgentStatusMonitor(AgentManagementService agentManagementService, TitusRuntime titusRuntime)", "full_signature": "@Inject public  LifecycleAgentStatusMonitor(AgentManagementService agentManagementService, TitusRuntime titusRuntime)", "class_method_signature": "LifecycleAgentStatusMonitor.LifecycleAgentStatusMonitor(AgentManagementService agentManagementService, TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "getStatus", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "AgentStatus", "signature": "AgentStatus getStatus(String agentInstanceId)", "full_signature": "@Override public AgentStatus getStatus(String agentInstanceId)", "class_method_signature": "LifecycleAgentStatusMonitor.getStatus(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "isHealthy", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHealthy(String agentInstanceId)", "full_signature": "@Override public boolean isHealthy(String agentInstanceId)", "class_method_signature": "LifecycleAgentStatusMonitor.isHealthy(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "()", "modifiers": "@Override public", "return": "Observable<AgentStatus>", "signature": "Observable<AgentStatus> monitor()", "full_signature": "@Override public Observable<AgentStatus> monitor()", "class_method_signature": "LifecycleAgentStatusMonitor.monitor()", "testcase": false, "constructor": false}, {"identifier": "findStatus", "parameters": "(String agentInstanceId)", "modifiers": "private", "return": "Optional<AgentStatus>", "signature": "Optional<AgentStatus> findStatus(String agentInstanceId)", "full_signature": "private Optional<AgentStatus> findStatus(String agentInstanceId)", "class_method_signature": "LifecycleAgentStatusMonitor.findStatus(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "statusOf", "parameters": "(AgentInstance agent)", "modifiers": "private", "return": "AgentStatus", "signature": "AgentStatus statusOf(AgentInstance agent)", "full_signature": "private AgentStatus statusOf(AgentInstance agent)", "class_method_signature": "LifecycleAgentStatusMonitor.statusOf(AgentInstance agent)", "testcase": false, "constructor": false}, {"identifier": "toTerminatedEvent", "parameters": "(AgentInstance agentInstance)", "modifiers": "private", "return": "AgentStatus", "signature": "AgentStatus toTerminatedEvent(AgentInstance agentInstance)", "full_signature": "private AgentStatus toTerminatedEvent(AgentInstance agentInstance)", "class_method_signature": "LifecycleAgentStatusMonitor.toTerminatedEvent(AgentInstance agentInstance)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/agent/service/monitor/LifecycleAgentStatusMonitor.java"}, "focal_method": {"identifier": "monitor", "parameters": "()", "modifiers": "@Override public", "return": "Observable<AgentStatus>", "body": "@Override\n    public Observable<AgentStatus> monitor() {\n        return agentManagementService.events(false).flatMap(event -> {\n            if (event instanceof AgentInstanceUpdateEvent) {\n                AgentInstance agentInstance = ((AgentInstanceUpdateEvent) event).getAgentInstance();\n                knownInstances.put(agentInstance.getId(), agentInstance);\n                return Observable.just(statusOf(agentInstance));\n            }\n            if (event instanceof AgentInstanceRemovedEvent) {\n                // As AgentInstanceRemovedEvent does not contain AgentInstance value, which is required in AgentStatus\n                // we have to cache it, and tweak when the AgentInstanceRemovedEvent event is received.\n                AgentInstance agentInstance = knownInstances.remove(((AgentInstanceRemovedEvent) event).getAgentInstanceId());\n                if (agentInstance != null) {\n                    return Observable.just(toTerminatedEvent(agentInstance));\n                }\n            }\n            return Observable.empty();\n        });\n    }", "signature": "Observable<AgentStatus> monitor()", "full_signature": "@Override public Observable<AgentStatus> monitor()", "class_method_signature": "LifecycleAgentStatusMonitor.monitor()", "testcase": false, "constructor": false, "invocations": ["flatMap", "events", "getAgentInstance", "put", "getId", "just", "statusOf", "remove", "getAgentInstanceId", "just", "toTerminatedEvent", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}