{"test_class": {"identifier": "LowMetricTransformTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/transform/LowMetricTransformTest.java"}, "test_case": {"identifier": "testLowMetricTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLowMetricTransform() throws Exception {\n        List<Datum> data = new ArrayList<>();\n        data.add(new Datum(new ArrayList<>(), 1, 2));\n        data.add(new Datum(new ArrayList<>(), 1, .01));\n\n        List<Integer> targetAttrs = new ArrayList<>();\n        targetAttrs.add(1);\n\n        LowMetricTransform lmt = new LowMetricTransform(targetAttrs);\n        lmt.consume(data);\n        data = lmt.getStream().drain();\n\n        assertEquals(2, data.size(), 0);\n        assertEquals(1, data.get(0).metrics().getEntry(0), 0);\n        assertEquals(.5, data.get(0).metrics().getEntry(1), 0);\n        assertEquals(1, data.get(1).metrics().getEntry(0), 0);\n        assertEquals(10, data.get(1).metrics().getEntry(1), 0);\n    }", "signature": "void testLowMetricTransform()", "full_signature": "@Test public void testLowMetricTransform()", "class_method_signature": "LowMetricTransformTest.testLowMetricTransform()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "consume", "drain", "getStream", "assertEquals", "size", "assertEquals", "getEntry", "metrics", "get", "assertEquals", "getEntry", "metrics", "get", "assertEquals", "getEntry", "metrics", "get", "assertEquals", "getEntry", "metrics", "get"]}, "focal_class": {"identifier": "LowMetricTransform", "superclass": "extends FeatureTransform", "interfaces": "", "fields": [{"original_string": "MBStream<Datum> output = new MBStream<>();", "modifier": "", "type": "MBStream<Datum>", "declarator": "output = new MBStream<>()", "var_name": "output"}, {"original_string": "final List<Integer> toTransform;", "modifier": "final", "type": "List<Integer>", "declarator": "toTransform", "var_name": "toTransform"}], "methods": [{"identifier": "LowMetricTransform", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " LowMetricTransform(MacroBaseConf conf)", "full_signature": "public  LowMetricTransform(MacroBaseConf conf)", "class_method_signature": "LowMetricTransform.LowMetricTransform(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "LowMetricTransform", "parameters": "(List<Integer> indexesToTransform)", "modifiers": "public", "return": "", "signature": " LowMetricTransform(List<Integer> indexesToTransform)", "full_signature": "public  LowMetricTransform(List<Integer> indexesToTransform)", "class_method_signature": "LowMetricTransform.LowMetricTransform(List<Integer> indexesToTransform)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "LowMetricTransform.initialize()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(List<Datum> records)", "modifiers": "@Override public", "return": "void", "signature": "void consume(List<Datum> records)", "full_signature": "@Override public void consume(List<Datum> records)", "class_method_signature": "LowMetricTransform.consume(List<Datum> records)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "LowMetricTransform.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getStream", "parameters": "()", "modifiers": "@Override public", "return": "MBStream<Datum>", "signature": "MBStream<Datum> getStream()", "full_signature": "@Override public MBStream<Datum> getStream()", "class_method_signature": "LowMetricTransform.getStream()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/transform/LowMetricTransform.java"}, "focal_method": {"identifier": "LowMetricTransform", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "body": "public LowMetricTransform(MacroBaseConf conf) throws ConfigurationException {\n        toTransform = new ArrayList<>();\n        List<String> transformNames = conf.getStringList(MacroBaseConf.LOW_METRIC_TRANSFORM);\n        List<String> metrics = conf.getStringList(MacroBaseConf.METRICS);\n\n        for(String name : transformNames) {\n            toTransform.add(metrics.indexOf(name));\n        }\n    }", "signature": " LowMetricTransform(MacroBaseConf conf)", "full_signature": "public  LowMetricTransform(MacroBaseConf conf)", "class_method_signature": "LowMetricTransform.LowMetricTransform(MacroBaseConf conf)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}