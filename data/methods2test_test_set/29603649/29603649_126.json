{"test_class": {"identifier": "SearchControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private LuceneEngine luceneEngine;", "modifier": "@Mock\n    private", "type": "LuceneEngine", "declarator": "luceneEngine", "var_name": "luceneEngine"}, {"original_string": "@Mock\n    private FileZipper fileZipper;", "modifier": "@Mock\n    private", "type": "FileZipper", "declarator": "fileZipper", "var_name": "fileZipper"}, {"original_string": "@Mock\n    private FileChecker fileChecker;", "modifier": "@Mock\n    private", "type": "FileChecker", "declarator": "fileChecker", "var_name": "fileChecker"}, {"original_string": "@Mock\n    private HttpSession session;", "modifier": "@Mock\n    private", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private ServletOutputStream outputStream;", "modifier": "@Mock\n    private", "type": "ServletOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n    private IndexStatus indexStatus;", "modifier": "@Mock\n    private", "type": "IndexStatus", "declarator": "indexStatus", "var_name": "indexStatus"}, {"original_string": "private List<String> lucineResult;", "modifier": "private", "type": "List<String>", "declarator": "lucineResult", "var_name": "lucineResult"}, {"original_string": "private List<List<String>> listOfLists;", "modifier": "private", "type": "List<List<String>>", "declarator": "listOfLists", "var_name": "listOfLists"}, {"original_string": "@InjectMocks\n    private SearchController underTest;", "modifier": "@InjectMocks\n    private", "type": "SearchController", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/controller/SearchControllerTest.java"}, "test_case": {"identifier": "testSearchForFilesWhenSearchedTextIsEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSearchForFilesWhenSearchedTextIsEmptyString() throws IOException {\n        //GIVEN\n        //WHEN\n        underTest.searchForFiles(\"\", session);\n        //THEN\n        verify(luceneEngine).search(\"\");\n        verify(fileChecker).checkFilesExistsWithPairs(lucineResult);\n        verify(session).setAttribute(\"searchResult\", listOfLists);\n    }", "signature": "void testSearchForFilesWhenSearchedTextIsEmptyString()", "full_signature": "@Test public void testSearchForFilesWhenSearchedTextIsEmptyString()", "class_method_signature": "SearchControllerTest.testSearchForFilesWhenSearchedTextIsEmptyString()", "testcase": true, "constructor": false, "invocations": ["searchForFiles", "search", "verify", "checkFilesExistsWithPairs", "verify", "setAttribute", "verify"]}, "focal_class": {"identifier": "SearchController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUERY_ERROR_MESSAGE = \"This query is not valid.\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_ERROR_MESSAGE = \"This query is not valid.\"", "var_name": "QUERY_ERROR_MESSAGE"}, {"original_string": "private static final String ZIP_CONTENT_TYPE = \"application/zip\";", "modifier": "private static final", "type": "String", "declarator": "ZIP_CONTENT_TYPE = \"application/zip\"", "var_name": "ZIP_CONTENT_TYPE"}, {"original_string": "private static final String FILES = \"files\";", "modifier": "private static final", "type": "String", "declarator": "FILES = \"files\"", "var_name": "FILES"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(SearchController.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SearchController.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private LuceneEngine luceneEngine;", "modifier": "@Autowired\n    private", "type": "LuceneEngine", "declarator": "luceneEngine", "var_name": "luceneEngine"}, {"original_string": "@Autowired\n    private FileZipper fileZipper;", "modifier": "@Autowired\n    private", "type": "FileZipper", "declarator": "fileZipper", "var_name": "fileZipper"}, {"original_string": "@Autowired\n    private FileChecker fileChecker;", "modifier": "@Autowired\n    private", "type": "FileChecker", "declarator": "fileChecker", "var_name": "fileChecker"}, {"original_string": "@Autowired\n    private IndexStatus indexStatus;", "modifier": "@Autowired\n    private", "type": "IndexStatus", "declarator": "indexStatus", "var_name": "indexStatus"}], "methods": [{"identifier": "searchAndZip", "parameters": "(@RequestParam(\"text\") final String searchedText, final HttpServletResponse resp)", "modifiers": "@RequestMapping(value = \"/search\", method = RequestMethod.GET) public", "return": "void", "signature": "void searchAndZip(@RequestParam(\"text\") final String searchedText, final HttpServletResponse resp)", "full_signature": "@RequestMapping(value = \"/search\", method = RequestMethod.GET) public void searchAndZip(@RequestParam(\"text\") final String searchedText, final HttpServletResponse resp)", "class_method_signature": "SearchController.searchAndZip(@RequestParam(\"text\") final String searchedText, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "searchForFiles", "parameters": "(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "modifiers": "@ResponseBody @RequestMapping(value = \"/search\", method = RequestMethod.POST) public", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "full_signature": "@ResponseBody @RequestMapping(value = \"/search\", method = RequestMethod.POST) public ResponseEntity<String> searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "class_method_signature": "SearchController.searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "searchForText", "parameters": "(final String searchedText)", "modifiers": "private", "return": "List<List<String>>", "signature": "List<List<String>> searchForText(final String searchedText)", "full_signature": "private List<List<String>> searchForText(final String searchedText)", "class_method_signature": "SearchController.searchForText(final String searchedText)", "testcase": false, "constructor": false}, {"identifier": "zipSearchResult", "parameters": "(final String searchedText, final HttpServletResponse resp, final List<List<String>> searchResult)", "modifiers": "private", "return": "void", "signature": "void zipSearchResult(final String searchedText, final HttpServletResponse resp, final List<List<String>> searchResult)", "full_signature": "private void zipSearchResult(final String searchedText, final HttpServletResponse resp, final List<List<String>> searchResult)", "class_method_signature": "SearchController.zipSearchResult(final String searchedText, final HttpServletResponse resp, final List<List<String>> searchResult)", "testcase": false, "constructor": false}, {"identifier": "setHeadersForJSON", "parameters": "()", "modifiers": "private", "return": "HttpHeaders", "signature": "HttpHeaders setHeadersForJSON()", "full_signature": "private HttpHeaders setHeadersForJSON()", "class_method_signature": "SearchController.setHeadersForJSON()", "testcase": false, "constructor": false}, {"identifier": "addResultToSession", "parameters": "(final List<List<String>> searchResult, final HttpSession session)", "modifiers": "private", "return": "void", "signature": "void addResultToSession(final List<List<String>> searchResult, final HttpSession session)", "full_signature": "private void addResultToSession(final List<List<String>> searchResult, final HttpSession session)", "class_method_signature": "SearchController.addResultToSession(final List<List<String>> searchResult, final HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "getJson", "parameters": "(final Object object)", "modifiers": "private", "return": "String", "signature": "String getJson(final Object object)", "full_signature": "private String getJson(final Object object)", "class_method_signature": "SearchController.getJson(final Object object)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/controller/SearchController.java"}, "focal_method": {"identifier": "searchForFiles", "parameters": "(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "modifiers": "@ResponseBody @RequestMapping(value = \"/search\", method = RequestMethod.POST) public", "return": "ResponseEntity<String>", "body": "@ResponseBody\n    @RequestMapping(value = \"/search\", method = RequestMethod.POST)\n    public ResponseEntity<String> searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session) {\n        List<List<String>> searchResult = new ArrayList<List<String>>();\n        ResponseEntity<String> result;\n        HttpHeaders responseHeaders = setHeadersForJSON();\n        try {\n            searchResult = searchForText(searchedText);\n            addResultToSession(searchResult, session);\n            if (!indexStatus.isReady()) {\n                result = new ResponseEntity<String>(getJson(searchResult), responseHeaders, HttpStatus.PARTIAL_CONTENT);\n            } else {\n                result = new ResponseEntity<String>(getJson(searchResult), responseHeaders, HttpStatus.CREATED);\n            }\n        } catch (QueryCannotBeParsedException e) {\n            logger.warn(\"Invalid query\");\n            result = new ResponseEntity<String>(QUERY_ERROR_MESSAGE, HttpStatus.BAD_REQUEST);\n        }\n        return result;\n    }", "signature": "ResponseEntity<String> searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "full_signature": "@ResponseBody @RequestMapping(value = \"/search\", method = RequestMethod.POST) public ResponseEntity<String> searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "class_method_signature": "SearchController.searchForFiles(@RequestParam(\"searchedText\") final String searchedText, final HttpSession session)", "testcase": false, "constructor": false, "invocations": ["setHeadersForJSON", "searchForText", "addResultToSession", "isReady", "getJson", "getJson", "warn"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}