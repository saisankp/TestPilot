{"test_class": {"identifier": "EitherTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [{"original_string": "Either<Integer, String> intEither = Either.Left(1);", "modifier": "", "type": "Either<Integer, String>", "declarator": "intEither = Either.Left(1)", "var_name": "intEither"}, {"original_string": "Either<Integer, String> stringEither = Either.Right(\"boo\");", "modifier": "", "type": "Either<Integer, String>", "declarator": "stringEither = Either.Right(\"boo\")", "var_name": "stringEither"}, {"original_string": "Either<Integer, Tuple2<Double, Long>> tuple2Either = new Right<>(new Tuple2<Double, Long>(42.0, 2l));", "modifier": "", "type": "Either<Integer, Tuple2<Double, Long>>", "declarator": "tuple2Either = new Right<>(new Tuple2<Double, Long>(42.0, 2l))", "var_name": "tuple2Either"}], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/EitherTypeInfoTest.java"}, "test_case": {"identifier": "testEitherTypeEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEitherTypeEquality() {\n\t\tEitherTypeInfo<Integer, String> eitherInfo1 = new EitherTypeInfo<Integer, String>(\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tEitherTypeInfo<Integer, String> eitherInfo2 = new EitherTypeInfo<Integer, String>(\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tassertEquals(eitherInfo1, eitherInfo2);\n\t\tassertEquals(eitherInfo1.hashCode(), eitherInfo2.hashCode());\n\t}", "signature": "void testEitherTypeEquality()", "full_signature": "@Test public void testEitherTypeEquality()", "class_method_signature": "EitherTypeInfoTest.testEitherTypeEquality()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "EitherTypeInfo", "superclass": "extends TypeInformation<Either<L, R>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final TypeInformation<L> leftType;", "modifier": "private final", "type": "TypeInformation<L>", "declarator": "leftType", "var_name": "leftType"}, {"original_string": "private final TypeInformation<R> rightType;", "modifier": "private final", "type": "TypeInformation<R>", "declarator": "rightType", "var_name": "rightType"}], "methods": [{"identifier": "EitherTypeInfo", "parameters": "(TypeInformation<L> leftType, TypeInformation<R> rightType)", "modifiers": "@PublicEvolving public", "return": "", "signature": " EitherTypeInfo(TypeInformation<L> leftType, TypeInformation<R> rightType)", "full_signature": "@PublicEvolving public  EitherTypeInfo(TypeInformation<L> leftType, TypeInformation<R> rightType)", "class_method_signature": "EitherTypeInfo.EitherTypeInfo(TypeInformation<L> leftType, TypeInformation<R> rightType)", "testcase": false, "constructor": true}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override @PublicEvolving public boolean isBasicType()", "class_method_signature": "EitherTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override @PublicEvolving public boolean isTupleType()", "class_method_signature": "EitherTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getArity()", "full_signature": "@Override @PublicEvolving public int getArity()", "class_method_signature": "EitherTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override @PublicEvolving public int getTotalFields()", "class_method_signature": "EitherTypeInfo.getTotalFields()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "Class<Either<L, R>>", "signature": "Class<Either<L, R>> getTypeClass()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public Class<Either<L, R>> getTypeClass()", "class_method_signature": "EitherTypeInfo.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "isKeyType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isKeyType()", "full_signature": "@Override @PublicEvolving public boolean isKeyType()", "class_method_signature": "EitherTypeInfo.isKeyType()", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig config)", "modifiers": "@Override @PublicEvolving public", "return": "TypeSerializer<Either<L, R>>", "signature": "TypeSerializer<Either<L, R>> createSerializer(ExecutionConfig config)", "full_signature": "@Override @PublicEvolving public TypeSerializer<Either<L, R>> createSerializer(ExecutionConfig config)", "class_method_signature": "EitherTypeInfo.createSerializer(ExecutionConfig config)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EitherTypeInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean equals(Object obj)", "class_method_signature": "EitherTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EitherTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "EitherTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getLeftType", "parameters": "()", "modifiers": "public", "return": "TypeInformation<L>", "signature": "TypeInformation<L> getLeftType()", "full_signature": "public TypeInformation<L> getLeftType()", "class_method_signature": "EitherTypeInfo.getLeftType()", "testcase": false, "constructor": false}, {"identifier": "getRightType", "parameters": "()", "modifiers": "public", "return": "TypeInformation<R>", "signature": "TypeInformation<R> getRightType()", "full_signature": "public TypeInformation<R> getRightType()", "class_method_signature": "EitherTypeInfo.getRightType()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/EitherTypeInfo.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int hashCode() {\n\t\treturn 17 * leftType.hashCode() + rightType.hashCode();\n\t}", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EitherTypeInfo.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}