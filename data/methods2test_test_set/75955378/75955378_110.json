{"test_class": {"identifier": "CloudWatchEmbeddedMetricsReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Long timestamp = 1584580665491L;", "modifier": "private", "type": "Long", "declarator": "timestamp = 1584580665491L", "var_name": "timestamp"}, {"original_string": "private Gson gson = new Gson();", "modifier": "private", "type": "Gson", "declarator": "gson = new Gson()", "var_name": "gson"}], "file": "reporters/src/test/java/com/nextdoor/bender/monitoring/embedded/metrics/CloudWatchEmbeddedMetricsReporterTest.java"}, "test_case": {"identifier": "testWithNoDimensionsAndStats", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithNoDimensionsAndStats() throws Exception {\n        List<Stat> stats = Arrays.asList(new Stat(\"counts\", 20),\n                new Stat(\"errors\", 2));\n        String actualJson = CloudWatchEmbeddedMetricsReporter.getCloudWatchEmbeddedMetricsJson(\"nextdoor\",\n                timestamp,\n                Collections.emptyMap(),\n                stats,\n                gson);\n\n        String expectedJson = IOUtils.toString(\n                new InputStreamReader(this.getClass().getResourceAsStream(\"metrics_with_stats_no_dimensions.json\"), \"UTF-8\"));\n\n        assertEquals(expectedJson, actualJson);\n    }", "signature": "void testWithNoDimensionsAndStats()", "full_signature": "@Test public void testWithNoDimensionsAndStats()", "class_method_signature": "CloudWatchEmbeddedMetricsReporterTest.testWithNoDimensionsAndStats()", "testcase": true, "constructor": false, "invocations": ["asList", "getCloudWatchEmbeddedMetricsJson", "emptyMap", "toString", "getResourceAsStream", "getClass", "assertEquals"]}, "focal_class": {"identifier": "CloudWatchEmbeddedMetricsReporter", "superclass": "", "interfaces": "implements Reporter", "fields": [{"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private final List<StatFilter> statFilters;", "modifier": "private final", "type": "List<StatFilter>", "declarator": "statFilters", "var_name": "statFilters"}, {"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "methods": [{"identifier": "CloudWatchEmbeddedMetricsReporter", "parameters": "(final String namespace,\n                                             final List<StatFilter> statFilters)", "modifiers": "public", "return": "", "signature": " CloudWatchEmbeddedMetricsReporter(final String namespace,\n                                             final List<StatFilter> statFilters)", "full_signature": "public  CloudWatchEmbeddedMetricsReporter(final String namespace,\n                                             final List<StatFilter> statFilters)", "class_method_signature": "CloudWatchEmbeddedMetricsReporter.CloudWatchEmbeddedMetricsReporter(final String namespace,\n                                             final List<StatFilter> statFilters)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(ArrayList<Stat> stats, long invokeTimeMs, Set<Tag> tags)", "modifiers": "@Override public", "return": "void", "signature": "void write(ArrayList<Stat> stats, long invokeTimeMs, Set<Tag> tags)", "full_signature": "@Override public void write(ArrayList<Stat> stats, long invokeTimeMs, Set<Tag> tags)", "class_method_signature": "CloudWatchEmbeddedMetricsReporter.write(ArrayList<Stat> stats, long invokeTimeMs, Set<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "getStatFilters", "parameters": "()", "modifiers": "@Override public", "return": "List<StatFilter>", "signature": "List<StatFilter> getStatFilters()", "full_signature": "@Override public List<StatFilter> getStatFilters()", "class_method_signature": "CloudWatchEmbeddedMetricsReporter.getStatFilters()", "testcase": false, "constructor": false}, {"identifier": "getCloudWatchEmbeddedMetricsJson", "parameters": "(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "modifiers": "public static", "return": "String", "signature": "String getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "full_signature": "public static String getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "class_method_signature": "CloudWatchEmbeddedMetricsReporter.getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "testcase": false, "constructor": false}], "file": "reporters/src/main/java/com/nextdoor/bender/monitoring/embedded/metrics/CloudWatchEmbeddedMetricsReporter.java"}, "focal_method": {"identifier": "getCloudWatchEmbeddedMetricsJson", "parameters": "(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "modifiers": "public static", "return": "String", "body": "public static String getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson) {\n        Map<String, Object> embeddedMetricsObject = new HashMap<>();\n\n        /* first add nodes for each dimension in the embedded object since it'll be shared by all stats/metrics */\n        dimensions.forEach(embeddedMetricsObject::put);\n\n        /* Each stat is essentially a metric so iterate through each stat (metric).\n           We can be confident there are now duplicate stats since handler guarantees that\n         */\n        List<CloudWatchMetricObject> cwMetricObjects = new ArrayList<>();\n        stats.forEach(s -> {\n            /* each CloudWatchMetric object will have the overall dimensions at the operation level */\n            List<String> allDimensions = new ArrayList<>(dimensions.keySet());\n            List<Dimension> statDimensions = tagsToDimensions(s.getTags());\n            allDimensions.addAll(statDimensions.stream()\n                    .map(Dimension::getName)\n                    .collect(Collectors.toList()));\n\n            allDimensions = allDimensions.stream()\n                    .distinct()\n                    .collect(Collectors.toList());\n\n            /* add dimension name/value to main embedded metrics object */\n            statDimensions.forEach(d -> embeddedMetricsObject.put(d.getName(), d.getValue()));\n\n            /* add stat metric info as overall field */\n            embeddedMetricsObject.put(s.getName(), s.getValue());\n\n            /* each stat will have a unique CloudWatchMetric object */\n            cwMetricObjects.add(new CloudWatchMetricObject(namespace,\n                    Collections.singletonList(allDimensions),\n                    Collections.singletonList(new MetricPOJO(s.getName(), StandardUnit.None.toString())))\n            );\n\n        });\n\n        /* finally add overall node with list of CWMetric objects */\n        embeddedMetricsObject.put(\"_aws\", new AWSMetricObject(timestamp, cwMetricObjects));\n\n        return gson.toJson(embeddedMetricsObject);\n    }", "signature": "String getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "full_signature": "public static String getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "class_method_signature": "CloudWatchEmbeddedMetricsReporter.getCloudWatchEmbeddedMetricsJson(String namespace,\n                                                          long timestamp,\n                                                          Map<String, String> dimensions,\n                                                          List<Stat> stats,\n                                                          Gson gson)", "testcase": false, "constructor": false, "invocations": ["forEach", "forEach", "keySet", "tagsToDimensions", "getTags", "addAll", "collect", "map", "stream", "toList", "collect", "distinct", "stream", "toList", "forEach", "put", "getName", "getValue", "put", "getName", "getValue", "add", "singletonList", "singletonList", "getName", "toString", "put", "toJson"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}