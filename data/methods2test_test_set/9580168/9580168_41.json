{"test_class": {"identifier": "CheckstyleValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LICENSE_PROP = \"license\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_PROP = \"license\"", "var_name": "LICENSE_PROP"}, {"original_string": "private static final String DIRECTORY = \"src/main/java/foo\";", "modifier": "private static final", "type": "String", "declarator": "DIRECTORY = \"src/main/java/foo\"", "var_name": "DIRECTORY"}, {"original_string": "private static final String LICENSE = \"Hello.\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE = \"Hello.\"", "var_name": "LICENSE"}, {"original_string": "@Rule\n    public final LicenseRule rule = new LicenseRule();", "modifier": "@Rule\n    public final", "type": "LicenseRule", "declarator": "rule = new LicenseRule()", "var_name": "rule"}], "file": "qulice-checkstyle/src/test/java/com/qulice/checkstyle/CheckstyleValidatorTest.java"}, "test_case": {"identifier": "reportsErrorOnMoreThanOneReturnStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsErrorOnMoreThanOneReturnStatement() throws Exception {\n        this.validate(\n            \"ReturnCount.java\", false,\n            \"Return count is 2 (max allowed for non-void methods/lambdas is 1)\"\n        );\n    }", "signature": "void reportsErrorOnMoreThanOneReturnStatement()", "full_signature": "@Test public void reportsErrorOnMoreThanOneReturnStatement()", "class_method_signature": "CheckstyleValidatorTest.reportsErrorOnMoreThanOneReturnStatement()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "CheckstyleValidator", "superclass": "", "interfaces": "implements ResourceValidator", "fields": [{"original_string": "private final Checker checker;", "modifier": "private final", "type": "Checker", "declarator": "checker", "var_name": "checker"}, {"original_string": "private final CheckstyleListener listener;", "modifier": "private final", "type": "CheckstyleListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "CheckstyleValidator", "parameters": "(final Environment env)", "modifiers": "@SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\") public", "return": "", "signature": " CheckstyleValidator(final Environment env)", "full_signature": "@SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\") public  CheckstyleValidator(final Environment env)", "class_method_signature": "CheckstyleValidator.CheckstyleValidator(final Environment env)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(final Collection<File> files)", "modifiers": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public", "return": "Collection<Violation>", "signature": "Collection<Violation> validate(final Collection<File> files)", "full_signature": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public Collection<Violation> validate(final Collection<File> files)", "class_method_signature": "CheckstyleValidator.validate(final Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "CheckstyleValidator.name()", "testcase": false, "constructor": false}, {"identifier": "configuration", "parameters": "(final Environment env)", "modifiers": "private", "return": "Configuration", "signature": "Configuration configuration(final Environment env)", "full_signature": "private Configuration configuration(final Environment env)", "class_method_signature": "CheckstyleValidator.configuration(final Environment env)", "testcase": false, "constructor": false}, {"identifier": "header", "parameters": "(final Environment env)", "modifiers": "private", "return": "String", "signature": "String header(final Environment env)", "full_signature": "private String header(final Environment env)", "class_method_signature": "CheckstyleValidator.header(final Environment env)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(final Environment env, final String name)", "modifiers": "private static", "return": "URL", "signature": "URL toUrl(final Environment env, final String name)", "full_signature": "private static URL toUrl(final Environment env, final String name)", "class_method_signature": "CheckstyleValidator.toUrl(final Environment env, final String name)", "testcase": false, "constructor": false}], "file": "qulice-checkstyle/src/main/java/com/qulice/checkstyle/CheckstyleValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final Collection<File> files)", "modifiers": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public", "return": "Collection<Violation>", "body": "@Override\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    public Collection<Violation> validate(final Collection<File> files) {\n        try {\n            this.checker.process(Lists.newArrayList(files));\n        } catch (final CheckstyleException ex) {\n            throw new IllegalStateException(\"Failed to process files\", ex);\n        }\n        final List<AuditEvent> events = this.listener.events();\n        final Collection<Violation> results = new LinkedList<>();\n        for (final AuditEvent event : events) {\n            final String check = event.getSourceName();\n            results.add(\n                new Violation.Default(\n                    this.name(),\n                    check.substring(check.lastIndexOf('.') + 1),\n                    event.getFileName(),\n                    String.valueOf(event.getLine()),\n                    event.getMessage()\n                )\n            );\n        }\n        return results;\n    }", "signature": "Collection<Violation> validate(final Collection<File> files)", "full_signature": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public Collection<Violation> validate(final Collection<File> files)", "class_method_signature": "CheckstyleValidator.validate(final Collection<File> files)", "testcase": false, "constructor": false, "invocations": ["process", "newArrayList", "events", "getSourceName", "add", "name", "substring", "lastIndexOf", "getFileName", "valueOf", "getLine", "getMessage"]}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}