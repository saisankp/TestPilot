{"test_class": {"identifier": "StreamPipeTest", "superclass": "extends PipeTestBase<StreamPipe>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/pipes/StreamPipeTest.java"}, "test_case": {"identifier": "doPipeHttpRequestAntiVirusTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void doPipeHttpRequestAntiVirusTest() throws Exception {\n\t\tMockMultipartHttpServletRequest request = createMultipartHttpRequest(pipe, true);\n\t\tpipe.addParameter(createHttpRequestParameter(request, session));\n\t\tpipe.configure();\n\t\tpipe.start();\n\t\tPipeRunResult pipeRunResult = doPipe(pipe, \"\", session);\n\t\tassertEquals(\"success\", pipeRunResult.getPipeForward().getName());\n\t\tString expectedResult = \"<parts>\"\n\t\t\t\t+ \"<part type=\\\"string\\\" name=\\\"string1\\\" sessionKey=\\\"part_string\\\" size=\\\"19\\\"/>\"\n\t\t\t\t+ \"<part type=\\\"file\\\" name=\\\"doc001.pdf\\\" sessionKey=\\\"part_file\\\" size=\\\"26358\\\" mimeType=\\\"application/octet-stream; charset=ISO-8859-1\\\"/>\"\n\t\t\t\t+ \"<part type=\\\"string\\\" name=\\\"antivirus_rc\\\" sessionKey=\\\"part_string2\\\" size=\\\"4\\\"/>\"\n\t\t\t\t+ \"<part type=\\\"file\\\" name=\\\"doc002.pdf\\\" sessionKey=\\\"part_file2\\\" size=\\\"25879\\\" mimeType=\\\"application/octet-stream; charset=ISO-8859-1\\\"/>\"\n\t\t\t\t+ \"<part type=\\\"string\\\" name=\\\"antivirus_rc\\\" sessionKey=\\\"part_string3\\\" size=\\\"4\\\"/>\"\n\t\t\t\t+ \"</parts>\";\n\t\tassertEquals(expectedResult, pipeRunResult.getResult().asString());\n\t}", "signature": "void doPipeHttpRequestAntiVirusTest()", "full_signature": "@Test public void doPipeHttpRequestAntiVirusTest()", "class_method_signature": "StreamPipeTest.doPipeHttpRequestAntiVirusTest()", "testcase": true, "constructor": false, "invocations": ["createMultipartHttpRequest", "addParameter", "createHttpRequestParameter", "configure", "start", "doPipe", "assertEquals", "getName", "getPipeForward", "assertEquals", "asString", "getResult"]}, "focal_class": {"identifier": "StreamPipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "public static final String ANTIVIRUS_FAILED_FORWARD = \"antiVirusFailed\";", "modifier": "public static final", "type": "String", "declarator": "ANTIVIRUS_FAILED_FORWARD = \"antiVirusFailed\"", "var_name": "ANTIVIRUS_FAILED_FORWARD"}, {"original_string": "private boolean extractFirstStringPart = false;", "modifier": "private", "type": "boolean", "declarator": "extractFirstStringPart = false", "var_name": "extractFirstStringPart"}, {"original_string": "private String multipartXmlSessionKey = \"multipartXml\";", "modifier": "private", "type": "String", "declarator": "multipartXmlSessionKey = \"multipartXml\"", "var_name": "multipartXmlSessionKey"}, {"original_string": "private boolean checkAntiVirus = false;", "modifier": "private", "type": "boolean", "declarator": "checkAntiVirus = false", "var_name": "checkAntiVirus"}, {"original_string": "private String antiVirusPartName = \"antivirus_rc\";", "modifier": "private", "type": "String", "declarator": "antiVirusPartName = \"antivirus_rc\"", "var_name": "antiVirusPartName"}, {"original_string": "private String antiVirusMessagePartName = \"antivirus_msg\";", "modifier": "private", "type": "String", "declarator": "antiVirusMessagePartName = \"antivirus_msg\"", "var_name": "antiVirusMessagePartName"}, {"original_string": "private String antiVirusPassedMessage = \"Pass\";", "modifier": "private", "type": "String", "declarator": "antiVirusPassedMessage = \"Pass\"", "var_name": "antiVirusPassedMessage"}, {"original_string": "private boolean antiVirusFailureAsSoapFault = false;", "modifier": "private", "type": "boolean", "declarator": "antiVirusFailureAsSoapFault = false", "var_name": "antiVirusFailureAsSoapFault"}, {"original_string": "private String antiVirusFailureReasonSessionKey;", "modifier": "private", "type": "String", "declarator": "antiVirusFailureReasonSessionKey", "var_name": "antiVirusFailureReasonSessionKey"}], "methods": [{"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "StreamPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "adjustFirstStringPart", "parameters": "(String firstStringPart, IPipeLineSession session)", "modifiers": "protected", "return": "String", "signature": "String adjustFirstStringPart(String firstStringPart, IPipeLineSession session)", "full_signature": "protected String adjustFirstStringPart(String firstStringPart, IPipeLineSession session)", "class_method_signature": "StreamPipe.adjustFirstStringPart(String firstStringPart, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "createSoapFaultMessage", "parameters": "(String errorMessage)", "modifiers": "private", "return": "String", "signature": "String createSoapFaultMessage(String errorMessage)", "full_signature": "private String createSoapFaultMessage(String errorMessage)", "class_method_signature": "StreamPipe.createSoapFaultMessage(String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "addSessionKey", "parameters": "(IPipeLineSession session, String key, Object value)", "modifiers": "private", "return": "void", "signature": "void addSessionKey(IPipeLineSession session, String key, Object value)", "full_signature": "private void addSessionKey(IPipeLineSession session, String key, Object value)", "class_method_signature": "StreamPipe.addSessionKey(IPipeLineSession session, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "addSessionKey", "parameters": "(IPipeLineSession session, String key, Object value, String name)", "modifiers": "private", "return": "void", "signature": "void addSessionKey(IPipeLineSession session, String key, Object value, String name)", "full_signature": "private void addSessionKey(IPipeLineSession session, String key, Object value, String name)", "class_method_signature": "StreamPipe.addSessionKey(IPipeLineSession session, String key, Object value, String name)", "testcase": false, "constructor": false}, {"identifier": "setExtractFirstStringPart", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code>) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe)\", \"false\"}) public", "return": "void", "signature": "void setExtractFirstStringPart(boolean b)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code>) when true the first part is not put in a session key but returned to the pipeline (as the result of this pipe)\", \"false\"}) public void setExtractFirstStringPart(boolean b)", "class_method_signature": "StreamPipe.setExtractFirstStringPart(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isExtractFirstStringPart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExtractFirstStringPart()", "full_signature": "public boolean isExtractFirstStringPart()", "class_method_signature": "StreamPipe.isExtractFirstStringPart()", "testcase": false, "constructor": false}, {"identifier": "getMultipartXmlSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMultipartXmlSessionKey()", "full_signature": "public String getMultipartXmlSessionKey()", "class_method_signature": "StreamPipe.getMultipartXmlSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setMultipartXmlSessionKey", "parameters": "(String multipartXmlSessionKey)", "modifiers": "@IbisDoc({\"(only used when <code>extractfirststringpart=true</code>) the session key to put the xml in with info about the stored parts\", \"<code>multipartxml</code>\"}) public", "return": "void", "signature": "void setMultipartXmlSessionKey(String multipartXmlSessionKey)", "full_signature": "@IbisDoc({\"(only used when <code>extractfirststringpart=true</code>) the session key to put the xml in with info about the stored parts\", \"<code>multipartxml</code>\"}) public void setMultipartXmlSessionKey(String multipartXmlSessionKey)", "class_method_signature": "StreamPipe.setMultipartXmlSessionKey(String multipartXmlSessionKey)", "testcase": false, "constructor": false}, {"identifier": "setCheckAntiVirus", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code>) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part)\", \"false\"}) public", "return": "void", "signature": "void setCheckAntiVirus(boolean b)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code>) when true parts are checked for antivirus scan returncode. these antivirus scan parts have been added by another application (so the antivirus scan is not performed in this pipe). for each file part an antivirus scan part have been added by this other application (directly after this file part)\", \"false\"}) public void setCheckAntiVirus(boolean b)", "class_method_signature": "StreamPipe.setCheckAntiVirus(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isCheckAntiVirus", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCheckAntiVirus()", "full_signature": "public boolean isCheckAntiVirus()", "class_method_signature": "StreamPipe.isCheckAntiVirus()", "testcase": false, "constructor": false}, {"identifier": "getAntiVirusPartName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAntiVirusPartName()", "full_signature": "public String getAntiVirusPartName()", "class_method_signature": "StreamPipe.getAntiVirusPartName()", "testcase": false, "constructor": false}, {"identifier": "setAntiVirusPartName", "parameters": "(String antiVirusPartName)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan status parts\", \"<code>antivirus_rc</code>\"}) public", "return": "void", "signature": "void setAntiVirusPartName(String antiVirusPartName)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan status parts\", \"<code>antivirus_rc</code>\"}) public void setAntiVirusPartName(String antiVirusPartName)", "class_method_signature": "StreamPipe.setAntiVirusPartName(String antiVirusPartName)", "testcase": false, "constructor": false}, {"identifier": "getAntiVirusMessagePartName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAntiVirusMessagePartName()", "full_signature": "public String getAntiVirusMessagePartName()", "class_method_signature": "StreamPipe.getAntiVirusMessagePartName()", "testcase": false, "constructor": false}, {"identifier": "setAntiVirusMessagePartName", "parameters": "(String antiVirusMessagePartName)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan message parts\", \"<code>antivirus_msg</code>\"}) public", "return": "void", "signature": "void setAntiVirusMessagePartName(String antiVirusMessagePartName)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) name of antivirus scan message parts\", \"<code>antivirus_msg</code>\"}) public void setAntiVirusMessagePartName(String antiVirusMessagePartName)", "class_method_signature": "StreamPipe.setAntiVirusMessagePartName(String antiVirusMessagePartName)", "testcase": false, "constructor": false}, {"identifier": "getAntiVirusPassedMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAntiVirusPassedMessage()", "full_signature": "public String getAntiVirusPassedMessage()", "class_method_signature": "StreamPipe.getAntiVirusPassedMessage()", "testcase": false, "constructor": false}, {"identifier": "setAntiVirusPassedMessage", "parameters": "(String antiVirusPassedMessage)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) message of antivirus scan parts which indicates the antivirus scan passed\", \"<code>pass</code>\"}) public", "return": "void", "signature": "void setAntiVirusPassedMessage(String antiVirusPassedMessage)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) message of antivirus scan parts which indicates the antivirus scan passed\", \"<code>pass</code>\"}) public void setAntiVirusPassedMessage(String antiVirusPassedMessage)", "class_method_signature": "StreamPipe.setAntiVirusPassedMessage(String antiVirusPassedMessage)", "testcase": false, "constructor": false}, {"identifier": "setAntiVirusFailureAsSoapFault", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message\", \"false\"}) public", "return": "void", "signature": "void setAntiVirusFailureAsSoapFault(boolean b)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) when true and the antivirusfailed forward is specified and the antivirus scan did not pass, a soap fault is returned instead of only a plain error message\", \"false\"}) public void setAntiVirusFailureAsSoapFault(boolean b)", "class_method_signature": "StreamPipe.setAntiVirusFailureAsSoapFault(boolean b)", "testcase": false, "constructor": false}, {"identifier": "getAntiVirusFailureAsSoapFault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAntiVirusFailureAsSoapFault()", "full_signature": "public boolean getAntiVirusFailureAsSoapFault()", "class_method_signature": "StreamPipe.getAntiVirusFailureAsSoapFault()", "testcase": false, "constructor": false}, {"identifier": "setAntiVirusFailureReasonSessionKey", "parameters": "(String antiVirusFailureReasonSessionKey)", "modifiers": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline\", \"\"}) public", "return": "void", "signature": "void setAntiVirusFailureReasonSessionKey(String antiVirusFailureReasonSessionKey)", "full_signature": "@IbisDoc({\"(only used for parameter <code>httprequest</code> and when <code>checkantivirus=true</code>) if not empty and the antivirusfailed forward is specified and the antivirus scan did not pass, the error message (or soap fault) is stored in this session key and the first string part is returned to the pipeline\", \"\"}) public void setAntiVirusFailureReasonSessionKey(String antiVirusFailureReasonSessionKey)", "class_method_signature": "StreamPipe.setAntiVirusFailureReasonSessionKey(String antiVirusFailureReasonSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getAntiVirusFailureReasonSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAntiVirusFailureReasonSessionKey()", "full_signature": "public String getAntiVirusFailureReasonSessionKey()", "class_method_signature": "StreamPipe.getAntiVirusFailureReasonSessionKey()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/StreamPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tObject result = message;\n\t\tMap<String,Object> parameters = null;\n\t\tParameterList parameterList = getParameterList();\n\t\tif (parameterList != null) {\n\t\t\ttry {\n\t\t\t\tparameters = parameterList.getValues(message, session).getValueMap();\n\t\t\t} catch (ParameterException e) {\n\t\t\t\tthrow new PipeRunException(this, \"Could not resolve parameters\", e);\n\t\t\t}\n\t\t}\n\t\tInputStream inputStream = null;\n\t\tOutputStream outputStream = null;\n\t\tHttpServletRequest httpRequest = null;\n\t\tHttpServletResponse httpResponse = null;\n\t\tString contentType = null;\n\t\tString contentDisposition = null;\n\t\tString redirectLocation = null;\n\t\tif (parameters != null) {\n\t\t\tif (parameters.get(\"inputStream\") != null) {\n\t\t\t\tinputStream = (InputStream) parameters.get(\"inputStream\");\n\t\t\t}\n\t\t\tif (parameters.get(\"outputStream\") != null) {\n\t\t\t\toutputStream = (OutputStream) parameters.get(\"outputStream\");\n\t\t\t}\n\t\t\tif (parameters.get(\"httpRequest\") != null) {\n\t\t\t\thttpRequest = (HttpServletRequest) parameters.get(\"httpRequest\");\n\t\t\t}\n\t\t\tif (parameters.get(\"httpResponse\") != null) {\n\t\t\t\thttpResponse = (HttpServletResponse) parameters.get(\"httpResponse\");\n\t\t\t}\n\t\t\tif (parameters.get(\"contentType\") != null) {\n\t\t\t\tcontentType = (String) parameters.get(\"contentType\");\n\t\t\t}\n\t\t\tif (parameters.get(\"contentDisposition\") != null) {\n\t\t\t\tcontentDisposition = (String) parameters.get(\"contentDisposition\");\n\t\t\t}\n\t\t\tif (parameters.get(\"redirectLocation\") != null) {\n\t\t\t\tredirectLocation = (String) parameters.get(\"redirectLocation\");\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tif (inputStream == null) {\n\t\t\t\tinputStream = message.asInputStream();\n\t\t\t}\n\t\t\tif (httpResponse != null) {\n\t\t\t\tHttpSender.streamResponseBody(inputStream, contentType, contentDisposition, httpResponse, log, getLogPrefix(session), redirectLocation);\n\t\t\t} else if (httpRequest != null) {\n\t\t\t\tStringBuilder partsString = new StringBuilder(\"<parts>\");\n\t\t\t\tString firstStringPart = null;\n\t\t\t\tList<AntiVirusObject> antiVirusObjects = new ArrayList<AntiVirusObject>();\n\t\t\t\tif (ServletFileUpload.isMultipartContent(httpRequest)) {\n\t\t\t\t\tlog.debug(getLogPrefix(session) + \"request with content type [\" + httpRequest.getContentType() + \"] and length [\" + httpRequest.getContentLength() + \"] contains multipart content\");\n\t\t\t\t\tDiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();\n\t\t\t\t\tServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);\n\t\t\t\t\tList<FileItem> items = servletFileUpload.parseRequest(httpRequest);\n\t\t\t\t\tint fileCounter = 0;\n\t\t\t\t\tint stringCounter = 0;\n\t\t\t\t\tlog.debug(getLogPrefix(session) + \"multipart request items size [\" + items.size() + \"]\");\n\t\t\t\t\tString lastFoundFileName = null;\n\t\t\t\t\tString lastFoundAVStatus = null;\n\t\t\t\t\tString lastFoundAVMessage = null;\n\t\t\t\t\tfor (FileItem item : items) {\n\t\t\t\t\t\tif (item.isFormField()) {\n\t\t\t\t\t\t\t// Process regular form field (input\n\t\t\t\t\t\t\t// type=\"text|radio|checkbox|etc\", select, etc).\n\t\t\t\t\t\t\tString fieldValue = item.getString();\n\t\t\t\t\t\t\tString fieldName = item.getFieldName();\n\t\t\t\t\t\t\tif (isCheckAntiVirus() && fieldName.equalsIgnoreCase(getAntiVirusPartName())) {\n\t\t\t\t\t\t\t\tlog.debug(getLogPrefix(session) + \"found antivirus status part [\" + fieldName + \"] with value [\" + fieldValue + \"]\");\n\t\t\t\t\t\t\t\tlastFoundAVStatus = fieldValue;\n\t\t\t\t\t\t\t} else if (isCheckAntiVirus() && fieldName.equalsIgnoreCase(getAntiVirusMessagePartName())) {\n\t\t\t\t\t\t\t\tlog.debug(getLogPrefix(session) + \"found antivirus message part [\" + fieldName + \"] with value [\" + fieldValue + \"]\");\n\t\t\t\t\t\t\t\tlastFoundAVMessage = fieldValue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlog.debug(getLogPrefix(session) + \"found string part [\" + fieldName + \"] with value [\" + fieldValue + \"]\");\n\t\t\t\t\t\t\t\tif (isExtractFirstStringPart() && firstStringPart == null) {\n\t\t\t\t\t\t\t\t\tfirstStringPart = fieldValue;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tString sessionKeyName = \"part_string\" + (++stringCounter > 1 ? stringCounter : \"\");\n\t\t\t\t\t\t\t\t\taddSessionKey(session, sessionKeyName, fieldValue);\n\t\t\t\t\t\t\t\t\tpartsString.append(\"<part type=\\\"string\\\" name=\\\"\" + fieldName + \"\\\" sessionKey=\\\"\" + sessionKeyName + \"\\\" size=\\\"\" + fieldValue.length() + \"\\\"/>\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Process form file field (input type=\"file\").\n\t\t\t\t\t\t\tif (lastFoundFileName != null\n\t\t\t\t\t\t\t\t\t&& lastFoundAVStatus != null) {\n\t\t\t\t\t\t\t\tantiVirusObjects.add(new AntiVirusObject(\n\t\t\t\t\t\t\t\t\t\tlastFoundFileName, lastFoundAVStatus,\n\t\t\t\t\t\t\t\t\t\tlastFoundAVMessage));\n\t\t\t\t\t\t\t\tlastFoundFileName = null;\n\t\t\t\t\t\t\t\tlastFoundAVStatus = null;\n\t\t\t\t\t\t\t\tlastFoundAVMessage = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlog.debug(getLogPrefix(session) + \"found file part [\" + item.getName() + \"]\");\n\t\t\t\t\t\t\tString sessionKeyName = \"part_file\" + (++fileCounter > 1 ? fileCounter : \"\");\n\t\t\t\t\t\t\tString fileName = FilenameUtils.getName(item.getName());\n\t\t\t\t\t\t\tInputStream is = item.getInputStream();\n\t\t\t\t\t\t\tint size = is.available();\n\t\t\t\t\t\t\tString mimeType = item.getContentType();\n\t\t\t\t\t\t\tif (size > 0) {\n\t\t\t\t\t\t\t\taddSessionKey(session, sessionKeyName, is, fileName);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taddSessionKey(session, sessionKeyName, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpartsString.append(\"<part type=\\\"file\\\" name=\\\"\" + fileName + \"\\\" sessionKey=\\\"\" + sessionKeyName + \"\\\" size=\\\"\" + size + \"\\\" mimeType=\\\"\" + mimeType + \"\\\"/>\");\n\t\t\t\t\t\t\tlastFoundFileName = fileName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (lastFoundFileName != null && lastFoundAVStatus != null) {\n\t\t\t\t\t\tantiVirusObjects.add(new AntiVirusObject(lastFoundFileName, lastFoundAVStatus, lastFoundAVMessage));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog.debug(getLogPrefix(session) + \"request with content type [\" + httpRequest.getContentType() + \"] and length [\" + httpRequest.getContentLength() + \"] does NOT contain multipart content\");\n\t\t\t\t}\n\t\t\t\tpartsString.append(\"</parts>\");\n\t\t\t\tif (isExtractFirstStringPart()) {\n\t\t\t\t\tresult = adjustFirstStringPart(firstStringPart, session);\n\t\t\t\t\tsession.put(getMultipartXmlSessionKey(), partsString.toString());\n\t\t\t\t} else {\n\t\t\t\t\tresult = partsString.toString();\n\t\t\t\t}\n\t\t\t\tif (!antiVirusObjects.isEmpty()) {\n\t\t\t\t\tfor (AntiVirusObject antiVirusObject : antiVirusObjects) {\n\t\t\t\t\t\tif (!antiVirusObject.getStatus().equalsIgnoreCase(getAntiVirusPassedMessage())) {\n\t\t\t\t\t\t\tString errorMessage = \"multipart contains file [\" + antiVirusObject.getFileName() + \"] with antivirus status [\" + antiVirusObject.getStatus() + \"] and message [\" + StringUtils.defaultString(antiVirusObject.getMessage()) + \"]\";\n\t\t\t\t\t\t\tPipeForward antiVirusFailedForward = findForward(ANTIVIRUS_FAILED_FORWARD);\n\t\t\t\t\t\t\tif (antiVirusFailedForward == null) {\n\t\t\t\t\t\t\t\tthrow new PipeRunException(this, errorMessage);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (antiVirusFailureAsSoapFault) {\n\t\t\t\t\t\t\t\t\terrorMessage = createSoapFaultMessage(errorMessage);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (StringUtils.isEmpty(getAntiVirusFailureReasonSessionKey())) {\n\t\t\t\t\t\t\t\t\treturn new PipeRunResult(antiVirusFailedForward, errorMessage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsession.put(getAntiVirusFailureReasonSessionKey(), errorMessage);\n\t\t\t\t\t\t\t\t\treturn new PipeRunResult(antiVirusFailedForward, result);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tMisc.streamToStream(inputStream, outputStream);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new PipeRunException(this, \"IOException streaming input to output\", e);\n\t\t} catch (FileUploadException e) {\n\t\t\tthrow new PipeRunException(this, \"FileUploadException getting multiparts from httpServletRequest\", e);\n\t\t}\n\t\treturn new PipeRunResult(getForward(), result);\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "StreamPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["getParameterList", "getValueMap", "getValues", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "asInputStream", "streamResponseBody", "getLogPrefix", "isMultipartContent", "debug", "getLogPrefix", "getContentType", "getContentLength", "parseRequest", "debug", "getLogPrefix", "size", "isFormField", "getString", "getFieldName", "isCheckAntiVirus", "equalsIgnoreCase", "getAntiVirusPartName", "debug", "getLogPrefix", "isCheckAntiVirus", "equalsIgnoreCase", "getAntiVirusMessagePartName", "debug", "getLogPrefix", "debug", "getLogPrefix", "isExtractFirstStringPart", "addSessionKey", "append", "length", "add", "debug", "getLogPrefix", "getName", "getName", "getName", "getInputStream", "available", "getContentType", "addSessionKey", "addSessionKey", "append", "add", "debug", "getLogPrefix", "getContentType", "getContentLength", "append", "isExtractFirstStringPart", "adjustFirstStringPart", "put", "getMultipartXmlSessionKey", "toString", "toString", "isEmpty", "equalsIgnoreCase", "getStatus", "getAntiVirusPassedMessage", "getFileName", "getStatus", "defaultString", "getMessage", "findForward", "createSoapFaultMessage", "isEmpty", "getAntiVirusFailureReasonSessionKey", "put", "getAntiVirusFailureReasonSessionKey", "streamToStream", "getForward"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}