{"test_class": {"identifier": "TestSyslogUdpSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger logger =\n      LoggerFactory.getLogger(TestSyslogUdpSource.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "logger =\n      LoggerFactory.getLogger(TestSyslogUdpSource.class)", "var_name": "logger"}, {"original_string": "private SyslogUDPSource source;", "modifier": "private", "type": "SyslogUDPSource", "declarator": "source", "var_name": "source"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private static final int TEST_SYSLOG_PORT = 0;", "modifier": "private static final", "type": "int", "declarator": "TEST_SYSLOG_PORT = 0", "var_name": "TEST_SYSLOG_PORT"}, {"original_string": "private final DateTime time = new DateTime();", "modifier": "private final", "type": "DateTime", "declarator": "time = new DateTime()", "var_name": "time"}, {"original_string": "private final String stamp1 = time.toString();", "modifier": "private final", "type": "String", "declarator": "stamp1 = time.toString()", "var_name": "stamp1"}, {"original_string": "private final String host1 = \"localhost.localdomain\";", "modifier": "private final", "type": "String", "declarator": "host1 = \"localhost.localdomain\"", "var_name": "host1"}, {"original_string": "private final String data1 = \"test syslog data\";", "modifier": "private final", "type": "String", "declarator": "data1 = \"test syslog data\"", "var_name": "data1"}, {"original_string": "private final String bodyWithHostname = host1 + \" \" +\n      data1;", "modifier": "private final", "type": "String", "declarator": "bodyWithHostname = host1 + \" \" +\n      data1", "var_name": "bodyWithHostname"}, {"original_string": "private final String bodyWithTimestamp = stamp1 + \" \" +\n      data1;", "modifier": "private final", "type": "String", "declarator": "bodyWithTimestamp = stamp1 + \" \" +\n      data1", "var_name": "bodyWithTimestamp"}, {"original_string": "private final String bodyWithTandH = \"<10>\" + stamp1 + \" \" + host1 + \" \" +\n      data1;", "modifier": "private final", "type": "String", "declarator": "bodyWithTandH = \"<10>\" + stamp1 + \" \" + host1 + \" \" +\n      data1", "var_name": "bodyWithTandH"}], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestSyslogUdpSource.java"}, "test_case": {"identifier": "testSourceCounter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSourceCounter() throws Exception {\n    init(\"true\");\n\n    doCounterCommon();\n\n    // Retrying up to 10 times while the acceptedCount == 0 because the event processing in\n    // SyslogUDPSource is handled on a separate thread by Netty so message delivery,\n    // thus the sourceCounter's increment can be delayed resulting in a flaky test\n    for (int i = 0; i < 10 && source.getSourceCounter().getEventAcceptedCount() == 0; i++) {\n      Thread.sleep(100);\n    }\n    Assert.assertEquals(1, source.getSourceCounter().getEventAcceptedCount());\n    Assert.assertEquals(1, source.getSourceCounter().getEventReceivedCount());\n  }", "signature": "void testSourceCounter()", "full_signature": "@Test public void testSourceCounter()", "class_method_signature": "TestSyslogUdpSource.testSourceCounter()", "testcase": true, "constructor": false, "invocations": ["init", "doCounterCommon", "getEventAcceptedCount", "getSourceCounter", "sleep", "assertEquals", "getEventAcceptedCount", "getSourceCounter", "assertEquals", "getEventReceivedCount", "getSourceCounter"]}, "focal_class": {"identifier": "SyslogUDPSource", "superclass": "extends AbstractSource", "interfaces": "implements EventDrivenSource, Configurable", "fields": [{"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private int maxsize = 1 << 16;", "modifier": "private", "type": "int", "declarator": "maxsize = 1 << 16", "var_name": "maxsize"}, {"original_string": "private String host = null;", "modifier": "private", "type": "String", "declarator": "host = null", "var_name": "host"}, {"original_string": "private Channel nettyChannel;", "modifier": "private", "type": "Channel", "declarator": "nettyChannel", "var_name": "nettyChannel"}, {"original_string": "private Map<String, String> formaterProp;", "modifier": "private", "type": "Map<String, String>", "declarator": "formaterProp", "var_name": "formaterProp"}, {"original_string": "private Set<String> keepFields;", "modifier": "private", "type": "Set<String>", "declarator": "keepFields", "var_name": "keepFields"}, {"original_string": "private String clientIPHeader;", "modifier": "private", "type": "String", "declarator": "clientIPHeader", "var_name": "clientIPHeader"}, {"original_string": "private String clientHostnameHeader;", "modifier": "private", "type": "String", "declarator": "clientHostnameHeader", "var_name": "clientHostnameHeader"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SyslogUDPSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SyslogUDPSource.class)", "var_name": "logger"}, {"original_string": "private SourceCounter sourceCounter;", "modifier": "private", "type": "SourceCounter", "declarator": "sourceCounter", "var_name": "sourceCounter"}, {"original_string": "public static final int DEFAULT_MIN_SIZE = 2048;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MIN_SIZE = 2048", "var_name": "DEFAULT_MIN_SIZE"}, {"original_string": "public static final int DEFAULT_INITIAL_SIZE = DEFAULT_MIN_SIZE;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_INITIAL_SIZE = DEFAULT_MIN_SIZE", "var_name": "DEFAULT_INITIAL_SIZE"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "SyslogUDPSource.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "SyslogUDPSource.stop()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "SyslogUDPSource.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "getBoundAddress", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "InetSocketAddress", "signature": "InetSocketAddress getBoundAddress()", "full_signature": "@VisibleForTesting InetSocketAddress getBoundAddress()", "class_method_signature": "SyslogUDPSource.getBoundAddress()", "testcase": false, "constructor": false}, {"identifier": "getSourceCounter", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "SourceCounter", "signature": "SourceCounter getSourceCounter()", "full_signature": "@VisibleForTesting SourceCounter getSourceCounter()", "class_method_signature": "SyslogUDPSource.getSourceCounter()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/SyslogUDPSource.java"}, "focal_method": {"identifier": "getSourceCounter", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "SourceCounter", "body": "@VisibleForTesting\n  SourceCounter getSourceCounter() {\n    return sourceCounter;\n  }", "signature": "SourceCounter getSourceCounter()", "full_signature": "@VisibleForTesting SourceCounter getSourceCounter()", "class_method_signature": "SyslogUDPSource.getSourceCounter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}