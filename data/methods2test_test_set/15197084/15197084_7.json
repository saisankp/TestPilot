{"test_class": {"identifier": "MemoizationListTest", "superclass": "", "interfaces": "", "fields": [], "file": "reactfx/src/test/java/org/reactfx/collection/MemoizationListTest.java"}, "test_case": {"identifier": "testForget", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForget() {\n        LiveList<Integer> source = new LiveArrayList<>(0, 1, 2, 3, 4, 5, 6);\n        MemoizationList<Integer> memoizing = source.memoize();\n        LiveList<Integer> memoized = memoizing.memoizedItems();\n\n        memoizing.pin(); // otherwise no memoization takes place\n\n        memoizing.force(0, 7);\n        assertEquals(7, memoized.size());\n\n        memoizing.forget(2, 4);\n        assertEquals(5, memoized.size());\n\n        memoizing.forget(3, 5);\n        assertEquals(4, memoized.size());\n\n        Counter counter = new Counter();\n        memoized.observeQuasiChanges(ch -> {\n            counter.inc();\n            assertEquals(1, ch.getModificationCount());\n            QuasiListModification<?> mod = ch.getModifications().get(0);\n            assertEquals(1, mod.getFrom());\n            assertEquals(Arrays.asList(1, 5), mod.getRemoved());\n            assertEquals(0, mod.getAddedSize());\n        });\n\n        memoizing.forget(1, 6);\n        assertEquals(1, counter.get());\n    }", "signature": "void testForget()", "full_signature": "@Test public void testForget()", "class_method_signature": "MemoizationListTest.testForget()", "testcase": true, "constructor": false, "invocations": ["memoize", "memoizedItems", "pin", "force", "assertEquals", "size", "forget", "assertEquals", "size", "forget", "assertEquals", "size", "observeQuasiChanges", "inc", "assertEquals", "getModificationCount", "get", "getModifications", "assertEquals", "getFrom", "assertEquals", "asList", "getRemoved", "assertEquals", "getAddedSize", "forget", "assertEquals", "get"]}, "focal_class": {"identifier": "MemoizationListImpl", "superclass": "extends LiveListBase<E>", "interfaces": "implements MemoizationList<E>, UnmodifiableByDefaultLiveList<E>", "fields": [{"original_string": "private final SparseList<E> sparseList = new SparseList<>();", "modifier": "private final", "type": "SparseList<E>", "declarator": "sparseList = new SparseList<>()", "var_name": "sparseList"}, {"original_string": "private final MemoizedView memoizedItems = new MemoizedView();", "modifier": "private final", "type": "MemoizedView", "declarator": "memoizedItems = new MemoizedView()", "var_name": "memoizedItems"}, {"original_string": "private final ObservableList<E> source;", "modifier": "private final", "type": "ObservableList<E>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "MemoizationListImpl", "parameters": "(ObservableList<E> source)", "modifiers": "", "return": "", "signature": " MemoizationListImpl(ObservableList<E> source)", "full_signature": "  MemoizationListImpl(ObservableList<E> source)", "class_method_signature": "MemoizationListImpl.MemoizationListImpl(ObservableList<E> source)", "testcase": false, "constructor": true}, {"identifier": "observeInputs", "parameters": "()", "modifiers": "@Override protected", "return": "Subscription", "signature": "Subscription observeInputs()", "full_signature": "@Override protected Subscription observeInputs()", "class_method_signature": "MemoizationListImpl.observeInputs()", "testcase": false, "constructor": false}, {"identifier": "sourceChanged", "parameters": "(QuasiListChange<? extends E> qc)", "modifiers": "private", "return": "void", "signature": "void sourceChanged(QuasiListChange<? extends E> qc)", "full_signature": "private void sourceChanged(QuasiListChange<? extends E> qc)", "class_method_signature": "MemoizationListImpl.sourceChanged(QuasiListChange<? extends E> qc)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "E", "signature": "E get(int index)", "full_signature": "@Override public E get(int index)", "class_method_signature": "MemoizationListImpl.get(int index)", "testcase": false, "constructor": false}, {"identifier": "force", "parameters": "(int from, int to)", "modifiers": "@Override public", "return": "void", "signature": "void force(int from, int to)", "full_signature": "@Override public void force(int from, int to)", "class_method_signature": "MemoizationListImpl.force(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "MemoizationListImpl.size()", "testcase": false, "constructor": false}, {"identifier": "memoizedItems", "parameters": "()", "modifiers": "@Override public", "return": "LiveList<E>", "signature": "LiveList<E> memoizedItems()", "full_signature": "@Override public LiveList<E> memoizedItems()", "class_method_signature": "MemoizationListImpl.memoizedItems()", "testcase": false, "constructor": false}, {"identifier": "isMemoized", "parameters": "(int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMemoized(int index)", "full_signature": "@Override public boolean isMemoized(int index)", "class_method_signature": "MemoizationListImpl.isMemoized(int index)", "testcase": false, "constructor": false}, {"identifier": "getIfMemoized", "parameters": "(int index)", "modifiers": "@Override public", "return": "Optional<E>", "signature": "Optional<E> getIfMemoized(int index)", "full_signature": "@Override public Optional<E> getIfMemoized(int index)", "class_method_signature": "MemoizationListImpl.getIfMemoized(int index)", "testcase": false, "constructor": false}, {"identifier": "getMemoizedCountBefore", "parameters": "(int position)", "modifiers": "@Override public", "return": "int", "signature": "int getMemoizedCountBefore(int position)", "full_signature": "@Override public int getMemoizedCountBefore(int position)", "class_method_signature": "MemoizationListImpl.getMemoizedCountBefore(int position)", "testcase": false, "constructor": false}, {"identifier": "getMemoizedCountAfter", "parameters": "(int position)", "modifiers": "@Override public", "return": "int", "signature": "int getMemoizedCountAfter(int position)", "full_signature": "@Override public int getMemoizedCountAfter(int position)", "class_method_signature": "MemoizationListImpl.getMemoizedCountAfter(int position)", "testcase": false, "constructor": false}, {"identifier": "getMemoizedCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMemoizedCount()", "full_signature": "@Override public int getMemoizedCount()", "class_method_signature": "MemoizationListImpl.getMemoizedCount()", "testcase": false, "constructor": false}, {"identifier": "forget", "parameters": "(int from, int to)", "modifiers": "@Override public", "return": "void", "signature": "void forget(int from, int to)", "full_signature": "@Override public void forget(int from, int to)", "class_method_signature": "MemoizationListImpl.forget(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "indexOfMemoizedItem", "parameters": "(int index)", "modifiers": "@Override public", "return": "int", "signature": "int indexOfMemoizedItem(int index)", "full_signature": "@Override public int indexOfMemoizedItem(int index)", "class_method_signature": "MemoizationListImpl.indexOfMemoizedItem(int index)", "testcase": false, "constructor": false}, {"identifier": "getMemoizedItemsRange", "parameters": "()", "modifiers": "@Override public", "return": "IndexRange", "signature": "IndexRange getMemoizedItemsRange()", "full_signature": "@Override public IndexRange getMemoizedItemsRange()", "class_method_signature": "MemoizationListImpl.getMemoizedItemsRange()", "testcase": false, "constructor": false}], "file": "reactfx/src/main/java/org/reactfx/collection/MemoizationList.java"}, "focal_method": {"identifier": "forget", "parameters": "(int from, int to)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void forget(int from, int to) {\n        if(!isObservingInputs()) { // memoization is off\n            throw new IllegalStateException(\n                    \"There is nothing to forget, because memoization is off.\"\n                    + \" To turn memoization on, you have to be observing this\"\n                    + \" list or its memoizedItems.\");\n        }\n\n        Lists.checkRange(from, to, size());\n        int memoChangeFrom = sparseList.getPresentCountBefore(from);\n        List<E> memoRemoved = sparseList.collect(from, to);\n        sparseList.spliceByVoid(from, to, to - from);\n        memoizedItems.fireRemoveRange(memoChangeFrom, memoRemoved);\n    }", "signature": "void forget(int from, int to)", "full_signature": "@Override public void forget(int from, int to)", "class_method_signature": "MemoizationListImpl.forget(int from, int to)", "testcase": false, "constructor": false, "invocations": ["isObservingInputs", "checkRange", "size", "getPresentCountBefore", "collect", "spliceByVoid", "fireRemoveRange"]}, "repository": {"repo_id": 15197084, "url": "https://github.com/TomasMikula/ReactFX", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 326, "size": 891, "license": "licensed"}}