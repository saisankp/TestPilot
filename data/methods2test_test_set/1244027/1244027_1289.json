{"test_class": {"identifier": "JcrNodeTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private AbstractJcrNode hybrid;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "hybrid", "var_name": "hybrid"}, {"original_string": "private AbstractJcrNode altima;", "modifier": "private", "type": "AbstractJcrNode", "declarator": "altima", "var_name": "altima"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java"}, "test_case": {"identifier": "shouldAllowMultipleOrderBeforeWithoutSave", "parameters": "()", "modifiers": "@Test @FixFor(\"MODE-1489\") public", "return": "void", "body": "@Test\n    @FixFor(\"MODE-1489\")\n    public void shouldAllowMultipleOrderBeforeWithoutSave() throws Exception {\n        int childCount = 2;\n\n        Node parent = session.getRootNode().addNode(\"parent\", \"nt:unstructured\");\n        try {\n            for (int i = 0; i < childCount; i++) {\n                parent.addNode(\"Child \" + i, \"nt:unstructured\");\n            }\n\n            session.save();\n\n            long childIdx = 0;\n            NodeIterator nodeIterator = parent.getNodes();\n            while (nodeIterator.hasNext()) {\n                parent.orderBefore(\"Child \" + childIdx, \"Child 0\");\n                childIdx++;\n                nodeIterator.nextNode();\n            }\n\n            session.save();\n\n            nodeIterator = parent.getNodes();\n            childIdx = nodeIterator.getSize() - 1;\n            while (nodeIterator.hasNext()) {\n                Node child = nodeIterator.nextNode();\n                assertEquals(\"Child \" + childIdx, child.getName());\n                childIdx--;\n            }\n        } finally {\n            parent.remove();\n            session.save();\n        }\n    }", "signature": "void shouldAllowMultipleOrderBeforeWithoutSave()", "full_signature": "@Test @FixFor(\"MODE-1489\") public void shouldAllowMultipleOrderBeforeWithoutSave()", "class_method_signature": "JcrNodeTest.shouldAllowMultipleOrderBeforeWithoutSave()", "testcase": true, "constructor": false, "invocations": ["addNode", "getRootNode", "addNode", "save", "getNodes", "hasNext", "orderBefore", "nextNode", "save", "getNodes", "getSize", "hasNext", "nextNode", "assertEquals", "getName", "remove", "save"]}, "focal_class": {"identifier": "JcrNode", "superclass": "extends AbstractJcrNode", "interfaces": "", "fields": [], "methods": [{"identifier": "JcrNode", "parameters": "( JcrSession session,\n             NodeKey nodeKey )", "modifiers": "", "return": "", "signature": " JcrNode( JcrSession session,\n             NodeKey nodeKey )", "full_signature": "  JcrNode( JcrSession session,\n             NodeKey nodeKey )", "class_method_signature": "JcrNode.JcrNode( JcrSession session,\n             NodeKey nodeKey )", "testcase": false, "constructor": true}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override final", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override final boolean isRoot()", "class_method_signature": "JcrNode.isRoot()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override", "return": "Type", "signature": "Type type()", "full_signature": "@Override Type type()", "class_method_signature": "JcrNode.type()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "JcrNode.getIndex()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "AbstractJcrNode", "signature": "AbstractJcrNode getParent()", "full_signature": "@Override public AbstractJcrNode getParent()", "class_method_signature": "JcrNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "JcrNode.getPath()", "testcase": false, "constructor": false}, {"identifier": "isShared", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean isShared()", "full_signature": "@Override boolean isShared()", "class_method_signature": "JcrNode.isShared()", "testcase": false, "constructor": false}, {"identifier": "doRemove", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doRemove()", "full_signature": "@Override protected void doRemove()", "class_method_signature": "JcrNode.doRemove()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrNode.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() throws RepositoryException {\n        return segment().getName().getString(namespaces());\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrNode.getName()", "testcase": false, "constructor": false, "invocations": ["getString", "getName", "segment", "namespaces"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}