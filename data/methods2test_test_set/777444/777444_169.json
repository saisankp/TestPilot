{"test_class": {"identifier": "JmxRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ProcessingParameters procParams;", "modifier": "", "type": "ProcessingParameters", "declarator": "procParams", "var_name": "procParams"}], "file": "agent/core/src/test/java/org/jolokia/request/JmxRequestTest.java"}, "test_case": {"identifier": "readRequestMultiAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readRequestMultiAttributes() {\n        for (JmxReadRequest req : new JmxReadRequest[] {\n            JmxRequestFactory.createGetRequest(\"read/java.lang:type=Memory/Heap!/Memory!/Usage,NonHeapMemoryUsage\", procParams),\n            JmxRequestFactory.createPostRequest(\n                    createMap(\"type\", \"read\", \"mbean\", \"java.lang:type=Memory\",\n                              \"attribute\",Arrays.asList(\"Heap/Memory/Usage\",\"NonHeapMemoryUsage\")),procParams)\n        }) {\n            assertTrue(req.isMultiAttributeMode());\n\n            for (List list : new List[] { (List) req.toJSON().get(\"attribute\"), req.getAttributeNames() }) {\n                assertEquals(list.size(), 2);\n                assertTrue(list.contains(\"Heap/Memory/Usage\"));\n                assertTrue(list.contains(\"NonHeapMemoryUsage\"));\n                assertTrue(req.toString().contains(\"attribute=[\"));\n                try {\n                    req.getAttributeName();\n                    fail();\n                } catch (IllegalStateException exp) {\n                    assertTrue(exp.getMessage().contains(\"getAttributeNames\"));\n                }\n            }\n        }\n    }", "signature": "void readRequestMultiAttributes()", "full_signature": "@Test public void readRequestMultiAttributes()", "class_method_signature": "JmxRequestTest.readRequestMultiAttributes()", "testcase": true, "constructor": false, "invocations": ["createGetRequest", "createPostRequest", "createMap", "asList", "assertTrue", "isMultiAttributeMode", "get", "toJSON", "getAttributeNames", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "toString", "getAttributeName", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "JmxRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RequestType type;", "modifier": "private", "type": "RequestType", "declarator": "type", "var_name": "type"}, {"original_string": "private ProxyTargetConfig targetConfig = null;", "modifier": "private", "type": "ProxyTargetConfig", "declarator": "targetConfig = null", "var_name": "targetConfig"}, {"original_string": "private ProcessingParameters processingConfig;", "modifier": "private", "type": "ProcessingParameters", "declarator": "processingConfig", "var_name": "processingConfig"}, {"original_string": "private ValueFaultHandler valueFaultHandler;", "modifier": "private", "type": "ValueFaultHandler", "declarator": "valueFaultHandler", "var_name": "valueFaultHandler"}, {"original_string": "private HttpMethod method;", "modifier": "private", "type": "HttpMethod", "declarator": "method", "var_name": "method"}, {"original_string": "private List<String> pathParts;", "modifier": "private", "type": "List<String>", "declarator": "pathParts", "var_name": "pathParts"}], "methods": [{"identifier": "JmxRequest", "parameters": "(RequestType pType, List<String> pPathParts, ProcessingParameters pProcessingParams)", "modifiers": "protected", "return": "", "signature": " JmxRequest(RequestType pType, List<String> pPathParts, ProcessingParameters pProcessingParams)", "full_signature": "protected  JmxRequest(RequestType pType, List<String> pPathParts, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequest.JmxRequest(RequestType pType, List<String> pPathParts, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": true}, {"identifier": "JmxRequest", "parameters": "(Map<String, ?> pMap, ProcessingParameters pInitParams)", "modifiers": "public", "return": "", "signature": " JmxRequest(Map<String, ?> pMap, ProcessingParameters pInitParams)", "full_signature": "public  JmxRequest(Map<String, ?> pMap, ProcessingParameters pInitParams)", "class_method_signature": "JmxRequest.JmxRequest(Map<String, ?> pMap, ProcessingParameters pInitParams)", "testcase": false, "constructor": true}, {"identifier": "JmxRequest", "parameters": "(RequestType pType, HttpMethod pMethod, List<String> pPathParts, ProcessingParameters pProcessingParams)", "modifiers": "private", "return": "", "signature": " JmxRequest(RequestType pType, HttpMethod pMethod, List<String> pPathParts, ProcessingParameters pProcessingParams)", "full_signature": "private  JmxRequest(RequestType pType, HttpMethod pMethod, List<String> pPathParts, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequest.JmxRequest(RequestType pType, HttpMethod pMethod, List<String> pPathParts, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "RequestType", "signature": "RequestType getType()", "full_signature": "public RequestType getType()", "class_method_signature": "JmxRequest.getType()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(ConfigKey pConfigKey)", "modifiers": "public", "return": "String", "signature": "String getParameter(ConfigKey pConfigKey)", "full_signature": "public String getParameter(ConfigKey pConfigKey)", "class_method_signature": "JmxRequest.getParameter(ConfigKey pConfigKey)", "testcase": false, "constructor": false}, {"identifier": "getParameterAsInt", "parameters": "(ConfigKey pConfigKey)", "modifiers": "public", "return": "int", "signature": "int getParameterAsInt(ConfigKey pConfigKey)", "full_signature": "public int getParameterAsInt(ConfigKey pConfigKey)", "class_method_signature": "JmxRequest.getParameterAsInt(ConfigKey pConfigKey)", "testcase": false, "constructor": false}, {"identifier": "getParameterAsBool", "parameters": "(ConfigKey pConfigKey)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getParameterAsBool(ConfigKey pConfigKey)", "full_signature": "public Boolean getParameterAsBool(ConfigKey pConfigKey)", "class_method_signature": "JmxRequest.getParameterAsBool(ConfigKey pConfigKey)", "testcase": false, "constructor": false}, {"identifier": "getTargetConfig", "parameters": "()", "modifiers": "public", "return": "ProxyTargetConfig", "signature": "ProxyTargetConfig getTargetConfig()", "full_signature": "public ProxyTargetConfig getTargetConfig()", "class_method_signature": "JmxRequest.getTargetConfig()", "testcase": false, "constructor": false}, {"identifier": "getHttpMethod", "parameters": "()", "modifiers": "public", "return": "HttpMethod", "signature": "HttpMethod getHttpMethod()", "full_signature": "public HttpMethod getHttpMethod()", "class_method_signature": "JmxRequest.getHttpMethod()", "testcase": false, "constructor": false}, {"identifier": "getValueFaultHandler", "parameters": "()", "modifiers": "public", "return": "ValueFaultHandler", "signature": "ValueFaultHandler getValueFaultHandler()", "full_signature": "public ValueFaultHandler getValueFaultHandler()", "class_method_signature": "JmxRequest.getValueFaultHandler()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getInfo()", "full_signature": "protected String getInfo()", "class_method_signature": "JmxRequest.getInfo()", "testcase": false, "constructor": false}, {"identifier": "getPathParts", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getPathParts()", "full_signature": "public List<String> getPathParts()", "class_method_signature": "JmxRequest.getPathParts()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "JmxRequest.getPath()", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "()", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject toJSON()", "full_signature": "public JSONObject toJSON()", "class_method_signature": "JmxRequest.toJSON()", "testcase": false, "constructor": false}, {"identifier": "initParameters", "parameters": "(ProcessingParameters pParams)", "modifiers": "private", "return": "void", "signature": "void initParameters(ProcessingParameters pParams)", "full_signature": "private void initParameters(ProcessingParameters pParams)", "class_method_signature": "JmxRequest.initParameters(ProcessingParameters pParams)", "testcase": false, "constructor": false}, {"identifier": "verifyPath", "parameters": "(List<String> pPathParts)", "modifiers": "private", "return": "void", "signature": "void verifyPath(List<String> pPathParts)", "full_signature": "private void verifyPath(List<String> pPathParts)", "class_method_signature": "JmxRequest.verifyPath(List<String> pPathParts)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/request/JmxRequest.java"}, "focal_method": {"identifier": "toJSON", "parameters": "()", "modifiers": "public", "return": "JSONObject", "body": "public JSONObject toJSON() {\n        JSONObject ret = new JSONObject();\n        ret.put(\"type\",type.getName());\n\n        if (targetConfig != null) {\n            ret.put(\"target\", targetConfig.toJSON());\n        }\n        if (pathParts != null) {\n            try {\n                ret.put(\"path\",getPath());\n            } catch (UnsupportedOperationException exp) {\n                // Happens when request doesnt support paths\n            }\n        }\n        return ret;\n    }", "signature": "JSONObject toJSON()", "full_signature": "public JSONObject toJSON()", "class_method_signature": "JmxRequest.toJSON()", "testcase": false, "constructor": false, "invocations": ["put", "getName", "put", "toJSON", "put", "getPath"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}