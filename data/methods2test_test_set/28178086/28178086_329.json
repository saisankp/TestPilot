{"test_class": {"identifier": "ComplexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Complex c1 = cart(54.654, 7.321);", "modifier": "private final", "type": "Complex", "declarator": "c1 = cart(54.654, 7.321)", "var_name": "c1"}, {"original_string": "private final Complex c2 = cart(77, -66.12);", "modifier": "private final", "type": "Complex", "declarator": "c2 = cart(77, -66.12)", "var_name": "c2"}, {"original_string": "private final Complex c3 = cart(3.14, 0);", "modifier": "private final", "type": "Complex", "declarator": "c3 = cart(3.14, 0)", "var_name": "c3"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/ComplexTest.java"}, "test_case": {"identifier": "testCart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCart() {\n        Assert.assertEquals(54.654, c1.getRe(), 0);\n        Assert.assertEquals(7.321, c1.getIm(), 0);\n        Assert.assertSame(Complex.ZERO, cart(0, 0));\n        Assert.assertSame(Complex.ONE, cart(1, 0));\n        Assert.assertSame(Complex.NEG_ONE, cart(-1, 0));\n        Assert.assertSame(Complex.I, cart(0, 1));\n        Assert.assertSame(Complex.NEG_I, cart(0, -1));\n        Assert.assertNotSame(cart(54.654, 7.321), c1);\n    }", "signature": "void testCart()", "full_signature": "@Test public void testCart()", "class_method_signature": "ComplexTest.testCart()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getRe", "assertEquals", "getIm", "assertSame", "cart", "assertSame", "cart", "assertSame", "cart", "assertSame", "cart", "assertSame", "cart", "assertNotSame", "cart"]}, "focal_class": {"identifier": "Complex", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 8835004219982916445L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8835004219982916445L", "var_name": "serialVersionUID"}, {"original_string": "public static final Complex I = new Complex(0, 1);", "modifier": "public static final", "type": "Complex", "declarator": "I = new Complex(0, 1)", "var_name": "I"}, {"original_string": "public static final Complex TWO = new Complex(2, 0);", "modifier": "public static final", "type": "Complex", "declarator": "TWO = new Complex(2, 0)", "var_name": "TWO"}, {"original_string": "public static final Complex ONE = new Complex(1, 0);", "modifier": "public static final", "type": "Complex", "declarator": "ONE = new Complex(1, 0)", "var_name": "ONE"}, {"original_string": "public static final Complex ZERO = new Complex(0, 0);", "modifier": "public static final", "type": "Complex", "declarator": "ZERO = new Complex(0, 0)", "var_name": "ZERO"}, {"original_string": "public static final Complex NEG_ONE = new Complex(-1, 0);", "modifier": "public static final", "type": "Complex", "declarator": "NEG_ONE = new Complex(-1, 0)", "var_name": "NEG_ONE"}, {"original_string": "public static final Complex NEG_TWO = new Complex(-2, 0);", "modifier": "public static final", "type": "Complex", "declarator": "NEG_TWO = new Complex(-2, 0)", "var_name": "NEG_TWO"}, {"original_string": "public static final Complex NEG_I = new Complex(0, -1);", "modifier": "public static final", "type": "Complex", "declarator": "NEG_I = new Complex(0, -1)", "var_name": "NEG_I"}, {"original_string": "public final static double EPS = 1e-9;", "modifier": "public final static", "type": "double", "declarator": "EPS = 1e-9", "var_name": "EPS"}, {"original_string": "public final static double TWOPI = 2.0 * Math.PI;", "modifier": "public final static", "type": "double", "declarator": "TWOPI = 2.0 * Math.PI", "var_name": "TWOPI"}, {"original_string": "private static final Complex[] mroots=ur(12), qroots=ur(4);", "modifier": "private static final", "type": "Complex[]", "declarator": "mroots=ur(12)", "var_name": "mroots"}, {"original_string": "private final double re;", "modifier": "private final", "type": "double", "declarator": "re", "var_name": "re"}, {"original_string": "private final double im;", "modifier": "private final", "type": "double", "declarator": "im", "var_name": "im"}], "methods": [{"identifier": "cart", "parameters": "(final double re, final double im)", "modifiers": "public static", "return": "Complex", "signature": "Complex cart(final double re, final double im)", "full_signature": "public static Complex cart(final double re, final double im)", "class_method_signature": "Complex.cart(final double re, final double im)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength, final double epsilon)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] difference(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength, final double epsilon)", "full_signature": "public static Complex[] difference(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength, final double epsilon)", "class_method_signature": "Complex.difference(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength, final double epsilon)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Complex l, Complex r)", "modifiers": "public static", "return": "double", "signature": "double distance(Complex l, Complex r)", "full_signature": "public static double distance(Complex l, Complex r)", "class_method_signature": "Complex.distance(Complex l, Complex r)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(final int lnroots,\n\t    final Complex[] lroots, final int rnroots, final Complex[] rroots,\n\t    final double epsilon)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] intersection(final int lnroots,\n\t    final Complex[] lroots, final int rnroots, final Complex[] rroots,\n\t    final double epsilon)", "full_signature": "public static Complex[] intersection(final int lnroots,\n\t    final Complex[] lroots, final int rnroots, final Complex[] rroots,\n\t    final double epsilon)", "class_method_signature": "Complex.intersection(final int lnroots,\n\t    final Complex[] lroots, final int rnroots, final Complex[] rroots,\n\t    final double epsilon)", "testcase": false, "constructor": false}, {"identifier": "lejaOrder", "parameters": "(final Complex[] xin)", "modifiers": "public static", "return": "void", "signature": "void lejaOrder(final Complex[] xin)", "full_signature": "public static void lejaOrder(final Complex[] xin)", "class_method_signature": "Complex.lejaOrder(final Complex[] xin)", "testcase": false, "constructor": false}, {"identifier": "polar", "parameters": "(double r, double theta)", "modifiers": "public static", "return": "Complex", "signature": "Complex polar(double r, double theta)", "full_signature": "public static Complex polar(double r, double theta)", "class_method_signature": "Complex.polar(double r, double theta)", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "(final Complex c, final int nRoots)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] roots(final Complex c, final int nRoots)", "full_signature": "public static Complex[] roots(final Complex c, final int nRoots)", "class_method_signature": "Complex.roots(final Complex c, final int nRoots)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(final Complex[] lr, final Complex[] rr)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] union(final Complex[] lr, final Complex[] rr)", "full_signature": "public static Complex[] union(final Complex[] lr, final Complex[] rr)", "class_method_signature": "Complex.union(final Complex[] lr, final Complex[] rr)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] union(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength)", "full_signature": "public static Complex[] union(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength)", "class_method_signature": "Complex.union(final Complex[] lr, final int lrlength,\n\t    final Complex[] rr, final int rrlength)", "testcase": false, "constructor": false}, {"identifier": "unitRoots", "parameters": "(final int nRoots)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] unitRoots(final int nRoots)", "full_signature": "public static Complex[] unitRoots(final int nRoots)", "class_method_signature": "Complex.unitRoots(final int nRoots)", "testcase": false, "constructor": false}, {"identifier": "ur", "parameters": "(final int nRoots)", "modifiers": "private static", "return": "Complex[]", "signature": "Complex[] ur(final int nRoots)", "full_signature": "private static Complex[] ur(final int nRoots)", "class_method_signature": "Complex.ur(final int nRoots)", "testcase": false, "constructor": false}, {"identifier": "cart", "parameters": "(final double re)", "modifiers": "public static", "return": "Complex", "signature": "Complex cart(final double re)", "full_signature": "public static Complex cart(final double re)", "class_method_signature": "Complex.cart(final double re)", "testcase": false, "constructor": false}, {"identifier": "Complex", "parameters": "(final double re, final double im)", "modifiers": "private", "return": "", "signature": " Complex(final double re, final double im)", "full_signature": "private  Complex(final double re, final double im)", "class_method_signature": "Complex.Complex(final double re, final double im)", "testcase": false, "constructor": true}, {"identifier": "abs", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double abs()", "full_signature": "public double abs()", "class_method_signature": "Complex.abs()", "testcase": false, "constructor": false}, {"identifier": "absSquare", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double absSquare()", "full_signature": "public double absSquare()", "class_method_signature": "Complex.absSquare()", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "()", "modifiers": "public", "return": "Complex", "signature": "Complex sqrt()", "full_signature": "public Complex sqrt()", "class_method_signature": "Complex.sqrt()", "testcase": false, "constructor": false}, {"identifier": "arg", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double arg()", "full_signature": "public double arg()", "class_method_signature": "Complex.arg()", "testcase": false, "constructor": false}, {"identifier": "conj", "parameters": "()", "modifiers": "public", "return": "Complex", "signature": "Complex conj()", "full_signature": "public Complex conj()", "class_method_signature": "Complex.conj()", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final Complex c)", "modifiers": "public", "return": "Complex", "signature": "Complex div(final Complex c)", "full_signature": "public Complex div(final Complex c)", "class_method_signature": "Complex.div(final Complex c)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final double b)", "modifiers": "public", "return": "Complex", "signature": "Complex div(final double b)", "full_signature": "public Complex div(final double b)", "class_method_signature": "Complex.div(final double b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Complex z, final double tolerance)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(final Complex z, final double tolerance)", "full_signature": "public boolean equals(final Complex z, final double tolerance)", "class_method_signature": "Complex.equals(final Complex z, final double tolerance)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Complex.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Complex other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(Complex other)", "full_signature": "private boolean equals(Complex other)", "class_method_signature": "Complex.equals(Complex other)", "testcase": false, "constructor": false}, {"identifier": "getIm", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getIm()", "full_signature": "public double getIm()", "class_method_signature": "Complex.getIm()", "testcase": false, "constructor": false}, {"identifier": "getRe", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRe()", "full_signature": "public double getRe()", "class_method_signature": "Complex.getRe()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Complex.hashCode()", "testcase": false, "constructor": false}, {"identifier": "inv", "parameters": "()", "modifiers": "public", "return": "Complex", "signature": "Complex inv()", "full_signature": "public Complex inv()", "class_method_signature": "Complex.inv()", "testcase": false, "constructor": false}, {"identifier": "isInfinity", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfinity()", "full_signature": "public boolean isInfinity()", "class_method_signature": "Complex.isInfinity()", "testcase": false, "constructor": false}, {"identifier": "isNaN", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNaN()", "full_signature": "public boolean isNaN()", "class_method_signature": "Complex.isNaN()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final Complex b)", "modifiers": "public", "return": "Complex", "signature": "Complex minus(final Complex b)", "full_signature": "public Complex minus(final Complex b)", "class_method_signature": "Complex.minus(final Complex b)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final double z)", "modifiers": "public", "return": "Complex", "signature": "Complex minus(final double z)", "full_signature": "public Complex minus(final double z)", "class_method_signature": "Complex.minus(final double z)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "Complex", "signature": "Complex negate()", "full_signature": "public Complex negate()", "class_method_signature": "Complex.negate()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final Complex b)", "modifiers": "public", "return": "Complex", "signature": "Complex plus(final Complex b)", "full_signature": "public Complex plus(final Complex b)", "class_method_signature": "Complex.plus(final Complex b)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final double a)", "modifiers": "public", "return": "Complex", "signature": "Complex plus(final double a)", "full_signature": "public Complex plus(final double a)", "class_method_signature": "Complex.plus(final double a)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final Complex b)", "modifiers": "public", "return": "Complex", "signature": "Complex times(final Complex b)", "full_signature": "public Complex times(final Complex b)", "class_method_signature": "Complex.times(final Complex b)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final double z)", "modifiers": "public", "return": "Complex", "signature": "Complex times(final double z)", "full_signature": "public Complex times(final double z)", "class_method_signature": "Complex.times(final double z)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Complex.toString()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/Complex.java"}, "focal_method": {"identifier": "cart", "parameters": "(final double re, final double im)", "modifiers": "public static", "return": "Complex", "body": "public static Complex cart(final double re, final double im) {\n        // most used complexes\n        if (re == 0.0) {\n            if (im == 1.0)\n                return Complex.I;\n            if (im == 0.0)\n                return Complex.ZERO;\n            if (im == -1.0)\n                return Complex.NEG_I;\n        } else if (im == 0.0) {\n            if (re == 1.0) \n                return Complex.ONE;\n            if (re == -1.0) \n                return Complex.NEG_ONE;\n            if (re == -2.0) \n                return Complex.NEG_TWO;\n        }\n        // the real work\n\treturn new Complex(re, im);\n    }", "signature": "Complex cart(final double re, final double im)", "full_signature": "public static Complex cart(final double re, final double im)", "class_method_signature": "Complex.cart(final double re, final double im)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}