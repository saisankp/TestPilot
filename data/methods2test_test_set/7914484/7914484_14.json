{"test_class": {"identifier": "DefaultTimestampValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultTimestampValidator validator;", "modifier": "private", "type": "DefaultTimestampValidator", "declarator": "validator", "var_name": "validator"}], "file": "spring-ws-security/src/test/java/org/springframework/ws/soap/security/xwss/callback/DefaultTimestampValidatorTest.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValidate() throws Exception {\n\t\tTimestampValidationCallback.Request request = new TimestampValidationCallback.UTCTimestampRequest(\n\t\t\t\t\"2006-09-25T20:42:50Z\", \"2107-09-25T20:42:50Z\", 100, Long.MAX_VALUE);\n\t\tvalidator.validate(request);\n\t}", "signature": "void testValidate()", "full_signature": "@Test public void testValidate()", "class_method_signature": "DefaultTimestampValidatorTest.testValidate()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "DefaultTimestampValidator", "superclass": "", "interfaces": "implements TimestampValidationCallback.TimestampValidator", "fields": [], "methods": [{"identifier": "validate", "parameters": "(TimestampValidationCallback.Request request)", "modifiers": "@Override public", "return": "void", "signature": "void validate(TimestampValidationCallback.Request request)", "full_signature": "@Override public void validate(TimestampValidationCallback.Request request)", "class_method_signature": "DefaultTimestampValidator.validate(TimestampValidationCallback.Request request)", "testcase": false, "constructor": false}, {"identifier": "getFreshnessAndSkewAdjustedDate", "parameters": "(long maxClockSkew, long timestampFreshnessLimit)", "modifiers": "private", "return": "Date", "signature": "Date getFreshnessAndSkewAdjustedDate(long maxClockSkew, long timestampFreshnessLimit)", "full_signature": "private Date getFreshnessAndSkewAdjustedDate(long maxClockSkew, long timestampFreshnessLimit)", "class_method_signature": "DefaultTimestampValidator.getFreshnessAndSkewAdjustedDate(long maxClockSkew, long timestampFreshnessLimit)", "testcase": false, "constructor": false}, {"identifier": "getGMTDateWithSkewAdjusted", "parameters": "(Calendar calendar, long maxClockSkew, boolean addSkew)", "modifiers": "private", "return": "Date", "signature": "Date getGMTDateWithSkewAdjusted(Calendar calendar, long maxClockSkew, boolean addSkew)", "full_signature": "private Date getGMTDateWithSkewAdjusted(Calendar calendar, long maxClockSkew, boolean addSkew)", "class_method_signature": "DefaultTimestampValidator.getGMTDateWithSkewAdjusted(Calendar calendar, long maxClockSkew, boolean addSkew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String date)", "modifiers": "private", "return": "Date", "signature": "Date parseDate(String date)", "full_signature": "private Date parseDate(String date)", "class_method_signature": "DefaultTimestampValidator.parseDate(String date)", "testcase": false, "constructor": false}, {"identifier": "validateCreationTime", "parameters": "(Date created, long maxClockSkew, long timestampFreshnessLimit)", "modifiers": "private", "return": "void", "signature": "void validateCreationTime(Date created, long maxClockSkew, long timestampFreshnessLimit)", "full_signature": "private void validateCreationTime(Date created, long maxClockSkew, long timestampFreshnessLimit)", "class_method_signature": "DefaultTimestampValidator.validateCreationTime(Date created, long maxClockSkew, long timestampFreshnessLimit)", "testcase": false, "constructor": false}, {"identifier": "validateExpirationTime", "parameters": "(Date expires, long maxClockSkew)", "modifiers": "private", "return": "void", "signature": "void validateExpirationTime(Date expires, long maxClockSkew)", "full_signature": "private void validateExpirationTime(Date expires, long maxClockSkew)", "class_method_signature": "DefaultTimestampValidator.validateExpirationTime(Date expires, long maxClockSkew)", "testcase": false, "constructor": false}], "file": "spring-ws-security/src/main/java/org/springframework/ws/soap/security/xwss/callback/DefaultTimestampValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(TimestampValidationCallback.Request request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void validate(TimestampValidationCallback.Request request)\n\t\t\tthrows TimestampValidationCallback.TimestampValidationException {\n\t\tif (request instanceof TimestampValidationCallback.UTCTimestampRequest) {\n\t\t\tTimestampValidationCallback.UTCTimestampRequest utcRequest = (TimestampValidationCallback.UTCTimestampRequest) request;\n\t\t\tDate created = parseDate(utcRequest.getCreated());\n\n\t\t\tvalidateCreationTime(created, utcRequest.getMaxClockSkew(), utcRequest.getTimestampFreshnessLimit());\n\n\t\t\tif (utcRequest.getExpired() != null) {\n\t\t\t\tDate expired = parseDate(utcRequest.getExpired());\n\t\t\t\tvalidateExpirationTime(expired, utcRequest.getMaxClockSkew());\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TimestampValidationCallback.TimestampValidationException(\"Unsupport request: [\" + request + \"]\");\n\t\t}\n\t}", "signature": "void validate(TimestampValidationCallback.Request request)", "full_signature": "@Override public void validate(TimestampValidationCallback.Request request)", "class_method_signature": "DefaultTimestampValidator.validate(TimestampValidationCallback.Request request)", "testcase": false, "constructor": false, "invocations": ["parseDate", "getCreated", "validateCreationTime", "getMaxClockSkew", "getTimestampFreshnessLimit", "getExpired", "parseDate", "getExpired", "validateExpirationTime", "getMaxClockSkew"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}