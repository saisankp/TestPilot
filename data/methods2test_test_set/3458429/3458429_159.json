{"test_class": {"identifier": "AtomicBiIntegerTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/concurrent/AtomicBiIntegerTest.java"}, "test_case": {"identifier": "testCompareAndSet", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCompareAndSet() {\n        AtomicBiInteger abi = new AtomicBiInteger();\n        assertEquals(0, abi.getHi());\n        assertEquals(0, abi.getLo());\n\n        assertFalse(abi.compareAndSetHi(1, 42));\n        assertTrue(abi.compareAndSetHi(0, 42));\n        assertEquals(42, abi.getHi());\n        assertEquals(0, abi.getLo());\n\n        assertFalse(abi.compareAndSetLo(1, -42));\n        assertTrue(abi.compareAndSetLo(0, -42));\n        assertEquals(42, abi.getHi());\n        assertEquals(-42, abi.getLo());\n    }", "signature": "void testCompareAndSet()", "full_signature": "@Test void testCompareAndSet()", "class_method_signature": "AtomicBiIntegerTest.testCompareAndSet()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getHi", "assertEquals", "getLo", "assertFalse", "compareAndSetHi", "assertTrue", "compareAndSetHi", "assertEquals", "getHi", "assertEquals", "getLo", "assertFalse", "compareAndSetLo", "assertTrue", "compareAndSetLo", "assertEquals", "getHi", "assertEquals", "getLo"]}, "focal_class": {"identifier": "AtomicBiInteger", "superclass": "extends AtomicLong", "interfaces": "", "fields": [], "methods": [{"identifier": "AtomicBiInteger", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomicBiInteger()", "full_signature": "public  AtomicBiInteger()", "class_method_signature": "AtomicBiInteger.AtomicBiInteger()", "testcase": false, "constructor": true}, {"identifier": "AtomicBiInteger", "parameters": "(long encoded)", "modifiers": "public", "return": "", "signature": " AtomicBiInteger(long encoded)", "full_signature": "public  AtomicBiInteger(long encoded)", "class_method_signature": "AtomicBiInteger.AtomicBiInteger(long encoded)", "testcase": false, "constructor": true}, {"identifier": "AtomicBiInteger", "parameters": "(int hi, int lo)", "modifiers": "public", "return": "", "signature": " AtomicBiInteger(int hi, int lo)", "full_signature": "public  AtomicBiInteger(int hi, int lo)", "class_method_signature": "AtomicBiInteger.AtomicBiInteger(int hi, int lo)", "testcase": false, "constructor": true}, {"identifier": "getHi", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHi()", "full_signature": "public int getHi()", "class_method_signature": "AtomicBiInteger.getHi()", "testcase": false, "constructor": false}, {"identifier": "getLo", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLo()", "full_signature": "public int getLo()", "class_method_signature": "AtomicBiInteger.getLo()", "testcase": false, "constructor": false}, {"identifier": "getAndSetHi", "parameters": "(int hi)", "modifiers": "public", "return": "int", "signature": "int getAndSetHi(int hi)", "full_signature": "public int getAndSetHi(int hi)", "class_method_signature": "AtomicBiInteger.getAndSetHi(int hi)", "testcase": false, "constructor": false}, {"identifier": "getAndSetLo", "parameters": "(int lo)", "modifiers": "public", "return": "int", "signature": "int getAndSetLo(int lo)", "full_signature": "public int getAndSetLo(int lo)", "class_method_signature": "AtomicBiInteger.getAndSetLo(int lo)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int hi, int lo)", "modifiers": "public", "return": "void", "signature": "void set(int hi, int lo)", "full_signature": "public void set(int hi, int lo)", "class_method_signature": "AtomicBiInteger.set(int hi, int lo)", "testcase": false, "constructor": false}, {"identifier": "compareAndSetHi", "parameters": "(int expectHi, int hi)", "modifiers": "public", "return": "boolean", "signature": "boolean compareAndSetHi(int expectHi, int hi)", "full_signature": "public boolean compareAndSetHi(int expectHi, int hi)", "class_method_signature": "AtomicBiInteger.compareAndSetHi(int expectHi, int hi)", "testcase": false, "constructor": false}, {"identifier": "compareAndSetLo", "parameters": "(int expectLo, int lo)", "modifiers": "public", "return": "boolean", "signature": "boolean compareAndSetLo(int expectLo, int lo)", "full_signature": "public boolean compareAndSetLo(int expectLo, int lo)", "class_method_signature": "AtomicBiInteger.compareAndSetLo(int expectLo, int lo)", "testcase": false, "constructor": false}, {"identifier": "compareAndSet", "parameters": "(long encoded, int hi, int lo)", "modifiers": "public", "return": "boolean", "signature": "boolean compareAndSet(long encoded, int hi, int lo)", "full_signature": "public boolean compareAndSet(long encoded, int hi, int lo)", "class_method_signature": "AtomicBiInteger.compareAndSet(long encoded, int hi, int lo)", "testcase": false, "constructor": false}, {"identifier": "compareAndSet", "parameters": "(int expectHi, int hi, int expectLo, int lo)", "modifiers": "public", "return": "boolean", "signature": "boolean compareAndSet(int expectHi, int hi, int expectLo, int lo)", "full_signature": "public boolean compareAndSet(int expectHi, int hi, int expectLo, int lo)", "class_method_signature": "AtomicBiInteger.compareAndSet(int expectHi, int hi, int expectLo, int lo)", "testcase": false, "constructor": false}, {"identifier": "addAndGetHi", "parameters": "(int delta)", "modifiers": "public", "return": "int", "signature": "int addAndGetHi(int delta)", "full_signature": "public int addAndGetHi(int delta)", "class_method_signature": "AtomicBiInteger.addAndGetHi(int delta)", "testcase": false, "constructor": false}, {"identifier": "addAndGetLo", "parameters": "(int delta)", "modifiers": "public", "return": "int", "signature": "int addAndGetLo(int delta)", "full_signature": "public int addAndGetLo(int delta)", "class_method_signature": "AtomicBiInteger.addAndGetLo(int delta)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int deltaHi, int deltaLo)", "modifiers": "public", "return": "void", "signature": "void add(int deltaHi, int deltaLo)", "full_signature": "public void add(int deltaHi, int deltaLo)", "class_method_signature": "AtomicBiInteger.add(int deltaHi, int deltaLo)", "testcase": false, "constructor": false}, {"identifier": "getHi", "parameters": "(long encoded)", "modifiers": "public static", "return": "int", "signature": "int getHi(long encoded)", "full_signature": "public static int getHi(long encoded)", "class_method_signature": "AtomicBiInteger.getHi(long encoded)", "testcase": false, "constructor": false}, {"identifier": "getLo", "parameters": "(long encoded)", "modifiers": "public static", "return": "int", "signature": "int getLo(long encoded)", "full_signature": "public static int getLo(long encoded)", "class_method_signature": "AtomicBiInteger.getLo(long encoded)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(int hi, int lo)", "modifiers": "public static", "return": "long", "signature": "long encode(int hi, int lo)", "full_signature": "public static long encode(int hi, int lo)", "class_method_signature": "AtomicBiInteger.encode(int hi, int lo)", "testcase": false, "constructor": false}, {"identifier": "encodeHi", "parameters": "(long encoded, int hi)", "modifiers": "public static", "return": "long", "signature": "long encodeHi(long encoded, int hi)", "full_signature": "public static long encodeHi(long encoded, int hi)", "class_method_signature": "AtomicBiInteger.encodeHi(long encoded, int hi)", "testcase": false, "constructor": false}, {"identifier": "encodeLo", "parameters": "(long encoded, int lo)", "modifiers": "public static", "return": "long", "signature": "long encodeLo(long encoded, int lo)", "full_signature": "public static long encodeLo(long encoded, int lo)", "class_method_signature": "AtomicBiInteger.encodeLo(long encoded, int lo)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/concurrent/AtomicBiInteger.java"}, "focal_method": {"identifier": "compareAndSet", "parameters": "(long encoded, int hi, int lo)", "modifiers": "public", "return": "boolean", "body": "public boolean compareAndSet(long encoded, int hi, int lo) {\n        long update = encode(hi, lo);\n        return compareAndSet(encoded, update);\n    }", "signature": "boolean compareAndSet(long encoded, int hi, int lo)", "full_signature": "public boolean compareAndSet(long encoded, int hi, int lo)", "class_method_signature": "AtomicBiInteger.compareAndSet(long encoded, int hi, int lo)", "testcase": false, "constructor": false, "invocations": ["encode", "compareAndSet"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}