{"test_class": {"identifier": "CandlestickHammerPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> PROPERTIES = ImmutableMap.of(\n      CandlestickHammerPredicate.PROPERTY_TIME_FRAME, \"MINUTES_1\",\n      CandlestickHammerPredicate.PROPERTY_MINIMUM_CANDLE_SIZE, \"10.0\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "PROPERTIES = ImmutableMap.of(\n      CandlestickHammerPredicate.PROPERTY_TIME_FRAME, \"MINUTES_1\",\n      CandlestickHammerPredicate.PROPERTY_MINIMUM_CANDLE_SIZE, \"10.0\")", "var_name": "PROPERTIES"}, {"original_string": "private static final String INSTRUMENT = TestingConstants.INSTRUMENT_DAX_ID;", "modifier": "private static final", "type": "String", "declarator": "INSTRUMENT = TestingConstants.INSTRUMENT_DAX_ID", "var_name": "INSTRUMENT"}, {"original_string": "private static final Range<Long> DATE_RANGE = Range.closed(\n      TestingConstants.DEFAULT_START_DATE.getMillis(),\n      TestingConstants.DEFAULT_START_DATE.plusMinutes(1).getMillis());", "modifier": "private static final", "type": "Range<Long>", "declarator": "DATE_RANGE = Range.closed(\n      TestingConstants.DEFAULT_START_DATE.getMillis(),\n      TestingConstants.DEFAULT_START_DATE.plusMinutes(1).getMillis())", "var_name": "DATE_RANGE"}], "file": "onplan-service/src/test/java/com/onplan/adviser/predicate/pricepattern/CandlestickHammerPredicateTest.java"}, "test_case": {"identifier": "testInvalidShape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInvalidShape() throws Exception {\n    List<PriceTick> priceTicks = createPriceTicks(\n        INSTRUMENT,\n        DATE_RANGE,\n        9928.3,\n        9932.5,\n        9920.0,\n        9925.5);\n    CandlestickHammerPredicate candlestickHammerPredicate = createCandlestickHammerPredicate();\n    for (PriceTick priceTick : priceTicks) {\n      if (candlestickHammerPredicate.apply(priceTick)) {\n        fail(\"Predicate triggered.\");\n      }\n    }\n  }", "signature": "void testInvalidShape()", "full_signature": "@Test public void testInvalidShape()", "class_method_signature": "CandlestickHammerPredicateTest.testInvalidShape()", "testcase": true, "constructor": false, "invocations": ["createPriceTicks", "createCandlestickHammerPredicate", "apply", "fail"]}, "focal_class": {"identifier": "CandlestickHammerPredicate", "superclass": "extends AbstractAdviserPredicate", "interfaces": "", "fields": [{"original_string": "public static final String PROPERTY_TIME_FRAME = \"timeFrame\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_TIME_FRAME = \"timeFrame\"", "var_name": "PROPERTY_TIME_FRAME"}, {"original_string": "public static final String PROPERTY_MINIMUM_CANDLE_SIZE = \"minimumCandleSize\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_MINIMUM_CANDLE_SIZE = \"minimumCandleSize\"", "var_name": "PROPERTY_MINIMUM_CANDLE_SIZE"}, {"original_string": "private PriceBarTimeFrame priceBarTimeFrame;", "modifier": "private", "type": "PriceBarTimeFrame", "declarator": "priceBarTimeFrame", "var_name": "priceBarTimeFrame"}, {"original_string": "private long barEndTimestamp = -1;", "modifier": "private", "type": "long", "declarator": "barEndTimestamp = -1", "var_name": "barEndTimestamp"}, {"original_string": "private double openPrice;", "modifier": "private", "type": "double", "declarator": "openPrice", "var_name": "openPrice"}, {"original_string": "private double closePrice;", "modifier": "private", "type": "double", "declarator": "closePrice", "var_name": "closePrice"}, {"original_string": "private double highPrice;", "modifier": "private", "type": "double", "declarator": "highPrice", "var_name": "highPrice"}, {"original_string": "private double lowPrice;", "modifier": "private", "type": "double", "declarator": "lowPrice", "var_name": "lowPrice"}, {"original_string": "private boolean isFirstBar = true;", "modifier": "private", "type": "boolean", "declarator": "isFirstBar = true", "var_name": "isFirstBar"}, {"original_string": "private double minimumCandleSize;", "modifier": "private", "type": "double", "declarator": "minimumCandleSize", "var_name": "minimumCandleSize"}], "methods": [{"identifier": "CandlestickHammerPredicate", "parameters": "(PredicateExecutionContext predicateExecutionContext)", "modifiers": "public", "return": "", "signature": " CandlestickHammerPredicate(PredicateExecutionContext predicateExecutionContext)", "full_signature": "public  CandlestickHammerPredicate(PredicateExecutionContext predicateExecutionContext)", "class_method_signature": "CandlestickHammerPredicate.CandlestickHammerPredicate(PredicateExecutionContext predicateExecutionContext)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(PriceTick priceTick)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(PriceTick priceTick)", "full_signature": "@Override public boolean apply(PriceTick priceTick)", "class_method_signature": "CandlestickHammerPredicate.apply(PriceTick priceTick)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "CandlestickHammerPredicate.init()", "testcase": false, "constructor": false}, {"identifier": "isHammerPattern", "parameters": "(\n      double openPrice, double closePrice, double highPrice, double lowPrice)", "modifiers": "private", "return": "boolean", "signature": "boolean isHammerPattern(\n      double openPrice, double closePrice, double highPrice, double lowPrice)", "full_signature": "private boolean isHammerPattern(\n      double openPrice, double closePrice, double highPrice, double lowPrice)", "class_method_signature": "CandlestickHammerPredicate.isHammerPattern(\n      double openPrice, double closePrice, double highPrice, double lowPrice)", "testcase": false, "constructor": false}, {"identifier": "updateBarValues", "parameters": "(PriceTick priceTick)", "modifiers": "private", "return": "void", "signature": "void updateBarValues(PriceTick priceTick)", "full_signature": "private void updateBarValues(PriceTick priceTick)", "class_method_signature": "CandlestickHammerPredicate.updateBarValues(PriceTick priceTick)", "testcase": false, "constructor": false}, {"identifier": "prepareNewBar", "parameters": "(PriceTick priceTick)", "modifiers": "private", "return": "void", "signature": "void prepareNewBar(PriceTick priceTick)", "full_signature": "private void prepareNewBar(PriceTick priceTick)", "class_method_signature": "CandlestickHammerPredicate.prepareNewBar(PriceTick priceTick)", "testcase": false, "constructor": false}], "file": "onplan-service/src/main/java/com/onplan/adviser/predicate/pricepattern/CandlestickHammerPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(PriceTick priceTick)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean apply(PriceTick priceTick) {\n    if (priceTick.getTimestamp() > barEndTimestamp) {\n      if (isFirstBar) {\n        if (barEndTimestamp > 0) {\n          isFirstBar = false;\n        }\n      } else if(isHammerPattern(openPrice, closePrice, highPrice, lowPrice)) {\n        return true;\n      }\n      prepareNewBar(priceTick);\n    }\n    updateBarValues(priceTick);\n    return false;\n  }", "signature": "boolean apply(PriceTick priceTick)", "full_signature": "@Override public boolean apply(PriceTick priceTick)", "class_method_signature": "CandlestickHammerPredicate.apply(PriceTick priceTick)", "testcase": false, "constructor": false, "invocations": ["getTimestamp", "isHammerPattern", "prepareNewBar", "updateBarValues"]}, "repository": {"repo_id": 29186921, "url": "https://github.com/melphi/onplan", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 732, "license": "licensed"}}