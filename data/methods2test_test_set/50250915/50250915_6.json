{"test_class": {"identifier": "ModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExportConfig config = new ExportConfig().withFlavor(Flavor.JSON).withClassAttribute(ClassAttributeBehaviour.ALWAYS.simple());", "modifier": "private", "type": "ExportConfig", "declarator": "config = new ExportConfig().withFlavor(Flavor.JSON).withClassAttribute(ClassAttributeBehaviour.ALWAYS.simple())", "var_name": "config"}, {"original_string": "ModelBuilder builder = new ModelBuilder();", "modifier": "", "type": "ModelBuilder", "declarator": "builder = new ModelBuilder()", "var_name": "builder"}, {"original_string": "B b = new B();", "modifier": "", "type": "B", "declarator": "b = new B()", "var_name": "b"}], "file": "blueocean-commons/src/test/java/io/jenkins/blueocean/commons/stapler/export/ModelTest.java"}, "test_case": {"identifier": "sytheticMethodShouldNotBeExported", "parameters": "()", "modifiers": "@Test // JENKINS-26775 public", "return": "void", "body": "@Test // JENKINS-26775\n    public void sytheticMethodShouldNotBeExported() {\n        Model<Impl> model = builder.get(Impl.class);\n        assertEquals(\"Redundant properties discovered: \" + model.getProperties(), 1, model.getProperties().size());\n    }", "signature": "void sytheticMethodShouldNotBeExported()", "full_signature": "@Test // JENKINS-26775 public void sytheticMethodShouldNotBeExported()", "class_method_signature": "ModelTest.sytheticMethodShouldNotBeExported()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals", "getProperties", "size", "getProperties"]}, "focal_class": {"identifier": "Model", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final Class<T> type;", "modifier": "public final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "public final Model<? super T> superModel;", "modifier": "public final", "type": "Model<? super T>", "declarator": "superModel", "var_name": "superModel"}, {"original_string": "private final Property[] properties;", "modifier": "private final", "type": "Property[]", "declarator": "properties", "var_name": "properties"}, {"original_string": "final ModelBuilder parent;", "modifier": "final", "type": "ModelBuilder", "declarator": "parent", "var_name": "parent"}, {"original_string": "final int defaultVisibility;", "modifier": "final", "type": "int", "declarator": "defaultVisibility", "var_name": "defaultVisibility"}, {"original_string": "private volatile Properties javadoc;", "modifier": "private volatile", "type": "Properties", "declarator": "javadoc", "var_name": "javadoc"}, {"original_string": "private final Set<String> propertyNames = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "propertyNames = new HashSet<String>()", "var_name": "propertyNames"}, {"original_string": "final Predicate<String> HAS_PROPERTY_NAME = new Predicate<String>() {\n        @Override\n        public boolean apply(@Nullable String name) {\n            return propertyNames.contains(name);\n        }\n    };", "modifier": "final", "type": "Predicate<String>", "declarator": "HAS_PROPERTY_NAME = new Predicate<String>() {\n        @Override\n        public boolean apply(@Nullable String name) {\n            return propertyNames.contains(name);\n        }\n    }", "var_name": "HAS_PROPERTY_NAME"}, {"original_string": "final Predicate<String> HAS_PROPERTY_NAME_IN_ANCESTORY = new Predicate<String>() {\n        @Override\n        public boolean apply(@Nullable String name) {\n            for (Model m=Model.this; m!=null; m=m.superModel)\n                if (m.propertyNames.contains(name))\n                    return true;\n            return false;\n        }\n    };", "modifier": "final", "type": "Predicate<String>", "declarator": "HAS_PROPERTY_NAME_IN_ANCESTORY = new Predicate<String>() {\n        @Override\n        public boolean apply(@Nullable String name) {\n            for (Model m=Model.this; m!=null; m=m.superModel)\n                if (m.propertyNames.contains(name))\n                    return true;\n            return false;\n        }\n    }", "var_name": "HAS_PROPERTY_NAME_IN_ANCESTORY"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(Model.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(Model.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "Model", "parameters": "(ModelBuilder parent, Class<T> type, @CheckForNull Class<?> propertyOwner, @Nullable String property)", "modifiers": "", "return": "", "signature": " Model(ModelBuilder parent, Class<T> type, @CheckForNull Class<?> propertyOwner, @Nullable String property)", "full_signature": "  Model(ModelBuilder parent, Class<T> type, @CheckForNull Class<?> propertyOwner, @Nullable String property)", "class_method_signature": "Model.Model(ModelBuilder parent, Class<T> type, @CheckForNull Class<?> propertyOwner, @Nullable String property)", "testcase": false, "constructor": true}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "List<Property>", "signature": "List<Property> getProperties()", "full_signature": "public List<Property> getProperties()", "class_method_signature": "Model.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getJavadoc", "parameters": "()", "modifiers": "", "return": "Properties", "signature": "Properties getJavadoc()", "full_signature": " Properties getJavadoc()", "class_method_signature": "Model.getJavadoc()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T object, DataWriter writer)", "modifiers": "public", "return": "void", "signature": "void writeTo(T object, DataWriter writer)", "full_signature": "public void writeTo(T object, DataWriter writer)", "class_method_signature": "Model.writeTo(T object, DataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T object, TreePruner pruner, DataWriter writer)", "modifiers": "public", "return": "void", "signature": "void writeTo(T object, TreePruner pruner, DataWriter writer)", "full_signature": "public void writeTo(T object, TreePruner pruner, DataWriter writer)", "class_method_signature": "Model.writeTo(T object, TreePruner pruner, DataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T object, int baseVisibility, DataWriter writer)", "modifiers": "@Deprecated public", "return": "void", "signature": "void writeTo(T object, int baseVisibility, DataWriter writer)", "full_signature": "@Deprecated public void writeTo(T object, int baseVisibility, DataWriter writer)", "class_method_signature": "Model.writeTo(T object, int baseVisibility, DataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeNestedObjectTo", "parameters": "(T object, TreePruner pruner, DataWriter writer)", "modifiers": "", "return": "void", "signature": "void writeNestedObjectTo(T object, TreePruner pruner, DataWriter writer)", "full_signature": " void writeNestedObjectTo(T object, TreePruner pruner, DataWriter writer)", "class_method_signature": "Model.writeNestedObjectTo(T object, TreePruner pruner, DataWriter writer)", "testcase": false, "constructor": false}], "file": "blueocean-commons/src/main/java/io/jenkins/blueocean/commons/stapler/export/Model.java"}, "focal_method": {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "List<Property>", "body": "public List<Property> getProperties() {\n        return Collections.unmodifiableList(Arrays.asList(properties));\n    }", "signature": "List<Property> getProperties()", "full_signature": "public List<Property> getProperties()", "class_method_signature": "Model.getProperties()", "testcase": false, "constructor": false, "invocations": ["unmodifiableList", "asList"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}