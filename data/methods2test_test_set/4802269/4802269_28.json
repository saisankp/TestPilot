{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindDataObjectsByClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataObjectsByClass() {\n        DXRecord record = DXRecord.newRecord().setProject(testProject).setName(\"arecord\").build();\n        DXFile file = DXFile.newFile().setProject(testProject).setName(\"afile\").build();\n        DXApplet applet =\n                DXApplet.newApplet().setProject(testProject).setName(\"anapplet\")\n                        .setRunSpecification(RunSpecification.newRunSpec(\"bash\", \"\", \"Ubuntu\", \"14.04\").build())\n                        .build();\n        DXWorkflow workflow =\n                DXWorkflow.newWorkflow().setProject(testProject).setName(\"aworkflow\").build();\n\n        DXRecord recordResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().inProject(testProject)\n                        .withClassRecord().execute().asList());\n        Assert.assertEquals(record, recordResult);\n        Assert.assertEquals(\"arecord\", recordResult.describe().getName());\n        DXFile fileResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().inProject(testProject)\n                        .withClassFile().execute().asList());\n        Assert.assertEquals(file, fileResult);\n        Assert.assertEquals(\"afile\", fileResult.describe().getName());\n        DXApplet appletResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().inProject(testProject)\n                        .withClassApplet().execute().asList());\n        Assert.assertEquals(applet, appletResult);\n        Assert.assertEquals(\"anapplet\", appletResult.describe().getName());\n        DXWorkflow workflowResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().inProject(testProject)\n                        .withClassWorkflow().execute().asList());\n        Assert.assertEquals(workflow, workflowResult);\n        Assert.assertEquals(\"aworkflow\", workflowResult.describe().getName());\n    }", "signature": "void testFindDataObjectsByClass()", "full_signature": "@Test public void testFindDataObjectsByClass()", "class_method_signature": "DXSearchTest.testFindDataObjectsByClass()", "testcase": true, "constructor": false, "invocations": ["build", "setName", "setProject", "newRecord", "build", "setName", "setProject", "newFile", "build", "setRunSpecification", "setName", "setProject", "newApplet", "build", "newRunSpec", "build", "setName", "setProject", "newWorkflow", "getOnlyElement", "asList", "execute", "withClassRecord", "inProject", "findDataObjects", "assertEquals", "assertEquals", "getName", "describe", "getOnlyElement", "asList", "execute", "withClassFile", "inProject", "findDataObjects", "assertEquals", "assertEquals", "getName", "describe", "getOnlyElement", "asList", "execute", "withClassApplet", "inProject", "findDataObjects", "assertEquals", "assertEquals", "getName", "describe", "getOnlyElement", "asList", "execute", "withClassWorkflow", "inProject", "findDataObjects", "assertEquals", "assertEquals", "getName", "describe"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "body": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects() {\n        return new FindDataObjectsRequestBuilder<DXDataObject>();\n    }", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}