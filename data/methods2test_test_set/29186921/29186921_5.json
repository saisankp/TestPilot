{"test_class": {"identifier": "PriceSpikePredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> PROPERTIES =\n      ImmutableMap.of(PriceSpikePredicate.PROPERTY_MINIMUM_PIPS, \"10\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "PROPERTIES =\n      ImmutableMap.of(PriceSpikePredicate.PROPERTY_MINIMUM_PIPS, \"10\")", "var_name": "PROPERTIES"}], "file": "onplan-service/src/test/java/com/onplan/adviser/predicate/priceaction/PriceSpikePredicateTest.java"}, "test_case": {"identifier": "testEventNotTriggeredDAX", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEventNotTriggeredDAX() throws Exception {\n    Iterable<PriceTick> priceTicks = TestingPriceFactory.createPriceTicks(\n        TestingConstants.INSTRUMENT_DAX_ID,\n        Range.closed(\n            TestingConstants.DEFAULT_START_DATE.getMillis(),\n            TestingConstants.DEFAULT_START_DATE.plusMinutes(1).getMillis()),\n        Range.closed(9983.16, 9985.26),\n        1);\n    PriceSpikePredicate priceSpikePredicate =\n        createPriceSpikePredicate(TestingConstants.INSTRUMENT_DAX_ID);\n    for (PriceTick priceTick : priceTicks) {\n      if (priceSpikePredicate.apply(priceTick)) {\n        fail(\"Predicate triggered.\");\n      }\n    }\n  }", "signature": "void testEventNotTriggeredDAX()", "full_signature": "@Test public void testEventNotTriggeredDAX()", "class_method_signature": "PriceSpikePredicateTest.testEventNotTriggeredDAX()", "testcase": true, "constructor": false, "invocations": ["createPriceTicks", "closed", "getMillis", "getMillis", "plusMinutes", "closed", "createPriceSpikePredicate", "apply", "fail"]}, "focal_class": {"identifier": "PriceSpikePredicate", "superclass": "extends AbstractAdviserPredicate", "interfaces": "", "fields": [{"original_string": "public static final String PROPERTY_MINIMUM_PIPS = \"minimumPips\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_MINIMUM_PIPS = \"minimumPips\"", "var_name": "PROPERTY_MINIMUM_PIPS"}, {"original_string": "private int priceMinimalDecimalPosition;", "modifier": "private", "type": "int", "declarator": "priceMinimalDecimalPosition", "var_name": "priceMinimalDecimalPosition"}, {"original_string": "private double minimumPips;", "modifier": "private", "type": "double", "declarator": "minimumPips", "var_name": "minimumPips"}, {"original_string": "private long barOpenTimestamp = 0;", "modifier": "private", "type": "long", "declarator": "barOpenTimestamp = 0", "var_name": "barOpenTimestamp"}, {"original_string": "private long barCloseTimestamp;", "modifier": "private", "type": "long", "declarator": "barCloseTimestamp", "var_name": "barCloseTimestamp"}, {"original_string": "private double openPriceAsk;", "modifier": "private", "type": "double", "declarator": "openPriceAsk", "var_name": "openPriceAsk"}, {"original_string": "private boolean eventDispatched = false;", "modifier": "private", "type": "boolean", "declarator": "eventDispatched = false", "var_name": "eventDispatched"}], "methods": [{"identifier": "PriceSpikePredicate", "parameters": "(PredicateExecutionContext predicateExecutionContext)", "modifiers": "public", "return": "", "signature": " PriceSpikePredicate(PredicateExecutionContext predicateExecutionContext)", "full_signature": "public  PriceSpikePredicate(PredicateExecutionContext predicateExecutionContext)", "class_method_signature": "PriceSpikePredicate.PriceSpikePredicate(PredicateExecutionContext predicateExecutionContext)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(PriceTick priceTick)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(PriceTick priceTick)", "full_signature": "@Override public boolean apply(PriceTick priceTick)", "class_method_signature": "PriceSpikePredicate.apply(PriceTick priceTick)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "PriceSpikePredicate.init()", "testcase": false, "constructor": false}, {"identifier": "prepareNewBar", "parameters": "(PriceTick priceTick)", "modifiers": "private", "return": "void", "signature": "void prepareNewBar(PriceTick priceTick)", "full_signature": "private void prepareNewBar(PriceTick priceTick)", "class_method_signature": "PriceSpikePredicate.prepareNewBar(PriceTick priceTick)", "testcase": false, "constructor": false}], "file": "onplan-service/src/main/java/com/onplan/adviser/predicate/priceaction/PriceSpikePredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(PriceTick priceTick)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean apply(PriceTick priceTick) {\n    if (barOpenTimestamp <= 0 || priceTick.getTimestamp() > barCloseTimestamp) {\n      prepareNewBar(priceTick);\n      return false;\n    }\n    final double pipsVariation = getPricePips(\n        priceTick.getClosePriceAsk() - openPriceAsk, priceMinimalDecimalPosition);\n    if (pipsVariation >= minimumPips && ! eventDispatched) {\n      eventDispatched = true;\n      return true;\n    }\n    return false;\n  }", "signature": "boolean apply(PriceTick priceTick)", "full_signature": "@Override public boolean apply(PriceTick priceTick)", "class_method_signature": "PriceSpikePredicate.apply(PriceTick priceTick)", "testcase": false, "constructor": false, "invocations": ["getTimestamp", "prepareNewBar", "getPricePips", "getClosePriceAsk"]}, "repository": {"repo_id": 29186921, "url": "https://github.com/melphi/onplan", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 732, "license": "licensed"}}