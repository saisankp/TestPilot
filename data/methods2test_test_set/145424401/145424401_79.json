{"test_class": {"identifier": "ProcessWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang-python/src/test/java/org/eclipse/steady/python/ProcessWrapperTest.java"}, "test_case": {"identifier": "testLegalChar", "parameters": "()", "modifiers": "@Test // (expected=com.sap.psr.vulas.python.ProcessWrapperException.class) public", "return": "void", "body": "@Test // (expected=com.sap.psr.vulas.python.ProcessWrapperException.class)\n  public void testLegalChar() throws ProcessWrapperException {\n    ProcessWrapper pw = new ProcessWrapper();\n    pw.setCommand(Paths.get(\"pip\"), \"bar\", \"---..--\");\n  }", "signature": "void testLegalChar()", "full_signature": "@Test // (expected=com.sap.psr.vulas.python.ProcessWrapperException.class) public void testLegalChar()", "class_method_signature": "ProcessWrapperTest.testLegalChar()", "testcase": true, "constructor": false, "invocations": ["setCommand", "get"]}, "focal_class": {"identifier": "ProcessWrapper", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private static final Pattern ALLOWED = Pattern.compile(\"[\\\\.\\\\-\\\\w=]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "ALLOWED = Pattern.compile(\"[\\\\.\\\\-\\\\w=]+\")", "var_name": "ALLOWED"}, {"original_string": "private String id = null;", "modifier": "private", "type": "String", "declarator": "id = null", "var_name": "id"}, {"original_string": "private Path exe = null;", "modifier": "private", "type": "Path", "declarator": "exe = null", "var_name": "exe"}, {"original_string": "private String[] args = null;", "modifier": "private", "type": "String[]", "declarator": "args = null", "var_name": "args"}, {"original_string": "private Path outPath = null;", "modifier": "private", "type": "Path", "declarator": "outPath = null", "var_name": "outPath"}, {"original_string": "private Path outFile = null;", "modifier": "private", "type": "Path", "declarator": "outFile = null", "var_name": "outFile"}, {"original_string": "private Path errFile;", "modifier": "private", "type": "Path", "declarator": "errFile", "var_name": "errFile"}, {"original_string": "private int exitCode = -1;", "modifier": "private", "type": "int", "declarator": "exitCode = -1", "var_name": "exitCode"}], "methods": [{"identifier": "ProcessWrapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProcessWrapper()", "full_signature": "public  ProcessWrapper()", "class_method_signature": "ProcessWrapper.ProcessWrapper()", "testcase": false, "constructor": true}, {"identifier": "ProcessWrapper", "parameters": "(String _id)", "modifiers": "public", "return": "", "signature": " ProcessWrapper(String _id)", "full_signature": "public  ProcessWrapper(String _id)", "class_method_signature": "ProcessWrapper.ProcessWrapper(String _id)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "ProcessWrapper.getId()", "testcase": false, "constructor": false}, {"identifier": "setCommand", "parameters": "(Path _executable, String... _args)", "modifiers": "public", "return": "ProcessWrapper", "signature": "ProcessWrapper setCommand(Path _executable, String... _args)", "full_signature": "public ProcessWrapper setCommand(Path _executable, String... _args)", "class_method_signature": "ProcessWrapper.setCommand(Path _executable, String... _args)", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(Path _p)", "modifiers": "public", "return": "ProcessWrapper", "signature": "ProcessWrapper setPath(Path _p)", "full_signature": "public ProcessWrapper setPath(Path _p)", "class_method_signature": "ProcessWrapper.setPath(Path _p)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ProcessWrapper.run()", "testcase": false, "constructor": false}, {"identifier": "getOutFile", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getOutFile()", "full_signature": "public Path getOutFile()", "class_method_signature": "ProcessWrapper.getOutFile()", "testcase": false, "constructor": false}, {"identifier": "getErrFile", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getErrFile()", "full_signature": "public Path getErrFile()", "class_method_signature": "ProcessWrapper.getErrFile()", "testcase": false, "constructor": false}, {"identifier": "getExitCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExitCode()", "full_signature": "public int getExitCode()", "class_method_signature": "ProcessWrapper.getExitCode()", "testcase": false, "constructor": false}, {"identifier": "terminatedWithSuccess", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean terminatedWithSuccess()", "full_signature": "public boolean terminatedWithSuccess()", "class_method_signature": "ProcessWrapper.terminatedWithSuccess()", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCommand()", "full_signature": "public String getCommand()", "class_method_signature": "ProcessWrapper.getCommand()", "testcase": false, "constructor": false}], "file": "lang-python/src/main/java/org/eclipse/steady/python/ProcessWrapper.java"}, "focal_method": {"identifier": "setCommand", "parameters": "(Path _executable, String... _args)", "modifiers": "public", "return": "ProcessWrapper", "body": "public ProcessWrapper setCommand(Path _executable, String... _args)\n      throws ProcessWrapperException {\n    // if(_executable==null || FileUtil.isAccessibleFile(_executable))\n    //\tthrow new ProcessWrapperException(\"Illegal executable [\" + _executable + \"]\");\n\n    for (int i = 0; i < _args.length; i++) {\n      final Matcher m = ALLOWED.matcher(_args[i]);\n      if (!m.matches()\n          && !FileUtil.isAccessibleFile(_args[i])\n          && !FileUtil.isAccessibleDirectory(_args[i]))\n        throw new ProcessWrapperException(\n            \"Illegal characters in argument [\" + i + \"], allowed are: a-zA-Z_0-9-.=\");\n    }\n\n    this.exe = _executable;\n    this.args = _args;\n    return this;\n  }", "signature": "ProcessWrapper setCommand(Path _executable, String... _args)", "full_signature": "public ProcessWrapper setCommand(Path _executable, String... _args)", "class_method_signature": "ProcessWrapper.setCommand(Path _executable, String... _args)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "isAccessibleFile", "isAccessibleDirectory"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}