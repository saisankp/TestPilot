{"test_class": {"identifier": "HypergeometricTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Hypergeometric hypergeometric = new Hypergeometric();", "modifier": "private static final", "type": "Hypergeometric", "declarator": "hypergeometric = new Hypergeometric()", "var_name": "hypergeometric"}, {"original_string": "private static final double EPSILON = 0.00001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.00001", "var_name": "EPSILON"}], "file": "phenol-analysis/src/test/java/org/monarchinitiative/phenol/stats/HypergeometricTest.java"}, "test_case": {"identifier": "test_dhyper", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void test_dhyper() {\n    int x = 14; // # number of white balls drawn from urn\n    int m = 70; // # white balls in urn\n    int n = 30; // # number of other balls\n    int k = 20; // # number of balls drawn from urn\n    int N = m+n; // # total number of balls in urn\n    double result = hypergeometric.dhyper(x, N, m, k);\n    assertEquals(0.2140911, result, EPSILON);\n  }", "signature": "void test_dhyper()", "full_signature": "@Test void test_dhyper()", "class_method_signature": "HypergeometricTest.test_dhyper()", "testcase": true, "constructor": false, "invocations": ["dhyper", "assertEquals"]}, "focal_class": {"identifier": "Hypergeometric", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Vector<Double> lfactorial;", "modifier": "private final", "type": "Vector<Double>", "declarator": "lfactorial", "var_name": "lfactorial"}], "methods": [{"identifier": "Hypergeometric", "parameters": "()", "modifiers": "public", "return": "", "signature": " Hypergeometric()", "full_signature": "public  Hypergeometric()", "class_method_signature": "Hypergeometric.Hypergeometric()", "testcase": false, "constructor": true}, {"identifier": "phypergeometric", "parameters": "(int n, double p, int k, int r)", "modifiers": "public", "return": "double", "signature": "double phypergeometric(int n, double p, int k, int r)", "full_signature": "public double phypergeometric(int n, double p, int k, int r)", "class_method_signature": "Hypergeometric.phypergeometric(int n, double p, int k, int r)", "testcase": false, "constructor": false}, {"identifier": "phypergeometric", "parameters": "(int m, int m_t, int n, int n_t)", "modifiers": "public", "return": "double", "signature": "double phypergeometric(int m, int m_t, int n, int n_t)", "full_signature": "public double phypergeometric(int m, int m_t, int n, int n_t)", "class_method_signature": "Hypergeometric.phypergeometric(int m, int m_t, int n, int n_t)", "testcase": false, "constructor": false}, {"identifier": "dhyper", "parameters": "(int x, int N, int M, int n)", "modifiers": "public", "return": "double", "signature": "double dhyper(int x, int N, int M, int n)", "full_signature": "public double dhyper(int x, int N, int M, int n)", "class_method_signature": "Hypergeometric.dhyper(int x, int N, int M, int n)", "testcase": false, "constructor": false}, {"identifier": "phyper", "parameters": "(int x, int N, int M, int n, boolean lowerTail)", "modifiers": "public", "return": "double", "signature": "double phyper(int x, int N, int M, int n, boolean lowerTail)", "full_signature": "public double phyper(int x, int N, int M, int n, boolean lowerTail)", "class_method_signature": "Hypergeometric.phyper(int x, int N, int M, int n, boolean lowerTail)", "testcase": false, "constructor": false}, {"identifier": "lNchooseK", "parameters": "(int n, int k)", "modifiers": "public", "return": "double", "signature": "double lNchooseK(int n, int k)", "full_signature": "public double lNchooseK(int n, int k)", "class_method_signature": "Hypergeometric.lNchooseK(int n, int k)", "testcase": false, "constructor": false}, {"identifier": "logfact", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double logfact(int i)", "full_signature": "public double logfact(int i)", "class_method_signature": "Hypergeometric.logfact(int i)", "testcase": false, "constructor": false}], "file": "phenol-analysis/src/main/java/org/monarchinitiative/phenol/stats/Hypergeometric.java"}, "focal_method": {"identifier": "dhyper", "parameters": "(int x, int N, int M, int n)", "modifiers": "public", "return": "double", "body": "public double dhyper(int x, int N, int M, int n) {\n    /* It is not possible to draw more white balls\n     * from an urn containing M white balls. Hence\n     * the probability is 0.\n     */\n    if (x > M) return 0;\n\n    /* Of course it is also not possible to draw\n     * more white balls than the number of drawings.\n     * The probability is 0.\n     */\n    if (x > n) return 0;\n\n    /* Last but not least, it is also not possible\n     * to draw more black balls than there are within\n     * the urn.\n     */\n    if (n - x > N - M) return 0;\n\n    return Math.exp(lNchooseK(M, x) + lNchooseK(N - M, n - x) - lNchooseK(N, n));\n  }", "signature": "double dhyper(int x, int N, int M, int n)", "full_signature": "public double dhyper(int x, int N, int M, int n)", "class_method_signature": "Hypergeometric.dhyper(int x, int N, int M, int n)", "testcase": false, "constructor": false, "invocations": ["exp", "lNchooseK", "lNchooseK", "lNchooseK"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}