{"test_class": {"identifier": "GetFirmwareFileResponseMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    protected DlmsConnectionHelper connectionHelper;", "modifier": "@Mock\n    protected", "type": "DlmsConnectionHelper", "declarator": "connectionHelper", "var_name": "connectionHelper"}, {"original_string": "@Mock\n    protected DeviceResponseMessageSender responseMessageSender;", "modifier": "@Mock\n    protected", "type": "DeviceResponseMessageSender", "declarator": "responseMessageSender", "var_name": "responseMessageSender"}, {"original_string": "@Mock\n    protected DomainHelperService domainHelperService;", "modifier": "@Mock\n    protected", "type": "DomainHelperService", "declarator": "domainHelperService", "var_name": "domainHelperService"}, {"original_string": "@Mock\n    protected DlmsMessageListener dlmsMessageListenerMock;", "modifier": "@Mock\n    protected", "type": "DlmsMessageListener", "declarator": "dlmsMessageListenerMock", "var_name": "dlmsMessageListenerMock"}, {"original_string": "@Mock\n    private RetryHeaderFactory retryHeaderFactory;", "modifier": "@Mock\n    private", "type": "RetryHeaderFactory", "declarator": "retryHeaderFactory", "var_name": "retryHeaderFactory"}, {"original_string": "@Mock\n    private FirmwareService firmwareService;", "modifier": "@Mock\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}, {"original_string": "@Mock\n    private DlmsConnectionManager dlmsConnectionManagerMock;", "modifier": "@Mock\n    private", "type": "DlmsConnectionManager", "declarator": "dlmsConnectionManagerMock", "var_name": "dlmsConnectionManagerMock"}, {"original_string": "@Mock\n    private ThrottlingService throttlingService;", "modifier": "@Mock\n    private", "type": "ThrottlingService", "declarator": "throttlingService", "var_name": "throttlingService"}, {"original_string": "private DlmsDevice dlmsDevice;", "modifier": "private", "type": "DlmsDevice", "declarator": "dlmsDevice", "var_name": "dlmsDevice"}, {"original_string": "@InjectMocks\n    private GetFirmwareFileResponseMessageProcessor getFirmwareFileResponseMessageProcessor;", "modifier": "@InjectMocks\n    private", "type": "GetFirmwareFileResponseMessageProcessor", "declarator": "getFirmwareFileResponseMessageProcessor", "var_name": "getFirmwareFileResponseMessageProcessor"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/responses/from/core/processors/GetFirmwareFileResponseMessageProcessorTest.java"}, "test_case": {"identifier": "processMessageShouldSendOkResponseMessageContainingFirmwareVersions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processMessageShouldSendOkResponseMessageContainingFirmwareVersions()\n            throws OsgpException, JMSException {\n        // arrange\n        final FirmwareFileDto firmwareFileDto = this.setupFirmwareFileDto();\n        final ResponseMessage responseMessage = this.setupResponseMessage(firmwareFileDto);\n        final ObjectMessage message = new ObjectMessageBuilder().withMessageType(MessageType.GET_FIRMWARE_FILE.name())\n                                                                .withObject(responseMessage).build();\n        final UpdateFirmwareResponseDto updateFirmwareResponseDto = new UpdateFirmwareResponseDto(\n                firmwareFileDto.getFirmwareIdentification(), new LinkedList<>());\n\n        final ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor = ArgumentCaptor\n                .forClass(ResponseMessage.class);\n\n        when(this.domainHelperService.findDlmsDevice(any(MessageMetadata.class))).thenReturn(this.dlmsDevice);\n        when(this.dlmsConnectionManagerMock.getDlmsMessageListener()).thenReturn(this.dlmsMessageListenerMock);\n        when(this.connectionHelper\n                .createConnectionForDevice(same(this.dlmsDevice), nullable(DlmsMessageListener.class)))\n                .thenReturn(this.dlmsConnectionManagerMock);\n        when(this.firmwareService.updateFirmware(this.dlmsConnectionManagerMock, this.dlmsDevice, firmwareFileDto))\n                .thenReturn(updateFirmwareResponseDto);\n\n        // act\n        this.getFirmwareFileResponseMessageProcessor.processMessage(message);\n\n        // assert\n        verify(this.responseMessageSender, times(1)).send(responseMessageArgumentCaptor.capture());\n\n        assertThat(responseMessageArgumentCaptor.getValue().getDataObject()).isSameAs(updateFirmwareResponseDto);\n        assertThat(responseMessageArgumentCaptor.getValue().getResult()).isSameAs(ResponseMessageResultType.OK);\n    }", "signature": "void processMessageShouldSendOkResponseMessageContainingFirmwareVersions()", "full_signature": "@Test public void processMessageShouldSendOkResponseMessageContainingFirmwareVersions()", "class_method_signature": "GetFirmwareFileResponseMessageProcessorTest.processMessageShouldSendOkResponseMessageContainingFirmwareVersions()", "testcase": true, "constructor": false, "invocations": ["setupFirmwareFileDto", "setupResponseMessage", "build", "withObject", "withMessageType", "name", "getFirmwareIdentification", "forClass", "thenReturn", "when", "findDlmsDevice", "any", "thenReturn", "when", "getDlmsMessageListener", "thenReturn", "when", "createConnectionForDevice", "same", "nullable", "thenReturn", "when", "updateFirmware", "processMessage", "send", "verify", "times", "capture", "isSameAs", "assertThat", "getDataObject", "getValue", "isSameAs", "assertThat", "getResult", "getValue"]}, "focal_class": {"identifier": "GetFirmwareFileResponseMessageProcessor", "superclass": "extends OsgpResponseMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GetFirmwareFileResponseMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GetFirmwareFileResponseMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private FirmwareService firmwareService;", "modifier": "@Autowired\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}], "methods": [{"identifier": "GetFirmwareFileResponseMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " GetFirmwareFileResponseMessageProcessor()", "full_signature": "protected  GetFirmwareFileResponseMessageProcessor()", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.GetFirmwareFileResponseMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public void processMessage(final ObjectMessage message)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "modifiers": "@Override protected", "return": "Serializable", "signature": "Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "full_signature": "@Override protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/responses/from/core/processors/GetFirmwareFileResponseMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public", "return": "void", "body": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception.\n    @Override\n    public void processMessage(final ObjectMessage message) throws JMSException {\n        LOGGER.debug(\"Processing {} response message\", this.messageType.name());\n        MessageMetadata messageMetadata = null;\n\n        DlmsConnectionManager conn = null;\n        DlmsDevice device = null;\n\n        try {\n            // Get metadata from message and update message type to update\n            // firmware\n            messageMetadata = new MessageMetadata.Builder(MessageMetadata.fromMessage(message)).withMessageType(\n                    MessageType.UPDATE_FIRMWARE.name()).build();\n\n            device = this.domainHelperService.findDlmsDevice(messageMetadata);\n\n            LOGGER.info(\"{} called for device: {} for organisation: {}\", message.getJMSType(),\n                    messageMetadata.getDeviceIdentification(), messageMetadata.getOrganisationIdentification());\n\n            final Serializable response;\n            conn = this.createConnectionForDevice(device, messageMetadata);\n            response = this.handleMessage(conn, device, message.getObject());\n\n            // Send response\n            this.sendResponseMessage(messageMetadata, ResponseMessageResultType.OK, null, this.responseMessageSender,\n                    response);\n\n        } catch (final JMSException exception) {\n            this.logJmsException(LOGGER, exception, messageMetadata);\n        } catch (final Exception exception) {\n            // Return original request + exception\n            if (!(exception instanceof SilentException)) {\n                LOGGER.error(\"Unexpected exception during {}\", this.messageType.name(), exception);\n            }\n\n            this.sendResponseMessage(messageMetadata, ResponseMessageResultType.NOT_OK, exception,\n                    this.responseMessageSender, message.getObject());\n        } finally {\n            this.doConnectionPostProcessing(device, conn);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public void processMessage(final ObjectMessage message)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["debug", "name", "build", "withMessageType", "fromMessage", "name", "findDlmsDevice", "info", "getJMSType", "getDeviceIdentification", "getOrganisationIdentification", "createConnectionForDevice", "handleMessage", "getObject", "sendResponseMessage", "logJmsException", "error", "name", "sendResponseMessage", "getObject", "doConnectionPostProcessing"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}