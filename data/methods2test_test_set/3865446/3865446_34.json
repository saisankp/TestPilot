{"test_class": {"identifier": "FitnessProportionateSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected FitnessProportionateSelectionOperator operator;", "modifier": "protected", "type": "FitnessProportionateSelectionOperator", "declarator": "operator", "var_name": "operator"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/FitnessProportionateSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelectWinners", "parameters": "()", "modifiers": "@Test // tests makeAccumulatedProbabilities in connection to selectWinners public", "return": "void", "body": "@Test\n    // tests makeAccumulatedProbabilities in connection to selectWinners\n    public void testSelectWinners() throws Exception {\n        this.operator.setIndividualsPerPopulation(5);\n        this.operator.setOutputArity(1);\n        this.operator.setInputArity(1);\n        this.operator.setRandomGenerator(new EmptyRandomGenerator(){\n            double[] numbers = new double[]{10.0/15, 11.0/15, 7.5/15, 8.0/15, 9.0/15};\n            int index = 0;\n            @Override\n            public double nextRandom() {\n                return numbers[index++];\n            }\n        });\n        Individual[] inputIndividuals = new Individual[5];\n        double[] fitness = new double[]{2.0, 4.0, 1.0, 5.0, 3.0};\n        for (int i = 0; i < 5; i++){\n            inputIndividuals[i] = new SimpleIndividual(1, 1.0, new SimplePhenotypeRepresentation());\n            inputIndividuals[i].setFitness(fitness[i]);\n        }\n        double[] accumulatedProbabilities = this.operator.makeAccumulatedProbabilities(inputIndividuals);\n        // assert the resulting array of probabilities\n        assertTrue(accumulatedProbabilities.length == 5);\n        assertTrue(accumulatedProbabilities[0] == (2.0/15));\n        assertTrue(accumulatedProbabilities[1] == (6.0/15));\n        assertTrue(accumulatedProbabilities[2] == (7.0/15));\n        assertTrue(accumulatedProbabilities[3] == (12.0/15));\n        assertTrue(accumulatedProbabilities[4] == 1.0);\n\n        List<Individual> winners = this.operator.selectWinners(inputIndividuals, accumulatedProbabilities);\n        assertEquals(5, winners.size());\n        assertTrue(inputIndividuals[3].getFitness() == 5.0);\n        // assert that we have chosen 5 times the fittest individual\n        for (Individual individual : winners){\n            assertTrue(individual.getFitness() == 5.0);\n        }\n    }", "signature": "void testSelectWinners()", "full_signature": "@Test // tests makeAccumulatedProbabilities in connection to selectWinners public void testSelectWinners()", "class_method_signature": "FitnessProportionateSelectionOperatorTest.testSelectWinners()", "testcase": true, "constructor": false, "invocations": ["setIndividualsPerPopulation", "setOutputArity", "setInputArity", "setRandomGenerator", "setFitness", "makeAccumulatedProbabilities", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "selectWinners", "assertEquals", "size", "assertTrue", "getFitness", "assertTrue", "getFitness"]}, "focal_class": {"identifier": "FitnessProportionateSelectionOperator", "superclass": "extends AbstractProportionateSelectionOperator", "interfaces": "", "fields": [], "methods": [{"identifier": "makeAccumulatedProbabilities", "parameters": "(Individual[] inputIndividuals)", "modifiers": "protected", "return": "double[]", "signature": "double[] makeAccumulatedProbabilities(Individual[] inputIndividuals)", "full_signature": "protected double[] makeAccumulatedProbabilities(Individual[] inputIndividuals)", "class_method_signature": "FitnessProportionateSelectionOperator.makeAccumulatedProbabilities(Individual[] inputIndividuals)", "testcase": false, "constructor": false}, {"identifier": "selectWinners", "parameters": "(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "modifiers": "protected", "return": "List<Individual>", "signature": "List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "full_signature": "protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "class_method_signature": "FitnessProportionateSelectionOperator.selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/FitnessProportionateSelectionOperator.java"}, "focal_method": {"identifier": "selectWinners", "parameters": "(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "modifiers": "protected", "return": "List<Individual>", "body": "protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities){\n        int resultSize = this.outputArity * this.individualsPerPopulation;\n        List<Individual> resultingIndividuals = new ArrayList<Individual>(resultSize);\n        for (int i = 0; i < resultSize; i++){\n            double probability = this.randomGenerator.nextRandom();\n            // select first individual which accumulated probability is bigger or equal to current random number\n            for (int j = 0; j < inputIndividuals.length; j++){\n                if (accumulatedProbabilities[j] >= probability){\n                    resultingIndividuals.add(inputIndividuals[j]);\n                    break;\n                }\n            }\n        }\n        return resultingIndividuals;\n    }", "signature": "List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "full_signature": "protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "class_method_signature": "FitnessProportionateSelectionOperator.selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "testcase": false, "constructor": false, "invocations": ["nextRandom", "add"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}