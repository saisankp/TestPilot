{"test_class": {"identifier": "LBClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "ribbon/src/test/java/feign/ribbon/LBClientTest.java"}, "test_case": {"identifier": "testRibbonRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRibbonRequest() throws URISyntaxException {\n    // test for RibbonRequest.toRequest()\n    // the url has a query whose value is an encoded json string\n    String urlWithEncodedJson = \"http://test.feign.com/p?q=%7b%22a%22%3a1%7d\";\n    HttpMethod method = HttpMethod.GET;\n    URI uri = new URI(urlWithEncodedJson);\n    Map<String, Collection<String>> headers = new LinkedHashMap<String, Collection<String>>();\n    // create a Request for recreating another Request by toRequest()\n    Request requestOrigin =\n        Request.create(method, uri.toASCIIString(), headers, null, Charset.forName(\"utf-8\"));\n    RibbonRequest ribbonRequest = new RibbonRequest(null, requestOrigin, uri);\n\n    // use toRequest() recreate a Request\n    Request requestRecreate = ribbonRequest.toRequest();\n\n    // test that requestOrigin and requestRecreate are same except the header 'Content-Length'\n    // ps, requestOrigin and requestRecreate won't be null\n    assertThat(requestOrigin.toString())\n        .contains(String.format(\"%s %s HTTP/1.1\\n\", method, urlWithEncodedJson));\n    assertThat(requestRecreate.toString())\n        .contains(String.format(\"%s %s HTTP/1.1\\nContent-Length: 0\\n\", method, urlWithEncodedJson));\n  }", "signature": "void testRibbonRequest()", "full_signature": "@Test public void testRibbonRequest()", "class_method_signature": "LBClientTest.testRibbonRequest()", "testcase": true, "constructor": false, "invocations": ["create", "toASCIIString", "forName", "toRequest", "contains", "assertThat", "toString", "format", "contains", "assertThat", "toString", "format"]}, "focal_class": {"identifier": "LBClient", "superclass": "extends\n    AbstractLoadBalancerAwareClient<LBClient.RibbonRequest, LBClient.RibbonResponse>", "interfaces": "", "fields": [{"original_string": "private final int connectTimeout;", "modifier": "private final", "type": "int", "declarator": "connectTimeout", "var_name": "connectTimeout"}, {"original_string": "private final int readTimeout;", "modifier": "private final", "type": "int", "declarator": "readTimeout", "var_name": "readTimeout"}, {"original_string": "private final IClientConfig clientConfig;", "modifier": "private final", "type": "IClientConfig", "declarator": "clientConfig", "var_name": "clientConfig"}, {"original_string": "private final Set<Integer> retryableStatusCodes;", "modifier": "private final", "type": "Set<Integer>", "declarator": "retryableStatusCodes", "var_name": "retryableStatusCodes"}, {"original_string": "private final Boolean followRedirects;", "modifier": "private final", "type": "Boolean", "declarator": "followRedirects", "var_name": "followRedirects"}], "methods": [{"identifier": "create", "parameters": "(ILoadBalancer lb, IClientConfig clientConfig)", "modifiers": "public static", "return": "LBClient", "signature": "LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "full_signature": "public static LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "class_method_signature": "LBClient.create(ILoadBalancer lb, IClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "parseStatusCodes", "parameters": "(String statusCodesString)", "modifiers": "static", "return": "Set<Integer>", "signature": "Set<Integer> parseStatusCodes(String statusCodesString)", "full_signature": "static Set<Integer> parseStatusCodes(String statusCodesString)", "class_method_signature": "LBClient.parseStatusCodes(String statusCodesString)", "testcase": false, "constructor": false}, {"identifier": "LBClient", "parameters": "(ILoadBalancer lb, IClientConfig clientConfig)", "modifiers": "", "return": "", "signature": " LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "full_signature": "  LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "class_method_signature": "LBClient.LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(RibbonRequest request, IClientConfig configOverride)", "modifiers": "@Override public", "return": "RibbonResponse", "signature": "RibbonResponse execute(RibbonRequest request, IClientConfig configOverride)", "full_signature": "@Override public RibbonResponse execute(RibbonRequest request, IClientConfig configOverride)", "class_method_signature": "LBClient.execute(RibbonRequest request, IClientConfig configOverride)", "testcase": false, "constructor": false}, {"identifier": "getRequestSpecificRetryHandler", "parameters": "(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "modifiers": "@Override public", "return": "RequestSpecificRetryHandler", "signature": "RequestSpecificRetryHandler getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "full_signature": "@Override public RequestSpecificRetryHandler getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "class_method_signature": "LBClient.getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "testcase": false, "constructor": false}], "file": "ribbon/src/main/java/feign/ribbon/LBClient.java"}, "focal_method": {"identifier": "create", "parameters": "(ILoadBalancer lb, IClientConfig clientConfig)", "modifiers": "public static", "return": "LBClient", "body": "public static LBClient create(ILoadBalancer lb, IClientConfig clientConfig) {\n    return new LBClient(lb, clientConfig);\n  }", "signature": "LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "full_signature": "public static LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "class_method_signature": "LBClient.create(ILoadBalancer lb, IClientConfig clientConfig)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}