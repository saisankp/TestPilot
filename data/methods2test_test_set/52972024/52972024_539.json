{"test_class": {"identifier": "CachedCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ICachedCollection collection;", "modifier": "private", "type": "ICachedCollection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField keyValueField;", "modifier": "private", "type": "IField", "declarator": "keyValueField", "var_name": "keyValueField"}, {"original_string": "private IField specificKeyNameField;", "modifier": "private", "type": "IField", "declarator": "specificKeyNameField", "var_name": "specificKeyNameField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField searchResultField;", "modifier": "private", "type": "IField", "declarator": "searchResultField", "var_name": "searchResultField"}], "file": "CoreFeatures/Database/CachedCollection/src/test/java/info/smart_tools/smartactors/database/cached_collection/CachedCollectionTest.java"}, "test_case": {"identifier": "ShouldReadObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldReadObject() throws Exception {\n\n        IObject readQuery = mock(IObject.class);\n        IKey keyIObject = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(keyIObject);\n        when(IOC.resolve(keyIObject)).thenReturn(readQuery);\n\n        final IObject searchResult = mock(IObject.class);\n\n        IDatabaseTask readTask = mock(IDatabaseTask.class);\n        IKey keyTask = mock(IKey.class);\n        when(Keys.getOrAdd(\"db.cached_collection.get_item\")).thenReturn(keyTask);\n        final IAction[] callback = {mock(IAction.class)};\n        doAnswer(invocation -> {\n            callback[0] = (IAction) invocation.getArguments()[5];\n            return readTask;\n        }).when(IOC.class);\n        IOC.resolve(eq(keyTask), any(), eq(collectionName), any(), any(), any(IAction.class));\n        doAnswer(invocation -> {\n            callback[0].execute(new IObject[] {searchResult});\n            return null;\n        }).when(readTask).execute();\n\n        when(searchResultField.in(readQuery)).thenReturn(Collections.singletonList(searchResult));\n\n        List<IObject> items = collection.getItems(\"key\");\n\n        verify(readTask).execute();\n    }", "signature": "void ShouldReadObject()", "full_signature": "@Test public void ShouldReadObject()", "class_method_signature": "CachedCollectionTest.ShouldReadObject()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "mock", "mock", "mock", "thenReturn", "when", "getOrAdd", "mock", "when", "doAnswer", "getArguments", "resolve", "eq", "any", "eq", "any", "any", "any", "execute", "when", "doAnswer", "execute", "thenReturn", "when", "in", "singletonList", "getItems", "execute", "verify"]}, "focal_class": {"identifier": "CachedCollection", "superclass": "", "interfaces": "implements ICachedCollection", "fields": [{"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField specificKeyNameField;", "modifier": "private", "type": "IField", "declarator": "specificKeyNameField", "var_name": "specificKeyNameField"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IPool connectionPool;", "modifier": "private", "type": "IPool", "declarator": "connectionPool", "var_name": "connectionPool"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private String keyName;", "modifier": "private", "type": "String", "declarator": "keyName", "var_name": "keyName"}, {"original_string": "private ConcurrentMap<String, List<IObject>> map;", "modifier": "private", "type": "ConcurrentMap<String, List<IObject>>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "CachedCollection", "parameters": "(final IObject config)", "modifiers": "public", "return": "", "signature": " CachedCollection(final IObject config)", "full_signature": "public  CachedCollection(final IObject config)", "class_method_signature": "CachedCollection.CachedCollection(final IObject config)", "testcase": false, "constructor": true}, {"identifier": "getItems", "parameters": "(final String key)", "modifiers": "@Override public", "return": "List<IObject>", "signature": "List<IObject> getItems(final String key)", "full_signature": "@Override public List<IObject> getItems(final String key)", "class_method_signature": "CachedCollection.getItems(final String key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final IObject message)", "full_signature": "@Override public void delete(final IObject message)", "class_method_signature": "CachedCollection.delete(final IObject message)", "testcase": false, "constructor": false}, {"identifier": "upsert", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "signature": "void upsert(final IObject message)", "full_signature": "@Override public void upsert(final IObject message)", "class_method_signature": "CachedCollection.upsert(final IObject message)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "CachedCollection.clearCache()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/CachedCollection/src/main/java/info/smart_tools/smartactors/database/cached_collection/CachedCollection.java"}, "focal_method": {"identifier": "getItems", "parameters": "(final String key)", "modifiers": "@Override public", "return": "List<IObject>", "body": "@Override\n    public List<IObject> getItems(final String key) throws GetCacheItemException {\n\n        try {\n            final List<IObject> items = map.getOrDefault(key, new ArrayList<>());\n            if (items.isEmpty()) {\n                try (IPoolGuard poolGuard = new PoolGuard(connectionPool)) {\n                    IDatabaseTask getItemTask = IOC.resolve(\n                            Keys.getOrAdd(\"db.cached_collection.get_item\"),\n                            poolGuard.getObject(),\n                            collectionName,\n                            keyName,\n                            key,\n                            (IAction<IObject[]>) foundDocs -> {\n                                try {\n                                    items.addAll(Arrays.asList(foundDocs));\n                                } catch (Exception e) {\n                                    throw new ActionExecuteException(e);\n                                }\n                            }\n                    );\n\n                    getItemTask.execute();\n                    map.put(key, items);\n                } catch (PoolGuardException e) {\n                    throw new GetCacheItemException(\"Can't get connection from pool.\", e);\n                }\n            }\n\n            return items;\n        } catch (TaskExecutionException e) {\n            throw new GetCacheItemException(\"Error during execution read task.\", e);\n        } catch (ResolutionException e) {\n            throw new GetCacheItemException(\"Can't resolve cached object.\", e);\n        }\n    }", "signature": "List<IObject> getItems(final String key)", "full_signature": "@Override public List<IObject> getItems(final String key)", "class_method_signature": "CachedCollection.getItems(final String key)", "testcase": false, "constructor": false, "invocations": ["getOrDefault", "isEmpty", "resolve", "getOrAdd", "getObject", "addAll", "asList", "execute", "put"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}