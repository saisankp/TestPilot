{"test_class": {"identifier": "TypeTokenUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/util/TypeTokenUtilsTest.java"}, "test_case": {"identifier": "testGetMultipleGenericTypeTokens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMultipleGenericTypeTokens() {\n        TypeToken source = new TypeToken<Map<String, Integer>>() {};\n        List<TypeToken<?>> typeTokens = TypeTokenUtils.extractGenericTypeTokens(source);\n\n        assertEquals(typeTokens.size(), 2);\n        assertEquals(typeTokens.get(0), TypeToken.of(String.class));\n        assertEquals(typeTokens.get(1), TypeToken.of(Integer.class));\n    }", "signature": "void testGetMultipleGenericTypeTokens()", "full_signature": "@Test public void testGetMultipleGenericTypeTokens()", "class_method_signature": "TypeTokenUtilsTest.testGetMultipleGenericTypeTokens()", "testcase": true, "constructor": false, "invocations": ["extractGenericTypeTokens", "assertEquals", "size", "assertEquals", "get", "of", "assertEquals", "get", "of"]}, "focal_class": {"identifier": "TypeTokenUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "extractElementTypeToken", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "TypeToken<?>", "signature": "TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "full_signature": "public static TypeToken<?> extractElementTypeToken(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractElementTypeToken(TypeToken<?> typeToken)", "testcase": false, "constructor": false}, {"identifier": "extractGenericTypeTokens", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "List<TypeToken<?>>", "signature": "List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "full_signature": "public static List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractGenericTypeTokens(TypeToken<?> typeToken)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/util/TypeTokenUtils.java"}, "focal_method": {"identifier": "extractGenericTypeTokens", "parameters": "(TypeToken<?> typeToken)", "modifiers": "public static", "return": "List<TypeToken<?>>", "body": "public static List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken) {\n        List<TypeToken<?>> typeTokens = new ArrayList<>();\n        try {\n            Type[] types = ((ParameterizedType) typeToken.getType()).getActualTypeArguments();\n            for (Type type : types) {\n                typeTokens.add(TypeToken.of(type));\n            }\n        } catch (ClassCastException e) {\n            // Do nothing\n        }\n        return typeTokens;\n    }", "signature": "List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "full_signature": "public static List<TypeToken<?>> extractGenericTypeTokens(TypeToken<?> typeToken)", "class_method_signature": "TypeTokenUtils.extractGenericTypeTokens(TypeToken<?> typeToken)", "testcase": false, "constructor": false, "invocations": ["getActualTypeArguments", "getType", "add", "of"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}