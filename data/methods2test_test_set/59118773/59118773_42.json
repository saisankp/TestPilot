{"test_class": {"identifier": "CostEffectivenessVisualsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CostEffectivenessVisualsController costEffectivenessVisualsController;", "modifier": "@Autowired\n    private", "type": "CostEffectivenessVisualsController", "declarator": "costEffectivenessVisualsController", "var_name": "costEffectivenessVisualsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsControllerTest.java"}, "test_case": {"identifier": "costEffectivenessTenderAmount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void costEffectivenessTenderAmount() throws Exception {\n        final List<Document> costEffectivenessTenderAmount = costEffectivenessVisualsController\n                .costEffectivenessTenderAmount(new GroupingFilterPagingRequest());\n\n        final Document first = costEffectivenessTenderAmount.get(0);\n        int year = (int) first.get(CostEffectivenessVisualsController.Keys.YEAR);\n        double totalTenderAmount = (double) first.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDER_AMOUNT);\n        int totalTenders = (int) first.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDERS);\n        int totalTenderWithAwards = (int) first.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDER_WITH_AWARDS);\n        double percentageTendersWithAwards = (double) first.\n                get(CostEffectivenessVisualsController.Keys.PERCENTAGE_TENDERS_WITH_AWARDS);\n        Assert.assertEquals(2014, year);\n        Assert.assertEquals(600000.0, totalTenderAmount, 0);\n        Assert.assertEquals(1, totalTenders);\n        Assert.assertEquals(1, totalTenderWithAwards);\n        Assert.assertEquals(100.0, percentageTendersWithAwards, 0);\n\n        final Document second = costEffectivenessTenderAmount.get(1);\n        year = (int) second.get(CostEffectivenessVisualsController.Keys.YEAR);\n        totalTenderAmount = (double) second.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDER_AMOUNT);\n        totalTenders = (int) second.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDERS);\n        totalTenderWithAwards = (int) second.get(CostEffectivenessVisualsController.Keys.TOTAL_TENDER_WITH_AWARDS);\n        percentageTendersWithAwards = (double) second\n                .get(CostEffectivenessVisualsController.Keys.PERCENTAGE_TENDERS_WITH_AWARDS);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(9000.0, totalTenderAmount, 0);\n        Assert.assertEquals(2, totalTenders);\n        Assert.assertEquals(1, totalTenderWithAwards);\n        Assert.assertEquals(50.0, percentageTendersWithAwards, 0);\n    }", "signature": "void costEffectivenessTenderAmount()", "full_signature": "@Test public void costEffectivenessTenderAmount()", "class_method_signature": "CostEffectivenessVisualsControllerTest.costEffectivenessTenderAmount()", "testcase": true, "constructor": false, "invocations": ["costEffectivenessTenderAmount", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CostEffectivenessVisualsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AsyncControllerLookupService controllerLookupService;", "modifier": "@Autowired\n    private", "type": "AsyncControllerLookupService", "declarator": "controllerLookupService", "var_name": "controllerLookupService"}], "methods": [{"identifier": "costEffectivenessAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "getYearMonthlyKey", "parameters": "(GroupingFilterPagingRequest filter, Document db)", "modifiers": "private", "return": "String", "signature": "String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "full_signature": "private String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "class_method_signature": "CostEffectivenessVisualsController.getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "ArrayList<Document>", "signature": "ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsController.java"}, "focal_method": {"identifier": "costEffectivenessTenderAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Cost effectiveness of Tenders:\"\n            + \" Displays the total amount of the active tenders that have active awards, \"\n            + \"grouped by year. Only tenders.status=active\"\n            + \"are taken into account. The year is calculated from tenderPeriod.startDate\")\n    @RequestMapping(value = \"/api/costEffectivenessTenderAmount\",\n            method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        project.put(\"year\", new BasicDBObject(\"$year\", ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)));\n        addYearlyMonthlyProjection(filter, project, ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE));\n        project.put(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT, 1);\n        project.put(Fields.UNDERSCORE_ID, \"$tender._id\");\n        project.put(\n                \"tenderWithAwards\",\n                new BasicDBObject(\"$cond\", Arrays.asList(\n                        new BasicDBObject(\n                                \"$eq\", Arrays.asList(\n                                ref(MongoConstants.FieldNames.AWARDS_STATUS),\n                                Award.Status.active.toString()\n                        )), 1,\n                        0\n                ))\n        );\n        project.put(\"tenderWithAwardsValue\", new BasicDBObject(\n                \"$cond\",\n                Arrays.asList(new BasicDBObject(\n                                \"$eq\", Arrays.asList(ref(MongoConstants.FieldNames.AWARDS_STATUS),\n                        Award.Status.active.toString()\n                        )),\n                        ref(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT), 0\n                )\n        ));\n        project.putAll(filterProjectMap);\n\n        DBObject group1 = new BasicDBObject();\n        group1.put(\n                Fields.UNDERSCORE_ID, Fields.UNDERSCORE_ID_REF);\n        addYearlyMonthlyGroupingOperationFirst(filter, group1);\n        group1.put(\"tenderWithAwards\", new BasicDBObject(\"$max\", \"$tenderWithAwards\"));\n        group1.put(\"tenderWithAwardsValue\", new BasicDBObject(\"$max\", \"$tenderWithAwardsValue\"));\n        group1.put(\"tenderAmount\", new BasicDBObject(\"$first\", ref(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT)));\n        filterProjectMap.forEach((k, v) ->\n                group1.put(\n                        k.replace(\".\", \"\"),\n                        k.equals(\"tender.items.classification._id\")\n                                ? new BasicDBObject(\"$first\", new BasicDBObject(\n                                \"$arrayElemAt\",\n                                Arrays.asList(\"$\" + k, 0)\n                        ))\n                                :\n                                new BasicDBObject(\"$first\", \"$\" + k)\n                ));\n\n        Aggregation agg = Aggregation.newAggregation(\n                match(where(MongoConstants.FieldNames.TENDER_STATUS).is(Tender.Status.active.toString()).\n                        and(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)\n                        .exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                getMatchDefaultFilterOperation(filter),\n                new CustomUnwindOperation(\"$awards\", true),\n                new CustomProjectionOperation(project),\n                new CustomGroupingOperation(group1),\n                getTopXFilterOperation(filter, getYearlyMonthlyGroupingFields(filter)).sum(\"tenderWithAwardsValue\")\n                        .as(Keys.TOTAL_TENDER_AMOUNT).count().as(Keys.TOTAL_TENDERS).sum(\"tenderWithAwards\")\n                        .as(Keys.TOTAL_TENDER_WITH_AWARDS),\n                project(Keys.TOTAL_TENDER_AMOUNT, Keys.TOTAL_TENDERS, Keys.TOTAL_TENDER_WITH_AWARDS)\n                        .andInclude(Fields.from(\n                                Fields.field(\n                                        Fields.UNDERSCORE_ID, Fields.UNDERSCORE_ID_REF)))\n                        .and(Keys.TOTAL_TENDER_WITH_AWARDS).divide(Keys.TOTAL_TENDERS)\n                        .as(Keys.FRACTION_TENDERS_WITH_AWARDS),\n                project(Keys.TOTAL_TENDER_AMOUNT, Keys.TOTAL_TENDERS, Keys.TOTAL_TENDER_WITH_AWARDS,\n                        Fields.UNDERSCORE_ID\n                ).and(Keys.FRACTION_TENDERS_WITH_AWARDS).multiply(100)\n                        .as(Keys.PERCENTAGE_TENDERS_WITH_AWARDS),\n                (filter.getGroupByCategory() == null\n                        ? transformYearlyGrouping(filter) : project()).andInclude(Keys.TOTAL_TENDER_AMOUNT,\n                        Keys.TOTAL_TENDERS,\n                        Keys.TOTAL_TENDER_WITH_AWARDS, Keys.PERCENTAGE_TENDERS_WITH_AWARDS\n                ),\n                filter.getGroupByCategory() == null\n                        ? getSortByYearMonth(filter) : sort(Sort.Direction.DESC, Keys.TOTAL_TENDER_AMOUNT),\n                skip(filter.getSkip()), limit(filter.getPageSize())\n        )\n                .withOptions(Aggregation.newAggregationOptions().allowDiskUse(true).build());\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "ref", "addYearlyMonthlyProjection", "ref", "put", "put", "put", "asList", "asList", "ref", "toString", "put", "asList", "asList", "ref", "toString", "ref", "putAll", "put", "addYearlyMonthlyGroupingOperationFirst", "put", "put", "put", "ref", "forEach", "put", "replace", "equals", "asList", "withOptions", "newAggregation", "match", "andOperator", "exists", "and", "is", "where", "toString", "getYearDefaultFilterCriteria", "getMatchDefaultFilterOperation", "as", "sum", "as", "count", "as", "sum", "getTopXFilterOperation", "getYearlyMonthlyGroupingFields", "as", "divide", "and", "andInclude", "project", "from", "field", "as", "multiply", "and", "project", "andInclude", "getGroupByCategory", "transformYearlyGrouping", "project", "getGroupByCategory", "getSortByYearMonth", "sort", "skip", "getSkip", "limit", "getPageSize", "build", "allowDiskUse", "newAggregationOptions", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}