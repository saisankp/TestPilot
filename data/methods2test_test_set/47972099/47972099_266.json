{"test_class": {"identifier": "KeyMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/KeyMapTest.java"}, "test_case": {"identifier": "testSizeComparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSizeComparator() {\n\t\ttry {\n\t\t\tKeyMap<String, String> map1 = new KeyMap<>(5);\n\t\t\tKeyMap<String, String> map2 = new KeyMap<>(80);\n\t\t\t\n\t\t\tassertTrue(map1.getCurrentTableCapacity() < map2.getCurrentTableCapacity());\n\t\t\t\n\t\t\tassertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map1, map1) == 0);\n\t\t\tassertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map2, map2) == 0);\n\t\t\tassertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map1, map2) > 0);\n\t\t\tassertTrue(KeyMap.CapacityDescendingComparator.INSTANCE.compare(map2, map1) < 0);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testSizeComparator()", "full_signature": "@Test public void testSizeComparator()", "class_method_signature": "KeyMapTest.testSizeComparator()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getCurrentTableCapacity", "getCurrentTableCapacity", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "KeyMap", "superclass": "", "interfaces": "implements Iterable<KeyMap.Entry<K, V>>", "fields": [{"original_string": "private static final int MIN_CAPACITY = 0x40;", "modifier": "private static final", "type": "int", "declarator": "MIN_CAPACITY = 0x40", "var_name": "MIN_CAPACITY"}, {"original_string": "private static final int MAX_CAPACITY = 0x40000000;", "modifier": "private static final", "type": "int", "declarator": "MAX_CAPACITY = 0x40000000", "var_name": "MAX_CAPACITY"}, {"original_string": "private static final int FULL_BIT_RANGE = MathUtils.log2strict(MAX_CAPACITY);", "modifier": "private static final", "type": "int", "declarator": "FULL_BIT_RANGE = MathUtils.log2strict(MAX_CAPACITY)", "var_name": "FULL_BIT_RANGE"}, {"original_string": "private Entry<K, V>[] table;", "modifier": "private", "type": "Entry<K, V>[]", "declarator": "table", "var_name": "table"}, {"original_string": "private int shift;", "modifier": "private", "type": "int", "declarator": "shift", "var_name": "shift"}, {"original_string": "private int numElements;", "modifier": "private", "type": "int", "declarator": "numElements", "var_name": "numElements"}, {"original_string": "private int rehashThreshold;", "modifier": "private", "type": "int", "declarator": "rehashThreshold", "var_name": "rehashThreshold"}, {"original_string": "private int log2size;", "modifier": "private", "type": "int", "declarator": "log2size", "var_name": "log2size"}], "methods": [{"identifier": "KeyMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " KeyMap()", "full_signature": "public  KeyMap()", "class_method_signature": "KeyMap.KeyMap()", "testcase": false, "constructor": true}, {"identifier": "KeyMap", "parameters": "(int expectedNumberOfElements)", "modifiers": "public", "return": "", "signature": " KeyMap(int expectedNumberOfElements)", "full_signature": "public  KeyMap(int expectedNumberOfElements)", "class_method_signature": "KeyMap.KeyMap(int expectedNumberOfElements)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public final", "return": "V", "signature": "V put(K key, V value)", "full_signature": "public final V put(K key, V value)", "class_method_signature": "KeyMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(K key, LazyFactory<V> factory)", "modifiers": "public final", "return": "V", "signature": "V putIfAbsent(K key, LazyFactory<V> factory)", "full_signature": "public final V putIfAbsent(K key, LazyFactory<V> factory)", "class_method_signature": "KeyMap.putIfAbsent(K key, LazyFactory<V> factory)", "testcase": false, "constructor": false}, {"identifier": "putOrAggregate", "parameters": "(K key, V value, ReduceFunction<V> aggregator)", "modifiers": "public final", "return": "V", "signature": "V putOrAggregate(K key, V value, ReduceFunction<V> aggregator)", "full_signature": "public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator)", "class_method_signature": "KeyMap.putOrAggregate(K key, V value, ReduceFunction<V> aggregator)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V get(K key)", "full_signature": "public V get(K key)", "class_method_signature": "KeyMap.get(K key)", "testcase": false, "constructor": false}, {"identifier": "insertNewEntry", "parameters": "(int hashCode, K key, V value, int position)", "modifiers": "private", "return": "void", "signature": "void insertNewEntry(int hashCode, K key, V value, int position)", "full_signature": "private void insertNewEntry(int hashCode, K key, V value, int position)", "class_method_signature": "KeyMap.insertNewEntry(int hashCode, K key, V value, int position)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(int hashCode)", "modifiers": "private", "return": "int", "signature": "int indexOf(int hashCode)", "full_signature": "private int indexOf(int hashCode)", "class_method_signature": "KeyMap.indexOf(int hashCode)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Entry<K, V>>", "signature": "Iterator<Entry<K, V>> iterator()", "full_signature": "@Override public Iterator<Entry<K, V>> iterator()", "class_method_signature": "KeyMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "KeyMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "KeyMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTableCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentTableCapacity()", "full_signature": "public int getCurrentTableCapacity()", "class_method_signature": "KeyMap.getCurrentTableCapacity()", "testcase": false, "constructor": false}, {"identifier": "getLog2TableCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLog2TableCapacity()", "full_signature": "public int getLog2TableCapacity()", "class_method_signature": "KeyMap.getLog2TableCapacity()", "testcase": false, "constructor": false}, {"identifier": "getRehashThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRehashThreshold()", "full_signature": "public int getRehashThreshold()", "class_method_signature": "KeyMap.getRehashThreshold()", "testcase": false, "constructor": false}, {"identifier": "getShift", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getShift()", "full_signature": "public int getShift()", "class_method_signature": "KeyMap.getShift()", "testcase": false, "constructor": false}, {"identifier": "allocateTable", "parameters": "(int numElements)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Entry<K, V>[]", "signature": "Entry<K, V>[] allocateTable(int numElements)", "full_signature": "@SuppressWarnings(\"unchecked\") private Entry<K, V>[] allocateTable(int numElements)", "class_method_signature": "KeyMap.allocateTable(int numElements)", "testcase": false, "constructor": false}, {"identifier": "growTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void growTable()", "full_signature": "private void growTable()", "class_method_signature": "KeyMap.growTable()", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(Object key)", "modifiers": "private static", "return": "int", "signature": "int hash(Object key)", "full_signature": "private static int hash(Object key)", "class_method_signature": "KeyMap.hash(Object key)", "testcase": false, "constructor": false}, {"identifier": "getRehashThreshold", "parameters": "(int capacity)", "modifiers": "private static", "return": "int", "signature": "int getRehashThreshold(int capacity)", "full_signature": "private static int getRehashThreshold(int capacity)", "class_method_signature": "KeyMap.getRehashThreshold(int capacity)", "testcase": false, "constructor": false}, {"identifier": "traverseAndCountElements", "parameters": "()", "modifiers": "", "return": "int", "signature": "int traverseAndCountElements()", "full_signature": " int traverseAndCountElements()", "class_method_signature": "KeyMap.traverseAndCountElements()", "testcase": false, "constructor": false}, {"identifier": "getLongestChainLength", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getLongestChainLength()", "full_signature": " int getLongestChainLength()", "class_method_signature": "KeyMap.getLongestChainLength()", "testcase": false, "constructor": false}, {"identifier": "traverseMaps", "parameters": "(\n\t\t\t\t\tfinal KeyMap<K, V>[] maps,\n\t\t\t\t\tfinal TraversalEvaluator<K, V> visitor,\n\t\t\t\t\tfinal long touchedTag)", "modifiers": "public static", "return": "void", "signature": "void traverseMaps(\n\t\t\t\t\tfinal KeyMap<K, V>[] maps,\n\t\t\t\t\tfinal TraversalEvaluator<K, V> visitor,\n\t\t\t\t\tfinal long touchedTag)", "full_signature": "public static void traverseMaps(\n\t\t\t\t\tfinal KeyMap<K, V>[] maps,\n\t\t\t\t\tfinal TraversalEvaluator<K, V> visitor,\n\t\t\t\t\tfinal long touchedTag)", "class_method_signature": "KeyMap.traverseMaps(\n\t\t\t\t\tfinal KeyMap<K, V>[] maps,\n\t\t\t\t\tfinal TraversalEvaluator<K, V> visitor,\n\t\t\t\t\tfinal long touchedTag)", "testcase": false, "constructor": false}, {"identifier": "addEntriesFromChain", "parameters": "(\n\t\t\tEntry<K, V> entry,\n\t\t\tTraversalEvaluator<K, V> visitor,\n\t\t\tK key,\n\t\t\tlong touchedTag,\n\t\t\tint hashCode)", "modifiers": "private static", "return": "void", "signature": "void addEntriesFromChain(\n\t\t\tEntry<K, V> entry,\n\t\t\tTraversalEvaluator<K, V> visitor,\n\t\t\tK key,\n\t\t\tlong touchedTag,\n\t\t\tint hashCode)", "full_signature": "private static void addEntriesFromChain(\n\t\t\tEntry<K, V> entry,\n\t\t\tTraversalEvaluator<K, V> visitor,\n\t\t\tK key,\n\t\t\tlong touchedTag,\n\t\t\tint hashCode)", "class_method_signature": "KeyMap.addEntriesFromChain(\n\t\t\tEntry<K, V> entry,\n\t\t\tTraversalEvaluator<K, V> visitor,\n\t\t\tK key,\n\t\t\tlong touchedTag,\n\t\t\tint hashCode)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/KeyMap.java"}, "focal_method": {"identifier": "getCurrentTableCapacity", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getCurrentTableCapacity() {\n\t\treturn table.length;\n\t}", "signature": "int getCurrentTableCapacity()", "full_signature": "public int getCurrentTableCapacity()", "class_method_signature": "KeyMap.getCurrentTableCapacity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}