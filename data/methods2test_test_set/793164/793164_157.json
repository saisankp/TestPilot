{"test_class": {"identifier": "FlowRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TestTransactionManager testTransactionManager;", "modifier": "@Autowired\n    private", "type": "TestTransactionManager", "declarator": "testTransactionManager", "var_name": "testTransactionManager"}, {"original_string": "@Autowired\n    private FlowRepositoryImpl flowRepository;", "modifier": "@Autowired\n    private", "type": "FlowRepositoryImpl", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private FlowFinderCriteria allFlows;", "modifier": "private", "type": "FlowFinderCriteria", "declarator": "allFlows", "var_name": "allFlows"}], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/repository/FlowRepositoryImplTest.java"}, "test_case": {"identifier": "testFindFlowsVarSince", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindFlowsVarSince() throws Exception {\n        Flow flow = persistFlow(\"blah\");\n        Date d1 = flow.getCreationTime();\n        Date d2 = new Date(d1.getTime() + 1L);\n        testTransactionManager.commitTransaction();\n        testTransactionManager.beginTransaction();\n        List<Flow> flows = flowRepository.findFlows(new FlowFinderCriteria(d1, null, \"test\"));\n        assertEquals(1, flows.size());\n        assertTrue(flows.contains(flow));\n        flows = flowRepository.findFlows(new FlowFinderCriteria(d1, null, \"wrong\"));\n        assertEquals(0, flows.size());\n        flows = flowRepository.findFlows(new FlowFinderCriteria(d2, null, \"test\"));\n        assertEquals(0, flows.size());\n    }", "signature": "void testFindFlowsVarSince()", "full_signature": "@Test public void testFindFlowsVarSince()", "class_method_signature": "FlowRepositoryImplTest.testFindFlowsVarSince()", "testcase": true, "constructor": false, "invocations": ["persistFlow", "getCreationTime", "getTime", "commitTransaction", "beginTransaction", "findFlows", "assertEquals", "size", "assertTrue", "contains", "findFlows", "assertEquals", "size", "findFlows", "assertEquals", "size"]}, "focal_class": {"identifier": "FlowRepositoryImpl", "superclass": "extends HibernateDaoSupport", "interfaces": "implements FlowRepository", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FlowRepositoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FlowRepositoryImpl.class)", "var_name": "LOG"}, {"original_string": "@Autowired(required = false)\n    private SequenceRepository sequenceRepository;", "modifier": "@Autowired(required = false)\n    private", "type": "SequenceRepository", "declarator": "sequenceRepository", "var_name": "sequenceRepository"}, {"original_string": "@Autowired(required = false)\n    private final FlowSearchCallback flowSearchCallback;", "modifier": "@Autowired(required = false)\n    private final", "type": "FlowSearchCallback", "declarator": "flowSearchCallback", "var_name": "flowSearchCallback"}], "methods": [{"identifier": "FlowRepositoryImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " FlowRepositoryImpl()", "full_signature": "public  FlowRepositoryImpl()", "class_method_signature": "FlowRepositoryImpl.FlowRepositoryImpl()", "testcase": false, "constructor": true}, {"identifier": "initDao", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initDao()", "full_signature": "@Override public void initDao()", "class_method_signature": "FlowRepositoryImpl.initDao()", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(Flow flow)", "modifiers": "@Override public", "return": "void", "signature": "void persist(Flow flow)", "full_signature": "@Override public void persist(Flow flow)", "class_method_signature": "FlowRepositoryImpl.persist(Flow flow)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Flow flow)", "modifiers": "@Override public", "return": "void", "signature": "void merge(Flow flow)", "full_signature": "@Override public void merge(Flow flow)", "class_method_signature": "FlowRepositoryImpl.merge(Flow flow)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Flow flow)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Flow flow)", "full_signature": "@Override public void remove(Flow flow)", "class_method_signature": "FlowRepositoryImpl.remove(Flow flow)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<Flow> flows)", "modifiers": "", "return": "void", "signature": "void removeAll(Collection<Flow> flows)", "full_signature": " void removeAll(Collection<Flow> flows)", "class_method_signature": "FlowRepositoryImpl.removeAll(Collection<Flow> flows)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Long id)", "modifiers": "@Override public", "return": "Flow", "signature": "Flow find(Long id)", "full_signature": "@Override public Flow find(Long id)", "class_method_signature": "FlowRepositoryImpl.find(Long id)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(Long id)", "modifiers": "@Override public", "return": "Flow", "signature": "Flow lock(Long id)", "full_signature": "@Override public Flow lock(Long id)", "class_method_signature": "FlowRepositoryImpl.lock(Long id)", "testcase": false, "constructor": false}, {"identifier": "purgeFlows", "parameters": "(FlowPurgeCriteria purgeCriteria)", "modifiers": "@Override public", "return": "int", "signature": "int purgeFlows(FlowPurgeCriteria purgeCriteria)", "full_signature": "@Override public int purgeFlows(FlowPurgeCriteria purgeCriteria)", "class_method_signature": "FlowRepositoryImpl.purgeFlows(FlowPurgeCriteria purgeCriteria)", "testcase": false, "constructor": false}, {"identifier": "findFlows", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Flow>", "signature": "List<Flow> findFlows(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Flow> findFlows(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findFlows(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findErrorFlows", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Flow>", "signature": "List<Flow> findErrorFlows(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Flow> findErrorFlows(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findErrorFlows(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findUnackFlows", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Flow>", "signature": "List<Flow> findUnackFlows(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Flow> findUnackFlows(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findUnackFlows(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findFlowIds", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Long>", "signature": "List<Long> findFlowIds(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Long> findFlowIds(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findFlowIds(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findErrorFlowIds", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Long>", "signature": "List<Long> findErrorFlowIds(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Long> findErrorFlowIds(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findErrorFlowIds(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findUnackFlowIds", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Long>", "signature": "List<Long> findUnackFlowIds(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Long> findUnackFlowIds(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findUnackFlowIds(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "findPurgeCandidates", "parameters": "(final FlowPurgeCriteria purgeCriteria)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<Flow>", "signature": "List<Flow> findPurgeCandidates(final FlowPurgeCriteria purgeCriteria)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<Flow> findPurgeCandidates(final FlowPurgeCriteria purgeCriteria)", "class_method_signature": "FlowRepositoryImpl.findPurgeCandidates(final FlowPurgeCriteria purgeCriteria)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(FlowFinderCriteria flowFinderCriteria,\n            DetachedCriteria flowStatusCriteria, Session session,\n            boolean idProjection)", "modifiers": "private", "return": "Object", "signature": "Object execute(FlowFinderCriteria flowFinderCriteria,\n            DetachedCriteria flowStatusCriteria, Session session,\n            boolean idProjection)", "full_signature": "private Object execute(FlowFinderCriteria flowFinderCriteria,\n            DetachedCriteria flowStatusCriteria, Session session,\n            boolean idProjection)", "class_method_signature": "FlowRepositoryImpl.execute(FlowFinderCriteria flowFinderCriteria,\n            DetachedCriteria flowStatusCriteria, Session session,\n            boolean idProjection)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(FlowPurgeCriteria flowPurgeCriteria,\n            DetachedCriteria flowStatusCriteria, Session session)", "modifiers": "private", "return": "Object", "signature": "Object execute(FlowPurgeCriteria flowPurgeCriteria,\n            DetachedCriteria flowStatusCriteria, Session session)", "full_signature": "private Object execute(FlowPurgeCriteria flowPurgeCriteria,\n            DetachedCriteria flowStatusCriteria, Session session)", "class_method_signature": "FlowRepositoryImpl.execute(FlowPurgeCriteria flowPurgeCriteria,\n            DetachedCriteria flowStatusCriteria, Session session)", "testcase": false, "constructor": false}, {"identifier": "createFlowsCriteria", "parameters": "(FlowFinderCriteria finderCriteria)", "modifiers": "private static", "return": "DetachedCriteria", "signature": "DetachedCriteria createFlowsCriteria(FlowFinderCriteria finderCriteria)", "full_signature": "private static DetachedCriteria createFlowsCriteria(FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.createFlowsCriteria(FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "createErrorFlowsCriteria", "parameters": "(FlowFinderCriteria finderCriteria)", "modifiers": "private static", "return": "DetachedCriteria", "signature": "DetachedCriteria createErrorFlowsCriteria(FlowFinderCriteria finderCriteria)", "full_signature": "private static DetachedCriteria createErrorFlowsCriteria(FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.createErrorFlowsCriteria(FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "createUnackFlowsCriteria", "parameters": "(FlowFinderCriteria finderCriteria)", "modifiers": "private static", "return": "DetachedCriteria", "signature": "DetachedCriteria createUnackFlowsCriteria(FlowFinderCriteria finderCriteria)", "full_signature": "private static DetachedCriteria createUnackFlowsCriteria(FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.createUnackFlowsCriteria(FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false}, {"identifier": "createPurgeCriteria", "parameters": "(FlowPurgeCriteria purgeCriteria)", "modifiers": "private static", "return": "DetachedCriteria", "signature": "DetachedCriteria createPurgeCriteria(FlowPurgeCriteria purgeCriteria)", "full_signature": "private static DetachedCriteria createPurgeCriteria(FlowPurgeCriteria purgeCriteria)", "class_method_signature": "FlowRepositoryImpl.createPurgeCriteria(FlowPurgeCriteria purgeCriteria)", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/repository/FlowRepositoryImpl.java"}, "focal_method": {"identifier": "findFlows", "parameters": "(final FlowFinderCriteria finderCriteria)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Flow>", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Flow> findFlows(final FlowFinderCriteria finderCriteria) {\n        return getHibernateTemplate().executeFind(new HibernateCallback() {\n            @Override\n            public Object doInHibernate(Session session) throws HibernateException {\n                return execute(finderCriteria, createFlowsCriteria(finderCriteria), session, false);\n            }\n        });\n    }", "signature": "List<Flow> findFlows(final FlowFinderCriteria finderCriteria)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Flow> findFlows(final FlowFinderCriteria finderCriteria)", "class_method_signature": "FlowRepositoryImpl.findFlows(final FlowFinderCriteria finderCriteria)", "testcase": false, "constructor": false, "invocations": ["executeFind", "getHibernateTemplate", "execute", "createFlowsCriteria"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}