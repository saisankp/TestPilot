{"test_class": {"identifier": "AggregatorAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AggregationStrategy strategy;", "modifier": "private", "type": "AggregationStrategy", "declarator": "strategy", "var_name": "strategy"}], "file": "platform-camel/core/src/test/java/org/openehealth/ipf/platform/camel/core/adapter/AggregatorAdapterTest.java"}, "test_case": {"identifier": "testAggregateDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAggregateDefault() {\n        strategy = new AggregatorAdapter(new TestAggregator());\n        Exchange a = exchangeWithInBody(\"a\");\n        Exchange b = exchangeWithInBody(\"b\");\n        strategy.aggregate(a, b);\n        assertEquals(\"a:b\", a.getIn().getBody());\n    }", "signature": "void testAggregateDefault()", "full_signature": "@Test public void testAggregateDefault()", "class_method_signature": "AggregatorAdapterTest.testAggregateDefault()", "testcase": true, "constructor": false, "invocations": ["exchangeWithInBody", "exchangeWithInBody", "aggregate", "assertEquals", "getBody", "getIn"]}, "focal_class": {"identifier": "AggregatorAdapter", "superclass": "extends AdapterSupport", "interfaces": "implements AggregationStrategy", "fields": [{"original_string": "private Expression aggregationInputExpression;", "modifier": "private", "type": "Expression", "declarator": "aggregationInputExpression", "var_name": "aggregationInputExpression"}, {"original_string": "private final Aggregator aggregator;", "modifier": "private final", "type": "Aggregator", "declarator": "aggregator", "var_name": "aggregator"}], "methods": [{"identifier": "AggregatorAdapter", "parameters": "(Aggregator aggregator)", "modifiers": "public", "return": "", "signature": " AggregatorAdapter(Aggregator aggregator)", "full_signature": "public  AggregatorAdapter(Aggregator aggregator)", "class_method_signature": "AggregatorAdapter.AggregatorAdapter(Aggregator aggregator)", "testcase": false, "constructor": true}, {"identifier": "aggregationInput", "parameters": "(Expression aggregationInputExpression)", "modifiers": "public", "return": "AggregatorAdapter", "signature": "AggregatorAdapter aggregationInput(Expression aggregationInputExpression)", "full_signature": "public AggregatorAdapter aggregationInput(Expression aggregationInputExpression)", "class_method_signature": "AggregatorAdapter.aggregationInput(Expression aggregationInputExpression)", "testcase": false, "constructor": false}, {"identifier": "aggregationInput", "parameters": "(Closure aggregationInputExpressionLogic)", "modifiers": "public", "return": "AggregatorAdapter", "signature": "AggregatorAdapter aggregationInput(Closure aggregationInputExpressionLogic)", "full_signature": "public AggregatorAdapter aggregationInput(Closure aggregationInputExpressionLogic)", "class_method_signature": "AggregatorAdapter.aggregationInput(Closure aggregationInputExpressionLogic)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(Exchange oldExchange, Exchange newExchange)", "modifiers": "@Override public", "return": "Exchange", "signature": "Exchange aggregate(Exchange oldExchange, Exchange newExchange)", "full_signature": "@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange)", "class_method_signature": "AggregatorAdapter.aggregate(Exchange oldExchange, Exchange newExchange)", "testcase": false, "constructor": false}, {"identifier": "doAggregate", "parameters": "(Exchange oldExchange, Object oldInputData, \n            Object newInputData, Object... inputParams)", "modifiers": "protected", "return": "void", "signature": "void doAggregate(Exchange oldExchange, Object oldInputData, \n            Object newInputData, Object... inputParams)", "full_signature": "protected void doAggregate(Exchange oldExchange, Object oldInputData, \n            Object newInputData, Object... inputParams)", "class_method_signature": "AggregatorAdapter.doAggregate(Exchange oldExchange, Object oldInputData, \n            Object newInputData, Object... inputParams)", "testcase": false, "constructor": false}, {"identifier": "adaptAggregationInput", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "Object", "signature": "Object adaptAggregationInput(Exchange exchange)", "full_signature": "private Object adaptAggregationInput(Exchange exchange)", "class_method_signature": "AggregatorAdapter.adaptAggregationInput(Exchange exchange)", "testcase": false, "constructor": false}], "file": "platform-camel/core/src/main/java/org/openehealth/ipf/platform/camel/core/adapter/AggregatorAdapter.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(Exchange oldExchange, Exchange newExchange)", "modifiers": "@Override public", "return": "Exchange", "body": "@Override\n    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        Object newInput = adaptAggregationInput(newExchange);\n        Object oldInput = adaptInput(oldExchange);\n        Object params = adaptParams(oldExchange);\n        if (params == null) {\n            doAggregate(oldExchange, oldInput, newInput, (Object[])null);\n        } else if (params.getClass().isArray()) {\n            doAggregate(oldExchange, oldInput, newInput, (Object[])params);\n        } else {\n            doAggregate(oldExchange, oldInput, newInput, params);\n        }\n        return oldExchange;\n    }", "signature": "Exchange aggregate(Exchange oldExchange, Exchange newExchange)", "full_signature": "@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange)", "class_method_signature": "AggregatorAdapter.aggregate(Exchange oldExchange, Exchange newExchange)", "testcase": false, "constructor": false, "invocations": ["adaptAggregationInput", "adaptInput", "adaptParams", "doAggregate", "isArray", "getClass", "doAggregate", "doAggregate"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}