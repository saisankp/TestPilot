{"test_class": {"identifier": "NTPClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-core/src/test/java/network/elrond/chronology/NTPClientTest.java"}, "test_case": {"identifier": "testNTPClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNTPClient(){\n\n    }", "signature": "void testNTPClient()", "full_signature": "@Test public void testNTPClient()", "class_method_signature": "NTPClientTest.testNTPClient()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "NTPClient", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(NTPClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(NTPClient.class)", "var_name": "logger"}, {"original_string": "NTPUDPClient ntpUdpClient;", "modifier": "", "type": "NTPUDPClient", "declarator": "ntpUdpClient", "var_name": "ntpUdpClient"}, {"original_string": "Thread pollThread = null;", "modifier": "", "type": "Thread", "declarator": "pollThread = null", "var_name": "pollThread"}, {"original_string": "long pollMs;", "modifier": "", "type": "long", "declarator": "pollMs", "var_name": "pollMs"}, {"original_string": "List<InetAddress> listHostsAddr = new ArrayList<>();", "modifier": "", "type": "List<InetAddress>", "declarator": "listHostsAddr = new ArrayList<>()", "var_name": "listHostsAddr"}, {"original_string": "List<String> listHosts = new ArrayList<>();", "modifier": "", "type": "List<String>", "declarator": "listHosts = new ArrayList<>()", "var_name": "listHosts"}, {"original_string": "int currentHost = 0;", "modifier": "", "type": "int", "declarator": "currentHost = 0", "var_name": "currentHost"}, {"original_string": "boolean offline = true;", "modifier": "", "type": "boolean", "declarator": "offline = true", "var_name": "offline"}, {"original_string": "private TimeInfo timeInfo;", "modifier": "private", "type": "TimeInfo", "declarator": "timeInfo", "var_name": "timeInfo"}, {"original_string": "private long timeInfoSetLocalTime;", "modifier": "private", "type": "long", "declarator": "timeInfoSetLocalTime", "var_name": "timeInfoSetLocalTime"}, {"original_string": "private Object locker = new Object();", "modifier": "private", "type": "Object", "declarator": "locker = new Object()", "var_name": "locker"}], "methods": [{"identifier": "pollNtpServer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void pollNtpServer()", "full_signature": "private void pollNtpServer()", "class_method_signature": "NTPClient.pollNtpServer()", "testcase": false, "constructor": false}, {"identifier": "NTPClient", "parameters": "(List<String> listHosts, int pollMs)", "modifiers": "public", "return": "", "signature": " NTPClient(List<String> listHosts, int pollMs)", "full_signature": "public  NTPClient(List<String> listHosts, int pollMs)", "class_method_signature": "NTPClient.NTPClient(List<String> listHosts, int pollMs)", "testcase": false, "constructor": true}, {"identifier": "setTimeInfo", "parameters": "(TimeInfo timeInfo)", "modifiers": "private", "return": "void", "signature": "void setTimeInfo(TimeInfo timeInfo)", "full_signature": "private void setTimeInfo(TimeInfo timeInfo)", "class_method_signature": "NTPClient.setTimeInfo(TimeInfo timeInfo)", "testcase": false, "constructor": false}, {"identifier": "getPollMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPollMs()", "full_signature": "public long getPollMs()", "class_method_signature": "NTPClient.getPollMs()", "testcase": false, "constructor": false}, {"identifier": "setPollMs", "parameters": "(int pollMs)", "modifiers": "public", "return": "void", "signature": "void setPollMs(int pollMs)", "full_signature": "public void setPollMs(int pollMs)", "class_method_signature": "NTPClient.setPollMs(int pollMs)", "testcase": false, "constructor": false}, {"identifier": "currentTimeMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long currentTimeMillis()", "full_signature": "public long currentTimeMillis()", "class_method_signature": "NTPClient.currentTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "isOffline", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOffline()", "full_signature": "public boolean isOffline()", "class_method_signature": "NTPClient.isOffline()", "testcase": false, "constructor": false}, {"identifier": "getCurrentHostName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrentHostName()", "full_signature": "public String getCurrentHostName()", "class_method_signature": "NTPClient.getCurrentHostName()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NTPClient.close()", "testcase": false, "constructor": false}, {"identifier": "finalizer", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void finalizer()", "full_signature": "protected void finalizer()", "class_method_signature": "NTPClient.finalizer()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/chronology/NTPClient.java"}, "focal_method": {"identifier": "NTPClient", "parameters": "(List<String> listHosts, int pollMs)", "modifiers": "public", "return": "", "body": "public NTPClient(List<String> listHosts, int pollMs) throws UnknownHostException, SocketException, NullPointerException {\n        logger.traceEntry(\"params: {} {}\", listHosts, pollMs);\n        this.pollMs = pollMs;\n\n        Util.check(listHosts != null, \"listHosts should not be null!\");\n\n        StringBuilder stringBuilderHosts = new StringBuilder();\n\n        logger.trace(\"Building internal lists...\");\n        for (int i = 0; i < listHosts.size(); i++){\n            InetAddress host = InetAddress.getByName(listHosts.get(i));\n            listHostsAddr.add(host);\n            this.listHosts.add(listHosts.get(i));\n            if (i > 0){\n                stringBuilderHosts.append(\", \");\n            }\n            stringBuilderHosts.append(host);\n        }\n\n        if (listHostsAddr.size() == 0){\n            logger.trace(\"Lists are empty, adding a default, not usable server!\");\n            listHostsAddr.add(InetAddress.getByName(\"localhost\"));\n            listHosts.add(\"[N/A]\");\n        }\n\n        ntpUdpClient = new NTPUDPClient();\n        ntpUdpClient.setDefaultTimeout(10000);\n        ntpUdpClient.open();\n        ntpUdpClient.setSoTimeout(pollMs * 2 + 20);\n        pollThread = new Thread(this::pollNtpServer, \"pollNtpServer(\" + stringBuilderHosts.toString() + \",\" + pollMs + \")\");\n        pollThread.start();\n        logger.traceExit();\n    }", "signature": " NTPClient(List<String> listHosts, int pollMs)", "full_signature": "public  NTPClient(List<String> listHosts, int pollMs)", "class_method_signature": "NTPClient.NTPClient(List<String> listHosts, int pollMs)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}