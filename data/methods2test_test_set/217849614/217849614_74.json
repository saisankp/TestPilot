{"test_class": {"identifier": "AbstractBloomFilterConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/AbstractBloomFilterConfigTest.java"}, "test_case": {"identifier": "testGetAndSetInvalidExpectedInsertions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAndSetInvalidExpectedInsertions() {\n        final int invalidExpectedInsertions = -1 * Math.abs(ThreadLocalRandom.current().nextInt());\n        final TestingBloomFilterConfig config = new TestingBloomFilterConfig();\n\n        assertThatThrownBy(() -> config.setExpectedInsertions(invalidExpectedInsertions))\n                .isInstanceOf(BadParameterException.class)\n                .hasMessageContaining(\"invalid parameter\");\n    }", "signature": "void testGetAndSetInvalidExpectedInsertions()", "full_signature": "@Test public void testGetAndSetInvalidExpectedInsertions()", "class_method_signature": "AbstractBloomFilterConfigTest.testGetAndSetInvalidExpectedInsertions()", "testcase": true, "constructor": false, "invocations": ["abs", "nextInt", "current", "hasMessageContaining", "isInstanceOf", "assertThatThrownBy", "setExpectedInsertions"]}, "focal_class": {"identifier": "AbstractBloomFilterConfig", "superclass": "", "interfaces": "implements BloomFilterConfig<T>, Cloneable", "fields": [{"original_string": "private int expectedInsertions;", "modifier": "private", "type": "int", "declarator": "expectedInsertions", "var_name": "expectedInsertions"}, {"original_string": "private double fpp;", "modifier": "private", "type": "double", "declarator": "fpp", "var_name": "fpp"}], "methods": [{"identifier": "AbstractBloomFilterConfig", "parameters": "()", "modifiers": "", "return": "", "signature": " AbstractBloomFilterConfig()", "full_signature": "  AbstractBloomFilterConfig()", "class_method_signature": "AbstractBloomFilterConfig.AbstractBloomFilterConfig()", "testcase": false, "constructor": true}, {"identifier": "AbstractBloomFilterConfig", "parameters": "(int expectedInsertions, double fpp)", "modifiers": "", "return": "", "signature": " AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "full_signature": "  AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "class_method_signature": "AbstractBloomFilterConfig.AbstractBloomFilterConfig(int expectedInsertions, double fpp)", "testcase": false, "constructor": true}, {"identifier": "expectedInsertions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int expectedInsertions()", "full_signature": "public int expectedInsertions()", "class_method_signature": "AbstractBloomFilterConfig.expectedInsertions()", "testcase": false, "constructor": false}, {"identifier": "fpp", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double fpp()", "full_signature": "public double fpp()", "class_method_signature": "AbstractBloomFilterConfig.fpp()", "testcase": false, "constructor": false}, {"identifier": "setExpectedInsertions", "parameters": "(int expectedInsertions)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T setExpectedInsertions(int expectedInsertions)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T setExpectedInsertions(int expectedInsertions)", "class_method_signature": "AbstractBloomFilterConfig.setExpectedInsertions(int expectedInsertions)", "testcase": false, "constructor": false}, {"identifier": "setFpp", "parameters": "(double fpp)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T setFpp(double fpp)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T setFpp(double fpp)", "class_method_signature": "AbstractBloomFilterConfig.setFpp(double fpp)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AbstractBloomFilterConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractBloomFilterConfig.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractBloomFilterConfig.toString()", "testcase": false, "constructor": false}, {"identifier": "self", "parameters": "()", "modifiers": "protected abstract", "return": "T", "signature": "T self()", "full_signature": "protected abstract T self()", "class_method_signature": "AbstractBloomFilterConfig.self()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/AbstractBloomFilterConfig.java"}, "focal_method": {"identifier": "setExpectedInsertions", "parameters": "(int expectedInsertions)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T setExpectedInsertions(int expectedInsertions) {\n        checkParameter(\"expectedInsertions\",\n                expectedInsertions > 0,\n                \"expected: > 0, actual: %s\",\n                expectedInsertions);\n\n        this.expectedInsertions = expectedInsertions;\n        return self();\n    }", "signature": "T setExpectedInsertions(int expectedInsertions)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T setExpectedInsertions(int expectedInsertions)", "class_method_signature": "AbstractBloomFilterConfig.setExpectedInsertions(int expectedInsertions)", "testcase": false, "constructor": false, "invocations": ["checkParameter", "self"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}