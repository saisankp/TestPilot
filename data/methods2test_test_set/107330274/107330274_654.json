{"test_class": {"identifier": "SpringCallMetadataInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MY_ORIGINAL_CALLER = \"myOriginalCaller\";", "modifier": "private static final", "type": "String", "declarator": "MY_ORIGINAL_CALLER = \"myOriginalCaller\"", "var_name": "MY_ORIGINAL_CALLER"}, {"original_string": "private static final String MY_DIRECT_CALLER = \"myDirectCaller\";", "modifier": "private static final", "type": "String", "declarator": "MY_DIRECT_CALLER = \"myDirectCaller\"", "var_name": "MY_DIRECT_CALLER"}, {"original_string": "private static final String MY_PASSWORD = \"myPassword\";", "modifier": "private static final", "type": "String", "declarator": "MY_PASSWORD = \"myPassword\"", "var_name": "MY_PASSWORD"}, {"original_string": "private static final String MY_REASON = \"myReason\";", "modifier": "private static final", "type": "String", "declarator": "MY_REASON = \"myReason\"", "var_name": "MY_REASON"}, {"original_string": "private final SpringCallMetadataInterceptor interceptor = new SpringCallMetadataInterceptor();", "modifier": "private final", "type": "SpringCallMetadataInterceptor", "declarator": "interceptor = new SpringCallMetadataInterceptor()", "var_name": "interceptor"}, {"original_string": "private final HttpServletRequest request = mock(HttpServletRequest.class);", "modifier": "private final", "type": "HttpServletRequest", "declarator": "request = mock(HttpServletRequest.class)", "var_name": "request"}, {"original_string": "private final HttpServletResponse response = mock(HttpServletResponse.class);", "modifier": "private final", "type": "HttpServletResponse", "declarator": "response = mock(HttpServletResponse.class)", "var_name": "response"}], "file": "titus-common-server/src/test/java/com/netflix/titus/runtime/endpoint/metadata/spring/SpringCallMetadataInterceptorTest.java"}, "test_case": {"identifier": "testOriginalCallerId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOriginalCallerId() throws Exception {\n        when(request.getHeader(CallMetadataHeaders.CALLER_ID_HEADER)).thenReturn(MY_ORIGINAL_CALLER);\n\n        interceptor.preHandle(request, response, new Object());\n        CallMetadata callMetadata = expectCallMetadataAuthentication();\n        assertThat(callMetadata.getCallers()).hasSize(2);\n        assertThat(callMetadata.getCallers().get(0).getId()).isEqualTo(MY_ORIGINAL_CALLER);\n        assertThat(callMetadata.getCallers().get(1).getId()).isEqualTo(MY_DIRECT_CALLER);\n        assertThat(callMetadata.getCallers().get(1).getCallerType()).isEqualTo(CallerType.Application);\n    }", "signature": "void testOriginalCallerId()", "full_signature": "@Test public void testOriginalCallerId()", "class_method_signature": "SpringCallMetadataInterceptorTest.testOriginalCallerId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHeader", "preHandle", "expectCallMetadataAuthentication", "hasSize", "assertThat", "getCallers", "isEqualTo", "assertThat", "getId", "get", "getCallers", "isEqualTo", "assertThat", "getId", "get", "getCallers", "isEqualTo", "assertThat", "getCallerType", "get", "getCallers"]}, "focal_class": {"identifier": "SpringCallMetadataInterceptor", "superclass": "extends HandlerInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final String DEBUG_QUERY_PARAM = \"debug\";", "modifier": "@VisibleForTesting\n    static final", "type": "String", "declarator": "DEBUG_QUERY_PARAM = \"debug\"", "var_name": "DEBUG_QUERY_PARAM"}], "methods": [{"identifier": "preHandle", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "class_method_signature": "SpringCallMetadataInterceptor.preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "testcase": false, "constructor": false}, {"identifier": "getDirectCaller", "parameters": "(HttpServletRequest httpServletRequest, Authentication delegate)", "modifiers": "protected", "return": "Caller", "signature": "Caller getDirectCaller(HttpServletRequest httpServletRequest, Authentication delegate)", "full_signature": "protected Caller getDirectCaller(HttpServletRequest httpServletRequest, Authentication delegate)", "class_method_signature": "SpringCallMetadataInterceptor.getDirectCaller(HttpServletRequest httpServletRequest, Authentication delegate)", "testcase": false, "constructor": false}, {"identifier": "getContextFromServletRequest", "parameters": "(HttpServletRequest httpServletRequest)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getContextFromServletRequest(HttpServletRequest httpServletRequest)", "full_signature": "protected Map<String, String> getContextFromServletRequest(HttpServletRequest httpServletRequest)", "class_method_signature": "SpringCallMetadataInterceptor.getContextFromServletRequest(HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}], "file": "titus-common-server/src/main/java/com/netflix/titus/runtime/endpoint/metadata/spring/SpringCallMetadataInterceptor.java"}, "focal_method": {"identifier": "preHandle", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler) throws Exception {\n        Authentication delegate = SecurityContextHolder.getContext().getAuthentication();\n        if (delegate == null || delegate instanceof CallMetadataAuthentication) {\n            return super.preHandle(httpServletRequest, httpServletResponse, handler);\n        }\n\n        String callReason = httpServletRequest.getHeader(CallMetadataHeaders.CALL_REASON_HEADER);\n        String debugQueryParameter = httpServletRequest.getParameter(DEBUG_QUERY_PARAM);\n        boolean debug = debugQueryParameter == null\n                ? Boolean.parseBoolean(httpServletRequest.getHeader(CallMetadataHeaders.DEBUG_HEADER))\n                : Boolean.parseBoolean(debugQueryParameter);\n\n        String originalCallerId = httpServletRequest.getHeader(CallMetadataHeaders.CALLER_ID_HEADER);\n\n        Caller directCaller = getDirectCaller(httpServletRequest, delegate);\n\n        CallMetadata.Builder callMetadataBuilder = CallMetadata.newBuilder()\n                .withCallReason(callReason)\n                .withDebug(debug);\n\n        if (originalCallerId == null) {\n            callMetadataBuilder.withCallers(Collections.singletonList(directCaller));\n        } else {\n            CallerType originalCallerType = CallerType.parseCallerType(\n                    originalCallerId,\n                    httpServletRequest.getHeader(CallMetadataHeaders.CALLER_TYPE_HEADER)\n            );\n            Caller originalCaller = Caller.newBuilder()\n                    .withId(originalCallerId)\n                    .withCallerType(originalCallerType)\n                    .build();\n\n            callMetadataBuilder.withCallers(asList(originalCaller, directCaller));\n        }\n\n        CallMetadataAuthentication authentication = new CallMetadataAuthentication(callMetadataBuilder.build(), delegate);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        return super.preHandle(httpServletRequest, httpServletResponse, handler);\n    }", "signature": "boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "class_method_signature": "SpringCallMetadataInterceptor.preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)", "testcase": false, "constructor": false, "invocations": ["getAuthentication", "getContext", "preHandle", "getHeader", "getParameter", "parseBoolean", "getHeader", "parseBoolean", "getHeader", "getDirectCaller", "withDebug", "withCallReason", "newBuilder", "withCallers", "singletonList", "parseCallerType", "getHeader", "build", "withCallerType", "withId", "newBuilder", "withCallers", "asList", "build", "setAuthentication", "getContext", "preHandle"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}