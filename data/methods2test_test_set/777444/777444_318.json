{"test_class": {"identifier": "DelegatingRestrictorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DelegatingRestrictor restrictor;", "modifier": "private", "type": "DelegatingRestrictor", "declarator": "restrictor", "var_name": "restrictor"}, {"original_string": "private BundleContext context;", "modifier": "private", "type": "BundleContext", "declarator": "context", "var_name": "context"}], "file": "agent/osgi/src/test/java/org/jolokia/osgi/security/DelegatingRestrictorTest.java"}, "test_case": {"identifier": "invalidSyntax", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Impossible.*\") public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Impossible.*\")\n    public void invalidSyntax() throws InvalidSyntaxException {\n        expect(context.getServiceReferences(\"org.jolokia.restrictor.Restrictor\", null)).andThrow(new InvalidSyntaxException(\"\", null));\n        replay(context);\n        restrictor.isHttpMethodAllowed(HttpMethod.GET);\n    }", "signature": "void invalidSyntax()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Impossible.*\") public void invalidSyntax()", "class_method_signature": "DelegatingRestrictorTest.invalidSyntax()", "testcase": true, "constructor": false, "invocations": ["andThrow", "expect", "getServiceReferences", "replay", "isHttpMethodAllowed"]}, "focal_class": {"identifier": "DelegatingRestrictor", "superclass": "", "interfaces": "implements Restrictor", "fields": [{"original_string": "private BundleContext bundleContext;", "modifier": "private", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "private static final RestrictorCheck HTTP_METHOD_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isHttpMethodAllowed((HttpMethod) args[0]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "HTTP_METHOD_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isHttpMethodAllowed((HttpMethod) args[0]);\n        }\n    }", "var_name": "HTTP_METHOD_CHECK"}, {"original_string": "private static final RestrictorCheck TYPE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isTypeAllowed((RequestType) args[0]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "TYPE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isTypeAllowed((RequestType) args[0]);\n        }\n    }", "var_name": "TYPE_CHECK"}, {"original_string": "private static final RestrictorCheck ATTRIBUTE_READ_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isAttributeReadAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "ATTRIBUTE_READ_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isAttributeReadAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    }", "var_name": "ATTRIBUTE_READ_CHECK"}, {"original_string": "private static final RestrictorCheck ATTRIBUTE_WRITE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isAttributeWriteAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "ATTRIBUTE_WRITE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isAttributeWriteAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    }", "var_name": "ATTRIBUTE_WRITE_CHECK"}, {"original_string": "private static final RestrictorCheck OPERATION_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isOperationAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "OPERATION_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            return restrictor.isOperationAllowed((ObjectName) args[0], (String) args[1]);\n        }\n    }", "var_name": "OPERATION_CHECK"}, {"original_string": "private static final RestrictorCheck REMOTE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            String[] argsS = new String[args.length];\n            for (int i = 0; i < args.length; i++) {\n                argsS[i] = (String) args[i];\n            }\n            return restrictor.isRemoteAccessAllowed(argsS);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "REMOTE_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor,Object ... args) {\n            String[] argsS = new String[args.length];\n            for (int i = 0; i < args.length; i++) {\n                argsS[i] = (String) args[i];\n            }\n            return restrictor.isRemoteAccessAllowed(argsS);\n        }\n    }", "var_name": "REMOTE_CHECK"}, {"original_string": "private static final RestrictorCheck CORS_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor, Object... args) {\n            return restrictor.isOriginAllowed((String) args[0], (Boolean) args[1]);\n        }\n    };", "modifier": "private static final", "type": "RestrictorCheck", "declarator": "CORS_CHECK = new RestrictorCheck() {\n        /** {@inheritDoc} */\n        public boolean check(Restrictor restrictor, Object... args) {\n            return restrictor.isOriginAllowed((String) args[0], (Boolean) args[1]);\n        }\n    }", "var_name": "CORS_CHECK"}], "methods": [{"identifier": "DelegatingRestrictor", "parameters": "(BundleContext pBundleContext)", "modifiers": "public", "return": "", "signature": " DelegatingRestrictor(BundleContext pBundleContext)", "full_signature": "public  DelegatingRestrictor(BundleContext pBundleContext)", "class_method_signature": "DelegatingRestrictor.DelegatingRestrictor(BundleContext pBundleContext)", "testcase": false, "constructor": true}, {"identifier": "checkRestrictorService", "parameters": "(RestrictorCheck pCheck, Object ... args)", "modifiers": "private", "return": "boolean", "signature": "boolean checkRestrictorService(RestrictorCheck pCheck, Object ... args)", "full_signature": "private boolean checkRestrictorService(RestrictorCheck pCheck, Object ... args)", "class_method_signature": "DelegatingRestrictor.checkRestrictorService(RestrictorCheck pCheck, Object ... args)", "testcase": false, "constructor": false}, {"identifier": "isHttpMethodAllowed", "parameters": "(HttpMethod pMethod)", "modifiers": "public", "return": "boolean", "signature": "boolean isHttpMethodAllowed(HttpMethod pMethod)", "full_signature": "public boolean isHttpMethodAllowed(HttpMethod pMethod)", "class_method_signature": "DelegatingRestrictor.isHttpMethodAllowed(HttpMethod pMethod)", "testcase": false, "constructor": false}, {"identifier": "isTypeAllowed", "parameters": "(RequestType pType)", "modifiers": "public", "return": "boolean", "signature": "boolean isTypeAllowed(RequestType pType)", "full_signature": "public boolean isTypeAllowed(RequestType pType)", "class_method_signature": "DelegatingRestrictor.isTypeAllowed(RequestType pType)", "testcase": false, "constructor": false}, {"identifier": "isAttributeReadAllowed", "parameters": "(ObjectName pName, String pAttribute)", "modifiers": "public", "return": "boolean", "signature": "boolean isAttributeReadAllowed(ObjectName pName, String pAttribute)", "full_signature": "public boolean isAttributeReadAllowed(ObjectName pName, String pAttribute)", "class_method_signature": "DelegatingRestrictor.isAttributeReadAllowed(ObjectName pName, String pAttribute)", "testcase": false, "constructor": false}, {"identifier": "isAttributeWriteAllowed", "parameters": "(ObjectName pName, String pAttribute)", "modifiers": "public", "return": "boolean", "signature": "boolean isAttributeWriteAllowed(ObjectName pName, String pAttribute)", "full_signature": "public boolean isAttributeWriteAllowed(ObjectName pName, String pAttribute)", "class_method_signature": "DelegatingRestrictor.isAttributeWriteAllowed(ObjectName pName, String pAttribute)", "testcase": false, "constructor": false}, {"identifier": "isOperationAllowed", "parameters": "(ObjectName pName, String pOperation)", "modifiers": "public", "return": "boolean", "signature": "boolean isOperationAllowed(ObjectName pName, String pOperation)", "full_signature": "public boolean isOperationAllowed(ObjectName pName, String pOperation)", "class_method_signature": "DelegatingRestrictor.isOperationAllowed(ObjectName pName, String pOperation)", "testcase": false, "constructor": false}, {"identifier": "isRemoteAccessAllowed", "parameters": "(String... pHostOrAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean isRemoteAccessAllowed(String... pHostOrAddress)", "full_signature": "public boolean isRemoteAccessAllowed(String... pHostOrAddress)", "class_method_signature": "DelegatingRestrictor.isRemoteAccessAllowed(String... pHostOrAddress)", "testcase": false, "constructor": false}, {"identifier": "isOriginAllowed", "parameters": "(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled)", "modifiers": "public", "return": "boolean", "signature": "boolean isOriginAllowed(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled)", "full_signature": "public boolean isOriginAllowed(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled)", "class_method_signature": "DelegatingRestrictor.isOriginAllowed(String pOrigin, boolean pOnlyWhenStrictCheckingIsEnabled)", "testcase": false, "constructor": false}], "file": "agent/osgi/src/main/java/org/jolokia/osgi/security/DelegatingRestrictor.java"}, "focal_method": {"identifier": "isHttpMethodAllowed", "parameters": "(HttpMethod pMethod)", "modifiers": "public", "return": "boolean", "body": "public boolean isHttpMethodAllowed(HttpMethod pMethod) {\n        return checkRestrictorService(HTTP_METHOD_CHECK,pMethod);\n    }", "signature": "boolean isHttpMethodAllowed(HttpMethod pMethod)", "full_signature": "public boolean isHttpMethodAllowed(HttpMethod pMethod)", "class_method_signature": "DelegatingRestrictor.isHttpMethodAllowed(HttpMethod pMethod)", "testcase": false, "constructor": false, "invocations": ["checkRestrictorService"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}