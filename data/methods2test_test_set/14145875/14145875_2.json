{"test_class": {"identifier": "BaragonRequestWorkerTest", "superclass": "extends BaragonServiceTestBase", "interfaces": "", "fields": [{"original_string": "private static final String TEST_LB_GROUP = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_LB_GROUP = \"test\"", "var_name": "TEST_LB_GROUP"}, {"original_string": "@Inject\n  RequestManager requestManager;", "modifier": "@Inject", "type": "RequestManager", "declarator": "requestManager", "var_name": "requestManager"}, {"original_string": "@Inject\n  BaragonRequestWorker requestWorker;", "modifier": "@Inject", "type": "BaragonRequestWorker", "declarator": "requestWorker", "var_name": "requestWorker"}], "file": "BaragonService/src/test/java/com/hubspot/baragon/service/worker/BaragonRequestWorkerTest.java"}, "test_case": {"identifier": "testInFlightRequestsAreRespected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInFlightRequestsAreRespected() throws Exception {\n    String agentUrl = \"http://agent2\";\n    startAgent(agentUrl, TEST_LB_GROUP);\n    requestManager.enqueueRequest(createBaseRequest(\"request1\", \"service1\", ImmutableSet.of(TEST_LB_GROUP)).build());\n    requestWorker.run(); // move from pending -> send apply\n    requestWorker.run(); // actually send\n    Assertions.assertEquals(1, testAgentManager.getRecentBatches().get(agentUrl).size());\n\n    requestManager.enqueueRequest(createBaseRequest(\"request2\", \"service1\", ImmutableSet.of(TEST_LB_GROUP)).build());\n    Assertions.assertEquals(1, testAgentManager.getRecentBatches().get(agentUrl).size());\n    Assertions.assertEquals(\"request1\", testAgentManager.getRecentBatches().get(agentUrl).get(0).getRequestId());\n  }", "signature": "void testInFlightRequestsAreRespected()", "full_signature": "@Test public void testInFlightRequestsAreRespected()", "class_method_signature": "BaragonRequestWorkerTest.testInFlightRequestsAreRespected()", "testcase": true, "constructor": false, "invocations": ["startAgent", "enqueueRequest", "build", "createBaseRequest", "of", "run", "run", "assertEquals", "size", "get", "getRecentBatches", "enqueueRequest", "build", "createBaseRequest", "of", "assertEquals", "size", "get", "getRecentBatches", "assertEquals", "getRequestId", "get", "get", "getRecentBatches"]}, "focal_class": {"identifier": "BaragonRequestWorker", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BaragonRequestWorker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BaragonRequestWorker.class)", "var_name": "LOG"}, {"original_string": "private final AgentManager agentManager;", "modifier": "private final", "type": "AgentManager", "declarator": "agentManager", "var_name": "agentManager"}, {"original_string": "private final RequestManager requestManager;", "modifier": "private final", "type": "RequestManager", "declarator": "requestManager", "var_name": "requestManager"}, {"original_string": "private final BaragonStateDatastore stateDatastore;", "modifier": "private final", "type": "BaragonStateDatastore", "declarator": "stateDatastore", "var_name": "stateDatastore"}, {"original_string": "private final AtomicLong workerLastStartAt;", "modifier": "private final", "type": "AtomicLong", "declarator": "workerLastStartAt", "var_name": "workerLastStartAt"}, {"original_string": "private final BaragonExceptionNotifier exceptionNotifier;", "modifier": "private final", "type": "BaragonExceptionNotifier", "declarator": "exceptionNotifier", "var_name": "exceptionNotifier"}, {"original_string": "private final BaragonConfiguration configuration;", "modifier": "private final", "type": "BaragonConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final EdgeCache edgeCache;", "modifier": "private final", "type": "EdgeCache", "declarator": "edgeCache", "var_name": "edgeCache"}, {"original_string": "private final UpstreamResolver resolver;", "modifier": "private final", "type": "UpstreamResolver", "declarator": "resolver", "var_name": "resolver"}], "methods": [{"identifier": "BaragonRequestWorker", "parameters": "(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "modifiers": "@Inject public", "return": "", "signature": " BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "full_signature": "@Inject public  BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "class_method_signature": "BaragonRequestWorker.BaragonRequestWorker(AgentManager agentManager,\n                              RequestManager requestManager,\n                              BaragonStateDatastore stateDatastore,\n                              BaragonExceptionNotifier exceptionNotifier,\n                              BaragonConfiguration configuration,\n                              EdgeCache edgeCache,\n                              UpstreamResolver resolver,\n                              @Named(BaragonDataModule.BARAGON_SERVICE_WORKER_LAST_START) AtomicLong workerLastStartAt)", "testcase": false, "constructor": true}, {"identifier": "buildResponseString", "parameters": "(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "modifiers": "private", "return": "String", "signature": "String buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "full_signature": "private String buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "class_method_signature": "BaragonRequestWorker.buildResponseString(Map<String, Collection<AgentResponse>> agentResponses, AgentRequestType requestType)", "testcase": false, "constructor": false}, {"identifier": "handleCheckRevertResponse", "parameters": "(BaragonRequest request, InternalRequestStates currentState)", "modifiers": "private", "return": "InternalRequestStates", "signature": "InternalRequestStates handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "full_signature": "private InternalRequestStates handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "class_method_signature": "BaragonRequestWorker.handleCheckRevertResponse(BaragonRequest request, InternalRequestStates currentState)", "testcase": false, "constructor": false}, {"identifier": "handleState", "parameters": "(InternalRequestStates currentState, BaragonRequest request)", "modifiers": "private", "return": "InternalRequestStates", "signature": "InternalRequestStates handleState(InternalRequestStates currentState, BaragonRequest request)", "full_signature": "private InternalRequestStates handleState(InternalRequestStates currentState, BaragonRequest request)", "class_method_signature": "BaragonRequestWorker.handleState(InternalRequestStates currentState, BaragonRequest request)", "testcase": false, "constructor": false}, {"identifier": "performPostApplySteps", "parameters": "(BaragonRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean performPostApplySteps(BaragonRequest request)", "full_signature": "private boolean performPostApplySteps(BaragonRequest request)", "class_method_signature": "BaragonRequestWorker.performPostApplySteps(BaragonRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDomainsNotServed", "parameters": "(BaragonService service)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getDomainsNotServed(BaragonService service)", "full_signature": "private List<String> getDomainsNotServed(BaragonService service)", "class_method_signature": "BaragonRequestWorker.getDomainsNotServed(BaragonService service)", "testcase": false, "constructor": false}, {"identifier": "getBasePathConflictMessage", "parameters": "(Map<String, String> conflicts)", "modifiers": "private", "return": "String", "signature": "String getBasePathConflictMessage(Map<String, String> conflicts)", "full_signature": "private String getBasePathConflictMessage(Map<String, String> conflicts)", "class_method_signature": "BaragonRequestWorker.getBasePathConflictMessage(Map<String, String> conflicts)", "testcase": false, "constructor": false}, {"identifier": "handleQueuedRequests", "parameters": "(List<QueuedRequestWithState> queuedRequestsWithState)", "modifiers": "private", "return": "Map<QueuedRequestWithState, InternalRequestStates>", "signature": "Map<QueuedRequestWithState, InternalRequestStates> handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "full_signature": "private Map<QueuedRequestWithState, InternalRequestStates> handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "class_method_signature": "BaragonRequestWorker.handleQueuedRequests(List<QueuedRequestWithState> queuedRequestsWithState)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "BaragonRequestWorker.run()", "testcase": false, "constructor": false}, {"identifier": "hasInProgressAttempt", "parameters": "(QueuedRequestWithState queuedRequestWithState)", "modifiers": "private", "return": "boolean", "signature": "boolean hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "full_signature": "private boolean hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "class_method_signature": "BaragonRequestWorker.hasInProgressAttempt(QueuedRequestWithState queuedRequestWithState)", "testcase": false, "constructor": false}, {"identifier": "saveAdjustedRequest", "parameters": "(MaybeAdjustedRequest maybeAdjustedRequest)", "modifiers": "private", "return": "QueuedRequestWithState", "signature": "QueuedRequestWithState saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "full_signature": "private QueuedRequestWithState saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "class_method_signature": "BaragonRequestWorker.saveAdjustedRequest(MaybeAdjustedRequest maybeAdjustedRequest)", "testcase": false, "constructor": false}, {"identifier": "setNoValidateIfRequestRemovesUpstreamsOnly", "parameters": "(MaybeAdjustedRequest nonServiceChangeRequest)", "modifiers": "private", "return": "MaybeAdjustedRequest", "signature": "MaybeAdjustedRequest setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "full_signature": "private MaybeAdjustedRequest setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "class_method_signature": "BaragonRequestWorker.setNoValidateIfRequestRemovesUpstreamsOnly(MaybeAdjustedRequest nonServiceChangeRequest)", "testcase": false, "constructor": false}, {"identifier": "preResolveDNS", "parameters": "(MaybeAdjustedRequest nonServiceChangeRequest)", "modifiers": "private", "return": "MaybeAdjustedRequest", "signature": "MaybeAdjustedRequest preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "full_signature": "private MaybeAdjustedRequest preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "class_method_signature": "BaragonRequestWorker.preResolveDNS(MaybeAdjustedRequest nonServiceChangeRequest)", "testcase": false, "constructor": false}, {"identifier": "allUpstreamsAreResolved", "parameters": "(Collection<UpstreamInfo> upstreams)", "modifiers": "private", "return": "boolean", "signature": "boolean allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "full_signature": "private boolean allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "class_method_signature": "BaragonRequestWorker.allUpstreamsAreResolved(Collection<UpstreamInfo> upstreams)", "testcase": false, "constructor": false}, {"identifier": "resolveDNSForAllUpstreams", "parameters": "(Collection<UpstreamInfo> upstreams)", "modifiers": "private", "return": "List<UpstreamInfo>", "signature": "List<UpstreamInfo> resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "full_signature": "private List<UpstreamInfo> resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "class_method_signature": "BaragonRequestWorker.resolveDNSForAllUpstreams(Collection<UpstreamInfo> upstreams)", "testcase": false, "constructor": false}, {"identifier": "handleResultStates", "parameters": "(Map<QueuedRequestWithState, InternalRequestStates> results)", "modifiers": "private", "return": "void", "signature": "void handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "full_signature": "private void handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "class_method_signature": "BaragonRequestWorker.handleResultStates(Map<QueuedRequestWithState, InternalRequestStates> results)", "testcase": false, "constructor": false}, {"identifier": "collectRequests", "parameters": "(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "modifiers": "private", "return": "void", "signature": "void collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "full_signature": "private void collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "class_method_signature": "BaragonRequestWorker.collectRequests(int previouslyAdded,\n                              List<QueuedRequestWithState> queuedRequests,\n                              ArrayList<QueuedRequestWithState> nonServiceChanges,\n                              ArrayList<QueuedRequestWithState> serviceChanges)", "testcase": false, "constructor": false}, {"identifier": "isBatchBoundary", "parameters": "(BaragonRequest baragonRequest)", "modifiers": "private", "return": "boolean", "signature": "boolean isBatchBoundary(BaragonRequest baragonRequest)", "full_signature": "private boolean isBatchBoundary(BaragonRequest baragonRequest)", "class_method_signature": "BaragonRequestWorker.isBatchBoundary(BaragonRequest baragonRequest)", "testcase": false, "constructor": false}, {"identifier": "hydrateQueuedRequestWithState", "parameters": "(QueuedRequestId queuedRequestId)", "modifiers": "private", "return": "Optional<QueuedRequestWithState>", "signature": "Optional<QueuedRequestWithState> hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "full_signature": "private Optional<QueuedRequestWithState> hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "class_method_signature": "BaragonRequestWorker.hydrateQueuedRequestWithState(QueuedRequestId queuedRequestId)", "testcase": false, "constructor": false}, {"identifier": "queuedRequestComparator", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "Comparator<QueuedRequestWithState>", "signature": "Comparator<QueuedRequestWithState> queuedRequestComparator()", "full_signature": "@VisibleForTesting static Comparator<QueuedRequestWithState> queuedRequestComparator()", "class_method_signature": "BaragonRequestWorker.queuedRequestComparator()", "testcase": false, "constructor": false}], "file": "BaragonService/src/main/java/com/hubspot/baragon/service/worker/BaragonRequestWorker.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void run() {\n    workerLastStartAt.set(System.currentTimeMillis());\n\n    try {\n      final List<QueuedRequestWithState> queuedRequests = requestManager.getQueuedRequestIds()\n          .stream()\n          .map(this::hydrateQueuedRequestWithState)\n          .filter(Optional::isPresent)\n          .map(Optional::get)\n          .collect(Collectors.toList());\n\n      List<QueuedRequestWithState> inFlightRequests = queuedRequests.stream()\n          .filter((q) -> q.getCurrentState().isInFlight() || hasInProgressAttempt(q))\n          .collect(Collectors.toList());\n\n      final Set<String> inProgressServices = inFlightRequests.stream()\n          .map((q) -> q.getQueuedRequestId().getServiceId())\n          .collect(Collectors.toSet());\n\n      final Set<QueuedRequestWithState> removedForCurrentInFlightRequest = queuedRequests.stream()\n          .filter((q) -> inProgressServices.contains(q.getQueuedRequestId().getServiceId()) && !inFlightRequests.contains(q))\n          .collect(Collectors.toSet());\n      if (!inFlightRequests.isEmpty()) {\n        LOG.info(\"Skipping new updates for services {} due to current in-flight updates\", String.join(\",\", inProgressServices));\n      }\n      queuedRequests.removeAll(removedForCurrentInFlightRequest);\n\n      // First process results for any requests that were already in-flight\n      LOG.debug(\"Processing {} BaragonRequests which are already in-flight\", inFlightRequests.size());\n      handleResultStates(handleQueuedRequests(inFlightRequests));\n      queuedRequests.removeAll(inFlightRequests);\n\n      int added = inFlightRequests.size();\n\n      while (added < configuration.getWorkerConfiguration().getMaxRequestsPerPoll() && !queuedRequests.isEmpty()) {\n        ArrayList<QueuedRequestWithState> nonServiceChanges = new ArrayList<>();\n        ArrayList<QueuedRequestWithState> serviceChanges = new ArrayList<>();\n\n        // Build the batches of requests to be sent to agents\n        collectRequests(added, queuedRequests, nonServiceChanges, serviceChanges);\n\n        // Now take the list of non-service-change requests,\n        // and sort them such that the quicker noValidate / noReload requests come first.\n        List<QueuedRequestWithState> hydratedNonServiceChanges = nonServiceChanges.stream()\n            .filter((q) -> {\n              // Filter here as well since the Set has changed by the second run of the while loop\n              if (inProgressServices.contains(q.getQueuedRequestId().getServiceId())) {\n                LOG.info(\"Skipping {} because {} already has an in progress request\", q.getQueuedRequestId().getRequestId(), q.getQueuedRequestId().getServiceId());\n                return false;\n              }\n              return true;\n            })\n            .map(someRequest -> new MaybeAdjustedRequest(someRequest, false))\n            .map(this::setNoValidateIfRequestRemovesUpstreamsOnly)\n            .map(this::preResolveDNS)\n            .map(this::saveAdjustedRequest)\n            .sorted(queuedRequestComparator())\n            .collect(Collectors.toList());\n\n        added += hydratedNonServiceChanges.size();\n\n        // Then send them off.\n        LOG.debug(\"Processing {} BaragonRequests which don't modify a BaragonService\", nonServiceChanges.size());\n        handleResultStates(handleQueuedRequests(hydratedNonServiceChanges));\n\n        queuedRequests.removeAll(nonServiceChanges);\n        inProgressServices.addAll(hydratedNonServiceChanges.stream().map((q) -> q.getQueuedRequestId().getServiceId()).collect(Collectors.toSet()));\n\n        // Now send off the service change requests, after filtering for services already in flight\n        List<QueuedRequestWithState> hydratedServiceChanges = serviceChanges.stream()\n            .filter((q) -> {\n              if (inProgressServices.contains(q.getQueuedRequestId().getServiceId())) {\n                LOG.info(\"Skipping {} because {} already has an in progress request\", q.getQueuedRequestId().getRequestId(), q.getQueuedRequestId().getServiceId());\n                return false;\n              }\n              return true;\n            })\n            .sorted(queuedRequestComparator())\n            .collect(Collectors.toList());\n\n        added += hydratedServiceChanges.size();\n\n        LOG.debug(\"Processing {} BaragonRequests which modify a BaragonService\", serviceChanges.size());\n        handleResultStates(handleQueuedRequests(hydratedServiceChanges));\n\n        queuedRequests.removeAll(serviceChanges);\n        inProgressServices.addAll(hydratedServiceChanges.stream().map((q) -> q.getQueuedRequestId().getServiceId()).collect(Collectors.toSet()));\n\n        // ...and repeat until we've processed up to the limit of requests\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Caught exception\", e);\n      exceptionNotifier.notify(e, Collections.emptyMap());\n    } finally {\n      LOG.debug(\"Finished poller loop.\");\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "BaragonRequestWorker.run()", "testcase": false, "constructor": false, "invocations": ["set", "currentTimeMillis", "collect", "map", "filter", "map", "stream", "getQueuedRequestIds", "toList", "collect", "filter", "stream", "isInFlight", "getCurrentState", "hasInProgressAttempt", "toList", "collect", "map", "stream", "getServiceId", "getQueuedRequestId", "toSet", "collect", "filter", "stream", "contains", "getServiceId", "getQueuedRequestId", "contains", "toSet", "isEmpty", "info", "join", "removeAll", "debug", "size", "handleResultStates", "handleQueuedRequests", "removeAll", "size", "getMaxRequestsPerPoll", "getWorkerConfiguration", "isEmpty", "collectRequests", "collect", "sorted", "map", "map", "map", "map", "filter", "stream", "contains", "getServiceId", "getQueuedRequestId", "info", "getRequestId", "getQueuedRequestId", "getServiceId", "getQueuedRequestId", "queuedRequestComparator", "toList", "size", "debug", "size", "handleResultStates", "handleQueuedRequests", "removeAll", "addAll", "collect", "map", "stream", "getServiceId", "getQueuedRequestId", "toSet", "collect", "sorted", "filter", "stream", "contains", "getServiceId", "getQueuedRequestId", "info", "getRequestId", "getQueuedRequestId", "getServiceId", "getQueuedRequestId", "queuedRequestComparator", "toList", "size", "debug", "size", "handleResultStates", "handleQueuedRequests", "removeAll", "addAll", "collect", "map", "stream", "getServiceId", "getQueuedRequestId", "toSet", "warn", "notify", "emptyMap", "debug"]}, "repository": {"repo_id": 14145875, "url": "https://github.com/HubSpot/Baragon", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 101, "size": 9251, "license": "licensed"}}