{"test_class": {"identifier": "DASpecificationTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecificationTest.java"}, "test_case": {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode() throws Exception {\n        setRevisionTo(\"5f63267261584a513dd8a9b7960687cc3dda910a\");\n        ServiceTemplateId id = new ServiceTemplateId(\"http://winery.opentosca.org/test/servicetemplates/ponyuniverse/daspecifier\", \"DASpecificationTest\", false);\n        TTopologyTemplate topologyTemplate = this.repository.getElement(id).getTopologyTemplate();\n\n        TNodeTemplate nodeTemplateWithAbstractDA = topologyTemplate.getNodeTemplate(\"shetland_pony\");\n        TDeploymentArtifact deploymentArtifact = nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().get(0);\n        TNodeTemplate nodeTemplateConcretDA1 = topologyTemplate.getNodeTemplate(\"dressageequipment\");\n        TRelationshipTemplate relationshipTemplate1 = topologyTemplate.getRelationshipTemplate(\"con_42\");\n        TNodeTemplate nodeTemplateConcretDA2 = topologyTemplate.getNodeTemplate(\"westernequipment\");\n        TRelationshipTemplate relationshipTemplate2 = topologyTemplate.getRelationshipTemplate(\"con_54\");\n\n        Map<TRelationshipTemplate, TNodeTemplate> concreteDAsAndConnectedNodes = new HashMap<>();\n        concreteDAsAndConnectedNodes.put(relationshipTemplate1, nodeTemplateConcretDA1);\n        concreteDAsAndConnectedNodes.put(relationshipTemplate2, nodeTemplateConcretDA2);\n\n        Map<TRelationshipTemplate, TNodeTemplate> actualNodeWithConcreteDA =\n            DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(nodeTemplateWithAbstractDA, deploymentArtifact, topologyTemplate);\n\n        assertEquals(concreteDAsAndConnectedNodes, actualNodeWithConcreteDA);\n    }", "signature": "void getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode()", "full_signature": "@Test public void getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode()", "class_method_signature": "DASpecificationTest.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "getNodeTemplate", "get", "getDeploymentArtifact", "getDeploymentArtifacts", "getNodeTemplate", "getRelationshipTemplate", "getNodeTemplate", "getRelationshipTemplate", "put", "put", "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "assertEquals"]}, "focal_class": {"identifier": "DASpecification", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "full_signature": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeOfDA", "parameters": "(TDeploymentArtifact deploymentArtifact)", "modifiers": "public static", "return": "TArtifactType", "signature": "TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "full_signature": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "class_method_signature": "DASpecification.getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeHierarchy", "parameters": "(TArtifactType artifactType)", "modifiers": "public static", "return": "List<TArtifactType>", "signature": "List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "full_signature": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "class_method_signature": "DASpecification.getArtifactTypeHierarchy(TArtifactType artifactType)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "Map<TRelationshipTemplate, TNodeTemplate>", "signature": "Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAs", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getSuitableConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "full_signature": "public static TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "class_method_signature": "DASpecification.getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getmatchingNodeTypeImplementations", "parameters": "(QName nodeTypeQName)", "modifiers": "private static", "return": "List<TNodeTypeImplementation>", "signature": "List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "full_signature": "private static List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "class_method_signature": "DASpecification.getmatchingNodeTypeImplementations(QName nodeTypeQName)", "testcase": false, "constructor": false}, {"identifier": "getConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "modifiers": "private static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "full_signature": "private static TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "class_method_signature": "DASpecification.getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "testcase": false, "constructor": false}, {"identifier": "getBasisRelationshipType", "parameters": "(QName relationshipTypeQName)", "modifiers": "private static", "return": "TRelationshipType", "signature": "TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "full_signature": "private static TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "class_method_signature": "DASpecification.getBasisRelationshipType(QName relationshipTypeQName)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecification.java"}, "focal_method": {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "Map<TRelationshipTemplate, TNodeTemplate>", "body": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode\n    (TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate) {\n\n        // key is the node template the nodeTemplate is directly connected to this is the indicator from which connection the concrete DA is coming from\n        // value is the node template which has a concrete DA attached to substiute the abstract DA of the nodeTemplate\n        Map<TRelationshipTemplate, TNodeTemplate> nodeTemplateWithConcreteDAAndDirectlyConnectedNode = new HashMap<>();\n        List<TRelationshipTemplate> outgoingRelationshipTemplates = ModelUtilities.getOutgoingRelationshipTemplates(topologyTemplate, nodeTemplate);\n\n        //concrete DAs could be find in the hostedOn stack or the connected stacks, but just in directly connected stacks\n        for (TRelationshipTemplate outgoingRelationship : outgoingRelationshipTemplates) {\n            TNodeTemplate targetNodeTemplate = ModelUtilities.getTargetNodeTemplateOfRelationshipTemplate(topologyTemplate, outgoingRelationship);\n            //In each directly connected stack a node with matching concrete DA is looked up\n            TNodeTemplate nodesWithSuitableDA = getNodesWithSuitableConcreteDAs(targetNodeTemplate, deploymentArtifact, topologyTemplate);\n            if (nodesWithSuitableDA != null) {\n                nodeTemplateWithConcreteDAAndDirectlyConnectedNode.put(outgoingRelationship, nodesWithSuitableDA);\n            }\n        }\n        return nodeTemplateWithConcreteDAAndDirectlyConnectedNode;\n    }", "signature": "Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false, "invocations": ["getOutgoingRelationshipTemplates", "getTargetNodeTemplateOfRelationshipTemplate", "getNodesWithSuitableConcreteDAs", "put"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}