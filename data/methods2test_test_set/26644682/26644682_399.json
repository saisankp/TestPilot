{"test_class": {"identifier": "CSVFastHeaderAndTypeAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public LocalizationRule rule = new LocalizationRule(Locale.US);", "modifier": "@Rule\n    public", "type": "LocalizationRule", "declarator": "rule = new LocalizationRule(Locale.US)", "var_name": "rule"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/csv/CSVFastHeaderAndTypeAnalyzerTest.java"}, "test_case": {"identifier": "should_strip_quotes_in_header", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_strip_quotes_in_header() {\n        // given\n        List<String> list = Arrays.asList(\"\\\"user_id\\\";\\\"birth\\\";\\\"country\\\";page_visited;first_item\",\n                \"4dc1548af;11/9/1970;France;6.0;22.0\");\n        Separator separator = new Separator(';');\n        separator.incrementCount(1);\n\n        // when\n        CSVFastHeaderAndTypeAnalyzer analysis = new CSVFastHeaderAndTypeAnalyzer(list, separator);\n\n        // then\n        List<String> expectedHeaders = Arrays.asList(\"user_id\", \"birth\", \"country\", \"page_visited\", \"first_item\");\n        Assert.assertArrayEquals(expectedHeaders.toArray(),\n                analysis.getHeaders().stream().map(p -> p.getKey()).toArray());\n    }", "signature": "void should_strip_quotes_in_header()", "full_signature": "@Test public void should_strip_quotes_in_header()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzerTest.should_strip_quotes_in_header()", "testcase": true, "constructor": false, "invocations": ["asList", "incrementCount", "asList", "assertArrayEquals", "toArray", "toArray", "map", "stream", "getHeaders", "getKey"]}, "focal_class": {"identifier": "CSVFastHeaderAndTypeAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CSVFastHeaderAndTypeAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CSVFastHeaderAndTypeAnalyzer.class)", "var_name": "LOGGER"}, {"original_string": "private static final int ABSENT = -4;", "modifier": "private static final", "type": "int", "declarator": "ABSENT = -4", "var_name": "ABSENT"}, {"original_string": "private static final int DECIMAL = -3;", "modifier": "private static final", "type": "int", "declarator": "DECIMAL = -3", "var_name": "DECIMAL"}, {"original_string": "private static final int INTEGER = -2;", "modifier": "private static final", "type": "int", "declarator": "INTEGER = -2", "var_name": "INTEGER"}, {"original_string": "private static final int BOOLEAN = -1;", "modifier": "private static final", "type": "int", "declarator": "BOOLEAN = -1", "var_name": "BOOLEAN"}, {"original_string": "private static final int EMPTY = 0;", "modifier": "private static final", "type": "int", "declarator": "EMPTY = 0", "var_name": "EMPTY"}, {"original_string": "private final List<String> sampleLines;", "modifier": "private final", "type": "List<String>", "declarator": "sampleLines", "var_name": "sampleLines"}, {"original_string": "private final List<Integer>[] sampleTypes;", "modifier": "private final", "type": "List<Integer>[]", "declarator": "sampleTypes", "var_name": "sampleTypes"}, {"original_string": "private int maxFields = 0;", "modifier": "private", "type": "int", "declarator": "maxFields = 0", "var_name": "maxFields"}, {"original_string": "private final Separator separator;", "modifier": "private final", "type": "Separator", "declarator": "separator", "var_name": "separator"}, {"original_string": "private boolean analysisPerformed = false;", "modifier": "private", "type": "boolean", "declarator": "analysisPerformed = false", "var_name": "analysisPerformed"}, {"original_string": "private boolean firstLineAHeader = true;", "modifier": "private", "type": "boolean", "declarator": "firstLineAHeader = true", "var_name": "firstLineAHeader"}, {"original_string": "private boolean headerInfoReliable = false;", "modifier": "private", "type": "boolean", "declarator": "headerInfoReliable = false", "var_name": "headerInfoReliable"}, {"original_string": "private List<Pair<String, Type>> headers = Collections.emptyList();", "modifier": "private", "type": "List<Pair<String, Type>>", "declarator": "headers = Collections.emptyList()", "var_name": "headers"}], "methods": [{"identifier": "CSVFastHeaderAndTypeAnalyzer", "parameters": "(List<String> sampleLines, Separator separator)", "modifiers": "public", "return": "", "signature": " CSVFastHeaderAndTypeAnalyzer(List<String> sampleLines, Separator separator)", "full_signature": "public  CSVFastHeaderAndTypeAnalyzer(List<String> sampleLines, Separator separator)", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.CSVFastHeaderAndTypeAnalyzer(List<String> sampleLines, Separator separator)", "testcase": false, "constructor": true}, {"identifier": "setFieldTypes", "parameters": "()", "modifiers": "private", "return": "List<Integer>[]", "signature": "List<Integer>[] setFieldTypes()", "full_signature": "private List<Integer>[] setFieldTypes()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.setFieldTypes()", "testcase": false, "constructor": false}, {"identifier": "setFieldType", "parameters": "(int i)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> setFieldType(int i)", "full_signature": "private List<Integer> setFieldType(int i)", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.setFieldType(int i)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(String line)", "modifiers": "private", "return": "List<String>", "signature": "List<String> readLine(String line)", "full_signature": "private List<String> readLine(String line)", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.readLine(String line)", "testcase": false, "constructor": false}, {"identifier": "columnTyping", "parameters": "(int start, int end)", "modifiers": "private", "return": "List<Type>", "signature": "List<Type> columnTyping(int start, int end)", "full_signature": "private List<Type> columnTyping(int start, int end)", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.columnTyping(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "firstRecordTyping", "parameters": "()", "modifiers": "private", "return": "List<Type>", "signature": "List<Type> firstRecordTyping()", "full_signature": "private List<Type> firstRecordTyping()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.firstRecordTyping()", "testcase": false, "constructor": false}, {"identifier": "columnTypingWithoutFirstRecord", "parameters": "()", "modifiers": "private", "return": "List<Type>", "signature": "List<Type> columnTypingWithoutFirstRecord()", "full_signature": "private List<Type> columnTypingWithoutFirstRecord()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.columnTypingWithoutFirstRecord()", "testcase": false, "constructor": false}, {"identifier": "allRecordsColumnTyping", "parameters": "()", "modifiers": "private", "return": "List<Type>", "signature": "List<Type> allRecordsColumnTyping()", "full_signature": "private List<Type> allRecordsColumnTyping()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.allRecordsColumnTyping()", "testcase": false, "constructor": false}, {"identifier": "allStringTypes", "parameters": "(List<Type> types)", "modifiers": "private", "return": "boolean", "signature": "boolean allStringTypes(List<Type> types)", "full_signature": "private boolean allStringTypes(List<Type> types)", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.allStringTypes(List<Type> types)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void analyze()", "full_signature": "public void analyze()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.analyze()", "testcase": false, "constructor": false}, {"identifier": "isFirstLineAHeader", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstLineAHeader()", "full_signature": "public boolean isFirstLineAHeader()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.isFirstLineAHeader()", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "public", "return": "List<Pair<String, Type>>", "signature": "List<Pair<String, Type>> getHeaders()", "full_signature": "public List<Pair<String, Type>> getHeaders()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "isHeaderInfoReliable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHeaderInfoReliable()", "full_signature": "public boolean isHeaderInfoReliable()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.isHeaderInfoReliable()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/csv/CSVFastHeaderAndTypeAnalyzer.java"}, "focal_method": {"identifier": "getHeaders", "parameters": "()", "modifiers": "public", "return": "List<Pair<String, Type>>", "body": "public List<Pair<String, Type>> getHeaders() {\n        if (!analysisPerformed) {\n            analyze();\n        }\n        return headers;\n    }", "signature": "List<Pair<String, Type>> getHeaders()", "full_signature": "public List<Pair<String, Type>> getHeaders()", "class_method_signature": "CSVFastHeaderAndTypeAnalyzer.getHeaders()", "testcase": false, "constructor": false, "invocations": ["analyze"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}