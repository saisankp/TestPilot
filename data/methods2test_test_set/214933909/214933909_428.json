{"test_class": {"identifier": "LoginUserDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    LoginUserDao loginUserDao;", "modifier": "@Autowired", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "LoginUser loginUser;", "modifier": "", "type": "LoginUser", "declarator": "loginUser", "var_name": "loginUser"}, {"original_string": "Paging<LoginUser> paging;", "modifier": "", "type": "Paging<LoginUser>", "declarator": "paging", "var_name": "paging"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/dao/LoginUserDaoTest.java"}, "test_case": {"identifier": "findUserPageList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findUserPageList() throws Exception {\n        List<LoginUserView> list = loginUserDao.findUserPageList(paging);\n        System.out.println(\"findUserPageList :-------> \" + list);\n        Assert.assertTrue(list.size() > 0);\n    }", "signature": "void findUserPageList()", "full_signature": "@Test public void findUserPageList()", "class_method_signature": "LoginUserDaoTest.findUserPageList()", "testcase": true, "constructor": false, "invocations": ["findUserPageList", "println", "assertTrue", "size"]}, "focal_class": {"identifier": "LoginUserDao", "superclass": "extends BaseDao", "interfaces": "", "fields": [], "methods": [{"identifier": "insertUser", "parameters": "(LoginUser user)", "modifiers": "public", "return": "Long", "signature": "Long insertUser(LoginUser user)", "full_signature": "public Long insertUser(LoginUser user)", "class_method_signature": "LoginUserDao.insertUser(LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "initAdmin", "parameters": "(LoginUser user)", "modifiers": "public", "return": "int", "signature": "int initAdmin(LoginUser user)", "full_signature": "public int initAdmin(LoginUser user)", "class_method_signature": "LoginUserDao.initAdmin(LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "updateUserPassword", "parameters": "(LoginUser user)", "modifiers": "public", "return": "int", "signature": "int updateUserPassword(LoginUser user)", "full_signature": "public int updateUserPassword(LoginUser user)", "class_method_signature": "LoginUserDao.updateUserPassword(LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "getAllUsers", "parameters": "()", "modifiers": "public", "return": "List<LoginUser>", "signature": "List<LoginUser> getAllUsers()", "full_signature": "public List<LoginUser> getAllUsers()", "class_method_signature": "LoginUserDao.getAllUsers()", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(Long userId)", "modifiers": "public", "return": "LoginUser", "signature": "LoginUser getUserById(Long userId)", "full_signature": "public LoginUser getUserById(Long userId)", "class_method_signature": "LoginUserDao.getUserById(Long userId)", "testcase": false, "constructor": false}, {"identifier": "getUserByNo", "parameters": "(String userNo)", "modifiers": "public", "return": "LoginUser", "signature": "LoginUser getUserByNo(String userNo)", "full_signature": "public LoginUser getUserByNo(String userNo)", "class_method_signature": "LoginUserDao.getUserByNo(String userNo)", "testcase": false, "constructor": false}, {"identifier": "getUserByUserName", "parameters": "(String userName)", "modifiers": "public", "return": "LoginUser", "signature": "LoginUser getUserByUserName(String userName)", "full_signature": "public LoginUser getUserByUserName(String userName)", "class_method_signature": "LoginUserDao.getUserByUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getUserByGroupId", "parameters": "(Long groupId)", "modifiers": "public", "return": "List<LoginUsersView>", "signature": "List<LoginUsersView> getUserByGroupId(Long groupId)", "full_signature": "public List<LoginUsersView> getUserByGroupId(Long groupId)", "class_method_signature": "LoginUserDao.getUserByGroupId(Long groupId)", "testcase": false, "constructor": false}, {"identifier": "updateUser", "parameters": "(LoginUser user)", "modifiers": "public", "return": "int", "signature": "int updateUser(LoginUser user)", "full_signature": "public int updateUser(LoginUser user)", "class_method_signature": "LoginUserDao.updateUser(LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(Long userId)", "modifiers": "public", "return": "int", "signature": "int deleteUser(Long userId)", "full_signature": "public int deleteUser(Long userId)", "class_method_signature": "LoginUserDao.deleteUser(Long userId)", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "(Paging<LoginUser> paging)", "modifiers": "public", "return": "Long", "signature": "Long getTotalCount(Paging<LoginUser> paging)", "full_signature": "public Long getTotalCount(Paging<LoginUser> paging)", "class_method_signature": "LoginUserDao.getTotalCount(Paging<LoginUser> paging)", "testcase": false, "constructor": false}, {"identifier": "findUserPageList", "parameters": "(Paging<LoginUser> paging)", "modifiers": "public", "return": "List<LoginUserView>", "signature": "List<LoginUserView> findUserPageList(Paging<LoginUser> paging)", "full_signature": "public List<LoginUserView> findUserPageList(Paging<LoginUser> paging)", "class_method_signature": "LoginUserDao.findUserPageList(Paging<LoginUser> paging)", "testcase": false, "constructor": false}, {"identifier": "appenWhere", "parameters": "(Paging<LoginUser> paging)", "modifiers": "private", "return": "String", "signature": "String appenWhere(Paging<LoginUser> paging)", "full_signature": "private String appenWhere(Paging<LoginUser> paging)", "class_method_signature": "LoginUserDao.appenWhere(Paging<LoginUser> paging)", "testcase": false, "constructor": false}, {"identifier": "appenCondition", "parameters": "(Paging<LoginUser> paging)", "modifiers": "private", "return": "String", "signature": "String appenCondition(Paging<LoginUser> paging)", "full_signature": "private String appenCondition(Paging<LoginUser> paging)", "class_method_signature": "LoginUserDao.appenCondition(Paging<LoginUser> paging)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/dao/LoginUserDao.java"}, "focal_method": {"identifier": "findUserPageList", "parameters": "(Paging<LoginUser> paging)", "modifiers": "public", "return": "List<LoginUserView>", "body": "public List<LoginUserView> findUserPageList(Paging<LoginUser> paging) throws SQLException {\n        String sql = \"SELECT t1.id, t1.user_no, t1.user_name, t1.user_email, t1.user_real_name , t2.user_real_name as update_user_name, t4.group_name FROM login_users t1 \" +\n                \"left join login_users t2 on t1.update_user_no = t2.user_no \" +\n                \"left join user_group t3 on t3.user_id = t1.id \" +\n                \"left join dal_group t4 on t3.group_id= t4.id \" + appenCondition(paging);\n        return this.queryBySql(sql, LoginUserView.class);\n    }", "signature": "List<LoginUserView> findUserPageList(Paging<LoginUser> paging)", "full_signature": "public List<LoginUserView> findUserPageList(Paging<LoginUser> paging)", "class_method_signature": "LoginUserDao.findUserPageList(Paging<LoginUser> paging)", "testcase": false, "constructor": false, "invocations": ["appenCondition", "queryBySql"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}