{"test_class": {"identifier": "AutocorrelationTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/stats/AutocorrelationTest.java"}, "test_case": {"identifier": "testACF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testACF() throws Exception {\n        int n = 1000;\n        double[] test_input = new double[n];\n        for (int i = 0; i < n; i ++) {\n            if (i % 2 == 0) {\n                test_input[i] = 1;\n            } else {\n                test_input[i] = -1;\n            }\n        }\n        List<Datum> data = new ArrayList<>();\n        for (int i = 0; i < n; i ++) {\n            double[] value = new double[1];\n            value[0] = test_input[i];\n            Datum d = new Datum(new ArrayList<>(), new ArrayRealVector(value));\n            data.add(d);\n        }\n\n        Autocorrelation acf = new Autocorrelation(10, 0);\n        acf.evaluate(data);\n        double[] expected_return = {0, -0.999, 0.998, -0.997, 0.996, -0.995, 0.994, -0.993, 0.992, -0.991};\n        assertArrayEquals(expected_return, acf.correlations, 1e-5);\n    }", "signature": "void testACF()", "full_signature": "@Test public void testACF()", "class_method_signature": "AutocorrelationTest.testACF()", "testcase": true, "constructor": false, "invocations": ["add", "evaluate", "assertArrayEquals"]}, "focal_class": {"identifier": "Autocorrelation", "superclass": "", "interfaces": "", "fields": [{"original_string": "public double[] correlations;", "modifier": "public", "type": "double[]", "declarator": "correlations", "var_name": "correlations"}, {"original_string": "public double maxACF = 0;", "modifier": "public", "type": "double", "declarator": "maxACF = 0", "var_name": "maxACF"}, {"original_string": "private FastFourierTransformer fftTran = new FastFourierTransformer(DftNormalization.STANDARD);", "modifier": "private", "type": "FastFourierTransformer", "declarator": "fftTran = new FastFourierTransformer(DftNormalization.STANDARD)", "var_name": "fftTran"}, {"original_string": "private double ACF_THRESH = 0.2;", "modifier": "private", "type": "double", "declarator": "ACF_THRESH = 0.2", "var_name": "ACF_THRESH"}, {"original_string": "private int metricIdx = 1;", "modifier": "private", "type": "int", "declarator": "metricIdx = 1", "var_name": "metricIdx"}, {"original_string": "private int maxLag;", "modifier": "private", "type": "int", "declarator": "maxLag", "var_name": "maxLag"}], "methods": [{"identifier": "Autocorrelation", "parameters": "(int maxLag, int metricIdx)", "modifiers": "public", "return": "", "signature": " Autocorrelation(int maxLag, int metricIdx)", "full_signature": "public  Autocorrelation(int maxLag, int metricIdx)", "class_method_signature": "Autocorrelation.Autocorrelation(int maxLag, int metricIdx)", "testcase": false, "constructor": true}, {"identifier": "setMaxLag", "parameters": "(int lag)", "modifiers": "public", "return": "void", "signature": "void setMaxLag(int lag)", "full_signature": "public void setMaxLag(int lag)", "class_method_signature": "Autocorrelation.setMaxLag(int lag)", "testcase": false, "constructor": false}, {"identifier": "setCorrelationThreshold", "parameters": "(double thresh)", "modifiers": "public", "return": "void", "signature": "void setCorrelationThreshold(double thresh)", "full_signature": "public void setCorrelationThreshold(double thresh)", "class_method_signature": "Autocorrelation.setCorrelationThreshold(double thresh)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(double[] metrics)", "modifiers": "private", "return": "double", "signature": "double mean(double[] metrics)", "full_signature": "private double mean(double[] metrics)", "class_method_signature": "Autocorrelation.mean(double[] metrics)", "testcase": false, "constructor": false}, {"identifier": "stripDatum", "parameters": "(List<Datum> datum)", "modifiers": "private", "return": "double[]", "signature": "double[] stripDatum(List<Datum> datum)", "full_signature": "private double[] stripDatum(List<Datum> datum)", "class_method_signature": "Autocorrelation.stripDatum(List<Datum> datum)", "testcase": false, "constructor": false}, {"identifier": "formatData", "parameters": "(List<Datum> data)", "modifiers": "private", "return": "double[]", "signature": "double[] formatData(List<Datum> data)", "full_signature": "private double[] formatData(List<Datum> data)", "class_method_signature": "Autocorrelation.formatData(List<Datum> data)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "void", "signature": "void evaluate(List<Datum> data)", "full_signature": "public void evaluate(List<Datum> data)", "class_method_signature": "Autocorrelation.evaluate(List<Datum> data)", "testcase": false, "constructor": false}, {"identifier": "findPeaks", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> findPeaks()", "full_signature": "public List<Integer> findPeaks()", "class_method_signature": "Autocorrelation.findPeaks()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/stats/Autocorrelation.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "void", "body": "public void evaluate(List<Datum> data) {\n        double[] values = formatData(data);\n        // FFT\n        Complex[] fft = fftTran.transform(values, TransformType.FORWARD);\n        // Multiply by complex conjugate\n        for (int i = 0; i < fft.length; i ++) {\n            fft[i] = fft[i].multiply(fft[i].conjugate());\n        }\n        // Inverse transform\n        fft = fftTran.transform(fft, TransformType.INVERSE);\n\n        correlations = new double[maxLag];\n        for (int i = 1; i < maxLag; i++) {\n            correlations[i] = fft[i].getReal() / fft[0].getReal();\n        }\n    }", "signature": "void evaluate(List<Datum> data)", "full_signature": "public void evaluate(List<Datum> data)", "class_method_signature": "Autocorrelation.evaluate(List<Datum> data)", "testcase": false, "constructor": false, "invocations": ["formatData", "transform", "multiply", "conjugate", "transform", "getReal", "getReal"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}