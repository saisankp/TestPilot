{"test_class": {"identifier": "StatsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StatsService statsService;", "modifier": "private", "type": "StatsService", "declarator": "statsService", "var_name": "statsService"}, {"original_string": "@Mock private FeatureStatisticsRepository featureStatisticsRepository;", "modifier": "@Mock private", "type": "FeatureStatisticsRepository", "declarator": "featureStatisticsRepository", "var_name": "featureStatisticsRepository"}, {"original_string": "@Mock private StoreRepository storeRepository;", "modifier": "@Mock private", "type": "StoreRepository", "declarator": "storeRepository", "var_name": "storeRepository"}, {"original_string": "@Mock private FeatureSetRepository featureSetRepository;", "modifier": "@Mock private", "type": "FeatureSetRepository", "declarator": "featureSetRepository", "var_name": "featureSetRepository"}, {"original_string": "@Rule public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/feast/core/service/StatsServiceTest.java"}, "test_case": {"identifier": "shouldThrowExceptionIfInvalidDatesProvided", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowExceptionIfInvalidDatesProvided() throws IOException {\n    GetFeatureStatisticsRequest request =\n        GetFeatureStatisticsRequest.newBuilder()\n            .setStartDate(Timestamp.newBuilder().setSeconds(1))\n            .setEndDate(Timestamp.newBuilder().setSeconds(0))\n            .build();\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\n        \"Invalid request. Start timestamp 1 is greater than the end timestamp 0\");\n    statsService.getFeatureStatistics(request);\n  }", "signature": "void shouldThrowExceptionIfInvalidDatesProvided()", "full_signature": "@Test public void shouldThrowExceptionIfInvalidDatesProvided()", "class_method_signature": "StatsServiceTest.shouldThrowExceptionIfInvalidDatesProvided()", "testcase": true, "constructor": false, "invocations": ["build", "setEndDate", "setStartDate", "newBuilder", "setSeconds", "newBuilder", "setSeconds", "newBuilder", "expect", "expectMessage", "getFeatureStatistics"]}, "focal_class": {"identifier": "StatsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StoreRepository storeRepository;", "modifier": "private", "type": "StoreRepository", "declarator": "storeRepository", "var_name": "storeRepository"}, {"original_string": "private FeatureStatisticsRepository featureStatisticsRepository;", "modifier": "private", "type": "FeatureStatisticsRepository", "declarator": "featureStatisticsRepository", "var_name": "featureStatisticsRepository"}, {"original_string": "private FeatureSetRepository featureSetRepository;", "modifier": "private", "type": "FeatureSetRepository", "declarator": "featureSetRepository", "var_name": "featureSetRepository"}], "methods": [{"identifier": "StatsService", "parameters": "(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "modifiers": "@Autowired public", "return": "", "signature": " StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "full_signature": "@Autowired public  StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "class_method_signature": "StatsService.StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "testcase": false, "constructor": true}, {"identifier": "getFeatureStatistics", "parameters": "(GetFeatureStatisticsRequest request)", "modifiers": "@Transactional public", "return": "GetFeatureStatisticsResponse", "signature": "GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "full_signature": "@Transactional public GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "class_method_signature": "StatsService.getFeatureStatistics(GetFeatureStatisticsRequest request)", "testcase": false, "constructor": false}, {"identifier": "getFeatureNameStatisticsByDataset", "parameters": "(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "modifiers": "private", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "full_signature": "private List<FeatureNameStatistics> getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "class_method_signature": "StatsService.getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "testcase": false, "constructor": false}, {"identifier": "getFeatureNameStatisticsByDate", "parameters": "(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "modifiers": "private", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "full_signature": "private List<FeatureNameStatistics> getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "class_method_signature": "StatsService.getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsRetriever", "parameters": "(String storeName)", "modifiers": "", "return": "StatisticsRetriever", "signature": "StatisticsRetriever getStatisticsRetriever(String storeName)", "full_signature": " StatisticsRetriever getStatisticsRetriever(String storeName)", "class_method_signature": "StatsService.getStatisticsRetriever(String storeName)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSet", "parameters": "(String featureSetId)", "modifiers": "private", "return": "FeatureSet", "signature": "FeatureSet getFeatureSet(String featureSetId)", "full_signature": "private FeatureSet getFeatureSet(String featureSetId)", "class_method_signature": "StatsService.getFeatureSet(String featureSetId)", "testcase": false, "constructor": false}, {"identifier": "mergeStatistics", "parameters": "(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "modifiers": "@VisibleForTesting public", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "full_signature": "@VisibleForTesting public List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "class_method_signature": "StatsService.mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "testcase": false, "constructor": false}, {"identifier": "mergeStructStats", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "mergeNumStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "getVar", "parameters": "(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "modifiers": "private", "return": "double", "signature": "double getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "full_signature": "private double getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "class_method_signature": "StatsService.getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "testcase": false, "constructor": false}, {"identifier": "mergeCategoricalStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "mergeByteStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "(FeatureNameStatistics featureNameStatistics)", "modifiers": "private", "return": "long", "signature": "long getTotalCount(FeatureNameStatistics featureNameStatistics)", "full_signature": "private long getTotalCount(FeatureNameStatistics featureNameStatistics)", "class_method_signature": "StatsService.getTotalCount(FeatureNameStatistics featureNameStatistics)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(GetFeatureStatisticsRequest request)", "modifiers": "private", "return": "void", "signature": "void validateRequest(GetFeatureStatisticsRequest request)", "full_signature": "private void validateRequest(GetFeatureStatisticsRequest request)", "class_method_signature": "StatsService.validateRequest(GetFeatureStatisticsRequest request)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(FeatureNameStatistics featureNameStatistics)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(FeatureNameStatistics featureNameStatistics)", "full_signature": "private boolean isEmpty(FeatureNameStatistics featureNameStatistics)", "class_method_signature": "StatsService.isEmpty(FeatureNameStatistics featureNameStatistics)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/service/StatsService.java"}, "focal_method": {"identifier": "getFeatureStatistics", "parameters": "(GetFeatureStatisticsRequest request)", "modifiers": "@Transactional public", "return": "GetFeatureStatisticsResponse", "body": "@Transactional\n  public GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)\n      throws IOException {\n\n    // Validate the request\n    validateRequest(request);\n\n    // Get the stats retriever for the store requested\n    StatisticsRetriever statisticsRetriever = getStatisticsRetriever(request.getStore());\n\n    // 1. Retrieve the feature set spec from the db\n    FeatureSet featureSet = getFeatureSet(request.getFeatureSetId());\n    if (featureSet == null) {\n      throw new IllegalArgumentException(\n          String.format(\n              \"Illegal request. Unable to find feature set %s\", request.getFeatureSetId()));\n    }\n\n    // 2. Filter out the features requested by the user. If none are provided,\n    // use all features in the feature set.\n    List<String> features = request.getFeaturesList();\n    if (features.size() == 0) {\n      features =\n          featureSet.getFeatures().stream()\n              .filter(feature -> !feature.isArchived())\n              .map(Feature::getName)\n              .collect(Collectors.toList());\n    }\n\n    // 3. Retrieve the statistics from the StatsRetriever.\n    List<List<FeatureNameStatistics>> featureNameStatisticsList = new ArrayList<>();\n    if (request.getIngestionIdsCount() == 0) {\n      Timestamp endDate = request.getEndDate();\n      Timestamp startDate = request.getStartDate();\n      // If no dataset provided, retrieve by date\n\n      long timestamp = startDate.getSeconds();\n      while (timestamp < endDate.getSeconds()) {\n        List<FeatureNameStatistics> featureNameStatistics =\n            getFeatureNameStatisticsByDate(\n                statisticsRetriever, featureSet, features, timestamp, request.getForceRefresh());\n        if (featureNameStatistics.size() != 0) {\n          featureNameStatisticsList.add(featureNameStatistics);\n        }\n        timestamp += 86400; // advance by a day\n      }\n      if (featureNameStatisticsList.size() == 0) {\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n        DateTime startDateTime = new DateTime(startDate.getSeconds() * 1000, DateTimeZone.UTC);\n        DateTime endDateTime = new DateTime(endDate.getSeconds() * 1000, DateTimeZone.UTC);\n        throw new RetrievalException(\n            String.format(\n                \"Unable to find any data over provided dates [%s, %s)\",\n                fmt.print(startDateTime), fmt.print(endDateTime)));\n      }\n    } else {\n      // else, retrieve by dataset\n      for (String datasetId : request.getIngestionIdsList()) {\n        List<FeatureNameStatistics> featureNameStatistics =\n            getFeatureNameStatisticsByDataset(\n                statisticsRetriever, featureSet, features, datasetId, request.getForceRefresh());\n        if (featureNameStatistics.size() != 0) {\n          featureNameStatisticsList.add(featureNameStatistics);\n        }\n      }\n      if (featureNameStatisticsList.size() == 0) {\n        throw new RetrievalException(\n            String.format(\n                \"Unable to find any data over provided data sets %s\",\n                request.getIngestionIdsList()));\n      }\n    }\n\n    // Merge statistics values across days/datasets\n    List<FeatureNameStatistics> featureNameStatistics = mergeStatistics(featureNameStatisticsList);\n    long totalCount = getTotalCount(featureNameStatistics.get(0));\n    return GetFeatureStatisticsResponse.newBuilder()\n        .setDatasetFeatureStatisticsList(\n            DatasetFeatureStatisticsList.newBuilder()\n                .addDatasets(\n                    DatasetFeatureStatistics.newBuilder()\n                        .setNumExamples(totalCount)\n                        .addAllFeatures(featureNameStatistics)))\n        .build();\n  }", "signature": "GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "full_signature": "@Transactional public GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "class_method_signature": "StatsService.getFeatureStatistics(GetFeatureStatisticsRequest request)", "testcase": false, "constructor": false, "invocations": ["validateRequest", "getStatisticsRetriever", "getStore", "getFeatureSet", "getFeatureSetId", "format", "getFeatureSetId", "getFeaturesList", "size", "collect", "map", "filter", "stream", "getFeatures", "isArchived", "toList", "getIngestionIdsCount", "getEndDate", "getStartDate", "getSeconds", "getSeconds", "getFeatureNameStatisticsByDate", "getForceRefresh", "size", "add", "size", "forPattern", "getSeconds", "getSeconds", "format", "print", "print", "getIngestionIdsList", "getFeatureNameStatisticsByDataset", "getForceRefresh", "size", "add", "size", "format", "getIngestionIdsList", "mergeStatistics", "getTotalCount", "get", "build", "setDatasetFeatureStatisticsList", "newBuilder", "addDatasets", "newBuilder", "addAllFeatures", "setNumExamples", "newBuilder"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}