{"test_class": {"identifier": "TagTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Span span = mock(Span.class);", "modifier": "", "type": "Span", "declarator": "span = mock(Span.class)", "var_name": "span"}, {"original_string": "ScopedSpan scopedSpan = mock(ScopedSpan.class);", "modifier": "", "type": "ScopedSpan", "declarator": "scopedSpan = mock(ScopedSpan.class)", "var_name": "scopedSpan"}, {"original_string": "SpanCustomizer customizer = mock(SpanCustomizer.class);", "modifier": "", "type": "SpanCustomizer", "declarator": "customizer = mock(SpanCustomizer.class)", "var_name": "customizer"}, {"original_string": "MutableSpan mutableSpan = new MutableSpan();", "modifier": "", "type": "MutableSpan", "declarator": "mutableSpan = new MutableSpan()", "var_name": "mutableSpan"}, {"original_string": "BiFunction<Object, TraceContext, String> parseValue = mock(BiFunction.class);", "modifier": "", "type": "BiFunction<Object, TraceContext, String>", "declarator": "parseValue = mock(BiFunction.class)", "var_name": "parseValue"}, {"original_string": "Object input = new Object();", "modifier": "", "type": "Object", "declarator": "input = new Object()", "var_name": "input"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1).spanId(2).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1).spanId(2).build()", "var_name": "context"}, {"original_string": "Tag<Object> tag = new Tag<Object>(\"key\") {\n    @Override protected String parseValue(Object input, TraceContext context) {\n      return parseValue.apply(input, context);\n    }\n  };", "modifier": "", "type": "Tag<Object>", "declarator": "tag = new Tag<Object>(\"key\") {\n    @Override protected String parseValue(Object input, TraceContext context) {\n      return parseValue.apply(input, context);\n    }\n  }", "var_name": "tag"}], "file": "brave/src/test/java/brave/TagTest.java"}, "test_case": {"identifier": "tag_mutableSpan_nullContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void tag_mutableSpan_nullContext() {\n    when(parseValue.apply(eq(input), isNull())).thenReturn(\"value\");\n\n    tag.tag(input, null, mutableSpan);\n\n    verify(parseValue).apply(input, null);\n    verifyNoMoreInteractions(parseValue); // doesn't parse twice\n\n    MutableSpan expected = new MutableSpan();\n    expected.tag(\"key\", \"value\");\n    assertThat(mutableSpan).isEqualTo(expected);\n  }", "signature": "void tag_mutableSpan_nullContext()", "full_signature": "@Test public void tag_mutableSpan_nullContext()", "class_method_signature": "TagTest.tag_mutableSpan_nullContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "apply", "eq", "isNull", "tag", "apply", "verify", "verifyNoMoreInteractions", "tag", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Tag", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String key;", "modifier": "final", "type": "String", "declarator": "key", "var_name": "key"}], "methods": [{"identifier": "key", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String key()", "full_signature": "public final String key()", "class_method_signature": "Tag.key()", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(I input, @Nullable TraceContext context)", "modifiers": "@Nullable protected abstract", "return": "String", "signature": "String parseValue(I input, @Nullable TraceContext context)", "full_signature": "@Nullable protected abstract String parseValue(I input, @Nullable TraceContext context)", "class_method_signature": "Tag.parseValue(I input, @Nullable TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(@Nullable I input, @Nullable TraceContext context)", "modifiers": "@Nullable public", "return": "String", "signature": "String value(@Nullable I input, @Nullable TraceContext context)", "full_signature": "@Nullable public String value(@Nullable I input, @Nullable TraceContext context)", "class_method_signature": "Tag.value(@Nullable I input, @Nullable TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(I input)", "modifiers": "protected", "return": "String", "signature": "String key(I input)", "full_signature": "protected String key(I input)", "class_method_signature": "Tag.key(I input)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(I input, ScopedSpan span)", "modifiers": "public final", "return": "void", "signature": "void tag(I input, ScopedSpan span)", "full_signature": "public final void tag(I input, ScopedSpan span)", "class_method_signature": "Tag.tag(I input, ScopedSpan span)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(I input, Span span)", "modifiers": "public final", "return": "void", "signature": "void tag(I input, Span span)", "full_signature": "public final void tag(I input, Span span)", "class_method_signature": "Tag.tag(I input, Span span)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(I input, @Nullable TraceContext context, SpanCustomizer span)", "modifiers": "public final", "return": "void", "signature": "void tag(I input, @Nullable TraceContext context, SpanCustomizer span)", "full_signature": "public final void tag(I input, @Nullable TraceContext context, SpanCustomizer span)", "class_method_signature": "Tag.tag(I input, @Nullable TraceContext context, SpanCustomizer span)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(I input, SpanCustomizer span)", "modifiers": "public final", "return": "void", "signature": "void tag(I input, SpanCustomizer span)", "full_signature": "public final void tag(I input, SpanCustomizer span)", "class_method_signature": "Tag.tag(I input, SpanCustomizer span)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(I input, @Nullable TraceContext context, MutableSpan span)", "modifiers": "public final", "return": "void", "signature": "void tag(I input, @Nullable TraceContext context, MutableSpan span)", "full_signature": "public final void tag(I input, @Nullable TraceContext context, MutableSpan span)", "class_method_signature": "Tag.tag(I input, @Nullable TraceContext context, MutableSpan span)", "testcase": false, "constructor": false}, {"identifier": "Tag", "parameters": "(String key)", "modifiers": "protected", "return": "", "signature": " Tag(String key)", "full_signature": "protected  Tag(String key)", "class_method_signature": "Tag.Tag(String key)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Tag.toString()", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(Object span, I input, @Nullable TraceContext context)", "modifiers": "final", "return": "void", "signature": "void tag(Object span, I input, @Nullable TraceContext context)", "full_signature": "final void tag(Object span, I input, @Nullable TraceContext context)", "class_method_signature": "Tag.tag(Object span, I input, @Nullable TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "validateNonEmpty", "parameters": "(String label, String value)", "modifiers": "protected static", "return": "String", "signature": "String validateNonEmpty(String label, String value)", "full_signature": "protected static String validateNonEmpty(String label, String value)", "class_method_signature": "Tag.validateNonEmpty(String label, String value)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/Tag.java"}, "focal_method": {"identifier": "tag", "parameters": "(I input, ScopedSpan span)", "modifiers": "public final", "return": "void", "body": "public final void tag(I input, ScopedSpan span) {\n    if (input == null) throw new NullPointerException(\"input == null\");\n    if (span == null) throw new NullPointerException(\"span == null\");\n    if (span.isNoop()) return;\n    tag(span, input, span.context());\n  }", "signature": "void tag(I input, ScopedSpan span)", "full_signature": "public final void tag(I input, ScopedSpan span)", "class_method_signature": "Tag.tag(I input, ScopedSpan span)", "testcase": false, "constructor": false, "invocations": ["isNoop", "tag", "context"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}