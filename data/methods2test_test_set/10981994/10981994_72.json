{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "core/src/test/java/feign/UtilTest.java"}, "test_case": {"identifier": "emptyValueOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void emptyValueOf() throws Exception {\n    assertEquals(false, Util.emptyValueOf(boolean.class));\n    assertEquals(false, Util.emptyValueOf(Boolean.class));\n    assertThat((byte[]) Util.emptyValueOf(byte[].class)).isEmpty();\n    assertEquals(Collections.emptyList(), Util.emptyValueOf(Collection.class));\n    assertThat((Iterator<?>) Util.emptyValueOf(Iterator.class)).isEmpty();\n    assertEquals(Collections.emptyList(), Util.emptyValueOf(List.class));\n    assertEquals(Collections.emptyMap(), Util.emptyValueOf(Map.class));\n    assertEquals(Collections.emptySet(), Util.emptyValueOf(Set.class));\n    assertEquals(Optional.empty(), Util.emptyValueOf(Optional.class));\n  }", "signature": "void emptyValueOf()", "full_signature": "@Test public void emptyValueOf()", "class_method_signature": "UtilTest.emptyValueOf()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "emptyValueOf", "assertEquals", "emptyValueOf", "isEmpty", "assertThat", "emptyValueOf", "assertEquals", "emptyList", "emptyValueOf", "isEmpty", "assertThat", "emptyValueOf", "assertEquals", "emptyList", "emptyValueOf", "assertEquals", "emptyMap", "emptyValueOf", "assertEquals", "emptySet", "emptyValueOf", "assertEquals", "empty", "emptyValueOf"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_LENGTH = \"Content-Length\"", "var_name": "CONTENT_LENGTH"}, {"original_string": "public static final String CONTENT_ENCODING = \"Content-Encoding\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_ENCODING = \"Content-Encoding\"", "var_name": "CONTENT_ENCODING"}, {"original_string": "public static final String RETRY_AFTER = \"Retry-After\";", "modifier": "public static final", "type": "String", "declarator": "RETRY_AFTER = \"Retry-After\"", "var_name": "RETRY_AFTER"}, {"original_string": "public static final String ENCODING_GZIP = \"gzip\";", "modifier": "public static final", "type": "String", "declarator": "ENCODING_GZIP = \"gzip\"", "var_name": "ENCODING_GZIP"}, {"original_string": "public static final String ENCODING_DEFLATE = \"deflate\";", "modifier": "public static final", "type": "String", "declarator": "ENCODING_DEFLATE = \"deflate\"", "var_name": "ENCODING_DEFLATE"}, {"original_string": "public static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "public static final Charset ISO_8859_1 = Charset.forName(\"ISO-8859-1\");", "modifier": "public static final", "type": "Charset", "declarator": "ISO_8859_1 = Charset.forName(\"ISO-8859-1\")", "var_name": "ISO_8859_1"}, {"original_string": "private static final int BUF_SIZE = 0x800;", "modifier": "private static final", "type": "int", "declarator": "BUF_SIZE = 0x800", "var_name": "BUF_SIZE"}, {"original_string": "public static final Type MAP_STRING_WILDCARD =\n      new Types.ParameterizedTypeImpl(null, Map.class, String.class,\n          new Types.WildcardTypeImpl(new Type[] {Object.class}, new Type[0]));", "modifier": "public static final", "type": "Type", "declarator": "MAP_STRING_WILDCARD =\n      new Types.ParameterizedTypeImpl(null, Map.class, String.class,\n          new Types.WildcardTypeImpl(new Type[] {Object.class}, new Type[0]))", "var_name": "MAP_STRING_WILDCARD"}, {"original_string": "private static final Map<Class<?>, Supplier<Object>> EMPTIES;", "modifier": "private static final", "type": "Map<Class<?>, Supplier<Object>>", "declarator": "EMPTIES", "var_name": "EMPTIES"}], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "checkArgument", "parameters": "(boolean expression,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "modifiers": "public static", "return": "void", "signature": "void checkArgument(boolean expression,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "full_signature": "public static void checkArgument(boolean expression,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "class_method_signature": "Util.checkArgument(boolean expression,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(T reference,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "modifiers": "public static", "return": "T", "signature": "T checkNotNull(T reference,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "full_signature": "public static T checkNotNull(T reference,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "class_method_signature": "Util.checkNotNull(T reference,\n                                   String errorMessageTemplate,\n                                   Object... errorMessageArgs)", "testcase": false, "constructor": false}, {"identifier": "checkState", "parameters": "(boolean expression,\n                                String errorMessageTemplate,\n                                Object... errorMessageArgs)", "modifiers": "public static", "return": "void", "signature": "void checkState(boolean expression,\n                                String errorMessageTemplate,\n                                Object... errorMessageArgs)", "full_signature": "public static void checkState(boolean expression,\n                                String errorMessageTemplate,\n                                Object... errorMessageArgs)", "class_method_signature": "Util.checkState(boolean expression,\n                                String errorMessageTemplate,\n                                Object... errorMessageArgs)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "(Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDefault(Method method)", "full_signature": "public static boolean isDefault(Method method)", "class_method_signature": "Util.isDefault(Method method)", "testcase": false, "constructor": false}, {"identifier": "emptyToNull", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String emptyToNull(String string)", "full_signature": "public static String emptyToNull(String string)", "class_method_signature": "Util.emptyToNull(String string)", "testcase": false, "constructor": false}, {"identifier": "removeValues", "parameters": "(T[] values, Predicate<T> shouldRemove, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] removeValues(T[] values, Predicate<T> shouldRemove, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] removeValues(T[] values, Predicate<T> shouldRemove, Class<T> type)", "class_method_signature": "Util.removeValues(T[] values, Predicate<T> shouldRemove, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(Iterable<? extends T> iterable, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] toArray(Iterable<? extends T> iterable, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] toArray(Iterable<? extends T> iterable, Class<T> type)", "class_method_signature": "Util.toArray(Iterable<? extends T> iterable, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "valuesOrEmpty", "parameters": "(Map<String, Collection<T>> map, String key)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key)", "full_signature": "public static Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key)", "class_method_signature": "Util.valuesOrEmpty(Map<String, Collection<T>> map, String key)", "testcase": false, "constructor": false}, {"identifier": "ensureClosed", "parameters": "(Closeable closeable)", "modifiers": "public static", "return": "void", "signature": "void ensureClosed(Closeable closeable)", "full_signature": "public static void ensureClosed(Closeable closeable)", "class_method_signature": "Util.ensureClosed(Closeable closeable)", "testcase": false, "constructor": false}, {"identifier": "resolveLastTypeParameter", "parameters": "(Type genericContext, Class<?> supertype)", "modifiers": "public static", "return": "Type", "signature": "Type resolveLastTypeParameter(Type genericContext, Class<?> supertype)", "full_signature": "public static Type resolveLastTypeParameter(Type genericContext, Class<?> supertype)", "class_method_signature": "Util.resolveLastTypeParameter(Type genericContext, Class<?> supertype)", "testcase": false, "constructor": false}, {"identifier": "emptyValueOf", "parameters": "(Type type)", "modifiers": "public static", "return": "Object", "signature": "Object emptyValueOf(Type type)", "full_signature": "public static Object emptyValueOf(Type type)", "class_method_signature": "Util.emptyValueOf(Type type)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Reader reader)", "modifiers": "public static", "return": "String", "signature": "String toString(Reader reader)", "full_signature": "public static String toString(Reader reader)", "class_method_signature": "Util.toString(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(InputStream in)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(InputStream in)", "full_signature": "public static byte[] toByteArray(InputStream in)", "class_method_signature": "Util.toByteArray(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(InputStream from, OutputStream to)", "modifiers": "private static", "return": "long", "signature": "long copy(InputStream from, OutputStream to)", "full_signature": "private static long copy(InputStream from, OutputStream to)", "class_method_signature": "Util.copy(InputStream from, OutputStream to)", "testcase": false, "constructor": false}, {"identifier": "decodeOrDefault", "parameters": "(byte[] data, Charset charset, String defaultValue)", "modifiers": "public static", "return": "String", "signature": "String decodeOrDefault(byte[] data, Charset charset, String defaultValue)", "full_signature": "public static String decodeOrDefault(byte[] data, Charset charset, String defaultValue)", "class_method_signature": "Util.decodeOrDefault(byte[] data, Charset charset, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotBlank(String value)", "full_signature": "public static boolean isNotBlank(String value)", "class_method_signature": "Util.isNotBlank(String value)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(String value)", "full_signature": "public static boolean isBlank(String value)", "class_method_signature": "Util.isBlank(String value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feign/Util.java"}, "focal_method": {"identifier": "emptyValueOf", "parameters": "(Type type)", "modifiers": "public static", "return": "Object", "body": "public static Object emptyValueOf(Type type) {\n    return EMPTIES.getOrDefault(Types.getRawType(type), () -> null).get();\n  }", "signature": "Object emptyValueOf(Type type)", "full_signature": "public static Object emptyValueOf(Type type)", "class_method_signature": "Util.emptyValueOf(Type type)", "testcase": false, "constructor": false, "invocations": ["get", "getOrDefault", "getRawType"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}