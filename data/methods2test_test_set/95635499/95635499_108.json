{"test_class": {"identifier": "FilteredIterableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> ORIGINAL_LIST = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");", "modifier": "private static final", "type": "List<String>", "declarator": "ORIGINAL_LIST = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")", "var_name": "ORIGINAL_LIST"}, {"original_string": "private static final int NUM_RESHUFFLES = 10;", "modifier": "private static final", "type": "int", "declarator": "NUM_RESHUFFLES = 10", "var_name": "NUM_RESHUFFLES"}], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/sets/FilteredIterableTest.java"}, "test_case": {"identifier": "testCorrectElementsIterated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectElementsIterated() {\n\t\tfor (int numElements = 1; numElements <= ORIGINAL_LIST.size(); numElements++) {\n\t\t\tfor (int shuffleSeed = 0; shuffleSeed < NUM_RESHUFFLES; shuffleSeed++) {\n\t\t\t\tList<String> listCopy = new LinkedList<>(ORIGINAL_LIST);\n\t\t\t\tCollections.shuffle(listCopy);\n\n\t\t\t\tList<Integer> filteredIndices = new LinkedList<>();\n\t\t\t\tfor (int i = 0; i < numElements; i++) {\n\t\t\t\t\tfilteredIndices.add(ORIGINAL_LIST.indexOf(listCopy.get(i)));\n\t\t\t\t}\n\n\t\t\t\tFilteredIterable<String> filteredIterable = new FilteredIterable<>(ORIGINAL_LIST, filteredIndices);\n\t\t\t\tList<Integer> sortedCopyOfFilteredIndices = new LinkedList<>(filteredIndices);\n\t\t\t\tCollections.sort(sortedCopyOfFilteredIndices);\n\n\t\t\t\tStringBuilder expected = new StringBuilder();\n\t\t\t\tStringBuilder actual = new StringBuilder();\n\n\t\t\t\tIterator<String> filteredIterator = filteredIterable.iterator();\n\t\t\t\tfor (Integer correctNextIndex : sortedCopyOfFilteredIndices) {\n\t\t\t\t\tactual.append(filteredIterator.next() + \" \");\n\t\t\t\t\texpected.append(ORIGINAL_LIST.get(correctNextIndex) + \" \");\n\t\t\t\t}\n\n\t\t\t\tassertEquals(\"The elements returned by the FilteredIterable are not correct.\", expected.toString(), actual.toString());\n\t\t\t}\n\t\t}\n\t}", "signature": "void testCorrectElementsIterated()", "full_signature": "@Test public void testCorrectElementsIterated()", "class_method_signature": "FilteredIterableTest.testCorrectElementsIterated()", "testcase": true, "constructor": false, "invocations": ["size", "shuffle", "add", "indexOf", "get", "sort", "iterator", "append", "next", "append", "get", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "FilteredIterable", "superclass": "", "interfaces": "implements Iterable<X>", "fields": [{"original_string": "private Iterable<X> wrappedIterable;", "modifier": "private", "type": "Iterable<X>", "declarator": "wrappedIterable", "var_name": "wrappedIterable"}, {"original_string": "private List<Integer> filteredIndices;", "modifier": "private", "type": "List<Integer>", "declarator": "filteredIndices", "var_name": "filteredIndices"}], "methods": [{"identifier": "FilteredIterable", "parameters": "(final Iterable<X> wrappedIterable, final List<Integer> filteredIndices)", "modifiers": "public", "return": "", "signature": " FilteredIterable(final Iterable<X> wrappedIterable, final List<Integer> filteredIndices)", "full_signature": "public  FilteredIterable(final Iterable<X> wrappedIterable, final List<Integer> filteredIndices)", "class_method_signature": "FilteredIterable.FilteredIterable(final Iterable<X> wrappedIterable, final List<Integer> filteredIndices)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<X>", "signature": "Iterator<X> iterator()", "full_signature": "@Override public Iterator<X> iterator()", "class_method_signature": "FilteredIterable.iterator()", "testcase": false, "constructor": false}, {"identifier": "getFilteredIndices", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getFilteredIndices()", "full_signature": "public List<Integer> getFilteredIndices()", "class_method_signature": "FilteredIterable.getFilteredIndices()", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/sets/FilteredIterable.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<X>", "body": "@Override\n\tpublic Iterator<X> iterator() {\n\t\treturn new FilteredIterator(this.wrappedIterable.iterator(), this.getFilteredIndices());\n\t}", "signature": "Iterator<X> iterator()", "full_signature": "@Override public Iterator<X> iterator()", "class_method_signature": "FilteredIterable.iterator()", "testcase": false, "constructor": false, "invocations": ["iterator", "getFilteredIndices"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}