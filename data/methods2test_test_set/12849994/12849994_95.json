{"test_class": {"identifier": "MultiRedisClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] key = {'0'};", "modifier": "", "type": "byte[]", "declarator": "key = {'0'}", "var_name": "key"}, {"original_string": "byte[] value = {'0'};", "modifier": "", "type": "byte[]", "declarator": "value = {'0'}", "var_name": "value"}, {"original_string": "@Mock\n  Client client;", "modifier": "@Mock", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "MultiRedisClient redisClient;", "modifier": "", "type": "MultiRedisClient", "declarator": "redisClient", "var_name": "redisClient"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/client/MultiRedisClientTest.java"}, "test_case": {"identifier": "dbsize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void dbsize() throws ConnectionException, IOException {\n    int size = 5;\n    doReturn(size).when(client).dbsize();\n    int actualSize = redisClient.dbsize();\n    assertEquals(size, actualSize);\n  }", "signature": "void dbsize()", "full_signature": "@Test public void dbsize()", "class_method_signature": "MultiRedisClientTest.dbsize()", "testcase": true, "constructor": false, "invocations": ["dbsize", "when", "doReturn", "dbsize", "assertEquals"]}, "focal_class": {"identifier": "MultiRedisClient", "superclass": "", "interfaces": "implements Client", "fields": [{"original_string": "public static final int CONCURRENCY_LEVEL = 3;", "modifier": "public static final", "type": "int", "declarator": "CONCURRENCY_LEVEL = 3", "var_name": "CONCURRENCY_LEVEL"}, {"original_string": "final List<Client> redisClients;", "modifier": "final", "type": "List<Client>", "declarator": "redisClients", "var_name": "redisClients"}, {"original_string": "final AtomicInteger currentIndex = new AtomicInteger(0);", "modifier": "final", "type": "AtomicInteger", "declarator": "currentIndex = new AtomicInteger(0)", "var_name": "currentIndex"}], "methods": [{"identifier": "MultiRedisClient", "parameters": "(final String host, final int port)", "modifiers": "public", "return": "", "signature": " MultiRedisClient(final String host, final int port)", "full_signature": "public  MultiRedisClient(final String host, final int port)", "class_method_signature": "MultiRedisClient.MultiRedisClient(final String host, final int port)", "testcase": false, "constructor": true}, {"identifier": "MultiRedisClient", "parameters": "(final String host, final int port, final int concurrencyLevel)", "modifiers": "public", "return": "", "signature": " MultiRedisClient(final String host, final int port, final int concurrencyLevel)", "full_signature": "public  MultiRedisClient(final String host, final int port, final int concurrencyLevel)", "class_method_signature": "MultiRedisClient.MultiRedisClient(final String host, final int port, final int concurrencyLevel)", "testcase": false, "constructor": true}, {"identifier": "ping", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void ping()", "full_signature": "@Override public void ping()", "class_method_signature": "MultiRedisClient.ping()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(byte[] key, byte[] value)", "modifiers": "@Override public", "return": "void", "signature": "void set(byte[] key, byte[] value)", "full_signature": "@Override public void set(byte[] key, byte[] value)", "class_method_signature": "MultiRedisClient.set(byte[] key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(byte[] key, byte[] value, long expiryInMillis)", "modifiers": "@Override public", "return": "void", "signature": "void set(byte[] key, byte[] value, long expiryInMillis)", "full_signature": "@Override public void set(byte[] key, byte[] value, long expiryInMillis)", "class_method_signature": "MultiRedisClient.set(byte[] key, byte[] value, long expiryInMillis)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(byte[] key)", "full_signature": "@Override public byte[] get(byte[] key)", "class_method_signature": "MultiRedisClient.get(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "expire", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] expire(byte[] key)", "full_signature": "@Override public byte[] expire(byte[] key)", "class_method_signature": "MultiRedisClient.expire(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "flushdb", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flushdb()", "full_signature": "@Override public void flushdb()", "class_method_signature": "MultiRedisClient.flushdb()", "testcase": false, "constructor": false}, {"identifier": "dbsize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int dbsize()", "full_signature": "@Override public int dbsize()", "class_method_signature": "MultiRedisClient.dbsize()", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "()", "modifiers": "protected", "return": "Client", "signature": "Client getClient()", "full_signature": "protected Client getClient()", "class_method_signature": "MultiRedisClient.getClient()", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/client/MultiRedisClient.java"}, "focal_method": {"identifier": "dbsize", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int dbsize() throws ConnectionException, IOException {\n    return getClient().dbsize();\n  }", "signature": "int dbsize()", "full_signature": "@Override public int dbsize()", "class_method_signature": "MultiRedisClient.dbsize()", "testcase": false, "constructor": false, "invocations": ["dbsize", "getClient"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}