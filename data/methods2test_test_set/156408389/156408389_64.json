{"test_class": {"identifier": "StrKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "kin-sdk/kin-base/src/test/java/kin/base/StrKeyTest.java"}, "test_case": {"identifier": "testDecodeInvalidVersionByte", "parameters": "()", "modifiers": "@Test() public", "return": "void", "body": "@Test()\n    public void testDecodeInvalidVersionByte() {\n        String address = \"GCZHXL5HXQX5ABDM26LHYRCQZ5OJFHLOPLZX47WEBP3V2PF5AVFK2A5D\";\n        try {\n            StrKey.decodeCheck(StrKey.VersionByte.SEED, address.toCharArray());\n            fail();\n        } catch (FormatException e) {\n        }\n    }", "signature": "void testDecodeInvalidVersionByte()", "full_signature": "@Test() public void testDecodeInvalidVersionByte()", "class_method_signature": "StrKeyTest.testDecodeInvalidVersionByte()", "testcase": true, "constructor": false, "invocations": ["decodeCheck", "toCharArray", "fail"]}, "focal_class": {"identifier": "StrKey", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "encodeStellarAccountId", "parameters": "(byte[] data)", "modifiers": "public static", "return": "String", "signature": "String encodeStellarAccountId(byte[] data)", "full_signature": "public static String encodeStellarAccountId(byte[] data)", "class_method_signature": "StrKey.encodeStellarAccountId(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodeStellarAccountId", "parameters": "(String data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeStellarAccountId(String data)", "full_signature": "public static byte[] decodeStellarAccountId(String data)", "class_method_signature": "StrKey.decodeStellarAccountId(String data)", "testcase": false, "constructor": false}, {"identifier": "encodeStellarSecretSeed", "parameters": "(byte[] data)", "modifiers": "public static", "return": "char[]", "signature": "char[] encodeStellarSecretSeed(byte[] data)", "full_signature": "public static char[] encodeStellarSecretSeed(byte[] data)", "class_method_signature": "StrKey.encodeStellarSecretSeed(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodeStellarSecretSeed", "parameters": "(char[] data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeStellarSecretSeed(char[] data)", "full_signature": "public static byte[] decodeStellarSecretSeed(char[] data)", "class_method_signature": "StrKey.decodeStellarSecretSeed(char[] data)", "testcase": false, "constructor": false}, {"identifier": "encodePreAuthTx", "parameters": "(byte[] data)", "modifiers": "public static", "return": "String", "signature": "String encodePreAuthTx(byte[] data)", "full_signature": "public static String encodePreAuthTx(byte[] data)", "class_method_signature": "StrKey.encodePreAuthTx(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodePreAuthTx", "parameters": "(String data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodePreAuthTx(String data)", "full_signature": "public static byte[] decodePreAuthTx(String data)", "class_method_signature": "StrKey.decodePreAuthTx(String data)", "testcase": false, "constructor": false}, {"identifier": "encodeSha256Hash", "parameters": "(byte[] data)", "modifiers": "public static", "return": "String", "signature": "String encodeSha256Hash(byte[] data)", "full_signature": "public static String encodeSha256Hash(byte[] data)", "class_method_signature": "StrKey.encodeSha256Hash(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodeSha256Hash", "parameters": "(String data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeSha256Hash(String data)", "full_signature": "public static byte[] decodeSha256Hash(String data)", "class_method_signature": "StrKey.decodeSha256Hash(String data)", "testcase": false, "constructor": false}, {"identifier": "encodeCheck", "parameters": "(VersionByte versionByte, byte[] data)", "modifiers": "protected static", "return": "char[]", "signature": "char[] encodeCheck(VersionByte versionByte, byte[] data)", "full_signature": "protected static char[] encodeCheck(VersionByte versionByte, byte[] data)", "class_method_signature": "StrKey.encodeCheck(VersionByte versionByte, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodeCheck", "parameters": "(VersionByte versionByte, char[] encoded)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] decodeCheck(VersionByte versionByte, char[] encoded)", "full_signature": "protected static byte[] decodeCheck(VersionByte versionByte, char[] encoded)", "class_method_signature": "StrKey.decodeCheck(VersionByte versionByte, char[] encoded)", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(byte[] bytes)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] calculateChecksum(byte[] bytes)", "full_signature": "protected static byte[] calculateChecksum(byte[] bytes)", "class_method_signature": "StrKey.calculateChecksum(byte[] bytes)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-base/src/main/java/kin/base/StrKey.java"}, "focal_method": {"identifier": "decodeCheck", "parameters": "(VersionByte versionByte, char[] encoded)", "modifiers": "protected static", "return": "byte[]", "body": "protected static byte[] decodeCheck(VersionByte versionByte, char[] encoded) {\n        byte[] bytes = new byte[encoded.length];\n        for (int i = 0; i < encoded.length; i++) {\n            if (encoded[i] > 127) {\n                throw new IllegalArgumentException(\"Illegal characters in encoded char array.\");\n            }\n            bytes[i] = (byte) encoded[i];\n        }\n\n        Base32 base32Codec = new Base32();\n        byte[] decoded = base32Codec.decode(bytes);\n        byte decodedVersionByte = decoded[0];\n        byte[] payload = Arrays.copyOfRange(decoded, 0, decoded.length - 2);\n        byte[] data = Arrays.copyOfRange(payload, 1, payload.length);\n        byte[] checksum = Arrays.copyOfRange(decoded, decoded.length - 2, decoded.length);\n\n        if (decodedVersionByte != versionByte.getValue()) {\n            throw new FormatException(\"Version byte is invalid\");\n        }\n\n        byte[] expectedChecksum = StrKey.calculateChecksum(payload);\n\n        if (!Arrays.equals(expectedChecksum, checksum)) {\n            throw new FormatException(\"Checksum invalid\");\n        }\n\n        if (VersionByte.SEED.getValue() == decodedVersionByte) {\n            Arrays.fill(bytes, (byte) 0);\n            Arrays.fill(decoded, (byte) 0);\n            Arrays.fill(payload, (byte) 0);\n        }\n\n        return data;\n    }", "signature": "byte[] decodeCheck(VersionByte versionByte, char[] encoded)", "full_signature": "protected static byte[] decodeCheck(VersionByte versionByte, char[] encoded)", "class_method_signature": "StrKey.decodeCheck(VersionByte versionByte, char[] encoded)", "testcase": false, "constructor": false, "invocations": ["decode", "copyOfRange", "copyOfRange", "copyOfRange", "getValue", "calculateChecksum", "equals", "getValue", "fill", "fill", "fill"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}