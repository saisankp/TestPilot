{"test_class": {"identifier": "DatastoreContextIntrospectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final AbstractDatastoreContextIntrospectorFactory INTROSPECTOR_FACTORY =\n            new DefaultDatastoreContextIntrospectorFactory(new BindingCodecContext(\n                BindingRuntimeHelpers.createRuntimeContext(DataStorePropertiesContainer.class)));", "modifier": "static final", "type": "AbstractDatastoreContextIntrospectorFactory", "declarator": "INTROSPECTOR_FACTORY =\n            new DefaultDatastoreContextIntrospectorFactory(new BindingCodecContext(\n                BindingRuntimeHelpers.createRuntimeContext(DataStorePropertiesContainer.class)))", "var_name": "INTROSPECTOR_FACTORY"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/DatastoreContextIntrospectorTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdate() {\n        final DatastoreContextIntrospector introspector = INTROSPECTOR_FACTORY.newInstance(OPERATIONAL);\n\n        final Map<String, Object> properties = new HashMap<>();\n        properties.put(\"shard-transaction-idle-timeout-in-minutes\", \"31\");\n        properties.put(\"operation-timeout-in-seconds\", \"26\");\n        properties.put(\"shard-transaction-commit-timeout-in-seconds\", \"100\");\n        properties.put(\"shard-journal-recovery-log-batch-size\", \"199\");\n        properties.put(\"shard-snapshot-batch-count\", \"212\");\n        properties.put(\"shard-heartbeat-interval-in-millis\", \"101\");\n        properties.put(\"shard-transaction-commit-queue-capacity\", \"567\");\n        properties.put(\"shard-initialization-timeout-in-seconds\", \"82\");\n        properties.put(\"shard-leader-election-timeout-in-seconds\", \"66\");\n        properties.put(\"initial-settle-timeout-multiplier\", \"5\");\n        properties.put(\"recovery-snapshot-interval-seconds\", \"360\");\n        properties.put(\"shard-isolated-leader-check-interval-in-millis\", \"123\");\n        properties.put(\"shard-snapshot-data-threshold-percentage\", \"100\");\n        properties.put(\"shard-snapshot-data-threshold\", \"800\");\n        properties.put(\"shard-election-timeout-factor\", \"21\");\n        properties.put(\"shard-batched-modification-count\", \"901\");\n        properties.put(\"transactionCreationInitialRateLimit\", \"200\");\n        properties.put(\"MaxShardDataChangeExecutorPoolSize\", \"41\");\n        properties.put(\"Max-Shard-Data-Change Executor-Queue Size\", \"1111\");\n        properties.put(\" max shard data change listener queue size\", \"2222\");\n        properties.put(\"mAx-shaRd-data-STORE-executor-quEUe-size\", \"3333\");\n        properties.put(\"persistent\", \"false\");\n        properties.put(\"initial-payload-serialized-buffer-capacity\", \"600\");\n\n        boolean updated = introspector.update(properties);\n        assertTrue(\"updated\", updated);\n        DatastoreContext context = introspector.getContext();\n\n        assertEquals(31, context.getShardTransactionIdleTimeout().toMinutes());\n        assertEquals(26000, context.getOperationTimeoutInMillis());\n        assertEquals(100, context.getShardTransactionCommitTimeoutInSeconds());\n        assertEquals(199, context.getShardRaftConfig().getJournalRecoveryLogBatchSize());\n        assertEquals(212, context.getShardRaftConfig().getSnapshotBatchCount());\n        assertEquals(101, context.getShardRaftConfig().getHeartBeatInterval().length());\n        assertEquals(567, context.getShardTransactionCommitQueueCapacity());\n        assertEquals(82, context.getShardInitializationTimeout().duration().toSeconds());\n        assertEquals(66, context.getShardLeaderElectionTimeout().duration().toSeconds());\n        assertEquals(5, context.getInitialSettleTimeoutMultiplier());\n        assertEquals(360, context.getShardRaftConfig().getRecoverySnapshotIntervalSeconds());\n        assertEquals(123, context.getShardRaftConfig().getIsolatedCheckIntervalInMillis());\n        assertEquals(100, context.getShardRaftConfig().getSnapshotDataThresholdPercentage());\n        assertEquals(800, context.getShardRaftConfig().getSnapshotDataThreshold());\n        assertEquals(21, context.getShardRaftConfig().getElectionTimeoutFactor());\n        assertEquals(901, context.getShardBatchedModificationCount());\n        assertEquals(200, context.getTransactionCreationInitialRateLimit());\n        assertEquals(600, context.getInitialPayloadSerializedBufferCapacity());\n        assertFalse(context.isPersistent());\n\n        properties.put(\"shard-transaction-idle-timeout-in-minutes\", \"32\");\n        properties.put(\"operation-timeout-in-seconds\", \"27\");\n        properties.put(\"shard-heartbeat-interval-in-millis\", \"102\");\n        properties.put(\"shard-election-timeout-factor\", \"22\");\n        properties.put(\"initial-settle-timeout-multiplier\", \"6\");\n        properties.put(\"max-shard-data-change-executor-pool-size\", \"42\");\n        properties.put(\"max-shard-data-store-executor-queue-size\", \"4444\");\n        properties.put(\"persistent\", \"true\");\n\n        updated = introspector.update(properties);\n        assertTrue(\"updated\", updated);\n        context = introspector.getContext();\n\n        assertEquals(32, context.getShardTransactionIdleTimeout().toMinutes());\n        assertEquals(27000, context.getOperationTimeoutInMillis());\n        assertEquals(100, context.getShardTransactionCommitTimeoutInSeconds());\n        assertEquals(199, context.getShardRaftConfig().getJournalRecoveryLogBatchSize());\n        assertEquals(212, context.getShardRaftConfig().getSnapshotBatchCount());\n        assertEquals(102, context.getShardRaftConfig().getHeartBeatInterval().length());\n        assertEquals(567, context.getShardTransactionCommitQueueCapacity());\n        assertEquals(82, context.getShardInitializationTimeout().duration().toSeconds());\n        assertEquals(66, context.getShardLeaderElectionTimeout().duration().toSeconds());\n        assertEquals(6, context.getInitialSettleTimeoutMultiplier());\n        assertEquals(123, context.getShardRaftConfig().getIsolatedCheckIntervalInMillis());\n        assertEquals(100, context.getShardRaftConfig().getSnapshotDataThresholdPercentage());\n        assertEquals(800, context.getShardRaftConfig().getSnapshotDataThreshold());\n        assertEquals(22, context.getShardRaftConfig().getElectionTimeoutFactor());\n        assertEquals(200, context.getTransactionCreationInitialRateLimit());\n        assertTrue(context.isPersistent());\n\n        updated = introspector.update(null);\n        assertFalse(\"updated\", updated);\n\n        updated = introspector.update(new HashMap<>());\n        assertFalse(\"updated\", updated);\n    }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "DatastoreContextIntrospectorTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["newInstance", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "update", "assertTrue", "getContext", "assertEquals", "toMinutes", "getShardTransactionIdleTimeout", "assertEquals", "getOperationTimeoutInMillis", "assertEquals", "getShardTransactionCommitTimeoutInSeconds", "assertEquals", "getJournalRecoveryLogBatchSize", "getShardRaftConfig", "assertEquals", "getSnapshotBatchCount", "getShardRaftConfig", "assertEquals", "length", "getHeartBeatInterval", "getShardRaftConfig", "assertEquals", "getShardTransactionCommitQueueCapacity", "assertEquals", "toSeconds", "duration", "getShardInitializationTimeout", "assertEquals", "toSeconds", "duration", "getShardLeaderElectionTimeout", "assertEquals", "getInitialSettleTimeoutMultiplier", "assertEquals", "getRecoverySnapshotIntervalSeconds", "getShardRaftConfig", "assertEquals", "getIsolatedCheckIntervalInMillis", "getShardRaftConfig", "assertEquals", "getSnapshotDataThresholdPercentage", "getShardRaftConfig", "assertEquals", "getSnapshotDataThreshold", "getShardRaftConfig", "assertEquals", "getElectionTimeoutFactor", "getShardRaftConfig", "assertEquals", "getShardBatchedModificationCount", "assertEquals", "getTransactionCreationInitialRateLimit", "assertEquals", "getInitialPayloadSerializedBufferCapacity", "assertFalse", "isPersistent", "put", "put", "put", "put", "put", "put", "put", "put", "update", "assertTrue", "getContext", "assertEquals", "toMinutes", "getShardTransactionIdleTimeout", "assertEquals", "getOperationTimeoutInMillis", "assertEquals", "getShardTransactionCommitTimeoutInSeconds", "assertEquals", "getJournalRecoveryLogBatchSize", "getShardRaftConfig", "assertEquals", "getSnapshotBatchCount", "getShardRaftConfig", "assertEquals", "length", "getHeartBeatInterval", "getShardRaftConfig", "assertEquals", "getShardTransactionCommitQueueCapacity", "assertEquals", "toSeconds", "duration", "getShardInitializationTimeout", "assertEquals", "toSeconds", "duration", "getShardLeaderElectionTimeout", "assertEquals", "getInitialSettleTimeoutMultiplier", "assertEquals", "getIsolatedCheckIntervalInMillis", "getShardRaftConfig", "assertEquals", "getSnapshotDataThresholdPercentage", "getShardRaftConfig", "assertEquals", "getSnapshotDataThreshold", "getShardRaftConfig", "assertEquals", "getElectionTimeoutFactor", "getShardRaftConfig", "assertEquals", "getTransactionCreationInitialRateLimit", "assertTrue", "isPersistent", "update", "assertFalse", "update", "assertFalse"]}, "focal_class": {"identifier": "DatastoreContextIntrospector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DatastoreContextIntrospector.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DatastoreContextIntrospector.class)", "var_name": "LOG"}, {"original_string": "private static final Map<String, Entry<Class<?>, Method>> DATA_STORE_PROP_INFO = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Entry<Class<?>, Method>>", "declarator": "DATA_STORE_PROP_INFO = new HashMap<>()", "var_name": "DATA_STORE_PROP_INFO"}, {"original_string": "private static final Map<Class<?>, Constructor<?>> CONSTRUCTORS = new HashMap<>();", "modifier": "private static final", "type": "Map<Class<?>, Constructor<?>>", "declarator": "CONSTRUCTORS = new HashMap<>()", "var_name": "CONSTRUCTORS"}, {"original_string": "private static final Map<Class<?>, Method> YANG_TYPE_GETTERS = new HashMap<>();", "modifier": "private static final", "type": "Map<Class<?>, Method>", "declarator": "YANG_TYPE_GETTERS = new HashMap<>()", "var_name": "YANG_TYPE_GETTERS"}, {"original_string": "private static final Map<String, Method> BUILDER_SETTERS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Method>", "declarator": "BUILDER_SETTERS = new HashMap<>()", "var_name": "BUILDER_SETTERS"}, {"original_string": "private static final ImmutableMap<Class<?>, Function<String, Object>> UINT_FACTORIES =\n            ImmutableMap.<Class<?>, Function<String, Object>>builder()\n            .put(Uint8.class, Uint8::valueOf)\n            .put(Uint16.class, Uint16::valueOf)\n            .put(Uint32.class, Uint32::valueOf)\n            .put(Uint64.class, Uint64::valueOf)\n            .build();", "modifier": "private static final", "type": "ImmutableMap<Class<?>, Function<String, Object>>", "declarator": "UINT_FACTORIES =\n            ImmutableMap.<Class<?>, Function<String, Object>>builder()\n            .put(Uint8.class, Uint8::valueOf)\n            .put(Uint16.class, Uint16::valueOf)\n            .put(Uint32.class, Uint32::valueOf)\n            .put(Uint64.class, Uint64::valueOf)\n            .build()", "var_name": "UINT_FACTORIES"}, {"original_string": "@GuardedBy(value = \"this\")\n    private DatastoreContext context;", "modifier": "@GuardedBy(value = \"this\")\n    private", "type": "DatastoreContext", "declarator": "context", "var_name": "context"}, {"original_string": "@GuardedBy(value = \"this\")\n    private Map<String, Object> currentProperties;", "modifier": "@GuardedBy(value = \"this\")\n    private", "type": "Map<String, Object>", "declarator": "currentProperties", "var_name": "currentProperties"}], "methods": [{"identifier": "introspectPrimitiveTypes", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S1166\") private static", "return": "void", "signature": "void introspectPrimitiveTypes()", "full_signature": "@SuppressWarnings(\"squid:S1166\") private static void introspectPrimitiveTypes()", "class_method_signature": "DatastoreContextIntrospector.introspectPrimitiveTypes()", "testcase": false, "constructor": false}, {"identifier": "introspectDatastoreContextBuilder", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void introspectDatastoreContextBuilder()", "full_signature": "private static void introspectDatastoreContextBuilder()", "class_method_signature": "DatastoreContextIntrospector.introspectDatastoreContextBuilder()", "testcase": false, "constructor": false}, {"identifier": "introspectDataStoreProperties", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void introspectDataStoreProperties()", "full_signature": "private static void introspectDataStoreProperties()", "class_method_signature": "DatastoreContextIntrospector.introspectDataStoreProperties()", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(final Method method)", "modifiers": "private static", "return": "String", "signature": "String getPropertyName(final Method method)", "full_signature": "private static String getPropertyName(final Method method)", "class_method_signature": "DatastoreContextIntrospector.getPropertyName(final Method method)", "testcase": false, "constructor": false}, {"identifier": "processDataStoreProperty", "parameters": "(final String name, final Class<?> propertyType,\n            final Method readMethod)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static", "return": "void", "signature": "void processDataStoreProperty(final String name, final Class<?> propertyType,\n            final Method readMethod)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static void processDataStoreProperty(final String name, final Class<?> propertyType,\n            final Method readMethod)", "class_method_signature": "DatastoreContextIntrospector.processDataStoreProperty(final String name, final Class<?> propertyType,\n            final Method readMethod)", "testcase": false, "constructor": false}, {"identifier": "processPropertyType", "parameters": "(final Class<?> propertyType)", "modifiers": "private static", "return": "void", "signature": "void processPropertyType(final Class<?> propertyType)", "full_signature": "private static void processPropertyType(final Class<?> propertyType)", "class_method_signature": "DatastoreContextIntrospector.processPropertyType(final Class<?> propertyType)", "testcase": false, "constructor": false}, {"identifier": "findYangTypeGetter", "parameters": "(final Class<?> type, final String propertyName)", "modifiers": "private static", "return": "void", "signature": "void findYangTypeGetter(final Class<?> type, final String propertyName)", "full_signature": "private static void findYangTypeGetter(final Class<?> type, final String propertyName)", "class_method_signature": "DatastoreContextIntrospector.findYangTypeGetter(final Class<?> type, final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "DatastoreContextIntrospector", "parameters": "(final DatastoreContext context,\n            final DataStorePropertiesContainer defaultPropsContainer)", "modifiers": "public", "return": "", "signature": " DatastoreContextIntrospector(final DatastoreContext context,\n            final DataStorePropertiesContainer defaultPropsContainer)", "full_signature": "public  DatastoreContextIntrospector(final DatastoreContext context,\n            final DataStorePropertiesContainer defaultPropsContainer)", "class_method_signature": "DatastoreContextIntrospector.DatastoreContextIntrospector(final DatastoreContext context,\n            final DataStorePropertiesContainer defaultPropsContainer)", "testcase": false, "constructor": true}, {"identifier": "getContext", "parameters": "()", "modifiers": "public synchronized", "return": "DatastoreContext", "signature": "DatastoreContext getContext()", "full_signature": "public synchronized DatastoreContext getContext()", "class_method_signature": "DatastoreContextIntrospector.getContext()", "testcase": false, "constructor": false}, {"identifier": "newContextFactory", "parameters": "()", "modifiers": "public", "return": "DatastoreContextFactory", "signature": "DatastoreContextFactory newContextFactory()", "full_signature": "public DatastoreContextFactory newContextFactory()", "class_method_signature": "DatastoreContextIntrospector.newContextFactory()", "testcase": false, "constructor": false}, {"identifier": "getShardDatastoreContext", "parameters": "(final String forShardName)", "modifiers": "public synchronized", "return": "DatastoreContext", "signature": "DatastoreContext getShardDatastoreContext(final String forShardName)", "full_signature": "public synchronized DatastoreContext getShardDatastoreContext(final String forShardName)", "class_method_signature": "DatastoreContextIntrospector.getShardDatastoreContext(final String forShardName)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final Map<String, Object> properties)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean update(final Map<String, Object> properties)", "full_signature": "public synchronized boolean update(final Map<String, Object> properties)", "class_method_signature": "DatastoreContextIntrospector.update(final Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "getSortedKeysByDatastoreType", "parameters": "(final Collection<String> inKeys,\n            final String dataStoreTypePrefix)", "modifiers": "private static", "return": "ArrayList<String>", "signature": "ArrayList<String> getSortedKeysByDatastoreType(final Collection<String> inKeys,\n            final String dataStoreTypePrefix)", "full_signature": "private static ArrayList<String> getSortedKeysByDatastoreType(final Collection<String> inKeys,\n            final String dataStoreTypePrefix)", "class_method_signature": "DatastoreContextIntrospector.getSortedKeysByDatastoreType(final Collection<String> inKeys,\n            final String dataStoreTypePrefix)", "testcase": false, "constructor": false}, {"identifier": "convertValueAndInvokeSetter", "parameters": "(final String inKey, final Object inValue, final Builder builder)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "boolean", "signature": "boolean convertValueAndInvokeSetter(final String inKey, final Object inValue, final Builder builder)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private boolean convertValueAndInvokeSetter(final String inKey, final Object inValue, final Builder builder)", "class_method_signature": "DatastoreContextIntrospector.convertValueAndInvokeSetter(final String inKey, final Object inValue, final Builder builder)", "testcase": false, "constructor": false}, {"identifier": "convertToCamelCase", "parameters": "(final String inString)", "modifiers": "private static", "return": "String", "signature": "String convertToCamelCase(final String inString)", "full_signature": "private static String convertToCamelCase(final String inString)", "class_method_signature": "DatastoreContextIntrospector.convertToCamelCase(final String inString)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(final String name, final Object from)", "modifiers": "private", "return": "Object", "signature": "Object convertValue(final String name, final Object from)", "full_signature": "private Object convertValue(final String name, final Object from)", "class_method_signature": "DatastoreContextIntrospector.convertValue(final String name, final Object from)", "testcase": false, "constructor": false}, {"identifier": "constructorValueRecursively", "parameters": "(final Class<?> toType, final Object fromValue)", "modifiers": "private", "return": "Object", "signature": "Object constructorValueRecursively(final Class<?> toType, final Object fromValue)", "full_signature": "private Object constructorValueRecursively(final Class<?> toType, final Object fromValue)", "class_method_signature": "DatastoreContextIntrospector.constructorValueRecursively(final Class<?> toType, final Object fromValue)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DatastoreContextIntrospector.java"}, "focal_method": {"identifier": "update", "parameters": "(final Map<String, Object> properties)", "modifiers": "public synchronized", "return": "boolean", "body": "public synchronized boolean update(final Map<String, Object> properties) {\n        currentProperties = null;\n        if (properties == null || properties.isEmpty()) {\n            return false;\n        }\n\n        LOG.debug(\"In update: properties: {}\", properties);\n\n        final ImmutableMap.Builder<String, Object> mapBuilder = ImmutableMap.<String, Object>builder();\n\n        final Builder builder = DatastoreContext.newBuilderFrom(context);\n\n        final String dataStoreTypePrefix = context.getDataStoreName() + '.';\n\n        final List<String> keys = getSortedKeysByDatastoreType(properties.keySet(), dataStoreTypePrefix);\n\n        boolean updated = false;\n        for (String key: keys) {\n            final Object value = properties.get(key);\n            mapBuilder.put(key, value);\n\n            // If the key is prefixed with the data store type, strip it off.\n            if (key.startsWith(dataStoreTypePrefix)) {\n                key = key.replaceFirst(dataStoreTypePrefix, \"\");\n            }\n\n            if (convertValueAndInvokeSetter(key, value.toString(), builder)) {\n                updated = true;\n            }\n        }\n\n        currentProperties = mapBuilder.build();\n\n        if (updated) {\n            context = builder.build();\n        }\n\n        return updated;\n    }", "signature": "boolean update(final Map<String, Object> properties)", "full_signature": "public synchronized boolean update(final Map<String, Object> properties)", "class_method_signature": "DatastoreContextIntrospector.update(final Map<String, Object> properties)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "debug", "builder", "newBuilderFrom", "getDataStoreName", "getSortedKeysByDatastoreType", "keySet", "get", "put", "startsWith", "replaceFirst", "convertValueAndInvokeSetter", "toString", "build", "build"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}