{"test_class": {"identifier": "ShardPeerAddressResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MemberName MEMBER_1 = MemberName.forName(\"member-1\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_1 = MemberName.forName(\"member-1\")", "var_name": "MEMBER_1"}, {"original_string": "private static final MemberName MEMBER_2 = MemberName.forName(\"member-2\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_2 = MemberName.forName(\"member-2\")", "var_name": "MEMBER_2"}, {"original_string": "private static final MemberName MEMBER_3 = MemberName.forName(\"member-3\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_3 = MemberName.forName(\"member-3\")", "var_name": "MEMBER_3"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardPeerAddressResolverTest.java"}, "test_case": {"identifier": "testResolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolve() {\n        String type = \"config\";\n        ShardPeerAddressResolver resolver = new ShardPeerAddressResolver(type, MEMBER_1);\n\n        MemberName memberName = MEMBER_2;\n        String peerId = ShardIdentifier.create(\"default\", memberName, type).toString();\n\n        assertEquals(\"resolve\", null, resolver.resolve(peerId));\n\n        Address address = new Address(\"tcp\", \"system\");\n        resolver.addPeerAddress(memberName, address);\n\n        String shardAddress = resolver.getShardActorAddress(\"default\", memberName);\n        assertEquals(\"getShardActorAddress\", address.toString() + \"/user/shardmanager-\" + type + \"/\"\n                + memberName.getName() + \"-shard-default-\" + type, shardAddress);\n\n        assertEquals(\"resolve\", shardAddress, resolver.resolve(peerId));\n    }", "signature": "void testResolve()", "full_signature": "@Test public void testResolve()", "class_method_signature": "ShardPeerAddressResolverTest.testResolve()", "testcase": true, "constructor": false, "invocations": ["toString", "create", "assertEquals", "resolve", "addPeerAddress", "getShardActorAddress", "assertEquals", "toString", "getName", "assertEquals", "resolve"]}, "focal_class": {"identifier": "ShardPeerAddressResolver", "superclass": "", "interfaces": "implements PeerAddressResolver", "fields": [{"original_string": "private final ConcurrentMap<MemberName, Address> memberNameToAddress = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<MemberName, Address>", "declarator": "memberNameToAddress = new ConcurrentHashMap<>()", "var_name": "memberNameToAddress"}, {"original_string": "private final String shardManagerIdentifier;", "modifier": "private final", "type": "String", "declarator": "shardManagerIdentifier", "var_name": "shardManagerIdentifier"}, {"original_string": "private final String shardManagerType;", "modifier": "private final", "type": "String", "declarator": "shardManagerType", "var_name": "shardManagerType"}, {"original_string": "private final MemberName localMemberName;", "modifier": "private final", "type": "MemberName", "declarator": "localMemberName", "var_name": "localMemberName"}], "methods": [{"identifier": "ShardPeerAddressResolver", "parameters": "(final String shardManagerType, final MemberName localMemberName)", "modifiers": "", "return": "", "signature": " ShardPeerAddressResolver(final String shardManagerType, final MemberName localMemberName)", "full_signature": "  ShardPeerAddressResolver(final String shardManagerType, final MemberName localMemberName)", "class_method_signature": "ShardPeerAddressResolver.ShardPeerAddressResolver(final String shardManagerType, final MemberName localMemberName)", "testcase": false, "constructor": true}, {"identifier": "addPeerAddress", "parameters": "(final MemberName memberName, final Address address)", "modifiers": "", "return": "void", "signature": "void addPeerAddress(final MemberName memberName, final Address address)", "full_signature": " void addPeerAddress(final MemberName memberName, final Address address)", "class_method_signature": "ShardPeerAddressResolver.addPeerAddress(final MemberName memberName, final Address address)", "testcase": false, "constructor": false}, {"identifier": "removePeerAddress", "parameters": "(final MemberName memberName)", "modifiers": "", "return": "void", "signature": "void removePeerAddress(final MemberName memberName)", "full_signature": " void removePeerAddress(final MemberName memberName)", "class_method_signature": "ShardPeerAddressResolver.removePeerAddress(final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "getPeerMembers", "parameters": "()", "modifiers": "", "return": "Set<MemberName>", "signature": "Set<MemberName> getPeerMembers()", "full_signature": " Set<MemberName> getPeerMembers()", "class_method_signature": "ShardPeerAddressResolver.getPeerMembers()", "testcase": false, "constructor": false}, {"identifier": "getPeerAddress", "parameters": "(final MemberName memberName)", "modifiers": "", "return": "Address", "signature": "Address getPeerAddress(final MemberName memberName)", "full_signature": " Address getPeerAddress(final MemberName memberName)", "class_method_signature": "ShardPeerAddressResolver.getPeerAddress(final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "getShardManagerPeerActorAddresses", "parameters": "()", "modifiers": "", "return": "Collection<String>", "signature": "Collection<String> getShardManagerPeerActorAddresses()", "full_signature": " Collection<String> getShardManagerPeerActorAddresses()", "class_method_signature": "ShardPeerAddressResolver.getShardManagerPeerActorAddresses()", "testcase": false, "constructor": false}, {"identifier": "getShardIdentifier", "parameters": "(final MemberName memberName, final String shardName)", "modifiers": "", "return": "ShardIdentifier", "signature": "ShardIdentifier getShardIdentifier(final MemberName memberName, final String shardName)", "full_signature": " ShardIdentifier getShardIdentifier(final MemberName memberName, final String shardName)", "class_method_signature": "ShardPeerAddressResolver.getShardIdentifier(final MemberName memberName, final String shardName)", "testcase": false, "constructor": false}, {"identifier": "getShardActorAddress", "parameters": "(final String shardName, final MemberName memberName)", "modifiers": "", "return": "String", "signature": "String getShardActorAddress(final String shardName, final MemberName memberName)", "full_signature": " String getShardActorAddress(final String shardName, final MemberName memberName)", "class_method_signature": "ShardPeerAddressResolver.getShardActorAddress(final String shardName, final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "getShardManagerActorPathBuilder", "parameters": "(final Address address)", "modifiers": "", "return": "StringBuilder", "signature": "StringBuilder getShardManagerActorPathBuilder(final Address address)", "full_signature": " StringBuilder getShardManagerActorPathBuilder(final Address address)", "class_method_signature": "ShardPeerAddressResolver.getShardManagerActorPathBuilder(final Address address)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final String peerId)", "modifiers": "@Override public", "return": "String", "signature": "String resolve(final String peerId)", "full_signature": "@Override public String resolve(final String peerId)", "class_method_signature": "ShardPeerAddressResolver.resolve(final String peerId)", "testcase": false, "constructor": false}, {"identifier": "setResolved", "parameters": "(final String peerId, final String address)", "modifiers": "@Override public", "return": "void", "signature": "void setResolved(final String peerId, final String address)", "full_signature": "@Override public void setResolved(final String peerId, final String address)", "class_method_signature": "ShardPeerAddressResolver.setResolved(final String peerId, final String address)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardPeerAddressResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final String peerId)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String resolve(final String peerId) {\n        if (peerId == null) {\n            return null;\n        }\n\n        ShardIdentifier shardId = ShardIdentifier.fromShardIdString(peerId);\n        return getShardActorAddress(shardId.getShardName(), shardId.getMemberName());\n    }", "signature": "String resolve(final String peerId)", "full_signature": "@Override public String resolve(final String peerId)", "class_method_signature": "ShardPeerAddressResolver.resolve(final String peerId)", "testcase": false, "constructor": false, "invocations": ["fromShardIdString", "getShardActorAddress", "getShardName", "getMemberName"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}