{"test_class": {"identifier": "CoreFunctionQueryParamBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CoreFunctionQueryParamBuilder coreFunctionQueryParamBuilder;", "modifier": "", "type": "CoreFunctionQueryParamBuilder", "declarator": "coreFunctionQueryParamBuilder", "var_name": "coreFunctionQueryParamBuilder"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/CoreFunctionQueryParamBuilderTest.java"}, "test_case": {"identifier": "testLogicalExprPassedAsQueryParam", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogicalExprPassedAsQueryParam() {\n        ArrayList values = new ArrayList();\n        values.add(\"value1\");\n        values.add(\"value2\");\n\n        final ColumnFilter filter1 = likeTo(COLUMN_PROCESSNAME, \"%processName%\");\n        final ColumnFilter filter2 = likeTo(COLUMN_PROCESSID, \"%processName%\");\n\n        ArrayList terms = new ArrayList();\n        terms.add(filter1);\n        terms.add(filter2);\n        QueryParam queryParam = new QueryParam(\"\", LogicalExprType.OR.toString(), terms);\n\n        ArrayList queryParams = new ArrayList();\n        queryParams.add(queryParam);\n        coreFunctionQueryParamBuilder = new CoreFunctionQueryParamBuilder(queryParam);\n\n        Object builded = coreFunctionQueryParamBuilder.build();\n\n        assertTrue(builded instanceof LogicalExprFilter);\n        assertEquals(\"(\" + COLUMN_PROCESSNAME + \" like %processName%, true OR \" + COLUMN_PROCESSID + \" like %processName%, true)\", builded.toString());\n    }", "signature": "void testLogicalExprPassedAsQueryParam()", "full_signature": "@Test public void testLogicalExprPassedAsQueryParam()", "class_method_signature": "CoreFunctionQueryParamBuilderTest.testLogicalExprPassedAsQueryParam()", "testcase": true, "constructor": false, "invocations": ["add", "add", "likeTo", "likeTo", "add", "add", "toString", "add", "build", "assertTrue", "assertEquals", "toString"]}, "focal_class": {"identifier": "CoreFunctionQueryParamBuilder", "superclass": "", "interfaces": "implements QueryParamBuilder<Object>", "fields": [{"original_string": "private QueryParam[] filterParams;", "modifier": "private", "type": "QueryParam[]", "declarator": "filterParams", "var_name": "filterParams"}, {"original_string": "private int index = 0;", "modifier": "private", "type": "int", "declarator": "index = 0", "var_name": "index"}], "methods": [{"identifier": "CoreFunctionQueryParamBuilder", "parameters": "(QueryParam...filterParams)", "modifiers": "public", "return": "", "signature": " CoreFunctionQueryParamBuilder(QueryParam...filterParams)", "full_signature": "public  CoreFunctionQueryParamBuilder(QueryParam...filterParams)", "class_method_signature": "CoreFunctionQueryParamBuilder.CoreFunctionQueryParamBuilder(QueryParam...filterParams)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object build()", "full_signature": "@Override public Object build()", "class_method_signature": "CoreFunctionQueryParamBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "buildExpressionColumnFilter", "parameters": "(Object paramValue)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ColumnFilter", "signature": "ColumnFilter buildExpressionColumnFilter(Object paramValue)", "full_signature": "@SuppressWarnings(\"unchecked\") private ColumnFilter buildExpressionColumnFilter(Object paramValue)", "class_method_signature": "CoreFunctionQueryParamBuilder.buildExpressionColumnFilter(Object paramValue)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/CoreFunctionQueryParamBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object build() {\n        if (filterParams.length == 0 || filterParams.length <= index) {\n            return null;\n        }\n        QueryParam param = filterParams[index];\n        index++;\n        if (\"group\".equalsIgnoreCase(param.getOperator())) {\n            // if operator is group consider it as group functions\n            if (param.getValue().size() > 1) {\n                return new GroupColumnFilter(param.getColumn(), (String)param.getValue().get(0), (String)param.getValue().get(1), (Integer)param.getValue().get(2));\n            } else {\n                return new GroupColumnFilter(param.getColumn(), (String)param.getValue().get(0), null, -1);\n            }\n        }\n\n        ColumnFilter filter = buildExpressionColumnFilter(param);\n        if (filter != null) {\n            return filter;\n        }\n\n        // check aggregate functions\n        AggregateFunctionType aggregationType = AggregateFunctionType.getByName(param.getOperator());\n        \n        if (aggregationType != null) {\n            return new AggregateColumnFilter(aggregationType, param.getColumn(), (String)param.getValue().get(0));\n        }\n\n        return new ExtraColumnFilter(param.getColumn(), (String)param.getValue().get(0));\n    }", "signature": "Object build()", "full_signature": "@Override public Object build()", "class_method_signature": "CoreFunctionQueryParamBuilder.build()", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getOperator", "size", "getValue", "getColumn", "get", "getValue", "get", "getValue", "get", "getValue", "getColumn", "get", "getValue", "buildExpressionColumnFilter", "getByName", "getOperator", "getColumn", "get", "getValue", "getColumn", "get", "getValue"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}