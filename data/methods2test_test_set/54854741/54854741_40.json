{"test_class": {"identifier": "SgmlReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "services/src/test/java/com/greensopinion/finance/services/transaction/SgmlReaderTest.java"}, "test_case": {"identifier": "malformedUnexpectedWhitespaceInOpenTag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void malformedUnexpectedWhitespaceInOpenTag() throws IOException {\n\t\tSgmlReader reader = newReader(\"< A\");\n\t\tthrown.expect(InvalidFileFormatException.class);\n\t\treader.readToken();\n\t}", "signature": "void malformedUnexpectedWhitespaceInOpenTag()", "full_signature": "@Test public void malformedUnexpectedWhitespaceInOpenTag()", "class_method_signature": "SgmlReaderTest.malformedUnexpectedWhitespaceInOpenTag()", "testcase": true, "constructor": false, "invocations": ["newReader", "expect", "readToken"]}, "focal_class": {"identifier": "SgmlReader", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private final PushbackReader reader;", "modifier": "private final", "type": "PushbackReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final StringBuilder buffer = new StringBuilder();", "modifier": "private final", "type": "StringBuilder", "declarator": "buffer = new StringBuilder()", "var_name": "buffer"}], "methods": [{"identifier": "SgmlReader", "parameters": "(Reader reader)", "modifiers": "public", "return": "", "signature": " SgmlReader(Reader reader)", "full_signature": "public  SgmlReader(Reader reader)", "class_method_signature": "SgmlReader.SgmlReader(Reader reader)", "testcase": false, "constructor": true}, {"identifier": "readToken", "parameters": "()", "modifiers": "public", "return": "Token", "signature": "Token readToken()", "full_signature": "public Token readToken()", "class_method_signature": "SgmlReader.readToken()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SgmlReader.close()", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/transaction/SgmlReader.java"}, "focal_method": {"identifier": "readToken", "parameters": "()", "modifiers": "public", "return": "Token", "body": "public Token readToken() throws IOException {\n\t\tbuffer.delete(0, buffer.length());\n\t\tTokenType tokenType = null;\n\t\tint c;\n\t\twhile ((c = reader.read()) != -1) {\n\t\t\tswitch (c) {\n\t\t\tcase '<':\n\t\t\t\tif (tokenType == null) {\n\t\t\t\t\ttokenType = TokenType.OPEN_TAG;\n\t\t\t\t} else if (tokenType == TokenType.DATA) {\n\t\t\t\t\treader.unread(c);\n\t\t\t\t\treturn new Token(tokenType, buffer.toString().trim());\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidFileFormatException(\"Unexpected character '<'\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\tif (tokenType == TokenType.OPEN_TAG && buffer.toString().trim().length() == 0) {\n\t\t\t\t\ttokenType = TokenType.CLOSE_TAG;\n\t\t\t\t} else if (tokenType == TokenType.DATA) {\n\t\t\t\t\tbuffer.append((char) c);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidFileFormatException(\"Unexpected character '/'\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (tokenType == TokenType.OPEN_TAG || tokenType == TokenType.CLOSE_TAG) {\n\t\t\t\t\tString tagName = buffer.toString();\n\t\t\t\t\tif (tagName.length() == 0) {\n\t\t\t\t\t\tthrow new InvalidFileFormatException(format(\"Invalid tag \\\"{0}\\\"\", tagName));\n\t\t\t\t\t}\n\t\t\t\t\treturn new Token(tokenType, tagName);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidFileFormatException(\"Unexpected character '>'\");\n\t\t\t\t}\n\t\t\tcase '&':\n\t\t\t\tString entity = \"\";\n\t\t\t\twhile ((c = reader.read()) != -1 && c != ';') {\n\t\t\t\t\tentity += (char) c;\n\t\t\t\t}\n\t\t\t\tif (tokenType == null) {\n\t\t\t\t\ttokenType = TokenType.DATA;\n\t\t\t\t}\n\t\t\t\tbuffer.append(EntityReferences.instance().namedEntityToString(entity));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tboolean isWhitespace = Character.isWhitespace((char) c);\n\t\t\t\tif (tokenType == null) {\n\t\t\t\t\tif (!isWhitespace) {\n\t\t\t\t\t\ttokenType = TokenType.DATA;\n\t\t\t\t\t\tbuffer.append((char) c);\n\t\t\t\t\t}\n\t\t\t\t} else if ((tokenType == TokenType.OPEN_TAG || tokenType == TokenType.CLOSE_TAG) && isWhitespace) {\n\t\t\t\t\tthrow new InvalidFileFormatException(\"Unexpected whitespace\");\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append((char) c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (tokenType == TokenType.DATA) {\n\t\t\treturn new Token(tokenType, buffer.toString().trim());\n\t\t} else if (tokenType != null) {\n\t\t\tthrow new InvalidFileFormatException(\"Unexpected end of data\");\n\t\t}\n\t\treturn null;\n\t}", "signature": "Token readToken()", "full_signature": "public Token readToken()", "class_method_signature": "SgmlReader.readToken()", "testcase": false, "constructor": false, "invocations": ["delete", "length", "read", "unread", "trim", "toString", "length", "trim", "toString", "append", "toString", "length", "format", "read", "append", "namedEntityToString", "instance", "isWhitespace", "append", "append", "trim", "toString"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}