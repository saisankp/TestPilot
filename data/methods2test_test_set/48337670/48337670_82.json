{"test_class": {"identifier": "ThingHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"binding:type\");", "modifier": "private static final", "type": "ThingTypeUID", "declarator": "THING_TYPE_UID = new ThingTypeUID(\"binding:type\")", "var_name": "THING_TYPE_UID"}, {"original_string": "private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"thingId\");", "modifier": "private static final", "type": "ThingUID", "declarator": "THING_UID = new ThingUID(THING_TYPE_UID, \"thingId\")", "var_name": "THING_UID"}], "file": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/util/ThingHelperTest.java"}, "test_case": {"identifier": "twoThingsAreDifferentAfterLocationWasModified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoThingsAreDifferentAfterLocationWasModified() {\n        Thing thingA = ThingBuilder.create(THING_TYPE_UID, THING_UID).withConfiguration(new Configuration())\n                .withLocation(\"foo\").build();\n        Thing thingB = ThingBuilder.create(THING_TYPE_UID, THING_UID).withConfiguration(new Configuration())\n                .withLocation(\"foo\").build();\n\n        assertTrue(ThingHelper.equals(thingA, thingB));\n\n        thingB.setLocation(\"bar\");\n\n        assertFalse(ThingHelper.equals(thingA, thingB));\n    }", "signature": "void twoThingsAreDifferentAfterLocationWasModified()", "full_signature": "@Test public void twoThingsAreDifferentAfterLocationWasModified()", "class_method_signature": "ThingHelperTest.twoThingsAreDifferentAfterLocationWasModified()", "testcase": true, "constructor": false, "invocations": ["build", "withLocation", "withConfiguration", "create", "build", "withLocation", "withConfiguration", "create", "assertTrue", "equals", "setLocation", "assertFalse", "equals"]}, "focal_class": {"identifier": "ThingHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "equals", "parameters": "(Thing a, Thing b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Thing a, Thing b)", "full_signature": "public static boolean equals(Thing a, Thing b)", "class_method_signature": "ThingHelper.equals(Thing a, Thing b)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(List<Channel> channels)", "modifiers": "private static", "return": "String", "signature": "String toString(List<Channel> channels)", "full_signature": "private static String toString(List<Channel> channels)", "class_method_signature": "ThingHelper.toString(List<Channel> channels)", "testcase": false, "constructor": false}, {"identifier": "addChannelsToThing", "parameters": "(Thing thing, Collection<Channel> channels)", "modifiers": "public static", "return": "void", "signature": "void addChannelsToThing(Thing thing, Collection<Channel> channels)", "full_signature": "public static void addChannelsToThing(Thing thing, Collection<Channel> channels)", "class_method_signature": "ThingHelper.addChannelsToThing(Thing thing, Collection<Channel> channels)", "testcase": false, "constructor": false}, {"identifier": "ensureUniqueChannels", "parameters": "(final Channel[] channels)", "modifiers": "public static", "return": "void", "signature": "void ensureUniqueChannels(final Channel[] channels)", "full_signature": "public static void ensureUniqueChannels(final Channel[] channels)", "class_method_signature": "ThingHelper.ensureUniqueChannels(final Channel[] channels)", "testcase": false, "constructor": false}, {"identifier": "ensureUniqueChannels", "parameters": "(final Collection<Channel> channels)", "modifiers": "public static", "return": "void", "signature": "void ensureUniqueChannels(final Collection<Channel> channels)", "full_signature": "public static void ensureUniqueChannels(final Collection<Channel> channels)", "class_method_signature": "ThingHelper.ensureUniqueChannels(final Collection<Channel> channels)", "testcase": false, "constructor": false}, {"identifier": "ensureUniqueChannels", "parameters": "(final Collection<Channel> channels, final Channel channel)", "modifiers": "public static", "return": "void", "signature": "void ensureUniqueChannels(final Collection<Channel> channels, final Channel channel)", "full_signature": "public static void ensureUniqueChannels(final Collection<Channel> channels, final Channel channel)", "class_method_signature": "ThingHelper.ensureUniqueChannels(final Collection<Channel> channels, final Channel channel)", "testcase": false, "constructor": false}, {"identifier": "ensureUniqueChannels", "parameters": "(final Collection<Channel> channels1, final Collection<Channel> channels2)", "modifiers": "private static", "return": "void", "signature": "void ensureUniqueChannels(final Collection<Channel> channels1, final Collection<Channel> channels2)", "full_signature": "private static void ensureUniqueChannels(final Collection<Channel> channels1, final Collection<Channel> channels2)", "class_method_signature": "ThingHelper.ensureUniqueChannels(final Collection<Channel> channels1, final Collection<Channel> channels2)", "testcase": false, "constructor": false}, {"identifier": "ensureUniqueChannels", "parameters": "(final Iterator<Channel> channels, final Set<UID> ids)", "modifiers": "private static", "return": "Set<UID>", "signature": "Set<UID> ensureUniqueChannels(final Iterator<Channel> channels, final Set<UID> ids)", "full_signature": "private static Set<UID> ensureUniqueChannels(final Iterator<Channel> channels, final Set<UID> ids)", "class_method_signature": "ThingHelper.ensureUniqueChannels(final Iterator<Channel> channels, final Set<UID> ids)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Thing thing, ThingDTO updatedContents)", "modifiers": "public static", "return": "Thing", "signature": "Thing merge(Thing thing, ThingDTO updatedContents)", "full_signature": "public static Thing merge(Thing thing, ThingDTO updatedContents)", "class_method_signature": "ThingHelper.merge(Thing thing, ThingDTO updatedContents)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/util/ThingHelper.java"}, "focal_method": {"identifier": "equals", "parameters": "(Thing a, Thing b)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals(Thing a, Thing b) {\n        if (!a.getUID().equals(b.getUID())) {\n            return false;\n        }\n        // bridge\n        if (!Objects.equals(a.getBridgeUID(), b.getBridgeUID())) {\n            return false;\n        }\n        // configuration\n        if (!Objects.equals(a.getConfiguration(), b.getConfiguration())) {\n            return false;\n        }\n        // label\n        if (!Objects.equals(a.getLabel(), b.getLabel())) {\n            return false;\n        }\n        // location\n        if (!Objects.equals(a.getLocation(), b.getLocation())) {\n            return false;\n        }\n        // channels\n        List<Channel> channelsOfA = a.getChannels();\n        List<Channel> channelsOfB = b.getChannels();\n        if (channelsOfA.size() != channelsOfB.size()) {\n            return false;\n        }\n        if (!toString(channelsOfA).equals(toString(channelsOfB))) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Thing a, Thing b)", "full_signature": "public static boolean equals(Thing a, Thing b)", "class_method_signature": "ThingHelper.equals(Thing a, Thing b)", "testcase": false, "constructor": false, "invocations": ["equals", "getUID", "getUID", "equals", "getBridgeUID", "getBridgeUID", "equals", "getConfiguration", "getConfiguration", "equals", "getLabel", "getLabel", "equals", "getLocation", "getLocation", "getChannels", "getChannels", "size", "size", "equals", "toString", "toString"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}