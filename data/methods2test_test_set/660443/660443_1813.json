{"test_class": {"identifier": "IsProtonInAromaticSystemDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/IsProtonInAromaticSystemDescriptorTest.java"}, "test_case": {"identifier": "testIsProtonInAromaticSystemDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsProtonInAromaticSystemDescriptor() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        IAtomicDescriptor descriptor = new IsProtonInAromaticSystemDescriptor();\n        Object[] params = {new Boolean(true)};\n        descriptor.setParameters(params);\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"Oc1cc(OC)c(cc1Br)Br\");\n        addExplicitHydrogens(mol);\n        assertThat(mol.getAtom(11).getSymbol(), is(\"H\"));\n        assertThat(mol.getAtom(12).getSymbol(), is(\"H\"));\n        assertThat(mol.getAtom(13).getSymbol(), is(\"H\"));\n        assertThat(mol.getAtom(14).getSymbol(), is(\"H\"));\n        assertThat(mol.getAtom(15).getSymbol(), is(\"H\"));\n        assertThat(mol.getAtom(16).getSymbol(), is(\"H\"));\n        Assert.assertEquals(0, ((IntegerResult) descriptor.calculate(mol.getAtom(11), mol).getValue()).intValue());\n        Assert.assertEquals(1, ((IntegerResult) descriptor.calculate(mol.getAtom(12), mol).getValue()).intValue());\n        Assert.assertEquals(0, ((IntegerResult) descriptor.calculate(mol.getAtom(13), mol).getValue()).intValue());\n        Assert.assertEquals(0, ((IntegerResult) descriptor.calculate(mol.getAtom(14), mol).getValue()).intValue());\n        Assert.assertEquals(0, ((IntegerResult) descriptor.calculate(mol.getAtom(15), mol).getValue()).intValue());\n        Assert.assertEquals(1, ((IntegerResult) descriptor.calculate(mol.getAtom(16), mol).getValue()).intValue());\n    }", "signature": "void testIsProtonInAromaticSystemDescriptor()", "full_signature": "@Test public void testIsProtonInAromaticSystemDescriptor()", "class_method_signature": "IsProtonInAromaticSystemDescriptorTest.testIsProtonInAromaticSystemDescriptor()", "testcase": true, "constructor": false, "invocations": ["setParameters", "getInstance", "parseSmiles", "addExplicitHydrogens", "assertThat", "getSymbol", "getAtom", "is", "assertThat", "getSymbol", "getAtom", "is", "assertThat", "getSymbol", "getAtom", "is", "assertThat", "getSymbol", "getAtom", "is", "assertThat", "getSymbol", "getAtom", "is", "assertThat", "getSymbol", "getAtom", "is", "assertEquals", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "intValue", "getValue", "calculate", "getAtom"]}, "focal_class": {"identifier": "IsProtonInAromaticSystemDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private static final String[] NAMES            = {\"protonInArmaticSystem\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES            = {\"protonInArmaticSystem\"}", "var_name": "NAMES"}, {"original_string": "private boolean               checkAromaticity = false;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity = false", "var_name": "checkAromaticity"}], "methods": [{"identifier": "IsProtonInAromaticSystemDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " IsProtonInAromaticSystemDescriptor()", "full_signature": "public  IsProtonInAromaticSystemDescriptor()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.IsProtonInAromaticSystemDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "IsProtonInAromaticSystemDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer)", "class_method_signature": "IsProtonInAromaticSystemDescriptor.calculate(IAtom atom, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "IsProtonInAromaticSystemDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/IsProtonInAromaticSystemDescriptor.java"}, "focal_method": {"identifier": "IsProtonInAromaticSystemDescriptor", "parameters": "()", "modifiers": "public", "return": "", "body": "public IsProtonInAromaticSystemDescriptor() {}", "signature": " IsProtonInAromaticSystemDescriptor()", "full_signature": "public  IsProtonInAromaticSystemDescriptor()", "class_method_signature": "IsProtonInAromaticSystemDescriptor.IsProtonInAromaticSystemDescriptor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}