{"test_class": {"identifier": "PeriodTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/period/PeriodTypeTest.java"}, "test_case": {"identifier": "testGetPeriodTypeFromIsoString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPeriodTypeFromIsoString()\n    {\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011\" ).getName(), \"Yearly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"201101\" ).getName(), \"Monthly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011W1\" ).getName(), \"Weekly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011W32\" ).getName(), \"Weekly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"20110101\" ).getName(), \"Daily\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011Q3\" ).getName(), \"Quarterly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"201101B\" ).getName(), \"BiMonthly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011S1\" ).getName(), \"SixMonthly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011AprilS1\" ).getName(), \"SixMonthlyApril\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011April\" ).getName(), \"FinancialApril\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011July\" ).getName(), \"FinancialJuly\" );\n        assertEquals( PeriodType.getPeriodTypeFromIsoString( \"2011Oct\" ).getName(), \"FinancialOct\" );\n\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"201\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"20111\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"201W2\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"2011Q12\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"2011W234\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"201er2345566\" ) );\n        assertNull( PeriodType.getPeriodTypeFromIsoString( \"2011Q10\" ) );\n    }", "signature": "void testGetPeriodTypeFromIsoString()", "full_signature": "@Test public void testGetPeriodTypeFromIsoString()", "class_method_signature": "PeriodTypeTest.testGetPeriodTypeFromIsoString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertEquals", "getName", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString", "assertNull", "getPeriodTypeFromIsoString"]}, "focal_class": {"identifier": "PeriodType", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static Cache<Period> PERIOD_CACHE = new SimpleCacheBuilder<Period>()\n        .forRegion( \"periodCache\" )\n        .expireAfterAccess( 12, TimeUnit.HOURS )\n        .withInitialCapacity( 10000 )\n        .withMaximumSize( 30000 )\n        .build();", "modifier": "private static", "type": "Cache<Period>", "declarator": "PERIOD_CACHE = new SimpleCacheBuilder<Period>()\n        .forRegion( \"periodCache\" )\n        .expireAfterAccess( 12, TimeUnit.HOURS )\n        .withInitialCapacity( 10000 )\n        .withMaximumSize( 30000 )\n        .build()", "var_name": "PERIOD_CACHE"}, {"original_string": "private static final long serialVersionUID = 2402122626196305083L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2402122626196305083L", "var_name": "serialVersionUID"}, {"original_string": "private static CalendarService calendarService;", "modifier": "private static", "type": "CalendarService", "declarator": "calendarService", "var_name": "calendarService"}, {"original_string": "protected PeriodTypeParser dateUnitFormat = new DateUnitPeriodTypeParser();", "modifier": "protected", "type": "PeriodTypeParser", "declarator": "dateUnitFormat = new DateUnitPeriodTypeParser()", "var_name": "dateUnitFormat"}, {"original_string": "public static final List<PeriodType> PERIOD_TYPES = Lists.newArrayList(\n        new DailyPeriodType(),\n        new WeeklyPeriodType(),\n        new WeeklyWednesdayPeriodType(),\n        new WeeklyThursdayPeriodType(),\n        new WeeklySaturdayPeriodType(),\n        new WeeklySundayPeriodType(),\n        new BiWeeklyPeriodType(),\n        new MonthlyPeriodType(),\n        new BiMonthlyPeriodType(),\n        new QuarterlyPeriodType(),\n        new SixMonthlyPeriodType(),\n        new SixMonthlyAprilPeriodType(),\n        new SixMonthlyNovemberPeriodType(),\n        new YearlyPeriodType(),\n        new FinancialAprilPeriodType(),\n        new FinancialJulyPeriodType(),\n        new FinancialOctoberPeriodType(),\n        new FinancialNovemberPeriodType() );", "modifier": "public static final", "type": "List<PeriodType>", "declarator": "PERIOD_TYPES = Lists.newArrayList(\n        new DailyPeriodType(),\n        new WeeklyPeriodType(),\n        new WeeklyWednesdayPeriodType(),\n        new WeeklyThursdayPeriodType(),\n        new WeeklySaturdayPeriodType(),\n        new WeeklySundayPeriodType(),\n        new BiWeeklyPeriodType(),\n        new MonthlyPeriodType(),\n        new BiMonthlyPeriodType(),\n        new QuarterlyPeriodType(),\n        new SixMonthlyPeriodType(),\n        new SixMonthlyAprilPeriodType(),\n        new SixMonthlyNovemberPeriodType(),\n        new YearlyPeriodType(),\n        new FinancialAprilPeriodType(),\n        new FinancialJulyPeriodType(),\n        new FinancialOctoberPeriodType(),\n        new FinancialNovemberPeriodType() )", "var_name": "PERIOD_TYPES"}, {"original_string": "public static final Map<String, DayOfWeek> MAP_WEEK_TYPE = ImmutableMap.of(\n        WeeklySundayPeriodType.NAME, DayOfWeek.SUNDAY,\n        WeeklyWednesdayPeriodType.NAME, DayOfWeek.WEDNESDAY,\n        WeeklyThursdayPeriodType.NAME, DayOfWeek.THURSDAY,\n        WeeklySaturdayPeriodType.NAME, DayOfWeek.SATURDAY,\n        WeeklyPeriodType.NAME, DayOfWeek.MONDAY );", "modifier": "public static final", "type": "Map<String, DayOfWeek>", "declarator": "MAP_WEEK_TYPE = ImmutableMap.of(\n        WeeklySundayPeriodType.NAME, DayOfWeek.SUNDAY,\n        WeeklyWednesdayPeriodType.NAME, DayOfWeek.WEDNESDAY,\n        WeeklyThursdayPeriodType.NAME, DayOfWeek.THURSDAY,\n        WeeklySaturdayPeriodType.NAME, DayOfWeek.SATURDAY,\n        WeeklyPeriodType.NAME, DayOfWeek.MONDAY )", "var_name": "MAP_WEEK_TYPE"}, {"original_string": "private static final Map<String, PeriodType> PERIOD_TYPE_MAP = Maps.uniqueIndex( PERIOD_TYPES, pt -> pt.getName() );", "modifier": "private static final", "type": "Map<String, PeriodType>", "declarator": "PERIOD_TYPE_MAP = Maps.uniqueIndex( PERIOD_TYPES, pt -> pt.getName() )", "var_name": "PERIOD_TYPE_MAP"}, {"original_string": "private int id;", "modifier": "private", "type": "int", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "getCacheKey", "parameters": "( Date date )", "modifiers": "private", "return": "String", "signature": "String getCacheKey( Date date )", "full_signature": "private String getCacheKey( Date date )", "class_method_signature": "PeriodType.getCacheKey( Date date )", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "( org.hisp.dhis.calendar.Calendar calendar, Date date )", "modifiers": "private", "return": "String", "signature": "String getCacheKey( org.hisp.dhis.calendar.Calendar calendar, Date date )", "full_signature": "private String getCacheKey( org.hisp.dhis.calendar.Calendar calendar, Date date )", "class_method_signature": "PeriodType.getCacheKey( org.hisp.dhis.calendar.Calendar calendar, Date date )", "testcase": false, "constructor": false}, {"identifier": "invalidatePeriodCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void invalidatePeriodCache()", "full_signature": "public static void invalidatePeriodCache()", "class_method_signature": "PeriodType.invalidatePeriodCache()", "testcase": false, "constructor": false}, {"identifier": "setCalendarService", "parameters": "( CalendarService calendarService )", "modifiers": "public static", "return": "void", "signature": "void setCalendarService( CalendarService calendarService )", "full_signature": "public static void setCalendarService( CalendarService calendarService )", "class_method_signature": "PeriodType.setCalendarService( CalendarService calendarService )", "testcase": false, "constructor": false}, {"identifier": "getCalendarService", "parameters": "()", "modifiers": "public static", "return": "CalendarService", "signature": "CalendarService getCalendarService()", "full_signature": "public static CalendarService getCalendarService()", "class_method_signature": "PeriodType.getCalendarService()", "testcase": false, "constructor": false}, {"identifier": "getCalendar", "parameters": "()", "modifiers": "public static", "return": "org.hisp.dhis.calendar.Calendar", "signature": "org.hisp.dhis.calendar.Calendar getCalendar()", "full_signature": "public static org.hisp.dhis.calendar.Calendar getCalendar()", "class_method_signature": "PeriodType.getCalendar()", "testcase": false, "constructor": false}, {"identifier": "getAvailablePeriodTypes", "parameters": "()", "modifiers": "public static", "return": "List<PeriodType>", "signature": "List<PeriodType> getAvailablePeriodTypes()", "full_signature": "public static List<PeriodType> getAvailablePeriodTypes()", "class_method_signature": "PeriodType.getAvailablePeriodTypes()", "testcase": false, "constructor": false}, {"identifier": "getPeriodTypeByName", "parameters": "( String name )", "modifiers": "public static", "return": "PeriodType", "signature": "PeriodType getPeriodTypeByName( String name )", "full_signature": "public static PeriodType getPeriodTypeByName( String name )", "class_method_signature": "PeriodType.getPeriodTypeByName( String name )", "testcase": false, "constructor": false}, {"identifier": "getByNameIgnoreCase", "parameters": "( String name )", "modifiers": "public static", "return": "PeriodType", "signature": "PeriodType getByNameIgnoreCase( String name )", "full_signature": "public static PeriodType getByNameIgnoreCase( String name )", "class_method_signature": "PeriodType.getByNameIgnoreCase( String name )", "testcase": false, "constructor": false}, {"identifier": "getByIndex", "parameters": "( int index )", "modifiers": "public static", "return": "PeriodType", "signature": "PeriodType getByIndex( int index )", "full_signature": "public static PeriodType getByIndex( int index )", "class_method_signature": "PeriodType.getByIndex( int index )", "testcase": false, "constructor": false}, {"identifier": "getPeriodTypePeriods", "parameters": "( Period period, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public static", "return": "List<Period>", "signature": "List<Period> getPeriodTypePeriods( Period period, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public static List<Period> getPeriodTypePeriods( Period period, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.getPeriodTypePeriods( Period period, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "( int id )", "modifiers": "public", "return": "void", "signature": "void setId( int id )", "full_signature": "public void setId( int id )", "class_method_signature": "PeriodType.setId( int id )", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "PeriodType.getId()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getName()", "full_signature": "public abstract String getName()", "class_method_signature": "PeriodType.getName()", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period createPeriod()", "full_signature": "public Period createPeriod()", "class_method_signature": "PeriodType.createPeriod()", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( final Date date )", "modifiers": "public", "return": "Period", "signature": "Period createPeriod( final Date date )", "full_signature": "public Period createPeriod( final Date date )", "class_method_signature": "PeriodType.createPeriod( final Date date )", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( Calendar cal )", "modifiers": "public", "return": "Period", "signature": "Period createPeriod( Calendar cal )", "full_signature": "public Period createPeriod( Calendar cal )", "class_method_signature": "PeriodType.createPeriod( Calendar cal )", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( final Date date, final org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public", "return": "Period", "signature": "Period createPeriod( final Date date, final org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public Period createPeriod( final Date date, final org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.createPeriod( final Date date, final org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "toIsoPeriod", "parameters": "( DateTimeUnit start, DateTimeUnit end )", "modifiers": "public", "return": "Period", "signature": "Period toIsoPeriod( DateTimeUnit start, DateTimeUnit end )", "full_signature": "public Period toIsoPeriod( DateTimeUnit start, DateTimeUnit end )", "class_method_signature": "PeriodType.toIsoPeriod( DateTimeUnit start, DateTimeUnit end )", "testcase": false, "constructor": false}, {"identifier": "toIsoPeriod", "parameters": "( DateTimeUnit start, DateTimeUnit end, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "protected", "return": "Period", "signature": "Period toIsoPeriod( DateTimeUnit start, DateTimeUnit end, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "protected Period toIsoPeriod( DateTimeUnit start, DateTimeUnit end, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.toIsoPeriod( DateTimeUnit start, DateTimeUnit end, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "toIsoPeriod", "parameters": "( DateTimeUnit dateTimeUnit )", "modifiers": "public", "return": "Period", "signature": "Period toIsoPeriod( DateTimeUnit dateTimeUnit )", "full_signature": "public Period toIsoPeriod( DateTimeUnit dateTimeUnit )", "class_method_signature": "PeriodType.toIsoPeriod( DateTimeUnit dateTimeUnit )", "testcase": false, "constructor": false}, {"identifier": "getIso8601Duration", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getIso8601Duration()", "full_signature": "public abstract String getIso8601Duration()", "class_method_signature": "PeriodType.getIso8601Duration()", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public abstract", "return": "Period", "signature": "Period createPeriod( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public abstract Period createPeriod( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.createPeriod( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getFrequencyOrder", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int getFrequencyOrder()", "full_signature": "public abstract int getFrequencyOrder()", "class_method_signature": "PeriodType.getFrequencyOrder()", "testcase": false, "constructor": false}, {"identifier": "getSqlInterval", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getSqlInterval()", "full_signature": "public abstract String getSqlInterval()", "class_method_signature": "PeriodType.getSqlInterval()", "testcase": false, "constructor": false}, {"identifier": "getRewindedDate", "parameters": "( Date date, Integer rewindedPeriods )", "modifiers": "public abstract", "return": "Date", "signature": "Date getRewindedDate( Date date, Integer rewindedPeriods )", "full_signature": "public abstract Date getRewindedDate( Date date, Integer rewindedPeriods )", "class_method_signature": "PeriodType.getRewindedDate( Date date, Integer rewindedPeriods )", "testcase": false, "constructor": false}, {"identifier": "createCalendarInstance", "parameters": "()", "modifiers": "public static", "return": "Calendar", "signature": "Calendar createCalendarInstance()", "full_signature": "public static Calendar createCalendarInstance()", "class_method_signature": "PeriodType.createCalendarInstance()", "testcase": false, "constructor": false}, {"identifier": "createCalendarInstance", "parameters": "( Date date )", "modifiers": "public static", "return": "Calendar", "signature": "Calendar createCalendarInstance( Date date )", "full_signature": "public static Calendar createCalendarInstance( Date date )", "class_method_signature": "PeriodType.createCalendarInstance( Date date )", "testcase": false, "constructor": false}, {"identifier": "createLocalDateUnitInstance", "parameters": "( Date date )", "modifiers": "public static", "return": "DateTimeUnit", "signature": "DateTimeUnit createLocalDateUnitInstance( Date date )", "full_signature": "public static DateTimeUnit createLocalDateUnitInstance( Date date )", "class_method_signature": "PeriodType.createLocalDateUnitInstance( Date date )", "testcase": false, "constructor": false}, {"identifier": "createLocalDateUnitInstance", "parameters": "( Date date, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public static", "return": "DateTimeUnit", "signature": "DateTimeUnit createLocalDateUnitInstance( Date date, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public static DateTimeUnit createLocalDateUnitInstance( Date date, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.createLocalDateUnitInstance( Date date, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "clearTimeOfDay", "parameters": "( Calendar calendar )", "modifiers": "public static", "return": "void", "signature": "void clearTimeOfDay( Calendar calendar )", "full_signature": "public static void clearTimeOfDay( Calendar calendar )", "class_method_signature": "PeriodType.clearTimeOfDay( Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getPeriodTypeFromIsoString", "parameters": "( String isoPeriod )", "modifiers": "public static", "return": "PeriodType", "signature": "PeriodType getPeriodTypeFromIsoString( String isoPeriod )", "full_signature": "public static PeriodType getPeriodTypeFromIsoString( String isoPeriod )", "class_method_signature": "PeriodType.getPeriodTypeFromIsoString( String isoPeriod )", "testcase": false, "constructor": false}, {"identifier": "getPeriodFromIsoString", "parameters": "( String isoPeriod )", "modifiers": "public static", "return": "Period", "signature": "Period getPeriodFromIsoString( String isoPeriod )", "full_signature": "public static Period getPeriodFromIsoString( String isoPeriod )", "class_method_signature": "PeriodType.getPeriodFromIsoString( String isoPeriod )", "testcase": false, "constructor": false}, {"identifier": "getPeriodsFromIsoStrings", "parameters": "( List<String> isoPeriods )", "modifiers": "public static", "return": "List<Period>", "signature": "List<Period> getPeriodsFromIsoStrings( List<String> isoPeriods )", "full_signature": "public static List<Period> getPeriodsFromIsoStrings( List<String> isoPeriods )", "class_method_signature": "PeriodType.getPeriodsFromIsoStrings( List<String> isoPeriods )", "testcase": false, "constructor": false}, {"identifier": "getPeriodSpan", "parameters": "( PeriodType type )", "modifiers": "public", "return": "int", "signature": "int getPeriodSpan( PeriodType type )", "full_signature": "public int getPeriodSpan( PeriodType type )", "class_method_signature": "PeriodType.getPeriodSpan( PeriodType type )", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( DateInterval dateInterval )", "modifiers": "public", "return": "Period", "signature": "Period createPeriod( DateInterval dateInterval )", "full_signature": "public Period createPeriod( DateInterval dateInterval )", "class_method_signature": "PeriodType.createPeriod( DateInterval dateInterval )", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( Period period )", "modifiers": "public", "return": "String", "signature": "String getIsoDate( Period period )", "full_signature": "public String getIsoDate( Period period )", "class_method_signature": "PeriodType.getIsoDate( Period period )", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit )", "modifiers": "public", "return": "String", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit )", "full_signature": "public String getIsoDate( DateTimeUnit dateTimeUnit )", "class_method_signature": "PeriodType.getIsoDate( DateTimeUnit dateTimeUnit )", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public abstract", "return": "String", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public abstract String getIsoDate( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.getIsoDate( DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "createPeriod", "parameters": "( String isoDate )", "modifiers": "public", "return": "Period", "signature": "Period createPeriod( String isoDate )", "full_signature": "public Period createPeriod( String isoDate )", "class_method_signature": "PeriodType.createPeriod( String isoDate )", "testcase": false, "constructor": false}, {"identifier": "getIsoFormat", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getIsoFormat()", "full_signature": "public abstract String getIsoFormat()", "class_method_signature": "PeriodType.getIsoFormat()", "testcase": false, "constructor": false}, {"identifier": "getNextPeriod", "parameters": "( Period period )", "modifiers": "public final", "return": "Period", "signature": "Period getNextPeriod( Period period )", "full_signature": "public final Period getNextPeriod( Period period )", "class_method_signature": "PeriodType.getNextPeriod( Period period )", "testcase": false, "constructor": false}, {"identifier": "getNextPeriod", "parameters": "( Period period, int periods )", "modifiers": "public", "return": "Period", "signature": "Period getNextPeriod( Period period, int periods )", "full_signature": "public Period getNextPeriod( Period period, int periods )", "class_method_signature": "PeriodType.getNextPeriod( Period period, int periods )", "testcase": false, "constructor": false}, {"identifier": "getNextPeriod", "parameters": "( Period period, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public", "return": "Period", "signature": "Period getNextPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public Period getNextPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.getNextPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getPreviousPeriod", "parameters": "( Period period )", "modifiers": "public final", "return": "Period", "signature": "Period getPreviousPeriod( Period period )", "full_signature": "public final Period getPreviousPeriod( Period period )", "class_method_signature": "PeriodType.getPreviousPeriod( Period period )", "testcase": false, "constructor": false}, {"identifier": "getPreviousPeriod", "parameters": "( Period period, int periods )", "modifiers": "public", "return": "Period", "signature": "Period getPreviousPeriod( Period period, int periods )", "full_signature": "public Period getPreviousPeriod( Period period, int periods )", "class_method_signature": "PeriodType.getPreviousPeriod( Period period, int periods )", "testcase": false, "constructor": false}, {"identifier": "getPreviousPeriod", "parameters": "( Period period, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "public", "return": "Period", "signature": "Period getPreviousPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "public Period getPreviousPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.getPreviousPeriod( Period period, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getPreviousYearsPeriod", "parameters": "( Period period, int yearCount )", "modifiers": "public", "return": "Period", "signature": "Period getPreviousYearsPeriod( Period period, int yearCount )", "full_signature": "public Period getPreviousYearsPeriod( Period period, int yearCount )", "class_method_signature": "PeriodType.getPreviousYearsPeriod( Period period, int yearCount )", "testcase": false, "constructor": false}, {"identifier": "getDateWithOffset", "parameters": "( DateTimeUnit dateTimeUnit, int offset, org.hisp.dhis.calendar.Calendar calendar )", "modifiers": "protected abstract", "return": "DateTimeUnit", "signature": "DateTimeUnit getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, org.hisp.dhis.calendar.Calendar calendar )", "full_signature": "protected abstract DateTimeUnit getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, org.hisp.dhis.calendar.Calendar calendar )", "class_method_signature": "PeriodType.getDateWithOffset( DateTimeUnit dateTimeUnit, int offset, org.hisp.dhis.calendar.Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getDateWithOffset", "parameters": "( Date date, int offset )", "modifiers": "public", "return": "Date", "signature": "Date getDateWithOffset( Date date, int offset )", "full_signature": "public Date getDateWithOffset( Date date, int offset )", "class_method_signature": "PeriodType.getDateWithOffset( Date date, int offset )", "testcase": false, "constructor": false}, {"identifier": "spansMultipleCalendarYears", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean spansMultipleCalendarYears()", "full_signature": "public boolean spansMultipleCalendarYears()", "class_method_signature": "PeriodType.spansMultipleCalendarYears()", "testcase": false, "constructor": false}, {"identifier": "equalsName", "parameters": "( String periodTypeName )", "modifiers": "public", "return": "boolean", "signature": "boolean equalsName( String periodTypeName )", "full_signature": "public boolean equalsName( String periodTypeName )", "class_method_signature": "PeriodType.equalsName( String periodTypeName )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PeriodType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object o )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object o )", "full_signature": "@Override public boolean equals( Object o )", "class_method_signature": "PeriodType.equals( Object o )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PeriodType.toString()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/PeriodType.java"}, "focal_method": {"identifier": "getPeriodTypeFromIsoString", "parameters": "( String isoPeriod )", "modifiers": "public static", "return": "PeriodType", "body": "public static PeriodType getPeriodTypeFromIsoString( String isoPeriod )\n    {\n        DateUnitType dateUnitType = DateUnitType.find( isoPeriod );\n        return dateUnitType != null ? PERIOD_TYPE_MAP.get( dateUnitType.getName() ) : null;\n    }", "signature": "PeriodType getPeriodTypeFromIsoString( String isoPeriod )", "full_signature": "public static PeriodType getPeriodTypeFromIsoString( String isoPeriod )", "class_method_signature": "PeriodType.getPeriodTypeFromIsoString( String isoPeriod )", "testcase": false, "constructor": false, "invocations": ["find", "get", "getName"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}