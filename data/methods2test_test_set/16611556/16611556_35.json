{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/util/UtilsTest.java"}, "test_case": {"identifier": "getMethodArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMethodArgs() throws Exception {\n        final Object[] answer = new Object[] { \"blue\", \"bubba\" };\n        final Object[] args = new Object[] { null, \"bubba\", \"blue\" };\n\n        final Method method = AOPTargetClass1.class.getDeclaredMethod(\"doIt\", String.class, String.class, String.class);\n\n        try {\n            Utils.getMethodArgs(Arrays.asList(1, -1), args, method.toString());\n            fail(\"Expected Exception\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"is invalid\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            Utils.getMethodArgs(Arrays.asList(2, 3), args, method.toString());\n            fail(\"Expected Exception\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"too big\") != -1);\n            System.out.println(ex.getMessage());\n        }\n        try {\n            Utils.getMethodArgs(Arrays.asList(4, 0), args, method.toString());\n            fail(\"Expected Exception\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"too big\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            Utils.getMethodArgs(Arrays.asList(1, 0), args, method.toString());\n            fail(\"Expected Exception\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"null\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        assertArrayEquals(answer, Utils.getMethodArgs(Arrays.asList(2, 1), args, method.toString()));\n    }", "signature": "void getMethodArgs()", "full_signature": "@Test public void getMethodArgs()", "class_method_signature": "UtilsTest.getMethodArgs()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "getMethodArgs", "asList", "toString", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getMethodArgs", "asList", "toString", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getMethodArgs", "asList", "toString", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getMethodArgs", "asList", "toString", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "assertArrayEquals", "getMethodArgs", "asList", "toString"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "getMethodArg", "parameters": "(final int index, final Object[] args, final String methodDesc)", "modifiers": "public static", "return": "Object", "signature": "Object getMethodArg(final int index, final Object[] args, final String methodDesc)", "full_signature": "public static Object getMethodArg(final int index, final Object[] args, final String methodDesc)", "class_method_signature": "Utils.getMethodArg(final int index, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getMethodArgs", "parameters": "(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "full_signature": "public static Object[] getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "class_method_signature": "Utils.getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterTypes", "parameters": "(final Collection<Integer> indexes, final Method method)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getMethodParameterTypes(final Collection<Integer> indexes, final Method method)", "full_signature": "public static Class<?>[] getMethodParameterTypes(final Collection<Integer> indexes, final Method method)", "class_method_signature": "Utils.getMethodParameterTypes(final Collection<Integer> indexes, final Method method)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/util/Utils.java"}, "focal_method": {"identifier": "getMethodArgs", "parameters": "(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "modifiers": "public static", "return": "Object[]", "body": "public static Object[] getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc) {\n        Object[] selectedArgs = new Object[indexes.size()];\n        Iterator<Integer> iter = indexes.iterator();\n        for (int i = 0; i < indexes.size(); i++) {\n            selectedArgs[i] = getMethodArg(iter.next(), args, methodDesc);\n        }\n\n        return selectedArgs;\n    }", "signature": "Object[] getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "full_signature": "public static Object[] getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "class_method_signature": "Utils.getMethodArgs(final Collection<Integer> indexes, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false, "invocations": ["size", "iterator", "size", "getMethodArg", "next"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}