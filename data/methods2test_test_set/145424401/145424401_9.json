{"test_class": {"identifier": "SpaceControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MediaType contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"));", "modifier": "private", "type": "MediaType", "declarator": "contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"))", "var_name": "contentType"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private HttpMessageConverter<?> mappingJackson2HttpMessageConverter;", "modifier": "private", "type": "HttpMessageConverter<?>", "declarator": "mappingJackson2HttpMessageConverter", "var_name": "mappingJackson2HttpMessageConverter"}, {"original_string": "public static final String TEST_DEFAULT_SPACE = \"public\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_SPACE = \"public\"", "var_name": "TEST_DEFAULT_SPACE"}, {"original_string": "public static final String TEST_DEFAULT_TENANT = \"default\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_TENANT = \"default\"", "var_name": "TEST_DEFAULT_TENANT"}, {"original_string": "@Autowired private SpaceRepository spaceRepository;", "modifier": "@Autowired private", "type": "SpaceRepository", "declarator": "spaceRepository", "var_name": "spaceRepository"}, {"original_string": "@Autowired private TenantRepository tenantRepository;", "modifier": "@Autowired private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "@Autowired private WebApplicationContext webApplicationContext;", "modifier": "@Autowired private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/rest/SpaceControllerTest.java"}, "test_case": {"identifier": "testReadOnlySpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadOnlySpace() throws Exception {\n    assertEquals(0, this.spaceRepository.count());\n    final Tenant d_tenant = this.createDefaultTenant();\n    final Space d_space = this.createSpace(d_tenant, TEST_DEFAULT_SPACE, true);\n    assertEquals(1, this.spaceRepository.count());\n\n    // Change to read-only (should work)\n    d_space.setReadOnly(true);\n    MockHttpServletRequestBuilder post_builder =\n        put(\"/spaces/\" + d_space.getSpaceToken())\n            .content(JacksonUtil.asJsonString(d_space))\n            .contentType(MediaType.APPLICATION_JSON)\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    mockMvc\n        .perform(post_builder)\n        .andExpect(status().isOk())\n        .andExpect(content().contentType(contentType))\n        .andExpect(jsonPath(\"$.default\", is(true)))\n        .andExpect(jsonPath(\"$.spaceName\", is(TEST_DEFAULT_SPACE)));\n\n    // Change to read-write (should fail)\n    d_space.setReadOnly(false);\n    post_builder =\n        put(\"/spaces/\" + d_space.getSpaceToken())\n            .content(JacksonUtil.asJsonString(d_space))\n            .contentType(MediaType.APPLICATION_JSON)\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    mockMvc.perform(post_builder).andExpect(status().isBadRequest());\n  }", "signature": "void testReadOnlySpace()", "full_signature": "@Test public void testReadOnlySpace()", "class_method_signature": "SpaceControllerTest.testReadOnlySpace()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "count", "createDefaultTenant", "createSpace", "assertEquals", "count", "setReadOnly", "accept", "header", "contentType", "content", "put", "getSpaceToken", "asJsonString", "getTenantToken", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "isOk", "status", "contentType", "content", "jsonPath", "is", "jsonPath", "is", "setReadOnly", "accept", "header", "contentType", "content", "put", "getSpaceToken", "asJsonString", "getTenantToken", "andExpect", "perform", "isBadRequest", "status"]}, "focal_class": {"identifier": "SpaceController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(SpaceController.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SpaceController.class)", "var_name": "log"}, {"original_string": "private static String SPACE_DO_NOT_DELETE = \"vulas.backend.space.doNotDelete\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_DELETE = \"vulas.backend.space.doNotDelete\"", "var_name": "SPACE_DO_NOT_DELETE"}, {"original_string": "private static String SPACE_DO_NOT_CLEAN = \"vulas.backend.space.doNotClean\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_CLEAN = \"vulas.backend.space.doNotClean\"", "var_name": "SPACE_DO_NOT_CLEAN"}, {"original_string": "private static String SPACE_DO_NOT_MODIFY = \"vulas.backend.space.doNotModify\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_MODIFY = \"vulas.backend.space.doNotModify\"", "var_name": "SPACE_DO_NOT_MODIFY"}, {"original_string": "private SpaceRepository spaceRepository;", "modifier": "private", "type": "SpaceRepository", "declarator": "spaceRepository", "var_name": "spaceRepository"}, {"original_string": "private TenantRepository tenantRepository;", "modifier": "private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "private ApplicationRepository appRepository;", "modifier": "private", "type": "ApplicationRepository", "declarator": "appRepository", "var_name": "appRepository"}, {"original_string": "private final ApplicationExporter appExporter;", "modifier": "private final", "type": "ApplicationExporter", "declarator": "appExporter", "var_name": "appExporter"}, {"original_string": "private final Filter cacheFilter;", "modifier": "private final", "type": "Filter", "declarator": "cacheFilter", "var_name": "cacheFilter"}], "methods": [{"identifier": "SpaceController", "parameters": "(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "modifiers": "@Autowired", "return": "", "signature": " SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "full_signature": "@Autowired  SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "class_method_signature": "SpaceController.SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "testcase": false, "constructor": true}, {"identifier": "getAllSpaces", "parameters": "(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Collection<Space>>", "signature": "ResponseEntity<Collection<Space>> getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Collection<Space>> getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getDefaultSpace", "parameters": "(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "searchSpaces", "parameters": "(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<List<Space>>", "signature": "ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "isSpaceExisting", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) public ResponseEntity<Space> isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getSpace", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.GET) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.GET) public ResponseEntity<Space> getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "createSpace", "parameters": "(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "modifySpace", "parameters": "(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "cleanSpace", "parameters": "(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.POST) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.POST) public ResponseEntity<Space> cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "deleteSpace", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) public ResponseEntity<Space> deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getApplications", "parameters": "(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{token:.+}/apps\", method = RequestMethod.GET) public", "return": "void", "signature": "void getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{token:.+}/apps\", method = RequestMethod.GET) public void getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "class_method_signature": "SpaceController.getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/rest/SpaceController.java"}, "focal_method": {"identifier": "createSpace", "parameters": "(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "body": "@RequestMapping(\n      value = \"\",\n      method = RequestMethod.POST,\n      consumes = {\"application/json;charset=UTF-8\"},\n      produces = {\"application/json;charset=UTF-8\"})\n  public ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant) {\n    final StopWatch sw =\n        new StopWatch(\n                \"Create space [\"\n                    + (space == null ? null : space.getSpaceName())\n                    + \"] \"\n                    + \"for tenant token [\"\n                    + tenant\n                    + \"] \")\n            .start();\n\n    try {\n      // Check arguments\n      if (space == null) {\n        log.error(\"No space submitted\");\n        return new ResponseEntity<Space>(HttpStatus.BAD_REQUEST);\n      } else if (!space.hasNameAndDescription()) {\n        log.error(\"Work spaces require a name and description\");\n        return new ResponseEntity<Space>(HttpStatus.BAD_REQUEST);\n      } else if (space.isReadOnly()) {\n        log.error(\"Work spaces cannot be created with read-only set to true\");\n        return new ResponseEntity<Space>(HttpStatus.BAD_REQUEST);\n      }\n\n      // Check whether tenant exists or retrieve default\n      Tenant t = null;\n      try {\n        t = this.tenantRepository.getTenant(tenant);\n      } catch (EntityNotFoundException enfe) {\n        log.error(\"Tenant [\" + tenant + \"] not found\");\n        return new ResponseEntity<Space>(HttpStatus.NOT_FOUND);\n      } catch (Exception e) {\n        log.error(\"Error retrieving tenant [\" + tenant + \"]: \" + e);\n        return new ResponseEntity<Space>(HttpStatus.NOT_FOUND);\n      }\n\n      // check that only 1 default space per tenant is created\n      if (space.isDefault() && this.spaceRepository.findDefault(t.getTenantToken()) != null) {\n        log.error(\n            \"A default space for the given tenant already exists, adjust the configuration\"\n                + \" accordingly\");\n        return new ResponseEntity<Space>(HttpStatus.BAD_REQUEST);\n      }\n\n      // Always create token, whatever has been submitted\n      space.setTenant(t);\n      space.setSpaceToken(TokenUtil.generateToken());\n      this.spaceRepository.customSave(space);\n\n      sw.stop();\n      return new ResponseEntity<Space>(space, HttpStatus.CREATED);\n    } catch (Exception enfe) {\n      sw.stop(enfe);\n      return new ResponseEntity<Space>(HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }", "signature": "ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false, "invocations": ["start", "getSpaceName", "error", "hasNameAndDescription", "error", "isReadOnly", "error", "getTenant", "error", "error", "isDefault", "findDefault", "getTenantToken", "error", "setTenant", "setSpaceToken", "generateToken", "customSave", "stop", "stop"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}