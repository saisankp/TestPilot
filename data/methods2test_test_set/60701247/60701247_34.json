{"test_class": {"identifier": "ValueWithDisplayStringTest", "superclass": "", "interfaces": "", "fields": [], "file": "designer/testSrc/com/android/tools/idea/uibuilder/property/editors/support/ValueWithDisplayStringTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() {\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isEqualTo(new ValueWithDisplayString(\"display\", \"value\"));\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isNotEqualTo(new ValueWithDisplayString(\"display\", \"value\", \"hint\"));\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isNotEqualTo(new ValueWithDisplayString(\"different\", \"value\"));\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isNotEqualTo(new ValueWithDisplayString(\"display\", \"other\"));\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isNotEqualTo(new Object());\n    assertThat(new ValueWithDisplayString(\"display\", \"value\")).isNotEqualTo(null);\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ValueWithDisplayStringTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat"]}, "focal_class": {"identifier": "ValueWithDisplayString", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ValueWithDisplayString SEPARATOR = new ValueWithDisplayString(\"-\", \"-\");", "modifier": "public static final", "type": "ValueWithDisplayString", "declarator": "SEPARATOR = new ValueWithDisplayString(\"-\", \"-\")", "var_name": "SEPARATOR"}, {"original_string": "public static final ValueWithDisplayString UNSET = new ValueWithDisplayString(\"none\", null);", "modifier": "public static final", "type": "ValueWithDisplayString", "declarator": "UNSET = new ValueWithDisplayString(\"none\", null)", "var_name": "UNSET"}, {"original_string": "private final String myDisplayString;", "modifier": "private final", "type": "String", "declarator": "myDisplayString", "var_name": "myDisplayString"}, {"original_string": "private final String myValue;", "modifier": "private final", "type": "String", "declarator": "myValue", "var_name": "myValue"}, {"original_string": "private final String myHint;", "modifier": "private final", "type": "String", "declarator": "myHint", "var_name": "myHint"}, {"original_string": "private final ValueSelector mySelector;", "modifier": "private final", "type": "ValueSelector", "declarator": "mySelector", "var_name": "mySelector"}, {"original_string": "private boolean myUseValueForToString;", "modifier": "private", "type": "boolean", "declarator": "myUseValueForToString", "var_name": "myUseValueForToString"}], "methods": [{"identifier": "ValueWithDisplayString", "parameters": "(@Nullable String displayString, @Nullable String value)", "modifiers": "public", "return": "", "signature": " ValueWithDisplayString(@Nullable String displayString, @Nullable String value)", "full_signature": "public  ValueWithDisplayString(@Nullable String displayString, @Nullable String value)", "class_method_signature": "ValueWithDisplayString.ValueWithDisplayString(@Nullable String displayString, @Nullable String value)", "testcase": false, "constructor": true}, {"identifier": "ValueWithDisplayString", "parameters": "(@Nullable String displayString, @Nullable String value, @Nullable String hint)", "modifiers": "public", "return": "", "signature": " ValueWithDisplayString(@Nullable String displayString, @Nullable String value, @Nullable String hint)", "full_signature": "public  ValueWithDisplayString(@Nullable String displayString, @Nullable String value, @Nullable String hint)", "class_method_signature": "ValueWithDisplayString.ValueWithDisplayString(@Nullable String displayString, @Nullable String value, @Nullable String hint)", "testcase": false, "constructor": true}, {"identifier": "ValueWithDisplayString", "parameters": "(@Nullable String displayString,\n                                @Nullable String value,\n                                @Nullable String hint,\n                                @Nullable ValueSelector selector)", "modifiers": "public", "return": "", "signature": " ValueWithDisplayString(@Nullable String displayString,\n                                @Nullable String value,\n                                @Nullable String hint,\n                                @Nullable ValueSelector selector)", "full_signature": "public  ValueWithDisplayString(@Nullable String displayString,\n                                @Nullable String value,\n                                @Nullable String hint,\n                                @Nullable ValueSelector selector)", "class_method_signature": "ValueWithDisplayString.ValueWithDisplayString(@Nullable String displayString,\n                                @Nullable String value,\n                                @Nullable String hint,\n                                @Nullable ValueSelector selector)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "String", "signature": "String toString()", "full_signature": "@Override @NotNull public String toString()", "class_method_signature": "ValueWithDisplayString.toString()", "testcase": false, "constructor": false}, {"identifier": "getDisplayString", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getDisplayString()", "full_signature": "@NotNull public String getDisplayString()", "class_method_signature": "ValueWithDisplayString.getDisplayString()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getValue()", "full_signature": "@Nullable public String getValue()", "class_method_signature": "ValueWithDisplayString.getValue()", "testcase": false, "constructor": false}, {"identifier": "getHint", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getHint()", "full_signature": "@Nullable public String getHint()", "class_method_signature": "ValueWithDisplayString.getHint()", "testcase": false, "constructor": false}, {"identifier": "getValueSelector", "parameters": "()", "modifiers": "@Nullable public", "return": "ValueSelector", "signature": "ValueSelector getValueSelector()", "full_signature": "@Nullable public ValueSelector getValueSelector()", "class_method_signature": "ValueWithDisplayString.getValueSelector()", "testcase": false, "constructor": false}, {"identifier": "setUseValueForToString", "parameters": "(boolean useValueForToString)", "modifiers": "public", "return": "void", "signature": "void setUseValueForToString(boolean useValueForToString)", "full_signature": "public void setUseValueForToString(boolean useValueForToString)", "class_method_signature": "ValueWithDisplayString.setUseValueForToString(boolean useValueForToString)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ValueWithDisplayString.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "ValueWithDisplayString.equals(Object other)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/property/editors/support/ValueWithDisplayString.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object other) {\n    if (!(other instanceof ValueWithDisplayString)) {\n      return false;\n    }\n    ValueWithDisplayString value = (ValueWithDisplayString)other;\n    return Objects.equals(myValue, value.myValue) &&\n           Objects.equals(myDisplayString, value.myDisplayString) &&\n           Objects.equals(myHint, value.myHint);\n  }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "ValueWithDisplayString.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}