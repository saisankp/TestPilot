{"test_class": {"identifier": "SpelExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExpressionEvaluator expressionEvaluator = new SpelExpressionEvaluator();", "modifier": "private", "type": "ExpressionEvaluator", "declarator": "expressionEvaluator = new SpelExpressionEvaluator()", "var_name": "expressionEvaluator"}, {"original_string": "private static final String[] strArr = {\"Apple\",\"Google\",\"Facebook\",\" \",\"Hewlett Packard\", null};", "modifier": "private static final", "type": "String[]", "declarator": "strArr = {\"Apple\",\"Google\",\"Facebook\",\" \",\"Hewlett Packard\", null}", "var_name": "strArr"}], "file": "nimbus-core/src/test/java/com/antheminc/oss/nimbus/support/expr/SpelExpressionEvaluatorTest.java"}, "test_case": {"identifier": "t10_evaluate_type_mismatch_expression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void t10_evaluate_type_mismatch_expression() {\t\t\n\t\tString expr = \"state != null && state == 'Apple'\";\n\t\tBoolean result = expressionEvaluator.getValue(expr, new Holder<>(strArr), Boolean.class);\n\t\tassertFalse(result);\n\t}", "signature": "void t10_evaluate_type_mismatch_expression()", "full_signature": "@Test public void t10_evaluate_type_mismatch_expression()", "class_method_signature": "SpelExpressionEvaluatorTest.t10_evaluate_type_mismatch_expression()", "testcase": true, "constructor": false, "invocations": ["getValue", "assertFalse"]}, "focal_class": {"identifier": "SpelExpressionEvaluator", "superclass": "", "interfaces": "implements ExpressionEvaluator", "fields": [], "methods": [{"identifier": "getValue", "parameters": "(String exprValue, Object rootObject)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(String exprValue, Object rootObject)", "full_signature": "@Override public Object getValue(String exprValue, Object rootObject)", "class_method_signature": "SpelExpressionEvaluator.getValue(String exprValue, Object rootObject)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String exprValue, Object rootObject, Class<T> returnType)", "modifiers": "@Override public", "return": "T", "signature": "T getValue(String exprValue, Object rootObject, Class<T> returnType)", "full_signature": "@Override public T getValue(String exprValue, Object rootObject, Class<T> returnType)", "class_method_signature": "SpelExpressionEvaluator.getValue(String exprValue, Object rootObject, Class<T> returnType)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String exprValue, Object rootObject, BiFunction<Expression, StandardEvaluationContext, R> fn)", "modifiers": "private", "return": "R", "signature": "R getValue(String exprValue, Object rootObject, BiFunction<Expression, StandardEvaluationContext, R> fn)", "full_signature": "private R getValue(String exprValue, Object rootObject, BiFunction<Expression, StandardEvaluationContext, R> fn)", "class_method_signature": "SpelExpressionEvaluator.getValue(String exprValue, Object rootObject, BiFunction<Expression, StandardEvaluationContext, R> fn)", "testcase": false, "constructor": false}], "file": "nimbus-core/src/main/java/com/antheminc/oss/nimbus/support/expr/SpelExpressionEvaluator.java"}, "focal_method": {"identifier": "getValue", "parameters": "(String exprValue, Object rootObject)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object getValue(String exprValue, Object rootObject) {\n\t\treturn getValue(exprValue, rootObject, (expr, ctx)->expr.getValue(ctx));\n\t}", "signature": "Object getValue(String exprValue, Object rootObject)", "full_signature": "@Override public Object getValue(String exprValue, Object rootObject)", "class_method_signature": "SpelExpressionEvaluator.getValue(String exprValue, Object rootObject)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue"]}, "repository": {"repo_id": 96120606, "url": "https://github.com/openanthem/nimbus-core", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 9, "size": 55787, "license": "licensed"}}