{"test_class": {"identifier": "DartAnalyzerRulesDefinitionTest", "superclass": "", "interfaces": "", "fields": [], "file": "dart-lang/src/test/java/fr/insideapp/sonarqube/dart/lang/issues/dartanalyzer/DartAnalyzerRulesDefinitionTest.java"}, "test_case": {"identifier": "define", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void define() {\n\n        SonarRuntime sonarRuntime = SonarRuntimeImpl.forSonarQube(Version.create(7, 3), SonarQubeSide.SERVER);\n        DartAnalyzerRulesDefinition rulesDefinition = new DartAnalyzerRulesDefinition(sonarRuntime);\n        RulesDefinition.Context context = new RulesDefinition.Context();\n        rulesDefinition.define(context);\n\n        RulesDefinition.Repository dartAnalyzerRepository = context.repository(\"dartanalyzer\");\n        assertThat(dartAnalyzerRepository).isNotNull();\n        assertThat(dartAnalyzerRepository.name()).isEqualTo(\"dartanalyzer\");\n        assertThat(dartAnalyzerRepository.language()).isEqualTo(\"dart\");\n        assertThat(dartAnalyzerRepository.rules()).isNotEmpty();\n\n\n    }", "signature": "void define()", "full_signature": "@Test public void define()", "class_method_signature": "DartAnalyzerRulesDefinitionTest.define()", "testcase": true, "constructor": false, "invocations": ["forSonarQube", "create", "define", "repository", "isNotNull", "assertThat", "isEqualTo", "assertThat", "name", "isEqualTo", "assertThat", "language", "isNotEmpty", "assertThat", "rules"]}, "focal_class": {"identifier": "DartAnalyzerRulesDefinition", "superclass": "", "interfaces": "implements RulesDefinition", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DartAnalyzerRulesDefinition.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DartAnalyzerRulesDefinition.class)", "var_name": "LOGGER"}, {"original_string": "public static final String REPOSITORY_KEY = \"dartanalyzer\";", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_KEY = \"dartanalyzer\"", "var_name": "REPOSITORY_KEY"}, {"original_string": "public static final String REPOSITORY_NAME = REPOSITORY_KEY;", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_NAME = REPOSITORY_KEY", "var_name": "REPOSITORY_NAME"}, {"original_string": "public static final String RULES_FILE = \"/fr/insideapp/sonarqube/dart/dartanalyzer/rules.json\";", "modifier": "public static final", "type": "String", "declarator": "RULES_FILE = \"/fr/insideapp/sonarqube/dart/dartanalyzer/rules.json\"", "var_name": "RULES_FILE"}, {"original_string": "private final SonarRuntime sonarRuntime;", "modifier": "private final", "type": "SonarRuntime", "declarator": "sonarRuntime", "var_name": "sonarRuntime"}], "methods": [{"identifier": "DartAnalyzerRulesDefinition", "parameters": "(SonarRuntime sonarRuntime)", "modifiers": "public", "return": "", "signature": " DartAnalyzerRulesDefinition(SonarRuntime sonarRuntime)", "full_signature": "public  DartAnalyzerRulesDefinition(SonarRuntime sonarRuntime)", "class_method_signature": "DartAnalyzerRulesDefinition.DartAnalyzerRulesDefinition(SonarRuntime sonarRuntime)", "testcase": false, "constructor": true}, {"identifier": "define", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void define(Context context)", "full_signature": "@Override public void define(Context context)", "class_method_signature": "DartAnalyzerRulesDefinition.define(Context context)", "testcase": false, "constructor": false}], "file": "dart-lang/src/main/java/fr/insideapp/sonarqube/dart/lang/issues/dartanalyzer/DartAnalyzerRulesDefinition.java"}, "focal_method": {"identifier": "define", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void define(Context context) {\n        NewRepository repository = context.createRepository(REPOSITORY_KEY, Dart.KEY).setName(REPOSITORY_NAME);\n\n        try(Reader reader = new InputStreamReader(getClass().getResourceAsStream(RULES_FILE), Charset.forName(\"UTF-8\"))){\n            JSONArray slRules = (JSONArray) JSONValue.parse(reader);\n            if(slRules != null){\n                for (Object obj : slRules) {\n                    JSONObject slRule = (JSONObject) obj;\n                    repository.createRule((String) slRule.get(\"key\"))\n                            .setName((String) slRule.get(\"name\"))\n                            .setSeverity((String) slRule.get(\"severity\"))\n                            .setType(RuleType.valueOf((String) slRule.get(\"type\")))\n                            .setHtmlDescription((String) slRule.get(\"description\"));\n                }\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Failed to load dartanalyzer rules\", e);\n        }\n\n        SqaleXmlLoader.load(repository, \"/fr/insideapp/sonarqube/dart/dartanalyzer/sqale-model.xml\");\n        repository.done();\n    }", "signature": "void define(Context context)", "full_signature": "@Override public void define(Context context)", "class_method_signature": "DartAnalyzerRulesDefinition.define(Context context)", "testcase": false, "constructor": false, "invocations": ["setName", "createRepository", "getResourceAsStream", "getClass", "forName", "parse", "setHtmlDescription", "setType", "setSeverity", "setName", "createRule", "get", "get", "get", "valueOf", "get", "get", "error", "load", "done"]}, "repository": {"repo_id": 235879795, "url": "https://github.com/insideapp-oss/sonar-flutter", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 70, "size": 799, "license": "licensed"}}