{"test_class": {"identifier": "TaskScannerTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private static final String FIXME = \"FIXME\";", "modifier": "private static final", "type": "String", "declarator": "FIXME = \"FIXME\"", "var_name": "FIXME"}, {"original_string": "private static final String CASE_TEST_FILE = \"tasks-case-test.txt\";", "modifier": "private static final", "type": "String", "declarator": "CASE_TEST_FILE = \"tasks-case-test.txt\"", "var_name": "CASE_TEST_FILE"}, {"original_string": "private static final String PRIORITY_HIGH_MESSAGE = \"here another task with priority HIGH\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY_HIGH_MESSAGE = \"here another task with priority HIGH\"", "var_name": "PRIORITY_HIGH_MESSAGE"}, {"original_string": "private static final String PRIORITY_NORMAL_MESSAGE = \"here we have a task with priority NORMAL\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY_NORMAL_MESSAGE = \"here we have a task with priority NORMAL\"", "var_name": "PRIORITY_NORMAL_MESSAGE"}, {"original_string": "private static final String FILE_WITH_TASKS = \"file-with-tasks.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_WITH_TASKS = \"file-with-tasks.txt\"", "var_name": "FILE_WITH_TASKS"}, {"original_string": "private static final IssueBuilder ISSUE_BUILDER = new IssueBuilder();", "modifier": "private static final", "type": "IssueBuilder", "declarator": "ISSUE_BUILDER = new IssueBuilder()", "var_name": "ISSUE_BUILDER"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScannerTest.java"}, "test_case": {"identifier": "shouldReportFileExceptionError", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldReportFileExceptionError() {\n        TaskScanner scanner = new TaskScannerBuilder().build();\n\n        Report report = scanner.scan(new File(\"\").toPath(), StandardCharsets.UTF_8);\n\n        assertThat(report.getErrorMessages()).contains(\"Exception while reading the source code file '':\");\n    }", "signature": "void shouldReportFileExceptionError()", "full_signature": "@Test void shouldReportFileExceptionError()", "class_method_signature": "TaskScannerTest.shouldReportFileExceptionError()", "testcase": true, "constructor": false, "invocations": ["build", "scan", "toPath", "contains", "assertThat", "getErrorMessages"]}, "focal_class": {"identifier": "TaskScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WORD_BOUNDARY = \"\\\\b\";", "modifier": "private static final", "type": "String", "declarator": "WORD_BOUNDARY = \"\\\\b\"", "var_name": "WORD_BOUNDARY"}, {"original_string": "private static final Pattern INVALID = Pattern.compile(\"\");", "modifier": "private static final", "type": "Pattern", "declarator": "INVALID = Pattern.compile(\"\")", "var_name": "INVALID"}, {"original_string": "private final Map<Severity, Pattern> patterns = new HashMap<>();", "modifier": "private final", "type": "Map<Severity, Pattern>", "declarator": "patterns = new HashMap<>()", "var_name": "patterns"}, {"original_string": "private final boolean isUppercase;", "modifier": "private final", "type": "boolean", "declarator": "isUppercase", "var_name": "isUppercase"}, {"original_string": "private boolean isPatternInvalid;", "modifier": "private", "type": "boolean", "declarator": "isPatternInvalid", "var_name": "isPatternInvalid"}, {"original_string": "@SuppressWarnings(\"PMD.AvoidStringBufferField\")\n    private final StringBuilder errors = new StringBuilder();", "modifier": "@SuppressWarnings(\"PMD.AvoidStringBufferField\")\n    private final", "type": "StringBuilder", "declarator": "errors = new StringBuilder()", "var_name": "errors"}], "methods": [{"identifier": "TaskScanner", "parameters": "(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "modifiers": "", "return": "", "signature": " TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "full_signature": "  TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "class_method_signature": "TaskScanner.TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "testcase": false, "constructor": true}, {"identifier": "getTaskTags", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTaskTags()", "full_signature": " String getTaskTags()", "class_method_signature": "TaskScanner.getTaskTags()", "testcase": false, "constructor": false}, {"identifier": "isInvalidPattern", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isInvalidPattern()", "full_signature": " boolean isInvalidPattern()", "class_method_signature": "TaskScanner.isInvalidPattern()", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getErrors()", "full_signature": "public String getErrors()", "class_method_signature": "TaskScanner.getErrors()", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "modifiers": "private", "return": "Pattern", "signature": "Pattern compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "full_signature": "private Pattern compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "class_method_signature": "TaskScanner.compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "testcase": false, "constructor": false}, {"identifier": "splitTags", "parameters": "(final String tagIdentifiers)", "modifiers": "private", "return": "String[]", "signature": "String[] splitTags(final String tagIdentifiers)", "full_signature": "private String[] splitTags(final String tagIdentifiers)", "class_method_signature": "TaskScanner.splitTags(final String tagIdentifiers)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(final Path file, final Charset charset)", "modifiers": "public", "return": "Report", "signature": "Report scan(final Path file, final Charset charset)", "full_signature": "public Report scan(final Path file, final Charset charset)", "class_method_signature": "TaskScanner.scan(final Path file, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "scanTasks", "parameters": "(final Iterator<String> lines, final IssueBuilder builder)", "modifiers": "", "return": "Report", "signature": "Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "full_signature": " Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "class_method_signature": "TaskScanner.scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java"}, "focal_method": {"identifier": "scan", "parameters": "(final Path file, final Charset charset)", "modifiers": "public", "return": "Report", "body": "public Report scan(final Path file, final Charset charset) {\n        try (Stream<String> lines = Files.lines(file, charset)) {\n            return scanTasks(lines.iterator(), new IssueBuilder().setFileName(file.toString()));\n        }\n        catch (IOException | UncheckedIOException exception) {\n            Report report = new Report();\n            Throwable cause = exception.getCause();\n            if (cause instanceof MalformedInputException || cause instanceof UnmappableCharacterException) {\n                report.logError(\"Can't read source file '%s', defined encoding '%s' seems to be wrong\",\n                        file, charset);\n            }\n            else {\n                report.logException(exception, \"Exception while reading the source code file '%s':\", file);\n            }\n\n            return report;\n        }\n    }", "signature": "Report scan(final Path file, final Charset charset)", "full_signature": "public Report scan(final Path file, final Charset charset)", "class_method_signature": "TaskScanner.scan(final Path file, final Charset charset)", "testcase": false, "constructor": false, "invocations": ["lines", "scanTasks", "iterator", "setFileName", "toString", "getCause", "logError", "logException"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}