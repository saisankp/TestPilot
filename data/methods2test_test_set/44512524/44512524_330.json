{"test_class": {"identifier": "StormBenchmarkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Config config = new Config();", "modifier": "private static final", "type": "Config", "declarator": "config = new Config()", "var_name": "config"}, {"original_string": "private static final StormTopology topology = mock(StormTopology.class);", "modifier": "private static final", "type": "StormTopology", "declarator": "topology = mock(StormTopology.class)", "var_name": "topology"}], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/benchmarks/common/StormBenchmarkTest.java"}, "test_case": {"identifier": "getMetricsCollectorShouldReturnProperCollector", "parameters": "(\n          StormBenchmark benchmark, Class collectorClass)", "modifiers": "@Test(dataProvider = \"getStormBenchmark\") public", "return": "void", "body": "@Test(dataProvider = \"getStormBenchmark\")\n  public void getMetricsCollectorShouldReturnProperCollector(\n          StormBenchmark benchmark, Class collectorClass) {\n    IMetricsCollector collector = benchmark.getMetricsCollector(config, topology);\n    assertThat(collector)\n            .isNotNull()\n            .isInstanceOf(collectorClass);\n  }", "signature": "void getMetricsCollectorShouldReturnProperCollector(\n          StormBenchmark benchmark, Class collectorClass)", "full_signature": "@Test(dataProvider = \"getStormBenchmark\") public void getMetricsCollectorShouldReturnProperCollector(\n          StormBenchmark benchmark, Class collectorClass)", "class_method_signature": "StormBenchmarkTest.getMetricsCollectorShouldReturnProperCollector(\n          StormBenchmark benchmark, Class collectorClass)", "testcase": true, "constructor": false, "invocations": ["getMetricsCollector", "isInstanceOf", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "StormBenchmark", "superclass": "", "interfaces": "implements IBenchmark", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(StormBenchmark.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(StormBenchmark.class)", "var_name": "LOG"}, {"original_string": "public static final String DEFAULT_TOPOLOGY_NAME = \"benchmark\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TOPOLOGY_NAME = \"benchmark\"", "var_name": "DEFAULT_TOPOLOGY_NAME"}], "methods": [{"identifier": "getMetricsCollector", "parameters": "(Config config, StormTopology topology)", "modifiers": "@Override public", "return": "IMetricsCollector", "signature": "IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "full_signature": "@Override public IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "class_method_signature": "StormBenchmark.getMetricsCollector(Config config, StormTopology topology)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/benchmarks/common/StormBenchmark.java"}, "focal_method": {"identifier": "getMetricsCollector", "parameters": "(Config config, StormTopology topology)", "modifiers": "@Override public", "return": "IMetricsCollector", "body": "@Override\n  public IMetricsCollector getMetricsCollector(Config config, StormTopology topology) {\n\n    Set<MetricsItem> items = Sets.newHashSet(\n            MetricsItem.SUPERVISOR_STATS,\n            MetricsItem.TOPOLOGY_STATS,\n            MetricsItem.THROUGHPUT,\n            MetricsItem.SPOUT_THROUGHPUT,\n            MetricsItem.SPOUT_LATENCY\n            );\n    return new BasicMetricsCollector(config, topology, items);\n  }", "signature": "IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "full_signature": "@Override public IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "class_method_signature": "StormBenchmark.getMetricsCollector(Config config, StormTopology topology)", "testcase": false, "constructor": false, "invocations": ["newHashSet"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}