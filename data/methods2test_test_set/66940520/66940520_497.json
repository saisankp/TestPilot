{"test_class": {"identifier": "DefaultFieldParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DefaultFieldParser parser = new DefaultFieldParser();", "modifier": "private final", "type": "DefaultFieldParser", "declarator": "parser = new DefaultFieldParser()", "var_name": "parser"}], "file": "dhis-2/dhis-services/dhis-service-node/src/test/java/org/hisp/dhis/fieldfilter/DefaultFieldParserTest.java"}, "test_case": {"identifier": "parseWithTransformerArgAndFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseWithTransformerArgAndFields()\n    {\n        final FieldMap fieldMap = parser.parse( \"id,organisationUnits~pluck(name)[id,name]\" );\n        Assert.assertEquals( 2, fieldMap.size() );\n        Assert.assertTrue( fieldMap.containsKey( \"id\" ) );\n        Assert.assertTrue( fieldMap.containsKey( \"organisationUnits~pluck(name)\" ) );\n\n        final FieldMap innerFieldMap = fieldMap.get( \"organisationUnits~pluck(name)\" );\n        Assert.assertTrue( innerFieldMap.containsKey( \"id\" ) );\n        Assert.assertTrue( innerFieldMap.containsKey( \"name\" ) );\n    }", "signature": "void parseWithTransformerArgAndFields()", "full_signature": "@Test public void parseWithTransformerArgAndFields()", "class_method_signature": "DefaultFieldParserTest.parseWithTransformerArgAndFields()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "assertTrue", "containsKey", "assertTrue", "containsKey", "get", "assertTrue", "containsKey", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "DefaultFieldParser", "superclass": "", "interfaces": "implements FieldParser", "fields": [], "methods": [{"identifier": "parse", "parameters": "( String fields )", "modifiers": "@Override public", "return": "FieldMap", "signature": "FieldMap parse( String fields )", "full_signature": "@Override public FieldMap parse( String fields )", "class_method_signature": "DefaultFieldParser.parse( String fields )", "testcase": false, "constructor": false}, {"identifier": "modifyFilter", "parameters": "( Collection<String> fields, Collection<String> excludeFields )", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> modifyFilter( Collection<String> fields, Collection<String> excludeFields )", "full_signature": "@Override public List<String> modifyFilter( Collection<String> fields, Collection<String> excludeFields )", "class_method_signature": "DefaultFieldParser.modifyFilter( Collection<String> fields, Collection<String> excludeFields )", "testcase": false, "constructor": false}, {"identifier": "joinedWithPrefix", "parameters": "( StringBuilder builder, List<String> prefixList )", "modifiers": "private", "return": "String", "signature": "String joinedWithPrefix( StringBuilder builder, List<String> prefixList )", "full_signature": "private String joinedWithPrefix( StringBuilder builder, List<String> prefixList )", "class_method_signature": "DefaultFieldParser.joinedWithPrefix( StringBuilder builder, List<String> prefixList )", "testcase": false, "constructor": false}, {"identifier": "putInMap", "parameters": "( FieldMap fieldMap, String path )", "modifiers": "private", "return": "void", "signature": "void putInMap( FieldMap fieldMap, String path )", "full_signature": "private void putInMap( FieldMap fieldMap, String path )", "class_method_signature": "DefaultFieldParser.putInMap( FieldMap fieldMap, String path )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-node/src/main/java/org/hisp/dhis/fieldfilter/DefaultFieldParser.java"}, "focal_method": {"identifier": "parse", "parameters": "( String fields )", "modifiers": "@Override public", "return": "FieldMap", "body": "@Override\n    public FieldMap parse( String fields )\n    {\n        List<String> prefixList = Lists.newArrayList();\n        FieldMap fieldMap = new FieldMap();\n\n        StringBuilder builder = new StringBuilder();\n\n        String[] fieldSplit = fields.split( \"\" );\n\n        for ( int i = 0; i < fieldSplit.length; i++ )\n        {\n            String c = fieldSplit[i];\n\n            // if we reach a field transformer, parse it out here (necessary to allow for () to be used to handle transformer parameters)\n            if ( (c.equals( \":\" ) && fieldSplit[i + 1].equals( \":\" )) || c.equals( \"~\" ) || c.equals( \"|\" ) )\n            {\n                boolean insideParameters = false;\n\n                for ( ; i < fieldSplit.length; i++ )\n                {\n                    c = fieldSplit[i];\n\n                    if ( StringUtils.isAlphanumeric( c ) || c.equals( \":\" ) || c.equals( \"~\" ) || c.equals( \"|\" ) )\n                    {\n                        builder.append( c );\n                    }\n                    else if ( c.equals( \"(\" ) ) // start parameter\n                    {\n                        insideParameters = true;\n                        builder.append( c );\n                    }\n                    else if ( insideParameters && c.equals( \";\" ) ) // allow parameter separator\n                    {\n                        builder.append( c );\n                    }\n                    else if ( (insideParameters && c.equals( \")\" )) ) // end\n                    {\n                        builder.append( c );\n                        break;\n                    }\n                    else if ( c.equals( \",\" ) || ( c.equals( \"[\" ) && !insideParameters ) ) // rewind and break\n                    {\n                        i--;\n                        break;\n                    }\n                }\n            }\n            else if ( c.equals( \",\" ) )\n            {\n                putInMap( fieldMap, joinedWithPrefix( builder, prefixList ) );\n                builder = new StringBuilder();\n            }\n            else if ( c.equals( \"[\" ) || c.equals( \"(\" ) )\n            {\n                prefixList.add( builder.toString() );\n                builder = new StringBuilder();\n            }\n            else if ( c.equals( \"]\" ) || c.equals( \")\" ) )\n            {\n                if ( !builder.toString().isEmpty() )\n                {\n                    putInMap( fieldMap, joinedWithPrefix( builder, prefixList ) );\n                }\n\n                prefixList.remove( prefixList.size() - 1 );\n                builder = new StringBuilder();\n            }\n            else if ( StringUtils.isAlphanumeric( c ) || c.equals( \"*\" ) || c.equals( \":\" ) || c.equals( \";\" ) || c.equals( \"~\" ) || c.equals( \"!\" )\n                || c.equals( \"|\" ) || c.equals( \"{\" ) || c.equals( \"}\" ) )\n            {\n                builder.append( c );\n            }\n        }\n\n        if ( !builder.toString().isEmpty() )\n        {\n            putInMap( fieldMap, joinedWithPrefix( builder, prefixList ) );\n        }\n\n        return fieldMap;\n    }", "signature": "FieldMap parse( String fields )", "full_signature": "@Override public FieldMap parse( String fields )", "class_method_signature": "DefaultFieldParser.parse( String fields )", "testcase": false, "constructor": false, "invocations": ["newArrayList", "split", "equals", "equals", "equals", "equals", "isAlphanumeric", "equals", "equals", "equals", "append", "equals", "append", "equals", "append", "equals", "append", "equals", "equals", "equals", "putInMap", "joinedWithPrefix", "equals", "equals", "add", "toString", "equals", "equals", "isEmpty", "toString", "putInMap", "joinedWithPrefix", "remove", "size", "isAlphanumeric", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "append", "isEmpty", "toString", "putInMap", "joinedWithPrefix"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}