{"test_class": {"identifier": "DataSetComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COLLECTION_NAME_1 = \"some_collection_1\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTION_NAME_1 = \"some_collection_1\"", "var_name": "COLLECTION_NAME_1"}, {"original_string": "private static final String COLLECTION_NAME_2 = \"some_collection_2\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTION_NAME_2 = \"some_collection_2\"", "var_name": "COLLECTION_NAME_2"}, {"original_string": "private static final String COLLECTION_NAME_3 = \"some_collection_3\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTION_NAME_3 = \"some_collection_3\"", "var_name": "COLLECTION_NAME_3"}, {"original_string": "private static final Document DOCUMENT_1 = new Document().append(\"a\", \"A\").append(\"b\", \"B\");", "modifier": "private static final", "type": "Document", "declarator": "DOCUMENT_1 = new Document().append(\"a\", \"A\").append(\"b\", \"B\")", "var_name": "DOCUMENT_1"}, {"original_string": "private static final Document DOCUMENT_2 = new Document().append(\"c\", \"C\").append(\"d\", \"D\");", "modifier": "private static final", "type": "Document", "declarator": "DOCUMENT_2 = new Document().append(\"c\", \"C\").append(\"d\", \"D\")", "var_name": "DOCUMENT_2"}, {"original_string": "private static final Document DOCUMENT_3 = new Document().append(\"e\", \"E\").append(\"f\", \"F\");", "modifier": "private static final", "type": "Document", "declarator": "DOCUMENT_3 = new Document().append(\"e\", \"E\").append(\"f\", \"F\")", "var_name": "DOCUMENT_3"}, {"original_string": "@Mock\n    private MongoDatabase mongoDatabase;", "modifier": "@Mock\n    private", "type": "MongoDatabase", "declarator": "mongoDatabase", "var_name": "mongoDatabase"}, {"original_string": "private AssertionErrorCollector errorCollector;", "modifier": "private", "type": "AssertionErrorCollector", "declarator": "errorCollector", "var_name": "errorCollector"}], "file": "mongodb/src/test/java/eu/drus/jpa/unit/mongodb/DataSetComparatorTest.java"}, "test_case": {"identifier": "testCurrentDataSetContainsDataAndExpectedDataSetIsEmpty", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testCurrentDataSetContainsDataAndExpectedDataSetIsEmpty() {\n        // GIVEN\n        final List<String> collectionNames = Arrays.asList(COLLECTION_NAME_1);\n        final Iterator<String> collectionNamesIt = collectionNames.iterator();\n        final MongoCursor<String> iterator = mock(MongoCursor.class);\n        when(iterator.hasNext()).thenAnswer((final InvocationOnMock invocation) -> collectionNamesIt.hasNext());\n        when(iterator.next()).thenAnswer((final InvocationOnMock invocation) -> collectionNamesIt.next());\n\n        final MongoIterable<String> collectionIterable = mock(MongoIterable.class);\n        when(collectionIterable.iterator()).thenReturn(iterator);\n\n        when(mongoDatabase.listCollectionNames()).thenReturn(collectionIterable);\n\n        final MongoCollection<Document> collection = mock(MongoCollection.class);\n        when(mongoDatabase.getCollection(eq(COLLECTION_NAME_1))).thenReturn(collection);\n        when(collection.count()).thenReturn(1l);\n\n        final String[] toExclude = new String[] {};\n        final Document expectedDataSet = new Document();\n        final DataSetComparator comparator = new DataSetComparator(toExclude, false);\n\n        // WHEN\n        comparator.compare(mongoDatabase, expectedDataSet, errorCollector);\n\n        // THEN\n        assertThat(errorCollector.amountOfErrors(), equalTo(1));\n\n        try {\n            errorCollector.report();\n            fail(\"AssertionError expected\");\n        } catch (final AssertionError e) {\n            assertThat(e.getMessage(), containsString(\"failed in 1 case\"));\n            assertThat(e.getMessage(), containsString(COLLECTION_NAME_1 + \" was expected to be empty, but has <\" + 1 + \"> entries\"));\n        }\n    }", "signature": "void testCurrentDataSetContainsDataAndExpectedDataSetIsEmpty()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testCurrentDataSetContainsDataAndExpectedDataSetIsEmpty()", "class_method_signature": "DataSetComparatorTest.testCurrentDataSetContainsDataAndExpectedDataSetIsEmpty()", "testcase": true, "constructor": false, "invocations": ["asList", "iterator", "mock", "thenAnswer", "when", "hasNext", "hasNext", "thenAnswer", "when", "next", "next", "mock", "thenReturn", "when", "iterator", "thenReturn", "when", "listCollectionNames", "mock", "thenReturn", "when", "getCollection", "eq", "thenReturn", "when", "count", "compare", "assertThat", "amountOfErrors", "equalTo", "report", "fail", "assertThat", "getMessage", "containsString", "assertThat", "getMessage", "containsString"]}, "focal_class": {"identifier": "DataSetComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Function<String, String> ID_MAPPER = (final String name) -> name;", "modifier": "private static final", "type": "Function<String, String>", "declarator": "ID_MAPPER = (final String name) -> name", "var_name": "ID_MAPPER"}, {"original_string": "private ColumnsHolder toExclude;", "modifier": "private", "type": "ColumnsHolder", "declarator": "toExclude", "var_name": "toExclude"}, {"original_string": "private boolean isStrict;", "modifier": "private", "type": "boolean", "declarator": "isStrict", "var_name": "isStrict"}], "methods": [{"identifier": "DataSetComparator", "parameters": "(final String[] toExclude, final boolean isStrict)", "modifiers": "public", "return": "", "signature": " DataSetComparator(final String[] toExclude, final boolean isStrict)", "full_signature": "public  DataSetComparator(final String[] toExclude, final boolean isStrict)", "class_method_signature": "DataSetComparator.DataSetComparator(final String[] toExclude, final boolean isStrict)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "signature": "void compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "shouldBeEmpty", "parameters": "(final MongoDatabase connection, final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void shouldBeEmpty(final MongoDatabase connection, final AssertionErrorCollector errorCollector)", "full_signature": "private void shouldBeEmpty(final MongoDatabase connection, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.shouldBeEmpty(final MongoDatabase connection, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "compareContent", "parameters": "(final MongoDatabase connection, final Document expectedDataSet,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void compareContent(final MongoDatabase connection, final Document expectedDataSet,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void compareContent(final MongoDatabase connection, final Document expectedDataSet,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compareContent(final MongoDatabase connection, final Document expectedDataSet,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "verifyCollectionNames", "parameters": "(final MongoDatabase connection, final Set<String> expectedCollectionNames,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void verifyCollectionNames(final MongoDatabase connection, final Set<String> expectedCollectionNames,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void verifyCollectionNames(final MongoDatabase connection, final Set<String> expectedCollectionNames,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.verifyCollectionNames(final MongoDatabase connection, final Set<String> expectedCollectionNames,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "verifyCollectionContent", "parameters": "(final MongoDatabase connection, final Document expectedDataSet, final String collectionName,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void verifyCollectionContent(final MongoDatabase connection, final Document expectedDataSet, final String collectionName,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void verifyCollectionContent(final MongoDatabase connection, final Document expectedDataSet, final String collectionName,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.verifyCollectionContent(final MongoDatabase connection, final Document expectedDataSet, final String collectionName,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "filterRequest", "parameters": "(final Document expectedEntry, final List<String> columnsToExclude)", "modifiers": "private", "return": "Document", "signature": "Document filterRequest(final Document expectedEntry, final List<String> columnsToExclude)", "full_signature": "private Document filterRequest(final Document expectedEntry, final List<String> columnsToExclude)", "class_method_signature": "DataSetComparator.filterRequest(final Document expectedEntry, final List<String> columnsToExclude)", "testcase": false, "constructor": false}, {"identifier": "getCollectionData", "parameters": "(final Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<Document>", "signature": "List<Document> getCollectionData(final Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<Document> getCollectionData(final Object obj)", "class_method_signature": "DataSetComparator.getCollectionData(final Object obj)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/eu/drus/jpa/unit/mongodb/DataSetComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "body": "public void compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector) {\n        if (expectedDataSet.entrySet().isEmpty()) {\n            shouldBeEmpty(connection, errorCollector);\n        } else {\n            compareContent(connection, expectedDataSet, errorCollector);\n        }\n    }", "signature": "void compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "class_method_signature": "DataSetComparator.compare(final MongoDatabase connection, final Document expectedDataSet, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "entrySet", "shouldBeEmpty", "compareContent"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}