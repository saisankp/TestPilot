{"test_class": {"identifier": "TaskParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocket-core/src/test/java/cn/hikyson/rocket/parser/TaskParserTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parse() throws Exception {\n//        try {\n//            List<ConditionTask> conditionTasks = TaskParser.parse(RuntimeEnvironment.application, \"task_list.xml\");\n//            assertTrue(conditionTasks.size() == 5);\n//        } catch (Throwable throwable) {\n//            assertTrue(throwable.getLocalizedMessage(), false);\n//        }\n    }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "TaskParserTest.parse()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "TaskParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(Context context, String filePath)", "modifiers": "public static", "return": "List<LaunchTask>", "signature": "List<LaunchTask> parse(Context context, String filePath)", "full_signature": "public static List<LaunchTask> parse(Context context, String filePath)", "class_method_signature": "TaskParser.parse(Context context, String filePath)", "testcase": false, "constructor": false}], "file": "rocket-core/src/main/java/cn/hikyson/rocket/parser/TaskParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Context context, String filePath)", "modifiers": "public static", "return": "List<LaunchTask>", "body": "public static List<LaunchTask> parse(Context context, String filePath) throws Throwable {\n        List<LaunchTask> taskList = new ArrayList<>();\n        Element root = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(context.getAssets().open(filePath)).getDocumentElement();\n        NodeList taskElements = root.getElementsByTagName(\"task\");\n        if (taskElements == null || taskElements.getLength() == 0) {\n            return taskList;\n        }\n        for (int i = 0; i < taskElements.getLength(); i++) {\n            Element delegateElement = (Element) taskElements.item(i);\n            String clzName = delegateElement.getTextContent();\n            final String taskNameDisplay = delegateElement.getAttribute(\"name\");\n            Class<?> clz = Class.forName(clzName);\n            LaunchTask taskInstance = (LaunchTask) clz.newInstance();\n            if (!TextUtils.isEmpty(taskNameDisplay) && !taskNameDisplay.equals(taskInstance.taskName())) {\n                throw new IllegalStateException(\"Task name in assets must same as taskName in launchTask class, or u can just don't declare name field in assets\");\n            }\n            taskList.add(taskInstance);\n        }\n        return taskList;\n    }", "signature": "List<LaunchTask> parse(Context context, String filePath)", "full_signature": "public static List<LaunchTask> parse(Context context, String filePath)", "class_method_signature": "TaskParser.parse(Context context, String filePath)", "testcase": false, "constructor": false, "invocations": ["getDocumentElement", "parse", "newDocumentBuilder", "newInstance", "open", "getAssets", "getElementsByTagName", "getLength", "getLength", "item", "getTextContent", "getAttribute", "forName", "newInstance", "isEmpty", "equals", "taskName", "add"]}, "repository": {"repo_id": 117845334, "url": "https://github.com/JamesLiAndroid/Rocket", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 36, "size": 1228, "license": "licensed"}}