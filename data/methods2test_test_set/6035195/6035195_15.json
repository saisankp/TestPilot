{"test_class": {"identifier": "InstallPackagesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/axemblr/provisionr/core/activities/InstallPackagesTest.java"}, "test_case": {"identifier": "testCreatePuppetScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreatePuppetScript() throws Exception {\n        Pool pool = mock(Pool.class);\n        when(pool.getSoftware()).thenReturn(Software.builder()\n            .packages(\"git-core\", \"vim\").createSoftware());\n\n        PuppetActivity activity = new InstallPackages();\n        String content = activity.createPuppetScript(pool, null);\n\n        assertThat(content).contains(\n            \"Package { ensure => \\\"installed\\\" }\\n\" +\n                \"\\n\" +\n                \"package { \\\"git-core\\\": }\\n\" +\n                \"package { \\\"vim\\\": }\\n\"\n        );\n    }", "signature": "void testCreatePuppetScript()", "full_signature": "@Test public void testCreatePuppetScript()", "class_method_signature": "InstallPackagesTest.testCreatePuppetScript()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSoftware", "createSoftware", "packages", "builder", "createPuppetScript", "contains", "assertThat"]}, "focal_class": {"identifier": "InstallPackages", "superclass": "extends PuppetActivity", "interfaces": "", "fields": [{"original_string": "public static final String PACKAGES_TEMPLATE = \"/com/axemblr/provisionr/core/puppet/packages.pp.mustache\";", "modifier": "public static final", "type": "String", "declarator": "PACKAGES_TEMPLATE = \"/com/axemblr/provisionr/core/puppet/packages.pp.mustache\"", "var_name": "PACKAGES_TEMPLATE"}], "methods": [{"identifier": "InstallPackages", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstallPackages()", "full_signature": "public  InstallPackages()", "class_method_signature": "InstallPackages.InstallPackages()", "testcase": false, "constructor": true}, {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "InstallPackages.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false}, {"identifier": "packagesAsListOfMaps", "parameters": "(Software software)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> packagesAsListOfMaps(Software software)", "full_signature": "private List<Map<String, String>> packagesAsListOfMaps(Software software)", "class_method_signature": "InstallPackages.packagesAsListOfMaps(Software software)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/axemblr/provisionr/core/activities/InstallPackages.java"}, "focal_method": {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String createPuppetScript(Pool pool, Machine machine) throws IOException {\n        return Mustache.toString(InstallPackages.class, PACKAGES_TEMPLATE,\n            ImmutableMap.of(\"packages\", packagesAsListOfMaps(pool.getSoftware())));\n    }", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "InstallPackages.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false, "invocations": ["toString", "of", "packagesAsListOfMaps", "getSoftware"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}