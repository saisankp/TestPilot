{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindDataObjectsWithDescribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataObjectsWithDescribe() {\n        DXRecord.newRecord().setProject(testProject).setName(\"record1\")\n                .putProperty(\"sampleId\", \"1234\").build();\n        DXFile.newFile().setProject(testProject).setName(\"file1\").putProperty(\"sampleId\", \"2345\")\n                .build();\n        DXApplet.newApplet().setProject(testProject).setName(\"applet1\")\n                .setRunSpecification(RunSpecification.newRunSpec(\"bash\", \"\", \"Ubuntu\", \"14.04\").build()).build();\n        DXWorkflow.newWorkflow().setProject(testProject).setName(\"workflow1\").build();\n\n        DXRecord recordResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().withClassRecord()\n                        .inProject(testProject).nameMatchesExactly(\"record1\")\n                        .includeDescribeOutput(DXDataObject.DescribeOptions.get().withProperties())\n                        .execute().asList());\n        Assert.assertEquals(recordResult.getCachedDescribe().getName(), \"record1\");\n        // Called includeDescribeOutput with properties: true so properties should be returned\n        Assert.assertEquals(recordResult.getCachedDescribe().getProperties().get(\"sampleId\"),\n                \"1234\");\n\n        recordResult =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().withClassRecord()\n                        .inProject(testProject).nameMatchesExactly(\"record1\")\n                        .includeDescribeOutput().execute().asList());\n        Assert.assertEquals(recordResult.getCachedDescribe().getName(), \"record1\");\n        // Called includeDescribeOutput with default settings so properties should NOT be returned\n        try {\n            recordResult.getCachedDescribe().getProperties();\n            Assert.fail(\"Expected IllegalStateException to be thrown because properties should not have been returned\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n\n        Assert.assertEquals(\n                Iterables\n                        .getOnlyElement(\n                                DXSearch.findDataObjects().inProject(testProject)\n                                        .nameMatchesExactly(\"file1\").includeDescribeOutput()\n                                        .execute().asList()).getCachedDescribe().getName(), \"file1\");\n        Assert.assertEquals(\n                Iterables\n                        .getOnlyElement(\n                                DXSearch.findDataObjects().inProject(testProject)\n                                        .nameMatchesExactly(\"applet1\").includeDescribeOutput()\n                                        .execute().asList()).getCachedDescribe().getName(),\n                \"applet1\");\n        Assert.assertEquals(\n                Iterables\n                        .getOnlyElement(\n                                DXSearch.findDataObjects().inProject(testProject)\n                                        .nameMatchesExactly(\"workflow1\").includeDescribeOutput()\n                                        .execute().asList()).getCachedDescribe().getName(),\n                \"workflow1\");\n\n        DXRecord findWithoutDescribe =\n                Iterables.getOnlyElement(DXSearch.findDataObjects().inProject(testProject)\n                        .nameMatchesExactly(\"record1\").withClassRecord().execute().asList());\n        try {\n            findWithoutDescribe.getCachedDescribe();\n            Assert.fail(\"Expected IllegalStateException to be thrown\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n    }", "signature": "void testFindDataObjectsWithDescribe()", "full_signature": "@Test public void testFindDataObjectsWithDescribe()", "class_method_signature": "DXSearchTest.testFindDataObjectsWithDescribe()", "testcase": true, "constructor": false, "invocations": ["build", "putProperty", "setName", "setProject", "newRecord", "build", "putProperty", "setName", "setProject", "newFile", "build", "setRunSpecification", "setName", "setProject", "newApplet", "build", "newRunSpec", "build", "setName", "setProject", "newWorkflow", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "nameMatchesExactly", "inProject", "withClassRecord", "findDataObjects", "withProperties", "get", "assertEquals", "getName", "getCachedDescribe", "assertEquals", "get", "getProperties", "getCachedDescribe", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "nameMatchesExactly", "inProject", "withClassRecord", "findDataObjects", "assertEquals", "getName", "getCachedDescribe", "getProperties", "getCachedDescribe", "fail", "assertEquals", "getName", "getCachedDescribe", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "nameMatchesExactly", "inProject", "findDataObjects", "assertEquals", "getName", "getCachedDescribe", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "nameMatchesExactly", "inProject", "findDataObjects", "assertEquals", "getName", "getCachedDescribe", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "nameMatchesExactly", "inProject", "findDataObjects", "getOnlyElement", "asList", "execute", "withClassRecord", "nameMatchesExactly", "inProject", "findDataObjects", "getCachedDescribe", "fail"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "body": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects() {\n        return new FindDataObjectsRequestBuilder<DXDataObject>();\n    }", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}