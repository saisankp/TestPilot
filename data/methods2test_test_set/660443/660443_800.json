{"test_class": {"identifier": "MMFF94AtomTypeMatcherTest", "superclass": "extends AbstractAtomTypeTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool         logger          = LoggingToolFactory\n                                                                .createLoggingTool(MMFF94AtomTypeMatcherTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger          = LoggingToolFactory\n                                                                .createLoggingTool(MMFF94AtomTypeMatcherTest.class)", "var_name": "logger"}, {"original_string": "private final IChemObjectBuilder    builder         = DefaultChemObjectBuilder.getInstance();", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder         = DefaultChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private static IAtomContainer       testMolecule    = null;", "modifier": "private static", "type": "IAtomContainer", "declarator": "testMolecule    = null", "var_name": "testMolecule"}, {"original_string": "private static Map<String, Integer> testedAtomTypes = new HashMap<String, Integer>();", "modifier": "private static", "type": "Map<String, Integer>", "declarator": "testedAtomTypes = new HashMap<String, Integer>()", "var_name": "testedAtomTypes"}], "file": "legacy/src/test/java/org/openscience/cdk/atomtype/MMFF94AtomTypeMatcherTest.java"}, "test_case": {"identifier": "testFindMatchingAtomType_IAtomContainer_IAtom_Methylamine", "parameters": "()", "modifiers": "@Test @Ignore(\"Old atom typing method - see new Mmff class\") public", "return": "void", "body": "@Test\n    @Ignore(\"Old atom typing method - see new Mmff class\")\n    public void testFindMatchingAtomType_IAtomContainer_IAtom_Methylamine() throws Exception {\n        //System.out.println(\"**** START ATOMTYPE Methylamine TEST ******\");\n        IAtomContainer mol = builder.newInstance(IAtomContainer.class);\n        IAtom carbon = builder.newInstance(IAtom.class, Elements.CARBON);\n        IAtom nitrogen = builder.newInstance(IAtom.class, Elements.NITROGEN);\n        // making sure the order matches the test results\n        mol.addAtom(carbon);\n        mol.addAtom(nitrogen);\n        mol.addBond(builder.newInstance(IBond.class, carbon, nitrogen, Order.SINGLE));\n\n        addExplicitHydrogens(mol);\n\n        String[] testResult = {\"C\", \"N\", \"HC\", \"HC\", \"HC\", \"HN\", \"HN\"};\n        AtomTypeTools att = new AtomTypeTools();\n        MMFF94AtomTypeMatcher atm = new MMFF94AtomTypeMatcher();\n        att.assignAtomTypePropertiesToAtom(mol, false);\n        for (int i = 0; i < mol.getAtomCount(); i++) {\n            logger.debug(\"atomNr:\" + mol.getAtom(i).toString());\n            IAtomType matched = atm.findMatchingAtomType(mol, mol.getAtom(i));\n            Assert.assertNotNull(matched);\n            AtomTypeManipulator.configure(mol.getAtom(i), matched);\n        }\n        for (int i = 0; i < testResult.length; i++) {\n            assertAtomType(testedAtomTypes, testResult[i], mol.getAtom(i));\n        }\n        //System.out.println(\"MMFF94 Atom 0:\"+mol.getAtom(0).getAtomTypeName());\n    }", "signature": "void testFindMatchingAtomType_IAtomContainer_IAtom_Methylamine()", "full_signature": "@Test @Ignore(\"Old atom typing method - see new Mmff class\") public void testFindMatchingAtomType_IAtomContainer_IAtom_Methylamine()", "class_method_signature": "MMFF94AtomTypeMatcherTest.testFindMatchingAtomType_IAtomContainer_IAtom_Methylamine()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newInstance", "newInstance", "addAtom", "addAtom", "addBond", "newInstance", "addExplicitHydrogens", "assignAtomTypePropertiesToAtom", "getAtomCount", "debug", "toString", "getAtom", "findMatchingAtomType", "getAtom", "assertNotNull", "configure", "getAtom", "assertAtomType", "getAtom"]}, "focal_class": {"identifier": "MMFF94AtomTypeMatcher", "superclass": "", "interfaces": "implements IAtomTypeMatcher", "fields": [{"original_string": "private static ILoggingTool logger        = LoggingToolFactory.createLoggingTool(MMFF94AtomTypeMatcher.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory.createLoggingTool(MMFF94AtomTypeMatcher.class)", "var_name": "logger"}, {"original_string": "IBond.Order                 maxBondOrder  = IBond.Order.SINGLE;", "modifier": "", "type": "IBond.Order", "declarator": "maxBondOrder  = IBond.Order.SINGLE", "var_name": "maxBondOrder"}, {"original_string": "private AtomTypeFactory     factory       = null;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "factory       = null", "var_name": "factory"}, {"original_string": "AtomTypeTools               atomTypeTools = null;", "modifier": "", "type": "AtomTypeTools", "declarator": "atomTypeTools = null", "var_name": "atomTypeTools"}, {"original_string": "String[]                    atomTypeIds   = {\"C\", \"Csp2\", \"C=\", \"Csp\", \"CO2M\", \"CNN+\", \"C%\", \"CIM+\", \"CR4R\",\n            \"CR3R\", \"CE4R\", \"Car\", \"C5A\", \"C5B\", \"C5\", \"HC\", \"HO\", \"HN\", \"HOCO\", \"HN=C\", \"HN2\", \"HOCC\", \"HOH\", \"HOS\",\n            \"HN+\", \"HO+\", \"HO=+\", \"HP\", \"O\", \"O=\", \"OX\", \"OM\", \"O+\", \"O=+\", \"OH2\", \"Oar\", \"N\", \"N=C\", \"NC=C\", \"NSP\",\n            \"=N=\", \"NAZT\", \"N+\", \"N2OX\", \"N3OX\", \"NC#N\", \"NO3\", \"N=O\", \"NC=O\", \"NSO\", \"N+=\", \"NCN+\", \"NGD+\", \"NR%\",\n            \"NM\", \"N5M\", \"NPYD\", \"NPYL\", \"NPD+\", \"N5A\", \"N5B\", \"NPOX\", \"N5OX\", \"N5+\", \"N5\", \"S\", \"S=C\", \">SN\", \"SO2\",\n            \"SX\", \"SO2M\", \"=SO\", \"Sthi\", \"PTET\", \"P\", \"-P=C\", \"F\", \"CL\", \"BR\", \"I\", \"SI\", \"CL04\", \"FE+2\", \"FE+3\", \"F-\",\n            \"CL-\", \"BR-\", \"LI+\", \"NA+\", \"K+\", \"ZN+2\", \"CA+2\", \"CU+1\", \"CU+2\", \"MG+2\", \"DU\"};", "modifier": "", "type": "String[]", "declarator": "atomTypeIds   = {\"C\", \"Csp2\", \"C=\", \"Csp\", \"CO2M\", \"CNN+\", \"C%\", \"CIM+\", \"CR4R\",\n            \"CR3R\", \"CE4R\", \"Car\", \"C5A\", \"C5B\", \"C5\", \"HC\", \"HO\", \"HN\", \"HOCO\", \"HN=C\", \"HN2\", \"HOCC\", \"HOH\", \"HOS\",\n            \"HN+\", \"HO+\", \"HO=+\", \"HP\", \"O\", \"O=\", \"OX\", \"OM\", \"O+\", \"O=+\", \"OH2\", \"Oar\", \"N\", \"N=C\", \"NC=C\", \"NSP\",\n            \"=N=\", \"NAZT\", \"N+\", \"N2OX\", \"N3OX\", \"NC#N\", \"NO3\", \"N=O\", \"NC=O\", \"NSO\", \"N+=\", \"NCN+\", \"NGD+\", \"NR%\",\n            \"NM\", \"N5M\", \"NPYD\", \"NPYL\", \"NPD+\", \"N5A\", \"N5B\", \"NPOX\", \"N5OX\", \"N5+\", \"N5\", \"S\", \"S=C\", \">SN\", \"SO2\",\n            \"SX\", \"SO2M\", \"=SO\", \"Sthi\", \"PTET\", \"P\", \"-P=C\", \"F\", \"CL\", \"BR\", \"I\", \"SI\", \"CL04\", \"FE+2\", \"FE+3\", \"F-\",\n            \"CL-\", \"BR-\", \"LI+\", \"NA+\", \"K+\", \"ZN+2\", \"CA+2\", \"CU+1\", \"CU+2\", \"MG+2\", \"DU\"}", "var_name": "atomTypeIds"}], "methods": [{"identifier": "MMFF94AtomTypeMatcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " MMFF94AtomTypeMatcher()", "full_signature": "public  MMFF94AtomTypeMatcher()", "class_method_signature": "MMFF94AtomTypeMatcher.MMFF94AtomTypeMatcher()", "testcase": false, "constructor": true}, {"identifier": "getSphericalMatcher", "parameters": "(IAtomType type)", "modifiers": "private", "return": "String", "signature": "String getSphericalMatcher(IAtomType type)", "full_signature": "private String getSphericalMatcher(IAtomType type)", "class_method_signature": "MMFF94AtomTypeMatcher.getSphericalMatcher(IAtomType type)", "testcase": false, "constructor": false}, {"identifier": "getSphericalMatcher", "parameters": "(String type)", "modifiers": "private", "return": "String", "signature": "String getSphericalMatcher(String type)", "full_signature": "private String getSphericalMatcher(String type)", "class_method_signature": "MMFF94AtomTypeMatcher.getSphericalMatcher(String type)", "testcase": false, "constructor": false}, {"identifier": "findMatchingAtomTypes", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IAtomType[]", "signature": "IAtomType[] findMatchingAtomTypes(IAtomContainer atomContainer)", "full_signature": "@Override public IAtomType[] findMatchingAtomTypes(IAtomContainer atomContainer)", "class_method_signature": "MMFF94AtomTypeMatcher.findMatchingAtomTypes(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "findMatchingAtomType", "parameters": "(IAtomContainer atomContainer, IAtom atomInterface)", "modifiers": "@Override public", "return": "IAtomType", "signature": "IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "full_signature": "@Override public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "class_method_signature": "MMFF94AtomTypeMatcher.findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/atomtype/MMFF94AtomTypeMatcher.java"}, "focal_method": {"identifier": "findMatchingAtomType", "parameters": "(IAtomContainer atomContainer, IAtom atomInterface)", "modifiers": "@Override public", "return": "IAtomType", "body": "@Override\n    public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface) throws CDKException {\n        if (factory == null) {\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/mmff94_atomtypes.xml\",\n                        atomContainer.getBuilder());\n            } catch (Exception ex1) {\n                logger.error(ex1.getMessage());\n                logger.debug(ex1);\n                throw new CDKException(\"Could not instantiate the AtomType list!\", ex1);\n            }\n        }\n\n        IAtom atom = atomInterface;\n        //logger.debug(\"****** Configure MMFF94 AtomType via findMatching ******\");\n        //logger.debug(\" Symbol:\" + atom.getSymbol() +\" HoseCode>\" + atom.getSphericalMatcher() + \" \");\n        logger.debug(\" Symbol:\" + atom.getSymbol() + \" HoseCode>\" + atom.getProperty(CDKConstants.SPHERICAL_MATCHER)\n                + \" \");\n        //System.out.print(\"IN MMFF94AtomTypeMatcher Symbol:\" + atom.getSymbol() +\" HoseCode>\" + atom.getProperty(CDKConstants.SPHERICAL_MATCHER) + \" \");\n\n        if (atom instanceof IPseudoAtom) {\n            return factory.getAtomTypes(\"DU\")[0];\n        }\n        Pattern p1 = null;\n        Pattern p2 = null;\n        String ID = \"\";\n        boolean atomTypeFlag = false;\n        Matcher mat1 = null;\n        Matcher mat2 = null;\n        IBond.Order tmpMaxBondOrder;\n        maxBondOrder = atomContainer.getMaximumBondOrder(atom);\n        for (int j = 0; j < atomTypeIds.length; j++) {\n            tmpMaxBondOrder = factory.getAtomType(atomTypeIds[j]).getMaxBondOrder();\n            String atomSphericalMatcher = (String) factory.getAtomType(atomTypeIds[j]).getProperty(\n                    CDKConstants.SPHERICAL_MATCHER);\n            logger.debug(j + \" ATOM TYPE \" + tmpMaxBondOrder + \" \" + atomSphericalMatcher);\n            p1 = Pattern.compile(atomSphericalMatcher);\n            mat1 = p1.matcher((String) atom.getProperty(CDKConstants.SPHERICAL_MATCHER));\n            if (mat1.matches()) {\n                ID = atomTypeIds[j];\n                Object property = atom.getProperty(CDKConstants.CHEMICAL_GROUP_CONSTANT);\n                int atomChemGroupConstant = (Integer) property;\n                Object ringSize = atom.getProperty(CDKConstants.PART_OF_RING_OF_SIZE);\n                int atomRingSize = -1;\n                if (ringSize != null) {\n                    atomRingSize = (Integer) ringSize;\n                }\n                if (atomTypeIds[j].equals(\"C\")) {\n                    if (atomChemGroupConstant != -1) {//in Ring\n                        if (ringSize != null && maxBondOrder == IBond.Order.SINGLE) {\n                            if (atomRingSize == 3) {\n                                ID = atomTypeIds[9];//sp3 3mem rings\n                            } else if (atomRingSize == 4) {\n                                ID = atomTypeIds[8];//sp3 4mem rings\n                            }\n                        } else {//sp2\n                            String type13Matcher = getSphericalMatcher(atomTypeIds[13]);\n                            p1 = Pattern.compile(type13Matcher);//C5B\n                            mat1 = p1.matcher(atomSphericalMatcher);\n                            String type12Matcher = getSphericalMatcher(atomTypeIds[12]);\n                            p2 = Pattern.compile(type12Matcher);//C5A\n                            mat2 = p2.matcher(atomSphericalMatcher);\n                            if (mat1.matches() && atomChemGroupConstant % 2 == 0\n                                    && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                                ID = atomTypeIds[13];\n                            } else if (mat2.matches() && atomChemGroupConstant % 2 == 0\n                                    && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                                ID = atomTypeIds[12];\n                            } else if (atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)\n                                    && atomRingSize == 5) {\n                                ID = atomTypeIds[14];//C5 in het 5 ring\n                            } else if (atom.getFlag(CDKConstants.ISAROMATIC)) {\n                                ID = atomTypeIds[11];//Car in benzene, pyroll\n                            }\n                        }\n\n                    } else {//not in Ring\n                        p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[66]));//S=C\n                        mat1 = p1.matcher(atomSphericalMatcher);\n                        if (mat1.matches()) {\n                            ID = atomTypeIds[66];//S=C\n                        }\n                    }\n\n                } else if (atomTypeIds[j].equals(\"Csp2\")) {\n                    if (atomChemGroupConstant % 2 == 0 & atomRingSize == 4 & !atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[10];//CE4R\n                    }\n\n                } else if (atomTypeIds[j].equals(\"C=\")) {\n                    if (atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[12];//C5A\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N\")) {\n                    //Amid\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[48]));//NC=0\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches() && atomChemGroupConstant == -1) {\n                        ID = atomTypeIds[48];//NC=O\n                    }\n                    //nsp3 oxide\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[44]));//sp3 n-oxide\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches() && maxBondOrder == tmpMaxBondOrder) {\n                        ID = atomTypeIds[44];\n                    }\n                    //ring sytems\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[56]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n\n                    if (atomChemGroupConstant == 10) {\n                        ID = atomTypeIds[56];\n                    } else if (atomChemGroupConstant == 4) {\n                        ID = atomTypeIds[57];\n                    } else if (atomChemGroupConstant % 2 == 0 & atomRingSize == 5\n                            & atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[64];\n                    }\n                    //Nsp2-Oxides\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[61]));//npox\n                    mat1 = p1.matcher(atomSphericalMatcher);\n\n                    if (mat1.matches() && maxBondOrder == tmpMaxBondOrder) {\n                        ID = atomTypeIds[43];\n                    }\n                    if (atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        if (mat1.matches() && atomChemGroupConstant == 12) {\n                            ID = atomTypeIds[61];\n                        } else if (mat1.matches() && atomRingSize == 5) {\n                            ID = atomTypeIds[62];\n                        }\n                    }\n                    //NC#N\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[45]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[45];\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N=C\")) {\n                    //n beta heteroaromatic ring\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[59]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (atomChemGroupConstant != -1) {\n                        if (mat1.matches() && atomChemGroupConstant % 2 == 0 && atom.getFlag(CDKConstants.ISAROMATIC)\n                                && atomRingSize == 5) {\n                            ID = atomTypeIds[59];//N5A\n                        } else if (atomChemGroupConstant == 10) {//NPYD\n                            ID = atomTypeIds[56];\n                        } else if (atomChemGroupConstant == 4) {//NPYL\n                            ID = atomTypeIds[57];\n                        }\n                    }\n                    //N2OX\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[43]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches()) {\n                        if (atomChemGroupConstant == 10) {\n                            ID = atomTypeIds[61];//npox\n                        } else if (atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                            ID = atomTypeIds[62];//n5ox\n                        } else {\n                            ID = atomTypeIds[43];//n2ox\n                        }\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N2OX\")) {\n                    //NO3\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[46]));\n                    mat1 = p1.matcher(getSphericalMatcher(atom));\n                    if (mat1.matches() && atomChemGroupConstant == -1) {\n                        ID = atomTypeIds[46];//NO3\n                    }\n                    if (atomChemGroupConstant == 12) {\n                        ID = atomTypeIds[61];//NPOX\n                    } else if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC)\n                            && atomRingSize == 5) {\n                        ID = atomTypeIds[62];//N5OX\n                    }\n\n                } else if (atomTypeIds[j].equals(\"=N=\") || atomTypeIds[j].equals(\"NAZT\")) {\n                    if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                        ID = atomTypeIds[59];//aromatic N5A\n                    }\n\n                } else if (atomTypeIds[j].equals(\"N+=\")) {\n                    if (atomChemGroupConstant != -1 && atom.getFlag(CDKConstants.ISAROMATIC) && atomRingSize == 5) {\n                        ID = atomTypeIds[63];//n5+\n                    } else if (atomChemGroupConstant == 12) {\n                        ID = atomTypeIds[58];//npd+\n                    }\n\n                } else if (atomTypeIds[j].equals(\"O\")) {\n                    if (atomChemGroupConstant == 6) {\n                        ID = atomTypeIds[35];//Oar\n                    }\n\n                } else if (atomTypeIds[j].equals(\"HO\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[21]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[21];//HOCC\n                    }\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[18]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[18];//HOCO\n                    }\n\n                } else if (atomTypeIds[j].equals(\"P\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(atomTypeIds[75]));\n                    mat1 = p1.matcher(atomSphericalMatcher);\n                    if (mat1.matches()) {\n                        ID = atomTypeIds[75];//-P=C\n                    }\n                } else if (atomTypeIds[j].equals(\"S\")) {\n                    if (atomRingSize == 5 && atom.getFlag(CDKConstants.ISAROMATIC)) {\n                        ID = atomTypeIds[72];//Sthiophen\n                    }\n                } else if (atomTypeIds[j].equals(\"HC\")) {\n                    p1 = Pattern.compile(getSphericalMatcher(\"HP\"));\n                    mat1 = p1.matcher((String) atom.getProperty(CDKConstants.SPHERICAL_MATCHER));\n                    if (mat1.matches()) {\n                        ID = \"HP\";\n                    }\n                }\n\n                atomTypeFlag = true;\n                logger.debug(\" MATCH AtomTypeID:\" + j + \" \" + ID);\n                break;\n            }//IF\n        }//for end\n        if (atomTypeFlag) {\n            atomTypeFlag = false;\n            //System.out.println(\" \"+ID);\n            return factory.getAtomType(ID);\n        } else {\n            return factory.getAtomType(\"DU\");\n        }\n    }", "signature": "IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "full_signature": "@Override public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "class_method_signature": "MMFF94AtomTypeMatcher.findMatchingAtomType(IAtomContainer atomContainer, IAtom atomInterface)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getBuilder", "error", "getMessage", "debug", "debug", "getSymbol", "getProperty", "getAtomTypes", "getMaximumBondOrder", "getMaxBondOrder", "getAtomType", "getProperty", "getAtomType", "debug", "compile", "matcher", "getProperty", "matches", "getProperty", "getProperty", "equals", "getSphericalMatcher", "compile", "matcher", "getSphericalMatcher", "compile", "matcher", "matches", "getFlag", "matches", "getFlag", "getFlag", "getFlag", "compile", "getSphericalMatcher", "matcher", "matches", "equals", "getFlag", "equals", "getFlag", "equals", "compile", "getSphericalMatcher", "matcher", "matches", "compile", "getSphericalMatcher", "matcher", "matches", "compile", "getSphericalMatcher", "matcher", "getFlag", "compile", "getSphericalMatcher", "matcher", "matches", "getFlag", "matches", "matches", "compile", "getSphericalMatcher", "matcher", "getSphericalMatcher", "matches", "equals", "compile", "getSphericalMatcher", "matcher", "getSphericalMatcher", "matches", "getFlag", "compile", "getSphericalMatcher", "matcher", "getSphericalMatcher", "matches", "getFlag", "equals", "compile", "getSphericalMatcher", "matcher", "getSphericalMatcher", "matches", "getFlag", "equals", "equals", "getFlag", "equals", "getFlag", "equals", "equals", "compile", "getSphericalMatcher", "matcher", "matches", "compile", "getSphericalMatcher", "matcher", "matches", "equals", "compile", "getSphericalMatcher", "matcher", "matches", "equals", "getFlag", "equals", "compile", "getSphericalMatcher", "matcher", "getProperty", "matches", "debug", "getAtomType", "getAtomType"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}