{"test_class": {"identifier": "ThingBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"test\", \"test\");", "modifier": "private static final", "type": "ThingTypeUID", "declarator": "THING_TYPE_UID = new ThingTypeUID(\"test\", \"test\")", "var_name": "THING_TYPE_UID"}, {"original_string": "private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"test\");", "modifier": "private static final", "type": "ThingUID", "declarator": "THING_UID = new ThingUID(THING_TYPE_UID, \"test\")", "var_name": "THING_UID"}, {"original_string": "private static final String KEY1 = \"key1\";", "modifier": "private static final", "type": "String", "declarator": "KEY1 = \"key1\"", "var_name": "KEY1"}, {"original_string": "private static final String KEY2 = \"key2\";", "modifier": "private static final", "type": "String", "declarator": "KEY2 = \"key2\"", "var_name": "KEY2"}, {"original_string": "private static final String VALUE1 = \"value1\";", "modifier": "private static final", "type": "String", "declarator": "VALUE1 = \"value1\"", "var_name": "VALUE1"}, {"original_string": "private static final String VALUE2 = \"value2\";", "modifier": "private static final", "type": "String", "declarator": "VALUE2 = \"value2\"", "var_name": "VALUE2"}, {"original_string": "private final Map<String, String> properties = Map.of(KEY1, VALUE1, KEY2, VALUE2);", "modifier": "private final", "type": "Map<String, String>", "declarator": "properties = Map.of(KEY1, VALUE1, KEY2, VALUE2)", "var_name": "properties"}, {"original_string": "private ThingBuilder thingBuilder;", "modifier": "private", "type": "ThingBuilder", "declarator": "thingBuilder", "var_name": "thingBuilder"}], "file": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/builder/ThingBuilderTest.java"}, "test_case": {"identifier": "testWithoutChannel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutChannel() {\n        thingBuilder.withChannels( //\n                ChannelBuilder.create(new ChannelUID(THING_UID, \"channel1\")).build(), //\n                ChannelBuilder.create(new ChannelUID(THING_UID, \"channel2\")).build());\n        thingBuilder.withoutChannel(new ChannelUID(THING_UID, \"channel1\"));\n        Thing thing = thingBuilder.build();\n        assertThat(thing.getChannels(), hasSize(1));\n        assertThat(thing.getChannels().get(0).getUID().getId(), is(equalTo(\"channel2\")));\n    }", "signature": "void testWithoutChannel()", "full_signature": "@Test public void testWithoutChannel()", "class_method_signature": "ThingBuilderTest.testWithoutChannel()", "testcase": true, "constructor": false, "invocations": ["withChannels", "build", "create", "build", "create", "withoutChannel", "build", "assertThat", "getChannels", "hasSize", "assertThat", "getId", "getUID", "get", "getChannels", "is", "equalTo"]}, "focal_class": {"identifier": "ThingBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ThingUID thingUID;", "modifier": "protected final", "type": "ThingUID", "declarator": "thingUID", "var_name": "thingUID"}, {"original_string": "protected final ThingTypeUID thingTypeUID;", "modifier": "protected final", "type": "ThingTypeUID", "declarator": "thingTypeUID", "var_name": "thingTypeUID"}, {"original_string": "private @Nullable String label;", "modifier": "private @Nullable", "type": "String", "declarator": "label", "var_name": "label"}, {"original_string": "private final List<Channel> channels = new ArrayList<>();", "modifier": "private final", "type": "List<Channel>", "declarator": "channels = new ArrayList<>()", "var_name": "channels"}, {"original_string": "private @Nullable Configuration configuration;", "modifier": "private @Nullable", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private @Nullable ThingUID bridgeUID;", "modifier": "private @Nullable", "type": "ThingUID", "declarator": "bridgeUID", "var_name": "bridgeUID"}, {"original_string": "private @Nullable Map<String, String> properties;", "modifier": "private @Nullable", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private @Nullable String location;", "modifier": "private @Nullable", "type": "String", "declarator": "location", "var_name": "location"}], "methods": [{"identifier": "ThingBuilder", "parameters": "(ThingTypeUID thingTypeUID, ThingUID thingUID)", "modifiers": "protected", "return": "", "signature": " ThingBuilder(ThingTypeUID thingTypeUID, ThingUID thingUID)", "full_signature": "protected  ThingBuilder(ThingTypeUID thingTypeUID, ThingUID thingUID)", "class_method_signature": "ThingBuilder.ThingBuilder(ThingTypeUID thingTypeUID, ThingUID thingUID)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(ThingTypeUID thingTypeUID, String thingId)", "modifiers": "public static", "return": "ThingBuilder", "signature": "ThingBuilder create(ThingTypeUID thingTypeUID, String thingId)", "full_signature": "public static ThingBuilder create(ThingTypeUID thingTypeUID, String thingId)", "class_method_signature": "ThingBuilder.create(ThingTypeUID thingTypeUID, String thingId)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ThingTypeUID thingTypeUID, ThingUID thingUID)", "modifiers": "public static", "return": "ThingBuilder", "signature": "ThingBuilder create(ThingTypeUID thingTypeUID, ThingUID thingUID)", "full_signature": "public static ThingBuilder create(ThingTypeUID thingTypeUID, ThingUID thingUID)", "class_method_signature": "ThingBuilder.create(ThingTypeUID thingTypeUID, ThingUID thingUID)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "Thing", "signature": "Thing build()", "full_signature": "public Thing build()", "class_method_signature": "ThingBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "withLabel", "parameters": "(@Nullable String label)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withLabel(@Nullable String label)", "full_signature": "public ThingBuilder withLabel(@Nullable String label)", "class_method_signature": "ThingBuilder.withLabel(@Nullable String label)", "testcase": false, "constructor": false}, {"identifier": "withChannel", "parameters": "(Channel channel)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withChannel(Channel channel)", "full_signature": "public ThingBuilder withChannel(Channel channel)", "class_method_signature": "ThingBuilder.withChannel(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "withChannels", "parameters": "(Channel... channels)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withChannels(Channel... channels)", "full_signature": "public ThingBuilder withChannels(Channel... channels)", "class_method_signature": "ThingBuilder.withChannels(Channel... channels)", "testcase": false, "constructor": false}, {"identifier": "withChannels", "parameters": "(List<Channel> channels)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withChannels(List<Channel> channels)", "full_signature": "public ThingBuilder withChannels(List<Channel> channels)", "class_method_signature": "ThingBuilder.withChannels(List<Channel> channels)", "testcase": false, "constructor": false}, {"identifier": "withoutChannel", "parameters": "(ChannelUID channelUID)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withoutChannel(ChannelUID channelUID)", "full_signature": "public ThingBuilder withoutChannel(ChannelUID channelUID)", "class_method_signature": "ThingBuilder.withoutChannel(ChannelUID channelUID)", "testcase": false, "constructor": false}, {"identifier": "withoutChannels", "parameters": "(Channel... channels)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withoutChannels(Channel... channels)", "full_signature": "public ThingBuilder withoutChannels(Channel... channels)", "class_method_signature": "ThingBuilder.withoutChannels(Channel... channels)", "testcase": false, "constructor": false}, {"identifier": "withoutChannels", "parameters": "(List<Channel> channels)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withoutChannels(List<Channel> channels)", "full_signature": "public ThingBuilder withoutChannels(List<Channel> channels)", "class_method_signature": "ThingBuilder.withoutChannels(List<Channel> channels)", "testcase": false, "constructor": false}, {"identifier": "withConfiguration", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withConfiguration(Configuration configuration)", "full_signature": "public ThingBuilder withConfiguration(Configuration configuration)", "class_method_signature": "ThingBuilder.withConfiguration(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "withBridge", "parameters": "(@Nullable ThingUID bridgeUID)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withBridge(@Nullable ThingUID bridgeUID)", "full_signature": "public ThingBuilder withBridge(@Nullable ThingUID bridgeUID)", "class_method_signature": "ThingBuilder.withBridge(@Nullable ThingUID bridgeUID)", "testcase": false, "constructor": false}, {"identifier": "withProperties", "parameters": "(Map<String, String> properties)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withProperties(Map<String, String> properties)", "full_signature": "public ThingBuilder withProperties(Map<String, String> properties)", "class_method_signature": "ThingBuilder.withProperties(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "withLocation", "parameters": "(@Nullable String location)", "modifiers": "public", "return": "ThingBuilder", "signature": "ThingBuilder withLocation(@Nullable String location)", "full_signature": "public ThingBuilder withLocation(@Nullable String location)", "class_method_signature": "ThingBuilder.withLocation(@Nullable String location)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(ThingImpl thing)", "modifiers": "protected", "return": "Thing", "signature": "Thing populate(ThingImpl thing)", "full_signature": "protected Thing populate(ThingImpl thing)", "class_method_signature": "ThingBuilder.populate(ThingImpl thing)", "testcase": false, "constructor": false}, {"identifier": "validateChannelUIDs", "parameters": "(List<Channel> channels)", "modifiers": "private", "return": "void", "signature": "void validateChannelUIDs(List<Channel> channels)", "full_signature": "private void validateChannelUIDs(List<Channel> channels)", "class_method_signature": "ThingBuilder.validateChannelUIDs(List<Channel> channels)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/binding/builder/ThingBuilder.java"}, "focal_method": {"identifier": "withoutChannel", "parameters": "(ChannelUID channelUID)", "modifiers": "public", "return": "ThingBuilder", "body": "public ThingBuilder withoutChannel(ChannelUID channelUID) {\n        Iterator<Channel> iterator = channels.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next().getUID().equals(channelUID)) {\n                iterator.remove();\n                break;\n            }\n        }\n        return this;\n    }", "signature": "ThingBuilder withoutChannel(ChannelUID channelUID)", "full_signature": "public ThingBuilder withoutChannel(ChannelUID channelUID)", "class_method_signature": "ThingBuilder.withoutChannel(ChannelUID channelUID)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "equals", "getUID", "next", "remove"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}