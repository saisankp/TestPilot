{"test_class": {"identifier": "RollingCommandMaxConcurrencyStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "RollingCommandMaxConcurrencyStream stream;", "modifier": "", "type": "RollingCommandMaxConcurrencyStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "HystrixRequestContext context;", "modifier": "", "type": "HystrixRequestContext", "declarator": "context", "var_name": "context"}, {"original_string": "ExecutorService threadPool;", "modifier": "", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "static HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"Command-Concurrency\");", "modifier": "static", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"Command-Concurrency\")", "var_name": "groupKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingCommandMaxConcurrencyStreamTest.java"}, "test_case": {"identifier": "testConcurrencyStreamProperlyFiltersOutSemaphoreRejections", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConcurrencyStreamProperlyFiltersOutSemaphoreRejections() throws InterruptedException {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(\"CMD-Concurrency-H\");\n        stream = RollingCommandMaxConcurrencyStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(getSubscriber(latch));\n\n        //10 commands executed concurrently on different caller threads should saturate semaphore\n        //once these are in-flight, execute 10 more concurrently on new caller threads.\n        //since these are semaphore-rejected, the max concurrency should be 10\n\n        List<Command> saturators = new ArrayList<Command>();\n        for (int i = 0; i < 10; i++) {\n            saturators.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 400, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));\n        }\n\n        final List<Command> rejected = new ArrayList<Command>();\n        for (int i = 0; i < 10; i++) {\n            rejected.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 100, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));\n        }\n\n        for (final Command saturatingCmd: saturators) {\n            threadPool.submit(new HystrixContextRunnable(new Runnable() {\n                @Override\n                public void run() {\n                    saturatingCmd.observe();\n                }\n            }));\n        }\n\n        Thread.sleep(30);\n\n        for (final Command rejectedCmd: rejected) {\n            threadPool.submit(new HystrixContextRunnable(new Runnable() {\n                @Override\n                public void run() {\n                    rejectedCmd.observe();\n                }\n            }));\n        }\n\n        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(10, stream.getLatestRollingMax());\n    }", "signature": "void testConcurrencyStreamProperlyFiltersOutSemaphoreRejections()", "full_signature": "@Test public void testConcurrencyStreamProperlyFiltersOutSemaphoreRejections()", "class_method_signature": "RollingCommandMaxConcurrencyStreamTest.testConcurrencyStreamProperlyFiltersOutSemaphoreRejections()", "testcase": true, "constructor": false, "invocations": ["asKey", "getInstance", "startCachingStreamValuesIfUnstarted", "subscribe", "take", "observe", "getSubscriber", "add", "from", "add", "from", "submit", "observe", "sleep", "submit", "observe", "assertTrue", "await", "println", "getExecutedCommandsAsString", "getCurrentRequest", "assertEquals", "getLatestRollingMax"]}, "focal_class": {"identifier": "RollingCommandMaxConcurrencyStream", "superclass": "extends RollingConcurrencyStream", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, RollingCommandMaxConcurrencyStream> streams = new ConcurrentHashMap<String, RollingCommandMaxConcurrencyStream>();", "modifier": "private static final", "type": "ConcurrentMap<String, RollingCommandMaxConcurrencyStream>", "declarator": "streams = new ConcurrentHashMap<String, RollingCommandMaxConcurrencyStream>()", "var_name": "streams"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "RollingCommandMaxConcurrencyStream", "signature": "RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "RollingCommandMaxConcurrencyStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "modifiers": "public static", "return": "RollingCommandMaxConcurrencyStream", "signature": "RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "full_signature": "public static RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "class_method_signature": "RollingCommandMaxConcurrencyStream.getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "RollingCommandMaxConcurrencyStream.reset()", "testcase": false, "constructor": false}, {"identifier": "RollingCommandMaxConcurrencyStream", "parameters": "(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs)", "modifiers": "private", "return": "", "signature": " RollingCommandMaxConcurrencyStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs)", "full_signature": "private  RollingCommandMaxConcurrencyStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs)", "class_method_signature": "RollingCommandMaxConcurrencyStream.RollingCommandMaxConcurrencyStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs)", "testcase": false, "constructor": true}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/RollingCommandMaxConcurrencyStream.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "RollingCommandMaxConcurrencyStream", "body": "public static RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties) {\n        final int counterMetricWindow = properties.metricsRollingStatisticalWindowInMilliseconds().get();\n        final int numCounterBuckets = properties.metricsRollingStatisticalWindowBuckets().get();\n        final int counterBucketSizeInMs = counterMetricWindow / numCounterBuckets;\n\n        return getInstance(commandKey, numCounterBuckets, counterBucketSizeInMs);\n    }", "signature": "RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static RollingCommandMaxConcurrencyStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "RollingCommandMaxConcurrencyStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false, "invocations": ["get", "metricsRollingStatisticalWindowInMilliseconds", "get", "metricsRollingStatisticalWindowBuckets", "getInstance"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}