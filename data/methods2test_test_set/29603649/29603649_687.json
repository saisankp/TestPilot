{"test_class": {"identifier": "SafeguardLimitValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private PropertyHolder propertyHolder;", "modifier": "@Mock\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@InjectMocks\n    private SafeguardLimitValidator underTest;", "modifier": "@InjectMocks\n    private", "type": "SafeguardLimitValidator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-property-validation/src/test/java/com/epam/wilma/properties/validation/SafeguardLimitValidatorTest.java"}, "test_case": {"identifier": "testValidateShouldNotThrowExceptionWhenAllLimitsAreValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateShouldNotThrowExceptionWhenAllLimitsAreValid() {\n        //GIVEN\n        given(getFiOffLimit()).willReturn(10L);\n        given(getFiOnLimit()).willReturn(8L);\n        given(getMwOffLimit()).willReturn(10L);\n        given(getMwOnLimit()).willReturn(8L);\n        //WHEN\n        underTest.validate();\n        //THEN exception was thrown\n    }", "signature": "void testValidateShouldNotThrowExceptionWhenAllLimitsAreValid()", "full_signature": "@Test public void testValidateShouldNotThrowExceptionWhenAllLimitsAreValid()", "class_method_signature": "SafeguardLimitValidatorTest.testValidateShouldNotThrowExceptionWhenAllLimitsAreValid()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getFiOffLimit", "willReturn", "given", "getFiOnLimit", "willReturn", "given", "getMwOffLimit", "willReturn", "given", "getMwOnLimit", "validate"]}, "focal_class": {"identifier": "SafeguardLimitValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PropertyHolder propertyHolder;", "modifier": "@Autowired\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}], "methods": [{"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "SafeguardLimitValidator.validate()", "testcase": false, "constructor": false}, {"identifier": "checkLimits", "parameters": "(final SafeguardLimits limits)", "modifiers": "private", "return": "void", "signature": "void checkLimits(final SafeguardLimits limits)", "full_signature": "private void checkLimits(final SafeguardLimits limits)", "class_method_signature": "SafeguardLimitValidator.checkLimits(final SafeguardLimits limits)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-property-validation/src/main/java/com/epam/wilma/properties/validation/SafeguardLimitValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void validate() {\n        Long fiOffLimit = propertyHolder.getLong(\"safeguard.responseFIdecoder.OFFlimit\");\n        Long fiOnLimit = propertyHolder.getLong(\"safeguard.responseFIdecoder.ONlimit\");\n        Long mwOffLimit = propertyHolder.getLong(\"safeguard.responseMessageWriter.OFFlimit\");\n        Long mwOnLimit = propertyHolder.getLong(\"safeguard.responseMessageWriter.ONlimit\");\n        String jmxPort = propertyHolder.get(\"com.sun.management.jmxremote.port\");\n        checkLimits(new SafeguardLimits(fiOffLimit, fiOnLimit, mwOffLimit, mwOnLimit, jmxPort));\n    }", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "SafeguardLimitValidator.validate()", "testcase": false, "constructor": false, "invocations": ["getLong", "getLong", "getLong", "getLong", "get", "checkLimits"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}