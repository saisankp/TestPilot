{"test_class": {"identifier": "AddJoinConditionColumnsToSourcesTest", "superclass": "extends AbstractQueryTest", "interfaces": "", "fields": [{"original_string": "private AddJoinConditionColumnsToSources rule;", "modifier": "private", "type": "AddJoinConditionColumnsToSources", "declarator": "rule", "var_name": "rule"}, {"original_string": "private QueryContext context;", "modifier": "private", "type": "QueryContext", "declarator": "context", "var_name": "context"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSourcesTest.java"}, "test_case": {"identifier": "shouldAddJoinConditionColumnOnBothSidesIfNotAlreadyUsed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddJoinConditionColumnOnBothSidesIfNotAlreadyUsed() {\n        // Create a join ...\n        PlanNode joinNode = new PlanNode(Type.JOIN);\n        joinNode.setProperty(Property.JOIN_TYPE, JoinType.LEFT_OUTER);\n        joinNode.setProperty(Property.JOIN_CONDITION, new EquiJoinCondition(selector(\"left\"), \"c4\", selector(\"right\"), \"d4\"));\n        PlanNode lhs = sourceNode(context, joinNode, \"left\", \"c1\", \"c2\", \"c3\");\n        PlanNode rhs = sourceNode(context, joinNode, \"right\", \"d1\", \"d2\", \"d3\");\n\n        // Execute the rule ...\n        PlanNode result = rule.execute(context, joinNode, new LinkedList<OptimizerRule>());\n        assertThat(result, is(sameInstance(joinNode)));\n\n        // Verify nothing has changed ...\n        assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.LEFT_OUTER));\n        assertThat(joinNode.getFirstChild(), is(sameInstance(lhs)));\n        assertThat(joinNode.getLastChild(), is(sameInstance(rhs)));\n        assertThat(joinNode.getChildCount(), is(2));\n        PlanNode left = joinNode.getFirstChild();\n        PlanNode right = joinNode.getLastChild();\n        assertProperty(left, Property.PROJECT_COLUMNS, columns(context, selector(\"left\"), \"c1\", \"c2\", \"c3\", \"c4\"));\n        assertProperty(left, Property.PROJECT_COLUMN_TYPES, columnTypes(context, selector(\"left\"), \"c1\", \"c2\", \"c3\", \"c4\"));\n        assertProperty(right, Property.PROJECT_COLUMNS, columns(context, selector(\"right\"), \"d1\", \"d2\", \"d3\", \"d4\"));\n        assertProperty(right, Property.PROJECT_COLUMN_TYPES, columnTypes(context, selector(\"right\"), \"d1\", \"d2\", \"d3\", \"d4\"));\n    }", "signature": "void shouldAddJoinConditionColumnOnBothSidesIfNotAlreadyUsed()", "full_signature": "@Test public void shouldAddJoinConditionColumnOnBothSidesIfNotAlreadyUsed()", "class_method_signature": "AddJoinConditionColumnsToSourcesTest.shouldAddJoinConditionColumnOnBothSidesIfNotAlreadyUsed()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "selector", "selector", "sourceNode", "sourceNode", "execute", "assertThat", "is", "sameInstance", "assertThat", "getProperty", "is", "assertThat", "getFirstChild", "is", "sameInstance", "assertThat", "getLastChild", "is", "sameInstance", "assertThat", "getChildCount", "is", "getFirstChild", "getLastChild", "assertProperty", "columns", "selector", "assertProperty", "columnTypes", "selector", "assertProperty", "columns", "selector", "assertProperty", "columnTypes", "selector"]}, "focal_class": {"identifier": "AddJoinConditionColumnsToSources", "superclass": "", "interfaces": "implements OptimizerRule", "fields": [{"original_string": "public static final AddJoinConditionColumnsToSources INSTANCE = new AddJoinConditionColumnsToSources();", "modifier": "public static final", "type": "AddJoinConditionColumnsToSources", "declarator": "INSTANCE = new AddJoinConditionColumnsToSources()", "var_name": "INSTANCE"}], "methods": [{"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "AddJoinConditionColumnsToSources.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false}, {"identifier": "addEquiJoinColumn", "parameters": "( QueryContext context,\n                                      PlanNode node,\n                                      Column joinColumn )", "modifiers": "protected", "return": "void", "signature": "void addEquiJoinColumn( QueryContext context,\n                                      PlanNode node,\n                                      Column joinColumn )", "full_signature": "protected void addEquiJoinColumn( QueryContext context,\n                                      PlanNode node,\n                                      Column joinColumn )", "class_method_signature": "AddJoinConditionColumnsToSources.addEquiJoinColumn( QueryContext context,\n                                      PlanNode node,\n                                      Column joinColumn )", "testcase": false, "constructor": false}, {"identifier": "addIfMissing", "parameters": "( QueryContext context,\n                                    Column column,\n                                    List<Column> columns,\n                                    List<String> columnTypes )", "modifiers": "protected", "return": "boolean", "signature": "boolean addIfMissing( QueryContext context,\n                                    Column column,\n                                    List<Column> columns,\n                                    List<String> columnTypes )", "full_signature": "protected boolean addIfMissing( QueryContext context,\n                                    Column column,\n                                    List<Column> columns,\n                                    List<String> columnTypes )", "class_method_signature": "AddJoinConditionColumnsToSources.addIfMissing( QueryContext context,\n                                    Column column,\n                                    List<Column> columns,\n                                    List<String> columnTypes )", "testcase": false, "constructor": false}, {"identifier": "columnFor", "parameters": "( SelectorName selector,\n                                String property,\n                                boolean includeSourceName )", "modifiers": "protected", "return": "Column", "signature": "Column columnFor( SelectorName selector,\n                                String property,\n                                boolean includeSourceName )", "full_signature": "protected Column columnFor( SelectorName selector,\n                                String property,\n                                boolean includeSourceName )", "class_method_signature": "AddJoinConditionColumnsToSources.columnFor( SelectorName selector,\n                                String property,\n                                boolean includeSourceName )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AddJoinConditionColumnsToSources.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/optimize/AddJoinConditionColumnsToSources.java"}, "focal_method": {"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "body": "@Override\n    public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack ) {\n        final boolean includeSourceName = context.getHints().qualifyExpandedColumnNames;\n\n        // For each of the JOIN nodes ...\n        for (PlanNode joinNode : plan.findAllAtOrBelow(Type.JOIN)) {\n            JoinCondition condition = joinNode.getProperty(Property.JOIN_CONDITION, JoinCondition.class);\n            if (condition instanceof EquiJoinCondition) {\n                EquiJoinCondition equiJoinCondition = (EquiJoinCondition)condition;\n                SelectorName selector1 = equiJoinCondition.selector1Name();\n                Column joinColumn1 = columnFor(equiJoinCondition.selector1Name(),\n                                               equiJoinCondition.getProperty1Name(),\n                                               includeSourceName);\n                Column joinColumn2 = columnFor(equiJoinCondition.selector2Name(),\n                                               equiJoinCondition.getProperty2Name(),\n                                               includeSourceName);\n\n                // Figure out which side of the join condition goes with which side of the plan nodes ...\n                PlanNode left = joinNode.getFirstChild();\n                PlanNode right = joinNode.getLastChild();\n                if (left.getSelectors().contains(selector1)) {\n                    addEquiJoinColumn(context, left, joinColumn1);\n                    addEquiJoinColumn(context, right, joinColumn2);\n                } else {\n                    addEquiJoinColumn(context, left, joinColumn2);\n                    addEquiJoinColumn(context, right, joinColumn1);\n                }\n            }\n\n        }\n        return plan;\n    }", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "AddJoinConditionColumnsToSources.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false, "invocations": ["getHints", "findAllAtOrBelow", "getProperty", "selector1Name", "columnFor", "selector1Name", "getProperty1Name", "columnFor", "selector2Name", "getProperty2Name", "getFirstChild", "getLastChild", "contains", "getSelectors", "addEquiJoinColumn", "addEquiJoinColumn", "addEquiJoinColumn", "addEquiJoinColumn"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}