{"test_class": {"identifier": "GridLayoutTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [{"original_string": "private GridLayout layout;", "modifier": "private", "type": "GridLayout", "declarator": "layout", "var_name": "layout"}, {"original_string": "private GridPane grid;", "modifier": "private", "type": "GridPane", "declarator": "grid", "var_name": "grid"}], "file": "plugins/base/src/test/java/edu/wpi/first/shuffleboard/plugin/base/layout/GridLayoutTest.java"}, "test_case": {"identifier": "testReduceRowCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReduceRowCount() {\n    FxUtils.runOnFxThread(() -> layout.setNumRows(2));\n    waitForFxEvents();\n    assertEquals(6, getPlaceholderCount(), \"Removing a row should reduce the number of placeholders from 9 to 6\");\n  }", "signature": "void testReduceRowCount()", "full_signature": "@Test public void testReduceRowCount()", "class_method_signature": "GridLayoutTest.testReduceRowCount()", "testcase": true, "constructor": false, "invocations": ["runOnFxThread", "setNumRows", "waitForFxEvents", "assertEquals", "getPlaceholderCount"]}, "focal_class": {"identifier": "GridLayout", "superclass": "extends LayoutBase", "interfaces": "", "fields": [{"original_string": "@FXML\n  private Pane root;", "modifier": "@FXML\n  private", "type": "Pane", "declarator": "root", "var_name": "root"}, {"original_string": "@FXML\n  private GridPane grid;", "modifier": "@FXML\n  private", "type": "GridPane", "declarator": "grid", "var_name": "grid"}, {"original_string": "@SuppressWarnings(\"PMD.LinguisticNaming\") // Predicates prefixed with \"is\" makes PMD mad\n  private static final Predicate<Node> isPlaceholder = n -> n instanceof Placeholder;", "modifier": "@SuppressWarnings(\"PMD.LinguisticNaming\") // Predicates prefixed with \"is\" makes PMD mad\n  private static final", "type": "Predicate<Node>", "declarator": "isPlaceholder = n -> n instanceof Placeholder", "var_name": "isPlaceholder"}, {"original_string": "private final IntegerProperty numColumns = new SimpleIntegerProperty(this, \"columns\", 3);", "modifier": "private final", "type": "IntegerProperty", "declarator": "numColumns = new SimpleIntegerProperty(this, \"columns\", 3)", "var_name": "numColumns"}, {"original_string": "private final IntegerProperty numRows = new SimpleIntegerProperty(this, \"rows\", 3);", "modifier": "private final", "type": "IntegerProperty", "declarator": "numRows = new SimpleIntegerProperty(this, \"rows\", 3)", "var_name": "numRows"}, {"original_string": "private final Map<Component, ChildContainer> panes = new WeakHashMap<>();", "modifier": "private final", "type": "Map<Component, ChildContainer>", "declarator": "panes = new WeakHashMap<>()", "var_name": "panes"}, {"original_string": "private final Pane highlight = new Pane();", "modifier": "private final", "type": "Pane", "declarator": "highlight = new Pane()", "var_name": "highlight"}, {"original_string": "private DoubleBinding placeholderWidth;", "modifier": "private", "type": "DoubleBinding", "declarator": "placeholderWidth", "var_name": "placeholderWidth"}, {"original_string": "private DoubleBinding placeholderHeight;", "modifier": "private", "type": "DoubleBinding", "declarator": "placeholderHeight", "var_name": "placeholderHeight"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void initialize()", "full_signature": "@FXML private void initialize()", "class_method_signature": "GridLayout.initialize()", "testcase": false, "constructor": false}, {"identifier": "addPlaceholders", "parameters": "(int minCol, int maxCol, int minRow, int maxRow)", "modifiers": "private", "return": "void", "signature": "void addPlaceholders(int minCol, int maxCol, int minRow, int maxRow)", "full_signature": "private void addPlaceholders(int minCol, int maxCol, int minRow, int maxRow)", "class_method_signature": "GridLayout.addPlaceholders(int minCol, int maxCol, int minRow, int maxRow)", "testcase": false, "constructor": false}, {"identifier": "addPlaceholder", "parameters": "(int col, int row)", "modifiers": "private", "return": "void", "signature": "void addPlaceholder(int col, int row)", "full_signature": "private void addPlaceholder(int col, int row)", "class_method_signature": "GridLayout.addPlaceholder(int col, int row)", "testcase": false, "constructor": false}, {"identifier": "removePlaceholders", "parameters": "(ToDoubleFunction<Node> positionGetter, int max)", "modifiers": "private", "return": "void", "signature": "void removePlaceholders(ToDoubleFunction<Node> positionGetter, int max)", "full_signature": "private void removePlaceholders(ToDoubleFunction<Node> positionGetter, int max)", "class_method_signature": "GridLayout.removePlaceholders(ToDoubleFunction<Node> positionGetter, int max)", "testcase": false, "constructor": false}, {"identifier": "setupDropHighlight", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupDropHighlight()", "full_signature": "private void setupDropHighlight()", "class_method_signature": "GridLayout.setupDropHighlight()", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(Component component, double x, double y)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(Component component, double x, double y)", "full_signature": "@Override public void addChild(Component component, double x, double y)", "class_method_signature": "GridLayout.addChild(Component component, double x, double y)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(Component component, GridPoint point)", "modifiers": "public", "return": "void", "signature": "void addChild(Component component, GridPoint point)", "full_signature": "public void addChild(Component component, GridPoint point)", "class_method_signature": "GridLayout.addChild(Component component, GridPoint point)", "testcase": false, "constructor": false}, {"identifier": "pointAt", "parameters": "(double x, double y)", "modifiers": "private", "return": "GridPoint", "signature": "GridPoint pointAt(double x, double y)", "full_signature": "private GridPoint pointAt(double x, double y)", "class_method_signature": "GridLayout.pointAt(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "isManaged", "parameters": "(Node node)", "modifiers": "private", "return": "boolean", "signature": "boolean isManaged(Node node)", "full_signature": "private boolean isManaged(Node node)", "class_method_signature": "GridLayout.isManaged(Node node)", "testcase": false, "constructor": false}, {"identifier": "nodesInCol", "parameters": "(int col)", "modifiers": "private", "return": "Stream<Node>", "signature": "Stream<Node> nodesInCol(int col)", "full_signature": "private Stream<Node> nodesInCol(int col)", "class_method_signature": "GridLayout.nodesInCol(int col)", "testcase": false, "constructor": false}, {"identifier": "nodesInRow", "parameters": "(int row)", "modifiers": "private", "return": "Stream<Node>", "signature": "Stream<Node> nodesInRow(int row)", "full_signature": "private Stream<Node> nodesInRow(int row)", "class_method_signature": "GridLayout.nodesInRow(int row)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "(int col, int row)", "modifiers": "private", "return": "boolean", "signature": "boolean isOpen(int col, int row)", "full_signature": "private boolean isOpen(int col, int row)", "class_method_signature": "GridLayout.isOpen(int col, int row)", "testcase": false, "constructor": false}, {"identifier": "paneFor", "parameters": "(Component component)", "modifiers": "private", "return": "ChildContainer", "signature": "ChildContainer paneFor(Component component)", "full_signature": "private ChildContainer paneFor(Component component)", "class_method_signature": "GridLayout.paneFor(Component component)", "testcase": false, "constructor": false}, {"identifier": "addComponent", "parameters": "(ComponentModel model)", "modifiers": "@Override public", "return": "Component", "signature": "Component addComponent(ComponentModel model)", "full_signature": "@Override public Component addComponent(ComponentModel model)", "class_method_signature": "GridLayout.addComponent(ComponentModel model)", "testcase": false, "constructor": false}, {"identifier": "addComponentToView", "parameters": "(Component component)", "modifiers": "@Override protected", "return": "void", "signature": "void addComponentToView(Component component)", "full_signature": "@Override protected void addComponentToView(Component component)", "class_method_signature": "GridLayout.addComponentToView(Component component)", "testcase": false, "constructor": false}, {"identifier": "removeComponentFromView", "parameters": "(Component component)", "modifiers": "@Override protected", "return": "void", "signature": "void removeComponentFromView(Component component)", "full_signature": "@Override protected void removeComponentFromView(Component component)", "class_method_signature": "GridLayout.removeComponentFromView(Component component)", "testcase": false, "constructor": false}, {"identifier": "replaceInPlace", "parameters": "(Component existing, Component replacement)", "modifiers": "@Override protected", "return": "void", "signature": "void replaceInPlace(Component existing, Component replacement)", "full_signature": "@Override protected void replaceInPlace(Component existing, Component replacement)", "class_method_signature": "GridLayout.replaceInPlace(Component existing, Component replacement)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "Pane", "signature": "Pane getView()", "full_signature": "@Override public Pane getView()", "class_method_signature": "GridLayout.getView()", "testcase": false, "constructor": false}, {"identifier": "getSettings", "parameters": "()", "modifiers": "@Override public", "return": "List<Group>", "signature": "List<Group> getSettings()", "full_signature": "@Override public List<Group> getSettings()", "class_method_signature": "GridLayout.getSettings()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "GridLayout.getName()", "testcase": false, "constructor": false}, {"identifier": "getContainers", "parameters": "()", "modifiers": "public", "return": "ImmutableList<ChildContainer>", "signature": "ImmutableList<ChildContainer> getContainers()", "full_signature": "public ImmutableList<ChildContainer> getContainers()", "class_method_signature": "GridLayout.getContainers()", "testcase": false, "constructor": false}, {"identifier": "getNumColumns", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumColumns()", "full_signature": "public int getNumColumns()", "class_method_signature": "GridLayout.getNumColumns()", "testcase": false, "constructor": false}, {"identifier": "numColumnsProperty", "parameters": "()", "modifiers": "public", "return": "IntegerProperty", "signature": "IntegerProperty numColumnsProperty()", "full_signature": "public IntegerProperty numColumnsProperty()", "class_method_signature": "GridLayout.numColumnsProperty()", "testcase": false, "constructor": false}, {"identifier": "setNumColumns", "parameters": "(int numColumns)", "modifiers": "public", "return": "void", "signature": "void setNumColumns(int numColumns)", "full_signature": "public void setNumColumns(int numColumns)", "class_method_signature": "GridLayout.setNumColumns(int numColumns)", "testcase": false, "constructor": false}, {"identifier": "getNumRows", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumRows()", "full_signature": "public int getNumRows()", "class_method_signature": "GridLayout.getNumRows()", "testcase": false, "constructor": false}, {"identifier": "numRowsProperty", "parameters": "()", "modifiers": "public", "return": "IntegerProperty", "signature": "IntegerProperty numRowsProperty()", "full_signature": "public IntegerProperty numRowsProperty()", "class_method_signature": "GridLayout.numRowsProperty()", "testcase": false, "constructor": false}, {"identifier": "setNumRows", "parameters": "(int numRows)", "modifiers": "public", "return": "void", "signature": "void setNumRows(int numRows)", "full_signature": "public void setNumRows(int numRows)", "class_method_signature": "GridLayout.setNumRows(int numRows)", "testcase": false, "constructor": false}], "file": "plugins/base/src/main/java/edu/wpi/first/shuffleboard/plugin/base/layout/GridLayout.java"}, "focal_method": {"identifier": "setNumRows", "parameters": "(int numRows)", "modifiers": "public", "return": "void", "body": "public void setNumRows(int numRows) {\n    this.numRows.set(numRows);\n  }", "signature": "void setNumRows(int numRows)", "full_signature": "public void setNumRows(int numRows)", "class_method_signature": "GridLayout.setNumRows(int numRows)", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}