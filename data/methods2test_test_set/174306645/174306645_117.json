{"test_class": {"identifier": "AbstractProcessInstanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NODE_ID = \"my_node_id\";", "modifier": "private static final", "type": "String", "declarator": "NODE_ID = \"my_node_id\"", "var_name": "NODE_ID"}, {"original_string": "@Mock\n    private ProcessInstanceManager pim;", "modifier": "@Mock\n    private", "type": "ProcessInstanceManager", "declarator": "pim", "var_name": "pim"}, {"original_string": "@Mock\n    private WorkflowProcessInstanceImpl wpi;", "modifier": "@Mock\n    private", "type": "WorkflowProcessInstanceImpl", "declarator": "wpi", "var_name": "wpi"}, {"original_string": "@Mock\n    private UnitOfWork unitOfWork;", "modifier": "@Mock\n    private", "type": "UnitOfWork", "declarator": "unitOfWork", "var_name": "unitOfWork"}, {"original_string": "private AbstractProcessInstance<TestModel> processInstance;", "modifier": "private", "type": "AbstractProcessInstance<TestModel>", "declarator": "processInstance", "var_name": "processInstance"}], "file": "jbpm/jbpm-flow/src/test/java/org/kie/kogito/process/impl/AbstractProcessInstanceTest.java"}, "test_case": {"identifier": "shouldTriggerNodeWhenTrigger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldTriggerNodeWhenTrigger() {\n        NodeInstance nodeInstance = givenExistingNode(NODE_ID);\n\n        processInstance.triggerNode(NODE_ID);\n\n        verify(nodeInstance).trigger(null, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n        verify(unitOfWork).intercept(any());\n    }", "signature": "void shouldTriggerNodeWhenTrigger()", "full_signature": "@Test public void shouldTriggerNodeWhenTrigger()", "class_method_signature": "AbstractProcessInstanceTest.shouldTriggerNodeWhenTrigger()", "testcase": true, "constructor": false, "invocations": ["givenExistingNode", "triggerNode", "trigger", "verify", "intercept", "verify", "any"]}, "focal_class": {"identifier": "AbstractProcessInstance", "superclass": "", "interfaces": "implements ProcessInstance<T>", "fields": [{"original_string": "private static final String KOGITO_PROCESS_INSTANCE = \"KogitoProcessInstance\";", "modifier": "private static final", "type": "String", "declarator": "KOGITO_PROCESS_INSTANCE = \"KogitoProcessInstance\"", "var_name": "KOGITO_PROCESS_INSTANCE"}, {"original_string": "protected final T variables;", "modifier": "protected final", "type": "T", "declarator": "variables", "var_name": "variables"}, {"original_string": "protected final AbstractProcess<T> process;", "modifier": "protected final", "type": "AbstractProcess<T>", "declarator": "process", "var_name": "process"}, {"original_string": "protected ProcessRuntime rt;", "modifier": "protected", "type": "ProcessRuntime", "declarator": "rt", "var_name": "rt"}, {"original_string": "protected WorkflowProcessInstance processInstance;", "modifier": "protected", "type": "WorkflowProcessInstance", "declarator": "processInstance", "var_name": "processInstance"}, {"original_string": "protected Integer status;", "modifier": "protected", "type": "Integer", "declarator": "status", "var_name": "status"}, {"original_string": "protected String id;", "modifier": "protected", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "protected CorrelationKey correlationKey;", "modifier": "protected", "type": "CorrelationKey", "declarator": "correlationKey", "var_name": "correlationKey"}, {"original_string": "protected String description;", "modifier": "protected", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "protected ProcessError processError;", "modifier": "protected", "type": "ProcessError", "declarator": "processError", "var_name": "processError"}, {"original_string": "protected Supplier<WorkflowProcessInstance> reloadSupplier;", "modifier": "protected", "type": "Supplier<WorkflowProcessInstance>", "declarator": "reloadSupplier", "var_name": "reloadSupplier"}, {"original_string": "protected CompletionEventListener completionEventListener;", "modifier": "protected", "type": "CompletionEventListener", "declarator": "completionEventListener", "var_name": "completionEventListener"}], "methods": [{"identifier": "AbstractProcessInstance", "parameters": "(AbstractProcess<T> process, T variables, ProcessRuntime rt)", "modifiers": "public", "return": "", "signature": " AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt)", "full_signature": "public  AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt)", "class_method_signature": "AbstractProcessInstance.AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt)", "testcase": false, "constructor": true}, {"identifier": "AbstractProcessInstance", "parameters": "(AbstractProcess<T> process, T variables, String businessKey, ProcessRuntime rt)", "modifiers": "public", "return": "", "signature": " AbstractProcessInstance(AbstractProcess<T> process, T variables, String businessKey, ProcessRuntime rt)", "full_signature": "public  AbstractProcessInstance(AbstractProcess<T> process, T variables, String businessKey, ProcessRuntime rt)", "class_method_signature": "AbstractProcessInstance.AbstractProcessInstance(AbstractProcess<T> process, T variables, String businessKey, ProcessRuntime rt)", "testcase": false, "constructor": true}, {"identifier": "AbstractProcessInstance", "parameters": "(AbstractProcess<T> process, T variables, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "modifiers": "public", "return": "", "signature": " AbstractProcessInstance(AbstractProcess<T> process, T variables, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "full_signature": "public  AbstractProcessInstance(AbstractProcess<T> process, T variables, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "class_method_signature": "AbstractProcessInstance.AbstractProcessInstance(AbstractProcess<T> process, T variables, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "testcase": false, "constructor": true}, {"identifier": "AbstractProcessInstance", "parameters": "(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "modifiers": "public", "return": "", "signature": " AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "full_signature": "public  AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "class_method_signature": "AbstractProcessInstance.AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi)", "testcase": false, "constructor": true}, {"identifier": "reconnect", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void reconnect()", "full_signature": "protected void reconnect()", "class_method_signature": "AbstractProcessInstance.reconnect()", "testcase": false, "constructor": false}, {"identifier": "addCompletionEventListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addCompletionEventListener()", "full_signature": "private void addCompletionEventListener()", "class_method_signature": "AbstractProcessInstance.addCompletionEventListener()", "testcase": false, "constructor": false}, {"identifier": "removeCompletionListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeCompletionListener()", "full_signature": "private void removeCompletionListener()", "class_method_signature": "AbstractProcessInstance.removeCompletionListener()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void disconnect()", "full_signature": "protected void disconnect()", "class_method_signature": "AbstractProcessInstance.disconnect()", "testcase": false, "constructor": false}, {"identifier": "syncProcessInstance", "parameters": "(WorkflowProcessInstance wpi)", "modifiers": "private", "return": "void", "signature": "void syncProcessInstance(WorkflowProcessInstance wpi)", "full_signature": "private void syncProcessInstance(WorkflowProcessInstance wpi)", "class_method_signature": "AbstractProcessInstance.syncProcessInstance(WorkflowProcessInstance wpi)", "testcase": false, "constructor": false}, {"identifier": "setCorrelationKey", "parameters": "(String businessKey)", "modifiers": "private", "return": "void", "signature": "void setCorrelationKey(String businessKey)", "full_signature": "private void setCorrelationKey(String businessKey)", "class_method_signature": "AbstractProcessInstance.setCorrelationKey(String businessKey)", "testcase": false, "constructor": false}, {"identifier": "internalGetProcessInstance", "parameters": "()", "modifiers": "public", "return": "WorkflowProcessInstance", "signature": "WorkflowProcessInstance internalGetProcessInstance()", "full_signature": "public WorkflowProcessInstance internalGetProcessInstance()", "class_method_signature": "AbstractProcessInstance.internalGetProcessInstance()", "testcase": false, "constructor": false}, {"identifier": "internalRemoveProcessInstance", "parameters": "(Supplier<WorkflowProcessInstance> reloadSupplier)", "modifiers": "public", "return": "void", "signature": "void internalRemoveProcessInstance(Supplier<WorkflowProcessInstance> reloadSupplier)", "full_signature": "public void internalRemoveProcessInstance(Supplier<WorkflowProcessInstance> reloadSupplier)", "class_method_signature": "AbstractProcessInstance.internalRemoveProcessInstance(Supplier<WorkflowProcessInstance> reloadSupplier)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "AbstractProcessInstance.start()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(String trigger, String referenceId)", "modifiers": "@Override public", "return": "void", "signature": "void start(String trigger, String referenceId)", "full_signature": "@Override public void start(String trigger, String referenceId)", "class_method_signature": "AbstractProcessInstance.start(String trigger, String referenceId)", "testcase": false, "constructor": false}, {"identifier": "addToUnitOfWork", "parameters": "(Consumer<ProcessInstance<T>> action)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) protected", "return": "void", "signature": "void addToUnitOfWork(Consumer<ProcessInstance<T>> action)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) protected void addToUnitOfWork(Consumer<ProcessInstance<T>> action)", "class_method_signature": "AbstractProcessInstance.addToUnitOfWork(Consumer<ProcessInstance<T>> action)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void abort()", "full_signature": "@Override public void abort()", "class_method_signature": "AbstractProcessInstance.abort()", "testcase": false, "constructor": false}, {"identifier": "getProcessRuntime", "parameters": "()", "modifiers": "private", "return": "ProcessRuntime", "signature": "ProcessRuntime getProcessRuntime()", "full_signature": "private ProcessRuntime getProcessRuntime()", "class_method_signature": "AbstractProcessInstance.getProcessRuntime()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Signal<S> signal)", "modifiers": "@Override public", "return": "void", "signature": "void send(Signal<S> signal)", "full_signature": "@Override public void send(Signal<S> signal)", "class_method_signature": "AbstractProcessInstance.send(Signal<S> signal)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "Process<T>", "signature": "Process<T> process()", "full_signature": "@Override public Process<T> process()", "class_method_signature": "AbstractProcessInstance.process()", "testcase": false, "constructor": false}, {"identifier": "variables", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T variables()", "full_signature": "@Override public T variables()", "class_method_signature": "AbstractProcessInstance.variables()", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int status()", "full_signature": "@Override public int status()", "class_method_signature": "AbstractProcessInstance.status()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String id()", "full_signature": "@Override public String id()", "class_method_signature": "AbstractProcessInstance.id()", "testcase": false, "constructor": false}, {"identifier": "businessKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String businessKey()", "full_signature": "@Override public String businessKey()", "class_method_signature": "AbstractProcessInstance.businessKey()", "testcase": false, "constructor": false}, {"identifier": "description", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String description()", "full_signature": "@Override public String description()", "class_method_signature": "AbstractProcessInstance.description()", "testcase": false, "constructor": false}, {"identifier": "startDate", "parameters": "()", "modifiers": "@Override public", "return": "Date", "signature": "Date startDate()", "full_signature": "@Override public Date startDate()", "class_method_signature": "AbstractProcessInstance.startDate()", "testcase": false, "constructor": false}, {"identifier": "updateVariables", "parameters": "(T updates)", "modifiers": "@Override public", "return": "T", "signature": "T updateVariables(T updates)", "full_signature": "@Override public T updateVariables(T updates)", "class_method_signature": "AbstractProcessInstance.updateVariables(T updates)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "()", "modifiers": "@Override public", "return": "Optional<ProcessError>", "signature": "Optional<ProcessError> error()", "full_signature": "@Override public Optional<ProcessError> error()", "class_method_signature": "AbstractProcessInstance.error()", "testcase": false, "constructor": false}, {"identifier": "startFrom", "parameters": "(String nodeId)", "modifiers": "@Override public", "return": "void", "signature": "void startFrom(String nodeId)", "full_signature": "@Override public void startFrom(String nodeId)", "class_method_signature": "AbstractProcessInstance.startFrom(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "startFrom", "parameters": "(String nodeId, String referenceId)", "modifiers": "@Override public", "return": "void", "signature": "void startFrom(String nodeId, String referenceId)", "full_signature": "@Override public void startFrom(String nodeId, String referenceId)", "class_method_signature": "AbstractProcessInstance.startFrom(String nodeId, String referenceId)", "testcase": false, "constructor": false}, {"identifier": "triggerNode", "parameters": "(String nodeId)", "modifiers": "@Override public", "return": "void", "signature": "void triggerNode(String nodeId)", "full_signature": "@Override public void triggerNode(String nodeId)", "class_method_signature": "AbstractProcessInstance.triggerNode(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "cancelNodeInstance", "parameters": "(String nodeInstanceId)", "modifiers": "@Override public", "return": "void", "signature": "void cancelNodeInstance(String nodeInstanceId)", "full_signature": "@Override public void cancelNodeInstance(String nodeInstanceId)", "class_method_signature": "AbstractProcessInstance.cancelNodeInstance(String nodeInstanceId)", "testcase": false, "constructor": false}, {"identifier": "retriggerNodeInstance", "parameters": "(String nodeInstanceId)", "modifiers": "@Override public", "return": "void", "signature": "void retriggerNodeInstance(String nodeInstanceId)", "full_signature": "@Override public void retriggerNodeInstance(String nodeInstanceId)", "class_method_signature": "AbstractProcessInstance.retriggerNodeInstance(String nodeInstanceId)", "testcase": false, "constructor": false}, {"identifier": "processInstance", "parameters": "()", "modifiers": "protected", "return": "WorkflowProcessInstance", "signature": "WorkflowProcessInstance processInstance()", "full_signature": "protected WorkflowProcessInstance processInstance()", "class_method_signature": "AbstractProcessInstance.processInstance()", "testcase": false, "constructor": false}, {"identifier": "workItem", "parameters": "(String workItemId, Policy<?>... policies)", "modifiers": "@Override public", "return": "WorkItem", "signature": "WorkItem workItem(String workItemId, Policy<?>... policies)", "full_signature": "@Override public WorkItem workItem(String workItemId, Policy<?>... policies)", "class_method_signature": "AbstractProcessInstance.workItem(String workItemId, Policy<?>... policies)", "testcase": false, "constructor": false}, {"identifier": "workItems", "parameters": "(Policy<?>... policies)", "modifiers": "@Override public", "return": "List<WorkItem>", "signature": "List<WorkItem> workItems(Policy<?>... policies)", "full_signature": "@Override public List<WorkItem> workItems(Policy<?>... policies)", "class_method_signature": "AbstractProcessInstance.workItems(Policy<?>... policies)", "testcase": false, "constructor": false}, {"identifier": "completeWorkItem", "parameters": "(String id, Map<String, Object> variables, Policy<?>... policies)", "modifiers": "@Override public", "return": "void", "signature": "void completeWorkItem(String id, Map<String, Object> variables, Policy<?>... policies)", "full_signature": "@Override public void completeWorkItem(String id, Map<String, Object> variables, Policy<?>... policies)", "class_method_signature": "AbstractProcessInstance.completeWorkItem(String id, Map<String, Object> variables, Policy<?>... policies)", "testcase": false, "constructor": false}, {"identifier": "abortWorkItem", "parameters": "(String id, Policy<?>... policies)", "modifiers": "@Override public", "return": "void", "signature": "void abortWorkItem(String id, Policy<?>... policies)", "full_signature": "@Override public void abortWorkItem(String id, Policy<?>... policies)", "class_method_signature": "AbstractProcessInstance.abortWorkItem(String id, Policy<?>... policies)", "testcase": false, "constructor": false}, {"identifier": "transitionWorkItem", "parameters": "(String id, Transition<?> transition)", "modifiers": "@Override public", "return": "void", "signature": "void transitionWorkItem(String id, Transition<?> transition)", "full_signature": "@Override public void transitionWorkItem(String id, Transition<?> transition)", "class_method_signature": "AbstractProcessInstance.transitionWorkItem(String id, Transition<?> transition)", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Set<EventDescription<?>>", "signature": "Set<EventDescription<?>> events()", "full_signature": "@Override public Set<EventDescription<?>> events()", "class_method_signature": "AbstractProcessInstance.events()", "testcase": false, "constructor": false}, {"identifier": "milestones", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Milestone>", "signature": "Collection<Milestone> milestones()", "full_signature": "@Override public Collection<Milestone> milestones()", "class_method_signature": "AbstractProcessInstance.milestones()", "testcase": false, "constructor": false}, {"identifier": "adHocFragments", "parameters": "()", "modifiers": "@Override public", "return": "Collection<AdHocFragment>", "signature": "Collection<AdHocFragment> adHocFragments()", "full_signature": "@Override public Collection<AdHocFragment> adHocFragments()", "class_method_signature": "AbstractProcessInstance.adHocFragments()", "testcase": false, "constructor": false}, {"identifier": "removeOnFinish", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void removeOnFinish()", "full_signature": "protected void removeOnFinish()", "class_method_signature": "AbstractProcessInstance.removeOnFinish()", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(T variables)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> bind(T variables)", "full_signature": "protected Map<String, Object> bind(T variables)", "class_method_signature": "AbstractProcessInstance.bind(T variables)", "testcase": false, "constructor": false}, {"identifier": "unbind", "parameters": "(T variables, Map<String, Object> vmap)", "modifiers": "protected", "return": "void", "signature": "void unbind(T variables, Map<String, Object> vmap)", "full_signature": "protected void unbind(T variables, Map<String, Object> vmap)", "class_method_signature": "AbstractProcessInstance.unbind(T variables, Map<String, Object> vmap)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractProcessInstance.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public boolean equals(Object obj)", "class_method_signature": "AbstractProcessInstance.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "buildProcessError", "parameters": "()", "modifiers": "protected", "return": "ProcessError", "signature": "ProcessError buildProcessError()", "full_signature": "protected ProcessError buildProcessError()", "class_method_signature": "AbstractProcessInstance.buildProcessError()", "testcase": false, "constructor": false}], "file": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java"}, "focal_method": {"identifier": "triggerNode", "parameters": "(String nodeId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void triggerNode(String nodeId) {\n        WorkflowProcessInstance wfpi = processInstance();\n        RuleFlowProcess rfp = ((RuleFlowProcess) wfpi.getProcess());\n\n        Node node = rfp.getNodesRecursively()\n                .stream()\n                .filter(ni -> nodeId.equals(ni.getMetaData().get(\"UniqueId\"))).findFirst().orElseThrow(() -> new NodeNotFoundException(this.id, nodeId));\n\n        Node parentNode = rfp.getParentNode(node.getId());\n\n        NodeInstanceContainer nodeInstanceContainerNode = parentNode == null ? wfpi : ((NodeInstanceContainer) wfpi.getNodeInstance(parentNode));\n\n        nodeInstanceContainerNode.getNodeInstance(node).trigger(null, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n\n        addToUnitOfWork(pi -> ((MutableProcessInstances<T>) process.instances()).update(pi.id(), pi));\n    }", "signature": "void triggerNode(String nodeId)", "full_signature": "@Override public void triggerNode(String nodeId)", "class_method_signature": "AbstractProcessInstance.triggerNode(String nodeId)", "testcase": false, "constructor": false, "invocations": ["processInstance", "getProcess", "orElseThrow", "findFirst", "filter", "stream", "getNodesRecursively", "equals", "get", "getMetaData", "getParentNode", "getId", "getNodeInstance", "trigger", "getNodeInstance", "addToUnitOfWork", "update", "instances", "id"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}