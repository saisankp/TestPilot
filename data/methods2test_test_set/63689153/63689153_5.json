{"test_class": {"identifier": "UtilAllTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocketmq-common/src/test/java/com/alibaba/rocketmq/common/UtilAllTest.java"}, "test_case": {"identifier": "test_currentStackTrace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_currentStackTrace() {\n        System.out.println(UtilAll.currentStackTrace());\n    }", "signature": "void test_currentStackTrace()", "full_signature": "@Test public void test_currentStackTrace()", "class_method_signature": "UtilAllTest.test_currentStackTrace()", "testcase": true, "constructor": false, "invocations": ["println", "currentStackTrace"]}, "focal_class": {"identifier": "UtilAll", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String yyyy_MM_dd_HH_mm_ss = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "yyyy_MM_dd_HH_mm_ss = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "yyyy_MM_dd_HH_mm_ss"}, {"original_string": "public static final String yyyy_MM_dd_HH_mm_ss_SSS = \"yyyy-MM-dd#HH:mm:ss:SSS\";", "modifier": "public static final", "type": "String", "declarator": "yyyy_MM_dd_HH_mm_ss_SSS = \"yyyy-MM-dd#HH:mm:ss:SSS\"", "var_name": "yyyy_MM_dd_HH_mm_ss_SSS"}, {"original_string": "public static final String yyyyMMddHHmmss = \"yyyyMMddHHmmss\";", "modifier": "public static final", "type": "String", "declarator": "yyyyMMddHHmmss = \"yyyyMMddHHmmss\"", "var_name": "yyyyMMddHHmmss"}], "methods": [{"identifier": "getPid", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getPid()", "full_signature": "public static int getPid()", "class_method_signature": "UtilAll.getPid()", "testcase": false, "constructor": false}, {"identifier": "currentStackTrace", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String currentStackTrace()", "full_signature": "public static String currentStackTrace()", "class_method_signature": "UtilAll.currentStackTrace()", "testcase": false, "constructor": false}, {"identifier": "offset2FileName", "parameters": "(final long offset)", "modifiers": "public static", "return": "String", "signature": "String offset2FileName(final long offset)", "full_signature": "public static String offset2FileName(final long offset)", "class_method_signature": "UtilAll.offset2FileName(final long offset)", "testcase": false, "constructor": false}, {"identifier": "computeEclipseTimeMilliseconds", "parameters": "(final long beginTime)", "modifiers": "public static", "return": "long", "signature": "long computeEclipseTimeMilliseconds(final long beginTime)", "full_signature": "public static long computeEclipseTimeMilliseconds(final long beginTime)", "class_method_signature": "UtilAll.computeEclipseTimeMilliseconds(final long beginTime)", "testcase": false, "constructor": false}, {"identifier": "isItTimeToDo", "parameters": "(final String when)", "modifiers": "public static", "return": "boolean", "signature": "boolean isItTimeToDo(final String when)", "full_signature": "public static boolean isItTimeToDo(final String when)", "class_method_signature": "UtilAll.isItTimeToDo(final String when)", "testcase": false, "constructor": false}, {"identifier": "timeMillisToHumanString", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String timeMillisToHumanString()", "full_signature": "public static String timeMillisToHumanString()", "class_method_signature": "UtilAll.timeMillisToHumanString()", "testcase": false, "constructor": false}, {"identifier": "timeMillisToHumanString", "parameters": "(final long t)", "modifiers": "public static", "return": "String", "signature": "String timeMillisToHumanString(final long t)", "full_signature": "public static String timeMillisToHumanString(final long t)", "class_method_signature": "UtilAll.timeMillisToHumanString(final long t)", "testcase": false, "constructor": false}, {"identifier": "computNextMorningTimeMillis", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long computNextMorningTimeMillis()", "full_signature": "public static long computNextMorningTimeMillis()", "class_method_signature": "UtilAll.computNextMorningTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "computNextMinutesTimeMillis", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long computNextMinutesTimeMillis()", "full_signature": "public static long computNextMinutesTimeMillis()", "class_method_signature": "UtilAll.computNextMinutesTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "computNextHourTimeMillis", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long computNextHourTimeMillis()", "full_signature": "public static long computNextHourTimeMillis()", "class_method_signature": "UtilAll.computNextHourTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "computNextHalfHourTimeMillis", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long computNextHalfHourTimeMillis()", "full_signature": "public static long computNextHalfHourTimeMillis()", "class_method_signature": "UtilAll.computNextHalfHourTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "timeMillisToHumanString2", "parameters": "(final long t)", "modifiers": "public static", "return": "String", "signature": "String timeMillisToHumanString2(final long t)", "full_signature": "public static String timeMillisToHumanString2(final long t)", "class_method_signature": "UtilAll.timeMillisToHumanString2(final long t)", "testcase": false, "constructor": false}, {"identifier": "timeMillisToHumanString3", "parameters": "(final long t)", "modifiers": "public static", "return": "String", "signature": "String timeMillisToHumanString3(final long t)", "full_signature": "public static String timeMillisToHumanString3(final long t)", "class_method_signature": "UtilAll.timeMillisToHumanString3(final long t)", "testcase": false, "constructor": false}, {"identifier": "getDiskPartitionSpaceUsedPercent", "parameters": "(final String path)", "modifiers": "public static", "return": "double", "signature": "double getDiskPartitionSpaceUsedPercent(final String path)", "full_signature": "public static double getDiskPartitionSpaceUsedPercent(final String path)", "class_method_signature": "UtilAll.getDiskPartitionSpaceUsedPercent(final String path)", "testcase": false, "constructor": false}, {"identifier": "crc32", "parameters": "(byte[] array)", "modifiers": "public static final", "return": "int", "signature": "int crc32(byte[] array)", "full_signature": "public static final int crc32(byte[] array)", "class_method_signature": "UtilAll.crc32(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "crc32", "parameters": "(byte[] array, int offset, int length)", "modifiers": "public static final", "return": "int", "signature": "int crc32(byte[] array, int offset, int length)", "full_signature": "public static final int crc32(byte[] array, int offset, int length)", "class_method_signature": "UtilAll.crc32(byte[] array, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "bytes2string", "parameters": "(byte[] src)", "modifiers": "public static", "return": "String", "signature": "String bytes2string(byte[] src)", "full_signature": "public static String bytes2string(byte[] src)", "class_method_signature": "UtilAll.bytes2string(byte[] src)", "testcase": false, "constructor": false}, {"identifier": "string2bytes", "parameters": "(String hexString)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] string2bytes(String hexString)", "full_signature": "public static byte[] string2bytes(String hexString)", "class_method_signature": "UtilAll.string2bytes(String hexString)", "testcase": false, "constructor": false}, {"identifier": "charToByte", "parameters": "(char c)", "modifiers": "private static", "return": "byte", "signature": "byte charToByte(char c)", "full_signature": "private static byte charToByte(char c)", "class_method_signature": "UtilAll.charToByte(char c)", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(final byte[] src)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] uncompress(final byte[] src)", "full_signature": "public static byte[] uncompress(final byte[] src)", "class_method_signature": "UtilAll.uncompress(final byte[] src)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(final byte[] src, final int level)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] compress(final byte[] src, final int level)", "full_signature": "public static byte[] compress(final byte[] src, final int level)", "class_method_signature": "UtilAll.compress(final byte[] src, final int level)", "testcase": false, "constructor": false}, {"identifier": "asInt", "parameters": "(String str, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int asInt(String str, int defaultValue)", "full_signature": "public static int asInt(String str, int defaultValue)", "class_method_signature": "UtilAll.asInt(String str, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "asLong", "parameters": "(String str, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long asLong(String str, long defaultValue)", "full_signature": "public static long asLong(String str, long defaultValue)", "class_method_signature": "UtilAll.asLong(String str, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(Date date, String pattern)", "modifiers": "public static", "return": "String", "signature": "String formatDate(Date date, String pattern)", "full_signature": "public static String formatDate(Date date, String pattern)", "class_method_signature": "UtilAll.formatDate(Date date, String pattern)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String date, String pattern)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String date, String pattern)", "full_signature": "public static Date parseDate(String date, String pattern)", "class_method_signature": "UtilAll.parseDate(String date, String pattern)", "testcase": false, "constructor": false}, {"identifier": "responseCode2String", "parameters": "(final int code)", "modifiers": "public static", "return": "String", "signature": "String responseCode2String(final int code)", "full_signature": "public static String responseCode2String(final int code)", "class_method_signature": "UtilAll.responseCode2String(final int code)", "testcase": false, "constructor": false}, {"identifier": "frontStringAtLeast", "parameters": "(final String str, final int size)", "modifiers": "public static", "return": "String", "signature": "String frontStringAtLeast(final String str, final int size)", "full_signature": "public static String frontStringAtLeast(final String str, final int size)", "class_method_signature": "UtilAll.frontStringAtLeast(final String str, final int size)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(String str)", "full_signature": "public static boolean isBlank(String str)", "class_method_signature": "UtilAll.isBlank(String str)", "testcase": false, "constructor": false}, {"identifier": "jstack", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String jstack()", "full_signature": "public static String jstack()", "class_method_signature": "UtilAll.jstack()", "testcase": false, "constructor": false}, {"identifier": "jstack", "parameters": "(Map<Thread, StackTraceElement[]> map)", "modifiers": "public static", "return": "String", "signature": "String jstack(Map<Thread, StackTraceElement[]> map)", "full_signature": "public static String jstack(Map<Thread, StackTraceElement[]> map)", "class_method_signature": "UtilAll.jstack(Map<Thread, StackTraceElement[]> map)", "testcase": false, "constructor": false}], "file": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/UtilAll.java"}, "focal_method": {"identifier": "currentStackTrace", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String currentStackTrace() {\n        StringBuilder sb = new StringBuilder();\n        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n        for (StackTraceElement ste : stackTrace) {\n            sb.append(\"\\n\\t\");\n            sb.append(ste.toString());\n        }\n\n        return sb.toString();\n    }", "signature": "String currentStackTrace()", "full_signature": "public static String currentStackTrace()", "class_method_signature": "UtilAll.currentStackTrace()", "testcase": false, "constructor": false, "invocations": ["getStackTrace", "currentThread", "append", "append", "toString", "toString"]}, "repository": {"repo_id": 63689153, "url": "https://github.com/medusar/rocketmq-comment", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 1685, "license": "licensed"}}