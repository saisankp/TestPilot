{"test_class": {"identifier": "SNSS3HandlerTest", "superclass": "extends HandlerTest<SNSEvent>", "interfaces": "", "fields": [{"original_string": "private static final String S3_BUCKET = \"testbucket\";", "modifier": "private static final", "type": "String", "declarator": "S3_BUCKET = \"testbucket\"", "var_name": "S3_BUCKET"}, {"original_string": "private S3MockClientFactory clientFactory;", "modifier": "private", "type": "S3MockClientFactory", "declarator": "clientFactory", "var_name": "clientFactory"}, {"original_string": "private AmazonS3Client client;", "modifier": "private", "type": "AmazonS3Client", "declarator": "client", "var_name": "client"}], "file": "handlers/src/test/java/com/nextdoor/bender/handler/s3/SNSS3HandlerTest.java"}, "test_case": {"identifier": "testExceptionHandlingd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExceptionHandlingd() throws Throwable {\n    BaseHandler.CONFIG_FILE = \"/com/nextdoor/bender/handler/config_test_sns.json\";\n\n    TestContext ctx = new TestContext();\n    ctx.setFunctionName(\"unittest\");\n    ctx.setInvokedFunctionArn(\"arn:aws:lambda:us-east-1:123:function:test-function:staging\");\n\n    /*\n     * Invoke handler\n     */\n    SNSS3Handler fhandler = (SNSS3Handler) getHandler();\n    fhandler.init(ctx);\n\n    IpcSenderService ipcSpy = spy(fhandler.getIpcService());\n    doThrow(new TransportException(\"expected\")).when(ipcSpy).flush();\n    fhandler.setIpcService(ipcSpy);\n\n    AmazonSNSClient mockClient = mock(AmazonSNSClient.class);\n    AmazonSNSClientFactory mockClientFactory = mock(AmazonSNSClientFactory.class);\n    doReturn(mockClient).when(mockClientFactory).newInstance();\n\n    fhandler.snsClientFactory = mockClientFactory;\n\n    SNSEvent event = getTestEvent();\n\n    try {\n      fhandler.handler(event, ctx);\n    } catch (Exception e) {\n    }\n    verify(mockClient, times(1)).publish(\"foo\", \"basic_input.log\", \"SNSS3Handler Failed\");\n  }", "signature": "void testExceptionHandlingd()", "full_signature": "@Test public void testExceptionHandlingd()", "class_method_signature": "SNSS3HandlerTest.testExceptionHandlingd()", "testcase": true, "constructor": false, "invocations": ["setFunctionName", "setInvokedFunctionArn", "getHandler", "init", "spy", "getIpcService", "flush", "when", "doThrow", "setIpcService", "mock", "mock", "newInstance", "when", "doReturn", "getTestEvent", "handler", "publish", "verify", "times"]}, "focal_class": {"identifier": "SNSS3Handler", "superclass": "extends BaseHandler<SNSEvent>", "interfaces": "implements Handler<SNSEvent>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SNSS3Handler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SNSS3Handler.class)", "var_name": "logger"}, {"original_string": "private static final Gson gson = new Gson();", "modifier": "private static final", "type": "Gson", "declarator": "gson = new Gson()", "var_name": "gson"}, {"original_string": "private InternalEventIterator<InternalEvent> recordIterator;", "modifier": "private", "type": "InternalEventIterator<InternalEvent>", "declarator": "recordIterator", "var_name": "recordIterator"}, {"original_string": "private List<String> inputFiles;", "modifier": "private", "type": "List<String>", "declarator": "inputFiles", "var_name": "inputFiles"}, {"original_string": "private Source source;", "modifier": "private", "type": "Source", "declarator": "source", "var_name": "source"}, {"original_string": "private boolean logTrigger = false;", "modifier": "private", "type": "boolean", "declarator": "logTrigger = false", "var_name": "logTrigger"}, {"original_string": "protected AmazonS3ClientFactory s3ClientFactory = new AmazonS3ClientFactory();", "modifier": "protected", "type": "AmazonS3ClientFactory", "declarator": "s3ClientFactory = new AmazonS3ClientFactory()", "var_name": "s3ClientFactory"}, {"original_string": "protected AmazonSNSClientFactory snsClientFactory = new AmazonSNSClientFactory();", "modifier": "protected", "type": "AmazonSNSClientFactory", "declarator": "snsClientFactory = new AmazonSNSClientFactory()", "var_name": "snsClientFactory"}], "methods": [{"identifier": "handler", "parameters": "(SNSEvent event, Context context)", "modifiers": "@Override public", "return": "void", "signature": "void handler(SNSEvent event, Context context)", "full_signature": "@Override public void handler(SNSEvent event, Context context)", "class_method_signature": "SNSS3Handler.handler(SNSEvent event, Context context)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource()", "full_signature": "@Override public Source getSource()", "class_method_signature": "SNSS3Handler.getSource()", "testcase": false, "constructor": false}, {"identifier": "getSourceName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSourceName()", "full_signature": "@Override public String getSourceName()", "class_method_signature": "SNSS3Handler.getSourceName()", "testcase": false, "constructor": false}, {"identifier": "onException", "parameters": "(Exception e)", "modifiers": "@Override public", "return": "void", "signature": "void onException(Exception e)", "full_signature": "@Override public void onException(Exception e)", "class_method_signature": "SNSS3Handler.onException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getInternalEventIterator", "parameters": "()", "modifiers": "@Override public", "return": "InternalEventIterator<InternalEvent>", "signature": "InternalEventIterator<InternalEvent> getInternalEventIterator()", "full_signature": "@Override public InternalEventIterator<InternalEvent> getInternalEventIterator()", "class_method_signature": "SNSS3Handler.getInternalEventIterator()", "testcase": false, "constructor": false}], "file": "handlers/src/main/java/com/nextdoor/bender/handler/s3/SNSS3Handler.java"}, "focal_method": {"identifier": "handler", "parameters": "(SNSEvent event, Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void handler(SNSEvent event, Context context) throws HandlerException {\n    if (!initialized) {\n      init(context);\n      SNSS3HandlerConfig handlerConfig = (SNSS3HandlerConfig) this.config.getHandlerConfig();\n      this.logTrigger = handlerConfig.getLogSnsTrigger();\n    }\n\n    this.source = this.sources.get(0);\n    this.inputFiles = new ArrayList<String>(0);\n\n    if (this.logTrigger) {\n      logger.info(\"trigger: \" + gson.toJson(event));\n    }\n\n    for (SNSRecord record : event.getRecords()) {\n      /*\n       * Parse SNS as a S3 notification\n       */\n      String json = record.getSNS().getMessage();\n      S3EventNotification s3Event = S3EventNotification.parseJson(json);\n\n      /*\n       * Validate the S3 file matches the regex\n       */\n      List<S3EventNotificationRecord> toProcess =\n          new ArrayList<S3EventNotificationRecord>(s3Event.getRecords());\n      for (S3EventNotificationRecord s3Record : s3Event.getRecords()) {\n        String s3Path = String.format(\"s3://%s/%s\", s3Record.getS3().getBucket().getName(),\n            s3Record.getS3().getObject().getKey());\n        try {\n          this.source = SourceUtils.getSource(s3Path, this.sources);\n        } catch (SourceNotFoundException e) {\n          logger.warn(\"skipping processing \" + s3Path);\n          toProcess.remove(s3Record);\n        }\n      }\n\n      if (toProcess.size() == 0) {\n        logger.warn(\"Nothing to process\");\n        return;\n      }\n\n      this.inputFiles.addAll(toProcess.stream().map(m -> {\n        return m.getS3().getObject().getKey();\n      }).collect(Collectors.toList()));\n\n      this.recordIterator =\n          new S3EventIterator(new LambdaContext(context), toProcess, s3ClientFactory);\n\n      super.process(context);\n    }\n  }", "signature": "void handler(SNSEvent event, Context context)", "full_signature": "@Override public void handler(SNSEvent event, Context context)", "class_method_signature": "SNSS3Handler.handler(SNSEvent event, Context context)", "testcase": false, "constructor": false, "invocations": ["init", "getHandlerConfig", "getLogSnsTrigger", "get", "info", "toJson", "getRecords", "getMessage", "getSNS", "parseJson", "getRecords", "getRecords", "format", "getName", "getBucket", "getS3", "getKey", "getObject", "getS3", "getSource", "warn", "remove", "size", "warn", "addAll", "collect", "map", "stream", "getKey", "getObject", "getS3", "toList", "process"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}