{"test_class": {"identifier": "ScenarioBeanUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String FIRST_NAME = \"firstNameToSet\";", "modifier": "private static", "type": "String", "declarator": "FIRST_NAME = \"firstNameToSet\"", "var_name": "FIRST_NAME"}, {"original_string": "private static int AGE = 10;", "modifier": "private static", "type": "int", "declarator": "AGE = 10", "var_name": "AGE"}, {"original_string": "private static ClassLoader classLoader = ScenarioBeanUtilTest.class.getClassLoader();", "modifier": "private static", "type": "ClassLoader", "declarator": "classLoader = ScenarioBeanUtilTest.class.getClassLoader()", "var_name": "classLoader"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/util/ScenarioBeanUtilTest.java"}, "test_case": {"identifier": "convertValueEnumWrongValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertValueEnumWrongValue() {\n        String enumTestCanonicalName = EnumTest.class.getCanonicalName();\n        assertThatThrownBy(() -> convertValue(EnumTest.class.getCanonicalName(), \"FIRS\", classLoader))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessageStartingWith(\"Impossible to parse 'FIRS' as \" + enumTestCanonicalName);\n    }", "signature": "void convertValueEnumWrongValue()", "full_signature": "@Test public void convertValueEnumWrongValue()", "class_method_signature": "ScenarioBeanUtilTest.convertValueEnumWrongValue()", "testcase": true, "constructor": false, "invocations": ["getCanonicalName", "hasMessageStartingWith", "isInstanceOf", "assertThatThrownBy", "convertValue", "getCanonicalName"]}, "focal_class": {"identifier": "ScenarioBeanUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, Class<?>> primitiveMap = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "primitiveMap = new HashMap<>()", "var_name": "primitiveMap"}], "methods": [{"identifier": "ScenarioBeanUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ScenarioBeanUtil()", "full_signature": "private  ScenarioBeanUtil()", "class_method_signature": "ScenarioBeanUtil.ScenarioBeanUtil()", "testcase": false, "constructor": true}, {"identifier": "fillBean", "parameters": "(String className, Map<List<String>, Object> params, ClassLoader classLoader)", "modifiers": "public static", "return": "T", "signature": "T fillBean(String className, Map<List<String>, Object> params, ClassLoader classLoader)", "full_signature": "public static T fillBean(String className, Map<List<String>, Object> params, ClassLoader classLoader)", "class_method_signature": "ScenarioBeanUtil.fillBean(String className, Map<List<String>, Object> params, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "fillBean", "parameters": "(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T fillBean(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T fillBean(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "class_method_signature": "ScenarioBeanUtil.fillBean(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "fillProperty", "parameters": "(T beanToFill, List<String> steps, Object propertyValue)", "modifiers": "private static", "return": "void", "signature": "void fillProperty(T beanToFill, List<String> steps, Object propertyValue)", "full_signature": "private static void fillProperty(T beanToFill, List<String> steps, Object propertyValue)", "class_method_signature": "ScenarioBeanUtil.fillProperty(T beanToFill, List<String> steps, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "navigateToObject", "parameters": "(Object rootObject, List<String> steps)", "modifiers": "public static", "return": "ScenarioBeanWrapper<?>", "signature": "ScenarioBeanWrapper<?> navigateToObject(Object rootObject, List<String> steps)", "full_signature": "public static ScenarioBeanWrapper<?> navigateToObject(Object rootObject, List<String> steps)", "class_method_signature": "ScenarioBeanUtil.navigateToObject(Object rootObject, List<String> steps)", "testcase": false, "constructor": false}, {"identifier": "navigateToObject", "parameters": "(Object rootObject, List<String> steps, boolean createIfNull)", "modifiers": "public static", "return": "ScenarioBeanWrapper<?>", "signature": "ScenarioBeanWrapper<?> navigateToObject(Object rootObject, List<String> steps, boolean createIfNull)", "full_signature": "public static ScenarioBeanWrapper<?> navigateToObject(Object rootObject, List<String> steps, boolean createIfNull)", "class_method_signature": "ScenarioBeanUtil.navigateToObject(Object rootObject, List<String> steps, boolean createIfNull)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Field declaredField, Object currentObject, boolean createIfNull)", "modifiers": "private static", "return": "Object", "signature": "Object getFieldValue(Field declaredField, Object currentObject, boolean createIfNull)", "full_signature": "private static Object getFieldValue(Field declaredField, Object currentObject, boolean createIfNull)", "class_method_signature": "ScenarioBeanUtil.getFieldValue(Field declaredField, Object currentObject, boolean createIfNull)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "private static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "private static T newInstance(Class<T> clazz)", "class_method_signature": "ScenarioBeanUtil.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(String className, Object cleanValue, ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "signature": "Object convertValue(String className, Object cleanValue, ClassLoader classLoader)", "full_signature": "public static Object convertValue(String className, Object cleanValue, ClassLoader classLoader)", "class_method_signature": "ScenarioBeanUtil.convertValue(String className, Object cleanValue, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "revertValue", "parameters": "(Object cleanValue)", "modifiers": "public static", "return": "String", "signature": "String revertValue(Object cleanValue)", "full_signature": "public static String revertValue(Object cleanValue)", "class_method_signature": "ScenarioBeanUtil.revertValue(Object cleanValue)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Class<T>", "signature": "Class<T> loadClass(String className, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Class<T> loadClass(String className, ClassLoader classLoader)", "class_method_signature": "ScenarioBeanUtil.loadClass(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Class<?> clazz, String fieldName)", "full_signature": "public static Field getField(Class<?> clazz, String fieldName)", "class_method_signature": "ScenarioBeanUtil.getField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "internalGetField", "parameters": "(String canonicalClassName, Class<?> clazz, String fieldName)", "modifiers": "private static", "return": "Field", "signature": "Field internalGetField(String canonicalClassName, Class<?> clazz, String fieldName)", "full_signature": "private static Field internalGetField(String canonicalClassName, Class<?> clazz, String fieldName)", "class_method_signature": "ScenarioBeanUtil.internalGetField(String canonicalClassName, Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(String className)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrimitive(String className)", "full_signature": "private static boolean isPrimitive(String className)", "class_method_signature": "ScenarioBeanUtil.isPrimitive(String className)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseBoolean(String value)", "full_signature": "private static boolean parseBoolean(String value)", "class_method_signature": "ScenarioBeanUtil.parseBoolean(String value)", "testcase": false, "constructor": false}, {"identifier": "parseChar", "parameters": "(String value)", "modifiers": "private static", "return": "char", "signature": "char parseChar(String value)", "full_signature": "private static char parseChar(String value)", "class_method_signature": "ScenarioBeanUtil.parseChar(String value)", "testcase": false, "constructor": false}, {"identifier": "cleanStringForNumberParsing", "parameters": "(String rawValue)", "modifiers": "private static", "return": "String", "signature": "String cleanStringForNumberParsing(String rawValue)", "full_signature": "private static String cleanStringForNumberParsing(String rawValue)", "class_method_signature": "ScenarioBeanUtil.cleanStringForNumberParsing(String rawValue)", "testcase": false, "constructor": false}, {"identifier": "revertDouble", "parameters": "(Double doubleValue)", "modifiers": "private static", "return": "String", "signature": "String revertDouble(Double doubleValue)", "full_signature": "private static String revertDouble(Double doubleValue)", "class_method_signature": "ScenarioBeanUtil.revertDouble(Double doubleValue)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/ScenarioBeanUtil.java"}, "focal_method": {"identifier": "convertValue", "parameters": "(String className, Object cleanValue, ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "body": "public static Object convertValue(String className, Object cleanValue, ClassLoader classLoader) {\n        // \"null\" string is converted to null\n        cleanValue = \"null\".equals(cleanValue) ? null : cleanValue;\n\n        if (!isPrimitive(className) && cleanValue == null) {\n            return null;\n        }\n\n        Class<?> clazz = loadClass(className, classLoader);\n\n        // if it is not a String, it has to be an instance of the desired type\n        if (!(cleanValue instanceof String)) {\n            if (clazz.isInstance(cleanValue)) {\n                return cleanValue;\n            }\n            throw new IllegalArgumentException(new StringBuilder().append(\"Object \").append(cleanValue)\n                                                       .append(\" is not a String or an instance of \").append(className).toString());\n        }\n\n        String value = (String) cleanValue;\n\n        try {\n            if (clazz.isAssignableFrom(String.class)) {\n                return value;\n            } else if (clazz.isAssignableFrom(Boolean.class) || clazz.isAssignableFrom(boolean.class)) {\n                return parseBoolean(value);\n            } else if (clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(int.class)) {\n                return Integer.parseInt(cleanStringForNumberParsing(value));\n            } else if (clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(long.class)) {\n                return Long.parseLong(cleanStringForNumberParsing(value));\n            } else if (clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(double.class)) {\n                return Double.parseDouble(cleanStringForNumberParsing(value));\n            } else if (clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(float.class)) {\n                return Float.parseFloat(cleanStringForNumberParsing(value));\n            } else if (clazz.isAssignableFrom(Character.class) || clazz.isAssignableFrom(char.class)) {\n                return parseChar(value);\n            } else if (clazz.isAssignableFrom(Byte.class) || clazz.isAssignableFrom(byte.class)) {\n                return Byte.parseByte(value);\n            } else if (clazz.isAssignableFrom(Short.class) || clazz.isAssignableFrom(short.class)) {\n                return Short.parseShort(cleanStringForNumberParsing(value));\n            } else if (clazz.isAssignableFrom(LocalDate.class)) {\n                return LocalDate.parse(value, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            } else if (Enum.class.isAssignableFrom(clazz)) {\n                return Enum.valueOf(((Class<? extends Enum>) clazz), value);\n            }\n        } catch (RuntimeException e) {\n            throw new IllegalArgumentException(new StringBuilder().append(\"Impossible to parse '\")\n                                                       .append(value).append(\"' as \").append(className).append(\" [\")\n                                                       .append(e.getMessage()).append(\"]\").toString());\n        }\n\n        throw new IllegalArgumentException(new StringBuilder().append(\"Class \").append(className)\n                                                   .append(\" is not natively supported. Please use an MVEL expression\" +\n                                                                   \" to use it.\").toString());\n    }", "signature": "Object convertValue(String className, Object cleanValue, ClassLoader classLoader)", "full_signature": "public static Object convertValue(String className, Object cleanValue, ClassLoader classLoader)", "class_method_signature": "ScenarioBeanUtil.convertValue(String className, Object cleanValue, ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["equals", "isPrimitive", "loadClass", "isInstance", "toString", "append", "append", "append", "append", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "parseBoolean", "isAssignableFrom", "isAssignableFrom", "parseInt", "cleanStringForNumberParsing", "isAssignableFrom", "isAssignableFrom", "parseLong", "cleanStringForNumberParsing", "isAssignableFrom", "isAssignableFrom", "parseDouble", "cleanStringForNumberParsing", "isAssignableFrom", "isAssignableFrom", "parseFloat", "cleanStringForNumberParsing", "isAssignableFrom", "isAssignableFrom", "parseChar", "isAssignableFrom", "isAssignableFrom", "parseByte", "isAssignableFrom", "isAssignableFrom", "parseShort", "cleanStringForNumberParsing", "isAssignableFrom", "parse", "ofPattern", "isAssignableFrom", "valueOf", "toString", "append", "append", "append", "append", "append", "append", "append", "getMessage", "toString", "append", "append", "append"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}