{"test_class": {"identifier": "AtomTest", "superclass": "extends AbstractAtomTest", "interfaces": "", "fields": [], "file": "base/data/src/test/java/org/openscience/cdk/AtomTest.java"}, "test_case": {"identifier": "testCompare_Object", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testCompare_Object() {\n        IAtom someAtom = new Atom(\"C\");\n        if (someAtom instanceof org.openscience.cdk.Atom) {\n            org.openscience.cdk.Atom atom = (org.openscience.cdk.Atom) someAtom;\n            Assert.assertTrue(atom.compare(atom));\n            IAtom hydrogen = someAtom.getBuilder().newInstance(IAtom.class, \"H\");\n            Assert.assertFalse(atom.compare(hydrogen));\n            Assert.assertFalse(atom.compare(\"C\"));\n        }\n    }", "signature": "void testCompare_Object()", "full_signature": "@Test @Override public void testCompare_Object()", "class_method_signature": "AtomTest.testCompare_Object()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compare", "newInstance", "getBuilder", "assertFalse", "compare", "assertFalse", "compare"]}, "focal_class": {"identifier": "Atom", "superclass": "extends AtomType", "interfaces": "implements IAtom, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID  = -3137373012494608794L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID  = -3137373012494608794L", "var_name": "serialVersionUID"}, {"original_string": "protected Point2d         point2d           = (Point2d) CDKConstants.UNSET;", "modifier": "protected", "type": "Point2d", "declarator": "point2d           = (Point2d) CDKConstants.UNSET", "var_name": "point2d"}, {"original_string": "protected Point3d         point3d           = (Point3d) CDKConstants.UNSET;", "modifier": "protected", "type": "Point3d", "declarator": "point3d           = (Point3d) CDKConstants.UNSET", "var_name": "point3d"}, {"original_string": "protected Point3d         fractionalPoint3d = (Point3d) CDKConstants.UNSET;", "modifier": "protected", "type": "Point3d", "declarator": "fractionalPoint3d = (Point3d) CDKConstants.UNSET", "var_name": "fractionalPoint3d"}, {"original_string": "protected Integer         hydrogenCount     = (Integer) CDKConstants.UNSET;", "modifier": "protected", "type": "Integer", "declarator": "hydrogenCount     = (Integer) CDKConstants.UNSET", "var_name": "hydrogenCount"}, {"original_string": "protected Integer         stereoParity      = (Integer) CDKConstants.UNSET;", "modifier": "protected", "type": "Integer", "declarator": "stereoParity      = (Integer) CDKConstants.UNSET", "var_name": "stereoParity"}, {"original_string": "protected Double          charge            = (Double) CDKConstants.UNSET;", "modifier": "protected", "type": "Double", "declarator": "charge            = (Double) CDKConstants.UNSET", "var_name": "charge"}], "methods": [{"identifier": "Atom", "parameters": "()", "modifiers": "public", "return": "", "signature": " Atom()", "full_signature": "public  Atom()", "class_method_signature": "Atom.Atom()", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(int elem)", "modifiers": "public", "return": "", "signature": " Atom(int elem)", "full_signature": "public  Atom(int elem)", "class_method_signature": "Atom.Atom(int elem)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(int elem, int hcnt)", "modifiers": "public", "return": "", "signature": " Atom(int elem, int hcnt)", "full_signature": "public  Atom(int elem, int hcnt)", "class_method_signature": "Atom.Atom(int elem, int hcnt)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(int elem, int hcnt, int fchg)", "modifiers": "public", "return": "", "signature": " Atom(int elem, int hcnt, int fchg)", "full_signature": "public  Atom(int elem, int hcnt, int fchg)", "class_method_signature": "Atom.Atom(int elem, int hcnt, int fchg)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(String symbol)", "modifiers": "public", "return": "", "signature": " Atom(String symbol)", "full_signature": "public  Atom(String symbol)", "class_method_signature": "Atom.Atom(String symbol)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(String elementSymbol, Point3d point3d)", "modifiers": "public", "return": "", "signature": " Atom(String elementSymbol, Point3d point3d)", "full_signature": "public  Atom(String elementSymbol, Point3d point3d)", "class_method_signature": "Atom.Atom(String elementSymbol, Point3d point3d)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(String elementSymbol, Point2d point2d)", "modifiers": "public", "return": "", "signature": " Atom(String elementSymbol, Point2d point2d)", "full_signature": "public  Atom(String elementSymbol, Point2d point2d)", "class_method_signature": "Atom.Atom(String elementSymbol, Point2d point2d)", "testcase": false, "constructor": true}, {"identifier": "Atom", "parameters": "(IElement element)", "modifiers": "public", "return": "", "signature": " Atom(IElement element)", "full_signature": "public  Atom(IElement element)", "class_method_signature": "Atom.Atom(IElement element)", "testcase": false, "constructor": true}, {"identifier": "getContainer", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer()", "full_signature": "@Override public IAtomContainer getContainer()", "class_method_signature": "Atom.getContainer()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "Atom.getIndex()", "testcase": false, "constructor": false}, {"identifier": "bonds", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IBond>", "signature": "Iterable<IBond> bonds()", "full_signature": "@Override public Iterable<IBond> bonds()", "class_method_signature": "Atom.bonds()", "testcase": false, "constructor": false}, {"identifier": "getBondCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBondCount()", "full_signature": "@Override public int getBondCount()", "class_method_signature": "Atom.getBondCount()", "testcase": false, "constructor": false}, {"identifier": "getBond", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "IBond", "signature": "IBond getBond(IAtom atom)", "full_signature": "@Override public IBond getBond(IAtom atom)", "class_method_signature": "Atom.getBond(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "setCharge", "parameters": "(Double charge)", "modifiers": "@Override public", "return": "void", "signature": "void setCharge(Double charge)", "full_signature": "@Override public void setCharge(Double charge)", "class_method_signature": "Atom.setCharge(Double charge)", "testcase": false, "constructor": false}, {"identifier": "getCharge", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getCharge()", "full_signature": "@Override public Double getCharge()", "class_method_signature": "Atom.getCharge()", "testcase": false, "constructor": false}, {"identifier": "setImplicitHydrogenCount", "parameters": "(Integer hydrogenCount)", "modifiers": "@Override public", "return": "void", "signature": "void setImplicitHydrogenCount(Integer hydrogenCount)", "full_signature": "@Override public void setImplicitHydrogenCount(Integer hydrogenCount)", "class_method_signature": "Atom.setImplicitHydrogenCount(Integer hydrogenCount)", "testcase": false, "constructor": false}, {"identifier": "getImplicitHydrogenCount", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getImplicitHydrogenCount()", "full_signature": "@Override public Integer getImplicitHydrogenCount()", "class_method_signature": "Atom.getImplicitHydrogenCount()", "testcase": false, "constructor": false}, {"identifier": "setPoint2d", "parameters": "(Point2d point2d)", "modifiers": "@Override public", "return": "void", "signature": "void setPoint2d(Point2d point2d)", "full_signature": "@Override public void setPoint2d(Point2d point2d)", "class_method_signature": "Atom.setPoint2d(Point2d point2d)", "testcase": false, "constructor": false}, {"identifier": "setPoint3d", "parameters": "(Point3d point3d)", "modifiers": "@Override public", "return": "void", "signature": "void setPoint3d(Point3d point3d)", "full_signature": "@Override public void setPoint3d(Point3d point3d)", "class_method_signature": "Atom.setPoint3d(Point3d point3d)", "testcase": false, "constructor": false}, {"identifier": "setFractionalPoint3d", "parameters": "(Point3d point3d)", "modifiers": "@Override public", "return": "void", "signature": "void setFractionalPoint3d(Point3d point3d)", "full_signature": "@Override public void setFractionalPoint3d(Point3d point3d)", "class_method_signature": "Atom.setFractionalPoint3d(Point3d point3d)", "testcase": false, "constructor": false}, {"identifier": "setStereoParity", "parameters": "(Integer stereoParity)", "modifiers": "@Override public", "return": "void", "signature": "void setStereoParity(Integer stereoParity)", "full_signature": "@Override public void setStereoParity(Integer stereoParity)", "class_method_signature": "Atom.setStereoParity(Integer stereoParity)", "testcase": false, "constructor": false}, {"identifier": "getPoint2d", "parameters": "()", "modifiers": "@Override public", "return": "Point2d", "signature": "Point2d getPoint2d()", "full_signature": "@Override public Point2d getPoint2d()", "class_method_signature": "Atom.getPoint2d()", "testcase": false, "constructor": false}, {"identifier": "getPoint3d", "parameters": "()", "modifiers": "@Override public", "return": "Point3d", "signature": "Point3d getPoint3d()", "full_signature": "@Override public Point3d getPoint3d()", "class_method_signature": "Atom.getPoint3d()", "testcase": false, "constructor": false}, {"identifier": "getFractionalPoint3d", "parameters": "()", "modifiers": "@Override public", "return": "Point3d", "signature": "Point3d getFractionalPoint3d()", "full_signature": "@Override public Point3d getFractionalPoint3d()", "class_method_signature": "Atom.getFractionalPoint3d()", "testcase": false, "constructor": false}, {"identifier": "getStereoParity", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getStereoParity()", "full_signature": "@Override public Integer getStereoParity()", "class_method_signature": "Atom.getStereoParity()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "Atom.compare(Object object)", "testcase": false, "constructor": false}, {"identifier": "isAromatic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAromatic()", "full_signature": "@Override public boolean isAromatic()", "class_method_signature": "Atom.isAromatic()", "testcase": false, "constructor": false}, {"identifier": "setIsAromatic", "parameters": "(boolean arom)", "modifiers": "@Override public", "return": "void", "signature": "void setIsAromatic(boolean arom)", "full_signature": "@Override public void setIsAromatic(boolean arom)", "class_method_signature": "Atom.setIsAromatic(boolean arom)", "testcase": false, "constructor": false}, {"identifier": "isInRing", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInRing()", "full_signature": "@Override public boolean isInRing()", "class_method_signature": "Atom.isInRing()", "testcase": false, "constructor": false}, {"identifier": "setIsInRing", "parameters": "(boolean ring)", "modifiers": "@Override public", "return": "void", "signature": "void setIsInRing(boolean ring)", "full_signature": "@Override public void setIsInRing(boolean ring)", "class_method_signature": "Atom.setIsInRing(boolean ring)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Atom.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IAtom", "signature": "IAtom clone()", "full_signature": "@Override public IAtom clone()", "class_method_signature": "Atom.clone()", "testcase": false, "constructor": false}, {"identifier": "isUpper", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUpper(char c)", "full_signature": "private static boolean isUpper(char c)", "class_method_signature": "Atom.isUpper(char c)", "testcase": false, "constructor": false}, {"identifier": "isLower", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLower(char c)", "full_signature": "private static boolean isLower(char c)", "class_method_signature": "Atom.isLower(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private static boolean isDigit(char c)", "class_method_signature": "Atom.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "parseAtomSymbol", "parameters": "(IAtom atom, String str)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseAtomSymbol(IAtom atom, String str)", "full_signature": "private static boolean parseAtomSymbol(IAtom atom, String str)", "class_method_signature": "Atom.parseAtomSymbol(IAtom atom, String str)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Atom.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Atom.equals(Object obj)", "testcase": false, "constructor": false}], "file": "base/data/src/main/java/org/openscience/cdk/Atom.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean compare(Object object) {\n        if (!(object instanceof IAtom)) {\n            return false;\n        }\n        if (!super.compare(object)) {\n            return false;\n        }\n        Atom atom = (Atom) object;\n        // XXX: floating point comparision!\n        if (((point2d == atom.point2d) || ((point2d != null) && (point2d.equals(atom.point2d))))\n            && ((point3d == atom.point3d) || ((point3d != null) && (point3d.equals(atom.point3d))))\n            && (Objects.equals(hydrogenCount, atom.hydrogenCount)) && (Objects.equals(stereoParity, atom.stereoParity))\n            && (Objects.equals(charge, atom.charge))) {\n            return true;\n        }\n        return false;\n    }", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "Atom.compare(Object object)", "testcase": false, "constructor": false, "invocations": ["compare", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}