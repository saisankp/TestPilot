{"test_class": {"identifier": "ExceptionHandlerBindingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MESSAGE = \"message\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "neo-starter/src/test/java/eu/neoteric/starter/mvc/errorhandling/handler/ExceptionHandlerBindingTest.java"}, "test_case": {"identifier": "shouldThrowException_WhenNotImplementingRestExceptionProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowException_WhenNotImplementingRestExceptionProvider() throws Exception {\n        expectedException.expect(IllegalStateException.class);\n        ExceptionHandlerBinding.fromAnnotatedClass(ExceptionProviderNotImplementing.class);\n    }", "signature": "void shouldThrowException_WhenNotImplementingRestExceptionProvider()", "full_signature": "@Test public void shouldThrowException_WhenNotImplementingRestExceptionProvider()", "class_method_signature": "ExceptionHandlerBindingTest.shouldThrowException_WhenNotImplementingRestExceptionProvider()", "testcase": true, "constructor": false, "invocations": ["expect", "fromAnnotatedClass"]}, "focal_class": {"identifier": "ExceptionHandlerBinding", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String exceptionHandlerBeanName;", "modifier": "private final", "type": "String", "declarator": "exceptionHandlerBeanName", "var_name": "exceptionHandlerBeanName"}, {"original_string": "private final Class<?> exceptionHandlerClass;", "modifier": "private final", "type": "Class<?>", "declarator": "exceptionHandlerClass", "var_name": "exceptionHandlerClass"}, {"original_string": "private final Class<? extends Exception> exceptionClass;", "modifier": "private final", "type": "Class<? extends Exception>", "declarator": "exceptionClass", "var_name": "exceptionClass"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final Level logLevel;", "modifier": "private final", "type": "Level", "declarator": "logLevel", "var_name": "logLevel"}, {"original_string": "private final String cause;", "modifier": "private final", "type": "String", "declarator": "cause", "var_name": "cause"}, {"original_string": "private final HttpStatus httpStatus;", "modifier": "private final", "type": "HttpStatus", "declarator": "httpStatus", "var_name": "httpStatus"}, {"original_string": "private final boolean suppressStacktrace;", "modifier": "private final", "type": "boolean", "declarator": "suppressStacktrace", "var_name": "suppressStacktrace"}, {"original_string": "private final boolean suppressException;", "modifier": "private final", "type": "boolean", "declarator": "suppressException", "var_name": "suppressException"}], "methods": [{"identifier": "fromAnnotatedClass", "parameters": "(Class<?> exceptionHandlerClass)", "modifiers": "public static", "return": "ExceptionHandlerBinding", "signature": "ExceptionHandlerBinding fromAnnotatedClass(Class<?> exceptionHandlerClass)", "full_signature": "public static ExceptionHandlerBinding fromAnnotatedClass(Class<?> exceptionHandlerClass)", "class_method_signature": "ExceptionHandlerBinding.fromAnnotatedClass(Class<?> exceptionHandlerClass)", "testcase": false, "constructor": false}, {"identifier": "getHandlerBeanName", "parameters": "(Class<?> exceptionHandlerClass)", "modifiers": "private static", "return": "String", "signature": "String getHandlerBeanName(Class<?> exceptionHandlerClass)", "full_signature": "private static String getHandlerBeanName(Class<?> exceptionHandlerClass)", "class_method_signature": "ExceptionHandlerBinding.getHandlerBeanName(Class<?> exceptionHandlerClass)", "testcase": false, "constructor": false}, {"identifier": "getExceptionClass", "parameters": "(Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Class<? extends Exception>", "signature": "Class<? extends Exception> getExceptionClass(Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Class<? extends Exception> getExceptionClass(Class<?> clazz)", "class_method_signature": "ExceptionHandlerBinding.getExceptionClass(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "neo-starter/src/main/java/eu/neoteric/starter/mvc/errorhandling/handler/ExceptionHandlerBinding.java"}, "focal_method": {"identifier": "fromAnnotatedClass", "parameters": "(Class<?> exceptionHandlerClass)", "modifiers": "public static", "return": "ExceptionHandlerBinding", "body": "public static ExceptionHandlerBinding fromAnnotatedClass(Class<?> exceptionHandlerClass) {\n        Assert.notNull(exceptionHandlerClass);\n        RestExceptionHandlerProvider annotation = exceptionHandlerClass.getAnnotation(RestExceptionHandlerProvider.class);\n        Assert.state(annotation != null, exceptionHandlerClass + \" class in not annotated with @RestExceptionHandlerProvider\");\n        return builder()\n                .exceptionHandlerClass(exceptionHandlerClass)\n                .logger(LoggerFactory.getLogger(exceptionHandlerClass))\n                .exceptionClass(getExceptionClass(exceptionHandlerClass))\n                .exceptionHandlerBeanName(getHandlerBeanName(exceptionHandlerClass))\n                .httpStatus(annotation.httpStatus())\n                .cause(annotation.applicationCode())\n                .logLevel(annotation.logLevel())\n                .suppressStacktrace(annotation.suppressStackTrace())\n                .suppressException(annotation.suppressException())\n                .build();\n    }", "signature": "ExceptionHandlerBinding fromAnnotatedClass(Class<?> exceptionHandlerClass)", "full_signature": "public static ExceptionHandlerBinding fromAnnotatedClass(Class<?> exceptionHandlerClass)", "class_method_signature": "ExceptionHandlerBinding.fromAnnotatedClass(Class<?> exceptionHandlerClass)", "testcase": false, "constructor": false, "invocations": ["notNull", "getAnnotation", "state", "build", "suppressException", "suppressStacktrace", "logLevel", "cause", "httpStatus", "exceptionHandlerBeanName", "exceptionClass", "logger", "exceptionHandlerClass", "builder", "getLogger", "getExceptionClass", "getHandlerBeanName", "httpStatus", "applicationCode", "logLevel", "suppressStackTrace", "suppressException"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}