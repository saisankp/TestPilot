{"test_class": {"identifier": "QosProtocolWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL url = Mockito.mock(URL.class);", "modifier": "private", "type": "URL", "declarator": "url = Mockito.mock(URL.class)", "var_name": "url"}, {"original_string": "private Invoker invoker = mock(Invoker.class);", "modifier": "private", "type": "Invoker", "declarator": "invoker = mock(Invoker.class)", "var_name": "invoker"}, {"original_string": "private Protocol protocol = mock(Protocol.class);", "modifier": "private", "type": "Protocol", "declarator": "protocol = mock(Protocol.class)", "var_name": "protocol"}, {"original_string": "private QosProtocolWrapper wrapper = new QosProtocolWrapper(protocol);", "modifier": "private", "type": "QosProtocolWrapper", "declarator": "wrapper = new QosProtocolWrapper(protocol)", "var_name": "wrapper"}, {"original_string": "private Server server = Server.getInstance();", "modifier": "private", "type": "Server", "declarator": "server = Server.getInstance()", "var_name": "server"}], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/protocol/QosProtocolWrapperTest.java"}, "test_case": {"identifier": "testExport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExport() throws Exception {\n        wrapper.export(invoker);\n        assertThat(server.isStarted(), is(true));\n        assertThat(server.getHost(), is(\"localhost\"));\n        assertThat(server.getPort(), is(12345));\n        assertThat(server.isAcceptForeignIp(), is(false));\n        verify(protocol).export(invoker);\n    }", "signature": "void testExport()", "full_signature": "@Test public void testExport()", "class_method_signature": "QosProtocolWrapperTest.testExport()", "testcase": true, "constructor": false, "invocations": ["export", "assertThat", "isStarted", "is", "assertThat", "getHost", "is", "assertThat", "getPort", "is", "assertThat", "isAcceptForeignIp", "is", "export", "verify"]}, "focal_class": {"identifier": "QosProtocolWrapper", "superclass": "", "interfaces": "implements Protocol", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(QosProtocolWrapper.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QosProtocolWrapper.class)", "var_name": "logger"}, {"original_string": "private static AtomicBoolean hasStarted = new AtomicBoolean(false);", "modifier": "private static", "type": "AtomicBoolean", "declarator": "hasStarted = new AtomicBoolean(false)", "var_name": "hasStarted"}, {"original_string": "private Protocol protocol;", "modifier": "private", "type": "Protocol", "declarator": "protocol", "var_name": "protocol"}], "methods": [{"identifier": "QosProtocolWrapper", "parameters": "(Protocol protocol)", "modifiers": "public", "return": "", "signature": " QosProtocolWrapper(Protocol protocol)", "full_signature": "public  QosProtocolWrapper(Protocol protocol)", "class_method_signature": "QosProtocolWrapper.QosProtocolWrapper(Protocol protocol)", "testcase": false, "constructor": true}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "QosProtocolWrapper.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "signature": "Exporter<T> export(Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(Invoker<T> invoker)", "class_method_signature": "QosProtocolWrapper.export(Invoker<T> invoker)", "testcase": false, "constructor": false}, {"identifier": "refer", "parameters": "(Class<T> type, URL url)", "modifiers": "@Override public", "return": "Invoker<T>", "signature": "Invoker<T> refer(Class<T> type, URL url)", "full_signature": "@Override public Invoker<T> refer(Class<T> type, URL url)", "class_method_signature": "QosProtocolWrapper.refer(Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "QosProtocolWrapper.destroy()", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "@Override public", "return": "List<ProtocolServer>", "signature": "List<ProtocolServer> getServers()", "full_signature": "@Override public List<ProtocolServer> getServers()", "class_method_signature": "QosProtocolWrapper.getServers()", "testcase": false, "constructor": false}, {"identifier": "startQosServer", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void startQosServer(URL url)", "full_signature": "private void startQosServer(URL url)", "class_method_signature": "QosProtocolWrapper.startQosServer(URL url)", "testcase": false, "constructor": false}, {"identifier": "stopServer", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stopServer()", "full_signature": " void stopServer()", "class_method_signature": "QosProtocolWrapper.stopServer()", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java"}, "focal_method": {"identifier": "export", "parameters": "(Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "body": "@Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        if (UrlUtils.isRegistry(invoker.getUrl())) {\n            startQosServer(invoker.getUrl());\n            return protocol.export(invoker);\n        }\n        return protocol.export(invoker);\n    }", "signature": "Exporter<T> export(Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(Invoker<T> invoker)", "class_method_signature": "QosProtocolWrapper.export(Invoker<T> invoker)", "testcase": false, "constructor": false, "invocations": ["isRegistry", "getUrl", "startQosServer", "getUrl", "export", "export"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}