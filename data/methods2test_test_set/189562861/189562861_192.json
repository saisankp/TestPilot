{"test_class": {"identifier": "JSONTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static byte[] DEFAULT_BYTES = {3, 12, 14, 41, 12, 2, 3, 12, 4, 67, 23};", "modifier": "static", "type": "byte[]", "declarator": "DEFAULT_BYTES = {3, 12, 14, 41, 12, 2, 3, 12, 4, 67, 23}", "var_name": "DEFAULT_BYTES"}, {"original_string": "static int DEFAULT_$$ = 152;", "modifier": "static", "type": "int", "declarator": "DEFAULT_$$ = 152", "var_name": "DEFAULT_"}], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/json/JSONTest.java"}, "test_case": {"identifier": "testParse2JSONObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse2JSONObject() throws Exception {\n        JSONObject jo = (JSONObject) JSON.parse(\"{name:'qianlei',array:[1,2,3,4,98.123],b1:TRUE,$1:NULL,$2:FALSE,__3:NULL}\");\n        assertEquals(jo.getString(\"name\"), \"qianlei\");\n        assertEquals(jo.getArray(\"array\").length(), 5);\n        assertEquals(jo.get(\"$2\"), Boolean.FALSE);\n        assertEquals(jo.get(\"__3\"), null);\n\n        for (int i = 0; i < 10000; i++)\n            JSON.parse(\"{\\\"name\\\":\\\"qianlei\\\",\\\"array\\\":[1,2,3,4,98.123],\\\"displayName\\\":\\\"\u94b1\u78ca\\\"}\");\n\n        long now = System.currentTimeMillis();\n        for (int i = 0; i < 10000; i++)\n            JSON.parse(\"{\\\"name\\\":\\\"qianlei\\\",\\\"array\\\":[1,2,3,4,98.123],\\\"displayName\\\":\\\"\u94b1\u78ca\\\"}\");\n        System.out.println(\"parse to JSONObject 10000 times in: \" + (System.currentTimeMillis() - now));\n    }", "signature": "void testParse2JSONObject()", "full_signature": "@Test public void testParse2JSONObject()", "class_method_signature": "JSONTest.testParse2JSONObject()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "getString", "assertEquals", "length", "getArray", "assertEquals", "get", "assertEquals", "get", "parse", "currentTimeMillis", "parse", "println", "currentTimeMillis"]}, "focal_class": {"identifier": "JSON", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char LBRACE = '{', RBRACE = '}';", "modifier": "public static final", "type": "char", "declarator": "LBRACE = '{'", "var_name": "LBRACE"}, {"original_string": "public static final char LSQUARE = '[', RSQUARE = ']';", "modifier": "public static final", "type": "char", "declarator": "LSQUARE = '['", "var_name": "LSQUARE"}, {"original_string": "public static final char COMMA = ',', COLON = ':', QUOTE = '\"';", "modifier": "public static final", "type": "char", "declarator": "COMMA = ','", "var_name": "COMMA"}, {"original_string": "public static final String NULL = \"null\";", "modifier": "public static final", "type": "String", "declarator": "NULL = \"null\"", "var_name": "NULL"}, {"original_string": "public static final byte END = 0, START = 1, OBJECT_ITEM = 2, OBJECT_VALUE = 3, ARRAY_ITEM = 4;", "modifier": "public static final", "type": "byte", "declarator": "END = 0", "var_name": "END"}, {"original_string": "static final JSONConverter DEFAULT_CONVERTER = new GenericJSONConverter();", "modifier": "static final", "type": "JSONConverter", "declarator": "DEFAULT_CONVERTER = new GenericJSONConverter()", "var_name": "DEFAULT_CONVERTER"}], "methods": [{"identifier": "JSON", "parameters": "()", "modifiers": "private", "return": "", "signature": " JSON()", "full_signature": "private  JSON()", "class_method_signature": "JSON.JSON()", "testcase": false, "constructor": true}, {"identifier": "json", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String json(Object obj)", "full_signature": "public static String json(Object obj)", "class_method_signature": "JSON.json(Object obj)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, Writer writer)", "modifiers": "public static", "return": "void", "signature": "void json(Object obj, Writer writer)", "full_signature": "public static void json(Object obj, Writer writer)", "class_method_signature": "JSON.json(Object obj, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, Writer writer, boolean writeClass)", "modifiers": "public static", "return": "void", "signature": "void json(Object obj, Writer writer, boolean writeClass)", "full_signature": "public static void json(Object obj, Writer writer, boolean writeClass)", "class_method_signature": "JSON.json(Object obj, Writer writer, boolean writeClass)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, String[] properties)", "modifiers": "public static", "return": "String", "signature": "String json(Object obj, String[] properties)", "full_signature": "public static String json(Object obj, String[] properties)", "class_method_signature": "JSON.json(Object obj, String[] properties)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, final String[] properties, Writer writer)", "modifiers": "public static", "return": "void", "signature": "void json(Object obj, final String[] properties, Writer writer)", "full_signature": "public static void json(Object obj, final String[] properties, Writer writer)", "class_method_signature": "JSON.json(Object obj, final String[] properties, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, final String[] properties, Writer writer, boolean writeClass)", "modifiers": "public static", "return": "void", "signature": "void json(Object obj, final String[] properties, Writer writer, boolean writeClass)", "full_signature": "public static void json(Object obj, final String[] properties, Writer writer, boolean writeClass)", "class_method_signature": "JSON.json(Object obj, final String[] properties, Writer writer, boolean writeClass)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, JSONWriter jb, boolean writeClass)", "modifiers": "private static", "return": "void", "signature": "void json(Object obj, JSONWriter jb, boolean writeClass)", "full_signature": "private static void json(Object obj, JSONWriter jb, boolean writeClass)", "class_method_signature": "JSON.json(Object obj, JSONWriter jb, boolean writeClass)", "testcase": false, "constructor": false}, {"identifier": "json", "parameters": "(Object obj, String[] properties, JSONWriter jb, boolean writeClass)", "modifiers": "private static", "return": "void", "signature": "void json(Object obj, String[] properties, JSONWriter jb, boolean writeClass)", "full_signature": "private static void json(Object obj, String[] properties, JSONWriter jb, boolean writeClass)", "class_method_signature": "JSON.json(Object obj, String[] properties, JSONWriter jb, boolean writeClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String json)", "modifiers": "public static", "return": "Object", "signature": "Object parse(String json)", "full_signature": "public static Object parse(String json)", "class_method_signature": "JSON.parse(String json)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader)", "modifiers": "public static", "return": "Object", "signature": "Object parse(Reader reader)", "full_signature": "public static Object parse(Reader reader)", "class_method_signature": "JSON.parse(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String json, Class<T> type)", "modifiers": "public static", "return": "T", "signature": "T parse(String json, Class<T> type)", "full_signature": "public static T parse(String json, Class<T> type)", "class_method_signature": "JSON.parse(String json, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(Reader reader, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(Reader reader, Class<T> type)", "class_method_signature": "JSON.parse(Reader reader, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String json, Class<?>[] types)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] parse(String json, Class<?>[] types)", "full_signature": "public static Object[] parse(String json, Class<?>[] types)", "class_method_signature": "JSON.parse(String json, Class<?>[] types)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader, Class<?>[] types)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] parse(Reader reader, Class<?>[] types)", "full_signature": "public static Object[] parse(Reader reader, Class<?>[] types)", "class_method_signature": "JSON.parse(Reader reader, Class<?>[] types)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String json, JSONVisitor handler)", "modifiers": "public static", "return": "Object", "signature": "Object parse(String json, JSONVisitor handler)", "full_signature": "public static Object parse(String json, JSONVisitor handler)", "class_method_signature": "JSON.parse(String json, JSONVisitor handler)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader, JSONVisitor handler)", "modifiers": "public static", "return": "Object", "signature": "Object parse(Reader reader, JSONVisitor handler)", "full_signature": "public static Object parse(Reader reader, JSONVisitor handler)", "class_method_signature": "JSON.parse(Reader reader, JSONVisitor handler)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader, int expect)", "modifiers": "private static", "return": "Object", "signature": "Object parse(Reader reader, int expect)", "full_signature": "private static Object parse(Reader reader, int expect)", "class_method_signature": "JSON.parse(Reader reader, int expect)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader reader, JSONVisitor handler, int expect)", "modifiers": "private static", "return": "Object", "signature": "Object parse(Reader reader, JSONVisitor handler, int expect)", "full_signature": "private static Object parse(Reader reader, JSONVisitor handler, int expect)", "class_method_signature": "JSON.parse(Reader reader, JSONVisitor handler, int expect)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/json/JSON.java"}, "focal_method": {"identifier": "parse", "parameters": "(String json)", "modifiers": "public static", "return": "Object", "body": "public static Object parse(String json) throws ParseException {\n        StringReader reader = new StringReader(json);\n        try {\n            return parse(reader);\n        } catch (IOException e) {\n            throw new ParseException(e.getMessage());\n        } finally {\n            reader.close();\n        }\n    }", "signature": "Object parse(String json)", "full_signature": "public static Object parse(String json)", "class_method_signature": "JSON.parse(String json)", "testcase": false, "constructor": false, "invocations": ["parse", "getMessage", "close"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}