{"test_class": {"identifier": "DefaultOAuthJwtAccessTokenParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParserTest.java"}, "test_case": {"identifier": "testDefaultOAuthJwtAccessTokenParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultOAuthJwtAccessTokenParser() {\n        BiFunction<Field, DefaultOAuthJwtAccessTokenParser, Object> getFieldValue = (f, object) -> {\n            try {\n                f.setAccessible(true);\n                return f.get(object);\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        };\n        DefaultOAuthJwtAccessTokenParser parser = null;\n\n        // new error\n        assertThrows(IllegalArgumentException.class, () -> new DefaultOAuthJwtAccessTokenParser(null, null));\n\n        // new with null/empty URL\n        parser = new DefaultOAuthJwtAccessTokenParser(baseKeyStore, null);\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"parser\":\n                    assertNotNull(getFieldValue.apply(f, parser));\n                    break;\n            }\n        }\n        parser = new DefaultOAuthJwtAccessTokenParser(baseKeyStore, \"\");\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"parser\":\n                    assertNotNull(getFieldValue.apply(f, parser));\n                    break;\n            }\n        }\n\n        // new with file JWKS\n        parser = new DefaultOAuthJwtAccessTokenParser(baseKeyStore, this.classLoader.getResource(\"jwt_jwks.json\").toString());\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"parser\":\n                    assertNotNull(getFieldValue.apply(f, parser));\n                    break;\n            }\n        }\n\n        // new with HTTPS JWKS\n        parser = new DefaultOAuthJwtAccessTokenParser(baseKeyStore, \"https://athenz-oauth-example.auth0.com/.well-known/jwks.json\");\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"parser\":\n                    assertNotNull(getFieldValue.apply(f, parser));\n                    break;\n            }\n        }\n    }", "signature": "void testDefaultOAuthJwtAccessTokenParser()", "full_signature": "@Test public void testDefaultOAuthJwtAccessTokenParser()", "class_method_signature": "DefaultOAuthJwtAccessTokenParserTest.testDefaultOAuthJwtAccessTokenParser()", "testcase": true, "constructor": false, "invocations": ["setAccessible", "get", "assertThrows", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNotNull", "apply", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNotNull", "apply", "toString", "getResource", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNotNull", "apply", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNotNull", "apply"]}, "focal_class": {"identifier": "DefaultOAuthJwtAccessTokenParser", "superclass": "", "interfaces": "implements OAuthJwtAccessTokenParser", "fields": [{"original_string": "public static final int ALLOWED_CLOCK_SKEW_SECONDS = 60;", "modifier": "public static final", "type": "int", "declarator": "ALLOWED_CLOCK_SKEW_SECONDS = 60", "var_name": "ALLOWED_CLOCK_SKEW_SECONDS"}, {"original_string": "protected JwtParser parser = null;", "modifier": "protected", "type": "JwtParser", "declarator": "parser = null", "var_name": "parser"}], "methods": [{"identifier": "DefaultOAuthJwtAccessTokenParser", "parameters": "(KeyStore keyStore, String jwksUrl)", "modifiers": "public", "return": "", "signature": " DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "full_signature": "public  DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String jwtString)", "modifiers": "@Override public", "return": "OAuthJwtAccessToken", "signature": "OAuthJwtAccessToken parse(String jwtString)", "full_signature": "@Override public OAuthJwtAccessToken parse(String jwtString)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.parse(String jwtString)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParser.java"}, "focal_method": {"identifier": "DefaultOAuthJwtAccessTokenParser", "parameters": "(KeyStore keyStore, String jwksUrl)", "modifiers": "public", "return": "", "body": "public DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl) throws IllegalArgumentException {\n        if (keyStore == null) {\n            throw new IllegalArgumentException(\"DefaultOAuthJwtAccessTokenParser: keyStore is null\");\n        }\n\n        SigningKeyResolver signingKeyResolver = new KeyStoreJwkKeyResolver(keyStore, jwksUrl, null);\n        this.parser = Jwts.parserBuilder()\n            .setSigningKeyResolver(signingKeyResolver)\n            .setAllowedClockSkewSeconds(ALLOWED_CLOCK_SKEW_SECONDS)\n            .build();\n    }", "signature": " DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "full_signature": "public  DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}