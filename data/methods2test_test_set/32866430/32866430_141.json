{"test_class": {"identifier": "UserDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject DSLContext jooqContext;", "modifier": "@Inject", "type": "DSLContext", "declarator": "jooqContext", "var_name": "jooqContext"}, {"original_string": "UserDAO userDAO;", "modifier": "", "type": "UserDAO", "declarator": "userDAO", "var_name": "userDAO"}, {"original_string": "String hashedPassword;", "modifier": "", "type": "String", "declarator": "hashedPassword", "var_name": "hashedPassword"}], "file": "server/src/test/java/keywhiz/service/daos/UserDAOTest.java"}, "test_case": {"identifier": "getExistingUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getExistingUser() {\n    String retrievedHash = userDAO.getHashedPassword(\"user\").orElseThrow(RuntimeException::new);\n    assertThat(retrievedHash).isEqualTo(hashedPassword);\n  }", "signature": "void getExistingUser()", "full_signature": "@Test public void getExistingUser()", "class_method_signature": "UserDAOTest.getExistingUser()", "testcase": true, "constructor": false, "invocations": ["orElseThrow", "getHashedPassword", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "UserDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}], "methods": [{"identifier": "UserDAO", "parameters": "(DSLContext dslContext)", "modifiers": "public", "return": "", "signature": " UserDAO(DSLContext dslContext)", "full_signature": "public  UserDAO(DSLContext dslContext)", "class_method_signature": "UserDAO.UserDAO(DSLContext dslContext)", "testcase": false, "constructor": true}, {"identifier": "getHashedPassword", "parameters": "(String name)", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getHashedPassword(String name)", "full_signature": "public Optional<String> getHashedPassword(String name)", "class_method_signature": "UserDAO.getHashedPassword(String name)", "testcase": false, "constructor": false}, {"identifier": "createUserAt", "parameters": "(String user, String password, OffsetDateTime created, OffsetDateTime updated)", "modifiers": "public", "return": "void", "signature": "void createUserAt(String user, String password, OffsetDateTime created, OffsetDateTime updated)", "full_signature": "public void createUserAt(String user, String password, OffsetDateTime created, OffsetDateTime updated)", "class_method_signature": "UserDAO.createUserAt(String user, String password, OffsetDateTime created, OffsetDateTime updated)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(String user, String password)", "modifiers": "public", "return": "void", "signature": "void createUser(String user, String password)", "full_signature": "public void createUser(String user, String password)", "class_method_signature": "UserDAO.createUser(String user, String password)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/daos/UserDAO.java"}, "focal_method": {"identifier": "getHashedPassword", "parameters": "(String name)", "modifiers": "public", "return": "Optional<String>", "body": "public Optional<String> getHashedPassword(String name) {\n    String r = dslContext\n        .select(USERS.PASSWORD_HASH)\n        .from(USERS)\n        .where(USERS.USERNAME.eq(name))\n        .fetchOne(USERS.PASSWORD_HASH);\n    return Optional.ofNullable(r);\n  }", "signature": "Optional<String> getHashedPassword(String name)", "full_signature": "public Optional<String> getHashedPassword(String name)", "class_method_signature": "UserDAO.getHashedPassword(String name)", "testcase": false, "constructor": false, "invocations": ["fetchOne", "where", "from", "select", "eq", "ofNullable"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}