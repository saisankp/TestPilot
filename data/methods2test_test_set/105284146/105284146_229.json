{"test_class": {"identifier": "XMLExporterTest", "superclass": "extends AbstractXmlConverterTest", "interfaces": "", "fields": [], "file": "iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/XMLExporterTest.java"}, "test_case": {"identifier": "exportTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exportTest() throws IOException {\n        exporterTest(MultipleExtensionsTestNetworkFactory.create(), CURRENT_IIDM_XML_VERSION);\n    }", "signature": "void exportTest()", "full_signature": "@Test public void exportTest()", "class_method_signature": "XMLExporterTest.exportTest()", "testcase": true, "constructor": false, "invocations": ["exporterTest", "create"]}, "focal_class": {"identifier": "XMLExporter", "superclass": "", "interfaces": "implements Exporter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XMLExporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XMLExporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final Supplier<ExtensionProviders<ExtensionXmlSerializer>> EXTENSIONS_SUPPLIER = Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionXmlSerializer.class, \"network\"));", "modifier": "private static final", "type": "Supplier<ExtensionProviders<ExtensionXmlSerializer>>", "declarator": "EXTENSIONS_SUPPLIER = Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionXmlSerializer.class, \"network\"))", "var_name": "EXTENSIONS_SUPPLIER"}, {"original_string": "public static final String INDENT = \"iidm.export.xml.indent\";", "modifier": "public static final", "type": "String", "declarator": "INDENT = \"iidm.export.xml.indent\"", "var_name": "INDENT"}, {"original_string": "public static final String WITH_BRANCH_STATE_VARIABLES = \"iidm.export.xml.with-branch-state-variables\";", "modifier": "public static final", "type": "String", "declarator": "WITH_BRANCH_STATE_VARIABLES = \"iidm.export.xml.with-branch-state-variables\"", "var_name": "WITH_BRANCH_STATE_VARIABLES"}, {"original_string": "public static final String ONLY_MAIN_CC = \"iidm.export.xml.only-main-cc\";", "modifier": "public static final", "type": "String", "declarator": "ONLY_MAIN_CC = \"iidm.export.xml.only-main-cc\"", "var_name": "ONLY_MAIN_CC"}, {"original_string": "public static final String ANONYMISED = \"iidm.export.xml.anonymised\";", "modifier": "public static final", "type": "String", "declarator": "ANONYMISED = \"iidm.export.xml.anonymised\"", "var_name": "ANONYMISED"}, {"original_string": "public static final String TOPOLOGY_LEVEL = \"iidm.export.xml.topology-level\";", "modifier": "public static final", "type": "String", "declarator": "TOPOLOGY_LEVEL = \"iidm.export.xml.topology-level\"", "var_name": "TOPOLOGY_LEVEL"}, {"original_string": "public static final String THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND = \"iidm.export.xml.throw-exception-if-extension-not-found\";", "modifier": "public static final", "type": "String", "declarator": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND = \"iidm.export.xml.throw-exception-if-extension-not-found\"", "var_name": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND"}, {"original_string": "public static final String EXTENSIONS_LIST = \"iidm.export.xml.extensions\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSIONS_LIST = \"iidm.export.xml.extensions\"", "var_name": "EXTENSIONS_LIST"}, {"original_string": "public static final String VERSION = \"iidm.export.xml.version\";", "modifier": "public static final", "type": "String", "declarator": "VERSION = \"iidm.export.xml.version\"", "var_name": "VERSION"}, {"original_string": "private static final Parameter INDENT_PARAMETER = new Parameter(INDENT, ParameterType.BOOLEAN, \"Indent export output file\", Boolean.TRUE);", "modifier": "private static final", "type": "Parameter", "declarator": "INDENT_PARAMETER = new Parameter(INDENT, ParameterType.BOOLEAN, \"Indent export output file\", Boolean.TRUE)", "var_name": "INDENT_PARAMETER"}, {"original_string": "private static final Parameter WITH_BRANCH_STATE_VARIABLES_PARAMETER = new Parameter(WITH_BRANCH_STATE_VARIABLES, ParameterType.BOOLEAN, \"Export network with branch state variables\", Boolean.TRUE);", "modifier": "private static final", "type": "Parameter", "declarator": "WITH_BRANCH_STATE_VARIABLES_PARAMETER = new Parameter(WITH_BRANCH_STATE_VARIABLES, ParameterType.BOOLEAN, \"Export network with branch state variables\", Boolean.TRUE)", "var_name": "WITH_BRANCH_STATE_VARIABLES_PARAMETER"}, {"original_string": "private static final Parameter ONLY_MAIN_CC_PARAMETER = new Parameter(ONLY_MAIN_CC, ParameterType.BOOLEAN, \"Export only main CC\", Boolean.FALSE);", "modifier": "private static final", "type": "Parameter", "declarator": "ONLY_MAIN_CC_PARAMETER = new Parameter(ONLY_MAIN_CC, ParameterType.BOOLEAN, \"Export only main CC\", Boolean.FALSE)", "var_name": "ONLY_MAIN_CC_PARAMETER"}, {"original_string": "private static final Parameter ANONYMISED_PARAMETER = new Parameter(ANONYMISED, ParameterType.BOOLEAN, \"Anonymise exported network\", Boolean.FALSE);", "modifier": "private static final", "type": "Parameter", "declarator": "ANONYMISED_PARAMETER = new Parameter(ANONYMISED, ParameterType.BOOLEAN, \"Anonymise exported network\", Boolean.FALSE)", "var_name": "ANONYMISED_PARAMETER"}, {"original_string": "private static final Parameter TOPOLOGY_LEVEL_PARAMETER = new Parameter(TOPOLOGY_LEVEL, ParameterType.STRING, \"Export network in this topology level\", \"NODE_BREAKER\");", "modifier": "private static final", "type": "Parameter", "declarator": "TOPOLOGY_LEVEL_PARAMETER = new Parameter(TOPOLOGY_LEVEL, ParameterType.STRING, \"Export network in this topology level\", \"NODE_BREAKER\")", "var_name": "TOPOLOGY_LEVEL_PARAMETER"}, {"original_string": "private static final Parameter THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER = new Parameter(THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND, ParameterType.BOOLEAN, \"Throw exception if extension not found\", Boolean.FALSE);", "modifier": "private static final", "type": "Parameter", "declarator": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER = new Parameter(THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND, ParameterType.BOOLEAN, \"Throw exception if extension not found\", Boolean.FALSE)", "var_name": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER"}, {"original_string": "private static final Parameter EXTENSIONS_LIST_PARAMETER = new Parameter(EXTENSIONS_LIST, ParameterType.STRING_LIST, \"The list of exported extensions\", null);", "modifier": "private static final", "type": "Parameter", "declarator": "EXTENSIONS_LIST_PARAMETER = new Parameter(EXTENSIONS_LIST, ParameterType.STRING_LIST, \"The list of exported extensions\", null)", "var_name": "EXTENSIONS_LIST_PARAMETER"}, {"original_string": "private static final Parameter VERSION_PARAMETER = new Parameter(VERSION, ParameterType.STRING, \"IIDM-XML version in which files will be generated\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION.toString(\".\"));", "modifier": "private static final", "type": "Parameter", "declarator": "VERSION_PARAMETER = new Parameter(VERSION, ParameterType.STRING, \"IIDM-XML version in which files will be generated\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION.toString(\".\"))", "var_name": "VERSION_PARAMETER"}, {"original_string": "private final ParameterDefaultValueConfig defaultValueConfig;", "modifier": "private final", "type": "ParameterDefaultValueConfig", "declarator": "defaultValueConfig", "var_name": "defaultValueConfig"}], "methods": [{"identifier": "XMLExporter", "parameters": "()", "modifiers": "public", "return": "", "signature": " XMLExporter()", "full_signature": "public  XMLExporter()", "class_method_signature": "XMLExporter.XMLExporter()", "testcase": false, "constructor": true}, {"identifier": "XMLExporter", "parameters": "(PlatformConfig platformConfig)", "modifiers": "public", "return": "", "signature": " XMLExporter(PlatformConfig platformConfig)", "full_signature": "public  XMLExporter(PlatformConfig platformConfig)", "class_method_signature": "XMLExporter.XMLExporter(PlatformConfig platformConfig)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "XMLExporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "XMLExporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Network network, Properties parameters, DataSource dataSource)", "modifiers": "@Override public", "return": "void", "signature": "void export(Network network, Properties parameters, DataSource dataSource)", "full_signature": "@Override public void export(Network network, Properties parameters, DataSource dataSource)", "class_method_signature": "XMLExporter.export(Network network, Properties parameters, DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "addExtensionsVersions", "parameters": "(Properties parameters, ExportOptions options)", "modifiers": "private", "return": "void", "signature": "void addExtensionsVersions(Properties parameters, ExportOptions options)", "full_signature": "private void addExtensionsVersions(Properties parameters, ExportOptions options)", "class_method_signature": "XMLExporter.addExtensionsVersions(Properties parameters, ExportOptions options)", "testcase": false, "constructor": false}, {"identifier": "createExportOptions", "parameters": "(Properties parameters)", "modifiers": "private", "return": "ExportOptions", "signature": "ExportOptions createExportOptions(Properties parameters)", "full_signature": "private ExportOptions createExportOptions(Properties parameters)", "class_method_signature": "XMLExporter.createExportOptions(Properties parameters)", "testcase": false, "constructor": false}], "file": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLExporter.java"}, "focal_method": {"identifier": "export", "parameters": "(Network network, Properties parameters, DataSource dataSource)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void export(Network network, Properties parameters, DataSource dataSource) {\n        if (network == null) {\n            throw new IllegalArgumentException(\"network is null\");\n        }\n        ExportOptions options = createExportOptions(parameters);\n        try {\n            long startTime = System.currentTimeMillis();\n            NetworkXml.write(network, options, dataSource, \"xiidm\");\n            LOGGER.debug(\"XIIDM export done in {} ms\", System.currentTimeMillis() - startTime);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "void export(Network network, Properties parameters, DataSource dataSource)", "full_signature": "@Override public void export(Network network, Properties parameters, DataSource dataSource)", "class_method_signature": "XMLExporter.export(Network network, Properties parameters, DataSource dataSource)", "testcase": false, "constructor": false, "invocations": ["createExportOptions", "currentTimeMillis", "write", "debug", "currentTimeMillis"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}