{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "impl/src/test/java/org/apache/camel/cdi/MainTest.java"}, "test_case": {"identifier": "testMainSupport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMainSupport() throws Exception {\n        Main main = new Main();\n        main.start();\n\n        assertThat(\"Camel contexts are not deployed!\", main.getCamelContextMap(), allOf(hasKey(\"default\"), hasKey(\"foo\")));\n\n        CamelContext context = main.getCamelContextMap().get(\"default\");\n        assertThat(\"Default Camel context is not started\", context.getStatus(), is(equalTo(ServiceStatus.Started)));\n        assertThat(\"Foo Camel context is not started\", main.getCamelContextMap().get(\"foo\").getStatus(), is(equalTo(ServiceStatus.Started)));\n\n        MockEndpoint outbound = context.getEndpoint(\"mock:outbound\", MockEndpoint.class);\n        outbound.expectedMessageCount(1);\n        outbound.expectedBodiesReceived(\"message\");\n\n        ProducerTemplate producer = main.getCamelTemplate();\n        producer.sendBody(\"direct:inbound\", \"message\");\n\n        MockEndpoint.assertIsSatisfied(2L, TimeUnit.SECONDS, outbound);\n\n        main.stop();\n    }", "signature": "void testMainSupport()", "full_signature": "@Test public void testMainSupport()", "class_method_signature": "MainTest.testMainSupport()", "testcase": true, "constructor": false, "invocations": ["start", "assertThat", "getCamelContextMap", "allOf", "hasKey", "hasKey", "get", "getCamelContextMap", "assertThat", "getStatus", "is", "equalTo", "assertThat", "getStatus", "get", "getCamelContextMap", "is", "equalTo", "getEndpoint", "expectedMessageCount", "expectedBodiesReceived", "getCamelTemplate", "sendBody", "assertIsSatisfied", "stop"]}, "focal_class": {"identifier": "Main", "superclass": "extends MainSupport", "interfaces": "", "fields": [{"original_string": "private static Main instance;", "modifier": "private static", "type": "Main", "declarator": "instance", "var_name": "instance"}, {"original_string": "private SeContainer container;", "modifier": "private", "type": "SeContainer", "declarator": "container", "var_name": "container"}], "methods": [{"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Main.main(String... args)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "Main", "signature": "Main getInstance()", "full_signature": "public static Main getInstance()", "class_method_signature": "Main.getInstance()", "testcase": false, "constructor": false}, {"identifier": "findOrCreateCamelTemplate", "parameters": "()", "modifiers": "@Override protected", "return": "ProducerTemplate", "signature": "ProducerTemplate findOrCreateCamelTemplate()", "full_signature": "@Override protected ProducerTemplate findOrCreateCamelTemplate()", "class_method_signature": "Main.findOrCreateCamelTemplate()", "testcase": false, "constructor": false}, {"identifier": "getCamelContextMap", "parameters": "()", "modifiers": "@Override protected", "return": "Map<String, CamelContext>", "signature": "Map<String, CamelContext> getCamelContextMap()", "full_signature": "@Override protected Map<String, CamelContext> getCamelContextMap()", "class_method_signature": "Main.getCamelContextMap()", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "Main.doStart()", "testcase": false, "constructor": false}, {"identifier": "warnIfNoCamelFound", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void warnIfNoCamelFound()", "full_signature": "private void warnIfNoCamelFound()", "class_method_signature": "Main.warnIfNoCamelFound()", "testcase": false, "constructor": false}, {"identifier": "doStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStop()", "full_signature": "@Override protected void doStop()", "class_method_signature": "Main.doStop()", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/apache/camel/cdi/Main.java"}, "focal_method": {"identifier": "getCamelContextMap", "parameters": "()", "modifiers": "@Override protected", "return": "Map<String, CamelContext>", "body": "@Override\n    protected Map<String, CamelContext> getCamelContextMap() {\n        BeanManager manager = container.getBeanManager();\n        return manager.getBeans(CamelContext.class, Any.Literal.INSTANCE).stream()\n            .map(bean -> getReference(manager, CamelContext.class, bean))\n            .collect(toMap(CamelContext::getName, identity()));\n    }", "signature": "Map<String, CamelContext> getCamelContextMap()", "full_signature": "@Override protected Map<String, CamelContext> getCamelContextMap()", "class_method_signature": "Main.getCamelContextMap()", "testcase": false, "constructor": false, "invocations": ["getBeanManager", "collect", "map", "stream", "getBeans", "getReference", "toMap", "identity"]}, "repository": {"repo_id": 23330642, "url": "https://github.com/astefanutti/camel-cdi", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1449, "license": "licensed"}}