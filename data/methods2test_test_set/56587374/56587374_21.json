{"test_class": {"identifier": "SourcesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HashMap<QName,ParameterValue> emptyInputParams;", "modifier": "private static", "type": "HashMap<QName,ParameterValue>", "declarator": "emptyInputParams", "var_name": "emptyInputParams"}, {"original_string": "private static SaxonConfigurationFactory configFactory;", "modifier": "private static", "type": "SaxonConfigurationFactory", "declarator": "configFactory", "var_name": "configFactory"}], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/config/SourcesTest.java"}, "test_case": {"identifier": "testFolderPattern", "parameters": "()", "modifiers": "@Test() public", "return": "void", "body": "@Test()\n    public void testFolderPattern() throws Exception {\n        GauloisPipe piper = new GauloisPipe(configFactory);\n        ConfigUtil cu = new ConfigUtil(configFactory.getConfiguration(), piper.getUriResolver(), \"./src/test/resources/sources-folder.xml\");\n        Config cfg = cu.buildConfig(emptyInputParams);\n        assertEquals(0, cfg.getSources().getFiles().size());\n    }", "signature": "void testFolderPattern()", "full_signature": "@Test() public void testFolderPattern()", "class_method_signature": "SourcesTest.testFolderPattern()", "testcase": true, "constructor": false, "invocations": ["getConfiguration", "getUriResolver", "buildConfig", "assertEquals", "size", "getFiles", "getSources"]}, "focal_class": {"identifier": "Sources", "superclass": "", "interfaces": "implements Verifiable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Sources.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Sources.class)", "var_name": "LOGGER"}, {"original_string": "static final QName QNAME = new QName(Config.NS, \"sources\");", "modifier": "static final", "type": "QName", "declarator": "QNAME = new QName(Config.NS, \"sources\")", "var_name": "QNAME"}, {"original_string": "static final QName ATTR_ORDERBY = new QName(\"orderBy\");", "modifier": "static final", "type": "QName", "declarator": "ATTR_ORDERBY = new QName(\"orderBy\")", "var_name": "ATTR_ORDERBY"}, {"original_string": "static final QName ATTR_SORT = new QName(\"sort\");", "modifier": "static final", "type": "QName", "declarator": "ATTR_SORT = new QName(\"sort\")", "var_name": "ATTR_SORT"}, {"original_string": "private final String orderBy, sort;", "modifier": "private final", "type": "String", "declarator": "orderBy", "var_name": "orderBy"}, {"original_string": "private final List<CfgFile> files;", "modifier": "private final", "type": "List<CfgFile>", "declarator": "files", "var_name": "files"}, {"original_string": "private long maxFileSize = 0l;", "modifier": "private", "type": "long", "declarator": "maxFileSize = 0l", "var_name": "maxFileSize"}, {"original_string": "private Map<File,Integer> hrefCount;", "modifier": "private", "type": "Map<File,Integer>", "declarator": "hrefCount", "var_name": "hrefCount"}, {"original_string": "private Listener listener;", "modifier": "private", "type": "Listener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "Sources", "parameters": "(String orderBy, String sort)", "modifiers": "public", "return": "", "signature": " Sources(String orderBy, String sort)", "full_signature": "public  Sources(String orderBy, String sort)", "class_method_signature": "Sources.Sources(String orderBy, String sort)", "testcase": false, "constructor": true}, {"identifier": "Sources", "parameters": "(String orderBy)", "modifiers": "public", "return": "", "signature": " Sources(String orderBy)", "full_signature": "public  Sources(String orderBy)", "class_method_signature": "Sources.Sources(String orderBy)", "testcase": false, "constructor": true}, {"identifier": "Sources", "parameters": "()", "modifiers": "public", "return": "", "signature": " Sources()", "full_signature": "public  Sources()", "class_method_signature": "Sources.Sources()", "testcase": false, "constructor": true}, {"identifier": "getFiles", "parameters": "()", "modifiers": "public", "return": "List<CfgFile>", "signature": "List<CfgFile> getFiles()", "full_signature": "public List<CfgFile> getFiles()", "class_method_signature": "Sources.getFiles()", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "(final String orderBy, final String sort)", "modifiers": "private static", "return": "Comparator<CfgFile>", "signature": "Comparator<CfgFile> getComparator(final String orderBy, final String sort)", "full_signature": "private static Comparator<CfgFile> getComparator(final String orderBy, final String sort)", "class_method_signature": "Sources.getComparator(final String orderBy, final String sort)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "(final String orderBy, final String sort)", "modifiers": "private", "return": "List<CfgFile>", "signature": "List<CfgFile> getFiles(final String orderBy, final String sort)", "full_signature": "private List<CfgFile> getFiles(final String orderBy, final String sort)", "class_method_signature": "Sources.getFiles(final String orderBy, final String sort)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(CfgFile file)", "modifiers": "public", "return": "void", "signature": "void addFile(CfgFile file)", "full_signature": "public void addFile(CfgFile file)", "class_method_signature": "Sources.addFile(CfgFile file)", "testcase": false, "constructor": false}, {"identifier": "addFiles", "parameters": "(Collection<CfgFile> files)", "modifiers": "public", "return": "void", "signature": "void addFiles(Collection<CfgFile> files)", "full_signature": "public void addFiles(Collection<CfgFile> files)", "class_method_signature": "Sources.addFiles(Collection<CfgFile> files)", "testcase": false, "constructor": false}, {"identifier": "getFileUsage", "parameters": "(File f)", "modifiers": "public", "return": "int", "signature": "int getFileUsage(File f)", "full_signature": "public int getFileUsage(File f)", "class_method_signature": "Sources.getFileUsage(File f)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void verify()", "full_signature": "@Override public void verify()", "class_method_signature": "Sources.verify()", "testcase": false, "constructor": false}, {"identifier": "hasFileOverLimit", "parameters": "(long limit)", "modifiers": "public", "return": "boolean", "signature": "boolean hasFileOverLimit(long limit)", "full_signature": "public boolean hasFileOverLimit(long limit)", "class_method_signature": "Sources.hasFileOverLimit(long limit)", "testcase": false, "constructor": false}, {"identifier": "getFilesOverLimit", "parameters": "(long limit)", "modifiers": "public", "return": "List<CfgFile>", "signature": "List<CfgFile> getFilesOverLimit(long limit)", "full_signature": "public List<CfgFile> getFilesOverLimit(long limit)", "class_method_signature": "Sources.getFilesOverLimit(long limit)", "testcase": false, "constructor": false}, {"identifier": "getFilesUnderLimit", "parameters": "(long limit)", "modifiers": "public", "return": "List<CfgFile>", "signature": "List<CfgFile> getFilesUnderLimit(long limit)", "full_signature": "public List<CfgFile> getFilesUnderLimit(long limit)", "class_method_signature": "Sources.getFilesUnderLimit(long limit)", "testcase": false, "constructor": false}, {"identifier": "getListener", "parameters": "()", "modifiers": "public", "return": "Listener", "signature": "Listener getListener()", "full_signature": "public Listener getListener()", "class_method_signature": "Sources.getListener()", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(Listener listener)", "modifiers": "public", "return": "void", "signature": "void setListener(Listener listener)", "full_signature": "public void setListener(Listener listener)", "class_method_signature": "Sources.setListener(Listener listener)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/config/Sources.java"}, "focal_method": {"identifier": "getFiles", "parameters": "()", "modifiers": "public", "return": "List<CfgFile>", "body": "public List<CfgFile> getFiles() {\n        return getFiles(orderBy, sort);\n    }", "signature": "List<CfgFile> getFiles()", "full_signature": "public List<CfgFile> getFiles()", "class_method_signature": "Sources.getFiles()", "testcase": false, "constructor": false, "invocations": ["getFiles"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}