{"test_class": {"identifier": "PackagePropertiesImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/PackagePropertiesImplTest.java"}, "test_case": {"identifier": "testGetNotSetDependenciesLocations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNotSetDependenciesLocations() throws URISyntaxException {\n        PackageProperties packageProperties = new SimplePackageProperties(Collections.emptyMap());\n        Assert.assertThat(packageProperties.getDependenciesLocations(), Matchers.equalTo(Collections.emptyMap()));\n    }", "signature": "void testGetNotSetDependenciesLocations()", "full_signature": "@Test public void testGetNotSetDependenciesLocations()", "class_method_signature": "PackagePropertiesImplTest.testGetNotSetDependenciesLocations()", "testcase": true, "constructor": false, "invocations": ["emptyMap", "assertThat", "getDependenciesLocations", "equalTo", "emptyMap"]}, "focal_class": {"identifier": "PackagePropertiesImpl", "superclass": "", "interfaces": "implements PackageProperties", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PackagePropertiesImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PackagePropertiesImpl.class)", "var_name": "log"}, {"original_string": "private PackageId id;", "modifier": "private", "type": "PackageId", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "PackageId", "signature": "PackageId getId()", "full_signature": "@Override public PackageId getId()", "class_method_signature": "PackagePropertiesImpl.getId()", "testcase": false, "constructor": false}, {"identifier": "getLastModified", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getLastModified()", "full_signature": "@Override public Calendar getLastModified()", "class_method_signature": "PackagePropertiesImpl.getLastModified()", "testcase": false, "constructor": false}, {"identifier": "getLastModifiedBy", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLastModifiedBy()", "full_signature": "@Override public String getLastModifiedBy()", "class_method_signature": "PackagePropertiesImpl.getLastModifiedBy()", "testcase": false, "constructor": false}, {"identifier": "getCreated", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getCreated()", "full_signature": "@Override public Calendar getCreated()", "class_method_signature": "PackagePropertiesImpl.getCreated()", "testcase": false, "constructor": false}, {"identifier": "getCreatedBy", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCreatedBy()", "full_signature": "@Override public String getCreatedBy()", "class_method_signature": "PackagePropertiesImpl.getCreatedBy()", "testcase": false, "constructor": false}, {"identifier": "getLastWrapped", "parameters": "()", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getLastWrapped()", "full_signature": "@Override public Calendar getLastWrapped()", "class_method_signature": "PackagePropertiesImpl.getLastWrapped()", "testcase": false, "constructor": false}, {"identifier": "getLastWrappedBy", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLastWrappedBy()", "full_signature": "@Override public String getLastWrappedBy()", "class_method_signature": "PackagePropertiesImpl.getLastWrappedBy()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PackagePropertiesImpl.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getACHandling", "parameters": "()", "modifiers": "@Override public", "return": "AccessControlHandling", "signature": "AccessControlHandling getACHandling()", "full_signature": "@Override public AccessControlHandling getACHandling()", "class_method_signature": "PackagePropertiesImpl.getACHandling()", "testcase": false, "constructor": false}, {"identifier": "getSubPackageHandling", "parameters": "()", "modifiers": "@Override public", "return": "SubPackageHandling", "signature": "SubPackageHandling getSubPackageHandling()", "full_signature": "@Override public SubPackageHandling getSubPackageHandling()", "class_method_signature": "PackagePropertiesImpl.getSubPackageHandling()", "testcase": false, "constructor": false}, {"identifier": "requiresRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresRoot()", "full_signature": "@Override public boolean requiresRoot()", "class_method_signature": "PackagePropertiesImpl.requiresRoot()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Dependency[]", "signature": "Dependency[] getDependencies()", "full_signature": "@Override public Dependency[] getDependencies()", "class_method_signature": "PackagePropertiesImpl.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getDependenciesLocations", "parameters": "()", "modifiers": "@Override public", "return": "Map<PackageId, URI>", "signature": "Map<PackageId, URI> getDependenciesLocations()", "full_signature": "@Override public Map<PackageId, URI> getDependenciesLocations()", "class_method_signature": "PackagePropertiesImpl.getDependenciesLocations()", "testcase": false, "constructor": false}, {"identifier": "getDateProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Calendar", "signature": "Calendar getDateProperty(String name)", "full_signature": "@Override public Calendar getDateProperty(String name)", "class_method_signature": "PackagePropertiesImpl.getDateProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getProperty(String name)", "full_signature": "@Override public String getProperty(String name)", "class_method_signature": "PackagePropertiesImpl.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getPackageType", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "PackageType", "signature": "PackageType getPackageType()", "full_signature": "@Nullable @Override public PackageType getPackageType()", "class_method_signature": "PackagePropertiesImpl.getPackageType()", "testcase": false, "constructor": false}, {"identifier": "getExternalHooks", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getExternalHooks()", "full_signature": "@Override public Map<String, String> getExternalHooks()", "class_method_signature": "PackagePropertiesImpl.getExternalHooks()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesMap", "parameters": "()", "modifiers": "protected abstract", "return": "Properties", "signature": "Properties getPropertiesMap()", "full_signature": "protected abstract Properties getPropertiesMap()", "class_method_signature": "PackagePropertiesImpl.getPropertiesMap()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/PackagePropertiesImpl.java"}, "focal_method": {"identifier": "getDependenciesLocations", "parameters": "()", "modifiers": "@Override public", "return": "Map<PackageId, URI>", "body": "@Override\n    public Map<PackageId, URI> getDependenciesLocations() {\n        String deps = getProperty(NAME_DEPENDENCIES_LOCATIONS);\n        if (deps == null || deps.length() == 0) {\n            return Collections.emptyMap();\n        } else {\n            // parse item in the format <pid>=<uri>, items are comma separated\n            Map<PackageId, URI> dependenciesLocations = new HashMap<>();\n            for (String item : deps.split(\",\")) {\n                String[] parts = item.split(\"=\", 2);\n                if (parts.length < 2) {\n                    log.error(\"Invalid dependencies locations string, item \" +item + \" does not contain a '='\");\n                } else {\n                    PackageId packageId = PackageId.fromString(parts[0]);\n                    if (packageId == null) {\n                        log.error(\"Invalid package id given in item \" + item);\n                        continue;\n                    }\n                    try {\n                        URI uri = new URI(parts[1]);\n                        dependenciesLocations.put(packageId, uri);\n                    } catch (URISyntaxException e) {\n                        log.error(\"Invalid uri given in item \" + item);\n                    }\n                    \n                }\n            }\n            return dependenciesLocations;\n        }\n    }", "signature": "Map<PackageId, URI> getDependenciesLocations()", "full_signature": "@Override public Map<PackageId, URI> getDependenciesLocations()", "class_method_signature": "PackagePropertiesImpl.getDependenciesLocations()", "testcase": false, "constructor": false, "invocations": ["getProperty", "length", "emptyMap", "split", "split", "error", "fromString", "error", "put", "error"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}