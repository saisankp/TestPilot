{"test_class": {"identifier": "GeoTiffReaderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffReaderTest.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffReaderTest.class.toString())", "var_name": "LOGGER"}], "file": "modules/unsupported/geotiff_new/src/test/java/org/geotools/gce/geotiff/GeoTiffReaderTest.java"}, "test_case": {"identifier": "testExternalOverviews", "parameters": "()", "modifiers": "@Test // @Ignore public", "return": "void", "body": "@Test\n//    @Ignore\n    public void testExternalOverviews() throws Exception {\n        final File file = TestData.file(GeoTiffReaderTest.class, \"ovr.tif\");\n        assertNotNull(file);\n        assertEquals(true, file.exists());\n        GeoTiffReaderTester reader = new GeoTiffReaderTester(file);\n        \n        final int nOvrs = reader.getNumOverviews();\n        LOGGER.info(\"Number of external levels: \" + nOvrs);\n        assertEquals(4, nOvrs);\n        double[][] overviewResolutions = reader.getOverviewResolutions();\n        assertEquals(overviewResolutions.length, 4);\n\n        final ParameterValue<GridGeometry2D> gg = AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();\n        final GeneralEnvelope envelope = reader.getOriginalEnvelope();\n        final Dimension dim = new Dimension();\n        dim.setSize(reader.getOriginalGridRange().getSpan(0) / 2.0, reader.getOriginalGridRange()\n                .getSpan(1) / 2.0);\n        Rectangle rasterArea = ((GridEnvelope2D) reader.getOriginalGridRange());\n        rasterArea.setSize(dim);\n        GridEnvelope2D range = new GridEnvelope2D(rasterArea);\n        gg.setValue(new GridGeometry2D(range, envelope));\n\n        GridCoverage2D coverage = reader.read(new GeneralParameterValue[] { gg });\n        RenderedImage image = coverage.getRenderedImage();\n        assertEquals(image.getWidth(), 180);\n        assertEquals(image.getHeight(), 90);\n        \n        dim.setSize(reader.getOriginalGridRange().getSpan(0) / 4.0, reader.getOriginalGridRange()\n                .getSpan(1) / 4.0);\n        rasterArea = ((GridEnvelope2D) reader.getOriginalGridRange());\n        rasterArea.setSize(dim);\n        range = new GridEnvelope2D(rasterArea);\n        gg.setValue(new GridGeometry2D(range, envelope));\n\n        coverage = reader.read(new GeneralParameterValue[] { gg });\n        image = coverage.getRenderedImage();\n        assertEquals(image.getWidth(), 90);\n        assertEquals(image.getHeight(), 45);\n\n        final double delta = 0.00001;\n        assertEquals(overviewResolutions[0][0], 2.0, delta);\n        assertEquals(overviewResolutions[0][1], 2.0, delta);\n\n        assertEquals(overviewResolutions[1][0], 4.0, delta);\n        assertEquals(overviewResolutions[1][1], 4.0, delta);\n\n        assertEquals(overviewResolutions[2][0], 8, delta);\n        assertEquals(overviewResolutions[2][1], 7.826086956, delta);\n\n        assertEquals(overviewResolutions[3][0], 15.6521739, delta);\n        assertEquals(overviewResolutions[3][1], 15, delta);\n    }", "signature": "void testExternalOverviews()", "full_signature": "@Test // @Ignore public void testExternalOverviews()", "class_method_signature": "GeoTiffReaderTest.testExternalOverviews()", "testcase": true, "constructor": false, "invocations": ["file", "assertNotNull", "assertEquals", "exists", "getNumOverviews", "info", "assertEquals", "getOverviewResolutions", "assertEquals", "createValue", "getOriginalEnvelope", "setSize", "getSpan", "getOriginalGridRange", "getSpan", "getOriginalGridRange", "getOriginalGridRange", "setSize", "setValue", "read", "getRenderedImage", "assertEquals", "getWidth", "assertEquals", "getHeight", "setSize", "getSpan", "getOriginalGridRange", "getSpan", "getOriginalGridRange", "getOriginalGridRange", "setSize", "setValue", "read", "getRenderedImage", "assertEquals", "getWidth", "assertEquals", "getHeight", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "GeoTiffReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "implements\n\t\tGridCoverageReader", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffReader.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffReader.class.toString())", "var_name": "LOGGER"}, {"original_string": "private double noData = Double.NaN;", "modifier": "private", "type": "double", "declarator": "noData = Double.NaN", "var_name": "noData"}, {"original_string": "private RasterManager rasterManager;", "modifier": "private", "type": "RasterManager", "declarator": "rasterManager", "var_name": "rasterManager"}, {"original_string": "URL sourceURL;", "modifier": "", "type": "URL", "declarator": "sourceURL", "var_name": "sourceURL"}, {"original_string": "RasterLayout[] overViewLayouts;", "modifier": "", "type": "RasterLayout[]", "declarator": "overViewLayouts", "var_name": "overViewLayouts"}, {"original_string": "RasterLayout hrLayout;", "modifier": "", "type": "RasterLayout", "declarator": "hrLayout", "var_name": "hrLayout"}, {"original_string": "ImageTypeSpecifier baseImageType;", "modifier": "", "type": "ImageTypeSpecifier", "declarator": "baseImageType", "var_name": "baseImageType"}, {"original_string": "File ovrSource;", "modifier": "", "type": "File", "declarator": "ovrSource", "var_name": "ovrSource"}, {"original_string": "ImageInputStreamSpi ovrInStreamSPI = null;", "modifier": "", "type": "ImageInputStreamSpi", "declarator": "ovrInStreamSPI = null", "var_name": "ovrInStreamSPI"}, {"original_string": "int extOvrImgChoice = -1;", "modifier": "", "type": "int", "declarator": "extOvrImgChoice = -1", "var_name": "extOvrImgChoice"}], "methods": [{"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "GeoTiffReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "GeoTiffReader.dispose()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageFactory", "parameters": "()", "modifiers": "", "return": "GridCoverageFactory", "signature": "GridCoverageFactory getGridCoverageFactory()", "full_signature": " GridCoverageFactory getGridCoverageFactory()", "class_method_signature": "GeoTiffReader.getGridCoverageFactory()", "testcase": false, "constructor": false}, {"identifier": "GeoTiffReader", "parameters": "(Object input)", "modifiers": "public", "return": "", "signature": " GeoTiffReader(Object input)", "full_signature": "public  GeoTiffReader(Object input)", "class_method_signature": "GeoTiffReader.GeoTiffReader(Object input)", "testcase": false, "constructor": true}, {"identifier": "GeoTiffReader", "parameters": "(Object input, Hints uHints)", "modifiers": "public", "return": "", "signature": " GeoTiffReader(Object input, Hints uHints)", "full_signature": "public  GeoTiffReader(Object input, Hints uHints)", "class_method_signature": "GeoTiffReader.GeoTiffReader(Object input, Hints uHints)", "testcase": false, "constructor": true}, {"identifier": "checkForExternalOverviews", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkForExternalOverviews()", "full_signature": "private void checkForExternalOverviews()", "class_method_signature": "GeoTiffReader.checkForExternalOverviews()", "testcase": false, "constructor": false}, {"identifier": "getHRInfo", "parameters": "(Hints hints)", "modifiers": "private", "return": "void", "signature": "void getHRInfo(Hints hints)", "full_signature": "private void getHRInfo(Hints hints)", "class_method_signature": "GeoTiffReader.getHRInfo(Hints hints)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "GeoTiffReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "@Override public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "GeoTiffReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "createCoverage", "parameters": "(PlanarImage image, MathTransform raster2Model)", "modifiers": "protected final", "return": "GridCoverage2D", "signature": "GridCoverage2D createCoverage(PlanarImage image, MathTransform raster2Model)", "full_signature": "protected final GridCoverage2D createCoverage(PlanarImage image, MathTransform raster2Model)", "class_method_signature": "GeoTiffReader.createCoverage(PlanarImage image, MathTransform raster2Model)", "testcase": false, "constructor": false}, {"identifier": "getHints", "parameters": "()", "modifiers": "", "return": "Hints", "signature": "Hints getHints()", "full_signature": " Hints getHints()", "class_method_signature": "GeoTiffReader.getHints()", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getHighestRes()", "full_signature": " double[] getHighestRes()", "class_method_signature": "GeoTiffReader.getHighestRes()", "testcase": false, "constructor": false}, {"identifier": "getOverviewsResolution", "parameters": "()", "modifiers": "", "return": "double[][]", "signature": "double[][] getOverviewsResolution()", "full_signature": " double[][] getOverviewsResolution()", "class_method_signature": "GeoTiffReader.getOverviewsResolution()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfOverviews", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumberOfOverviews()", "full_signature": " int getNumberOfOverviews()", "class_method_signature": "GeoTiffReader.getNumberOfOverviews()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getName()", "full_signature": " String getName()", "class_method_signature": "GeoTiffReader.getName()", "testcase": false, "constructor": false}], "file": "modules/unsupported/geotiff_new/src/main/java/org/geotools/gce/geotiff/GeoTiffReader.java"}, "focal_method": {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "@Override public", "return": "GridCoverage2D", "body": "@Override\n    public GridCoverage2D read(GeneralParameterValue[] params)\n            throws IOException {\n\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.fine(\"Reading image from \" + sourceURL.toString() + \"\\n\"\n                    + \"Highest res \" + highestRes[0] + \" \" + highestRes[1]);\n        }\n\n        final Collection<GridCoverage2D> response = rasterManager.read(params);\n        if (response.isEmpty()) {\n            if (LOGGER.isLoggable(Level.FINE)){\n                LOGGER.fine(\"The response is empty. ==> returning a null GridCoverage\");\n            }\n            return null;\n        } else {\n            return response.iterator().next();\n        }\n    }", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "GeoTiffReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false, "invocations": ["isLoggable", "fine", "toString", "read", "isEmpty", "isLoggable", "fine", "next", "iterator"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}