{"test_class": {"identifier": "FilesTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "core/src/test/java/com/chillenious/common/util/FilesTest.java"}, "test_case": {"identifier": "remove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void remove() throws IOException {\n        assertFalse(\"'null' files are not deleted.\", Files.remove(null));\n\n        assertFalse(\"Non existing files are not deleted.\", Files.remove(new File(\n                \"/somethingThatDoesntExistsOnMostMachines-111111111111111111111111111111\")));\n\n        File file = File.createTempFile(\"wicket-test--\", \".tmp\");\n        assertTrue(\"The just created file should exist!\", file.isFile());\n\n        boolean removed = Files.remove(file);\n        assertFalse(\"The just removed file should not exist!\", file.exists());\n        assertTrue(\"Files.remove(file) should remove the file\", removed);\n\n        // try to remove non-existing file\n        removed = Files.remove(file);\n        assertFalse(\"The just removed file should not exist!\", file.exists());\n        assertFalse(\"Files.remove(file) should not remove the file\", removed);\n\n        // try to remove a folder\n        File folder = new File(System.getProperty(\"java.io.tmpdir\"), \"wicket-test-folder\");\n        Files.mkdirs(folder);\n        assertTrue(folder.isDirectory());\n        assertFalse(\"Should not be able to delete a folder, even empty one.\", Files.remove(folder));\n        assertTrue(\"Should not be able to delete a folder.\", Files.removeFolder(folder));\n    }", "signature": "void remove()", "full_signature": "@Test public void remove()", "class_method_signature": "FilesTest.remove()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "remove", "assertFalse", "remove", "createTempFile", "assertTrue", "isFile", "remove", "assertFalse", "exists", "assertTrue", "remove", "assertFalse", "exists", "assertFalse", "getProperty", "mkdirs", "assertTrue", "isDirectory", "assertFalse", "remove", "assertTrue", "removeFolder"]}, "focal_class": {"identifier": "Files", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Files.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Files.class)", "var_name": "logger"}, {"original_string": "private static final String URL_FILE_PREFIX = \"file:\";", "modifier": "private static final", "type": "String", "declarator": "URL_FILE_PREFIX = \"file:\"", "var_name": "URL_FILE_PREFIX"}, {"original_string": "private static final String URL_LOCAL_JAR_FILE_PREFIX = \"jar:file:\";", "modifier": "private static final", "type": "String", "declarator": "URL_LOCAL_JAR_FILE_PREFIX = \"jar:file:\"", "var_name": "URL_LOCAL_JAR_FILE_PREFIX"}, {"original_string": "private static final String FILENAME_FORBIDDEN_CHARACTERS = \"\\\"*/:<>?\\\\|,\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_FORBIDDEN_CHARACTERS = \"\\\"*/:<>?\\\\|,\"", "var_name": "FILENAME_FORBIDDEN_CHARACTERS"}], "methods": [{"identifier": "Files", "parameters": "()", "modifiers": "private", "return": "", "signature": " Files()", "full_signature": "private  Files()", "class_method_signature": "Files.Files()", "testcase": false, "constructor": true}, {"identifier": "basePath", "parameters": "(final String path, final String extension)", "modifiers": "public static", "return": "String", "signature": "String basePath(final String path, final String extension)", "full_signature": "public static String basePath(final String path, final String extension)", "class_method_signature": "Files.basePath(final String path, final String extension)", "testcase": false, "constructor": false}, {"identifier": "extension", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String extension(final String path)", "full_signature": "public static String extension(final String path)", "class_method_signature": "Files.extension(final String path)", "testcase": false, "constructor": false}, {"identifier": "filename", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String filename(final String path)", "full_signature": "public static String filename(final String path)", "class_method_signature": "Files.filename(final String path)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean remove(final File file)", "full_signature": "public static boolean remove(final File file)", "class_method_signature": "Files.remove(final File file)", "testcase": false, "constructor": false}, {"identifier": "removeFolder", "parameters": "(final File folder)", "modifiers": "public static final", "return": "boolean", "signature": "boolean removeFolder(final File folder)", "full_signature": "public static final boolean removeFolder(final File folder)", "class_method_signature": "Files.removeFolder(final File folder)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(final File file, final InputStream input)", "modifiers": "public static final", "return": "int", "signature": "int writeTo(final File file, final InputStream input)", "full_signature": "public static final int writeTo(final File file, final InputStream input)", "class_method_signature": "Files.writeTo(final File file, final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(final File file, final InputStream input,\n                                    final int bufSize)", "modifiers": "public static final", "return": "int", "signature": "int writeTo(final File file, final InputStream input,\n                                    final int bufSize)", "full_signature": "public static final int writeTo(final File file, final InputStream input,\n                                    final int bufSize)", "class_method_signature": "Files.writeTo(final File file, final InputStream input,\n                                    final int bufSize)", "testcase": false, "constructor": false}, {"identifier": "cleanupFilename", "parameters": "(final String filename)", "modifiers": "public static final", "return": "String", "signature": "String cleanupFilename(final String filename)", "full_signature": "public static final String cleanupFilename(final String filename)", "class_method_signature": "Files.cleanupFilename(final String filename)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileFromUrl", "parameters": "(URL url)", "modifiers": "public static", "return": "File", "signature": "File getLocalFileFromUrl(URL url)", "full_signature": "public static File getLocalFileFromUrl(URL url)", "class_method_signature": "Files.getLocalFileFromUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileFromUrl", "parameters": "(String url)", "modifiers": "public static", "return": "File", "signature": "File getLocalFileFromUrl(String url)", "full_signature": "public static File getLocalFileFromUrl(String url)", "class_method_signature": "Files.getLocalFileFromUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "getLastModified", "parameters": "(File file)", "modifiers": "public static", "return": "Time", "signature": "Time getLastModified(File file)", "full_signature": "public static Time getLastModified(File file)", "class_method_signature": "Files.getLastModified(File file)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(File folder)", "modifiers": "public static", "return": "boolean", "signature": "boolean mkdirs(File folder)", "full_signature": "public static boolean mkdirs(File folder)", "class_method_signature": "Files.mkdirs(File folder)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/chillenious/common/util/Files.java"}, "focal_method": {"identifier": "remove", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "body": "public static boolean remove(final File file) {\n        if (file != null && file.isFile()) {\n            for (int j = 0; j < 5; ++j) {\n                for (int i = 0; i < 10; ++i) {\n                    if (file.delete()) {\n                        return true;\n                    }\n\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException ix) {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }\n\n        return false;\n    }", "signature": "boolean remove(final File file)", "full_signature": "public static boolean remove(final File file)", "class_method_signature": "Files.remove(final File file)", "testcase": false, "constructor": false, "invocations": ["isFile", "delete", "sleep", "interrupt", "currentThread"]}, "repository": {"repo_id": 27147147, "url": "https://github.com/chillenious/commons", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 248, "license": "licensed"}}