{"test_class": {"identifier": "SpringRabbitTracingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Tracing tracing = Tracing.newBuilder().build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder().build()", "var_name": "tracing"}, {"original_string": "SpringRabbitTracing rabbitTracing = SpringRabbitTracing.create(tracing);", "modifier": "", "type": "SpringRabbitTracing", "declarator": "rabbitTracing = SpringRabbitTracing.create(tracing)", "var_name": "rabbitTracing"}], "file": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/SpringRabbitTracingTest.java"}, "test_case": {"identifier": "decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent() {\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n    factory.setAdviceChain(new CacheInterceptor());\n\n    // the order of advices is important for the downstream interceptor to see the tracing context\n    assertThat(rabbitTracing.decorateSimpleRabbitListenerContainerFactory(factory).getAdviceChain())\n      .hasSize(2)\n      .matches(adviceArray -> adviceArray[0] instanceof TracingRabbitListenerAdvice);\n  }", "signature": "void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent()", "full_signature": "@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent()", "class_method_signature": "SpringRabbitTracingTest.decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent()", "testcase": true, "constructor": false, "invocations": ["setAdviceChain", "matches", "hasSize", "assertThat", "getAdviceChain", "decorateSimpleRabbitListenerContainerFactory"]}, "focal_class": {"identifier": "SpringRabbitTracing", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String\n    RABBIT_EXCHANGE = \"rabbit.exchange\",\n    RABBIT_ROUTING_KEY = \"rabbit.routing_key\",\n    RABBIT_QUEUE = \"rabbit.queue\";", "modifier": "static final", "type": "String", "declarator": "RABBIT_EXCHANGE = \"rabbit.exchange\"", "var_name": "RABBIT_EXCHANGE"}, {"original_string": "final Tracing tracing;", "modifier": "final", "type": "Tracing", "declarator": "tracing", "var_name": "tracing"}, {"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "final Extractor<MessageProducerRequest> producerExtractor;", "modifier": "final", "type": "Extractor<MessageProducerRequest>", "declarator": "producerExtractor", "var_name": "producerExtractor"}, {"original_string": "final Extractor<MessageConsumerRequest> consumerExtractor;", "modifier": "final", "type": "Extractor<MessageConsumerRequest>", "declarator": "consumerExtractor", "var_name": "consumerExtractor"}, {"original_string": "final Injector<MessageProducerRequest> producerInjector;", "modifier": "final", "type": "Injector<MessageProducerRequest>", "declarator": "producerInjector", "var_name": "producerInjector"}, {"original_string": "final Injector<MessageConsumerRequest> consumerInjector;", "modifier": "final", "type": "Injector<MessageConsumerRequest>", "declarator": "consumerInjector", "var_name": "consumerInjector"}, {"original_string": "final String[] traceIdHeaders;", "modifier": "final", "type": "String[]", "declarator": "traceIdHeaders", "var_name": "traceIdHeaders"}, {"original_string": "final SamplerFunction<MessagingRequest> producerSampler, consumerSampler;", "modifier": "final", "type": "SamplerFunction<MessagingRequest>", "declarator": "producerSampler", "var_name": "producerSampler"}, {"original_string": "final String remoteServiceName;", "modifier": "final", "type": "String", "declarator": "remoteServiceName", "var_name": "remoteServiceName"}, {"original_string": "final Field beforePublishPostProcessorsField;", "modifier": "final", "type": "Field", "declarator": "beforePublishPostProcessorsField", "var_name": "beforePublishPostProcessorsField"}], "methods": [{"identifier": "create", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "SpringRabbitTracing", "signature": "SpringRabbitTracing create(Tracing tracing)", "full_signature": "public static SpringRabbitTracing create(Tracing tracing)", "class_method_signature": "SpringRabbitTracing.create(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "SpringRabbitTracing", "signature": "SpringRabbitTracing create(MessagingTracing messagingTracing)", "full_signature": "public static SpringRabbitTracing create(MessagingTracing messagingTracing)", "class_method_signature": "SpringRabbitTracing.create(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(Tracing tracing)", "full_signature": "public static Builder newBuilder(Tracing tracing)", "class_method_signature": "SpringRabbitTracing.newBuilder(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(MessagingTracing messagingTracing)", "full_signature": "public static Builder newBuilder(MessagingTracing messagingTracing)", "class_method_signature": "SpringRabbitTracing.newBuilder(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "SpringRabbitTracing", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " SpringRabbitTracing(Builder builder)", "full_signature": "  SpringRabbitTracing(Builder builder)", "class_method_signature": "SpringRabbitTracing.SpringRabbitTracing(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "newRabbitTemplate", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "public", "return": "RabbitTemplate", "signature": "RabbitTemplate newRabbitTemplate(ConnectionFactory connectionFactory)", "full_signature": "public RabbitTemplate newRabbitTemplate(ConnectionFactory connectionFactory)", "class_method_signature": "SpringRabbitTracing.newRabbitTemplate(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}, {"identifier": "decorateRabbitTemplate", "parameters": "(RabbitTemplate rabbitTemplate)", "modifiers": "public", "return": "RabbitTemplate", "signature": "RabbitTemplate decorateRabbitTemplate(RabbitTemplate rabbitTemplate)", "full_signature": "public RabbitTemplate decorateRabbitTemplate(RabbitTemplate rabbitTemplate)", "class_method_signature": "SpringRabbitTracing.decorateRabbitTemplate(RabbitTemplate rabbitTemplate)", "testcase": false, "constructor": false}, {"identifier": "newSimpleRabbitListenerContainerFactory", "parameters": "(\n    ConnectionFactory connectionFactory\n  )", "modifiers": "public", "return": "SimpleRabbitListenerContainerFactory", "signature": "SimpleRabbitListenerContainerFactory newSimpleRabbitListenerContainerFactory(\n    ConnectionFactory connectionFactory\n  )", "full_signature": "public SimpleRabbitListenerContainerFactory newSimpleRabbitListenerContainerFactory(\n    ConnectionFactory connectionFactory\n  )", "class_method_signature": "SpringRabbitTracing.newSimpleRabbitListenerContainerFactory(\n    ConnectionFactory connectionFactory\n  )", "testcase": false, "constructor": false}, {"identifier": "decorateSimpleRabbitListenerContainerFactory", "parameters": "(\n    SimpleRabbitListenerContainerFactory factory\n  )", "modifiers": "public", "return": "SimpleRabbitListenerContainerFactory", "signature": "SimpleRabbitListenerContainerFactory decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "full_signature": "public SimpleRabbitListenerContainerFactory decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "class_method_signature": "SpringRabbitTracing.decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "testcase": false, "constructor": false}, {"identifier": "extractAndClearTraceIdHeaders", "parameters": "(\n    Extractor<R> extractor, R request, Message message\n  )", "modifiers": "", "return": "TraceContextOrSamplingFlags", "signature": "TraceContextOrSamplingFlags extractAndClearTraceIdHeaders(\n    Extractor<R> extractor, R request, Message message\n  )", "full_signature": " TraceContextOrSamplingFlags extractAndClearTraceIdHeaders(\n    Extractor<R> extractor, R request, Message message\n  )", "class_method_signature": "SpringRabbitTracing.extractAndClearTraceIdHeaders(\n    Extractor<R> extractor, R request, Message message\n  )", "testcase": false, "constructor": false}, {"identifier": "nextMessagingSpan", "parameters": "(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "modifiers": "", "return": "Span", "signature": "Span nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "full_signature": " Span nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "class_method_signature": "SpringRabbitTracing.nextMessagingSpan(\n    SamplerFunction<MessagingRequest> sampler,\n    MessagingRequest request,\n    TraceContextOrSamplingFlags extracted\n  )", "testcase": false, "constructor": false}, {"identifier": "clearTraceIdHeaders", "parameters": "(Map<String, Object> headers)", "modifiers": "", "return": "void", "signature": "void clearTraceIdHeaders(Map<String, Object> headers)", "full_signature": " void clearTraceIdHeaders(Map<String, Object> headers)", "class_method_signature": "SpringRabbitTracing.clearTraceIdHeaders(Map<String, Object> headers)", "testcase": false, "constructor": false}], "file": "instrumentation/spring-rabbit/src/main/java/brave/spring/rabbit/SpringRabbitTracing.java"}, "focal_method": {"identifier": "decorateSimpleRabbitListenerContainerFactory", "parameters": "(\n    SimpleRabbitListenerContainerFactory factory\n  )", "modifiers": "public", "return": "SimpleRabbitListenerContainerFactory", "body": "public SimpleRabbitListenerContainerFactory decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  ) {\n    Advice[] chain = factory.getAdviceChain();\n\n    TracingRabbitListenerAdvice tracingAdvice = new TracingRabbitListenerAdvice(this);\n    // If there are no existing advice, return only the tracing one\n    if (chain == null) {\n      factory.setAdviceChain(tracingAdvice);\n      return factory;\n    }\n\n    // If there is an existing tracing advice return\n    for (Advice advice : chain) {\n      if (advice instanceof TracingRabbitListenerAdvice) {\n        return factory;\n      }\n    }\n\n    // Otherwise, add ours and return\n    Advice[] newChain = new Advice[chain.length + 1];\n    newChain[0] = tracingAdvice;\n    System.arraycopy(chain, 0, newChain, 1, chain.length);\n    factory.setAdviceChain(newChain);\n    return factory;\n  }", "signature": "SimpleRabbitListenerContainerFactory decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "full_signature": "public SimpleRabbitListenerContainerFactory decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "class_method_signature": "SpringRabbitTracing.decorateSimpleRabbitListenerContainerFactory(\n    SimpleRabbitListenerContainerFactory factory\n  )", "testcase": false, "constructor": false, "invocations": ["getAdviceChain", "setAdviceChain", "arraycopy", "setAdviceChain"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}