{"test_class": {"identifier": "ZeroKnowledgeProverTest", "superclass": "", "interfaces": "", "fields": [], "file": "pross-common/src/test/java/com/ibm/pross/common/util/crypto/zkp/splitting/ZeroKnowledgeProverTest.java"}, "test_case": {"identifier": "testCreateProof", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateProof() {\n\t\tfail(\"Not yet implemented\");\n\t}", "signature": "void testCreateProof()", "full_signature": "@Test public void testCreateProof()", "class_method_signature": "ZeroKnowledgeProverTest.testCreateProof()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "ZeroKnowledgeProver", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final EcCurve curve = CommonConfiguration.CURVE;", "modifier": "public static final", "type": "EcCurve", "declarator": "curve = CommonConfiguration.CURVE", "var_name": "curve"}, {"original_string": "public static final EcPoint g = CommonConfiguration.g;", "modifier": "public static final", "type": "EcPoint", "declarator": "g = CommonConfiguration.g", "var_name": "g"}, {"original_string": "public static final EcPoint h = CommonConfiguration.h;", "modifier": "public static final", "type": "EcPoint", "declarator": "h = CommonConfiguration.h", "var_name": "h"}, {"original_string": "public static final String HASH_ALGORITHM = CommonConfiguration.HASH_ALGORITHM;", "modifier": "public static final", "type": "String", "declarator": "HASH_ALGORITHM = CommonConfiguration.HASH_ALGORITHM", "var_name": "HASH_ALGORITHM"}], "methods": [{"identifier": "createProof", "parameters": "(final BigInteger a0, final BigInteger b0)", "modifiers": "public static", "return": "ZeroKnowledgeProof", "signature": "ZeroKnowledgeProof createProof(final BigInteger a0, final BigInteger b0)", "full_signature": "public static ZeroKnowledgeProof createProof(final BigInteger a0, final BigInteger b0)", "class_method_signature": "ZeroKnowledgeProver.createProof(final BigInteger a0, final BigInteger b0)", "testcase": false, "constructor": false}, {"identifier": "verifyProof", "parameters": "(final EcPoint C0, final ZeroKnowledgeProof proof)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyProof(final EcPoint C0, final ZeroKnowledgeProof proof)", "full_signature": "public static boolean verifyProof(final EcPoint C0, final ZeroKnowledgeProof proof)", "class_method_signature": "ZeroKnowledgeProver.verifyProof(final EcPoint C0, final ZeroKnowledgeProof proof)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/crypto/zkp/splitting/ZeroKnowledgeProver.java"}, "focal_method": {"identifier": "createProof", "parameters": "(final BigInteger a0, final BigInteger b0)", "modifiers": "public static", "return": "ZeroKnowledgeProof", "body": "public static ZeroKnowledgeProof createProof(final BigInteger a0, final BigInteger b0)\n\t{\n\t\t// Calculate A0 and B0\n\t\tfinal EcPoint A0 = curve.multiply(g, a0);\n\t\tfinal EcPoint B0 = curve.multiply(h, b0);\n\t\t\n\t\t// Chose random points\n\t\tfinal BigInteger r1 = RandomNumberGenerator.generateRandomInteger(curve.getR());\n\t\tfinal BigInteger r2 = RandomNumberGenerator.generateRandomInteger(curve.getR());\n\t\t\n\t\t// Compute powers\n\t\tfinal EcPoint p1 = curve.multiply(g, r1);\n\t\tfinal EcPoint p2 = curve.multiply(h, r2);\n\t\tfinal EcPoint sum = curve.addPoints(p1, p2);\n\t\t\n\t\t// Compute c\n\t\tfinal byte[] input = Parse.concatenate(g, h, sum);\n\t\tfinal MessageDigest digest;\n\t\ttry {\n\t\t\tdigest = MessageDigest.getInstance(HASH_ALGORITHM);\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tthrow new RuntimeException(\"Should not happen\");\n\t\t}\n\t\tfinal BigInteger c = new BigInteger(1, digest.digest(input)).mod(curve.getR());\n\t\t\n\t\t// Compute sa and sb\n\t\tfinal BigInteger sa = (r1.subtract(c.multiply(a0))).mod(curve.getR());\n\t\tfinal BigInteger sb = (r2.subtract(c.multiply(b0))).mod(curve.getR());\n\t\t\n\t\treturn new ZeroKnowledgeProof(A0, B0, c, sa, sb);\n\t}", "signature": "ZeroKnowledgeProof createProof(final BigInteger a0, final BigInteger b0)", "full_signature": "public static ZeroKnowledgeProof createProof(final BigInteger a0, final BigInteger b0)", "class_method_signature": "ZeroKnowledgeProver.createProof(final BigInteger a0, final BigInteger b0)", "testcase": false, "constructor": false, "invocations": ["multiply", "multiply", "generateRandomInteger", "getR", "generateRandomInteger", "getR", "multiply", "multiply", "addPoints", "concatenate", "getInstance", "mod", "digest", "getR", "mod", "subtract", "multiply", "getR", "mod", "subtract", "multiply", "getR"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}