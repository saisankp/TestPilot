{"test_class": {"identifier": "SafeIterableMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "app-toolkit/common/src/test/java/android/arch/core/internal/SafeIterableMapTest.java"}, "test_case": {"identifier": "testRemoveMiddle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveMiddle() {\n        SafeIterableMap<Integer, Integer> map = from(1, 2, 3, 4).to(10, 20, 30, 40);\n        assertThat(map.remove(2), is(20));\n        assertThat(map.remove(3), is(30));\n        assertThat(map, is(from(1, 4).to(10, 40)));\n    }", "signature": "void testRemoveMiddle()", "full_signature": "@Test public void testRemoveMiddle()", "class_method_signature": "SafeIterableMapTest.testRemoveMiddle()", "testcase": true, "constructor": false, "invocations": ["to", "from", "assertThat", "remove", "is", "assertThat", "remove", "is", "assertThat", "is", "to", "from"]}, "focal_class": {"identifier": "SafeIterableMap", "superclass": "", "interfaces": "implements Iterable<Map.Entry<K, V>>", "fields": [{"original_string": "private Entry<K, V> mStart;", "modifier": "private", "type": "Entry<K, V>", "declarator": "mStart", "var_name": "mStart"}, {"original_string": "private Entry<K, V> mEnd;", "modifier": "private", "type": "Entry<K, V>", "declarator": "mEnd", "var_name": "mEnd"}, {"original_string": "private WeakHashMap<SupportRemove<K, V>, Boolean> mIterators = new WeakHashMap<>();", "modifier": "private", "type": "WeakHashMap<SupportRemove<K, V>, Boolean>", "declarator": "mIterators = new WeakHashMap<>()", "var_name": "mIterators"}, {"original_string": "private int mSize = 0;", "modifier": "private", "type": "int", "declarator": "mSize = 0", "var_name": "mSize"}], "methods": [{"identifier": "get", "parameters": "(K k)", "modifiers": "protected", "return": "Entry<K, V>", "signature": "Entry<K, V> get(K k)", "full_signature": "protected Entry<K, V> get(K k)", "class_method_signature": "SafeIterableMap.get(K k)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(@NonNull K key, @NonNull V v)", "modifiers": "public", "return": "V", "signature": "V putIfAbsent(@NonNull K key, @NonNull V v)", "full_signature": "public V putIfAbsent(@NonNull K key, @NonNull V v)", "class_method_signature": "SafeIterableMap.putIfAbsent(@NonNull K key, @NonNull V v)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(@NonNull K key, @NonNull V v)", "modifiers": "protected", "return": "Entry<K, V>", "signature": "Entry<K, V> put(@NonNull K key, @NonNull V v)", "full_signature": "protected Entry<K, V> put(@NonNull K key, @NonNull V v)", "class_method_signature": "SafeIterableMap.put(@NonNull K key, @NonNull V v)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@NonNull K key)", "modifiers": "public", "return": "V", "signature": "V remove(@NonNull K key)", "full_signature": "public V remove(@NonNull K key)", "class_method_signature": "SafeIterableMap.remove(@NonNull K key)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SafeIterableMap.size()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "Iterator<Map.Entry<K, V>>", "signature": "Iterator<Map.Entry<K, V>> iterator()", "full_signature": "@NonNull @Override public Iterator<Map.Entry<K, V>> iterator()", "class_method_signature": "SafeIterableMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "descendingIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Map.Entry<K, V>>", "signature": "Iterator<Map.Entry<K, V>> descendingIterator()", "full_signature": "public Iterator<Map.Entry<K, V>> descendingIterator()", "class_method_signature": "SafeIterableMap.descendingIterator()", "testcase": false, "constructor": false}, {"identifier": "iteratorWithAdditions", "parameters": "()", "modifiers": "public", "return": "IteratorWithAdditions", "signature": "IteratorWithAdditions iteratorWithAdditions()", "full_signature": "public IteratorWithAdditions iteratorWithAdditions()", "class_method_signature": "SafeIterableMap.iteratorWithAdditions()", "testcase": false, "constructor": false}, {"identifier": "eldest", "parameters": "()", "modifiers": "public", "return": "Map.Entry<K, V>", "signature": "Map.Entry<K, V> eldest()", "full_signature": "public Map.Entry<K, V> eldest()", "class_method_signature": "SafeIterableMap.eldest()", "testcase": false, "constructor": false}, {"identifier": "newest", "parameters": "()", "modifiers": "public", "return": "Map.Entry<K, V>", "signature": "Map.Entry<K, V> newest()", "full_signature": "public Map.Entry<K, V> newest()", "class_method_signature": "SafeIterableMap.newest()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SafeIterableMap.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SafeIterableMap.toString()", "testcase": false, "constructor": false}], "file": "app-toolkit/common/src/main/java/android/arch/core/internal/SafeIterableMap.java"}, "focal_method": {"identifier": "remove", "parameters": "(@NonNull K key)", "modifiers": "public", "return": "V", "body": "public V remove(@NonNull K key) {\n        Entry<K, V> toRemove = get(key);\n        if (toRemove == null) {\n            return null;\n        }\n        mSize--;\n        if (!mIterators.isEmpty()) {\n            for (SupportRemove<K, V> iter : mIterators.keySet()) {\n                iter.supportRemove(toRemove);\n            }\n        }\n\n        if (toRemove.mPrevious != null) {\n            toRemove.mPrevious.mNext = toRemove.mNext;\n        } else {\n            mStart = toRemove.mNext;\n        }\n\n        if (toRemove.mNext != null) {\n            toRemove.mNext.mPrevious = toRemove.mPrevious;\n        } else {\n            mEnd = toRemove.mPrevious;\n        }\n\n        toRemove.mNext = null;\n        toRemove.mPrevious = null;\n        return toRemove.mValue;\n    }", "signature": "V remove(@NonNull K key)", "full_signature": "public V remove(@NonNull K key)", "class_method_signature": "SafeIterableMap.remove(@NonNull K key)", "testcase": false, "constructor": false, "invocations": ["get", "isEmpty", "keySet", "supportRemove"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}