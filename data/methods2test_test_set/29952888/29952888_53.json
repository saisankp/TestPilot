{"test_class": {"identifier": "OperationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    OperationServiceImpl operationService;", "modifier": "@Inject", "type": "OperationServiceImpl", "declarator": "operationService", "var_name": "operationService"}, {"original_string": "@Inject\n    MemcacheService memcacheService;", "modifier": "@Inject", "type": "MemcacheService", "declarator": "memcacheService", "var_name": "memcacheService"}], "file": "gae-studio/gae-studio-server/src/test/java/com/arcbees/gaestudio/server/service/profiler/OperationServiceImplTest.java"}, "test_case": {"identifier": "testGetOperationLimitNotNullAndMostRecentIdEqualsLastId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOperationLimitNotNullAndMostRecentIdEqualsLastId() {\n        // Given\n        Long lastId = 1L;\n        when(memcacheService.get(MemcacheKey.DB_OPERATION_COUNTER.getName())).thenReturn(lastId);\n\n        // when\n        List<DbOperationRecordDto> results = operationService.getOperations(lastId, 2);\n\n        // then\n        verify(memcacheService).get(MemcacheKey.DB_OPERATION_COUNTER.getName());\n        assertNull(results);\n    }", "signature": "void testGetOperationLimitNotNullAndMostRecentIdEqualsLastId()", "full_signature": "@Test public void testGetOperationLimitNotNullAndMostRecentIdEqualsLastId()", "class_method_signature": "OperationServiceImplTest.testGetOperationLimitNotNullAndMostRecentIdEqualsLastId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "getName", "getOperations", "get", "verify", "getName", "assertNull"]}, "focal_class": {"identifier": "OperationServiceImpl", "superclass": "", "interfaces": "implements OperationService", "fields": [{"original_string": "private final MemcacheService memcacheService;", "modifier": "private final", "type": "MemcacheService", "declarator": "memcacheService", "var_name": "memcacheService"}], "methods": [{"identifier": "OperationServiceImpl", "parameters": "(\n            MemcacheService memcacheService)", "modifiers": "@Inject", "return": "", "signature": " OperationServiceImpl(\n            MemcacheService memcacheService)", "full_signature": "@Inject  OperationServiceImpl(\n            MemcacheService memcacheService)", "class_method_signature": "OperationServiceImpl.OperationServiceImpl(\n            MemcacheService memcacheService)", "testcase": false, "constructor": true}, {"identifier": "getMostRecentId", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getMostRecentId()", "full_signature": "@Override public Long getMostRecentId()", "class_method_signature": "OperationServiceImpl.getMostRecentId()", "testcase": false, "constructor": false}, {"identifier": "getOperations", "parameters": "(Long lastId, Integer limit)", "modifiers": "public", "return": "List<DbOperationRecordDto>", "signature": "List<DbOperationRecordDto> getOperations(Long lastId, Integer limit)", "full_signature": "public List<DbOperationRecordDto> getOperations(Long lastId, Integer limit)", "class_method_signature": "OperationServiceImpl.getOperations(Long lastId, Integer limit)", "testcase": false, "constructor": false}, {"identifier": "getNewOperationRecordKeys", "parameters": "(long beginId, long endId)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getNewOperationRecordKeys(long beginId, long endId)", "full_signature": "private List<String> getNewOperationRecordKeys(long beginId, long endId)", "class_method_signature": "OperationServiceImpl.getNewOperationRecordKeys(long beginId, long endId)", "testcase": false, "constructor": false}], "file": "gae-studio/gae-studio-server/src/main/java/com/arcbees/gaestudio/server/service/profiler/OperationServiceImpl.java"}, "focal_method": {"identifier": "getOperations", "parameters": "(Long lastId, Integer limit)", "modifiers": "public", "return": "List<DbOperationRecordDto>", "body": "public List<DbOperationRecordDto> getOperations(Long lastId, Integer limit) {\n        Long mostRecentId = getMostRecentId();\n\n        if (mostRecentId == null) {\n            return null;\n        }\n\n        long beginId = lastId + 1;\n        // TODO if there is a big difference between beginId and the most recent id, binary search for the true start\n        long endId = limit != null ? Math.min(lastId + limit, mostRecentId) : mostRecentId;\n\n        if (beginId > endId) {\n            return null;\n        }\n\n        Map<String, Object> recordsByKey = memcacheService.getAll(getNewOperationRecordKeys(beginId, endId));\n        // TODO trimming missing results only from the end of the range is incorrect, as there are scenarios\n        // in which there could be missing records in the middle. We need a better approach to this that\n        // always retrieves all missing records.\n\n        List<DbOperationRecordDto> records = new ArrayList<DbOperationRecordDto>(recordsByKey.size());\n        for (Object recordObject : recordsByKey.values()) {\n            records.add((DbOperationRecordDto) recordObject);\n        }\n\n        return records;\n    }", "signature": "List<DbOperationRecordDto> getOperations(Long lastId, Integer limit)", "full_signature": "public List<DbOperationRecordDto> getOperations(Long lastId, Integer limit)", "class_method_signature": "OperationServiceImpl.getOperations(Long lastId, Integer limit)", "testcase": false, "constructor": false, "invocations": ["getMostRecentId", "min", "getAll", "getNewOperationRecordKeys", "size", "values", "add"]}, "repository": {"repo_id": 29952888, "url": "https://github.com/ArcBees/gae-studio", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 21, "size": 11408, "license": "licensed"}}