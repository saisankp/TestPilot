{"test_class": {"identifier": "AcknowledgementForwarderActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final JUnitSoftAssertions softly = new JUnitSoftAssertions();", "modifier": "@Rule\n    public final", "type": "JUnitSoftAssertions", "declarator": "softly = new JUnitSoftAssertions()", "var_name": "softly"}, {"original_string": "@Mock\n    private ActorContext actorContext;", "modifier": "@Mock\n    private", "type": "ActorContext", "declarator": "actorContext", "var_name": "actorContext"}, {"original_string": "private ActorSystem actorSystem;", "modifier": "private", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private AcknowledgementConfig acknowledgementConfig;", "modifier": "private", "type": "AcknowledgementConfig", "declarator": "acknowledgementConfig", "var_name": "acknowledgementConfig"}], "file": "services/models/acks/src/test/java/org/eclipse/ditto/services/models/acks/AcknowledgementForwarderActorTest.java"}, "test_case": {"identifier": "tryToDetermineActorNameWithMissingCorrelationId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToDetermineActorNameWithMissingCorrelationId() {\n        final DittoHeaders dittoHeaders = DittoHeaders.newBuilder()\n                .acknowledgementRequest(AcknowledgementRequest.of(AcknowledgementLabel.of(\"my-requested-ack\")))\n                .build();\n\n        assertThatExceptionOfType(AcknowledgementCorrelationIdMissingException.class)\n                .isThrownBy(() -> AcknowledgementForwarderActor.determineActorName(dittoHeaders));\n    }", "signature": "void tryToDetermineActorNameWithMissingCorrelationId()", "full_signature": "@Test public void tryToDetermineActorNameWithMissingCorrelationId()", "class_method_signature": "AcknowledgementForwarderActorTest.tryToDetermineActorNameWithMissingCorrelationId()", "testcase": true, "constructor": false, "invocations": ["build", "acknowledgementRequest", "newBuilder", "of", "of", "isThrownBy", "assertThatExceptionOfType", "determineActorName"]}, "focal_class": {"identifier": "AcknowledgementForwarderActor", "superclass": "extends AbstractActor", "interfaces": "", "fields": [{"original_string": "static final String ACTOR_NAME_PREFIX = \"ackForwarder-\";", "modifier": "static final", "type": "String", "declarator": "ACTOR_NAME_PREFIX = \"ackForwarder-\"", "var_name": "ACTOR_NAME_PREFIX"}, {"original_string": "private final ActorRef acknowledgementRequester;", "modifier": "private final", "type": "ActorRef", "declarator": "acknowledgementRequester", "var_name": "acknowledgementRequester"}, {"original_string": "private final String correlationId;", "modifier": "private final", "type": "String", "declarator": "correlationId", "var_name": "correlationId"}, {"original_string": "private final DittoDiagnosticLoggingAdapter log;", "modifier": "private final", "type": "DittoDiagnosticLoggingAdapter", "declarator": "log", "var_name": "log"}], "methods": [{"identifier": "AcknowledgementForwarderActor", "parameters": "(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " AcknowledgementForwarderActor(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "full_signature": "@SuppressWarnings(\"unused\") private  AcknowledgementForwarderActor(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "class_method_signature": "AcknowledgementForwarderActor.AcknowledgementForwarderActor(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "modifiers": "static", "return": "Props", "signature": "Props props(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "full_signature": "static Props props(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "class_method_signature": "AcknowledgementForwarderActor.props(final ActorRef acknowledgementRequester, final DittoHeaders dittoHeaders,\n            final Duration defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "createReceive", "parameters": "()", "modifiers": "@Override public", "return": "Receive", "signature": "Receive createReceive()", "full_signature": "@Override public Receive createReceive()", "class_method_signature": "AcknowledgementForwarderActor.createReceive()", "testcase": false, "constructor": false}, {"identifier": "forwardCommandResponse", "parameters": "(final WithDittoHeaders<?> acknowledgement)", "modifiers": "private", "return": "void", "signature": "void forwardCommandResponse(final WithDittoHeaders<?> acknowledgement)", "full_signature": "private void forwardCommandResponse(final WithDittoHeaders<?> acknowledgement)", "class_method_signature": "AcknowledgementForwarderActor.forwardCommandResponse(final WithDittoHeaders<?> acknowledgement)", "testcase": false, "constructor": false}, {"identifier": "handleReceiveTimeout", "parameters": "(final ReceiveTimeout receiveTimeout)", "modifiers": "private", "return": "void", "signature": "void handleReceiveTimeout(final ReceiveTimeout receiveTimeout)", "full_signature": "private void handleReceiveTimeout(final ReceiveTimeout receiveTimeout)", "class_method_signature": "AcknowledgementForwarderActor.handleReceiveTimeout(final ReceiveTimeout receiveTimeout)", "testcase": false, "constructor": false}, {"identifier": "determineActorName", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "String", "signature": "String determineActorName(final DittoHeaders dittoHeaders)", "full_signature": "public static String determineActorName(final DittoHeaders dittoHeaders)", "class_method_signature": "AcknowledgementForwarderActor.determineActorName(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "startAcknowledgementForwarder", "parameters": "(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "modifiers": "public static", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> startAcknowledgementForwarder(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "full_signature": "public static Optional<ActorRef> startAcknowledgementForwarder(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "class_method_signature": "AcknowledgementForwarderActor.startAcknowledgementForwarder(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "testcase": false, "constructor": false}, {"identifier": "startAcknowledgementForwarderConflictFree", "parameters": "(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "modifiers": "public static", "return": "Signal<?>", "signature": "Signal<?> startAcknowledgementForwarderConflictFree(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "full_signature": "public static Signal<?> startAcknowledgementForwarderConflictFree(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "class_method_signature": "AcknowledgementForwarderActor.startAcknowledgementForwarderConflictFree(final akka.actor.ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "testcase": false, "constructor": false}], "file": "services/models/acks/src/main/java/org/eclipse/ditto/services/models/acks/AcknowledgementForwarderActor.java"}, "focal_method": {"identifier": "determineActorName", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "String", "body": "public static String determineActorName(final DittoHeaders dittoHeaders) {\n        checkNotNull(dittoHeaders, \"dittoHeaders\");\n        final String correlationId = dittoHeaders.getCorrelationId()\n                .orElseThrow(() -> AcknowledgementCorrelationIdMissingException.newBuilder()\n                        .dittoHeaders(dittoHeaders)\n                        .build());\n        return ACTOR_NAME_PREFIX + URLEncoder.encode(correlationId, Charset.defaultCharset());\n    }", "signature": "String determineActorName(final DittoHeaders dittoHeaders)", "full_signature": "public static String determineActorName(final DittoHeaders dittoHeaders)", "class_method_signature": "AcknowledgementForwarderActor.determineActorName(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "orElseThrow", "getCorrelationId", "build", "dittoHeaders", "newBuilder", "encode", "defaultCharset"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}