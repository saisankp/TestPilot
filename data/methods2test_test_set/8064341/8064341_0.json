{"test_class": {"identifier": "RestartableHttpClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Authentication mockAuth;", "modifier": "private", "type": "Authentication", "declarator": "mockAuth", "var_name": "mockAuth"}, {"original_string": "private SchemeRegistry defaultSchemeRegistry;", "modifier": "private", "type": "SchemeRegistry", "declarator": "defaultSchemeRegistry", "var_name": "defaultSchemeRegistry"}, {"original_string": "private HttpParams mockParams;", "modifier": "private", "type": "HttpParams", "declarator": "mockParams", "var_name": "mockParams"}, {"original_string": "private HttpUriRequest request;", "modifier": "private", "type": "HttpUriRequest", "declarator": "request", "var_name": "request"}], "file": "hbc-core/src/test/java/com/twitter/hbc/httpclient/RestartableHttpClientTest.java"}, "test_case": {"identifier": "testRestart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRestart() throws Exception {\n    RestartableHttpClient client = new RestartableHttpClient(mockAuth, true, mockParams, defaultSchemeRegistry);\n    client.setup();\n    client.restart();\n    try {\n      client.execute(request); // used to crash, https://github.com/twitter/hbc/issues/113\n      fail(\"should not reach here\");\n    } catch (UnknownHostException e) {\n      // expected\n    }\n  }", "signature": "void testRestart()", "full_signature": "@Test public void testRestart()", "class_method_signature": "RestartableHttpClientTest.testRestart()", "testcase": true, "constructor": false, "invocations": ["setup", "restart", "execute", "fail"]}, "focal_class": {"identifier": "RestartableHttpClient", "superclass": "", "interfaces": "implements HttpClient", "fields": [{"original_string": "private final AtomicReference<HttpClient> underlying;", "modifier": "private final", "type": "AtomicReference<HttpClient>", "declarator": "underlying", "var_name": "underlying"}, {"original_string": "private final Authentication auth;", "modifier": "private final", "type": "Authentication", "declarator": "auth", "var_name": "auth"}, {"original_string": "private final HttpParams params;", "modifier": "private final", "type": "HttpParams", "declarator": "params", "var_name": "params"}, {"original_string": "private final boolean enableGZip;", "modifier": "private final", "type": "boolean", "declarator": "enableGZip", "var_name": "enableGZip"}, {"original_string": "private final SchemeRegistry schemeRegistry;", "modifier": "private final", "type": "SchemeRegistry", "declarator": "schemeRegistry", "var_name": "schemeRegistry"}], "methods": [{"identifier": "RestartableHttpClient", "parameters": "(Authentication auth, boolean enableGZip, HttpParams params, SchemeRegistry schemeRegistry)", "modifiers": "public", "return": "", "signature": " RestartableHttpClient(Authentication auth, boolean enableGZip, HttpParams params, SchemeRegistry schemeRegistry)", "full_signature": "public  RestartableHttpClient(Authentication auth, boolean enableGZip, HttpParams params, SchemeRegistry schemeRegistry)", "class_method_signature": "RestartableHttpClient.RestartableHttpClient(Authentication auth, boolean enableGZip, HttpParams params, SchemeRegistry schemeRegistry)", "testcase": false, "constructor": true}, {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "RestartableHttpClient.setup()", "testcase": false, "constructor": false}, {"identifier": "restart", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void restart()", "full_signature": "public void restart()", "class_method_signature": "RestartableHttpClient.restart()", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "@Override public", "return": "HttpParams", "signature": "HttpParams getParams()", "full_signature": "@Override public HttpParams getParams()", "class_method_signature": "RestartableHttpClient.getParams()", "testcase": false, "constructor": false}, {"identifier": "getConnectionManager", "parameters": "()", "modifiers": "@Override public", "return": "ClientConnectionManager", "signature": "ClientConnectionManager getConnectionManager()", "full_signature": "@Override public ClientConnectionManager getConnectionManager()", "class_method_signature": "RestartableHttpClient.getConnectionManager()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpUriRequest request)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpUriRequest request)", "full_signature": "@Override public HttpResponse execute(HttpUriRequest request)", "class_method_signature": "RestartableHttpClient.execute(HttpUriRequest request)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpUriRequest request, HttpContext context)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpUriRequest request, HttpContext context)", "full_signature": "@Override public HttpResponse execute(HttpUriRequest request, HttpContext context)", "class_method_signature": "RestartableHttpClient.execute(HttpUriRequest request, HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpHost target, HttpRequest request)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpHost target, HttpRequest request)", "full_signature": "@Override public HttpResponse execute(HttpHost target, HttpRequest request)", "class_method_signature": "RestartableHttpClient.execute(HttpHost target, HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpHost target, HttpRequest request, HttpContext context)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpHost target, HttpRequest request, HttpContext context)", "full_signature": "@Override public HttpResponse execute(HttpHost target, HttpRequest request, HttpContext context)", "class_method_signature": "RestartableHttpClient.execute(HttpHost target, HttpRequest request, HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpUriRequest request, ResponseHandler<? extends T> responseHandler)", "modifiers": "@Override public", "return": "T", "signature": "T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler)", "full_signature": "@Override public T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler)", "class_method_signature": "RestartableHttpClient.execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "modifiers": "@Override public", "return": "T", "signature": "T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "full_signature": "@Override public T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "class_method_signature": "RestartableHttpClient.execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler)", "modifiers": "@Override public", "return": "T", "signature": "T execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler)", "full_signature": "@Override public T execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler)", "class_method_signature": "RestartableHttpClient.execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "modifiers": "@Override public", "return": "T", "signature": "T execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "full_signature": "@Override public T execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "class_method_signature": "RestartableHttpClient.execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context)", "testcase": false, "constructor": false}], "file": "hbc-core/src/main/java/com/twitter/hbc/httpclient/RestartableHttpClient.java"}, "focal_method": {"identifier": "restart", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void restart() {\n    HttpClient old = underlying.get();\n    if (old != null) {\n      // this will kill all of the connections and release the resources for our old client\n      old.getConnectionManager().shutdown();\n    }\n    setup();\n  }", "signature": "void restart()", "full_signature": "public void restart()", "class_method_signature": "RestartableHttpClient.restart()", "testcase": false, "constructor": false, "invocations": ["get", "shutdown", "getConnectionManager", "setup"]}, "repository": {"repo_id": 8064341, "url": "https://github.com/twitter/hbc", "language": "Java", "is_fork": false, "fork_count": 338, "stargazer_count": 868, "size": 352, "license": "licensed"}}