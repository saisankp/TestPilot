{"test_class": {"identifier": "LaserMeasurementTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/lasers/LaserMeasurementTest.java"}, "test_case": {"identifier": "reorder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reorder() {\n        final List<LaserMeasurement> points = testPoints();\n        points.add(new LaserMeasurement(50, -50));\n        assertEquals(\"100.0, -100.0\\n50.0, -50.0\\n\", LaserMeasurement.render(points, true).toString());\n\n        // Sort quadrant 2\n        final List<LaserMeasurement> reordered = LaserMeasurement.reorder(points);\n        assertEquals(\"50.0, -50.0\\n100.0, -100.0\\n\", LaserMeasurement.render(reordered, true).toString());\n    }", "signature": "void reorder()", "full_signature": "@Test public void reorder()", "class_method_signature": "LaserMeasurementTest.reorder()", "testcase": true, "constructor": false, "invocations": ["testPoints", "add", "assertEquals", "toString", "render", "reorder", "assertEquals", "toString", "render"]}, "focal_class": {"identifier": "LaserMeasurement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"LaserMeasurement\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"LaserMeasurement\"", "var_name": "TAG"}, {"original_string": "public final double x;", "modifier": "public final", "type": "double", "declarator": "x", "var_name": "x"}, {"original_string": "public final double y;", "modifier": "public final", "type": "double", "declarator": "y", "var_name": "y"}], "methods": [{"identifier": "LaserMeasurement", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " LaserMeasurement(double x, double y)", "full_signature": "public  LaserMeasurement(double x, double y)", "class_method_signature": "LaserMeasurement.LaserMeasurement(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "LaserMeasurement.toString()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@NonNull String pointString, boolean metric, boolean strict)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "full_signature": "@NonNull public static List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "class_method_signature": "LaserMeasurement.parse(@NonNull String pointString, boolean metric, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "parseSafe", "parameters": "(@NonNull String pointString, boolean metric)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> parseSafe(@NonNull String pointString, boolean metric)", "full_signature": "@NonNull public static List<LaserMeasurement> parseSafe(@NonNull String pointString, boolean metric)", "class_method_signature": "LaserMeasurement.parseSafe(@NonNull String pointString, boolean metric)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(@NonNull List<LaserMeasurement> points, boolean metric)", "modifiers": "@NonNull public static", "return": "CharSequence", "signature": "CharSequence render(@NonNull List<LaserMeasurement> points, boolean metric)", "full_signature": "@NonNull public static CharSequence render(@NonNull List<LaserMeasurement> points, boolean metric)", "class_method_signature": "LaserMeasurement.render(@NonNull List<LaserMeasurement> points, boolean metric)", "testcase": false, "constructor": false}, {"identifier": "reorder", "parameters": "(@NonNull List<LaserMeasurement> points)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "full_signature": "@NonNull public static List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "class_method_signature": "LaserMeasurement.reorder(@NonNull List<LaserMeasurement> points)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/lasers/LaserMeasurement.java"}, "focal_method": {"identifier": "reorder", "parameters": "(@NonNull List<LaserMeasurement> points)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "body": "@NonNull\n    public static List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points) {\n        // Find height and width range\n        final Range xRange = new Range();\n        final Range yRange = new Range();\n        for (LaserMeasurement point : points) {\n            xRange.expand(point.x);\n            yRange.expand(point.y);\n        }\n        if (xRange.min < 0 && xRange.max <= 0 && yRange.min >= 0) {\n            // Quadrant 4: Assume coordinates are reversed y,x\n            final List<LaserMeasurement> swapped = new ArrayList<>();\n            for (LaserMeasurement point : points) {\n                //noinspection SuspiciousNameCombination\n                swapped.add(new LaserMeasurement(point.y, point.x));\n            }\n            // Sort by horiz\n            Collections.sort(swapped, (l1, l2) -> Double.compare(l1.x, l2.x));\n            return swapped;\n        } else if (yRange.min >= 0 && yRange.max > 0) {\n            // Quadrant 1: Assume lasering from bottom\n            final List<LaserMeasurement> reversed = new ArrayList<>();\n            for (LaserMeasurement point : points) {\n                reversed.add(new LaserMeasurement(xRange.max - point.x, point.y - yRange.max));\n            }\n            // Add reversed 0,0\n            reversed.add(new LaserMeasurement(xRange.max, -yRange.max));\n            // Sort by horiz\n            Collections.sort(reversed, (l1, l2) -> Double.compare(l1.x, l2.x));\n            return reversed;\n        } else {\n            // Quadrant 2: default x,y\n            final List<LaserMeasurement> sorted = new ArrayList<>(points);\n            // Sort by horiz\n            Collections.sort(sorted, (l1, l2) -> Double.compare(l1.x, l2.x));\n            return sorted;\n        }\n    }", "signature": "List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "full_signature": "@NonNull public static List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "class_method_signature": "LaserMeasurement.reorder(@NonNull List<LaserMeasurement> points)", "testcase": false, "constructor": false, "invocations": ["expand", "expand", "add", "sort", "compare", "add", "add", "sort", "compare", "sort", "compare"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}