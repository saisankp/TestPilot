{"test_class": {"identifier": "JwtFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADER_NOT_BEARER = \"NOT BEARER\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_NOT_BEARER = \"NOT BEARER\"", "var_name": "HEADER_NOT_BEARER"}, {"original_string": "private static final String HEADER_BAD_BEARER = JwtFilter.BEARER_PREFIX + \"GARBAGE\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_BAD_BEARER = JwtFilter.BEARER_PREFIX + \"GARBAGE\"", "var_name": "HEADER_BAD_BEARER"}, {"original_string": "private static final String HEADER_EMPTY_CREDENTIALS = JwtFilter.BEARER_PREFIX +\n        \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6IiIsImlhdCI6MH0.nEBg6Bj7PLGALFT2rs4wDfhvUfA91b7XLNog029crUA\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_EMPTY_CREDENTIALS = JwtFilter.BEARER_PREFIX +\n        \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6IiIsImlhdCI6MH0.nEBg6Bj7PLGALFT2rs4wDfhvUfA91b7XLNog029crUA\"", "var_name": "HEADER_EMPTY_CREDENTIALS"}, {"original_string": "private static final String HEADER_VALID_CREDENTIALS = JwtFilter.BEARER_PREFIX +\n        \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2YWxpZCIsInJvbGVzIjoiIiwiaWF0IjowfQ.lzdLJW9bdkXZLc57_YcXm0cJL87ZFSrPLEOD1-nYR8Q\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_VALID_CREDENTIALS = JwtFilter.BEARER_PREFIX +\n        \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2YWxpZCIsInJvbGVzIjoiIiwiaWF0IjowfQ.lzdLJW9bdkXZLc57_YcXm0cJL87ZFSrPLEOD1-nYR8Q\"", "var_name": "HEADER_VALID_CREDENTIALS"}, {"original_string": "private static final String VALID_CREDENTIALS_SUBJECT = \"valid\";", "modifier": "private static final", "type": "String", "declarator": "VALID_CREDENTIALS_SUBJECT = \"valid\"", "var_name": "VALID_CREDENTIALS_SUBJECT"}, {"original_string": "@Mock\n    private HttpServletRequest mockHttpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest", "var_name": "mockHttpServletRequest"}, {"original_string": "@Mock\n    private HttpServletResponse mockHttpServletResponse;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse", "var_name": "mockHttpServletResponse"}, {"original_string": "@Mock\n    private FilterChain mockFilterChain;", "modifier": "@Mock\n    private", "type": "FilterChain", "declarator": "mockFilterChain", "var_name": "mockFilterChain"}, {"original_string": "private JwtFilter jwtFilter;", "modifier": "private", "type": "JwtFilter", "declarator": "jwtFilter", "var_name": "jwtFilter"}], "file": "application/confagrid-webapp/src/test/java/com/aleggeup/confagrid/auth/JwtFilterTest.java"}, "test_case": {"identifier": "testEmptyCredentials", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyCredentials() throws ServletException, IOException {\n        Mockito.when(mockHttpServletRequest.getHeader(JwtFilter.HEADER_AUTHORIZATION))\n            .thenReturn(HEADER_EMPTY_CREDENTIALS);\n\n        jwtFilter.doFilterInternal(mockHttpServletRequest, mockHttpServletResponse, mockFilterChain);\n\n        Mockito.verify(mockHttpServletRequest).getMethod();\n        Mockito.verify(mockHttpServletRequest).setAttribute(JwtFilter.JWT_ATTRIBUTE,\n            new DefaultClaims().setSubject(JwtFilter.SUBJECT_ANONYMOUS));\n        Mockito.verify(mockHttpServletResponse).setHeader(JwtFilter.JWT_TOKEN,\n            \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6IiIsImlhdCI6MH0.nEBg6Bj7PLGALFT2rs4wDfhvUfA91b7XLNog029crUA\");\n        Mockito.verify(mockHttpServletRequest).getHeader(JwtFilter.HEADER_AUTHORIZATION);\n        Mockito.verify(mockHttpServletResponse).setHeader(JwtFilter.HEADER_CLAIMS_SUBJECT, JwtFilter.SUBJECT_ANONYMOUS);\n        Mockito.verify(mockFilterChain).doFilter(mockHttpServletRequest, mockHttpServletResponse);\n        Mockito.verify(mockHttpServletResponse, Mockito.times(4)).setHeader(ArgumentMatchers.anyString(),\n            ArgumentMatchers.any());\n    }", "signature": "void testEmptyCredentials()", "full_signature": "@Test public void testEmptyCredentials()", "class_method_signature": "JwtFilterTest.testEmptyCredentials()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHeader", "doFilterInternal", "getMethod", "verify", "setAttribute", "verify", "setSubject", "setHeader", "verify", "getHeader", "verify", "setHeader", "verify", "doFilter", "verify", "setHeader", "verify", "times", "anyString", "any"]}, "focal_class": {"identifier": "JwtFilter", "superclass": "extends OncePerRequestFilter", "interfaces": "", "fields": [{"original_string": "public static final String ATTRIBUTE_CLAIMS = \"claims\";", "modifier": "public static final", "type": "String", "declarator": "ATTRIBUTE_CLAIMS = \"claims\"", "var_name": "ATTRIBUTE_CLAIMS"}, {"original_string": "public static final String BEARER_PREFIX = \"Bearer \";", "modifier": "public static final", "type": "String", "declarator": "BEARER_PREFIX = \"Bearer \"", "var_name": "BEARER_PREFIX"}, {"original_string": "public static final String HEADER_AUTHORIZATION = \"Authorization\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_AUTHORIZATION = \"Authorization\"", "var_name": "HEADER_AUTHORIZATION"}, {"original_string": "public static final String HEADER_CLAIMS = \"x-claims\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CLAIMS = \"x-claims\"", "var_name": "HEADER_CLAIMS"}, {"original_string": "public static final String HEADER_CLAIMS_SUBJECT = \"x-claims-subject\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CLAIMS_SUBJECT = \"x-claims-subject\"", "var_name": "HEADER_CLAIMS_SUBJECT"}, {"original_string": "public static final String HEADER_CLAIMS_USER_ID = \"x-claims-user-id\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CLAIMS_USER_ID = \"x-claims-user-id\"", "var_name": "HEADER_CLAIMS_USER_ID"}, {"original_string": "public static final String SECRET_KEY = \"secretkey\";", "modifier": "public static final", "type": "String", "declarator": "SECRET_KEY = \"secretkey\"", "var_name": "SECRET_KEY"}, {"original_string": "public static final String SUBJECT_ANONYMOUS = \"anonymous\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT_ANONYMOUS = \"anonymous\"", "var_name": "SUBJECT_ANONYMOUS"}, {"original_string": "public static final String JWT_TOKEN = \"x-jwt-token\";", "modifier": "public static final", "type": "String", "declarator": "JWT_TOKEN = \"x-jwt-token\"", "var_name": "JWT_TOKEN"}, {"original_string": "public static final String JWT_ATTRIBUTE = \"x-jwt-attribute\";", "modifier": "public static final", "type": "String", "declarator": "JWT_ATTRIBUTE = \"x-jwt-attribute\"", "var_name": "JWT_ATTRIBUTE"}, {"original_string": "public static final String ANONYMOUS_USER_ID = \"b5a2918e-bd3f-48f5-8437-daf40fd3f323\";", "modifier": "public static final", "type": "String", "declarator": "ANONYMOUS_USER_ID = \"b5a2918e-bd3f-48f5-8437-daf40fd3f323\"", "var_name": "ANONYMOUS_USER_ID"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JwtFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JwtFilter.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "doFilterInternal", "parameters": "(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "modifiers": "@Override protected", "return": "void", "signature": "void doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "full_signature": "@Override protected void doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "class_method_signature": "JwtFilter.doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "testcase": false, "constructor": false}], "file": "application/confagrid-webapp/src/main/java/com/aleggeup/confagrid/auth/JwtFilter.java"}, "focal_method": {"identifier": "doFilterInternal", "parameters": "(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)\n        throws ServletException, IOException {\n\n        Claims claims = null;\n        String token = \"\";\n\n        if (!RequestMethod.OPTIONS.toString().equals(request.getMethod())) {\n\n            final String authHeader = request.getHeader(HEADER_AUTHORIZATION);\n\n            if (authHeader == null || !authHeader.startsWith(BEARER_PREFIX)) {\n                LOGGER.info(\"Missing or invalid Authorization header.\");\n                claims = new DefaultClaims().setSubject(SUBJECT_ANONYMOUS);\n            } else {\n                try {\n                    token = authHeader.substring(BEARER_PREFIX.length());\n                    claims = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();\n                } catch (final JwtException e) {\n                    LOGGER.warn(\"Unable to get claims from bearer token: {}\", e.getMessage());\n                }\n\n                if (claims == null || claims.getSubject() == null) {\n                    claims = new DefaultClaims().setSubject(SUBJECT_ANONYMOUS);\n                }\n            }\n\n            request.setAttribute(JWT_ATTRIBUTE, claims);\n            response.setHeader(JWT_TOKEN, token);\n            response.setHeader(HEADER_CLAIMS, claims.toString());\n            response.setHeader(HEADER_CLAIMS_SUBJECT, claims.getSubject());\n            response.setHeader(HEADER_CLAIMS_USER_ID, claims.getId());\n        }\n\n        chain.doFilter(request, response);\n    }", "signature": "void doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "full_signature": "@Override protected void doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "class_method_signature": "JwtFilter.doFilterInternal(@NonNull final HttpServletRequest request,\n        @NonNull final HttpServletResponse response, @NonNull final FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["equals", "toString", "getMethod", "getHeader", "startsWith", "info", "setSubject", "substring", "length", "getBody", "parseClaimsJws", "setSigningKey", "parser", "warn", "getMessage", "getSubject", "setSubject", "setAttribute", "setHeader", "setHeader", "toString", "setHeader", "getSubject", "setHeader", "getId", "doFilter"]}, "repository": {"repo_id": 97776141, "url": "https://github.com/ALeggeUp/confagrid", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 22043, "license": "licensed"}}