{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindExecutions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindExecutions() {\n        if (!TestEnvironment.canRunTest(ConfigOption.RUN_JOBS)) {\n            System.err.println(\"Skipping test that would run jobs\");\n            return;\n        }\n\n        DXApplet applet = createMinimalApplet();\n\n        // A sample input: {input_string: \"java\"}\n        SampleAppInput appInput = new SampleAppInput(\"java\");\n\n        // Run the applet!\n        DXJob job =\n                applet.newRun().setInput(appInput).setProject(testProject).setName(\"javatest\")\n                        .addTags(ImmutableList.of(\"t1\")).putProperty(\"k1\", \"v1\").run();\n\n        // Some findJobs queries\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject)\n                .withExecutable(applet).execute().asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject).withTag(\"t1\")\n                .execute().asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject).withTag(\"t2\")\n                .execute().asList());\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions().inProject(testProject).withProperty(\"k1\", \"v1\").execute()\n                        .asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject).withProperty(\"k1\")\n                .execute().asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject)\n                .withProperty(\"k1\", \"v2\").execute().asList());\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject).withProperty(\"k2\")\n                .execute().asList());\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions()\n                        .inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.anyOf(PropertiesQuery.withKey(\"k1\"),\n                                        PropertiesQuery.withKeyAndValue(\"does\", \"not exist\")))\n                        .execute().asList(), job);\n        assertEqualsAnyOrder(DXSearch\n                .findExecutions()\n                .inProject(testProject)\n                .withProperties(\n                        PropertiesQuery.allOf(PropertiesQuery.withKey(\"k1\"),\n                                PropertiesQuery.withKeyAndValue(\"does\", \"not exist\"))).execute()\n                .asList());\n\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions().inProject(testProject).nameMatchesExactly(\"javatest\")\n                        .execute().asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject)\n                .nameMatchesExactly(\"java\").execute().asList());\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions().inProject(testProject).nameMatchesGlob(\"*test\").execute()\n                        .asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject)\n                .nameMatchesGlob(\"python*\").execute().asList());\n        assertEqualsAnyOrder(DXSearch.findExecutions().inProject(testProject).withOriginJob(job)\n                .execute().asList(), job);\n\n        // With describe calls\n        DXJob resultJobWithDescribe =\n                Iterables.getOnlyElement(DXSearch.findExecutions().inProject(testProject)\n                        .withTag(\"t1\").withClassJob().includeDescribeOutput().execute().asList());\n        Assert.assertEquals(\"javatest\", resultJobWithDescribe.getCachedDescribe().getName());\n        DXJob resultJobWithoutDescribe =\n                Iterables.getOnlyElement(DXSearch.findExecutions().inProject(testProject)\n                        .withTag(\"t1\").withClassJob().execute().asList());\n        try {\n            resultJobWithoutDescribe.getCachedDescribe();\n            Assert.fail(\"Expected IllegalStateException to be thrown because includeDescribeOutput was not specified\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n\n        assertEqualsAnyOrder(DXSearch.findExecutions().withIdsIn(ImmutableList.of(job)).execute()\n                .asList(), job);\n        assertEqualsAnyOrder(DXSearch.findExecutions().withIdsIn(ImmutableList.<DXExecution>of())\n                .execute().asList());\n    }", "signature": "void testFindExecutions()", "full_signature": "@Test public void testFindExecutions()", "class_method_signature": "DXSearchTest.testFindExecutions()", "testcase": true, "constructor": false, "invocations": ["canRunTest", "println", "createMinimalApplet", "run", "putProperty", "addTags", "setName", "setProject", "setInput", "newRun", "of", "assertEqualsAnyOrder", "asList", "execute", "withExecutable", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withTag", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withTag", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findExecutions", "anyOf", "withKey", "withKeyAndValue", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findExecutions", "allOf", "withKey", "withKeyAndValue", "assertEqualsAnyOrder", "asList", "execute", "nameMatchesExactly", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "nameMatchesExactly", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "nameMatchesGlob", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "nameMatchesGlob", "inProject", "findExecutions", "assertEqualsAnyOrder", "asList", "execute", "withOriginJob", "inProject", "findExecutions", "getOnlyElement", "asList", "execute", "includeDescribeOutput", "withClassJob", "withTag", "inProject", "findExecutions", "assertEquals", "getName", "getCachedDescribe", "getOnlyElement", "asList", "execute", "withClassJob", "withTag", "inProject", "findExecutions", "getCachedDescribe", "fail", "assertEqualsAnyOrder", "asList", "execute", "withIdsIn", "findExecutions", "of", "assertEqualsAnyOrder", "asList", "execute", "withIdsIn", "findExecutions", "of"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "body": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions() {\n        return new FindExecutionsRequestBuilder<DXExecution>();\n    }", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}