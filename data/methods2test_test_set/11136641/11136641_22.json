{"test_class": {"identifier": "HardcodedFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/filter/HardcodedFilterTest.java"}, "test_case": {"identifier": "testHardcodedFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHardcodedFilter() {\n\t\tHardcodedFilter filter = new HardcodedFilter(\"(foo=a*b)\");\n\t\tassertThat(filter.encode()).isEqualTo(\"(foo=a*b)\");\n\n\t\tNotFilter notFilter = new NotFilter(new HardcodedFilter(\"(foo=a*b)\"));\n\t\tassertThat(notFilter.encode()).isEqualTo(\"(!(foo=a*b))\");\n\n\t\tAndFilter andFilter = new AndFilter();\n\t\tandFilter.and(new HardcodedFilter(\"(foo=a*b)\"));\n\t\tandFilter.and(new HardcodedFilter(\"(bar=a*b)\"));\n\t\tassertThat(andFilter.encode()).isEqualTo(\"(&(foo=a*b)(bar=a*b))\");\n\n\t\tandFilter = new AndFilter();\n\t\tandFilter.and(new HardcodedFilter(\"(foo=a*b)\"));\n\t\tandFilter.and(new NotFilter(new HardcodedFilter(\"(bar=a*b)\")));\n\t\tassertThat(andFilter.encode()).isEqualTo(\"(&(foo=a*b)(!(bar=a*b)))\");\n\t}", "signature": "void testHardcodedFilter()", "full_signature": "@Test public void testHardcodedFilter()", "class_method_signature": "HardcodedFilterTest.testHardcodedFilter()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "encode", "isEqualTo", "assertThat", "encode", "and", "and", "isEqualTo", "assertThat", "encode", "and", "and", "isEqualTo", "assertThat", "encode"]}, "focal_class": {"identifier": "HardcodedFilter", "superclass": "extends AbstractFilter", "interfaces": "", "fields": [{"original_string": "private String filter;", "modifier": "private", "type": "String", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "HardcodedFilter", "parameters": "(String filter)", "modifiers": "public", "return": "", "signature": " HardcodedFilter(String filter)", "full_signature": "public  HardcodedFilter(String filter)", "class_method_signature": "HardcodedFilter.HardcodedFilter(String filter)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(StringBuffer buff)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer encode(StringBuffer buff)", "full_signature": "public StringBuffer encode(StringBuffer buff)", "class_method_signature": "HardcodedFilter.encode(StringBuffer buff)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HardcodedFilter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HardcodedFilter.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/filter/HardcodedFilter.java"}, "focal_method": {"identifier": "HardcodedFilter", "parameters": "(String filter)", "modifiers": "public", "return": "", "body": "public HardcodedFilter(String filter) {\n\t\tthis.filter = filter;\n\t}", "signature": " HardcodedFilter(String filter)", "full_signature": "public  HardcodedFilter(String filter)", "class_method_signature": "HardcodedFilter.HardcodedFilter(String filter)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}