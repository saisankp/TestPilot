{"test_class": {"identifier": "RDBMSTopicMapReferenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/impl/rdbms/RDBMSTopicMapReferenceTest.java"}, "test_case": {"identifier": "testSetTitle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetTitle() throws Exception {\n    final String NEW_TITLE = \"___NEW_TITLE___\";\n\n    RDBMSTestFactory factory = new RDBMSTestFactory();\n    TopicMapReferenceIF before = factory.makeTopicMapReference();\n    Assert.assertNotSame(\"Test reference already has title '\" + NEW_TITLE + \"', cannot test for change\", NEW_TITLE, before.getTitle());\n    before.setTitle(NEW_TITLE);\n    String referenceId = before.getId();\n\n    factory = new RDBMSTestFactory(); // reload\n    TopicMapReferenceIF after = null;\n    for (TopicMapReferenceIF i : factory.getSource().getReferences()) {\n      if (referenceId.equals(i.getId())) { after = i; }\n    }\n    Assert.assertNotNull(\"Reference with id '\" + referenceId + \"' not found\", after);\n    Assert.assertEquals(\"Reference title not changed correctly\", NEW_TITLE, after.getTitle());\n  }", "signature": "void testSetTitle()", "full_signature": "@Test public void testSetTitle()", "class_method_signature": "RDBMSTopicMapReferenceTest.testSetTitle()", "testcase": true, "constructor": false, "invocations": ["makeTopicMapReference", "assertNotSame", "getTitle", "setTitle", "getId", "getReferences", "getSource", "equals", "getId", "assertNotNull", "assertEquals", "getTitle"]}, "focal_class": {"identifier": "RDBMSTopicMapReference", "superclass": "extends AbstractTopicMapReference", "interfaces": "", "fields": [{"original_string": "public static final String EXHAUSED_BLOCK = \"block\";", "modifier": "public static final", "type": "String", "declarator": "EXHAUSED_BLOCK = \"block\"", "var_name": "EXHAUSED_BLOCK"}, {"original_string": "public static final String EXHAUSED_GROW = \"grow\";", "modifier": "public static final", "type": "String", "declarator": "EXHAUSED_GROW = \"grow\"", "var_name": "EXHAUSED_GROW"}, {"original_string": "public static final String EXHAUSED_FAIL = \"fail\";", "modifier": "public static final", "type": "String", "declarator": "EXHAUSED_FAIL = \"fail\"", "var_name": "EXHAUSED_FAIL"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(RDBMSTopicMapReference.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RDBMSTopicMapReference.class.getName())", "var_name": "log"}, {"original_string": "protected StorageIF storage;", "modifier": "protected", "type": "StorageIF", "declarator": "storage", "var_name": "storage"}, {"original_string": "protected long topicmap_id;", "modifier": "protected", "type": "long", "declarator": "topicmap_id", "var_name": "topicmap_id"}, {"original_string": "protected LocatorIF base_address;", "modifier": "protected", "type": "LocatorIF", "declarator": "base_address", "var_name": "base_address"}, {"original_string": "protected StorePoolableObjectFactory ofactory;", "modifier": "protected", "type": "StorePoolableObjectFactory", "declarator": "ofactory", "var_name": "ofactory"}, {"original_string": "protected GenericObjectPool pool;", "modifier": "protected", "type": "GenericObjectPool", "declarator": "pool", "var_name": "pool"}, {"original_string": "protected RDBMSTopicMapStore rostore;", "modifier": "protected", "type": "RDBMSTopicMapStore", "declarator": "rostore", "var_name": "rostore"}], "methods": [{"identifier": "RDBMSTopicMapReference", "parameters": "(String _id, String _title, StorageIF _storage,\n      long _topicmap_id, LocatorIF _base_address)", "modifiers": "public", "return": "", "signature": " RDBMSTopicMapReference(String _id, String _title, StorageIF _storage,\n      long _topicmap_id, LocatorIF _base_address)", "full_signature": "public  RDBMSTopicMapReference(String _id, String _title, StorageIF _storage,\n      long _topicmap_id, LocatorIF _base_address)", "class_method_signature": "RDBMSTopicMapReference.RDBMSTopicMapReference(String _id, String _title, StorageIF _storage,\n      long _topicmap_id, LocatorIF _base_address)", "testcase": false, "constructor": true}, {"identifier": "_createStore", "parameters": "(boolean readonly)", "modifiers": "protected", "return": "RDBMSTopicMapStore", "signature": "RDBMSTopicMapStore _createStore(boolean readonly)", "full_signature": "protected RDBMSTopicMapStore _createStore(boolean readonly)", "class_method_signature": "RDBMSTopicMapReference._createStore(boolean readonly)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void init()", "full_signature": "protected void init()", "class_method_signature": "RDBMSTopicMapReference.init()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void open()", "full_signature": "@Override public synchronized void open()", "class_method_signature": "RDBMSTopicMapReference.open()", "testcase": false, "constructor": false}, {"identifier": "createStore", "parameters": "(boolean readonly)", "modifiers": "@Override public synchronized", "return": "TopicMapStoreIF", "signature": "TopicMapStoreIF createStore(boolean readonly)", "full_signature": "@Override public synchronized TopicMapStoreIF createStore(boolean readonly)", "class_method_signature": "RDBMSTopicMapReference.createStore(boolean readonly)", "testcase": false, "constructor": false}, {"identifier": "setTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "void", "signature": "void setTitle(String title)", "full_signature": "@Override public void setTitle(String title)", "class_method_signature": "RDBMSTopicMapReference.setTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "getBaseAddress", "parameters": "()", "modifiers": "public", "return": "LocatorIF", "signature": "LocatorIF getBaseAddress()", "full_signature": "public LocatorIF getBaseAddress()", "class_method_signature": "RDBMSTopicMapReference.getBaseAddress()", "testcase": false, "constructor": false}, {"identifier": "setBaseAddress", "parameters": "(LocatorIF base_address)", "modifiers": "public", "return": "void", "signature": "void setBaseAddress(LocatorIF base_address)", "full_signature": "public void setBaseAddress(LocatorIF base_address)", "class_method_signature": "RDBMSTopicMapReference.setBaseAddress(LocatorIF base_address)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "RDBMSTopicMapReference.close()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void clear()", "full_signature": "@Override public synchronized void clear()", "class_method_signature": "RDBMSTopicMapReference.clear()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void delete()", "full_signature": "@Override public synchronized void delete()", "class_method_signature": "RDBMSTopicMapReference.delete()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RDBMSTopicMapReference.toString()", "testcase": false, "constructor": false}, {"identifier": "getTopicMapId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTopicMapId()", "full_signature": "public long getTopicMapId()", "class_method_signature": "RDBMSTopicMapReference.getTopicMapId()", "testcase": false, "constructor": false}, {"identifier": "storeClosed", "parameters": "(TopicMapStoreIF store)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void storeClosed(TopicMapStoreIF store)", "full_signature": "@Override public synchronized void storeClosed(TopicMapStoreIF store)", "class_method_signature": "RDBMSTopicMapReference.storeClosed(TopicMapStoreIF store)", "testcase": false, "constructor": false}, {"identifier": "writeReport", "parameters": "(java.io.Writer out, boolean dumpCaches)", "modifiers": "public", "return": "void", "signature": "void writeReport(java.io.Writer out, boolean dumpCaches)", "full_signature": "public void writeReport(java.io.Writer out, boolean dumpCaches)", "class_method_signature": "RDBMSTopicMapReference.writeReport(java.io.Writer out, boolean dumpCaches)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/impl/rdbms/RDBMSTopicMapReference.java"}, "focal_method": {"identifier": "setTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void setTitle(String title) {\n    super.setTitle(title);\n    TopicMapStoreIF store = null;\n    try {\n      store = createStore(false);\n      TopicMap topicmap = (TopicMap) store.getTopicMap();\n      topicmap.setTitle(title);\n      store.commit();\n    } finally {\n      if (store != null) {\n        store.close();\n      }\n    }\n  }", "signature": "void setTitle(String title)", "full_signature": "@Override public void setTitle(String title)", "class_method_signature": "RDBMSTopicMapReference.setTitle(String title)", "testcase": false, "constructor": false, "invocations": ["setTitle", "createStore", "getTopicMap", "setTitle", "commit", "close"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}