{"test_class": {"identifier": "ArimaSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/x13/ArimaSpecTest.java"}, "test_case": {"identifier": "testSetQUpperBound", "parameters": "()", "modifiers": "@Test(expected = X13Exception.class) public", "return": "void", "body": "@Test(expected = X13Exception.class)\n    public void testSetQUpperBound() {\n        ArimaSpec expected = new ArimaSpec();\n        expected.setQ(8);\n    }", "signature": "void testSetQUpperBound()", "full_signature": "@Test(expected = X13Exception.class) public void testSetQUpperBound()", "class_method_signature": "ArimaSpecTest.testSetQUpperBound()", "testcase": true, "constructor": false, "invocations": ["setQ"]}, "focal_class": {"identifier": "ArimaSpec", "superclass": "extends DefaultArimaSpec", "interfaces": "", "fields": [{"original_string": "public static final int MAXP=6, MAXD=2, MAXQ=6, MAXBP=1, MAXBD=1, MAXBQ=1;", "modifier": "public static final", "type": "int", "declarator": "MAXP=6", "var_name": "MAXP"}], "methods": [{"identifier": "ArimaSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArimaSpec()", "full_signature": "public  ArimaSpec()", "class_method_signature": "ArimaSpec.ArimaSpec()", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "ArimaSpec", "signature": "ArimaSpec clone()", "full_signature": "@Override public ArimaSpec clone()", "class_method_signature": "ArimaSpec.clone()", "testcase": false, "constructor": false}, {"identifier": "setP", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setP(int value)", "full_signature": "@Override public void setP(int value)", "class_method_signature": "ArimaSpec.setP(int value)", "testcase": false, "constructor": false}, {"identifier": "setD", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setD(int value)", "full_signature": "@Override public void setD(int value)", "class_method_signature": "ArimaSpec.setD(int value)", "testcase": false, "constructor": false}, {"identifier": "setQ", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setQ(int value)", "full_signature": "@Override public void setQ(int value)", "class_method_signature": "ArimaSpec.setQ(int value)", "testcase": false, "constructor": false}, {"identifier": "setBP", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setBP(int value)", "full_signature": "@Override public void setBP(int value)", "class_method_signature": "ArimaSpec.setBP(int value)", "testcase": false, "constructor": false}, {"identifier": "setBD", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setBD(int value)", "full_signature": "@Override public void setBD(int value)", "class_method_signature": "ArimaSpec.setBD(int value)", "testcase": false, "constructor": false}, {"identifier": "setBQ", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "signature": "void setBQ(int value)", "full_signature": "@Override public void setBQ(int value)", "class_method_signature": "ArimaSpec.setBQ(int value)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/x13/ArimaSpec.java"}, "focal_method": {"identifier": "setQ", "parameters": "(int value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setQ(int value) {\n        if (value > MAXQ) {\n            throw new X13Exception(\"Q must be <= \"+Integer.toString(MAXQ));\n        }\n        super.setQ(value);\n    }", "signature": "void setQ(int value)", "full_signature": "@Override public void setQ(int value)", "class_method_signature": "ArimaSpec.setQ(int value)", "testcase": false, "constructor": false, "invocations": ["toString", "setQ"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}