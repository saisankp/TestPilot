{"test_class": {"identifier": "PropertyUtilsTest", "superclass": "extends UtilityClassTest<PropertyUtils>", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/PropertyUtilsTest.java"}, "test_case": {"identifier": "testCombineLists", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"LocalVariableName\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"LocalVariableName\")\n  public void testCombineLists() {\n    ObservableList<String> a = FXCollections.observableArrayList(\"a\");\n    ObservableList<String> b = FXCollections.observableArrayList(\"b\");\n    ObservableList<String> combine = PropertyUtils.combineLists(a, b);\n    assertEquals(2, combine.size());\n    assertEquals(a.get(0), combine.get(0));\n    assertEquals(b.get(0), combine.get(1));\n  }", "signature": "void testCombineLists()", "full_signature": "@Test @SuppressWarnings(\"LocalVariableName\") public void testCombineLists()", "class_method_signature": "PropertyUtilsTest.testCombineLists()", "testcase": true, "constructor": false, "invocations": ["observableArrayList", "observableArrayList", "combineLists", "assertEquals", "size", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "PropertyUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Property, Binding> bindings = new WeakHashMap<>();", "modifier": "private static final", "type": "Map<Property, Binding>", "declarator": "bindings = new WeakHashMap<>()", "var_name": "bindings"}], "methods": [{"identifier": "PropertyUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertyUtils()", "full_signature": "private  PropertyUtils()", "class_method_signature": "PropertyUtils.PropertyUtils()", "testcase": false, "constructor": true}, {"identifier": "bindBidirectionalWithConverter", "parameters": "(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "modifiers": "public static", "return": "void", "signature": "void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "full_signature": "public static void bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "class_method_signature": "PropertyUtils.bindBidirectionalWithConverter(\n      Property<T> sourceProperty,\n      Property<U> bindingTarget,\n      Function<? super T, ? extends U> t2uConverter,\n      Function<? super U, ? extends T> u2tConverter)", "testcase": false, "constructor": false}, {"identifier": "bindWithConverter", "parameters": "(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "modifiers": "public static", "return": "void", "signature": "void bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "full_signature": "public static void bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "class_method_signature": "PropertyUtils.bindWithConverter(\n      Property<T> firstProperty,\n      Property<U> secondProperty,\n      Function<U, T> u2tConverter)", "testcase": false, "constructor": false}, {"identifier": "bindToMapBidirectionally", "parameters": "(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "modifiers": "public static", "return": "void", "signature": "void bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "full_signature": "public static void bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "class_method_signature": "PropertyUtils.bindToMapBidirectionally(Property<T> property,\n                                                                  ObservableMap<K, V> map,\n                                                                  K key,\n                                                                  Function<V, T> v2t)", "testcase": false, "constructor": false}, {"identifier": "combineLists", "parameters": "(ObservableList<T> first, ObservableList<T> second)", "modifiers": "public static", "return": "ObservableList<T>", "signature": "ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "full_signature": "public static ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "class_method_signature": "PropertyUtils.combineLists(ObservableList<T> first, ObservableList<T> second)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/PropertyUtils.java"}, "focal_method": {"identifier": "combineLists", "parameters": "(ObservableList<T> first, ObservableList<T> second)", "modifiers": "public static", "return": "ObservableList<T>", "body": "public static <T> ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second) {\n    ObservableList<T> combine = FXCollections.observableArrayList();\n    ListChangeListener<? super T> listener = c -> {\n      while (c.next()) {\n        if (c.wasAdded()) {\n          combine.addAll(c.getAddedSubList());\n        } else if (c.wasRemoved()) {\n          // Only remove the actual elements that were removed from the list\n          // Otherwise all instances of an element would be removed, which is not the desired behavior\n          c.getRemoved().forEach(e -> combine.removeIf(t -> e == t));\n        }\n      }\n    };\n    combine.addAll(first);\n    combine.addAll(second);\n    first.addListener(listener);\n    second.addListener(listener);\n    return combine;\n  }", "signature": "ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "full_signature": "public static ObservableList<T> combineLists(ObservableList<T> first, ObservableList<T> second)", "class_method_signature": "PropertyUtils.combineLists(ObservableList<T> first, ObservableList<T> second)", "testcase": false, "constructor": false, "invocations": ["observableArrayList", "next", "wasAdded", "addAll", "getAddedSubList", "wasRemoved", "forEach", "getRemoved", "removeIf", "addAll", "addAll", "addListener", "addListener"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}