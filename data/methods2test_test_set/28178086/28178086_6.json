{"test_class": {"identifier": "GenericIndexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FileSystem JIM_FS;", "modifier": "private static", "type": "FileSystem", "declarator": "JIM_FS", "var_name": "JIM_FS"}, {"original_string": "private final Index sampleIndex = Index.builder()\n            .name(\"my_workspace\")\n            .item(new Index.Key(SA_MULTI, \"SAProcessing-1\"), new Index.Value(\"SAProcessing-1\", false, \"hello world\"))\n            .item(new Index.Key(MOD_DOC_TRAMO, \"TramoDoc-1\"), new Index.Value(\"TramoDoc-1\", false, null))\n            .item(new Index.Key(SA_DOC_X13, \"X13Doc-1\"), new Index.Value(\"X13Doc-1\", false, null))\n            .item(new Index.Key(UTIL_VAR, \"Vars-1\"), new Index.Value(\"Vars-1\", false, null))\n            .item(new Index.Key(SA_SPEC_TRAMOSEATS, \"TramoSeatsSpec-1\"), new Index.Value(\"TramoSeatsSpec-1\", false, null))\n            .item(new Index.Key(SA_SPEC_X13, \"X13Spec-1\"), new Index.Value(\"X13Spec-1\", false, null))\n            .item(new Index.Key(MOD_SPEC_REGARIMA, \"RegArimaSpec-1\"), new Index.Value(\"RegArimaSpec-1\", false, null))\n            .item(new Index.Key(MOD_SPEC_TRAMO, \"TramoSpec-1\"), new Index.Value(\"TramoSpec-1\", false, null))\n            .item(new Index.Key(SA_DOC_TRAMOSEATS, \"TramoSeatsDoc-1\"), new Index.Value(\"TramoSeatsDoc-1\", false, null))\n            .item(new Index.Key(MOD_DOC_REGARIMA, \"RegArimaDoc-1\"), new Index.Value(\"RegArimaDoc-1\", false, null))\n            .item(new Index.Key(UTIL_CAL, \"Calendars\"), new Index.Value(\"Calendars\", false, null))\n            .build();", "modifier": "private final", "type": "Index", "declarator": "sampleIndex = Index.builder()\n            .name(\"my_workspace\")\n            .item(new Index.Key(SA_MULTI, \"SAProcessing-1\"), new Index.Value(\"SAProcessing-1\", false, \"hello world\"))\n            .item(new Index.Key(MOD_DOC_TRAMO, \"TramoDoc-1\"), new Index.Value(\"TramoDoc-1\", false, null))\n            .item(new Index.Key(SA_DOC_X13, \"X13Doc-1\"), new Index.Value(\"X13Doc-1\", false, null))\n            .item(new Index.Key(UTIL_VAR, \"Vars-1\"), new Index.Value(\"Vars-1\", false, null))\n            .item(new Index.Key(SA_SPEC_TRAMOSEATS, \"TramoSeatsSpec-1\"), new Index.Value(\"TramoSeatsSpec-1\", false, null))\n            .item(new Index.Key(SA_SPEC_X13, \"X13Spec-1\"), new Index.Value(\"X13Spec-1\", false, null))\n            .item(new Index.Key(MOD_SPEC_REGARIMA, \"RegArimaSpec-1\"), new Index.Value(\"RegArimaSpec-1\", false, null))\n            .item(new Index.Key(MOD_SPEC_TRAMO, \"TramoSpec-1\"), new Index.Value(\"TramoSpec-1\", false, null))\n            .item(new Index.Key(SA_DOC_TRAMOSEATS, \"TramoSeatsDoc-1\"), new Index.Value(\"TramoSeatsDoc-1\", false, null))\n            .item(new Index.Key(MOD_DOC_REGARIMA, \"RegArimaDoc-1\"), new Index.Value(\"RegArimaDoc-1\", false, null))\n            .item(new Index.Key(UTIL_CAL, \"Calendars\"), new Index.Value(\"Calendars\", false, null))\n            .build()", "var_name": "sampleIndex"}], "file": "demetra-workspace/src/test/java/internal/workspace/file/GenericIndexerTest.java"}, "test_case": {"identifier": "testLoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoad() throws IOException {\n        Path sampleFile = newGenericSample();\n        try (Indexer indexer = new GenericIndexer(sampleFile, FileWorkspaceImpl.getRootFolder(sampleFile))) {\n            assertThat(indexer.loadIndex()).isEqualTo(sampleIndex);\n        }\n    }", "signature": "void testLoad()", "full_signature": "@Test public void testLoad()", "class_method_signature": "GenericIndexerTest.testLoad()", "testcase": true, "constructor": false, "invocations": ["newGenericSample", "getRootFolder", "isEqualTo", "assertThat", "loadIndex"]}, "focal_class": {"identifier": "GenericIndexer", "superclass": "", "interfaces": "implements Indexer", "fields": [{"original_string": "private final Path file;", "modifier": "private final", "type": "Path", "declarator": "file", "var_name": "file"}, {"original_string": "private final Path rootFolder;", "modifier": "private final", "type": "Path", "declarator": "rootFolder", "var_name": "rootFolder"}, {"original_string": "private static final Xml.Parser<XmlGenericWorkspace> PARSER;", "modifier": "private static final", "type": "Xml.Parser<XmlGenericWorkspace>", "declarator": "PARSER", "var_name": "PARSER"}, {"original_string": "private static final Xml.Formatter<XmlGenericWorkspace> FORMATTER;", "modifier": "private static final", "type": "Xml.Formatter<XmlGenericWorkspace>", "declarator": "FORMATTER", "var_name": "FORMATTER"}, {"original_string": "private static final Index.Key SINGLE_CAL_GENERIC_KEY = new Index.Key(WorkspaceFamily.UTIL_CAL, \"Calendars\");", "modifier": "private static final", "type": "Index.Key", "declarator": "SINGLE_CAL_GENERIC_KEY = new Index.Key(WorkspaceFamily.UTIL_CAL, \"Calendars\")", "var_name": "SINGLE_CAL_GENERIC_KEY"}, {"original_string": "private static final Index.Value SINGLE_CAL_GENERIC_VALUE = new Index.Value(\"Calendars\", false, null);", "modifier": "private static final", "type": "Index.Value", "declarator": "SINGLE_CAL_GENERIC_VALUE = new Index.Value(\"Calendars\", false, null)", "var_name": "SINGLE_CAL_GENERIC_VALUE"}], "methods": [{"identifier": "isValid", "parameters": "(Path file)", "modifiers": "static", "return": "boolean", "signature": "boolean isValid(Path file)", "full_signature": "static boolean isValid(Path file)", "class_method_signature": "GenericIndexer.isValid(Path file)", "testcase": false, "constructor": false}, {"identifier": "GenericIndexer", "parameters": "(Path file, Path rootFolder)", "modifiers": "", "return": "", "signature": " GenericIndexer(Path file, Path rootFolder)", "full_signature": "  GenericIndexer(Path file, Path rootFolder)", "class_method_signature": "GenericIndexer.GenericIndexer(Path file, Path rootFolder)", "testcase": false, "constructor": true}, {"identifier": "checkId", "parameters": "(Index.Key key)", "modifiers": "@Override public", "return": "void", "signature": "void checkId(Index.Key key)", "full_signature": "@Override public void checkId(Index.Key key)", "class_method_signature": "GenericIndexer.checkId(Index.Key key)", "testcase": false, "constructor": false}, {"identifier": "loadIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index", "signature": "Index loadIndex()", "full_signature": "@Override public Index loadIndex()", "class_method_signature": "GenericIndexer.loadIndex()", "testcase": false, "constructor": false}, {"identifier": "storeIndex", "parameters": "(Index index)", "modifiers": "@Override public", "return": "void", "signature": "void storeIndex(Index index)", "full_signature": "@Override public void storeIndex(Index index)", "class_method_signature": "GenericIndexer.storeIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "GenericIndexer.close()", "testcase": false, "constructor": false}, {"identifier": "xmlToIndex", "parameters": "(XmlGenericWorkspace xml, Path rootFolder)", "modifiers": "private static", "return": "Index", "signature": "Index xmlToIndex(XmlGenericWorkspace xml, Path rootFolder)", "full_signature": "private static Index xmlToIndex(XmlGenericWorkspace xml, Path rootFolder)", "class_method_signature": "GenericIndexer.xmlToIndex(XmlGenericWorkspace xml, Path rootFolder)", "testcase": false, "constructor": false}, {"identifier": "getIndexKey", "parameters": "(XmlGenericWorkspaceItem xml)", "modifiers": "private static", "return": "Index.Key", "signature": "Index.Key getIndexKey(XmlGenericWorkspaceItem xml)", "full_signature": "private static Index.Key getIndexKey(XmlGenericWorkspaceItem xml)", "class_method_signature": "GenericIndexer.getIndexKey(XmlGenericWorkspaceItem xml)", "testcase": false, "constructor": false}, {"identifier": "getIndexValue", "parameters": "(XmlGenericWorkspaceItem xml)", "modifiers": "private static", "return": "Index.Value", "signature": "Index.Value getIndexValue(XmlGenericWorkspaceItem xml)", "full_signature": "private static Index.Value getIndexValue(XmlGenericWorkspaceItem xml)", "class_method_signature": "GenericIndexer.getIndexValue(XmlGenericWorkspaceItem xml)", "testcase": false, "constructor": false}, {"identifier": "indexToXml", "parameters": "(Index index, Path rootFolder)", "modifiers": "private static", "return": "XmlGenericWorkspace", "signature": "XmlGenericWorkspace indexToXml(Index index, Path rootFolder)", "full_signature": "private static XmlGenericWorkspace indexToXml(Index index, Path rootFolder)", "class_method_signature": "GenericIndexer.indexToXml(Index index, Path rootFolder)", "testcase": false, "constructor": false}, {"identifier": "indexEntriesToXml", "parameters": "(Map<Index.Key, Index.Value> entries)", "modifiers": "private static", "return": "XmlGenericWorkspaceItem[]", "signature": "XmlGenericWorkspaceItem[] indexEntriesToXml(Map<Index.Key, Index.Value> entries)", "full_signature": "private static XmlGenericWorkspaceItem[] indexEntriesToXml(Map<Index.Key, Index.Value> entries)", "class_method_signature": "GenericIndexer.indexEntriesToXml(Map<Index.Key, Index.Value> entries)", "testcase": false, "constructor": false}, {"identifier": "unmarshalIndex", "parameters": "(Path file)", "modifiers": "private static", "return": "XmlGenericWorkspace", "signature": "XmlGenericWorkspace unmarshalIndex(Path file)", "full_signature": "private static XmlGenericWorkspace unmarshalIndex(Path file)", "class_method_signature": "GenericIndexer.unmarshalIndex(Path file)", "testcase": false, "constructor": false}, {"identifier": "marshalIndex", "parameters": "(Path file, XmlGenericWorkspace jaxbElement)", "modifiers": "private static", "return": "void", "signature": "void marshalIndex(Path file, XmlGenericWorkspace jaxbElement)", "full_signature": "private static void marshalIndex(Path file, XmlGenericWorkspace jaxbElement)", "class_method_signature": "GenericIndexer.marshalIndex(Path file, XmlGenericWorkspace jaxbElement)", "testcase": false, "constructor": false}, {"identifier": "pushCalendar", "parameters": "(Path rootFolder, Index.Builder index)", "modifiers": "private static", "return": "void", "signature": "void pushCalendar(Path rootFolder, Index.Builder index)", "full_signature": "private static void pushCalendar(Path rootFolder, Index.Builder index)", "class_method_signature": "GenericIndexer.pushCalendar(Path rootFolder, Index.Builder index)", "testcase": false, "constructor": false}, {"identifier": "pullCalendar", "parameters": "(Path rootFolder, Index index)", "modifiers": "private static", "return": "Index", "signature": "Index pullCalendar(Path rootFolder, Index index)", "full_signature": "private static Index pullCalendar(Path rootFolder, Index index)", "class_method_signature": "GenericIndexer.pullCalendar(Path rootFolder, Index index)", "testcase": false, "constructor": false}], "file": "demetra-workspace/src/main/java/internal/workspace/file/GenericIndexer.java"}, "focal_method": {"identifier": "loadIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index", "body": "@Override\n    public Index loadIndex() throws IOException {\n        return xmlToIndex(unmarshalIndex(file), rootFolder);\n    }", "signature": "Index loadIndex()", "full_signature": "@Override public Index loadIndex()", "class_method_signature": "GenericIndexer.loadIndex()", "testcase": false, "constructor": false, "invocations": ["xmlToIndex", "unmarshalIndex"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}