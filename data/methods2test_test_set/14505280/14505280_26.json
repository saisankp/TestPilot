{"test_class": {"identifier": "StaticRegexGeocoderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\t@Qualifier(\"staticRegexGeocoderService\")\n\tprivate StaticRegexGeocoderService service;", "modifier": "@Autowired\n\t@Qualifier(\"staticRegexGeocoderService\")\n\tprivate", "type": "StaticRegexGeocoderService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\t@Qualifier(\"BooischotShort\")\n\tprivate StaticRegexGeocoderLocationInfo booischotShort;", "modifier": "@Autowired\n\t@Qualifier(\"BooischotShort\")\n\tprivate", "type": "StaticRegexGeocoderLocationInfo", "declarator": "booischotShort", "var_name": "booischotShort"}, {"original_string": "@Autowired\n\t@Qualifier(\"Booischot\")\n\tprivate StaticRegexGeocoderLocationInfo booischot;", "modifier": "@Autowired\n\t@Qualifier(\"Booischot\")\n\tprivate", "type": "StaticRegexGeocoderLocationInfo", "declarator": "booischot", "var_name": "booischot"}, {"original_string": "@Autowired\n\t@Qualifier(\"BooischotStrict\")\n\tprivate StaticRegexGeocoderLocationInfo booischotStrict;", "modifier": "@Autowired\n\t@Qualifier(\"BooischotStrict\")\n\tprivate", "type": "StaticRegexGeocoderLocationInfo", "declarator": "booischotStrict", "var_name": "booischotStrict"}], "file": "plugin/geocoder/geocoder/src/test/java/org/geomajas/plugin/geocoder/service/StaticRegexGeocoderServiceTest.java"}, "test_case": {"identifier": "testGetOneLocationStrict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetOneLocationStrict() throws Exception {\n\t\tList<String> list = new ArrayList<String>();\n\t\tGetLocationResult result;\n\n\t\t// all details\n\t\tlist.clear();\n\t\tlist.add(\"Belgi\u00eb\");\n\t\tlist.add(\"Antwerpen\");\n\t\tlist.add(\"Booischot\");\n\t\tresult = service.getLocation(booischotStrict, list);\n\t\tAssert.assertNotNull(result);\n\n\t\t// another alternative skips a level\n\t\tlist.clear();\n\t\tlist.add(\"Antwerpen\");\n\t\tlist.add(\"Booischot\");\n\t\tresult = service.getLocation(booischotStrict, list);\n\t\tAssert.assertNull(result);\n\n\t\t// another alternative with too many details\n\t\tlist.clear();\n\t\tlist.add(\"Belgi\u00eb\");\n\t\tlist.add(\"Antwerpen\");\n\t\tlist.add(\"Booischot\");\n\t\tlist.add(\"Broekmansstraat\");\n\t\tresult = service.getLocation(booischotStrict, list);\n\t\tAssert.assertNull(result);\n\n\t\t// another alternative with an optional bit skipped\n\t\tlist.clear();\n\t\tlist.add(\"Belgi\u00eb\");\n\t\tlist.add(\"Booischot\");\n\t\tresult = service.getLocation(booischotStrict, list);\n\t\tAssert.assertNotNull(result);\n\n\t\t// another alternative with too little lines\n\t\tlist.clear();\n\t\tlist.add(\"Belgi\u00eb\");\n\t\tresult = service.getLocation(booischotStrict, list);\n\t\tAssert.assertNull(result);\n\t}", "signature": "void testGetOneLocationStrict()", "full_signature": "@Test public void testGetOneLocationStrict()", "class_method_signature": "StaticRegexGeocoderServiceTest.testGetOneLocationStrict()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "add", "add", "getLocation", "assertNotNull", "clear", "add", "add", "getLocation", "assertNull", "clear", "add", "add", "add", "add", "getLocation", "assertNull", "clear", "add", "add", "getLocation", "assertNotNull", "clear", "add", "getLocation", "assertNull"]}, "focal_class": {"identifier": "StaticRegexGeocoderService", "superclass": "", "interfaces": "implements GeocoderService", "fields": [{"original_string": "@NotNull\n\tprivate StaticRegexGeocoderInfo geocoderInfo;", "modifier": "@NotNull\n\tprivate", "type": "StaticRegexGeocoderInfo", "declarator": "geocoderInfo", "var_name": "geocoderInfo"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverterService", "var_name": "dtoConverterService"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}, {"original_string": "private String name = \"static-regex\";", "modifier": "private", "type": "String", "declarator": "name = \"static-regex\"", "var_name": "name"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "StaticRegexGeocoderService.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Api public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Api public void setName(String name)", "class_method_signature": "StaticRegexGeocoderService.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "setGeocoderInfo", "parameters": "(StaticRegexGeocoderInfo geocoderInfo)", "modifiers": "@Api public", "return": "void", "signature": "void setGeocoderInfo(StaticRegexGeocoderInfo geocoderInfo)", "full_signature": "@Api public void setGeocoderInfo(StaticRegexGeocoderInfo geocoderInfo)", "class_method_signature": "StaticRegexGeocoderService.setGeocoderInfo(StaticRegexGeocoderInfo geocoderInfo)", "testcase": false, "constructor": false}, {"identifier": "initCrs", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void initCrs()", "full_signature": "@PostConstruct protected void initCrs()", "class_method_signature": "StaticRegexGeocoderService.initCrs()", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "public CoordinateReferenceSystem getCrs()", "class_method_signature": "StaticRegexGeocoderService.getCrs()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale ignore)", "modifiers": "public", "return": "GetLocationResult[]", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "full_signature": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "class_method_signature": "StaticRegexGeocoderService.getLocation(List<String> location, int maxAlternatives, Locale ignore)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(StaticRegexGeocoderLocationInfo test, List<String> location)", "modifiers": "", "return": "GetLocationResult", "signature": "GetLocationResult getLocation(StaticRegexGeocoderLocationInfo test, List<String> location)", "full_signature": " GetLocationResult getLocation(StaticRegexGeocoderLocationInfo test, List<String> location)", "class_method_signature": "StaticRegexGeocoderService.getLocation(StaticRegexGeocoderLocationInfo test, List<String> location)", "testcase": false, "constructor": false}], "file": "plugin/geocoder/geocoder/src/main/java/org/geomajas/plugin/geocoder/service/StaticRegexGeocoderService.java"}, "focal_method": {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale ignore)", "modifiers": "public", "return": "GetLocationResult[]", "body": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore) {\n\t\tGetLocationResult result = null;\n\t\tfor (StaticRegexGeocoderLocationInfo test : geocoderInfo.getLocations()) {\n\t\t\tresult = getLocation(test, location);\n\t\t\tif (null != result) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (null != result) {\n\t\t\treturn new GetLocationResult[]{result};\n\t\t}\n\t\treturn null;\n\t}", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "full_signature": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "class_method_signature": "StaticRegexGeocoderService.getLocation(List<String> location, int maxAlternatives, Locale ignore)", "testcase": false, "constructor": false, "invocations": ["getLocations", "getLocation"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}