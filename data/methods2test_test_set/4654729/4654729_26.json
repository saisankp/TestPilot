{"test_class": {"identifier": "DefaultClassScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultClassScanner defaultClassScanner;", "modifier": "", "type": "DefaultClassScanner", "declarator": "defaultClassScanner", "var_name": "defaultClassScanner"}, {"original_string": "@Mock\n    ClassScanner parent;", "modifier": "@Mock", "type": "ClassScanner", "declarator": "parent", "var_name": "parent"}, {"original_string": "@Mock\n    GenericFilter<URI> sourceDirFilter;", "modifier": "@Mock", "type": "GenericFilter<URI>", "declarator": "sourceDirFilter", "var_name": "sourceDirFilter"}, {"original_string": "@Mock\n    GenericFilter<String> classNameFilter;", "modifier": "@Mock", "type": "GenericFilter<String>", "declarator": "classNameFilter", "var_name": "classNameFilter"}, {"original_string": "@Captor\n    ArgumentCaptor<URI> sourceDirFilterParameter;", "modifier": "@Captor", "type": "ArgumentCaptor<URI>", "declarator": "sourceDirFilterParameter", "var_name": "sourceDirFilterParameter"}, {"original_string": "@Captor\n    ArgumentCaptor<String> classNameFilterParameter;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "classNameFilterParameter", "var_name": "classNameFilterParameter"}], "file": "core/src/test/java/com/github/jsr330/scanning/DefaultClassScannerTest.java"}, "test_case": {"identifier": "scanWithParentAndFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scanWithParentAndFilter() throws Exception {\n        boolean scannedJUnit = false;\n        boolean scannedTest = false;\n        \n        defaultClassScanner = new DefaultClassScanner(parent, sourceDirFilter, classNameFilter);\n        Map<String, Class<?>> classes = defaultClassScanner.scan(Thread.currentThread().getContextClassLoader());\n        \n        assertTrue(classes.containsKey(Test.class.getName()));\n        verify(parent).scan(Thread.currentThread().getContextClassLoader());\n        verify(sourceDirFilter, atLeast(1)).filter(sourceDirFilterParameter.capture());\n        verify(classNameFilter, atLeast(1)).filter(classNameFilterParameter.capture());\n        \n        for (URI uri : sourceDirFilterParameter.getAllValues()) {\n            if (uri.toURL().toExternalForm().matches(\".*junit-.*\\\\.jar\")) {\n                scannedJUnit = true;\n                break;\n            }\n        }\n        if (!scannedJUnit) {\n            fail();\n        }\n        \n        for (String name : classNameFilterParameter.getAllValues()) {\n            if (name.equals(Test.class.getName())) {\n                scannedTest = true;\n                break;\n            }\n        }\n        if (!scannedTest) {\n            fail();\n        }\n    }", "signature": "void scanWithParentAndFilter()", "full_signature": "@Test public void scanWithParentAndFilter()", "class_method_signature": "DefaultClassScannerTest.scanWithParentAndFilter()", "testcase": true, "constructor": false, "invocations": ["scan", "getContextClassLoader", "currentThread", "assertTrue", "containsKey", "getName", "scan", "verify", "getContextClassLoader", "currentThread", "filter", "verify", "atLeast", "capture", "filter", "verify", "atLeast", "capture", "getAllValues", "matches", "toExternalForm", "toURL", "fail", "getAllValues", "equals", "getName", "fail"]}, "focal_class": {"identifier": "DefaultClassScanner", "superclass": "", "interfaces": "implements ClassScanner", "fields": [{"original_string": "private static final Pattern FILE_SEPARATOR_REGEX = Pattern.compile(\"\\\\\" + System.getProperty(\"file.separator\"));", "modifier": "private static final", "type": "Pattern", "declarator": "FILE_SEPARATOR_REGEX = Pattern.compile(\"\\\\\" + System.getProperty(\"file.separator\"))", "var_name": "FILE_SEPARATOR_REGEX"}, {"original_string": "private static final Pattern ENTRY_SEPARATOR_REGEX = Pattern.compile(\"/\");", "modifier": "private static final", "type": "Pattern", "declarator": "ENTRY_SEPARATOR_REGEX = Pattern.compile(\"/\")", "var_name": "ENTRY_SEPARATOR_REGEX"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultClassScanner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultClassScanner.class)", "var_name": "LOGGER"}, {"original_string": "protected ClassScanner parent;", "modifier": "protected", "type": "ClassScanner", "declarator": "parent", "var_name": "parent"}, {"original_string": "protected GenericFilter<URI> sourceDirFilter;", "modifier": "protected", "type": "GenericFilter<URI>", "declarator": "sourceDirFilter", "var_name": "sourceDirFilter"}, {"original_string": "protected GenericFilter<String> classNameFilter;", "modifier": "protected", "type": "GenericFilter<String>", "declarator": "classNameFilter", "var_name": "classNameFilter"}, {"original_string": "protected Map<String, Class<?>> classes;", "modifier": "protected", "type": "Map<String, Class<?>>", "declarator": "classes", "var_name": "classes"}, {"original_string": "protected Object monitor = new Object();", "modifier": "protected", "type": "Object", "declarator": "monitor = new Object()", "var_name": "monitor"}], "methods": [{"identifier": "DefaultClassScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultClassScanner()", "full_signature": "public  DefaultClassScanner()", "class_method_signature": "DefaultClassScanner.DefaultClassScanner()", "testcase": false, "constructor": true}, {"identifier": "DefaultClassScanner", "parameters": "(ClassScanner parent)", "modifiers": "public", "return": "", "signature": " DefaultClassScanner(ClassScanner parent)", "full_signature": "public  DefaultClassScanner(ClassScanner parent)", "class_method_signature": "DefaultClassScanner.DefaultClassScanner(ClassScanner parent)", "testcase": false, "constructor": true}, {"identifier": "DefaultClassScanner", "parameters": "(GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "modifiers": "public", "return": "", "signature": " DefaultClassScanner(GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "full_signature": "public  DefaultClassScanner(GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "class_method_signature": "DefaultClassScanner.DefaultClassScanner(GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "testcase": false, "constructor": true}, {"identifier": "DefaultClassScanner", "parameters": "(ClassScanner parent, GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "modifiers": "public", "return": "", "signature": " DefaultClassScanner(ClassScanner parent, GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "full_signature": "public  DefaultClassScanner(ClassScanner parent, GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "class_method_signature": "DefaultClassScanner.DefaultClassScanner(ClassScanner parent, GenericFilter<URI> sourceDirFilter, GenericFilter<String> classNameFilter)", "testcase": false, "constructor": true}, {"identifier": "scan", "parameters": "(ClassLoader loader)", "modifiers": "@Override public", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> scan(ClassLoader loader)", "full_signature": "@Override public Map<String, Class<?>> scan(ClassLoader loader)", "class_method_signature": "DefaultClassScanner.scan(ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "traverseJar", "parameters": "(String base, URL url, ClassLoader loader, Map<String, Class<?>> classes)", "modifiers": "protected", "return": "void", "signature": "void traverseJar(String base, URL url, ClassLoader loader, Map<String, Class<?>> classes)", "full_signature": "protected void traverseJar(String base, URL url, ClassLoader loader, Map<String, Class<?>> classes)", "class_method_signature": "DefaultClassScanner.traverseJar(String base, URL url, ClassLoader loader, Map<String, Class<?>> classes)", "testcase": false, "constructor": false}, {"identifier": "traverseFile", "parameters": "(String base, File file, ClassLoader loader, Map<String, Class<?>> classes)", "modifiers": "protected", "return": "void", "signature": "void traverseFile(String base, File file, ClassLoader loader, Map<String, Class<?>> classes)", "full_signature": "protected void traverseFile(String base, File file, ClassLoader loader, Map<String, Class<?>> classes)", "class_method_signature": "DefaultClassScanner.traverseFile(String base, File file, ClassLoader loader, Map<String, Class<?>> classes)", "testcase": false, "constructor": false}, {"identifier": "createClass", "parameters": "(ClassLoader loader, Map<String, Class<?>> classes, String name)", "modifiers": "protected", "return": "void", "signature": "void createClass(ClassLoader loader, Map<String, Class<?>> classes, String name)", "full_signature": "protected void createClass(ClassLoader loader, Map<String, Class<?>> classes, String name)", "class_method_signature": "DefaultClassScanner.createClass(ClassLoader loader, Map<String, Class<?>> classes, String name)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/scanning/DefaultClassScanner.java"}, "focal_method": {"identifier": "scan", "parameters": "(ClassLoader loader)", "modifiers": "@Override public", "return": "Map<String, Class<?>>", "body": "@Override\n    public Map<String, Class<?>> scan(ClassLoader loader) {\n        Enumeration<URL> urls;\n        URL url;\n        String tmp;\n        Map<String, Class<?>> parentClasses;\n        File file;\n        URI uri;\n        \n        synchronized (monitor) {\n            if (classes == null) {\n                classes = new TreeMap<String, Class<?>>();\n                \n                if (parent != null) {\n                    if ((parentClasses = parent.scan(loader)) != null) {\n                        classes.putAll(parentClasses);\n                    }\n                }\n                \n                try {\n                    urls = loader.getResources(\"META-INF\");\n                    while (urls.hasMoreElements()) {\n                        url = urls.nextElement();\n                        tmp = url.toExternalForm();\n                        tmp = tmp.substring(0, tmp.length() - 8);\n                        LOGGER.debug(\"listClasses - source={}\", tmp);\n                        \n                        try {\n                            if (tmp.startsWith(\"file:\")) {\n                                uri = new URI(tmp);\n                                if (sourceDirFilter == null || sourceDirFilter != null && sourceDirFilter.filter(uri)) {\n                                    file = new File(uri);\n                                    traverseFile(file.getAbsolutePath(), file, loader, classes);\n                                }\n                            } else if (tmp.startsWith(\"jar:\")) {\n                                uri = new URI(tmp.substring(4, tmp.length() - 2));\n                                if (sourceDirFilter == null || sourceDirFilter != null && sourceDirFilter.filter(uri)) {\n                                    file = new File(uri);\n                                    traverseJar(file.getAbsolutePath(), file.toURI().toURL(), loader, classes);\n                                }\n                            }\n                        } catch (URISyntaxException exception) {\n                            LOGGER.debug(\"error while generating URI\", exception);\n                        }\n                    }\n                } catch (IOException exception) {\n                    LOGGER.debug(\"error while traversing jar\", exception);\n                }\n            }\n        }\n        \n        return classes;\n    }", "signature": "Map<String, Class<?>> scan(ClassLoader loader)", "full_signature": "@Override public Map<String, Class<?>> scan(ClassLoader loader)", "class_method_signature": "DefaultClassScanner.scan(ClassLoader loader)", "testcase": false, "constructor": false, "invocations": ["scan", "putAll", "getResources", "hasMoreElements", "nextElement", "toExternalForm", "substring", "length", "debug", "startsWith", "filter", "traverseFile", "getAbsolutePath", "startsWith", "substring", "length", "filter", "traverseJar", "getAbsolutePath", "toURL", "toURI", "debug", "debug"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}