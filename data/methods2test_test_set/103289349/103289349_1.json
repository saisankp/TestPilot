{"test_class": {"identifier": "PrimitiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int PRIMITIVE_INT = 1;", "modifier": "private static final", "type": "int", "declarator": "PRIMITIVE_INT = 1", "var_name": "PRIMITIVE_INT"}, {"original_string": "private static final long PRIMITIVE_LONG = 2222L;", "modifier": "private static final", "type": "long", "declarator": "PRIMITIVE_LONG = 2222L", "var_name": "PRIMITIVE_LONG"}, {"original_string": "private static final double PRIMITIVE_DOUBLE = 33.3D;", "modifier": "private static final", "type": "double", "declarator": "PRIMITIVE_DOUBLE = 33.3D", "var_name": "PRIMITIVE_DOUBLE"}, {"original_string": "private static final float PRIMITIVE_FLOAT = 1.3F;", "modifier": "private static final", "type": "float", "declarator": "PRIMITIVE_FLOAT = 1.3F", "var_name": "PRIMITIVE_FLOAT"}, {"original_string": "private static final boolean PRIMITIVE_BOOLEAN = true;", "modifier": "private static final", "type": "boolean", "declarator": "PRIMITIVE_BOOLEAN = true", "var_name": "PRIMITIVE_BOOLEAN"}, {"original_string": "private static final byte PRIMITIVE_BYTE = new Byte(\"1\");", "modifier": "private static final", "type": "byte", "declarator": "PRIMITIVE_BYTE = new Byte(\"1\")", "var_name": "PRIMITIVE_BYTE"}, {"original_string": "private static final char PRIMITIVE_CHAR = 'a';", "modifier": "private static final", "type": "char", "declarator": "PRIMITIVE_CHAR = 'a'", "var_name": "PRIMITIVE_CHAR"}], "file": "example/src/test/java/cz/jcode/auto/value/step/builder/example/primitive/PrimitiveTest.java"}, "test_case": {"identifier": "lazyStep", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lazyStep() throws Exception {\n\n        AutoValue_Primitive.BuilderLazyStep primitiveBuilder = Primitive.lazyStep()\n                .primitiveInt(()->PRIMITIVE_INT)\n                .primitiveLong(()->PRIMITIVE_LONG)\n                .primitiveDouble(()->PRIMITIVE_DOUBLE)\n                .primitiveFloat(()->PRIMITIVE_FLOAT)\n                .primitiveBoolean(()->PRIMITIVE_BOOLEAN)\n                .primitiveByte(()->PRIMITIVE_BYTE)\n                .primitiveChar(()->PRIMITIVE_CHAR);\n\n        Primitive buildOne = primitiveBuilder.build();\n        assertPrimitive(buildOne);\n        Primitive buildTwo = primitiveBuilder.build();\n        assertEquals(buildOne, buildTwo);\n    }", "signature": "void lazyStep()", "full_signature": "@Test public void lazyStep()", "class_method_signature": "PrimitiveTest.lazyStep()", "testcase": true, "constructor": false, "invocations": ["primitiveChar", "primitiveByte", "primitiveBoolean", "primitiveFloat", "primitiveDouble", "primitiveLong", "primitiveInt", "lazyStep", "build", "assertPrimitive", "build", "assertEquals"]}, "focal_class": {"identifier": "Primitive", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "primitiveInt", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int primitiveInt()", "full_signature": "public abstract int primitiveInt()", "class_method_signature": "Primitive.primitiveInt()", "testcase": false, "constructor": false}, {"identifier": "primitiveLong", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long primitiveLong()", "full_signature": "public abstract long primitiveLong()", "class_method_signature": "Primitive.primitiveLong()", "testcase": false, "constructor": false}, {"identifier": "primitiveDouble", "parameters": "()", "modifiers": "public abstract", "return": "double", "signature": "double primitiveDouble()", "full_signature": "public abstract double primitiveDouble()", "class_method_signature": "Primitive.primitiveDouble()", "testcase": false, "constructor": false}, {"identifier": "primitiveFloat", "parameters": "()", "modifiers": "public abstract", "return": "float", "signature": "float primitiveFloat()", "full_signature": "public abstract float primitiveFloat()", "class_method_signature": "Primitive.primitiveFloat()", "testcase": false, "constructor": false}, {"identifier": "primitiveBoolean", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean primitiveBoolean()", "full_signature": "public abstract boolean primitiveBoolean()", "class_method_signature": "Primitive.primitiveBoolean()", "testcase": false, "constructor": false}, {"identifier": "primitiveByte", "parameters": "()", "modifiers": "public abstract", "return": "byte", "signature": "byte primitiveByte()", "full_signature": "public abstract byte primitiveByte()", "class_method_signature": "Primitive.primitiveByte()", "testcase": false, "constructor": false}, {"identifier": "primitiveChar", "parameters": "()", "modifiers": "public abstract", "return": "char", "signature": "char primitiveChar()", "full_signature": "public abstract char primitiveChar()", "class_method_signature": "Primitive.primitiveChar()", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "()", "modifiers": "public static", "return": "AutoValue_Primitive.PrimitiveIntStep", "signature": "AutoValue_Primitive.PrimitiveIntStep step()", "full_signature": "public static AutoValue_Primitive.PrimitiveIntStep step()", "class_method_signature": "Primitive.step()", "testcase": false, "constructor": false}, {"identifier": "lazyStep", "parameters": "()", "modifiers": "public static", "return": "AutoValue_Primitive.PrimitiveIntLazyStep", "signature": "AutoValue_Primitive.PrimitiveIntLazyStep lazyStep()", "full_signature": "public static AutoValue_Primitive.PrimitiveIntLazyStep lazyStep()", "class_method_signature": "Primitive.lazyStep()", "testcase": false, "constructor": false}], "file": "example/src/main/java/cz/jcode/auto/value/step/builder/example/primitive/Primitive.java"}, "focal_method": {"identifier": "lazyStep", "parameters": "()", "modifiers": "public static", "return": "AutoValue_Primitive.PrimitiveIntLazyStep", "body": "public static AutoValue_Primitive.PrimitiveIntLazyStep lazyStep() {\n        return AutoValue_Primitive.lazyStep();\n    }", "signature": "AutoValue_Primitive.PrimitiveIntLazyStep lazyStep()", "full_signature": "public static AutoValue_Primitive.PrimitiveIntLazyStep lazyStep()", "class_method_signature": "Primitive.lazyStep()", "testcase": false, "constructor": false, "invocations": ["lazyStep"]}, "repository": {"repo_id": 103289349, "url": "https://github.com/sopak/auto-value-step-builder", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 151, "license": "licensed"}}