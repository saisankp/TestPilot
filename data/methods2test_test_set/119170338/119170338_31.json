{"test_class": {"identifier": "SimpleFeatureVectorSimilarityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SimpleFeatureVectorSimilarity similarity;", "modifier": "", "type": "SimpleFeatureVectorSimilarity", "declarator": "similarity", "var_name": "similarity"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/similarity/SimpleFeatureVectorSimilarityTest.java"}, "test_case": {"identifier": "testComputeSimilarities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputeSimilarities() {\n    assertEquals(\n        1.0,\n        similarity.computeScore(\n            Lists.newArrayList(\n                TermId.of(\"HP:0000008\"),\n                TermId.of(\"HP:0000009\")),\n            Lists.newArrayList(TermId.of(\"HP:0000008\"))),\n        0.01);\n    assertEquals(\n        1.0,\n        similarity.computeScore(\n            Lists.newArrayList(\n                TermId.of(\"HP:0000008\"),\n                TermId.of(\"HP:0000009\")),\n            Lists.newArrayList(\n                TermId.of(\"HP:0000008\"),\n                TermId.of(\"HP:0000010\"))),\n        0.01);\n    assertEquals(\n        0.0,\n        similarity.computeScore(\n            Lists.newArrayList(TermId.of(\"HP:0000009\")),\n            Lists.newArrayList(\n                TermId.of(\"HP:0000008\"),\n                TermId.of(\"HP:0000010\"))),\n        0.01);\n  }", "signature": "void testComputeSimilarities()", "full_signature": "@Test public void testComputeSimilarities()", "class_method_signature": "SimpleFeatureVectorSimilarityTest.testComputeSimilarities()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeScore", "newArrayList", "of", "of", "newArrayList", "of", "assertEquals", "computeScore", "newArrayList", "of", "of", "newArrayList", "of", "of", "assertEquals", "computeScore", "newArrayList", "of", "newArrayList", "of", "of"]}, "focal_class": {"identifier": "SimpleFeatureVectorSimilarity", "superclass": "", "interfaces": "implements Similarity", "fields": [], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SimpleFeatureVectorSimilarity.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getParameters()", "full_signature": "@Override public String getParameters()", "class_method_signature": "SimpleFeatureVectorSimilarity.getParameters()", "testcase": false, "constructor": false}, {"identifier": "isSymmetric", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSymmetric()", "full_signature": "@Override public boolean isSymmetric()", "class_method_signature": "SimpleFeatureVectorSimilarity.isSymmetric()", "testcase": false, "constructor": false}, {"identifier": "computeScore", "parameters": "(Collection<TermId> query, Collection<TermId> target)", "modifiers": "@Override public", "return": "double", "signature": "double computeScore(Collection<TermId> query, Collection<TermId> target)", "full_signature": "@Override public double computeScore(Collection<TermId> query, Collection<TermId> target)", "class_method_signature": "SimpleFeatureVectorSimilarity.computeScore(Collection<TermId> query, Collection<TermId> target)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/similarity/SimpleFeatureVectorSimilarity.java"}, "focal_method": {"identifier": "computeScore", "parameters": "(Collection<TermId> query, Collection<TermId> target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double computeScore(Collection<TermId> query, Collection<TermId> target) {\n    return Sets.intersection(Sets.newHashSet(query), Sets.newHashSet(target)).size();\n  }", "signature": "double computeScore(Collection<TermId> query, Collection<TermId> target)", "full_signature": "@Override public double computeScore(Collection<TermId> query, Collection<TermId> target)", "class_method_signature": "SimpleFeatureVectorSimilarity.computeScore(Collection<TermId> query, Collection<TermId> target)", "testcase": false, "constructor": false, "invocations": ["size", "intersection", "newHashSet", "newHashSet"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}