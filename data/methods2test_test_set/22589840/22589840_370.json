{"test_class": {"identifier": "SettingsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String serverFqnd = \"www.myolat.org\";", "modifier": "private static", "type": "String", "declarator": "serverFqnd = \"www.myolat.org\"", "var_name": "serverFqnd"}, {"original_string": "private static String contextPath = \"/olat\";", "modifier": "private static", "type": "String", "declarator": "contextPath = \"/olat\"", "var_name": "contextPath"}, {"original_string": "private static String httpDefaultPort = \"80\";", "modifier": "private static", "type": "String", "declarator": "httpDefaultPort = \"80\"", "var_name": "httpDefaultPort"}, {"original_string": "private static String httpOtherPort = \"8080\";", "modifier": "private static", "type": "String", "declarator": "httpOtherPort = \"8080\"", "var_name": "httpOtherPort"}, {"original_string": "private static String httpsDefaultPort = \"443\";", "modifier": "private static", "type": "String", "declarator": "httpsDefaultPort = \"443\"", "var_name": "httpsDefaultPort"}, {"original_string": "private static String httpsOtherPort = \"8443\";", "modifier": "private static", "type": "String", "declarator": "httpsOtherPort = \"8443\"", "var_name": "httpsOtherPort"}], "file": "olat7.8/src/test/java/org/olat/system/commons/SettingsTest.java"}, "test_case": {"identifier": "testGetURIScheme", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetURIScheme() {\n        Settings settings = createHttpDefaultPortSettings();\n        String serverUriScheme = Settings.getURIScheme();\n        String expectedValue = \"http:\";\n        assertEquals(\"no :port appended if default http port 80 is used.\", expectedValue, serverUriScheme);\n\n        settings = createHttpOtherPortSettings();\n        serverUriScheme = Settings.getURIScheme();\n        expectedValue = \"http:\";\n        assertEquals(\"other :port appended.\", expectedValue, serverUriScheme);\n\n        settings = createHttpsDefaultPortSettings();\n        serverUriScheme = Settings.getURIScheme();\n        expectedValue = \"https:\";\n        assertEquals(\"no :port appended if default https port 443 is used.\", expectedValue, serverUriScheme);\n\n        settings = createHttpsOtherPortSettings();\n        serverUriScheme = Settings.getURIScheme();\n        expectedValue = \"https:\";\n        assertEquals(\"other :port appended.\", expectedValue, serverUriScheme);\n    }", "signature": "void testGetURIScheme()", "full_signature": "@Test public void testGetURIScheme()", "class_method_signature": "SettingsTest.testGetURIScheme()", "testcase": true, "constructor": false, "invocations": ["createHttpDefaultPortSettings", "getURIScheme", "assertEquals", "createHttpOtherPortSettings", "getURIScheme", "assertEquals", "createHttpsDefaultPortSettings", "getURIScheme", "assertEquals", "createHttpsOtherPortSettings", "getURIScheme", "assertEquals"]}, "focal_class": {"identifier": "Settings", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static boolean debug = false;", "modifier": "private static", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private static boolean allowLoadtestMode = false;", "modifier": "private static", "type": "boolean", "declarator": "allowLoadtestMode = false", "var_name": "allowLoadtestMode"}, {"original_string": "private static boolean readOnlyDebug = false;", "modifier": "private static", "type": "boolean", "declarator": "readOnlyDebug = false", "var_name": "readOnlyDebug"}, {"original_string": "private static boolean ajaxGloballyOnBoolean = false;", "modifier": "private static", "type": "boolean", "declarator": "ajaxGloballyOnBoolean = false", "var_name": "ajaxGloballyOnBoolean"}, {"original_string": "private static String guiThemeIdentifyer = \"default\";", "modifier": "private static", "type": "String", "declarator": "guiThemeIdentifyer = \"default\"", "var_name": "guiThemeIdentifyer"}, {"original_string": "private static Map<String, String> serverconfig = null;", "modifier": "private static", "type": "Map<String, String>", "declarator": "serverconfig = null", "var_name": "serverconfig"}, {"original_string": "private static int sessionTimeout = 0;", "modifier": "private static", "type": "int", "declarator": "sessionTimeout = 0", "var_name": "sessionTimeout"}, {"original_string": "private static List<Pattern> ajaxBlacklistPatterns = new ArrayList<Pattern>();", "modifier": "private static", "type": "List<Pattern>", "declarator": "ajaxBlacklistPatterns = new ArrayList<Pattern>()", "var_name": "ajaxBlacklistPatterns"}, {"original_string": "private static boolean jUnitTest;", "modifier": "private static", "type": "boolean", "declarator": "jUnitTest", "var_name": "jUnitTest"}, {"original_string": "private static final String KEY_SERVER_MODJK_ENABLED = \"server_modjk_enabled\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SERVER_MODJK_ENABLED = \"server_modjk_enabled\"", "var_name": "KEY_SERVER_MODJK_ENABLED"}, {"original_string": "private static ManagedPropertiesMessageCoordinator persistedProperties;", "modifier": "private static", "type": "ManagedPropertiesMessageCoordinator", "declarator": "persistedProperties", "var_name": "persistedProperties"}, {"original_string": "private static String applicationName;", "modifier": "private static", "type": "String", "declarator": "applicationName", "var_name": "applicationName"}, {"original_string": "private static String version;", "modifier": "private static", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private static String buildIdentifier;", "modifier": "private static", "type": "String", "declarator": "buildIdentifier", "var_name": "buildIdentifier"}, {"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static final String KEY_GUI_THEME_IDENTIFYER = \"layout.theme\";", "modifier": "private static final", "type": "String", "declarator": "KEY_GUI_THEME_IDENTIFYER = \"layout.theme\"", "var_name": "KEY_GUI_THEME_IDENTIFYER"}, {"original_string": "private static int nodeId;", "modifier": "private static", "type": "int", "declarator": "nodeId", "var_name": "nodeId"}, {"original_string": "private static String clusterMode;", "modifier": "private static", "type": "String", "declarator": "clusterMode", "var_name": "clusterMode"}, {"original_string": "private static Date buildDate;", "modifier": "private static", "type": "Date", "declarator": "buildDate", "var_name": "buildDate"}], "methods": [{"identifier": "Settings", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Settings()", "full_signature": "protected  Settings()", "class_method_signature": "Settings.Settings()", "testcase": false, "constructor": true}, {"identifier": "getBuildIdentifier", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBuildIdentifier()", "full_signature": "public static String getBuildIdentifier()", "class_method_signature": "Settings.getBuildIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getBuildDate", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date getBuildDate()", "full_signature": "public static Date getBuildDate()", "class_method_signature": "Settings.getBuildDate()", "testcase": false, "constructor": false}, {"identifier": "isDebuging", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isDebuging()", "full_signature": "public static boolean isDebuging()", "class_method_signature": "Settings.isDebuging()", "testcase": false, "constructor": false}, {"identifier": "isAjaxGloballyOn", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAjaxGloballyOn()", "full_signature": "public static boolean isAjaxGloballyOn()", "class_method_signature": "Settings.isAjaxGloballyOn()", "testcase": false, "constructor": false}, {"identifier": "isAllowLoadtestMode", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllowLoadtestMode()", "full_signature": "public static boolean isAllowLoadtestMode()", "class_method_signature": "Settings.isAllowLoadtestMode()", "testcase": false, "constructor": false}, {"identifier": "setAllowLoadtestMode", "parameters": "(boolean allowLoadtestMode)", "modifiers": "public", "return": "void", "signature": "void setAllowLoadtestMode(boolean allowLoadtestMode)", "full_signature": "public void setAllowLoadtestMode(boolean allowLoadtestMode)", "class_method_signature": "Settings.setAllowLoadtestMode(boolean allowLoadtestMode)", "testcase": false, "constructor": false}, {"identifier": "isReadOnlyDebug", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isReadOnlyDebug()", "full_signature": "public static boolean isReadOnlyDebug()", "class_method_signature": "Settings.isReadOnlyDebug()", "testcase": false, "constructor": false}, {"identifier": "setReadOnlyDebug", "parameters": "(boolean readOnlyDebug)", "modifiers": "public", "return": "void", "signature": "void setReadOnlyDebug(boolean readOnlyDebug)", "full_signature": "public void setReadOnlyDebug(boolean readOnlyDebug)", "class_method_signature": "Settings.setReadOnlyDebug(boolean readOnlyDebug)", "testcase": false, "constructor": false}, {"identifier": "setAjaxGloballyOn", "parameters": "(boolean ajaxGloballyOn)", "modifiers": "public", "return": "void", "signature": "void setAjaxGloballyOn(boolean ajaxGloballyOn)", "full_signature": "public void setAjaxGloballyOn(boolean ajaxGloballyOn)", "class_method_signature": "Settings.setAjaxGloballyOn(boolean ajaxGloballyOn)", "testcase": false, "constructor": false}, {"identifier": "setAjaxGloballyEnabled", "parameters": "(boolean ajaxGloballyOn)", "modifiers": "public static", "return": "void", "signature": "void setAjaxGloballyEnabled(boolean ajaxGloballyOn)", "full_signature": "public static void setAjaxGloballyEnabled(boolean ajaxGloballyOn)", "class_method_signature": "Settings.setAjaxGloballyEnabled(boolean ajaxGloballyOn)", "testcase": false, "constructor": false}, {"identifier": "getVersionId", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getVersionId()", "full_signature": "public static String getVersionId()", "class_method_signature": "Settings.getVersionId()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getVersion()", "full_signature": "public static String getVersion()", "class_method_signature": "Settings.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getFullVersionInfo", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getFullVersionInfo()", "full_signature": "public static String getFullVersionInfo()", "class_method_signature": "Settings.getFullVersionInfo()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "signature": "void setVersion(String version)", "full_signature": "public void setVersion(String version)", "class_method_signature": "Settings.setVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getServerconfig", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String getServerconfig(String key)", "full_signature": "public static String getServerconfig(String key)", "class_method_signature": "Settings.getServerconfig(String key)", "testcase": false, "constructor": false}, {"identifier": "setServerconfig", "parameters": "(Map<String, String> serverconfig)", "modifiers": "public", "return": "void", "signature": "void setServerconfig(Map<String, String> serverconfig)", "full_signature": "public void setServerconfig(Map<String, String> serverconfig)", "class_method_signature": "Settings.setServerconfig(Map<String, String> serverconfig)", "testcase": false, "constructor": false}, {"identifier": "setSessionTimeout", "parameters": "(int sessionTimeout)", "modifiers": "public", "return": "void", "signature": "void setSessionTimeout(int sessionTimeout)", "full_signature": "public void setSessionTimeout(int sessionTimeout)", "class_method_signature": "Settings.setSessionTimeout(int sessionTimeout)", "testcase": false, "constructor": false}, {"identifier": "getSessionTimeout", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getSessionTimeout()", "full_signature": "public static int getSessionTimeout()", "class_method_signature": "Settings.getSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "setDebug", "parameters": "(boolean debug)", "modifiers": "public", "return": "void", "signature": "void setDebug(boolean debug)", "full_signature": "public void setDebug(boolean debug)", "class_method_signature": "Settings.setDebug(boolean debug)", "testcase": false, "constructor": false}, {"identifier": "getGuiThemeIdentifyer", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getGuiThemeIdentifyer()", "full_signature": "public static String getGuiThemeIdentifyer()", "class_method_signature": "Settings.getGuiThemeIdentifyer()", "testcase": false, "constructor": false}, {"identifier": "setGuiThemeIdentifyer", "parameters": "(String guiThemeIdentifyer)", "modifiers": "public", "return": "void", "signature": "void setGuiThemeIdentifyer(String guiThemeIdentifyer)", "full_signature": "public void setGuiThemeIdentifyer(String guiThemeIdentifyer)", "class_method_signature": "Settings.setGuiThemeIdentifyer(String guiThemeIdentifyer)", "testcase": false, "constructor": false}, {"identifier": "isModjkEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isModjkEnabled()", "full_signature": "public static boolean isModjkEnabled()", "class_method_signature": "Settings.isModjkEnabled()", "testcase": false, "constructor": false}, {"identifier": "getURIScheme", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getURIScheme()", "full_signature": "public static String getURIScheme()", "class_method_signature": "Settings.getURIScheme()", "testcase": false, "constructor": false}, {"identifier": "isSecurePortAvailable", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isSecurePortAvailable()", "full_signature": "private static boolean isSecurePortAvailable()", "class_method_signature": "Settings.isSecurePortAvailable()", "testcase": false, "constructor": false}, {"identifier": "createServerURI", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String createServerURI()", "full_signature": "public static String createServerURI()", "class_method_signature": "Settings.createServerURI()", "testcase": false, "constructor": false}, {"identifier": "createURIPortPartWithDefaultPortCheck", "parameters": "(String configuredPort, int defaultPort)", "modifiers": "private static", "return": "String", "signature": "String createURIPortPartWithDefaultPortCheck(String configuredPort, int defaultPort)", "full_signature": "private static String createURIPortPartWithDefaultPortCheck(String configuredPort, int defaultPort)", "class_method_signature": "Settings.createURIPortPartWithDefaultPortCheck(String configuredPort, int defaultPort)", "testcase": false, "constructor": false}, {"identifier": "getServerContextPathURI", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getServerContextPathURI()", "full_signature": "public static String getServerContextPathURI()", "class_method_signature": "Settings.getServerContextPathURI()", "testcase": false, "constructor": false}, {"identifier": "isJUnitTest", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isJUnitTest()", "full_signature": "public static boolean isJUnitTest()", "class_method_signature": "Settings.isJUnitTest()", "testcase": false, "constructor": false}, {"identifier": "setJUnitTest", "parameters": "(boolean b)", "modifiers": "public static", "return": "void", "signature": "void setJUnitTest(boolean b)", "full_signature": "public static void setJUnitTest(boolean b)", "class_method_signature": "Settings.setJUnitTest(boolean b)", "testcase": false, "constructor": false}, {"identifier": "getApplicationName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getApplicationName()", "full_signature": "public static String getApplicationName()", "class_method_signature": "Settings.getApplicationName()", "testcase": false, "constructor": false}, {"identifier": "setApplicationName", "parameters": "(String applicationName)", "modifiers": "public", "return": "void", "signature": "void setApplicationName(String applicationName)", "full_signature": "public void setApplicationName(String applicationName)", "class_method_signature": "Settings.setApplicationName(String applicationName)", "testcase": false, "constructor": false}, {"identifier": "setNodeId", "parameters": "(int nodeId)", "modifiers": "public", "return": "void", "signature": "void setNodeId(int nodeId)", "full_signature": "public void setNodeId(int nodeId)", "class_method_signature": "Settings.setNodeId(int nodeId)", "testcase": false, "constructor": false}, {"identifier": "setClusterMode", "parameters": "(String clusterMode)", "modifiers": "public", "return": "void", "signature": "void setClusterMode(String clusterMode)", "full_signature": "public void setClusterMode(String clusterMode)", "class_method_signature": "Settings.setClusterMode(String clusterMode)", "testcase": false, "constructor": false}, {"identifier": "getClusterMode", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getClusterMode()", "full_signature": "public static String getClusterMode()", "class_method_signature": "Settings.getClusterMode()", "testcase": false, "constructor": false}, {"identifier": "getNodeInfo", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getNodeInfo()", "full_signature": "public static String getNodeInfo()", "class_method_signature": "Settings.getNodeInfo()", "testcase": false, "constructor": false}, {"identifier": "setAjaxBlacklistedUserAgents", "parameters": "(List<String> userAgents)", "modifiers": "public", "return": "void", "signature": "void setAjaxBlacklistedUserAgents(List<String> userAgents)", "full_signature": "public void setAjaxBlacklistedUserAgents(List<String> userAgents)", "class_method_signature": "Settings.setAjaxBlacklistedUserAgents(List<String> userAgents)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/system/commons/Settings.java"}, "focal_method": {"identifier": "getURIScheme", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getURIScheme() {\n        return (isSecurePortAvailable() ? \"https:\" : \"http:\");\n    }", "signature": "String getURIScheme()", "full_signature": "public static String getURIScheme()", "class_method_signature": "Settings.getURIScheme()", "testcase": false, "constructor": false, "invocations": ["isSecurePortAvailable"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}