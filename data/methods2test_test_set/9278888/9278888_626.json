{"test_class": {"identifier": "UnsafeArrayMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Object[] array = new Object[6];", "modifier": "", "type": "Object[]", "declarator": "array = new Object[6]", "var_name": "array"}, {"original_string": "UnsafeArrayMap.Builder<String, String> builder = UnsafeArrayMap.newBuilder();", "modifier": "", "type": "UnsafeArrayMap.Builder<String, String>", "declarator": "builder = UnsafeArrayMap.newBuilder()", "var_name": "builder"}], "file": "brave/src/test/java/brave/internal/collect/UnsafeArrayMapTest.java"}, "test_case": {"identifier": "equalValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void equalValues() {\n    array[0] = \"1\";\n    array[1] = \"1\";\n    array[2] = \"2\";\n    array[3] = \"2\";\n    array[4] = \"3\";\n    array[5] = \"3\";\n\n    Map<String, String> map = builder.build(array);\n    assertSize(map, 3);\n    assertBaseCase(map);\n\n    assertThat(map).containsOnly(\n        entry(\"1\", \"1\"),\n        entry(\"2\", \"2\"),\n        entry(\"3\", \"3\")\n    );\n    assertThat(map).hasToString(\n        \"UnsafeArrayMap{1=1,2=2,3=3}\"\n    );\n\n    assertThat(map.get(\"1\")).isEqualTo(\"1\");\n    assertThat(map.get(\"2\")).isEqualTo(\"2\");\n    assertThat(map.get(\"3\")).isEqualTo(\"3\");\n  }", "signature": "void equalValues()", "full_signature": "@Test public void equalValues()", "class_method_signature": "UnsafeArrayMapTest.equalValues()", "testcase": true, "constructor": false, "invocations": ["build", "assertSize", "assertBaseCase", "containsOnly", "assertThat", "entry", "entry", "entry", "hasToString", "assertThat", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "UnsafeArrayMap", "superclass": "", "interfaces": "implements Map<K, V>", "fields": [{"original_string": "static final int MAX_FILTERED_KEYS = LongBitSet.MAX_SIZE;", "modifier": "static final", "type": "int", "declarator": "MAX_FILTERED_KEYS = LongBitSet.MAX_SIZE", "var_name": "MAX_FILTERED_KEYS"}, {"original_string": "final Object[] array;", "modifier": "final", "type": "Object[]", "declarator": "array", "var_name": "array"}, {"original_string": "final int toIndex, size;", "modifier": "final", "type": "int", "declarator": "toIndex", "var_name": "toIndex"}, {"original_string": "final long filteredBitSet;", "modifier": "final", "type": "long", "declarator": "filteredBitSet", "var_name": "filteredBitSet"}], "methods": [{"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder<K, V>", "signature": "Builder<K, V> newBuilder()", "full_signature": "public static Builder<K, V> newBuilder()", "class_method_signature": "UnsafeArrayMap.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "UnsafeArrayMap", "parameters": "(Object[] array, int toIndex, long filteredBitSet)", "modifiers": "", "return": "", "signature": " UnsafeArrayMap(Object[] array, int toIndex, long filteredBitSet)", "full_signature": "  UnsafeArrayMap(Object[] array, int toIndex, long filteredBitSet)", "class_method_signature": "UnsafeArrayMap.UnsafeArrayMap(Object[] array, int toIndex, long filteredBitSet)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "UnsafeArrayMap.size()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object o)", "full_signature": "@Override public boolean containsKey(Object o)", "class_method_signature": "UnsafeArrayMap.containsKey(Object o)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(Object o)", "full_signature": "@Override public boolean containsValue(Object o)", "class_method_signature": "UnsafeArrayMap.containsValue(Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object o)", "modifiers": "@Override public", "return": "V", "signature": "V get(Object o)", "full_signature": "@Override public V get(Object o)", "class_method_signature": "UnsafeArrayMap.get(Object o)", "testcase": false, "constructor": false}, {"identifier": "arrayIndexOfKey", "parameters": "(Object o)", "modifiers": "", "return": "int", "signature": "int arrayIndexOfKey(Object o)", "full_signature": " int arrayIndexOfKey(Object o)", "class_method_signature": "UnsafeArrayMap.arrayIndexOfKey(Object o)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(int i)", "modifiers": "", "return": "K", "signature": "K key(int i)", "full_signature": " K key(int i)", "class_method_signature": "UnsafeArrayMap.key(int i)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(int i)", "modifiers": "", "return": "V", "signature": "V value(int i)", "full_signature": " V value(int i)", "class_method_signature": "UnsafeArrayMap.value(int i)", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "UnsafeArrayMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "UnsafeArrayMap.values()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Map.Entry<K, V>>", "signature": "Set<Map.Entry<K, V>> entrySet()", "full_signature": "@Override public Set<Map.Entry<K, V>> entrySet()", "class_method_signature": "UnsafeArrayMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "UnsafeArrayMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "@Override public V put(K key, V value)", "class_method_signature": "UnsafeArrayMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public V remove(Object key)", "class_method_signature": "UnsafeArrayMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends K, ? extends V> m)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends K, ? extends V> m)", "full_signature": "@Override public void putAll(Map<? extends K, ? extends V> m)", "class_method_signature": "UnsafeArrayMap.putAll(Map<? extends K, ? extends V> m)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "UnsafeArrayMap.clear()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "UnsafeArrayMap.toString()", "testcase": false, "constructor": false}, {"identifier": "setFilteredKey", "parameters": "(long filteredKeys, int i)", "modifiers": "static", "return": "long", "signature": "long setFilteredKey(long filteredKeys, int i)", "full_signature": "static long setFilteredKey(long filteredKeys, int i)", "class_method_signature": "UnsafeArrayMap.setFilteredKey(long filteredKeys, int i)", "testcase": false, "constructor": false}, {"identifier": "isFilteredKey", "parameters": "(long filteredKeys, int i)", "modifiers": "static", "return": "boolean", "signature": "boolean isFilteredKey(long filteredKeys, int i)", "full_signature": "static boolean isFilteredKey(long filteredKeys, int i)", "class_method_signature": "UnsafeArrayMap.isFilteredKey(long filteredKeys, int i)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/collect/UnsafeArrayMap.java"}, "focal_method": {"identifier": "get", "parameters": "(Object o)", "modifiers": "@Override public", "return": "V", "body": "@Override public V get(Object o) {\n    if (o == null) return null; // null keys are not allowed\n    int i = arrayIndexOfKey(o);\n    return i != -1 ? value(i + 1) : null;\n  }", "signature": "V get(Object o)", "full_signature": "@Override public V get(Object o)", "class_method_signature": "UnsafeArrayMap.get(Object o)", "testcase": false, "constructor": false, "invocations": ["arrayIndexOfKey", "value"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}