{"test_class": {"identifier": "ConditionChainChoiceStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IResolveDependencyStrategy chainIdStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "chainIdStrategy", "var_name": "chainIdStrategy"}, {"original_string": "private IMessageProcessor messageProcessorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessorMock", "var_name": "messageProcessorMock"}, {"original_string": "private Object trueId = new Object();", "modifier": "private", "type": "Object", "declarator": "trueId = new Object()", "var_name": "trueId"}, {"original_string": "private Object falseId = new Object();", "modifier": "private", "type": "Object", "declarator": "falseId = new Object()", "var_name": "falseId"}], "file": "CoreFeatures/MessageProcessing/ConditionChainChoiceStrategy/src/test/java/info/smart_tools/smartactors/message_processing/condition_chain_choice_strategy/ConditionChainChoiceStrategyTest.java"}, "test_case": {"identifier": "Should_wrapExceptionThrownByIOC", "parameters": "()", "modifiers": "@Test(expected = ChainChoiceException.class) public", "return": "void", "body": "@Test(expected = ChainChoiceException.class)\n    public void Should_wrapExceptionThrownByIOC()\n            throws Exception {\n        when(chainIdStrategy.resolve(any())).thenThrow(ResolveDependencyStrategyException.class);\n\n        IChainChoiceStrategy strategy = new ConditionChainChoiceStrategy();\n\n        strategy.chooseChain(messageProcessorMock);\n    }", "signature": "void Should_wrapExceptionThrownByIOC()", "full_signature": "@Test(expected = ChainChoiceException.class) public void Should_wrapExceptionThrownByIOC()", "class_method_signature": "ConditionChainChoiceStrategyTest.Should_wrapExceptionThrownByIOC()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "resolve", "any", "chooseChain"]}, "focal_class": {"identifier": "ConditionChainChoiceStrategy", "superclass": "", "interfaces": "implements IChainChoiceStrategy", "fields": [{"original_string": "private final IFieldName chainConditionFN;", "modifier": "private final", "type": "IFieldName", "declarator": "chainConditionFN", "var_name": "chainConditionFN"}, {"original_string": "private final IFieldName trueChainFN;", "modifier": "private final", "type": "IFieldName", "declarator": "trueChainFN", "var_name": "trueChainFN"}, {"original_string": "private final IFieldName falseChainFN;", "modifier": "private final", "type": "IFieldName", "declarator": "falseChainFN", "var_name": "falseChainFN"}], "methods": [{"identifier": "ConditionChainChoiceStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConditionChainChoiceStrategy()", "full_signature": "public  ConditionChainChoiceStrategy()", "class_method_signature": "ConditionChainChoiceStrategy.ConditionChainChoiceStrategy()", "testcase": false, "constructor": true}, {"identifier": "chooseChain", "parameters": "(final IMessageProcessor messageProcessor)", "modifiers": "@Override public", "return": "Object", "signature": "Object chooseChain(final IMessageProcessor messageProcessor)", "full_signature": "@Override public Object chooseChain(final IMessageProcessor messageProcessor)", "class_method_signature": "ConditionChainChoiceStrategy.chooseChain(final IMessageProcessor messageProcessor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ConditionChainChoiceStrategy/src/main/java/info/smart_tools/smartactors/message_processing/condition_chain_choice_strategy/ConditionChainChoiceStrategy.java"}, "focal_method": {"identifier": "chooseChain", "parameters": "(final IMessageProcessor messageProcessor)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object chooseChain(final IMessageProcessor messageProcessor) throws ChainChoiceException {\n        try {\n            if ((Boolean) messageProcessor.getMessage().getValue(chainConditionFN)) {\n                Object name = messageProcessor.getSequence().getCurrentReceiverArguments().getValue(trueChainFN);\n                return IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), name);\n            }\n\n            Object name = messageProcessor.getSequence().getCurrentReceiverArguments().getValue(falseChainFN);\n            return IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), name);\n        } catch (Exception e) {\n            throw new ChainChoiceException(\"Could not execute condition chain choice strategy.\");\n        }\n    }", "signature": "Object chooseChain(final IMessageProcessor messageProcessor)", "full_signature": "@Override public Object chooseChain(final IMessageProcessor messageProcessor)", "class_method_signature": "ConditionChainChoiceStrategy.chooseChain(final IMessageProcessor messageProcessor)", "testcase": false, "constructor": false, "invocations": ["getValue", "getMessage", "getValue", "getCurrentReceiverArguments", "getSequence", "resolve", "getOrAdd", "getValue", "getCurrentReceiverArguments", "getSequence", "resolve", "getOrAdd"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}