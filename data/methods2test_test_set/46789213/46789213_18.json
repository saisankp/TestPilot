{"test_class": {"identifier": "TestSpdz2kResourcePoolImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Spdz2kResourcePool<CompUInt128> resourcePool = new Spdz2kResourcePoolImpl<>(1, 2,\n      null, new Spdz2kOpenedValueStoreImpl<>(),\n      new Spdz2kDummyDataSupplier<>(1, 2, null, new CompUInt128Factory()),\n      new CompUInt128Factory());", "modifier": "private final", "type": "Spdz2kResourcePool<CompUInt128>", "declarator": "resourcePool = new Spdz2kResourcePoolImpl<>(1, 2,\n      null, new Spdz2kOpenedValueStoreImpl<>(),\n      new Spdz2kDummyDataSupplier<>(1, 2, null, new CompUInt128Factory()),\n      new CompUInt128Factory())", "var_name": "resourcePool"}], "file": "suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/resource/TestSpdz2kResourcePoolImpl.java"}, "test_case": {"identifier": "testGetDrbgBeforeInit", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n  public void testGetDrbgBeforeInit() {\n    resourcePool.getRandomGenerator();\n  }", "signature": "void testGetDrbgBeforeInit()", "full_signature": "@Test(expected = IllegalStateException.class) public void testGetDrbgBeforeInit()", "class_method_signature": "TestSpdz2kResourcePoolImpl.testGetDrbgBeforeInit()", "testcase": true, "constructor": false, "invocations": ["getRandomGenerator"]}, "focal_class": {"identifier": "Spdz2kResourcePoolImpl", "superclass": "extends ResourcePoolImpl", "interfaces": "implements Spdz2kResourcePool<PlainT>", "fields": [{"original_string": "private final int effectiveBitLength;", "modifier": "private final", "type": "int", "declarator": "effectiveBitLength", "var_name": "effectiveBitLength"}, {"original_string": "private final OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> storage;", "modifier": "private final", "type": "OpenedValueStore<Spdz2kSInt<PlainT>, PlainT>", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Spdz2kDataSupplier<PlainT> supplier;", "modifier": "private final", "type": "Spdz2kDataSupplier<PlainT>", "declarator": "supplier", "var_name": "supplier"}, {"original_string": "private final CompUIntFactory<PlainT> factory;", "modifier": "private final", "type": "CompUIntFactory<PlainT>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final ByteSerializer<PlainT> rawSerializer;", "modifier": "private final", "type": "ByteSerializer<PlainT>", "declarator": "rawSerializer", "var_name": "rawSerializer"}, {"original_string": "private final Drbg localDrbg;", "modifier": "private final", "type": "Drbg", "declarator": "localDrbg", "var_name": "localDrbg"}, {"original_string": "private Drbg drbg;", "modifier": "private", "type": "Drbg", "declarator": "drbg", "var_name": "drbg"}], "methods": [{"identifier": "Spdz2kResourcePoolImpl", "parameters": "(int myId, int noOfPlayers, Drbg drbg,\n      OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> storage,\n      Spdz2kDataSupplier<PlainT> supplier, CompUIntFactory<PlainT> factory)", "modifiers": "public", "return": "", "signature": " Spdz2kResourcePoolImpl(int myId, int noOfPlayers, Drbg drbg,\n      OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> storage,\n      Spdz2kDataSupplier<PlainT> supplier, CompUIntFactory<PlainT> factory)", "full_signature": "public  Spdz2kResourcePoolImpl(int myId, int noOfPlayers, Drbg drbg,\n      OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> storage,\n      Spdz2kDataSupplier<PlainT> supplier, CompUIntFactory<PlainT> factory)", "class_method_signature": "Spdz2kResourcePoolImpl.Spdz2kResourcePoolImpl(int myId, int noOfPlayers, Drbg drbg,\n      OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> storage,\n      Spdz2kDataSupplier<PlainT> supplier, CompUIntFactory<PlainT> factory)", "testcase": false, "constructor": true}, {"identifier": "getMaxBitLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxBitLength()", "full_signature": "@Override public int getMaxBitLength()", "class_method_signature": "Spdz2kResourcePoolImpl.getMaxBitLength()", "testcase": false, "constructor": false}, {"identifier": "getOpenedValueStore", "parameters": "()", "modifiers": "@Override public", "return": "OpenedValueStore<Spdz2kSInt<PlainT>, PlainT>", "signature": "OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> getOpenedValueStore()", "full_signature": "@Override public OpenedValueStore<Spdz2kSInt<PlainT>, PlainT> getOpenedValueStore()", "class_method_signature": "Spdz2kResourcePoolImpl.getOpenedValueStore()", "testcase": false, "constructor": false}, {"identifier": "getDataSupplier", "parameters": "()", "modifiers": "@Override public", "return": "Spdz2kDataSupplier<PlainT>", "signature": "Spdz2kDataSupplier<PlainT> getDataSupplier()", "full_signature": "@Override public Spdz2kDataSupplier<PlainT> getDataSupplier()", "class_method_signature": "Spdz2kResourcePoolImpl.getDataSupplier()", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "@Override public", "return": "CompUIntFactory<PlainT>", "signature": "CompUIntFactory<PlainT> getFactory()", "full_signature": "@Override public CompUIntFactory<PlainT> getFactory()", "class_method_signature": "Spdz2kResourcePoolImpl.getFactory()", "testcase": false, "constructor": false}, {"identifier": "initializeJointRandomness", "parameters": "(Supplier<Network> networkSupplier,\n      Function<byte[], Drbg> drbgGenerator, int seedLength)", "modifiers": "@Override public", "return": "void", "signature": "void initializeJointRandomness(Supplier<Network> networkSupplier,\n      Function<byte[], Drbg> drbgGenerator, int seedLength)", "full_signature": "@Override public void initializeJointRandomness(Supplier<Network> networkSupplier,\n      Function<byte[], Drbg> drbgGenerator, int seedLength)", "class_method_signature": "Spdz2kResourcePoolImpl.initializeJointRandomness(Supplier<Network> networkSupplier,\n      Function<byte[], Drbg> drbgGenerator, int seedLength)", "testcase": false, "constructor": false}, {"identifier": "getFieldDefinition", "parameters": "()", "modifiers": "@Override public", "return": "FieldDefinition", "signature": "FieldDefinition getFieldDefinition()", "full_signature": "@Override public FieldDefinition getFieldDefinition()", "class_method_signature": "Spdz2kResourcePoolImpl.getFieldDefinition()", "testcase": false, "constructor": false}, {"identifier": "getModulus", "parameters": "()", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger getModulus()", "full_signature": "@Override public BigInteger getModulus()", "class_method_signature": "Spdz2kResourcePoolImpl.getModulus()", "testcase": false, "constructor": false}, {"identifier": "getRandomGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Drbg", "signature": "Drbg getRandomGenerator()", "full_signature": "@Override public Drbg getRandomGenerator()", "class_method_signature": "Spdz2kResourcePoolImpl.getRandomGenerator()", "testcase": false, "constructor": false}, {"identifier": "getLocalRandomGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Drbg", "signature": "Drbg getLocalRandomGenerator()", "full_signature": "@Override public Drbg getLocalRandomGenerator()", "class_method_signature": "Spdz2kResourcePoolImpl.getLocalRandomGenerator()", "testcase": false, "constructor": false}, {"identifier": "runCoinTossing", "parameters": "(Computation<byte[], ProtocolBuilderNumeric> coinTossing,\n      Network network)", "modifiers": "private", "return": "byte[]", "signature": "byte[] runCoinTossing(Computation<byte[], ProtocolBuilderNumeric> coinTossing,\n      Network network)", "full_signature": "private byte[] runCoinTossing(Computation<byte[], ProtocolBuilderNumeric> coinTossing,\n      Network network)", "class_method_signature": "Spdz2kResourcePoolImpl.runCoinTossing(Computation<byte[], ProtocolBuilderNumeric> coinTossing,\n      Network network)", "testcase": false, "constructor": false}], "file": "suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/resource/Spdz2kResourcePoolImpl.java"}, "focal_method": {"identifier": "getRandomGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Drbg", "body": "@Override\n  public Drbg getRandomGenerator() {\n    if (drbg == null) {\n      throw new IllegalStateException(\"Joint drbg must be initialized before use\");\n    }\n    return drbg;\n  }", "signature": "Drbg getRandomGenerator()", "full_signature": "@Override public Drbg getRandomGenerator()", "class_method_signature": "Spdz2kResourcePoolImpl.getRandomGenerator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}