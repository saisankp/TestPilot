{"test_class": {"identifier": "SimilarityScoreSamplingTest", "superclass": "extends VegetableOntologyTestBase", "interfaces": "", "fields": [{"original_string": "private SimilarityScoreSampling scoreSampling;", "modifier": "private", "type": "SimilarityScoreSampling", "declarator": "scoreSampling", "var_name": "scoreSampling"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/scoredist/SimilarityScoreSamplingTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() {\n    // TODO: this logic should be moved into the library\n    Map<TermId, Integer> recipeToId = new HashMap<>();\n    Map<TermId, Set<TermId>> labels = new HashMap<>();\n    int nextId = 1;\n    for (VegetableRecipeAnnotation a : recipeAnnotations) {\n      if (!recipeToId.containsKey(a.getLabel())) {\n        recipeToId.put(a.getLabel(), nextId++);\n      }\n      TermId recipeId = a.getTermId();\n      if (!labels.containsKey(recipeId)) {\n        labels.put(recipeId, new HashSet<>());\n      }\n      final Set<TermId> termIds = labels.get(recipeId);\n      termIds.add(a.getTermId());\n    }\n\n    Map<Integer, ScoreDistribution> samplingResult = scoreSampling.performSampling();\n    assertEquals(1, samplingResult.size());\n    // todo add more testing of distribution\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SimilarityScoreSamplingTest.test()", "testcase": true, "constructor": false, "invocations": ["containsKey", "getLabel", "put", "getLabel", "getTermId", "containsKey", "put", "get", "add", "getTermId", "performSampling", "assertEquals", "size"]}, "focal_class": {"identifier": "SimilarityScoreSampling", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SimilarityScoreSampling.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SimilarityScoreSampling.class)", "var_name": "LOGGER"}, {"original_string": "private final Ontology ontology;", "modifier": "private final", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "private final Similarity similarity;", "modifier": "private final", "type": "Similarity", "declarator": "similarity", "var_name": "similarity"}, {"original_string": "private final ScoreSamplingOptions options;", "modifier": "private final", "type": "ScoreSamplingOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private final Map<TermId, ? extends Collection<TermId>> labels;", "modifier": "private final", "type": "Map<TermId, ? extends Collection<TermId>>", "declarator": "labels", "var_name": "labels"}], "methods": [{"identifier": "SimilarityScoreSampling", "parameters": "(Ontology ontology, Similarity similarity, ScoreSamplingOptions options, Map<TermId, ? extends Collection<TermId>> labels)", "modifiers": "public", "return": "", "signature": " SimilarityScoreSampling(Ontology ontology, Similarity similarity, ScoreSamplingOptions options, Map<TermId, ? extends Collection<TermId>> labels)", "full_signature": "public  SimilarityScoreSampling(Ontology ontology, Similarity similarity, ScoreSamplingOptions options, Map<TermId, ? extends Collection<TermId>> labels)", "class_method_signature": "SimilarityScoreSampling.SimilarityScoreSampling(Ontology ontology, Similarity similarity, ScoreSamplingOptions options, Map<TermId, ? extends Collection<TermId>> labels)", "testcase": false, "constructor": true}, {"identifier": "performSampling", "parameters": "()", "modifiers": "public", "return": "Map<Integer, ScoreDistribution>", "signature": "Map<Integer, ScoreDistribution> performSampling()", "full_signature": "public Map<Integer, ScoreDistribution> performSampling()", "class_method_signature": "SimilarityScoreSampling.performSampling()", "testcase": false, "constructor": false}, {"identifier": "performSamplingForTermCount", "parameters": "(Map<TermId, ? extends Collection<TermId>> labels, int numTerms)", "modifiers": "public", "return": "ScoreDistribution", "signature": "ScoreDistribution performSamplingForTermCount(Map<TermId, ? extends Collection<TermId>> labels, int numTerms)", "full_signature": "public ScoreDistribution performSamplingForTermCount(Map<TermId, ? extends Collection<TermId>> labels, int numTerms)", "class_method_signature": "SimilarityScoreSampling.performSamplingForTermCount(Map<TermId, ? extends Collection<TermId>> labels, int numTerms)", "testcase": false, "constructor": false}, {"identifier": "performComputation", "parameters": "(TermId objectId, Collection<TermId> terms, int numTerms)", "modifiers": "private", "return": "ObjectScoreDistribution", "signature": "ObjectScoreDistribution performComputation(TermId objectId, Collection<TermId> terms, int numTerms)", "full_signature": "private ObjectScoreDistribution performComputation(TermId objectId, Collection<TermId> terms, int numTerms)", "class_method_signature": "SimilarityScoreSampling.performComputation(TermId objectId, Collection<TermId> terms, int numTerms)", "testcase": false, "constructor": false}, {"identifier": "sampleScoreCumulativeRelFreq", "parameters": "(Collection<TermId> terms, int numTerms, int numIterations)", "modifiers": "private", "return": "TreeMap<Double, Double>", "signature": "TreeMap<Double, Double> sampleScoreCumulativeRelFreq(Collection<TermId> terms, int numTerms, int numIterations)", "full_signature": "private TreeMap<Double, Double> sampleScoreCumulativeRelFreq(Collection<TermId> terms, int numTerms, int numIterations)", "class_method_signature": "SimilarityScoreSampling.sampleScoreCumulativeRelFreq(Collection<TermId> terms, int numTerms, int numIterations)", "testcase": false, "constructor": false}, {"identifier": "selectRandomElements", "parameters": "(List<E> src, int count)", "modifiers": "private static", "return": "List<E>", "signature": "List<E> selectRandomElements(List<E> src, int count)", "full_signature": "private static List<E> selectRandomElements(List<E> src, int count)", "class_method_signature": "SimilarityScoreSampling.selectRandomElements(List<E> src, int count)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/scoredist/SimilarityScoreSampling.java"}, "focal_method": {"identifier": "performSampling", "parameters": "()", "modifiers": "public", "return": "Map<Integer, ScoreDistribution>", "body": "public Map<Integer, ScoreDistribution> performSampling() {\n    Map<Integer, ScoreDistribution> result = new HashMap<>();\n    for (int numTerms = options.getMinNumTerms();\n        numTerms <= options.getMaxNumTerms();\n        ++numTerms) {\n      result.put(numTerms, performSamplingForTermCount(labels, numTerms));\n    }\n    return result;\n  }", "signature": "Map<Integer, ScoreDistribution> performSampling()", "full_signature": "public Map<Integer, ScoreDistribution> performSampling()", "class_method_signature": "SimilarityScoreSampling.performSampling()", "testcase": false, "constructor": false, "invocations": ["getMinNumTerms", "getMaxNumTerms", "put", "performSamplingForTermCount"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}