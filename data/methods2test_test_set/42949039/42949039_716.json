{"test_class": {"identifier": "SimpleExponentialBackoffStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleExponentialBackoffStrategy simpleExponentialBackoffStrategy;", "modifier": "private", "type": "SimpleExponentialBackoffStrategy", "declarator": "simpleExponentialBackoffStrategy", "var_name": "simpleExponentialBackoffStrategy"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/SimpleExponentialBackoffStrategyTest.java"}, "test_case": {"identifier": "assertExponentialBackoff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertExponentialBackoff()\n    {\n        long delayBeforeNextRetry = simpleExponentialBackoffStrategy.delayBeforeNextRetry(null, new AmazonClientException(\"test\"), 2);\n        Assert.assertEquals(4000l, delayBeforeNextRetry);\n    }", "signature": "void assertExponentialBackoff()", "full_signature": "@Test public void assertExponentialBackoff()", "class_method_signature": "SimpleExponentialBackoffStrategyTest.assertExponentialBackoff()", "testcase": true, "constructor": false, "invocations": ["delayBeforeNextRetry", "assertEquals"]}, "focal_class": {"identifier": "SimpleExponentialBackoffStrategy", "superclass": "", "interfaces": "implements BackoffStrategy", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SimpleExponentialBackoffStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SimpleExponentialBackoffStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final long SECOND_IN_MS = 1000;", "modifier": "private static final", "type": "long", "declarator": "SECOND_IN_MS = 1000", "var_name": "SECOND_IN_MS"}], "methods": [{"identifier": "delayBeforeNextRetry", "parameters": "(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "modifiers": "@Override public", "return": "long", "signature": "long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "full_signature": "@Override public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "class_method_signature": "SimpleExponentialBackoffStrategy.delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/SimpleExponentialBackoffStrategy.java"}, "focal_method": {"identifier": "delayBeforeNextRetry", "parameters": "(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)\n    {\n        long delay = (long) Math.pow(2, retriesAttempted) * SECOND_IN_MS;\n        LOGGER.warn(\"delayBeforeNextRetryInMilliseconds={} retriesAttempted={}\", delay, retriesAttempted, exception);\n        return delay;\n    }", "signature": "long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "full_signature": "@Override public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "class_method_signature": "SimpleExponentialBackoffStrategy.delayBeforeNextRetry(AmazonWebServiceRequest originalRequest, AmazonClientException exception, int retriesAttempted)", "testcase": false, "constructor": false, "invocations": ["pow", "warn"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}