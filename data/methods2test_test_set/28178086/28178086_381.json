{"test_class": {"identifier": "FastArimaForecastsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final DataBlock x1, x2, x3;", "modifier": "static final", "type": "DataBlock", "declarator": "x1", "var_name": "x1"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/arima/estimation/FastArimaForecastsTest.java"}, "test_case": {"identifier": "testLinearProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLinearProcess() {\n        SarimaSpecification spec = new SarimaSpecification(12);\n        spec.airline();\n        spec.setBP(1);\n        SarimaModel arima = new SarimaModel(spec);\n        arima.setBPhi(1, -.9);\n        FastArimaForecasts fcasts = new FastArimaForecasts(arima, false);\n        int N=12;\n        double[] f1 = fcasts.forecasts(x1, N);\n        double[] f2 = fcasts.forecasts(x2, N);\n        double[] f3 = fcasts.forecasts(x3, N);\n        for (int i = 0; i < N; ++i) {\n            assertEquals(f3[i], f1[i] + f2[i], 1e-9);\n        }\n         N=60;\n        f1 = fcasts.forecasts(x1, N);\n        f2 = fcasts.forecasts(x2, N);\n        f3 = fcasts.forecasts(x3, N);\n        for (int i = 0; i < N; ++i) {\n            assertEquals(f3[i], f1[i] + f2[i], 1e-9);\n        }\n    }", "signature": "void testLinearProcess()", "full_signature": "@Test public void testLinearProcess()", "class_method_signature": "FastArimaForecastsTest.testLinearProcess()", "testcase": true, "constructor": false, "invocations": ["airline", "setBP", "setBPhi", "forecasts", "forecasts", "forecasts", "assertEquals", "forecasts", "forecasts", "forecasts", "assertEquals"]}, "focal_class": {"identifier": "FastArimaForecasts", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SsfArima ssf_;", "modifier": "private final", "type": "SsfArima", "declarator": "ssf_", "var_name": "ssf_"}, {"original_string": "private final BackFilter bar_;", "modifier": "private final", "type": "BackFilter", "declarator": "bar_", "var_name": "bar_"}, {"original_string": "private double mean, ssqErr;", "modifier": "private", "type": "double", "declarator": "mean", "var_name": "mean"}, {"original_string": "private boolean bmean;", "modifier": "private", "type": "boolean", "declarator": "bmean", "var_name": "bmean"}], "methods": [{"identifier": "getSsqErr", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSsqErr()", "full_signature": "public double getSsqErr()", "class_method_signature": "FastArimaForecasts.getSsqErr()", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMean()", "full_signature": "public double getMean()", "class_method_signature": "FastArimaForecasts.getMean()", "testcase": false, "constructor": false}, {"identifier": "FastArimaForecasts", "parameters": "(final IArimaModel model, boolean mean)", "modifiers": "public", "return": "", "signature": " FastArimaForecasts(final IArimaModel model, boolean mean)", "full_signature": "public  FastArimaForecasts(final IArimaModel model, boolean mean)", "class_method_signature": "FastArimaForecasts.FastArimaForecasts(final IArimaModel model, boolean mean)", "testcase": false, "constructor": true}, {"identifier": "fcasts", "parameters": "(SsfData sd, int nf)", "modifiers": "private", "return": "double[]", "signature": "double[] fcasts(SsfData sd, int nf)", "full_signature": "private double[] fcasts(SsfData sd, int nf)", "class_method_signature": "FastArimaForecasts.fcasts(SsfData sd, int nf)", "testcase": false, "constructor": false}, {"identifier": "forecasts", "parameters": "(double[] data, int nf)", "modifiers": "public", "return": "double[]", "signature": "double[] forecasts(double[] data, int nf)", "full_signature": "public double[] forecasts(double[] data, int nf)", "class_method_signature": "FastArimaForecasts.forecasts(double[] data, int nf)", "testcase": false, "constructor": false}, {"identifier": "forecasts", "parameters": "(IReadDataBlock data, int nf)", "modifiers": "public", "return": "double[]", "signature": "double[] forecasts(IReadDataBlock data, int nf)", "full_signature": "public double[] forecasts(IReadDataBlock data, int nf)", "class_method_signature": "FastArimaForecasts.forecasts(IReadDataBlock data, int nf)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/arima/estimation/FastArimaForecasts.java"}, "focal_method": {"identifier": "forecasts", "parameters": "(double[] data, int nf)", "modifiers": "public", "return": "double[]", "body": "public double[] forecasts(double[] data, int nf)\n    {\n\tSsfData sd = new SsfData(data, null);\n\treturn fcasts(sd, nf);\n    }", "signature": "double[] forecasts(double[] data, int nf)", "full_signature": "public double[] forecasts(double[] data, int nf)", "class_method_signature": "FastArimaForecasts.forecasts(double[] data, int nf)", "testcase": false, "constructor": false, "invocations": ["fcasts"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}