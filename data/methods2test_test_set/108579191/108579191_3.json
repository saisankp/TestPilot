{"test_class": {"identifier": "ModelAdapterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private ModelAdapter<TestModel> testModelModelAdapter;", "modifier": "private", "type": "ModelAdapter<TestModel>", "declarator": "testModelModelAdapter", "var_name": "testModelModelAdapter"}], "file": "reactiveandroid/src/test/java/com/reactiveandroid/internal/ModelAdapterTest.java"}, "test_case": {"identifier": "testPredefinedIdValueAfterSave", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPredefinedIdValueAfterSave() {\n        TestModel model = new TestModel(100L);\n        assertEquals(100L, model.id, 0);\n\n        testModelModelAdapter.save(model);\n\n        assertEquals(100L, model.id, 0);\n    }", "signature": "void testPredefinedIdValueAfterSave()", "full_signature": "@Test public void testPredefinedIdValueAfterSave()", "class_method_signature": "ModelAdapterTest.testPredefinedIdValueAfterSave()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "save", "assertEquals"]}, "focal_class": {"identifier": "ModelAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int INSERT_FAILED = -1;", "modifier": "public static final", "type": "int", "declarator": "INSERT_FAILED = -1", "var_name": "INSERT_FAILED"}, {"original_string": "private TableInfo tableInfo;", "modifier": "private", "type": "TableInfo", "declarator": "tableInfo", "var_name": "tableInfo"}, {"original_string": "private ModelCache<ModelClass> modelCache;", "modifier": "private", "type": "ModelCache<ModelClass>", "declarator": "modelCache", "var_name": "modelCache"}, {"original_string": "private SQLiteDatabase sqliteDatabase;", "modifier": "private", "type": "SQLiteDatabase", "declarator": "sqliteDatabase", "var_name": "sqliteDatabase"}], "methods": [{"identifier": "ModelAdapter", "parameters": "(@NonNull TableInfo tableInfo)", "modifiers": "public", "return": "", "signature": " ModelAdapter(@NonNull TableInfo tableInfo)", "full_signature": "public  ModelAdapter(@NonNull TableInfo tableInfo)", "class_method_signature": "ModelAdapter.ModelAdapter(@NonNull TableInfo tableInfo)", "testcase": false, "constructor": true}, {"identifier": "getTableInfo", "parameters": "()", "modifiers": "@NonNull public", "return": "TableInfo", "signature": "TableInfo getTableInfo()", "full_signature": "@NonNull public TableInfo getTableInfo()", "class_method_signature": "ModelAdapter.getTableInfo()", "testcase": false, "constructor": false}, {"identifier": "getModelCache", "parameters": "()", "modifiers": "@NonNull public", "return": "ModelCache<ModelClass>", "signature": "ModelCache<ModelClass> getModelCache()", "full_signature": "@NonNull public ModelCache<ModelClass> getModelCache()", "class_method_signature": "ModelAdapter.getModelCache()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(@NonNull Class<ModelClass> type, long id)", "modifiers": "@Nullable public", "return": "ModelClass", "signature": "ModelClass load(@NonNull Class<ModelClass> type, long id)", "full_signature": "@Nullable public ModelClass load(@NonNull Class<ModelClass> type, long id)", "class_method_signature": "ModelAdapter.load(@NonNull Class<ModelClass> type, long id)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@NonNull ModelClass model)", "modifiers": "@NonNull public", "return": "Long", "signature": "Long save(@NonNull ModelClass model)", "full_signature": "@NonNull public Long save(@NonNull ModelClass model)", "class_method_signature": "ModelAdapter.save(@NonNull ModelClass model)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull ModelClass model)", "modifiers": "public", "return": "void", "signature": "void delete(@NonNull ModelClass model)", "full_signature": "public void delete(@NonNull ModelClass model)", "class_method_signature": "ModelAdapter.delete(@NonNull ModelClass model)", "testcase": false, "constructor": false}, {"identifier": "loadFromCursor", "parameters": "(@NonNull ModelClass model, @NonNull Cursor cursor)", "modifiers": "public", "return": "void", "signature": "void loadFromCursor(@NonNull ModelClass model, @NonNull Cursor cursor)", "full_signature": "public void loadFromCursor(@NonNull ModelClass model, @NonNull Cursor cursor)", "class_method_signature": "ModelAdapter.loadFromCursor(@NonNull ModelClass model, @NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "getModelId", "parameters": "(@NonNull ModelClass model)", "modifiers": "@Nullable public", "return": "Long", "signature": "Long getModelId(@NonNull ModelClass model)", "full_signature": "@Nullable public Long getModelId(@NonNull ModelClass model)", "class_method_signature": "ModelAdapter.getModelId(@NonNull ModelClass model)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@NonNull ModelClass model, Long id)", "modifiers": "@NonNull private", "return": "Long", "signature": "Long insert(@NonNull ModelClass model, Long id)", "full_signature": "@NonNull private Long insert(@NonNull ModelClass model, Long id)", "class_method_signature": "ModelAdapter.insert(@NonNull ModelClass model, Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NonNull ModelClass model, Long id)", "modifiers": "private", "return": "void", "signature": "void update(@NonNull ModelClass model, Long id)", "full_signature": "private void update(@NonNull ModelClass model, Long id)", "class_method_signature": "ModelAdapter.update(@NonNull ModelClass model, Long id)", "testcase": false, "constructor": false}, {"identifier": "isModelExists", "parameters": "(Long id)", "modifiers": "private", "return": "boolean", "signature": "boolean isModelExists(Long id)", "full_signature": "private boolean isModelExists(Long id)", "class_method_signature": "ModelAdapter.isModelExists(Long id)", "testcase": false, "constructor": false}, {"identifier": "isIdIncremented", "parameters": "(Long id)", "modifiers": "private", "return": "boolean", "signature": "boolean isIdIncremented(Long id)", "full_signature": "private boolean isIdIncremented(Long id)", "class_method_signature": "ModelAdapter.isIdIncremented(Long id)", "testcase": false, "constructor": false}, {"identifier": "getModelFieldValue", "parameters": "(Class<?> fieldType, Cursor cursor, int columnIndex)", "modifiers": "private", "return": "Object", "signature": "Object getModelFieldValue(Class<?> fieldType, Cursor cursor, int columnIndex)", "full_signature": "private Object getModelFieldValue(Class<?> fieldType, Cursor cursor, int columnIndex)", "class_method_signature": "ModelAdapter.getModelFieldValue(Class<?> fieldType, Cursor cursor, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getOneToManyFieldValue", "parameters": "(Field field, Class<?> fieldType, long modelId)", "modifiers": "private", "return": "Object", "signature": "Object getOneToManyFieldValue(Field field, Class<?> fieldType, long modelId)", "full_signature": "private Object getOneToManyFieldValue(Field field, Class<?> fieldType, long modelId)", "class_method_signature": "ModelAdapter.getOneToManyFieldValue(Field field, Class<?> fieldType, long modelId)", "testcase": false, "constructor": false}, {"identifier": "setModelId", "parameters": "(@NonNull ModelClass model, @Nullable Long id)", "modifiers": "private", "return": "void", "signature": "void setModelId(@NonNull ModelClass model, @Nullable Long id)", "full_signature": "private void setModelId(@NonNull ModelClass model, @Nullable Long id)", "class_method_signature": "ModelAdapter.setModelId(@NonNull ModelClass model, @Nullable Long id)", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "()", "modifiers": "private", "return": "SQLiteDatabase", "signature": "SQLiteDatabase getDatabase()", "full_signature": "private SQLiteDatabase getDatabase()", "class_method_signature": "ModelAdapter.getDatabase()", "testcase": false, "constructor": false}], "file": "reactiveandroid/src/main/java/com/reactiveandroid/internal/ModelAdapter.java"}, "focal_method": {"identifier": "save", "parameters": "(@NonNull ModelClass model)", "modifiers": "@NonNull public", "return": "Long", "body": "@NonNull\n    public Long save(@NonNull ModelClass model) {\n        Long id = getModelId(model);\n\n        if (isModelExists(id)) {\n            update(model, id);\n        } else {\n            id = insert(model, id);\n        }\n\n        ModelChangeNotifier.get().notifyModelChanged(model, ChangeAction.SAVE);\n        return id;\n    }", "signature": "Long save(@NonNull ModelClass model)", "full_signature": "@NonNull public Long save(@NonNull ModelClass model)", "class_method_signature": "ModelAdapter.save(@NonNull ModelClass model)", "testcase": false, "constructor": false, "invocations": ["getModelId", "isModelExists", "update", "insert", "notifyModelChanged", "get"]}, "repository": {"repo_id": 108579191, "url": "https://github.com/ImangazalievM/ReActiveAndroid", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 101, "size": 572, "license": "licensed"}}