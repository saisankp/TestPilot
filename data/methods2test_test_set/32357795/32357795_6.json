{"test_class": {"identifier": "UserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"nav2\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"nav2\"", "var_name": "testdataDirectory"}, {"original_string": "private UserIF user;", "modifier": "private", "type": "UserIF", "declarator": "user", "var_name": "user"}], "file": "ontopia-navigator/src/test/java/net/ontopia/topicmaps/nav2/impl/framework/UserTest.java"}, "test_case": {"identifier": "testId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testId() {\n    Assert.assertEquals(\"id is not correct.\", user.getId(), \"niko\");\n  }", "signature": "void testId()", "full_signature": "@Test public void testId()", "class_method_signature": "UserTest.testId()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getId"]}, "focal_class": {"identifier": "User", "superclass": "", "interfaces": "implements UserIF, Serializable", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(User.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(User.class.getName())", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_MAX_BUNDLES   = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_BUNDLES   = 5", "var_name": "DEFAULT_MAX_BUNDLES"}, {"original_string": "private static final int DEFAULT_BUNDLE_EXPIRY = 1800;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUNDLE_EXPIRY = 1800", "var_name": "DEFAULT_BUNDLE_EXPIRY"}, {"original_string": "protected String id;", "modifier": "protected", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "protected String model;", "modifier": "protected", "type": "String", "declarator": "model", "var_name": "model"}, {"original_string": "protected String view;", "modifier": "protected", "type": "String", "declarator": "view", "var_name": "view"}, {"original_string": "protected String skin;", "modifier": "protected", "type": "String", "declarator": "skin", "var_name": "skin"}, {"original_string": "protected transient UserFilterContextStore filterContext;", "modifier": "protected transient", "type": "UserFilterContextStore", "declarator": "filterContext", "var_name": "filterContext"}, {"original_string": "protected transient HistoryMap history;", "modifier": "protected transient", "type": "HistoryMap", "declarator": "history", "var_name": "history"}, {"original_string": "protected transient HistoryMap log;", "modifier": "protected transient", "type": "HistoryMap", "declarator": "log", "var_name": "log"}, {"original_string": "protected transient Map workingBundles;", "modifier": "protected transient", "type": "Map", "declarator": "workingBundles", "var_name": "workingBundles"}, {"original_string": "protected transient Map timeStamps;", "modifier": "protected transient", "type": "Map", "declarator": "timeStamps", "var_name": "timeStamps"}, {"original_string": "protected long bundleExpiryAge;", "modifier": "protected", "type": "long", "declarator": "bundleExpiryAge", "var_name": "bundleExpiryAge"}, {"original_string": "protected final long initialBundleExpiryAge;", "modifier": "protected final", "type": "long", "declarator": "initialBundleExpiryAge", "var_name": "initialBundleExpiryAge"}, {"original_string": "protected final int max_bundles;", "modifier": "protected final", "type": "int", "declarator": "max_bundles", "var_name": "max_bundles"}], "methods": [{"identifier": "User", "parameters": "()", "modifiers": "public", "return": "", "signature": " User()", "full_signature": "public  User()", "class_method_signature": "User.User()", "testcase": false, "constructor": true}, {"identifier": "User", "parameters": "(NavigatorConfigurationIF navConf)", "modifiers": "public", "return": "", "signature": " User(NavigatorConfigurationIF navConf)", "full_signature": "public  User(NavigatorConfigurationIF navConf)", "class_method_signature": "User.User(NavigatorConfigurationIF navConf)", "testcase": false, "constructor": true}, {"identifier": "User", "parameters": "(String userId, NavigatorConfigurationIF navConf)", "modifiers": "public", "return": "", "signature": " User(String userId, NavigatorConfigurationIF navConf)", "full_signature": "public  User(String userId, NavigatorConfigurationIF navConf)", "class_method_signature": "User.User(String userId, NavigatorConfigurationIF navConf)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "User.getId()", "testcase": false, "constructor": false}, {"identifier": "getFilterContext", "parameters": "()", "modifiers": "@Override public", "return": "UserFilterContextStore", "signature": "UserFilterContextStore getFilterContext()", "full_signature": "@Override public UserFilterContextStore getFilterContext()", "class_method_signature": "User.getFilterContext()", "testcase": false, "constructor": false}, {"identifier": "getHistory", "parameters": "()", "modifiers": "@Override public", "return": "HistoryMap", "signature": "HistoryMap getHistory()", "full_signature": "@Override public HistoryMap getHistory()", "class_method_signature": "User.getHistory()", "testcase": false, "constructor": false}, {"identifier": "setHistory", "parameters": "(HistoryMap history)", "modifiers": "@Override public", "return": "void", "signature": "void setHistory(HistoryMap history)", "full_signature": "@Override public void setHistory(HistoryMap history)", "class_method_signature": "User.setHistory(HistoryMap history)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override public", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override public Logger getLogger()", "class_method_signature": "User.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getLogMessages", "parameters": "()", "modifiers": "@Override public", "return": "List", "signature": "List getLogMessages()", "full_signature": "@Override public List getLogMessages()", "class_method_signature": "User.getLogMessages()", "testcase": false, "constructor": false}, {"identifier": "addLogMessage", "parameters": "(String message)", "modifiers": "@Override public", "return": "void", "signature": "void addLogMessage(String message)", "full_signature": "@Override public void addLogMessage(String message)", "class_method_signature": "User.addLogMessage(String message)", "testcase": false, "constructor": false}, {"identifier": "clearLog", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearLog()", "full_signature": "@Override public void clearLog()", "class_method_signature": "User.clearLog()", "testcase": false, "constructor": false}, {"identifier": "addWorkingBundle", "parameters": "(String bundle_id, Object object)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addWorkingBundle(String bundle_id, Object object)", "full_signature": "@Override public synchronized void addWorkingBundle(String bundle_id, Object object)", "class_method_signature": "User.addWorkingBundle(String bundle_id, Object object)", "testcase": false, "constructor": false}, {"identifier": "getWorkingBundle", "parameters": "(String bundle_id)", "modifiers": "@Override public synchronized", "return": "Object", "signature": "Object getWorkingBundle(String bundle_id)", "full_signature": "@Override public synchronized Object getWorkingBundle(String bundle_id)", "class_method_signature": "User.getWorkingBundle(String bundle_id)", "testcase": false, "constructor": false}, {"identifier": "removeWorkingBundle", "parameters": "(String bundle_id)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeWorkingBundle(String bundle_id)", "full_signature": "@Override public synchronized void removeWorkingBundle(String bundle_id)", "class_method_signature": "User.removeWorkingBundle(String bundle_id)", "testcase": false, "constructor": false}, {"identifier": "removeOldWorkingBundles", "parameters": "(String keepBundle)", "modifiers": "private", "return": "void", "signature": "void removeOldWorkingBundles(String keepBundle)", "full_signature": "private void removeOldWorkingBundles(String keepBundle)", "class_method_signature": "User.removeOldWorkingBundles(String keepBundle)", "testcase": false, "constructor": false}, {"identifier": "setBundleExpiryAge", "parameters": "(long bundleExpiryAge)", "modifiers": "public synchronized", "return": "void", "signature": "void setBundleExpiryAge(long bundleExpiryAge)", "full_signature": "public synchronized void setBundleExpiryAge(long bundleExpiryAge)", "class_method_signature": "User.setBundleExpiryAge(long bundleExpiryAge)", "testcase": false, "constructor": false}, {"identifier": "resetBundleExpiryAge", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void resetBundleExpiryAge()", "full_signature": "public synchronized void resetBundleExpiryAge()", "class_method_signature": "User.resetBundleExpiryAge()", "testcase": false, "constructor": false}, {"identifier": "setModel", "parameters": "(String model)", "modifiers": "@Override public", "return": "void", "signature": "void setModel(String model)", "full_signature": "@Override public void setModel(String model)", "class_method_signature": "User.setModel(String model)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getModel()", "full_signature": "@Override public String getModel()", "class_method_signature": "User.getModel()", "testcase": false, "constructor": false}, {"identifier": "setView", "parameters": "(String view)", "modifiers": "@Override public", "return": "void", "signature": "void setView(String view)", "full_signature": "@Override public void setView(String view)", "class_method_signature": "User.setView(String view)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getView()", "full_signature": "@Override public String getView()", "class_method_signature": "User.getView()", "testcase": false, "constructor": false}, {"identifier": "setSkin", "parameters": "(String skin)", "modifiers": "@Override public", "return": "void", "signature": "void setSkin(String skin)", "full_signature": "@Override public void setSkin(String skin)", "class_method_signature": "User.setSkin(String skin)", "testcase": false, "constructor": false}, {"identifier": "getSkin", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSkin()", "full_signature": "@Override public String getSkin()", "class_method_signature": "User.getSkin()", "testcase": false, "constructor": false}, {"identifier": "setMVS", "parameters": "(String model, String view, String skin)", "modifiers": "public", "return": "void", "signature": "void setMVS(String model, String view, String skin)", "full_signature": "public void setMVS(String model, String view, String skin)", "class_method_signature": "User.setMVS(String model, String view, String skin)", "testcase": false, "constructor": false}], "file": "ontopia-navigator/src/main/java/net/ontopia/topicmaps/nav2/impl/framework/User.java"}, "focal_method": {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String getId() {\n    return id;\n  }", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "User.getId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}