{"test_class": {"identifier": "ExceptionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/ExceptionUtilTest.java"}, "test_case": {"identifier": "throwRuntimeExceptionOrError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void throwRuntimeExceptionOrError() {\n        try {\n            ExceptionUtil.throwRuntimeExceptionOrError(new Exception(\"test\"));\n            fail();\n        } catch (RuntimeException e) {\n            assertEquals(\"test\", e.getCause().getMessage());\n        }\n\n        try {\n            ExceptionUtil.throwRuntimeExceptionOrError(new RuntimeException(\"test\"));\n            fail();\n        } catch (RuntimeException e) {\n            assertEquals(\"test\", e.getMessage());\n        }\n\n        try {\n            ExceptionUtil.throwRuntimeExceptionOrError(new Error(\"test\"));\n            fail();\n        } catch (Error e) {\n            assertEquals(\"test\", e.getMessage());\n        }\n    }", "signature": "void throwRuntimeExceptionOrError()", "full_signature": "@Test public void throwRuntimeExceptionOrError()", "class_method_signature": "ExceptionUtilTest.throwRuntimeExceptionOrError()", "testcase": true, "constructor": false, "invocations": ["throwRuntimeExceptionOrError", "fail", "assertEquals", "getMessage", "getCause", "throwRuntimeExceptionOrError", "fail", "assertEquals", "getMessage", "throwRuntimeExceptionOrError", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "ExceptionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "causedBy", "parameters": "(Throwable throwable, Class<? extends Throwable> causeType)", "modifiers": "public static", "return": "boolean", "signature": "boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "full_signature": "public static boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "class_method_signature": "ExceptionUtil.causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "testcase": false, "constructor": false}, {"identifier": "getRootCause", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getRootCause(Throwable throwable)", "full_signature": "public static Throwable getRootCause(Throwable throwable)", "class_method_signature": "ExceptionUtil.getRootCause(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getCauses", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> getCauses(Throwable throwable)", "full_signature": "public static List<Throwable> getCauses(Throwable throwable)", "class_method_signature": "ExceptionUtil.getCauses(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getCauses", "parameters": "(Throwable throwable, boolean reversed)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> getCauses(Throwable throwable, boolean reversed)", "full_signature": "public static List<Throwable> getCauses(Throwable throwable, boolean reversed)", "class_method_signature": "ExceptionUtil.getCauses(Throwable throwable, boolean reversed)", "testcase": false, "constructor": false}, {"identifier": "toRuntimeException", "parameters": "(Exception exception)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException toRuntimeException(Exception exception)", "full_signature": "public static RuntimeException toRuntimeException(Exception exception)", "class_method_signature": "ExceptionUtil.toRuntimeException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "toRuntimeException", "parameters": "(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "full_signature": "public static RuntimeException toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "class_method_signature": "ExceptionUtil.toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionOrError", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "void", "signature": "void throwExceptionOrError(Throwable throwable)", "full_signature": "public static void throwExceptionOrError(Throwable throwable)", "class_method_signature": "ExceptionUtil.throwExceptionOrError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "throwRuntimeExceptionOrError", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "void", "signature": "void throwRuntimeExceptionOrError(Throwable throwable)", "full_signature": "public static void throwRuntimeExceptionOrError(Throwable throwable)", "class_method_signature": "ExceptionUtil.throwRuntimeExceptionOrError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "String", "signature": "String getStackTrace(Throwable throwable)", "full_signature": "public static String getStackTrace(Throwable throwable)", "class_method_signature": "ExceptionUtil.getStackTrace(Throwable throwable)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/ExceptionUtil.java"}, "focal_method": {"identifier": "throwRuntimeExceptionOrError", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "void", "body": "public static void throwRuntimeExceptionOrError(Throwable throwable) {\n        if (throwable instanceof Error) {\n            throw (Error) throwable;\n        }\n\n        if (throwable instanceof RuntimeException) {\n            throw (RuntimeException) throwable;\n        }\n\n        throw new RuntimeException(throwable);\n    }", "signature": "void throwRuntimeExceptionOrError(Throwable throwable)", "full_signature": "public static void throwRuntimeExceptionOrError(Throwable throwable)", "class_method_signature": "ExceptionUtil.throwRuntimeExceptionOrError(Throwable throwable)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}