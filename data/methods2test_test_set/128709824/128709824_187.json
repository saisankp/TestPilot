{"test_class": {"identifier": "BeanSerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/json/BeanSerializerTest.java"}, "test_case": {"identifier": "deserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deserialize() throws Exception {\n\n        List list3 = new ArrayList();\n        list3.add(1111);\n        list3.add(\"ll222\");\n\n        Map map4 = new HashMap();\n        map4.put(\"key1\", \"111\");\n        map4.put(\"key2\", 222);\n\n        Map beanmap5 = new HashMap();\n        try {\n            // name is required\n            BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n        beanmap5.put(\"Name\", \"zzzzggg\");\n        beanmap5.put(\"Sex\", true);\n        beanmap5.put(\"age\", 22);\n        beanmap5.put(\"friends\", new ArrayList<TestJsonBean>());\n        beanmap5.put(\"vips\", new HashSet<TestJsonBean>());\n        beanmap5.put(\"remark\", \"hehehe\");\n\n        TestJsonBean bean = BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n        Assert.assertEquals(beanmap5.get(\"Name\"), bean.getName());\n        Assert.assertEquals(beanmap5.get(\"Sex\"), bean.isSex());\n        Assert.assertEquals(beanmap5.get(\"age\"), bean.getAge());\n        Assert.assertEquals(beanmap5.get(\"friends\"), bean.getFriends());\n        Assert.assertEquals(beanmap5.get(\"Remark\"), bean.getRemark());\n\n        TestJsonBean bean1 = new TestJsonBean();\n        beanmap5.put(\"friends\", new TestJsonBean[] { bean1 });\n        bean = BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n        Assert.assertEquals(bean1, bean.getFriends().get(0));\n        beanmap5.put(\"friends\", null);\n        bean = BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n        Assert.assertTrue(CommonUtils.isEmpty(bean.getFriends()));\n        beanmap5.put(\"friends\", \"xxxx\");\n        try {\n            // invalid type\n            BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n        beanmap5.put(\"friends\", new ArrayList<TestJsonBean>());\n        beanmap5.put(\"vips\", new TestJsonBean[] { bean1 });\n        bean = BeanSerializer.deserializeByType(beanmap5, TestJsonBean.class);\n        Assert.assertEquals(bean1, new ArrayList<TestJsonBean>(bean.getVips()).get(0));\n        beanmap5.put(\"vips\", new HashSet<TestJsonBean>());\n\n        beanmap5.put(JSON.CLASS_KEY, \"com.alipay.sofa.rpc.common.json.TestJsonBean\");\n        TestJsonBean bean2 = (TestJsonBean) BeanSerializer.deserializeByType(beanmap5, Object.class);\n        Assert.assertEquals(beanmap5.get(\"Name\"), bean2.getName());\n        Assert.assertEquals(beanmap5.get(\"Sex\"), bean2.isSex());\n        Assert.assertEquals(beanmap5.get(\"age\"), bean2.getAge());\n        Assert.assertEquals(beanmap5.get(\"friends\"), bean2.getFriends());\n        Assert.assertEquals(beanmap5.get(\"Remark\"), bean2.getRemark());\n\n        map4.put(\"bean\", beanmap5);\n        list3.add(map4);\n        list3.add(beanmap5);\n\n        int[] ss6 = new int[] { 11, 22, 33, 44 };\n        Integer[] ss7 = new Integer[] { 55, 66 };\n\n        Object[] args = new Object[] { \"11\", 22, true, list3, map4, beanmap5, ss6, ss7 };\n        Object[] os = BeanSerializer.deserializeByType(args, Object[].class);\n        Assert.assertEquals(os[0], \"11\");\n        Assert.assertEquals(os[1], 22);\n        Assert.assertEquals(os[2], true);\n        Assert.assertEquals(((List) os[3]).get(0), 1111);\n        Assert.assertEquals(((List) os[3]).get(1), \"ll222\");\n        Assert.assertTrue(((List) os[3]).get(2) instanceof Map);\n        Assert.assertTrue(((List) os[3]).get(3) instanceof TestJsonBean);\n        TestJsonBean actualBean3_3 = (TestJsonBean) ((List) os[3]).get(3);\n        Assert.assertEquals(beanmap5.get(\"Name\"), actualBean3_3.getName());\n        Assert.assertEquals(beanmap5.get(\"Sex\"), actualBean3_3.isSex());\n        Assert.assertEquals(beanmap5.get(\"age\"), actualBean3_3.getAge());\n        Assert.assertEquals(beanmap5.get(\"friends\"), actualBean3_3.getFriends());\n        Assert.assertEquals(beanmap5.get(\"Remark\"), actualBean3_3.getRemark());\n\n        Assert.assertTrue(os[4] instanceof Map);\n        Map actualMap4 = (Map) os[4];\n        Assert.assertTrue(actualMap4.get(\"bean\") instanceof TestJsonBean);\n\n        Assert.assertTrue(os[5] instanceof TestJsonBean);\n        TestJsonBean actualBean5 = (TestJsonBean) os[5];\n        Assert.assertEquals(beanmap5.get(\"Name\"), actualBean5.getName());\n        Assert.assertEquals(beanmap5.get(\"Sex\"), actualBean5.isSex());\n        Assert.assertEquals(beanmap5.get(\"age\"), actualBean5.getAge());\n        Assert.assertEquals(beanmap5.get(\"friends\"), actualBean5.getFriends());\n        Assert.assertEquals(beanmap5.get(\"Remark\"), actualBean5.getRemark());\n\n        Assert.assertArrayEquals((int[]) os[6], ss6);\n        Assert.assertArrayEquals((Integer[]) os[7], ss7);\n\n        List<Map> list8 = new ArrayList<Map>();\n        for (int i = 0; i < 2; i++) {\n            Map beanmap1 = new HashMap();\n            beanmap1.put(\"Name\", \"zzzzggg\");\n            beanmap1.put(\"Sex\", true);\n            beanmap1.put(\"age\", 22);\n            beanmap1.put(\"friends\", new ArrayList<TestJsonBean>());\n            beanmap1.put(\"remark\", \"hehehe\");\n            list8.add(beanmap1);\n        }\n        List jsonBean1 = (List) BeanSerializer.deserialize(list8);\n        List jsonBean2 = BeanSerializer.deserializeByType(list8, List.class);\n        Assert.assertEquals(jsonBean1.size(), jsonBean2.size());\n        Assert.assertEquals(jsonBean1.get(0).getClass(), jsonBean2.get(0).getClass());\n\n    }", "signature": "void deserialize()", "full_signature": "@Test public void deserialize()", "class_method_signature": "BeanSerializerTest.deserialize()", "testcase": true, "constructor": false, "invocations": ["add", "add", "put", "put", "deserializeByType", "fail", "put", "put", "put", "put", "put", "put", "deserializeByType", "assertEquals", "get", "getName", "assertEquals", "get", "isSex", "assertEquals", "get", "getAge", "assertEquals", "get", "getFriends", "assertEquals", "get", "getRemark", "put", "deserializeByType", "assertEquals", "get", "getFriends", "put", "deserializeByType", "assertTrue", "isEmpty", "getFriends", "put", "deserializeByType", "fail", "put", "put", "deserializeByType", "assertEquals", "get", "getVips", "put", "put", "deserializeByType", "assertEquals", "get", "getName", "assertEquals", "get", "isSex", "assertEquals", "get", "getAge", "assertEquals", "get", "getFriends", "assertEquals", "get", "getRemark", "put", "add", "add", "deserializeByType", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "get", "assertEquals", "get", "assertTrue", "get", "assertTrue", "get", "get", "assertEquals", "get", "getName", "assertEquals", "get", "isSex", "assertEquals", "get", "getAge", "assertEquals", "get", "getFriends", "assertEquals", "get", "getRemark", "assertTrue", "assertTrue", "get", "assertTrue", "assertEquals", "get", "getName", "assertEquals", "get", "isSex", "assertEquals", "get", "getAge", "assertEquals", "get", "getFriends", "assertEquals", "get", "getRemark", "assertArrayEquals", "assertArrayEquals", "put", "put", "put", "put", "put", "add", "deserialize", "deserializeByType", "assertEquals", "size", "size", "assertEquals", "getClass", "get", "getClass", "get"]}, "focal_class": {"identifier": "BeanSerializer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "serialize", "parameters": "(Object bean)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(Object bean)", "full_signature": "public static Object serialize(Object bean)", "class_method_signature": "BeanSerializer.serialize(Object bean)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object bean, boolean addType)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(Object bean, boolean addType)", "full_signature": "public static Object serialize(Object bean, boolean addType)", "class_method_signature": "BeanSerializer.serialize(Object bean, boolean addType)", "testcase": false, "constructor": false}, {"identifier": "mapToMap", "parameters": "(Map<K, V> src, Class<? extends Map> dstClazz)", "modifiers": "private static", "return": "Map<K, V>", "signature": "Map<K, V> mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "full_signature": "private static Map<K, V> mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "class_method_signature": "BeanSerializer.mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "testcase": false, "constructor": false}, {"identifier": "mapToObject", "parameters": "(Map src, Class<T> dstClazz)", "modifiers": "private static", "return": "T", "signature": "T mapToObject(Map src, Class<T> dstClazz)", "full_signature": "private static T mapToObject(Map src, Class<T> dstClazz)", "class_method_signature": "BeanSerializer.mapToObject(Map src, Class<T> dstClazz)", "testcase": false, "constructor": false}, {"identifier": "arrayToCollection", "parameters": "(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "modifiers": "private static", "return": "Collection<T>", "signature": "Collection<T> arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "full_signature": "private static Collection<T> arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "class_method_signature": "BeanSerializer.arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "testcase": false, "constructor": false}, {"identifier": "collection2Collection", "parameters": "(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "modifiers": "private static", "return": "Collection<T>", "signature": "Collection<T> collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "full_signature": "private static Collection<T> collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "class_method_signature": "BeanSerializer.collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "testcase": false, "constructor": false}, {"identifier": "collectionToArray", "parameters": "(Collection<T> src, Class<T> componentType)", "modifiers": "private static", "return": "T[]", "signature": "T[] collectionToArray(Collection<T> src, Class<T> componentType)", "full_signature": "private static T[] collectionToArray(Collection<T> src, Class<T> componentType)", "class_method_signature": "BeanSerializer.collectionToArray(Collection<T> src, Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "array2Array", "parameters": "(Object[] src, Class<T> componentType)", "modifiers": "private static", "return": "T[]", "signature": "T[] array2Array(Object[] src, Class<T> componentType)", "full_signature": "private static T[] array2Array(Object[] src, Class<T> componentType)", "class_method_signature": "BeanSerializer.array2Array(Object[] src, Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "deserializeByType", "parameters": "(Object src, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T deserializeByType(Object src, Class<T> clazz)", "full_signature": "public static T deserializeByType(Object src, Class<T> clazz)", "class_method_signature": "BeanSerializer.deserializeByType(Object src, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(Object object)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(Object object)", "full_signature": "public static Object deserialize(Object object)", "class_method_signature": "BeanSerializer.deserialize(Object object)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/json/BeanSerializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(Object object)", "modifiers": "public static", "return": "Object", "body": "public static Object deserialize(Object object) {\n        return deserializeByType(object, Object.class);\n    }", "signature": "Object deserialize(Object object)", "full_signature": "public static Object deserialize(Object object)", "class_method_signature": "BeanSerializer.deserialize(Object object)", "testcase": false, "constructor": false, "invocations": ["deserializeByType"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}