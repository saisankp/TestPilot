{"test_class": {"identifier": "CacheKeyBuilderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CacheKeyBuilderImpl cacheKeyBuilder;", "modifier": "private static", "type": "CacheKeyBuilderImpl", "declarator": "cacheKeyBuilder", "var_name": "cacheKeyBuilder"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/support/CacheKeyBuilderImplTest.java"}, "test_case": {"identifier": "getAssignCacheKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAssignCacheKey() {\n        AnnotationData data = new AnnotationData();\n        try {\n            data.setAssignedKey(null);\n            data.setNamespace(null);\n            cacheKeyBuilder.getAssignCacheKey(data);\n            fail(\"Expected exception.\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"at least 1 character\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            data.setAssignedKey(\"\");\n            cacheKeyBuilder.getAssignCacheKey(data);\n            fail(\"Expected exception.\");\n        } catch (InvalidParameterException ex) {\n            assertTrue(ex.getMessage().indexOf(\"at least 1 character\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        final String objectId = RandomStringUtils.randomAlphanumeric(20);\n        final String namespace = RandomStringUtils.randomAlphanumeric(12);\n\n        data.setAssignedKey(objectId);\n        data.setNamespace(namespace);\n        final String result = cacheKeyBuilder.getAssignCacheKey(data);\n\n        assertTrue(result.indexOf(objectId) != -1);\n        assertTrue(result.indexOf(namespace) != -1);\n    }", "signature": "void getAssignCacheKey()", "full_signature": "@Test public void getAssignCacheKey()", "class_method_signature": "CacheKeyBuilderImplTest.getAssignCacheKey()", "testcase": true, "constructor": false, "invocations": ["setAssignedKey", "setNamespace", "getAssignCacheKey", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "setAssignedKey", "getAssignCacheKey", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "randomAlphanumeric", "randomAlphanumeric", "setAssignedKey", "setNamespace", "getAssignCacheKey", "assertTrue", "indexOf", "assertTrue", "indexOf"]}, "focal_class": {"identifier": "CacheKeyBuilderImpl", "superclass": "", "interfaces": "implements CacheKeyBuilder", "fields": [{"original_string": "private static final String SEPARATOR = \":\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \":\"", "var_name": "SEPARATOR"}, {"original_string": "private static final String ID_SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "ID_SEPARATOR = \"/\"", "var_name": "ID_SEPARATOR"}, {"original_string": "private KeyProvider defaultKeyProvider = new DefaultKeyProvider();", "modifier": "private", "type": "KeyProvider", "declarator": "defaultKeyProvider = new DefaultKeyProvider()", "var_name": "defaultKeyProvider"}], "methods": [{"identifier": "setDefaultKeyProvider", "parameters": "(final KeyProvider defaultKeyProvider)", "modifiers": "public", "return": "void", "signature": "void setDefaultKeyProvider(final KeyProvider defaultKeyProvider)", "full_signature": "public void setDefaultKeyProvider(final KeyProvider defaultKeyProvider)", "class_method_signature": "CacheKeyBuilderImpl.setDefaultKeyProvider(final KeyProvider defaultKeyProvider)", "testcase": false, "constructor": false}, {"identifier": "getDefaultKeyProvider", "parameters": "()", "modifiers": "public", "return": "KeyProvider", "signature": "KeyProvider getDefaultKeyProvider()", "full_signature": "public KeyProvider getDefaultKeyProvider()", "class_method_signature": "CacheKeyBuilderImpl.getDefaultKeyProvider()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final AnnotationData data, final Object[] args, final String methodDesc)", "modifiers": "@Override public", "return": "String", "signature": "String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "full_signature": "@Override public String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "class_method_signature": "CacheKeyBuilderImpl.getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final Object keyObject, final String namespace)", "modifiers": "@Override public", "return": "String", "signature": "String getCacheKey(final Object keyObject, final String namespace)", "full_signature": "@Override public String getCacheKey(final Object keyObject, final String namespace)", "class_method_signature": "CacheKeyBuilderImpl.getCacheKey(final Object keyObject, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "getCacheKeys", "parameters": "(final List<Object> keyObjects, final String namespace)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getCacheKeys(final List<Object> keyObjects, final String namespace)", "full_signature": "@Override public List<String> getCacheKeys(final List<Object> keyObjects, final String namespace)", "class_method_signature": "CacheKeyBuilderImpl.getCacheKeys(final List<Object> keyObjects, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "getCacheKeys", "parameters": "(final AnnotationData data, final Object[] args, final String methodDesc)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getCacheKeys(final AnnotationData data, final Object[] args, final String methodDesc)", "full_signature": "@Override public List<String> getCacheKeys(final AnnotationData data, final Object[] args, final String methodDesc)", "class_method_signature": "CacheKeyBuilderImpl.getCacheKeys(final AnnotationData data, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getAssignCacheKey", "parameters": "(final AnnotationData data)", "modifiers": "@Override public", "return": "String", "signature": "String getAssignCacheKey(final AnnotationData data)", "full_signature": "@Override public String getAssignCacheKey(final AnnotationData data)", "class_method_signature": "CacheKeyBuilderImpl.getAssignCacheKey(final AnnotationData data)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final Object[] keyObjects, final String namespace)", "modifiers": "private", "return": "String", "signature": "String getCacheKey(final Object[] keyObjects, final String namespace)", "full_signature": "private String getCacheKey(final Object[] keyObjects, final String namespace)", "class_method_signature": "CacheKeyBuilderImpl.getCacheKey(final Object[] keyObjects, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "buildCacheKey", "parameters": "(final String[] objectIds, final String namespace)", "modifiers": "private", "return": "String", "signature": "String buildCacheKey(final String[] objectIds, final String namespace)", "full_signature": "private String buildCacheKey(final String[] objectIds, final String namespace)", "class_method_signature": "CacheKeyBuilderImpl.buildCacheKey(final String[] objectIds, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "checkKeyPart", "parameters": "(final String keyPart)", "modifiers": "private", "return": "void", "signature": "void checkKeyPart(final String keyPart)", "full_signature": "private void checkKeyPart(final String keyPart)", "class_method_signature": "CacheKeyBuilderImpl.checkKeyPart(final String keyPart)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/support/CacheKeyBuilderImpl.java"}, "focal_method": {"identifier": "getAssignCacheKey", "parameters": "(final AnnotationData data)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getAssignCacheKey(final AnnotationData data) {\n        if (data == null || data.getAssignedKey() == null || data.getAssignedKey().length() < 1) {\n            throw new InvalidParameterException(\"Ids for objects in the cache must be at least 1 character long.\");\n        }\n        return data.getNamespace() + SEPARATOR + data.getAssignedKey();\n    }", "signature": "String getAssignCacheKey(final AnnotationData data)", "full_signature": "@Override public String getAssignCacheKey(final AnnotationData data)", "class_method_signature": "CacheKeyBuilderImpl.getAssignCacheKey(final AnnotationData data)", "testcase": false, "constructor": false, "invocations": ["getAssignedKey", "length", "getAssignedKey", "getNamespace", "getAssignedKey"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}