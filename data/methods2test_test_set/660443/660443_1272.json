{"test_class": {"identifier": "PerturbedAtomHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/PerturbedAtomHashGeneratorTest.java"}, "test_case": {"identifier": "testCombine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCombine() throws Exception {\n        Xorshift prng = new Xorshift();\n        PerturbedAtomHashGenerator generator = new PerturbedAtomHashGenerator(new SeedGenerator(\n                BasicAtomEncoder.ATOMIC_NUMBER), new BasicAtomHashGenerator(new SeedGenerator(\n                BasicAtomEncoder.ATOMIC_NUMBER), prng, 8), prng, StereoEncoderFactory.EMPTY,\n                new MinimumEquivalentCyclicSet(), AtomSuppression.unsuppressed());\n        long[][] perturbed = new long[][]{{1, 2, 3, 4}, {1, 1, 1, 1}, {1, 2, 2, 4}, {2, 2, 2, 2},};\n\n        long _0 = 1 ^ 2 ^ 3 ^ 4;\n        long _1 = 1 ^ prng.next(1) ^ prng.next(prng.next(1)) ^ prng.next(prng.next(prng.next(1)));\n        long _2 = 1 ^ 2 ^ prng.next(2) ^ 4;\n        long _3 = 2 ^ prng.next(2) ^ prng.next(prng.next(2)) ^ prng.next(prng.next(prng.next(2)));\n\n        long[] values = generator.combine(perturbed);\n        Assert.assertArrayEquals(values, new long[]{_0, _1, _2, _3});\n    }", "signature": "void testCombine()", "full_signature": "@Test public void testCombine()", "class_method_signature": "PerturbedAtomHashGeneratorTest.testCombine()", "testcase": true, "constructor": false, "invocations": ["unsuppressed", "next", "next", "next", "next", "next", "next", "next", "next", "next", "next", "next", "next", "next", "combine", "assertArrayEquals"]}, "focal_class": {"identifier": "PerturbedAtomHashGenerator", "superclass": "extends AbstractHashGenerator", "interfaces": "implements AtomHashGenerator", "fields": [{"original_string": "private final StereoEncoderFactory      factory;", "modifier": "private final", "type": "StereoEncoderFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final AbstractAtomHashGenerator simple;", "modifier": "private final", "type": "AbstractAtomHashGenerator", "declarator": "simple", "var_name": "simple"}, {"original_string": "private final AtomHashGenerator         seeds;", "modifier": "private final", "type": "AtomHashGenerator", "declarator": "seeds", "var_name": "seeds"}, {"original_string": "private final EquivalentSetFinder       finder;", "modifier": "private final", "type": "EquivalentSetFinder", "declarator": "finder", "var_name": "finder"}, {"original_string": "private final AtomSuppression           suppression;", "modifier": "private final", "type": "AtomSuppression", "declarator": "suppression", "var_name": "suppression"}], "methods": [{"identifier": "PerturbedAtomHashGenerator", "parameters": "(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "modifiers": "public", "return": "", "signature": " PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "full_signature": "public  PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "class_method_signature": "PerturbedAtomHashGenerator.PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "PerturbedAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "modifiers": "private", "return": "long[]", "signature": "long[] generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "full_signature": "private long[] generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "class_method_signature": "PerturbedAtomHashGenerator.generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(long[][] perturbed)", "modifiers": "", "return": "long[]", "signature": "long[] combine(long[][] perturbed)", "full_signature": " long[] combine(long[][] perturbed)", "class_method_signature": "PerturbedAtomHashGenerator.combine(long[][] perturbed)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/PerturbedAtomHashGenerator.java"}, "focal_method": {"identifier": "combine", "parameters": "(long[][] perturbed)", "modifiers": "", "return": "long[]", "body": "long[] combine(long[][] perturbed) {\n\n        int n = perturbed.length;\n        int m = perturbed[0].length;\n\n        long[] combined = new long[n];\n        long[] rotated = new long[m];\n\n        for (int i = 0; i < n; i++) {\n\n            Arrays.sort(perturbed[i]);\n\n            for (int j = 0; j < m; j++) {\n                // if non-unique, then get the next random number\n                if (j > 0 && perturbed[i][j] == perturbed[i][j - 1]) {\n                    combined[i] ^= rotated[j] = rotate(rotated[j - 1]);\n                } else {\n                    combined[i] ^= rotated[j] = perturbed[i][j];\n                }\n            }\n\n        }\n\n        return combined;\n    }", "signature": "long[] combine(long[][] perturbed)", "full_signature": " long[] combine(long[][] perturbed)", "class_method_signature": "PerturbedAtomHashGenerator.combine(long[][] perturbed)", "testcase": false, "constructor": false, "invocations": ["sort", "rotate"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}