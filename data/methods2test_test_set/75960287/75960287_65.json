{"test_class": {"identifier": "LineGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<TPS> DATA;", "modifier": "private static", "type": "List<TPS>", "declarator": "DATA", "var_name": "DATA"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/delivery/rendering/json/graphs/line/LineGraphTest.java"}, "test_case": {"identifier": "testLineGraphsForBracketErrors", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testLineGraphsForBracketErrors() {\n        TPSMutator mutator = new TPSMutator(DATA);\n        LineGraph[] graphs = new LineGraph[]{\n                new CPUGraph(mutator, true),\n                new PlayersOnlineGraph(mutator, false),\n                new RamGraph(mutator, true),\n                new TPSGraph(mutator, false),\n                new EntityGraph(mutator, true),\n                new ChunkGraph(mutator, false),\n                new DiskGraph(mutator, false)\n        };\n\n        for (LineGraph graph : graphs) {\n            System.out.print(\"Bracket Test: \" + graph.getClass().getSimpleName() + \" | \");\n            String series = graph.toHighChartsSeries();\n\n            System.out.println(series);\n\n            char[] chars = series.toCharArray();\n            assertBracketMatch(chars);\n        }\n    }", "signature": "void testLineGraphsForBracketErrors()", "full_signature": "@Test void testLineGraphsForBracketErrors()", "class_method_signature": "LineGraphTest.testLineGraphsForBracketErrors()", "testcase": true, "constructor": false, "invocations": ["print", "getSimpleName", "getClass", "toHighChartsSeries", "println", "toCharArray", "assertBracketMatch"]}, "focal_class": {"identifier": "LineGraph", "superclass": "", "interfaces": "implements HighChart", "fields": [{"original_string": "private final boolean displayGaps;", "modifier": "private final", "type": "boolean", "declarator": "displayGaps", "var_name": "displayGaps"}, {"original_string": "private final List<Point> points;", "modifier": "private final", "type": "List<Point>", "declarator": "points", "var_name": "points"}], "methods": [{"identifier": "LineGraph", "parameters": "(List<Point> points, boolean displayGaps)", "modifiers": "public", "return": "", "signature": " LineGraph(List<Point> points, boolean displayGaps)", "full_signature": "public  LineGraph(List<Point> points, boolean displayGaps)", "class_method_signature": "LineGraph.LineGraph(List<Point> points, boolean displayGaps)", "testcase": false, "constructor": true}, {"identifier": "toHighChartsSeries", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toHighChartsSeries()", "full_signature": "@Override public String toHighChartsSeries()", "class_method_signature": "LineGraph.toHighChartsSeries()", "testcase": false, "constructor": false}, {"identifier": "getPoints", "parameters": "()", "modifiers": "public", "return": "List<Point>", "signature": "List<Point> getPoints()", "full_signature": "public List<Point> getPoints()", "class_method_signature": "LineGraph.getPoints()", "testcase": false, "constructor": false}, {"identifier": "addMissingPoints", "parameters": "(StringBuilder arrayBuilder, Long lastX, long date)", "modifiers": "private", "return": "void", "signature": "void addMissingPoints(StringBuilder arrayBuilder, Long lastX, long date)", "full_signature": "private void addMissingPoints(StringBuilder arrayBuilder, Long lastX, long date)", "class_method_signature": "LineGraph.addMissingPoints(StringBuilder arrayBuilder, Long lastX, long date)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/delivery/rendering/json/graphs/line/LineGraph.java"}, "focal_method": {"identifier": "toHighChartsSeries", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toHighChartsSeries() {\n        StringBuilder arrayBuilder = new StringBuilder(\"[\");\n\n        int size = points.size();\n        Long lastX = null;\n        for (int i = 0; i < size; i++) {\n            Point point = points.get(i);\n            Double y = point.getY();\n            long date = (long) point.getX();\n\n            if (displayGaps && lastX != null && date - lastX > TimeUnit.MINUTES.toMillis(3L)) {\n                addMissingPoints(arrayBuilder, lastX, date);\n            }\n            lastX = date;\n\n            arrayBuilder.append(\"[\").append(date).append(\",\").append(y).append(\"]\");\n            if (i < size - 1) {\n                arrayBuilder.append(\",\");\n            }\n        }\n\n        arrayBuilder.append(\"]\");\n        return arrayBuilder.toString();\n    }", "signature": "String toHighChartsSeries()", "full_signature": "@Override public String toHighChartsSeries()", "class_method_signature": "LineGraph.toHighChartsSeries()", "testcase": false, "constructor": false, "invocations": ["size", "get", "getY", "getX", "toMillis", "addMissingPoints", "append", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}