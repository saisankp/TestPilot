{"test_class": {"identifier": "DefaultDocumentEventPersistManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DefaultDocumentEventPersistManager subject;", "modifier": "@InjectMocks\n    private", "type": "DefaultDocumentEventPersistManager", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private Event<DocumentEntityPrePersist> documentEntityPrePersistEvent;", "modifier": "@Mock\n    private", "type": "Event<DocumentEntityPrePersist>", "declarator": "documentEntityPrePersistEvent", "var_name": "documentEntityPrePersistEvent"}, {"original_string": "@Mock\n    private Event<DocumentEntityPostPersist> documentEntityPostPersistEvent;", "modifier": "@Mock\n    private", "type": "Event<DocumentEntityPostPersist>", "declarator": "documentEntityPostPersistEvent", "var_name": "documentEntityPostPersistEvent"}, {"original_string": "@Mock\n    private Event<EntityPrePersist> entityPrePersistEvent;", "modifier": "@Mock\n    private", "type": "Event<EntityPrePersist>", "declarator": "entityPrePersistEvent", "var_name": "entityPrePersistEvent"}, {"original_string": "@Mock\n    private Event<EntityPostPersit> entityPostPersitEvent;", "modifier": "@Mock\n    private", "type": "Event<EntityPostPersit>", "declarator": "entityPostPersitEvent", "var_name": "entityPostPersitEvent"}, {"original_string": "@Mock\n    private Event<EntityDocumentPrePersist> entityDocumentPrePersist;", "modifier": "@Mock\n    private", "type": "Event<EntityDocumentPrePersist>", "declarator": "entityDocumentPrePersist", "var_name": "entityDocumentPrePersist"}, {"original_string": "@Mock\n    private Event<EntityDocumentPostPersist> entityDocumentPostPersist;", "modifier": "@Mock\n    private", "type": "Event<EntityDocumentPostPersist>", "declarator": "entityDocumentPostPersist", "var_name": "entityDocumentPostPersist"}, {"original_string": "@Mock\n    private Event<DocumentQueryExecute> documentQueryExecute;", "modifier": "@Mock\n    private", "type": "Event<DocumentQueryExecute>", "declarator": "documentQueryExecute", "var_name": "documentQueryExecute"}, {"original_string": "@Mock\n    private Event<DocumentDeleteQueryExecute> documentDeleteQueryExecute;", "modifier": "@Mock\n    private", "type": "Event<DocumentDeleteQueryExecute>", "declarator": "documentDeleteQueryExecute", "var_name": "documentDeleteQueryExecute"}], "file": "artemis-document/src/test/java/org/jnosql/artemis/document/DefaultDocumentEventPersistManagerTest.java"}, "test_case": {"identifier": "shouldFirePreQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFirePreQuery() {\n\n        DocumentQuery query = select().from(\"collection\").build();\n        subject.firePreQuery(query);\n        ArgumentCaptor<DocumentQueryExecute> captor = ArgumentCaptor.forClass(DocumentQueryExecute.class);\n        verify(documentQueryExecute).fire(captor.capture());\n        assertEquals(query, captor.getValue().getQuery());\n    }", "signature": "void shouldFirePreQuery()", "full_signature": "@Test public void shouldFirePreQuery()", "class_method_signature": "DefaultDocumentEventPersistManagerTest.shouldFirePreQuery()", "testcase": true, "constructor": false, "invocations": ["build", "from", "select", "firePreQuery", "forClass", "fire", "verify", "capture", "assertEquals", "getQuery", "getValue"]}, "focal_class": {"identifier": "DefaultDocumentEventPersistManager", "superclass": "", "interfaces": "implements DocumentEventPersistManager", "fields": [{"original_string": "@Inject\n    private Event<DocumentEntityPrePersist> documentEntityPrePersistEvent;", "modifier": "@Inject\n    private", "type": "Event<DocumentEntityPrePersist>", "declarator": "documentEntityPrePersistEvent", "var_name": "documentEntityPrePersistEvent"}, {"original_string": "@Inject\n    private Event<DocumentEntityPostPersist> documentEntityPostPersistEvent;", "modifier": "@Inject\n    private", "type": "Event<DocumentEntityPostPersist>", "declarator": "documentEntityPostPersistEvent", "var_name": "documentEntityPostPersistEvent"}, {"original_string": "@Inject\n    private Event<EntityPrePersist> entityPrePersistEvent;", "modifier": "@Inject\n    private", "type": "Event<EntityPrePersist>", "declarator": "entityPrePersistEvent", "var_name": "entityPrePersistEvent"}, {"original_string": "@Inject\n    private Event<EntityPostPersit> entityPostPersitEvent;", "modifier": "@Inject\n    private", "type": "Event<EntityPostPersit>", "declarator": "entityPostPersitEvent", "var_name": "entityPostPersitEvent"}, {"original_string": "@Inject\n    private Event<EntityDocumentPrePersist> entityDocumentPrePersist;", "modifier": "@Inject\n    private", "type": "Event<EntityDocumentPrePersist>", "declarator": "entityDocumentPrePersist", "var_name": "entityDocumentPrePersist"}, {"original_string": "@Inject\n    private Event<EntityDocumentPostPersist> entityDocumentPostPersist;", "modifier": "@Inject\n    private", "type": "Event<EntityDocumentPostPersist>", "declarator": "entityDocumentPostPersist", "var_name": "entityDocumentPostPersist"}, {"original_string": "@Inject\n    private Event<DocumentQueryExecute> documentQueryExecute;", "modifier": "@Inject\n    private", "type": "Event<DocumentQueryExecute>", "declarator": "documentQueryExecute", "var_name": "documentQueryExecute"}, {"original_string": "@Inject\n    private Event<DocumentDeleteQueryExecute> documentDeleteQueryExecute;", "modifier": "@Inject\n    private", "type": "Event<DocumentDeleteQueryExecute>", "declarator": "documentDeleteQueryExecute", "var_name": "documentDeleteQueryExecute"}], "methods": [{"identifier": "firePreDocument", "parameters": "(DocumentEntity entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePreDocument(DocumentEntity entity)", "full_signature": "@Override public void firePreDocument(DocumentEntity entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreDocument(DocumentEntity entity)", "testcase": false, "constructor": false}, {"identifier": "firePostDocument", "parameters": "(DocumentEntity entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePostDocument(DocumentEntity entity)", "full_signature": "@Override public void firePostDocument(DocumentEntity entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePostDocument(DocumentEntity entity)", "testcase": false, "constructor": false}, {"identifier": "firePreEntity", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePreEntity(T entity)", "full_signature": "@Override public void firePreEntity(T entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreEntity(T entity)", "testcase": false, "constructor": false}, {"identifier": "firePostEntity", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePostEntity(T entity)", "full_signature": "@Override public void firePostEntity(T entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePostEntity(T entity)", "testcase": false, "constructor": false}, {"identifier": "firePreDocumentEntity", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePreDocumentEntity(T entity)", "full_signature": "@Override public void firePreDocumentEntity(T entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreDocumentEntity(T entity)", "testcase": false, "constructor": false}, {"identifier": "firePostDocumentEntity", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void firePostDocumentEntity(T entity)", "full_signature": "@Override public void firePostDocumentEntity(T entity)", "class_method_signature": "DefaultDocumentEventPersistManager.firePostDocumentEntity(T entity)", "testcase": false, "constructor": false}, {"identifier": "firePreQuery", "parameters": "(DocumentQuery query)", "modifiers": "@Override public", "return": "void", "signature": "void firePreQuery(DocumentQuery query)", "full_signature": "@Override public void firePreQuery(DocumentQuery query)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreQuery(DocumentQuery query)", "testcase": false, "constructor": false}, {"identifier": "firePreDeleteQuery", "parameters": "(DocumentDeleteQuery query)", "modifiers": "@Override public", "return": "void", "signature": "void firePreDeleteQuery(DocumentDeleteQuery query)", "full_signature": "@Override public void firePreDeleteQuery(DocumentDeleteQuery query)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreDeleteQuery(DocumentDeleteQuery query)", "testcase": false, "constructor": false}], "file": "artemis-document/src/main/java/org/jnosql/artemis/document/DefaultDocumentEventPersistManager.java"}, "focal_method": {"identifier": "firePreQuery", "parameters": "(DocumentQuery query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void firePreQuery(DocumentQuery query) {\n        documentQueryExecute.fire(DocumentQueryExecute.of(query));\n    }", "signature": "void firePreQuery(DocumentQuery query)", "full_signature": "@Override public void firePreQuery(DocumentQuery query)", "class_method_signature": "DefaultDocumentEventPersistManager.firePreQuery(DocumentQuery query)", "testcase": false, "constructor": false, "invocations": ["fire", "of"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}