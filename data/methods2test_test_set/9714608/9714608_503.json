{"test_class": {"identifier": "MapPolylineTreeSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapElementTreeSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapElementTreeSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private ArrayList<MapPolyline> reference = null;", "modifier": "private", "type": "ArrayList<MapPolyline>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Rectangle2d bounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "bounds = null", "var_name": "bounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/tree/MapPolylineTreeSetTest.java"}, "test_case": {"identifier": "testGetNearestEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetNearestEnd() {\n    \tMapPolylineTreeSet<MapPolyline> test;\n\t\tif (this.bounds!=null)\n\t\t\ttest = new MapPolylineTreeSet<>(this.bounds);\n\t\telse\n\t\t\ttest = new MapPolylineTreeSet<>();\n        test.addAll(this.reference);\n        assertEpsilonEquals(this.reference.size(), test.size());\n\n        Random rnd = new Random();\n    \tMapPolyline nearestData;\n    \tdouble minDistance, distance, x, y;\n    \tfinal ArrayList<MapPolyline> nearest = new ArrayList<>();\n\n    \tx = rnd.nextDouble()*this.bounds.getWidth()+this.bounds.getMinX();\n    \ty = rnd.nextDouble()*this.bounds.getHeight()+this.bounds.getMinY();\n\n    \tminDistance = Double.MAX_VALUE;\n    \tfor (MapPolyline line : this.reference) {\n    \t\tdistance = line.distanceToEnd(new Point2d(x, y));\n    \t\tif (distance<minDistance) {\n    \t\t\tminDistance = distance;\n    \t\t\tnearest.clear();\n    \t\t\tnearest.add(line);\n    \t\t}\n    \t\telse if (distance==minDistance) {\n    \t\t\tnearest.add(line);\n    \t\t}\n    \t}\n\n    \tnearestData = test.getNearestEnd(x, y);\n    \tassertNotNull(nearestData);\n\n    \tassertTrue(nearest.contains(nearestData));\n\t}", "signature": "void testGetNearestEnd()", "full_signature": "@Test public void testGetNearestEnd()", "class_method_signature": "MapPolylineTreeSetTest.testGetNearestEnd()", "testcase": true, "constructor": false, "invocations": ["addAll", "assertEpsilonEquals", "size", "size", "nextDouble", "getWidth", "getMinX", "nextDouble", "getHeight", "getMinY", "distanceToEnd", "clear", "add", "add", "getNearestEnd", "assertNotNull", "assertTrue", "contains"]}, "focal_class": {"identifier": "MapPolylineTreeSet", "superclass": "extends MapElementTreeSet<P>", "interfaces": "implements GISPolylineSet<P>", "fields": [], "methods": [{"identifier": "MapPolylineTreeSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " MapPolylineTreeSet()", "full_signature": "public  MapPolylineTreeSet()", "class_method_signature": "MapPolylineTreeSet.MapPolylineTreeSet()", "testcase": false, "constructor": true}, {"identifier": "MapPolylineTreeSet", "parameters": "(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " MapPolylineTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  MapPolylineTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "MapPolylineTreeSet.MapPolylineTreeSet(double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "MapPolylineTreeSet", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "public", "return": "", "signature": " MapPolylineTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "public  MapPolylineTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "MapPolylineTreeSet.MapPolylineTreeSet(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P polyline, double precision, OutputParameter<P> firstNeighbour, OutputParameter<P> secondNeighbour)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P polyline, double precision, OutputParameter<P> firstNeighbour, OutputParameter<P> secondNeighbour)", "full_signature": "@Override public boolean add(P polyline, double precision, OutputParameter<P> firstNeighbour, OutputParameter<P> secondNeighbour)", "class_method_signature": "MapPolylineTreeSet.add(P polyline, double precision, OutputParameter<P> firstNeighbour, OutputParameter<P> secondNeighbour)", "testcase": false, "constructor": false}, {"identifier": "getNearestEnd", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearestEnd(Point2D<?, ?> position)", "full_signature": "@Override @Pure public final P getNearestEnd(Point2D<?, ?> position)", "class_method_signature": "MapPolylineTreeSet.getNearestEnd(Point2D<?, ?> position)", "testcase": false, "constructor": false}, {"identifier": "getNearestEnd", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public", "return": "P", "signature": "P getNearestEnd(double x, double y)", "full_signature": "@Override @Pure public P getNearestEnd(double x, double y)", "class_method_signature": "MapPolylineTreeSet.getNearestEnd(double x, double y)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/tree/MapPolylineTreeSet.java"}, "focal_method": {"identifier": "getNearestEnd", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public final", "return": "P", "body": "@Override\n\t@Pure\n\tpublic final P getNearestEnd(Point2D<?, ?> position) {\n\t\treturn getNearestEnd(position.getX(), position.getY());\n\t}", "signature": "P getNearestEnd(Point2D<?, ?> position)", "full_signature": "@Override @Pure public final P getNearestEnd(Point2D<?, ?> position)", "class_method_signature": "MapPolylineTreeSet.getNearestEnd(Point2D<?, ?> position)", "testcase": false, "constructor": false, "invocations": ["getNearestEnd", "getX", "getY"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}