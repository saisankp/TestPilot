{"test_class": {"identifier": "TraceMongoCommandListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static BsonDocument LONG_COMMAND = BsonDocument.parse(\"{\" +\n    \"   \\\"insert\\\": \\\"myCollection\\\",\\n\" +\n    \"   \\\"bar\\\": {\" +\n    \"       \\\"test\\\": \\\"asdfghjkl\\\",\\n\" +\n    \"   },\\n\" +\n    \"}\");", "modifier": "static", "type": "BsonDocument", "declarator": "LONG_COMMAND = BsonDocument.parse(\"{\" +\n    \"   \\\"insert\\\": \\\"myCollection\\\",\\n\" +\n    \"   \\\"bar\\\": {\" +\n    \"       \\\"test\\\": \\\"asdfghjkl\\\",\\n\" +\n    \"   },\\n\" +\n    \"}\")", "var_name": "LONG_COMMAND"}, {"original_string": "static Throwable EXCEPTION = new RuntimeException(\"Error occurred\");", "modifier": "static", "type": "Throwable", "declarator": "EXCEPTION = new RuntimeException(\"Error occurred\")", "var_name": "EXCEPTION"}, {"original_string": "@Mock ThreadLocalSpan threadLocalSpan;", "modifier": "@Mock", "type": "ThreadLocalSpan", "declarator": "threadLocalSpan", "var_name": "threadLocalSpan"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "TraceMongoCommandListener listener;", "modifier": "", "type": "TraceMongoCommandListener", "declarator": "listener", "var_name": "listener"}], "file": "instrumentation/mongodb/src/test/java/brave/mongodb/TraceMongoCommandListenerTest.java"}, "test_case": {"identifier": "commandStarted_normal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void commandStarted_normal() {\n    setupCommandStartedMocks();\n\n    listener.commandStarted(createCommandStartedEvent());\n\n    verifyCommandStartedMocks();\n    verifyNoMoreInteractions(threadLocalSpan, span);\n  }", "signature": "void commandStarted_normal()", "full_signature": "@Test public void commandStarted_normal()", "class_method_signature": "TraceMongoCommandListenerTest.commandStarted_normal()", "testcase": true, "constructor": false, "invocations": ["setupCommandStartedMocks", "commandStarted", "createCommandStartedEvent", "verifyCommandStartedMocks", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TraceMongoCommandListener", "superclass": "", "interfaces": "implements CommandListener", "fields": [{"original_string": "static final Set<String> COMMANDS_WITH_COLLECTION_NAME = new LinkedHashSet<>(Arrays.asList(\n    \"aggregate\", \"count\", \"distinct\", \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\",\n    \"insert\", \"update\", \"collMod\", \"compact\", \"convertToCapped\", \"create\", \"createIndexes\", \"drop\",\n    \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));", "modifier": "static final", "type": "Set<String>", "declarator": "COMMANDS_WITH_COLLECTION_NAME = new LinkedHashSet<>(Arrays.asList(\n    \"aggregate\", \"count\", \"distinct\", \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\",\n    \"insert\", \"update\", \"collMod\", \"compact\", \"convertToCapped\", \"create\", \"createIndexes\", \"drop\",\n    \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"))", "var_name": "COMMANDS_WITH_COLLECTION_NAME"}, {"original_string": "final ThreadLocalSpan threadLocalSpan;", "modifier": "final", "type": "ThreadLocalSpan", "declarator": "threadLocalSpan", "var_name": "threadLocalSpan"}], "methods": [{"identifier": "TraceMongoCommandListener", "parameters": "(MongoDBTracing mongoDBTracing)", "modifiers": "", "return": "", "signature": " TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "full_signature": "  TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "class_method_signature": "TraceMongoCommandListener.TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "testcase": false, "constructor": true}, {"identifier": "TraceMongoCommandListener", "parameters": "(ThreadLocalSpan threadLocalSpan)", "modifiers": "", "return": "", "signature": " TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "full_signature": "  TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "class_method_signature": "TraceMongoCommandListener.TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "testcase": false, "constructor": true}, {"identifier": "commandStarted", "parameters": "(CommandStartedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandStarted(CommandStartedEvent event)", "full_signature": "@Override public void commandStarted(CommandStartedEvent event)", "class_method_signature": "TraceMongoCommandListener.commandStarted(CommandStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandSucceeded", "parameters": "(CommandSucceededEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandSucceeded(CommandSucceededEvent event)", "full_signature": "@Override public void commandSucceeded(CommandSucceededEvent event)", "class_method_signature": "TraceMongoCommandListener.commandSucceeded(CommandSucceededEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandFailed", "parameters": "(CommandFailedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandFailed(CommandFailedEvent event)", "full_signature": "@Override public void commandFailed(CommandFailedEvent event)", "class_method_signature": "TraceMongoCommandListener.commandFailed(CommandFailedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getCollectionName", "parameters": "(BsonDocument command, String commandName)", "modifiers": "@Nullable", "return": "String", "signature": "String getCollectionName(BsonDocument command, String commandName)", "full_signature": "@Nullable String getCollectionName(BsonDocument command, String commandName)", "class_method_signature": "TraceMongoCommandListener.getCollectionName(BsonDocument command, String commandName)", "testcase": false, "constructor": false}, {"identifier": "getNonEmptyBsonString", "parameters": "(BsonValue bsonValue)", "modifiers": "@Nullable static", "return": "String", "signature": "String getNonEmptyBsonString(BsonValue bsonValue)", "full_signature": "@Nullable static String getNonEmptyBsonString(BsonValue bsonValue)", "class_method_signature": "TraceMongoCommandListener.getNonEmptyBsonString(BsonValue bsonValue)", "testcase": false, "constructor": false}, {"identifier": "getSpanName", "parameters": "(String commandName, @Nullable String collectionName)", "modifiers": "static", "return": "String", "signature": "String getSpanName(String commandName, @Nullable String collectionName)", "full_signature": "static String getSpanName(String commandName, @Nullable String collectionName)", "class_method_signature": "TraceMongoCommandListener.getSpanName(String commandName, @Nullable String collectionName)", "testcase": false, "constructor": false}], "file": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java"}, "focal_method": {"identifier": "commandStarted", "parameters": "(CommandStartedEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override public void commandStarted(CommandStartedEvent event) {\n    String databaseName = event.getDatabaseName();\n    if (\"admin\".equals(databaseName)) return; // don't trace commands like \"endSessions\"\n\n    Span span = threadLocalSpan.next();\n    if (span == null || span.isNoop()) return;\n\n    String commandName = event.getCommandName();\n    BsonDocument command = event.getCommand();\n    String collectionName = getCollectionName(command, commandName);\n\n    span.name(getSpanName(commandName, collectionName))\n      .kind(CLIENT)\n      .remoteServiceName(\"mongodb-\" + databaseName)\n      .tag(\"mongodb.command\", commandName);\n\n    if (collectionName != null) {\n      span.tag(\"mongodb.collection\", collectionName);\n    }\n\n    ConnectionDescription connectionDescription = event.getConnectionDescription();\n    if (connectionDescription != null) {\n      ConnectionId connectionId = connectionDescription.getConnectionId();\n      if (connectionId != null) {\n        span.tag(\"mongodb.cluster_id\", connectionId.getServerId().getClusterId().getValue());\n      }\n\n      try {\n        InetSocketAddress socketAddress =\n          connectionDescription.getServerAddress().getSocketAddress();\n        span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n      } catch (MongoSocketException ignored) {\n\n      }\n    }\n\n    span.start();\n  }", "signature": "void commandStarted(CommandStartedEvent event)", "full_signature": "@Override public void commandStarted(CommandStartedEvent event)", "class_method_signature": "TraceMongoCommandListener.commandStarted(CommandStartedEvent event)", "testcase": false, "constructor": false, "invocations": ["getDatabaseName", "equals", "next", "isNoop", "getCommandName", "getCommand", "getCollectionName", "tag", "remoteServiceName", "kind", "name", "getSpanName", "tag", "getConnectionDescription", "getConnectionId", "tag", "getValue", "getClusterId", "getServerId", "getSocketAddress", "getServerAddress", "remoteIpAndPort", "getHostAddress", "getAddress", "getPort", "start"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}