{"test_class": {"identifier": "MphChlBasisOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MphChlBasisOp mphChlOp;", "modifier": "private", "type": "MphChlBasisOp", "declarator": "mphChlOp", "var_name": "mphChlOp"}], "file": "s3tbx-mphchl/src/test/java/org/esa/s3tbx/mphchl/MphChlBasisOpTest.java"}, "test_case": {"identifier": "testConfigureTargetProduct_withMphBand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigureTargetProduct_withMphBand() {\n        final TestProductConfigurer productConfigurer = new TestProductConfigurer();\n\n        mphChlOp.exportMph = true;\n        mphChlOp.configureTargetProduct(productConfigurer);\n\n        final Product targetProduct = productConfigurer.getTargetProduct();\n        assertNotNull(targetProduct);\n\n        final Band mphBand = targetProduct.getBand(\"mph\");\n        assertNotNull(mphBand);\n        assertEquals(ProductData.TYPE_FLOAT32, mphBand.getDataType());\n        assertEquals(\"dl\", mphBand.getUnit());\n        assertEquals(Double.NaN, mphBand.getGeophysicalNoDataValue(), 1e-8);\n    }", "signature": "void testConfigureTargetProduct_withMphBand()", "full_signature": "@Test public void testConfigureTargetProduct_withMphBand()", "class_method_signature": "MphChlBasisOpTest.testConfigureTargetProduct_withMphBand()", "testcase": true, "constructor": false, "invocations": ["configureTargetProduct", "getTargetProduct", "assertNotNull", "getBand", "assertNotNull", "assertEquals", "getDataType", "assertEquals", "getUnit", "assertEquals", "getGeophysicalNoDataValue"]}, "focal_class": {"identifier": "MphChlBasisOp", "superclass": "extends PixelOperator", "interfaces": "", "fields": [{"original_string": "@SourceProduct(alias = \"Name\")\n    Product sourceProduct;", "modifier": "@SourceProduct(alias = \"Name\")", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@Parameter(description = \"Expression defining pixels considered for processing.\",\n            converter = BooleanExpressionConverter.class)\n    String validPixelExpression;", "modifier": "@Parameter(description = \"Expression defining pixels considered for processing.\",\n            converter = BooleanExpressionConverter.class)", "type": "String", "declarator": "validPixelExpression", "var_name": "validPixelExpression"}, {"original_string": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")\n    double cyanoMaxValue;", "modifier": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")", "type": "double", "declarator": "cyanoMaxValue", "var_name": "cyanoMaxValue"}, {"original_string": "@Parameter(defaultValue = \"350.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float.\")\n    double chlThreshForFloatFlag;", "modifier": "@Parameter(defaultValue = \"350.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float.\")", "type": "double", "declarator": "chlThreshForFloatFlag", "var_name": "chlThreshForFloatFlag"}, {"original_string": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")\n    boolean exportMph;", "modifier": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")", "type": "boolean", "declarator": "exportMph", "var_name": "exportMph"}, {"original_string": "float[] sensorWvls;", "modifier": "", "type": "float[]", "declarator": "sensorWvls", "var_name": "sensorWvls"}, {"original_string": "VirtualBandOpImage invalidOpImage;", "modifier": "", "type": "VirtualBandOpImage", "declarator": "invalidOpImage", "var_name": "invalidOpImage"}, {"original_string": "double ratioP;", "modifier": "", "type": "double", "declarator": "ratioP", "var_name": "ratioP"}, {"original_string": "double ratioC;", "modifier": "", "type": "double", "declarator": "ratioC", "var_name": "ratioC"}, {"original_string": "double ratioB;", "modifier": "", "type": "double", "declarator": "ratioB", "var_name": "ratioB"}], "methods": [{"identifier": "computePixel", "parameters": "(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "modifiers": "@Override protected", "return": "void", "signature": "void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "full_signature": "@Override protected void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "class_method_signature": "MphChlBasisOp.computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "testcase": false, "constructor": false}, {"identifier": "configureTargetSamples", "parameters": "(TargetSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureTargetProduct", "parameters": "(ProductConfigurer productConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetProduct(ProductConfigurer productConfigurer)", "full_signature": "@Override protected void configureTargetProduct(ProductConfigurer productConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetProduct(ProductConfigurer productConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureSourceSamples", "parameters": "(SourceSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "class_method_signature": "MphChlBasisOp.configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "prepareInputs", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void prepareInputs()", "full_signature": "@Override protected void prepareInputs()", "class_method_signature": "MphChlBasisOp.prepareInputs()", "testcase": false, "constructor": false}, {"identifier": "isSampleValid", "parameters": "(int x, int y)", "modifiers": "", "return": "boolean", "signature": "boolean isSampleValid(int x, int y)", "full_signature": " boolean isSampleValid(int x, int y)", "class_method_signature": "MphChlBasisOp.isSampleValid(int x, int y)", "testcase": false, "constructor": false}], "file": "s3tbx-mphchl/src/main/java/org/esa/s3tbx/mphchl/MphChlBasisOp.java"}, "focal_method": {"identifier": "configureTargetProduct", "parameters": "(ProductConfigurer productConfigurer)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void configureTargetProduct(ProductConfigurer productConfigurer) {\n        final Band chlBand = productConfigurer.addBand(\"chl\", ProductData.TYPE_FLOAT32);\n        chlBand.setUnit(\"mg/m^3\");\n        chlBand.setGeophysicalNoDataValue(Double.NaN);\n        chlBand.setNoDataValue(Double.NaN);\n        chlBand.setNoDataValueUsed(true);\n\n        final Band immersedCyanoBand = productConfigurer.addBand(\"immersed_cyanobacteria\", ProductData.TYPE_INT8);\n        immersedCyanoBand.setNoDataValue(0);\n        immersedCyanoBand.setNoDataValueUsed(true);\n        productConfigurer.addBand(\"floating_cyanobacteria\", ProductData.TYPE_INT8);\n        productConfigurer.addBand(\"floating_vegetation\", ProductData.TYPE_INT8);\n\n        if (exportMph) {\n            final Band mphBand = productConfigurer.addBand(\"mph\", ProductData.TYPE_FLOAT32);\n            mphBand.setUnit(\"dl\");\n            mphBand.setGeophysicalNoDataValue(Double.NaN);\n            mphBand.setNoDataValue(Double.NaN);\n            mphBand.setNoDataValueUsed(true);\n        }\n        final Band flagBand = productConfigurer.addBand(\"mph_chl_flags\", ProductData.TYPE_INT8);\n\n        super.configureTargetProduct(productConfigurer);\n\n        final Product targetProduct = productConfigurer.getTargetProduct();\n        final FlagCoding flagCoding = MphChlUtils.createMphChlFlagCoding(\"mph_chl_flags\");\n        targetProduct.getFlagCodingGroup().add(flagCoding);\n        flagBand.setSampleCoding(flagCoding);\n\n        MphChlUtils.setupMphChlBitmask(targetProduct);\n\n        final Product sourceProduct = productConfigurer.getSourceProduct();\n        ProductUtils.copyFlagBands(sourceProduct, targetProduct, true);\n    }", "signature": "void configureTargetProduct(ProductConfigurer productConfigurer)", "full_signature": "@Override protected void configureTargetProduct(ProductConfigurer productConfigurer)", "class_method_signature": "MphChlBasisOp.configureTargetProduct(ProductConfigurer productConfigurer)", "testcase": false, "constructor": false, "invocations": ["addBand", "setUnit", "setGeophysicalNoDataValue", "setNoDataValue", "setNoDataValueUsed", "addBand", "setNoDataValue", "setNoDataValueUsed", "addBand", "addBand", "addBand", "setUnit", "setGeophysicalNoDataValue", "setNoDataValue", "setNoDataValueUsed", "addBand", "configureTargetProduct", "getTargetProduct", "createMphChlFlagCoding", "add", "getFlagCodingGroup", "setSampleCoding", "setupMphChlBitmask", "getSourceProduct", "copyFlagBands"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}