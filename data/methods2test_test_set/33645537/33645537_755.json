{"test_class": {"identifier": "TrampolineSchedulerTest", "superclass": "extends AbstractSchedulerTests", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/schedulers/TrampolineSchedulerTest.java"}, "test_case": {"identifier": "testNestedTrampolineWithUnsubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNestedTrampolineWithUnsubscribe() {\n        final ArrayList<String> workDone = new ArrayList<String>();\n        final CompositeSubscription workers = new CompositeSubscription();\n        Worker worker = Schedulers.trampoline().createWorker();\n        try {\n            workers.add(worker);\n            worker.schedule(new Action0() {\n    \n                @Override\n                public void call() {\n                    workers.add(doWorkOnNewTrampoline(\"A\", workDone));\n                }\n    \n            });\n    \n            final Worker worker2 = Schedulers.trampoline().createWorker();\n            workers.add(worker2);\n            worker2.schedule(new Action0() {\n    \n                @Override\n                public void call() {\n                    workers.add(doWorkOnNewTrampoline(\"B\", workDone));\n                    // we unsubscribe worker2 ... it should not affect work scheduled on a separate Trampline.Worker\n                    worker2.unsubscribe();\n                }\n    \n            });\n        \n            assertEquals(6, workDone.size());\n            assertEquals(Arrays.asList(\"A.1\", \"A.B.1\", \"A.B.2\", \"B.1\", \"B.B.1\", \"B.B.2\"), workDone);\n        } finally {\n            workers.unsubscribe();\n        }\n    }", "signature": "void testNestedTrampolineWithUnsubscribe()", "full_signature": "@Test public void testNestedTrampolineWithUnsubscribe()", "class_method_signature": "TrampolineSchedulerTest.testNestedTrampolineWithUnsubscribe()", "testcase": true, "constructor": false, "invocations": ["createWorker", "trampoline", "add", "schedule", "add", "doWorkOnNewTrampoline", "createWorker", "trampoline", "add", "schedule", "add", "doWorkOnNewTrampoline", "unsubscribe", "assertEquals", "size", "assertEquals", "asList", "unsubscribe"]}, "focal_class": {"identifier": "TrampolineScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "private static final TrampolineScheduler INSTANCE = new TrampolineScheduler();", "modifier": "private static final", "type": "TrampolineScheduler", "declarator": "INSTANCE = new TrampolineScheduler()", "var_name": "INSTANCE"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "static", "return": "TrampolineScheduler", "signature": "TrampolineScheduler instance()", "full_signature": "static TrampolineScheduler instance()", "class_method_signature": "TrampolineScheduler.instance()", "testcase": false, "constructor": false}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "TrampolineScheduler.createWorker()", "testcase": false, "constructor": false}, {"identifier": "TrampolineScheduler", "parameters": "()", "modifiers": "", "return": "", "signature": " TrampolineScheduler()", "full_signature": "  TrampolineScheduler()", "class_method_signature": "TrampolineScheduler.TrampolineScheduler()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(int x, int y)", "modifiers": "private static", "return": "int", "signature": "int compare(int x, int y)", "full_signature": "private static int compare(int x, int y)", "class_method_signature": "TrampolineScheduler.compare(int x, int y)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/schedulers/TrampolineScheduler.java"}, "focal_method": {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "body": "@Override\n    public Worker createWorker() {\n        return new InnerCurrentThreadScheduler();\n    }", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "TrampolineScheduler.createWorker()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}