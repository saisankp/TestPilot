{"test_class": {"identifier": "CsvExtractorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String CONNECTOR_ID = \"testConnectorId\";", "modifier": "protected static final", "type": "String", "declarator": "CONNECTOR_ID = \"testConnectorId\"", "var_name": "CONNECTOR_ID"}, {"original_string": "protected CsvExtractorFactory extractorFactory;", "modifier": "protected", "type": "CsvExtractorFactory", "declarator": "extractorFactory", "var_name": "extractorFactory"}, {"original_string": "protected StreamConnector connectorMock;", "modifier": "protected", "type": "StreamConnector", "declarator": "connectorMock", "var_name": "connectorMock"}, {"original_string": "private MutableExtractorModel model;", "modifier": "private", "type": "MutableExtractorModel", "declarator": "model", "var_name": "model"}], "file": "link-move-csv/src/test/java/com/nhl/link/move/runtime/csv/CsvExtractorFactoryTest.java"}, "test_case": {"identifier": "testBasicIntegration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicIntegration() throws IOException {\n        when(connectorMock.getInputStream(anyMap()))\n                .thenReturn(new ByteArrayInputStream(\"r1c1,r1c2,r1c3\\nr2c1,r2c2,r2c3\".getBytes()));\n        RowReader reader = extractorFactory.createExtractor(connectorMock, model).getReader(Collections.emptyMap());\n        doCheck(reader);\n    }", "signature": "void testBasicIntegration()", "full_signature": "@Test public void testBasicIntegration()", "class_method_signature": "CsvExtractorFactoryTest.testBasicIntegration()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getInputStream", "anyMap", "getBytes", "getReader", "createExtractor", "emptyMap", "doCheck"]}, "focal_class": {"identifier": "CsvExtractorFactory", "superclass": "", "interfaces": "implements IExtractorFactory<StreamConnector>", "fields": [{"original_string": "private static final String CSV_EXTRACTOR_TYPE = \"csv\";", "modifier": "private static final", "type": "String", "declarator": "CSV_EXTRACTOR_TYPE = \"csv\"", "var_name": "CSV_EXTRACTOR_TYPE"}, {"original_string": "public static final String DELIMITER_PROPERTY = \"extractor.csv.delimiter\";", "modifier": "public static final", "type": "String", "declarator": "DELIMITER_PROPERTY = \"extractor.csv.delimiter\"", "var_name": "DELIMITER_PROPERTY"}, {"original_string": "public static final String READ_FROM_PROPERTY = \"extractor.csv.readFrom\";", "modifier": "public static final", "type": "String", "declarator": "READ_FROM_PROPERTY = \"extractor.csv.readFrom\"", "var_name": "READ_FROM_PROPERTY"}, {"original_string": "public static final String CHARSET_PROPERTY = \"extractor.csv.charset\";", "modifier": "public static final", "type": "String", "declarator": "CHARSET_PROPERTY = \"extractor.csv.charset\"", "var_name": "CHARSET_PROPERTY"}, {"original_string": "private final Charset defaultCharset;", "modifier": "private final", "type": "Charset", "declarator": "defaultCharset", "var_name": "defaultCharset"}], "methods": [{"identifier": "CsvExtractorFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " CsvExtractorFactory()", "full_signature": "public  CsvExtractorFactory()", "class_method_signature": "CsvExtractorFactory.CsvExtractorFactory()", "testcase": false, "constructor": true}, {"identifier": "getExtractorType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getExtractorType()", "full_signature": "@Override public String getExtractorType()", "class_method_signature": "CsvExtractorFactory.getExtractorType()", "testcase": false, "constructor": false}, {"identifier": "getConnectorType", "parameters": "()", "modifiers": "@Override public", "return": "Class<StreamConnector>", "signature": "Class<StreamConnector> getConnectorType()", "full_signature": "@Override public Class<StreamConnector> getConnectorType()", "class_method_signature": "CsvExtractorFactory.getConnectorType()", "testcase": false, "constructor": false}, {"identifier": "createExtractor", "parameters": "(StreamConnector connector, ExtractorModel model)", "modifiers": "@Override public", "return": "Extractor", "signature": "Extractor createExtractor(StreamConnector connector, ExtractorModel model)", "full_signature": "@Override public Extractor createExtractor(StreamConnector connector, ExtractorModel model)", "class_method_signature": "CsvExtractorFactory.createExtractor(StreamConnector connector, ExtractorModel model)", "testcase": false, "constructor": false}], "file": "link-move-csv/src/main/java/com/nhl/link/move/runtime/csv/CsvExtractorFactory.java"}, "focal_method": {"identifier": "createExtractor", "parameters": "(StreamConnector connector, ExtractorModel model)", "modifiers": "@Override public", "return": "Extractor", "body": "@Override\n    public Extractor createExtractor(StreamConnector connector, ExtractorModel model) {\n\n        String charsetName = model.getPropertyValue(CHARSET_PROPERTY);\n\n        Charset charset = charsetName != null ? Charset.forName(charsetName) : defaultCharset;\n\n        CSVFormat csvFormat = CSVFormat.RFC4180;\n        String delimiter = model.getPropertyValue(DELIMITER_PROPERTY);\n        if (delimiter != null) {\n            if (delimiter.length() != 1) {\n                throw new LmRuntimeException(\"Invalid delimiter (should be exactly one character): \" + delimiter);\n            }\n            csvFormat = csvFormat.withDelimiter(delimiter.charAt(0));\n        }\n\n        String readFromString = model.getPropertyValue(READ_FROM_PROPERTY);\n        Integer readFrom = readFromString != null ? Integer.valueOf(readFromString) : null;\n\n        return new CsvExtractor(connector, model.getAttributes(), charset, csvFormat, readFrom);\n    }", "signature": "Extractor createExtractor(StreamConnector connector, ExtractorModel model)", "full_signature": "@Override public Extractor createExtractor(StreamConnector connector, ExtractorModel model)", "class_method_signature": "CsvExtractorFactory.createExtractor(StreamConnector connector, ExtractorModel model)", "testcase": false, "constructor": false, "invocations": ["getPropertyValue", "forName", "getPropertyValue", "length", "withDelimiter", "charAt", "getPropertyValue", "valueOf", "getAttributes"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}