{"test_class": {"identifier": "BackupResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = KeywhizService.customizeObjectMapper(Jackson.newObjectMapper());", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = KeywhizService.customizeObjectMapper(Jackson.newObjectMapper())", "var_name": "mapper"}, {"original_string": "private static final String TEST_EXPORT_KEY_PRIVATE =\n      \"-----BEGIN PGP PRIVATE KEY BLOCK-----\\n\\n\"\n      + \"xcMGBFltUFoBCAC4aUBq1b6YYK65spHuVx+6FiQ9TiFMoiC4SpiyKH0oKsaa6uRz\\n\"\n      + \"EKzpBp0GoCIBhavBpmnzpNzdhuBrkAzK4543bxXEGGmjsbSV69ysgLBhTyrngOuS\\n\"\n      + \"diPVgaXIf47FpA/YoIlbyG1uQZFZ6bzJQL8gr8dbO5plFCaIUAFQhx88gNBmGgRk\\n\"\n      + \"rW5iU6nzlNzVRlkCAnK18YNv0h08nNRtXKvmLAnM6RSaVWsqDeisA/717dp1o4Hz\\n\"\n      + \"CofZGPdUkEoZkx2UekH9E7kzH90D2QmR+PdWtOz+5gtOMXgrpsJoh3fhwXVPo8dz\\n\"\n      + \"MT/5iLbReoM8TZVOLPsLyVJdd/oeV/5e6HvzABEBAAH+CQMI/8d6EpQ3Mz1gFoG3\\n\"\n      + \"LsQKuMofi+9bEEAnNNKloj436Sm8DXSrigD7jXU4Xh22tgcAfVXHSi6Bx0/Pz1TN\\n\"\n      + \"abHIUD4M2/+04HmMxMyu1+zD7NVcVOV4RoPVcKA4w53rcmfn9bLCPHgodpGxP+9h\\n\"\n      + \"EbVcwvIkpM4iBuRFQ2G/B9zdl+xVmf+0/MFILLYP2NYSUM7Spqff/NmV5Ip0HBZG\\n\"\n      + \"NwgT/71CL6JiOTnb5PTPJek0cPY4V9COwkaK2yb+ys006kD88J2BqFKrPLGLBsoh\\n\"\n      + \"ONscBn18TG9229nLPiz8a6KP8ptB6mFchrb6Q6rRqpXREP2RrzebCgdz3+/Y6Son\\n\"\n      + \"Cs130gbpzIQw8OmnzJ/AqAf0dnq7/+enP953GwleRmJhGCqirMHhwplXYnv8tNho\\n\"\n      + \"AhH2M/Wv5PxdhBfQBPoakjZh0Ht0qIz1a8sGzFQFxDYjFpM4AVnygyMmsm+uuFVU\\n\"\n      + \"60XoV78fm8QjGpqzQ/C0zNXI8b2OqnowTjGvxM3KGCwHo5Nj57EhvGbiHV6hluPW\\n\"\n      + \"5vAy+prQSnwtqnRUyxFqtJw82XudTpCvS8futC2tTRwgQo4taDukLr8XoRaZQ99N\\n\"\n      + \"lkEKLeiI3olXuUd4gXvdr1qHfUBHiWH5mv7thnfxKQHqcroPx12mKxLqZI6hqar1\\n\"\n      + \"BqxRicrPix0I2OJCfqnD5we17ICtMGNX1X2zGcVCS5UvdRemVQr7FVUFFhlR2FE0\\n\"\n      + \"YcsAqH8Tcs24ijKEEgehUD68ewqqMB7qMRaqbBHpIBYSSinlMP8Jp0tQrBt1jN8Q\\n\"\n      + \"6yk/l9I+xHwYZq+/IliNchdIJAMTG45DAu4nFHDy+fqPjhRr6aVXPH63aphwok8r\\n\"\n      + \"uXjX5idoEeojs3syxGGiOr5V2eevkJoVsAUW6nWSjS2TxxL98auEOBaUOjkFH7gZ\\n\"\n      + \"Q1NP9/AVZQaUzR5UZXN0IEV4cG9ydCA8dGVzdEBleGFtcGxlLmNvbT7CwG0EEwEK\\n\"\n      + \"ABcFAlltUFoCGy8DCwkHAxUKCAIeAQIXgAAKCRBLLJgMTvJq7XlJB/454rCQ6uuF\\n\"\n      + \"CiJsFSWuxRelo2/NkG2NUr/rF28OqNBKILR+WAZaMPk52hulXdZpOKn1ozgFYhvB\\n\"\n      + \"G14WhEErkTGWl/zxof9g52apChyFpM1ZpkeRXXygTtSrpMk3tRy3Qu5SS7LlxcPU\\n\"\n      + \"sGfwnj/80KVycyOY9+jc4/NqSi2QOfDElN7LieHU7VMLxwPNcsv7YACBR1mssieJ\\n\"\n      + \"VdPEM0eHOxMufKz6q7cc0meY4Kkyt25o3pMVp2dNLzy0d3cg0omE5zEuX9CxG9Zw\\n\"\n      + \"Hr12kslU/XP9K2DpjeNY+awkelekrCmVKrjyYuEToUHEQKSnAv8MUUIrcagGv0Z5\\n\"\n      + \"MJDtJTBxsXRDx8MFBFltUFoBCADES+invrHZliwZ7dv+Du1kUOOWniY4Dv1+pHpR\\n\"\n      + \"xLpRpZOG6p/m7poGS57fzS1yUoeWUmtVzJpGVZpec5iywKtTeeufN1jJRKH12nZA\\n\"\n      + \"bsVJGj9zVrHW0/yQgsxw4YAyuqXjytN2nCk8GoRjImvEmeNVamDGvWgKjz98sECi\\n\"\n      + \"Accgr3sKFDOGCUxiy2PCzMXGZ8jNbIvSKdzJ8r81xTJmcfRM0Il3j83O883Vqex1\\n\"\n      + \"+t1JE9reeuwgxnuzahyHn+Bi/xDaUjtl0z7CZczWU5VcTOrIICLCg0qzglOS86TN\\n\"\n      + \"tUJddi+IQxOoL9KsariOeHFWcifC/R3036Z2aEn1VGC6nENjABEBAAH+CQMIWUDt\\n\"\n      + \"oSTmQUVgUsZ0BRniOH1n+XpBCFuQzfBtozEU7Ik9TJqYceUjMOCcO2OWSb335GFt\\n\"\n      + \"lBqbFV/HycuxXcjTOwX72HqunSnkSFPZsGruCGX+8saRj0/L59c+Malkd9+iSNrT\\n\"\n      + \"sKEPWyWJGlAsk/9AjZImNk3/3eb4d+9OT+b18hSdlHxj6qiA0hxjdsaSwR25NjYt\\n\"\n      + \"fPMnBGB+iACgcmE5c4JDe8P/mBJ9yQfUou0nO1wLNi78Aq28DUxRsHpgcz+cWnoF\\n\"\n      + \"1wm87fO/e3vA4dgdiCY/cbAP7RXQGZzmPcnrea27F7ruROxH/mgeqQJXW3TqPoKN\\n\"\n      + \"z79PlR/9McLuuOwe4afrvdjwa3B13FE/iZZ+nFULZrbnj1cXgXbjsFrtp47oDeh4\\n\"\n      + \"XEa6PBc8dflyXdPfDkGtPmMvlUh6kOI1AgOxFPXyQRT1J5EsYN2EgGu08DqhDtXm\\n\"\n      + \"1Zfq4DfNrMU/ZBibwZOdmitYMWlFF/T/TSVDETWBIHjnV42Qupt4vCp/HoyyZt09\\n\"\n      + \"0XNB7Wm1NrCuW/muLrpV38bPXBm6QDKQ9kjDlrrbtB3ss5vwyH+uNVGmKWBPNqen\\n\"\n      + \"o50ieGnjcd7woebzamz5w6P2F6wyYgK94WQxgWQBW12EnhBjcpnODIUsC/0rJiKh\\n\"\n      + \"WTwxbZkjgAtJEiS4egu/z1wlIdaSY2Beszh+xWe8UQnO1FYmEhvFfMVRARvWO2sj\\n\"\n      + \"Ge1A7fo7w/GdRNa12roRotlXnmjCLBoRNzLpYXWvTd8AjZlK1azDuIcJ5LJbjJ9Z\\n\"\n      + \"wRsVIPQmRK7y1QtXohs1Z+dbBmOs40BCkaXnovLzTJ2pj+1Z+zn6rZBIyZwjIU2X\\n\"\n      + \"JGhHT7BDy0t5NdHchp33nA4kvnsX3wl6NmqzOaFC6SuPBxuFvzHgvNpbNB4Hqfqv\\n\"\n      + \"p2vadFtc38+pCKpvR+FE0anCwYQEGAEKAA8FAlltUFoFCQ8JnAACGy4BKQkQSyyY\\n\"\n      + \"DE7yau3AXSAEGQEKAAYFAlltUFoACgkQnSdCQ6/aHBMclQgAjqPxGQMkxFdSDNYM\\n\"\n      + \"dy7l6ejZoZPTiCQIOBCla1GuJeSeZhS3ky4iLx6wobrmVE9x7xWuGh3rAolGPpGo\\n\"\n      + \"O2fEnS6LeM0UgdiWUNHVa//TfNvkxB5FQAKatlF3fezvxG2Dt45hgHX3RzY25sgA\\n\"\n      + \"WnhLMfWHCACniA6x7/YnWzNYJL5kPYsBs5x85kH/7mxxN39DhXM42Ff/JUJlXjxG\\n\"\n      + \"06V0hLiQb0W6VXUlpyI89V6gMaZCBv+I6AW1ZKCkUgoF9DMcK8/gV2TOS7hM3gvR\\n\"\n      + \"+89y/oXxTmIz2fAWJfH/xG+UkrCw6GXSmUzexoNmDEUwesUvfq9zZ7v4Rbm1dDJB\\n\"\n      + \"suyfaMprCACbv3X0JY+WaMk5+IeeOSdXjA59G1ZcrxkcX4GnNiLBntrLD6F69JGh\\n\"\n      + \"OyNrS1mcw4sZ1bO2v+xEutxl+DjaLpeU9KcFU7Z3m2Grpu8G0sdL1BLzX7c0fTJ6\\n\"\n      + \"yYp5fGSi5VnaYNUeYhghrCiKI6OLhKmzPwwV1+fxfsa1/TAmzJnzyx4ygNH/4Adi\\n\"\n      + \"Fh6SFodIm0J2ctcuwKWiZ6HyFGaOViIAfsI1YJJBN878VjZ6CvqDS0BDisqmKG2b\\n\"\n      + \"6OylMnJaPallctxBGU64TvP1wo1Si9/05e1st5H/utOfLQnkGx+g4Kc7Gj/l8CfL\\n\"\n      + \"UcGsYigWxxOnsgtdZq4q9kCOEV09j+xEx8MGBFltUFoBCADdLxjZtGjUQ9TqwdA1\\n\"\n      + \"KeZbRkYE87kwNOUXd0V2eDp2bMS0IwEUsxURELCIHoR4AUumpxzM4rS93i0Y2TPv\\n\"\n      + \"MdbwkTU974TQdpY3+C3b3LEJgMz/VKXuQc1U/ssKyBOiYygnIN0VVjSWAWEUqulc\\n\"\n      + \"EjETfBn61L1Bkgja/e7eVtJrdb0B+2NgXGhEf2GDEPOoKmwd4+TPFkLHkhynWG04\\n\"\n      + \"fOfUIj0LjUehhqwL6eh2mVkTx+12beCIg2IgXreunxyJumC4ztA7PmGneGmGcC4r\\n\"\n      + \"RIBx6JCVIy5t36i9ORSQ0ohNymgU9O7VwDR9n5aiHvMGxk1Apo+w7sHzbhol805z\\n\"\n      + \"uMWfABEBAAH+CQMILyd53pWFzhlgvlajjkJ0eM5Pdphpb+mS/7bQJAyElpoXX0Z+\\n\"\n      + \"DOKoE0/+aV+VvMQtF3/40GQVGuFDTQ/GhuYWdtyexQP9GSnm8LUBj/IeqEa/QSzd\\n\"\n      + \"KOGF9lsx8dA3fy9+b+VOJcFBgfPJlysCKfmI9BBkRMjPAf9HIJDv+nsl5fWXFJzE\\n\"\n      + \"vwn2JYONONaYBKg5NN1x3mUwqUpBvV0eEREzJ9Zv3mgpWD6EqqPZ14cw5vDKhHFM\\n\"\n      + \"0mseO40Wak0eOkhY4NyUGPE6DAj+ur00F7NE3v70wwlk9GlcReZ2QLRnJl7/ISGU\\n\"\n      + \"JhfjO4TyAEzLIsGC+H8GURSOYL7YZiSFSXR7pjFYN/zTH8aBvW28iyaEiZVgLX14\\n\"\n      + \"6eONWaUeksqIjMIVRqn6lZ46QbLw3c51T/QSIy4w7199WTGMnKDd7cNIzgVBBw3Q\\n\"\n      + \"+Xwp738KRlQHw010Zhl81a8Jr9xmRuwu+nFZox3J/jAnni3yuD26z5LTQSQ5PPSq\\n\"\n      + \"xjVU1LYYMGlwesrB2hMG7C2KAgY1x08cwH1gwNpjRvESy9eSgjIMgnlFuYnD9Qsu\\n\"\n      + \"Nr9B8So+rbs5fCqT0tgaNpngPp36Pw3Vgh6yVvmObj7MGdUu4zI7KJeNAquukIUl\\n\"\n      + \"JFQU3m76mWulOF9E5lx2tZfkXNS8M8oFoWa8RjcDUmNL5XelYwSwMA8BveQkpEp6\\n\"\n      + \"GeZI1zJABd7fqMdSBfddTdXr+/9j9qxtXMg4qljO5Ep/GlSPZjwnCP2uDxX8D947\\n\"\n      + \"2QLBsE3JlF7Y+Tlptxl2QDecGH34ketXDXDY3mXSqDaGtOObVPH/74Lia/sWSFUE\\n\"\n      + \"/1lMU2Ko5NbcET3lFUEvk2nBziBU2zv8Mlz7TrBOemgH0W28BGQzzvnbZf61jNi2\\n\"\n      + \"VjOPtVPcZqQzE+05teYlAT8A7T6R1rdWyNDKZtd5A6AXwsGEBBgBCgAPBQJZbVBa\\n\"\n      + \"BQkPCZwAAhsuASkJEEssmAxO8mrtwF0gBBkBCgAGBQJZbVBaAAoJEK/oP1VMFmiN\\n\"\n      + \"t78H/i2noV3r3+PnCSwp9IDEBsiFE0E2Pd5nKGKzUJlzReDDgAKolur976eoRu6Z\\n\"\n      + \"XXVYk5PkOupM5mTDq7t7LwW9Tu2eAIwrV4/S+92IUNHXiaGhajaR06RhZ7lakOcZ\\n\"\n      + \"9BdGON9EyD89/92nSxR8C+a61JLXIewakTxIMu4hEo70YtMmzhQKikSTneIweZN5\\n\"\n      + \"s6oLrCiRCNJV50ORWFpflBO+EchjBTh1OKQ7GMiGqf+TWbet7EkhPZI9B4vZ4PR+\\n\"\n      + \"FDGvE0Pzfm8gTs0IS9WmeLgyLmwWrTbzxFv5RpQRFL0uyynY24lKhosBIHRYf4Ay\\n\"\n      + \"Ea+d5IBAqvksucTSOPK/S9npDcWUyQf8DCUeg/uZQ6ve7D+ck6rjuXtX+lozV1CC\\n\"\n      + \"YPb4+9PLHMHk+dyUetokFL3Vt1QYhTGq6VoL26BBj79LEJzkTBqV7I5k0Laideot\\n\"\n      + \"XiQ9hYJgUBLlq0wxNAD3pOSRdU/iBoA7WEU2+ud0bvRhaSgHwCsIp80TH8JHiaxk\\n\"\n      + \"EG9Qqe2MpA2I5cjljjDMkhnOgEJDZcOciJ0z4v8Fnl3Q+EdEvdYJ1Ip3+Xf9I9Gu\\n\"\n      + \"RpIqnkiLcbsAfgJUfnWtNaLgwU4FjL8uikCmNWS9RXtcHyjGwECSNbgNE8WzwSnG\\n\"\n      + \"+NE0JYW0ZepFhDkuoYyCLa+fAbynLe5G+x0S45KsusA9pRuTjZIfKA==\\n\"\n      + \"=mgrq\\n\"\n      + \"-----END PGP PRIVATE KEY BLOCK-----\\n\";", "modifier": "private static final", "type": "String", "declarator": "TEST_EXPORT_KEY_PRIVATE =\n      \"-----BEGIN PGP PRIVATE KEY BLOCK-----\\n\\n\"\n      + \"xcMGBFltUFoBCAC4aUBq1b6YYK65spHuVx+6FiQ9TiFMoiC4SpiyKH0oKsaa6uRz\\n\"\n      + \"EKzpBp0GoCIBhavBpmnzpNzdhuBrkAzK4543bxXEGGmjsbSV69ysgLBhTyrngOuS\\n\"\n      + \"diPVgaXIf47FpA/YoIlbyG1uQZFZ6bzJQL8gr8dbO5plFCaIUAFQhx88gNBmGgRk\\n\"\n      + \"rW5iU6nzlNzVRlkCAnK18YNv0h08nNRtXKvmLAnM6RSaVWsqDeisA/717dp1o4Hz\\n\"\n      + \"CofZGPdUkEoZkx2UekH9E7kzH90D2QmR+PdWtOz+5gtOMXgrpsJoh3fhwXVPo8dz\\n\"\n      + \"MT/5iLbReoM8TZVOLPsLyVJdd/oeV/5e6HvzABEBAAH+CQMI/8d6EpQ3Mz1gFoG3\\n\"\n      + \"LsQKuMofi+9bEEAnNNKloj436Sm8DXSrigD7jXU4Xh22tgcAfVXHSi6Bx0/Pz1TN\\n\"\n      + \"abHIUD4M2/+04HmMxMyu1+zD7NVcVOV4RoPVcKA4w53rcmfn9bLCPHgodpGxP+9h\\n\"\n      + \"EbVcwvIkpM4iBuRFQ2G/B9zdl+xVmf+0/MFILLYP2NYSUM7Spqff/NmV5Ip0HBZG\\n\"\n      + \"NwgT/71CL6JiOTnb5PTPJek0cPY4V9COwkaK2yb+ys006kD88J2BqFKrPLGLBsoh\\n\"\n      + \"ONscBn18TG9229nLPiz8a6KP8ptB6mFchrb6Q6rRqpXREP2RrzebCgdz3+/Y6Son\\n\"\n      + \"Cs130gbpzIQw8OmnzJ/AqAf0dnq7/+enP953GwleRmJhGCqirMHhwplXYnv8tNho\\n\"\n      + \"AhH2M/Wv5PxdhBfQBPoakjZh0Ht0qIz1a8sGzFQFxDYjFpM4AVnygyMmsm+uuFVU\\n\"\n      + \"60XoV78fm8QjGpqzQ/C0zNXI8b2OqnowTjGvxM3KGCwHo5Nj57EhvGbiHV6hluPW\\n\"\n      + \"5vAy+prQSnwtqnRUyxFqtJw82XudTpCvS8futC2tTRwgQo4taDukLr8XoRaZQ99N\\n\"\n      + \"lkEKLeiI3olXuUd4gXvdr1qHfUBHiWH5mv7thnfxKQHqcroPx12mKxLqZI6hqar1\\n\"\n      + \"BqxRicrPix0I2OJCfqnD5we17ICtMGNX1X2zGcVCS5UvdRemVQr7FVUFFhlR2FE0\\n\"\n      + \"YcsAqH8Tcs24ijKEEgehUD68ewqqMB7qMRaqbBHpIBYSSinlMP8Jp0tQrBt1jN8Q\\n\"\n      + \"6yk/l9I+xHwYZq+/IliNchdIJAMTG45DAu4nFHDy+fqPjhRr6aVXPH63aphwok8r\\n\"\n      + \"uXjX5idoEeojs3syxGGiOr5V2eevkJoVsAUW6nWSjS2TxxL98auEOBaUOjkFH7gZ\\n\"\n      + \"Q1NP9/AVZQaUzR5UZXN0IEV4cG9ydCA8dGVzdEBleGFtcGxlLmNvbT7CwG0EEwEK\\n\"\n      + \"ABcFAlltUFoCGy8DCwkHAxUKCAIeAQIXgAAKCRBLLJgMTvJq7XlJB/454rCQ6uuF\\n\"\n      + \"CiJsFSWuxRelo2/NkG2NUr/rF28OqNBKILR+WAZaMPk52hulXdZpOKn1ozgFYhvB\\n\"\n      + \"G14WhEErkTGWl/zxof9g52apChyFpM1ZpkeRXXygTtSrpMk3tRy3Qu5SS7LlxcPU\\n\"\n      + \"sGfwnj/80KVycyOY9+jc4/NqSi2QOfDElN7LieHU7VMLxwPNcsv7YACBR1mssieJ\\n\"\n      + \"VdPEM0eHOxMufKz6q7cc0meY4Kkyt25o3pMVp2dNLzy0d3cg0omE5zEuX9CxG9Zw\\n\"\n      + \"Hr12kslU/XP9K2DpjeNY+awkelekrCmVKrjyYuEToUHEQKSnAv8MUUIrcagGv0Z5\\n\"\n      + \"MJDtJTBxsXRDx8MFBFltUFoBCADES+invrHZliwZ7dv+Du1kUOOWniY4Dv1+pHpR\\n\"\n      + \"xLpRpZOG6p/m7poGS57fzS1yUoeWUmtVzJpGVZpec5iywKtTeeufN1jJRKH12nZA\\n\"\n      + \"bsVJGj9zVrHW0/yQgsxw4YAyuqXjytN2nCk8GoRjImvEmeNVamDGvWgKjz98sECi\\n\"\n      + \"Accgr3sKFDOGCUxiy2PCzMXGZ8jNbIvSKdzJ8r81xTJmcfRM0Il3j83O883Vqex1\\n\"\n      + \"+t1JE9reeuwgxnuzahyHn+Bi/xDaUjtl0z7CZczWU5VcTOrIICLCg0qzglOS86TN\\n\"\n      + \"tUJddi+IQxOoL9KsariOeHFWcifC/R3036Z2aEn1VGC6nENjABEBAAH+CQMIWUDt\\n\"\n      + \"oSTmQUVgUsZ0BRniOH1n+XpBCFuQzfBtozEU7Ik9TJqYceUjMOCcO2OWSb335GFt\\n\"\n      + \"lBqbFV/HycuxXcjTOwX72HqunSnkSFPZsGruCGX+8saRj0/L59c+Malkd9+iSNrT\\n\"\n      + \"sKEPWyWJGlAsk/9AjZImNk3/3eb4d+9OT+b18hSdlHxj6qiA0hxjdsaSwR25NjYt\\n\"\n      + \"fPMnBGB+iACgcmE5c4JDe8P/mBJ9yQfUou0nO1wLNi78Aq28DUxRsHpgcz+cWnoF\\n\"\n      + \"1wm87fO/e3vA4dgdiCY/cbAP7RXQGZzmPcnrea27F7ruROxH/mgeqQJXW3TqPoKN\\n\"\n      + \"z79PlR/9McLuuOwe4afrvdjwa3B13FE/iZZ+nFULZrbnj1cXgXbjsFrtp47oDeh4\\n\"\n      + \"XEa6PBc8dflyXdPfDkGtPmMvlUh6kOI1AgOxFPXyQRT1J5EsYN2EgGu08DqhDtXm\\n\"\n      + \"1Zfq4DfNrMU/ZBibwZOdmitYMWlFF/T/TSVDETWBIHjnV42Qupt4vCp/HoyyZt09\\n\"\n      + \"0XNB7Wm1NrCuW/muLrpV38bPXBm6QDKQ9kjDlrrbtB3ss5vwyH+uNVGmKWBPNqen\\n\"\n      + \"o50ieGnjcd7woebzamz5w6P2F6wyYgK94WQxgWQBW12EnhBjcpnODIUsC/0rJiKh\\n\"\n      + \"WTwxbZkjgAtJEiS4egu/z1wlIdaSY2Beszh+xWe8UQnO1FYmEhvFfMVRARvWO2sj\\n\"\n      + \"Ge1A7fo7w/GdRNa12roRotlXnmjCLBoRNzLpYXWvTd8AjZlK1azDuIcJ5LJbjJ9Z\\n\"\n      + \"wRsVIPQmRK7y1QtXohs1Z+dbBmOs40BCkaXnovLzTJ2pj+1Z+zn6rZBIyZwjIU2X\\n\"\n      + \"JGhHT7BDy0t5NdHchp33nA4kvnsX3wl6NmqzOaFC6SuPBxuFvzHgvNpbNB4Hqfqv\\n\"\n      + \"p2vadFtc38+pCKpvR+FE0anCwYQEGAEKAA8FAlltUFoFCQ8JnAACGy4BKQkQSyyY\\n\"\n      + \"DE7yau3AXSAEGQEKAAYFAlltUFoACgkQnSdCQ6/aHBMclQgAjqPxGQMkxFdSDNYM\\n\"\n      + \"dy7l6ejZoZPTiCQIOBCla1GuJeSeZhS3ky4iLx6wobrmVE9x7xWuGh3rAolGPpGo\\n\"\n      + \"O2fEnS6LeM0UgdiWUNHVa//TfNvkxB5FQAKatlF3fezvxG2Dt45hgHX3RzY25sgA\\n\"\n      + \"WnhLMfWHCACniA6x7/YnWzNYJL5kPYsBs5x85kH/7mxxN39DhXM42Ff/JUJlXjxG\\n\"\n      + \"06V0hLiQb0W6VXUlpyI89V6gMaZCBv+I6AW1ZKCkUgoF9DMcK8/gV2TOS7hM3gvR\\n\"\n      + \"+89y/oXxTmIz2fAWJfH/xG+UkrCw6GXSmUzexoNmDEUwesUvfq9zZ7v4Rbm1dDJB\\n\"\n      + \"suyfaMprCACbv3X0JY+WaMk5+IeeOSdXjA59G1ZcrxkcX4GnNiLBntrLD6F69JGh\\n\"\n      + \"OyNrS1mcw4sZ1bO2v+xEutxl+DjaLpeU9KcFU7Z3m2Grpu8G0sdL1BLzX7c0fTJ6\\n\"\n      + \"yYp5fGSi5VnaYNUeYhghrCiKI6OLhKmzPwwV1+fxfsa1/TAmzJnzyx4ygNH/4Adi\\n\"\n      + \"Fh6SFodIm0J2ctcuwKWiZ6HyFGaOViIAfsI1YJJBN878VjZ6CvqDS0BDisqmKG2b\\n\"\n      + \"6OylMnJaPallctxBGU64TvP1wo1Si9/05e1st5H/utOfLQnkGx+g4Kc7Gj/l8CfL\\n\"\n      + \"UcGsYigWxxOnsgtdZq4q9kCOEV09j+xEx8MGBFltUFoBCADdLxjZtGjUQ9TqwdA1\\n\"\n      + \"KeZbRkYE87kwNOUXd0V2eDp2bMS0IwEUsxURELCIHoR4AUumpxzM4rS93i0Y2TPv\\n\"\n      + \"MdbwkTU974TQdpY3+C3b3LEJgMz/VKXuQc1U/ssKyBOiYygnIN0VVjSWAWEUqulc\\n\"\n      + \"EjETfBn61L1Bkgja/e7eVtJrdb0B+2NgXGhEf2GDEPOoKmwd4+TPFkLHkhynWG04\\n\"\n      + \"fOfUIj0LjUehhqwL6eh2mVkTx+12beCIg2IgXreunxyJumC4ztA7PmGneGmGcC4r\\n\"\n      + \"RIBx6JCVIy5t36i9ORSQ0ohNymgU9O7VwDR9n5aiHvMGxk1Apo+w7sHzbhol805z\\n\"\n      + \"uMWfABEBAAH+CQMILyd53pWFzhlgvlajjkJ0eM5Pdphpb+mS/7bQJAyElpoXX0Z+\\n\"\n      + \"DOKoE0/+aV+VvMQtF3/40GQVGuFDTQ/GhuYWdtyexQP9GSnm8LUBj/IeqEa/QSzd\\n\"\n      + \"KOGF9lsx8dA3fy9+b+VOJcFBgfPJlysCKfmI9BBkRMjPAf9HIJDv+nsl5fWXFJzE\\n\"\n      + \"vwn2JYONONaYBKg5NN1x3mUwqUpBvV0eEREzJ9Zv3mgpWD6EqqPZ14cw5vDKhHFM\\n\"\n      + \"0mseO40Wak0eOkhY4NyUGPE6DAj+ur00F7NE3v70wwlk9GlcReZ2QLRnJl7/ISGU\\n\"\n      + \"JhfjO4TyAEzLIsGC+H8GURSOYL7YZiSFSXR7pjFYN/zTH8aBvW28iyaEiZVgLX14\\n\"\n      + \"6eONWaUeksqIjMIVRqn6lZ46QbLw3c51T/QSIy4w7199WTGMnKDd7cNIzgVBBw3Q\\n\"\n      + \"+Xwp738KRlQHw010Zhl81a8Jr9xmRuwu+nFZox3J/jAnni3yuD26z5LTQSQ5PPSq\\n\"\n      + \"xjVU1LYYMGlwesrB2hMG7C2KAgY1x08cwH1gwNpjRvESy9eSgjIMgnlFuYnD9Qsu\\n\"\n      + \"Nr9B8So+rbs5fCqT0tgaNpngPp36Pw3Vgh6yVvmObj7MGdUu4zI7KJeNAquukIUl\\n\"\n      + \"JFQU3m76mWulOF9E5lx2tZfkXNS8M8oFoWa8RjcDUmNL5XelYwSwMA8BveQkpEp6\\n\"\n      + \"GeZI1zJABd7fqMdSBfddTdXr+/9j9qxtXMg4qljO5Ep/GlSPZjwnCP2uDxX8D947\\n\"\n      + \"2QLBsE3JlF7Y+Tlptxl2QDecGH34ketXDXDY3mXSqDaGtOObVPH/74Lia/sWSFUE\\n\"\n      + \"/1lMU2Ko5NbcET3lFUEvk2nBziBU2zv8Mlz7TrBOemgH0W28BGQzzvnbZf61jNi2\\n\"\n      + \"VjOPtVPcZqQzE+05teYlAT8A7T6R1rdWyNDKZtd5A6AXwsGEBBgBCgAPBQJZbVBa\\n\"\n      + \"BQkPCZwAAhsuASkJEEssmAxO8mrtwF0gBBkBCgAGBQJZbVBaAAoJEK/oP1VMFmiN\\n\"\n      + \"t78H/i2noV3r3+PnCSwp9IDEBsiFE0E2Pd5nKGKzUJlzReDDgAKolur976eoRu6Z\\n\"\n      + \"XXVYk5PkOupM5mTDq7t7LwW9Tu2eAIwrV4/S+92IUNHXiaGhajaR06RhZ7lakOcZ\\n\"\n      + \"9BdGON9EyD89/92nSxR8C+a61JLXIewakTxIMu4hEo70YtMmzhQKikSTneIweZN5\\n\"\n      + \"s6oLrCiRCNJV50ORWFpflBO+EchjBTh1OKQ7GMiGqf+TWbet7EkhPZI9B4vZ4PR+\\n\"\n      + \"FDGvE0Pzfm8gTs0IS9WmeLgyLmwWrTbzxFv5RpQRFL0uyynY24lKhosBIHRYf4Ay\\n\"\n      + \"Ea+d5IBAqvksucTSOPK/S9npDcWUyQf8DCUeg/uZQ6ve7D+ck6rjuXtX+lozV1CC\\n\"\n      + \"YPb4+9PLHMHk+dyUetokFL3Vt1QYhTGq6VoL26BBj79LEJzkTBqV7I5k0Laideot\\n\"\n      + \"XiQ9hYJgUBLlq0wxNAD3pOSRdU/iBoA7WEU2+ud0bvRhaSgHwCsIp80TH8JHiaxk\\n\"\n      + \"EG9Qqe2MpA2I5cjljjDMkhnOgEJDZcOciJ0z4v8Fnl3Q+EdEvdYJ1Ip3+Xf9I9Gu\\n\"\n      + \"RpIqnkiLcbsAfgJUfnWtNaLgwU4FjL8uikCmNWS9RXtcHyjGwECSNbgNE8WzwSnG\\n\"\n      + \"+NE0JYW0ZepFhDkuoYyCLa+fAbynLe5G+x0S45KsusA9pRuTjZIfKA==\\n\"\n      + \"=mgrq\\n\"\n      + \"-----END PGP PRIVATE KEY BLOCK-----\\n\"", "var_name": "TEST_EXPORT_KEY_PRIVATE"}, {"original_string": "private OkHttpClient mutualSslClient;", "modifier": "private", "type": "OkHttpClient", "declarator": "mutualSslClient", "var_name": "mutualSslClient"}, {"original_string": "@ClassRule public static final RuleChain chain = IntegrationTestRule.rule();", "modifier": "@ClassRule public static final", "type": "RuleChain", "declarator": "chain = IntegrationTestRule.rule()", "var_name": "chain"}], "file": "server/src/test/java/keywhiz/service/resources/automation/v2/BackupResourceTest.java"}, "test_case": {"identifier": "backupInvalidKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void backupInvalidKey() throws Exception {\n    Response httpResponse = backup(\"asdf\", \"Blackops\");\n    assertThat(httpResponse.code()).isEqualTo(404);\n  }", "signature": "void backupInvalidKey()", "full_signature": "@Test public void backupInvalidKey()", "class_method_signature": "BackupResourceTest.backupInvalidKey()", "testcase": true, "constructor": false, "invocations": ["backup", "isEqualTo", "assertThat", "code"]}, "focal_class": {"identifier": "BackupResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(BackupResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BackupResource.class)", "var_name": "logger"}, {"original_string": "private final GroupDAO groupDAO;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "private final SecretController secretController;", "modifier": "private final", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private final KeywhizConfig config;", "modifier": "private final", "type": "KeywhizConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "BackupResource", "parameters": "(\n      GroupDAOFactory groupDAOFactory,\n      @Readonly SecretController secretController,\n      ObjectMapper objectMapper,\n      KeywhizConfig config,\n      AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " BackupResource(\n      GroupDAOFactory groupDAOFactory,\n      @Readonly SecretController secretController,\n      ObjectMapper objectMapper,\n      KeywhizConfig config,\n      AuditLog auditLog)", "full_signature": "@Inject public  BackupResource(\n      GroupDAOFactory groupDAOFactory,\n      @Readonly SecretController secretController,\n      ObjectMapper objectMapper,\n      KeywhizConfig config,\n      AuditLog auditLog)", "class_method_signature": "BackupResource.BackupResource(\n      GroupDAOFactory groupDAOFactory,\n      @Readonly SecretController secretController,\n      ObjectMapper objectMapper,\n      KeywhizConfig config,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "backup", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{key}/group/{group}\") @Produces(APPLICATION_OCTET_STREAM) public", "return": "byte[]", "signature": "byte[] backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{key}/group/{group}\") @Produces(APPLICATION_OCTET_STREAM) public byte[] backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "class_method_signature": "BackupResource.backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/v2/BackupResource.java"}, "focal_method": {"identifier": "backup", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{key}/group/{group}\") @Produces(APPLICATION_OCTET_STREAM) public", "return": "byte[]", "body": "@Timed @ExceptionMetered\n  @GET @Path(\"{key}/group/{group}\")\n  @Produces(APPLICATION_OCTET_STREAM)\n  public byte[] backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key) {\n    if (config.getBackupExportKey(key) == null) {\n      throw new NotFoundException(\"Unknown key: \" + key);\n    }\n\n    Optional<Group> groupOptional = groupDAO.getGroup(name);\n    if (!groupOptional.isPresent()) {\n      throw new NotFoundException(\"Unknown group: \" + name);\n    }\n\n    Group group = groupOptional.get();\n\n    // SecretDeliveryResponse is the same data a client receives when requesting a secret,\n    // so it should have all the relevant information we need (including content, checksum).\n    List<SecretDeliveryResponse> secrets = secretController.getSecretsForGroup(group).stream()\n        .map(SecretDeliveryResponse::fromSecret)\n        .collect(toList());\n\n    String serialized;\n    try {\n      serialized = objectMapper.writeValueAsString(secrets);\n    } catch (JsonProcessingException e) {\n      // This should never happen\n      logger.error(\"Unable to backup secrets\", e);\n      throw new InternalServerErrorException(\"Unable to backup secrets, check logs for details\");\n    }\n\n    // Record all checksums of backed up/exported secrets so we can uniquely identify which\n    // particular contents were returned in the response from inspection of the audit log.\n    Map<String, String> auditInfo = secrets.stream()\n        .collect(toMap(SecretDeliveryResponse::getName, SecretDeliveryResponse::getChecksum));\n\n    // Record audit event\n    auditLog.recordEvent(new Event(\n        now(),\n        GROUP_BACKUP,\n        automationClient.getName(),\n        group.getName(),\n        auditInfo));\n\n    // Perform encryption & return encrypted data\n    try {\n      Key exportKey = new Key(config.getBackupExportKey(key));\n\n      Encryptor encryptor = new Encryptor(exportKey);\n      encryptor.setEncryptionAlgorithm(AES256);\n      encryptor.setSigningAlgorithm(Unsigned);\n      encryptor.setCompressionAlgorithm(ZIP);\n\n      ByteArrayInputStream plaintext = new ByteArrayInputStream(serialized.getBytes(UTF_8));\n      ByteArrayOutputStream ciphertext = new ByteArrayOutputStream();\n\n      encryptor.encrypt(plaintext, ciphertext, new FileMetadata(format(\"%s.json\", group), UTF8));\n\n      return ciphertext.toByteArray();\n    } catch (PGPException | IOException e) {\n      logger.error(\"Unable to backup secrets\", e);\n      throw new InternalServerErrorException(\"Unable to backup secrets, check logs for details\");\n    }\n  }", "signature": "byte[] backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{key}/group/{group}\") @Produces(APPLICATION_OCTET_STREAM) public byte[] backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "class_method_signature": "BackupResource.backup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"group\") String name,\n      @PathParam(\"key\") String key)", "testcase": false, "constructor": false, "invocations": ["getBackupExportKey", "getGroup", "isPresent", "get", "collect", "map", "stream", "getSecretsForGroup", "toList", "writeValueAsString", "error", "collect", "stream", "toMap", "recordEvent", "now", "getName", "getName", "getBackupExportKey", "setEncryptionAlgorithm", "setSigningAlgorithm", "setCompressionAlgorithm", "getBytes", "encrypt", "format", "toByteArray", "error"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}