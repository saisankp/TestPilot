{"test_class": {"identifier": "ShapeExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public ShapeExtractor extractor;", "modifier": "public", "type": "ShapeExtractor", "declarator": "extractor", "var_name": "extractor"}], "file": "src/edu/lclark/orego/patterns/ShapeExtractorTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tString outputFile = \"test-books/3x3PatternTest.data\";\n\t\textractor.buildPatternData(\"sgf-test-files/19/PatternTest.sgf\", outputFile);\n\t\tShapeTable table = new ShapeTable(outputFile, 0.99f);\n\t\tBoard board = new Board(9);\n\t\tHistoryObserver history = new HistoryObserver(board);\n\t\tboard.play(\"d5\");\n\t\tboard.play(\"a1\");\n\t\tboard.play(\"f5\");\n\t\tassertTrue(table.getWinRate(PatternFinder.getHash(board,\n\t\t\t\tboard.getCoordinateSystem().at(\"e4\"), 2, history.get(board.getTurn()-1))) > 0.5);\n\t\tassertTrue(table.getWinRate(PatternFinder.getHash(board,\n\t\t\t\tboard.getCoordinateSystem().at(\"e6\"), 2, history.get(board.getTurn()-1))) > 0.5);\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ShapeExtractorTest.test()", "testcase": true, "constructor": false, "invocations": ["buildPatternData", "play", "play", "play", "assertTrue", "getWinRate", "getHash", "at", "getCoordinateSystem", "get", "getTurn", "assertTrue", "getWinRate", "getHash", "at", "getCoordinateSystem", "get", "getTurn"]}, "focal_class": {"identifier": "ShapeExtractor", "superclass": "extends PatternExtractor", "interfaces": "", "fields": [{"original_string": "private ShapeTable shapeTable;", "modifier": "private", "type": "ShapeTable", "declarator": "shapeTable", "var_name": "shapeTable"}, {"original_string": "private float scalingFactor;", "modifier": "private", "type": "float", "declarator": "scalingFactor", "var_name": "scalingFactor"}, {"original_string": "private int minStones;", "modifier": "private", "type": "int", "declarator": "minStones", "var_name": "minStones"}, {"original_string": "private Board[] boards;", "modifier": "private", "type": "Board[]", "declarator": "boards", "var_name": "boards"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ShapeExtractor.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "ShapeExtractor", "parameters": "(boolean verbose, float scalingFactor, int minStones)", "modifiers": "public", "return": "", "signature": " ShapeExtractor(boolean verbose, float scalingFactor, int minStones)", "full_signature": "public  ShapeExtractor(boolean verbose, float scalingFactor, int minStones)", "class_method_signature": "ShapeExtractor.ShapeExtractor(boolean verbose, float scalingFactor, int minStones)", "testcase": false, "constructor": true}, {"identifier": "analyzeMove", "parameters": "(short move, Board board, short lastMove)", "modifiers": "", "return": "void", "signature": "void analyzeMove(short move, Board board, short lastMove)", "full_signature": " void analyzeMove(short move, Board board, short lastMove)", "class_method_signature": "ShapeExtractor.analyzeMove(short move, Board board, short lastMove)", "testcase": false, "constructor": false}, {"identifier": "buildPatternData", "parameters": "(File inputFile)", "modifiers": "@Override", "return": "void", "signature": "void buildPatternData(File inputFile)", "full_signature": "@Override void buildPatternData(File inputFile)", "class_method_signature": "ShapeExtractor.buildPatternData(File inputFile)", "testcase": false, "constructor": false}, {"identifier": "buildPatternData", "parameters": "(String inputFile, String outputFile)", "modifiers": "", "return": "void", "signature": "void buildPatternData(String inputFile, String outputFile)", "full_signature": " void buildPatternData(String inputFile, String outputFile)", "class_method_signature": "ShapeExtractor.buildPatternData(String inputFile, String outputFile)", "testcase": false, "constructor": false}, {"identifier": "reflect", "parameters": "(short move)", "modifiers": "public", "return": "short", "signature": "short reflect(short move)", "full_signature": "public short reflect(short move)", "class_method_signature": "ShapeExtractor.reflect(short move)", "testcase": false, "constructor": false}, {"identifier": "rotate90", "parameters": "(short move)", "modifiers": "public", "return": "short", "signature": "short rotate90(short move)", "full_signature": "public short rotate90(short move)", "class_method_signature": "ShapeExtractor.rotate90(short move)", "testcase": false, "constructor": false}, {"identifier": "analyzeGames", "parameters": "(List<List<Short>> games)", "modifiers": "@SuppressWarnings(\"boxing\") @Override", "return": "void", "signature": "void analyzeGames(List<List<Short>> games)", "full_signature": "@SuppressWarnings(\"boxing\") @Override void analyzeGames(List<List<Short>> games)", "class_method_signature": "ShapeExtractor.analyzeGames(List<List<Short>> games)", "testcase": false, "constructor": false}, {"identifier": "updateTables", "parameters": "(boolean winner, short move, Board board, short lastMove)", "modifiers": "", "return": "void", "signature": "void updateTables(boolean winner, short move, Board board, short lastMove)", "full_signature": " void updateTables(boolean winner, short move, Board board, short lastMove)", "class_method_signature": "ShapeExtractor.updateTables(boolean winner, short move, Board board, short lastMove)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/patterns/ShapeExtractor.java"}, "focal_method": {"identifier": "buildPatternData", "parameters": "(File inputFile)", "modifiers": "@Override", "return": "void", "body": "@Override\n\tvoid buildPatternData(File inputFile){\n\t\tString sfString = Float.toString(scalingFactor);\n\t\tsfString = sfString.substring(sfString.indexOf('.') + 1);\n\t\tbuildPatternData(inputFile.getPath(), OREGO_ROOT + \"patterns/patterns\"\n\t\t\t\t+ minStones + \"stones-SHAPE-sf\"\n\t\t\t\t+ sfString + \".data\");\n\t}", "signature": "void buildPatternData(File inputFile)", "full_signature": "@Override void buildPatternData(File inputFile)", "class_method_signature": "ShapeExtractor.buildPatternData(File inputFile)", "testcase": false, "constructor": false, "invocations": ["toString", "substring", "indexOf", "buildPatternData", "getPath"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}