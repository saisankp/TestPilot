{"test_class": {"identifier": "ParallelLoadFlowActionSimulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ComputationManager computationManager;", "modifier": "private", "type": "ComputationManager", "declarator": "computationManager", "var_name": "computationManager"}, {"original_string": "private ParallelLoadFlowActionSimulator parallelLoadFlowActionSimulator;", "modifier": "private", "type": "ParallelLoadFlowActionSimulator", "declarator": "parallelLoadFlowActionSimulator", "var_name": "parallelLoadFlowActionSimulator"}, {"original_string": "private List<String> contingencies;", "modifier": "private", "type": "List<String>", "declarator": "contingencies", "var_name": "contingencies"}], "file": "action/action-simulator/src/test/java/com/powsybl/action/simulator/loadflow/ParallelLoadFlowActionSimulatorTest.java"}, "test_case": {"identifier": "testContingencySizeSmallerThanTasks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContingencySizeSmallerThanTasks() {\n        when(contingencies.size()).thenReturn(3);\n\n        String script = \"\";\n        try {\n            parallelLoadFlowActionSimulator.run(script, contingencies);\n        } catch (Exception e) {\n            // do nothing\n        }\n        verify(computationManager, times(1)).execute(any(), any());\n    }", "signature": "void testContingencySizeSmallerThanTasks()", "full_signature": "@Test public void testContingencySizeSmallerThanTasks()", "class_method_signature": "ParallelLoadFlowActionSimulatorTest.testContingencySizeSmallerThanTasks()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "size", "run", "execute", "verify", "times", "any", "any"]}, "focal_class": {"identifier": "ParallelLoadFlowActionSimulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ParallelLoadFlowActionSimulator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ParallelLoadFlowActionSimulator.class)", "var_name": "LOGGER"}, {"original_string": "private static final String ITOOLS_PRG = \"itools\";", "modifier": "private static final", "type": "String", "declarator": "ITOOLS_PRG = \"itools\"", "var_name": "ITOOLS_PRG"}, {"original_string": "private final ComputationManager computationManager;", "modifier": "private final", "type": "ComputationManager", "declarator": "computationManager", "var_name": "computationManager"}, {"original_string": "private final Network network;", "modifier": "private final", "type": "Network", "declarator": "network", "var_name": "network"}, {"original_string": "private final LoadFlowActionSimulatorConfig config;", "modifier": "private final", "type": "LoadFlowActionSimulatorConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final boolean applyIfSolved;", "modifier": "private final", "type": "boolean", "declarator": "applyIfSolved", "var_name": "applyIfSolved"}, {"original_string": "private final int taskCount;", "modifier": "private final", "type": "int", "declarator": "taskCount", "var_name": "taskCount"}, {"original_string": "private final List<Consumer<SecurityAnalysisResult>> resultHandlers;", "modifier": "private final", "type": "List<Consumer<SecurityAnalysisResult>>", "declarator": "resultHandlers", "var_name": "resultHandlers"}, {"original_string": "private static final String SUB_TASK_ID = \"sas\";", "modifier": "private static final", "type": "String", "declarator": "SUB_TASK_ID = \"sas\"", "var_name": "SUB_TASK_ID"}], "methods": [{"identifier": "ParallelLoadFlowActionSimulator", "parameters": "(Network network, ComputationManager cm, int taskCount)", "modifiers": "public", "return": "", "signature": " ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount)", "full_signature": "public  ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount)", "class_method_signature": "ParallelLoadFlowActionSimulator.ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount)", "testcase": false, "constructor": true}, {"identifier": "ParallelLoadFlowActionSimulator", "parameters": "(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, Consumer<SecurityAnalysisResult>... resultHandlers)", "modifiers": "public", "return": "", "signature": " ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, Consumer<SecurityAnalysisResult>... resultHandlers)", "full_signature": "public  ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, Consumer<SecurityAnalysisResult>... resultHandlers)", "class_method_signature": "ParallelLoadFlowActionSimulator.ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, Consumer<SecurityAnalysisResult>... resultHandlers)", "testcase": false, "constructor": true}, {"identifier": "ParallelLoadFlowActionSimulator", "parameters": "(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, List<Consumer<SecurityAnalysisResult>> resultHandlers)", "modifiers": "public", "return": "", "signature": " ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, List<Consumer<SecurityAnalysisResult>> resultHandlers)", "full_signature": "public  ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, List<Consumer<SecurityAnalysisResult>> resultHandlers)", "class_method_signature": "ParallelLoadFlowActionSimulator.ParallelLoadFlowActionSimulator(Network network, ComputationManager cm, int taskCount, LoadFlowActionSimulatorConfig config,\n                                           boolean applyIfSolved, List<Consumer<SecurityAnalysisResult>> resultHandlers)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(String script, List<String> contingencyIds)", "modifiers": "public", "return": "void", "signature": "void run(String script, List<String> contingencyIds)", "full_signature": "public void run(String script, List<String> contingencyIds)", "class_method_signature": "ParallelLoadFlowActionSimulator.run(String script, List<String> contingencyIds)", "testcase": false, "constructor": false}], "file": "action/action-simulator/src/main/java/com/powsybl/action/simulator/loadflow/ParallelLoadFlowActionSimulator.java"}, "focal_method": {"identifier": "run", "parameters": "(String script, List<String> contingencyIds)", "modifiers": "public", "return": "void", "body": "public void run(String script, List<String> contingencyIds) {\n        LOGGER.debug(\"Starting parallel action simulator.\");\n\n        ExecutionEnvironment itoolsEnvironment = new ExecutionEnvironment(Collections.emptyMap(), \"subTask_\", config.isDebug());\n\n        int actualTaskCount = Math.min(taskCount, contingencyIds.size());\n        CompletableFuture<SecurityAnalysisResult> future = computationManager.execute(itoolsEnvironment, new SubTaskHandler(actualTaskCount, script, contingencyIds));\n        try {\n            SecurityAnalysisResult result = future.get();\n            resultHandlers.forEach(h -> h.accept(result));\n        } catch (Exception e) {\n            throw new PowsyblException(e);\n        }\n    }", "signature": "void run(String script, List<String> contingencyIds)", "full_signature": "public void run(String script, List<String> contingencyIds)", "class_method_signature": "ParallelLoadFlowActionSimulator.run(String script, List<String> contingencyIds)", "testcase": false, "constructor": false, "invocations": ["debug", "emptyMap", "isDebug", "min", "size", "execute", "get", "forEach", "accept"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}