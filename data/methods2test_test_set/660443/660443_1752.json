{"test_class": {"identifier": "BondPartialSigmaChargeDescriptorTest", "superclass": "extends BondDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarbond/src/test/java/org/openscience/cdk/qsar/descriptors/bond/BondPartialSigmaChargeDescriptorTest.java"}, "test_case": {"identifier": "testBondSigmaElectronegativityDescriptor_Ethoxy_ethane", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBondSigmaElectronegativityDescriptor_Ethoxy_ethane() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        double[] testResult = {0.0864, 0.4262, 0.4262, 0.0864, 0.0662, 0.0662, 0.0662, 0.0104, 0.0104}; /*\n                                                                                                         * from\n                                                                                                         * Petra\n                                                                                                         * online\n                                                                                                         * :\n                                                                                                         * http\n                                                                                                         * :\n                                                                                                         * /\n                                                                                                         * /\n                                                                                                         * www2\n                                                                                                         * .\n                                                                                                         * chemie\n                                                                                                         * .\n                                                                                                         * uni\n                                                                                                         * -\n                                                                                                         * erlangen\n                                                                                                         * .\n                                                                                                         * de\n                                                                                                         * /\n                                                                                                         * services\n                                                                                                         * /\n                                                                                                         * petra\n                                                                                                         * /\n                                                                                                         * smiles\n                                                                                                         * .\n                                                                                                         * phtml\n                                                                                                         */\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"CCOCC\");\n        addExplicitHydrogens(mol);\n\n        for (int i = 0; i < 8; i++) {\n            double result = ((DoubleResult) descriptor.calculate(mol.getBond(i), mol).getValue()).doubleValue();\n            Assert.assertEquals(testResult[i], result, 0.002);\n        }\n    }", "signature": "void testBondSigmaElectronegativityDescriptor_Ethoxy_ethane()", "full_signature": "@Test public void testBondSigmaElectronegativityDescriptor_Ethoxy_ethane()", "class_method_signature": "BondPartialSigmaChargeDescriptorTest.testBondSigmaElectronegativityDescriptor_Ethoxy_ethane()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addExplicitHydrogens", "doubleValue", "getValue", "calculate", "getBond", "assertEquals"]}, "focal_class": {"identifier": "BondPartialSigmaChargeDescriptor", "superclass": "extends AbstractBondDescriptor", "interfaces": "", "fields": [{"original_string": "private GasteigerMarsiliPartialCharges peoe = null;", "modifier": "private", "type": "GasteigerMarsiliPartialCharges", "declarator": "peoe = null", "var_name": "peoe"}, {"original_string": "private int maxIterations;", "modifier": "private", "type": "int", "declarator": "maxIterations", "var_name": "maxIterations"}, {"original_string": "private static final String[] NAMES = {\"peoeB\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"peoeB\"}", "var_name": "NAMES"}], "methods": [{"identifier": "BondPartialSigmaChargeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BondPartialSigmaChargeDescriptor()", "full_signature": "public  BondPartialSigmaChargeDescriptor()", "class_method_signature": "BondPartialSigmaChargeDescriptor.BondPartialSigmaChargeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "BondPartialSigmaChargeDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "BondPartialSigmaChargeDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "BondPartialSigmaChargeDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "BondPartialSigmaChargeDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "BondPartialSigmaChargeDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "BondPartialSigmaChargeDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "BondPartialSigmaChargeDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "BondPartialSigmaChargeDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarbond/src/main/java/org/openscience/cdk/qsar/descriptors/bond/BondPartialSigmaChargeDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IBond bond, IAtomContainer ac) {\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        Double originalCharge1 = bond.getBegin().getCharge();\n        Double originalCharge2 = bond.getEnd().getCharge();\n        if (!isCachedAtomContainer(ac)) {\n            IAtomContainer mol = ac.getBuilder().newInstance(IAtomContainer.class, ac);\n            if (maxIterations != 0) peoe.setMaxGasteigerIters(maxIterations);\n            try {\n                peoe.assignGasteigerMarsiliSigmaPartialCharges(mol, true);\n                for (Iterator<IBond> it = ac.bonds().iterator(); it.hasNext();) {\n                    IBond bondi = it.next();\n                    double result = Math.abs(bondi.getBegin().getCharge() - bondi.getEnd().getCharge());\n                    cacheDescriptorValue(bondi, ac, new DoubleResult(result));\n                }\n            } catch (Exception ex1) {\n                return getDummyDescriptorValue(ex1);\n            }\n        }\n        bond.getBegin().setCharge(originalCharge1);\n        bond.getEnd().setCharge(originalCharge2);\n        return getCachedDescriptorValue(bond) != null ? new DescriptorValue(getSpecification(), getParameterNames(),\n                getParameters(), getCachedDescriptorValue(bond), NAMES) : null;\n    }", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "BondPartialSigmaChargeDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getCharge", "getBegin", "getCharge", "getEnd", "isCachedAtomContainer", "newInstance", "getBuilder", "setMaxGasteigerIters", "assignGasteigerMarsiliSigmaPartialCharges", "iterator", "bonds", "hasNext", "next", "abs", "getCharge", "getBegin", "getCharge", "getEnd", "cacheDescriptorValue", "getDummyDescriptorValue", "setCharge", "getBegin", "setCharge", "getEnd", "getCachedDescriptorValue", "getSpecification", "getParameterNames", "getParameters", "getCachedDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}