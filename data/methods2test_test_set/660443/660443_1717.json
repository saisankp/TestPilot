{"test_class": {"identifier": "PubchemFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [{"original_string": "SmilesParser parser;", "modifier": "", "type": "SmilesParser", "declarator": "parser", "var_name": "parser"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/PubchemFingerprinterTest.java"}, "test_case": {"identifier": "testfp2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testfp2() throws Exception {\n        IFingerprinter printer = new PubchemFingerprinter(DefaultChemObjectBuilder.getInstance());\n\n        IAtomContainer mol1 = parser.parseSmiles(\"CC(N)CCCN\");\n        IAtomContainer mol2 = parser.parseSmiles(\"CC(N)CCC\");\n        IAtomContainer mol3 = parser.parseSmiles(\"CCCC\");\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol1);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol2);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol3);\n\n        Aromaticity.cdkLegacy().apply(mol1);\n        Aromaticity.cdkLegacy().apply(mol2);\n        Aromaticity.cdkLegacy().apply(mol3);\n\n        BitSet bs1 = printer.getBitFingerprint(mol1).asBitSet();\n        BitSet bs2 = printer.getBitFingerprint(mol2).asBitSet();\n        BitSet bs3 = printer.getBitFingerprint(mol3).asBitSet();\n\n        Assert.assertTrue(FingerprinterTool.isSubset(bs1, bs2));\n        Assert.assertTrue(FingerprinterTool.isSubset(bs2, bs3));\n    }", "signature": "void testfp2()", "full_signature": "@Test public void testfp2()", "class_method_signature": "PubchemFingerprinterTest.testfp2()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "parseSmiles", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "percieveAtomTypesAndConfigureAtoms", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "apply", "cdkLegacy", "apply", "cdkLegacy", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "assertTrue", "isSubset", "assertTrue", "isSubset"]}, "focal_class": {"identifier": "PubchemFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "public static final int FP_SIZE = 881;", "modifier": "public static final", "type": "int", "declarator": "FP_SIZE = 881", "var_name": "FP_SIZE"}, {"original_string": "private byte[]          m_bits;", "modifier": "private", "type": "byte[]", "declarator": "m_bits", "var_name": "m_bits"}, {"original_string": "private Map<String,SmartsPattern> cache = new HashMap<>();", "modifier": "private", "type": "Map<String,SmartsPattern>", "declarator": "cache = new HashMap<>()", "var_name": "cache"}, {"original_string": "private static String BASE64_LUT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";", "modifier": "private static", "type": "String", "declarator": "BASE64_LUT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\"", "var_name": "BASE64_LUT"}, {"original_string": "static final int BITCOUNT[] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4,\n            3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4,\n            3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4,\n            2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,\n            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,\n            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};", "modifier": "static final", "type": "int", "declarator": "BITCOUNT[] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4,\n            3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4,\n            3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4,\n            2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,\n            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,\n            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,\n            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8}", "var_name": "BITCOUNT"}, {"original_string": "static final int MASK[]     = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};", "modifier": "static final", "type": "int", "declarator": "MASK[]     = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01}", "var_name": "MASK"}], "methods": [{"identifier": "PubchemFingerprinter", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " PubchemFingerprinter(IChemObjectBuilder builder)", "full_signature": "public  PubchemFingerprinter(IChemObjectBuilder builder)", "class_method_signature": "PubchemFingerprinter.PubchemFingerprinter(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "PubchemFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "PubchemFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "PubchemFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "_generateFp", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void _generateFp(byte[] fp, IAtomContainer mol)", "full_signature": "private void _generateFp(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter._generateFp(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "generateFp", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void generateFp(IAtomContainer mol)", "full_signature": "private void generateFp(IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.generateFp(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "isBitOn", "parameters": "(int bit)", "modifiers": "private", "return": "boolean", "signature": "boolean isBitOn(int bit)", "full_signature": "private boolean isBitOn(int bit)", "class_method_signature": "PubchemFingerprinter.isBitOn(int bit)", "testcase": false, "constructor": false}, {"identifier": "getFingerprintAsBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getFingerprintAsBytes()", "full_signature": "public byte[] getFingerprintAsBytes()", "class_method_signature": "PubchemFingerprinter.getFingerprintAsBytes()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String enc)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet decode(String enc)", "full_signature": "public static BitSet decode(String enc)", "class_method_signature": "PubchemFingerprinter.decode(String enc)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String encode()", "full_signature": "private String encode()", "class_method_signature": "PubchemFingerprinter.encode()", "testcase": false, "constructor": false}, {"identifier": "base64Encode", "parameters": "(byte[] data)", "modifiers": "private static", "return": "String", "signature": "String base64Encode(byte[] data)", "full_signature": "private static String base64Encode(byte[] data)", "class_method_signature": "PubchemFingerprinter.base64Encode(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "base64Decode", "parameters": "(String data)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] base64Decode(String data)", "full_signature": "private static byte[] base64Decode(String data)", "class_method_signature": "PubchemFingerprinter.base64Decode(String data)", "testcase": false, "constructor": false}, {"identifier": "countElements", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private static", "return": "void", "signature": "void countElements(byte[] fp, IAtomContainer mol)", "full_signature": "private static void countElements(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countElements(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "countRings", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private static", "return": "void", "signature": "void countRings(byte[] fp, IAtomContainer mol)", "full_signature": "private static void countRings(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countRings(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "countSubstructures", "parameters": "(byte[] fp, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void countSubstructures(byte[] fp, IAtomContainer mol)", "full_signature": "private void countSubstructures(byte[] fp, IAtomContainer mol)", "class_method_signature": "PubchemFingerprinter.countSubstructures(byte[] fp, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "PubchemFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/PubchemFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer) throws CDKException {\n        generateFp(atomContainer);\n        BitSet fp = new BitSet(FP_SIZE);\n        for (int i = 0; i < FP_SIZE; i++) {\n            if (isBitOn(i)) fp.set(i);\n        }\n        return new BitSetFingerprint(fp);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "PubchemFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["generateFp", "isBitOn", "set"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}