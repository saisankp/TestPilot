{"test_class": {"identifier": "FilenameFooterWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/FilenameFooterWriterTest.java"}, "test_case": {"identifier": "write", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void write() throws TaskException {\n        PDDocument doc = new PDDocument();\n        PDPage page = new PDPage();\n        doc.addPage(page);\n        new FilenameFooterWriter(true, doc).addFooter(page, \"My Footer\", 20);\n        assertThat(new PdfTextExtractorByArea().extractFooterText(page).trim(), is(\"My Footer 20\"));\n    }", "signature": "void write()", "full_signature": "@Test public void write()", "class_method_signature": "FilenameFooterWriterTest.write()", "testcase": true, "constructor": false, "invocations": ["addPage", "addFooter", "assertThat", "trim", "extractFooterText", "is"]}, "focal_class": {"identifier": "FilenameFooterWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FilenameFooterWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FilenameFooterWriter.class)", "var_name": "LOG"}, {"original_string": "private boolean addFooter = false;", "modifier": "private", "type": "boolean", "declarator": "addFooter = false", "var_name": "addFooter"}, {"original_string": "private PageTextWriter writer;", "modifier": "private", "type": "PageTextWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private static PDFont FONT = PDType1Font.HELVETICA;", "modifier": "private static", "type": "PDFont", "declarator": "FONT = PDType1Font.HELVETICA", "var_name": "FONT"}, {"original_string": "private static double FONT_SIZE = 10;", "modifier": "private static", "type": "double", "declarator": "FONT_SIZE = 10", "var_name": "FONT_SIZE"}], "methods": [{"identifier": "FilenameFooterWriter", "parameters": "(boolean addFooter, PDDocument document)", "modifiers": "public", "return": "", "signature": " FilenameFooterWriter(boolean addFooter, PDDocument document)", "full_signature": "public  FilenameFooterWriter(boolean addFooter, PDDocument document)", "class_method_signature": "FilenameFooterWriter.FilenameFooterWriter(boolean addFooter, PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "addFooter", "parameters": "(PDPage page, String fileName, long pageNumber)", "modifiers": "public", "return": "void", "signature": "void addFooter(PDPage page, String fileName, long pageNumber)", "full_signature": "public void addFooter(PDPage page, String fileName, long pageNumber)", "class_method_signature": "FilenameFooterWriter.addFooter(PDPage page, String fileName, long pageNumber)", "testcase": false, "constructor": false}, {"identifier": "maxWidth", "parameters": "(PDPage page, long pageNumber)", "modifiers": "private", "return": "double", "signature": "double maxWidth(PDPage page, long pageNumber)", "full_signature": "private double maxWidth(PDPage page, long pageNumber)", "class_method_signature": "FilenameFooterWriter.maxWidth(PDPage page, long pageNumber)", "testcase": false, "constructor": false}, {"identifier": "stringWidth", "parameters": "(String text)", "modifiers": "private", "return": "double", "signature": "double stringWidth(String text)", "full_signature": "private double stringWidth(String text)", "class_method_signature": "FilenameFooterWriter.stringWidth(String text)", "testcase": false, "constructor": false}, {"identifier": "truncateIfRequired", "parameters": "(String original, double maxWidth)", "modifiers": "private", "return": "String", "signature": "String truncateIfRequired(String original, double maxWidth)", "full_signature": "private String truncateIfRequired(String original, double maxWidth)", "class_method_signature": "FilenameFooterWriter.truncateIfRequired(String original, double maxWidth)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/FilenameFooterWriter.java"}, "focal_method": {"identifier": "addFooter", "parameters": "(PDPage page, String fileName, long pageNumber)", "modifiers": "public", "return": "void", "body": "public void addFooter(PDPage page, String fileName, long pageNumber) throws TaskException {\n        if (addFooter) {\n            try {\n                String truncatedFilename = truncateIfRequired(fileName, maxWidth(page, pageNumber));\n                writer.write(page, HorizontalAlign.LEFT, VerticalAlign.BOTTOM, truncatedFilename, FONT, FONT_SIZE,\n                        Color.BLACK);\n                writer.write(page, HorizontalAlign.RIGHT, VerticalAlign.BOTTOM, Long.toString(pageNumber),\n                        FONT, FONT_SIZE, Color.BLACK);\n            } catch (TaskIOException | IOException e) {\n                throw new TaskException(\"Unable to write the page footer\", e);\n            }\n        }\n    }", "signature": "void addFooter(PDPage page, String fileName, long pageNumber)", "full_signature": "public void addFooter(PDPage page, String fileName, long pageNumber)", "class_method_signature": "FilenameFooterWriter.addFooter(PDPage page, String fileName, long pageNumber)", "testcase": false, "constructor": false, "invocations": ["truncateIfRequired", "maxWidth", "write", "write", "toString"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}