{"test_class": {"identifier": "BatchCallBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String SP_WITHOUT_OUT_PARAM = \"SP_WITHOUT_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITHOUT_OUT_PARAM = \"SP_WITHOUT_OUT_PARAM\"", "var_name": "SP_WITHOUT_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_OUT_PARAM = \"SP_WITH_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_OUT_PARAM = \"SP_WITH_OUT_PARAM\"", "var_name": "SP_WITH_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_IN_OUT_PARAM = \"SP_WITH_IN_OUT_PARAM\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_IN_OUT_PARAM = \"SP_WITH_IN_OUT_PARAM\"", "var_name": "SP_WITH_IN_OUT_PARAM"}, {"original_string": "public final static String SP_WITH_INTERMEDIATE_RESULT = \"SP_WITH_INTERMEDIATE_RESULT\";", "modifier": "public final static", "type": "String", "declarator": "SP_WITH_INTERMEDIATE_RESULT = \"SP_WITH_INTERMEDIATE_RESULT\"", "var_name": "SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private static final String CREATE_SP_WITHOUT_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITHOUT_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"v_name VARCHAR(64)) \"\n            + \"BEGIN INSERT INTO person\"\n            + \"(peopleid, cityID, countryID, name) \"\n            + \"VALUES(v_id, v_cityID, v_countryID, v_name);\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITHOUT_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITHOUT_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"v_name VARCHAR(64)) \"\n            + \"BEGIN INSERT INTO person\"\n            + \"(peopleid, cityID, countryID, name) \"\n            + \"VALUES(v_id, v_cityID, v_countryID, v_name);\"\n            + \"END\"", "var_name": "CREATE_SP_WITHOUT_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"out count int)\"\n            + \"BEGIN DELETE FROM person WHERE peopleid=v_id;\"\n            + \"SELECT COUNT(*) INTO count from person;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"out count int)\"\n            + \"BEGIN DELETE FROM person WHERE peopleid=v_id;\"\n            + \"SELECT COUNT(*) INTO count from person;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_IN_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_IN_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"INOUT v_name VARCHAR(64))\"\n            + \"BEGIN UPDATE person \"\n            + \"SET cityID = v_cityID, countryID=v_countryID, name=v_name \"\n            + \"WHERE peopleid=v_id;\"\n            + \"SELECT 'output' INTO v_name;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_IN_OUT_PARAM = \"CREATE PROCEDURE \" + SP_WITH_IN_OUT_PARAM + \"(\"\n            + \"v_id int,\"\n            + \"v_cityID int,\"\n            + \"v_countryID int,\"\n            + \"INOUT v_name VARCHAR(64))\"\n            + \"BEGIN UPDATE person \"\n            + \"SET cityID = v_cityID, countryID=v_countryID, name=v_name \"\n            + \"WHERE peopleid=v_id;\"\n            + \"SELECT 'output' INTO v_name;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_IN_OUT_PARAM"}, {"original_string": "private static final String CREATE_SP_WITH_INTERMEDIATE_RESULT = \"CREATE PROCEDURE \" + SP_WITH_INTERMEDIATE_RESULT + \"(\"\n            + \"v_id int,\"\n            + \"v_quantity int,\"\n            + \"v_type smallint,\"\n            + \"INOUT v_address VARCHAR(64))\"\n            + \"BEGIN UPDATE dal_client_test \"\n            + \"SET quantity = v_quantity, type=v_type, address=v_address \"\n            + \"WHERE id=v_id;\"\n            + \"SELECT ROW_COUNT() AS result;\"\n            + \"SELECT 1 AS result2;\"\n            + \"UPDATE dal_client_test \"\n            + \"SET `quantity` = quantity + 1, `type`=type + 1, `address`='aaa';\"\n            + \"SELECT 'abc' AS result3, 456 AS count2;\"\n            + \"SELECT * from dal_client_test;\"\n            + \"SELECT 'output' INTO v_address;\"\n            + \"END\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SP_WITH_INTERMEDIATE_RESULT = \"CREATE PROCEDURE \" + SP_WITH_INTERMEDIATE_RESULT + \"(\"\n            + \"v_id int,\"\n            + \"v_quantity int,\"\n            + \"v_type smallint,\"\n            + \"INOUT v_address VARCHAR(64))\"\n            + \"BEGIN UPDATE dal_client_test \"\n            + \"SET quantity = v_quantity, type=v_type, address=v_address \"\n            + \"WHERE id=v_id;\"\n            + \"SELECT ROW_COUNT() AS result;\"\n            + \"SELECT 1 AS result2;\"\n            + \"UPDATE dal_client_test \"\n            + \"SET `quantity` = quantity + 1, `type`=type + 1, `address`='aaa';\"\n            + \"SELECT 'abc' AS result3, 456 AS count2;\"\n            + \"SELECT * from dal_client_test;\"\n            + \"SELECT 'output' INTO v_address;\"\n            + \"END\"", "var_name": "CREATE_SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private static final String DROP_SP_WITHOUT_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITHOUT_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITHOUT_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITHOUT_OUT_PARAM", "var_name": "DROP_SP_WITHOUT_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_OUT_PARAM", "var_name": "DROP_SP_WITH_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_IN_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_IN_OUT_PARAM;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_IN_OUT_PARAM = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_IN_OUT_PARAM", "var_name": "DROP_SP_WITH_IN_OUT_PARAM"}, {"original_string": "private static final String DROP_SP_WITH_INTERMEDIATE_RESULT = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_INTERMEDIATE_RESULT;", "modifier": "private static final", "type": "String", "declarator": "DROP_SP_WITH_INTERMEDIATE_RESULT = \"DROP PROCEDURE IF EXISTS \" + SP_WITH_INTERMEDIATE_RESULT", "var_name": "DROP_SP_WITH_INTERMEDIATE_RESULT"}, {"original_string": "private final static String DATABASE_LOGIC_NAME = \"MySqlConditionDbShard\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME = \"MySqlConditionDbShard\"", "var_name": "DATABASE_LOGIC_NAME"}, {"original_string": "private static final int DB_MODE = 2;", "modifier": "private static final", "type": "int", "declarator": "DB_MODE = 2", "var_name": "DB_MODE"}, {"original_string": "private static DasClient dao;", "modifier": "private static", "type": "DasClient", "declarator": "dao", "var_name": "dao"}], "file": "das-client/src/test/java/com/ppdai/das/client/BatchCallBuilderTest.java"}, "test_case": {"identifier": "testCall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCall() throws Exception {\n        for (int i = 0; i < DB_MODE; i++) {\n            BatchCallBuilder cb = new BatchCallBuilder(SP_WITHOUT_OUT_PARAM);\n            cb.registerInput(\"v_id\", JDBCType.INTEGER);\n            cb.registerInput(\"v_cityID\", JDBCType.INTEGER);\n            cb.registerInput(\"v_countryID\", JDBCType.INTEGER);\n            cb.registerInput(\"v_name\", JDBCType.VARCHAR);\n            cb.hints().inShard(i);\n\n            cb.addBatch(7, 7, 7, \"777\");\n            cb.addBatch(17, 17, 17, \"1777\");\n            cb.addBatch(27, 27, 27, \"2777\");\n            int[] ret = dao.batchCall(cb);\n            assertArrayEquals(new int[]{1, 1, 1}, ret);\n\n            Person p = new Person();\n            p.setPeopleID(7);\n            p = dao.queryByPk(p, Hints.hints().inShard(i));\n            assertEquals(\"777\", p.getName());\n\n            p = new Person();\n            p.setPeopleID(17);\n            p = dao.queryByPk(p, Hints.hints().inShard(i));\n            assertEquals(\"1777\", p.getName());\n\n            p = new Person();\n            p.setPeopleID(27);\n            p = dao.queryByPk(p, Hints.hints().inShard(i));\n            assertEquals(\"2777\", p.getName());\n        }\n    }", "signature": "void testCall()", "full_signature": "@Test public void testCall()", "class_method_signature": "BatchCallBuilderTest.testCall()", "testcase": true, "constructor": false, "invocations": ["registerInput", "registerInput", "registerInput", "registerInput", "inShard", "hints", "addBatch", "addBatch", "addBatch", "batchCall", "assertArrayEquals", "setPeopleID", "queryByPk", "inShard", "hints", "assertEquals", "getName", "setPeopleID", "queryByPk", "inShard", "hints", "assertEquals", "getName", "setPeopleID", "queryByPk", "inShard", "hints", "assertEquals", "getName"]}, "focal_class": {"identifier": "BatchCallBuilder", "superclass": "", "interfaces": "implements Segment, ParameterDefinitionProvider", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private List<ParameterDefinition> parameterDefinitions = new ArrayList<>();", "modifier": "private", "type": "List<ParameterDefinition>", "declarator": "parameterDefinitions = new ArrayList<>()", "var_name": "parameterDefinitions"}, {"original_string": "private List<Object[]> valuesList = new ArrayList<>();", "modifier": "private", "type": "List<Object[]>", "declarator": "valuesList = new ArrayList<>()", "var_name": "valuesList"}, {"original_string": "private Hints hints = new Hints();", "modifier": "private", "type": "Hints", "declarator": "hints = new Hints()", "var_name": "hints"}], "methods": [{"identifier": "BatchCallBuilder", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " BatchCallBuilder(String name)", "full_signature": "public  BatchCallBuilder(String name)", "class_method_signature": "BatchCallBuilder.BatchCallBuilder(String name)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(String name)", "modifiers": "public static", "return": "BatchCallBuilder", "signature": "BatchCallBuilder call(String name)", "full_signature": "public static BatchCallBuilder call(String name)", "class_method_signature": "BatchCallBuilder.call(String name)", "testcase": false, "constructor": false}, {"identifier": "setHints", "parameters": "(Hints hints)", "modifiers": "public", "return": "BatchCallBuilder", "signature": "BatchCallBuilder setHints(Hints hints)", "full_signature": "public BatchCallBuilder setHints(Hints hints)", "class_method_signature": "BatchCallBuilder.setHints(Hints hints)", "testcase": false, "constructor": false}, {"identifier": "registerOutput", "parameters": "(String name, JDBCType type)", "modifiers": "public", "return": "BatchCallBuilder", "signature": "BatchCallBuilder registerOutput(String name, JDBCType type)", "full_signature": "public BatchCallBuilder registerOutput(String name, JDBCType type)", "class_method_signature": "BatchCallBuilder.registerOutput(String name, JDBCType type)", "testcase": false, "constructor": false}, {"identifier": "registerInput", "parameters": "(String name, JDBCType type)", "modifiers": "public", "return": "BatchCallBuilder", "signature": "BatchCallBuilder registerInput(String name, JDBCType type)", "full_signature": "public BatchCallBuilder registerInput(String name, JDBCType type)", "class_method_signature": "BatchCallBuilder.registerInput(String name, JDBCType type)", "testcase": false, "constructor": false}, {"identifier": "registerInputOutput", "parameters": "(String name, JDBCType type)", "modifiers": "public", "return": "BatchCallBuilder", "signature": "BatchCallBuilder registerInputOutput(String name, JDBCType type)", "full_signature": "public BatchCallBuilder registerInputOutput(String name, JDBCType type)", "class_method_signature": "BatchCallBuilder.registerInputOutput(String name, JDBCType type)", "testcase": false, "constructor": false}, {"identifier": "addBatch", "parameters": "(Object...values)", "modifiers": "public", "return": "void", "signature": "void addBatch(Object...values)", "full_signature": "public void addBatch(Object...values)", "class_method_signature": "BatchCallBuilder.addBatch(Object...values)", "testcase": false, "constructor": false}, {"identifier": "hints", "parameters": "()", "modifiers": "public", "return": "Hints", "signature": "Hints hints()", "full_signature": "public Hints hints()", "class_method_signature": "BatchCallBuilder.hints()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "BatchCallBuilder.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameterDefinitions", "parameters": "()", "modifiers": "public", "return": "List<ParameterDefinition>", "signature": "List<ParameterDefinition> getParameterDefinitions()", "full_signature": "public List<ParameterDefinition> getParameterDefinitions()", "class_method_signature": "BatchCallBuilder.getParameterDefinitions()", "testcase": false, "constructor": false}, {"identifier": "getValuesList", "parameters": "()", "modifiers": "public", "return": "List<Object[]>", "signature": "List<Object[]> getValuesList()", "full_signature": "public List<Object[]> getValuesList()", "class_method_signature": "BatchCallBuilder.getValuesList()", "testcase": false, "constructor": false}, {"identifier": "buildDefinitions", "parameters": "()", "modifiers": "@Override public", "return": "List<ParameterDefinition>", "signature": "List<ParameterDefinition> buildDefinitions()", "full_signature": "@Override public List<ParameterDefinition> buildDefinitions()", "class_method_signature": "BatchCallBuilder.buildDefinitions()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(BuilderContext context)", "modifiers": "@Override public", "return": "String", "signature": "String build(BuilderContext context)", "full_signature": "@Override public String build(BuilderContext context)", "class_method_signature": "BatchCallBuilder.build(BuilderContext context)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BatchCallBuilder.toString()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/BatchCallBuilder.java"}, "focal_method": {"identifier": "call", "parameters": "(String name)", "modifiers": "public static", "return": "BatchCallBuilder", "body": "public static BatchCallBuilder call(String name) {\n        return new BatchCallBuilder(name);\n    }", "signature": "BatchCallBuilder call(String name)", "full_signature": "public static BatchCallBuilder call(String name)", "class_method_signature": "BatchCallBuilder.call(String name)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}