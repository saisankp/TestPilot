{"test_class": {"identifier": "MCTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private HTableInterface table = null;", "modifier": "private", "type": "HTableInterface", "declarator": "table = null", "var_name": "table"}], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/command/MCTest.java"}, "test_case": {"identifier": "testMC_CF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMC_CF() throws Exception {\n        // add CF\n        HColumnDescriptor cd = new HColumnDescriptor(TEST_TABLE_CF2.getBytes());\n        admin.addColumn(tableName, cd);\n\n        // move a region to the first RS\n        ArrayList<ServerName> serverNameList = getServerNameList();\n        assertTrue(serverNameList.size() >= 2);\n        ArrayList<HRegionInfo> regionInfoList = getRegionInfoList(tableName);\n        assertEquals(1, regionInfoList.size());\n        HRegionInfo regionInfo = regionInfoList.get(0);\n        ServerName serverName = serverNameList.get(0);\n        move(regionInfo, serverName);\n\n        // make 2 + 2 store files\n        putData2(table, \"a\".getBytes());\n        admin.flush(tableName);\n        putData2(table, \"b\".getBytes());\n        admin.flush(tableName);\n        Thread.sleep(3000);\n        assertEquals(2 + 2, getRegionLoad(regionInfo, serverName).getStorefiles());\n\n        // run MC\n        String[] argsParam = {\"zookeeper\", tableName, \"--cf=d\", \"--force-proceed\", \"--wait\", \"--test\"};\n        Args args = new ManagerArgs(argsParam);\n        MC command = new MC(admin, args);\n        command.run();\n        assertRegionName(command);\n\n        // should be 2 + 1 store files\n        assertEquals(2 + 1, getRegionLoad(regionInfo, serverName).getStorefiles());\n    }", "signature": "void testMC_CF()", "full_signature": "@Test public void testMC_CF()", "class_method_signature": "MCTest.testMC_CF()", "testcase": true, "constructor": false, "invocations": ["getBytes", "addColumn", "getServerNameList", "assertTrue", "size", "getRegionInfoList", "assertEquals", "size", "get", "get", "move", "putData2", "getBytes", "flush", "putData2", "getBytes", "flush", "sleep", "assertEquals", "getStorefiles", "getRegionLoad", "run", "assertRegionName", "assertEquals", "getStorefiles", "getRegionLoad"]}, "focal_class": {"identifier": "MC", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}, {"original_string": "private final AtomicInteger mcCounter = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "mcCounter = new AtomicInteger()", "var_name": "mcCounter"}, {"original_string": "private final Map<byte[], String> regionTableMap = new TreeMap<>(Bytes.BYTES_COMPARATOR);", "modifier": "private final", "type": "Map<byte[], String>", "declarator": "regionTableMap = new TreeMap<>(Bytes.BYTES_COMPARATOR)", "var_name": "regionTableMap"}, {"original_string": "private final Map<byte[], Integer> regionSizeMap = new TreeMap<>(Bytes.BYTES_COMPARATOR);", "modifier": "private final", "type": "Map<byte[], Integer>", "declarator": "regionSizeMap = new TreeMap<>(Bytes.BYTES_COMPARATOR)", "var_name": "regionSizeMap"}, {"original_string": "private final Map<byte[], Float> regionLocalityMap = new TreeMap<>(Bytes.BYTES_COMPARATOR);", "modifier": "private final", "type": "Map<byte[], Float>", "declarator": "regionLocalityMap = new TreeMap<>(Bytes.BYTES_COMPARATOR)", "var_name": "regionLocalityMap"}, {"original_string": "private final Map<byte[], String> regionRSMap = new TreeMap<>(Bytes.BYTES_COMPARATOR);", "modifier": "private final", "type": "Map<byte[], String>", "declarator": "regionRSMap = new TreeMap<>(Bytes.BYTES_COMPARATOR)", "var_name": "regionRSMap"}, {"original_string": "private Map<String, NavigableMap<HRegionInfo, ServerName>> regionLocations = new HashMap<>();", "modifier": "private", "type": "Map<String, NavigableMap<HRegionInfo, ServerName>>", "declarator": "regionLocations = new HashMap<>()", "var_name": "regionLocations"}, {"original_string": "private Set<byte[]> targets = null;", "modifier": "private", "type": "Set<byte[]>", "declarator": "targets = null", "var_name": "targets"}, {"original_string": "private boolean tableLevel = false;", "modifier": "private", "type": "boolean", "declarator": "tableLevel = false", "var_name": "tableLevel"}], "methods": [{"identifier": "MC", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public", "return": "", "signature": " MC(HBaseAdmin admin, Args args)", "full_signature": "public  MC(HBaseAdmin admin, Args args)", "class_method_signature": "MC.MC(HBaseAdmin admin, Args args)", "testcase": false, "constructor": true}, {"identifier": "usage", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "String", "signature": "String usage()", "full_signature": "@SuppressWarnings(\"unused\") public static String usage()", "class_method_signature": "MC.usage()", "testcase": false, "constructor": false}, {"identifier": "getMcCounter", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getMcCounter()", "full_signature": "@VisibleForTesting int getMcCounter()", "class_method_signature": "MC.getMcCounter()", "testcase": false, "constructor": false}, {"identifier": "getTargets", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Set<byte[]>", "signature": "Set<byte[]> getTargets()", "full_signature": "@VisibleForTesting Set<byte[]> getTargets()", "class_method_signature": "MC.getTargets()", "testcase": false, "constructor": false}, {"identifier": "isTableLevel", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isTableLevel()", "full_signature": "@VisibleForTesting boolean isTableLevel()", "class_method_signature": "MC.isTableLevel()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MC.run()", "testcase": false, "constructor": false}, {"identifier": "mc", "parameters": "(boolean tableLevel, Set<byte[]> targets)", "modifiers": "private", "return": "void", "signature": "void mc(boolean tableLevel, Set<byte[]> targets)", "full_signature": "private void mc(boolean tableLevel, Set<byte[]> targets)", "class_method_signature": "MC.mc(boolean tableLevel, Set<byte[]> targets)", "testcase": false, "constructor": false}, {"identifier": "getRegionInfo", "parameters": "(byte[] regionName)", "modifiers": "private", "return": "String", "signature": "String getRegionInfo(byte[] regionName)", "full_signature": "private String getRegionInfo(byte[] regionName)", "class_method_signature": "MC.getRegionInfo(byte[] regionName)", "testcase": false, "constructor": false}, {"identifier": "waitUntilFinish", "parameters": "(Set<String> tables)", "modifiers": "private", "return": "void", "signature": "void waitUntilFinish(Set<String> tables)", "full_signature": "private void waitUntilFinish(Set<String> tables)", "class_method_signature": "MC.waitUntilFinish(Set<String> tables)", "testcase": false, "constructor": false}, {"identifier": "filterWithLocalityOnly", "parameters": "(Set<byte[]> targets, String table)", "modifiers": "private", "return": "void", "signature": "void filterWithLocalityOnly(Set<byte[]> targets, String table)", "full_signature": "private void filterWithLocalityOnly(Set<byte[]> targets, String table)", "class_method_signature": "MC.filterWithLocalityOnly(Set<byte[]> targets, String table)", "testcase": false, "constructor": false}, {"identifier": "filterWithRsAndLocality", "parameters": "(Set<byte[]> targets, String table)", "modifiers": "private", "return": "void", "signature": "void filterWithRsAndLocality(Set<byte[]> targets, String table)", "full_signature": "private void filterWithRsAndLocality(Set<byte[]> targets, String table)", "class_method_signature": "MC.filterWithRsAndLocality(Set<byte[]> targets, String table)", "testcase": false, "constructor": false}, {"identifier": "getRegionLocations", "parameters": "(String table)", "modifiers": "private", "return": "NavigableMap<HRegionInfo, ServerName>", "signature": "NavigableMap<HRegionInfo, ServerName> getRegionLocations(String table)", "full_signature": "private NavigableMap<HRegionInfo, ServerName> getRegionLocations(String table)", "class_method_signature": "MC.getRegionLocations(String table)", "testcase": false, "constructor": false}, {"identifier": "filterWithDataLocality", "parameters": "(Set<byte[]> targets,\n        Map<byte[], HRegionInfo> regionMap)", "modifiers": "private", "return": "void", "signature": "void filterWithDataLocality(Set<byte[]> targets,\n        Map<byte[], HRegionInfo> regionMap)", "full_signature": "private void filterWithDataLocality(Set<byte[]> targets,\n        Map<byte[], HRegionInfo> regionMap)", "class_method_signature": "MC.filterWithDataLocality(Set<byte[]> targets,\n        Map<byte[], HRegionInfo> regionMap)", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/command/MC.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() throws Exception {\n        targets = Collections.newSetFromMap(new TreeMap<byte[], Boolean>(Bytes.BYTES_COMPARATOR));\n        tableLevel = false; // or region level\n\n        Set<String> tables = Args.tables(args, admin);\n        assert tables != null;\n        for (String table : tables) {\n            if (args.has(Args.OPTION_REGION_SERVER) || args.has(Args.OPTION_LOCALITY_THRESHOLD)) {\n                // MC at region level\n                tableLevel = false;\n\n                if (args.has(Args.OPTION_REGION_SERVER)) {\n                    filterWithRsAndLocality(targets, table);\n                } else {\n                    if (args.has(Args.OPTION_LOCALITY_THRESHOLD)) {\n                        filterWithLocalityOnly(targets, table);\n                    }\n                }\n            } else {\n                // MC at table level\n                tableLevel = true;\n\n                targets.add(table.getBytes());\n            }\n        }\n\n        // todo check compaction queue before running\n\n        if (tableLevel) {\n            System.out.println(targets.size() + \" tables will be compacted.\");\n        } else {\n            System.out.println(targets.size() + \" regions will be compacted.\");\n        }\n        if (targets.size() == 0) return;\n        if (!args.isForceProceed() && !Util.askProceed()) return;\n\n        mc(tableLevel, targets);\n\n        if (mcCounter.get() > 0)\n            waitUntilFinish(tables);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MC.run()", "testcase": false, "constructor": false, "invocations": ["newSetFromMap", "tables", "has", "has", "has", "filterWithRsAndLocality", "has", "filterWithLocalityOnly", "add", "getBytes", "println", "size", "println", "size", "size", "isForceProceed", "askProceed", "mc", "get", "waitUntilFinish"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}