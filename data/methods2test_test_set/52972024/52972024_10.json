{"test_class": {"identifier": "ValidateFormDataActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ValidateFormDataActor actor;", "modifier": "", "type": "ValidateFormDataActor", "declarator": "actor", "var_name": "actor"}, {"original_string": "Field rulesF = mock(Field.class);", "modifier": "", "type": "Field", "declarator": "rulesF = mock(Field.class)", "var_name": "rulesF"}], "file": "OldModules/ValidateFormDataActor/src/test/java/info/smart_tools/smartactors/actors/validate_form_data/ValidateFormDataActorTest.java"}, "test_case": {"identifier": "shouldThrowExceptionWhenFieldsIsInvalid", "parameters": "()", "modifiers": "@Test(expected = ValidateFormException.class) public", "return": "void", "body": "@Test(expected = ValidateFormException.class)\n    public void shouldThrowExceptionWhenFieldsIsInvalid() throws Exception {\n        IObject serverForm = mock(IObject.class);\n        IObject clientForm = mock(IObject.class);\n\n        ValidateFormDataMessage message = mock(ValidateFormDataMessage.class);\n        when(message.getFormFromRequest()).thenReturn(clientForm);\n        when(message.getForm()).thenReturn(serverForm);\n\n        Iterator serverIterator = mock(Iterator.class);\n        when(serverForm.iterator()).thenReturn(serverIterator);\n        Map.Entry entry = mock(Map.Entry.class);\n        IFieldName fieldFieldName = mock(IFieldName.class);\n        when(serverIterator.next()).thenReturn(entry, null);\n        when(serverIterator.hasNext()).thenReturn(false);\n        when(entry.getKey()).thenReturn(fieldFieldName);\n\n        IObject fieldIObject = mock(IObject.class);\n        when(serverForm.getValue(fieldFieldName)).thenReturn(fieldIObject);\n        when(rulesF.in(fieldIObject)).thenReturn(\"\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435\");\n\n        when(clientForm.getValue(fieldFieldName)).thenReturn(\"\");\n\n        IObject resultObject = mock(IObject.class);\n        IKey iobjectKey = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(iobjectKey);\n        when(IOC.resolve(iobjectKey)).thenReturn(resultObject);\n\n        actor.validate(message);\n    }", "signature": "void shouldThrowExceptionWhenFieldsIsInvalid()", "full_signature": "@Test(expected = ValidateFormException.class) public void shouldThrowExceptionWhenFieldsIsInvalid()", "class_method_signature": "ValidateFormDataActorTest.shouldThrowExceptionWhenFieldsIsInvalid()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getFormFromRequest", "thenReturn", "when", "getForm", "mock", "thenReturn", "when", "iterator", "mock", "mock", "thenReturn", "when", "next", "thenReturn", "when", "hasNext", "thenReturn", "when", "getKey", "mock", "thenReturn", "when", "getValue", "thenReturn", "when", "in", "thenReturn", "when", "getValue", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "validate"]}, "focal_class": {"identifier": "ValidateFormDataActor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Field validationRulesF;", "modifier": "private", "type": "Field", "declarator": "validationRulesF", "var_name": "validationRulesF"}, {"original_string": "private Field ruleF;", "modifier": "private", "type": "Field", "declarator": "ruleF", "var_name": "ruleF"}], "methods": [{"identifier": "ValidateFormDataActor", "parameters": "(final IObject params)", "modifiers": "public", "return": "", "signature": " ValidateFormDataActor(final IObject params)", "full_signature": "public  ValidateFormDataActor(final IObject params)", "class_method_signature": "ValidateFormDataActor.ValidateFormDataActor(final IObject params)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(final ValidateFormDataMessage message)", "modifiers": "public", "return": "void", "signature": "void validate(final ValidateFormDataMessage message)", "full_signature": "public void validate(final ValidateFormDataMessage message)", "class_method_signature": "ValidateFormDataActor.validate(final ValidateFormDataMessage message)", "testcase": false, "constructor": false}], "file": "OldModules/ValidateFormDataActor/src/main/java/info/smart_tools/smartactors/actors/validate_form_data/ValidateFormDataActor.java"}, "focal_method": {"identifier": "validate", "parameters": "(final ValidateFormDataMessage message)", "modifiers": "public", "return": "void", "body": "public void validate(final ValidateFormDataMessage message) throws ValidateFormException {\n        try {\n            IObject formFields = message.getForm();\n            IObject clientData = message.getFormFromRequest();\n\n            IObject resultObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n            Iterator<Map.Entry<IFieldName, Object>> fieldsIterator = formFields.iterator();\n            Map.Entry<IFieldName, Object> entry = fieldsIterator.next();\n\n            while (entry != null) {\n                IFieldName key = entry.getKey();\n\n                List<IObject> rules = validationRulesF.in((IObject) formFields.getValue(key));\n                if (rules != null) {\n                    for (IObject ruleObject : rules) {\n                        if (!new Parser((String) ruleF.in(ruleObject), (String) clientData.getValue(key)).validate()) {\n                            throw new ValidateFormException(\"Fields is not correct\");\n                        }\n                    }\n                }\n                resultObject.setValue(key, clientData.getValue(key));\n\n                if (!fieldsIterator.hasNext()) {\n                    break;\n                }\n                entry = fieldsIterator.next();\n            }\n            message.setFormData(resultObject);\n        } catch (Exception e) {\n            throw new ValidateFormException(e);\n        }\n    }", "signature": "void validate(final ValidateFormDataMessage message)", "full_signature": "public void validate(final ValidateFormDataMessage message)", "class_method_signature": "ValidateFormDataActor.validate(final ValidateFormDataMessage message)", "testcase": false, "constructor": false, "invocations": ["getForm", "getFormFromRequest", "resolve", "getOrAdd", "iterator", "next", "getKey", "in", "getValue", "validate", "in", "getValue", "setValue", "getValue", "hasNext", "next", "setFormData"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}