{"test_class": {"identifier": "ListMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "jme3-core/src/test/java/com/jme3/util/ListMapTest.java"}, "test_case": {"identifier": "testListMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListMap() {\n        ListMap<String, String> listMap = new ListMap<String, String>();\n        listMap.put(\"bob\", \"hello\");\n        assert \"hello\".equals(listMap.get(\"bob\"));\n        assert \"hello\".equals(listMap.remove(\"bob\"));\n        assert listMap.size() == 0;\n        assert listMap.isEmpty();\n\n        listMap.put(\"abc\", \"1\");\n        listMap.put(\"def\", \"2\");\n        listMap.put(\"ghi\", \"3\");\n        listMap.put(\"jkl\", \"4\");\n        listMap.put(\"mno\", \"5\");\n        assert \"3\".equals(listMap.get(\"ghi\"));\n        assert listMap.size() == 5;\n        assert !listMap.isEmpty();\n\n        // check iteration order, should be consistent\n        for (int i = 0; i < listMap.size(); i++) {\n            String expectedValue = Integer.toString(i + 1);\n            String key = listMap.getKey(i);\n            String value = listMap.getValue(i);\n            Entry<String, String> entry = listMap.getEntry(i);\n            assert key.equals(entry.getKey());\n            assert value.equals(entry.getValue());\n            assert expectedValue.equals(value);\n        }\n    }", "signature": "void testListMap()", "full_signature": "@Test public void testListMap()", "class_method_signature": "ListMapTest.testListMap()", "testcase": true, "constructor": false, "invocations": ["put", "equals", "get", "equals", "remove", "size", "isEmpty", "put", "put", "put", "put", "put", "equals", "get", "size", "isEmpty", "size", "toString", "getKey", "getValue", "getEntry", "equals", "getKey", "equals", "getValue", "equals"]}, "focal_class": {"identifier": "ListMap", "superclass": "extends AbstractMap<K, V>", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private final HashMap<K, V> backingMap;", "modifier": "private final", "type": "HashMap<K, V>", "declarator": "backingMap", "var_name": "backingMap"}, {"original_string": "private ListMapEntry<K, V>[] entries;", "modifier": "private", "type": "ListMapEntry<K, V>[]", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "ListMap", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " ListMap()", "full_signature": "@SuppressWarnings(\"unchecked\") public  ListMap()", "class_method_signature": "ListMap.ListMap()", "testcase": false, "constructor": true}, {"identifier": "ListMap", "parameters": "(int initialCapacity)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " ListMap(int initialCapacity)", "full_signature": "@SuppressWarnings(\"unchecked\") public  ListMap(int initialCapacity)", "class_method_signature": "ListMap.ListMap(int initialCapacity)", "testcase": false, "constructor": true}, {"identifier": "ListMap", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " ListMap(Map<? extends K, ? extends V> map)", "full_signature": "@SuppressWarnings(\"unchecked\") public  ListMap(Map<? extends K, ? extends V> map)", "class_method_signature": "ListMap.ListMap(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ListMap.size()", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "(int index)", "modifiers": "public", "return": "Entry<K, V>", "signature": "Entry<K, V> getEntry(int index)", "full_signature": "public Entry<K, V> getEntry(int index)", "class_method_signature": "ListMap.getEntry(int index)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int index)", "modifiers": "public", "return": "V", "signature": "V getValue(int index)", "full_signature": "public V getValue(int index)", "class_method_signature": "ListMap.getValue(int index)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(int index)", "modifiers": "public", "return": "K", "signature": "K getKey(int index)", "full_signature": "public K getKey(int index)", "class_method_signature": "ListMap.getKey(int index)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ListMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "keyEq", "parameters": "(Object keyA, Object keyB)", "modifiers": "private static", "return": "boolean", "signature": "boolean keyEq(Object keyA, Object keyB)", "full_signature": "private static boolean keyEq(Object keyA, Object keyB)", "class_method_signature": "ListMap.keyEq(Object keyA, Object keyB)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "ListMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(Object value)", "full_signature": "@Override public boolean containsValue(Object value)", "class_method_signature": "ListMap.containsValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V get(Object key)", "full_signature": "@Override public V get(Object key)", "class_method_signature": "ListMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public V put(K key, V value)", "class_method_signature": "ListMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public V remove(Object key)", "class_method_signature": "ListMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends K, ? extends V> map)", "full_signature": "@Override public void putAll(Map<? extends K, ? extends V> map)", "class_method_signature": "ListMap.putAll(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ListMap.clear()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "ListMap<K, V>", "signature": "ListMap<K, V> clone()", "full_signature": "@Override public ListMap<K, V> clone()", "class_method_signature": "ListMap.clone()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "ListMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "ListMap.values()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Entry<K, V>>", "signature": "Set<Entry<K, V>> entrySet()", "full_signature": "@Override public Set<Entry<K, V>> entrySet()", "class_method_signature": "ListMap.entrySet()", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/util/ListMap.java"}, "focal_method": {"identifier": "ListMap", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "body": "@SuppressWarnings(\"unchecked\")\n    public ListMap(){\n        entries = new ListMapEntry[4];\n        backingMap = new HashMap<K, V>(4);\n//       entries = new ArrayList<ListMapEntry<K,V>>();\n    }", "signature": " ListMap()", "full_signature": "@SuppressWarnings(\"unchecked\") public  ListMap()", "class_method_signature": "ListMap.ListMap()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}