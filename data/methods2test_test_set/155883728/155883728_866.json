{"test_class": {"identifier": "ExpectPathsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/ExpectPathsTest.java"}, "test_case": {"identifier": "testNewInstance_expectedPaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewInstance_expectedPaths() {\n        ExpectPaths.Check check1 = checkFor(key(ExpectPaths.keys().expectedPaths(), arr(\"/foo1\", \"/foo2\")).get());\n        Assert.assertEquals(\"expect expectedPaths\", Arrays.asList(\"/foo1\", \"/foo2\"), check1.expectedPaths);\n        ExpectPaths.Check check2 = checkFor(key(ExpectPaths.keys().expectedPaths(), arr(\"/foo2\", \"/foo1\")).get());\n        Assert.assertEquals(\"expect expectedPaths\", Arrays.asList(\"/foo2\", \"/foo1\"), check2.expectedPaths);\n    }", "signature": "void testNewInstance_expectedPaths()", "full_signature": "@Test public void testNewInstance_expectedPaths()", "class_method_signature": "ExpectPathsTest.testNewInstance_expectedPaths()", "testcase": true, "constructor": false, "invocations": ["checkFor", "get", "key", "expectedPaths", "keys", "arr", "assertEquals", "asList", "checkFor", "get", "key", "expectedPaths", "keys", "arr", "assertEquals", "asList"]}, "focal_class": {"identifier": "ExpectPaths", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String expectedPaths() {\n            return \"expectedPaths\";\n        }\n\n        @Override\n        public String notExpectedPaths() {\n            return \"notExpectedPaths\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String expectedPaths() {\n            return \"expectedPaths\";\n        }\n\n        @Override\n        public String notExpectedPaths() {\n            return \"notExpectedPaths\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_EXPECTED_PATHS = keys().expectedPaths();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_EXPECTED_PATHS = keys().expectedPaths()", "var_name": "CONFIG_EXPECTED_PATHS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_NOT_EXPECTED_PATHS = keys().notExpectedPaths();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_NOT_EXPECTED_PATHS = keys().notExpectedPaths()", "var_name": "CONFIG_NOT_EXPECTED_PATHS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules()", "var_name": "CONFIG_AFTER_PACKAGE_ID_RULES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_SEVERITY = keys().severity();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_SEVERITY = keys().severity()", "var_name": "CONFIG_SEVERITY"}, {"original_string": "static final Severity DEFAULT_SEVERITY = Severity.MAJOR;", "modifier": "static final", "type": "Severity", "declarator": "DEFAULT_SEVERITY = Severity.MAJOR", "var_name": "DEFAULT_SEVERITY"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "ExpectPaths.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "ExpectPaths.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/ExpectPaths.java"}, "focal_method": {"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "body": "@NotNull\n    public static JsonKeys keys() {\n        return KEYS;\n    }", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "ExpectPaths.keys()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}