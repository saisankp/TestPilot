{"test_class": {"identifier": "RestRulesTest", "superclass": "extends JerseyTest", "interfaces": "", "fields": [{"original_string": "private static ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private static", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "file": "bigdata-intro/cep-intro/siddhi-kafka-rest/src/test/java/net/redborder/cep/rest/RestRulesTest.java"}, "test_case": {"identifier": "synchronizeWithSameID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void synchronizeWithSameID() throws Exception {\n        // Create a set of rules that will be added\n        List<Map<String, Object>> listOfRules = new ArrayList<>();\n\n        Map<String, Object> elementMap = new HashMap<>();\n        Map<String, String> outputTopics = new HashMap<>();\n        outputTopics.put(\"outputStream\", \"outputTopic\");\n        elementMap.put(\"id\", \"rule_list_one\");\n        elementMap.put(\"input\", Arrays.asList(\"test\"));\n        elementMap.put(\"output\", outputTopics);\n        elementMap.put(\"executionPlan\", \"from test select a, b insert into outputStream;\");\n        listOfRules.add(elementMap);\n\n        Map<String, Object> elementMap2 = new HashMap<>();\n        Map<String, String> outputTopics2 = new HashMap<>();\n        outputTopics2.put(\"outputStream\", \"outputTopic\");\n        elementMap2.put(\"id\", \"rule_list_one\");\n        elementMap2.put(\"input\", Arrays.asList(\"test\"));\n        elementMap2.put(\"output\", outputTopics2);\n        elementMap2.put(\"executionPlan\", \"from test select a, b insert into outputStream;\");\n        listOfRules.add(elementMap2);\n\n        String json = objectMapper.writeValueAsString(listOfRules);\n\n        Entity<String> entity = Entity.json(json);\n        Response response = target(\"/v1/synchronize\").request(MediaType.APPLICATION_JSON_TYPE).post(entity);\n        int statusCode = response.getStatus();\n\n        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), statusCode);\n    }", "signature": "void synchronizeWithSameID()", "full_signature": "@Test public void synchronizeWithSameID()", "class_method_signature": "RestRulesTest.synchronizeWithSameID()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "asList", "put", "put", "add", "put", "put", "put", "asList", "put", "put", "add", "writeValueAsString", "json", "post", "request", "target", "getStatus", "assertEquals", "getStatusCode"]}, "focal_class": {"identifier": "RestRules", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(RestRules.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RestRules.class)", "var_name": "log"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "methods": [{"identifier": "add", "parameters": "(String json)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response add(String json)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response add(String json)", "class_method_signature": "RestRules.add(String json)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@PathParam(\"id\") String id)", "modifiers": "@DELETE @Path(\"/{id}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response remove(@PathParam(\"id\") String id)", "full_signature": "@DELETE @Path(\"/{id}\") @Produces(MediaType.APPLICATION_JSON) public Response remove(@PathParam(\"id\") String id)", "class_method_signature": "RestRules.remove(@PathParam(\"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "(String json)", "modifiers": "@POST @Path(\"/synchronize\") @Consumes (MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response synchronize(String json)", "full_signature": "@POST @Path(\"/synchronize\") @Consumes (MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response synchronize(String json)", "class_method_signature": "RestRules.synchronize(String json)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response list()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Response list()", "class_method_signature": "RestRules.list()", "testcase": false, "constructor": false}, {"identifier": "parseMap", "parameters": "(String str)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> parseMap(String str)", "full_signature": "private Map<String, Object> parseMap(String str)", "class_method_signature": "RestRules.parseMap(String str)", "testcase": false, "constructor": false}, {"identifier": "parseList", "parameters": "(String str)", "modifiers": "private", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> parseList(String str)", "full_signature": "private List<Map<String, Object>> parseList(String str)", "class_method_signature": "RestRules.parseList(String str)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Throwable e, Response.Status status)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(Throwable e, Response.Status status)", "full_signature": "private Map<String, Object> toMap(Throwable e, Response.Status status)", "class_method_signature": "RestRules.toMap(Throwable e, Response.Status status)", "testcase": false, "constructor": false}], "file": "bigdata-intro/cep-intro/siddhi-kafka-rest/src/main/java/net/redborder/cep/rest/RestRules.java"}, "focal_method": {"identifier": "add", "parameters": "(String json)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "body": "@POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response add(String json) {\n        RestListener listener = RestManager.getListener();\n        Response response;\n\n        try {\n            log.info(\"Add request with json: {}\", json);\n            listener.add(parseMap(json));\n            response = Response.ok().build();\n        } catch (RestInvalidException e) {\n            log.info(\"Add request was invalid: {}\", e.getMessage());\n            response = Response.status(Response.Status.BAD_REQUEST)\n                    .entity(toMap(e, Response.Status.BAD_REQUEST))\n                    .build();\n        } catch (Exception e) {\n            e.printStackTrace();\n            response = Response.serverError()\n                    .entity(toMap(e, Response.Status.INTERNAL_SERVER_ERROR))\n                    .build();\n        }\n\n        return response;\n    }", "signature": "Response add(String json)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response add(String json)", "class_method_signature": "RestRules.add(String json)", "testcase": false, "constructor": false, "invocations": ["getListener", "info", "add", "parseMap", "build", "ok", "info", "getMessage", "build", "entity", "status", "toMap", "printStackTrace", "build", "entity", "serverError", "toMap"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}