{"test_class": {"identifier": "ClaraBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClaraBuilder builder = Clara.build();", "modifier": "private final", "type": "ClaraBuilder", "declarator": "builder = Clara.build()", "var_name": "builder"}], "file": "clara/src/test/java/org/vaadin/teemu/clara/ClaraBuilderTest.java"}, "test_case": {"identifier": "inflaterListener_componentReuse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void inflaterListener_componentReuse() {\n        VerticalLayout layout = (VerticalLayout) Clara.build().createFrom(\n                \"/org/vaadin/teemu/clara/component-reuse.xml\");\n\n        assertEquals(2, layout.getComponentCount());\n        assertCustomComponentInflaterListener(\"custom1\",\n                (CustomComponentInflaterListener) layout.getComponent(0));\n        assertCustomComponentInflaterListener(\"custom2\",\n                (CustomComponentInflaterListener) layout.getComponent(1));\n    }", "signature": "void inflaterListener_componentReuse()", "full_signature": "@Test public void inflaterListener_componentReuse()", "class_method_signature": "ClaraBuilderTest.inflaterListener_componentReuse()", "testcase": true, "constructor": false, "invocations": ["createFrom", "build", "assertEquals", "getComponentCount", "assertCustomComponentInflaterListener", "getComponent", "assertCustomComponentInflaterListener", "getComponent"]}, "focal_class": {"identifier": "ClaraBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Object controller;", "modifier": "private", "type": "Object", "declarator": "controller", "var_name": "controller"}, {"original_string": "private final List<AttributeFilter> attributeFilters = new ArrayList<AttributeFilter>();", "modifier": "private final", "type": "List<AttributeFilter>", "declarator": "attributeFilters = new ArrayList<AttributeFilter>()", "var_name": "attributeFilters"}, {"original_string": "private final List<AttributeParser> attributeParsers = new ArrayList<AttributeParser>();", "modifier": "private final", "type": "List<AttributeParser>", "declarator": "attributeParsers = new ArrayList<AttributeParser>()", "var_name": "attributeParsers"}, {"original_string": "private final List<ComponentProvider> componentProviders = new ArrayList<ComponentProvider>();", "modifier": "private final", "type": "List<ComponentProvider>", "declarator": "componentProviders = new ArrayList<ComponentProvider>()", "var_name": "componentProviders"}, {"original_string": "private String idPrefix = \"\";", "modifier": "private", "type": "String", "declarator": "idPrefix = \"\"", "var_name": "idPrefix"}], "methods": [{"identifier": "ClaraBuilder", "parameters": "()", "modifiers": "", "return": "", "signature": " ClaraBuilder()", "full_signature": "  ClaraBuilder()", "class_method_signature": "ClaraBuilder.ClaraBuilder()", "testcase": false, "constructor": true}, {"identifier": "withController", "parameters": "(Object controller)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withController(Object controller)", "full_signature": "public ClaraBuilder withController(Object controller)", "class_method_signature": "ClaraBuilder.withController(Object controller)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getController()", "full_signature": "public Object getController()", "class_method_signature": "ClaraBuilder.getController()", "testcase": false, "constructor": false}, {"identifier": "withIdPrefix", "parameters": "(String idPrefix)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withIdPrefix(String idPrefix)", "full_signature": "public ClaraBuilder withIdPrefix(String idPrefix)", "class_method_signature": "ClaraBuilder.withIdPrefix(String idPrefix)", "testcase": false, "constructor": false}, {"identifier": "getIdPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIdPrefix()", "full_signature": "public String getIdPrefix()", "class_method_signature": "ClaraBuilder.getIdPrefix()", "testcase": false, "constructor": false}, {"identifier": "withAttributeFilter", "parameters": "(AttributeFilter filter)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withAttributeFilter(AttributeFilter filter)", "full_signature": "public ClaraBuilder withAttributeFilter(AttributeFilter filter)", "class_method_signature": "ClaraBuilder.withAttributeFilter(AttributeFilter filter)", "testcase": false, "constructor": false}, {"identifier": "withAttributeFilters", "parameters": "(AttributeFilter... filters)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withAttributeFilters(AttributeFilter... filters)", "full_signature": "public ClaraBuilder withAttributeFilters(AttributeFilter... filters)", "class_method_signature": "ClaraBuilder.withAttributeFilters(AttributeFilter... filters)", "testcase": false, "constructor": false}, {"identifier": "withComponentProvider", "parameters": "(ComponentProvider provider)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withComponentProvider(ComponentProvider provider)", "full_signature": "public ClaraBuilder withComponentProvider(ComponentProvider provider)", "class_method_signature": "ClaraBuilder.withComponentProvider(ComponentProvider provider)", "testcase": false, "constructor": false}, {"identifier": "withComponentProviders", "parameters": "(ComponentProvider... providers)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withComponentProviders(ComponentProvider... providers)", "full_signature": "public ClaraBuilder withComponentProviders(ComponentProvider... providers)", "class_method_signature": "ClaraBuilder.withComponentProviders(ComponentProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "withComponentProviders", "parameters": "(List<ComponentProvider> providers)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withComponentProviders(List<ComponentProvider> providers)", "full_signature": "public ClaraBuilder withComponentProviders(List<ComponentProvider> providers)", "class_method_signature": "ClaraBuilder.withComponentProviders(List<ComponentProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFilters", "parameters": "()", "modifiers": "public", "return": "List<AttributeFilter>", "signature": "List<AttributeFilter> getAttributeFilters()", "full_signature": "public List<AttributeFilter> getAttributeFilters()", "class_method_signature": "ClaraBuilder.getAttributeFilters()", "testcase": false, "constructor": false}, {"identifier": "withAttributeParser", "parameters": "(AttributeParser parser)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withAttributeParser(AttributeParser parser)", "full_signature": "public ClaraBuilder withAttributeParser(AttributeParser parser)", "class_method_signature": "ClaraBuilder.withAttributeParser(AttributeParser parser)", "testcase": false, "constructor": false}, {"identifier": "withAttributeParsers", "parameters": "(AttributeParser... parsers)", "modifiers": "public", "return": "ClaraBuilder", "signature": "ClaraBuilder withAttributeParsers(AttributeParser... parsers)", "full_signature": "public ClaraBuilder withAttributeParsers(AttributeParser... parsers)", "class_method_signature": "ClaraBuilder.withAttributeParsers(AttributeParser... parsers)", "testcase": false, "constructor": false}, {"identifier": "getAttributeParsers", "parameters": "()", "modifiers": "public", "return": "List<AttributeParser>", "signature": "List<AttributeParser> getAttributeParsers()", "full_signature": "public List<AttributeParser> getAttributeParsers()", "class_method_signature": "ClaraBuilder.getAttributeParsers()", "testcase": false, "constructor": false}, {"identifier": "createFrom", "parameters": "(InputStream xml)", "modifiers": "public", "return": "Component", "signature": "Component createFrom(InputStream xml)", "full_signature": "public Component createFrom(InputStream xml)", "class_method_signature": "ClaraBuilder.createFrom(InputStream xml)", "testcase": false, "constructor": false}, {"identifier": "createFrom", "parameters": "(String xmlClassResourceFileName)", "modifiers": "public", "return": "Component", "signature": "Component createFrom(String xmlClassResourceFileName)", "full_signature": "public Component createFrom(String xmlClassResourceFileName)", "class_method_signature": "ClaraBuilder.createFrom(String xmlClassResourceFileName)", "testcase": false, "constructor": false}, {"identifier": "createInflater", "parameters": "()", "modifiers": "", "return": "LayoutInflater", "signature": "LayoutInflater createInflater()", "full_signature": " LayoutInflater createInflater()", "class_method_signature": "ClaraBuilder.createInflater()", "testcase": false, "constructor": false}], "file": "clara/src/main/java/org/vaadin/teemu/clara/ClaraBuilder.java"}, "focal_method": {"identifier": "createFrom", "parameters": "(InputStream xml)", "modifiers": "public", "return": "Component", "body": "public Component createFrom(InputStream xml) {\n        Binder binder = new Binder(idPrefix);\n\n        // Inflate the XML to a component (tree).\n        LayoutInflater inflater = createInflater();\n        Component result = inflater.inflate(xml, binder\n                .getAlreadyAssignedFields(controller), componentProviders\n                .toArray(new ComponentProvider[componentProviders.size()]));\n\n        // Bind to controller.\n        binder.bind(result, controller);\n        return result;\n    }", "signature": "Component createFrom(InputStream xml)", "full_signature": "public Component createFrom(InputStream xml)", "class_method_signature": "ClaraBuilder.createFrom(InputStream xml)", "testcase": false, "constructor": false, "invocations": ["createInflater", "inflate", "getAlreadyAssignedFields", "toArray", "size", "bind"]}, "repository": {"repo_id": 4384653, "url": "https://github.com/tehapo/Clara", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 38, "size": 7395, "license": "licensed"}}