{"test_class": {"identifier": "BCUTDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/BCUTDescriptorTest.java"}, "test_case": {"identifier": "testUndefinedValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUndefinedValues() throws Exception {\n        String filename = \"data/mdl/burden_undefined.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new MDLV2000Reader(ins);\n        ChemFile content = reader.read(new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(0);\n\n        Assert.assertNotNull(ac);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n        addExplicitHydrogens(ac);\n        Aromaticity.cdkLegacy().apply(ac);\n\n        Exception e = descriptor.calculate(ac).getException();\n        Assert.assertNotNull(e);\n        // make sure exception was a NPE etc.\n        Assert.assertEquals(\"Could not calculate partial charges: Partial charge not-supported for element: 'As'.\",\n                e.getMessage());\n    }", "signature": "void testUndefinedValues()", "full_signature": "@Test public void testUndefinedValues()", "class_method_signature": "BCUTDescriptorTest.testUndefinedValues()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "assertNotNull", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "apply", "cdkLegacy", "getException", "calculate", "assertNotNull", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "BCUTDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(BCUTDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(BCUTDescriptor.class)", "var_name": "logger"}, {"original_string": "private int                 nhigh;", "modifier": "private", "type": "int", "declarator": "nhigh", "var_name": "nhigh"}, {"original_string": "private int                 nlow;", "modifier": "private", "type": "int", "declarator": "nlow", "var_name": "nlow"}, {"original_string": "private boolean             checkAromaticity;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity", "var_name": "checkAromaticity"}], "methods": [{"identifier": "BCUTDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BCUTDescriptor()", "full_signature": "public  BCUTDescriptor()", "class_method_signature": "BCUTDescriptor.BCUTDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "BCUTDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "BCUTDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "BCUTDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "BCUTDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "BCUTDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "BCUTDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "hasUndefined", "parameters": "(double[][] m)", "modifiers": "private", "return": "boolean", "signature": "boolean hasUndefined(double[][] m)", "full_signature": "private boolean hasUndefined(double[][] m)", "class_method_signature": "BCUTDescriptor.hasUndefined(double[][] m)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "BCUTDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "BCUTDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "BCUTDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/BCUTDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        int counter;\n        IAtomContainer molecule;\n        try {\n            molecule = container.clone();\n        } catch (CloneNotSupportedException e) {\n            logger.debug(\"Error during clone\");\n            return getDummyDescriptorValue(new CDKException(\"Error occurred during clone \" + e));\n        }\n\n        // add H's in case they're not present\n        try {\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n            CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(molecule.getBuilder());\n            hAdder.addImplicitHydrogens(molecule);\n            AtomContainerManipulator.convertImplicitToExplicitHydrogens(molecule);\n        } catch (Exception e) {\n            return getDummyDescriptorValue(new CDKException(\"Could not add hydrogens: \" + e.getMessage(), e));\n        }\n\n        // do aromaticity detecttion for calculating polarizability later on\n        if (this.checkAromaticity) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(new CDKException(\"Error in atom typing: \" + e.getMessage(), e));\n            }\n            try {\n                Aromaticity.cdkLegacy().apply(molecule);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(new CDKException(\"Error in aromaticity perception: \" + e.getMessage()));\n            }\n        }\n\n        // find number of heavy atoms\n        int nheavy = 0;\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            if (molecule.getAtom(i).getAtomicNumber() != IElement.H) nheavy++;\n        }\n\n        if (nheavy == 0) return getDummyDescriptorValue(new CDKException(\"No heavy atoms in the molecule\"));\n\n        double[] diagvalue = new double[nheavy];\n\n        // get atomic mass weighted BCUT\n        counter = 0;\n        try {\n            for (int i = 0; i < molecule.getAtomCount(); i++) {\n                if (molecule.getAtom(i).getAtomicNumber() == IElement.H) continue;\n                diagvalue[counter] = Isotopes.getInstance().getMajorIsotope(molecule.getAtom(i).getSymbol())\n                        .getExactMass();\n                counter++;\n            }\n        } catch (Exception e) {\n            return getDummyDescriptorValue(new CDKException(\"Could not calculate weight: \" + e.getMessage(), e));\n        }\n\n        double[][] burdenMatrix = BurdenMatrix.evalMatrix(molecule, diagvalue);\n        if (hasUndefined(burdenMatrix))\n            return getDummyDescriptorValue(new CDKException(\"Burden matrix has undefined values\"));\n        Matrix matrix = new Matrix(burdenMatrix);\n        EigenvalueDecomposition eigenDecomposition = new EigenvalueDecomposition(matrix);\n        double[] eval1 = eigenDecomposition.getRealEigenvalues();\n\n        // get charge weighted BCUT\n        LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n        GasteigerMarsiliPartialCharges peoe;\n        try {\n            lpcheck.saturate(molecule);\n            double[] charges = new double[molecule.getAtomCount()];\n            //            pepe = new GasteigerPEPEPartialCharges();\n            //            pepe.calculateCharges(molecule);\n            //            for (int i = 0; i < molecule.getAtomCount(); i++) charges[i] = molecule.getAtom(i).getCharge();\n            peoe = new GasteigerMarsiliPartialCharges();\n            peoe.assignGasteigerMarsiliSigmaPartialCharges(molecule, true);\n            for (int i = 0; i < molecule.getAtomCount(); i++)\n                charges[i] += molecule.getAtom(i).getCharge();\n            for (int i = 0; i < molecule.getAtomCount(); i++) {\n                molecule.getAtom(i).setCharge(charges[i]);\n            }\n        } catch (Exception e) {\n            return getDummyDescriptorValue(new CDKException(\"Could not calculate partial charges: \" + e.getMessage(), e));\n        }\n        counter = 0;\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            if (molecule.getAtom(i).getAtomicNumber() == IElement.H) continue;\n            diagvalue[counter] = molecule.getAtom(i).getCharge();\n            counter++;\n        }\n        burdenMatrix = BurdenMatrix.evalMatrix(molecule, diagvalue);\n        if (hasUndefined(burdenMatrix))\n            return getDummyDescriptorValue(new CDKException(\"Burden matrix has undefined values\"));\n        matrix = new Matrix(burdenMatrix);\n        eigenDecomposition = new EigenvalueDecomposition(matrix);\n        double[] eval2 = eigenDecomposition.getRealEigenvalues();\n\n        int[][] topoDistance = PathTools.computeFloydAPSP(AdjacencyMatrix.getMatrix(molecule));\n\n        // get polarizability weighted BCUT\n        Polarizability pol = new Polarizability();\n        counter = 0;\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            if (molecule.getAtom(i).getAtomicNumber() == IElement.H) continue;\n            diagvalue[counter] = pol.calculateGHEffectiveAtomPolarizability(molecule, molecule.getAtom(i), false,\n                    topoDistance);\n            counter++;\n        }\n        burdenMatrix = BurdenMatrix.evalMatrix(molecule, diagvalue);\n        if (hasUndefined(burdenMatrix))\n            return getDummyDescriptorValue(new CDKException(\"Burden matrix has undefined values\"));\n        matrix = new Matrix(burdenMatrix);\n        eigenDecomposition = new EigenvalueDecomposition(matrix);\n        double[] eval3 = eigenDecomposition.getRealEigenvalues();\n\n        // return only the n highest & lowest eigenvalues\n        int lnlow, lnhigh, enlow, enhigh;\n        if (nlow > nheavy) {\n            lnlow = nheavy;\n            enlow = nlow - nheavy;\n        } else {\n            lnlow = nlow;\n            enlow = 0;\n        }\n\n        if (nhigh > nheavy) {\n            lnhigh = nheavy;\n            enhigh = nhigh - nheavy;\n        } else {\n            lnhigh = nhigh;\n            enhigh = 0;\n        }\n\n        DoubleArrayResult retval = new DoubleArrayResult((lnlow + enlow + lnhigh + enhigh) * 3);\n\n        for (int i = 0; i < lnlow; i++)\n            retval.add(eval1[i]);\n        for (int i = 0; i < enlow; i++)\n            retval.add(Double.NaN);\n        for (int i = 0; i < lnhigh; i++)\n            retval.add(eval1[eval1.length - i - 1]);\n        for (int i = 0; i < enhigh; i++)\n            retval.add(Double.NaN);\n\n        for (int i = 0; i < lnlow; i++)\n            retval.add(eval2[i]);\n        for (int i = 0; i < enlow; i++)\n            retval.add(Double.NaN);\n        for (int i = 0; i < lnhigh; i++)\n            retval.add(eval2[eval2.length - i - 1]);\n        for (int i = 0; i < enhigh; i++)\n            retval.add(Double.NaN);\n\n        for (int i = 0; i < lnlow; i++)\n            retval.add(eval3[i]);\n        for (int i = 0; i < enlow; i++)\n            retval.add(Double.NaN);\n        for (int i = 0; i < lnhigh; i++)\n            retval.add(eval3[eval3.length - i - 1]);\n        for (int i = 0; i < enhigh; i++)\n            retval.add(Double.NaN);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(),\n                                   getParameters(), retval,\n                                   getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "BCUTDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["clone", "debug", "getDummyDescriptorValue", "percieveAtomTypesAndConfigureAtoms", "getInstance", "getBuilder", "addImplicitHydrogens", "convertImplicitToExplicitHydrogens", "getDummyDescriptorValue", "getMessage", "percieveAtomTypesAndConfigureAtoms", "getDummyDescriptorValue", "getMessage", "apply", "cdkLegacy", "getDummyDescriptorValue", "getMessage", "getAtomCount", "getAtomicNumber", "getAtom", "getDummyDescriptorValue", "getAtomCount", "getAtomicNumber", "getAtom", "getExactMass", "getMajorIsotope", "getInstance", "getSymbol", "getAtom", "getDummyDescriptorValue", "getMessage", "evalMatrix", "hasUndefined", "getDummyDescriptorValue", "getRealEigenvalues", "saturate", "getAtomCount", "assignGasteigerMarsiliSigmaPartialCharges", "getAtomCount", "getCharge", "getAtom", "getAtomCount", "setCharge", "getAtom", "getDummyDescriptorValue", "getMessage", "getAtomCount", "getAtomicNumber", "getAtom", "getCharge", "getAtom", "evalMatrix", "hasUndefined", "getDummyDescriptorValue", "getRealEigenvalues", "computeFloydAPSP", "getMatrix", "getAtomCount", "getAtomicNumber", "getAtom", "calculateGHEffectiveAtomPolarizability", "getAtom", "evalMatrix", "hasUndefined", "getDummyDescriptorValue", "getRealEigenvalues", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}