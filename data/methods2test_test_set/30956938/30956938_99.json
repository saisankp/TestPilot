{"test_class": {"identifier": "XMLInputSplitterActivityTest", "superclass": "", "interfaces": "", "fields": [], "file": "taverna-wsdl-activity/src/test/java/org/apache/taverna/activities/wsdl/xmlsplitter/XMLInputSplitterActivityTest.java"}, "test_case": {"identifier": "testGetTypeDescriptorForInputPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetTypeDescriptorForInputPort() throws Exception {\n\t\tString xml = \"<s:extensions xmlns:s=\\\"http://org.embl.ebi.escience/xscufl/0.1alpha\\\"><s:complextype optional=\\\"false\\\" unbounded=\\\"false\\\" typename=\\\"personToString\\\" name=\\\"parameters\\\" qname=\\\"{http://xfire.codehaus.org/BookService}personToString\\\"><s:elements><s:complextype optional=\\\"false\\\" unbounded=\\\"false\\\" typename=\\\"Person\\\" name=\\\"person\\\" qname=\\\"{http://xfire.codehaus.org/BookService}&gt;personToString&gt;person\\\"><s:elements><s:complextype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"Address\\\" name=\\\"address\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Person&gt;address\\\"><s:elements><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"string\\\" name=\\\"city\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Address&gt;city\\\" /><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"string\\\" name=\\\"road\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Address&gt;road\\\" /><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"int\\\" name=\\\"roadNumber\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Address&gt;roadNumber\\\" /></s:elements></s:complextype><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"int\\\" name=\\\"age\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Person&gt;age\\\" /><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"string\\\" name=\\\"firstName\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Person&gt;firstName\\\" /><s:basetype optional=\\\"true\\\" unbounded=\\\"false\\\" typename=\\\"string\\\" name=\\\"lastName\\\" qname=\\\"{http://complex.pojo.axis2.menagerie.googlecode}Person&gt;lastName\\\" /></s:elements></s:complextype></s:elements></s:complextype></s:extensions>\";\n\t\tElement element = new SAXBuilder().build(new StringReader(xml)).getRootElement();\n\t\tJsonNode bean = XMLSplitterConfigurationBeanBuilder.buildBeanForInput(element);\n\t\tXMLInputSplitterActivity a = new XMLInputSplitterActivity();\n\t\ta.configure(bean);\n\t\tXMLInputSplitterActivityFactory af = new XMLInputSplitterActivityFactory();\n\t\taf.setEdits(new EditsImpl());\n\n\t\tboolean exists = false;\n\t\tfor (ActivityInputPort p : af.getInputPorts(bean)) {\n\t\t\tif (p.getName().equals(\"person\")) {\n\t\t\t\texists=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tassertTrue(\"The input port named person should have been found\",exists);\n\n\t\tassertNotNull(\"There should be a type descriptor for person\",a.getTypeDescriptorForInputPort(\"person\"));\n\t\tassertTrue(\"The descriptor should be complex\",a.getTypeDescriptorForInputPort(\"person\") instanceof ComplexTypeDescriptor);\n\t}", "signature": "void testGetTypeDescriptorForInputPort()", "full_signature": "@Test public void testGetTypeDescriptorForInputPort()", "class_method_signature": "XMLInputSplitterActivityTest.testGetTypeDescriptorForInputPort()", "testcase": true, "constructor": false, "invocations": ["getRootElement", "build", "buildBeanForInput", "configure", "setEdits", "getInputPorts", "equals", "getName", "assertTrue", "assertNotNull", "getTypeDescriptorForInputPort", "assertTrue", "getTypeDescriptorForInputPort"]}, "focal_class": {"identifier": "XMLInputSplitterActivity", "superclass": "extends AbstractAsynchronousActivity<JsonNode>", "interfaces": "implements InputPortTypeDescriptorActivity", "fields": [{"original_string": "public static final String URI = \"http://ns.taverna.org.uk/2010/activity/xml-splitter/in\";", "modifier": "public static final", "type": "String", "declarator": "URI = \"http://ns.taverna.org.uk/2010/activity/xml-splitter/in\"", "var_name": "URI"}, {"original_string": "JsonNode configBean;", "modifier": "", "type": "JsonNode", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "TypeDescriptor typeDescriptor;", "modifier": "", "type": "TypeDescriptor", "declarator": "typeDescriptor", "var_name": "typeDescriptor"}], "methods": [{"identifier": "configure", "parameters": "(JsonNode configBean)", "modifiers": "@Override public", "return": "void", "signature": "void configure(JsonNode configBean)", "full_signature": "@Override public void configure(JsonNode configBean)", "class_method_signature": "XMLInputSplitterActivity.configure(JsonNode configBean)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "JsonNode", "signature": "JsonNode getConfiguration()", "full_signature": "@Override public JsonNode getConfiguration()", "class_method_signature": "XMLInputSplitterActivity.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "executeAsynch", "parameters": "(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "full_signature": "@Override public void executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "class_method_signature": "XMLInputSplitterActivity.executeAsynch(final Map<String, T2Reference> data,\n\t\t\tfinal AsynchronousActivityCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getTypeDescriptorForInputPort", "parameters": "(String portName)", "modifiers": "@Override public", "return": "TypeDescriptor", "signature": "TypeDescriptor getTypeDescriptorForInputPort(String portName)", "full_signature": "@Override public TypeDescriptor getTypeDescriptorForInputPort(String portName)", "class_method_signature": "XMLInputSplitterActivity.getTypeDescriptorForInputPort(String portName)", "testcase": false, "constructor": false}, {"identifier": "getTypeDescriptorsForInputPorts", "parameters": "()", "modifiers": "public", "return": "Map<String, TypeDescriptor>", "signature": "Map<String, TypeDescriptor> getTypeDescriptorsForInputPorts()", "full_signature": "public Map<String, TypeDescriptor> getTypeDescriptorsForInputPorts()", "class_method_signature": "XMLInputSplitterActivity.getTypeDescriptorsForInputPorts()", "testcase": false, "constructor": false}], "file": "taverna-wsdl-activity/src/main/java/org/apache/taverna/activities/wsdl/xmlsplitter/XMLInputSplitterActivity.java"}, "focal_method": {"identifier": "getTypeDescriptorForInputPort", "parameters": "(String portName)", "modifiers": "@Override public", "return": "TypeDescriptor", "body": "@Override\n\tpublic TypeDescriptor getTypeDescriptorForInputPort(String portName) {\n\t\tTypeDescriptor result = null;\n\t\tif (typeDescriptor instanceof ComplexTypeDescriptor) {\n\t\t\tfor (TypeDescriptor desc : ((ComplexTypeDescriptor)typeDescriptor).getElements()) {\n\t\t\t\tif (desc.getName().equals(portName)) {\n\t\t\t\t\tresult = desc;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (typeDescriptor instanceof ArrayTypeDescriptor) {\n\t\t\tTypeDescriptor desc = ((ArrayTypeDescriptor)typeDescriptor).getElementType();\t\n\t\t\t\n\t\t\tif (typeDescriptor.getName().equals(portName)) {\n\t\t\t\tresult = desc;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "TypeDescriptor getTypeDescriptorForInputPort(String portName)", "full_signature": "@Override public TypeDescriptor getTypeDescriptorForInputPort(String portName)", "class_method_signature": "XMLInputSplitterActivity.getTypeDescriptorForInputPort(String portName)", "testcase": false, "constructor": false, "invocations": ["getElements", "equals", "getName", "getElementType", "equals", "getName"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}