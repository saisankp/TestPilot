{"test_class": {"identifier": "StreamingRuntimeContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java"}, "test_case": {"identifier": "testListStateInstantiation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t// check that the Path class is really registered, i.e., the execution config was applied\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}", "signature": "void testListStateInstantiation()", "full_signature": "@Test public void testListStateInstantiation()", "class_method_signature": "StreamingRuntimeContextTest.testListStateInstantiation()", "testcase": true, "constructor": false, "invocations": ["registerKryoType", "createMockOp", "createMockEnvironment", "emptyMap", "getListState", "get", "getSerializer", "assertTrue", "assertTrue", "getId", "getRegistration", "getKryo"]}, "focal_class": {"identifier": "StreamingRuntimeContext", "superclass": "extends AbstractRuntimeUDFContext", "interfaces": "", "fields": [{"original_string": "private final AbstractStreamOperator<?> operator;", "modifier": "private final", "type": "AbstractStreamOperator<?>", "declarator": "operator", "var_name": "operator"}, {"original_string": "private final Environment taskEnvironment;", "modifier": "private final", "type": "Environment", "declarator": "taskEnvironment", "var_name": "taskEnvironment"}, {"original_string": "private final StreamConfig streamConfig;", "modifier": "private final", "type": "StreamConfig", "declarator": "streamConfig", "var_name": "streamConfig"}], "methods": [{"identifier": "StreamingRuntimeContext", "parameters": "(AbstractStreamOperator<?> operator,\n\t\t\t\t\t\t\t\t\tEnvironment env, Map<String, Accumulator<?, ?>> accumulators)", "modifiers": "public", "return": "", "signature": " StreamingRuntimeContext(AbstractStreamOperator<?> operator,\n\t\t\t\t\t\t\t\t\tEnvironment env, Map<String, Accumulator<?, ?>> accumulators)", "full_signature": "public  StreamingRuntimeContext(AbstractStreamOperator<?> operator,\n\t\t\t\t\t\t\t\t\tEnvironment env, Map<String, Accumulator<?, ?>> accumulators)", "class_method_signature": "StreamingRuntimeContext.StreamingRuntimeContext(AbstractStreamOperator<?> operator,\n\t\t\t\t\t\t\t\t\tEnvironment env, Map<String, Accumulator<?, ?>> accumulators)", "testcase": false, "constructor": true}, {"identifier": "getInputSplitProvider", "parameters": "()", "modifiers": "public", "return": "InputSplitProvider", "signature": "InputSplitProvider getInputSplitProvider()", "full_signature": "public InputSplitProvider getInputSplitProvider()", "class_method_signature": "StreamingRuntimeContext.getInputSplitProvider()", "testcase": false, "constructor": false}, {"identifier": "registerTimer", "parameters": "(long time, Triggerable target)", "modifiers": "public", "return": "void", "signature": "void registerTimer(long time, Triggerable target)", "full_signature": "public void registerTimer(long time, Triggerable target)", "class_method_signature": "StreamingRuntimeContext.registerTimer(long time, Triggerable target)", "testcase": false, "constructor": false}, {"identifier": "getBroadcastVariable", "parameters": "(String name)", "modifiers": "@Override public", "return": "List<RT>", "signature": "List<RT> getBroadcastVariable(String name)", "full_signature": "@Override public List<RT> getBroadcastVariable(String name)", "class_method_signature": "StreamingRuntimeContext.getBroadcastVariable(String name)", "testcase": false, "constructor": false}, {"identifier": "getBroadcastVariableWithInitializer", "parameters": "(String name, BroadcastVariableInitializer<T, C> initializer)", "modifiers": "@Override public", "return": "C", "signature": "C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)", "full_signature": "@Override public C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)", "class_method_signature": "StreamingRuntimeContext.getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(ValueStateDescriptor<T> stateProperties)", "modifiers": "@Override public", "return": "ValueState<T>", "signature": "ValueState<T> getState(ValueStateDescriptor<T> stateProperties)", "full_signature": "@Override public ValueState<T> getState(ValueStateDescriptor<T> stateProperties)", "class_method_signature": "StreamingRuntimeContext.getState(ValueStateDescriptor<T> stateProperties)", "testcase": false, "constructor": false}, {"identifier": "getListState", "parameters": "(ListStateDescriptor<T> stateProperties)", "modifiers": "@Override public", "return": "ListState<T>", "signature": "ListState<T> getListState(ListStateDescriptor<T> stateProperties)", "full_signature": "@Override public ListState<T> getListState(ListStateDescriptor<T> stateProperties)", "class_method_signature": "StreamingRuntimeContext.getListState(ListStateDescriptor<T> stateProperties)", "testcase": false, "constructor": false}, {"identifier": "getReducingState", "parameters": "(ReducingStateDescriptor<T> stateProperties)", "modifiers": "@Override public", "return": "ReducingState<T>", "signature": "ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)", "full_signature": "@Override public ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties)", "class_method_signature": "StreamingRuntimeContext.getReducingState(ReducingStateDescriptor<T> stateProperties)", "testcase": false, "constructor": false}, {"identifier": "getKeyValueState", "parameters": "(String name, Class<S> stateType, S defaultState)", "modifiers": "@Override @Deprecated public", "return": "OperatorState<S>", "signature": "OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)", "full_signature": "@Override @Deprecated public OperatorState<S> getKeyValueState(String name, Class<S> stateType, S defaultState)", "class_method_signature": "StreamingRuntimeContext.getKeyValueState(String name, Class<S> stateType, S defaultState)", "testcase": false, "constructor": false}, {"identifier": "getKeyValueState", "parameters": "(String name, TypeInformation<S> stateType, S defaultState)", "modifiers": "@Override @Deprecated public", "return": "OperatorState<S>", "signature": "OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)", "full_signature": "@Override @Deprecated public OperatorState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)", "class_method_signature": "StreamingRuntimeContext.getKeyValueState(String name, TypeInformation<S> stateType, S defaultState)", "testcase": false, "constructor": false}, {"identifier": "isCheckpointingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCheckpointingEnabled()", "full_signature": "public boolean isCheckpointingEnabled()", "class_method_signature": "StreamingRuntimeContext.isCheckpointingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getCheckpointMode", "parameters": "()", "modifiers": "public", "return": "CheckpointingMode", "signature": "CheckpointingMode getCheckpointMode()", "full_signature": "public CheckpointingMode getCheckpointMode()", "class_method_signature": "StreamingRuntimeContext.getCheckpointMode()", "testcase": false, "constructor": false}, {"identifier": "getBufferTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getBufferTimeout()", "full_signature": "public long getBufferTimeout()", "class_method_signature": "StreamingRuntimeContext.getBufferTimeout()", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContext.java"}, "focal_method": {"identifier": "getListState", "parameters": "(ListStateDescriptor<T> stateProperties)", "modifiers": "@Override public", "return": "ListState<T>", "body": "@Override\n\tpublic <T> ListState<T> getListState(ListStateDescriptor<T> stateProperties) {\n\t\trequireNonNull(stateProperties, \"The state properties must not be null\");\n\t\ttry {\n\t\t\tstateProperties.initializeSerializerUnlessSet(getExecutionConfig());\n\t\t\treturn operator.getPartitionedState(stateProperties);\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Error while getting state\", e);\n\t\t}\n\t}", "signature": "ListState<T> getListState(ListStateDescriptor<T> stateProperties)", "full_signature": "@Override public ListState<T> getListState(ListStateDescriptor<T> stateProperties)", "class_method_signature": "StreamingRuntimeContext.getListState(ListStateDescriptor<T> stateProperties)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "initializeSerializerUnlessSet", "getExecutionConfig", "getPartitionedState"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}