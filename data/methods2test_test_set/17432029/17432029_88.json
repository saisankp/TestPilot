{"test_class": {"identifier": "MultipartHttpStackWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final MultipartHttpStack mockMultipartHttpStack = mock(MultipartHttpStack.class);", "modifier": "static final", "type": "MultipartHttpStack", "declarator": "mockMultipartHttpStack = mock(MultipartHttpStack.class)", "var_name": "mockMultipartHttpStack"}, {"original_string": "static final HttpStack mockHttpStack = mock(HttpStack.class);", "modifier": "static final", "type": "HttpStack", "declarator": "mockHttpStack = mock(HttpStack.class)", "var_name": "mockHttpStack"}], "file": "volleyer/src/test/java/com/navercorp/volleyextensions/volleyer/multipart/stack/MultipartHttpStackWrapperTest.java"}, "test_case": {"identifier": "shouldCallHttpStackWhenRequestIsNotContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldCallHttpStackWhenRequestIsNotContainer() throws AuthFailureError, IOException {\n\t\t// Given\n\t\tRequest<?> request = mock(Request.class);\n\t\tMultipartHttpStackWrapper wrapper = new MultipartHttpStackWrapper(mockHttpStack, mockMultipartHttpStack);\n\t\t// When\n\t\twrapper.performRequest(request, null);\n\t\t// Then\n\t\tverify(mockHttpStack).performRequest(request, null);\n\t\tverify(mockMultipartHttpStack, never()).performRequest(request, null);\n\t}", "signature": "void shouldCallHttpStackWhenRequestIsNotContainer()", "full_signature": "@Test public void shouldCallHttpStackWhenRequestIsNotContainer()", "class_method_signature": "MultipartHttpStackWrapperTest.shouldCallHttpStackWhenRequestIsNotContainer()", "testcase": true, "constructor": false, "invocations": ["mock", "performRequest", "performRequest", "verify", "performRequest", "verify", "never"]}, "focal_class": {"identifier": "MultipartHttpStackWrapper", "superclass": "", "interfaces": "implements HttpStack", "fields": [{"original_string": "private final HttpStack stack;", "modifier": "private final", "type": "HttpStack", "declarator": "stack", "var_name": "stack"}, {"original_string": "private MultipartHttpStack multipartStack;", "modifier": "private", "type": "MultipartHttpStack", "declarator": "multipartStack", "var_name": "multipartStack"}], "methods": [{"identifier": "MultipartHttpStackWrapper", "parameters": "(HttpStack stack)", "modifiers": "public", "return": "", "signature": " MultipartHttpStackWrapper(HttpStack stack)", "full_signature": "public  MultipartHttpStackWrapper(HttpStack stack)", "class_method_signature": "MultipartHttpStackWrapper.MultipartHttpStackWrapper(HttpStack stack)", "testcase": false, "constructor": true}, {"identifier": "MultipartHttpStackWrapper", "parameters": "(HttpStack stack, MultipartHttpStack multipartStack)", "modifiers": "public", "return": "", "signature": " MultipartHttpStackWrapper(HttpStack stack, MultipartHttpStack multipartStack)", "full_signature": "public  MultipartHttpStackWrapper(HttpStack stack, MultipartHttpStack multipartStack)", "class_method_signature": "MultipartHttpStackWrapper.MultipartHttpStackWrapper(HttpStack stack, MultipartHttpStack multipartStack)", "testcase": false, "constructor": true}, {"identifier": "performRequest", "parameters": "(Request<?> request, Map<String, String> additionalHeaders)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)", "full_signature": "@Override public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)", "class_method_signature": "MultipartHttpStackWrapper.performRequest(Request<?> request, Map<String, String> additionalHeaders)", "testcase": false, "constructor": false}, {"identifier": "hasMultipart", "parameters": "(Request<?> request)", "modifiers": "private", "return": "boolean", "signature": "boolean hasMultipart(Request<?> request)", "full_signature": "private boolean hasMultipart(Request<?> request)", "class_method_signature": "MultipartHttpStackWrapper.hasMultipart(Request<?> request)", "testcase": false, "constructor": false}], "file": "volleyer/src/main/java/com/navercorp/volleyextensions/volleyer/multipart/stack/MultipartHttpStackWrapper.java"}, "focal_method": {"identifier": "performRequest", "parameters": "(Request<?> request, Map<String, String> additionalHeaders)", "modifiers": "@Override public", "return": "HttpResponse", "body": "@Override\n\tpublic HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders) throws IOException, AuthFailureError {\n\t\tif (hasMultipart(request)) {\n\t\t\treturn multipartStack.performRequest(request, additionalHeaders);\n\t\t}\n\n\t\treturn stack.performRequest(request, additionalHeaders);\n\t}", "signature": "HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)", "full_signature": "@Override public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)", "class_method_signature": "MultipartHttpStackWrapper.performRequest(Request<?> request, Map<String, String> additionalHeaders)", "testcase": false, "constructor": false, "invocations": ["hasMultipart", "performRequest", "performRequest"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}