{"test_class": {"identifier": "DynamicSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "rule/dynamic/src/test/java/io/opentracing/contrib/specialagent/rule/dynamic/DynamicSpecTest.java"}, "test_case": {"identifier": "testErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testErrors() {\n    try {\n      DynamicSpec.parseRules(null);\n      fail(\"Expected NullPointerException\");\n    }\n    catch (final NullPointerException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"#toString:java.lang.String\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#:java.lang.String\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#toString()::\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#():java.lang.String\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#toString():java.lang.String:\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#wait():<void>:~java.lang.Exception\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#<init>():<void>\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#<clinit>():<void>\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n\n    try {\n      DynamicSpec.parseRules(\"java.lang.Object#<clinit>()\");\n      fail(\"Expected IllegalArgumentException\");\n    }\n    catch (final IllegalArgumentException e) {\n    }\n  }", "signature": "void testErrors()", "full_signature": "@Test public void testErrors()", "class_method_signature": "DynamicSpecTest.testErrors()", "testcase": true, "constructor": false, "invocations": ["parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail", "parseRules", "fail"]}, "focal_class": {"identifier": "DynamicSpec", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String[] empty = new String[0];", "modifier": "private static", "type": "String[]", "declarator": "empty = new String[0]", "var_name": "empty"}, {"original_string": "public final boolean polymorphic;", "modifier": "public final", "type": "boolean", "declarator": "polymorphic", "var_name": "polymorphic"}, {"original_string": "public final String className;", "modifier": "public final", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "public final String methodName;", "modifier": "public final", "type": "String", "declarator": "methodName", "var_name": "methodName"}, {"original_string": "public final String[] args;", "modifier": "public final", "type": "String[]", "declarator": "args", "var_name": "args"}, {"original_string": "public final String returning;", "modifier": "public final", "type": "String", "declarator": "returning", "var_name": "returning"}], "methods": [{"identifier": "error", "parameters": "(final String rule)", "modifiers": "private static", "return": "IllegalArgumentException", "signature": "IllegalArgumentException error(final String rule)", "full_signature": "private static IllegalArgumentException error(final String rule)", "class_method_signature": "DynamicSpec.error(final String rule)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(final String[] array)", "modifiers": "private static", "return": "void", "signature": "void trim(final String[] array)", "full_signature": "private static void trim(final String[] array)", "class_method_signature": "DynamicSpec.trim(final String[] array)", "testcase": false, "constructor": false}, {"identifier": "parseRules", "parameters": "(final String rule)", "modifiers": "public static", "return": "DynamicSpec[]", "signature": "DynamicSpec[] parseRules(final String rule)", "full_signature": "public static DynamicSpec[] parseRules(final String rule)", "class_method_signature": "DynamicSpec.parseRules(final String rule)", "testcase": false, "constructor": false}, {"identifier": "DynamicSpec", "parameters": "(final boolean polymorphic, final String className, final String methodName, final String[] args, final String returning)", "modifiers": "private", "return": "", "signature": " DynamicSpec(final boolean polymorphic, final String className, final String methodName, final String[] args, final String returning)", "full_signature": "private  DynamicSpec(final boolean polymorphic, final String className, final String methodName, final String[] args, final String returning)", "class_method_signature": "DynamicSpec.DynamicSpec(final boolean polymorphic, final String className, final String methodName, final String[] args, final String returning)", "testcase": false, "constructor": true}], "file": "rule/dynamic/src/main/java/io/opentracing/contrib/specialagent/rule/dynamic/DynamicSpec.java"}, "focal_method": {"identifier": "parseRules", "parameters": "(final String rule)", "modifiers": "public static", "return": "DynamicSpec[]", "body": "public static DynamicSpec[] parseRules(final String rule) {\n    final String[] rules = rule.trim().split(\";\");\n    final DynamicSpec[] specs = new DynamicSpec[rules.length];\n    for (int i = 0; i < rules.length; ++i) {\n      final String[] classNameMethodSpec = rules[i].split(\"#\");\n      if (classNameMethodSpec.length != 2)\n        throw error(rules[i]);\n\n      final boolean polymorphic = classNameMethodSpec[0].startsWith(\"^\");\n      if (polymorphic)\n        classNameMethodSpec[0] = classNameMethodSpec[0].substring(1).trim();\n\n      trim(classNameMethodSpec);\n      final String className = classNameMethodSpec[0];\n      if (className.isEmpty())\n        throw error(rules[i]);\n\n      final String returning;\n      final int col = classNameMethodSpec[1].indexOf(':');\n      if (col == -1) {\n        returning = null;\n      }\n      else {\n        if (classNameMethodSpec[1].endsWith(\":\"))\n          throw error(rules[i]);\n\n        returning = classNameMethodSpec[1].substring(col + 1).trim();\n        if (returning.isEmpty() || returning.contains(\":\"))\n          throw error(rules[i]);\n\n        classNameMethodSpec[1] = classNameMethodSpec[1].substring(0, col).trim();\n      }\n\n      final String methodName;\n      final String[] args;\n      final int start = classNameMethodSpec[1].indexOf('(');\n      if (start == -1) {\n        methodName = classNameMethodSpec[1];\n        args = null;\n      }\n      else {\n        final int end = classNameMethodSpec[1].indexOf(')', start + 1);\n        if (end == -1)\n          throw error(rules[i]);\n\n        args = start + 1 == end ? empty : classNameMethodSpec[1].substring(start + 1, end).split(\",\");\n        trim(args);\n\n        methodName = classNameMethodSpec[1].substring(0, start).trim();\n      }\n\n      if (methodName.isEmpty() || (\"<init>\".equals(methodName) && returning != null) || (\"<clinit>\".equals(methodName) && (args != null || returning != null)))\n        throw error(rules[i]);\n\n      specs[i] = new DynamicSpec(polymorphic, className, methodName, args, returning);\n    }\n\n    return specs;\n  }", "signature": "DynamicSpec[] parseRules(final String rule)", "full_signature": "public static DynamicSpec[] parseRules(final String rule)", "class_method_signature": "DynamicSpec.parseRules(final String rule)", "testcase": false, "constructor": false, "invocations": ["split", "trim", "split", "error", "startsWith", "trim", "substring", "trim", "isEmpty", "error", "indexOf", "endsWith", "error", "trim", "substring", "isEmpty", "contains", "error", "trim", "substring", "indexOf", "indexOf", "error", "split", "substring", "trim", "trim", "substring", "isEmpty", "equals", "equals", "error"]}, "repository": {"repo_id": 155277206, "url": "https://github.com/opentracing-contrib/java-specialagent", "stars": 88, "created": "10/29/2018 8:31:40 PM +00:00", "updates": "2020-01-27T16:00:44+00:00", "fork": "False", "license": "licensed"}}