{"test_class": {"identifier": "CleanupDestroyedBusinessObjectDataServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BusinessObjectDataDao mockBusinessObjectDataDao;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDao", "declarator": "mockBusinessObjectDataDao", "var_name": "mockBusinessObjectDataDao"}, {"original_string": "@Mock\n    private BusinessObjectDataDaoHelper mockBusinessObjectDataDaoHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "mockBusinessObjectDataDaoHelper", "var_name": "mockBusinessObjectDataDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper mockBusinessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "mockBusinessObjectDataHelper", "var_name": "mockBusinessObjectDataHelper"}, {"original_string": "@InjectMocks\n    private CleanupDestroyedBusinessObjectDataServiceImpl cleanupDestroyedBusinessObjectDataService;", "modifier": "@InjectMocks\n    private", "type": "CleanupDestroyedBusinessObjectDataServiceImpl", "declarator": "cleanupDestroyedBusinessObjectDataService", "var_name": "cleanupDestroyedBusinessObjectDataService"}, {"original_string": "@Mock\n    private NotificationEventService mockNotificationEventService;", "modifier": "@Mock\n    private", "type": "NotificationEventService", "declarator": "mockNotificationEventService", "var_name": "mockNotificationEventService"}, {"original_string": "@Mock\n    private StorageUnitDao mockStorageUnitDao;", "modifier": "@Mock\n    private", "type": "StorageUnitDao", "declarator": "mockStorageUnitDao", "var_name": "mockStorageUnitDao"}, {"original_string": "@Mock\n    private StorageUnitHelper mockStorageUnitHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitHelper", "declarator": "mockStorageUnitHelper", "var_name": "mockStorageUnitHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/CleanupDestroyedBusinessObjectDataServiceImplTest.java"}, "test_case": {"identifier": "testCleanupS3StorageUnitWithIllegalArgumentException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCleanupS3StorageUnitWithIllegalArgumentException()\n    {\n        // Create a business object data key.\n        BusinessObjectDataKey businessObjectDataKey =\n            new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES,\n                DATA_VERSION);\n\n        // Create a storage unit key.\n        BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey =\n            new BusinessObjectDataStorageUnitKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE,\n                SUBPARTITION_VALUES, DATA_VERSION, STORAGE_NAME);\n\n        // Create mocks\n        BusinessObjectDataEntity businessObjectDataEntity = mock(BusinessObjectDataEntity.class);\n\n        // Create storage units\n        StoragePlatformEntity storagePlatformEntity = new StoragePlatformEntity();\n        storagePlatformEntity.setName(StoragePlatformEntity.S3);\n        StorageEntity storageEntity = new StorageEntity();\n        storageEntity.setStoragePlatform(storagePlatformEntity);\n        StorageUnitEntity storageUnitEntity1 = new StorageUnitEntity();\n        storageUnitEntity1.setStorage(storageEntity);\n        StorageUnitEntity storageUnitEntity2 = new StorageUnitEntity();\n        storageUnitEntity2.setStorage(storageEntity);\n\n        Collection<StorageUnitEntity> storageUnitEntities = Lists.newArrayList();\n        storageUnitEntities.add(storageUnitEntity1);\n        storageUnitEntities.add(storageUnitEntity2);\n\n        // Mock the external calls.\n        when(mockBusinessObjectDataHelper.createBusinessObjectDataKeyFromStorageUnitKey(businessObjectDataStorageUnitKey)).thenReturn(businessObjectDataKey);\n        when(mockBusinessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey)).thenReturn(businessObjectDataEntity);\n        when(businessObjectDataEntity.getStorageUnits()).thenReturn(storageUnitEntities);\n        when(mockBusinessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey))\n            .thenReturn(businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey));\n\n        // Call the method under test.\n        try\n        {\n            cleanupDestroyedBusinessObjectDataService.cleanupS3StorageUnit(businessObjectDataStorageUnitKey);\n        }\n        catch (IllegalArgumentException illegalArgumentException)\n        {\n            assertThat(illegalArgumentException.getMessage(), is(equalTo(\"Business object data has multiple (2) S3 storage units. Business object data: {\" +\n                businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey) + \"}\")));\n        }\n\n        // Verify the external calls.\n        verify(mockBusinessObjectDataHelper).createBusinessObjectDataKeyFromStorageUnitKey(businessObjectDataStorageUnitKey);\n        verify(mockBusinessObjectDataDaoHelper).getBusinessObjectDataEntity(businessObjectDataKey);\n        verify(businessObjectDataEntity).getStorageUnits();\n        verify(mockBusinessObjectDataHelper).businessObjectDataKeyToString(businessObjectDataKey);\n\n        verifyNoMoreInteractions(businessObjectDataEntity);\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testCleanupS3StorageUnitWithIllegalArgumentException()", "full_signature": "@Test public void testCleanupS3StorageUnitWithIllegalArgumentException()", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImplTest.testCleanupS3StorageUnitWithIllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["mock", "setName", "setStoragePlatform", "setStorage", "setStorage", "newArrayList", "add", "add", "thenReturn", "when", "createBusinessObjectDataKeyFromStorageUnitKey", "thenReturn", "when", "getBusinessObjectDataEntity", "thenReturn", "when", "getStorageUnits", "thenReturn", "when", "businessObjectDataKeyToString", "businessObjectDataKeyToString", "cleanupS3StorageUnit", "assertThat", "getMessage", "is", "equalTo", "businessObjectDataKeyToString", "createBusinessObjectDataKeyFromStorageUnitKey", "verify", "getBusinessObjectDataEntity", "verify", "getStorageUnits", "verify", "businessObjectDataKeyToString", "verify", "verifyNoMoreInteractions", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "CleanupDestroyedBusinessObjectDataServiceImpl", "superclass": "", "interfaces": "implements CleanupDestroyedBusinessObjectDataService", "fields": [{"original_string": "@Autowired\n    private BusinessObjectDataDao businessObjectDataDao;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDao", "declarator": "businessObjectDataDao", "var_name": "businessObjectDataDao"}, {"original_string": "@Autowired\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    @Lazy\n    private NotificationEventService notificationEventService;", "modifier": "@Autowired\n    @Lazy\n    private", "type": "NotificationEventService", "declarator": "notificationEventService", "var_name": "notificationEventService"}, {"original_string": "@Autowired\n    private StorageUnitDao storageUnitDao;", "modifier": "@Autowired\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Autowired\n    private StorageUnitHelper storageUnitHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitHelper", "declarator": "storageUnitHelper", "var_name": "storageUnitHelper"}], "methods": [{"identifier": "cleanupS3StorageUnit", "parameters": "(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImpl.cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "testcase": false, "constructor": false}, {"identifier": "getS3StorageUnitsToCleanup", "parameters": "(int maxResult)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "List<BusinessObjectDataStorageUnitKey>", "signature": "List<BusinessObjectDataStorageUnitKey> getS3StorageUnitsToCleanup(int maxResult)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public List<BusinessObjectDataStorageUnitKey> getS3StorageUnitsToCleanup(int maxResult)", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImpl.getS3StorageUnitsToCleanup(int maxResult)", "testcase": false, "constructor": false}, {"identifier": "cleanupS3StorageUnitImpl", "parameters": "(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "modifiers": "", "return": "void", "signature": "void cleanupS3StorageUnitImpl(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "full_signature": " void cleanupS3StorageUnitImpl(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImpl.cleanupS3StorageUnitImpl(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "testcase": false, "constructor": false}, {"identifier": "getS3StorageUnitsToCleanupImpl", "parameters": "(int maxResult)", "modifiers": "", "return": "List<BusinessObjectDataStorageUnitKey>", "signature": "List<BusinessObjectDataStorageUnitKey> getS3StorageUnitsToCleanupImpl(int maxResult)", "full_signature": " List<BusinessObjectDataStorageUnitKey> getS3StorageUnitsToCleanupImpl(int maxResult)", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImpl.getS3StorageUnitsToCleanupImpl(int maxResult)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/CleanupDestroyedBusinessObjectDataServiceImpl.java"}, "focal_method": {"identifier": "cleanupS3StorageUnit", "parameters": "(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "body": "@PublishNotificationMessages\n    @Override\n    @Transactional(propagation = Propagation.REQUIRES_NEW)\n    public void cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)\n    {\n        cleanupS3StorageUnitImpl(businessObjectDataStorageUnitKey);\n    }", "signature": "void cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "class_method_signature": "CleanupDestroyedBusinessObjectDataServiceImpl.cleanupS3StorageUnit(BusinessObjectDataStorageUnitKey businessObjectDataStorageUnitKey)", "testcase": false, "constructor": false, "invocations": ["cleanupS3StorageUnitImpl"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}