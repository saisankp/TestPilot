{"test_class": {"identifier": "AlarmValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AlarmValidator validator = new AlarmValidator();", "modifier": "private", "type": "AlarmValidator", "declarator": "validator = new AlarmValidator()", "var_name": "validator"}], "file": "services/src/test/java/com/vsct/supervision/notification/model/AlarmValidatorTest.java"}, "test_case": {"identifier": "validateAlarmWithNoWarnThresholdFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateAlarmWithNoWarnThresholdFails() throws Exception {\n        Alarm alarm = TestUtils.getDefaultAlarm();\n        alarm.setWarn(null);\n        try {\n            validator.validateAlarm(alarm);\n        } catch (CerebroException ce) {\n            assertEquals(ErrorCode.ALARM_INVALID, ce.getErrorCode());\n        }\n    }", "signature": "void validateAlarmWithNoWarnThresholdFails()", "full_signature": "@Test public void validateAlarmWithNoWarnThresholdFails()", "class_method_signature": "AlarmValidatorTest.validateAlarmWithNoWarnThresholdFails()", "testcase": true, "constructor": false, "invocations": ["getDefaultAlarm", "setWarn", "validateAlarm", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "AlarmValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validateAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "void", "signature": "void validateAlarm(final Alarm alarm)", "full_signature": "public void validateAlarm(final Alarm alarm)", "class_method_signature": "AlarmValidator.validateAlarm(final Alarm alarm)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/model/AlarmValidator.java"}, "focal_method": {"identifier": "validateAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "void", "body": "public void validateAlarm(final Alarm alarm) throws CerebroException {\n        // Validate required fields\n        if (StringUtils.isEmpty(alarm.getName())) {\n            throw new CerebroException(ErrorCode.ALARM_INVALID, \"Alarm name is required.\");\n        }\n\n        if (StringUtils.isEmpty(alarm.getTarget()) || StringUtils.startsWithIgnoreCase(alarm.getTarget(), \"*\")) {\n            throw new CerebroException(ErrorCode.ALARM_INVALID, \"Alarm target is required.\");\n        }\n\n        if (StringUtils.isEmpty(alarm.getWarn())) {\n            throw new CerebroException(ErrorCode.ALARM_INVALID, \"Alarm warning threshold is required.\");\n        }\n\n        if (StringUtils.isEmpty(alarm.getError())) {\n            throw new CerebroException(ErrorCode.ALARM_INVALID, \"Alarm error threshold is required.\");\n        }\n    }", "signature": "void validateAlarm(final Alarm alarm)", "full_signature": "public void validateAlarm(final Alarm alarm)", "class_method_signature": "AlarmValidator.validateAlarm(final Alarm alarm)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getName", "isEmpty", "getTarget", "startsWithIgnoreCase", "getTarget", "isEmpty", "getWarn", "isEmpty", "getError"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}