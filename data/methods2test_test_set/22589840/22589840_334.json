{"test_class": {"identifier": "LogFileParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LogFileParser logFileParser;", "modifier": "private", "type": "LogFileParser", "declarator": "logFileParser", "var_name": "logFileParser"}, {"original_string": "private String logFileName = \"olat.sample.log\";", "modifier": "private", "type": "String", "declarator": "logFileName = \"olat.sample.log\"", "var_name": "logFileName"}, {"original_string": "private String logfilepath = \"\";", "modifier": "private", "type": "String", "declarator": "logfilepath = \"\"", "var_name": "logfilepath"}, {"original_string": "private final int linecount = 30;", "modifier": "private final", "type": "int", "declarator": "linecount = 30", "var_name": "linecount"}], "file": "olat7.8/src/test/java/org/olat/lms/admin/sysinfo/LogFileParserTest.java"}, "test_case": {"identifier": "getError_NotExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getError_NotExists() {\n        Collection<String> errormsg = logFileParser.getError(\"N1-E999\", logfilepath, true);\n        assertTrue(\"Expected to find at least an error in the olat.log\", errormsg.size() == 0);\n    }", "signature": "void getError_NotExists()", "full_signature": "@Test public void getError_NotExists()", "class_method_signature": "LogFileParserTest.getError_NotExists()", "testcase": true, "constructor": false, "invocations": ["getError", "assertTrue", "size"]}, "focal_class": {"identifier": "LogFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerHelper.getLogger();", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private String logfilepathBase;", "modifier": "private", "type": "String", "declarator": "logfilepathBase", "var_name": "logfilepathBase"}, {"original_string": "private int linecount = 40;", "modifier": "private", "type": "int", "declarator": "linecount = 40", "var_name": "linecount"}, {"original_string": "private String filename = \"olat.log\";", "modifier": "private", "type": "String", "declarator": "filename = \"olat.log\"", "var_name": "filename"}], "methods": [{"identifier": "LogFileParser", "parameters": "(String configuredLogDir, String configuredUserDataDir, int linecount)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " LogFileParser(String configuredLogDir, String configuredUserDataDir, int linecount)", "full_signature": "@SuppressWarnings(\"unused\") private  LogFileParser(String configuredLogDir, String configuredUserDataDir, int linecount)", "class_method_signature": "LogFileParser.LogFileParser(String configuredLogDir, String configuredUserDataDir, int linecount)", "testcase": false, "constructor": true}, {"identifier": "LogFileParser", "parameters": "(String logfilepathBase, int linecount)", "modifiers": "protected", "return": "", "signature": " LogFileParser(String logfilepathBase, int linecount)", "full_signature": "protected  LogFileParser(String logfilepathBase, int linecount)", "class_method_signature": "LogFileParser.LogFileParser(String logfilepathBase, int linecount)", "testcase": false, "constructor": true}, {"identifier": "getLogfilePath", "parameters": "(Date date)", "modifiers": "public", "return": "VFSLeaf", "signature": "VFSLeaf getLogfilePath(Date date)", "full_signature": "public VFSLeaf getLogfilePath(Date date)", "class_method_signature": "LogFileParser.getLogfilePath(Date date)", "testcase": false, "constructor": false}, {"identifier": "getErrorToday", "parameters": "(String errorNumber)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getErrorToday(String errorNumber)", "full_signature": "public Collection<String> getErrorToday(String errorNumber)", "class_method_signature": "LogFileParser.getErrorToday(String errorNumber)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "full_signature": "public Collection<String> getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "class_method_signature": "LogFileParser.getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "(String errorNumber, String logfilepath, boolean asHTML)", "modifiers": "protected", "return": "Collection<String>", "signature": "Collection<String> getError(String errorNumber, String logfilepath, boolean asHTML)", "full_signature": "protected Collection<String> getError(String errorNumber, String logfilepath, boolean asHTML)", "class_method_signature": "LogFileParser.getError(String errorNumber, String logfilepath, boolean asHTML)", "testcase": false, "constructor": false}, {"identifier": "formatAsHTML", "parameters": "(String inputString)", "modifiers": "private", "return": "String", "signature": "String formatAsHTML(String inputString)", "full_signature": "private String formatAsHTML(String inputString)", "class_method_signature": "LogFileParser.formatAsHTML(String inputString)", "testcase": false, "constructor": false}, {"identifier": "getMatchErrorRegex", "parameters": "(String errorNumber)", "modifiers": "private", "return": "String", "signature": "String getMatchErrorRegex(String errorNumber)", "full_signature": "private String getMatchErrorRegex(String errorNumber)", "class_method_signature": "LogFileParser.getMatchErrorRegex(String errorNumber)", "testcase": false, "constructor": false}, {"identifier": "getLogFilePath", "parameters": "(String dd, String mm, String yyyy)", "modifiers": "private", "return": "String", "signature": "String getLogFilePath(String dd, String mm, String yyyy)", "full_signature": "private String getLogFilePath(String dd, String mm, String yyyy)", "class_method_signature": "LogFileParser.getLogFilePath(String dd, String mm, String yyyy)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/admin/sysinfo/LogFileParser.java"}, "focal_method": {"identifier": "getError", "parameters": "(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "modifiers": "public", "return": "Collection<String>", "body": "public Collection<String> getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML) {\n\n        if (logfilepathBase == null) {\n            // this is null when olat is setup with an empty olat.local.properties file and no log.dir path is set.\n            return Collections.emptyList();\n        }\n        String logfilepath = getLogFilePath(dd, mm, yyyy);\n\n        return getError(errorNumber, logfilepath, asHTML);\n    }", "signature": "Collection<String> getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "full_signature": "public Collection<String> getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "class_method_signature": "LogFileParser.getError(String errorNumber, String dd, String mm, String yyyy, boolean asHTML)", "testcase": false, "constructor": false, "invocations": ["emptyList", "getLogFilePath", "getError"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}