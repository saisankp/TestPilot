{"test_class": {"identifier": "I18nTest", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-common/src/test/java/org/modeshape/common/i18n/I18nTest.java"}, "test_case": {"identifier": "shouldNotInitializeNonI18nFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotInitializeNonI18nFields() {\n        I18n.initialize(TestI18n.class);\n        assertThat(TestI18n.nonI18n, nullValue());\n    }", "signature": "void shouldNotInitializeNonI18nFields()", "full_signature": "@Test public void shouldNotInitializeNonI18nFields()", "class_method_signature": "I18nTest.shouldNotInitializeNonI18nFields()", "testcase": true, "constructor": false, "invocations": ["initialize", "assertThat", "nullValue"]}, "focal_class": {"identifier": "I18n", "superclass": "", "interfaces": "implements I18nResource", "fields": [{"original_string": "static final ConcurrentMap<Locale, Map<Class<?>, Set<String>>> LOCALE_TO_CLASS_TO_PROBLEMS_MAP = new ConcurrentHashMap<Locale, Map<Class<?>, Set<String>>>();", "modifier": "static final", "type": "ConcurrentMap<Locale, Map<Class<?>, Set<String>>>", "declarator": "LOCALE_TO_CLASS_TO_PROBLEMS_MAP = new ConcurrentHashMap<Locale, Map<Class<?>, Set<String>>>()", "var_name": "LOCALE_TO_CLASS_TO_PROBLEMS_MAP"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(I18n.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(I18n.class)", "var_name": "LOGGER"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final Class<?> i18nClass;", "modifier": "private final", "type": "Class<?>", "declarator": "i18nClass", "var_name": "i18nClass"}, {"original_string": "final ConcurrentHashMap<Locale, String> localeToTextMap = new ConcurrentHashMap<Locale, String>();", "modifier": "final", "type": "ConcurrentHashMap<Locale, String>", "declarator": "localeToTextMap = new ConcurrentHashMap<Locale, String>()", "var_name": "localeToTextMap"}, {"original_string": "final ConcurrentHashMap<Locale, String> localeToProblemMap = new ConcurrentHashMap<Locale, String>();", "modifier": "final", "type": "ConcurrentHashMap<Locale, String>", "declarator": "localeToProblemMap = new ConcurrentHashMap<Locale, String>()", "var_name": "localeToProblemMap"}], "methods": [{"identifier": "getLocalizationProblemLocales", "parameters": "( Class<?> i18nClass )", "modifiers": "public static", "return": "Set<Locale>", "signature": "Set<Locale> getLocalizationProblemLocales( Class<?> i18nClass )", "full_signature": "public static Set<Locale> getLocalizationProblemLocales( Class<?> i18nClass )", "class_method_signature": "I18n.getLocalizationProblemLocales( Class<?> i18nClass )", "testcase": false, "constructor": false}, {"identifier": "getLocalizationProblems", "parameters": "( Class<?> i18nClass )", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getLocalizationProblems( Class<?> i18nClass )", "full_signature": "public static Set<String> getLocalizationProblems( Class<?> i18nClass )", "class_method_signature": "I18n.getLocalizationProblems( Class<?> i18nClass )", "testcase": false, "constructor": false}, {"identifier": "getLocalizationProblems", "parameters": "( Class<?> i18nClass,\n                                                       Locale locale )", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getLocalizationProblems( Class<?> i18nClass,\n                                                       Locale locale )", "full_signature": "public static Set<String> getLocalizationProblems( Class<?> i18nClass,\n                                                       Locale locale )", "class_method_signature": "I18n.getLocalizationProblems( Class<?> i18nClass,\n                                                       Locale locale )", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "( Class<?> i18nClass )", "modifiers": "public static", "return": "void", "signature": "void initialize( Class<?> i18nClass )", "full_signature": "public static void initialize( Class<?> i18nClass )", "class_method_signature": "I18n.initialize( Class<?> i18nClass )", "testcase": false, "constructor": false}, {"identifier": "cleanupPreviousProblems", "parameters": "( Class<?> i18nClass )", "modifiers": "private static", "return": "void", "signature": "void cleanupPreviousProblems( Class<?> i18nClass )", "full_signature": "private static void cleanupPreviousProblems( Class<?> i18nClass )", "class_method_signature": "I18n.cleanupPreviousProblems( Class<?> i18nClass )", "testcase": false, "constructor": false}, {"identifier": "initializeI18nField", "parameters": "( Field fld )", "modifiers": "private static", "return": "void", "signature": "void initializeI18nField( Field fld )", "full_signature": "private static void initializeI18nField( Field fld )", "class_method_signature": "I18n.initializeI18nField( Field fld )", "testcase": false, "constructor": false}, {"identifier": "validateI18nClass", "parameters": "( Class<?> i18nClass )", "modifiers": "private static", "return": "void", "signature": "void validateI18nClass( Class<?> i18nClass )", "full_signature": "private static void validateI18nClass( Class<?> i18nClass )", "class_method_signature": "I18n.validateI18nClass( Class<?> i18nClass )", "testcase": false, "constructor": false}, {"identifier": "localize", "parameters": "( final Class<?> i18nClass,\n                                  final Locale locale )", "modifiers": "private static", "return": "void", "signature": "void localize( final Class<?> i18nClass,\n                                  final Locale locale )", "full_signature": "private static void localize( final Class<?> i18nClass,\n                                  final Locale locale )", "class_method_signature": "I18n.localize( final Class<?> i18nClass,\n                                  final Locale locale )", "testcase": false, "constructor": false}, {"identifier": "prepareBundleLoading", "parameters": "( final Class<?> i18nClass,\n                                                    final Locale locale,\n                                                    final URL bundleUrl,\n                                                    final Set<String> problems )", "modifiers": "private static", "return": "Properties", "signature": "Properties prepareBundleLoading( final Class<?> i18nClass,\n                                                    final Locale locale,\n                                                    final URL bundleUrl,\n                                                    final Set<String> problems )", "full_signature": "private static Properties prepareBundleLoading( final Class<?> i18nClass,\n                                                    final Locale locale,\n                                                    final URL bundleUrl,\n                                                    final Set<String> problems )", "class_method_signature": "I18n.prepareBundleLoading( final Class<?> i18nClass,\n                                                    final Locale locale,\n                                                    final URL bundleUrl,\n                                                    final Set<String> problems )", "testcase": false, "constructor": false}, {"identifier": "I18n", "parameters": "( String id,\n                  Class<?> i18nClass )", "modifiers": "private", "return": "", "signature": " I18n( String id,\n                  Class<?> i18nClass )", "full_signature": "private  I18n( String id,\n                  Class<?> i18nClass )", "class_method_signature": "I18n.I18n( String id,\n                  Class<?> i18nClass )", "testcase": false, "constructor": true}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "I18n.id()", "testcase": false, "constructor": false}, {"identifier": "hasProblem", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasProblem()", "full_signature": "public boolean hasProblem()", "class_method_signature": "I18n.hasProblem()", "testcase": false, "constructor": false}, {"identifier": "hasProblem", "parameters": "( Locale locale )", "modifiers": "public", "return": "boolean", "signature": "boolean hasProblem( Locale locale )", "full_signature": "public boolean hasProblem( Locale locale )", "class_method_signature": "I18n.hasProblem( Locale locale )", "testcase": false, "constructor": false}, {"identifier": "problem", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String problem()", "full_signature": "public String problem()", "class_method_signature": "I18n.problem()", "testcase": false, "constructor": false}, {"identifier": "problem", "parameters": "( Locale locale )", "modifiers": "public", "return": "String", "signature": "String problem( Locale locale )", "full_signature": "public String problem( Locale locale )", "class_method_signature": "I18n.problem( Locale locale )", "testcase": false, "constructor": false}, {"identifier": "rawText", "parameters": "( Locale locale )", "modifiers": "private", "return": "String", "signature": "String rawText( Locale locale )", "full_signature": "private String rawText( Locale locale )", "class_method_signature": "I18n.rawText( Locale locale )", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "( Object... arguments )", "modifiers": "@Override public", "return": "String", "signature": "String text( Object... arguments )", "full_signature": "@Override public String text( Object... arguments )", "class_method_signature": "I18n.text( Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "( Locale locale,\n                        Object... arguments )", "modifiers": "@Override public", "return": "String", "signature": "String text( Locale locale,\n                        Object... arguments )", "full_signature": "@Override public String text( Locale locale,\n                        Object... arguments )", "class_method_signature": "I18n.text( Locale locale,\n                        Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "I18n.toString()", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/i18n/I18n.java"}, "focal_method": {"identifier": "initialize", "parameters": "( Class<?> i18nClass )", "modifiers": "public static", "return": "void", "body": "public static void initialize( Class<?> i18nClass ) {\n        validateI18nClass(i18nClass);\n\n        synchronized (i18nClass) {\n            // Find all public static non-final String fields in the supplied class and instantiate an I18n object for each.\n            try {\n                for (Field fld : i18nClass.getDeclaredFields()) {\n                    // Ensure field is of type I18n\n                    if (fld.getType() == I18n.class) {\n                        initializeI18nField(fld);\n                    }\n                }\n                cleanupPreviousProblems(i18nClass);\n            } catch (IllegalAccessException err) {\n                // If this happens, it will happen with the first field visited in the above loop\n                throw new IllegalArgumentException(CommonI18n.i18nClassNotPublic.text(i18nClass));\n            }\n        }\n    }", "signature": "void initialize( Class<?> i18nClass )", "full_signature": "public static void initialize( Class<?> i18nClass )", "class_method_signature": "I18n.initialize( Class<?> i18nClass )", "testcase": false, "constructor": false, "invocations": ["validateI18nClass", "getDeclaredFields", "getType", "initializeI18nField", "cleanupPreviousProblems", "text"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}