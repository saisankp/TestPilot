{"test_class": {"identifier": "Oracle10ConnectionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DbUnitConnectionFactory FACTORY = new Oracle10ConnectionFactory();", "modifier": "private static final", "type": "DbUnitConnectionFactory", "declarator": "FACTORY = new Oracle10ConnectionFactory()", "var_name": "FACTORY"}, {"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private DatabaseMetaData metaData;", "modifier": "@Mock\n    private", "type": "DatabaseMetaData", "declarator": "metaData", "var_name": "metaData"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/dbunit/ext/Oracle10ConnectionFactoryTest.java"}, "test_case": {"identifier": "testCreateConnection", "parameters": "()", "modifiers": "@Test @Ignore(\"oracle jdbc required in classpath\") public", "return": "void", "body": "@Test\n    @Ignore(\"oracle jdbc required in classpath\")\n    public void testCreateConnection() throws DatabaseUnitException, SQLException {\n        // GIVEN\n        final String schema = \"foo\";\n\n        // WHEN\n        final IDatabaseConnection dbConnection = FACTORY.createConnection(connection, schema);\n\n        // THEN\n        assertThat(dbConnection, notNullValue());\n\n        final Object typeFactory = dbConnection.getConfig().getProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY);\n        assertThat(typeFactory, notNullValue());\n        assertThat(typeFactory.getClass(), equalTo(Oracle10DataTypeFactory.class));\n\n        assertThat(dbConnection.getSchema(), equalTo(schema));\n    }", "signature": "void testCreateConnection()", "full_signature": "@Test @Ignore(\"oracle jdbc required in classpath\") public void testCreateConnection()", "class_method_signature": "Oracle10ConnectionFactoryTest.testCreateConnection()", "testcase": true, "constructor": false, "invocations": ["createConnection", "assertThat", "notNullValue", "getProperty", "getConfig", "assertThat", "notNullValue", "assertThat", "getClass", "equalTo", "assertThat", "getSchema", "equalTo"]}, "focal_class": {"identifier": "Oracle10ConnectionFactory", "superclass": "", "interfaces": "implements DbUnitConnectionFactory", "fields": [], "methods": [{"identifier": "supportsDriver", "parameters": "(final String driverClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDriver(final String driverClass)", "full_signature": "@Override public boolean supportsDriver(final String driverClass)", "class_method_signature": "Oracle10ConnectionFactory.supportsDriver(final String driverClass)", "testcase": false, "constructor": false}, {"identifier": "createConnection", "parameters": "(final Connection connection, final String schema)", "modifiers": "@Override public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection createConnection(final Connection connection, final String schema)", "full_signature": "@Override public IDatabaseConnection createConnection(final Connection connection, final String schema)", "class_method_signature": "Oracle10ConnectionFactory.createConnection(final Connection connection, final String schema)", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/dbunit/ext/Oracle10ConnectionFactory.java"}, "focal_method": {"identifier": "createConnection", "parameters": "(final Connection connection, final String schema)", "modifiers": "@Override public", "return": "IDatabaseConnection", "body": "@Override\n    public IDatabaseConnection createConnection(final Connection connection, final String schema) throws DatabaseUnitException {\n        final DatabaseConnection dbUnitConnection = new DatabaseConnection(connection, schema);\n\n        dbUnitConnection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new Oracle10DataTypeFactory());\n\n        return dbUnitConnection;\n    }", "signature": "IDatabaseConnection createConnection(final Connection connection, final String schema)", "full_signature": "@Override public IDatabaseConnection createConnection(final Connection connection, final String schema)", "class_method_signature": "Oracle10ConnectionFactory.createConnection(final Connection connection, final String schema)", "testcase": false, "constructor": false, "invocations": ["setProperty", "getConfig"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}