{"test_class": {"identifier": "ImmutableSourceAddressPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SOME_MQTT_TOPIC = \"some/mqtt/topic\";", "modifier": "private static final", "type": "String", "declarator": "SOME_MQTT_TOPIC = \"some/mqtt/topic\"", "var_name": "SOME_MQTT_TOPIC"}], "file": "model/connectivity/src/test/java/org/eclipse/ditto/model/connectivity/ImmutableSourceAddressPlaceholderTest.java"}, "test_case": {"identifier": "testResultIsEmptyForUnknownPlaceholder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResultIsEmptyForUnknownPlaceholder() {\n        assertThat(ImmutableSourceAddressPlaceholder.INSTANCE.resolve(SOME_MQTT_TOPIC, \"invalid\")).isEmpty();\n    }", "signature": "void testResultIsEmptyForUnknownPlaceholder()", "full_signature": "@Test public void testResultIsEmptyForUnknownPlaceholder()", "class_method_signature": "ImmutableSourceAddressPlaceholderTest.testResultIsEmptyForUnknownPlaceholder()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "resolve"]}, "focal_class": {"identifier": "ImmutableSourceAddressPlaceholder", "superclass": "", "interfaces": "implements SourceAddressPlaceholder", "fields": [{"original_string": "static final ImmutableSourceAddressPlaceholder INSTANCE = new ImmutableSourceAddressPlaceholder();", "modifier": "static final", "type": "ImmutableSourceAddressPlaceholder", "declarator": "INSTANCE = new ImmutableSourceAddressPlaceholder()", "var_name": "INSTANCE"}, {"original_string": "private static final String PREFIX = \"source\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"source\"", "var_name": "PREFIX"}, {"original_string": "private static final String VALUE = \"address\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"address\"", "var_name": "VALUE"}, {"original_string": "private static final List<String> VALID_VALUES = Collections.unmodifiableList(\n            Collections.singletonList(PREFIX + Expression.SEPARATOR + VALUE));", "modifier": "private static final", "type": "List<String>", "declarator": "VALID_VALUES = Collections.unmodifiableList(\n            Collections.singletonList(PREFIX + Expression.SEPARATOR + VALUE))", "var_name": "VALID_VALUES"}], "methods": [{"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutableSourceAddressPlaceholder.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSupportedNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedNames()", "full_signature": "@Override public List<String> getSupportedNames()", "class_method_signature": "ImmutableSourceAddressPlaceholder.getSupportedNames()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(final String name)", "full_signature": "@Override public boolean supports(final String name)", "class_method_signature": "ImmutableSourceAddressPlaceholder.supports(final String name)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final String input, final String name)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> resolve(final String input, final String name)", "full_signature": "@Override public Optional<String> resolve(final String input, final String name)", "class_method_signature": "ImmutableSourceAddressPlaceholder.resolve(final String input, final String name)", "testcase": false, "constructor": false}, {"identifier": "ImmutableSourceAddressPlaceholder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ImmutableSourceAddressPlaceholder()", "full_signature": "private  ImmutableSourceAddressPlaceholder()", "class_method_signature": "ImmutableSourceAddressPlaceholder.ImmutableSourceAddressPlaceholder()", "testcase": false, "constructor": true}], "file": "model/connectivity/src/main/java/org/eclipse/ditto/model/connectivity/ImmutableSourceAddressPlaceholder.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final String input, final String name)", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> resolve(final String input, final String name) {\n        return supports(name) ? Optional.of(input) : Optional.empty();\n    }", "signature": "Optional<String> resolve(final String input, final String name)", "full_signature": "@Override public Optional<String> resolve(final String input, final String name)", "class_method_signature": "ImmutableSourceAddressPlaceholder.resolve(final String input, final String name)", "testcase": false, "constructor": false, "invocations": ["supports", "of", "empty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}