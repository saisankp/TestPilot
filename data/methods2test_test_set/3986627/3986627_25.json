{"test_class": {"identifier": "EqualityCheckTest", "superclass": "extends AbstractReviewTest", "interfaces": "", "fields": [{"original_string": "private TerminologyProvider terminologyProvider;", "modifier": "private", "type": "TerminologyProvider", "declarator": "terminologyProvider", "var_name": "terminologyProvider"}], "file": "org.jabylon.review.standard/src/test/java/org/jabylon/review/standard/internal/EqualityCheckTest.java"}, "test_case": {"identifier": "testIsEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsEqual() {\n\t\tassertNull(getFixture().review(mock(PropertyFileDescriptor.class), createProperty(\"key\", \"value\"), createProperty(\"key\", \"value1\")));\n\t\tassertNotNull(getFixture().review(mock(PropertyFileDescriptor.class), createProperty(\"key\", \"value\"), createProperty(\"key\", \"value\")));\n\t}", "signature": "void testIsEqual()", "full_signature": "@Test public void testIsEqual()", "class_method_signature": "EqualityCheckTest.testIsEqual()", "testcase": true, "constructor": false, "invocations": ["assertNull", "review", "getFixture", "mock", "createProperty", "createProperty", "assertNotNull", "review", "getFixture", "mock", "createProperty", "createProperty"]}, "focal_class": {"identifier": "EqualityCheck", "superclass": "", "interfaces": "implements ReviewParticipant", "fields": [{"original_string": "@Reference(cardinality=ReferenceCardinality.OPTIONAL_UNARY,policy=ReferencePolicy.DYNAMIC)\n    private TerminologyProvider terminologyProvider;", "modifier": "@Reference(cardinality=ReferenceCardinality.OPTIONAL_UNARY,policy=ReferencePolicy.DYNAMIC)\n    private", "type": "TerminologyProvider", "declarator": "terminologyProvider", "var_name": "terminologyProvider"}], "methods": [{"identifier": "review", "parameters": "(PropertyFileDescriptor descriptor, Property master, Property slave)", "modifiers": "@Override public", "return": "Review", "signature": "Review review(PropertyFileDescriptor descriptor, Property master, Property slave)", "full_signature": "@Override public Review review(PropertyFileDescriptor descriptor, Property master, Property slave)", "class_method_signature": "EqualityCheck.review(PropertyFileDescriptor descriptor, Property master, Property slave)", "testcase": false, "constructor": false}, {"identifier": "getReviewType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getReviewType()", "full_signature": "@Override public String getReviewType()", "class_method_signature": "EqualityCheck.getReviewType()", "testcase": false, "constructor": false}, {"identifier": "bindTerminologyProvider", "parameters": "(TerminologyProvider provider)", "modifiers": "public", "return": "void", "signature": "void bindTerminologyProvider(TerminologyProvider provider)", "full_signature": "public void bindTerminologyProvider(TerminologyProvider provider)", "class_method_signature": "EqualityCheck.bindTerminologyProvider(TerminologyProvider provider)", "testcase": false, "constructor": false}, {"identifier": "unbindTerminologyProvider", "parameters": "(TerminologyProvider provider)", "modifiers": "public", "return": "void", "signature": "void unbindTerminologyProvider(TerminologyProvider provider)", "full_signature": "public void unbindTerminologyProvider(TerminologyProvider provider)", "class_method_signature": "EqualityCheck.unbindTerminologyProvider(TerminologyProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "EqualityCheck.getID()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "EqualityCheck.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "EqualityCheck.getName()", "testcase": false, "constructor": false}], "file": "org.jabylon.review.standard/src/main/java/org/jabylon/review/standard/internal/EqualityCheck.java"}, "focal_method": {"identifier": "review", "parameters": "(PropertyFileDescriptor descriptor, Property master, Property slave)", "modifiers": "@Override public", "return": "Review", "body": "@Override\n    public Review review(PropertyFileDescriptor descriptor, Property master, Property slave) {\n        if(master==null||slave==null)\n            return null;\n        String masterValue = master.getValue();\n        String slaveValue = slave.getValue();\n        if(masterValue!=null)\n        {\n            if(masterValue.equals(slaveValue))\n            {\n            \tif(terminologyProvider!=null) {\n            \t\tMap<String, Property> terminology = terminologyProvider.getTerminology(descriptor.getVariant());\n            \t\tProperty terminologyEntry = terminology.get(slave.getValue());\n            \t\tif(terminologyEntry!=null && slave.getValue().equals(terminologyEntry.getValue())){\n            \t\t\t// equality is ok if it is like that in terminology. That could be the case for e.g. a product name\n            \t\t\t// or short terms like \"OK\"\n            \t\t\treturn null;\n            \t\t}            \t\t\n            \t}\n                Review review = PropertiesFactory.eINSTANCE.createReview();\n                review.setCreated(System.currentTimeMillis());\n                review.setMessage(\"Template and translated string are identical\");\n\t\t\t\treview.setReviewType(getReviewType());\n                review.setSeverity(Severity.WARNING);\n                review.setUser(\"Jabylon\");\n                return review;\n            }\n        }\n        return null;\n    }", "signature": "Review review(PropertyFileDescriptor descriptor, Property master, Property slave)", "full_signature": "@Override public Review review(PropertyFileDescriptor descriptor, Property master, Property slave)", "class_method_signature": "EqualityCheck.review(PropertyFileDescriptor descriptor, Property master, Property slave)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "equals", "getTerminology", "getVariant", "get", "getValue", "equals", "getValue", "getValue", "createReview", "setCreated", "currentTimeMillis", "setMessage", "setReviewType", "getReviewType", "setSeverity", "setUser"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}