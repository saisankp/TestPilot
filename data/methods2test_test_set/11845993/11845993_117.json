{"test_class": {"identifier": "ConfigurationPasswordCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String passwordKey = \"configuration.password\";", "modifier": "private final", "type": "String", "declarator": "passwordKey = \"configuration.password\"", "var_name": "passwordKey"}, {"original_string": "private ConfigurationRegistry configuration;", "modifier": "private", "type": "ConfigurationRegistry", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private ConfigurationPasswordChecker configurationPasswordChecker;", "modifier": "private", "type": "ConfigurationPasswordChecker", "declarator": "configurationPasswordChecker", "var_name": "configurationPasswordChecker"}], "file": "stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/configuration/ConfigurationPasswordCheckerTest.java"}, "test_case": {"identifier": "testSetNewPasswordViaQueryParamsShouldFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetNewPasswordViaQueryParamsShouldFail() throws IOException {\n\t\tconfiguration.addConfigurationSource(SimpleSource.forTest(passwordKey, \"\"));\n\t\ttry {\n\t\t\tconfigurationPasswordChecker.assertPasswordCorrect(\"\");\n\t\t\tconfiguration.save(passwordKey, \"\", null);\n\t\t\tfail();\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"Config key 'configuration.password' does not exist.\", e.getMessage());\n\t\t}\n\t}", "signature": "void testSetNewPasswordViaQueryParamsShouldFail()", "full_signature": "@Test public void testSetNewPasswordViaQueryParamsShouldFail()", "class_method_signature": "ConfigurationPasswordCheckerTest.testSetNewPasswordViaQueryParamsShouldFail()", "testcase": true, "constructor": false, "invocations": ["addConfigurationSource", "forTest", "assertPasswordCorrect", "save", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "ConfigurationPasswordChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConfigurationRegistry configurationRegistry;", "modifier": "private final", "type": "ConfigurationRegistry", "declarator": "configurationRegistry", "var_name": "configurationRegistry"}, {"original_string": "private final String updateConfigPasswordKey;", "modifier": "private final", "type": "String", "declarator": "updateConfigPasswordKey", "var_name": "updateConfigPasswordKey"}], "methods": [{"identifier": "ConfigurationPasswordChecker", "parameters": "(ConfigurationRegistry configurationRegistry, String updateConfigPasswordKey)", "modifiers": "public", "return": "", "signature": " ConfigurationPasswordChecker(ConfigurationRegistry configurationRegistry, String updateConfigPasswordKey)", "full_signature": "public  ConfigurationPasswordChecker(ConfigurationRegistry configurationRegistry, String updateConfigPasswordKey)", "class_method_signature": "ConfigurationPasswordChecker.ConfigurationPasswordChecker(ConfigurationRegistry configurationRegistry, String updateConfigPasswordKey)", "testcase": false, "constructor": true}, {"identifier": "isPasswordCorrect", "parameters": "(String password)", "modifiers": "public", "return": "boolean", "signature": "boolean isPasswordCorrect(String password)", "full_signature": "public boolean isPasswordCorrect(String password)", "class_method_signature": "ConfigurationPasswordChecker.isPasswordCorrect(String password)", "testcase": false, "constructor": false}, {"identifier": "assertPasswordCorrect", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void assertPasswordCorrect(String password)", "full_signature": "public void assertPasswordCorrect(String password)", "class_method_signature": "ConfigurationPasswordChecker.assertPasswordCorrect(String password)", "testcase": false, "constructor": false}, {"identifier": "isPasswordSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPasswordSet()", "full_signature": "public boolean isPasswordSet()", "class_method_signature": "ConfigurationPasswordChecker.isPasswordSet()", "testcase": false, "constructor": false}], "file": "stagemonitor-web-servlet/src/main/java/org/stagemonitor/web/servlet/configuration/ConfigurationPasswordChecker.java"}, "focal_method": {"identifier": "assertPasswordCorrect", "parameters": "(String password)", "modifiers": "public", "return": "void", "body": "public void assertPasswordCorrect(String password) {\n\t\tif (!isPasswordSet()) {\n\t\t\tthrow new IllegalStateException(\"'\" + updateConfigPasswordKey + \"' is not set.\");\n\t\t}\n\n\t\tif (!isPasswordCorrect(password)) {\n\t\t\tthrow new IllegalStateException(\"Wrong password for '\" + updateConfigPasswordKey + \"'.\");\n\t\t}\n\t}", "signature": "void assertPasswordCorrect(String password)", "full_signature": "public void assertPasswordCorrect(String password)", "class_method_signature": "ConfigurationPasswordChecker.assertPasswordCorrect(String password)", "testcase": false, "constructor": false, "invocations": ["isPasswordSet", "isPasswordCorrect"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}