{"test_class": {"identifier": "GridCoverageReaderHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double EPS = 1e-9;", "modifier": "static final", "type": "double", "declarator": "EPS = 1e-9", "var_name": "EPS"}, {"original_string": "private GeoTiffReader reader;", "modifier": "private", "type": "GeoTiffReader", "declarator": "reader", "var_name": "reader"}], "file": "modules/library/render/src/test/java/org/geotools/renderer/lite/gridcoverage2d/GridCoverageReaderHelperTest.java"}, "test_case": {"identifier": "testFullResolutionNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFullResolutionNull() throws Exception {\n        // this one has null native resolutions\n        final GridCoverage2D coverage = new GridCoverageFactory().create(\"test\",\n                new float[200][100], new ReferencedEnvelope(-180, 180, -90, 90,\n                        DefaultGeographicCRS.WGS84));\n        GridCoverage2DReader reader = new AbstractGridCoverage2DReader() {\n            \n            {\n                this.crs = DefaultGeographicCRS.WGS84;\n                this.originalEnvelope = new GeneralEnvelope((BoundingBox) coverage.getEnvelope2D());\n                this.originalGridRange = coverage.getGridGeometry().getGridRange();\n            }\n\n            @Override\n            public Format getFormat() {\n                return null;\n            }\n            \n            @Override\n            public GridCoverage2D read(GeneralParameterValue[] parameters) throws IllegalArgumentException,\n                    IOException {\n                // return fake coveage\n                return coverage;\n            }\n        };\n        CoordinateReferenceSystem crs = CRS.decode(\"EPSG:3031\", true);\n        ReferencedEnvelope mapExtent = new ReferencedEnvelope(-20000000, 20000000, -20000000,\n                20000000, crs);\n\n        GridCoverageReaderHelper helper = new GridCoverageReaderHelper(reader, new Rectangle(400,\n                200), mapExtent, Interpolation.getInstance(Interpolation.INTERP_NEAREST));\n\n        // read, we should get back a coverage, not a exception\n        ProjectionHandler handler = ProjectionHandlerFinder.getHandler(mapExtent,\n                reader.getCoordinateReferenceSystem(), true);\n        List<GridCoverage2D> coverages = helper.readCoverages(null, handler);\n        assertEquals(1, coverages.size());\n        \n        \n    }", "signature": "void testFullResolutionNull()", "full_signature": "@Test public void testFullResolutionNull()", "class_method_signature": "GridCoverageReaderHelperTest.testFullResolutionNull()", "testcase": true, "constructor": false, "invocations": ["create", "getEnvelope2D", "getGridRange", "getGridGeometry", "decode", "getInstance", "getHandler", "getCoordinateReferenceSystem", "readCoverages", "assertEquals", "size"]}, "focal_class": {"identifier": "GridCoverageReaderHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final CoverageProcessor PROCESSOR = CoverageProcessor.getInstance();", "modifier": "private static final", "type": "CoverageProcessor", "declarator": "PROCESSOR = CoverageProcessor.getInstance()", "var_name": "PROCESSOR"}, {"original_string": "private static final Operation CROP = PROCESSOR.getOperation(\"CoverageCrop\");", "modifier": "private static final", "type": "Operation", "declarator": "CROP = PROCESSOR.getOperation(\"CoverageCrop\")", "var_name": "CROP"}, {"original_string": "private static final int DEFAULT_PADDING = 10;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PADDING = 10", "var_name": "DEFAULT_PADDING"}, {"original_string": "private static final Logger LOGGER = Logging.getLogger(GridCoverageReaderHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(GridCoverageReaderHelper.class)", "var_name": "LOGGER"}, {"original_string": "private GridCoverage2DReader reader;", "modifier": "private", "type": "GridCoverage2DReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private ReferencedEnvelope mapExtent;", "modifier": "private", "type": "ReferencedEnvelope", "declarator": "mapExtent", "var_name": "mapExtent"}, {"original_string": "private Rectangle mapRasterArea;", "modifier": "private", "type": "Rectangle", "declarator": "mapRasterArea", "var_name": "mapRasterArea"}, {"original_string": "private MathTransform worldToScreen;", "modifier": "private", "type": "MathTransform", "declarator": "worldToScreen", "var_name": "worldToScreen"}, {"original_string": "private GridGeometry2D requestedGridGeometry;", "modifier": "private", "type": "GridGeometry2D", "declarator": "requestedGridGeometry", "var_name": "requestedGridGeometry"}, {"original_string": "private boolean paddingRequired;", "modifier": "private", "type": "boolean", "declarator": "paddingRequired", "var_name": "paddingRequired"}, {"original_string": "private boolean sameCRS;", "modifier": "private", "type": "boolean", "declarator": "sameCRS", "var_name": "sameCRS"}], "methods": [{"identifier": "GridCoverageReaderHelper", "parameters": "(GridCoverage2DReader reader, Rectangle mapRasterArea,\n            ReferencedEnvelope mapExtent, Interpolation interpolation)", "modifiers": "public", "return": "", "signature": " GridCoverageReaderHelper(GridCoverage2DReader reader, Rectangle mapRasterArea,\n            ReferencedEnvelope mapExtent, Interpolation interpolation)", "full_signature": "public  GridCoverageReaderHelper(GridCoverage2DReader reader, Rectangle mapRasterArea,\n            ReferencedEnvelope mapExtent, Interpolation interpolation)", "class_method_signature": "GridCoverageReaderHelper.GridCoverageReaderHelper(GridCoverage2DReader reader, Rectangle mapRasterArea,\n            ReferencedEnvelope mapExtent, Interpolation interpolation)", "testcase": false, "constructor": true}, {"identifier": "isReprojectingReader", "parameters": "(GridCoverage2DReader reader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReprojectingReader(GridCoverage2DReader reader)", "full_signature": "public static boolean isReprojectingReader(GridCoverage2DReader reader)", "class_method_signature": "GridCoverageReaderHelper.isReprojectingReader(GridCoverage2DReader reader)", "testcase": false, "constructor": false}, {"identifier": "getReadEnvelope", "parameters": "()", "modifiers": "public", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getReadEnvelope()", "full_signature": "public ReferencedEnvelope getReadEnvelope()", "class_method_signature": "GridCoverageReaderHelper.getReadEnvelope()", "testcase": false, "constructor": false}, {"identifier": "applyReadGutter", "parameters": "(GridEnvelope2D gridRange)", "modifiers": "private", "return": "void", "signature": "void applyReadGutter(GridEnvelope2D gridRange)", "full_signature": "private void applyReadGutter(GridEnvelope2D gridRange)", "class_method_signature": "GridCoverageReaderHelper.applyReadGutter(GridEnvelope2D gridRange)", "testcase": false, "constructor": false}, {"identifier": "applyReadGutter", "parameters": "(GridGeometry2D gg)", "modifiers": "private", "return": "GridGeometry2D", "signature": "GridGeometry2D applyReadGutter(GridGeometry2D gg)", "full_signature": "private GridGeometry2D applyReadGutter(GridGeometry2D gg)", "class_method_signature": "GridCoverageReaderHelper.applyReadGutter(GridGeometry2D gg)", "testcase": false, "constructor": false}, {"identifier": "readCoverage", "parameters": "(final GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "signature": "GridCoverage2D readCoverage(final GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D readCoverage(final GeneralParameterValue[] params)", "class_method_signature": "GridCoverageReaderHelper.readCoverage(final GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "readCoverages", "parameters": "(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "modifiers": "public", "return": "List<GridCoverage2D>", "signature": "List<GridCoverage2D> readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "full_signature": "public List<GridCoverage2D> readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "class_method_signature": "GridCoverageReaderHelper.readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(ReferencedEnvelope envelope)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotEmpty(ReferencedEnvelope envelope)", "full_signature": "private boolean isNotEmpty(ReferencedEnvelope envelope)", "class_method_signature": "GridCoverageReaderHelper.isNotEmpty(ReferencedEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "cropCoverage", "parameters": "(GridCoverage2D coverage, ReferencedEnvelope cropEnvelope)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D cropCoverage(GridCoverage2D coverage, ReferencedEnvelope cropEnvelope)", "full_signature": "private GridCoverage2D cropCoverage(GridCoverage2D coverage, ReferencedEnvelope cropEnvelope)", "class_method_signature": "GridCoverageReaderHelper.cropCoverage(GridCoverage2D coverage, ReferencedEnvelope cropEnvelope)", "testcase": false, "constructor": false}, {"identifier": "computeReadingGeometry", "parameters": "(GridGeometry2D gg,\n            CoordinateReferenceSystem readerCRS, Polygon polygon, ProjectionHandler handler)", "modifiers": "private", "return": "GridGeometry2D", "signature": "GridGeometry2D computeReadingGeometry(GridGeometry2D gg,\n            CoordinateReferenceSystem readerCRS, Polygon polygon, ProjectionHandler handler)", "full_signature": "private GridGeometry2D computeReadingGeometry(GridGeometry2D gg,\n            CoordinateReferenceSystem readerCRS, Polygon polygon, ProjectionHandler handler)", "class_method_signature": "GridCoverageReaderHelper.computeReadingGeometry(GridGeometry2D gg,\n            CoordinateReferenceSystem readerCRS, Polygon polygon, ProjectionHandler handler)", "testcase": false, "constructor": false}, {"identifier": "reduceEnvelope", "parameters": "(ReferencedEnvelope envelope, ProjectionHandler handler)", "modifiers": "private", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope reduceEnvelope(ReferencedEnvelope envelope, ProjectionHandler handler)", "full_signature": "private ReferencedEnvelope reduceEnvelope(ReferencedEnvelope envelope, ProjectionHandler handler)", "class_method_signature": "GridCoverageReaderHelper.reduceEnvelope(ReferencedEnvelope envelope, ProjectionHandler handler)", "testcase": false, "constructor": false}, {"identifier": "readSingleCoverage", "parameters": "(GeneralParameterValue[] readParams, GridGeometry2D gg)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D readSingleCoverage(GeneralParameterValue[] readParams, GridGeometry2D gg)", "full_signature": "private GridCoverage2D readSingleCoverage(GeneralParameterValue[] readParams, GridGeometry2D gg)", "class_method_signature": "GridCoverageReaderHelper.readSingleCoverage(GeneralParameterValue[] readParams, GridGeometry2D gg)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/renderer/lite/gridcoverage2d/GridCoverageReaderHelper.java"}, "focal_method": {"identifier": "readCoverages", "parameters": "(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "modifiers": "public", "return": "List<GridCoverage2D>", "body": "public List<GridCoverage2D> readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)\n            throws IOException, FactoryException, TransformException {\n        if (handler == null) {\n            GridCoverage2D readCoverage = readCoverage(readParams);\n            return Arrays.asList(readCoverage);\n        }\n\n        GridGeometry2D gg = new GridGeometry2D(new GridEnvelope2D(mapRasterArea), mapExtent);\n\n        CoordinateReferenceSystem readerCRS = reader.getCoordinateReferenceSystem();\n\n        // get the areas that we are likely to have to read, and have the projection\n        // handler also cut them\n        List<GridCoverage2D> coverages = new ArrayList<GridCoverage2D>();\n        PolygonExtractor polygonExtractor = new PolygonExtractor();\n        for (ReferencedEnvelope envelope : handler.getQueryEnvelopes()) {\n            Polygon polygon = JTS.toGeometry(envelope);\n\n            GridGeometry2D readingGridGeometry = computeReadingGeometry(gg, readerCRS, polygon, handler);\n            if (readingGridGeometry == null) {\n                continue;\n            }\n            if (paddingRequired) {\n                readingGridGeometry = applyReadGutter(readingGridGeometry);\n            }\n            GridCoverage2D coverage = readSingleCoverage(readParams, readingGridGeometry);\n            if (coverage == null) {\n                continue;\n            }\n\n            // cut and slice the geometry as required by the projection handler\n            ReferencedEnvelope readingEnvelope = ReferencedEnvelope.reference(readingGridGeometry\n                    .getEnvelope2D());\n            ReferencedEnvelope coverageEnvelope = ReferencedEnvelope.reference(coverage\n                    .getEnvelope2D());\n            Polygon coverageFootprint = JTS.toGeometry(coverageEnvelope);\n            Geometry preProcessed = handler.preProcess(coverageFootprint);\n            if (preProcessed == null || preProcessed.isEmpty()) {\n                continue;\n            } else if (coverageFootprint.equals(preProcessed)) {\n                // we might still have read more than requested\n                if(!readingEnvelope.contains((Envelope) coverageEnvelope)) {\n                    ReferencedEnvelope cropEnvelope = new ReferencedEnvelope(\n                            readingEnvelope.intersection(coverageEnvelope), readerCRS);\n                    if (isNotEmpty(cropEnvelope)) {\n                        GridCoverage2D cropped = cropCoverage(coverage, cropEnvelope);\n                        coverages.add(cropped);\n                    }\n                } else {\n                    coverages.add(coverage);\n                }\n            } else {\n                final List<Polygon> polygons = polygonExtractor.getPolygons(preProcessed);\n                for (Polygon p : polygons) {\n                    ReferencedEnvelope cropEnvelope = new ReferencedEnvelope(\n                            p.getEnvelopeInternal(), readerCRS);\n                    cropEnvelope = new ReferencedEnvelope(\n                            cropEnvelope.intersection(coverageEnvelope), readerCRS);\n                    cropEnvelope = new ReferencedEnvelope(\n                            cropEnvelope.intersection(readingEnvelope), readerCRS);\n                    if (isNotEmpty(cropEnvelope)) {\n                        GridCoverage2D cropped = cropCoverage(coverage, cropEnvelope);\n                        coverages.add(cropped);\n                    }\n                }\n\n            }\n\n        }\n\n        return coverages;\n    }", "signature": "List<GridCoverage2D> readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "full_signature": "public List<GridCoverage2D> readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "class_method_signature": "GridCoverageReaderHelper.readCoverages(final GeneralParameterValue[] readParams,\n            ProjectionHandler handler)", "testcase": false, "constructor": false, "invocations": ["readCoverage", "asList", "getCoordinateReferenceSystem", "getQueryEnvelopes", "toGeometry", "computeReadingGeometry", "applyReadGutter", "readSingleCoverage", "reference", "getEnvelope2D", "reference", "getEnvelope2D", "toGeometry", "preProcess", "isEmpty", "equals", "contains", "intersection", "isNotEmpty", "cropCoverage", "add", "add", "getPolygons", "getEnvelopeInternal", "intersection", "intersection", "isNotEmpty", "cropCoverage", "add"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}