{"test_class": {"identifier": "ProcessorChainFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String simpleExtension =\n\t\t\t\"function transform(doc){\"\n\t\t\t\t\t+ \"    if(doc != null){\"\n\t\t\t\t\t+ \"        doc.extension = \\\"This is an extension\\\";\"\n\t\t\t\t\t+ \"    }\"\n\t\t\t\t\t+ \"    return doc;\"\n\t\t\t\t\t+ \"};\";", "modifier": "private static final", "type": "String", "declarator": "simpleExtension =\n\t\t\t\"function transform(doc){\"\n\t\t\t\t\t+ \"    if(doc != null){\"\n\t\t\t\t\t+ \"        doc.extension = \\\"This is an extension\\\";\"\n\t\t\t\t\t+ \"    }\"\n\t\t\t\t\t+ \"    return doc;\"\n\t\t\t\t\t+ \"};\"", "var_name": "simpleExtension"}, {"original_string": "private final ProcessorReferenceChain chainReference;", "modifier": "private final", "type": "ProcessorReferenceChain", "declarator": "chainReference", "var_name": "chainReference"}], "file": "server/src/test/java/org/jvalue/ods/processor/ProcessorChainFactoryTest.java"}, "test_case": {"identifier": "testCreation", "parameters": "(\n\t\t\t@Mocked final FilterFactory filterFactory,\n\t\t\t@Mocked final SourceAdapterFactory adapterFactory,\n\t\t\t@Mocked final DataRepository dataRepository)", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreation(\n\t\t\t@Mocked final FilterFactory filterFactory,\n\t\t\t@Mocked final SourceAdapterFactory adapterFactory,\n\t\t\t@Mocked final DataRepository dataRepository)\n\t\t\tthrows Exception {\n\n\t\tfinal ProcessorChainFactory chainFactory = new ProcessorChainFactory(adapterFactory, filterFactory);\n\t\tchainFactory.createProcessorChain(chainReference, new DataSource(null, null, null, null), dataRepository);\n\n\t\tnew Verifications() {{\n\t\t\tadapterFactory.createJsonSourceAdapter((DataSource) any, anyString); times = 1;\n\t\t\tfilterFactory.createDbInsertionFilter((DataSource) any, (DataRepository) any, anyBoolean); times = 1;\n\t\t\tfilterFactory.createNotificationFilter((DataSource) any); times = 1;\n\t\t\tfilterFactory.createTransformationFilter((DataSource) any, simpleExtension); times = 1;\n\t\t}};\n\t}", "signature": "void testCreation(\n\t\t\t@Mocked final FilterFactory filterFactory,\n\t\t\t@Mocked final SourceAdapterFactory adapterFactory,\n\t\t\t@Mocked final DataRepository dataRepository)", "full_signature": "@Test public void testCreation(\n\t\t\t@Mocked final FilterFactory filterFactory,\n\t\t\t@Mocked final SourceAdapterFactory adapterFactory,\n\t\t\t@Mocked final DataRepository dataRepository)", "class_method_signature": "ProcessorChainFactoryTest.testCreation(\n\t\t\t@Mocked final FilterFactory filterFactory,\n\t\t\t@Mocked final SourceAdapterFactory adapterFactory,\n\t\t\t@Mocked final DataRepository dataRepository)", "testcase": true, "constructor": false, "invocations": ["createProcessorChain", "createJsonSourceAdapter", "createDbInsertionFilter", "createNotificationFilter", "createTransformationFilter"]}, "focal_class": {"identifier": "ProcessorChainFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SourceAdapterFactory adapterFactory;", "modifier": "private final", "type": "SourceAdapterFactory", "declarator": "adapterFactory", "var_name": "adapterFactory"}, {"original_string": "private final FilterFactory filterFactory;", "modifier": "private final", "type": "FilterFactory", "declarator": "filterFactory", "var_name": "filterFactory"}], "methods": [{"identifier": "ProcessorChainFactory", "parameters": "(\n\t\t\tSourceAdapterFactory adapterFactory,\n\t\t\tFilterFactory filterFactory)", "modifiers": "@Inject public", "return": "", "signature": " ProcessorChainFactory(\n\t\t\tSourceAdapterFactory adapterFactory,\n\t\t\tFilterFactory filterFactory)", "full_signature": "@Inject public  ProcessorChainFactory(\n\t\t\tSourceAdapterFactory adapterFactory,\n\t\t\tFilterFactory filterFactory)", "class_method_signature": "ProcessorChainFactory.ProcessorChainFactory(\n\t\t\tSourceAdapterFactory adapterFactory,\n\t\t\tFilterFactory filterFactory)", "testcase": false, "constructor": true}, {"identifier": "createProcessorChain", "parameters": "(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ProcessorChain", "signature": "ProcessorChain createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "full_signature": "@SuppressWarnings(\"unchecked\") public ProcessorChain createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "class_method_signature": "ProcessorChainFactory.createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "testcase": false, "constructor": false}, {"identifier": "createProcessorFromAnnotation", "parameters": "(\n\t\t\tObject factory,\n\t\t\tClass<?> factoryClass, // hack as jmockit removed annotations from methods\n\t\t\tProcessorReference reference,\n\t\t\tDataSource dataSource,\n\t\t\tDataRepository dataRepository)", "modifiers": "private", "return": "Object", "signature": "Object createProcessorFromAnnotation(\n\t\t\tObject factory,\n\t\t\tClass<?> factoryClass, // hack as jmockit removed annotations from methods\n\t\t\tProcessorReference reference,\n\t\t\tDataSource dataSource,\n\t\t\tDataRepository dataRepository)", "full_signature": "private Object createProcessorFromAnnotation(\n\t\t\tObject factory,\n\t\t\tClass<?> factoryClass, // hack as jmockit removed annotations from methods\n\t\t\tProcessorReference reference,\n\t\t\tDataSource dataSource,\n\t\t\tDataRepository dataRepository)", "class_method_signature": "ProcessorChainFactory.createProcessorFromAnnotation(\n\t\t\tObject factory,\n\t\t\tClass<?> factoryClass, // hack as jmockit removed annotations from methods\n\t\t\tProcessorReference reference,\n\t\t\tDataSource dataSource,\n\t\t\tDataRepository dataRepository)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/processor/ProcessorChainFactory.java"}, "focal_method": {"identifier": "createProcessorChain", "parameters": "(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ProcessorChain", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic ProcessorChain createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository) {\n\n\t\tAssert.assertNotNull(chainReference, source, dataRepository);\n\n\t\tSourceAdapter adapter;\n\t\tFilter<ObjectNode, ?> firstFilter = null;\n\t\tFilter<?, ObjectNode> lastFilter = null;\n\n\t\tIterator<ProcessorReference> iterator = chainReference.getProcessors().iterator();\n\t\tadapter = (SourceAdapter) createProcessorFromAnnotation(adapterFactory, SourceAdapterFactory.class, iterator.next(), source, dataRepository);\n\n\t\twhile (iterator.hasNext()) {\n\t\t\tFilter filter = (Filter) createProcessorFromAnnotation(filterFactory, FilterFactory.class, iterator.next(), source, dataRepository);\n\t\t\tif (firstFilter == null) {\n\t\t\t\tfirstFilter = (Filter<ObjectNode, ObjectNode>) filter;\n\t\t\t\tlastFilter = (Filter<ObjectNode, ObjectNode>) filter;\n\t\t\t} else {\n\t\t\t\tlastFilter = (Filter<ObjectNode, ObjectNode>) lastFilter.setNextFilter(filter);\n\t\t\t}\n\t\t}\n\n\t\treturn new ProcessorChain(adapter, firstFilter);\n\t}", "signature": "ProcessorChain createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "full_signature": "@SuppressWarnings(\"unchecked\") public ProcessorChain createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "class_method_signature": "ProcessorChainFactory.createProcessorChain(\n\t\t\tProcessorReferenceChain chainReference,\n\t\t\tDataSource source,\n\t\t\tDataRepository dataRepository)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "iterator", "getProcessors", "createProcessorFromAnnotation", "next", "hasNext", "createProcessorFromAnnotation", "next", "setNextFilter"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}