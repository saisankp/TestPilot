{"test_class": {"identifier": "FlinkOutputFieldsDeclarerTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "flink-contrib/flink-storm/src/test/java/org/apache/flink/storm/api/FlinkOutputFieldsDeclarerTest.java"}, "test_case": {"identifier": "testUndeclared", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testUndeclared() {\n\t\tfinal FlinkOutputFieldsDeclarer declarer = new FlinkOutputFieldsDeclarer();\n\t\tdeclarer.getOutputType(\"unknownStreamId\");\n\t}", "signature": "void testUndeclared()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testUndeclared()", "class_method_signature": "FlinkOutputFieldsDeclarerTest.testUndeclared()", "testcase": true, "constructor": false, "invocations": ["getOutputType"]}, "focal_class": {"identifier": "FlinkOutputFieldsDeclarer", "superclass": "", "interfaces": "implements OutputFieldsDeclarer", "fields": [{"original_string": "final HashMap<String, Fields> outputStreams = new HashMap<String, Fields>();", "modifier": "final", "type": "HashMap<String, Fields>", "declarator": "outputStreams = new HashMap<String, Fields>()", "var_name": "outputStreams"}], "methods": [{"identifier": "declare", "parameters": "(final Fields fields)", "modifiers": "@Override public", "return": "void", "signature": "void declare(final Fields fields)", "full_signature": "@Override public void declare(final Fields fields)", "class_method_signature": "FlinkOutputFieldsDeclarer.declare(final Fields fields)", "testcase": false, "constructor": false}, {"identifier": "declare", "parameters": "(final boolean direct, final Fields fields)", "modifiers": "@Override public", "return": "void", "signature": "void declare(final boolean direct, final Fields fields)", "full_signature": "@Override public void declare(final boolean direct, final Fields fields)", "class_method_signature": "FlinkOutputFieldsDeclarer.declare(final boolean direct, final Fields fields)", "testcase": false, "constructor": false}, {"identifier": "declareStream", "parameters": "(final String streamId, final Fields fields)", "modifiers": "@Override public", "return": "void", "signature": "void declareStream(final String streamId, final Fields fields)", "full_signature": "@Override public void declareStream(final String streamId, final Fields fields)", "class_method_signature": "FlinkOutputFieldsDeclarer.declareStream(final String streamId, final Fields fields)", "testcase": false, "constructor": false}, {"identifier": "declareStream", "parameters": "(final String streamId, final boolean direct, final Fields fields)", "modifiers": "@Override public", "return": "void", "signature": "void declareStream(final String streamId, final boolean direct, final Fields fields)", "full_signature": "@Override public void declareStream(final String streamId, final boolean direct, final Fields fields)", "class_method_signature": "FlinkOutputFieldsDeclarer.declareStream(final String streamId, final boolean direct, final Fields fields)", "testcase": false, "constructor": false}, {"identifier": "getOutputType", "parameters": "(final String streamId)", "modifiers": "", "return": "TypeInformation<Tuple>", "signature": "TypeInformation<Tuple> getOutputType(final String streamId)", "full_signature": " TypeInformation<Tuple> getOutputType(final String streamId)", "class_method_signature": "FlinkOutputFieldsDeclarer.getOutputType(final String streamId)", "testcase": false, "constructor": false}, {"identifier": "getGroupingFieldIndexes", "parameters": "(final String streamId, final List<String> groupingFields)", "modifiers": "", "return": "int[]", "signature": "int[] getGroupingFieldIndexes(final String streamId, final List<String> groupingFields)", "full_signature": " int[] getGroupingFieldIndexes(final String streamId, final List<String> groupingFields)", "class_method_signature": "FlinkOutputFieldsDeclarer.getGroupingFieldIndexes(final String streamId, final List<String> groupingFields)", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-storm/src/main/java/org/apache/flink/storm/api/FlinkOutputFieldsDeclarer.java"}, "focal_method": {"identifier": "getOutputType", "parameters": "(final String streamId)", "modifiers": "", "return": "TypeInformation<Tuple>", "body": "TypeInformation<Tuple> getOutputType(final String streamId) throws IllegalArgumentException {\n\t\tif (streamId == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tFields outputSchema = this.outputStreams.get(streamId);\n\t\tif (outputSchema == null) {\n\t\t\tthrow new IllegalArgumentException(\"Stream with ID '\" + streamId\n\t\t\t\t\t+ \"' was not declared.\");\n\t\t}\n\n\t\tTuple t;\n\t\tfinal int numberOfAttributes = outputSchema.size();\n\n\t\tif (numberOfAttributes <= 24) {\n\t\t\ttry {\n\t\t\t\tt = Tuple.getTupleClass(numberOfAttributes + 1).newInstance();\n\t\t\t} catch (final InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (final IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Flink supports only a maximum number of 24 attributes\");\n\t\t}\n\n\t\t// TODO: declare only key fields as DefaultComparable\n\t\tfor (int i = 0; i < numberOfAttributes + 1; ++i) {\n\t\t\tt.setField(new DefaultComparable(), i);\n\t\t}\n\n\t\treturn TypeExtractor.getForObject(t);\n\t}", "signature": "TypeInformation<Tuple> getOutputType(final String streamId)", "full_signature": " TypeInformation<Tuple> getOutputType(final String streamId)", "class_method_signature": "FlinkOutputFieldsDeclarer.getOutputType(final String streamId)", "testcase": false, "constructor": false, "invocations": ["get", "size", "newInstance", "getTupleClass", "setField", "getForObject"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}