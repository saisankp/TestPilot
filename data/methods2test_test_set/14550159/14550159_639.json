{"test_class": {"identifier": "ParameterResolverFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ParameterResolverFactory parameterResolverFactory;", "modifier": "private", "type": "ParameterResolverFactory", "declarator": "parameterResolverFactory", "var_name": "parameterResolverFactory"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/method/ParameterResolverFactoryTest.java"}, "test_case": {"identifier": "throwsExceptionWhenInputAnnotationIsNotSupported", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void throwsExceptionWhenInputAnnotationIsNotSupported() {\n        parameterResolverFactory.createParameterResolver(annotationOfType(Path.class));\n    }", "signature": "void throwsExceptionWhenInputAnnotationIsNotSupported()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void throwsExceptionWhenInputAnnotationIsNotSupported()", "class_method_signature": "ParameterResolverFactoryTest.throwsExceptionWhenInputAnnotationIsNotSupported()", "testcase": true, "constructor": false, "invocations": ["createParameterResolver", "annotationOfType"]}, "focal_class": {"identifier": "ParameterResolverFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createParameterResolver", "parameters": "(Annotation annotation)", "modifiers": "public", "return": "ParameterResolver", "signature": "ParameterResolver createParameterResolver(Annotation annotation)", "full_signature": "public ParameterResolver createParameterResolver(Annotation annotation)", "class_method_signature": "ParameterResolverFactory.createParameterResolver(Annotation annotation)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/method/ParameterResolverFactory.java"}, "focal_method": {"identifier": "createParameterResolver", "parameters": "(Annotation annotation)", "modifiers": "public", "return": "ParameterResolver", "body": "public ParameterResolver createParameterResolver(Annotation annotation) {\n        final Class annotationType = annotation.annotationType();\n        if (annotationType == CookieParam.class) {\n            return new CookieParameterResolver((CookieParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == Context.class) {\n            return new ContextParameterResolver();\n        }\n        if (annotationType == FormParam.class) {\n            return new FormParameterResolver((FormParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == HeaderParam.class) {\n            return new HeaderParameterResolver((HeaderParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == MatrixParam.class) {\n            return new MatrixParameterResolver((MatrixParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == PathParam.class) {\n            return new PathParameterResolver((PathParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == QueryParam.class) {\n            return new QueryParameterResolver((QueryParam)annotation, new TypeProducerFactory());\n        }\n        if (annotationType == Property.class) {\n            return new PropertyResolver((Property)annotation);\n        }\n        throw new IllegalArgumentException(String.format(\"Unsupported annotation %s\", annotationType));\n    }", "signature": "ParameterResolver createParameterResolver(Annotation annotation)", "full_signature": "public ParameterResolver createParameterResolver(Annotation annotation)", "class_method_signature": "ParameterResolverFactory.createParameterResolver(Annotation annotation)", "testcase": false, "constructor": false, "invocations": ["annotationType", "format"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}