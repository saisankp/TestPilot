{"test_class": {"identifier": "SerializedObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Subscriber<String> observer;", "modifier": "@Mock", "type": "Subscriber<String>", "declarator": "observer", "var_name": "observer"}], "file": "zava/src/test/java/rx/observers/SerializedObserverTest.java"}, "test_case": {"identifier": "testMultiThreadedWithNPE", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void testMultiThreadedWithNPE() throws InterruptedException {\n        TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable(\"one\", \"two\", \"three\", null);\n        Observable<String> w = Observable.create(onSubscribe);\n\n        BusyObserver busyObserver = new BusyObserver();\n        Observer<String> aw = serializedObserver(busyObserver);\n\n        w.subscribe(aw);\n        onSubscribe.waitToFinish();\n        busyObserver.terminalEvent.await();\n\n        System.out.println(\"OnSubscribe maxConcurrentThreads: \" + onSubscribe.maxConcurrentThreads.get() + \"  Observer maxConcurrentThreads: \" + busyObserver.maxConcurrentThreads.get());\n\n        // we can't know how many onNext calls will occur since they each run on a separate thread\n        // that depends on thread scheduling so 0, 1, 2 and 3 are all valid options\n        // assertEquals(3, busyObserver.onNextCount.get());\n        assertTrue(busyObserver.onNextCount.get() < 4);\n        assertTrue(busyObserver.onError);\n        // no onCompleted because onError was invoked\n        assertFalse(busyObserver.onCompleted);\n        // non-deterministic because unsubscribe happens after 'waitToFinish' releases\n        // so commenting out for now as this is not a critical thing to test here\n        //verify(s, times(1)).unsubscribe();\n\n        // we can have concurrency ...\n        assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);\n        // ... but the onNext execution should be single threaded\n        assertEquals(1, busyObserver.maxConcurrentThreads.get());\n    }", "signature": "void testMultiThreadedWithNPE()", "full_signature": "@Test(timeout = 1000) public void testMultiThreadedWithNPE()", "class_method_signature": "SerializedObserverTest.testMultiThreadedWithNPE()", "testcase": true, "constructor": false, "invocations": ["create", "serializedObserver", "subscribe", "waitToFinish", "await", "println", "get", "get", "assertTrue", "get", "assertTrue", "assertFalse", "assertTrue", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "SerializedObserver", "superclass": "", "interfaces": "implements Observer<T>", "fields": [{"original_string": "private final Observer<? super T> actual;", "modifier": "private final", "type": "Observer<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "private boolean emitting = false;", "modifier": "private", "type": "boolean", "declarator": "emitting = false", "var_name": "emitting"}, {"original_string": "private boolean terminated = false;", "modifier": "private", "type": "boolean", "declarator": "terminated = false", "var_name": "terminated"}, {"original_string": "private FastList queue;", "modifier": "private", "type": "FastList", "declarator": "queue", "var_name": "queue"}, {"original_string": "private static final int MAX_DRAIN_ITERATION = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "MAX_DRAIN_ITERATION = Integer.MAX_VALUE", "var_name": "MAX_DRAIN_ITERATION"}, {"original_string": "private static final Object NULL_SENTINEL = new Object();", "modifier": "private static final", "type": "Object", "declarator": "NULL_SENTINEL = new Object()", "var_name": "NULL_SENTINEL"}, {"original_string": "private static final Object COMPLETE_SENTINEL = new Object();", "modifier": "private static final", "type": "Object", "declarator": "COMPLETE_SENTINEL = new Object()", "var_name": "COMPLETE_SENTINEL"}], "methods": [{"identifier": "SerializedObserver", "parameters": "(Observer<? super T> s)", "modifiers": "public", "return": "", "signature": " SerializedObserver(Observer<? super T> s)", "full_signature": "public  SerializedObserver(Observer<? super T> s)", "class_method_signature": "SerializedObserver.SerializedObserver(Observer<? super T> s)", "testcase": false, "constructor": true}, {"identifier": "onCompleted", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onCompleted()", "full_signature": "@Override public void onCompleted()", "class_method_signature": "SerializedObserver.onCompleted()", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final Throwable e)", "full_signature": "@Override public void onError(final Throwable e)", "class_method_signature": "SerializedObserver.onError(final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedObserver.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "drainQueue", "parameters": "(FastList list)", "modifiers": "", "return": "void", "signature": "void drainQueue(FastList list)", "full_signature": " void drainQueue(FastList list)", "class_method_signature": "SerializedObserver.drainQueue(FastList list)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/observers/SerializedObserver.java"}, "focal_method": {"identifier": "SerializedObserver", "parameters": "(Observer<? super T> s)", "modifiers": "public", "return": "", "body": "public SerializedObserver(Observer<? super T> s) {\n        this.actual = s;\n    }", "signature": " SerializedObserver(Observer<? super T> s)", "full_signature": "public  SerializedObserver(Observer<? super T> s)", "class_method_signature": "SerializedObserver.SerializedObserver(Observer<? super T> s)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}