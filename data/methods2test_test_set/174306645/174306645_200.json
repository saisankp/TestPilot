{"test_class": {"identifier": "ReflectionProtoGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProtoGenerator<Class<?>> generator = new ReflectionProtoGenerator();", "modifier": "private", "type": "ProtoGenerator<Class<?>>", "declarator": "generator = new ReflectionProtoGenerator()", "var_name": "generator"}], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGeneratorTest.java"}, "test_case": {"identifier": "testPersonWithAddressesProtoFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testPersonWithAddressesProtoFile() {\n        \n        Proto proto = generator.generate(\"org.kie.kogito.test\", Collections.singleton(PersonWithAddresses.class));\n        assertThat(proto).isNotNull();\n        \n        assertThat(proto.getPackageName()).isEqualTo(\"org.kie.kogito.test\");\n        assertThat(proto.getSyntax()).isEqualTo(\"proto2\");\n        assertThat(proto.getMessages()).hasSize(2);\n        \n        ProtoMessage address = proto.getMessages().get(0);\n        assertThat(address).isNotNull();\n        assertThat(address.getName()).isEqualTo(\"Address\");\n        assertThat(address.getJavaPackageOption()).isEqualTo(\"org.kie.kogito.codegen.data\");        \n        assertThat(address.getFields()).hasSize(4);\n        \n        ProtoField field = address.getFields().get(0);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"city\");\n        assertThat(field.getType()).isEqualTo(\"string\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        field = address.getFields().get(1);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"country\");\n        assertThat(field.getType()).isEqualTo(\"string\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        field = address.getFields().get(2);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"street\");\n        assertThat(field.getType()).isEqualTo(\"string\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        field = address.getFields().get(3);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"zipCode\");\n        assertThat(field.getType()).isEqualTo(\"string\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        ProtoMessage person = proto.getMessages().get(1);\n        assertThat(person).isNotNull();\n        assertThat(person.getName()).isEqualTo(\"PersonWithAddresses\");\n        assertThat(person.getJavaPackageOption()).isEqualTo(\"org.kie.kogito.codegen.data\");        \n        assertThat(person.getFields()).hasSize(4);\n        \n        field = person.getFields().get(0);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"addresses\");\n        assertThat(field.getType()).isEqualTo(\"Address\");\n        assertThat(field.getApplicability()).isEqualTo(\"repeated\");\n        \n        field = person.getFields().get(1);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"adult\");\n        assertThat(field.getType()).isEqualTo(\"bool\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        field = person.getFields().get(2);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"age\");\n        assertThat(field.getType()).isEqualTo(\"int32\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n        \n        field = person.getFields().get(3);\n        assertThat(field).isNotNull();\n        assertThat(field.getName()).isEqualTo(\"name\");\n        assertThat(field.getType()).isEqualTo(\"string\");\n        assertThat(field.getApplicability()).isEqualTo(\"optional\");\n    }", "signature": "void testPersonWithAddressesProtoFile()", "full_signature": "@Test void testPersonWithAddressesProtoFile()", "class_method_signature": "ReflectionProtoGeneratorTest.testPersonWithAddressesProtoFile()", "testcase": true, "constructor": false, "invocations": ["generate", "singleton", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getPackageName", "isEqualTo", "assertThat", "getSyntax", "hasSize", "assertThat", "getMessages", "get", "getMessages", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getJavaPackageOption", "hasSize", "assertThat", "getFields", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getMessages", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getJavaPackageOption", "hasSize", "assertThat", "getFields", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability", "get", "getFields", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getApplicability"]}, "focal_class": {"identifier": "ReflectionProtoGenerator", "superclass": "extends AbstractProtoGenerator<Class<?>>", "interfaces": "", "fields": [], "methods": [{"identifier": "generate", "parameters": "(String packageName, Collection<Class<?>> dataModel, String... headers)", "modifiers": "public", "return": "Proto", "signature": "Proto generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "full_signature": "public Proto generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "class_method_signature": "ReflectionProtoGenerator.generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(String messageComment, String fieldComment, String packageName, Class<?> dataModel, String... headers)", "modifiers": "@Override public", "return": "Proto", "signature": "Proto generate(String messageComment, String fieldComment, String packageName, Class<?> dataModel, String... headers)", "full_signature": "@Override public Proto generate(String messageComment, String fieldComment, String packageName, Class<?> dataModel, String... headers)", "class_method_signature": "ReflectionProtoGenerator.generate(String messageComment, String fieldComment, String packageName, Class<?> dataModel, String... headers)", "testcase": false, "constructor": false}, {"identifier": "extractDataClasses", "parameters": "(Collection<Class<?>> input, String targetDirectory)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> extractDataClasses(Collection<Class<?>> input, String targetDirectory)", "full_signature": "public Collection<Class<?>> extractDataClasses(Collection<Class<?>> input, String targetDirectory)", "class_method_signature": "ReflectionProtoGenerator.extractDataClasses(Collection<Class<?>> input, String targetDirectory)", "testcase": false, "constructor": false}, {"identifier": "messageFromClass", "parameters": "(Proto proto, Class<?> clazz, String packageName, String messageComment, String fieldComment)", "modifiers": "protected", "return": "ProtoMessage", "signature": "ProtoMessage messageFromClass(Proto proto, Class<?> clazz, String packageName, String messageComment, String fieldComment)", "full_signature": "protected ProtoMessage messageFromClass(Proto proto, Class<?> clazz, String packageName, String messageComment, String fieldComment)", "class_method_signature": "ReflectionProtoGenerator.messageFromClass(Proto proto, Class<?> clazz, String packageName, String messageComment, String fieldComment)", "testcase": false, "constructor": false}, {"identifier": "enumFromClass", "parameters": "(Proto proto, Class<?> clazz, String packageName)", "modifiers": "protected", "return": "ProtoEnum", "signature": "ProtoEnum enumFromClass(Proto proto, Class<?> clazz, String packageName)", "full_signature": "protected ProtoEnum enumFromClass(Proto proto, Class<?> clazz, String packageName)", "class_method_signature": "ReflectionProtoGenerator.enumFromClass(Proto proto, Class<?> clazz, String packageName)", "testcase": false, "constructor": false}, {"identifier": "addEnumField", "parameters": "(Field field, ProtoEnum pEnum)", "modifiers": "private", "return": "void", "signature": "void addEnumField(Field field, ProtoEnum pEnum)", "full_signature": "private void addEnumField(Field field, ProtoEnum pEnum)", "class_method_signature": "ReflectionProtoGenerator.addEnumField(Field field, ProtoEnum pEnum)", "testcase": false, "constructor": false}, {"identifier": "generateModelClassProto", "parameters": "(Class<?> modelClazz, String targetDirectory)", "modifiers": "protected", "return": "void", "signature": "void generateModelClassProto(Class<?> modelClazz, String targetDirectory)", "full_signature": "protected void generateModelClassProto(Class<?> modelClazz, String targetDirectory)", "class_method_signature": "ReflectionProtoGenerator.generateModelClassProto(Class<?> modelClazz, String targetDirectory)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(String packageName, Collection<Class<?>> dataModel, String... headers)", "modifiers": "public", "return": "Proto", "body": "public Proto generate(String packageName, Collection<Class<?>> dataModel, String... headers) {\n        try {\n            Proto proto = new Proto(packageName, headers);\n            for (Class<?> clazz : dataModel) {\n                if (clazz.isEnum()) {\n                    enumFromClass(proto, clazz, null);\n                } else {\n                    messageFromClass(proto, clazz, null, null, null);\n                }\n            }\n            return proto;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error while generating proto for data model\", e);\n        }\n    }", "signature": "Proto generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "full_signature": "public Proto generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "class_method_signature": "ReflectionProtoGenerator.generate(String packageName, Collection<Class<?>> dataModel, String... headers)", "testcase": false, "constructor": false, "invocations": ["isEnum", "enumFromClass", "messageFromClass"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}