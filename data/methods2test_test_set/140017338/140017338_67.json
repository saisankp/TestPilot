{"test_class": {"identifier": "FutureUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Integer RESULT = 42;", "modifier": "private static final", "type": "Integer", "declarator": "RESULT = 42", "var_name": "RESULT"}], "file": "modules/sw360/sw360-client/src/test/java/org/eclipse/sw360/antenna/sw360/client/utils/FutureUtilsTest.java"}, "test_case": {"identifier": "testOptionalFutureFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOptionalFutureFailure() {\n        FailedRequestException exception = new FailedRequestException(\"a tag\", 500);\n        CompletableFuture<Integer> future = new CompletableFuture<>();\n        future.completeExceptionally(exception);\n\n        CompletableFuture<Optional<Integer>> optFuture = FutureUtils.optionalFuture(future);\n        expectFailedFuture(optFuture, exception);\n    }", "signature": "void testOptionalFutureFailure()", "full_signature": "@Test public void testOptionalFutureFailure()", "class_method_signature": "FutureUtilsTest.testOptionalFutureFailure()", "testcase": true, "constructor": false, "invocations": ["completeExceptionally", "optionalFuture", "expectFailedFuture"]}, "focal_class": {"identifier": "FutureUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FutureUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FutureUtils()", "full_signature": "private  FutureUtils()", "class_method_signature": "FutureUtils.FutureUtils()", "testcase": false, "constructor": true}, {"identifier": "block", "parameters": "(CompletableFuture<? extends T> future)", "modifiers": "public static", "return": "T", "signature": "T block(CompletableFuture<? extends T> future)", "full_signature": "public static T block(CompletableFuture<? extends T> future)", "class_method_signature": "FutureUtils.block(CompletableFuture<? extends T> future)", "testcase": false, "constructor": false}, {"identifier": "wrapFutureForConditionalFallback", "parameters": "(CompletableFuture<T> future,\n                                                                            Predicate<? super Throwable> condition,\n                                                                            Supplier<? extends CompletableFuture<T>> fallback)", "modifiers": "public static", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> wrapFutureForConditionalFallback(CompletableFuture<T> future,\n                                                                            Predicate<? super Throwable> condition,\n                                                                            Supplier<? extends CompletableFuture<T>> fallback)", "full_signature": "public static CompletableFuture<T> wrapFutureForConditionalFallback(CompletableFuture<T> future,\n                                                                            Predicate<? super Throwable> condition,\n                                                                            Supplier<? extends CompletableFuture<T>> fallback)", "class_method_signature": "FutureUtils.wrapFutureForConditionalFallback(CompletableFuture<T> future,\n                                                                            Predicate<? super Throwable> condition,\n                                                                            Supplier<? extends CompletableFuture<T>> fallback)", "testcase": false, "constructor": false}, {"identifier": "optionalFuture", "parameters": "(CompletableFuture<? extends T> future)", "modifiers": "public static", "return": "CompletableFuture<Optional<T>>", "signature": "CompletableFuture<Optional<T>> optionalFuture(CompletableFuture<? extends T> future)", "full_signature": "public static CompletableFuture<Optional<T>> optionalFuture(CompletableFuture<? extends T> future)", "class_method_signature": "FutureUtils.optionalFuture(CompletableFuture<? extends T> future)", "testcase": false, "constructor": false}, {"identifier": "orFallback", "parameters": "(CompletableFuture<Optional<T>> future,\n                                                      Supplier<? extends CompletableFuture<T>> fallback)", "modifiers": "public static", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> orFallback(CompletableFuture<Optional<T>> future,\n                                                      Supplier<? extends CompletableFuture<T>> fallback)", "full_signature": "public static CompletableFuture<T> orFallback(CompletableFuture<Optional<T>> future,\n                                                      Supplier<? extends CompletableFuture<T>> fallback)", "class_method_signature": "FutureUtils.orFallback(CompletableFuture<Optional<T>> future,\n                                                      Supplier<? extends CompletableFuture<T>> fallback)", "testcase": false, "constructor": false}, {"identifier": "orRetry", "parameters": "(CompletableFuture<Optional<T>> future,\n                                                             Supplier<? extends CompletableFuture<Optional<T>>> retry)", "modifiers": "public static", "return": "CompletableFuture<Optional<T>>", "signature": "CompletableFuture<Optional<T>> orRetry(CompletableFuture<Optional<T>> future,\n                                                             Supplier<? extends CompletableFuture<Optional<T>>> retry)", "full_signature": "public static CompletableFuture<Optional<T>> orRetry(CompletableFuture<Optional<T>> future,\n                                                             Supplier<? extends CompletableFuture<Optional<T>>> retry)", "class_method_signature": "FutureUtils.orRetry(CompletableFuture<Optional<T>> future,\n                                                             Supplier<? extends CompletableFuture<Optional<T>>> retry)", "testcase": false, "constructor": false}, {"identifier": "isFailedRequestWithStatus", "parameters": "(Throwable exception, int statusCode)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFailedRequestWithStatus(Throwable exception, int statusCode)", "full_signature": "public static boolean isFailedRequestWithStatus(Throwable exception, int statusCode)", "class_method_signature": "FutureUtils.isFailedRequestWithStatus(Throwable exception, int statusCode)", "testcase": false, "constructor": false}, {"identifier": "failedFuture", "parameters": "(Throwable ex)", "modifiers": "public static", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> failedFuture(Throwable ex)", "full_signature": "public static CompletableFuture<T> failedFuture(Throwable ex)", "class_method_signature": "FutureUtils.failedFuture(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "sequence", "parameters": "(Collection<CompletableFuture<T>> futures,\n                                                                Function<Throwable, Boolean> exceptionHandler)", "modifiers": "public static", "return": "CompletableFuture<Collection<T>>", "signature": "CompletableFuture<Collection<T>> sequence(Collection<CompletableFuture<T>> futures,\n                                                                Function<Throwable, Boolean> exceptionHandler)", "full_signature": "public static CompletableFuture<Collection<T>> sequence(Collection<CompletableFuture<T>> futures,\n                                                                Function<Throwable, Boolean> exceptionHandler)", "class_method_signature": "FutureUtils.sequence(Collection<CompletableFuture<T>> futures,\n                                                                Function<Throwable, Boolean> exceptionHandler)", "testcase": false, "constructor": false}, {"identifier": "wrapInFuture", "parameters": "(Callable<? extends T> action, String errMsg)", "modifiers": "public static", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> wrapInFuture(Callable<? extends T> action, String errMsg)", "full_signature": "public static CompletableFuture<T> wrapInFuture(Callable<? extends T> action, String errMsg)", "class_method_signature": "FutureUtils.wrapInFuture(Callable<? extends T> action, String errMsg)", "testcase": false, "constructor": false}, {"identifier": "exceptionMatches", "parameters": "(Throwable exception, Predicate<? super Throwable> condition)", "modifiers": "private static", "return": "boolean", "signature": "boolean exceptionMatches(Throwable exception, Predicate<? super Throwable> condition)", "full_signature": "private static boolean exceptionMatches(Throwable exception, Predicate<? super Throwable> condition)", "class_method_signature": "FutureUtils.exceptionMatches(Throwable exception, Predicate<? super Throwable> condition)", "testcase": false, "constructor": false}, {"identifier": "resourceNotFound", "parameters": "(Throwable exception)", "modifiers": "private static", "return": "boolean", "signature": "boolean resourceNotFound(Throwable exception)", "full_signature": "private static boolean resourceNotFound(Throwable exception)", "class_method_signature": "FutureUtils.resourceNotFound(Throwable exception)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-client/src/main/java/org/eclipse/sw360/antenna/sw360/client/utils/FutureUtils.java"}, "focal_method": {"identifier": "optionalFuture", "parameters": "(CompletableFuture<? extends T> future)", "modifiers": "public static", "return": "CompletableFuture<Optional<T>>", "body": "public static <T> CompletableFuture<Optional<T>> optionalFuture(CompletableFuture<? extends T> future) {\n        CompletableFuture<Optional<T>> optFuture = future.thenApply(Optional::of);\n        return wrapFutureForConditionalFallback(optFuture,\n                FutureUtils::resourceNotFound,\n                () -> CompletableFuture.completedFuture(Optional.empty()));\n    }", "signature": "CompletableFuture<Optional<T>> optionalFuture(CompletableFuture<? extends T> future)", "full_signature": "public static CompletableFuture<Optional<T>> optionalFuture(CompletableFuture<? extends T> future)", "class_method_signature": "FutureUtils.optionalFuture(CompletableFuture<? extends T> future)", "testcase": false, "constructor": false, "invocations": ["thenApply", "wrapFutureForConditionalFallback", "completedFuture", "empty"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}