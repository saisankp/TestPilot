{"test_class": {"identifier": "ExtendedAtomGeneratorTest", "superclass": "extends BasicAtomGeneratorTest", "interfaces": "", "fields": [{"original_string": "private ExtendedAtomGenerator generator;", "modifier": "private", "type": "ExtendedAtomGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderextra/src/test/java/org/openscience/cdk/renderer/generators/ExtendedAtomGeneratorTest.java"}, "test_case": {"identifier": "testSquare", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testSquare() {\n        IAtomContainer square = makeSquare();\n        model.set(KekuleStructure.class, true);\n\n        // generate all four atoms\n        IRenderingElement root = generator.generate(square, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(4, elements.size());\n\n        // test that the center is at the origin\n        Assert.assertEquals(new Point2d(0, 0), center(elements));\n    }", "signature": "void testSquare()", "full_signature": "@Test @Override public void testSquare()", "class_method_signature": "ExtendedAtomGeneratorTest.testSquare()", "testcase": true, "constructor": false, "invocations": ["makeSquare", "set", "generate", "getAllSimpleElements", "assertEquals", "size", "assertEquals", "center"]}, "focal_class": {"identifier": "ExtendedAtomGenerator", "superclass": "extends BasicAtomGenerator", "interfaces": "", "fields": [{"original_string": "private IGeneratorParameter<Boolean> showImplicitHydrogens = new ShowImplicitHydrogens();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "showImplicitHydrogens = new ShowImplicitHydrogens()", "var_name": "showImplicitHydrogens"}, {"original_string": "private ShowAtomTypeNames showAtomTypeNames = new ShowAtomTypeNames();", "modifier": "private", "type": "ShowAtomTypeNames", "declarator": "showAtomTypeNames = new ShowAtomTypeNames()", "var_name": "showAtomTypeNames"}], "methods": [{"identifier": "generate", "parameters": "(IAtomContainer container, IAtom atom, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer container, IAtom atom, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, IAtom atom, RendererModel model)", "class_method_signature": "ExtendedAtomGenerator.generate(IAtomContainer container, IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(TextGroupElement textGroup, IAtomContainer container, IAtom atom, RendererModel model)", "modifiers": "private", "return": "void", "signature": "void decorate(TextGroupElement textGroup, IAtomContainer container, IAtom atom, RendererModel model)", "full_signature": "private void decorate(TextGroupElement textGroup, IAtomContainer container, IAtom atom, RendererModel model)", "class_method_signature": "ExtendedAtomGenerator.decorate(TextGroupElement textGroup, IAtomContainer container, IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getNextPosition", "parameters": "(Stack<Position> unused)", "modifiers": "private", "return": "Position", "signature": "Position getNextPosition(Stack<Position> unused)", "full_signature": "private Position getNextPosition(Stack<Position> unused)", "class_method_signature": "ExtendedAtomGenerator.getNextPosition(Stack<Position> unused)", "testcase": false, "constructor": false}, {"identifier": "getUnusedPositions", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "private", "return": "Stack<Position>", "signature": "Stack<Position> getUnusedPositions(IAtomContainer container, IAtom atom)", "full_signature": "private Stack<Position> getUnusedPositions(IAtomContainer container, IAtom atom)", "class_method_signature": "ExtendedAtomGenerator.getUnusedPositions(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "(IAtom atom, IAtom connectedAtom)", "modifiers": "private", "return": "Position", "signature": "Position getPosition(IAtom atom, IAtom connectedAtom)", "full_signature": "private Position getPosition(IAtom atom, IAtom connectedAtom)", "class_method_signature": "ExtendedAtomGenerator.getPosition(IAtom atom, IAtom connectedAtom)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "ExtendedAtomGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderextra/src/main/java/org/openscience/cdk/renderer/generators/ExtendedAtomGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container, IAtom atom, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IAtomContainer container, IAtom atom, RendererModel model) {\n        boolean drawNumbers = false;\n        if (model.hasParameter(WillDrawAtomNumbers.class)) {\n            drawNumbers = model.getParameter(WillDrawAtomNumbers.class).getValue();\n        }\n        if (!hasCoordinates(atom) || invisibleHydrogen(atom, model)\n                || (invisibleCarbon(atom, container, model) && !drawNumbers)) {\n            return null;\n        } else if (model.getParameter(CompactAtom.class).getValue()) {\n            return this.generateCompactElement(atom, model);\n        } else {\n            String text;\n            if (atom instanceof IPseudoAtom) {\n                text = ((IPseudoAtom) atom).getLabel();\n            } else if (invisibleCarbon(atom, container, model) && drawNumbers) {\n                text = String.valueOf(container.indexOf(atom) + 1);\n            } else {\n                text = atom.getSymbol();\n            }\n            Point2d point = atom.getPoint2d();\n            Color ccolor = getAtomColor(atom, model);\n            TextGroupElement textGroup = new TextGroupElement(point.x, point.y, text, ccolor);\n            decorate(textGroup, container, atom, model);\n            return textGroup;\n        }\n    }", "signature": "IRenderingElement generate(IAtomContainer container, IAtom atom, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, IAtom atom, RendererModel model)", "class_method_signature": "ExtendedAtomGenerator.generate(IAtomContainer container, IAtom atom, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["hasParameter", "getValue", "getParameter", "hasCoordinates", "invisibleHydrogen", "invisibleCarbon", "getValue", "getParameter", "generateCompactElement", "getLabel", "invisibleCarbon", "valueOf", "indexOf", "getSymbol", "getPoint2d", "getAtomColor", "decorate"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}