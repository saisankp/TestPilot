{"test_class": {"identifier": "CameraStreamAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CameraStreamAdapter adapter;", "modifier": "private", "type": "CameraStreamAdapter", "declarator": "adapter", "var_name": "adapter"}], "file": "plugins/cameraserver/src/test/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraStreamAdapterTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeserialize() throws IOException {\n    File file = File.createTempFile(\"test-recording\", \".sbr\");\n    adapter.setCurrentFile(file);\n    CameraServerData data = new CameraServerData(\"name\", null, (1 << 15) / 100, Integer.MAX_VALUE);\n    byte[] bytes = adapter.serialize(data);\n    adapter.cleanUp();\n    CameraServerData deserialize = adapter.deserialize(bytes, 0);\n    deleteTempFiles(file);\n    assertAll(\n        () -> assertEquals(data.getName(), deserialize.getName(), \"Wrong name\"),\n        () -> assertEquals(data.getFps(), deserialize.getFps(), \"Wrong FPS\"),\n        () -> assertEquals(data.getBandwidth(), deserialize.getBandwidth(), \"Wrong bandwidth\"),\n        () -> assertNull(deserialize.getImage(), \"Image should be null (video file does not exist)\")\n    );\n  }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "CameraStreamAdapterTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "setCurrentFile", "serialize", "cleanUp", "deserialize", "deleteTempFiles", "assertAll", "assertEquals", "getName", "getName", "assertEquals", "getFps", "getFps", "assertEquals", "getBandwidth", "getBandwidth", "assertNull", "getImage"]}, "focal_class": {"identifier": "CameraStreamAdapter", "superclass": "extends TypeAdapter<CameraServerData>", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CameraStreamReader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CameraStreamReader.class.getName())", "var_name": "log"}, {"original_string": "private final Map<String, CameraStreamSaver> savers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, CameraStreamSaver>", "declarator": "savers = new ConcurrentHashMap<>()", "var_name": "savers"}, {"original_string": "private final Map<String, CameraStreamReader> readers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, CameraStreamReader>", "declarator": "readers = new ConcurrentHashMap<>()", "var_name": "readers"}, {"original_string": "private final Function<String, CameraStreamSaver> newSaver = name -> new CameraStreamSaver(name, getCurrentFile());", "modifier": "private final", "type": "Function<String, CameraStreamSaver>", "declarator": "newSaver = name -> new CameraStreamSaver(name, getCurrentFile())", "var_name": "newSaver"}], "methods": [{"identifier": "CameraStreamAdapter", "parameters": "()", "modifiers": "public", "return": "", "signature": " CameraStreamAdapter()", "full_signature": "public  CameraStreamAdapter()", "class_method_signature": "CameraStreamAdapter.CameraStreamAdapter()", "testcase": false, "constructor": true}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "CameraStreamAdapter.flush()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanUp()", "full_signature": "@Override public void cleanUp()", "class_method_signature": "CameraStreamAdapter.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] buffer, int bufferPosition)", "modifiers": "@Override public", "return": "CameraServerData", "signature": "CameraServerData deserialize(byte[] buffer, int bufferPosition)", "full_signature": "@Override public CameraServerData deserialize(byte[] buffer, int bufferPosition)", "class_method_signature": "CameraStreamAdapter.deserialize(byte[] buffer, int bufferPosition)", "testcase": false, "constructor": false}, {"identifier": "getSerializedSize", "parameters": "(CameraServerData value)", "modifiers": "@Override public", "return": "int", "signature": "int getSerializedSize(CameraServerData value)", "full_signature": "@Override public int getSerializedSize(CameraServerData value)", "class_method_signature": "CameraStreamAdapter.getSerializedSize(CameraServerData value)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(CameraServerData data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize(CameraServerData data)", "full_signature": "@Override public byte[] serialize(CameraServerData data)", "class_method_signature": "CameraStreamAdapter.serialize(CameraServerData data)", "testcase": false, "constructor": false}, {"identifier": "videoFilePath", "parameters": "(File rootRecordingFile, String cameraName, int fileIndex)", "modifiers": "public static", "return": "String", "signature": "String videoFilePath(File rootRecordingFile, String cameraName, int fileIndex)", "full_signature": "public static String videoFilePath(File rootRecordingFile, String cameraName, int fileIndex)", "class_method_signature": "CameraStreamAdapter.videoFilePath(File rootRecordingFile, String cameraName, int fileIndex)", "testcase": false, "constructor": false}], "file": "plugins/cameraserver/src/main/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraStreamAdapter.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] buffer, int bufferPosition)", "modifiers": "@Override public", "return": "CameraServerData", "body": "@Override\n  public CameraServerData deserialize(byte[] buffer, int bufferPosition) {\n    int cursor = bufferPosition;\n    final String name = readString(buffer, cursor);\n    cursor += name.length() + SIZE_OF_INT;\n    final byte fileNum = buffer[cursor];\n    cursor++;\n    final short frameNum = readShort(buffer, cursor);\n    cursor += SIZE_OF_SHORT;\n    final int bandwidth = readInt(buffer, cursor);\n    cursor += SIZE_OF_INT;\n    final double fps = readShort(buffer, cursor) / 100.0;\n\n    CameraStreamReader reader = readers.computeIfAbsent(name, __ -> new CameraStreamReader(__, getCurrentFile()));\n\n    return new LazyCameraServerData(name, fileNum, frameNum, () -> {\n      try {\n        reader.setFileNumber(fileNum);\n        return reader.readFrame(frameNum);\n      } catch (IOException e) {\n        log.log(Level.WARNING, \"Could not read frame \" + frameNum, e);\n        return null;\n      }\n    }, fps, bandwidth);\n  }", "signature": "CameraServerData deserialize(byte[] buffer, int bufferPosition)", "full_signature": "@Override public CameraServerData deserialize(byte[] buffer, int bufferPosition)", "class_method_signature": "CameraStreamAdapter.deserialize(byte[] buffer, int bufferPosition)", "testcase": false, "constructor": false, "invocations": ["readString", "length", "readShort", "readInt", "readShort", "computeIfAbsent", "getCurrentFile", "setFileNumber", "readFrame", "log"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}