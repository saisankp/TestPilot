{"test_class": {"identifier": "MinimumEquivalentCyclicSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/MinimumEquivalentCyclicSetTest.java"}, "test_case": {"identifier": "testFind_OneChoice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFind_OneChoice() throws Exception {\n\n        IAtomContainer dummy = mock(IAtomContainer.class);\n        int[][] g = new int[][]{{1, 5, 6}, {0, 2}, {1, 3}, {2, 4, 7}, {3, 5}, {0, 4}, {0}, {3}};\n\n        // this mock the invariants\n        long[] values = new long[]{1, 0, 0, 1, 0, 0, 2, 2};\n\n        EquivalentSetFinder finder = new MinimumEquivalentCyclicSet();\n        Set<Integer> set = finder.find(values, dummy, g);\n\n        assertThat(set.size(), is(2));\n        assertTrue(set.contains(0));\n        assertTrue(set.contains(3));\n\n    }", "signature": "void testFind_OneChoice()", "full_signature": "@Test public void testFind_OneChoice()", "class_method_signature": "MinimumEquivalentCyclicSetTest.testFind_OneChoice()", "testcase": true, "constructor": false, "invocations": ["mock", "find", "assertThat", "size", "is", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "MinimumEquivalentCyclicSet", "superclass": "extends EquivalentSetFinder", "interfaces": "", "fields": [], "methods": [{"identifier": "find", "parameters": "(long[] invariants, IAtomContainer container, int[][] graph)", "modifiers": "@Override", "return": "Set<Integer>", "signature": "Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph)", "full_signature": "@Override Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph)", "class_method_signature": "MinimumEquivalentCyclicSet.find(long[] invariants, IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/MinimumEquivalentCyclicSet.java"}, "focal_method": {"identifier": "find", "parameters": "(long[] invariants, IAtomContainer container, int[][] graph)", "modifiers": "@Override", "return": "Set<Integer>", "body": "@Override\n    Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph) {\n\n        int n = invariants.length;\n\n        // find cyclic vertices using DFS\n        RingSearch ringSearch = new RingSearch(container, graph);\n\n        // ordered map of the set of vertices for each value\n        Map<Long, Set<Integer>> equivalent = new TreeMap<Long, Set<Integer>>();\n\n        // divide the invariants into equivalent indexed and ordered sets\n        for (int i = 0; i < invariants.length; i++) {\n\n            Long invariant = invariants[i];\n            Set<Integer> set = equivalent.get(invariant);\n\n            if (set == null) {\n                if (ringSearch.cyclic(i)) {\n                    set = new HashSet<Integer>(n / 2);\n                    set.add(i);\n                    equivalent.put(invariant, set);\n                }\n            } else {\n                set.add(i);\n            }\n        }\n\n        // find the smallest set of equivalent cyclic vertices\n        int minSize = Integer.MAX_VALUE;\n        Set<Integer> min = Collections.emptySet();\n        for (Map.Entry<Long, Set<Integer>> e : equivalent.entrySet()) {\n            Set<Integer> vertices = e.getValue();\n            if (vertices.size() < minSize && vertices.size() > 1) {\n                min = vertices;\n                minSize = vertices.size();\n            }\n        }\n\n        return min;\n    }", "signature": "Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph)", "full_signature": "@Override Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph)", "class_method_signature": "MinimumEquivalentCyclicSet.find(long[] invariants, IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false, "invocations": ["get", "cyclic", "add", "put", "add", "emptySet", "entrySet", "getValue", "size", "size", "size"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}