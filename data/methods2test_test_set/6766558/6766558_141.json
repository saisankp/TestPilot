{"test_class": {"identifier": "RollingThreadPoolMaxConcurrencyStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "RollingThreadPoolMaxConcurrencyStream stream;", "modifier": "", "type": "RollingThreadPoolMaxConcurrencyStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "HystrixRequestContext context;", "modifier": "", "type": "HystrixRequestContext", "declarator": "context", "var_name": "context"}, {"original_string": "ExecutorService threadPool;", "modifier": "", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingThreadPoolMaxConcurrencyStreamTest.java"}, "test_case": {"identifier": "testMultipleCommandsCarryOverMultipleBucketsAndThenAgeOut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleCommandsCarryOverMultipleBucketsAndThenAgeOut() throws InterruptedException {\n        HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"ThreadPool-Concurrency-F\");\n        HystrixThreadPoolKey threadPoolKey = HystrixThreadPoolKey.Factory.asKey(\"ThreadPool-Concurrency-F\");\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(\"RollingConcurrency-F\");\n        stream = RollingThreadPoolMaxConcurrencyStream.getInstance(threadPoolKey, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(30).subscribe(getSubscriber(latch));\n\n        Command cmd1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 300);\n        Command cmd2 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 300);\n        Command cmd3 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 10);\n        Command cmd4 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 10);\n\n        cmd1.observe();\n        Thread.sleep(100); //bucket roll\n        cmd2.observe();\n        Thread.sleep(100);\n        cmd3.observe();\n        Thread.sleep(100);\n        cmd4.observe();\n\n        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        assertEquals(0, stream.getLatestRollingMax());\n    }", "signature": "void testMultipleCommandsCarryOverMultipleBucketsAndThenAgeOut()", "full_signature": "@Test public void testMultipleCommandsCarryOverMultipleBucketsAndThenAgeOut()", "class_method_signature": "RollingThreadPoolMaxConcurrencyStreamTest.testMultipleCommandsCarryOverMultipleBucketsAndThenAgeOut()", "testcase": true, "constructor": false, "invocations": ["asKey", "asKey", "asKey", "getInstance", "startCachingStreamValuesIfUnstarted", "subscribe", "take", "observe", "getSubscriber", "from", "from", "from", "from", "observe", "sleep", "observe", "sleep", "observe", "sleep", "observe", "assertTrue", "await", "assertEquals", "getLatestRollingMax"]}, "focal_class": {"identifier": "RollingThreadPoolMaxConcurrencyStream", "superclass": "extends RollingConcurrencyStream", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, RollingThreadPoolMaxConcurrencyStream> streams = new ConcurrentHashMap<String, RollingThreadPoolMaxConcurrencyStream>();", "modifier": "private static final", "type": "ConcurrentMap<String, RollingThreadPoolMaxConcurrencyStream>", "declarator": "streams = new ConcurrentHashMap<String, RollingThreadPoolMaxConcurrencyStream>()", "var_name": "streams"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "modifiers": "public static", "return": "RollingThreadPoolMaxConcurrencyStream", "signature": "RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "full_signature": "public static RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "class_method_signature": "RollingThreadPoolMaxConcurrencyStream.getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixThreadPoolKey threadPoolKey, int numBuckets, int bucketSizeInMs)", "modifiers": "public static", "return": "RollingThreadPoolMaxConcurrencyStream", "signature": "RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, int numBuckets, int bucketSizeInMs)", "full_signature": "public static RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, int numBuckets, int bucketSizeInMs)", "class_method_signature": "RollingThreadPoolMaxConcurrencyStream.getInstance(HystrixThreadPoolKey threadPoolKey, int numBuckets, int bucketSizeInMs)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "RollingThreadPoolMaxConcurrencyStream.reset()", "testcase": false, "constructor": false}, {"identifier": "RollingThreadPoolMaxConcurrencyStream", "parameters": "(final HystrixThreadPoolKey threadPoolKey, final int numBuckets, final int bucketSizeInMs)", "modifiers": "public", "return": "", "signature": " RollingThreadPoolMaxConcurrencyStream(final HystrixThreadPoolKey threadPoolKey, final int numBuckets, final int bucketSizeInMs)", "full_signature": "public  RollingThreadPoolMaxConcurrencyStream(final HystrixThreadPoolKey threadPoolKey, final int numBuckets, final int bucketSizeInMs)", "class_method_signature": "RollingThreadPoolMaxConcurrencyStream.RollingThreadPoolMaxConcurrencyStream(final HystrixThreadPoolKey threadPoolKey, final int numBuckets, final int bucketSizeInMs)", "testcase": false, "constructor": true}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/RollingThreadPoolMaxConcurrencyStream.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "modifiers": "public static", "return": "RollingThreadPoolMaxConcurrencyStream", "body": "public static RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties) {\n        final int counterMetricWindow = properties.metricsRollingStatisticalWindowInMilliseconds().get();\n        final int numCounterBuckets = properties.metricsRollingStatisticalWindowBuckets().get();\n        final int counterBucketSizeInMs = counterMetricWindow / numCounterBuckets;\n\n        return getInstance(threadPoolKey, numCounterBuckets, counterBucketSizeInMs);\n    }", "signature": "RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "full_signature": "public static RollingThreadPoolMaxConcurrencyStream getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "class_method_signature": "RollingThreadPoolMaxConcurrencyStream.getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties properties)", "testcase": false, "constructor": false, "invocations": ["get", "metricsRollingStatisticalWindowInMilliseconds", "get", "metricsRollingStatisticalWindowBuckets", "getInstance"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}