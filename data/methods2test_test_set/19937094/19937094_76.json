{"test_class": {"identifier": "FIXMessageDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FIXMessageDecoder decoder;", "modifier": "private", "type": "FIXMessageDecoder", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "private IoBuffer buffer;", "modifier": "private", "type": "IoBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private ProtocolDecoderOutputForTest decoderOutput;", "modifier": "private", "type": "ProtocolDecoderOutputForTest", "declarator": "decoderOutput", "var_name": "decoderOutput"}, {"original_string": "private static final PatternMatcher HEADER_PATTERN = new PatternMatcher(\"8=FIXt.?.?\\0019=\");", "modifier": "private static final", "type": "PatternMatcher", "declarator": "HEADER_PATTERN = new PatternMatcher(\"8=FIXt.?.?\\0019=\")", "var_name": "HEADER_PATTERN"}], "file": "quickfixj-core/src/test/java/quickfix/mina/message/FIXMessageDecoderTest.java"}, "test_case": {"identifier": "testPartialHeaderFixt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartialHeaderFixt() throws Exception {\n        setUpBuffer(\"8=FIXT.1.1\\0019\");\n        assertEquals(\"wrong result\", MessageDecoderResult.NEED_DATA, decoder\n                .decodable(null, buffer));\n    }", "signature": "void testPartialHeaderFixt()", "full_signature": "@Test public void testPartialHeaderFixt()", "class_method_signature": "FIXMessageDecoderTest.testPartialHeaderFixt()", "testcase": true, "constructor": false, "invocations": ["setUpBuffer", "assertEquals", "decodable"]}, "focal_class": {"identifier": "FIXMessageDecoder", "superclass": "", "interfaces": "implements MessageDecoder", "fields": [{"original_string": "private static final char SOH = '\\001';", "modifier": "private static final", "type": "char", "declarator": "SOH = '\\001'", "var_name": "SOH"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private final PatternMatcher HEADER_PATTERN;", "modifier": "private final", "type": "PatternMatcher", "declarator": "HEADER_PATTERN", "var_name": "HEADER_PATTERN"}, {"original_string": "private final PatternMatcher CHECKSUM_PATTERN;", "modifier": "private final", "type": "PatternMatcher", "declarator": "CHECKSUM_PATTERN", "var_name": "CHECKSUM_PATTERN"}, {"original_string": "private final PatternMatcher LOGON_PATTERN;", "modifier": "private final", "type": "PatternMatcher", "declarator": "LOGON_PATTERN", "var_name": "LOGON_PATTERN"}, {"original_string": "private static final int SEEKING_HEADER = 1;", "modifier": "private static final", "type": "int", "declarator": "SEEKING_HEADER = 1", "var_name": "SEEKING_HEADER"}, {"original_string": "private static final int PARSING_LENGTH = 2;", "modifier": "private static final", "type": "int", "declarator": "PARSING_LENGTH = 2", "var_name": "PARSING_LENGTH"}, {"original_string": "private static final int READING_BODY = 3;", "modifier": "private static final", "type": "int", "declarator": "READING_BODY = 3", "var_name": "READING_BODY"}, {"original_string": "private static final int PARSING_CHECKSUM = 4;", "modifier": "private static final", "type": "int", "declarator": "PARSING_CHECKSUM = 4", "var_name": "PARSING_CHECKSUM"}, {"original_string": "private static final int MAX_UNDECODED_DATA_LENGTH = 4096;", "modifier": "private static final", "type": "int", "declarator": "MAX_UNDECODED_DATA_LENGTH = 4096", "var_name": "MAX_UNDECODED_DATA_LENGTH"}, {"original_string": "private int state;", "modifier": "private", "type": "int", "declarator": "state", "var_name": "state"}, {"original_string": "private int bodyLength;", "modifier": "private", "type": "int", "declarator": "bodyLength", "var_name": "bodyLength"}, {"original_string": "private int position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private final String charsetEncoding;", "modifier": "private final", "type": "String", "declarator": "charsetEncoding", "var_name": "charsetEncoding"}], "methods": [{"identifier": "resetState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetState()", "full_signature": "private void resetState()", "class_method_signature": "FIXMessageDecoder.resetState()", "testcase": false, "constructor": false}, {"identifier": "FIXMessageDecoder", "parameters": "()", "modifiers": "public", "return": "", "signature": " FIXMessageDecoder()", "full_signature": "public  FIXMessageDecoder()", "class_method_signature": "FIXMessageDecoder.FIXMessageDecoder()", "testcase": false, "constructor": true}, {"identifier": "FIXMessageDecoder", "parameters": "(String charset)", "modifiers": "public", "return": "", "signature": " FIXMessageDecoder(String charset)", "full_signature": "public  FIXMessageDecoder(String charset)", "class_method_signature": "FIXMessageDecoder.FIXMessageDecoder(String charset)", "testcase": false, "constructor": true}, {"identifier": "FIXMessageDecoder", "parameters": "(String charset, String delimiter)", "modifiers": "public", "return": "", "signature": " FIXMessageDecoder(String charset, String delimiter)", "full_signature": "public  FIXMessageDecoder(String charset, String delimiter)", "class_method_signature": "FIXMessageDecoder.FIXMessageDecoder(String charset, String delimiter)", "testcase": false, "constructor": true}, {"identifier": "decodable", "parameters": "(IoSession session, IoBuffer in)", "modifiers": "@Override public", "return": "MessageDecoderResult", "signature": "MessageDecoderResult decodable(IoSession session, IoBuffer in)", "full_signature": "@Override public MessageDecoderResult decodable(IoSession session, IoBuffer in)", "class_method_signature": "FIXMessageDecoder.decodable(IoSession session, IoBuffer in)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "modifiers": "@Override public", "return": "MessageDecoderResult", "signature": "MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "full_signature": "@Override public MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "class_method_signature": "FIXMessageDecoder.decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "testcase": false, "constructor": false}, {"identifier": "parseMessage", "parameters": "(IoBuffer in, ProtocolDecoderOutput out)", "modifiers": "private", "return": "boolean", "signature": "boolean parseMessage(IoBuffer in, ProtocolDecoderOutput out)", "full_signature": "private boolean parseMessage(IoBuffer in, ProtocolDecoderOutput out)", "class_method_signature": "FIXMessageDecoder.parseMessage(IoBuffer in, ProtocolDecoderOutput out)", "testcase": false, "constructor": false}, {"identifier": "getBufferDebugInfo", "parameters": "(IoBuffer in)", "modifiers": "private", "return": "String", "signature": "String getBufferDebugInfo(IoBuffer in)", "full_signature": "private String getBufferDebugInfo(IoBuffer in)", "class_method_signature": "FIXMessageDecoder.getBufferDebugInfo(IoBuffer in)", "testcase": false, "constructor": false}, {"identifier": "getMessageString", "parameters": "(IoBuffer buffer)", "modifiers": "private", "return": "String", "signature": "String getMessageString(IoBuffer buffer)", "full_signature": "private String getMessageString(IoBuffer buffer)", "class_method_signature": "FIXMessageDecoder.getMessageString(IoBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "getMessageStringForError", "parameters": "(IoBuffer buffer)", "modifiers": "private", "return": "String", "signature": "String getMessageStringForError(IoBuffer buffer)", "full_signature": "private String getMessageStringForError(IoBuffer buffer)", "class_method_signature": "FIXMessageDecoder.getMessageStringForError(IoBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(IoBuffer buffer, int recoveryPosition, String text,\n            boolean disconnect)", "modifiers": "private", "return": "void", "signature": "void handleError(IoBuffer buffer, int recoveryPosition, String text,\n            boolean disconnect)", "full_signature": "private void handleError(IoBuffer buffer, int recoveryPosition, String text,\n            boolean disconnect)", "class_method_signature": "FIXMessageDecoder.handleError(IoBuffer buffer, int recoveryPosition, String text,\n            boolean disconnect)", "testcase": false, "constructor": false}, {"identifier": "isLogon", "parameters": "(IoBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean isLogon(IoBuffer buffer)", "full_signature": "private boolean isLogon(IoBuffer buffer)", "class_method_signature": "FIXMessageDecoder.isLogon(IoBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "finishDecode", "parameters": "(IoSession session, ProtocolDecoderOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void finishDecode(IoSession session, ProtocolDecoderOutput out)", "full_signature": "@Override public void finishDecode(IoSession session, ProtocolDecoderOutput out)", "class_method_signature": "FIXMessageDecoder.finishDecode(IoSession session, ProtocolDecoderOutput out)", "testcase": false, "constructor": false}, {"identifier": "extractMessages", "parameters": "(File file)", "modifiers": "public", "return": "List<String>", "signature": "List<String> extractMessages(File file)", "full_signature": "public List<String> extractMessages(File file)", "class_method_signature": "FIXMessageDecoder.extractMessages(File file)", "testcase": false, "constructor": false}, {"identifier": "extractMessages", "parameters": "(File file, final MessageListener listener)", "modifiers": "public", "return": "void", "signature": "void extractMessages(File file, final MessageListener listener)", "full_signature": "public void extractMessages(File file, final MessageListener listener)", "class_method_signature": "FIXMessageDecoder.extractMessages(File file, final MessageListener listener)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/mina/message/FIXMessageDecoder.java"}, "focal_method": {"identifier": "decodable", "parameters": "(IoSession session, IoBuffer in)", "modifiers": "@Override public", "return": "MessageDecoderResult", "body": "@Override\n    public MessageDecoderResult decodable(IoSession session, IoBuffer in) {\n        boolean hasHeader = HEADER_PATTERN.find(in, in.position()) != -1L;\n        return hasHeader ? MessageDecoderResult.OK :\n            (in.remaining() > MAX_UNDECODED_DATA_LENGTH ? MessageDecoderResult.NOT_OK : MessageDecoderResult.NEED_DATA);\n    }", "signature": "MessageDecoderResult decodable(IoSession session, IoBuffer in)", "full_signature": "@Override public MessageDecoderResult decodable(IoSession session, IoBuffer in)", "class_method_signature": "FIXMessageDecoder.decodable(IoSession session, IoBuffer in)", "testcase": false, "constructor": false, "invocations": ["find", "position", "remaining"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}