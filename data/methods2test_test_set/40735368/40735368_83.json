{"test_class": {"identifier": "RasterLayerRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/RasterLayerRequestTest.java"}, "test_case": {"identifier": "testResolutions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolutions() throws Exception {\n        // get some test data\n        final File testMosaic = TestData.file(this, \"/overview/0\");\n        assertTrue(testMosaic.exists());\n\n        // build the objects we need to get to build a raster layer request\n        final ImageMosaicReader reader = (ImageMosaicReader) new ImageMosaicFormat().getReader(\n                testMosaic, null);\n        final RasterManager manager = reader.getRasterManager(reader.getGridCoverageNames()[0]);\n\n        GeneralEnvelope oe = reader.getOriginalEnvelope();\n        double offset = oe.getSpan(0) * 0.9;\n        GeneralEnvelope reNative = new GeneralEnvelope(oe);\n        reNative.setRange(0, oe.getMinimum(0) - offset, oe.getMaximum(0) - offset);\n        Envelope reTransformed = CRS.transform(reNative, CRS.decode(\"EPSG:3857\", true));\n        // System.out.println(reader.getOriginalGridRange());\n        // the raster has bands like this, let's ask for the coarser grained overview\n        // Band 1 Block=140x58 Type=Byte, ColorInterp=Gray\n        // Overviews: 70x94, 35x47\n        GridGeometry2D gg = new GridGeometry2D(new GridEnvelope2D(0, 0, 35, 47), reTransformed);\n\n        ParameterValue<GridGeometry2D> ggParam = AbstractGridFormat.READ_GRIDGEOMETRY2D\n                .createValue();\n        ggParam.setValue(gg);\n\n        // Creating a request\n        final RasterLayerRequest request = new RasterLayerRequest(\n                new GeneralParameterValue[] { ggParam }, manager);\n        double[] rr = request.spatialRequestHelper.getComputedResolution();\n        // System.out.println(Arrays.toString(rr));\n        double resolution = Math.min(rr[0], rr[1]);\n        // System.out.println(resolution);\n        // native resolution is ~16, overviews are at 32 and 64, the request really needs 64\n        assertTrue(resolution > 60);\n    }", "signature": "void testResolutions()", "full_signature": "@Test public void testResolutions()", "class_method_signature": "RasterLayerRequestTest.testResolutions()", "testcase": true, "constructor": false, "invocations": ["file", "assertTrue", "exists", "getReader", "getRasterManager", "getGridCoverageNames", "getOriginalEnvelope", "getSpan", "setRange", "getMinimum", "getMaximum", "transform", "decode", "createValue", "setValue", "getComputedResolution", "min", "assertTrue"]}, "focal_class": {"identifier": "RasterLayerRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(RasterLayerRequest.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(RasterLayerRequest.class)", "var_name": "LOGGER"}, {"original_string": "private ReadType readType = AbstractGridFormat.USE_JAI_IMAGEREAD.getDefaultValue()?ReadType.JAI_IMAGEREAD:ReadType.DIRECT_READ;", "modifier": "private", "type": "ReadType", "declarator": "readType = AbstractGridFormat.USE_JAI_IMAGEREAD.getDefaultValue()?ReadType.JAI_IMAGEREAD:ReadType.DIRECT_READ", "var_name": "readType"}, {"original_string": "SpatialRequestHelper spatialRequestHelper;", "modifier": "", "type": "SpatialRequestHelper", "declarator": "spatialRequestHelper", "var_name": "spatialRequestHelper"}, {"original_string": "private DecimationPolicy decimationPolicy;", "modifier": "private", "type": "DecimationPolicy", "declarator": "decimationPolicy", "var_name": "decimationPolicy"}, {"original_string": "private OverviewPolicy overviewPolicy;", "modifier": "private", "type": "OverviewPolicy", "declarator": "overviewPolicy", "var_name": "overviewPolicy"}, {"original_string": "private Interpolation interpolation;", "modifier": "private", "type": "Interpolation", "declarator": "interpolation", "var_name": "interpolation"}, {"original_string": "private FootprintBehavior footprintBehavior = FootprintBehavior.None;", "modifier": "private", "type": "FootprintBehavior", "declarator": "footprintBehavior = FootprintBehavior.None", "var_name": "footprintBehavior"}, {"original_string": "private int defaultArtifactsFilterThreshold = Integer.MIN_VALUE;", "modifier": "private", "type": "int", "declarator": "defaultArtifactsFilterThreshold = Integer.MIN_VALUE", "var_name": "defaultArtifactsFilterThreshold"}, {"original_string": "private double artifactsFilterPTileThreshold;", "modifier": "private", "type": "double", "declarator": "artifactsFilterPTileThreshold", "var_name": "artifactsFilterPTileThreshold"}, {"original_string": "private boolean heterogeneousGranules = false;", "modifier": "private", "type": "boolean", "declarator": "heterogeneousGranules = false", "var_name": "heterogeneousGranules"}, {"original_string": "RasterManager rasterManager;", "modifier": "", "type": "RasterManager", "declarator": "rasterManager", "var_name": "rasterManager"}, {"original_string": "private Color inputTransparentColor=AbstractGridFormat.INPUT_TRANSPARENT_COLOR.getDefaultValue();", "modifier": "private", "type": "Color", "declarator": "inputTransparentColor=AbstractGridFormat.INPUT_TRANSPARENT_COLOR.getDefaultValue()", "var_name": "inputTransparentColor"}, {"original_string": "private boolean blend=ImageMosaicFormat.FADING.getDefaultValue();", "modifier": "private", "type": "boolean", "declarator": "blend=ImageMosaicFormat.FADING.getDefaultValue()", "var_name": "blend"}, {"original_string": "private MergeBehavior mergeBehavior=MergeBehavior.getDefault();", "modifier": "private", "type": "MergeBehavior", "declarator": "mergeBehavior=MergeBehavior.getDefault()", "var_name": "mergeBehavior"}, {"original_string": "private Color outputTransparentColor=ImageMosaicFormat.OUTPUT_TRANSPARENT_COLOR.getDefaultValue();", "modifier": "private", "type": "Color", "declarator": "outputTransparentColor=ImageMosaicFormat.OUTPUT_TRANSPARENT_COLOR.getDefaultValue()", "var_name": "outputTransparentColor"}, {"original_string": "private int maximumNumberOfGranules=ImageMosaicFormat.MAX_ALLOWED_TILES.getDefaultValue().intValue();", "modifier": "private", "type": "int", "declarator": "maximumNumberOfGranules=ImageMosaicFormat.MAX_ALLOWED_TILES.getDefaultValue().intValue()", "var_name": "maximumNumberOfGranules"}, {"original_string": "private double[] backgroundValues;", "modifier": "private", "type": "double[]", "declarator": "backgroundValues", "var_name": "backgroundValues"}, {"original_string": "private Dimension tileDimensions;", "modifier": "private", "type": "Dimension", "declarator": "tileDimensions", "var_name": "tileDimensions"}, {"original_string": "private boolean multithreadingAllowed;", "modifier": "private", "type": "boolean", "declarator": "multithreadingAllowed", "var_name": "multithreadingAllowed"}, {"original_string": "private List<?> requestedTimes;", "modifier": "private", "type": "List<?>", "declarator": "requestedTimes", "var_name": "requestedTimes"}, {"original_string": "private List<?> elevation;", "modifier": "private", "type": "List<?>", "declarator": "elevation", "var_name": "elevation"}, {"original_string": "private Filter filter;", "modifier": "private", "type": "Filter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private boolean accurateResolution;", "modifier": "private", "type": "boolean", "declarator": "accurateResolution", "var_name": "accurateResolution"}, {"original_string": "private final Map<String,List> requestedAdditionalDomains = new HashMap<String,List>();", "modifier": "private final", "type": "Map<String,List>", "declarator": "requestedAdditionalDomains = new HashMap<String,List>()", "var_name": "requestedAdditionalDomains"}, {"original_string": "private String sortClause;", "modifier": "private", "type": "String", "declarator": "sortClause", "var_name": "sortClause"}], "methods": [{"identifier": "getElevation", "parameters": "()", "modifiers": "public", "return": "List<?>", "signature": "List<?> getElevation()", "full_signature": "public List<?> getElevation()", "class_method_signature": "RasterLayerRequest.getElevation()", "testcase": false, "constructor": false}, {"identifier": "getSortClause", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSortClause()", "full_signature": "public String getSortClause()", "class_method_signature": "RasterLayerRequest.getSortClause()", "testcase": false, "constructor": false}, {"identifier": "setSortClause", "parameters": "(String sortClause)", "modifiers": "public", "return": "void", "signature": "void setSortClause(String sortClause)", "full_signature": "public void setSortClause(String sortClause)", "class_method_signature": "RasterLayerRequest.setSortClause(String sortClause)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getFilter()", "full_signature": "public Filter getFilter()", "class_method_signature": "RasterLayerRequest.getFilter()", "testcase": false, "constructor": false}, {"identifier": "getRequestedTimes", "parameters": "()", "modifiers": "public", "return": "List<?>", "signature": "List<?> getRequestedTimes()", "full_signature": "public List<?> getRequestedTimes()", "class_method_signature": "RasterLayerRequest.getRequestedTimes()", "testcase": false, "constructor": false}, {"identifier": "isMultithreadingAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMultithreadingAllowed()", "full_signature": "public boolean isMultithreadingAllowed()", "class_method_signature": "RasterLayerRequest.isMultithreadingAllowed()", "testcase": false, "constructor": false}, {"identifier": "getDecimationPolicy", "parameters": "()", "modifiers": "public", "return": "DecimationPolicy", "signature": "DecimationPolicy getDecimationPolicy()", "full_signature": "public DecimationPolicy getDecimationPolicy()", "class_method_signature": "RasterLayerRequest.getDecimationPolicy()", "testcase": false, "constructor": false}, {"identifier": "isHeterogeneousGranules", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHeterogeneousGranules()", "full_signature": "public boolean isHeterogeneousGranules()", "class_method_signature": "RasterLayerRequest.isHeterogeneousGranules()", "testcase": false, "constructor": false}, {"identifier": "setHeterogeneousGranules", "parameters": "(final boolean heterogeneousGranules)", "modifiers": "public", "return": "void", "signature": "void setHeterogeneousGranules(final boolean heterogeneousGranules)", "full_signature": "public void setHeterogeneousGranules(final boolean heterogeneousGranules)", "class_method_signature": "RasterLayerRequest.setHeterogeneousGranules(final boolean heterogeneousGranules)", "testcase": false, "constructor": false}, {"identifier": "getRasterManager", "parameters": "()", "modifiers": "", "return": "RasterManager", "signature": "RasterManager getRasterManager()", "full_signature": " RasterManager getRasterManager()", "class_method_signature": "RasterLayerRequest.getRasterManager()", "testcase": false, "constructor": false}, {"identifier": "getRequestedAdditionalDomains", "parameters": "()", "modifiers": "public", "return": "Map<String, List>", "signature": "Map<String, List> getRequestedAdditionalDomains()", "full_signature": "public Map<String, List> getRequestedAdditionalDomains()", "class_method_signature": "RasterLayerRequest.getRequestedAdditionalDomains()", "testcase": false, "constructor": false}, {"identifier": "RasterLayerRequest", "parameters": "(final GeneralParameterValue[] params, final RasterManager rasterManager)", "modifiers": "public", "return": "", "signature": " RasterLayerRequest(final GeneralParameterValue[] params, final RasterManager rasterManager)", "full_signature": "public  RasterLayerRequest(final GeneralParameterValue[] params, final RasterManager rasterManager)", "class_method_signature": "RasterLayerRequest.RasterLayerRequest(final GeneralParameterValue[] params, final RasterManager rasterManager)", "testcase": false, "constructor": true}, {"identifier": "setDefaultParameterValues", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultParameterValues()", "full_signature": "private void setDefaultParameterValues()", "class_method_signature": "RasterLayerRequest.setDefaultParameterValues()", "testcase": false, "constructor": false}, {"identifier": "extractParameter", "parameters": "(ParameterValue<?> param, Identifier name)", "modifiers": "private", "return": "void", "signature": "void extractParameter(ParameterValue<?> param, Identifier name)", "full_signature": "private void extractParameter(ParameterValue<?> param, Identifier name)", "class_method_signature": "RasterLayerRequest.extractParameter(ParameterValue<?> param, Identifier name)", "testcase": false, "constructor": false}, {"identifier": "isAccurateResolution", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAccurateResolution()", "full_signature": "public boolean isAccurateResolution()", "class_method_signature": "RasterLayerRequest.isAccurateResolution()", "testcase": false, "constructor": false}, {"identifier": "setAccurateResolution", "parameters": "(boolean accurateResolution)", "modifiers": "public", "return": "void", "signature": "void setAccurateResolution(boolean accurateResolution)", "full_signature": "public void setAccurateResolution(boolean accurateResolution)", "class_method_signature": "RasterLayerRequest.setAccurateResolution(boolean accurateResolution)", "testcase": false, "constructor": false}, {"identifier": "checkReadType", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkReadType()", "full_signature": "private void checkReadType()", "class_method_signature": "RasterLayerRequest.checkReadType()", "testcase": false, "constructor": false}, {"identifier": "getInputTransparentColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getInputTransparentColor()", "full_signature": "public Color getInputTransparentColor()", "class_method_signature": "RasterLayerRequest.getInputTransparentColor()", "testcase": false, "constructor": false}, {"identifier": "getOutputTransparentColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getOutputTransparentColor()", "full_signature": "public Color getOutputTransparentColor()", "class_method_signature": "RasterLayerRequest.getOutputTransparentColor()", "testcase": false, "constructor": false}, {"identifier": "getMaximumNumberOfGranules", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximumNumberOfGranules()", "full_signature": "public int getMaximumNumberOfGranules()", "class_method_signature": "RasterLayerRequest.getMaximumNumberOfGranules()", "testcase": false, "constructor": false}, {"identifier": "getFootprintBehavior", "parameters": "()", "modifiers": "public", "return": "FootprintBehavior", "signature": "FootprintBehavior getFootprintBehavior()", "full_signature": "public FootprintBehavior getFootprintBehavior()", "class_method_signature": "RasterLayerRequest.getFootprintBehavior()", "testcase": false, "constructor": false}, {"identifier": "getDefaultArtifactsFilterThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDefaultArtifactsFilterThreshold()", "full_signature": "public int getDefaultArtifactsFilterThreshold()", "class_method_signature": "RasterLayerRequest.getDefaultArtifactsFilterThreshold()", "testcase": false, "constructor": false}, {"identifier": "getArtifactsFilterPTileThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getArtifactsFilterPTileThreshold()", "full_signature": "public double getArtifactsFilterPTileThreshold()", "class_method_signature": "RasterLayerRequest.getArtifactsFilterPTileThreshold()", "testcase": false, "constructor": false}, {"identifier": "isBlend", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlend()", "full_signature": "public boolean isBlend()", "class_method_signature": "RasterLayerRequest.isBlend()", "testcase": false, "constructor": false}, {"identifier": "getReadType", "parameters": "()", "modifiers": "public", "return": "ReadType", "signature": "ReadType getReadType()", "full_signature": "public ReadType getReadType()", "class_method_signature": "RasterLayerRequest.getReadType()", "testcase": false, "constructor": false}, {"identifier": "getBackgroundValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getBackgroundValues()", "full_signature": "public double[] getBackgroundValues()", "class_method_signature": "RasterLayerRequest.getBackgroundValues()", "testcase": false, "constructor": false}, {"identifier": "setInterpolation", "parameters": "(Interpolation interpolation)", "modifiers": "public", "return": "void", "signature": "void setInterpolation(Interpolation interpolation)", "full_signature": "public void setInterpolation(Interpolation interpolation)", "class_method_signature": "RasterLayerRequest.setInterpolation(Interpolation interpolation)", "testcase": false, "constructor": false}, {"identifier": "getInterpolation", "parameters": "()", "modifiers": "public", "return": "Interpolation", "signature": "Interpolation getInterpolation()", "full_signature": "public Interpolation getInterpolation()", "class_method_signature": "RasterLayerRequest.getInterpolation()", "testcase": false, "constructor": false}, {"identifier": "getTileDimensions", "parameters": "()", "modifiers": "public", "return": "Dimension", "signature": "Dimension getTileDimensions()", "full_signature": "public Dimension getTileDimensions()", "class_method_signature": "RasterLayerRequest.getTileDimensions()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RasterLayerRequest.toString()", "testcase": false, "constructor": false}, {"identifier": "getMergeBehavior", "parameters": "()", "modifiers": "public", "return": "MergeBehavior", "signature": "MergeBehavior getMergeBehavior()", "full_signature": "public MergeBehavior getMergeBehavior()", "class_method_signature": "RasterLayerRequest.getMergeBehavior()", "testcase": false, "constructor": false}, {"identifier": "getOverviewPolicy", "parameters": "()", "modifiers": "public", "return": "OverviewPolicy", "signature": "OverviewPolicy getOverviewPolicy()", "full_signature": "public OverviewPolicy getOverviewPolicy()", "class_method_signature": "RasterLayerRequest.getOverviewPolicy()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "RasterLayerRequest.isEmpty()", "testcase": false, "constructor": false}], "file": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/RasterLayerRequest.java"}, "focal_method": {"identifier": "getRasterManager", "parameters": "()", "modifiers": "", "return": "RasterManager", "body": "RasterManager getRasterManager() {\n        return rasterManager;\n    }", "signature": "RasterManager getRasterManager()", "full_signature": " RasterManager getRasterManager()", "class_method_signature": "RasterLayerRequest.getRasterManager()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}