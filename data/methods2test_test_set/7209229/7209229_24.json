{"test_class": {"identifier": "TestFileSystemVersionedSchemaSetProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_SCHEMA1_TEXT =\n    \"{\\\"name\\\":\\\"schema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA1_TEXT =\n    \"{\\\"name\\\":\\\"schema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"int\\\"}]}\"", "var_name": "TEST_SCHEMA1_TEXT"}, {"original_string": "private static final String TEST_SCHEMA2_TEXT =\n    \"{\\\"name\\\":\\\"schema2\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA2_TEXT =\n    \"{\\\"name\\\":\\\"schema2\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\"", "var_name": "TEST_SCHEMA2_TEXT"}, {"original_string": "private static final String TEST_SCHEMA3_TEXT =\n    \"{\\\"name\\\":\\\"AnotherSchema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SCHEMA3_TEXT =\n    \"{\\\"name\\\":\\\"AnotherSchema1\\\",\\\"namespace\\\":\\\"com.linkedin.databus2.test\\\",\\\"type\\\":\\\"record\\\",\" +\n    \" \\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"field2\\\",\\\"type\\\":\\\"string\\\"}]}\"", "var_name": "TEST_SCHEMA3_TEXT"}], "file": "databus-core/databus-core-schemas/src/test/java/com/linkedin/databus2/schemas/TestFileSystemVersionedSchemaSetProvider.java"}, "test_case": {"identifier": "testSimpleDir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSimpleDir() throws Exception\n  {\n    final File tmpDir = File.createTempFile(\"TestFileSystemVersionedSchemaSetProvider\", \"tmp\");\n    tmpDir.deleteOnExit();\n\n    Assert.assertTrue(tmpDir.delete(), \"temp file deleted\");\n    Assert.assertTrue(tmpDir.mkdir());\n\n    File schema1File = new File(tmpDir, \"TestSchema.1.avsc\");\n    schema1File.deleteOnExit();\n\n    File schema2File = new File(tmpDir, \"TestSchema.3.avsc\");\n    schema2File.deleteOnExit();\n\n    File schema3File = new File(tmpDir, \"AnotherSchema.2.avsc\");\n    schema3File.deleteOnExit();\n\n    FileWriter schema1Writer = null;\n    FileWriter schema2Writer = null;\n    FileWriter schema3Writer = null;\n\n    try\n    {\n\n      schema3Writer = new FileWriter(schema3File);\n      schema3Writer.write(TEST_SCHEMA3_TEXT);\n      schema3Writer.flush();\n\n      schema2Writer = new FileWriter(schema2File);\n      schema2Writer.write(TEST_SCHEMA2_TEXT);\n      schema2Writer.flush();\n\n      schema1Writer = new FileWriter(schema1File);\n      schema1Writer.write(TEST_SCHEMA1_TEXT);\n      schema1Writer.flush();\n\n      FileSystemVersionedSchemaSetProvider schemaSetProvider =\n          new FileSystemVersionedSchemaSetProvider(tmpDir);\n      VersionedSchemaSet schemaSet = schemaSetProvider.loadSchemas();\n\n      VersionedSchema vs1 = schemaSet.getLatestVersionByName(\"TestSchema\");\n      Assert.assertNotNull(vs1);\n      Assert.assertEquals(vs1.getId(), new VersionedSchemaId(\"TestSchema\", (short)3),\n                          \"latest TestSchema id correct\");\n\n\n      SchemaId vs1Id = SchemaId.createWithMd5(TEST_SCHEMA1_TEXT);\n      VersionedSchema vs11 = schemaSet.getById(vs1Id);\n      Assert.assertNotNull(vs11);\n      Assert.assertEquals(vs11.getId(), new VersionedSchemaId(\"TestSchema\", (short)1),\n                          \"TestSchema v1 present\");\n\n      VersionedSchema vs12 = schemaSet.getSchemaByNameVersion(\"TestSchema\", (short)1);\n      Assert.assertNotNull(vs12);\n      Assert.assertEquals(vs12.getId(), new VersionedSchemaId(\"TestSchema\", (short)1),\n                          \"TestSchema v1 readable\");\n\n      VersionedSchema vs2 = schemaSet.getSchemaByNameVersion(\"AnotherSchema\", (short)2);\n      Assert.assertNotNull(vs2);\n      Assert.assertEquals(vs2.getId(), new VersionedSchemaId(\"AnotherSchema\", (short)2),\n                          \"AnotherSchema v2 readable\");\n\n      VersionedSchema vs21 = schemaSet.getSchemaByNameVersion(\"AnotherSchema\", (short)1);\n      Assert.assertNull(vs21, \"AnotherSchema v1 not present\");\n\n      VersionedSchema vs3 = schemaSet.getSchemaByNameVersion(\"FakeSchema\", (short)1);\n      Assert.assertNull(vs3, \"FakeSchema not present\");\n\n    }\n    finally\n    {\n      if (null != schema1Writer) schema1Writer.close();\n      if (null != schema2Writer) schema2Writer.close();\n      if (null != schema3Writer) schema3Writer.close();\n    }\n\n\n  }", "signature": "void testSimpleDir()", "full_signature": "@Test public void testSimpleDir()", "class_method_signature": "TestFileSystemVersionedSchemaSetProvider.testSimpleDir()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "deleteOnExit", "assertTrue", "delete", "assertTrue", "mkdir", "deleteOnExit", "deleteOnExit", "deleteOnExit", "write", "flush", "write", "flush", "write", "flush", "loadSchemas", "getLatestVersionByName", "assertNotNull", "assertEquals", "getId", "createWithMd5", "getById", "assertNotNull", "assertEquals", "getId", "getSchemaByNameVersion", "assertNotNull", "assertEquals", "getId", "getSchemaByNameVersion", "assertNotNull", "assertEquals", "getId", "getSchemaByNameVersion", "assertNull", "getSchemaByNameVersion", "assertNull", "close", "close", "close"]}, "focal_class": {"identifier": "FileSystemVersionedSchemaSetProvider", "superclass": "", "interfaces": "implements VersionedSchemaSetProvider", "fields": [{"original_string": "public static final String MODULE = FileSystemVersionedSchemaSetProvider.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = FileSystemVersionedSchemaSetProvider.class.getName()", "var_name": "MODULE"}, {"original_string": "private static final Logger logger = Logger.getLogger(MODULE);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(MODULE)", "var_name": "logger"}, {"original_string": "static final String DEFAULT_SCHEMA_SUFFIX = \".avsc\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_SCHEMA_SUFFIX = \".avsc\"", "var_name": "DEFAULT_SCHEMA_SUFFIX"}, {"original_string": "static final Pattern FILE_NAME_PATTERN = Pattern.compile(\"(.*)\\\\.(\\\\d+).avsc\");", "modifier": "static final", "type": "Pattern", "declarator": "FILE_NAME_PATTERN = Pattern.compile(\"(.*)\\\\.(\\\\d+).avsc\")", "var_name": "FILE_NAME_PATTERN"}, {"original_string": "private final String schemaSuffix;", "modifier": "private final", "type": "String", "declarator": "schemaSuffix", "var_name": "schemaSuffix"}, {"original_string": "private final File[] dirs;", "modifier": "private final", "type": "File[]", "declarator": "dirs", "var_name": "dirs"}], "methods": [{"identifier": "FileSystemVersionedSchemaSetProvider", "parameters": "(List<File> dirs)", "modifiers": "public", "return": "", "signature": " FileSystemVersionedSchemaSetProvider(List<File> dirs)", "full_signature": "public  FileSystemVersionedSchemaSetProvider(List<File> dirs)", "class_method_signature": "FileSystemVersionedSchemaSetProvider.FileSystemVersionedSchemaSetProvider(List<File> dirs)", "testcase": false, "constructor": true}, {"identifier": "FileSystemVersionedSchemaSetProvider", "parameters": "(File... dirs)", "modifiers": "public", "return": "", "signature": " FileSystemVersionedSchemaSetProvider(File... dirs)", "full_signature": "public  FileSystemVersionedSchemaSetProvider(File... dirs)", "class_method_signature": "FileSystemVersionedSchemaSetProvider.FileSystemVersionedSchemaSetProvider(File... dirs)", "testcase": false, "constructor": true}, {"identifier": "FileSystemVersionedSchemaSetProvider", "parameters": "(String schemaSuffix, File... dirs)", "modifiers": "public", "return": "", "signature": " FileSystemVersionedSchemaSetProvider(String schemaSuffix, File... dirs)", "full_signature": "public  FileSystemVersionedSchemaSetProvider(String schemaSuffix, File... dirs)", "class_method_signature": "FileSystemVersionedSchemaSetProvider.FileSystemVersionedSchemaSetProvider(String schemaSuffix, File... dirs)", "testcase": false, "constructor": true}, {"identifier": "loadSchemas", "parameters": "()", "modifiers": "@Override public", "return": "VersionedSchemaSet", "signature": "VersionedSchemaSet loadSchemas()", "full_signature": "@Override public VersionedSchemaSet loadSchemas()", "class_method_signature": "FileSystemVersionedSchemaSetProvider.loadSchemas()", "testcase": false, "constructor": false}, {"identifier": "loadSchemas", "parameters": "(File f, VersionedSchemaSet schemas)", "modifiers": "private", "return": "void", "signature": "void loadSchemas(File f, VersionedSchemaSet schemas)", "full_signature": "private void loadSchemas(File f, VersionedSchemaSet schemas)", "class_method_signature": "FileSystemVersionedSchemaSetProvider.loadSchemas(File f, VersionedSchemaSet schemas)", "testcase": false, "constructor": false}, {"identifier": "parseSchemaVersion", "parameters": "(String fileName)", "modifiers": "static", "return": "VersionedSchemaId", "signature": "VersionedSchemaId parseSchemaVersion(String fileName)", "full_signature": "static VersionedSchemaId parseSchemaVersion(String fileName)", "class_method_signature": "FileSystemVersionedSchemaSetProvider.parseSchemaVersion(String fileName)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-schemas/src/main/java/com/linkedin/databus2/schemas/FileSystemVersionedSchemaSetProvider.java"}, "focal_method": {"identifier": "loadSchemas", "parameters": "()", "modifiers": "@Override public", "return": "VersionedSchemaSet", "body": "@Override\n  public VersionedSchemaSet loadSchemas()\n  {\n    try\n    {\n      VersionedSchemaSet schemas = new VersionedSchemaSet();\n      for(File f: dirs) loadSchemas(f, schemas);\n      return schemas;\n    }\n    catch(IOException e)\n    {\n      throw new RuntimeException(e);\n    }\n  }", "signature": "VersionedSchemaSet loadSchemas()", "full_signature": "@Override public VersionedSchemaSet loadSchemas()", "class_method_signature": "FileSystemVersionedSchemaSetProvider.loadSchemas()", "testcase": false, "constructor": false, "invocations": ["loadSchemas"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}