{"test_class": {"identifier": "SliceReferenceFieldProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate Resource resource;", "modifier": "@Mock\n\tprivate", "type": "Resource", "declarator": "resource", "var_name": "resource"}, {"original_string": "private SliceReferenceFieldProcessor processor;", "modifier": "private", "type": "SliceReferenceFieldProcessor", "declarator": "processor", "var_name": "processor"}], "file": "slice-mapper/src/test/java/com/cognifide/slice/mapper/impl/processor/SliceReferenceFieldProcessorTest.java"}, "test_case": {"identifier": "testAcceptAnnotated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAcceptAnnotated() throws SecurityException, NoSuchFieldException {\n\t\tField field = TestObject.class.getDeclaredField(\"fieldAnnotatedWithSliceReference\");\n\t\tboolean result = processor.accepts(resource, field);\n\t\tAssert.assertTrue(\"Annotated field should be acceptable\", result);\n\t}", "signature": "void testAcceptAnnotated()", "full_signature": "@Test public void testAcceptAnnotated()", "class_method_signature": "SliceReferenceFieldProcessorTest.testAcceptAnnotated()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "accepts", "assertTrue"]}, "focal_class": {"identifier": "SliceReferenceFieldProcessor", "superclass": "", "interfaces": "implements FieldProcessor", "fields": [{"original_string": "@Inject\n\tprivate Provider<ModelProvider> modelProvider;", "modifier": "@Inject\n\tprivate", "type": "Provider<ModelProvider>", "declarator": "modelProvider", "var_name": "modelProvider"}, {"original_string": "@Inject\n\tprivate Injector injector;", "modifier": "@Inject\n\tprivate", "type": "Injector", "declarator": "injector", "var_name": "injector"}], "methods": [{"identifier": "accepts", "parameters": "(final Resource resource, final Field field)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(final Resource resource, final Field field)", "full_signature": "@Override public boolean accepts(final Resource resource, final Field field)", "class_method_signature": "SliceReferenceFieldProcessor.accepts(final Resource resource, final Field field)", "testcase": false, "constructor": false}, {"identifier": "mapResourceToField", "parameters": "(final Resource resource, final ValueMap valueMap, final Field field,\n\t\t\tfinal String propertyName)", "modifiers": "@Override public", "return": "Object", "signature": "Object mapResourceToField(final Resource resource, final ValueMap valueMap, final Field field,\n\t\t\tfinal String propertyName)", "full_signature": "@Override public Object mapResourceToField(final Resource resource, final ValueMap valueMap, final Field field,\n\t\t\tfinal String propertyName)", "class_method_signature": "SliceReferenceFieldProcessor.mapResourceToField(final Resource resource, final ValueMap valueMap, final Field field,\n\t\t\tfinal String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getFullPath", "parameters": "(final String initialPath)", "modifiers": "private", "return": "String", "signature": "String getFullPath(final String initialPath)", "full_signature": "private String getFullPath(final String initialPath)", "class_method_signature": "SliceReferenceFieldProcessor.getFullPath(final String initialPath)", "testcase": false, "constructor": false}, {"identifier": "getResolvedPath", "parameters": "(final String initialPath)", "modifiers": "private", "return": "String", "signature": "String getResolvedPath(final String initialPath)", "full_signature": "private String getResolvedPath(final String initialPath)", "class_method_signature": "SliceReferenceFieldProcessor.getResolvedPath(final String initialPath)", "testcase": false, "constructor": false}], "file": "slice-mapper/src/main/java/com/cognifide/slice/mapper/impl/processor/SliceReferenceFieldProcessor.java"}, "focal_method": {"identifier": "accepts", "parameters": "(final Resource resource, final Field field)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean accepts(final Resource resource, final Field field) {\n\t\tClass<?> type = field.getType();\n\t\t// additional checks of type for performance sake\n\t\treturn type != String.class && !type.isPrimitive() && field.isAnnotationPresent(SliceReference.class);\n\t}", "signature": "boolean accepts(final Resource resource, final Field field)", "full_signature": "@Override public boolean accepts(final Resource resource, final Field field)", "class_method_signature": "SliceReferenceFieldProcessor.accepts(final Resource resource, final Field field)", "testcase": false, "constructor": false, "invocations": ["getType", "isPrimitive", "isAnnotationPresent"]}, "repository": {"repo_id": 5900702, "url": "https://github.com/Cognifide/Slice", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 61, "size": 11367, "license": "licensed"}}