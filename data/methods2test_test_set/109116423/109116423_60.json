{"test_class": {"identifier": "TemplateLayoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}], "file": "com/android/setupwizardlib/TemplateLayoutTest.java"}, "test_case": {"identifier": "testGetMixin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMixin() {\n        TemplateLayout layout = new TemplateLayout(mContext, R.layout.test_template,\n                R.id.suw_layout_content);\n        final HeaderMixin mixin = layout.getMixin(HeaderMixin.class);\n        assertNull(\"getMixin for a mixin that doesn't exist should return null\", mixin);\n    }", "signature": "void testGetMixin()", "full_signature": "@Test public void testGetMixin()", "class_method_signature": "TemplateLayoutTest.testGetMixin()", "testcase": true, "constructor": false, "invocations": ["getMixin", "assertNull"]}, "focal_class": {"identifier": "TemplateLayout", "superclass": "extends FrameLayout", "interfaces": "", "fields": [{"original_string": "private ViewGroup mContainer;", "modifier": "private", "type": "ViewGroup", "declarator": "mContainer", "var_name": "mContainer"}, {"original_string": "private Map<Class<? extends Mixin>, Mixin> mMixins = new HashMap<>();", "modifier": "private", "type": "Map<Class<? extends Mixin>, Mixin>", "declarator": "mMixins = new HashMap<>()", "var_name": "mMixins"}, {"original_string": "private float mXFraction;", "modifier": "private", "type": "float", "declarator": "mXFraction", "var_name": "mXFraction"}, {"original_string": "private ViewTreeObserver.OnPreDrawListener mPreDrawListener;", "modifier": "private", "type": "ViewTreeObserver.OnPreDrawListener", "declarator": "mPreDrawListener", "var_name": "mPreDrawListener"}], "methods": [{"identifier": "TemplateLayout", "parameters": "(Context context, int template, int containerId)", "modifiers": "public", "return": "", "signature": " TemplateLayout(Context context, int template, int containerId)", "full_signature": "public  TemplateLayout(Context context, int template, int containerId)", "class_method_signature": "TemplateLayout.TemplateLayout(Context context, int template, int containerId)", "testcase": false, "constructor": true}, {"identifier": "TemplateLayout", "parameters": "(Context context, AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " TemplateLayout(Context context, AttributeSet attrs)", "full_signature": "public  TemplateLayout(Context context, AttributeSet attrs)", "class_method_signature": "TemplateLayout.TemplateLayout(Context context, AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "TemplateLayout", "parameters": "(Context context, AttributeSet attrs, int defStyleAttr)", "modifiers": "@TargetApi(VERSION_CODES.HONEYCOMB) public", "return": "", "signature": " TemplateLayout(Context context, AttributeSet attrs, int defStyleAttr)", "full_signature": "@TargetApi(VERSION_CODES.HONEYCOMB) public  TemplateLayout(Context context, AttributeSet attrs, int defStyleAttr)", "class_method_signature": "TemplateLayout.TemplateLayout(Context context, AttributeSet attrs, int defStyleAttr)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(int template, int containerId, AttributeSet attrs, int defStyleAttr)", "modifiers": "private", "return": "void", "signature": "void init(int template, int containerId, AttributeSet attrs, int defStyleAttr)", "full_signature": "private void init(int template, int containerId, AttributeSet attrs, int defStyleAttr)", "class_method_signature": "TemplateLayout.init(int template, int containerId, AttributeSet attrs, int defStyleAttr)", "testcase": false, "constructor": false}, {"identifier": "registerMixin", "parameters": "(Class<M> cls, M mixin)", "modifiers": "protected", "return": "void", "signature": "void registerMixin(Class<M> cls, M mixin)", "full_signature": "protected void registerMixin(Class<M> cls, M mixin)", "class_method_signature": "TemplateLayout.registerMixin(Class<M> cls, M mixin)", "testcase": false, "constructor": false}, {"identifier": "findManagedViewById", "parameters": "(int id)", "modifiers": "public", "return": "View", "signature": "View findManagedViewById(int id)", "full_signature": "public View findManagedViewById(int id)", "class_method_signature": "TemplateLayout.findManagedViewById(int id)", "testcase": false, "constructor": false}, {"identifier": "getMixin", "parameters": "(Class<M> cls)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "M", "signature": "M getMixin(Class<M> cls)", "full_signature": "@SuppressWarnings(\"unchecked\") public M getMixin(Class<M> cls)", "class_method_signature": "TemplateLayout.getMixin(Class<M> cls)", "testcase": false, "constructor": false}, {"identifier": "addView", "parameters": "(View child, int index, ViewGroup.LayoutParams params)", "modifiers": "@Override public", "return": "void", "signature": "void addView(View child, int index, ViewGroup.LayoutParams params)", "full_signature": "@Override public void addView(View child, int index, ViewGroup.LayoutParams params)", "class_method_signature": "TemplateLayout.addView(View child, int index, ViewGroup.LayoutParams params)", "testcase": false, "constructor": false}, {"identifier": "addViewInternal", "parameters": "(View child)", "modifiers": "private", "return": "void", "signature": "void addViewInternal(View child)", "full_signature": "private void addViewInternal(View child)", "class_method_signature": "TemplateLayout.addViewInternal(View child)", "testcase": false, "constructor": false}, {"identifier": "inflateTemplate", "parameters": "(int templateResource, int containerId)", "modifiers": "private", "return": "void", "signature": "void inflateTemplate(int templateResource, int containerId)", "full_signature": "private void inflateTemplate(int templateResource, int containerId)", "class_method_signature": "TemplateLayout.inflateTemplate(int templateResource, int containerId)", "testcase": false, "constructor": false}, {"identifier": "onInflateTemplate", "parameters": "(LayoutInflater inflater, @LayoutRes int template)", "modifiers": "protected", "return": "View", "signature": "View onInflateTemplate(LayoutInflater inflater, @LayoutRes int template)", "full_signature": "protected View onInflateTemplate(LayoutInflater inflater, @LayoutRes int template)", "class_method_signature": "TemplateLayout.onInflateTemplate(LayoutInflater inflater, @LayoutRes int template)", "testcase": false, "constructor": false}, {"identifier": "inflateTemplate", "parameters": "(LayoutInflater inflater, @StyleRes int fallbackTheme,\n            @LayoutRes int template)", "modifiers": "protected final", "return": "View", "signature": "View inflateTemplate(LayoutInflater inflater, @StyleRes int fallbackTheme,\n            @LayoutRes int template)", "full_signature": "protected final View inflateTemplate(LayoutInflater inflater, @StyleRes int fallbackTheme,\n            @LayoutRes int template)", "class_method_signature": "TemplateLayout.inflateTemplate(LayoutInflater inflater, @StyleRes int fallbackTheme,\n            @LayoutRes int template)", "testcase": false, "constructor": false}, {"identifier": "findContainer", "parameters": "(int containerId)", "modifiers": "protected", "return": "ViewGroup", "signature": "ViewGroup findContainer(int containerId)", "full_signature": "protected ViewGroup findContainer(int containerId)", "class_method_signature": "TemplateLayout.findContainer(int containerId)", "testcase": false, "constructor": false}, {"identifier": "onTemplateInflated", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onTemplateInflated()", "full_signature": "protected void onTemplateInflated()", "class_method_signature": "TemplateLayout.onTemplateInflated()", "testcase": false, "constructor": false}, {"identifier": "getContainerId", "parameters": "()", "modifiers": "@Deprecated protected", "return": "int", "signature": "int getContainerId()", "full_signature": "@Deprecated protected int getContainerId()", "class_method_signature": "TemplateLayout.getContainerId()", "testcase": false, "constructor": false}, {"identifier": "setXFraction", "parameters": "(float fraction)", "modifiers": "@Keep @TargetApi(VERSION_CODES.HONEYCOMB) public", "return": "void", "signature": "void setXFraction(float fraction)", "full_signature": "@Keep @TargetApi(VERSION_CODES.HONEYCOMB) public void setXFraction(float fraction)", "class_method_signature": "TemplateLayout.setXFraction(float fraction)", "testcase": false, "constructor": false}, {"identifier": "getXFraction", "parameters": "()", "modifiers": "@Keep @TargetApi(VERSION_CODES.HONEYCOMB) public", "return": "float", "signature": "float getXFraction()", "full_signature": "@Keep @TargetApi(VERSION_CODES.HONEYCOMB) public float getXFraction()", "class_method_signature": "TemplateLayout.getXFraction()", "testcase": false, "constructor": false}], "file": "com/android/setupwizardlib/TemplateLayout.java"}, "focal_method": {"identifier": "getMixin", "parameters": "(Class<M> cls)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "M", "body": "@SuppressWarnings(\"unchecked\")\n    public <M extends Mixin> M getMixin(Class<M> cls) {\n        return (M) mMixins.get(cls);\n    }", "signature": "M getMixin(Class<M> cls)", "full_signature": "@SuppressWarnings(\"unchecked\") public M getMixin(Class<M> cls)", "class_method_signature": "TemplateLayout.getMixin(Class<M> cls)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 109116423, "url": "https://github.com/AndroidSDKSources/android-sdk-sources-for-api-level-26", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 29147, "license": "licensed"}}