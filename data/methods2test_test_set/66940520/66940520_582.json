{"test_class": {"identifier": "DashboardTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/dashboard/DashboardTest.java"}, "test_case": {"identifier": "testMoveItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMoveItem()\n    {\n        Dashboard dashboard = new Dashboard();\n        \n        DashboardItem diA = new DashboardItem();\n        DashboardItem diB = new DashboardItem();\n        DashboardItem diC = new DashboardItem();\n        DashboardItem diD = new DashboardItem();\n        \n        diA.setUid( \"A\" );\n        diB.setUid( \"B\" );\n        diC.setUid( \"C\" );\n        diD.setUid( \"D\" );\n        \n        dashboard.getItems().add( diA );\n        dashboard.getItems().add( diB );\n        dashboard.getItems().add( diC );\n        dashboard.getItems().add( diD );\n        \n        assertEquals( 4, dashboard.getItems().size() );\n        assertEquals( 2, dashboard.getItems().indexOf( diC ) );\n        \n        assertTrue( dashboard.moveItem( \"B\", 3 ) ); // Move B up\n\n        assertEquals( 4, dashboard.getItems().size() );\n        \n        assertEquals( 0, dashboard.getItems().indexOf( diA ) );\n        assertEquals( 1, dashboard.getItems().indexOf( diC ) );\n        assertEquals( 2, dashboard.getItems().indexOf( diB ) );\n        assertEquals( 3, dashboard.getItems().indexOf( diD ) );\n\n        assertTrue( dashboard.moveItem( \"C\", 4 ) ); // Move C last\n\n        assertEquals( 0, dashboard.getItems().indexOf( diA ) );\n        assertEquals( 1, dashboard.getItems().indexOf( diB ) );\n        assertEquals( 2, dashboard.getItems().indexOf( diD ) );\n        assertEquals( 3, dashboard.getItems().indexOf( diC ) );\n\n        assertTrue( dashboard.moveItem( \"D\", 1 ) ); // Move D down\n\n        assertEquals( 0, dashboard.getItems().indexOf( diA ) );\n        assertEquals( 1, dashboard.getItems().indexOf( diD ) );\n        assertEquals( 2, dashboard.getItems().indexOf( diB ) );\n        assertEquals( 3, dashboard.getItems().indexOf( diC ) );\n\n        assertTrue( dashboard.moveItem( \"C\", 0 ) ); // Move C first\n\n        assertEquals( 0, dashboard.getItems().indexOf( diC ) );\n        assertEquals( 1, dashboard.getItems().indexOf( diA ) );\n        assertEquals( 2, dashboard.getItems().indexOf( diD ) );\n        assertEquals( 3, dashboard.getItems().indexOf( diB ) );\n\n        assertFalse( dashboard.moveItem( \"C\", 5 ) ); // Out of bounds\n        assertFalse( dashboard.moveItem( \"A\", 1 ) ); // Already at position\n        assertFalse( dashboard.moveItem( \"A\", 2 ) ); // Pointless move        \n    }", "signature": "void testMoveItem()", "full_signature": "@Test public void testMoveItem()", "class_method_signature": "DashboardTest.testMoveItem()", "testcase": true, "constructor": false, "invocations": ["setUid", "setUid", "setUid", "setUid", "add", "getItems", "add", "getItems", "add", "getItems", "add", "getItems", "assertEquals", "size", "getItems", "assertEquals", "indexOf", "getItems", "assertTrue", "moveItem", "assertEquals", "size", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertTrue", "moveItem", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertTrue", "moveItem", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertTrue", "moveItem", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertEquals", "indexOf", "getItems", "assertFalse", "moveItem", "assertFalse", "moveItem", "assertFalse", "moveItem"]}, "focal_class": {"identifier": "Dashboard", "superclass": "extends BaseNameableObject", "interfaces": "implements MetadataObject", "fields": [{"original_string": "public static final int MAX_ITEMS = 40;", "modifier": "public static final", "type": "int", "declarator": "MAX_ITEMS = 40", "var_name": "MAX_ITEMS"}, {"original_string": "private List<DashboardItem> items = new ArrayList<>();", "modifier": "private", "type": "List<DashboardItem>", "declarator": "items = new ArrayList<>()", "var_name": "items"}], "methods": [{"identifier": "Dashboard", "parameters": "()", "modifiers": "public", "return": "", "signature": " Dashboard()", "full_signature": "public  Dashboard()", "class_method_signature": "Dashboard.Dashboard()", "testcase": false, "constructor": true}, {"identifier": "Dashboard", "parameters": "( String name )", "modifiers": "public", "return": "", "signature": " Dashboard( String name )", "full_signature": "public  Dashboard( String name )", "class_method_signature": "Dashboard.Dashboard( String name )", "testcase": false, "constructor": true}, {"identifier": "moveItem", "parameters": "( String uid, int position )", "modifiers": "public", "return": "boolean", "signature": "boolean moveItem( String uid, int position )", "full_signature": "public boolean moveItem( String uid, int position )", "class_method_signature": "Dashboard.moveItem( String uid, int position )", "testcase": false, "constructor": false}, {"identifier": "getItemByUid", "parameters": "( String uid )", "modifiers": "public", "return": "DashboardItem", "signature": "DashboardItem getItemByUid( String uid )", "full_signature": "public DashboardItem getItemByUid( String uid )", "class_method_signature": "Dashboard.getItemByUid( String uid )", "testcase": false, "constructor": false}, {"identifier": "getAvailableItemByType", "parameters": "( DashboardItemType type )", "modifiers": "public", "return": "DashboardItem", "signature": "DashboardItem getAvailableItemByType( DashboardItemType type )", "full_signature": "public DashboardItem getAvailableItemByType( DashboardItemType type )", "class_method_signature": "Dashboard.getAvailableItemByType( DashboardItemType type )", "testcase": false, "constructor": false}, {"identifier": "hasItems", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasItems()", "full_signature": "public boolean hasItems()", "class_method_signature": "Dashboard.hasItems()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public", "return": "int", "signature": "int getItemCount()", "full_signature": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public int getItemCount()", "class_method_signature": "Dashboard.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "@JsonProperty( \"dashboardItems\" ) @JsonSerialize( contentAs = BaseIdentifiableObject.class ) @JacksonXmlElementWrapper( localName = \"dashboardItems\", namespace = DxfNamespaces.DXF_2_0 ) @JacksonXmlProperty( localName = \"dashboardItem\", namespace = DxfNamespaces.DXF_2_0 ) public", "return": "List<DashboardItem>", "signature": "List<DashboardItem> getItems()", "full_signature": "@JsonProperty( \"dashboardItems\" ) @JsonSerialize( contentAs = BaseIdentifiableObject.class ) @JacksonXmlElementWrapper( localName = \"dashboardItems\", namespace = DxfNamespaces.DXF_2_0 ) @JacksonXmlProperty( localName = \"dashboardItem\", namespace = DxfNamespaces.DXF_2_0 ) public List<DashboardItem> getItems()", "class_method_signature": "Dashboard.getItems()", "testcase": false, "constructor": false}, {"identifier": "setItems", "parameters": "( List<DashboardItem> items )", "modifiers": "public", "return": "void", "signature": "void setItems( List<DashboardItem> items )", "full_signature": "public void setItems( List<DashboardItem> items )", "class_method_signature": "Dashboard.setItems( List<DashboardItem> items )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/dashboard/Dashboard.java"}, "focal_method": {"identifier": "moveItem", "parameters": "( String uid, int position )", "modifiers": "public", "return": "boolean", "body": "public boolean moveItem( String uid, int position )\n    {\n        if ( items == null || position < 0 || position > items.size() )\n        {\n            return false; // No items or position out of bounds\n        }\n\n        int index = items.indexOf( new DashboardItem( uid ) );\n\n        if ( index == -1 || index == position || (index + 1) == position )\n        {\n            return false; // Not found, already at position or pointless move\n        }\n\n        DashboardItem item = items.get( index );\n\n        index = position < index ? (index + 1) : index; // New index after move\n\n        items.add( position, item ); // Add item at position\n        items.remove( index ); // Remove item at previous index\n\n        return true;\n    }", "signature": "boolean moveItem( String uid, int position )", "full_signature": "public boolean moveItem( String uid, int position )", "class_method_signature": "Dashboard.moveItem( String uid, int position )", "testcase": false, "constructor": false, "invocations": ["size", "indexOf", "get", "add", "remove"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}