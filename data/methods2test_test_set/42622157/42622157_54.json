{"test_class": {"identifier": "ChefCookbookAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CharStream metadata;", "modifier": "private", "type": "CharStream", "declarator": "metadata", "var_name": "metadata"}], "file": "org.eclipse.winery.crawler/src/test/java/org/eclipse/winery/crawler/chefcookbooks/ChefCookbookAnalyzerTest.java"}, "test_case": {"identifier": "compileMyAppCookbook", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compileMyAppCookbook() {\n        String cookbookName = \"myapp\";\n        String cookbookPath;\n        ClassLoader classLoader = getClass().getClassLoader();\n        File file = new File(classLoader.getResource(cookbookName).getFile());\n        CookbookParseResult cookbookParseResult = new CookbookParseResult(cookbookName);\n        cookbookPath = file.getAbsolutePath().replace(\"\\\\\", \"/\");\n        cookbookParseResult.setCookbookPath(cookbookPath);\n        cookbookParseResult = new ChefCookbookAnalyzer().compileCookbook(cookbookParseResult, false);\n        cookbookParseResult.clear();\n\n        /**\n         * Dependencies are stored in dependencies folder of the myapp cookbook\n         * Delete downloaded dependencies\n         */\n        file = new File(classLoader.getResource(\"myapp/dependencies\").getFile());\n        CrawledCookbooks.deleteFile(file.getPath());\n    }", "signature": "void compileMyAppCookbook()", "full_signature": "@Test public void compileMyAppCookbook()", "class_method_signature": "ChefCookbookAnalyzerTest.compileMyAppCookbook()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getFile", "getResource", "replace", "getAbsolutePath", "setCookbookPath", "compileCookbook", "clear", "getFile", "getResource", "deleteFile", "getPath"]}, "focal_class": {"identifier": "ChefCookbookAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ChefCookbookAnalyzer.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ChefCookbookAnalyzer.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "main", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void main()", "full_signature": "public void main()", "class_method_signature": "ChefCookbookAnalyzer.main()", "testcase": false, "constructor": false}, {"identifier": "compileCookbook", "parameters": "(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "modifiers": "public", "return": "CookbookParseResult", "signature": "CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "full_signature": "public CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "class_method_signature": "ChefCookbookAnalyzer.compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(CharStream input, CookbookParseResult cookbookConfigs)", "modifiers": "public static", "return": "CookbookParseResult", "signature": "CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "full_signature": "public static CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.compile(CharStream input, CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromMetadata", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromAttributes", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromRecipes", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "getParseResultFromFile", "parameters": "(CookbookParseResult cookbookConfigs, String rbFilePath)", "modifiers": "public static", "return": "CookbookParseResult", "signature": "CookbookParseResult getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "full_signature": "public static CookbookParseResult getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "class_method_signature": "ChefCookbookAnalyzer.getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "testcase": false, "constructor": false}, {"identifier": "addPlatformVersionInformationFromKitchen", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.crawler/src/main/java/org/eclipse/winery/crawler/chefcookbooks/ChefCookbookAnalyzer.java"}, "focal_method": {"identifier": "compileCookbook", "parameters": "(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "modifiers": "public", "return": "CookbookParseResult", "body": "public CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo) {\n        \n        CookbookParseResult oldParseResult = new CookbookParseResult(cookbookParseResult);\n        List<CrawlCookbookRunnable> crawlCookbookRunnableList = new ArrayList<>();\n        \n        //Compile metadata.\n        cookbookParseResult = returnComponentTypesFromMetadata(cookbookParseResult);\n\n        // cookbookParseResult is null when cookbook has no metadata.rb or metadata.json file.\n        if ( cookbookParseResult == null) {\n            return oldParseResult;\n        }\n\n        //Crawl dependent cookbooks in threads.\n        if (cookbookParseResult.getAllConfigsAsList().size() > 0) {\n            LinkedHashMap<String,String> dependencies = cookbookParseResult.getAllConfigsAsList().get(0).getDepends();\n            String pathDependencies = cookbookParseResult.getCookbookPath() + Defaults.DEPENDENCIE_FOLDER;\n            for (String key : dependencies.keySet()) {\n                String versionRestriciton = dependencies.get(key);\n                CrawlCookbookRunnable crawlDependency = new CrawlCookbookRunnable(key, versionRestriciton, pathDependencies, Defaults.TEMP_FOLDER_PATH);\n                crawlDependency.start();\n                crawlCookbookRunnableList.add(crawlDependency);\n            }\n        }\n\n        // Compile kitchen.yml\n        if (cookbookParseResult.isInRecursiveTransformation() == false ) {\n            cookbookParseResult = addPlatformVersionInformationFromKitchen(cookbookParseResult);\n        }\n\n        // Wait for the dependencies to download.\n        for (int i = 0; i < crawlCookbookRunnableList.size(); i++) {\n            try {\n                crawlCookbookRunnableList.get(i).join();\n            } catch (InterruptedException e) {\n                LOGGER.info(\"Crawling process of dependent cookbook \" + crawlCookbookRunnableList.get(i).getThreadName() + \" interrupted\");\n            }\n        }\n\n        // Compile attribute files.\n        cookbookParseResult = returnComponentTypesFromAttributes(cookbookParseResult);\n\n        // Compile recipes, starting from default.rb recipe.\n        cookbookParseResult = returnComponentTypesFromRecipes(cookbookParseResult);\n\n        // Resolve dependencies\n        for (Map.Entry<String,String> entry : cookbookParseResult.getAllConfigsAsList().get(0).getDepends().entrySet()) {\n            String key = entry.getKey();\n            LOGGER.info(\"Cookbook: \" + key + \" is resolved now\");\n            CookbookParseResult dependentParseResult = new CookbookParseResult(cookbookParseResult);\n            dependentParseResult.prepareForDependencie(key);\n            if (dependentParseResult.getAllConfigsAsList().size() > 0) {\n                compileCookbook(dependentParseResult, saveToToscaRepo);\n            }\n        }\n\n        // Print information about cookbooks for debugging\n        List<ChefCookbookConfiguration> cookbookConfigsList = cookbookParseResult.getAllConfigsAsList();\n        for (int count = 0; count < cookbookConfigsList.size(); count++) {\n            cookbookConfigsList.get(count).printConfiguration();\n        }\n\n        /**\n         * Convert extacted configuations to TOSCA node types.\n         * Extracted platforms are also converted to TOSCA node types.\n         * Saves the extracted Node types to repository.\n         */\n        if (saveToToscaRepo) {\n            new ParseResultToscaConverter().saveToscaNodeTypes(new ParseResultToscaConverter().convertCookbookConfigurationToToscaNode(cookbookParseResult));\n        }\n        \n        LOGGER.info(\"Finished parsing\");\n        return cookbookParseResult;\n    }", "signature": "CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "full_signature": "public CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "class_method_signature": "ChefCookbookAnalyzer.compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "testcase": false, "constructor": false, "invocations": ["returnComponentTypesFromMetadata", "size", "getAllConfigsAsList", "getDepends", "get", "getAllConfigsAsList", "getCookbookPath", "keySet", "get", "start", "add", "isInRecursiveTransformation", "addPlatformVersionInformationFromKitchen", "size", "join", "get", "info", "getThreadName", "get", "returnComponentTypesFromAttributes", "returnComponentTypesFromRecipes", "entrySet", "getDepends", "get", "getAllConfigsAsList", "getKey", "info", "prepareForDependencie", "size", "getAllConfigsAsList", "compileCookbook", "getAllConfigsAsList", "size", "printConfiguration", "get", "saveToscaNodeTypes", "convertCookbookConfigurationToToscaNode", "info"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}