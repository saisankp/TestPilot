{"test_class": {"identifier": "TestResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  SerialPort serialPort;", "modifier": "@Mock", "type": "SerialPort", "declarator": "serialPort", "var_name": "serialPort"}], "file": "dexcom-receiver/src/test/java/org/glukit/dexcom/sync/TestResponseReader.java"}, "test_case": {"identifier": "readDatabasePagesShouldSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readDatabasePagesShouldSucceed() throws Exception {\n    when(serialPort.readBytes(HEADER_SIZE)).thenReturn(fromHexString(\"01 16 02 01\"));\n    when(serialPort.readBytes(534 - HEADER_SIZE - TRAILER_SIZE)).thenReturn(fromHexString(\"00 00 00 00 01 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3A 7D 7D F6 89 07 FD 85 89 07 3C 4D 61 6E 75 66 61 63 74 75 72 69 6E 67 50 61 72 61 6D 65 74 65 72 73 20 53 65 72 69 61 6C 4E 75 6D 62 65 72 3D 22 73 6D 33 30 31 34 30 37 35 32 22 20 48 61 72 64 77 61 72 65 50 61 72 74 4E 75 6D 62 65 72 3D 22 4D 44 31 30 36 30 2D 4D 54 32 30 36 34 39 22 20 48 61 72 64 77 61 72 65 52 65 76 69 73 69 6F 6E 3D 22 31 34 22 20 44 61 74 65 54 69 6D 65 43 72 65 61 74 65 64 3D 22 32 30 31 33 2D 30 31 2D 30 33 20 31 33 3A 35 34 3A 30 35 2E 35 33 36 20 2D 30 38 3A 30 30 22 20 48 61 72 64 77 61 72 65 49 64 3D 22 7B 37 35 42 37 43 38 38 36 2D 46 45 31 30 2D 34 32 30 46 2D 42 35 31 31 2D 32 44 33 46 39 42 39 42 45 45 37 45 7D 22 20 2F 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 FB\"));\n    when(serialPort.readBytes(TRAILER_SIZE)).thenReturn(fromHexString(\"7F 04\"));\n\n    ResponseReader responseReader = new ResponseReader(new LittleEndianDataInputFactory());\n    DatabasePagesResponse pagesResponse = responseReader.read(DatabasePagesResponse.class, this.serialPort);\n\n    assertThat(pagesResponse, not(nullValue()));\n  }", "signature": "void readDatabasePagesShouldSucceed()", "full_signature": "@Test public void readDatabasePagesShouldSucceed()", "class_method_signature": "TestResponseReader.readDatabasePagesShouldSucceed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "readBytes", "fromHexString", "thenReturn", "when", "readBytes", "fromHexString", "thenReturn", "when", "readBytes", "fromHexString", "read", "assertThat", "not", "nullValue"]}, "focal_class": {"identifier": "ResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(ResponseReader.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResponseReader.class)", "var_name": "LOGGER"}, {"original_string": "static final int HEADER_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "HEADER_SIZE = 4", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int TRAILER_SIZE = 2;", "modifier": "public static final", "type": "int", "declarator": "TRAILER_SIZE = 2", "var_name": "TRAILER_SIZE"}, {"original_string": "private DataInputFactory dataInputFactory;", "modifier": "private", "type": "DataInputFactory", "declarator": "dataInputFactory", "var_name": "dataInputFactory"}], "methods": [{"identifier": "ResponseReader", "parameters": "(DataInputFactory dataInputFactory)", "modifiers": "@Inject public", "return": "", "signature": " ResponseReader(DataInputFactory dataInputFactory)", "full_signature": "@Inject public  ResponseReader(DataInputFactory dataInputFactory)", "class_method_signature": "ResponseReader.ResponseReader(DataInputFactory dataInputFactory)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false}, {"identifier": "validateCrc", "parameters": "(byte[] packet, byte[] crcBytes)", "modifiers": "private", "return": "void", "signature": "void validateCrc(byte[] packet, byte[] crcBytes)", "full_signature": "private void validateCrc(byte[] packet, byte[] crcBytes)", "class_method_signature": "ResponseReader.validateCrc(byte[] packet, byte[] crcBytes)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(byte[] headerBytes)", "modifiers": "private", "return": "ResponseHeader", "signature": "ResponseHeader readHeader(byte[] headerBytes)", "full_signature": "private ResponseHeader readHeader(byte[] headerBytes)", "class_method_signature": "ResponseReader.readHeader(byte[] headerBytes)", "testcase": false, "constructor": false}], "file": "dexcom-receiver/src/main/java/org/glukit/dexcom/sync/ResponseReader.java"}, "focal_method": {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "body": "public <T extends Response> T read(Class<T> type, SerialPort serialPort) {\n    try {\n      T response = type.getConstructor(DataInputFactory.class).newInstance(this.dataInputFactory);\n      byte[] header = serialPort.readBytes(HEADER_SIZE);\n      LOGGER.debug(format(\"Read header from port: %s\", toHexString(header)));\n      ResponseHeader responseHeader = readHeader(header);\n\n      int expectedPayloadSize = responseHeader.getPacketSize() - (HEADER_SIZE + TRAILER_SIZE);\n      LOGGER.debug(format(\"Expected payload of [%d] bytes\", expectedPayloadSize));\n\n      byte[] payload = new byte[0];\n      if (expectedPayloadSize > 0) {\n        payload = serialPort.readBytes(expectedPayloadSize);\n        LOGGER.debug(format(\"Read payload from port: %s\", toHexString(payload)));\n        response.fromBytes(payload);\n      } else {\n        LOGGER.debug(\"No payload expected, skipping to trailer...\");\n      }\n\n      byte[] crc16 = serialPort.readBytes(TRAILER_SIZE);\n      LOGGER.debug(format(\"Read crc16 from port: %s\", toHexString(crc16)));\n      validateCrc(Bytes.concat(header, payload, crc16), crc16);\n\n      return response;\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getConstructor", "readBytes", "debug", "format", "toHexString", "readHeader", "getPacketSize", "debug", "format", "readBytes", "debug", "format", "toHexString", "fromBytes", "debug", "readBytes", "debug", "format", "toHexString", "validateCrc", "concat", "propagate"]}, "repository": {"repo_id": 13185812, "url": "https://github.com/alexandre-normand/blood-shepherd", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 408, "license": "licensed"}}