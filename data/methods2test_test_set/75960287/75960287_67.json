{"test_class": {"identifier": "JSONCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CACHED = \"Cached\";", "modifier": "private static final", "type": "String", "declarator": "CACHED = \"Cached\"", "var_name": "CACHED"}, {"original_string": "private static final DataID TEST_ID = DataID.SESSIONS;", "modifier": "private static final", "type": "DataID", "declarator": "TEST_ID = DataID.SESSIONS", "var_name": "TEST_ID"}, {"original_string": "private static final UUID TEST_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "TEST_UUID = UUID.randomUUID()", "var_name": "TEST_UUID"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/delivery/webserver/cache/JSONCacheTest.java"}, "test_case": {"identifier": "cachedByDataIDName", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void cachedByDataIDName() {\n        JSONCache.getOrCache(TEST_ID, () -> CACHED);\n        assertContains();\n    }", "signature": "void cachedByDataIDName()", "full_signature": "@Test void cachedByDataIDName()", "class_method_signature": "JSONCacheTest.cachedByDataIDName()", "testcase": true, "constructor": false, "invocations": ["getOrCache", "assertContains"]}, "focal_class": {"identifier": "JSONCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Cache<String, byte[]> cache = Caffeine.newBuilder()\n            .expireAfterAccess(2, TimeUnit.MINUTES)\n            .build();", "modifier": "private static final", "type": "Cache<String, byte[]>", "declarator": "cache = Caffeine.newBuilder()\n            .expireAfterAccess(2, TimeUnit.MINUTES)\n            .build()", "var_name": "cache"}], "methods": [{"identifier": "JSONCache", "parameters": "()", "modifiers": "private", "return": "", "signature": " JSONCache()", "full_signature": "private  JSONCache()", "class_method_signature": "JSONCache.JSONCache()", "testcase": false, "constructor": true}, {"identifier": "getOrCache", "parameters": "(String identifier, Supplier<Response> jsonResponseSupplier)", "modifiers": "public static", "return": "Response", "signature": "Response getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "full_signature": "public static Response getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "class_method_signature": "JSONCache.getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "testcase": false, "constructor": false}, {"identifier": "getOrCacheString", "parameters": "(DataID dataID, UUID serverUUID, Supplier<String> stringSupplier)", "modifiers": "public static", "return": "String", "signature": "String getOrCacheString(DataID dataID, UUID serverUUID, Supplier<String> stringSupplier)", "full_signature": "public static String getOrCacheString(DataID dataID, UUID serverUUID, Supplier<String> stringSupplier)", "class_method_signature": "JSONCache.getOrCacheString(DataID dataID, UUID serverUUID, Supplier<String> stringSupplier)", "testcase": false, "constructor": false}, {"identifier": "getOrCache", "parameters": "(DataID dataID, Supplier<T> objectSupplier)", "modifiers": "public static", "return": "Response", "signature": "Response getOrCache(DataID dataID, Supplier<T> objectSupplier)", "full_signature": "public static Response getOrCache(DataID dataID, Supplier<T> objectSupplier)", "class_method_signature": "JSONCache.getOrCache(DataID dataID, Supplier<T> objectSupplier)", "testcase": false, "constructor": false}, {"identifier": "getOrCache", "parameters": "(DataID dataID, UUID serverUUID, Supplier<T> objectSupplier)", "modifiers": "public static", "return": "Response", "signature": "Response getOrCache(DataID dataID, UUID serverUUID, Supplier<T> objectSupplier)", "full_signature": "public static Response getOrCache(DataID dataID, UUID serverUUID, Supplier<T> objectSupplier)", "class_method_signature": "JSONCache.getOrCache(DataID dataID, UUID serverUUID, Supplier<T> objectSupplier)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String identifier)", "modifiers": "public static", "return": "void", "signature": "void invalidate(String identifier)", "full_signature": "public static void invalidate(String identifier)", "class_method_signature": "JSONCache.invalidate(String identifier)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(DataID dataID)", "modifiers": "public static", "return": "void", "signature": "void invalidate(DataID dataID)", "full_signature": "public static void invalidate(DataID dataID)", "class_method_signature": "JSONCache.invalidate(DataID dataID)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(UUID serverUUID, DataID... dataIDs)", "modifiers": "public static", "return": "void", "signature": "void invalidate(UUID serverUUID, DataID... dataIDs)", "full_signature": "public static void invalidate(UUID serverUUID, DataID... dataIDs)", "class_method_signature": "JSONCache.invalidate(UUID serverUUID, DataID... dataIDs)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(DataID dataID, UUID serverUUID)", "modifiers": "public static", "return": "void", "signature": "void invalidate(DataID dataID, UUID serverUUID)", "full_signature": "public static void invalidate(DataID dataID, UUID serverUUID)", "class_method_signature": "JSONCache.invalidate(DataID dataID, UUID serverUUID)", "testcase": false, "constructor": false}, {"identifier": "invalidateMatching", "parameters": "(DataID... dataIDs)", "modifiers": "public static", "return": "void", "signature": "void invalidateMatching(DataID... dataIDs)", "full_signature": "public static void invalidateMatching(DataID... dataIDs)", "class_method_signature": "JSONCache.invalidateMatching(DataID... dataIDs)", "testcase": false, "constructor": false}, {"identifier": "invalidateMatching", "parameters": "(DataID dataID)", "modifiers": "public static", "return": "void", "signature": "void invalidateMatching(DataID dataID)", "full_signature": "public static void invalidateMatching(DataID dataID)", "class_method_signature": "JSONCache.invalidateMatching(DataID dataID)", "testcase": false, "constructor": false}, {"identifier": "invalidateAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void invalidateAll()", "full_signature": "public static void invalidateAll()", "class_method_signature": "JSONCache.invalidateAll()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void cleanUp()", "full_signature": "public static void cleanUp()", "class_method_signature": "JSONCache.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "getCachedIDs", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getCachedIDs()", "full_signature": "public static List<String> getCachedIDs()", "class_method_signature": "JSONCache.getCachedIDs()", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/delivery/webserver/cache/JSONCache.java"}, "focal_method": {"identifier": "getOrCache", "parameters": "(String identifier, Supplier<Response> jsonResponseSupplier)", "modifiers": "public static", "return": "Response", "body": "public static Response getOrCache(String identifier, Supplier<Response> jsonResponseSupplier) {\n        byte[] found = cache.getIfPresent(identifier);\n        if (found == null) {\n            Response response = jsonResponseSupplier.get();\n            cache.put(identifier, response.getBytes());\n            return response;\n        }\n        return Response.builder()\n                .setMimeType(MimeType.JSON)\n                .setContent(found)\n                .build();\n    }", "signature": "Response getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "full_signature": "public static Response getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "class_method_signature": "JSONCache.getOrCache(String identifier, Supplier<Response> jsonResponseSupplier)", "testcase": false, "constructor": false, "invocations": ["getIfPresent", "get", "put", "getBytes", "build", "setContent", "setMimeType", "builder"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}