{"test_class": {"identifier": "LingoSimilarityTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/similarity/LingoSimilarityTest.java"}, "test_case": {"identifier": "testLingoSim", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLingoSim() throws Exception {\n        IAtomContainer mol1 = TestMoleculeFactory.makeIndole();\n        IAtomContainer mol2 = TestMoleculeFactory.makeIndole();\n        addImplicitHydrogens(mol1);\n        addImplicitHydrogens(mol2);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol1);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol2);\n        LingoFingerprinter fingerprinter = new LingoFingerprinter();\n        Map<String, Integer> bs1 = fingerprinter.getRawFingerprint(mol1);\n        Map<String, Integer> bs2 = fingerprinter.getRawFingerprint(mol2);\n        float lingosim = LingoSimilarity.calculate(bs1, bs2);\n        Assert.assertEquals(1.0, lingosim, 0.01);\n    }", "signature": "void testLingoSim()", "full_signature": "@Test public void testLingoSim()", "class_method_signature": "LingoSimilarityTest.testLingoSim()", "testcase": true, "constructor": false, "invocations": ["makeIndole", "makeIndole", "addImplicitHydrogens", "addImplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "percieveAtomTypesAndConfigureAtoms", "getRawFingerprint", "getRawFingerprint", "calculate", "assertEquals"]}, "focal_class": {"identifier": "LingoSimilarity", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LingoSimilarity", "parameters": "()", "modifiers": "private", "return": "", "signature": " LingoSimilarity()", "full_signature": "private  LingoSimilarity()", "class_method_signature": "LingoSimilarity.LingoSimilarity()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(Map<String, Integer> features1, Map<String, Integer> features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "full_signature": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "class_method_signature": "LingoSimilarity.calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/similarity/LingoSimilarity.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Map<String, Integer> features1, Map<String, Integer> features2)", "modifiers": "public static", "return": "float", "body": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2) {\n        TreeSet<String> keys = new TreeSet<String>(features1.keySet());\n        keys.addAll(features2.keySet());\n\n        float sum = 0.0f;\n        for (String key : keys) {\n            Integer c1 = features1.get(key);\n            Integer c2 = features2.get(key);\n\n            c1 = c1 == null ? 0 : c1;\n            c2 = c2 == null ? 0 : c2;\n            sum += 1.0 - Math.abs(c1 - c2) / (c1 + c2);\n        }\n\n        return sum / keys.size();\n    }", "signature": "float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "full_signature": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "class_method_signature": "LingoSimilarity.calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "testcase": false, "constructor": false, "invocations": ["keySet", "addAll", "keySet", "get", "get", "abs", "size"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}