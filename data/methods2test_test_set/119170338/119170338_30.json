{"test_class": {"identifier": "RelationshipTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/data/RelationshipTypeTest.java"}, "test_case": {"identifier": "allowsForUndefinedRelationship", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void allowsForUndefinedRelationship() {\n    assertEquals(RelationshipType.of(\"wibble\", \"thing\"), RelationshipType.of(\"wibble\", \"thing\"));\n  }", "signature": "void allowsForUndefinedRelationship()", "full_signature": "@Test void allowsForUndefinedRelationship()", "class_method_signature": "RelationshipTypeTest.allowsForUndefinedRelationship()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "of"]}, "focal_class": {"identifier": "RelationshipType", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, RelationshipType> cache = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, RelationshipType>", "declarator": "cache = new ConcurrentHashMap<>()", "var_name": "cache"}, {"original_string": "public static final RelationshipType IS_A = new RelationshipType(\"is_a\", \"is_a\");", "modifier": "public static final", "type": "RelationshipType", "declarator": "IS_A = new RelationshipType(\"is_a\", \"is_a\")", "var_name": "IS_A"}, {"original_string": "public static final RelationshipType PART_OF = new RelationshipType(\"http://purl.obolibrary.org/obo/BFO_0000050\",\"part of\");", "modifier": "public static final", "type": "RelationshipType", "declarator": "PART_OF = new RelationshipType(\"http://purl.obolibrary.org/obo/BFO_0000050\",\"part of\")", "var_name": "PART_OF"}, {"original_string": "public static final RelationshipType SUBPROPERTY_OF = new RelationshipType(\"subPropertyOf\", \"subPropertyOf\");", "modifier": "public static final", "type": "RelationshipType", "declarator": "SUBPROPERTY_OF = new RelationshipType(\"subPropertyOf\", \"subPropertyOf\")", "var_name": "SUBPROPERTY_OF"}, {"original_string": "public static final RelationshipType HAS_MODIFIER = new RelationshipType(\"http://purl.obolibrary.org/obo/RO_0002573\",\"hasModifier\");", "modifier": "public static final", "type": "RelationshipType", "declarator": "HAS_MODIFIER = new RelationshipType(\"http://purl.obolibrary.org/obo/RO_0002573\",\"hasModifier\")", "var_name": "HAS_MODIFIER"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(RelationshipType.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RelationshipType.class)", "var_name": "logger"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final String label;", "modifier": "private final", "type": "String", "declarator": "label", "var_name": "label"}], "methods": [{"identifier": "RelationshipType", "parameters": "(String id, String name)", "modifiers": "private", "return": "", "signature": " RelationshipType(String id, String name)", "full_signature": "private  RelationshipType(String id, String name)", "class_method_signature": "RelationshipType.RelationshipType(String id, String name)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "RelationshipType.getId()", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLabel()", "full_signature": "public String getLabel()", "class_method_signature": "RelationshipType.getLabel()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String id, String label)", "modifiers": "public static", "return": "RelationshipType", "signature": "RelationshipType of(String id, String label)", "full_signature": "public static RelationshipType of(String id, String label)", "class_method_signature": "RelationshipType.of(String id, String label)", "testcase": false, "constructor": false}, {"identifier": "propagates", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean propagates()", "full_signature": "public boolean propagates()", "class_method_signature": "RelationshipType.propagates()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RelationshipType.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RelationshipType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RelationshipType.toString()", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/data/RelationshipType.java"}, "focal_method": {"identifier": "of", "parameters": "(String id, String label)", "modifiers": "public static", "return": "RelationshipType", "body": "public static RelationshipType of(String id, String label) {\n    switch (id) {\n      case \"is_a\":\n        return IS_A;\n      case \"http://purl.obolibrary.org/obo/BFO_0000050\":\n      case \"part of\":\n      case \"part_of\":\n        return PART_OF;\n//      case \"http://purl.obolibrary.org/obo/BFO_0000051\":\n//      case \"has part\":\n//        return HAS_PART;\n//      case \"http://purl.obolibrary.org/obo/RO_0002211\":\n//      case \"regulates\":\n//        return REGULATES;\n//      case \"http://purl.obolibrary.org/obo/RO_0002212\":\n//      case \"negatively regulates\":\n//        return NEGATIVELY_REGULATES;\n//      case \"http://purl.obolibrary.org/obo/RO_0002213\":\n//      case \"positively regulates\":\n//        return POSITIVELY_REGULATES;\n//      case \"http://purl.obolibrary.org/obo/BFO_0000066\":\n//      case \"occurs in\":\n//        return OCCURS_IN;\n//      case \"http://purl.obolibrary.org/obo/RO_0002092\":\n//      case \"happens during\":\n//        return HAPPENS_DURING;\n//      case \"http://purl.obolibrary.org/obo/RO_0002093\":\n//      case \"ends during\":\n//        return ENDS_DURING;\n      case \"subPropertyOf\":\n        return SUBPROPERTY_OF;\n//      case \"inverseOf\":\n//        return INVERSE_OF;\n      case \"http://purl.obolibrary.org/obo/RO_0002573\":\n      case \"has modifier\":\n        return HAS_MODIFIER;\n//      case \"http://purl.obolibrary.org/obo/RO_0004022\":\n//        return DISEASE_HAS_BASIS_IN_FEATURE;\n//      case \"http://purl.obolibrary.org/obo/mondo#disease_shares_features_of\":\n//        return DISEASE_SHARES_FEATURES_OF;\n//      case \"http://purl.obolibrary.org/obo/RO_0004029\":\n//        return DISEASE_HAS_FEATURE;\n//      case \"http://purl.obolibrary.org/obo/mondo#disease_has_major_feature\":\n//        return DISEASE_HAS_MAJOR_FEATURE;\n//      case \"http://purl.obolibrary.org/obo/RO_0004026\":\n//        return DISEASE_HAS_LOCATION;\n//      case \"http://purl.obolibrary.org/obo/mondo#disease_causes_feature\":\n//        return DISEASE_CAUSES_FEATURE;\n//      case \"http://purl.obolibrary.org/obo/mondo#part_of_progression_of_disease\":\n//        return PART_OF_PROGRESSION_OF_DISEASE;\n//      case \"http://purl.obolibrary.org/obo/RO_0004028\":\n//        return REALIZED_IN_RESPONSE_TO_STIMULUS;\n      default:\n        return cache.computeIfAbsent(id, key -> new RelationshipType(id, label));\n    }\n  }", "signature": "RelationshipType of(String id, String label)", "full_signature": "public static RelationshipType of(String id, String label)", "class_method_signature": "RelationshipType.of(String id, String label)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}