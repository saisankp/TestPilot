{"test_class": {"identifier": "SupplierConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/converters/SupplierConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() {\n        SupplierConverter instance = new SupplierConverter();\n        Supplier<String> stringResult;\n        TypeLiteral listStringTypeLiteral = new TypeLiteral<List<String>> () {};\n        ConversionContext context = new ConversionContext.Builder(listStringTypeLiteral).build();\n\n        stringResult = instance.convert(null, context);\n        assertThat(stringResult.get()).isNull();\n        \n        stringResult = instance.convert(\"aString\", context);\n        assertThat(stringResult.get()).isEqualTo(\"aString\");\n\n\n\n        Supplier<InetAddress> addressResult;\n        \n        Configuration mockConfig = Mockito.mock(Configuration.class);\n        Mockito.when(mockConfig.adapt(any())).thenReturn(Mockito.mock(InetAddress.class));\n        \n        TypeLiteral myConverterTypeLiteral = new TypeLiteral<MyConverter<InetAddress>> () {};\n        ConversionContext myConverterContext = new ConversionContext.Builder(myConverterTypeLiteral)\n                .setConfiguration(mockConfig)\n                .build();\n        addressResult = instance.convert(\"someKey\", myConverterContext);\n\n        assertThat(addressResult.get() instanceof InetAddress).isTrue();\n\n\n}", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "SupplierConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["build", "convert", "isNull", "assertThat", "get", "convert", "isEqualTo", "assertThat", "get", "mock", "thenReturn", "when", "adapt", "any", "mock", "build", "setConfiguration", "convert", "isTrue", "assertThat", "get"]}, "focal_class": {"identifier": "SupplierConverter", "superclass": "", "interfaces": "implements PropertyConverter<Supplier>", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(SupplierConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(SupplierConverter.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "convert", "parameters": "(String value, ConversionContext context)", "modifiers": "@Override public", "return": "Supplier", "signature": "Supplier convert(String value, ConversionContext context)", "full_signature": "@Override public Supplier convert(String value, ConversionContext context)", "class_method_signature": "SupplierConverter.convert(String value, ConversionContext context)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SupplierConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SupplierConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/converters/SupplierConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext context)", "modifiers": "@Override public", "return": "Supplier", "body": "@Override\n    public Supplier convert(String value, ConversionContext context) {\n        return () -> {\n            try{\n                Type targetType = context.getTargetType().getType();\n                ParameterizedType pt = (ParameterizedType) targetType;\n                if(String.class.equals(pt.getActualTypeArguments()[0])){\n                    return value;\n                }\n                ConvertQuery converter = new ConvertQuery(value, TypeLiteral.of(pt.getActualTypeArguments()[0]));\n                Object o = context.getConfiguration().adapt(converter);\n                if(o==null){\n                    throw new ConfigException(\"No such createValue: \" + context.getKey());\n                }\n                return o;\n            }catch(Exception e){\n                throw new ConfigException(\"Error evaluating config createValue.\", e);\n            }\n        };\n    }", "signature": "Supplier convert(String value, ConversionContext context)", "full_signature": "@Override public Supplier convert(String value, ConversionContext context)", "class_method_signature": "SupplierConverter.convert(String value, ConversionContext context)", "testcase": false, "constructor": false, "invocations": ["getType", "getTargetType", "equals", "getActualTypeArguments", "of", "getActualTypeArguments", "adapt", "getConfiguration", "getKey"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}