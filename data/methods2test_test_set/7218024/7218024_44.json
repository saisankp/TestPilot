{"test_class": {"identifier": "TestCopyOutputFormat", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestCopyOutputFormat.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestCopyOutputFormat.class)", "var_name": "LOG"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/mapred/TestCopyOutputFormat.java"}, "test_case": {"identifier": "testCheckOutputSpecs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCheckOutputSpecs() {\n    try {\n      OutputFormat outputFormat = new CopyOutputFormat();\n      Configuration conf = new Configuration();\n      Job job = new Job(conf);\n      JobID jobID = new JobID(\"200707121733\", 1);\n\n      try {\n        JobContext context = Mockito.mock(JobContext.class);\n        Mockito.when(context.getConfiguration()).thenReturn(job.getConfiguration());\n        Mockito.when(context.getJobID()).thenReturn(jobID);\n        outputFormat.checkOutputSpecs(context);\n        Assert.fail(\"No checking for invalid work/commit path\");\n      } catch (IllegalStateException ignore) { }\n\n      CopyOutputFormat.setWorkingDirectory(job, new Path(\"/tmp/work\"));\n      try {\n        JobContext context = Mockito.mock(JobContext.class);\n        Mockito.when(context.getConfiguration()).thenReturn(job.getConfiguration());\n        Mockito.when(context.getJobID()).thenReturn(jobID);        outputFormat.checkOutputSpecs(context);\n        Assert.fail(\"No checking for invalid commit path\");\n      } catch (IllegalStateException ignore) { }\n\n      job.getConfiguration().set(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH, \"\");\n      CopyOutputFormat.setCommitDirectory(job, new Path(\"/tmp/commit\"));\n      try {\n        JobContext context = Mockito.mock(JobContext.class);\n        Mockito.when(context.getConfiguration()).thenReturn(job.getConfiguration());\n        Mockito.when(context.getJobID()).thenReturn(jobID);\n        outputFormat.checkOutputSpecs(context);\n        Assert.fail(\"No checking for invalid work path\");\n      } catch (IllegalStateException ignore) { }\n\n      CopyOutputFormat.setWorkingDirectory(job, new Path(\"/tmp/work\"));\n      CopyOutputFormat.setCommitDirectory(job, new Path(\"/tmp/commit\"));\n      try {\n        JobContext context = Mockito.mock(JobContext.class);\n        Mockito.when(context.getConfiguration()).thenReturn(job.getConfiguration());\n        Mockito.when(context.getJobID()).thenReturn(jobID);\n        outputFormat.checkOutputSpecs(context);\n      } catch (IllegalStateException ignore) {\n        ignore.printStackTrace();\n        Assert.fail(\"Output spec check failed.\");\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception encountered while testing checkoutput specs\", e);\n      Assert.fail(\"Checkoutput Spec failure\");\n    } catch (InterruptedException e) {\n      LOG.error(\"Exception encountered while testing checkoutput specs\", e);\n      Assert.fail(\"Checkoutput Spec failure\");\n    }\n  }", "signature": "void testCheckOutputSpecs()", "full_signature": "@Test public void testCheckOutputSpecs()", "class_method_signature": "TestCopyOutputFormat.testCheckOutputSpecs()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getConfiguration", "getConfiguration", "thenReturn", "when", "getJobID", "checkOutputSpecs", "fail", "setWorkingDirectory", "mock", "thenReturn", "when", "getConfiguration", "getConfiguration", "thenReturn", "when", "getJobID", "checkOutputSpecs", "fail", "set", "getConfiguration", "setCommitDirectory", "mock", "thenReturn", "when", "getConfiguration", "getConfiguration", "thenReturn", "when", "getJobID", "checkOutputSpecs", "fail", "setWorkingDirectory", "setCommitDirectory", "mock", "thenReturn", "when", "getConfiguration", "getConfiguration", "thenReturn", "when", "getJobID", "checkOutputSpecs", "printStackTrace", "fail", "error", "fail", "error", "fail"]}, "focal_class": {"identifier": "CopyOutputFormat", "superclass": "extends TextOutputFormat<K, V>", "interfaces": "", "fields": [], "methods": [{"identifier": "setWorkingDirectory", "parameters": "(Job job, Path workingDirectory)", "modifiers": "public static", "return": "void", "signature": "void setWorkingDirectory(Job job, Path workingDirectory)", "full_signature": "public static void setWorkingDirectory(Job job, Path workingDirectory)", "class_method_signature": "CopyOutputFormat.setWorkingDirectory(Job job, Path workingDirectory)", "testcase": false, "constructor": false}, {"identifier": "setCommitDirectory", "parameters": "(Job job, Path commitDirectory)", "modifiers": "public static", "return": "void", "signature": "void setCommitDirectory(Job job, Path commitDirectory)", "full_signature": "public static void setCommitDirectory(Job job, Path commitDirectory)", "class_method_signature": "CopyOutputFormat.setCommitDirectory(Job job, Path commitDirectory)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "(Job job)", "modifiers": "public static", "return": "Path", "signature": "Path getWorkingDirectory(Job job)", "full_signature": "public static Path getWorkingDirectory(Job job)", "class_method_signature": "CopyOutputFormat.getWorkingDirectory(Job job)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "Path", "signature": "Path getWorkingDirectory(Configuration conf)", "full_signature": "private static Path getWorkingDirectory(Configuration conf)", "class_method_signature": "CopyOutputFormat.getWorkingDirectory(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getCommitDirectory", "parameters": "(Job job)", "modifiers": "public static", "return": "Path", "signature": "Path getCommitDirectory(Job job)", "full_signature": "public static Path getCommitDirectory(Job job)", "class_method_signature": "CopyOutputFormat.getCommitDirectory(Job job)", "testcase": false, "constructor": false}, {"identifier": "getCommitDirectory", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "Path", "signature": "Path getCommitDirectory(Configuration conf)", "full_signature": "private static Path getCommitDirectory(Configuration conf)", "class_method_signature": "CopyOutputFormat.getCommitDirectory(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getOutputCommitter", "parameters": "(TaskAttemptContext context)", "modifiers": "@Override public", "return": "OutputCommitter", "signature": "OutputCommitter getOutputCommitter(TaskAttemptContext context)", "full_signature": "@Override public OutputCommitter getOutputCommitter(TaskAttemptContext context)", "class_method_signature": "CopyOutputFormat.getOutputCommitter(TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "checkOutputSpecs", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "signature": "void checkOutputSpecs(JobContext context)", "full_signature": "@Override public void checkOutputSpecs(JobContext context)", "class_method_signature": "CopyOutputFormat.checkOutputSpecs(JobContext context)", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/mapred/CopyOutputFormat.java"}, "focal_method": {"identifier": "checkOutputSpecs", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void checkOutputSpecs(JobContext context) throws IOException {\n    Configuration conf = HadoopCompat.getConfiguration(context);\n\n    if (getCommitDirectory(conf) == null) {\n      throw new IllegalStateException(\"Commit directory not configured\");\n    }\n\n    Path workingPath = getWorkingDirectory(conf);\n    if (workingPath == null) {\n      throw new IllegalStateException(\"Working directory not configured\");\n    }\n\n    // get delegation token for outDir's file system\n    TokenCache.obtainTokensForNamenodes(HadoopCompat.getCredentials(context),\n                                        new Path[] {workingPath}, conf);\n  }", "signature": "void checkOutputSpecs(JobContext context)", "full_signature": "@Override public void checkOutputSpecs(JobContext context)", "class_method_signature": "CopyOutputFormat.checkOutputSpecs(JobContext context)", "testcase": false, "constructor": false, "invocations": ["getConfiguration", "getCommitDirectory", "getWorkingDirectory", "obtainTokensForNamenodes", "getCredentials"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}