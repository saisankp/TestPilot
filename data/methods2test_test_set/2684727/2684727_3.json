{"test_class": {"identifier": "LoginInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LoginInteractor interactor;", "modifier": "", "type": "LoginInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "Context context = ApplicationProvider.getApplicationContext();", "modifier": "", "type": "Context", "declarator": "context = ApplicationProvider.getApplicationContext()", "var_name": "context"}, {"original_string": "@Mock\n    IdentityManagerImpl identityManager;", "modifier": "@Mock", "type": "IdentityManagerImpl", "declarator": "identityManager", "var_name": "identityManager"}, {"original_string": "SmartReceiptsUserLogin loginPayload = new SmartReceiptsUserLogin(\"email\", \"password\");", "modifier": "", "type": "SmartReceiptsUserLogin", "declarator": "loginPayload = new SmartReceiptsUserLogin(\"email\", \"password\")", "var_name": "loginPayload"}, {"original_string": "SmartReceiptsUserSignUp signUpPayload = new SmartReceiptsUserSignUp(\"email\", \"password\");", "modifier": "", "type": "SmartReceiptsUserSignUp", "declarator": "signUpPayload = new SmartReceiptsUserSignUp(\"email\", \"password\")", "var_name": "signUpPayload"}, {"original_string": "@Mock\n    LoginResponse loginResponse;", "modifier": "@Mock", "type": "LoginResponse", "declarator": "loginResponse", "var_name": "loginResponse"}, {"original_string": "@Mock\n    ResponseBody responseBody;", "modifier": "@Mock", "type": "ResponseBody", "declarator": "responseBody", "var_name": "responseBody"}], "file": "app/src/test/java/co/smartreceipts/android/identity/widget/login/LoginInteractorTest.java"}, "test_case": {"identifier": "getLastUserCredentialsPayloadDefaultsAsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLastUserCredentialsPayloadDefaultsAsEmpty() {\n        final TestObserver<UserCredentialsPayload> testObserver = interactor.getLastUserCredentialsPayload().test();\n        testObserver.assertNoValues();\n        testObserver.assertComplete();\n        testObserver.assertNoErrors();\n    }", "signature": "void getLastUserCredentialsPayloadDefaultsAsEmpty()", "full_signature": "@Test public void getLastUserCredentialsPayloadDefaultsAsEmpty()", "class_method_signature": "LoginInteractorTest.getLastUserCredentialsPayloadDefaultsAsEmpty()", "testcase": true, "constructor": false, "invocations": ["test", "getLastUserCredentialsPayload", "assertNoValues", "assertComplete", "assertNoErrors"]}, "focal_class": {"identifier": "LoginInteractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INVALID_CREDENTIALS_CODE = 401;", "modifier": "private static final", "type": "int", "declarator": "INVALID_CREDENTIALS_CODE = 401", "var_name": "INVALID_CREDENTIALS_CODE"}, {"original_string": "private static final int ACCOUNT_ALREADY_EXISTS_CODE = 420;", "modifier": "private static final", "type": "int", "declarator": "ACCOUNT_ALREADY_EXISTS_CODE = 420", "var_name": "ACCOUNT_ALREADY_EXISTS_CODE"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final IdentityManagerImpl identityManager;", "modifier": "private final", "type": "IdentityManagerImpl", "declarator": "identityManager", "var_name": "identityManager"}, {"original_string": "private UserCredentialsPayload userCredentialsPayload;", "modifier": "private", "type": "UserCredentialsPayload", "declarator": "userCredentialsPayload", "var_name": "userCredentialsPayload"}, {"original_string": "private ReplaySubject<UiIndicator<String>> uiIndicatorReplaySubject;", "modifier": "private", "type": "ReplaySubject<UiIndicator<String>>", "declarator": "uiIndicatorReplaySubject", "var_name": "uiIndicatorReplaySubject"}], "methods": [{"identifier": "LoginInteractor", "parameters": "(@NonNull Context context, @NonNull IdentityManagerImpl identityManager)", "modifiers": "@Inject public", "return": "", "signature": " LoginInteractor(@NonNull Context context, @NonNull IdentityManagerImpl identityManager)", "full_signature": "@Inject public  LoginInteractor(@NonNull Context context, @NonNull IdentityManagerImpl identityManager)", "class_method_signature": "LoginInteractor.LoginInteractor(@NonNull Context context, @NonNull IdentityManagerImpl identityManager)", "testcase": false, "constructor": true}, {"identifier": "loginOrSignUp", "parameters": "(@NonNull final UserCredentialsPayload userCredentialsPayload)", "modifiers": "@NonNull public synchronized", "return": "Observable<UiIndicator<String>>", "signature": "Observable<UiIndicator<String>> loginOrSignUp(@NonNull final UserCredentialsPayload userCredentialsPayload)", "full_signature": "@NonNull public synchronized Observable<UiIndicator<String>> loginOrSignUp(@NonNull final UserCredentialsPayload userCredentialsPayload)", "class_method_signature": "LoginInteractor.loginOrSignUp(@NonNull final UserCredentialsPayload userCredentialsPayload)", "testcase": false, "constructor": false}, {"identifier": "getLastUserCredentialsPayload", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Maybe<UserCredentialsPayload>", "signature": "Maybe<UserCredentialsPayload> getLastUserCredentialsPayload()", "full_signature": "@NonNull public synchronized Maybe<UserCredentialsPayload> getLastUserCredentialsPayload()", "class_method_signature": "LoginInteractor.getLastUserCredentialsPayload()", "testcase": false, "constructor": false}, {"identifier": "onLoginResultsConsumed", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void onLoginResultsConsumed()", "full_signature": "public synchronized void onLoginResultsConsumed()", "class_method_signature": "LoginInteractor.onLoginResultsConsumed()", "testcase": false, "constructor": false}, {"identifier": "getSuccessMessage", "parameters": "(@NonNull final UserCredentialsPayload userCredentialsPayload)", "modifiers": "@NonNull private", "return": "String", "signature": "String getSuccessMessage(@NonNull final UserCredentialsPayload userCredentialsPayload)", "full_signature": "@NonNull private String getSuccessMessage(@NonNull final UserCredentialsPayload userCredentialsPayload)", "class_method_signature": "LoginInteractor.getSuccessMessage(@NonNull final UserCredentialsPayload userCredentialsPayload)", "testcase": false, "constructor": false}, {"identifier": "getErrorMessage", "parameters": "(@NonNull final UserCredentialsPayload userCredentialsPayload, @NonNull Throwable throwable)", "modifiers": "@NonNull private", "return": "String", "signature": "String getErrorMessage(@NonNull final UserCredentialsPayload userCredentialsPayload, @NonNull Throwable throwable)", "full_signature": "@NonNull private String getErrorMessage(@NonNull final UserCredentialsPayload userCredentialsPayload, @NonNull Throwable throwable)", "class_method_signature": "LoginInteractor.getErrorMessage(@NonNull final UserCredentialsPayload userCredentialsPayload, @NonNull Throwable throwable)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/identity/widget/login/LoginInteractor.java"}, "focal_method": {"identifier": "getLastUserCredentialsPayload", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Maybe<UserCredentialsPayload>", "body": "@NonNull\n    public synchronized Maybe<UserCredentialsPayload> getLastUserCredentialsPayload() {\n        if (userCredentialsPayload != null) {\n            return Maybe.just(userCredentialsPayload);\n        } else {\n            return Maybe.empty();\n        }\n    }", "signature": "Maybe<UserCredentialsPayload> getLastUserCredentialsPayload()", "full_signature": "@NonNull public synchronized Maybe<UserCredentialsPayload> getLastUserCredentialsPayload()", "class_method_signature": "LoginInteractor.getLastUserCredentialsPayload()", "testcase": false, "constructor": false, "invocations": ["just", "empty"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}