{"test_class": {"identifier": "ResolveIObjectByTypeStrategiesPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResolveIObjectByTypeStrategiesPlugin plugin;", "modifier": "private", "type": "ResolveIObjectByTypeStrategiesPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/IOCStrategyPack-plugins/PluginResolveIObjectStrategies/src/test/java/info/smart_tools/smartactors/ioc_strategy_pack_plugins/resolve_iobject_strategies_plugin/ResolveIObjectByTypeStrategiesPluginTest.java"}, "test_case": {"identifier": "ShouldCorrectLoadPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldCorrectLoadPlugin() throws Exception {\n\n        BootstrapItem item = PowerMockito.mock(BootstrapItem.class);\n        PowerMockito.whenNew(BootstrapItem.class).withArguments(\"ResolveIObjectByTypeStrategiesPlugin\").thenReturn(item);\n\n        PowerMockito.when(item.after(\"IOC\")).thenReturn(item);\n\n        plugin.load();\n\n        PowerMockito.verifyNew(BootstrapItem.class).withArguments(\"ResolveIObjectByTypeStrategiesPlugin\");\n        Mockito.verify(item).after(\"IOC\");\n\n        ArgumentCaptor<IPoorAction> iPoorActionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        Mockito.verify(item).process(iPoorActionArgumentCaptor.capture());\n\n        Mockito.verify(bootstrap).add(item);\n\n        IKey strategyKey = PowerMockito.mock(IKey.class);\n        PowerMockito.when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\" + \"convert\")).thenReturn(strategyKey);\n\n        StrategyStorageWithCacheStrategy strategy = PowerMockito.mock(StrategyStorageWithCacheStrategy.class);\n        PowerMockito.whenNew(StrategyStorageWithCacheStrategy.class).withArguments(Matchers.any(IFunction.class), Matchers.any(IBiFunction.class)).thenReturn(strategy);\n\n        iPoorActionArgumentCaptor.getValue().execute();\n\n        PowerMockito.verifyStatic();\n        Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\" + \"convert\");\n\n        PowerMockito.verifyStatic();\n        IOC.register(eq(strategyKey), eq(strategy));\n\n        Mockito.verify(strategy).register(eq(Map.class), Matchers.any(MapToIObjectResolveDependencyStrategy.class));\n        Mockito.verify(strategy).register(eq(String.class), Matchers.any(StringToIObjectResolveDependencyStrategy.class));\n    }", "signature": "void ShouldCorrectLoadPlugin()", "full_signature": "@Test public void ShouldCorrectLoadPlugin()", "class_method_signature": "ResolveIObjectByTypeStrategiesPluginTest.ShouldCorrectLoadPlugin()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "load", "withArguments", "verifyNew", "after", "verify", "forClass", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "mock", "thenReturn", "withArguments", "whenNew", "any", "any", "execute", "getValue", "verifyStatic", "getOrAdd", "verifyStatic", "register", "eq", "eq", "register", "verify", "eq", "any", "register", "verify", "eq", "any"]}, "focal_class": {"identifier": "ResolveIObjectByTypeStrategiesPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "ResolveIObjectByTypeStrategiesPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " ResolveIObjectByTypeStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  ResolveIObjectByTypeStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "ResolveIObjectByTypeStrategiesPlugin.ResolveIObjectByTypeStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ResolveIObjectByTypeStrategiesPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOCStrategyPack-plugins/PluginResolveIObjectStrategies/src/main/java/info/smart_tools/smartactors/ioc_strategy_pack_plugins/resolve_iobject_strategies_plugin/ResolveIObjectByTypeStrategiesPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"ResolveIObjectByTypeStrategiesPlugin\");\n            item\n                .after(\"IOC\")\n                .process(() -> {\n                    try {\n                        IFunction argToKey = arg -> arg.getClass();\n                        IBiFunction findValueByArgument = (map, arg) -> {\n                            IResolveDependencyStrategy strategy = null;\n                            for (Map.Entry<Class, IResolveDependencyStrategy> entry : ((Map<Class, IResolveDependencyStrategy>) map).entrySet()) {\n                                if (entry.getKey().isInstance(arg)) {\n                                    strategy = entry.getValue();\n\n                                    break;\n                                }\n                            }\n                            return strategy;\n                        };\n\n                        IKey typeStrategy = Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\" + \"convert\");\n                        IKey expandableTypeStrategy = Keys.getOrAdd(\"expandable_strategy#\" + \"info.smart_tools.smartactors.iobject.iobject.IObject\");\n                        IResolveDependencyStrategy resolveStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                        ((IAdditionDependencyStrategy) resolveStrategy).register(Map.class, new MapToIObjectResolveDependencyStrategy());\n                        ((IAdditionDependencyStrategy) resolveStrategy).register(String.class, new StringToIObjectResolveDependencyStrategy());\n                        IOC.register(typeStrategy, resolveStrategy);\n                        IOC.register(expandableTypeStrategy, new SingletonStrategy(resolveStrategy));\n                    } catch (ResolutionException e) {\n                        throw new ActionExecuteException(\"ResolveIObjectByTypeStrategies plugin can't load: can't get ResolveIObjectByTypeStrategies key\", e);\n                    } catch (RegistrationException | AdditionDependencyStrategyException | InvalidArgumentException e) {\n                        throw new ActionExecuteException(\"ResolveIObjectByTypeStrategies plugin can't load: can't register new strategy\", e);\n                    }\n                });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load resolve iobject by type strategies plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ResolveIObjectByTypeStrategiesPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getClass", "entrySet", "isInstance", "getKey", "getValue", "getOrAdd", "getOrAdd", "register", "register", "register", "register", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}