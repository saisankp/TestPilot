{"test_class": {"identifier": "DefaultStrategyFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultStrategyFinder sut;", "modifier": "private", "type": "DefaultStrategyFinder", "declarator": "sut", "var_name": "sut"}, {"original_string": "private TypesForMessageMapper messageMapper;", "modifier": "private", "type": "TypesForMessageMapper", "declarator": "messageMapper", "var_name": "messageMapper"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/processing/DefaultStrategyFinderTest.java"}, "test_case": {"identifier": "find_continueSagaMessage_returnsContinueSagaStrategy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void find_continueSagaMessage_returnsContinueSagaStrategy() {\n        // given\n        Object message = mockContinueMessage();\n        LookupContext context = mockMessageContext(message);\n\n        // when\n        Collection<ResolveStrategy> strategies = sut.find(context);\n\n        // then\n        assertThat(\"Expected a continue all saga strategy.\", strategies, hasItem(isA(ContinueAllStrategy.class)));\n    }", "signature": "void find_continueSagaMessage_returnsContinueSagaStrategy()", "full_signature": "@Test public void find_continueSagaMessage_returnsContinueSagaStrategy()", "class_method_signature": "DefaultStrategyFinderTest.find_continueSagaMessage_returnsContinueSagaStrategy()", "testcase": true, "constructor": false, "invocations": ["mockContinueMessage", "mockMessageContext", "find", "assertThat", "hasItem", "isA"]}, "focal_class": {"identifier": "DefaultStrategyFinder", "superclass": "", "interfaces": "implements StrategyFinder", "fields": [{"original_string": "private final TypesForMessageMapper typesForMessageMapper;", "modifier": "private final", "type": "TypesForMessageMapper", "declarator": "typesForMessageMapper", "var_name": "typesForMessageMapper"}, {"original_string": "private final SagaInstanceFactory instanceFactory;", "modifier": "private final", "type": "SagaInstanceFactory", "declarator": "instanceFactory", "var_name": "instanceFactory"}, {"original_string": "private final KeyExtractor keyExtractor;", "modifier": "private final", "type": "KeyExtractor", "declarator": "keyExtractor", "var_name": "keyExtractor"}, {"original_string": "private final StateStorage stateStorage;", "modifier": "private final", "type": "StateStorage", "declarator": "stateStorage", "var_name": "stateStorage"}], "methods": [{"identifier": "DefaultStrategyFinder", "parameters": "(\n            final TypesForMessageMapper typesForMessageMapper,\n            final SagaInstanceFactory instanceFactory,\n            final KeyExtractor keyExtractor,\n            final StateStorage stateStorage)", "modifiers": "@Inject public", "return": "", "signature": " DefaultStrategyFinder(\n            final TypesForMessageMapper typesForMessageMapper,\n            final SagaInstanceFactory instanceFactory,\n            final KeyExtractor keyExtractor,\n            final StateStorage stateStorage)", "full_signature": "@Inject public  DefaultStrategyFinder(\n            final TypesForMessageMapper typesForMessageMapper,\n            final SagaInstanceFactory instanceFactory,\n            final KeyExtractor keyExtractor,\n            final StateStorage stateStorage)", "class_method_signature": "DefaultStrategyFinder.DefaultStrategyFinder(\n            final TypesForMessageMapper typesForMessageMapper,\n            final SagaInstanceFactory instanceFactory,\n            final KeyExtractor keyExtractor,\n            final StateStorage stateStorage)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(final LookupContext context)", "modifiers": "@Override public", "return": "Collection<ResolveStrategy>", "signature": "Collection<ResolveStrategy> find(final LookupContext context)", "full_signature": "@Override public Collection<ResolveStrategy> find(final LookupContext context)", "class_method_signature": "DefaultStrategyFinder.find(final LookupContext context)", "testcase": false, "constructor": false}, {"identifier": "checkAnnotatedMethodTypes", "parameters": "(final LookupContext context)", "modifiers": "private", "return": "Collection<ResolveStrategy>", "signature": "Collection<ResolveStrategy> checkAnnotatedMethodTypes(final LookupContext context)", "full_signature": "private Collection<ResolveStrategy> checkAnnotatedMethodTypes(final LookupContext context)", "class_method_signature": "DefaultStrategyFinder.checkAnnotatedMethodTypes(final LookupContext context)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/processing/DefaultStrategyFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(final LookupContext context)", "modifiers": "@Override public", "return": "Collection<ResolveStrategy>", "body": "@Override\n    public Collection<ResolveStrategy> find(final LookupContext context) {\n        Collection<ResolveStrategy> strategies = new ArrayList<>();\n\n        // timeout is special, saga id is known resulting in a simpler strategy without\n        // having to read instance keys or searching by instance key in the state storage.\n        if (context.message() instanceof Timeout) {\n            strategies.add(new TimeoutResolveStrategy(typesForMessageMapper, instanceFactory, stateStorage));\n        } else {\n            strategies.addAll(checkAnnotatedMethodTypes(context));\n        }\n\n        return strategies;\n    }", "signature": "Collection<ResolveStrategy> find(final LookupContext context)", "full_signature": "@Override public Collection<ResolveStrategy> find(final LookupContext context)", "class_method_signature": "DefaultStrategyFinder.find(final LookupContext context)", "testcase": false, "constructor": false, "invocations": ["message", "add", "addAll", "checkAnnotatedMethodTypes"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}