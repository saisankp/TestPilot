{"test_class": {"identifier": "WalletTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/core/WalletTest.java"}, "test_case": {"identifier": "testLoad1", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n\tpublic void testLoad1() throws TransformerException,\n\t\t\tParserConfigurationException, IOException, SAXException {\n        Wallet wallet = new Wallet();\n        wallet.load();\n    }", "signature": "void testLoad1()", "full_signature": "@Test @Ignore public void testLoad1()", "class_method_signature": "WalletTest.testLoad1()", "testcase": true, "constructor": false, "invocations": ["load"]}, "focal_class": {"identifier": "Wallet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(\"wallet\");", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"wallet\")", "var_name": "logger"}, {"original_string": "private Map<String, WalletTransaction> walletTransactions = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, WalletTransaction>", "declarator": "walletTransactions = new ConcurrentHashMap<>()", "var_name": "walletTransactions"}, {"original_string": "private Map<String, Account> rows = new HashMap<>();", "modifier": "private", "type": "Map<String, Account>", "declarator": "rows = new HashMap<>()", "var_name": "rows"}, {"original_string": "private long high;", "modifier": "private", "type": "long", "declarator": "high", "var_name": "high"}, {"original_string": "private List<WalletListener> listeners = new ArrayList<>();", "modifier": "private", "type": "List<WalletListener>", "declarator": "listeners = new ArrayList<>()", "var_name": "listeners"}, {"original_string": "private Map<ByteArrayWrapper, Transaction> transactionMap = new HashMap<>();", "modifier": "private", "type": "Map<ByteArrayWrapper, Transaction>", "declarator": "transactionMap = new HashMap<>()", "var_name": "transactionMap"}], "methods": [{"identifier": "addNewAccount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addNewAccount()", "full_signature": "public void addNewAccount()", "class_method_signature": "Wallet.addNewAccount()", "testcase": false, "constructor": false}, {"identifier": "importKey", "parameters": "(byte[] privKey)", "modifiers": "public", "return": "void", "signature": "void importKey(byte[] privKey)", "full_signature": "public void importKey(byte[] privKey)", "class_method_signature": "Wallet.importKey(byte[] privKey)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(WalletListener walletListener)", "modifiers": "public", "return": "void", "signature": "void addListener(WalletListener walletListener)", "full_signature": "public void addListener(WalletListener walletListener)", "class_method_signature": "Wallet.addListener(WalletListener walletListener)", "testcase": false, "constructor": false}, {"identifier": "getAccountCollection", "parameters": "()", "modifiers": "public", "return": "Collection<Account>", "signature": "Collection<Account> getAccountCollection()", "full_signature": "public Collection<Account> getAccountCollection()", "class_method_signature": "Wallet.getAccountCollection()", "testcase": false, "constructor": false}, {"identifier": "getAccountState", "parameters": "(byte[] addressBytes)", "modifiers": "public", "return": "AccountState", "signature": "AccountState getAccountState(byte[] addressBytes)", "full_signature": "public AccountState getAccountState(byte[] addressBytes)", "class_method_signature": "Wallet.getAccountState(byte[] addressBytes)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(byte[] addressBytes)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance(byte[] addressBytes)", "full_signature": "public BigInteger getBalance(byte[] addressBytes)", "class_method_signature": "Wallet.getBalance(byte[] addressBytes)", "testcase": false, "constructor": false}, {"identifier": "totalBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger totalBalance()", "full_signature": "public BigInteger totalBalance()", "class_method_signature": "Wallet.totalBalance()", "testcase": false, "constructor": false}, {"identifier": "addByWalletTransaction", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "WalletTransaction", "signature": "WalletTransaction addByWalletTransaction(Transaction transaction)", "full_signature": "public WalletTransaction addByWalletTransaction(Transaction transaction)", "class_method_signature": "Wallet.addByWalletTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "addTransaction", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "WalletTransaction", "signature": "WalletTransaction addTransaction(Transaction transaction)", "full_signature": "public WalletTransaction addTransaction(Transaction transaction)", "class_method_signature": "Wallet.addTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "addTransactions", "parameters": "(List<Transaction> transactions)", "modifiers": "public", "return": "void", "signature": "void addTransactions(List<Transaction> transactions)", "full_signature": "public void addTransactions(List<Transaction> transactions)", "class_method_signature": "Wallet.addTransactions(List<Transaction> transactions)", "testcase": false, "constructor": false}, {"identifier": "removeTransactions", "parameters": "(List<Transaction> transactions)", "modifiers": "public", "return": "void", "signature": "void removeTransactions(List<Transaction> transactions)", "full_signature": "public void removeTransactions(List<Transaction> transactions)", "class_method_signature": "Wallet.removeTransactions(List<Transaction> transactions)", "testcase": false, "constructor": false}, {"identifier": "removeTransaction", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "void", "signature": "void removeTransaction(Transaction transaction)", "full_signature": "public void removeTransaction(Transaction transaction)", "class_method_signature": "Wallet.removeTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "applyTransaction", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "void", "signature": "void applyTransaction(Transaction transaction)", "full_signature": "public void applyTransaction(Transaction transaction)", "class_method_signature": "Wallet.applyTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "processBlock", "parameters": "(Block block)", "modifiers": "public", "return": "void", "signature": "void processBlock(Block block)", "full_signature": "public void processBlock(Block block)", "class_method_signature": "Wallet.processBlock(Block block)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void load()", "full_signature": "public void load()", "class_method_signature": "Wallet.load()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void save()", "full_signature": "public void save()", "class_method_signature": "Wallet.save()", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyListeners()", "full_signature": "private void notifyListeners()", "class_method_signature": "Wallet.notifyListeners()", "testcase": false, "constructor": false}, {"identifier": "getHigh", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getHigh()", "full_signature": "public long getHigh()", "class_method_signature": "Wallet.getHigh()", "testcase": false, "constructor": false}, {"identifier": "setHigh", "parameters": "(long high)", "modifiers": "public", "return": "void", "signature": "void setHigh(long high)", "full_signature": "public void setHigh(long high)", "class_method_signature": "Wallet.setHigh(long high)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/Wallet.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void load() throws IOException, SAXException, ParserConfigurationException {\n\n    \t/**\n\n         <wallet high=\"8933\">\n             <row id=1>\n                 <address nonce=\"1\" >7c63d6d8b6a4c1ec67766ae123637ca93c199935<address/>\n                 <privkey>roman<privkey/>\n                 <value>20000000<value/>\n             </row>\n             <row id=2>\n                 <address nonce=\"6\" >b5da3e0ba57da04f94793d1c334e476e7ce7b873<address/>\n                 <privkey>cow<privkey/>\n                 <value>900099909<value/>\n             </row>\n         </wallet>\n         \n         */\n\n        String dir = System.getProperty(\"user.dir\");\n        String fileName = dir + \"/wallet.xml\";\n\n        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n        Document doc = dBuilder.parse(fileName);\n\n        Node walletNode = doc.getElementsByTagName(\"wallet\").item(0);\n        String high = walletNode.getAttributes().getNamedItem(\"high\").getTextContent();\n        this.setHigh(Long.parseLong(high));\n\n        NodeList rowNodes = walletNode.getChildNodes();\n\n        for (int i = 0; i <  rowNodes.getLength(); ++i ) {\n\n            Node rowNode   = rowNodes.item(i);\n            Node addrNode  = rowNode.getChildNodes().item(0);\n            Node privNode  = rowNode.getChildNodes().item(1);\n            Node valueNode = rowNode.getChildNodes().item(2);\n\n            // TODO: complete load func\n//            byte[] privKey = Hex.decode(privNode.getTextContent());\n//            Address address = new Address(privKey);\n//            BigInteger value = new BigInteger(valueNode.getTextContent());\n\n//            this.importKey(privKey);\n//            this.setBalance(address, value);\n        }\n    }", "signature": "void load()", "full_signature": "public void load()", "class_method_signature": "Wallet.load()", "testcase": false, "constructor": false, "invocations": ["getProperty", "newInstance", "newDocumentBuilder", "parse", "item", "getElementsByTagName", "getTextContent", "getNamedItem", "getAttributes", "setHigh", "parseLong", "getChildNodes", "getLength", "item", "item", "getChildNodes", "item", "getChildNodes", "item", "getChildNodes"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}