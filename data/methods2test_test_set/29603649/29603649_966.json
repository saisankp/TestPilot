{"test_class": {"identifier": "OperationModeStatusServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProxyModeToggle proxyModeToggle;", "modifier": "@Mock\n    private", "type": "ProxyModeToggle", "declarator": "proxyModeToggle", "var_name": "proxyModeToggle"}, {"original_string": "@Mock\n    private RoutingService routingService;", "modifier": "@Mock\n    private", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}, {"original_string": "@InjectMocks\n    private OperationModeStatusServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "OperationModeStatusServlet", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/operation/mode/OperationModeStatusServletTest.java"}, "test_case": {"identifier": "testDoGetShouldWriteStatusToResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoGetShouldWriteStatusToResponse() throws ServletException, IOException {\n        //GIVEN\n        given(proxyModeToggle.isProxyModeOn()).willReturn(true);\n        given(routingService.isStubModeOn()).willReturn(false);\n        //WHEN\n        underTest.doGet(request, response);\n        //THEN\n        verify(printWriter).write(\"{\\\"proxyMode\\\":true,\\\"stubMode\\\":false,\\\"wilmaMode\\\":false}\");\n    }", "signature": "void testDoGetShouldWriteStatusToResponse()", "full_signature": "@Test public void testDoGetShouldWriteStatusToResponse()", "class_method_signature": "OperationModeStatusServletTest.testDoGetShouldWriteStatusToResponse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "isProxyModeOn", "willReturn", "given", "isStubModeOn", "doGet", "write", "verify"]}, "focal_class": {"identifier": "OperationModeStatusServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private final ProxyModeToggle proxyModeToggle;", "modifier": "private final", "type": "ProxyModeToggle", "declarator": "proxyModeToggle", "var_name": "proxyModeToggle"}, {"original_string": "private final RoutingService routingService;", "modifier": "private final", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}], "methods": [{"identifier": "OperationModeStatusServlet", "parameters": "(ProxyModeToggle proxyModeToggle, RoutingService routingService)", "modifiers": "@Autowired public", "return": "", "signature": " OperationModeStatusServlet(ProxyModeToggle proxyModeToggle, RoutingService routingService)", "full_signature": "@Autowired public  OperationModeStatusServlet(ProxyModeToggle proxyModeToggle, RoutingService routingService)", "class_method_signature": "OperationModeStatusServlet.OperationModeStatusServlet(ProxyModeToggle proxyModeToggle, RoutingService routingService)", "testcase": false, "constructor": true}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "OperationModeStatusServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "OperationModeStatusServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/operation/mode/OperationModeStatusServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"application/json\");\n        PrintWriter out = resp.getWriter();\n        boolean proxyModeOn = proxyModeToggle.isProxyModeOn();\n        boolean stubModeOn = routingService.isStubModeOn();\n        boolean wilmaModeOn = !proxyModeOn && !stubModeOn;\n        out.write(\"{\\\"proxyMode\\\":\" + proxyModeOn + \",\\\"stubMode\\\":\" + stubModeOn + \",\\\"wilmaMode\\\":\" + wilmaModeOn + \"}\");\n        out.flush();\n        out.close();\n    }", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "OperationModeStatusServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["setContentType", "getWriter", "isProxyModeOn", "isStubModeOn", "write", "flush", "close"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}