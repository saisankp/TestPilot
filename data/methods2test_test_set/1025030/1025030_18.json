{"test_class": {"identifier": "GenericMigrationWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final URI sourceFormatURI;", "modifier": "private final", "type": "URI", "declarator": "sourceFormatURI", "var_name": "sourceFormatURI"}, {"original_string": "private final URI destinationFormatURI;", "modifier": "private final", "type": "URI", "declarator": "destinationFormatURI", "var_name": "destinationFormatURI"}, {"original_string": "private GenericMigrationWrapper genericWrapper;", "modifier": "private", "type": "GenericMigrationWrapper", "declarator": "genericWrapper", "var_name": "genericWrapper"}, {"original_string": "private List<Parameter> testParameters;", "modifier": "private", "type": "List<Parameter>", "declarator": "testParameters", "var_name": "testParameters"}], "file": "framework/generic/src/test/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/GenericMigrationWrapperTest.java"}, "test_case": {"identifier": "testMigrateUsingTempFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMigrateUsingTempFiles() throws Exception {\n\tthis.testParameters.add(new Parameter(\"mode\", \"complete\"));\n\n\tMigrateResult migrationResult = this.genericWrapper.migrate(\n\t\tgetDigitalTestObject(), this.sourceFormatURI, this.destinationFormatURI,\n\t\tthis.testParameters);\n\n\t//TODO: Test the contents of the digital object and the metadata.\n\t\n\tAssert.assertEquals(ServiceReport.Status.SUCCESS, migrationResult\n\t\t.getReport().getStatus());\n    }", "signature": "void testMigrateUsingTempFiles()", "full_signature": "@Test public void testMigrateUsingTempFiles()", "class_method_signature": "GenericMigrationWrapperTest.testMigrateUsingTempFiles()", "testcase": true, "constructor": false, "invocations": ["add", "migrate", "getDigitalTestObject", "assertEquals", "getStatus", "getReport"]}, "focal_class": {"identifier": "GenericMigrationWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = Logger.getLogger(GenericMigrationWrapper.class\n\t    .getName());", "modifier": "private", "type": "Logger", "declarator": "log = Logger.getLogger(GenericMigrationWrapper.class\n\t    .getName())", "var_name": "log"}, {"original_string": "private MigrationPaths migrationPaths;", "modifier": "private", "type": "MigrationPaths", "declarator": "migrationPaths", "var_name": "migrationPaths"}, {"original_string": "private final String toolIdentifier;", "modifier": "private final", "type": "String", "declarator": "toolIdentifier", "var_name": "toolIdentifier"}, {"original_string": "private final TemporaryFileFactory tempFileFactory;", "modifier": "private final", "type": "TemporaryFileFactory", "declarator": "tempFileFactory", "var_name": "tempFileFactory"}, {"original_string": "private final List<Parameter> environmentParameters;", "modifier": "private final", "type": "List<Parameter>", "declarator": "environmentParameters", "var_name": "environmentParameters"}, {"original_string": "private ServiceDescription serviceDescription;", "modifier": "private", "type": "ServiceDescription", "declarator": "serviceDescription", "var_name": "serviceDescription"}], "methods": [{"identifier": "GenericMigrationWrapper", "parameters": "(Document configuration,\n\t    Configuration environmentSettings, String toolIdentifier)", "modifiers": "public", "return": "", "signature": " GenericMigrationWrapper(Document configuration,\n\t    Configuration environmentSettings, String toolIdentifier)", "full_signature": "public  GenericMigrationWrapper(Document configuration,\n\t    Configuration environmentSettings, String toolIdentifier)", "class_method_signature": "GenericMigrationWrapper.GenericMigrationWrapper(Document configuration,\n\t    Configuration environmentSettings, String toolIdentifier)", "testcase": false, "constructor": true}, {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "GenericMigrationWrapper.describe()", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "modifiers": "@SuppressWarnings(\"boxing\") public", "return": "MigrateResult", "signature": "MigrateResult migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "full_signature": "@SuppressWarnings(\"boxing\") public MigrateResult migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "class_method_signature": "GenericMigrationWrapper.migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "testcase": false, "constructor": false}, {"identifier": "buildMigrationResult", "parameters": "(MigrationPath migrationPath,\n\t    DigitalObject inputObject, DigitalObject resultObject,\n\t    ProcessRunner toolProcessRunner)", "modifiers": "private", "return": "MigrateResult", "signature": "MigrateResult buildMigrationResult(MigrationPath migrationPath,\n\t    DigitalObject inputObject, DigitalObject resultObject,\n\t    ProcessRunner toolProcessRunner)", "full_signature": "private MigrateResult buildMigrationResult(MigrationPath migrationPath,\n\t    DigitalObject inputObject, DigitalObject resultObject,\n\t    ProcessRunner toolProcessRunner)", "class_method_signature": "GenericMigrationWrapper.buildMigrationResult(MigrationPath migrationPath,\n\t    DigitalObject inputObject, DigitalObject resultObject,\n\t    ProcessRunner toolProcessRunner)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryFiles", "parameters": "(MigrationPath migrationPath)", "modifiers": "private", "return": "Map<String, File>", "signature": "Map<String, File> createTemporaryFiles(MigrationPath migrationPath)", "full_signature": "private Map<String, File> createTemporaryFiles(MigrationPath migrationPath)", "class_method_signature": "GenericMigrationWrapper.createTemporaryFiles(MigrationPath migrationPath)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryFile", "parameters": "(\n\t    Map<String, File> tempFileMap, String fileLabel,\n\t    String desiredFileName)", "modifiers": "private", "return": "Map<String, File>", "signature": "Map<String, File> createTemporaryFile(\n\t    Map<String, File> tempFileMap, String fileLabel,\n\t    String desiredFileName)", "full_signature": "private Map<String, File> createTemporaryFile(\n\t    Map<String, File> tempFileMap, String fileLabel,\n\t    String desiredFileName)", "class_method_signature": "GenericMigrationWrapper.createTemporaryFile(\n\t    Map<String, File> tempFileMap, String fileLabel,\n\t    String desiredFileName)", "testcase": false, "constructor": false}, {"identifier": "executeToolProcess", "parameters": "(ProcessRunner toolProcessRunner,\n\t    List<String> command, InputStream processStandardInput)", "modifiers": "private", "return": "boolean", "signature": "boolean executeToolProcess(ProcessRunner toolProcessRunner,\n\t    List<String> command, InputStream processStandardInput)", "full_signature": "private boolean executeToolProcess(ProcessRunner toolProcessRunner,\n\t    List<String> command, InputStream processStandardInput)", "class_method_signature": "GenericMigrationWrapper.executeToolProcess(ProcessRunner toolProcessRunner,\n\t    List<String> command, InputStream processStandardInput)", "testcase": false, "constructor": false}], "file": "framework/generic/src/main/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/GenericMigrationWrapper.java"}, "focal_method": {"identifier": "migrate", "parameters": "(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "modifiers": "@SuppressWarnings(\"boxing\") public", "return": "MigrateResult", "body": "@SuppressWarnings(\"boxing\")\n\tpublic MigrateResult migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)\n\t    throws MigrationException, ConfigurationException {\n\n\tfinal ServicePerformanceHelper servicePerformanceHelper = new ServicePerformanceHelper();\n\tfinal Date migrationStartTime = new Date();\n\n\t/*\n\t * Validate that the proper parameters are set for the migration path\n\t * identified by inputFormat and outputFormat\n\t */\n\tfinal MigrationPath migrationPath = this.migrationPaths.getMigrationPath(\n\t\tinputFormat, outputFormat);\n\n\t// If called with null parameters, use an empty list instead\n\tif (toolParameters == null) {\n\t    this.log.warning(\"Called with null parameters. Assuming the caller ment\"\n\t\t    + \" to call with an empty list.\");\n\t    toolParameters = new ArrayList<Parameter>();\n\t}\n\n\t// Prepare any necessary temporary files.\n\tfinal Map<String, File> temporaryFileMappings = createTemporaryFiles(migrationPath);\n\n\t// Prepare the data to migrate\n\tInputStream standardInputStream = null;\n\tfinal ToolIOProfile inputIOProfile = migrationPath\n\t\t.getToolInputProfile();\n\tif (inputIOProfile.usePipedIO()) {\n\n\t    // Serve the digital object through standard input\n\t    standardInputStream = digitalObject.getContent().getInputStream();\n\t} else {\n\n\t    // Serve the digital object through a temporary input file.\n\t    File inputTempFile = temporaryFileMappings.get(inputIOProfile\n\t\t    .getCommandLineFileLabel());\n\t    DigitalObjectUtils.toFile(digitalObject, inputTempFile);\n\t}\n\n\t// Create an executable command line for the process runner.\n\tfinal PRCommandBuilder commandBuilder = new PRCommandBuilder(\n\t\tthis.environmentParameters);\n\tfinal List<String> prCommand = commandBuilder.buildCommand(\n\t\tmigrationPath, toolParameters, temporaryFileMappings);\n\n\tif (this.log.isLoggable(Level.INFO)) {\n\t    String fullCommandLine = \"\";\n\t    for (String cmdfrag : prCommand) {\n\t\tfullCommandLine += cmdfrag + \" \";\n\t    }\n\t    this.log.info(\"Executing command line: \" + fullCommandLine);\n\t}\n\n\t// Execute the tool\n\tfinal ProcessRunner toolProcessRunner = new ProcessRunner();\n\tfinal boolean executionSuccessful = executeToolProcess(\n\t\ttoolProcessRunner, prCommand, standardInputStream);\n\n\t// Delete temporary files. However, do NOT delete the output unless the\n\t// execution failed.\n\n\tfinal ToolIOProfile outputIOProfile = migrationPath\n\t\t.getToolOutputProfile();\n\n\tif ((outputIOProfile.usePipedIO() == false) && executionSuccessful) {\n\t    // OK, there should exist an output file. Avoid deleting it.\n\t    final String outputFileLabel = outputIOProfile\n\t\t    .getCommandLineFileLabel();\n\t    for (String tempFileLabel : temporaryFileMappings.keySet()) {\n\t\tif (outputFileLabel.equals(tempFileLabel) == false) {\n\t\t    temporaryFileMappings.get(tempFileLabel).delete();\n\t\t}\n\t    }\n\t} else {\n\t    // The output has been returned through a pipe, so it is safe to\n\t    // delete all files.\n\t    for (File tempFile : temporaryFileMappings.values()) {\n\t\ttempFile.delete();\n\t    }\n\t}\n\n\tif (executionSuccessful == false) {\n\t    return buildMigrationResult(migrationPath, digitalObject, null,\n\t\t    toolProcessRunner);\n\t}\n\n\t// Now create a digital object from the tools output.\n\tDigitalObject.Builder builder;\n\n\tfinal ParameterReader parameterReader = new ParameterReader(\n\t\ttoolParameters);\n\tfinal boolean returnDataByReference = parameterReader\n\t\t.getBooleanParameter(\"returnByReference\", true);\n\n\tfinal ToolIOProfile toolOutputProfile = migrationPath\n\t\t.getToolOutputProfile();\n\tif (toolOutputProfile.usePipedIO() == false) {\n\n\t    // The tool has written the output to a temporary file. Create a\n\t    // digital object based on that.\n\t    final File outputFile = temporaryFileMappings.get(toolOutputProfile\n\t\t    .getCommandLineFileLabel());\n\t    if (returnDataByReference) {\n\t\tbuilder = new DigitalObject.Builder(Content\n\t\t\t.byReference(outputFile));\n\t\t// We cannot tell when the temporary file can be deleted, so let\n\t\t// it live.\n\t    } else {\n\t\tbuilder = new DigitalObject.Builder(Content.byValue(outputFile));\n\n\t\t// It is now safe to delete the temporary file.\n\t\toutputFile.delete();\n\t    }\n\t} else {\n\n\t    // The tool has written the output to standard output. Create a\n\t    // digital object based on that output.\n\t    if (returnDataByReference) {\n\t\t// Direct the standard output contents to a temporary file.\n\t\tbuilder = new DigitalObject.Builder(Content\n\t\t\t.byReference(toolProcessRunner.getProcessOutput()));\n\t    } else {\n\t\t// Return the standard output contents by value.\n\t\tbuilder = new DigitalObject.Builder(Content\n\t\t\t.byValue(toolProcessRunner.getProcessOutput()));\n\t    }\n\t}\n\n\tfinal double migrationDuration = new Date().getTime()\n\t\t- migrationStartTime.getTime();\n\n\tbuilder.format(outputFormat);\n\tfinal Agent agent = new Agent(this.toolIdentifier, this.serviceDescription\n\t\t.getName(), this.serviceDescription.getType());\n\n\tString eventSummary = \"Migration carried out by executing the command line:\";\n\tfor (String commandLineFragment : prCommand) {\n\t    eventSummary += \" \" + commandLineFragment;\n\t}\n\teventSummary += \"\\n\\nThe migration service was called with these parameters:\\n\\n\";\n\tfor (Parameter serviceParameter : toolParameters) {\n\t    eventSummary += serviceParameter.getName() + \" = \"\n\t\t    + serviceParameter.getValue() + \"\\n\";\n\t}\n\n\tservicePerformanceHelper.stop();\n\n\t// Add information about the migration event to the digital object.\n\tfinal DateFormat defaultDateFormat = DateFormat.getDateInstance();\n\tfinal Event event = new Event(eventSummary, defaultDateFormat\n\t\t.format(migrationStartTime), migrationDuration, agent,\n\t\tservicePerformanceHelper.getPerformanceProperties());\n\tbuilder.events(event);\n\n\tfinal DigitalObject resultObject = builder.build();\n\n\treturn buildMigrationResult(migrationPath, digitalObject, resultObject,\n\t\ttoolProcessRunner);\n    }", "signature": "MigrateResult migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "full_signature": "@SuppressWarnings(\"boxing\") public MigrateResult migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "class_method_signature": "GenericMigrationWrapper.migrate(DigitalObject digitalObject, URI inputFormat,\n\t    URI outputFormat, List<Parameter> toolParameters)", "testcase": false, "constructor": false, "invocations": ["getMigrationPath", "warning", "createTemporaryFiles", "getToolInputProfile", "usePipedIO", "getInputStream", "getContent", "get", "getCommandLineFileLabel", "toFile", "buildCommand", "isLoggable", "info", "executeToolProcess", "getToolOutputProfile", "usePipedIO", "getCommandLineFileLabel", "keySet", "equals", "delete", "get", "values", "delete", "buildMigrationResult", "getBooleanParameter", "getToolOutputProfile", "usePipedIO", "get", "getCommandLineFileLabel", "byReference", "byValue", "delete", "byReference", "getProcessOutput", "byValue", "getProcessOutput", "getTime", "getTime", "format", "getName", "getType", "getName", "getValue", "stop", "getDateInstance", "format", "getPerformanceProperties", "events", "build", "buildMigrationResult"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}