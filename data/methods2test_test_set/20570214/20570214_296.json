{"test_class": {"identifier": "AesUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final byte[] EMPTY = {};", "modifier": "static final", "type": "byte[]", "declarator": "EMPTY = {}", "var_name": "EMPTY"}, {"original_string": "static final byte[] ONE_ONE = {1};", "modifier": "static final", "type": "byte[]", "declarator": "ONE_ONE = {1}", "var_name": "ONE_ONE"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/AesUtilTest.java"}, "test_case": {"identifier": "dblTestVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void dblTestVectors() {\n    // Extracted from the SIV test vectors at https://tools.ietf.org/html/rfc5297#section-2.3\n    // (all the double() steps in Appendix A)\n    String[] testVectorInputs = {\n        \"0e04dfafc1efbf040140582859bf073a\",\n        \"edf09de876c642ee4d78bce4ceedfc4f\",\n        \"c8b43b5974960e7ce6a5dd85231e591a\",\n        \"adf31e285d3d1e1d4ddefc1e5bec63e9\",\n        \"826aa75b5e568eed3125bfb266c61d4e\",\n    };\n    String[] testVectorOutputs = {\n        \"1c09bf5f83df7e080280b050b37e0e74\",\n        \"dbe13bd0ed8c85dc9af179c99ddbf819\",\n        \"916876b2e92c1cf9cd4bbb0a463cb2b3\",\n        \"5be63c50ba7a3c3a9bbdf83cb7d8c755\",\n        \"04d54eb6bcad1dda624b7f64cd8c3a1b\",\n    };\n\n    byte[] r;\n    for (int i = 0; i < testVectorInputs.length; i++) {\n      r = AesUtil.dbl(Hex.decode(testVectorInputs[i]));\n      assertEquals(testVectorOutputs[i], Hex.encode(r));\n    }\n  }", "signature": "void dblTestVectors()", "full_signature": "@Test public void dblTestVectors()", "class_method_signature": "AesUtilTest.dblTestVectors()", "testcase": true, "constructor": false, "invocations": ["dbl", "decode", "assertEquals", "encode"]}, "focal_class": {"identifier": "AesUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int BLOCK_SIZE = 16;", "modifier": "public static final", "type": "int", "declarator": "BLOCK_SIZE = 16", "var_name": "BLOCK_SIZE"}], "methods": [{"identifier": "dbl", "parameters": "(final byte[] value)", "modifiers": "static", "return": "byte[]", "signature": "byte[] dbl(final byte[] value)", "full_signature": "static byte[] dbl(final byte[] value)", "class_method_signature": "AesUtil.dbl(final byte[] value)", "testcase": false, "constructor": false}, {"identifier": "cmacPad", "parameters": "(final byte[] x)", "modifiers": "static", "return": "byte[]", "signature": "byte[] cmacPad(final byte[] x)", "full_signature": "static byte[] cmacPad(final byte[] x)", "class_method_signature": "AesUtil.cmacPad(final byte[] x)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/AesUtil.java"}, "focal_method": {"identifier": "dbl", "parameters": "(final byte[] value)", "modifiers": "static", "return": "byte[]", "body": "static byte[] dbl(final byte[] value) {\n    if (value.length != BLOCK_SIZE) {\n      throw new IllegalArgumentException(\"value must be a block.\");\n    }\n\n    // Note that >> is an arithmetical shift, which copies the leftmost bit to fill the\n    // blanks created by shifting. For instance, x >> 7 will equal 0xFF if (x & 1), and 0x00\n    // otherwise. This is a bit hard to read, but the operation is branchless, which is valuable\n    // in this context.\n\n    // Shift left by one.\n    byte[] res = new byte[BLOCK_SIZE];\n    for (int i = 0; i < BLOCK_SIZE; i++) {\n      res[i] = (byte) (0xFE & (value[i] << 1));\n      if (i < BLOCK_SIZE - 1) {\n        res[i] |= (byte) (0x01 & (value[i + 1] >> 7));\n      }\n    }\n    // And handle the modulus if needed (0x87 is the binary representation of the polynomial,\n    // minus the x^128 part).\n    res[BLOCK_SIZE - 1] ^= (byte) (0x87 & (value[0] >> 7));\n    return res;\n  }", "signature": "byte[] dbl(final byte[] value)", "full_signature": "static byte[] dbl(final byte[] value)", "class_method_signature": "AesUtil.dbl(final byte[] value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}