{"test_class": {"identifier": "SagaKeyReaderExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SagaKeyReaderExtractor sut;", "modifier": "private", "type": "SagaKeyReaderExtractor", "declarator": "sut", "var_name": "sut"}, {"original_string": "private Saga testSaga;", "modifier": "private", "type": "Saga", "declarator": "testSaga", "var_name": "testSaga"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/processing/SagaKeyReaderExtractorTest.java"}, "test_case": {"identifier": "findSagaInstanceKey_sagaHasBothReadersWithSuperclassOfMessageAndMessageClass_returnsDefinedKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findSagaInstanceKey_sagaHasBothReadersWithSuperclassOfMessageAndMessageClass_returnsDefinedKey() {\n        // given\n        final String keyValue = \"theKeyValue\";\n        KeyReader comparableReader = FunctionKeyReader.create(Comparable.class, new KeyReadFunction<Comparable>() {\n            @Override\n            public String key(final Comparable number) {\n                return \"some key\";\n            }\n        });\n        KeyReader numberReader = FunctionKeyReader.create(Number.class, new KeyReadFunction<Number>() {\n            @Override\n            public String key(final Number number) {\n                return \"another key\";\n            }\n        });\n        KeyReader integerReader = FunctionKeyReader.create(Integer.class, new KeyReadFunction<Integer>() {\n            @Override\n            public String key(final Integer integer) {\n                return keyValue;\n            }\n        });\n        when(testSaga.keyReaders()).thenReturn(Lists.newArrayList(comparableReader, numberReader, integerReader));\n\n        // when\n        Object foundKey = sut.findSagaInstanceKey(Saga.class, SagaLookupContext.forMessage(Integer.valueOf(123)));\n\n        // then\n        assertThat(\"Expected returned key to match key value provided reader.\", foundKey, equalTo((Object) keyValue));\n    }", "signature": "void findSagaInstanceKey_sagaHasBothReadersWithSuperclassOfMessageAndMessageClass_returnsDefinedKey()", "full_signature": "@Test public void findSagaInstanceKey_sagaHasBothReadersWithSuperclassOfMessageAndMessageClass_returnsDefinedKey()", "class_method_signature": "SagaKeyReaderExtractorTest.findSagaInstanceKey_sagaHasBothReadersWithSuperclassOfMessageAndMessageClass_returnsDefinedKey()", "testcase": true, "constructor": false, "invocations": ["create", "create", "create", "thenReturn", "when", "keyReaders", "newArrayList", "findSagaInstanceKey", "forMessage", "valueOf", "assertThat", "equalTo"]}, "focal_class": {"identifier": "SagaKeyReaderExtractor", "superclass": "", "interfaces": "implements KeyExtractor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SagaKeyReaderExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SagaKeyReaderExtractor.class)", "var_name": "LOG"}, {"original_string": "private final SagaProviderFactory sagaProviderFactory;", "modifier": "private final", "type": "SagaProviderFactory", "declarator": "sagaProviderFactory", "var_name": "sagaProviderFactory"}, {"original_string": "private final Cache<SagaMessageKey, Optional<KeyReader>> knownReaders;", "modifier": "private final", "type": "Cache<SagaMessageKey, Optional<KeyReader>>", "declarator": "knownReaders", "var_name": "knownReaders"}], "methods": [{"identifier": "SagaKeyReaderExtractor", "parameters": "(final SagaProviderFactory sagaProviderFactory)", "modifiers": "@Inject public", "return": "", "signature": " SagaKeyReaderExtractor(final SagaProviderFactory sagaProviderFactory)", "full_signature": "@Inject public  SagaKeyReaderExtractor(final SagaProviderFactory sagaProviderFactory)", "class_method_signature": "SagaKeyReaderExtractor.SagaKeyReaderExtractor(final SagaProviderFactory sagaProviderFactory)", "testcase": false, "constructor": true}, {"identifier": "findSagaInstanceKey", "parameters": "(final Class<? extends Saga> sagaClazz, final LookupContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "full_signature": "@Override public Object findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "class_method_signature": "SagaKeyReaderExtractor.findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "testcase": false, "constructor": false}, {"identifier": "tryGetKeyReader", "parameters": "(final Class<? extends Saga> sagaClazz, final Object message)", "modifiers": "private", "return": "KeyReader", "signature": "KeyReader tryGetKeyReader(final Class<? extends Saga> sagaClazz, final Object message)", "full_signature": "private KeyReader tryGetKeyReader(final Class<? extends Saga> sagaClazz, final Object message)", "class_method_signature": "SagaKeyReaderExtractor.tryGetKeyReader(final Class<? extends Saga> sagaClazz, final Object message)", "testcase": false, "constructor": false}, {"identifier": "findReader", "parameters": "(final Class<? extends Saga> sagaClazz, final Object message)", "modifiers": "private", "return": "KeyReader", "signature": "KeyReader findReader(final Class<? extends Saga> sagaClazz, final Object message)", "full_signature": "private KeyReader findReader(final Class<? extends Saga> sagaClazz, final Object message)", "class_method_signature": "SagaKeyReaderExtractor.findReader(final Class<? extends Saga> sagaClazz, final Object message)", "testcase": false, "constructor": false}, {"identifier": "findReaderMatchingExactType", "parameters": "(final Iterable<KeyReader> readers, final Class<?> messageType)", "modifiers": "private", "return": "KeyReader", "signature": "KeyReader findReaderMatchingExactType(final Iterable<KeyReader> readers, final Class<?> messageType)", "full_signature": "private KeyReader findReaderMatchingExactType(final Iterable<KeyReader> readers, final Class<?> messageType)", "class_method_signature": "SagaKeyReaderExtractor.findReaderMatchingExactType(final Iterable<KeyReader> readers, final Class<?> messageType)", "testcase": false, "constructor": false}, {"identifier": "findReader", "parameters": "(final Class<? extends Saga> sagaClazz, final Class<?> messageClazz)", "modifiers": "private", "return": "Collection<KeyReader>", "signature": "Collection<KeyReader> findReader(final Class<? extends Saga> sagaClazz, final Class<?> messageClazz)", "full_signature": "private Collection<KeyReader> findReader(final Class<? extends Saga> sagaClazz, final Class<?> messageClazz)", "class_method_signature": "SagaKeyReaderExtractor.findReader(final Class<? extends Saga> sagaClazz, final Class<?> messageClazz)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/processing/SagaKeyReaderExtractor.java"}, "focal_method": {"identifier": "findSagaInstanceKey", "parameters": "(final Class<? extends Saga> sagaClazz, final LookupContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context) {\n        Object keyValue = null;\n\n        KeyReader reader = tryGetKeyReader(sagaClazz, context.message());\n        if (reader != null) {\n            keyValue = reader.readKey(context.message(), context);\n        }\n\n        return keyValue;\n    }", "signature": "Object findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "full_signature": "@Override public Object findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "class_method_signature": "SagaKeyReaderExtractor.findSagaInstanceKey(final Class<? extends Saga> sagaClazz, final LookupContext context)", "testcase": false, "constructor": false, "invocations": ["tryGetKeyReader", "message", "readKey", "message"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}