{"test_class": {"identifier": "ServerGroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private ServerGroupService serverGroupService;", "modifier": "@MockBean\n    private", "type": "ServerGroupService", "declarator": "serverGroupService", "var_name": "serverGroupService"}, {"original_string": "@MockBean\n    private ServerGroupDao serverGroupDaoOld;", "modifier": "@MockBean\n    private", "type": "ServerGroupDao", "declarator": "serverGroupDaoOld", "var_name": "serverGroupDaoOld"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/ServerGroupControllerTest.java"}, "test_case": {"identifier": "sync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sync() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/serverGroup/sync\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .param(\"id\", \"1\")\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void sync()", "full_signature": "@Test public void sync()", "class_method_signature": "ServerGroupControllerTest.sync()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "param", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "ServerGroupController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private Message message;", "modifier": "@Resource\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private ServerGroupService serverGroupService;", "modifier": "@Autowired\n    private", "type": "ServerGroupService", "declarator": "serverGroupService", "var_name": "serverGroupService"}, {"original_string": "@Autowired\n    private ServerGroupDao serverGroupDaoOld;", "modifier": "@Autowired\n    private", "type": "ServerGroupDao", "declarator": "serverGroupDaoOld", "var_name": "serverGroupDaoOld"}], "methods": [{"identifier": "loadAllServerGroups", "parameters": "()", "modifiers": "@RequestMapping(value = \"/loadAllServerGroups\") public", "return": "ServiceResult<List<ServerGroup>>", "signature": "ServiceResult<List<ServerGroup>> loadAllServerGroups()", "full_signature": "@RequestMapping(value = \"/loadAllServerGroups\") public ServiceResult<List<ServerGroup>> loadAllServerGroups()", "class_method_signature": "ServerGroupController.loadAllServerGroups()", "testcase": false, "constructor": false}, {"identifier": "serversNoGroup", "parameters": "(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Integer appGroupId)", "modifiers": "@RequestMapping(value = \"/serversNoGroup\") public", "return": "ServiceResult<List<Server>>", "signature": "ServiceResult<List<Server>> serversNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Integer appGroupId)", "full_signature": "@RequestMapping(value = \"/serversNoGroup\") public ServiceResult<List<Server>> serversNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Integer appGroupId)", "class_method_signature": "ServerGroupController.serversNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Integer appGroupId)", "testcase": false, "constructor": false}, {"identifier": "loadPageList", "parameters": "(@RequestBody Paging<ServerGroup> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<ServerGroupView>>", "signature": "ServiceResult<ListResult<ServerGroupView>> loadPageList(@RequestBody Paging<ServerGroup> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<ServerGroupView>> loadPageList(@RequestBody Paging<ServerGroup> paging)", "class_method_signature": "ServerGroupController.loadPageList(@RequestBody Paging<ServerGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerGroupController.add(@Validated(AddServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerGroupController.update(@Validated(UpdateServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ServerGroupController.delete(@Validated(DeleteServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "ServerGroupController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult<ConfigCheckItem>", "signature": "ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "ServerGroupController.check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/ServerGroupController.java"}, "focal_method": {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/sync\")\n    public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user) throws Exception {\n        ServerGroup serverGroup = serverGroupDaoOld.getServerGroupById(id);\n        return serverGroupService.syncDataCenter(user, serverGroup);\n    }", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "ServerGroupController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false, "invocations": ["getServerGroupById", "syncDataCenter"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}