{"test_class": {"identifier": "AJsonSerHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java"}, "test_case": {"identifier": "testDoubleWithFrac9", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoubleWithFrac9() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 9);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        assertEquals(\"1.230000000\", result);\n    }", "signature": "void testDoubleWithFrac9()", "full_signature": "@Test public void testDoubleWithFrac9()", "class_method_signature": "AJsonSerHelperTest.testDoubleWithFrac9()", "testcase": true, "constructor": false, "invocations": ["writeNumberLiteral", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "AJsonSerHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Charset UTF_8 = Charset.forName (\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName (\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private static final int[] TEN_POW = new int[] {1, 10, 100, 1_000, 10_000, 100_000, 1000_000, 10_000_000, 100_000_000, 1_000_000_000};", "modifier": "private static final", "type": "int[]", "declarator": "TEN_POW = new int[] {1, 10, 100, 1_000, 10_000, 100_000, 1000_000, 10_000_000, 100_000_000, 1_000_000_000}", "var_name": "TEN_POW"}, {"original_string": "private static final String[] PATTERNS = new String[] {\"0\", \"0.0\", \"0.00\", \"0.000\", \"0.0000\", \"0.00000\", \"0.000000\", \"0.0000000\", \"0.00000000\", \"0.000000000\"};", "modifier": "private static final", "type": "String[]", "declarator": "PATTERNS = new String[] {\"0\", \"0.0\", \"0.00\", \"0.000\", \"0.0000\", \"0.00000\", \"0.000000\", \"0.0000000\", \"0.00000000\", \"0.000000000\"}", "var_name": "PATTERNS"}, {"original_string": "private static final DecimalFormatSymbols DECIMAL_FORMAT_SYMBOLS = new DecimalFormatSymbols (Locale.US);", "modifier": "private static final", "type": "DecimalFormatSymbols", "declarator": "DECIMAL_FORMAT_SYMBOLS = new DecimalFormatSymbols (Locale.US)", "var_name": "DECIMAL_FORMAT_SYMBOLS"}, {"original_string": "protected final Writer out;", "modifier": "protected final", "type": "Writer", "declarator": "out", "var_name": "out"}, {"original_string": "private final Deque<JsonSerState> state = new ArrayDeque<> ();", "modifier": "private final", "type": "Deque<JsonSerState>", "declarator": "state = new ArrayDeque<> ()", "var_name": "state"}], "methods": [{"identifier": "AJsonSerHelper", "parameters": "(OutputStream out)", "modifiers": "public", "return": "", "signature": " AJsonSerHelper(OutputStream out)", "full_signature": "public  AJsonSerHelper(OutputStream out)", "class_method_signature": "AJsonSerHelper.AJsonSerHelper(OutputStream out)", "testcase": false, "constructor": true}, {"identifier": "startObject", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startObject()", "full_signature": "public void startObject()", "class_method_signature": "AJsonSerHelper.startObject()", "testcase": false, "constructor": false}, {"identifier": "endObject", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endObject()", "full_signature": "public void endObject()", "class_method_signature": "AJsonSerHelper.endObject()", "testcase": false, "constructor": false}, {"identifier": "writeKey", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void writeKey(String key)", "full_signature": "public void writeKey(String key)", "class_method_signature": "AJsonSerHelper.writeKey(String key)", "testcase": false, "constructor": false}, {"identifier": "startArray", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startArray()", "full_signature": "public void startArray()", "class_method_signature": "AJsonSerHelper.startArray()", "testcase": false, "constructor": false}, {"identifier": "endArray", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endArray()", "full_signature": "public void endArray()", "class_method_signature": "AJsonSerHelper.endArray()", "testcase": false, "constructor": false}, {"identifier": "writeStringLiteral", "parameters": "(String s)", "modifiers": "public", "return": "void", "signature": "void writeStringLiteral(String s)", "full_signature": "public void writeStringLiteral(String s)", "class_method_signature": "AJsonSerHelper.writeStringLiteral(String s)", "testcase": false, "constructor": false}, {"identifier": "_writeStringLiteral", "parameters": "(String s)", "modifiers": "private", "return": "void", "signature": "void _writeStringLiteral(String s)", "full_signature": "private void _writeStringLiteral(String s)", "class_method_signature": "AJsonSerHelper._writeStringLiteral(String s)", "testcase": false, "constructor": false}, {"identifier": "writeNumberLiteral", "parameters": "(long value, int numFracDigits)", "modifiers": "public", "return": "void", "signature": "void writeNumberLiteral(long value, int numFracDigits)", "full_signature": "public void writeNumberLiteral(long value, int numFracDigits)", "class_method_signature": "AJsonSerHelper.writeNumberLiteral(long value, int numFracDigits)", "testcase": false, "constructor": false}, {"identifier": "writeNumberLiteral", "parameters": "(double value, int numFracDigits)", "modifiers": "public", "return": "void", "signature": "void writeNumberLiteral(double value, int numFracDigits)", "full_signature": "public void writeNumberLiteral(double value, int numFracDigits)", "class_method_signature": "AJsonSerHelper.writeNumberLiteral(double value, int numFracDigits)", "testcase": false, "constructor": false}, {"identifier": "writeBooleanLiteral", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void writeBooleanLiteral(boolean value)", "full_signature": "public void writeBooleanLiteral(boolean value)", "class_method_signature": "AJsonSerHelper.writeBooleanLiteral(boolean value)", "testcase": false, "constructor": false}, {"identifier": "writeNullLiteral", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeNullLiteral()", "full_signature": "public void writeNullLiteral()", "class_method_signature": "AJsonSerHelper.writeNullLiteral()", "testcase": false, "constructor": false}, {"identifier": "writeIntLiteral", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeIntLiteral(int value)", "full_signature": "public void writeIntLiteral(int value)", "class_method_signature": "AJsonSerHelper.writeIntLiteral(int value)", "testcase": false, "constructor": false}, {"identifier": "writeLongLiteral", "parameters": "(long value)", "modifiers": "public", "return": "void", "signature": "void writeLongLiteral(long value)", "full_signature": "public void writeLongLiteral(long value)", "class_method_signature": "AJsonSerHelper.writeLongLiteral(long value)", "testcase": false, "constructor": false}, {"identifier": "writeStringArray", "parameters": "(Iterable<String> values)", "modifiers": "public", "return": "void", "signature": "void writeStringArray(Iterable<String> values)", "full_signature": "public void writeStringArray(Iterable<String> values)", "class_method_signature": "AJsonSerHelper.writeStringArray(Iterable<String> values)", "testcase": false, "constructor": false}, {"identifier": "writeStringField", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void writeStringField(String key, String value)", "full_signature": "public void writeStringField(String key, String value)", "class_method_signature": "AJsonSerHelper.writeStringField(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "writeBooleanField", "parameters": "(String key, Boolean value)", "modifiers": "public", "return": "void", "signature": "void writeBooleanField(String key, Boolean value)", "full_signature": "public void writeBooleanField(String key, Boolean value)", "class_method_signature": "AJsonSerHelper.writeBooleanField(String key, Boolean value)", "testcase": false, "constructor": false}, {"identifier": "writeIntField", "parameters": "(String key, Integer value)", "modifiers": "public", "return": "void", "signature": "void writeIntField(String key, Integer value)", "full_signature": "public void writeIntField(String key, Integer value)", "class_method_signature": "AJsonSerHelper.writeIntField(String key, Integer value)", "testcase": false, "constructor": false}, {"identifier": "writeLongField", "parameters": "(String key, Long value)", "modifiers": "public", "return": "void", "signature": "void writeLongField(String key, Long value)", "full_signature": "public void writeLongField(String key, Long value)", "class_method_signature": "AJsonSerHelper.writeLongField(String key, Long value)", "testcase": false, "constructor": false}, {"identifier": "buildString", "parameters": "(AStatement1<AJsonSerHelper, E> code)", "modifiers": "public static", "return": "String", "signature": "String buildString(AStatement1<AJsonSerHelper, E> code)", "full_signature": "public static String buildString(AStatement1<AJsonSerHelper, E> code)", "class_method_signature": "AJsonSerHelper.buildString(AStatement1<AJsonSerHelper, E> code)", "testcase": false, "constructor": false}, {"identifier": "writeCommaInObject", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void writeCommaInObject()", "full_signature": "protected void writeCommaInObject()", "class_method_signature": "AJsonSerHelper.writeCommaInObject()", "testcase": false, "constructor": false}, {"identifier": "writeCommaInArray", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void writeCommaInArray()", "full_signature": "protected void writeCommaInArray()", "class_method_signature": "AJsonSerHelper.writeCommaInArray()", "testcase": false, "constructor": false}, {"identifier": "writeColonAfterKey", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void writeColonAfterKey()", "full_signature": "protected void writeColonAfterKey()", "class_method_signature": "AJsonSerHelper.writeColonAfterKey()", "testcase": false, "constructor": false}, {"identifier": "checkAcceptsValueAndPrefixComma", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkAcceptsValueAndPrefixComma()", "full_signature": "protected void checkAcceptsValueAndPrefixComma()", "class_method_signature": "AJsonSerHelper.checkAcceptsValueAndPrefixComma()", "testcase": false, "constructor": false}, {"identifier": "afterValueWritten", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void afterValueWritten()", "full_signature": "protected void afterValueWritten()", "class_method_signature": "AJsonSerHelper.afterValueWritten()", "testcase": false, "constructor": false}, {"identifier": "checkInObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInObject()", "full_signature": "private void checkInObject()", "class_method_signature": "AJsonSerHelper.checkInObject()", "testcase": false, "constructor": false}, {"identifier": "checkInArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInArray()", "full_signature": "private void checkInArray()", "class_method_signature": "AJsonSerHelper.checkInArray()", "testcase": false, "constructor": false}, {"identifier": "replaceState", "parameters": "(JsonSerState newState)", "modifiers": "private", "return": "void", "signature": "void replaceState(JsonSerState newState)", "full_signature": "private void replaceState(JsonSerState newState)", "class_method_signature": "AJsonSerHelper.replaceState(JsonSerState newState)", "testcase": false, "constructor": false}, {"identifier": "state", "parameters": "()", "modifiers": "protected", "return": "JsonSerState", "signature": "JsonSerState state()", "full_signature": "protected JsonSerState state()", "class_method_signature": "AJsonSerHelper.state()", "testcase": false, "constructor": false}], "file": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java"}, "focal_method": {"identifier": "writeNumberLiteral", "parameters": "(long value, int numFracDigits)", "modifiers": "public", "return": "void", "body": "public void writeNumberLiteral (long value, int numFracDigits) throws IOException {\n        checkAcceptsValueAndPrefixComma ();\n\n        if (value < 0) {\n            out.write ('-');\n            value = -value;\n        }\n\n        if (numFracDigits == 0) {\n            out.write (String.valueOf (value));\n        }\n        else {\n            final long intPart = value / TEN_POW[numFracDigits];\n            final String fracPart = String.valueOf (1_000_000_000 + value % TEN_POW[numFracDigits]).substring (10 - numFracDigits, 10);\n\n            out.write (String.valueOf (intPart));\n            out.write (\".\");\n            out.write (fracPart);\n        }\n\n        afterValueWritten ();\n    }", "signature": "void writeNumberLiteral(long value, int numFracDigits)", "full_signature": "public void writeNumberLiteral(long value, int numFracDigits)", "class_method_signature": "AJsonSerHelper.writeNumberLiteral(long value, int numFracDigits)", "testcase": false, "constructor": false, "invocations": ["checkAcceptsValueAndPrefixComma", "write", "write", "valueOf", "substring", "valueOf", "write", "valueOf", "write", "write", "afterValueWritten"]}, "repository": {"repo_id": 17586846, "url": "https://github.com/arnohaase/a-foundation", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 30, "size": 2940, "license": "licensed"}}