{"test_class": {"identifier": "ForEachChildElementPipeTest", "superclass": "extends StreamingPipeTestBase<ForEachChildElementPipe>", "interfaces": "", "fields": [{"original_string": "private boolean TEST_CDATA=false;", "modifier": "private", "type": "boolean", "declarator": "TEST_CDATA=false", "var_name": "TEST_CDATA"}, {"original_string": "private String CDATA_START=TEST_CDATA?\"<![CDATA[\":\"\";", "modifier": "private", "type": "String", "declarator": "CDATA_START=TEST_CDATA?\"<![CDATA[\":\"\"", "var_name": "CDATA_START"}, {"original_string": "private String CDATA_END=TEST_CDATA?\"]]>\":\"\";", "modifier": "private", "type": "String", "declarator": "CDATA_END=TEST_CDATA?\"]]>\":\"\"", "var_name": "CDATA_END"}, {"original_string": "private String messageBasicNoNS=\"<root><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub name=\\\"r\\\">R</sub></root>\";", "modifier": "private", "type": "String", "declarator": "messageBasicNoNS=\"<root><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub name=\\\"r\\\">R</sub></root>\"", "var_name": "messageBasicNoNS"}, {"original_string": "private String messageBasicNoNSLong=\"<root><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub>data</sub><sub>data</sub><sub>data</sub><sub>data</sub></root>\";", "modifier": "private", "type": "String", "declarator": "messageBasicNoNSLong=\"<root><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub>data</sub><sub>data</sub><sub>data</sub><sub>data</sub></root>\"", "var_name": "messageBasicNoNSLong"}, {"original_string": "private String messageBasicNS1=\"<root xmlns=\\\"urn:test\\\"><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub name=\\\"r\\\">R</sub></root>\";", "modifier": "private", "type": "String", "declarator": "messageBasicNS1=\"<root xmlns=\\\"urn:test\\\"><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub name=\\\"r\\\">R</sub></root>\"", "var_name": "messageBasicNS1"}, {"original_string": "private String messageBasicNS2=\"<ns:root xmlns:ns=\\\"urn:test\\\"><ns:sub>A &amp; B</ns:sub><ns:sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub><ns:sub name=\\\"r\\\">R</ns:sub></ns:root>\";", "modifier": "private", "type": "String", "declarator": "messageBasicNS2=\"<ns:root xmlns:ns=\\\"urn:test\\\"><ns:sub>A &amp; B</ns:sub><ns:sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub><ns:sub name=\\\"r\\\">R</ns:sub></ns:root>\"", "var_name": "messageBasicNS2"}, {"original_string": "private String messageError=\"<root><sub name=\\\"a\\\">B</sub><sub>error</sub><sub>tail</sub></root>\";", "modifier": "private", "type": "String", "declarator": "messageError=\"<root><sub name=\\\"a\\\">B</sub><sub>error</sub><sub>tail</sub></root>\"", "var_name": "messageError"}, {"original_string": "private String messageDuplNamespace1=\"<root xmlns=\\\"urn:test\\\"><header xmlns=\\\"urn:header\\\">x</header><sub xmlns=\\\"urn:test\\\">A &amp; B</sub><sub xmlns=\\\"urn:test\\\" name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub xmlns=\\\"urn:test\\\" name=\\\"r\\\">R</sub></root>\";", "modifier": "private", "type": "String", "declarator": "messageDuplNamespace1=\"<root xmlns=\\\"urn:test\\\"><header xmlns=\\\"urn:header\\\">x</header><sub xmlns=\\\"urn:test\\\">A &amp; B</sub><sub xmlns=\\\"urn:test\\\" name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub><sub xmlns=\\\"urn:test\\\" name=\\\"r\\\">R</sub></root>\"", "var_name": "messageDuplNamespace1"}, {"original_string": "private String messageDuplNamespace2=\"<ns:root xmlns:ns=\\\"urn:test\\\"><header xmlns=\\\"urn:header\\\">x</header><ns:sub xmlns:ns=\\\"urn:test\\\">A &amp; B</ns:sub><ns:sub xmlns:ns=\\\"urn:test\\\" name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub><ns:sub xmlns:ns=\\\"urn:test\\\" name=\\\"r\\\">R</ns:sub></ns:root>\";", "modifier": "private", "type": "String", "declarator": "messageDuplNamespace2=\"<ns:root xmlns:ns=\\\"urn:test\\\"><header xmlns=\\\"urn:header\\\">x</header><ns:sub xmlns:ns=\\\"urn:test\\\">A &amp; B</ns:sub><ns:sub xmlns:ns=\\\"urn:test\\\" name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub><ns:sub xmlns:ns=\\\"urn:test\\\" name=\\\"r\\\">R</ns:sub></ns:root>\"", "var_name": "messageDuplNamespace2"}, {"original_string": "private String expectedBasicNoNS=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<sub name=\\\"r\\\">R</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNoNS=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<sub name=\\\"r\\\">R</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNoNS"}, {"original_string": "private String expectedBasicNoNSBlock=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<block><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub></block>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<block><sub name=\\\"r\\\">R</sub></block>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNoNSBlock=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<block><sub>A &amp; B</sub><sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub></block>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<block><sub name=\\\"r\\\">R</sub></block>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNoNSBlock"}, {"original_string": "private String expectedBasicNoNSFirstElement=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNoNSFirstElement=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNoNSFirstElement"}, {"original_string": "private String expectedBasicNoNSFirstTwoElements=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNoNSFirstTwoElements=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub>A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNoNSFirstTwoElements"}, {"original_string": "private String expectedBasicNS1=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub xmlns=\\\"urn:test\\\">A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\" xmlns=\\\"urn:test\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<sub name=\\\"r\\\" xmlns=\\\"urn:test\\\">R</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNS1=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<sub xmlns=\\\"urn:test\\\">A &amp; B</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<sub name=\\\"p &amp; Q\\\" xmlns=\\\"urn:test\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<sub name=\\\"r\\\" xmlns=\\\"urn:test\\\">R</sub>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNS1"}, {"original_string": "private String expectedBasicNS2=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<ns:sub xmlns:ns=\\\"urn:test\\\">A &amp; B</ns:sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<ns:sub name=\\\"p &amp; Q\\\" xmlns:ns=\\\"urn:test\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<ns:sub name=\\\"r\\\" xmlns:ns=\\\"urn:test\\\">R</ns:sub>\\n\"+\n\t\t\t\"</result>\\n</results>\";", "modifier": "private", "type": "String", "declarator": "expectedBasicNS2=\"<results>\\n\"+\n\t\t\t\"<result item=\\\"1\\\">\\n\"+\n\t\t\t\"<ns:sub xmlns:ns=\\\"urn:test\\\">A &amp; B</ns:sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"2\\\">\\n\"+\n\t\t\t\"<ns:sub name=\\\"p &amp; Q\\\" xmlns:ns=\\\"urn:test\\\">\"+CDATA_START+\"<a>a &amp; b</a>\"+CDATA_END+\"</ns:sub>\\n\"+\n\t\t\t\"</result>\\n\"+\n\t\t\t\"<result item=\\\"3\\\">\\n\"+\n\t\t\t\"<ns:sub name=\\\"r\\\" xmlns:ns=\\\"urn:test\\\">R</ns:sub>\\n\"+\n\t\t\t\"</result>\\n</results>\"", "var_name": "expectedBasicNS2"}, {"original_string": "private IPipeLineSession session = new PipeLineSessionBase();", "modifier": "private", "type": "IPipeLineSession", "declarator": "session = new PipeLineSessionBase()", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/ForEachChildElementPipeTest.java"}, "test_case": {"identifier": "testError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testError() throws Exception {\n\t\tException targetException = new NullPointerException(\"FakeException\");\n\t\tpipe.setSender(getElementRenderer(targetException));\n\t\tconfigurePipe();\n\t\tpipe.start();\n\n\t\ttry {\n\t\t\tPipeRunResult prr = doPipe(pipe, messageError, session);\n\t\t\tfail(\"Expected exception to be thrown\");\n\t\t} catch (Exception e) {\n\t\t\tassertThat(e.getMessage(),StringContains.containsString(\"(NullPointerException) FakeException\"));\n\t\t\tassertCauseChainEndsAtOriginalException(targetException,e);\n\t\t}\n\t}", "signature": "void testError()", "full_signature": "@Test public void testError()", "class_method_signature": "ForEachChildElementPipeTest.testError()", "testcase": true, "constructor": false, "invocations": ["setSender", "getElementRenderer", "configurePipe", "start", "doPipe", "fail", "assertThat", "getMessage", "containsString", "assertCauseChainEndsAtOriginalException"]}, "focal_class": {"identifier": "ForEachChildElementPipe", "superclass": "extends StringIteratorPipe", "interfaces": "implements IThreadCreator", "fields": [{"original_string": "public final int DEFAULT_XSLT_VERSION=1;", "modifier": "public final", "type": "int", "declarator": "DEFAULT_XSLT_VERSION=1", "var_name": "DEFAULT_XSLT_VERSION"}, {"original_string": "private boolean processFile=false;", "modifier": "private", "type": "boolean", "declarator": "processFile=false", "var_name": "processFile"}, {"original_string": "private String containerElement;", "modifier": "private", "type": "String", "declarator": "containerElement", "var_name": "containerElement"}, {"original_string": "private String targetElement;", "modifier": "private", "type": "String", "declarator": "targetElement", "var_name": "targetElement"}, {"original_string": "private String elementXPathExpression=null;", "modifier": "private", "type": "String", "declarator": "elementXPathExpression=null", "var_name": "elementXPathExpression"}, {"original_string": "private String charset=StreamUtil.DEFAULT_INPUT_STREAM_ENCODING;", "modifier": "private", "type": "String", "declarator": "charset=StreamUtil.DEFAULT_INPUT_STREAM_ENCODING", "var_name": "charset"}, {"original_string": "private int xsltVersion=DEFAULT_XSLT_VERSION;", "modifier": "private", "type": "int", "declarator": "xsltVersion=DEFAULT_XSLT_VERSION", "var_name": "xsltVersion"}, {"original_string": "private boolean removeNamespaces=true;", "modifier": "private", "type": "boolean", "declarator": "removeNamespaces=true", "var_name": "removeNamespaces"}, {"original_string": "private boolean streamingXslt;", "modifier": "private", "type": "boolean", "declarator": "streamingXslt", "var_name": "streamingXslt"}, {"original_string": "private TransformerPool extractElementsTp=null;", "modifier": "private", "type": "TransformerPool", "declarator": "extractElementsTp=null", "var_name": "extractElementsTp"}, {"original_string": "private ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener;", "modifier": "private", "type": "ThreadLifeCycleEventListener<Object>", "declarator": "threadLifeCycleEventListener", "var_name": "threadLifeCycleEventListener"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "ForEachChildElementPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ForEachChildElementPipe.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ForEachChildElementPipe.stop()", "testcase": false, "constructor": false}, {"identifier": "makeEncapsulatingXslt", "parameters": "(String rootElementname, String xpathExpression, int xsltVersion, String namespaceDefs)", "modifiers": "protected", "return": "String", "signature": "String makeEncapsulatingXslt(String rootElementname, String xpathExpression, int xsltVersion, String namespaceDefs)", "full_signature": "protected String makeEncapsulatingXslt(String rootElementname, String xpathExpression, int xsltVersion, String namespaceDefs)", "class_method_signature": "ForEachChildElementPipe.makeEncapsulatingXslt(String rootElementname, String xpathExpression, int xsltVersion, String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "createHandler", "parameters": "(HandlerRecord result, IPipeLineSession session, ItemCallback callback)", "modifiers": "protected", "return": "void", "signature": "void createHandler(HandlerRecord result, IPipeLineSession session, ItemCallback callback)", "full_signature": "protected void createHandler(HandlerRecord result, IPipeLineSession session, ItemCallback callback)", "class_method_signature": "ForEachChildElementPipe.createHandler(HandlerRecord result, IPipeLineSession session, ItemCallback callback)", "testcase": false, "constructor": false}, {"identifier": "canProvideOutputStream", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canProvideOutputStream()", "full_signature": "@Override public boolean canProvideOutputStream()", "class_method_signature": "ForEachChildElementPipe.canProvideOutputStream()", "testcase": false, "constructor": false}, {"identifier": "provideOutputStream", "parameters": "(IPipeLineSession session)", "modifiers": "@Override public", "return": "MessageOutputStream", "signature": "MessageOutputStream provideOutputStream(IPipeLineSession session)", "full_signature": "@Override public MessageOutputStream provideOutputStream(IPipeLineSession session)", "class_method_signature": "ForEachChildElementPipe.provideOutputStream(IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "iterateOverInput", "parameters": "(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "modifiers": "@Override protected", "return": "void", "signature": "void iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "full_signature": "@Override protected void iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "class_method_signature": "ForEachChildElementPipe.iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "testcase": false, "constructor": false}, {"identifier": "rethrowTransformerException", "parameters": "(TransformerErrorListener transformerErrorListener, String errorMessage)", "modifiers": "private", "return": "void", "signature": "void rethrowTransformerException(TransformerErrorListener transformerErrorListener, String errorMessage)", "full_signature": "private void rethrowTransformerException(TransformerErrorListener transformerErrorListener, String errorMessage)", "class_method_signature": "ForEachChildElementPipe.rethrowTransformerException(TransformerErrorListener transformerErrorListener, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "getExtractElementsTp", "parameters": "()", "modifiers": "protected", "return": "TransformerPool", "signature": "TransformerPool getExtractElementsTp()", "full_signature": "protected TransformerPool getExtractElementsTp()", "class_method_signature": "ForEachChildElementPipe.getExtractElementsTp()", "testcase": false, "constructor": false}, {"identifier": "setProcessFile", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"1\", \"When set <code>true</code>, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is transformed. The character encoding will be read from the XML declaration\", \"false\"}) public", "return": "void", "signature": "void setProcessFile(boolean b)", "full_signature": "@IbisDoc({\"1\", \"When set <code>true</code>, the input is assumed to be the name of a file to be processed. Otherwise, the input itself is transformed. The character encoding will be read from the XML declaration\", \"false\"}) public void setProcessFile(boolean b)", "class_method_signature": "ForEachChildElementPipe.setProcessFile(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isProcessFile", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isProcessFile()", "full_signature": "public boolean isProcessFile()", "class_method_signature": "ForEachChildElementPipe.isProcessFile()", "testcase": false, "constructor": false}, {"identifier": "setContainerElement", "parameters": "(String containerElement)", "modifiers": "@IbisDoc({\"2\", \"Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements. \" + \"When empty, the pipe will iterate over each direct child element of the root\", \"\"}) public", "return": "void", "signature": "void setContainerElement(String containerElement)", "full_signature": "@IbisDoc({\"2\", \"Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the 'root' of elements to be iterated over, i.e. the root of the set of child elements. \" + \"When empty, the pipe will iterate over each direct child element of the root\", \"\"}) public void setContainerElement(String containerElement)", "class_method_signature": "ForEachChildElementPipe.setContainerElement(String containerElement)", "testcase": false, "constructor": false}, {"identifier": "getContainerElement", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContainerElement()", "full_signature": "public String getContainerElement()", "class_method_signature": "ForEachChildElementPipe.getContainerElement()", "testcase": false, "constructor": false}, {"identifier": "setTargetElement", "parameters": "(String targetElement)", "modifiers": "@IbisDoc({\"3\", \"Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements. \" + \"When empty, the pipe will iterate over any direct child element of the root or specified containerElement\", \"\"}) public", "return": "void", "signature": "void setTargetElement(String targetElement)", "full_signature": "@IbisDoc({\"3\", \"Element name (not an XPath-expression), qualified via attribute <code>namespaceDefs</code>, used to determine the type of elements to be iterated over, i.e. the element name of each of the child elements. \" + \"When empty, the pipe will iterate over any direct child element of the root or specified containerElement\", \"\"}) public void setTargetElement(String targetElement)", "class_method_signature": "ForEachChildElementPipe.setTargetElement(String targetElement)", "testcase": false, "constructor": false}, {"identifier": "getTargetElement", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTargetElement()", "full_signature": "public String getTargetElement()", "class_method_signature": "ForEachChildElementPipe.getTargetElement()", "testcase": false, "constructor": false}, {"identifier": "setElementXPathExpression", "parameters": "(String string)", "modifiers": "@IbisDoc({\"4\", \"XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is /*/*, i.e. the pipe will iterate over each direct child element of the root. \" +\"Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead.\", \"\"}) public", "return": "void", "signature": "void setElementXPathExpression(String string)", "full_signature": "@IbisDoc({\"4\", \"XPath-expression used to determine the set of elements to be iterated over, i.e. the set of child elements. When empty, the effective value is /*/*, i.e. the pipe will iterate over each direct child element of the root. \" +\"Be aware that memory consumption appears to increase with file size when this attribute is used. When possible, use containerElement and/or targetElement instead.\", \"\"}) public void setElementXPathExpression(String string)", "class_method_signature": "ForEachChildElementPipe.setElementXPathExpression(String string)", "testcase": false, "constructor": false}, {"identifier": "getElementXPathExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getElementXPathExpression()", "full_signature": "public String getElementXPathExpression()", "class_method_signature": "ForEachChildElementPipe.getElementXPathExpression()", "testcase": false, "constructor": false}, {"identifier": "setCharset", "parameters": "(String string)", "modifiers": "@IbisDoc({\"5\", \"Characterset used for reading file or inputstream, only used when {@link #setProcessFile(boolean) processFile} is <code>true</code>, or the input is of type InputStream\", \"utf-8\"}) public", "return": "void", "signature": "void setCharset(String string)", "full_signature": "@IbisDoc({\"5\", \"Characterset used for reading file or inputstream, only used when {@link #setProcessFile(boolean) processFile} is <code>true</code>, or the input is of type InputStream\", \"utf-8\"}) public void setCharset(String string)", "class_method_signature": "ForEachChildElementPipe.setCharset(String string)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCharset()", "full_signature": "public String getCharset()", "class_method_signature": "ForEachChildElementPipe.getCharset()", "testcase": false, "constructor": false}, {"identifier": "setXsltVersion", "parameters": "(int xsltVersion)", "modifiers": "@IbisDoc({\"6\", \"When set to <code>2</code> xslt processor 2.0 (net.sf.saxon) will be used, supporting XPath 2.0, otherwise xslt processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as Xslt Streaming is currently only supported by the XsltProcessor that is used for xsltVersion=1\", \"1\"}) public", "return": "void", "signature": "void setXsltVersion(int xsltVersion)", "full_signature": "@IbisDoc({\"6\", \"When set to <code>2</code> xslt processor 2.0 (net.sf.saxon) will be used, supporting XPath 2.0, otherwise xslt processor 1.0 (org.apache.xalan), supporting XPath 1.0. N.B. Be aware that setting this other than 1 might cause the input file being read as a whole in to memory, as Xslt Streaming is currently only supported by the XsltProcessor that is used for xsltVersion=1\", \"1\"}) public void setXsltVersion(int xsltVersion)", "class_method_signature": "ForEachChildElementPipe.setXsltVersion(int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "getXsltVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXsltVersion()", "full_signature": "public int getXsltVersion()", "class_method_signature": "ForEachChildElementPipe.getXsltVersion()", "testcase": false, "constructor": false}, {"identifier": "setXslt2", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"7\", \"when set <code>true</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan)\", \"false\"}) /** * @deprecated Please remove setting of xslt2, it will be auto detected. Or use xsltVersion. */ @Deprecated @ConfigurationWarning(\"It's value is now auto detected. If necessary, replace with a setting of xsltVersion\") public", "return": "void", "signature": "void setXslt2(boolean b)", "full_signature": "@IbisDoc({\"7\", \"when set <code>true</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan)\", \"false\"}) /** * @deprecated Please remove setting of xslt2, it will be auto detected. Or use xsltVersion. */ @Deprecated @ConfigurationWarning(\"It's value is now auto detected. If necessary, replace with a setting of xsltVersion\") public void setXslt2(boolean b)", "class_method_signature": "ForEachChildElementPipe.setXslt2(boolean b)", "testcase": false, "constructor": false}, {"identifier": "setRemoveNamespaces", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"8\", \"When set <code>true</code> namespaces (and prefixes) in the input message are removed before transformation\", \"true\"}) public", "return": "void", "signature": "void setRemoveNamespaces(boolean b)", "full_signature": "@IbisDoc({\"8\", \"When set <code>true</code> namespaces (and prefixes) in the input message are removed before transformation\", \"true\"}) public void setRemoveNamespaces(boolean b)", "class_method_signature": "ForEachChildElementPipe.setRemoveNamespaces(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isRemoveNamespaces", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRemoveNamespaces()", "full_signature": "public boolean isRemoveNamespaces()", "class_method_signature": "ForEachChildElementPipe.isRemoveNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setThreadLifeCycleEventListener", "parameters": "(ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener)", "modifiers": "@Override public", "return": "void", "signature": "void setThreadLifeCycleEventListener(ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener)", "full_signature": "@Override public void setThreadLifeCycleEventListener(ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener)", "class_method_signature": "ForEachChildElementPipe.setThreadLifeCycleEventListener(ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/ForEachChildElementPipe.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void start() throws PipeStartException  {\n\t\ttry {\n\t\t\tif (extractElementsTp!=null) {\n\t\t\t\textractElementsTp.open();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new PipeStartException(e);\n\t\t}\n\t\tsuper.start();\n\t}", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ForEachChildElementPipe.start()", "testcase": false, "constructor": false, "invocations": ["open", "start"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}