{"test_class": {"identifier": "PasswordEncoderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TESTABLE_PASSWORD = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TESTABLE_PASSWORD = \"test\"", "var_name": "TESTABLE_PASSWORD"}, {"original_string": "private static final String ENCODED_PASSWORD = \"EncodedPassword\";", "modifier": "private static final", "type": "String", "declarator": "ENCODED_PASSWORD = \"EncodedPassword\"", "var_name": "ENCODED_PASSWORD"}, {"original_string": "private static final String SALT = \"$2a$30$qu2FXZwTpBX926bpJl98Ce\";", "modifier": "private static final", "type": "String", "declarator": "SALT = \"$2a$30$qu2FXZwTpBX926bpJl98Ce\"", "var_name": "SALT"}, {"original_string": "private PasswordEncoderImpl passwordEncoder;", "modifier": "private", "type": "PasswordEncoderImpl", "declarator": "passwordEncoder", "var_name": "passwordEncoder"}, {"original_string": "@Mock\n    private CustomPreference customPreference;", "modifier": "@Mock\n    private", "type": "CustomPreference", "declarator": "customPreference", "var_name": "customPreference"}, {"original_string": "@Mock\n    private KeyStore keyStore;", "modifier": "@Mock\n    private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "@Mock\n    private UpdatableBCrypt updatableBCrypt;", "modifier": "@Mock\n    private", "type": "UpdatableBCrypt", "declarator": "updatableBCrypt", "var_name": "updatableBCrypt"}], "file": "app/src/test/java/com/devband/tronwalletforandroid/common/security/PasswordEncoderImplTest.java"}, "test_case": {"identifier": "encodeTestSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encodeTestSuccess() {\n        String result = passwordEncoder.encode(TESTABLE_PASSWORD);\n\n        assertNotNull(result);\n        assertEquals(ENCODED_PASSWORD, result);\n    }", "signature": "void encodeTestSuccess()", "full_signature": "@Test public void encodeTestSuccess()", "class_method_signature": "PasswordEncoderImplTest.encodeTestSuccess()", "testcase": true, "constructor": false, "invocations": ["encode", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "PasswordEncoderImpl", "superclass": "", "interfaces": "implements PasswordEncoder", "fields": [{"original_string": "private CustomPreference customPreference;", "modifier": "private", "type": "CustomPreference", "declarator": "customPreference", "var_name": "customPreference"}, {"original_string": "private KeyStore keyStore;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "private UpdatableBCrypt updatableBCrypt;", "modifier": "private", "type": "UpdatableBCrypt", "declarator": "updatableBCrypt", "var_name": "updatableBCrypt"}], "methods": [{"identifier": "PasswordEncoderImpl", "parameters": "(CustomPreference customPreference, KeyStore keyStore, UpdatableBCrypt updatableBCrypt)", "modifiers": "public", "return": "", "signature": " PasswordEncoderImpl(CustomPreference customPreference, KeyStore keyStore, UpdatableBCrypt updatableBCrypt)", "full_signature": "public  PasswordEncoderImpl(CustomPreference customPreference, KeyStore keyStore, UpdatableBCrypt updatableBCrypt)", "class_method_signature": "PasswordEncoderImpl.PasswordEncoderImpl(CustomPreference customPreference, KeyStore keyStore, UpdatableBCrypt updatableBCrypt)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "PasswordEncoderImpl.init()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(@NonNull String rawPassword)", "modifiers": "@Override public", "return": "String", "signature": "String encode(@NonNull String rawPassword)", "full_signature": "@Override public String encode(@NonNull String rawPassword)", "class_method_signature": "PasswordEncoderImpl.encode(@NonNull String rawPassword)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(@NonNull String rawPassword, @NonNull String encodedPassword)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(@NonNull String rawPassword, @NonNull String encodedPassword)", "full_signature": "@Override public boolean matches(@NonNull String rawPassword, @NonNull String encodedPassword)", "class_method_signature": "PasswordEncoderImpl.matches(@NonNull String rawPassword, @NonNull String encodedPassword)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/devband/tronwalletforandroid/common/security/PasswordEncoderImpl.java"}, "focal_method": {"identifier": "encode", "parameters": "(@NonNull String rawPassword)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encode(@NonNull String rawPassword) {\n        String encodedPassword = this.updatableBCrypt.hash(rawPassword, this.keyStore.decryptString(this.customPreference.getSalt(), Constants.ALIAS_SALT));\n        return keyStore.encryptString(encodedPassword, Constants.ALIAS_PASSWORD_KEY);\n    }", "signature": "String encode(@NonNull String rawPassword)", "full_signature": "@Override public String encode(@NonNull String rawPassword)", "class_method_signature": "PasswordEncoderImpl.encode(@NonNull String rawPassword)", "testcase": false, "constructor": false, "invocations": ["hash", "decryptString", "getSalt", "encryptString"]}, "repository": {"repo_id": 129493743, "url": "https://github.com/lky1001/tron-android-wallet", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 13, "size": 67033, "license": "licensed"}}