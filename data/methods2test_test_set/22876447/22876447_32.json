{"test_class": {"identifier": "ExtractorReloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExtractorModel mockModel;", "modifier": "private", "type": "ExtractorModel", "declarator": "mockModel", "var_name": "mockModel"}, {"original_string": "private Extractor mockExtractor1;", "modifier": "private", "type": "Extractor", "declarator": "mockExtractor1", "var_name": "mockExtractor1"}, {"original_string": "private Extractor mockExtractor2;", "modifier": "private", "type": "Extractor", "declarator": "mockExtractor2", "var_name": "mockExtractor2"}, {"original_string": "private ExtractorReloader reloader;", "modifier": "private", "type": "ExtractorReloader", "declarator": "reloader", "var_name": "reloader"}], "file": "link-move/src/test/java/com/nhl/link/move/runtime/extractor/ExtractorReloaderTest.java"}, "test_case": {"identifier": "testGetDelegate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetDelegate() {\n\n\t\tExtractor d1 = reloader.getOrReload();\n\t\tassertSame(mockExtractor1, d1);\n\n\t\tExtractor d2 = reloader.getOrReload();\n\t\tassertSame(mockExtractor1, d2);\n\n\t\t// 'touch' model to force resync\n\t\twhen(mockModel.getLoadedOn()).thenReturn(System.currentTimeMillis() + 1);\n\n\t\tExtractor d3 = reloader.getOrReload();\n\t\tassertSame(mockExtractor2, d3);\n\t}", "signature": "void testGetDelegate()", "full_signature": "@Test public void testGetDelegate()", "class_method_signature": "ExtractorReloaderTest.testGetDelegate()", "testcase": true, "constructor": false, "invocations": ["getOrReload", "assertSame", "getOrReload", "assertSame", "thenReturn", "when", "getLoadedOn", "currentTimeMillis", "getOrReload", "assertSame"]}, "focal_class": {"identifier": "ExtractorReloader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IExtractorModelService extractorModelService;", "modifier": "private final", "type": "IExtractorModelService", "declarator": "extractorModelService", "var_name": "extractorModelService"}, {"original_string": "private final IConnectorService connectorService;", "modifier": "private final", "type": "IConnectorService", "declarator": "connectorService", "var_name": "connectorService"}, {"original_string": "private final Map<String, IExtractorFactory> factories;", "modifier": "private final", "type": "Map<String, IExtractorFactory>", "declarator": "factories", "var_name": "factories"}, {"original_string": "private final ExtractorName name;", "modifier": "private final", "type": "ExtractorName", "declarator": "name", "var_name": "name"}, {"original_string": "private long lastSeen;", "modifier": "private", "type": "long", "declarator": "lastSeen", "var_name": "lastSeen"}, {"original_string": "private Extractor delegate;", "modifier": "private", "type": "Extractor", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "ExtractorReloader", "parameters": "(\n            IExtractorModelService extractorModelService,\n            IConnectorService connectorService,\n            Map<String, IExtractorFactory> factories,\n            ExtractorName name)", "modifiers": "public", "return": "", "signature": " ExtractorReloader(\n            IExtractorModelService extractorModelService,\n            IConnectorService connectorService,\n            Map<String, IExtractorFactory> factories,\n            ExtractorName name)", "full_signature": "public  ExtractorReloader(\n            IExtractorModelService extractorModelService,\n            IConnectorService connectorService,\n            Map<String, IExtractorFactory> factories,\n            ExtractorName name)", "class_method_signature": "ExtractorReloader.ExtractorReloader(\n            IExtractorModelService extractorModelService,\n            IConnectorService connectorService,\n            Map<String, IExtractorFactory> factories,\n            ExtractorName name)", "testcase": false, "constructor": true}, {"identifier": "getOrReload", "parameters": "()", "modifiers": "", "return": "Extractor", "signature": "Extractor getOrReload()", "full_signature": " Extractor getOrReload()", "class_method_signature": "ExtractorReloader.getOrReload()", "testcase": false, "constructor": false}, {"identifier": "createExtractor", "parameters": "(ExtractorModel model)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Extractor", "signature": "Extractor createExtractor(ExtractorModel model)", "full_signature": "@SuppressWarnings(\"unchecked\") private Extractor createExtractor(ExtractorModel model)", "class_method_signature": "ExtractorReloader.createExtractor(ExtractorModel model)", "testcase": false, "constructor": false}, {"identifier": "createExtractor", "parameters": "(\n            ExtractorModel model,\n            IExtractorFactory<T> factory,\n            String connectorId)", "modifiers": "private", "return": "Extractor", "signature": "Extractor createExtractor(\n            ExtractorModel model,\n            IExtractorFactory<T> factory,\n            String connectorId)", "full_signature": "private Extractor createExtractor(\n            ExtractorModel model,\n            IExtractorFactory<T> factory,\n            String connectorId)", "class_method_signature": "ExtractorReloader.createExtractor(\n            ExtractorModel model,\n            IExtractorFactory<T> factory,\n            String connectorId)", "testcase": false, "constructor": false}, {"identifier": "needsReload", "parameters": "(ExtractorModel model)", "modifiers": "", "return": "boolean", "signature": "boolean needsReload(ExtractorModel model)", "full_signature": " boolean needsReload(ExtractorModel model)", "class_method_signature": "ExtractorReloader.needsReload(ExtractorModel model)", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/runtime/extractor/ExtractorReloader.java"}, "focal_method": {"identifier": "getOrReload", "parameters": "()", "modifiers": "", "return": "Extractor", "body": "Extractor getOrReload() {\n        ExtractorModel model = extractorModelService.get(name);\n\n        if (needsReload(model)) {\n\n            synchronized (this) {\n                if (needsReload(model)) {\n\n                    this.lastSeen = model.getLoadedOn() + 1;\n                    this.delegate = createExtractor(model);\n                }\n            }\n        }\n\n        return delegate;\n    }", "signature": "Extractor getOrReload()", "full_signature": " Extractor getOrReload()", "class_method_signature": "ExtractorReloader.getOrReload()", "testcase": false, "constructor": false, "invocations": ["get", "needsReload", "needsReload", "getLoadedOn", "createExtractor"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}