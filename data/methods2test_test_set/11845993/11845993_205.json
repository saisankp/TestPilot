{"test_class": {"identifier": "Metric2RegistryTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/Metric2RegistryTest.java"}, "test_case": {"identifier": "testRegisterAny", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRegisterAny() {\n\t\tMetric2Registry registry = new Metric2Registry();\n\t\tfinal MetricName     metric1 = MetricName.name(\"test\").build();\n\t\tfinal Gauge<Integer> gauge   = getGauge();\n\t\tfinal Metered        metered = getMetered();\n\t\t\n\t\tMetric2Set metricSet1 = new Metric2Set() {\n\t\t\t@Override\n\t\t\tpublic Map<MetricName, Metric> getMetrics() {\n\t\t\t\tMap<MetricName, Metric> map = new HashMap<MetricName, Metric>(1);\n\t\t\t\tmap.put(metric1, gauge);\n\t\t\t\treturn map;\n\t\t\t}\n\t\t};\n\t\tMetric2Set metricSet2 = new Metric2Set() {\n\t\t\t@Override\n\t\t\tpublic Map<MetricName, Metric> getMetrics() {\n\t\t\t\tMap<MetricName, Metric> map = new HashMap<MetricName, Metric>(1);\n\t\t\t\tmap.put(metric1, metered);\n\t\t\t\treturn map;\n\t\t\t}\n\t\t};\n\t\tregistry.registerAny(metricSet1);\n\t\tregistry.registerAny(metricSet2);\n\t\t\n\t\t// first one is registered only\n\t\tassertEquals(1, registry.getGauges().entrySet().size());\n\t\tassertEquals(0, registry.getMeters().entrySet().size());\n\t\tMap.Entry<MetricName, Gauge> stagemonitorEntry = registry.getGauges().entrySet().iterator().next();\n\t\tassertEquals(\"test\", stagemonitorEntry.getKey().getName());\n\t\tassertEquals(1, \t\t stagemonitorEntry.getValue().getValue());\n\t}", "signature": "void testRegisterAny()", "full_signature": "@Test public void testRegisterAny()", "class_method_signature": "Metric2RegistryTest.testRegisterAny()", "testcase": true, "constructor": false, "invocations": ["build", "name", "getGauge", "getMetered", "put", "put", "registerAny", "registerAny", "assertEquals", "size", "entrySet", "getGauges", "assertEquals", "size", "entrySet", "getMeters", "next", "iterator", "entrySet", "getGauges", "assertEquals", "getName", "getKey", "assertEquals", "getValue", "getValue"]}, "focal_class": {"identifier": "Metric2Registry", "superclass": "", "interfaces": "implements Metric2Set", "fields": [{"original_string": "private final ConcurrentMap<MetricName, Metric> metrics = new ConcurrentHashMap<MetricName, Metric>();", "modifier": "private final", "type": "ConcurrentMap<MetricName, Metric>", "declarator": "metrics = new ConcurrentHashMap<MetricName, Metric>()", "var_name": "metrics"}, {"original_string": "private final MetricRegistry metricRegistry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "methods": [{"identifier": "Metric2Registry", "parameters": "()", "modifiers": "public", "return": "", "signature": " Metric2Registry()", "full_signature": "public  Metric2Registry()", "class_method_signature": "Metric2Registry.Metric2Registry()", "testcase": false, "constructor": true}, {"identifier": "Metric2Registry", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "public", "return": "", "signature": " Metric2Registry(MetricRegistry metricRegistry)", "full_signature": "public  Metric2Registry(MetricRegistry metricRegistry)", "class_method_signature": "Metric2Registry.Metric2Registry(MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(MetricName name, T metric)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T register(MetricName name, T metric)", "full_signature": "@SuppressWarnings(\"unchecked\") public T register(MetricName name, T metric)", "class_method_signature": "Metric2Registry.register(MetricName name, T metric)", "testcase": false, "constructor": false}, {"identifier": "registerAll", "parameters": "(Metric2Set metrics)", "modifiers": "public", "return": "void", "signature": "void registerAll(Metric2Set metrics)", "full_signature": "public void registerAll(Metric2Set metrics)", "class_method_signature": "Metric2Registry.registerAll(Metric2Set metrics)", "testcase": false, "constructor": false}, {"identifier": "registerAny", "parameters": "(Metric2Set metrics)", "modifiers": "public", "return": "void", "signature": "void registerAny(Metric2Set metrics)", "full_signature": "public void registerAny(Metric2Set metrics)", "class_method_signature": "Metric2Registry.registerAny(Metric2Set metrics)", "testcase": false, "constructor": false}, {"identifier": "registerNewMetrics", "parameters": "(MetricName name, Metric metric)", "modifiers": "public", "return": "void", "signature": "void registerNewMetrics(MetricName name, Metric metric)", "full_signature": "public void registerNewMetrics(MetricName name, Metric metric)", "class_method_signature": "Metric2Registry.registerNewMetrics(MetricName name, Metric metric)", "testcase": false, "constructor": false}, {"identifier": "counter", "parameters": "(MetricName name)", "modifiers": "public", "return": "Counter", "signature": "Counter counter(MetricName name)", "full_signature": "public Counter counter(MetricName name)", "class_method_signature": "Metric2Registry.counter(MetricName name)", "testcase": false, "constructor": false}, {"identifier": "histogram", "parameters": "(MetricName name)", "modifiers": "public", "return": "Histogram", "signature": "Histogram histogram(MetricName name)", "full_signature": "public Histogram histogram(MetricName name)", "class_method_signature": "Metric2Registry.histogram(MetricName name)", "testcase": false, "constructor": false}, {"identifier": "meter", "parameters": "(MetricName name)", "modifiers": "public", "return": "Meter", "signature": "Meter meter(MetricName name)", "full_signature": "public Meter meter(MetricName name)", "class_method_signature": "Metric2Registry.meter(MetricName name)", "testcase": false, "constructor": false}, {"identifier": "timer", "parameters": "(MetricName name)", "modifiers": "public", "return": "Timer", "signature": "Timer timer(MetricName name)", "full_signature": "public Timer timer(MetricName name)", "class_method_signature": "Metric2Registry.timer(MetricName name)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(MetricName name)", "modifiers": "public", "return": "boolean", "signature": "boolean remove(MetricName name)", "full_signature": "public boolean remove(MetricName name)", "class_method_signature": "Metric2Registry.remove(MetricName name)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "Set<MetricName>", "signature": "Set<MetricName> getNames()", "full_signature": "public Set<MetricName> getNames()", "class_method_signature": "Metric2Registry.getNames()", "testcase": false, "constructor": false}, {"identifier": "getGauges", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, Gauge>", "signature": "Map<MetricName, Gauge> getGauges()", "full_signature": "public Map<MetricName, Gauge> getGauges()", "class_method_signature": "Metric2Registry.getGauges()", "testcase": false, "constructor": false}, {"identifier": "getGauges", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "Map<MetricName, Gauge>", "signature": "Map<MetricName, Gauge> getGauges(Metric2Filter filter)", "full_signature": "public Map<MetricName, Gauge> getGauges(Metric2Filter filter)", "class_method_signature": "Metric2Registry.getGauges(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, Counter>", "signature": "Map<MetricName, Counter> getCounters()", "full_signature": "public Map<MetricName, Counter> getCounters()", "class_method_signature": "Metric2Registry.getCounters()", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "Map<MetricName, Counter>", "signature": "Map<MetricName, Counter> getCounters(Metric2Filter filter)", "full_signature": "public Map<MetricName, Counter> getCounters(Metric2Filter filter)", "class_method_signature": "Metric2Registry.getCounters(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getHistograms", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, Histogram>", "signature": "Map<MetricName, Histogram> getHistograms()", "full_signature": "public Map<MetricName, Histogram> getHistograms()", "class_method_signature": "Metric2Registry.getHistograms()", "testcase": false, "constructor": false}, {"identifier": "getHistograms", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "Map<MetricName, Histogram>", "signature": "Map<MetricName, Histogram> getHistograms(Metric2Filter filter)", "full_signature": "public Map<MetricName, Histogram> getHistograms(Metric2Filter filter)", "class_method_signature": "Metric2Registry.getHistograms(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getMeters", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, Meter>", "signature": "Map<MetricName, Meter> getMeters()", "full_signature": "public Map<MetricName, Meter> getMeters()", "class_method_signature": "Metric2Registry.getMeters()", "testcase": false, "constructor": false}, {"identifier": "getMeters", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "Map<MetricName, Meter>", "signature": "Map<MetricName, Meter> getMeters(Metric2Filter filter)", "full_signature": "public Map<MetricName, Meter> getMeters(Metric2Filter filter)", "class_method_signature": "Metric2Registry.getMeters(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getTimers", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, Timer>", "signature": "Map<MetricName, Timer> getTimers()", "full_signature": "public Map<MetricName, Timer> getTimers()", "class_method_signature": "Metric2Registry.getTimers()", "testcase": false, "constructor": false}, {"identifier": "getTimers", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "Map<MetricName, Timer>", "signature": "Map<MetricName, Timer> getTimers(Metric2Filter filter)", "full_signature": "public Map<MetricName, Timer> getTimers(Metric2Filter filter)", "class_method_signature": "Metric2Registry.getTimers(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getOrAdd", "parameters": "(MetricName name, MetricBuilder<T> builder)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T getOrAdd(MetricName name, MetricBuilder<T> builder)", "full_signature": "@SuppressWarnings(\"unchecked\") private T getOrAdd(MetricName name, MetricBuilder<T> builder)", "class_method_signature": "Metric2Registry.getOrAdd(MetricName name, MetricBuilder<T> builder)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(Class<T> klass, Metric2Filter filter)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<MetricName, T>", "signature": "Map<MetricName, T> getMetrics(Class<T> klass, Metric2Filter filter)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<MetricName, T> getMetrics(Class<T> klass, Metric2Filter filter)", "class_method_signature": "Metric2Registry.getMetrics(Class<T> klass, Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(Class<T> klass, MetricFilter filter)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Map<MetricName, T>", "signature": "Map<MetricName, T> getMetrics(Class<T> klass, MetricFilter filter)", "full_signature": "@SuppressWarnings(\"unchecked\") protected Map<MetricName, T> getMetrics(Class<T> klass, MetricFilter filter)", "class_method_signature": "Metric2Registry.getMetrics(Class<T> klass, MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<MetricName, Metric>", "signature": "Map<MetricName, Metric> getMetrics()", "full_signature": "@Override public Map<MetricName, Metric> getMetrics()", "class_method_signature": "Metric2Registry.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "removeMatching", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "void", "signature": "void removeMatching(MetricFilter filter)", "full_signature": "public void removeMatching(MetricFilter filter)", "class_method_signature": "Metric2Registry.removeMatching(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "removeMatching", "parameters": "(Metric2Filter filter)", "modifiers": "public", "return": "void", "signature": "void removeMatching(Metric2Filter filter)", "full_signature": "public void removeMatching(Metric2Filter filter)", "class_method_signature": "Metric2Registry.removeMatching(Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getMetricRegistry", "parameters": "()", "modifiers": "public", "return": "MetricRegistry", "signature": "MetricRegistry getMetricRegistry()", "full_signature": "public MetricRegistry getMetricRegistry()", "class_method_signature": "Metric2Registry.getMetricRegistry()", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/Metric2Registry.java"}, "focal_method": {"identifier": "registerAny", "parameters": "(Metric2Set metrics)", "modifiers": "public", "return": "void", "body": "public void registerAny(Metric2Set metrics) {\n\t\tfor (Map.Entry<MetricName, Metric> entry : metrics.getMetrics().entrySet()) {\n\t\t\tregisterNewMetrics(entry.getKey(), entry.getValue());\n\t\t}\n\t}", "signature": "void registerAny(Metric2Set metrics)", "full_signature": "public void registerAny(Metric2Set metrics)", "class_method_signature": "Metric2Registry.registerAny(Metric2Set metrics)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getMetrics", "registerNewMetrics", "getKey", "getValue"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}