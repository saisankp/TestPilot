{"test_class": {"identifier": "SystemRaiderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private  SystemRaider systemRaider;", "modifier": "@Autowired\n    private", "type": "SystemRaider", "declarator": "systemRaider", "var_name": "systemRaider"}, {"original_string": "@Autowired\n    private  SystemDelegator systemDelegator;", "modifier": "@Autowired\n    private", "type": "SystemDelegator", "declarator": "systemDelegator", "var_name": "systemDelegator"}, {"original_string": "private  SshParameters sshParameters;", "modifier": "private", "type": "SshParameters", "declarator": "sshParameters", "var_name": "sshParameters"}, {"original_string": "private  CloudRaiderSSHSessionFactory mockedSessionFactory;", "modifier": "private", "type": "CloudRaiderSSHSessionFactory", "declarator": "mockedSessionFactory", "var_name": "mockedSessionFactory"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/core/impl/SystemRaiderImplTest.java"}, "test_case": {"identifier": "executeWithListOfParamsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeWithListOfParamsTest(){\n\n        String path  = getClass().getClassLoader().getResource(\"test.sh\").getPath();\n        List<String> params = new ArrayList<String>();\n        params.add(\"param1\");\n        params.add(\"param2\");\n        Assert.assertEquals(\"success\",systemRaider.executeScript(\"127.0.0.1\",path,params));\n    }", "signature": "void executeWithListOfParamsTest()", "full_signature": "@Test public void executeWithListOfParamsTest()", "class_method_signature": "SystemRaiderImplTest.executeWithListOfParamsTest()", "testcase": true, "constructor": false, "invocations": ["getPath", "getResource", "getClassLoader", "getClass", "add", "add", "assertEquals", "executeScript"]}, "focal_class": {"identifier": "SystemRaiderImpl", "superclass": "", "interfaces": "implements SystemRaider", "fields": [{"original_string": "@Autowired\n    private SystemDelegator systemDelegator;", "modifier": "@Autowired\n    private", "type": "SystemDelegator", "declarator": "systemDelegator", "var_name": "systemDelegator"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}], "methods": [{"identifier": "SystemRaiderImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " SystemRaiderImpl()", "full_signature": "public  SystemRaiderImpl()", "class_method_signature": "SystemRaiderImpl.SystemRaiderImpl()", "testcase": false, "constructor": true}, {"identifier": "executeScript", "parameters": "(String ip, String path, String... params)", "modifiers": "@Override public", "return": "String", "signature": "String executeScript(String ip, String path, String... params)", "full_signature": "@Override public String executeScript(String ip, String path, String... params)", "class_method_signature": "SystemRaiderImpl.executeScript(String ip, String path, String... params)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(String ip, String path, List<String> params)", "modifiers": "@Override public", "return": "String", "signature": "String executeScript(String ip, String path, List<String> params)", "full_signature": "@Override public String executeScript(String ip, String path, List<String> params)", "class_method_signature": "SystemRaiderImpl.executeScript(String ip, String path, List<String> params)", "testcase": false, "constructor": false}, {"identifier": "createSessionFactory", "parameters": "(String ip)", "modifiers": "private", "return": "SessionFactory", "signature": "SessionFactory createSessionFactory(String ip)", "full_signature": "private SessionFactory createSessionFactory(String ip)", "class_method_signature": "SystemRaiderImpl.createSessionFactory(String ip)", "testcase": false, "constructor": false}, {"identifier": "scpScript", "parameters": "(SessionFactory sessionFactory, String scriptPath)", "modifiers": "private", "return": "void", "signature": "void scpScript(SessionFactory sessionFactory, String scriptPath)", "full_signature": "private void scpScript(SessionFactory sessionFactory, String scriptPath)", "class_method_signature": "SystemRaiderImpl.scpScript(SessionFactory sessionFactory, String scriptPath)", "testcase": false, "constructor": false}, {"identifier": "executer", "parameters": "(String ip)", "modifiers": "private", "return": "String", "signature": "String executer(String ip)", "full_signature": "private String executer(String ip)", "class_method_signature": "SystemRaiderImpl.executer(String ip)", "testcase": false, "constructor": false}, {"identifier": "executer", "parameters": "(String ip, String... params)", "modifiers": "private", "return": "String", "signature": "String executer(String ip, String... params)", "full_signature": "private String executer(String ip, String... params)", "class_method_signature": "SystemRaiderImpl.executer(String ip, String... params)", "testcase": false, "constructor": false}, {"identifier": "executer", "parameters": "(String ip, List<String> params)", "modifiers": "private", "return": "String", "signature": "String executer(String ip, List<String> params)", "full_signature": "private String executer(String ip, List<String> params)", "class_method_signature": "SystemRaiderImpl.executer(String ip, List<String> params)", "testcase": false, "constructor": false}, {"identifier": "executer", "parameters": "(String command, Session session, String... params)", "modifiers": "private", "return": "Boolean", "signature": "Boolean executer(String command, Session session, String... params)", "full_signature": "private Boolean executer(String command, Session session, String... params)", "class_method_signature": "SystemRaiderImpl.executer(String command, Session session, String... params)", "testcase": false, "constructor": false}, {"identifier": "executer", "parameters": "(String command, Session session, List<String> params)", "modifiers": "private", "return": "Boolean", "signature": "Boolean executer(String command, Session session, List<String> params)", "full_signature": "private Boolean executer(String command, Session session, List<String> params)", "class_method_signature": "SystemRaiderImpl.executer(String command, Session session, List<String> params)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/core/impl/SystemRaiderImpl.java"}, "focal_method": {"identifier": "executeScript", "parameters": "(String ip, String path, String... params)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String executeScript(String ip, String path, String... params) {\n        String response;\n        SessionFactory sessionFactory;\n        try {\n            sessionFactory = createSessionFactory(ip);\n            scpScript(sessionFactory, path);\n            response = executer(ip, params);\n\n        } catch (JSchException e) {\n            return \"unable to connect to \" + ip;\n        } catch (IOException e) {\n            return \"unable to copy file to the host, error: \" + e;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n        return response;\n\n    }", "signature": "String executeScript(String ip, String path, String... params)", "full_signature": "@Override public String executeScript(String ip, String path, String... params)", "class_method_signature": "SystemRaiderImpl.executeScript(String ip, String path, String... params)", "testcase": false, "constructor": false, "invocations": ["createSessionFactory", "scpScript", "executer", "printStackTrace"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}