{"test_class": {"identifier": "ReaderFactoryTest", "superclass": "extends AbstractReaderFactoryTest", "interfaces": "", "fields": [{"original_string": "private ReaderFactory factory = new ReaderFactory();", "modifier": "private", "type": "ReaderFactory", "declarator": "factory = new ReaderFactory()", "var_name": "factory"}], "file": "storage/io/src/test/java/org/openscience/cdk/io/ReaderFactoryTest.java"}, "test_case": {"identifier": "testSmiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSmiles() throws Exception {\n        InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"data/smiles/drugs.smi\");\n        Object reader = factory.createReader(is);\n        Assert.assertNull(reader);\n    }", "signature": "void testSmiles()", "full_signature": "@Test public void testSmiles()", "class_method_signature": "ReaderFactoryTest.testSmiles()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "createReader", "assertNull"]}, "focal_class": {"identifier": "ReaderFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger        = LoggingToolFactory.createLoggingTool(ReaderFactory.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory.createLoggingTool(ReaderFactory.class)", "var_name": "logger"}, {"original_string": "private FormatFactory       formatFactory = null;", "modifier": "private", "type": "FormatFactory", "declarator": "formatFactory = null", "var_name": "formatFactory"}, {"original_string": "private int                 headerLength  = 8192;", "modifier": "private", "type": "int", "declarator": "headerLength  = 8192", "var_name": "headerLength"}], "methods": [{"identifier": "ReaderFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReaderFactory()", "full_signature": "public  ReaderFactory()", "class_method_signature": "ReaderFactory.ReaderFactory()", "testcase": false, "constructor": true}, {"identifier": "ReaderFactory", "parameters": "(int headerLength)", "modifiers": "public", "return": "", "signature": " ReaderFactory(int headerLength)", "full_signature": "public  ReaderFactory(int headerLength)", "class_method_signature": "ReaderFactory.ReaderFactory(int headerLength)", "testcase": false, "constructor": true}, {"identifier": "registerFormat", "parameters": "(IChemFormatMatcher format)", "modifiers": "public", "return": "void", "signature": "void registerFormat(IChemFormatMatcher format)", "full_signature": "public void registerFormat(IChemFormatMatcher format)", "class_method_signature": "ReaderFactory.registerFormat(IChemFormatMatcher format)", "testcase": false, "constructor": false}, {"identifier": "getFormats", "parameters": "()", "modifiers": "public", "return": "List<IChemFormatMatcher>", "signature": "List<IChemFormatMatcher> getFormats()", "full_signature": "public List<IChemFormatMatcher> getFormats()", "class_method_signature": "ReaderFactory.getFormats()", "testcase": false, "constructor": false}, {"identifier": "createReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "ISimpleChemObjectReader", "signature": "ISimpleChemObjectReader createReader(InputStream input)", "full_signature": "public ISimpleChemObjectReader createReader(InputStream input)", "class_method_signature": "ReaderFactory.createReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "createReader", "parameters": "(IChemFormat format)", "modifiers": "public", "return": "ISimpleChemObjectReader", "signature": "ISimpleChemObjectReader createReader(IChemFormat format)", "full_signature": "public ISimpleChemObjectReader createReader(IChemFormat format)", "class_method_signature": "ReaderFactory.createReader(IChemFormat format)", "testcase": false, "constructor": false}, {"identifier": "createReader", "parameters": "(Reader input)", "modifiers": "public", "return": "ISimpleChemObjectReader", "signature": "ISimpleChemObjectReader createReader(Reader input)", "full_signature": "public ISimpleChemObjectReader createReader(Reader input)", "class_method_signature": "ReaderFactory.createReader(Reader input)", "testcase": false, "constructor": false}], "file": "storage/io/src/main/java/org/openscience/cdk/io/ReaderFactory.java"}, "focal_method": {"identifier": "createReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "ISimpleChemObjectReader", "body": "public ISimpleChemObjectReader createReader(InputStream input) throws IOException {\n        IChemFormat format = null;\n        ISimpleChemObjectReader reader = null;\n        if (input instanceof GZIPInputStream) {\n            format = formatFactory.guessFormat(input);\n            reader = createReader(format);\n            if (reader != null) {\n                try {\n                    reader.setReader(input);\n                } catch (CDKException e1) {\n                    IOException wrapper = new IOException(\"Exception while setting the InputStream: \" + e1.getMessage());\n                    wrapper.initCause(e1);\n                    throw wrapper;\n                }\n            }\n        } else {\n            BufferedInputStream bistream = new BufferedInputStream(input, headerLength);\n            InputStream istreamToRead = bistream; // if gzip test fails, then take default\n            bistream.mark(5);\n            int countRead = 0;\n            byte[] abMagic = new byte[4];\n            countRead = bistream.read(abMagic, 0, 4);\n            bistream.reset();\n            if (countRead == 4) {\n                if (abMagic[0] == (byte) 0x1F && abMagic[1] == (byte) 0x8B) {\n                    istreamToRead = new BufferedInputStream(new GZIPInputStream(bistream));\n                }\n            }\n            format = formatFactory.guessFormat(istreamToRead);\n            reader = createReader(format);\n            if (reader != null) {\n                try {\n                    reader.setReader(istreamToRead);\n                } catch (CDKException e1) {\n                    IOException wrapper = new IOException(\"Exception while setting the InputStream: \" + e1.getMessage());\n                    wrapper.initCause(e1);\n                    throw wrapper;\n                }\n            }\n        }\n        return reader;\n    }", "signature": "ISimpleChemObjectReader createReader(InputStream input)", "full_signature": "public ISimpleChemObjectReader createReader(InputStream input)", "class_method_signature": "ReaderFactory.createReader(InputStream input)", "testcase": false, "constructor": false, "invocations": ["guessFormat", "createReader", "setReader", "getMessage", "initCause", "mark", "read", "reset", "guessFormat", "createReader", "setReader", "getMessage", "initCause"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}