{"test_class": {"identifier": "TaskMigrationDeschedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final TestClock clock = (TestClock) titusRuntime.getClock();", "modifier": "private final", "type": "TestClock", "declarator": "clock = (TestClock) titusRuntime.getClock()", "var_name": "clock"}, {"original_string": "private final MutableDataGenerator<AgentInstanceGroup> flexInstanceGroupGenerator = new MutableDataGenerator<>(agentServerGroups(Tier.Flex, 10));", "modifier": "private final", "type": "MutableDataGenerator<AgentInstanceGroup>", "declarator": "flexInstanceGroupGenerator = new MutableDataGenerator<>(agentServerGroups(Tier.Flex, 10))", "var_name": "flexInstanceGroupGenerator"}, {"original_string": "private final MutableDataGenerator<Job<ServiceJobExt>> jobGenerator = new MutableDataGenerator<>(\n            JobGenerator.serviceJobs(oneTaskServiceJobDescriptor().but(\n                    ofServiceSize(4),\n                    withDisruptionBudget(budget(selfManagedPolicy(30_000), unlimitedRate(), Collections.emptyList()))\n            ))\n    );", "modifier": "private final", "type": "MutableDataGenerator<Job<ServiceJobExt>>", "declarator": "jobGenerator = new MutableDataGenerator<>(\n            JobGenerator.serviceJobs(oneTaskServiceJobDescriptor().but(\n                    ofServiceSize(4),\n                    withDisruptionBudget(budget(selfManagedPolicy(30_000), unlimitedRate(), Collections.emptyList()))\n            ))\n    )", "var_name": "jobGenerator"}, {"original_string": "private final RelocationConnectorStubs dataGenerator = new RelocationConnectorStubs()\n            .addInstanceGroup(flexInstanceGroupGenerator.getValue().but(withId(\"active1\"), inState(InstanceGroupLifecycleState.Active)))\n            .addInstanceGroup(flexInstanceGroupGenerator.getValue().but(withId(\"removable1\"), inState(InstanceGroupLifecycleState.Removable)))\n            .addJob(jobGenerator.getValue().but(withJobId(\"job1\")))\n            .addJob(jobGenerator.getValue().but(withJobId(\"job2\")))\n            .addJob(jobGenerator.getValue().but(withJobId(\"jobToMigrate\")));", "modifier": "private final", "type": "RelocationConnectorStubs", "declarator": "dataGenerator = new RelocationConnectorStubs()\n            .addInstanceGroup(flexInstanceGroupGenerator.getValue().but(withId(\"active1\"), inState(InstanceGroupLifecycleState.Active)))\n            .addInstanceGroup(flexInstanceGroupGenerator.getValue().but(withId(\"removable1\"), inState(InstanceGroupLifecycleState.Removable)))\n            .addJob(jobGenerator.getValue().but(withJobId(\"job1\")))\n            .addJob(jobGenerator.getValue().but(withJobId(\"job2\")))\n            .addJob(jobGenerator.getValue().but(withJobId(\"jobToMigrate\")))", "var_name": "dataGenerator"}, {"original_string": "private final ReadOnlyJobOperations jobOperations = dataGenerator.getJobOperations();", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations = dataGenerator.getJobOperations()", "var_name": "jobOperations"}, {"original_string": "private final NodeDataResolver nodeDataResolver = dataGenerator.getNodeDataResolver();", "modifier": "private final", "type": "NodeDataResolver", "declarator": "nodeDataResolver = dataGenerator.getNodeDataResolver()", "var_name": "nodeDataResolver"}], "file": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/descheduler/TaskMigrationDeschedulerTest.java"}, "test_case": {"identifier": "testFailures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFailures() {\n        Task job1Task0 = jobOperations.getTasks(\"job1\").get(0);\n\n        dataGenerator.place(\"removable1\", job1Task0);\n        dataGenerator.setQuota(\"job1\", 0);\n\n        DeschedulingFailure failure = newDescheduler(Collections.emptyMap()).getDeschedulingFailure(job1Task0);\n        assertThat(failure.getReasonMessage()).contains(\"job quota\");\n    }", "signature": "void testFailures()", "full_signature": "@Test public void testFailures()", "class_method_signature": "TaskMigrationDeschedulerTest.testFailures()", "testcase": true, "constructor": false, "invocations": ["get", "getTasks", "place", "setQuota", "getDeschedulingFailure", "newDescheduler", "emptyMap", "contains", "assertThat", "getReasonMessage"]}, "focal_class": {"identifier": "TaskMigrationDescheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double FITNESS_NONE = 0.0;", "modifier": "private static final", "type": "double", "declarator": "FITNESS_NONE = 0.0", "var_name": "FITNESS_NONE"}, {"original_string": "private static final double FITNESS_PERFECT = 1.0;", "modifier": "private static final", "type": "double", "declarator": "FITNESS_PERFECT = 1.0", "var_name": "FITNESS_PERFECT"}, {"original_string": "private static final Pair<Double, List<Task>> FITNESS_RESULT_NONE = Pair.of(FITNESS_NONE, Collections.emptyList());", "modifier": "private static final", "type": "Pair<Double, List<Task>>", "declarator": "FITNESS_RESULT_NONE = Pair.of(FITNESS_NONE, Collections.emptyList())", "var_name": "FITNESS_RESULT_NONE"}, {"original_string": "private static final int MAX_EXPECTED_AGENT_CPUS = 64;", "modifier": "private static final", "type": "int", "declarator": "MAX_EXPECTED_AGENT_CPUS = 64", "var_name": "MAX_EXPECTED_AGENT_CPUS"}, {"original_string": "private static final double TASK_ON_AGENT_PENALTY = 1.0 / MAX_EXPECTED_AGENT_CPUS;", "modifier": "private static final", "type": "double", "declarator": "TASK_ON_AGENT_PENALTY = 1.0 / MAX_EXPECTED_AGENT_CPUS", "var_name": "TASK_ON_AGENT_PENALTY"}, {"original_string": "private final Map<String, TaskRelocationPlan> plannedAheadTaskRelocationPlans;", "modifier": "private final", "type": "Map<String, TaskRelocationPlan>", "declarator": "plannedAheadTaskRelocationPlans", "var_name": "plannedAheadTaskRelocationPlans"}, {"original_string": "private final EvacuatedAgentsAllocationTracker evacuatedAgentsAllocationTracker;", "modifier": "private final", "type": "EvacuatedAgentsAllocationTracker", "declarator": "evacuatedAgentsAllocationTracker", "var_name": "evacuatedAgentsAllocationTracker"}, {"original_string": "private final EvictionQuotaTracker evictionQuotaTracker;", "modifier": "private final", "type": "EvictionQuotaTracker", "declarator": "evictionQuotaTracker", "var_name": "evictionQuotaTracker"}, {"original_string": "private final Map<String, Job<?>> jobsById;", "modifier": "private final", "type": "Map<String, Job<?>>", "declarator": "jobsById", "var_name": "jobsById"}, {"original_string": "private final Map<String, Task> tasksById;", "modifier": "private final", "type": "Map<String, Task>", "declarator": "tasksById", "var_name": "tasksById"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "TaskMigrationDescheduler", "parameters": "(Map<String, TaskRelocationPlan> plannedAheadTaskRelocationPlans,\n                             EvacuatedAgentsAllocationTracker evacuatedAgentsAllocationTracker,\n                             EvictionQuotaTracker evictionQuotaTracker,\n                             Map<String, Job<?>> jobsById,\n                             Map<String, Task> tasksById,\n                             TitusRuntime titusRuntime)", "modifiers": "", "return": "", "signature": " TaskMigrationDescheduler(Map<String, TaskRelocationPlan> plannedAheadTaskRelocationPlans,\n                             EvacuatedAgentsAllocationTracker evacuatedAgentsAllocationTracker,\n                             EvictionQuotaTracker evictionQuotaTracker,\n                             Map<String, Job<?>> jobsById,\n                             Map<String, Task> tasksById,\n                             TitusRuntime titusRuntime)", "full_signature": "  TaskMigrationDescheduler(Map<String, TaskRelocationPlan> plannedAheadTaskRelocationPlans,\n                             EvacuatedAgentsAllocationTracker evacuatedAgentsAllocationTracker,\n                             EvictionQuotaTracker evictionQuotaTracker,\n                             Map<String, Job<?>> jobsById,\n                             Map<String, Task> tasksById,\n                             TitusRuntime titusRuntime)", "class_method_signature": "TaskMigrationDescheduler.TaskMigrationDescheduler(Map<String, TaskRelocationPlan> plannedAheadTaskRelocationPlans,\n                             EvacuatedAgentsAllocationTracker evacuatedAgentsAllocationTracker,\n                             EvictionQuotaTracker evictionQuotaTracker,\n                             Map<String, Job<?>> jobsById,\n                             Map<String, Task> tasksById,\n                             TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "findAllImmediateEvictions", "parameters": "()", "modifiers": "", "return": "Map<String, DeschedulingResult>", "signature": "Map<String, DeschedulingResult> findAllImmediateEvictions()", "full_signature": " Map<String, DeschedulingResult> findAllImmediateEvictions()", "class_method_signature": "TaskMigrationDescheduler.findAllImmediateEvictions()", "testcase": false, "constructor": false}, {"identifier": "findRequestedJobOrTaskMigrations", "parameters": "()", "modifiers": "", "return": "Map<String, DeschedulingResult>", "signature": "Map<String, DeschedulingResult> findRequestedJobOrTaskMigrations()", "full_signature": " Map<String, DeschedulingResult> findRequestedJobOrTaskMigrations()", "class_method_signature": "TaskMigrationDescheduler.findRequestedJobOrTaskMigrations()", "testcase": false, "constructor": false}, {"identifier": "nextBestMatch", "parameters": "()", "modifiers": "", "return": "Optional<Pair<Node, List<Task>>>", "signature": "Optional<Pair<Node, List<Task>>> nextBestMatch()", "full_signature": " Optional<Pair<Node, List<Task>>> nextBestMatch()", "class_method_signature": "TaskMigrationDescheduler.nextBestMatch()", "testcase": false, "constructor": false}, {"identifier": "getDeschedulingFailure", "parameters": "(Task task)", "modifiers": "", "return": "DeschedulingFailure", "signature": "DeschedulingFailure getDeschedulingFailure(Task task)", "full_signature": " DeschedulingFailure getDeschedulingFailure(Task task)", "class_method_signature": "TaskMigrationDescheduler.getDeschedulingFailure(Task task)", "testcase": false, "constructor": false}, {"identifier": "newDeschedulingResultForRequestedRelocation", "parameters": "(long now, Task task, Node instance, String reason)", "modifiers": "private", "return": "DeschedulingResult", "signature": "DeschedulingResult newDeschedulingResultForRequestedRelocation(long now, Task task, Node instance, String reason)", "full_signature": "private DeschedulingResult newDeschedulingResultForRequestedRelocation(long now, Task task, Node instance, String reason)", "class_method_signature": "TaskMigrationDescheduler.newDeschedulingResultForRequestedRelocation(long now, Task task, Node instance, String reason)", "testcase": false, "constructor": false}, {"identifier": "computeFitness", "parameters": "(Node agent)", "modifiers": "private", "return": "Pair<Double, List<Task>>", "signature": "Pair<Double, List<Task>> computeFitness(Node agent)", "full_signature": "private Pair<Double, List<Task>> computeFitness(Node agent)", "class_method_signature": "TaskMigrationDescheduler.computeFitness(Node agent)", "testcase": false, "constructor": false}, {"identifier": "canTerminate", "parameters": "(Task task)", "modifiers": "private", "return": "boolean", "signature": "boolean canTerminate(Task task)", "full_signature": "private boolean canTerminate(Task task)", "class_method_signature": "TaskMigrationDescheduler.canTerminate(Task task)", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/TaskMigrationDescheduler.java"}, "focal_method": {"identifier": "getDeschedulingFailure", "parameters": "(Task task)", "modifiers": "", "return": "DeschedulingFailure", "body": "DeschedulingFailure getDeschedulingFailure(Task task) {\n        Job<?> job = jobsById.get(task.getJobId());\n\n        String message;\n        if (job == null) {\n            message = \"No job record found\";\n        } else {\n            Node instance = evacuatedAgentsAllocationTracker.getAgent(task);\n            Optional<String> blockedOpt = instance != null\n                    ? RelocationPredicates.checkIfRelocationBlocked(job, task, instance)\n                    : Optional.empty();\n\n            if (blockedOpt.isPresent()) {\n                message = blockedOpt.get();\n            } else if (!canTerminate(task)) {\n                message = \"Migration deadline not reached yet\";\n            } else if (evictionQuotaTracker.getJobEvictionQuota(job.getId()) <= 0) {\n                message = \"Not enough job quota\";\n            } else {\n                message = \"Unknown\";\n            }\n        }\n\n        return DeschedulingFailure.newBuilder().withReasonMessage(message).build();\n    }", "signature": "DeschedulingFailure getDeschedulingFailure(Task task)", "full_signature": " DeschedulingFailure getDeschedulingFailure(Task task)", "class_method_signature": "TaskMigrationDescheduler.getDeschedulingFailure(Task task)", "testcase": false, "constructor": false, "invocations": ["get", "getJobId", "getAgent", "checkIfRelocationBlocked", "empty", "isPresent", "get", "canTerminate", "getJobEvictionQuota", "getId", "build", "withReasonMessage", "newBuilder"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}