{"test_class": {"identifier": "IdentityDisableBulkActionTest", "superclass": "extends AbstractBulkActionTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IdmIdentityService identityService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityService", "declarator": "identityService", "var_name": "identityService"}, {"original_string": "@Autowired\n\tprivate IdmNotificationLogService notificationLogService;", "modifier": "@Autowired\n\tprivate", "type": "IdmNotificationLogService", "declarator": "notificationLogService", "var_name": "notificationLogService"}, {"original_string": "private IdmIdentityDto loginIdentity;", "modifier": "private", "type": "IdmIdentityDto", "declarator": "loginIdentity", "var_name": "loginIdentity"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/bulk/action/impl/IdentityDisableBulkActionTest.java"}, "test_case": {"identifier": "checkNotification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkNotification() {\n\t\tList<IdmIdentityDto> identities = this.createIdentities(5);\n\t\t\n\t\tIdmBulkActionDto bulkAction = this.findBulkAction(IdmIdentity.class, IdentityDisableBulkAction.NAME);\n\t\tSet<UUID> ids = this.getIdFromList(identities);\n\t\tbulkAction.setIdentifiers(ids);\n\t\tIdmBulkActionDto processAction = bulkActionManager.processAction(bulkAction);\n\t\t\n\t\tcheckResultLrt(processAction, 5l, null, null);\n\t\t\n\t\tIdmNotificationFilter filter = new IdmNotificationFilter();\n\t\tfilter.setRecipient(loginIdentity.getUsername());\n\t\tfilter.setNotificationType(IdmEmailLog.class);\n\t\tList<IdmNotificationLogDto> notifications = notificationLogService.find(filter, null).getContent();\n\t\t\n\t\tassertEquals(1, notifications.size());\n\t\t\n\t\tIdmNotificationLogDto notificationLogDto = notifications.get(0);\n\t\tassertEquals(IdmEmailLog.NOTIFICATION_TYPE, notificationLogDto.getType());\n\t\tassertTrue(notificationLogDto.getMessage().getHtmlMessage().contains(bulkAction.getName()));\n\t}", "signature": "void checkNotification()", "full_signature": "@Test public void checkNotification()", "class_method_signature": "IdentityDisableBulkActionTest.checkNotification()", "testcase": true, "constructor": false, "invocations": ["createIdentities", "findBulkAction", "getIdFromList", "setIdentifiers", "processAction", "checkResultLrt", "setRecipient", "getUsername", "setNotificationType", "getContent", "find", "assertEquals", "size", "get", "assertEquals", "getType", "assertTrue", "contains", "getHtmlMessage", "getMessage", "getName"]}, "focal_class": {"identifier": "IdentityDisableBulkAction", "superclass": "extends AbstractBulkAction<IdmIdentityDto, IdmIdentityFilter>", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"identity-disable-bulk-action\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"identity-disable-bulk-action\"", "var_name": "NAME"}, {"original_string": "@Autowired\n\tprivate IdmIdentityService identityService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityService", "declarator": "identityService", "var_name": "identityService"}], "methods": [{"identifier": "processDto", "parameters": "(IdmIdentityDto dto)", "modifiers": "@Override protected", "return": "OperationResult", "signature": "OperationResult processDto(IdmIdentityDto dto)", "full_signature": "@Override protected OperationResult processDto(IdmIdentityDto dto)", "class_method_signature": "IdentityDisableBulkAction.processDto(IdmIdentityDto dto)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IdentityDisableBulkAction.getName()", "testcase": false, "constructor": false}, {"identifier": "getAuthoritiesForEntity", "parameters": "()", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getAuthoritiesForEntity()", "full_signature": "@Override protected List<String> getAuthoritiesForEntity()", "class_method_signature": "IdentityDisableBulkAction.getAuthoritiesForEntity()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "IdentityDisableBulkAction.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "()", "modifiers": "@Override public", "return": "NotificationLevel", "signature": "NotificationLevel getLevel()", "full_signature": "@Override public NotificationLevel getLevel()", "class_method_signature": "IdentityDisableBulkAction.getLevel()", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "()", "modifiers": "@Override public", "return": "ReadWriteDtoService<IdmIdentityDto, IdmIdentityFilter>", "signature": "ReadWriteDtoService<IdmIdentityDto, IdmIdentityFilter> getService()", "full_signature": "@Override public ReadWriteDtoService<IdmIdentityDto, IdmIdentityFilter> getService()", "class_method_signature": "IdentityDisableBulkAction.getService()", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/bulk/action/impl/IdentityDisableBulkAction.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getName() {\n\t\treturn NAME;\n\t}", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IdentityDisableBulkAction.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}