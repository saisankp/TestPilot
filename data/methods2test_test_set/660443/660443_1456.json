{"test_class": {"identifier": "GasteigerMarsiliPartialChargesTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/GasteigerMarsiliPartialChargesTest.java"}, "test_case": {"identifier": "testAssignGasteigerSigmaMarsiliFactors_IAtomContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssignGasteigerSigmaMarsiliFactors_IAtomContainer() throws Exception {\n        GasteigerMarsiliPartialCharges peoe = new GasteigerMarsiliPartialCharges();\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.getAtom(0).setCharge(0.0);\n        molecule.addAtom(new Atom(\"F\"));\n        molecule.getAtom(1).setCharge(0.0);\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n        for (IAtom atom : molecule.atoms())\n            atom.setCharge(0.0);\n\n        org.hamcrest.MatcherAssert.assertThat(peoe.assignGasteigerSigmaMarsiliFactors(molecule).length,\n                          is(not(0)));\n\n    }", "signature": "void testAssignGasteigerSigmaMarsiliFactors_IAtomContainer()", "full_signature": "@Test public void testAssignGasteigerSigmaMarsiliFactors_IAtomContainer()", "class_method_signature": "GasteigerMarsiliPartialChargesTest.testAssignGasteigerSigmaMarsiliFactors_IAtomContainer()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "setCharge", "getAtom", "addAtom", "setCharge", "getAtom", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "atoms", "setCharge", "assertThat", "assignGasteigerSigmaMarsiliFactors", "is", "not"]}, "focal_class": {"identifier": "GasteigerMarsiliPartialCharges", "superclass": "", "interfaces": "implements IChargeCalculator", "fields": [{"original_string": "private double DEOC_HYDROGEN = 20.02;", "modifier": "private", "type": "double", "declarator": "DEOC_HYDROGEN = 20.02", "var_name": "DEOC_HYDROGEN"}, {"original_string": "private double MX_DAMP       = 0.5;", "modifier": "private", "type": "double", "declarator": "MX_DAMP       = 0.5", "var_name": "MX_DAMP"}, {"original_string": "private double MX_ITERATIONS = 20;", "modifier": "private", "type": "double", "declarator": "MX_ITERATIONS = 20", "var_name": "MX_ITERATIONS"}, {"original_string": "private int    STEP_SIZE     = 5;", "modifier": "private", "type": "int", "declarator": "STEP_SIZE     = 5", "var_name": "STEP_SIZE"}], "methods": [{"identifier": "GasteigerMarsiliPartialCharges", "parameters": "()", "modifiers": "public", "return": "", "signature": " GasteigerMarsiliPartialCharges()", "full_signature": "public  GasteigerMarsiliPartialCharges()", "class_method_signature": "GasteigerMarsiliPartialCharges.GasteigerMarsiliPartialCharges()", "testcase": false, "constructor": true}, {"identifier": "setChiCatHydrogen", "parameters": "(double chiCat)", "modifiers": "public", "return": "void", "signature": "void setChiCatHydrogen(double chiCat)", "full_signature": "public void setChiCatHydrogen(double chiCat)", "class_method_signature": "GasteigerMarsiliPartialCharges.setChiCatHydrogen(double chiCat)", "testcase": false, "constructor": false}, {"identifier": "setMaxGasteigerDamp", "parameters": "(double damp)", "modifiers": "public", "return": "void", "signature": "void setMaxGasteigerDamp(double damp)", "full_signature": "public void setMaxGasteigerDamp(double damp)", "class_method_signature": "GasteigerMarsiliPartialCharges.setMaxGasteigerDamp(double damp)", "testcase": false, "constructor": false}, {"identifier": "setMaxGasteigerIters", "parameters": "(double iters)", "modifiers": "public", "return": "void", "signature": "void setMaxGasteigerIters(double iters)", "full_signature": "public void setMaxGasteigerIters(double iters)", "class_method_signature": "GasteigerMarsiliPartialCharges.setMaxGasteigerIters(double iters)", "testcase": false, "constructor": false}, {"identifier": "getChiCatHydrogen", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getChiCatHydrogen()", "full_signature": "public double getChiCatHydrogen()", "class_method_signature": "GasteigerMarsiliPartialCharges.getChiCatHydrogen()", "testcase": false, "constructor": false}, {"identifier": "getMaxGasteigerDamp", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxGasteigerDamp()", "full_signature": "public double getMaxGasteigerDamp()", "class_method_signature": "GasteigerMarsiliPartialCharges.getMaxGasteigerDamp()", "testcase": false, "constructor": false}, {"identifier": "getMaxGasteigerIters", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxGasteigerIters()", "full_signature": "public double getMaxGasteigerIters()", "class_method_signature": "GasteigerMarsiliPartialCharges.getMaxGasteigerIters()", "testcase": false, "constructor": false}, {"identifier": "assignGasteigerMarsiliSigmaPartialCharges", "parameters": "(IAtomContainer ac, boolean setCharge)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "full_signature": "public IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "testcase": false, "constructor": false}, {"identifier": "calculateCharges", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void calculateCharges(IAtomContainer container)", "full_signature": "@Override public void calculateCharges(IAtomContainer container)", "class_method_signature": "GasteigerMarsiliPartialCharges.calculateCharges(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getStepSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStepSize()", "full_signature": "public int getStepSize()", "class_method_signature": "GasteigerMarsiliPartialCharges.getStepSize()", "testcase": false, "constructor": false}, {"identifier": "setStepSize", "parameters": "(int step)", "modifiers": "public", "return": "void", "signature": "void setStepSize(int step)", "full_signature": "public void setStepSize(int step)", "class_method_signature": "GasteigerMarsiliPartialCharges.setStepSize(int step)", "testcase": false, "constructor": false}, {"identifier": "assignGasteigerSigmaMarsiliFactors", "parameters": "(IAtomContainer ac)", "modifiers": "public", "return": "double[]", "signature": "double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "full_signature": "public double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/GasteigerMarsiliPartialCharges.java"}, "focal_method": {"identifier": "assignGasteigerSigmaMarsiliFactors", "parameters": "(IAtomContainer ac)", "modifiers": "public", "return": "double[]", "body": "public double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac) throws CDKException {\n        //a,b,c,denom,chi,q\n        double[] gasteigerFactors = new double[(ac.getAtomCount() * (STEP_SIZE + 1))];\n        double[] factors = new double[]{0.0, 0.0, 0.0};\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            factors[0] = 0.0;\n            factors[1] = 0.0;\n            factors[2] = 0.0;\n            final IAtom       atom         = ac.getAtom(i);\n            final String      symbol       = atom.getSymbol();\n            final IBond.Order maxBondOrder = ac.getMaximumBondOrder(atom);\n            final Integer     charge       = atom.getFormalCharge();\n            switch (symbol) {\n                case \"H\":\n                    factors[0] = 7.17;\n                    factors[1] = 6.24;\n                    factors[2] = -0.56;\n                    break;\n                case \"C\":\n                    if (maxBondOrder == IBond.Order.DOUBLE ||\n                        (maxBondOrder == IBond.Order.SINGLE && (charge == -1 || charge == +1))) {\n                        factors[0] = 8.79;/* 8.79 *//* 8.81 */\n                        factors[1] = 9.32;/* 9.32 *//* 9.34 */\n                        factors[2] = 1.51;/* 1.51 *//* 1.52 */\n                    } else if (maxBondOrder == IBond.Order.SINGLE && charge == 0) {\n                        factors[0] = 7.98;\n                        factors[1] = 9.18;\n                        factors[2] = 1.88;\n                    } else if (maxBondOrder == IBond.Order.TRIPLE\n                               || maxBondOrder == IBond.Order.QUADRUPLE) {\n                        factors[0] = 10.39;/* 10.39 */\n                        factors[1] = 9.45;/* 9.45 */\n                        factors[2] = 0.73;\n                    }\n                    break;\n                case \"N\":\n                    if ((maxBondOrder == IBond.Order.SINGLE)\n                        && (charge != -1)) {\n                        factors[0] = 11.54;\n                        factors[1] = 10.82;\n                        factors[2] = 1.36;\n                    } else if ((maxBondOrder == IBond.Order.DOUBLE)\n                               || ((maxBondOrder == IBond.Order.SINGLE))) {\n                        factors[0] = 12.87;\n                        factors[1] = 11.15;\n                        factors[2] = 0.85;\n                    } else if (maxBondOrder == IBond.Order.TRIPLE\n                               || maxBondOrder == IBond.Order.QUADRUPLE) {\n                        factors[0] = 17.68;/* 15.68 */\n                        factors[1] = 12.70;/* 11.70 */\n                        factors[2] = -0.27;/*-0.27*/\n                    }\n                    break;\n                case \"O\":\n                    if ((maxBondOrder == IBond.Order.SINGLE)\n                        && (charge != -1)) {\n                        factors[0] = 14.18;\n                        factors[1] = 12.92;\n                        factors[2] = 1.39;\n                    } else if ((maxBondOrder == IBond.Order.DOUBLE)\n                               || ((maxBondOrder == IBond.Order.SINGLE))) {\n                        factors[0] = 17.07;/*\n                                            * paramaters aren'T correct\n                                            * parametrized.\n                                            */\n                        factors[1] = 13.79;\n                        factors[2] = 0.47;/* 0.47 */\n                    }\n                    break;\n                case \"Si\": // <--not correct\n                    factors[0] = 8.10;// <--not correct\n\n                    factors[1] = 7.92;// <--not correct\n\n                    factors[2] = 1.78;// <--not correct\n\n                    break;\n                case \"P\":\n                    factors[0] = 8.90;\n                    factors[1] = 8.32;\n                    factors[2] = 1.58;\n                    break;\n                case \"S\":\n/*\n                                                   * &&\n                                                   * ac.getMaximumBondOrder(ac.getAtomAt\n                                                   * (i)) == 1\n                                                   */\n\n                    factors[0] = 10.14;/* 10.14 */\n                    factors[1] = 9.13;/* 9.13 */\n                    factors[2] = 1.38;/* 1.38 */\n                    break;\n                case \"F\":\n                    factors[0] = 14.66;\n                    factors[1] = 13.85;\n                    factors[2] = 2.31;\n                    break;\n                case \"Cl\":\n                    factors[0] = 12.31;/* 11.0 *//* 12.31 */\n                    factors[1] = 10.84;/* 9.69 *//* 10.84 */\n                    factors[2] = 1.512;/* 1.35 *//* 1.512 */\n                    break;\n                case \"Br\":\n                    factors[0] = 11.44;/* 10.08 *//* 11.2 */\n                    factors[1] = 9.63;/* 8.47 *//* 9.4 */\n                    factors[2] = 1.31;/* 1.16 *//* 1.29 */\n                    break;\n                case \"I\":\n                    factors[0] = 9.88;/* 9.90 */\n                    factors[1] = 7.95;/* 7.96 */\n                    factors[2] = 0.945;/* 0.96 */\n                    break;\n                default:\n                    throw new CDKException(\"Partial charge not-supported for element: '\" + symbol + \"'.\");\n            }\n\n\n            gasteigerFactors[STEP_SIZE * i + i] = factors[0];\n            gasteigerFactors[STEP_SIZE * i + i + 1] = factors[1];\n            gasteigerFactors[STEP_SIZE * i + i + 2] = factors[2];\n            gasteigerFactors[STEP_SIZE * i + i + 5] = atom.getCharge();\n            if (factors[0] == 0 && factors[1] == 0 && factors[2] == 0) {\n                gasteigerFactors[STEP_SIZE * i + i + 3] = 1;\n            } else {\n                gasteigerFactors[STEP_SIZE * i + i + 3] = factors[0] + factors[1] + factors[2];\n            }\n        }\n        return gasteigerFactors;\n    }", "signature": "double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "full_signature": "public double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getAtomCount", "getAtom", "getSymbol", "getMaximumBondOrder", "getFormalCharge", "getCharge"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}