{"test_class": {"identifier": "DataQueryGroupsTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [{"original_string": "private DataElement deA;", "modifier": "private", "type": "DataElement", "declarator": "deA", "var_name": "deA"}, {"original_string": "private DataElement deB;", "modifier": "private", "type": "DataElement", "declarator": "deB", "var_name": "deB"}, {"original_string": "private DataElement deC;", "modifier": "private", "type": "DataElement", "declarator": "deC", "var_name": "deC"}, {"original_string": "private DataElement deD;", "modifier": "private", "type": "DataElement", "declarator": "deD", "var_name": "deD"}, {"original_string": "private DataElement deE;", "modifier": "private", "type": "DataElement", "declarator": "deE", "var_name": "deE"}, {"original_string": "private DataElement deF;", "modifier": "private", "type": "DataElement", "declarator": "deF", "var_name": "deF"}, {"original_string": "private DataElement deG;", "modifier": "private", "type": "DataElement", "declarator": "deG", "var_name": "deG"}, {"original_string": "private OrganisationUnit ouA;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouA", "var_name": "ouA"}, {"original_string": "private OrganisationUnit ouB;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouB", "var_name": "ouB"}, {"original_string": "private OrganisationUnit ouC;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouC", "var_name": "ouC"}, {"original_string": "private OrganisationUnit ouD;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouD", "var_name": "ouD"}, {"original_string": "private OrganisationUnit ouE;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouE", "var_name": "ouE"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/DataQueryGroupsTest.java"}, "test_case": {"identifier": "getQueryA", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getQueryA()\n    {\n        DimensionalObject dimA = new BaseDimensionalObject( DimensionalObject.DATA_X_DIM_ID, DimensionType.DATA_X, getList( deA, deB ) );\n        DimensionalObject dimB = new BaseDimensionalObject( DimensionalObject.ORGUNIT_DIM_ID, DimensionType.ORGANISATION_UNIT, getList( ouA, ouB, ouC ) );\n        DimensionalObject dimC = new BaseDimensionalObject( DimensionalObject.PERIOD_DIM_ID, DimensionType.PERIOD, getList( createPeriod( \"2000Q1\" ) ) );\n        \n        DataQueryParams paramsA = DataQueryParams.newBuilder()\n            .addDimension( dimA )\n            .addDimension( dimB )\n            .addFilter( dimC ).build();\n        \n        assertNotNull( paramsA.getDimension( DimensionalObject.DATA_X_DIM_ID ) );\n        assertNotNull( paramsA.getDimension( DimensionalObject.ORGUNIT_DIM_ID ) );\n        assertNotNull( paramsA.getFilter( DimensionalObject.PERIOD_DIM_ID ) );\n        \n        assertEquals( 2, paramsA.getDimension( DimensionalObject.DATA_X_DIM_ID ).getItems().size() );\n        assertEquals( 3, paramsA.getDimension( DimensionalObject.ORGUNIT_DIM_ID ).getItems().size() );\n        assertEquals( 1, paramsA.getFilter( DimensionalObject.PERIOD_DIM_ID ).getItems().size() );\n    }", "signature": "void getQueryA()", "full_signature": "@Test public void getQueryA()", "class_method_signature": "DataQueryGroupsTest.getQueryA()", "testcase": true, "constructor": false, "invocations": ["getList", "getList", "getList", "createPeriod", "build", "addFilter", "addDimension", "addDimension", "newBuilder", "assertNotNull", "getDimension", "assertNotNull", "getDimension", "assertNotNull", "getFilter", "assertEquals", "size", "getItems", "getDimension", "assertEquals", "size", "getItems", "getDimension", "assertEquals", "size", "getItems", "getFilter"]}, "focal_class": {"identifier": "DataQueryGroups", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<DataQueryParams> queries = new ArrayList<>();", "modifier": "private", "type": "List<DataQueryParams>", "declarator": "queries = new ArrayList<>()", "var_name": "queries"}, {"original_string": "private List<List<DataQueryParams>> sequentialQueries = new ArrayList<>();", "modifier": "private", "type": "List<List<DataQueryParams>>", "declarator": "sequentialQueries = new ArrayList<>()", "var_name": "sequentialQueries"}], "methods": [{"identifier": "DataQueryGroups", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataQueryGroups()", "full_signature": "private  DataQueryGroups()", "class_method_signature": "DataQueryGroups.DataQueryGroups()", "testcase": false, "constructor": true}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "DataQueryGroups.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "getAllQueries", "parameters": "()", "modifiers": "public", "return": "List<DataQueryParams>", "signature": "List<DataQueryParams> getAllQueries()", "full_signature": "public List<DataQueryParams> getAllQueries()", "class_method_signature": "DataQueryGroups.getAllQueries()", "testcase": false, "constructor": false}, {"identifier": "getSequentialQueries", "parameters": "()", "modifiers": "public", "return": "List<List<DataQueryParams>>", "signature": "List<List<DataQueryParams>> getSequentialQueries()", "full_signature": "public List<List<DataQueryParams>> getSequentialQueries()", "class_method_signature": "DataQueryGroups.getSequentialQueries()", "testcase": false, "constructor": false}, {"identifier": "isOptimal", "parameters": "( int optimalQueries )", "modifiers": "public", "return": "boolean", "signature": "boolean isOptimal( int optimalQueries )", "full_signature": "public boolean isOptimal( int optimalQueries )", "class_method_signature": "DataQueryGroups.isOptimal( int optimalQueries )", "testcase": false, "constructor": false}, {"identifier": "getLargestGroupSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLargestGroupSize()", "full_signature": "public int getLargestGroupSize()", "class_method_signature": "DataQueryGroups.getLargestGroupSize()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataQueryGroups.toString()", "testcase": false, "constructor": false}, {"identifier": "getListMap", "parameters": "( List<DataQueryParams> queries )", "modifiers": "private static", "return": "ListMap<String, DataQueryParams>", "signature": "ListMap<String, DataQueryParams> getListMap( List<DataQueryParams> queries )", "full_signature": "private static ListMap<String, DataQueryParams> getListMap( List<DataQueryParams> queries )", "class_method_signature": "DataQueryGroups.getListMap( List<DataQueryParams> queries )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/DataQueryGroups.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder()\n    {\n        return new Builder();\n    }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "DataQueryGroups.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}