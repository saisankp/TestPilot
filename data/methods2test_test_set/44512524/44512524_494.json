{"test_class": {"identifier": "TestStreamSummary", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NUM_ITERATIONS = 100000;", "modifier": "private static final", "type": "int", "declarator": "NUM_ITERATIONS = 100000", "var_name": "NUM_ITERATIONS"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/frequency/topk/TestStreamSummary.java"}, "test_case": {"identifier": "testTopK", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTopK()\n    {\n        StreamSummary<String> vs = new StreamSummary<String>(3);\n        String[] stream = {\"X\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"X\", \"X\", \"A\", \"C\", \"A\", \"A\"};\n        for (String i : stream)\n        {\n            vs.add(i);\n        }\n        List<Counter<String>> topK = vs.topK(3);\n        for (Counter<String> c : topK)\n        {\n            assertTrue(Arrays.asList(\"A\", \"C\", \"X\").contains(c.getItem()));\n        }\n    }", "signature": "void testTopK()", "full_signature": "@Test public void testTopK()", "class_method_signature": "TestStreamSummary.testTopK()", "testcase": true, "constructor": false, "invocations": ["add", "topK", "assertTrue", "contains", "asList", "getItem"]}, "focal_class": {"identifier": "StreamSummary", "superclass": "", "interfaces": "implements ITopK<T>", "fields": [{"original_string": "protected int capacity;", "modifier": "protected", "type": "int", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "private HashMap<T, ListNode2<Counter<T>>> counterMap;", "modifier": "private", "type": "HashMap<T, ListNode2<Counter<T>>>", "declarator": "counterMap", "var_name": "counterMap"}, {"original_string": "protected DoublyLinkedList<Bucket> bucketList;", "modifier": "protected", "type": "DoublyLinkedList<Bucket>", "declarator": "bucketList", "var_name": "bucketList"}], "methods": [{"identifier": "StreamSummary", "parameters": "()", "modifiers": "public", "return": "", "signature": " StreamSummary()", "full_signature": "public  StreamSummary()", "class_method_signature": "StreamSummary.StreamSummary()", "testcase": false, "constructor": true}, {"identifier": "StreamSummary", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " StreamSummary(int capacity)", "full_signature": "public  StreamSummary(int capacity)", "class_method_signature": "StreamSummary.StreamSummary(int capacity)", "testcase": false, "constructor": true}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "StreamSummary.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(T item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(T item)", "full_signature": "@Override public boolean add(T item)", "class_method_signature": "StreamSummary.add(T item)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(T element, long incrementCount)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(T element, long incrementCount)", "full_signature": "@Override public boolean add(T element, long incrementCount)", "class_method_signature": "StreamSummary.add(T element, long incrementCount)", "testcase": false, "constructor": false}, {"identifier": "offerReturnDropped", "parameters": "(T item, int incrementCount)", "modifiers": "public", "return": "T", "signature": "T offerReturnDropped(T item, int incrementCount)", "full_signature": "public T offerReturnDropped(T item, int incrementCount)", "class_method_signature": "StreamSummary.offerReturnDropped(T item, int incrementCount)", "testcase": false, "constructor": false}, {"identifier": "offerReturnAll", "parameters": "(T item, long incrementCount)", "modifiers": "public", "return": "Pair<Boolean, T>", "signature": "Pair<Boolean, T> offerReturnAll(T item, long incrementCount)", "full_signature": "public Pair<Boolean, T> offerReturnAll(T item, long incrementCount)", "class_method_signature": "StreamSummary.offerReturnAll(T item, long incrementCount)", "testcase": false, "constructor": false}, {"identifier": "incrementCounter", "parameters": "(ListNode2<Counter<T>> counterNode, long incrementCount)", "modifiers": "protected", "return": "void", "signature": "void incrementCounter(ListNode2<Counter<T>> counterNode, long incrementCount)", "full_signature": "protected void incrementCounter(ListNode2<Counter<T>> counterNode, long incrementCount)", "class_method_signature": "StreamSummary.incrementCounter(ListNode2<Counter<T>> counterNode, long incrementCount)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "(int k)", "modifiers": "@Override public", "return": "List<CountEntry<T>>", "signature": "List<CountEntry<T>> peek(int k)", "full_signature": "@Override public List<CountEntry<T>> peek(int k)", "class_method_signature": "StreamSummary.peek(int k)", "testcase": false, "constructor": false}, {"identifier": "topK", "parameters": "(int k)", "modifiers": "public", "return": "List<Counter<T>>", "signature": "List<Counter<T>> topK(int k)", "full_signature": "public List<Counter<T>> topK(int k)", "class_method_signature": "StreamSummary.topK(int k)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "StreamSummary.size()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StreamSummary.toString()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/frequency/topk/StreamSummary.java"}, "focal_method": {"identifier": "topK", "parameters": "(int k)", "modifiers": "public", "return": "List<Counter<T>>", "body": "public List<Counter<T>> topK(int k) {\n        List<Counter<T>> topK = new ArrayList<Counter<T>>(k);\n\n        for (ListNode2<Bucket> bNode = bucketList.head(); bNode != null; bNode = bNode.getPrev()) {\n            Bucket b = bNode.getValue();\n            for (Counter<T> c : b.counterList) {\n                if (topK.size() == k) {\n                    return topK;\n                }\n                topK.add(c);\n            }\n        }\n\n        return topK;\n    }", "signature": "List<Counter<T>> topK(int k)", "full_signature": "public List<Counter<T>> topK(int k)", "class_method_signature": "StreamSummary.topK(int k)", "testcase": false, "constructor": false, "invocations": ["head", "getPrev", "getValue", "size", "add"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}