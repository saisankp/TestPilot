{"test_class": {"identifier": "ClusterEvaluationUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtilTest.java"}, "test_case": {"identifier": "calSilhouetteCoefficientTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calSilhouetteCoefficientTest(){\n        Row[] rows0 = new Row[] {\n            Row.of(0, \"0,0,0\"),\n            Row.of(0, \"0.1,0.1,0.1\"),\n            Row.of(0, \"0.2,0.2,0.2\")\n        };\n\n        Row[] rows1 = new Row[] {\n            Row.of(1, \"9 9 9\"),\n            Row.of(1, \"9.1 9.1 9.1\"),\n            Row.of(1, \"9.2 9.2 9.2\")\n        };\n\n        ClusterMetricsSummary clusterMetricsSummary1 = ClusterEvaluationUtil.getClusterStatistics(Arrays.asList(rows0),\n            new EuclideanDistance());\n\n        ClusterMetricsSummary clusterMetricsSummary2 = ClusterEvaluationUtil.getClusterStatistics(Arrays.asList(rows1),\n            new EuclideanDistance());\n\n        ClusterMetricsSummary clusterMetricsSummary = clusterMetricsSummary1.merge(clusterMetricsSummary2);\n\n        for(Row row : rows1){\n            Assert.assertEquals(0.99, ClusterEvaluationUtil.calSilhouetteCoefficient(row, clusterMetricsSummary).f0, 0.01);\n        }\n    }", "signature": "void calSilhouetteCoefficientTest()", "full_signature": "@Test public void calSilhouetteCoefficientTest()", "class_method_signature": "ClusterEvaluationUtilTest.calSilhouetteCoefficientTest()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "getClusterStatistics", "asList", "getClusterStatistics", "asList", "merge", "assertEquals", "calSilhouetteCoefficient"]}, "focal_class": {"identifier": "ClusterEvaluationUtil", "superclass": "", "interfaces": "implements AllWindowFunction<Row, Row, TimeWindow>", "fields": [{"original_string": "public static int COUNT = 0;", "modifier": "public static", "type": "int", "declarator": "COUNT = 0", "var_name": "COUNT"}, {"original_string": "public static int MEAN = 1;", "modifier": "public static", "type": "int", "declarator": "MEAN = 1", "var_name": "MEAN"}, {"original_string": "public static int SUM_2 = 2;", "modifier": "public static", "type": "int", "declarator": "SUM_2 = 2", "var_name": "SUM_2"}, {"original_string": "private ContinuousDistance distance;", "modifier": "private", "type": "ContinuousDistance", "declarator": "distance", "var_name": "distance"}], "methods": [{"identifier": "ClusterEvaluationUtil", "parameters": "(ContinuousDistance distance)", "modifiers": "public", "return": "", "signature": " ClusterEvaluationUtil(ContinuousDistance distance)", "full_signature": "public  ClusterEvaluationUtil(ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.ClusterEvaluationUtil(ContinuousDistance distance)", "testcase": false, "constructor": true}, {"identifier": "extractParamsFromConfusionMatrix", "parameters": "(LongMatrix longMatrix)", "modifiers": "public static", "return": "Params", "signature": "Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "full_signature": "public static Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "class_method_signature": "ClusterEvaluationUtil.extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "testcase": false, "constructor": false}, {"identifier": "combination", "parameters": "(long number)", "modifiers": "private static", "return": "long", "signature": "long combination(long number)", "full_signature": "private static long combination(long number)", "class_method_signature": "ClusterEvaluationUtil.combination(long number)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(long frequency, long total)", "modifiers": "private static", "return": "double", "signature": "double entropy(long frequency, long total)", "full_signature": "private static double entropy(long frequency, long total)", "class_method_signature": "ClusterEvaluationUtil.entropy(long frequency, long total)", "testcase": false, "constructor": false}, {"identifier": "calSilhouetteCoefficient", "parameters": "(Row row, ClusterMetricsSummary clusterMetricsSummary)", "modifiers": "public static", "return": "Tuple1<Double>", "signature": "Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "full_signature": "public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "class_method_signature": "ClusterEvaluationUtil.calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "testcase": false, "constructor": false}, {"identifier": "getBasicClusterStatistics", "parameters": "(Iterable<Row> rows)", "modifiers": "public static", "return": "Params", "signature": "Params getBasicClusterStatistics(Iterable<Row> rows)", "full_signature": "public static Params getBasicClusterStatistics(Iterable<Row> rows)", "class_method_signature": "ClusterEvaluationUtil.getBasicClusterStatistics(Iterable<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "getClusterStatistics", "parameters": "(Iterable<Row> rows, ContinuousDistance distance)", "modifiers": "public static", "return": "ClusterMetricsSummary", "signature": "ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "full_signature": "public static ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "modifiers": "@Override public", "return": "void", "signature": "void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "full_signature": "@Override public void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "class_method_signature": "ClusterEvaluationUtil.apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtil.java"}, "focal_method": {"identifier": "calSilhouetteCoefficient", "parameters": "(Row row, ClusterMetricsSummary clusterMetricsSummary)", "modifiers": "public static", "return": "Tuple1<Double>", "body": "public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary) {\n        if (!EvaluationUtil.checkRowFieldNotNull(row)) {\n            return Tuple1.of(0.);\n        }\n        String clusterId = row.getField(0).toString();\n        Vector vec = VectorUtil.getVector(row.getField(1));\n        double currentClusterDissimilarity = 0.0;\n        double neighboringClusterDissimilarity = Double.MAX_VALUE;\n        if (clusterMetricsSummary.distance instanceof EuclideanDistance) {\n            double normSquare = vec.normL2Square();\n            for (int i = 0; i < clusterMetricsSummary.k; i++) {\n                double dissimilarity = clusterMetricsSummary.clusterCnt.get(i) * normSquare\n                    - 2 * clusterMetricsSummary.clusterCnt.get(i) * MatVecOp.dot(vec, clusterMetricsSummary.meanVector.get(i)) + clusterMetricsSummary.vectorNormL2Sum.get(i);\n                if (clusterId.equals(clusterMetricsSummary.clusterId.get(i))) {\n                    if (clusterMetricsSummary.clusterCnt.get(i) > 1) {\n                        currentClusterDissimilarity = dissimilarity / (clusterMetricsSummary.clusterCnt.get(i) - 1);\n                    }\n                } else {\n                    neighboringClusterDissimilarity = Math.min(neighboringClusterDissimilarity,\n                        dissimilarity / clusterMetricsSummary.clusterCnt.get(i));\n                }\n            }\n        } else {\n            for (int i = 0; i < clusterMetricsSummary.k; i++) {\n                double dissimilarity = 1.0 - MatVecOp.dot(vec, clusterMetricsSummary.meanVector.get(i));\n                if (clusterId.equals(clusterMetricsSummary.clusterId.get(i))) {\n                    if (clusterMetricsSummary.clusterCnt.get(i) > 1) {\n                        currentClusterDissimilarity = dissimilarity * clusterMetricsSummary.clusterCnt.get(i) / (clusterMetricsSummary.clusterCnt.get(i) - 1);\n                    }\n                } else {\n                    neighboringClusterDissimilarity = Math.min(neighboringClusterDissimilarity,\n                        dissimilarity);\n                }\n            }\n        }\n        return Tuple1.of(currentClusterDissimilarity < neighboringClusterDissimilarity ?\n            1 - (currentClusterDissimilarity / neighboringClusterDissimilarity) :\n            (neighboringClusterDissimilarity / currentClusterDissimilarity) - 1);\n    }", "signature": "Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "full_signature": "public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "class_method_signature": "ClusterEvaluationUtil.calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "testcase": false, "constructor": false, "invocations": ["checkRowFieldNotNull", "of", "toString", "getField", "getVector", "getField", "normL2Square", "get", "get", "dot", "get", "get", "equals", "get", "get", "get", "min", "get", "dot", "get", "equals", "get", "get", "get", "get", "min", "of"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}