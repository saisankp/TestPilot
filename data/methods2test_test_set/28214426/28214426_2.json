{"test_class": {"identifier": "HistogramTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPS = 0.0000001d;", "modifier": "private static final", "type": "double", "declarator": "EPS = 0.0000001d", "var_name": "EPS"}], "file": "metrics/src/test/java/io/confluent/common/metrics/stats/HistogramTest.java"}, "test_case": {"identifier": "testHistogram", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHistogram() {\n    Histogram.BinScheme scheme = new Histogram.ConstantBinScheme(12, -5, 5);\n    Histogram hist = new Histogram(scheme);\n    for (int i = -5; i < 5; i++) {\n      hist.record(i);\n    }\n    for (int i = 0; i < 10; i++) {\n      assertEquals(scheme.fromBin(i + 1), hist.value(i / 10.0 + EPS), EPS);\n    }\n  }", "signature": "void testHistogram()", "full_signature": "@Test public void testHistogram()", "class_method_signature": "HistogramTest.testHistogram()", "testcase": true, "constructor": false, "invocations": ["record", "assertEquals", "fromBin", "value"]}, "focal_class": {"identifier": "Histogram", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BinScheme binScheme;", "modifier": "private final", "type": "BinScheme", "declarator": "binScheme", "var_name": "binScheme"}, {"original_string": "private final float[] hist;", "modifier": "private final", "type": "float[]", "declarator": "hist", "var_name": "hist"}, {"original_string": "private double count;", "modifier": "private", "type": "double", "declarator": "count", "var_name": "count"}], "methods": [{"identifier": "Histogram", "parameters": "(BinScheme binScheme)", "modifiers": "public", "return": "", "signature": " Histogram(BinScheme binScheme)", "full_signature": "public  Histogram(BinScheme binScheme)", "class_method_signature": "Histogram.Histogram(BinScheme binScheme)", "testcase": false, "constructor": true}, {"identifier": "record", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void record(double value)", "full_signature": "public void record(double value)", "class_method_signature": "Histogram.record(double value)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(double quantile)", "modifiers": "public", "return": "double", "signature": "double value(double quantile)", "full_signature": "public double value(double quantile)", "class_method_signature": "Histogram.value(double quantile)", "testcase": false, "constructor": false}, {"identifier": "counts", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] counts()", "full_signature": "public float[] counts()", "class_method_signature": "Histogram.counts()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Histogram.clear()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Histogram.toString()", "testcase": false, "constructor": false}], "file": "metrics/src/main/java/io/confluent/common/metrics/stats/Histogram.java"}, "focal_method": {"identifier": "Histogram", "parameters": "(BinScheme binScheme)", "modifiers": "public", "return": "", "body": "public Histogram(BinScheme binScheme) {\n    this.hist = new float[binScheme.bins()];\n    this.count = 0.0f;\n    this.binScheme = binScheme;\n  }", "signature": " Histogram(BinScheme binScheme)", "full_signature": "public  Histogram(BinScheme binScheme)", "class_method_signature": "Histogram.Histogram(BinScheme binScheme)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}