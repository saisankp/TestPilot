{"test_class": {"identifier": "ECQLTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/cql/src/test/java/org/geotools/filter/text/ecql/ECQLTest.java"}, "test_case": {"identifier": "temporalPredicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void temporalPredicate() throws Exception{\n\n        Filter filter = ECQL.toFilter(\"ATTR1 BEFORE 2006-12-31T01:30:00Z\");\n\n        Assert.assertTrue( filter instanceof PropertyIsLessThan);\n    }", "signature": "void temporalPredicate()", "full_signature": "@Test public void temporalPredicate()", "class_method_signature": "ECQLTest.temporalPredicate()", "testcase": true, "constructor": false, "invocations": ["toFilter", "assertTrue"]}, "focal_class": {"identifier": "ECQL", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ECQL", "parameters": "()", "modifiers": "private", "return": "", "signature": " ECQL()", "full_signature": "private  ECQL()", "class_method_signature": "ECQL.ECQL()", "testcase": false, "constructor": true}, {"identifier": "toFilter", "parameters": "(final String ecqlPredicate)", "modifiers": "public static", "return": "Filter", "signature": "Filter toFilter(final String ecqlPredicate)", "full_signature": "public static Filter toFilter(final String ecqlPredicate)", "class_method_signature": "ECQL.toFilter(final String ecqlPredicate)", "testcase": false, "constructor": false}, {"identifier": "toFilter", "parameters": "(final String ecqlPredicate, final FilterFactory filterFactory)", "modifiers": "public static", "return": "Filter", "signature": "Filter toFilter(final String ecqlPredicate, final FilterFactory filterFactory)", "full_signature": "public static Filter toFilter(final String ecqlPredicate, final FilterFactory filterFactory)", "class_method_signature": "ECQL.toFilter(final String ecqlPredicate, final FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "toExpression", "parameters": "(String ecqlExpression)", "modifiers": "public static", "return": "Expression", "signature": "Expression toExpression(String ecqlExpression)", "full_signature": "public static Expression toExpression(String ecqlExpression)", "class_method_signature": "ECQL.toExpression(String ecqlExpression)", "testcase": false, "constructor": false}, {"identifier": "toExpression", "parameters": "(final String ecqlExpression,\n            final FilterFactory filterFactory)", "modifiers": "public static", "return": "Expression", "signature": "Expression toExpression(final String ecqlExpression,\n            final FilterFactory filterFactory)", "full_signature": "public static Expression toExpression(final String ecqlExpression,\n            final FilterFactory filterFactory)", "class_method_signature": "ECQL.toExpression(final String ecqlExpression,\n            final FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "toFilterList", "parameters": "(final String ecqlSequencePredicate)", "modifiers": "public static", "return": "List<Filter>", "signature": "List<Filter> toFilterList(final String ecqlSequencePredicate)", "full_signature": "public static List<Filter> toFilterList(final String ecqlSequencePredicate)", "class_method_signature": "ECQL.toFilterList(final String ecqlSequencePredicate)", "testcase": false, "constructor": false}, {"identifier": "toFilterList", "parameters": "(final String ecqlSequencePredicate, FilterFactory filterFactory)", "modifiers": "public static", "return": "List<Filter>", "signature": "List<Filter> toFilterList(final String ecqlSequencePredicate, FilterFactory filterFactory)", "full_signature": "public static List<Filter> toFilterList(final String ecqlSequencePredicate, FilterFactory filterFactory)", "class_method_signature": "ECQL.toFilterList(final String ecqlSequencePredicate, FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( List<Filter> filterList )", "modifiers": "public static", "return": "String", "signature": "String toCQL( List<Filter> filterList )", "full_signature": "public static String toCQL( List<Filter> filterList )", "class_method_signature": "ECQL.toCQL( List<Filter> filterList )", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( Filter filter )", "modifiers": "public static", "return": "String", "signature": "String toCQL( Filter filter )", "full_signature": "public static String toCQL( Filter filter )", "class_method_signature": "ECQL.toCQL( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( Expression expression )", "modifiers": "public static", "return": "String", "signature": "String toCQL( Expression expression )", "full_signature": "public static String toCQL( Expression expression )", "class_method_signature": "ECQL.toCQL( Expression expression )", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static final", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static final void main(String[] args)", "class_method_signature": "ECQL.main(String[] args)", "testcase": false, "constructor": false}], "file": "modules/library/cql/src/main/java/org/geotools/filter/text/ecql/ECQL.java"}, "focal_method": {"identifier": "toFilter", "parameters": "(final String ecqlPredicate)", "modifiers": "public static", "return": "Filter", "body": "public static Filter toFilter(final String ecqlPredicate)\n        throws CQLException {\n        Filter filter = ECQL.toFilter(ecqlPredicate, null);\n\n        return filter;\n    }", "signature": "Filter toFilter(final String ecqlPredicate)", "full_signature": "public static Filter toFilter(final String ecqlPredicate)", "class_method_signature": "ECQL.toFilter(final String ecqlPredicate)", "testcase": false, "constructor": false, "invocations": ["toFilter"]}, "repository": {"repo_id": 4750321, "url": "https://github.com/HGitMaster/geotools-osgi", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 114107, "license": "licensed"}}