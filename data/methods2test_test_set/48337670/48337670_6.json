{"test_class": {"identifier": "ChannelTypeResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChannelTypeResource channelTypeResource;", "modifier": "private", "type": "ChannelTypeResource", "declarator": "channelTypeResource", "var_name": "channelTypeResource"}, {"original_string": "private @Mock ChannelTypeRegistry channelTypeRegistry;", "modifier": "private @Mock", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistry", "var_name": "channelTypeRegistry"}, {"original_string": "private @Mock ConfigDescriptionRegistry configDescriptionRegistry;", "modifier": "private @Mock", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistry", "var_name": "configDescriptionRegistry"}, {"original_string": "private @Mock LocaleServiceImpl localeService;", "modifier": "private @Mock", "type": "LocaleServiceImpl", "declarator": "localeService", "var_name": "localeService"}, {"original_string": "private @Mock ProfileTypeRegistry profileTypeRegistry;", "modifier": "private @Mock", "type": "ProfileTypeRegistry", "declarator": "profileTypeRegistry", "var_name": "profileTypeRegistry"}], "file": "bundles/org.openhab.core.io.rest.core/src/test/java/org/openhab/core/io/rest/core/internal/channel/ChannelTypeResourceTest.java"}, "test_case": {"identifier": "getAllShouldRetrieveAllChannelTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllShouldRetrieveAllChannelTypes() throws Exception {\n        when(localeService.getLocale(null)).thenReturn(Locale.ENGLISH);\n        channelTypeResource.getAll(null, null);\n        verify(channelTypeRegistry).getChannelTypes(Locale.ENGLISH);\n    }", "signature": "void getAllShouldRetrieveAllChannelTypes()", "full_signature": "@Test public void getAllShouldRetrieveAllChannelTypes()", "class_method_signature": "ChannelTypeResourceTest.getAllShouldRetrieveAllChannelTypes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getLocale", "getAll", "getChannelTypes", "verify"]}, "focal_class": {"identifier": "ChannelTypeResource", "superclass": "", "interfaces": "implements RESTResource", "fields": [{"original_string": "public static final String PATH_CHANNEL_TYPES = \"channel-types\";", "modifier": "public static final", "type": "String", "declarator": "PATH_CHANNEL_TYPES = \"channel-types\"", "var_name": "PATH_CHANNEL_TYPES"}, {"original_string": "private final ChannelTypeRegistry channelTypeRegistry;", "modifier": "private final", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistry", "var_name": "channelTypeRegistry"}, {"original_string": "private final ConfigDescriptionRegistry configDescriptionRegistry;", "modifier": "private final", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistry", "var_name": "configDescriptionRegistry"}, {"original_string": "private final LocaleService localeService;", "modifier": "private final", "type": "LocaleService", "declarator": "localeService", "var_name": "localeService"}, {"original_string": "private final ProfileTypeRegistry profileTypeRegistry;", "modifier": "private final", "type": "ProfileTypeRegistry", "declarator": "profileTypeRegistry", "var_name": "profileTypeRegistry"}], "methods": [{"identifier": "ChannelTypeResource", "parameters": "( //\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference LocaleService localeService, //\n            final @Reference ProfileTypeRegistry profileTypeRegistry)", "modifiers": "@Activate public", "return": "", "signature": " ChannelTypeResource( //\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference LocaleService localeService, //\n            final @Reference ProfileTypeRegistry profileTypeRegistry)", "full_signature": "@Activate public  ChannelTypeResource( //\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference LocaleService localeService, //\n            final @Reference ProfileTypeRegistry profileTypeRegistry)", "class_method_signature": "ChannelTypeResource.ChannelTypeResource( //\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference LocaleService localeService, //\n            final @Reference ProfileTypeRegistry profileTypeRegistry)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets all available channel types.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ChannelTypeDTO.class), uniqueItems = true))) }) public", "return": "Response", "signature": "Response getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets all available channel types.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ChannelTypeDTO.class), uniqueItems = true))) }) public Response getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "class_method_signature": "ChannelTypeResource.getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "testcase": false, "constructor": false}, {"identifier": "getByUID", "parameters": "(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language)", "modifiers": "@GET @Path(\"/{channelTypeUID}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets channel type by UID.\", responses = { @ApiResponse(responseCode = \"200\", description = \"Channel type with provided channelTypeUID does not exist.\", content = @Content(schema = @Schema(implementation = ChannelTypeDTO.class))), @ApiResponse(responseCode = \"404\", description = \"No content\") }) public", "return": "Response", "signature": "Response getByUID(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language)", "full_signature": "@GET @Path(\"/{channelTypeUID}\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets channel type by UID.\", responses = { @ApiResponse(responseCode = \"200\", description = \"Channel type with provided channelTypeUID does not exist.\", content = @Content(schema = @Schema(implementation = ChannelTypeDTO.class))), @ApiResponse(responseCode = \"404\", description = \"No content\") }) public Response getByUID(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language)", "class_method_signature": "ChannelTypeResource.getByUID(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID,\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language)", "testcase": false, "constructor": false}, {"identifier": "getLinkableItemTypes", "parameters": "(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID)", "modifiers": "@GET @Path(\"/{channelTypeUID}/linkableItemTypes\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets the item types the given trigger channel type UID can be linked to.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = String.class), uniqueItems = true))), @ApiResponse(responseCode = \"204\", description = \"No content: channel type has no linkable items or is no trigger channel.\"), @ApiResponse(responseCode = \"404\", description = \"Given channel type UID not found.\") }) public", "return": "Response", "signature": "Response getLinkableItemTypes(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID)", "full_signature": "@GET @Path(\"/{channelTypeUID}/linkableItemTypes\") @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets the item types the given trigger channel type UID can be linked to.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = String.class), uniqueItems = true))), @ApiResponse(responseCode = \"204\", description = \"No content: channel type has no linkable items or is no trigger channel.\"), @ApiResponse(responseCode = \"404\", description = \"Given channel type UID not found.\") }) public Response getLinkableItemTypes(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID)", "class_method_signature": "ChannelTypeResource.getLinkableItemTypes(\n            @PathParam(\"channelTypeUID\") @Parameter(description = \"channelTypeUID\") String channelTypeUID)", "testcase": false, "constructor": false}, {"identifier": "convertToChannelTypeDTO", "parameters": "(ChannelType channelType, Locale locale)", "modifiers": "private", "return": "ChannelTypeDTO", "signature": "ChannelTypeDTO convertToChannelTypeDTO(ChannelType channelType, Locale locale)", "full_signature": "private ChannelTypeDTO convertToChannelTypeDTO(ChannelType channelType, Locale locale)", "class_method_signature": "ChannelTypeResource.convertToChannelTypeDTO(ChannelType channelType, Locale locale)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/channel/ChannelTypeResource.java"}, "focal_method": {"identifier": "getAll", "parameters": "(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets all available channel types.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ChannelTypeDTO.class), uniqueItems = true))) }) public", "return": "Response", "body": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @Operation(summary = \"Gets all available channel types.\", responses = {\n            @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ChannelTypeDTO.class), uniqueItems = true))) })\n    public Response getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes) {\n        Locale locale = localeService.getLocale(language);\n\n        Stream<ChannelTypeDTO> channelStream = channelTypeRegistry.getChannelTypes(locale).stream()\n                .map(c -> convertToChannelTypeDTO(c, locale));\n\n        if (prefixes != null) {\n            Predicate<ChannelTypeDTO> filter = ct -> false;\n            for (String prefix : prefixes.split(\",\")) {\n                filter = filter.or(ct -> ct.UID.startsWith(prefix + \":\"));\n            }\n            channelStream = channelStream.filter(filter);\n        }\n\n        return Response.ok(new Stream2JSONInputStream(channelStream)).build();\n    }", "signature": "Response getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Operation(summary = \"Gets all available channel types.\", responses = { @ApiResponse(responseCode = \"200\", description = \"OK\", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ChannelTypeDTO.class), uniqueItems = true))) }) public Response getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "class_method_signature": "ChannelTypeResource.getAll(\n            @HeaderParam(HttpHeaders.ACCEPT_LANGUAGE) @Parameter(description = \"language\") @Nullable String language,\n            @QueryParam(\"prefixes\") @Parameter(description = \"filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')\") @Nullable String prefixes)", "testcase": false, "constructor": false, "invocations": ["getLocale", "map", "stream", "getChannelTypes", "convertToChannelTypeDTO", "split", "or", "startsWith", "filter", "build", "ok"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}