{"test_class": {"identifier": "TypeCollectorTest", "superclass": "extends NoOutputTestBase", "interfaces": "", "fields": [{"original_string": "private TestLogger logger;", "modifier": "private", "type": "TestLogger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private TypeCollector collector;", "modifier": "private", "type": "TypeCollector", "declarator": "collector", "var_name": "collector"}], "file": "subprojects/griffon-core-compile/src/test/java/org/codehaus/griffon/compile/core/processor/type/TypeCollectorTest.java"}, "test_case": {"identifier": "testRemoveProviderWhenEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveProviderWhenEmpty() {\n        collector.removeProvider(\"provider1\");\n        assertEquals(1, logger.records().size());\n        assertEquals(\"Removing provider1\\n\", logger.getFileContent());\n    }", "signature": "void testRemoveProviderWhenEmpty()", "full_signature": "@Test public void testRemoveProviderWhenEmpty()", "class_method_signature": "TypeCollectorTest.testRemoveProviderWhenEmpty()", "testcase": true, "constructor": false, "invocations": ["removeProvider", "assertEquals", "size", "records", "assertEquals", "getFileContent"]}, "focal_class": {"identifier": "TypeCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, Type> types = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, Type>", "declarator": "types = new LinkedHashMap<>()", "var_name": "types"}, {"original_string": "private final Map<String, Type> cached = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, Type>", "declarator": "cached = new LinkedHashMap<>()", "var_name": "cached"}, {"original_string": "private final List<String> removed = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "removed = new ArrayList<>()", "var_name": "removed"}, {"original_string": "private final Initializer initializer;", "modifier": "private final", "type": "Initializer", "declarator": "initializer", "var_name": "initializer"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "TypeCollector", "parameters": "(Initializer initializer, Logger logger)", "modifiers": "public", "return": "", "signature": " TypeCollector(Initializer initializer, Logger logger)", "full_signature": "public  TypeCollector(Initializer initializer, Logger logger)", "class_method_signature": "TypeCollector.TypeCollector(Initializer initializer, Logger logger)", "testcase": false, "constructor": true}, {"identifier": "cache", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cache()", "full_signature": "public void cache()", "class_method_signature": "TypeCollector.cache()", "testcase": false, "constructor": false}, {"identifier": "isModified", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isModified()", "full_signature": "public boolean isModified()", "class_method_signature": "TypeCollector.isModified()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(String type)", "modifiers": "public", "return": "Type", "signature": "Type getType(String type)", "full_signature": "public Type getType(String type)", "class_method_signature": "TypeCollector.getType(String type)", "testcase": false, "constructor": false}, {"identifier": "types", "parameters": "()", "modifiers": "public", "return": "Collection<Type>", "signature": "Collection<Type> types()", "full_signature": "public Collection<Type> types()", "class_method_signature": "TypeCollector.types()", "testcase": false, "constructor": false}, {"identifier": "removeProvider", "parameters": "(String provider)", "modifiers": "public", "return": "void", "signature": "void removeProvider(String provider)", "full_signature": "public void removeProvider(String provider)", "class_method_signature": "TypeCollector.removeProvider(String provider)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TypeCollector.toString()", "testcase": false, "constructor": false}], "file": "subprojects/griffon-core-compile/src/main/java/org/codehaus/griffon/compile/core/processor/type/TypeCollector.java"}, "focal_method": {"identifier": "removeProvider", "parameters": "(String provider)", "modifiers": "public", "return": "void", "body": "public void removeProvider(String provider) {\n        if (provider == null) {\n            throw new NullPointerException(\"provider\");\n        }\n        logger.note(LogLocation.LOG_FILE, \"Removing \" + provider);\n        removed.add(provider);\n        for (Type type : types.values()) {\n            type.removeProvider(provider);\n        }\n    }", "signature": "void removeProvider(String provider)", "full_signature": "public void removeProvider(String provider)", "class_method_signature": "TypeCollector.removeProvider(String provider)", "testcase": false, "constructor": false, "invocations": ["note", "add", "values", "removeProvider"]}, "repository": {"repo_id": 1889544, "url": "https://github.com/griffon/griffon", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 268, "size": 818435, "license": "licensed"}}