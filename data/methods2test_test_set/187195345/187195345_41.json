{"test_class": {"identifier": "LocationReferencePointDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LocationReferencePointDecoder locationReferencePointDecoder = new LocationReferencePointDecoder();", "modifier": "", "type": "LocationReferencePointDecoder", "declarator": "locationReferencePointDecoder = new LocationReferencePointDecoder()", "var_name": "locationReferencePointDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/LocationReferencePointDecoderTest.java"}, "test_case": {"identifier": "testLastLocationReferencePoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLastLocationReferencePoint() throws OpenLRProtoException {\n        Coordinates coordinates = Coordinates.newBuilder()\n                .setLongitude(2)\n                .setLatitude(51)\n                .build();\n\n        LineAttributes lineAttributes = LineAttributes.newBuilder()\n                .setBearing(180)\n                .setFrc(FRC.FRC_4)\n                .setFow(FOW.FOW_SINGLE_CARRIAGEWAY)\n                .build();\n\n        LocationReferencePoint locationReferencePoint = LocationReferencePoint.newBuilder()\n                .setCoordinates(coordinates)\n                .setLineAttributes(lineAttributes)\n                .build();\n\n        openlr.LocationReferencePoint lrp = locationReferencePointDecoder.decode(locationReferencePoint, 3, true);\n\n        assertNotNull(lrp);\n        assertEquals(lrp.getSequenceNumber(), 3);\n        assertEquals(lrp.getLongitudeDeg(), 2);\n        assertEquals(lrp.getLatitudeDeg(), 51);\n        assertEquals(lrp.getBearing(), 180);\n        assertEquals(lrp.getFRC(), FunctionalRoadClass.FRC_4);\n        assertEquals(lrp.getFOW(), FormOfWay.SINGLE_CARRIAGEWAY);\n        assertEquals(lrp.isLastLRP(),true);\n    }", "signature": "void testLastLocationReferencePoint()", "full_signature": "@Test public void testLastLocationReferencePoint()", "class_method_signature": "LocationReferencePointDecoderTest.testLastLocationReferencePoint()", "testcase": true, "constructor": false, "invocations": ["build", "setLatitude", "setLongitude", "newBuilder", "build", "setFow", "setFrc", "setBearing", "newBuilder", "build", "setLineAttributes", "setCoordinates", "newBuilder", "decode", "assertNotNull", "assertEquals", "getSequenceNumber", "assertEquals", "getLongitudeDeg", "assertEquals", "getLatitudeDeg", "assertEquals", "getBearing", "assertEquals", "getFRC", "assertEquals", "getFOW", "assertEquals", "isLastLRP"]}, "focal_class": {"identifier": "LocationReferencePointDecoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "decode", "parameters": "(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "modifiers": "", "return": "LocationReferencePoint", "signature": "LocationReferencePoint decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "full_signature": " LocationReferencePoint decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "class_method_signature": "LocationReferencePointDecoder.decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(FRC frc)", "modifiers": "private", "return": "FunctionalRoadClass", "signature": "FunctionalRoadClass decode(FRC frc)", "full_signature": "private FunctionalRoadClass decode(FRC frc)", "class_method_signature": "LocationReferencePointDecoder.decode(FRC frc)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(FOW fow)", "modifiers": "private", "return": "FormOfWay", "signature": "FormOfWay decode(FOW fow)", "full_signature": "private FormOfWay decode(FOW fow)", "class_method_signature": "LocationReferencePointDecoder.decode(FOW fow)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/LocationReferencePointDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "modifiers": "", "return": "LocationReferencePoint", "body": "LocationReferencePoint decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast) throws OpenLRProtoException {\n        if (!data.hasCoordinates()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        Coordinates coordinates = data.getCoordinates();\n        double longitudeDeg = coordinates.getLongitude();\n        double latitudeDeg = coordinates.getLatitude();\n\n        if (!data.hasLineAttributes()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        LineAttributes lineAttributes = data.getLineAttributes();\n        int bearing = lineAttributes.getBearing();\n        FunctionalRoadClass frc = decode(lineAttributes.getFrc());\n        FormOfWay fow = decode(lineAttributes.getFow());\n\n        if (isLast) {\n            return new LocationReferencePointProtoImpl(\n                    sequenceNumber,\n                    longitudeDeg,\n                    latitudeDeg,\n                    bearing,\n                    frc,\n                    fow);\n        } else {\n            if (!data.hasPathAttributes()) {\n                throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n            }\n\n            PathAttributes pathAttributes = data.getPathAttributes();\n            int distanceToNext = pathAttributes.getDistanceToNext();\n            FunctionalRoadClass lfrc = decode(pathAttributes.getLowestFrcAlongPath());\n\n            return new LocationReferencePointProtoImpl(\n                    sequenceNumber,\n                    longitudeDeg,\n                    latitudeDeg,\n                    bearing,\n                    frc,\n                    fow,\n                    distanceToNext,\n                    lfrc);\n        }\n    }", "signature": "LocationReferencePoint decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "full_signature": " LocationReferencePoint decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "class_method_signature": "LocationReferencePointDecoder.decode(openlr.proto.schema.LocationReferencePoint data, int sequenceNumber, boolean isLast)", "testcase": false, "constructor": false, "invocations": ["hasCoordinates", "getCoordinates", "getLongitude", "getLatitude", "hasLineAttributes", "getLineAttributes", "getBearing", "decode", "getFrc", "decode", "getFow", "hasPathAttributes", "getPathAttributes", "getDistanceToNext", "decode", "getLowestFrcAlongPath"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}