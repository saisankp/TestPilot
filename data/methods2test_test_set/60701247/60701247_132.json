{"test_class": {"identifier": "MultiVersionTreeNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdk-updates/testSrc/com/android/tools/idea/updater/configure/MultiVersionTreeNodeTest.java"}, "test_case": {"identifier": "latestVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void latestVersion() {\n    SdkUpdaterConfigurable configurable = Mockito.mock(SdkUpdaterConfigurable.class);\n    FakePackage.FakeRemotePackage v1 = new FakePackage.FakeRemotePackage(\"foo;1\");\n    v1.setRevision(new Revision(1));\n    FakePackage.FakeRemotePackage v11 = new FakePackage.FakeRemotePackage(\"foo;1.1\");\n    v11.setRevision(new Revision(1, 1));\n    FakePackage.FakeRemotePackage latest = new FakePackage.FakeRemotePackage(\"foo;latest\");\n    latest.setRevision(new Revision(1, 1));\n\n    List<DetailsTreeNode> nodes = ImmutableList.of(\n      new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(v1)), null, configurable),\n      new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(latest)), null, configurable),\n      new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(v11)), null, configurable)\n    );\n    MultiVersionTreeNode node = new MultiVersionTreeNode(nodes);\n    node.cycleState();\n    assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(0).getCurrentState());\n    assertEquals(PackageNodeModel.SelectedState.INSTALLED, nodes.get(1).getCurrentState());\n    assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(2).getCurrentState());\n  }", "signature": "void latestVersion()", "full_signature": "@Test public void latestVersion()", "class_method_signature": "MultiVersionTreeNodeTest.latestVersion()", "testcase": true, "constructor": false, "invocations": ["mock", "setRevision", "setRevision", "setRevision", "of", "cycleState", "assertEquals", "getCurrentState", "get", "assertEquals", "getCurrentState", "get", "assertEquals", "getCurrentState", "get"]}, "focal_class": {"identifier": "MultiVersionTreeNode", "superclass": "extends UpdaterTreeNode", "interfaces": "", "fields": [{"original_string": "private final DetailsTreeNode myMaxVersionNode;", "modifier": "private final", "type": "DetailsTreeNode", "declarator": "myMaxVersionNode", "var_name": "myMaxVersionNode"}, {"original_string": "private final Collection<DetailsTreeNode> myVersionNodes;", "modifier": "private final", "type": "Collection<DetailsTreeNode>", "declarator": "myVersionNodes", "var_name": "myVersionNodes"}], "methods": [{"identifier": "MultiVersionTreeNode", "parameters": "(@NotNull Collection<DetailsTreeNode> versionNodes)", "modifiers": "public", "return": "", "signature": " MultiVersionTreeNode(@NotNull Collection<DetailsTreeNode> versionNodes)", "full_signature": "public  MultiVersionTreeNode(@NotNull Collection<DetailsTreeNode> versionNodes)", "class_method_signature": "MultiVersionTreeNode.MultiVersionTreeNode(@NotNull Collection<DetailsTreeNode> versionNodes)", "testcase": false, "constructor": true}, {"identifier": "getState", "parameters": "(@NotNull Function<UpdaterTreeNode, PackageNodeModel.SelectedState> childStateGetter)", "modifiers": "@NotNull private", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getState(@NotNull Function<UpdaterTreeNode, PackageNodeModel.SelectedState> childStateGetter)", "full_signature": "@NotNull private PackageNodeModel.SelectedState getState(@NotNull Function<UpdaterTreeNode, PackageNodeModel.SelectedState> childStateGetter)", "class_method_signature": "MultiVersionTreeNode.getState(@NotNull Function<UpdaterTreeNode, PackageNodeModel.SelectedState> childStateGetter)", "testcase": false, "constructor": false}, {"identifier": "getInitialState", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getInitialState()", "full_signature": "@Override @NotNull public PackageNodeModel.SelectedState getInitialState()", "class_method_signature": "MultiVersionTreeNode.getInitialState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getCurrentState()", "full_signature": "@Override @NotNull public PackageNodeModel.SelectedState getCurrentState()", "class_method_signature": "MultiVersionTreeNode.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "canHaveMixedState", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canHaveMixedState()", "full_signature": "@Override protected boolean canHaveMixedState()", "class_method_signature": "MultiVersionTreeNode.canHaveMixedState()", "testcase": false, "constructor": false}, {"identifier": "customizeRenderer", "parameters": "(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "modifiers": "@Override public", "return": "void", "signature": "void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "full_signature": "@Override public void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "class_method_signature": "MultiVersionTreeNode.customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@NotNull public String getDisplayName()", "class_method_signature": "MultiVersionTreeNode.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getStatusString", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "String", "signature": "String getStatusString()", "full_signature": "@Override @NotNull public String getStatusString()", "class_method_signature": "MultiVersionTreeNode.getStatusString()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(PackageNodeModel.SelectedState state)", "modifiers": "@Override protected", "return": "void", "signature": "void setState(PackageNodeModel.SelectedState state)", "full_signature": "@Override protected void setState(PackageNodeModel.SelectedState state)", "class_method_signature": "MultiVersionTreeNode.setState(PackageNodeModel.SelectedState state)", "testcase": false, "constructor": false}], "file": "sdk-updates/src/com/android/tools/idea/updater/configure/MultiVersionTreeNode.java"}, "focal_method": {"identifier": "getCurrentState", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "PackageNodeModel.SelectedState", "body": "@Override\n  @NotNull\n  public PackageNodeModel.SelectedState getCurrentState() {\n    return getState(UpdaterTreeNode::getCurrentState);\n  }", "signature": "PackageNodeModel.SelectedState getCurrentState()", "full_signature": "@Override @NotNull public PackageNodeModel.SelectedState getCurrentState()", "class_method_signature": "MultiVersionTreeNode.getCurrentState()", "testcase": false, "constructor": false, "invocations": ["getState"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}