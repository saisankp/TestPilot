{"test_class": {"identifier": "ProviderHostnameVerifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/instance_provider/src/test/java/com/yahoo/athenz/instance/provider/ProviderHostnameVerifierTest.java"}, "test_case": {"identifier": "testHostnameVerifierNullCerts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHostnameVerifierNullCerts() throws IOException {\n        \n        SSLSession session = Mockito.mock(SSLSession.class);\n        Mockito.when(session.getPeerCertificates()).thenReturn(null);\n        \n        ProviderHostnameVerifier verifier1 = new ProviderHostnameVerifier(\"athenz.production\");\n        assertFalse(verifier1.verify(\"athenz\", session));\n    }", "signature": "void testHostnameVerifierNullCerts()", "full_signature": "@Test public void testHostnameVerifierNullCerts()", "class_method_signature": "ProviderHostnameVerifierTest.testHostnameVerifierNullCerts()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getPeerCertificates", "assertFalse", "verify"]}, "focal_class": {"identifier": "ProviderHostnameVerifier", "superclass": "", "interfaces": "implements HostnameVerifier", "fields": [{"original_string": "final private String serviceName;", "modifier": "final private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}], "methods": [{"identifier": "ProviderHostnameVerifier", "parameters": "(String serviceName)", "modifiers": "public", "return": "", "signature": " ProviderHostnameVerifier(String serviceName)", "full_signature": "public  ProviderHostnameVerifier(String serviceName)", "class_method_signature": "ProviderHostnameVerifier.ProviderHostnameVerifier(String serviceName)", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(String hostname, SSLSession session)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verify(String hostname, SSLSession session)", "full_signature": "@Override public boolean verify(String hostname, SSLSession session)", "class_method_signature": "ProviderHostnameVerifier.verify(String hostname, SSLSession session)", "testcase": false, "constructor": false}], "file": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/ProviderHostnameVerifier.java"}, "focal_method": {"identifier": "verify", "parameters": "(String hostname, SSLSession session)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean verify(String hostname, SSLSession session) {\n\n        Certificate[] certs = null;\n        try {\n            certs = session.getPeerCertificates();\n        } catch (SSLPeerUnverifiedException ignored) {\n        }\n        if (certs == null) {\n            return false;\n        }\n        \n        for (Certificate cert : certs) {\n            final X509Certificate x509Cert = (X509Certificate) cert;\n            if (serviceName.equals(Crypto.extractX509CertCommonName(x509Cert))) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean verify(String hostname, SSLSession session)", "full_signature": "@Override public boolean verify(String hostname, SSLSession session)", "class_method_signature": "ProviderHostnameVerifier.verify(String hostname, SSLSession session)", "testcase": false, "constructor": false, "invocations": ["getPeerCertificates", "equals", "extractX509CertCommonName"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}