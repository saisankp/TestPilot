{"test_class": {"identifier": "UpdateLambdaAndAlphaTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/lda/UpdateLambdaAndAlphaTest.java"}, "test_case": {"identifier": "calcTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calcTest() {\n\t\tList <Vector> data = new ArrayList <>();\n\n\t\tRow[] testArray =\n\t\t\tnew Row[]{\n\t\t\t\tRow.of(new Object[]{0, \"0:1 1:2 2:6 3:0 4:2 5:3 6:1 7:1 8:0 9:0 10:3\"}),\n\t\t\t\tRow.of(new Object[]{1, \"0:1 1:3 2:0 3:1 4:3 5:0 6:0 7:2 8:0 9:0 10:1\"}),\n\t\t\t\tRow.of(new Object[]{2, \"0:1 1:4 2:1 3:0 4:0 5:4 6:9 7:0 8:1 9:2 10:0\"}),\n\t\t\t\tRow.of(new Object[]{3, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:3 10:9\"}),\n\t\t\t\tRow.of(new Object[]{4, \"0:3 1:1 2:1 3:9 4:3 5:0 6:2 7:0 8:0 9:1 10:3\"}),\n\t\t\t\tRow.of(new Object[]{5, \"0:4 1:2 2:0 3:3 4:4 5:5 6:1 7:1 8:1 9:4 10:0\"}),\n\t\t\t\tRow.of(new Object[]{6, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:2 10:9\"}),\n\t\t\t\tRow.of(new Object[]{7, \"0:1 1:1 2:1 3:9 4:2 5:1 6:2 7:0 8:0 9:1 10:3\"}),\n\t\t\t\tRow.of(new Object[]{8, \"0:4 1:4 2:0 3:3 4:4 5:2 6:1 7:3 8:0 9:0 10:0\"}),\n\t\t\t\tRow.of(new Object[]{9, \"0:2 1:8 2:2 3:0 4:3 5:0 6:2 7:0 8:2 9:7 10:2\"}),\n\t\t\t\tRow.of(new Object[]{10, \"0:1 1:1 2:1 3:9 4:0 5:2 6:2 7:0 8:0 9:3 10:3\"}),\n\t\t\t\tRow.of(new Object[]{11, \"0:4 1:1 2:0 3:0 4:4 5:5 6:1 7:3 8:0 9:1 10:0\"})\n\t\t\t};\n\n\t\tfor (int i = 0; i < testArray.length; i++) {\n\t\t\tdata.add(VectorUtil.parseSparse((String) testArray[i].getField(1)));\n\t\t}\n\n\t\tint row = 11;\n\t\tint col = 5;\n\n\t\tdouble[] temp = new double[] {0.8936825549031158,\n\t\t\t0.9650683744577933,\n\t\t\t1.1760851442955271,\n\t\t\t0.889011463028263,\n\t\t\t1.0355502890838704,\n\t\t\t1.1720254142865503,\n\t\t\t0.8496512959061578,\n\t\t\t1.1564109073902848,\n\t\t\t0.8528198328651976,\n\t\t\t1.072261907065107,\n\t\t\t1.0112487630821958,\n\t\t\t1.0288027427394206,\n\t\t\t1.1256918577237478,\n\t\t\t1.0641131417250107,\n\t\t\t0.9830788207753957,\n\t\t\t0.9519235842178695,\n\t\t\t1.0531103642783968,\n\t\t\t1.0846663792488604,\n\t\t\t0.9317316401779444,\n\t\t\t0.9816247167440154,\n\t\t\t0.953061129524052,\n\t\t\t0.8836097897537777,\n\t\t\t0.8539728772760822,\n\t\t\t1.109432137460693,\n\t\t\t0.9801693423689286,\n\t\t\t0.9385725168762017,\n\t\t\t1.009886079821316,\n\t\t\t0.9741390218380398,\n\t\t\t0.8734624459614093,\n\t\t\t0.8548583255850564,\n\t\t\t0.8934120594879987,\n\t\t\t1.0200469492393616,\n\t\t\t0.9461610896051537,\n\t\t\t1.1912819895664948,\n\t\t\t0.9650275833536232,\n\t\t\t0.9312815665885328,\n\t\t\t0.984681817963758,\n\t\t\t1.1412711858668625,\n\t\t\t1.1159082714127344,\n\t\t\t1.0219124026668207,\n\t\t\t1.1052645047308647,\n\t\t\t1.1380919062139254,\n\t\t\t0.9684793634316371,\n\t\t\t1.023922805813918,\n\t\t\t1.0777999541431174,\n\t\t\t0.8730213177341947,\n\t\t\t1.0353598060502658,\n\t\t\t1.047104264664753,\n\t\t\t1.1284793487722498,\n\t\t\t0.8898021261569816,\n\t\t\t1.1634869627283706,\n\t\t\t0.817874601150865,\n\t\t\t1.0424867867765728,\n\t\t\t1.167773175905418,\n\t\t\t0.915224402643435};\n\n\t\tDenseMatrix lambda = new DenseMatrix(row, col, temp, false).transpose();\n\n\t\tDenseMatrix alpha = new DenseMatrix(5, 1, new double[] {0.2, 0.3, 0.4, 0.5, 0.6});\n\t\tint vocabularySize = 11;\n\t\tint numTopic = 5;\n\n\t\tDenseMatrix gammad = new DenseMatrix(numTopic, 1, new double[] {0.7, 0.8, 0.9, 1.0, 1.1});\n\n\t\tTuple4 <DenseMatrix, DenseMatrix, Long, Long> tuple4 = OnlineCorpusStep.onlineCorpusUpdate(data, lambda,\n\t\t\talpha,\n\t\t\tgammad,\n\t\t\tvocabularySize,\n\t\t\tnumTopic);\n\n\t\tDenseMatrix stat = tuple4.f0;\n\t\tDenseMatrix logphat = tuple4.f1;\n\t\tlong nonEmptyDocsN = tuple4.f3;\n\t\tint iterNum = 1;\n\t\tdouble tau0 = 1024;\n\t\tdouble eta = 0.2;\n\t\tdouble kappa = 0.51;\n\t\tdouble subSampleRatio = 1.0;\n\t\tboolean optimizeDocConcentration = true;\n\n\t\tTuple2 <DenseMatrix, DenseMatrix> tuple2 = UpdateLambdaAndAlpha.calculateLambdaAndAlpha(\n\t\t\tlambda, alpha, stat, logphat,\n\t\t\tnonEmptyDocsN, iterNum,\n\t\t\ttau0, kappa, eta, subSampleRatio,\n\t\t\tnumTopic, optimizeDocConcentration\n\t\t);\n\n\t\tAssert.assertEquals(tuple2.f0.get(1, 1), 1.101515812903741, 10e-4);\n\t\tAssert.assertEquals(tuple2.f1.get(1, 0), 0.29431646104704223, 10e-4);\n\n\t}", "signature": "void calcTest()", "full_signature": "@Test public void calcTest()", "class_method_signature": "UpdateLambdaAndAlphaTest.calcTest()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "add", "parseSparse", "getField", "transpose", "onlineCorpusUpdate", "calculateLambdaAndAlpha", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "UpdateLambdaAndAlpha", "superclass": "extends ComputeFunction", "interfaces": "", "fields": [{"original_string": "private int numTopic;", "modifier": "private", "type": "int", "declarator": "numTopic", "var_name": "numTopic"}, {"original_string": "private double tau0;", "modifier": "private", "type": "double", "declarator": "tau0", "var_name": "tau0"}, {"original_string": "private double kappa;", "modifier": "private", "type": "double", "declarator": "kappa", "var_name": "kappa"}, {"original_string": "private double eta;", "modifier": "private", "type": "double", "declarator": "eta", "var_name": "eta"}, {"original_string": "private double subSampleRatio;", "modifier": "private", "type": "double", "declarator": "subSampleRatio", "var_name": "subSampleRatio"}, {"original_string": "private boolean optimizeDocConcentration;", "modifier": "private", "type": "boolean", "declarator": "optimizeDocConcentration", "var_name": "optimizeDocConcentration"}], "methods": [{"identifier": "UpdateLambdaAndAlpha", "parameters": "(int numTopic, double learningOffset, double learningRate,\n                                double subSampleRatio, boolean optimizeDocConcentration, double eta)", "modifiers": "public", "return": "", "signature": " UpdateLambdaAndAlpha(int numTopic, double learningOffset, double learningRate,\n                                double subSampleRatio, boolean optimizeDocConcentration, double eta)", "full_signature": "public  UpdateLambdaAndAlpha(int numTopic, double learningOffset, double learningRate,\n                                double subSampleRatio, boolean optimizeDocConcentration, double eta)", "class_method_signature": "UpdateLambdaAndAlpha.UpdateLambdaAndAlpha(int numTopic, double learningOffset, double learningRate,\n                                double subSampleRatio, boolean optimizeDocConcentration, double eta)", "testcase": false, "constructor": true}, {"identifier": "calculateLambdaAndAlpha", "parameters": "(\n            DenseMatrix lambda, DenseMatrix alpha, DenseMatrix wordTopicStat, DenseMatrix logPhat,\n            long nonEmptyDocsN, int iterNum, double tau0, double kappa, double eta,\n            double subSampleRatio, int numTopic, boolean optimizeDocConcentration)", "modifiers": "static", "return": "Tuple2<DenseMatrix, DenseMatrix>", "signature": "Tuple2<DenseMatrix, DenseMatrix> calculateLambdaAndAlpha(\n            DenseMatrix lambda, DenseMatrix alpha, DenseMatrix wordTopicStat, DenseMatrix logPhat,\n            long nonEmptyDocsN, int iterNum, double tau0, double kappa, double eta,\n            double subSampleRatio, int numTopic, boolean optimizeDocConcentration)", "full_signature": "static Tuple2<DenseMatrix, DenseMatrix> calculateLambdaAndAlpha(\n            DenseMatrix lambda, DenseMatrix alpha, DenseMatrix wordTopicStat, DenseMatrix logPhat,\n            long nonEmptyDocsN, int iterNum, double tau0, double kappa, double eta,\n            double subSampleRatio, int numTopic, boolean optimizeDocConcentration)", "class_method_signature": "UpdateLambdaAndAlpha.calculateLambdaAndAlpha(\n            DenseMatrix lambda, DenseMatrix alpha, DenseMatrix wordTopicStat, DenseMatrix logPhat,\n            long nonEmptyDocsN, int iterNum, double tau0, double kappa, double eta,\n            double subSampleRatio, int numTopic, boolean optimizeDocConcentration)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "UpdateLambdaAndAlpha.calc(ComContext context)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/lda/UpdateLambdaAndAlpha.java"}, "focal_method": {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void calc(ComContext context) {\n        int iterNum = context.getStepNo();\n        Tuple2<Long, Integer> tuple2 = ((List<Tuple2<Long, Integer>>) context.getObj(LdaVariable.shape)).get(0);\n        int vocabularySize = tuple2.f1;\n        DenseMatrix lambda;\n        DenseMatrix alpha;\n        if (context.getStepNo() == 1) {\n            Tuple2<DenseMatrix, DenseMatrix> initGammaAndAlpha =\n                    ((List<Tuple2<DenseMatrix, DenseMatrix>>) context.getObj(LdaVariable.initModel)).get(0);\n            lambda = initGammaAndAlpha.f0;\n            alpha = initGammaAndAlpha.f1;\n        } else {\n            lambda = context.getObj(LdaVariable.lambda);\n            alpha = context.getObj(LdaVariable.alpha);\n        }\n        DenseMatrix wordTopicStat = new DenseMatrix(numTopic, vocabularySize, context.getObj(LdaVariable.wordTopicStat));\n        DenseMatrix logPhat = new DenseMatrix(numTopic, 1, context.getObj(LdaVariable.logPhatPart));\n        long nonEmptyDocsN = Math.round(((double[]) context.getObj(LdaVariable.nonEmptyDocCount))[0]);\n        Tuple2<DenseMatrix, DenseMatrix> out = calculateLambdaAndAlpha(lambda, alpha, wordTopicStat, logPhat,\n                nonEmptyDocsN, iterNum, tau0, kappa, eta, subSampleRatio,\n                numTopic, optimizeDocConcentration);\n        context.putObj(LdaVariable.lambda, out.f0);\n        context.putObj(LdaVariable.alpha, out.f1);\n    }", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "UpdateLambdaAndAlpha.calc(ComContext context)", "testcase": false, "constructor": false, "invocations": ["getStepNo", "get", "getObj", "getStepNo", "get", "getObj", "getObj", "getObj", "getObj", "getObj", "round", "getObj", "calculateLambdaAndAlpha", "putObj", "putObj"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}