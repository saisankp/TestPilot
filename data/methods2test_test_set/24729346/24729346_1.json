{"test_class": {"identifier": "GitForkCmdTest", "superclass": "", "interfaces": "", "fields": [], "file": "ostara-service/src/test/java/org/ostara/cmd/impl/GitForkCmdTest.java"}, "test_case": {"identifier": "testFork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testFork() {\n      GitForkCmd task = new GitForkCmd(\"fork1\");\n\n      Map<String, Object> attrs = new HashMap<>();\n\n      String organization = \"UpgradeTest\";\n      Config gitconfig = Config.getInstance();\n      gitconfig.setGitAPIUrl(\"https://github.com/api/v3/repos/\");\n      gitconfig.setOrganization(\"UpgradeTest\");\n\n      attrs.put(\"fork1.gitUrl\", \"https://github.com/ostara/webres-sample\");\n      attrs.put(\"fork1.username\", \"platformupgradeservice\");\n      attrs.put(\"fork1.password\", \"dummy\");\n      attrs.put(\"fork1.organization\", organization);\n\n      CmdManager manager = CmdManagerFactory.create(attrs);\n\n      manager.addCmd(task);\n      manager.execute();\n\n      Assert.assertTrue(manager.isDone());\n      Assert.assertEquals(task, manager.getAllCmds().get(0));\n\n      System.out.println(\"result:\" + manager.getResults());\n      Assert.assertTrue(manager.isSuccess());\n   }", "signature": "void testFork()", "full_signature": "@Test public void testFork()", "class_method_signature": "GitForkCmdTest.testFork()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setGitAPIUrl", "setOrganization", "put", "put", "put", "put", "create", "addCmd", "execute", "assertTrue", "isDone", "assertEquals", "get", "getAllCmds", "println", "getResults", "assertTrue", "isSuccess"]}, "focal_class": {"identifier": "GitForkCmd", "superclass": "extends BaseCommand", "interfaces": "", "fields": [{"original_string": "@InParameter(name = \"gitUrl\", requried = true)\n   String m_gitUrl;", "modifier": "@InParameter(name = \"gitUrl\", requried = true)", "type": "String", "declarator": "m_gitUrl", "var_name": "m_gitUrl"}, {"original_string": "@InParameter(name = \"organization\", requried = true)\n   String m_organization;", "modifier": "@InParameter(name = \"organization\", requried = true)", "type": "String", "declarator": "m_organization", "var_name": "m_organization"}, {"original_string": "@InParameter(name = \"username\", requried = true)\n   String m_userName;", "modifier": "@InParameter(name = \"username\", requried = true)", "type": "String", "declarator": "m_userName", "var_name": "m_userName"}, {"original_string": "@InParameter(name = \"password\", requried = true)\n   String m_password;", "modifier": "@InParameter(name = \"password\", requried = true)", "type": "String", "declarator": "m_password", "var_name": "m_password"}, {"original_string": "@OutParameter(name = \"forkedGitUrl\")\n   String m_forkedGitUrl;", "modifier": "@OutParameter(name = \"forkedGitUrl\")", "type": "String", "declarator": "m_forkedGitUrl", "var_name": "m_forkedGitUrl"}], "methods": [{"identifier": "GitForkCmd", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " GitForkCmd(String name)", "full_signature": "public  GitForkCmd(String name)", "class_method_signature": "GitForkCmd.GitForkCmd(String name)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "ICmdResult", "signature": "ICmdResult execute()", "full_signature": "@Override public ICmdResult execute()", "class_method_signature": "GitForkCmd.execute()", "testcase": false, "constructor": false}, {"identifier": "getSourceOrganization", "parameters": "(String gitUrl)", "modifiers": "private", "return": "String", "signature": "String getSourceOrganization(String gitUrl)", "full_signature": "private String getSourceOrganization(String gitUrl)", "class_method_signature": "GitForkCmd.getSourceOrganization(String gitUrl)", "testcase": false, "constructor": false}, {"identifier": "getSourceRepo", "parameters": "(String gitUrl)", "modifiers": "private", "return": "String", "signature": "String getSourceRepo(String gitUrl)", "full_signature": "private String getSourceRepo(String gitUrl)", "class_method_signature": "GitForkCmd.getSourceRepo(String gitUrl)", "testcase": false, "constructor": false}, {"identifier": "waitForkComplete", "parameters": "(ResteasyClient client, String forkUrl)", "modifiers": "private", "return": "void", "signature": "void waitForkComplete(ResteasyClient client, String forkUrl)", "full_signature": "private void waitForkComplete(ResteasyClient client, String forkUrl)", "class_method_signature": "GitForkCmd.waitForkComplete(ResteasyClient client, String forkUrl)", "testcase": false, "constructor": false}], "file": "ostara-service/src/main/java/org/ostara/cmd/impl/GitForkCmd.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "ICmdResult", "body": "@Override\n   public ICmdResult execute() {\n      CmdResult result = new CmdResult();\n      String sourceOrganization = getSourceOrganization(m_gitUrl);\n      String sourceRepo = getSourceRepo(m_gitUrl);\n\n      String forkUrl = Config.getInstance().getGitAPIUrl() + sourceOrganization + \"/\" + sourceRepo + \"/forks\";\n\n      try {\n         ResteasyClient client = new ResteasyClientBuilder().build();\n         client.register(new BasicAuthentication(m_userName, m_password));\n         client.register(new AgentHeadersRequestFilter(m_userName));\n\n         ResteasyWebTarget target = client.target(forkUrl);\n\n         Organization o = new Organization(m_organization);\n         Response response = target.request().post(Entity.entity(o, \"application/json\"));\n         if ((response.getStatus() == 201) || (response.getStatus() == 202)) {\n            String resStr = response.readEntity(String.class);\n            JSONObject jsonObject = new JSONObject(resStr);\n            //System.out.println(\"Get response:\" + jsonObject);\n            //System.out.println(jsonObject.get(\"html_url\"));\n            try {\n               m_forkedGitUrl = jsonObject.get(\"html_url\").toString();\n            } catch (JSONException e) {\n               e.printStackTrace();\n               result.setException(e);\n            }\n\n            result.setMessage(\"OK\");\n         } else {\n            System.err.println(\"Unexpected response status:\" + response.getStatus());\n            throw new RuntimeException(\"Unexpected response status:\" + response.getStatus() + \"  \"\n                  + response.readEntity(String.class));\n\n         }\n\n         // step 2: wait due to async fork restful api\n         if (result.getException() == null) {\n            waitForkComplete(client, forkUrl);\n         }\n\n      } catch (Exception ex) {\n         result.setException(ex);\n      }\n\n      return result;\n   }", "signature": "ICmdResult execute()", "full_signature": "@Override public ICmdResult execute()", "class_method_signature": "GitForkCmd.execute()", "testcase": false, "constructor": false, "invocations": ["getSourceOrganization", "getSourceRepo", "getGitAPIUrl", "getInstance", "build", "register", "register", "target", "post", "request", "entity", "getStatus", "getStatus", "readEntity", "toString", "get", "printStackTrace", "setException", "setMessage", "println", "getStatus", "getStatus", "readEntity", "getException", "waitForkComplete", "setException"]}, "repository": {"repo_id": 24729346, "url": "https://github.com/eBay/ostara", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 760, "license": "licensed"}}