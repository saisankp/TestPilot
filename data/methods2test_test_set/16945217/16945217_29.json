{"test_class": {"identifier": "SubQueryPreProcessorTest", "superclass": "extends BaseOptimizerTest", "interfaces": "", "fields": [], "file": "tddl-optimizer/src/test/java/com/taobao/tddl/optimizer/costbased/SubQueryPreProcessorTest.java"}, "test_case": {"identifier": "test_", "parameters": "", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_\u7b49\u4e8e\u5b50\u67e5\u8be2_\u5b58\u5728OR\u67e5\u8be2_\u62a5\u9519() {\n        TableNode table1 = new TableNode(\"TABLE1\");\n        table1.query(\"ID = (SELECT ID FROM TABLE2 WHERE NAME = 'HELLO') OR NAME = 3\");\n        table1.build();\n\n        try {\n            SubQueryPreProcessor.optimize(table1);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n    }", "signature": "void test_", "full_signature": "@Test public void test_", "class_method_signature": "SubQueryPreProcessorTest.test_", "testcase": true, "constructor": false, "invocations": ["query", "build", "optimize", "fail"]}, "focal_class": {"identifier": "SubQueryPreProcessor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "optimize", "parameters": "(QueryTreeNode qtn)", "modifiers": "public static", "return": "QueryTreeNode", "signature": "QueryTreeNode optimize(QueryTreeNode qtn)", "full_signature": "public static QueryTreeNode optimize(QueryTreeNode qtn)", "class_method_signature": "SubQueryPreProcessor.optimize(QueryTreeNode qtn)", "testcase": false, "constructor": false}, {"identifier": "findComparisonsSubQueryToJoinNode", "parameters": "(QueryTreeNode qtn)", "modifiers": "private static", "return": "QueryTreeNode", "signature": "QueryTreeNode findComparisonsSubQueryToJoinNode(QueryTreeNode qtn)", "full_signature": "private static QueryTreeNode findComparisonsSubQueryToJoinNode(QueryTreeNode qtn)", "class_method_signature": "SubQueryPreProcessor.findComparisonsSubQueryToJoinNode(QueryTreeNode qtn)", "testcase": false, "constructor": false}, {"identifier": "buildSubQuery", "parameters": "(SubQueryAndFilter qtn, IFilter filter, boolean existOr)", "modifiers": "private static", "return": "SubQueryAndFilter", "signature": "SubQueryAndFilter buildSubQuery(SubQueryAndFilter qtn, IFilter filter, boolean existOr)", "full_signature": "private static SubQueryAndFilter buildSubQuery(SubQueryAndFilter qtn, IFilter filter, boolean existOr)", "class_method_signature": "SubQueryPreProcessor.buildSubQuery(SubQueryAndFilter qtn, IFilter filter, boolean existOr)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(IFilter filter, IFilter subQueryFilter)", "modifiers": "private static", "return": "IFilter", "signature": "IFilter and(IFilter filter, IFilter subQueryFilter)", "full_signature": "private static IFilter and(IFilter filter, IFilter subQueryFilter)", "class_method_signature": "SubQueryPreProcessor.and(IFilter filter, IFilter subQueryFilter)", "testcase": false, "constructor": false}], "file": "tddl-optimizer/src/main/java/com/taobao/tddl/optimizer/costbased/SubQueryPreProcessor.java"}, "focal_method": {"identifier": "optimize", "parameters": "(QueryTreeNode qtn)", "modifiers": "public static", "return": "QueryTreeNode", "body": "public static QueryTreeNode optimize(QueryTreeNode qtn) throws QueryException {\n        qtn = findComparisonsSubQueryToJoinNode(qtn);\n        return qtn;\n    }", "signature": "QueryTreeNode optimize(QueryTreeNode qtn)", "full_signature": "public static QueryTreeNode optimize(QueryTreeNode qtn)", "class_method_signature": "SubQueryPreProcessor.optimize(QueryTreeNode qtn)", "testcase": false, "constructor": false, "invocations": ["findComparisonsSubQueryToJoinNode"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}