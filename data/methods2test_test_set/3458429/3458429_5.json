{"test_class": {"identifier": "URLEncodedTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String __ISO_8859_1 = \"iso-8859-1\";", "modifier": "private static final", "type": "String", "declarator": "__ISO_8859_1 = \"iso-8859-1\"", "var_name": "__ISO_8859_1"}, {"original_string": "private static final String __UTF8 = \"utf-8\";", "modifier": "private static final", "type": "String", "declarator": "__UTF8 = \"utf-8\"", "var_name": "__UTF8"}, {"original_string": "private static final String __UTF16 = \"utf-16\";", "modifier": "private static final", "type": "String", "declarator": "__UTF16 = \"utf-16\"", "var_name": "__UTF16"}], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/codec/URLEncodedTest.java"}, "test_case": {"identifier": "testUrlEncoded", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testUrlEncoded() {\n\n        UrlEncoded url_encoded = new UrlEncoded();\n        assertEquals(0, url_encoded.size());\n\n        url_encoded.clear();\n        url_encoded.decode(\"\");\n        assertEquals(0, url_encoded.size());\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name1=Value1\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name1=Value1\", url_encoded.encode());\n        assertEquals(\"Value1\", url_encoded.getString(\"Name1\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name2=\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name2\", url_encoded.encode());\n        assertEquals(\"\", url_encoded.getString(\"Name2\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name3\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name3\", url_encoded.encode());\n        assertEquals(\"\", url_encoded.getString(\"Name3\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name4=V\\u0629lue+4%21\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name4=V%D8%A9lue+4%21\", url_encoded.encode());\n        assertEquals(\"V\\u0629lue 4!\", url_encoded.getString(\"Name4\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name4=Value%2B4%21\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name4=Value%2B4%21\", url_encoded.encode());\n        assertEquals(\"Value+4!\", url_encoded.getString(\"Name4\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name4=Value+4%21%20%214\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name4=Value+4%21+%214\", url_encoded.encode());\n        assertEquals(\"Value 4! !4\", url_encoded.getString(\"Name4\"));\n\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name5=aaa&Name6=bbb\");\n        assertEquals(2, url_encoded.size());\n        assertTrue(url_encoded.encode().equals(\"Name5=aaa&Name6=bbb\") ||\n                url_encoded.encode().equals(\"Name6=bbb&Name5=aaa\")\n        );\n        assertEquals(\"aaa\", url_encoded.getString(\"Name5\"));\n        assertEquals(\"bbb\", url_encoded.getString(\"Name6\"));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name7=aaa&Name7=b%2Cb&Name7=ccc\");\n        assertEquals(\"Name7=aaa&Name7=b%2Cb&Name7=ccc\", url_encoded.encode());\n        assertEquals(\"aaa,b,b,ccc\", url_encoded.getString(\"Name7\"));\n        assertEquals(\"aaa\", url_encoded.getValues(\"Name7\").get(0));\n        assertEquals(\"b,b\", url_encoded.getValues(\"Name7\").get(1));\n        assertEquals(\"ccc\", url_encoded.getValues(\"Name7\").get(2));\n\n        url_encoded.clear();\n        url_encoded.decode(\"Name8=xx%2C++yy++%2Czz\");\n        assertEquals(1, url_encoded.size());\n        assertEquals(\"Name8=xx%2C++yy++%2Czz\", url_encoded.encode());\n        assertEquals(\"xx,  yy  ,zz\", url_encoded.getString(\"Name8\"));\n    }", "signature": "void testUrlEncoded()", "full_signature": "@Test void testUrlEncoded()", "class_method_signature": "URLEncodedTest.testUrlEncoded()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "clear", "decode", "assertEquals", "size", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString", "clear", "decode", "assertEquals", "size", "assertTrue", "equals", "encode", "equals", "encode", "assertEquals", "getString", "assertEquals", "getString", "clear", "decode", "assertEquals", "encode", "assertEquals", "getString", "assertEquals", "get", "getValues", "assertEquals", "get", "getValues", "assertEquals", "get", "getValues", "clear", "decode", "assertEquals", "size", "assertEquals", "encode", "assertEquals", "getString"]}, "focal_class": {"identifier": "UrlEncoded", "superclass": "extends MultiMap<String>", "interfaces": "implements Cloneable", "fields": [{"original_string": "public static final Charset ENCODING;", "modifier": "public static final", "type": "Charset", "declarator": "ENCODING", "var_name": "ENCODING"}, {"original_string": "private static final String __ISO_8859_1 = \"iso-8859-1\";", "modifier": "private static final", "type": "String", "declarator": "__ISO_8859_1 = \"iso-8859-1\"", "var_name": "__ISO_8859_1"}, {"original_string": "private static final String __UTF8 = \"utf-8\";", "modifier": "private static final", "type": "String", "declarator": "__UTF8 = \"utf-8\"", "var_name": "__UTF8"}, {"original_string": "private static final String __UTF16 = \"utf-16\";", "modifier": "private static final", "type": "String", "declarator": "__UTF16 = \"utf-16\"", "var_name": "__UTF16"}, {"original_string": "private static LazyLogger LOG = SystemLogger.create(UrlEncoded.class);", "modifier": "private static", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(UrlEncoded.class)", "var_name": "LOG"}], "methods": [{"identifier": "UrlEncoded", "parameters": "(UrlEncoded url)", "modifiers": "public", "return": "", "signature": " UrlEncoded(UrlEncoded url)", "full_signature": "public  UrlEncoded(UrlEncoded url)", "class_method_signature": "UrlEncoded.UrlEncoded(UrlEncoded url)", "testcase": false, "constructor": true}, {"identifier": "UrlEncoded", "parameters": "()", "modifiers": "public", "return": "", "signature": " UrlEncoded()", "full_signature": "public  UrlEncoded()", "class_method_signature": "UrlEncoded.UrlEncoded()", "testcase": false, "constructor": true}, {"identifier": "UrlEncoded", "parameters": "(String query)", "modifiers": "public", "return": "", "signature": " UrlEncoded(String query)", "full_signature": "public  UrlEncoded(String query)", "class_method_signature": "UrlEncoded.UrlEncoded(String query)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(MultiMap<String> map, Charset charset, boolean equalsForNullValue)", "modifiers": "public static", "return": "String", "signature": "String encode(MultiMap<String> map, Charset charset, boolean equalsForNullValue)", "full_signature": "public static String encode(MultiMap<String> map, Charset charset, boolean equalsForNullValue)", "class_method_signature": "UrlEncoded.encode(MultiMap<String> map, Charset charset, boolean equalsForNullValue)", "testcase": false, "constructor": false}, {"identifier": "decodeTo", "parameters": "(String content, MultiMap<String> map, String charset)", "modifiers": "public static", "return": "void", "signature": "void decodeTo(String content, MultiMap<String> map, String charset)", "full_signature": "public static void decodeTo(String content, MultiMap<String> map, String charset)", "class_method_signature": "UrlEncoded.decodeTo(String content, MultiMap<String> map, String charset)", "testcase": false, "constructor": false}, {"identifier": "decodeTo", "parameters": "(String content, MultiMap<String> map, Charset charset)", "modifiers": "public static", "return": "void", "signature": "void decodeTo(String content, MultiMap<String> map, Charset charset)", "full_signature": "public static void decodeTo(String content, MultiMap<String> map, Charset charset)", "class_method_signature": "UrlEncoded.decodeTo(String content, MultiMap<String> map, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "decodeUtf8To", "parameters": "(String query, MultiMap<String> map)", "modifiers": "public static", "return": "void", "signature": "void decodeUtf8To(String query, MultiMap<String> map)", "full_signature": "public static void decodeUtf8To(String query, MultiMap<String> map)", "class_method_signature": "UrlEncoded.decodeUtf8To(String query, MultiMap<String> map)", "testcase": false, "constructor": false}, {"identifier": "decodeUtf8To", "parameters": "(String query, int offset, int length, MultiMap<String> map)", "modifiers": "public static", "return": "void", "signature": "void decodeUtf8To(String query, int offset, int length, MultiMap<String> map)", "full_signature": "public static void decodeUtf8To(String query, int offset, int length, MultiMap<String> map)", "class_method_signature": "UrlEncoded.decodeUtf8To(String query, int offset, int length, MultiMap<String> map)", "testcase": false, "constructor": false}, {"identifier": "decode88591To", "parameters": "(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "modifiers": "public static", "return": "void", "signature": "void decode88591To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "full_signature": "public static void decode88591To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "class_method_signature": "UrlEncoded.decode88591To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "testcase": false, "constructor": false}, {"identifier": "decodeUtf8To", "parameters": "(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "modifiers": "public static", "return": "void", "signature": "void decodeUtf8To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "full_signature": "public static void decodeUtf8To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "class_method_signature": "UrlEncoded.decodeUtf8To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "testcase": false, "constructor": false}, {"identifier": "decodeUtf16To", "parameters": "(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "modifiers": "public static", "return": "void", "signature": "void decodeUtf16To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "full_signature": "public static void decodeUtf16To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "class_method_signature": "UrlEncoded.decodeUtf16To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)", "testcase": false, "constructor": false}, {"identifier": "decodeTo", "parameters": "(InputStream in, MultiMap<String> map, String charset, int maxLength, int maxKeys)", "modifiers": "public static", "return": "void", "signature": "void decodeTo(InputStream in, MultiMap<String> map, String charset, int maxLength, int maxKeys)", "full_signature": "public static void decodeTo(InputStream in, MultiMap<String> map, String charset, int maxLength, int maxKeys)", "class_method_signature": "UrlEncoded.decodeTo(InputStream in, MultiMap<String> map, String charset, int maxLength, int maxKeys)", "testcase": false, "constructor": false}, {"identifier": "decodeTo", "parameters": "(InputStream in, MultiMap<String> map, Charset charset, int maxLength, int maxKeys)", "modifiers": "public static", "return": "void", "signature": "void decodeTo(InputStream in, MultiMap<String> map, Charset charset, int maxLength, int maxKeys)", "full_signature": "public static void decodeTo(InputStream in, MultiMap<String> map, Charset charset, int maxLength, int maxKeys)", "class_method_signature": "UrlEncoded.decodeTo(InputStream in, MultiMap<String> map, Charset charset, int maxLength, int maxKeys)", "testcase": false, "constructor": false}, {"identifier": "decodeString", "parameters": "(String encoded)", "modifiers": "public static", "return": "String", "signature": "String decodeString(String encoded)", "full_signature": "public static String decodeString(String encoded)", "class_method_signature": "UrlEncoded.decodeString(String encoded)", "testcase": false, "constructor": false}, {"identifier": "decodeString", "parameters": "(String encoded, int offset, int length, Charset charset)", "modifiers": "public static", "return": "String", "signature": "String decodeString(String encoded, int offset, int length, Charset charset)", "full_signature": "public static String decodeString(String encoded, int offset, int length, Charset charset)", "class_method_signature": "UrlEncoded.decodeString(String encoded, int offset, int length, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "decodeHexChar", "parameters": "(int hi, int lo)", "modifiers": "private static", "return": "char", "signature": "char decodeHexChar(int hi, int lo)", "full_signature": "private static char decodeHexChar(int hi, int lo)", "class_method_signature": "UrlEncoded.decodeHexChar(int hi, int lo)", "testcase": false, "constructor": false}, {"identifier": "decodeHexByte", "parameters": "(char hi, char lo)", "modifiers": "private static", "return": "byte", "signature": "byte decodeHexByte(char hi, char lo)", "full_signature": "private static byte decodeHexByte(char hi, char lo)", "class_method_signature": "UrlEncoded.decodeHexByte(char hi, char lo)", "testcase": false, "constructor": false}, {"identifier": "encodeString", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String encodeString(String string)", "full_signature": "public static String encodeString(String string)", "class_method_signature": "UrlEncoded.encodeString(String string)", "testcase": false, "constructor": false}, {"identifier": "encodeString", "parameters": "(String string, Charset charset)", "modifiers": "public static", "return": "String", "signature": "String encodeString(String string, Charset charset)", "full_signature": "public static String encodeString(String string, Charset charset)", "class_method_signature": "UrlEncoded.encodeString(String string, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String query)", "modifiers": "public", "return": "void", "signature": "void decode(String query)", "full_signature": "public void decode(String query)", "class_method_signature": "UrlEncoded.decode(String query)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String query, Charset charset)", "modifiers": "public", "return": "void", "signature": "void decode(String query, Charset charset)", "full_signature": "public void decode(String query, Charset charset)", "class_method_signature": "UrlEncoded.decode(String query, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encode()", "full_signature": "public String encode()", "class_method_signature": "UrlEncoded.encode()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Charset charset)", "modifiers": "public", "return": "String", "signature": "String encode(Charset charset)", "full_signature": "public String encode(Charset charset)", "class_method_signature": "UrlEncoded.encode(Charset charset)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Charset charset, boolean equalsForNullValue)", "modifiers": "public", "return": "String", "signature": "String encode(Charset charset, boolean equalsForNullValue)", "full_signature": "public String encode(Charset charset, boolean equalsForNullValue)", "class_method_signature": "UrlEncoded.encode(Charset charset, boolean equalsForNullValue)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "UrlEncoded.clone()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/codec/UrlEncoded.java"}, "focal_method": {"identifier": "UrlEncoded", "parameters": "(UrlEncoded url)", "modifiers": "public", "return": "", "body": "public UrlEncoded(UrlEncoded url) {\n        super(url);\n    }", "signature": " UrlEncoded(UrlEncoded url)", "full_signature": "public  UrlEncoded(UrlEncoded url)", "class_method_signature": "UrlEncoded.UrlEncoded(UrlEncoded url)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}