{"test_class": {"identifier": "LonePairGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private LonePairGenerator generator;", "modifier": "private", "type": "LonePairGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderextra/src/test/java/org/openscience/cdk/renderer/generators/LonePairGeneratorTest.java"}, "test_case": {"identifier": "testEmptyContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyContainer() {\n        IAtomContainer emptyContainer = super.builder.newInstance(IAtomContainer.class);\n\n        // nothing should be made\n        IRenderingElement root = generator.generate(emptyContainer, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(0, elements.size());\n    }", "signature": "void testEmptyContainer()", "full_signature": "@Test public void testEmptyContainer()", "class_method_signature": "LonePairGeneratorTest.testEmptyContainer()", "testcase": true, "constructor": false, "invocations": ["newInstance", "generate", "getAllSimpleElements", "assertEquals", "size"]}, "focal_class": {"identifier": "LonePairGenerator", "superclass": "", "interfaces": "implements IGenerator<IAtomContainer>", "fields": [], "methods": [{"identifier": "LonePairGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " LonePairGenerator()", "full_signature": "public  LonePairGenerator()", "class_method_signature": "LonePairGenerator.LonePairGenerator()", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "LonePairGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "LonePairGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderextra/src/main/java/org/openscience/cdk/renderer/generators/LonePairGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IAtomContainer container, RendererModel model) {\n        ElementGroup group = new ElementGroup();\n\n        // TODO : put into RendererModel\n        final double SCREEN_RADIUS = 1.0;\n        // separation between centers\n        final double SCREEN_SEPARATION = 2.5;\n        final Color RADICAL_COLOR = Color.BLACK;\n\n        // XXX : is this the best option?\n        final double ATOM_RADIUS = ((AtomRadius) model.getParameter(AtomRadius.class)).getValue();\n\n        double scale = model.getParameter(Scale.class).getValue();\n        double modelAtomRadius = ATOM_RADIUS / scale;\n        double modelPointRadius = SCREEN_RADIUS / scale;\n        double modelSeparation = SCREEN_SEPARATION / scale;\n        for (ILonePair lonePair : container.lonePairs()) {\n            IAtom atom = lonePair.getAtom();\n            Point2d point = atom.getPoint2d();\n            int align = GeometryUtil.getBestAlignmentForLabelXY(container, atom);\n            double xRadius = point.x;\n            double yRadius = point.y;\n            double diffx = 0;\n            double diffy = 0;\n            if (align == 1) {\n                xRadius += modelAtomRadius;\n                diffy += modelSeparation;\n            } else if (align == -1) {\n                xRadius -= modelAtomRadius;\n                diffy += modelSeparation;\n            } else if (align == 2) {\n                yRadius -= modelAtomRadius;\n                diffx += modelSeparation;\n            } else if (align == -2) {\n                yRadius += modelAtomRadius;\n                diffx += modelSeparation;\n            }\n            group.add(new OvalElement(xRadius + diffx, yRadius + diffy, modelPointRadius, true, RADICAL_COLOR));\n            group.add(new OvalElement(xRadius - diffx, yRadius - diffy, modelPointRadius, true, RADICAL_COLOR));\n        }\n        return group;\n    }", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "LonePairGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getValue", "getParameter", "getValue", "getParameter", "lonePairs", "getAtom", "getPoint2d", "getBestAlignmentForLabelXY", "add", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}