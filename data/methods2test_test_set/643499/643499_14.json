{"test_class": {"identifier": "MatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "CodeSmells/src/matcher/MatcherTest.java"}, "test_case": {"identifier": "testMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMatch() {\n\t\tMatcher matcher = new Matcher();\n\n\t\tint[] expected = new int[] { 10, 50, 30, 98 };\n\t\tint clipLimit = 100;\n\t\tint delta = 5;\n\n\t\tint[] actual = new int[] { 12, 55, 25, 110 };\n\n\t\tassertTrue(matcher.match(expected, actual, clipLimit, delta));\n\n\t\tactual = new int[] { 10, 60, 30, 98 };\n\t\tassertTrue(!matcher.match(expected, actual, clipLimit, delta));\n\n\t\tactual = new int[] { 10, 50, 30 };\n\t\tassertTrue(!matcher.match(expected, actual, clipLimit, delta));\n\t}", "signature": "void testMatch()", "full_signature": "@Test public void testMatch()", "class_method_signature": "MatcherTest.testMatch()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "match", "assertTrue", "match", "assertTrue", "match"]}, "focal_class": {"identifier": "Matcher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Matcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " Matcher()", "full_signature": "public  Matcher()", "class_method_signature": "Matcher.Matcher()", "testcase": false, "constructor": true}, {"identifier": "match", "parameters": "(int[] expected, int[] actual, \n        int clipLimit, int delta)", "modifiers": "public", "return": "boolean", "signature": "boolean match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "full_signature": "public boolean match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "class_method_signature": "Matcher.match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "testcase": false, "constructor": false}], "file": "CodeSmells/src/matcher/Matcher.java"}, "focal_method": {"identifier": "match", "parameters": "(int[] expected, int[] actual, \n        int clipLimit, int delta)", "modifiers": "public", "return": "boolean", "body": "public boolean match(int[] expected, int[] actual, \n        int clipLimit, int delta) \n    {\n\n        // Clip \"too-large\" values\n        for (int i = 0; i < actual.length; i++)\n            if (actual[i] > clipLimit)\n                actual[i] = clipLimit;\n\n        // Check for length differences\n        if (actual.length != expected.length)\n            return false;\n\n        // Check that each entry within expected +/- delta\n        for (int i = 0; i < actual.length; i++)\n            if (Math.abs(expected[i] - actual[i]) > delta)\n                return false;\n\n        return true;\n    }", "signature": "boolean match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "full_signature": "public boolean match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "class_method_signature": "Matcher.match(int[] expected, int[] actual, \n        int clipLimit, int delta)", "testcase": false, "constructor": false, "invocations": ["abs"]}, "repository": {"repo_id": 643499, "url": "https://github.com/unclebob/Welc", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 210, "license": "licensed"}}