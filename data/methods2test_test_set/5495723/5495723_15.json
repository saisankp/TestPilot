{"test_class": {"identifier": "OsInfoProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LINUX = \"Linux\";", "modifier": "private static final", "type": "String", "declarator": "LINUX = \"Linux\"", "var_name": "LINUX"}, {"original_string": "private static final String MAC = \"MacOs\";", "modifier": "private static final", "type": "String", "declarator": "MAC = \"MacOs\"", "var_name": "MAC"}, {"original_string": "private static final String WIN = \"Windows\";", "modifier": "private static final", "type": "String", "declarator": "WIN = \"Windows\"", "var_name": "WIN"}, {"original_string": "private static final Map<String, String> SUPPORTED = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "SUPPORTED = new HashMap<>()", "var_name": "SUPPORTED"}, {"original_string": "private static final String[] UNSUPPORTED = {\n\t\t\"OS/2\",\n\t\t\"Solaris\",\n\t\t\"SunOS\",\n\t\t\"MPE/iX\",\n\t\t\"HP-UX\",\n\t\t\"AIX\",\n\t\t\"OS/390\",\n\t\t\"FreeBSD\",\n\t\t\"Irix\",\n\t\t\"Digital Unix\",\n\t\t\"NetWare 4.11\",\n\t\t\"OSF1\",\n\t\t\"OpenVMS\",\n\t};", "modifier": "private static final", "type": "String[]", "declarator": "UNSUPPORTED = {\n\t\t\"OS/2\",\n\t\t\"Solaris\",\n\t\t\"SunOS\",\n\t\t\"MPE/iX\",\n\t\t\"HP-UX\",\n\t\t\"AIX\",\n\t\t\"OS/390\",\n\t\t\"FreeBSD\",\n\t\t\"Irix\",\n\t\t\"Digital Unix\",\n\t\t\"NetWare 4.11\",\n\t\t\"OSF1\",\n\t\t\"OpenVMS\",\n\t}", "var_name": "UNSUPPORTED"}], "file": "de.prob2.kernel/src/test/java/de/prob/cli/OsInfoProviderTest.java"}, "test_case": {"identifier": "testSupportedOS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSupportedOS() {\n\t\tSUPPORTED.forEach((key, value) -> assertEquals(value, new OsInfoProvider(key, \"i386\").get().getName()));\n\t}", "signature": "void testSupportedOS()", "full_signature": "@Test public void testSupportedOS()", "class_method_signature": "OsInfoProviderTest.testSupportedOS()", "testcase": true, "constructor": false, "invocations": ["forEach", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "OsInfoProvider", "superclass": "", "interfaces": "implements Provider<OsSpecificInfo>", "fields": [{"original_string": "private final OsSpecificInfo osInfo;", "modifier": "private final", "type": "OsSpecificInfo", "declarator": "osInfo", "var_name": "osInfo"}], "methods": [{"identifier": "OsInfoProvider", "parameters": "(@OsName final String osString, @OsArch final String osArch)", "modifiers": "@Inject public", "return": "", "signature": " OsInfoProvider(@OsName final String osString, @OsArch final String osArch)", "full_signature": "@Inject public  OsInfoProvider(@OsName final String osString, @OsArch final String osArch)", "class_method_signature": "OsInfoProvider.OsInfoProvider(@OsName final String osString, @OsArch final String osArch)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "OsSpecificInfo", "signature": "OsSpecificInfo get()", "full_signature": "@Override public OsSpecificInfo get()", "class_method_signature": "OsInfoProvider.get()", "testcase": false, "constructor": false}, {"identifier": "whichOs", "parameters": "(final String osString, final String osArch)", "modifiers": "private", "return": "OsSpecificInfo", "signature": "OsSpecificInfo whichOs(final String osString, final String osArch)", "full_signature": "private OsSpecificInfo whichOs(final String osString, final String osArch)", "class_method_signature": "OsInfoProvider.whichOs(final String osString, final String osArch)", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/cli/OsInfoProvider.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "OsSpecificInfo", "body": "@Override\n\tpublic OsSpecificInfo get() {\n\t\treturn osInfo;\n\t}", "signature": "OsSpecificInfo get()", "full_signature": "@Override public OsSpecificInfo get()", "class_method_signature": "OsInfoProvider.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}