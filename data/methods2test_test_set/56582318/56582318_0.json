{"test_class": {"identifier": "TaskManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-util/src/test/java/fr/ign/cogit/geoxygene/appli/task/TaskManagerTest.java"}, "test_case": {"identifier": "testStartAndWait", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartAndWait() {\n        FakeTask task = new FakeTask(\"fake task 0\", 100, 10);\n        Assert.assertEquals(TaskState.WAITING, task.getState());\n        try {\n            TaskManager.startAndWait(task);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            Assert.assertTrue(\"exception thrown : \" + e.getMessage(), false);\n        }\n        Assert.assertEquals(TaskState.FINISHED, task.getState());\n        Assert.assertEquals(1., task.getProgress());\n        Assert.assertEquals(0, task.getTaskListenerCount());\n\n    }", "signature": "void testStartAndWait()", "full_signature": "@Test public void testStartAndWait()", "class_method_signature": "TaskManagerTest.testStartAndWait()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getState", "startAndWait", "printStackTrace", "assertTrue", "getMessage", "assertEquals", "getState", "assertEquals", "getProgress", "assertEquals", "getTaskListenerCount"]}, "focal_class": {"identifier": "TaskManager", "superclass": "", "interfaces": "implements TaskListener<Task>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(TaskManager.class\n            .getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(TaskManager.class\n            .getName())", "var_name": "logger"}, {"original_string": "private static final boolean debug = false;", "modifier": "private static final", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private static final TaskManagerListener[] DUMMYTASKMANAGERLISTENERARRAY = new TaskManagerListener[] {};", "modifier": "private static final", "type": "TaskManagerListener[]", "declarator": "DUMMYTASKMANAGERLISTENERARRAY = new TaskManagerListener[] {}", "var_name": "DUMMYTASKMANAGERLISTENERARRAY"}, {"original_string": "private final Object taskLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "taskLock = new Object()", "var_name": "taskLock"}, {"original_string": "private final Queue<Task> pendingTasks = new LinkedList<Task>();", "modifier": "private final", "type": "Queue<Task>", "declarator": "pendingTasks = new LinkedList<Task>()", "var_name": "pendingTasks"}, {"original_string": "private final Map<Thread, Task> runningTasks = new HashMap<Thread, Task>();", "modifier": "private final", "type": "Map<Thread, Task>", "declarator": "runningTasks = new HashMap<Thread, Task>()", "var_name": "runningTasks"}, {"original_string": "private final Map<Task, Date> removedTasks = new HashMap<Task, Date>();", "modifier": "private final", "type": "Map<Task, Date>", "declarator": "removedTasks = new HashMap<Task, Date>()", "var_name": "removedTasks"}, {"original_string": "private final Set<TaskManagerListener> listeners = new HashSet<TaskManagerListener>();", "modifier": "private final", "type": "Set<TaskManagerListener>", "declarator": "listeners = new HashSet<TaskManagerListener>()", "var_name": "listeners"}, {"original_string": "private Thread.UncaughtExceptionHandler uncaughtExceptionHandler = null;", "modifier": "private", "type": "Thread.UncaughtExceptionHandler", "declarator": "uncaughtExceptionHandler = null", "var_name": "uncaughtExceptionHandler"}, {"original_string": "private int maximumRunningThreadNumber = 10;", "modifier": "private", "type": "int", "declarator": "maximumRunningThreadNumber = 10", "var_name": "maximumRunningThreadNumber"}], "methods": [{"identifier": "TaskManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " TaskManager()", "full_signature": "public  TaskManager()", "class_method_signature": "TaskManager.TaskManager()", "testcase": false, "constructor": true}, {"identifier": "getMaximumRunningThreadNumber", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximumRunningThreadNumber()", "full_signature": "public int getMaximumRunningThreadNumber()", "class_method_signature": "TaskManager.getMaximumRunningThreadNumber()", "testcase": false, "constructor": false}, {"identifier": "setMaximumRunningThreadNumber", "parameters": "(int maximumRunningThreadNumber)", "modifiers": "public", "return": "void", "signature": "void setMaximumRunningThreadNumber(int maximumRunningThreadNumber)", "full_signature": "public void setMaximumRunningThreadNumber(int maximumRunningThreadNumber)", "class_method_signature": "TaskManager.setMaximumRunningThreadNumber(int maximumRunningThreadNumber)", "testcase": false, "constructor": false}, {"identifier": "addTask", "parameters": "(final Task task)", "modifiers": "public", "return": "boolean", "signature": "boolean addTask(final Task task)", "full_signature": "public boolean addTask(final Task task)", "class_method_signature": "TaskManager.addTask(final Task task)", "testcase": false, "constructor": false}, {"identifier": "tryToStartTasks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void tryToStartTasks()", "full_signature": "private void tryToStartTasks()", "class_method_signature": "TaskManager.tryToStartTasks()", "testcase": false, "constructor": false}, {"identifier": "removeRunningTask", "parameters": "(final Task task)", "modifiers": "public", "return": "boolean", "signature": "boolean removeRunningTask(final Task task)", "full_signature": "public boolean removeRunningTask(final Task task)", "class_method_signature": "TaskManager.removeRunningTask(final Task task)", "testcase": false, "constructor": false}, {"identifier": "getPendingTaskCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPendingTaskCount()", "full_signature": "public int getPendingTaskCount()", "class_method_signature": "TaskManager.getPendingTaskCount()", "testcase": false, "constructor": false}, {"identifier": "getRunningTaskCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRunningTaskCount()", "full_signature": "public int getRunningTaskCount()", "class_method_signature": "TaskManager.getRunningTaskCount()", "testcase": false, "constructor": false}, {"identifier": "onStateChange", "parameters": "(Task task, TaskState oldState)", "modifiers": "@Override public", "return": "void", "signature": "void onStateChange(Task task, TaskState oldState)", "full_signature": "@Override public void onStateChange(Task task, TaskState oldState)", "class_method_signature": "TaskManager.onStateChange(Task task, TaskState oldState)", "testcase": false, "constructor": false}, {"identifier": "fireTaskAdded", "parameters": "(Task task)", "modifiers": "private", "return": "void", "signature": "void fireTaskAdded(Task task)", "full_signature": "private void fireTaskAdded(Task task)", "class_method_signature": "TaskManager.fireTaskAdded(Task task)", "testcase": false, "constructor": false}, {"identifier": "fireTaskStarted", "parameters": "(Task task)", "modifiers": "private", "return": "void", "signature": "void fireTaskStarted(Task task)", "full_signature": "private void fireTaskStarted(Task task)", "class_method_signature": "TaskManager.fireTaskStarted(Task task)", "testcase": false, "constructor": false}, {"identifier": "fireTaskRemoved", "parameters": "(Task task)", "modifiers": "private", "return": "void", "signature": "void fireTaskRemoved(Task task)", "full_signature": "private void fireTaskRemoved(Task task)", "class_method_signature": "TaskManager.fireTaskRemoved(Task task)", "testcase": false, "constructor": false}, {"identifier": "addTaskManagerListener", "parameters": "(TaskManagerListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean addTaskManagerListener(TaskManagerListener listener)", "full_signature": "public boolean addTaskManagerListener(TaskManagerListener listener)", "class_method_signature": "TaskManager.addTaskManagerListener(TaskManagerListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeTaskManagerListener", "parameters": "(TaskManagerListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeTaskManagerListener(TaskManagerListener listener)", "full_signature": "public boolean removeTaskManagerListener(TaskManagerListener listener)", "class_method_signature": "TaskManager.removeTaskManagerListener(TaskManagerListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeAllTaskManagers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAllTaskManagers()", "full_signature": "public void removeAllTaskManagers()", "class_method_signature": "TaskManager.removeAllTaskManagers()", "testcase": false, "constructor": false}, {"identifier": "startAndWait", "parameters": "(final Task task)", "modifiers": "public static", "return": "void", "signature": "void startAndWait(final Task task)", "full_signature": "public static void startAndWait(final Task task)", "class_method_signature": "TaskManager.startAndWait(final Task task)", "testcase": false, "constructor": false}, {"identifier": "waitForCompletion", "parameters": "(final Task task)", "modifiers": "public static", "return": "void", "signature": "void waitForCompletion(final Task task)", "full_signature": "public static void waitForCompletion(final Task task)", "class_method_signature": "TaskManager.waitForCompletion(final Task task)", "testcase": false, "constructor": false}], "file": "geoxygene-util/src/main/java/fr/ign/cogit/geoxygene/appli/task/TaskManager.java"}, "focal_method": {"identifier": "startAndWait", "parameters": "(final Task task)", "modifiers": "public static", "return": "void", "body": "public static void startAndWait(final Task task)\n            throws InterruptedException {\n        if (task == null) {\n            return;\n        }\n        TaskTerminationWaiter taskTerminationWaiter = new TaskTerminationWaiter(\n                task);\n        task.addTaskListener(taskTerminationWaiter);\n        if (task.getState().isRunning() == false) {\n            task.start(new Thread.UncaughtExceptionHandler() {\n                @Override\n                public void uncaughtException(Thread th, Throwable ex) {\n                    logger.error(\"Uncaught exception from task \"\n                            + task.getName() + \": \" + ex);\n                    ex.printStackTrace();\n                }\n            });\n        }\n        while (task.getState().isRunning()\n                || task.getState() == TaskState.WAITING) {\n            synchronized (task) {\n                task.wait(100);\n            }\n        }\n        task.removeTaskListener(taskTerminationWaiter);\n\n    }", "signature": "void startAndWait(final Task task)", "full_signature": "public static void startAndWait(final Task task)", "class_method_signature": "TaskManager.startAndWait(final Task task)", "testcase": false, "constructor": false, "invocations": ["addTaskListener", "isRunning", "getState", "start", "error", "getName", "printStackTrace", "isRunning", "getState", "getState", "wait", "removeTaskListener"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}