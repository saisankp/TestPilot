{"test_class": {"identifier": "ByteAccumulatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/extension/compress/ByteAccumulatorTest.java"}, "test_case": {"identifier": "testCopyChunkNotEnoughSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopyChunkNotEnoughSpace() {\n        byte[] hello = \"Hello\".getBytes(UTF_8);\n        byte[] space = \" \".getBytes(UTF_8);\n        byte[] world = \"World\".getBytes(UTF_8);\n\n        int length = hello.length + space.length + world.length;\n        ByteAccumulator accumulator = new ByteAccumulator(length - 2); // intentionally too small of a max\n\n        accumulator.copyChunk(hello, 0, hello.length);\n        accumulator.copyChunk(space, 0, space.length);\n\n        MessageTooLargeException e = assertThrows(MessageTooLargeException.class, () -> accumulator.copyChunk(world, 0, world.length));\n        System.out.println(e.getMessage());\n        assertTrue(e.getMessage().contains(\"too large for configured max\"));\n    }", "signature": "void testCopyChunkNotEnoughSpace()", "full_signature": "@Test public void testCopyChunkNotEnoughSpace()", "class_method_signature": "ByteAccumulatorTest.testCopyChunkNotEnoughSpace()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "getBytes", "copyChunk", "copyChunk", "assertThrows", "copyChunk", "println", "getMessage", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "ByteAccumulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<byte[]> chunks = new ArrayList<>();", "modifier": "private final", "type": "List<byte[]>", "declarator": "chunks = new ArrayList<>()", "var_name": "chunks"}, {"original_string": "private final int maxSize;", "modifier": "private final", "type": "int", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private int length = 0;", "modifier": "private", "type": "int", "declarator": "length = 0", "var_name": "length"}], "methods": [{"identifier": "ByteAccumulator", "parameters": "(int maxOverallBufferSize)", "modifiers": "public", "return": "", "signature": " ByteAccumulator(int maxOverallBufferSize)", "full_signature": "public  ByteAccumulator(int maxOverallBufferSize)", "class_method_signature": "ByteAccumulator.ByteAccumulator(int maxOverallBufferSize)", "testcase": false, "constructor": true}, {"identifier": "copyChunk", "parameters": "(byte[] buf, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void copyChunk(byte[] buf, int offset, int length)", "full_signature": "public void copyChunk(byte[] buf, int offset, int length)", "class_method_signature": "ByteAccumulator.copyChunk(byte[] buf, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLength()", "full_signature": "public int getLength()", "class_method_signature": "ByteAccumulator.getLength()", "testcase": false, "constructor": false}, {"identifier": "transferTo", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void transferTo(ByteBuffer buffer)", "full_signature": "public void transferTo(ByteBuffer buffer)", "class_method_signature": "ByteAccumulator.transferTo(ByteBuffer buffer)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/extension/compress/ByteAccumulator.java"}, "focal_method": {"identifier": "copyChunk", "parameters": "(byte[] buf, int offset, int length)", "modifiers": "public", "return": "void", "body": "public void copyChunk(byte[] buf, int offset, int length) {\n        if (this.length + length > maxSize) {\n            String err = String.format(\"Resulting message size [%,d] is too large for configured max of [%,d]\", this.length + length, maxSize);\n            throw new MessageTooLargeException(err);\n        }\n\n        byte[] copy = new byte[length - offset];\n        System.arraycopy(buf, offset, copy, 0, length);\n\n        chunks.add(copy);\n        this.length += length;\n    }", "signature": "void copyChunk(byte[] buf, int offset, int length)", "full_signature": "public void copyChunk(byte[] buf, int offset, int length)", "class_method_signature": "ByteAccumulator.copyChunk(byte[] buf, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["format", "arraycopy", "add"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}