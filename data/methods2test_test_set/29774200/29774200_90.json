{"test_class": {"identifier": "HudsonPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/hudson/HudsonPluginTest.java"}, "test_case": {"identifier": "should_throw_exception_when_passing_null_to_hudson_instance", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void should_throw_exception_when_passing_null_to_hudson_instance() throws SoftwareNotFoundException {\n        new HudsonPlugin().getSoftwareId(null, properties);\n    }", "signature": "void should_throw_exception_when_passing_null_to_hudson_instance()", "full_signature": "@Test(expected = NullPointerException.class) public void should_throw_exception_when_passing_null_to_hudson_instance()", "class_method_signature": "HudsonPluginTest.should_throw_exception_when_passing_null_to_hudson_instance()", "testcase": true, "constructor": false, "invocations": ["getSoftwareId"]}, "focal_class": {"identifier": "HudsonPlugin", "superclass": "", "interfaces": "implements VisuwallPlugin<HudsonConnection>", "fields": [], "methods": [{"identifier": "getConnection", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "HudsonConnection", "signature": "HudsonConnection getConnection(URL url, Map<String, String> properties)", "full_signature": "@Override public HudsonConnection getConnection(URL url, Map<String, String> properties)", "class_method_signature": "HudsonPlugin.getConnection(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "getConnectionClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<HudsonConnection>", "signature": "Class<HudsonConnection> getConnectionClass()", "full_signature": "@Override public Class<HudsonConnection> getConnectionClass()", "class_method_signature": "HudsonPlugin.getConnectionClass()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "HudsonPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "HudsonPlugin.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "HudsonPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HudsonPlugin.toString()", "testcase": false, "constructor": false}, {"identifier": "createSoftwareId", "parameters": "(String xml)", "modifiers": "private", "return": "SoftwareId", "signature": "SoftwareId createSoftwareId(String xml)", "full_signature": "private SoftwareId createSoftwareId(String xml)", "class_method_signature": "HudsonPlugin.createSoftwareId(String xml)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(String xml)", "modifiers": "private", "return": "String", "signature": "String getVersion(String xml)", "full_signature": "private String getVersion(String xml)", "class_method_signature": "HudsonPlugin.getVersion(String xml)", "testcase": false, "constructor": false}, {"identifier": "isManageable", "parameters": "(String xml)", "modifiers": "private", "return": "boolean", "signature": "boolean isManageable(String xml)", "full_signature": "private boolean isManageable(String xml)", "class_method_signature": "HudsonPlugin.isManageable(String xml)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String getContent(URL url)", "full_signature": "private String getContent(URL url)", "class_method_signature": "HudsonPlugin.getContent(URL url)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesWithDefaultValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getPropertiesWithDefaultValue()", "full_signature": "@Override public Map<String, String> getPropertiesWithDefaultValue()", "class_method_signature": "HudsonPlugin.getPropertiesWithDefaultValue()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/hudson/HudsonPlugin.java"}, "focal_method": {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "body": "@Override\n    public SoftwareId getSoftwareId(URL url, Map<String, String> properties) throws SoftwareNotFoundException {\n        Preconditions.checkNotNull(url, \"url is mandatory\");\n        try {\n            URL apiUrl = new URL(url.toString() + \"/api/\");\n            String xml = getContent(apiUrl);\n            if (isManageable(xml)) {\n                return createSoftwareId(xml);\n            }\n            throw new SoftwareNotFoundException(\"Url \" + url + \" is not compatible with Hudson, content: \" + xml);\n        } catch (MalformedURLException e) {\n            throw new SoftwareNotFoundException(\"Url \" + url + \" is not compatible with Hudson\", e);\n        } catch (IOException e) {\n            throw new SoftwareNotFoundException(\"Url \" + url + \" is not compatible with Hudson\", e);\n        }\n    }", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "HudsonPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "toString", "getContent", "isManageable", "createSoftwareId"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}