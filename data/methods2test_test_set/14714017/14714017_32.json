{"test_class": {"identifier": "DAFileWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final DAName PACKAGE_NAME = DANameFactory.from(\"com.acme.toto\");", "modifier": "public static final", "type": "DAName", "declarator": "PACKAGE_NAME = DANameFactory.from(\"com.acme.toto\")", "var_name": "PACKAGE_NAME"}], "file": "core-parent/core/src/test/java/fr/javatronic/damapping/processor/sourcegenerator/writer/DAFileWriterTest.java"}, "test_case": {"identifier": "package_only", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void package_only() throws Exception {\n    FileContextTestImpl fileContext = new FileContextTestImpl();\n    new DAFileWriter(fileContext.getWriter()).appendPackage(PACKAGE_NAME);\n\n    assertThat(fileContext.getRes()).isEqualTo(\n        \"package com.acme.toto;\" + LINE_SEPARATOR + LINE_SEPARATOR\n    );\n  }", "signature": "void package_only()", "full_signature": "@Test public void package_only()", "class_method_signature": "DAFileWriterTest.package_only()", "testcase": true, "constructor": false, "invocations": ["appendPackage", "getWriter", "isEqualTo", "assertThat", "getRes"]}, "focal_class": {"identifier": "DAFileWriter", "superclass": "", "interfaces": "implements DAWriter", "fields": [{"original_string": "private static final Predicate<DAName> NOT_JAVALANG_DANAME = Predicates.not(DANamePredicates.isJavaLangType());", "modifier": "private static final", "type": "Predicate<DAName>", "declarator": "NOT_JAVALANG_DANAME = Predicates.not(DANamePredicates.isJavaLangType())", "var_name": "NOT_JAVALANG_DANAME"}, {"original_string": "private final BufferedWriter writer;", "modifier": "private final", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "@Nullable\n  private DAName packageName;", "modifier": "@Nullable\n  private", "type": "DAName", "declarator": "packageName", "var_name": "packageName"}, {"original_string": "@Nullable\n  private Set<DAName> importQualifiedNames;", "modifier": "@Nullable\n  private", "type": "Set<DAName>", "declarator": "importQualifiedNames", "var_name": "importQualifiedNames"}, {"original_string": "@Nullable\n  private Set<DAName> importSimpleNames;", "modifier": "@Nullable\n  private", "type": "Set<DAName>", "declarator": "importSimpleNames", "var_name": "importSimpleNames"}], "methods": [{"identifier": "DAFileWriter", "parameters": "(BufferedWriter writer)", "modifiers": "public", "return": "", "signature": " DAFileWriter(BufferedWriter writer)", "full_signature": "public  DAFileWriter(BufferedWriter writer)", "class_method_signature": "DAFileWriter.DAFileWriter(BufferedWriter writer)", "testcase": false, "constructor": true}, {"identifier": "appendPackage", "parameters": "(@Nonnull DAName packageName)", "modifiers": "public", "return": "DAFileWriter", "signature": "DAFileWriter appendPackage(@Nonnull DAName packageName)", "full_signature": "public DAFileWriter appendPackage(@Nonnull DAName packageName)", "class_method_signature": "DAFileWriter.appendPackage(@Nonnull DAName packageName)", "testcase": false, "constructor": false}, {"identifier": "appendImports", "parameters": "(@Nonnull Collection<DAImport> mapperImports)", "modifiers": "public", "return": "DAFileWriter", "signature": "DAFileWriter appendImports(@Nonnull Collection<DAImport> mapperImports)", "full_signature": "public DAFileWriter appendImports(@Nonnull Collection<DAImport> mapperImports)", "class_method_signature": "DAFileWriter.appendImports(@Nonnull Collection<DAImport> mapperImports)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicatesFilterJavaLangAndSortImports", "parameters": "(Collection<DAImport> mapperImports)", "modifiers": "private", "return": "List<DAName>", "signature": "List<DAName> removeDuplicatesFilterJavaLangAndSortImports(Collection<DAImport> mapperImports)", "full_signature": "private List<DAName> removeDuplicatesFilterJavaLangAndSortImports(Collection<DAImport> mapperImports)", "class_method_signature": "DAFileWriter.removeDuplicatesFilterJavaLangAndSortImports(Collection<DAImport> mapperImports)", "testcase": false, "constructor": false}, {"identifier": "appendGeneratedAnnotation", "parameters": "(@Nonnull Class<? extends Processor> processClass)", "modifiers": "public", "return": "DAFileWriter", "signature": "DAFileWriter appendGeneratedAnnotation(@Nonnull Class<? extends Processor> processClass)", "full_signature": "public DAFileWriter appendGeneratedAnnotation(@Nonnull Class<? extends Processor> processClass)", "class_method_signature": "DAFileWriter.appendGeneratedAnnotation(@Nonnull Class<? extends Processor> processClass)", "testcase": false, "constructor": false}, {"identifier": "appendGeneratedAnnotation", "parameters": "(@Nonnull String annotationProcessorQualifiedName)", "modifiers": "public", "return": "DAFileWriter", "signature": "DAFileWriter appendGeneratedAnnotation(@Nonnull String annotationProcessorQualifiedName)", "full_signature": "public DAFileWriter appendGeneratedAnnotation(@Nonnull String annotationProcessorQualifiedName)", "class_method_signature": "DAFileWriter.appendGeneratedAnnotation(@Nonnull String annotationProcessorQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "newClass", "parameters": "(DAType classType)", "modifiers": "public", "return": "DAClassWriter<DAFileWriter>", "signature": "DAClassWriter<DAFileWriter> newClass(DAType classType)", "full_signature": "public DAClassWriter<DAFileWriter> newClass(DAType classType)", "class_method_signature": "DAFileWriter.newClass(DAType classType)", "testcase": false, "constructor": false}, {"identifier": "newInterface", "parameters": "(String name)", "modifiers": "public", "return": "DAInterfaceWriter<DAFileWriter>", "signature": "DAInterfaceWriter<DAFileWriter> newInterface(String name)", "full_signature": "public DAInterfaceWriter<DAFileWriter> newInterface(String name)", "class_method_signature": "DAFileWriter.newInterface(String name)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void end()", "full_signature": "public void end()", "class_method_signature": "DAFileWriter.end()", "testcase": false, "constructor": false}], "file": "core-parent/core/src/main/java/fr/javatronic/damapping/processor/sourcegenerator/writer/DAFileWriter.java"}, "focal_method": {"identifier": "appendPackage", "parameters": "(@Nonnull DAName packageName)", "modifiers": "public", "return": "DAFileWriter", "body": "public DAFileWriter appendPackage(@Nonnull DAName packageName) throws IOException {\n    this.packageName = checkNotNull(packageName, \"PackageName can not be null\");\n    if (packageName.length() > 0) {\n      writer.append(\"package \").append(packageName).append(\";\");\n      writer.newLine();\n      writer.newLine();\n    }\n    return this;\n  }", "signature": "DAFileWriter appendPackage(@Nonnull DAName packageName)", "full_signature": "public DAFileWriter appendPackage(@Nonnull DAName packageName)", "class_method_signature": "DAFileWriter.appendPackage(@Nonnull DAName packageName)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "length", "append", "append", "append", "newLine", "newLine"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}