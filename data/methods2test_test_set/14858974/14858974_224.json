{"test_class": {"identifier": "PromotionReportViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/webapp/views/PromotionReportViewTest.java"}, "test_case": {"identifier": "testNullRootModuleIsNPESafe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNullRootModuleIsNPESafe() {\n        PromotionReportView sut = new PromotionReportView();\n        sut.compute();\n\n        // NO NPE being thrown\n    }", "signature": "void testNullRootModuleIsNPESafe()", "full_signature": "@Test public void testNullRootModuleIsNPESafe()", "class_method_signature": "PromotionReportViewTest.testNullRootModuleIsNPESafe()", "testcase": true, "constructor": false, "invocations": ["compute"]}, "focal_class": {"identifier": "PromotionReportView", "superclass": "extends View", "interfaces": "", "fields": [{"original_string": "private Module rootModule;", "modifier": "private", "type": "Module", "declarator": "rootModule", "var_name": "rootModule"}, {"original_string": "private List<String> unPromotedDependencies = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "unPromotedDependencies = new ArrayList<>()", "var_name": "unPromotedDependencies"}, {"original_string": "private Map<String, PromotionReportView> dependencyReports = new HashMap<>();", "modifier": "private", "type": "Map<String, PromotionReportView>", "declarator": "dependencyReports = new HashMap<>()", "var_name": "dependencyReports"}, {"original_string": "private Map<Artifact, Comment> doNotUseArtifacts = new HashMap<>();", "modifier": "private", "type": "Map<Artifact, Comment>", "declarator": "doNotUseArtifacts = new HashMap<>()", "var_name": "doNotUseArtifacts"}, {"original_string": "private Map<String, List<String>> mismatchVersions = new HashMap<>();", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "mismatchVersions = new HashMap<>()", "var_name": "mismatchVersions"}, {"original_string": "private List<Artifact> missingLicenses = new ArrayList<>();", "modifier": "private", "type": "List<Artifact>", "declarator": "missingLicenses = new ArrayList<>()", "var_name": "missingLicenses"}, {"original_string": "private Map<String, String> dependenciesWithNotAcceptedLicenses = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "dependenciesWithNotAcceptedLicenses = new HashMap<>()", "var_name": "dependenciesWithNotAcceptedLicenses"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PromotionReportView.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PromotionReportView.class)", "var_name": "LOG"}], "methods": [{"identifier": "PromotionReportView", "parameters": "()", "modifiers": "public", "return": "", "signature": " PromotionReportView()", "full_signature": "public  PromotionReportView()", "class_method_signature": "PromotionReportView.PromotionReportView()", "testcase": false, "constructor": true}, {"identifier": "getRootModule", "parameters": "()", "modifiers": "public", "return": "Module", "signature": "Module getRootModule()", "full_signature": "public Module getRootModule()", "class_method_signature": "PromotionReportView.getRootModule()", "testcase": false, "constructor": false}, {"identifier": "setRootModule", "parameters": "(final Module rootModule)", "modifiers": "public", "return": "void", "signature": "void setRootModule(final Module rootModule)", "full_signature": "public void setRootModule(final Module rootModule)", "class_method_signature": "PromotionReportView.setRootModule(final Module rootModule)", "testcase": false, "constructor": false}, {"identifier": "addUnPromotedDependency", "parameters": "(final String dependencyId)", "modifiers": "public", "return": "void", "signature": "void addUnPromotedDependency(final String dependencyId)", "full_signature": "public void addUnPromotedDependency(final String dependencyId)", "class_method_signature": "PromotionReportView.addUnPromotedDependency(final String dependencyId)", "testcase": false, "constructor": false}, {"identifier": "getUnPromotedDependencies", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getUnPromotedDependencies()", "full_signature": "public List<String> getUnPromotedDependencies()", "class_method_signature": "PromotionReportView.getUnPromotedDependencies()", "testcase": false, "constructor": false}, {"identifier": "addDependencyPromotionReport", "parameters": "(final String moduleId, final PromotionReportView report)", "modifiers": "public", "return": "void", "signature": "void addDependencyPromotionReport(final String moduleId, final PromotionReportView report)", "full_signature": "public void addDependencyPromotionReport(final String moduleId, final PromotionReportView report)", "class_method_signature": "PromotionReportView.addDependencyPromotionReport(final String moduleId, final PromotionReportView report)", "testcase": false, "constructor": false}, {"identifier": "getTargetedDependencyReport", "parameters": "(final String moduleId)", "modifiers": "public", "return": "PromotionReportView", "signature": "PromotionReportView getTargetedDependencyReport(final String moduleId)", "full_signature": "public PromotionReportView getTargetedDependencyReport(final String moduleId)", "class_method_signature": "PromotionReportView.getTargetedDependencyReport(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "getDoNotUseArtifacts", "parameters": "()", "modifiers": "public", "return": "Map<Artifact, Comment>", "signature": "Map<Artifact, Comment> getDoNotUseArtifacts()", "full_signature": "public Map<Artifact, Comment> getDoNotUseArtifacts()", "class_method_signature": "PromotionReportView.getDoNotUseArtifacts()", "testcase": false, "constructor": false}, {"identifier": "addDoNotUseArtifact", "parameters": "(final Artifact doNotUseArtifact, final Comment comment)", "modifiers": "public", "return": "void", "signature": "void addDoNotUseArtifact(final Artifact doNotUseArtifact, final Comment comment)", "full_signature": "public void addDoNotUseArtifact(final Artifact doNotUseArtifact, final Comment comment)", "class_method_signature": "PromotionReportView.addDoNotUseArtifact(final Artifact doNotUseArtifact, final Comment comment)", "testcase": false, "constructor": false}, {"identifier": "getReportsWithDoNotUseArtifacts", "parameters": "()", "modifiers": "public", "return": "List<PromotionReportView>", "signature": "List<PromotionReportView> getReportsWithDoNotUseArtifacts()", "full_signature": "public List<PromotionReportView> getReportsWithDoNotUseArtifacts()", "class_method_signature": "PromotionReportView.getReportsWithDoNotUseArtifacts()", "testcase": false, "constructor": false}, {"identifier": "isSnapshot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshot()", "full_signature": "public boolean isSnapshot()", "class_method_signature": "PromotionReportView.isSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getMisMatchModules", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getMisMatchModules()", "full_signature": "public Set<String> getMisMatchModules()", "class_method_signature": "PromotionReportView.getMisMatchModules()", "testcase": false, "constructor": false}, {"identifier": "getMisMatchVersions", "parameters": "(final String moduleName)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getMisMatchVersions(final String moduleName)", "full_signature": "public List<String> getMisMatchVersions(final String moduleName)", "class_method_signature": "PromotionReportView.getMisMatchVersions(final String moduleName)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compute()", "full_signature": "public void compute()", "class_method_signature": "PromotionReportView.compute()", "testcase": false, "constructor": false}, {"identifier": "getAllDependencyReport", "parameters": "()", "modifiers": "private", "return": "List<PromotionReportView>", "signature": "List<PromotionReportView> getAllDependencyReport()", "full_signature": "private List<PromotionReportView> getAllDependencyReport()", "class_method_signature": "PromotionReportView.getAllDependencyReport()", "testcase": false, "constructor": false}, {"identifier": "getPromotionPlan", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getPromotionPlan()", "full_signature": "public List<String> getPromotionPlan()", "class_method_signature": "PromotionReportView.getPromotionPlan()", "testcase": false, "constructor": false}, {"identifier": "getMissingLicenses", "parameters": "()", "modifiers": "public", "return": "List<Artifact>", "signature": "List<Artifact> getMissingLicenses()", "full_signature": "public List<Artifact> getMissingLicenses()", "class_method_signature": "PromotionReportView.getMissingLicenses()", "testcase": false, "constructor": false}, {"identifier": "addMissingThirdPartyDependencyLicenses", "parameters": "(final Artifact dependency)", "modifiers": "public", "return": "void", "signature": "void addMissingThirdPartyDependencyLicenses(final Artifact dependency)", "full_signature": "public void addMissingThirdPartyDependencyLicenses(final Artifact dependency)", "class_method_signature": "PromotionReportView.addMissingThirdPartyDependencyLicenses(final Artifact dependency)", "testcase": false, "constructor": false}, {"identifier": "getDependenciesWithNotAcceptedLicenses", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getDependenciesWithNotAcceptedLicenses()", "full_signature": "public Map<String, String> getDependenciesWithNotAcceptedLicenses()", "class_method_signature": "PromotionReportView.getDependenciesWithNotAcceptedLicenses()", "testcase": false, "constructor": false}, {"identifier": "addUnacceptedLicenseEntry", "parameters": "(final String artifact, final String license)", "modifiers": "public", "return": "void", "signature": "void addUnacceptedLicenseEntry(final String artifact, final String license)", "full_signature": "public void addUnacceptedLicenseEntry(final String artifact, final String license)", "class_method_signature": "PromotionReportView.addUnacceptedLicenseEntry(final String artifact, final String license)", "testcase": false, "constructor": false}, {"identifier": "getArtifactLink", "parameters": "(final String gavc)", "modifiers": "public", "return": "String", "signature": "String getArtifactLink(final String gavc)", "full_signature": "public String getArtifactLink(final String gavc)", "class_method_signature": "PromotionReportView.getArtifactLink(final String gavc)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/webapp/views/PromotionReportView.java"}, "focal_method": {"identifier": "compute", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void compute() {\n        /* Order the module to promote */\n        final Comparator<String> promotionPlanComparator = new PromotionPlanComparator(dependencyReports);\n        Collections.sort(unPromotedDependencies, promotionPlanComparator);\n\n        /* Identify the mismatch versions */\n        // Collect all the modules names and versions\n        for (final PromotionReportView promotionReport : getAllDependencyReport()) {\n            final Module module = promotionReport.getRootModule();\n\n            if(null == module) {\n                LOG.warn(\"No root module found. Aborting compute().\");\n                return;\n            }\n\n            final List<String> versions = mismatchVersions.get(module.getName());\n\n            if (versions == null) {\n                mismatchVersions.put(module.getName(), Lists.newArrayList(module.getVersion()));\n            } else if (!versions.contains(module.getVersion())) {\n                versions.add(module.getVersion());\n            }\n        }\n\n        // Remove the modules that appears in only one version\n        final Iterator<String> moduleNames = mismatchVersions.keySet().iterator();\n        while (moduleNames.hasNext()) {\n            final String moduleName = moduleNames.next();\n            final List<String> versions = mismatchVersions.get(moduleName);\n            if (versions.size() == 1) {\n                moduleNames.remove();\n            }\n        }\n    }", "signature": "void compute()", "full_signature": "public void compute()", "class_method_signature": "PromotionReportView.compute()", "testcase": false, "constructor": false, "invocations": ["sort", "getAllDependencyReport", "getRootModule", "warn", "get", "getName", "put", "getName", "newArrayList", "getVersion", "contains", "getVersion", "add", "getVersion", "iterator", "keySet", "hasNext", "next", "get", "size", "remove"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}