{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tUserService service;", "modifier": "@InjectMocks", "type": "UserService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tUserRepository repo;", "modifier": "@Mock", "type": "UserRepository", "declarator": "repo", "var_name": "repo"}], "file": "user-service/src/test/java/io/pivotal/user/service/UserServiceTest.java"}, "test_case": {"identifier": "saveAccountWithNullCounts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void saveAccountWithNullCounts() {\n\t\tUser acc = ServiceTestConfiguration.user();\n\t\tUser accNull = ServiceTestConfiguration.user();\n\t\taccNull.setLogincount(null);\n\t\taccNull.setLogoutcount(null);\n\t\tacc.setLogincount(0);\n\t\tacc.setLogoutcount(0);\n\t\t\n\t\twhen(repo.save(accNull)).thenReturn(acc);\n\t\tassertEquals(service.saveUser(accNull),acc.getId());\n\t}", "signature": "void saveAccountWithNullCounts()", "full_signature": "@Test public void saveAccountWithNullCounts()", "class_method_signature": "UserServiceTest.saveAccountWithNullCounts()", "testcase": true, "constructor": false, "invocations": ["user", "user", "setLogincount", "setLogoutcount", "setLogincount", "setLogoutcount", "thenReturn", "when", "save", "assertEquals", "saveUser", "getId"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(UserService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(UserService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tUserRepository user;", "modifier": "@Autowired", "type": "UserRepository", "declarator": "user", "var_name": "user"}], "methods": [{"identifier": "findUser", "parameters": "(Integer id)", "modifiers": "public", "return": "User", "signature": "User findUser(Integer id)", "full_signature": "public User findUser(Integer id)", "class_method_signature": "UserService.findUser(Integer id)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(String username)", "modifiers": "public", "return": "User", "signature": "User findUser(String username)", "full_signature": "public User findUser(String username)", "class_method_signature": "UserService.findUser(String username)", "testcase": false, "constructor": false}, {"identifier": "findAccountprofileByAuthtoken", "parameters": "(String token)", "modifiers": "@Cacheable(value = \"authorizationCache\") public", "return": "User", "signature": "User findAccountprofileByAuthtoken(String token)", "full_signature": "@Cacheable(value = \"authorizationCache\") public User findAccountprofileByAuthtoken(String token)", "class_method_signature": "UserService.findAccountprofileByAuthtoken(String token)", "testcase": false, "constructor": false}, {"identifier": "saveUser", "parameters": "(User userRequest)", "modifiers": "public", "return": "Integer", "signature": "Integer saveUser(User userRequest)", "full_signature": "public Integer saveUser(User userRequest)", "class_method_signature": "UserService.saveUser(User userRequest)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(String username, String password)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> login(String username, String password)", "full_signature": "public Map<String, Object> login(String username, String password)", "class_method_signature": "UserService.login(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(String userId)", "modifiers": "public", "return": "User", "signature": "User logout(String userId)", "full_signature": "public User logout(String userId)", "class_method_signature": "UserService.logout(String userId)", "testcase": false, "constructor": false}], "file": "user-service/src/main/java/io/pivotal/user/service/UserService.java"}, "focal_method": {"identifier": "saveUser", "parameters": "(User userRequest)", "modifiers": "public", "return": "Integer", "body": "public Integer saveUser(User userRequest) {\n\n\t\tlogger.debug(\"UserService.saveAccount:\" + userRequest.toString());\n\t\t// need to set some stuff that cannot be null!\n\t\tif (userRequest.getLogincount() == null) {\n\t\t\tuserRequest.setLogincount(0);\n\t\t}\n\t\tif (userRequest.getLogoutcount() == null) {\n\t\t\tuserRequest.setLogoutcount(0);\n\t\t}\n\n\t\tUser account = user.save(userRequest);\n\t\tlogger.info(\"UserService.saveAccount: account saved: \" + account);\n\t\treturn account.getId();\n\t}", "signature": "Integer saveUser(User userRequest)", "full_signature": "public Integer saveUser(User userRequest)", "class_method_signature": "UserService.saveUser(User userRequest)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "getLogincount", "setLogincount", "getLogoutcount", "setLogoutcount", "save", "info", "getId"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}