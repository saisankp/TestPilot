{"test_class": {"identifier": "NetworkClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int requestTimeoutMs = 1000;", "modifier": "private final", "type": "int", "declarator": "requestTimeoutMs = 1000", "var_name": "requestTimeoutMs"}, {"original_string": "private MockTime time = new MockTime();", "modifier": "private", "type": "MockTime", "declarator": "time = new MockTime()", "var_name": "time"}, {"original_string": "private MockSelector selector = new MockSelector(time);", "modifier": "private", "type": "MockSelector", "declarator": "selector = new MockSelector(time)", "var_name": "selector"}, {"original_string": "private Metadata metadata = new Metadata(0, Long.MAX_VALUE);", "modifier": "private", "type": "Metadata", "declarator": "metadata = new Metadata(0, Long.MAX_VALUE)", "var_name": "metadata"}, {"original_string": "private int nodeId = 1;", "modifier": "private", "type": "int", "declarator": "nodeId = 1", "var_name": "nodeId"}, {"original_string": "private Cluster cluster = TestUtils.singletonCluster(\"test\", nodeId);", "modifier": "private", "type": "Cluster", "declarator": "cluster = TestUtils.singletonCluster(\"test\", nodeId)", "var_name": "cluster"}, {"original_string": "private Node node = cluster.nodes().get(0);", "modifier": "private", "type": "Node", "declarator": "node = cluster.nodes().get(0)", "var_name": "node"}, {"original_string": "private long reconnectBackoffMsTest = 10 * 1000;", "modifier": "private", "type": "long", "declarator": "reconnectBackoffMsTest = 10 * 1000", "var_name": "reconnectBackoffMsTest"}, {"original_string": "private NetworkClient client = new NetworkClient(selector, metadata, \"mock\", Integer.MAX_VALUE, reconnectBackoffMsTest, \n            64 * 1024, 64 * 1024, requestTimeoutMs, time);", "modifier": "private", "type": "NetworkClient", "declarator": "client = new NetworkClient(selector, metadata, \"mock\", Integer.MAX_VALUE, reconnectBackoffMsTest, \n            64 * 1024, 64 * 1024, requestTimeoutMs, time)", "var_name": "client"}, {"original_string": "private NetworkClient clientWithStaticNodes = new NetworkClient(selector, new ManualMetadataUpdater(Arrays.asList(node)),\n            \"mock-static\", Integer.MAX_VALUE, 0, 64 * 1024, 64 * 1024, requestTimeoutMs, time);", "modifier": "private", "type": "NetworkClient", "declarator": "clientWithStaticNodes = new NetworkClient(selector, new ManualMetadataUpdater(Arrays.asList(node)),\n            \"mock-static\", Integer.MAX_VALUE, 0, 64 * 1024, 64 * 1024, requestTimeoutMs, time)", "var_name": "clientWithStaticNodes"}], "file": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java"}, "test_case": {"identifier": "testConnectionDelay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionDelay() {\n        long now = time.milliseconds();\n        long delay = client.connectionDelay(node, now);\n\n        assertEquals(0, delay);\n    }", "signature": "void testConnectionDelay()", "full_signature": "@Test public void testConnectionDelay()", "class_method_signature": "NetworkClientTest.testConnectionDelay()", "testcase": true, "constructor": false, "invocations": ["milliseconds", "connectionDelay", "assertEquals"]}, "focal_class": {"identifier": "NetworkClient", "superclass": "", "interfaces": "implements KafkaClient", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NetworkClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NetworkClient.class)", "var_name": "log"}, {"original_string": "private final Selectable selector;", "modifier": "private final", "type": "Selectable", "declarator": "selector", "var_name": "selector"}, {"original_string": "private final MetadataUpdater metadataUpdater;", "modifier": "private final", "type": "MetadataUpdater", "declarator": "metadataUpdater", "var_name": "metadataUpdater"}, {"original_string": "private final Random randOffset;", "modifier": "private final", "type": "Random", "declarator": "randOffset", "var_name": "randOffset"}, {"original_string": "private final ClusterConnectionStates connectionStates;", "modifier": "private final", "type": "ClusterConnectionStates", "declarator": "connectionStates", "var_name": "connectionStates"}, {"original_string": "private final InFlightRequests inFlightRequests;", "modifier": "private final", "type": "InFlightRequests", "declarator": "inFlightRequests", "var_name": "inFlightRequests"}, {"original_string": "private final int socketSendBuffer;", "modifier": "private final", "type": "int", "declarator": "socketSendBuffer", "var_name": "socketSendBuffer"}, {"original_string": "private final int socketReceiveBuffer;", "modifier": "private final", "type": "int", "declarator": "socketReceiveBuffer", "var_name": "socketReceiveBuffer"}, {"original_string": "private final String clientId;", "modifier": "private final", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private int correlation;", "modifier": "private", "type": "int", "declarator": "correlation", "var_name": "correlation"}, {"original_string": "private final int requestTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "requestTimeoutMs", "var_name": "requestTimeoutMs"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "NetworkClient", "parameters": "(Selectable selector,\n        Metadata metadata,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "modifiers": "public", "return": "", "signature": " NetworkClient(Selectable selector,\n        Metadata metadata,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "full_signature": "public  NetworkClient(Selectable selector,\n        Metadata metadata,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "class_method_signature": "NetworkClient.NetworkClient(Selectable selector,\n        Metadata metadata,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "testcase": false, "constructor": true}, {"identifier": "NetworkClient", "parameters": "(Selectable selector,\n        MetadataUpdater metadataUpdater,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "modifiers": "public", "return": "", "signature": " NetworkClient(Selectable selector,\n        MetadataUpdater metadataUpdater,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "full_signature": "public  NetworkClient(Selectable selector,\n        MetadataUpdater metadataUpdater,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "class_method_signature": "NetworkClient.NetworkClient(Selectable selector,\n        MetadataUpdater metadataUpdater,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "testcase": false, "constructor": true}, {"identifier": "NetworkClient", "parameters": "(MetadataUpdater metadataUpdater,\n        Metadata metadata,\n        Selectable selector,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "modifiers": "private", "return": "", "signature": " NetworkClient(MetadataUpdater metadataUpdater,\n        Metadata metadata,\n        Selectable selector,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "full_signature": "private  NetworkClient(MetadataUpdater metadataUpdater,\n        Metadata metadata,\n        Selectable selector,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "class_method_signature": "NetworkClient.NetworkClient(MetadataUpdater metadataUpdater,\n        Metadata metadata,\n        Selectable selector,\n        String clientId,\n        int maxInFlightRequestsPerConnection,\n        long reconnectBackoffMs,\n        int socketSendBuffer,\n        int socketReceiveBuffer,\n        int requestTimeoutMs,\n        Time time)", "testcase": false, "constructor": true}, {"identifier": "ready", "parameters": "(Node node, long now)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ready(Node node, long now)", "full_signature": "@Override public boolean ready(Node node, long now)", "class_method_signature": "NetworkClient.ready(Node node, long now)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(String nodeId)", "modifiers": "@Override public", "return": "void", "signature": "void close(String nodeId)", "full_signature": "@Override public void close(String nodeId)", "class_method_signature": "NetworkClient.close(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "connectionDelay", "parameters": "(Node node, long now)", "modifiers": "@Override public", "return": "long", "signature": "long connectionDelay(Node node, long now)", "full_signature": "@Override public long connectionDelay(Node node, long now)", "class_method_signature": "NetworkClient.connectionDelay(Node node, long now)", "testcase": false, "constructor": false}, {"identifier": "connectionFailed", "parameters": "(Node node)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean connectionFailed(Node node)", "full_signature": "@Override public boolean connectionFailed(Node node)", "class_method_signature": "NetworkClient.connectionFailed(Node node)", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "(Node node, long now)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReady(Node node, long now)", "full_signature": "@Override public boolean isReady(Node node, long now)", "class_method_signature": "NetworkClient.isReady(Node node, long now)", "testcase": false, "constructor": false}, {"identifier": "canSendRequest", "parameters": "(String node)", "modifiers": "private", "return": "boolean", "signature": "boolean canSendRequest(String node)", "full_signature": "private boolean canSendRequest(String node)", "class_method_signature": "NetworkClient.canSendRequest(String node)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(ClientRequest request, long now)", "modifiers": "@Override public", "return": "void", "signature": "void send(ClientRequest request, long now)", "full_signature": "@Override public void send(ClientRequest request, long now)", "class_method_signature": "NetworkClient.send(ClientRequest request, long now)", "testcase": false, "constructor": false}, {"identifier": "doSend", "parameters": "(ClientRequest request, long now)", "modifiers": "private", "return": "void", "signature": "void doSend(ClientRequest request, long now)", "full_signature": "private void doSend(ClientRequest request, long now)", "class_method_signature": "NetworkClient.doSend(ClientRequest request, long now)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout, long now)", "modifiers": "@Override public", "return": "List<ClientResponse>", "signature": "List<ClientResponse> poll(long timeout, long now)", "full_signature": "@Override public List<ClientResponse> poll(long timeout, long now)", "class_method_signature": "NetworkClient.poll(long timeout, long now)", "testcase": false, "constructor": false}, {"identifier": "inFlightRequestCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int inFlightRequestCount()", "full_signature": "@Override public int inFlightRequestCount()", "class_method_signature": "NetworkClient.inFlightRequestCount()", "testcase": false, "constructor": false}, {"identifier": "inFlightRequestCount", "parameters": "(String node)", "modifiers": "@Override public", "return": "int", "signature": "int inFlightRequestCount(String node)", "full_signature": "@Override public int inFlightRequestCount(String node)", "class_method_signature": "NetworkClient.inFlightRequestCount(String node)", "testcase": false, "constructor": false}, {"identifier": "nextRequestHeader", "parameters": "(ApiKeys key)", "modifiers": "@Override public", "return": "RequestHeader", "signature": "RequestHeader nextRequestHeader(ApiKeys key)", "full_signature": "@Override public RequestHeader nextRequestHeader(ApiKeys key)", "class_method_signature": "NetworkClient.nextRequestHeader(ApiKeys key)", "testcase": false, "constructor": false}, {"identifier": "nextRequestHeader", "parameters": "(ApiKeys key, short version)", "modifiers": "@Override public", "return": "RequestHeader", "signature": "RequestHeader nextRequestHeader(ApiKeys key, short version)", "full_signature": "@Override public RequestHeader nextRequestHeader(ApiKeys key, short version)", "class_method_signature": "NetworkClient.nextRequestHeader(ApiKeys key, short version)", "testcase": false, "constructor": false}, {"identifier": "wakeup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void wakeup()", "full_signature": "@Override public void wakeup()", "class_method_signature": "NetworkClient.wakeup()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NetworkClient.close()", "testcase": false, "constructor": false}, {"identifier": "leastLoadedNode", "parameters": "(long now)", "modifiers": "@Override public", "return": "Node", "signature": "Node leastLoadedNode(long now)", "full_signature": "@Override public Node leastLoadedNode(long now)", "class_method_signature": "NetworkClient.leastLoadedNode(long now)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(ByteBuffer responseBuffer, RequestHeader requestHeader)", "modifiers": "public static", "return": "Struct", "signature": "Struct parseResponse(ByteBuffer responseBuffer, RequestHeader requestHeader)", "full_signature": "public static Struct parseResponse(ByteBuffer responseBuffer, RequestHeader requestHeader)", "class_method_signature": "NetworkClient.parseResponse(ByteBuffer responseBuffer, RequestHeader requestHeader)", "testcase": false, "constructor": false}, {"identifier": "processDisconnection", "parameters": "(List<ClientResponse> responses, String nodeId, long now)", "modifiers": "private", "return": "void", "signature": "void processDisconnection(List<ClientResponse> responses, String nodeId, long now)", "full_signature": "private void processDisconnection(List<ClientResponse> responses, String nodeId, long now)", "class_method_signature": "NetworkClient.processDisconnection(List<ClientResponse> responses, String nodeId, long now)", "testcase": false, "constructor": false}, {"identifier": "handleTimedOutRequests", "parameters": "(List<ClientResponse> responses, long now)", "modifiers": "private", "return": "void", "signature": "void handleTimedOutRequests(List<ClientResponse> responses, long now)", "full_signature": "private void handleTimedOutRequests(List<ClientResponse> responses, long now)", "class_method_signature": "NetworkClient.handleTimedOutRequests(List<ClientResponse> responses, long now)", "testcase": false, "constructor": false}, {"identifier": "handleCompletedSends", "parameters": "(List<ClientResponse> responses, long now)", "modifiers": "private", "return": "void", "signature": "void handleCompletedSends(List<ClientResponse> responses, long now)", "full_signature": "private void handleCompletedSends(List<ClientResponse> responses, long now)", "class_method_signature": "NetworkClient.handleCompletedSends(List<ClientResponse> responses, long now)", "testcase": false, "constructor": false}, {"identifier": "handleCompletedReceives", "parameters": "(List<ClientResponse> responses, long now)", "modifiers": "private", "return": "void", "signature": "void handleCompletedReceives(List<ClientResponse> responses, long now)", "full_signature": "private void handleCompletedReceives(List<ClientResponse> responses, long now)", "class_method_signature": "NetworkClient.handleCompletedReceives(List<ClientResponse> responses, long now)", "testcase": false, "constructor": false}, {"identifier": "handleDisconnections", "parameters": "(List<ClientResponse> responses, long now)", "modifiers": "private", "return": "void", "signature": "void handleDisconnections(List<ClientResponse> responses, long now)", "full_signature": "private void handleDisconnections(List<ClientResponse> responses, long now)", "class_method_signature": "NetworkClient.handleDisconnections(List<ClientResponse> responses, long now)", "testcase": false, "constructor": false}, {"identifier": "handleConnections", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleConnections()", "full_signature": "private void handleConnections()", "class_method_signature": "NetworkClient.handleConnections()", "testcase": false, "constructor": false}, {"identifier": "correlate", "parameters": "(RequestHeader requestHeader, ResponseHeader responseHeader)", "modifiers": "private static", "return": "void", "signature": "void correlate(RequestHeader requestHeader, ResponseHeader responseHeader)", "full_signature": "private static void correlate(RequestHeader requestHeader, ResponseHeader responseHeader)", "class_method_signature": "NetworkClient.correlate(RequestHeader requestHeader, ResponseHeader responseHeader)", "testcase": false, "constructor": false}, {"identifier": "initiateConnect", "parameters": "(Node node, long now)", "modifiers": "private", "return": "void", "signature": "void initiateConnect(Node node, long now)", "full_signature": "private void initiateConnect(Node node, long now)", "class_method_signature": "NetworkClient.initiateConnect(Node node, long now)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java"}, "focal_method": {"identifier": "connectionDelay", "parameters": "(Node node, long now)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long connectionDelay(Node node, long now) {\n        return connectionStates.connectionDelay(node.idString(), now);\n    }", "signature": "long connectionDelay(Node node, long now)", "full_signature": "@Override public long connectionDelay(Node node, long now)", "class_method_signature": "NetworkClient.connectionDelay(Node node, long now)", "testcase": false, "constructor": false, "invocations": ["connectionDelay", "idString"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}