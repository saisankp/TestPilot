{"test_class": {"identifier": "TestNoProcessor", "superclass": "extends NeuralNetTestBase", "interfaces": "", "fields": [{"original_string": "static final String OUTPUT_DIR = System.getProperty(\"buildDir\") + \"/resources/out\";", "modifier": "static final", "type": "String", "declarator": "OUTPUT_DIR = System.getProperty(\"buildDir\") + \"/resources/out\"", "var_name": "OUTPUT_DIR"}, {"original_string": "static final int SAVE_RATE = 2;", "modifier": "static final", "type": "int", "declarator": "SAVE_RATE = 2", "var_name": "SAVE_RATE"}, {"original_string": "static NoProcessor noProcessor;", "modifier": "static", "type": "NoProcessor", "declarator": "noProcessor", "var_name": "noProcessor"}, {"original_string": "static Vantiq vantiq;", "modifier": "static", "type": "Vantiq", "declarator": "vantiq", "var_name": "vantiq"}, {"original_string": "static VantiqResponse vantiqResponse;", "modifier": "static", "type": "VantiqResponse", "declarator": "vantiqResponse", "var_name": "vantiqResponse"}, {"original_string": "static List<String> vantiqSavedFiles = new ArrayList<>();", "modifier": "static", "type": "List<String>", "declarator": "vantiqSavedFiles = new ArrayList<>()", "var_name": "vantiqSavedFiles"}, {"original_string": "static List<String> vantiqSavedImageFiles = new ArrayList<>();", "modifier": "static", "type": "List<String>", "declarator": "vantiqSavedImageFiles = new ArrayList<>()", "var_name": "vantiqSavedImageFiles"}, {"original_string": "static final String timestampPattern = \"\\\\d{4}-\\\\d{2}-\\\\d{2}--\\\\d{2}-\\\\d{2}-\\\\d{2}\\\\.jpg\";", "modifier": "static final", "type": "String", "declarator": "timestampPattern = \"\\\\d{4}-\\\\d{2}-\\\\d{2}--\\\\d{2}-\\\\d{2}-\\\\d{2}\\\\.jpg\"", "var_name": "timestampPattern"}, {"original_string": "static final String sameTimestampPattern = \"\\\\d{4}-\\\\d{2}-\\\\d{2}--\\\\d{2}-\\\\d{2}-\\\\d{2}\\\\(\\\\d+\\\\)\\\\.jpg\";", "modifier": "static final", "type": "String", "declarator": "sameTimestampPattern = \"\\\\d{4}-\\\\d{2}-\\\\d{2}--\\\\d{2}-\\\\d{2}-\\\\d{2}\\\\(\\\\d+\\\\)\\\\.jpg\"", "var_name": "sameTimestampPattern"}], "file": "objectRecognitionSource/src/test/java/io/vantiq/extsrc/objectRecognition/neuralNet/TestNoProcessor.java"}, "test_case": {"identifier": "testValidConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidConfig() {\n        Map config = new LinkedHashMap<>();\n        NoProcessor npProcessor = new NoProcessor();\n        NoProcessor npProcessor2 = new NoProcessor();\n        NoProcessor npProcessor3 = new NoProcessor();\n\n        config.put(\"saveImage\", \"local\");\n        config.put(\"outputDir\", OUTPUT_DIR);\n        config.put(\"saveRate\", SAVE_RATE);\n        npProcessor.setupImageProcessing(config, SOURCE_NAME, MODEL_DIRECTORY, testAuthToken, testVantiqServer);\n        assertTrue(\"NoProcessor should still setup with empty config\", npProcessor.isSetup);\n        \n        config.put(\"saveImage\", \"both\");\n        npProcessor2.setupImageProcessing(config, SOURCE_NAME, MODEL_DIRECTORY, testAuthToken, testVantiqServer);\n        assertTrue(\"NoProcessor should still setup with empty config\", npProcessor2.isSetup);\n        \n        config.put(\"saveImage\", \"vantiq\");\n        npProcessor3.setupImageProcessing(config, SOURCE_NAME, MODEL_DIRECTORY, testAuthToken, testVantiqServer);\n        assertTrue(\"NoProcessor should still setup with empty config\", npProcessor3.isSetup);\n    }", "signature": "void testValidConfig()", "full_signature": "@Test public void testValidConfig()", "class_method_signature": "TestNoProcessor.testValidConfig()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "setupImageProcessing", "assertTrue", "put", "setupImageProcessing", "assertTrue", "put", "setupImageProcessing", "assertTrue"]}, "focal_class": {"identifier": "NoProcessor", "superclass": "", "interfaces": "implements NeuralNetInterface", "fields": [{"original_string": "private static final String SAVE_IMAGE = \"saveImage\";", "modifier": "private static final", "type": "String", "declarator": "SAVE_IMAGE = \"saveImage\"", "var_name": "SAVE_IMAGE"}, {"original_string": "private static final String BOTH = \"both\";", "modifier": "private static final", "type": "String", "declarator": "BOTH = \"both\"", "var_name": "BOTH"}, {"original_string": "private static final String LOCAL = \"local\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL = \"local\"", "var_name": "LOCAL"}, {"original_string": "private static final String VANTIQ = \"vantiq\";", "modifier": "private static final", "type": "String", "declarator": "VANTIQ = \"vantiq\"", "var_name": "VANTIQ"}, {"original_string": "private static final String OUTPUT_DIR = \"outputDir\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_DIR = \"outputDir\"", "var_name": "OUTPUT_DIR"}, {"original_string": "private static final String SAVE_RATE = \"saveRate\";", "modifier": "private static final", "type": "String", "declarator": "SAVE_RATE = \"saveRate\"", "var_name": "SAVE_RATE"}, {"original_string": "private static final String UPLOAD_AS_IMAGE = \"uploadAsImage\";", "modifier": "private static final", "type": "String", "declarator": "UPLOAD_AS_IMAGE = \"uploadAsImage\"", "var_name": "UPLOAD_AS_IMAGE"}, {"original_string": "private static final String NN_OUTPUT_DIR = \"NNoutputDir\";", "modifier": "private static final", "type": "String", "declarator": "NN_OUTPUT_DIR = \"NNoutputDir\"", "var_name": "NN_OUTPUT_DIR"}, {"original_string": "private static final String NN_FILENAME = \"NNfileName\";", "modifier": "private static final", "type": "String", "declarator": "NN_FILENAME = \"NNfileName\"", "var_name": "NN_FILENAME"}, {"original_string": "private static final String NN_SAVE_IMAGE = \"NNsaveImage\";", "modifier": "private static final", "type": "String", "declarator": "NN_SAVE_IMAGE = \"NNsaveImage\"", "var_name": "NN_SAVE_IMAGE"}, {"original_string": "private static SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd--HH-mm-ss\");", "modifier": "private static", "type": "SimpleDateFormat", "declarator": "format = new SimpleDateFormat(\"yyyy-MM-dd--HH-mm-ss\")", "var_name": "format"}, {"original_string": "public String lastFilename;", "modifier": "public", "type": "String", "declarator": "lastFilename", "var_name": "lastFilename"}, {"original_string": "public Boolean isSetup = false;", "modifier": "public", "type": "Boolean", "declarator": "isSetup = false", "var_name": "isSetup"}, {"original_string": "Logger log = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(this.getClass())", "var_name": "log"}, {"original_string": "String outputDir = null;", "modifier": "", "type": "String", "declarator": "outputDir = null", "var_name": "outputDir"}, {"original_string": "String saveImage = null;", "modifier": "", "type": "String", "declarator": "saveImage = null", "var_name": "saveImage"}, {"original_string": "Vantiq vantiq;", "modifier": "", "type": "Vantiq", "declarator": "vantiq", "var_name": "vantiq"}, {"original_string": "String server;", "modifier": "", "type": "String", "declarator": "server", "var_name": "server"}, {"original_string": "String authToken;", "modifier": "", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "ImageUtil imageUtil;", "modifier": "", "type": "ImageUtil", "declarator": "imageUtil", "var_name": "imageUtil"}, {"original_string": "int saveRate = 1;", "modifier": "", "type": "int", "declarator": "saveRate = 1", "var_name": "saveRate"}, {"original_string": "int frameCount = 0;", "modifier": "", "type": "int", "declarator": "frameCount = 0", "var_name": "frameCount"}, {"original_string": "int fileCount = 0;", "modifier": "", "type": "int", "declarator": "fileCount = 0", "var_name": "fileCount"}, {"original_string": "boolean uploadAsImage = false;", "modifier": "", "type": "boolean", "declarator": "uploadAsImage = false", "var_name": "uploadAsImage"}], "methods": [{"identifier": "setupImageProcessing", "parameters": "(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "modifiers": "@Override public", "return": "void", "signature": "void setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "full_signature": "@Override public void setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "class_method_signature": "NoProcessor.setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "testcase": false, "constructor": false}, {"identifier": "processImage", "parameters": "(byte[] image)", "modifiers": "@Override public", "return": "NeuralNetResults", "signature": "NeuralNetResults processImage(byte[] image)", "full_signature": "@Override public NeuralNetResults processImage(byte[] image)", "class_method_signature": "NoProcessor.processImage(byte[] image)", "testcase": false, "constructor": false}, {"identifier": "processImage", "parameters": "(byte[] image, Map<String, ?> request)", "modifiers": "@Override public", "return": "NeuralNetResults", "signature": "NeuralNetResults processImage(byte[] image, Map<String, ?> request)", "full_signature": "@Override public NeuralNetResults processImage(byte[] image, Map<String, ?> request)", "class_method_signature": "NoProcessor.processImage(byte[] image, Map<String, ?> request)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NoProcessor.close()", "testcase": false, "constructor": false}], "file": "objectRecognitionSource/src/main/java/io/vantiq/extsrc/objectRecognition/neuralNet/NoProcessor.java"}, "focal_method": {"identifier": "setupImageProcessing", "parameters": "(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server) {\n        this.server = server;\n        this.authToken = authToken;\n        this.sourceName = sourceName;\n        \n        // Setup the variables for saving images\n        imageUtil = new ImageUtil();\n        if (neuralNetConfig.get(SAVE_IMAGE) instanceof String) {\n            saveImage = (String) neuralNetConfig.get(SAVE_IMAGE);\n            \n            // Check which method of saving the user requests\n            if (!saveImage.equalsIgnoreCase(VANTIQ) && !saveImage.equalsIgnoreCase(BOTH) && !saveImage.equalsIgnoreCase(LOCAL)) {\n                log.error(\"The config value for saveImage was invalid. Images will not be saved.\");\n            }\n            if (!saveImage.equalsIgnoreCase(VANTIQ)) {\n                if (neuralNetConfig.get(OUTPUT_DIR) instanceof String) {\n                    outputDir = (String) neuralNetConfig.get(OUTPUT_DIR);\n                }\n            }\n            if (saveImage.equalsIgnoreCase(VANTIQ) || saveImage.equalsIgnoreCase(BOTH)) {\n                vantiq = new io.vantiq.client.Vantiq(server);\n                vantiq.setAccessToken(authToken);\n\n                // Check if images should be uploaded to VANTIQ as VANTIQ IMAGES\n                if (neuralNetConfig.get(UPLOAD_AS_IMAGE) instanceof Boolean && (Boolean) neuralNetConfig.get(UPLOAD_AS_IMAGE)) {\n                    uploadAsImage = (Boolean) neuralNetConfig.get(UPLOAD_AS_IMAGE);\n                }\n            }\n            imageUtil.outputDir = outputDir;\n            imageUtil.vantiq = vantiq;\n            imageUtil.saveImage = true;\n            imageUtil.sourceName = sourceName;\n            imageUtil.uploadAsImage = uploadAsImage;\n            if (neuralNetConfig.get(SAVE_RATE) instanceof Integer) {\n                saveRate = (Integer) neuralNetConfig.get(SAVE_RATE);\n                frameCount = saveRate;\n            }\n        } else {\n            // Flag to mark that we should not save images\n            imageUtil.saveImage = false;\n            log.info(\"The Neural Net Config did not specify a method of saving images. No images will be saved when polling. \"\n                    + \"If allowQueries is set, then the user can query the source and save images based on the query options.\");\n        }\n        \n        isSetup = true;\n    }", "signature": "void setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "full_signature": "@Override public void setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "class_method_signature": "NoProcessor.setupImageProcessing(Map<String, ?> neuralNetConfig, String sourceName, String modelDirectory, String authToken, String server)", "testcase": false, "constructor": false, "invocations": ["get", "get", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "error", "equalsIgnoreCase", "get", "get", "equalsIgnoreCase", "equalsIgnoreCase", "setAccessToken", "get", "get", "get", "get", "get", "info"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}