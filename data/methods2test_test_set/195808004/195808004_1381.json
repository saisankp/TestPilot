{"test_class": {"identifier": "TestBlockManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatanodeStorageInfo[] storages;", "modifier": "private", "type": "DatanodeStorageInfo[]", "declarator": "storages", "var_name": "storages"}, {"original_string": "private List<DatanodeDescriptor> nodes;", "modifier": "private", "type": "List<DatanodeDescriptor>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private List<DatanodeDescriptor> rackA;", "modifier": "private", "type": "List<DatanodeDescriptor>", "declarator": "rackA", "var_name": "rackA"}, {"original_string": "private List<DatanodeDescriptor> rackB;", "modifier": "private", "type": "List<DatanodeDescriptor>", "declarator": "rackB", "var_name": "rackB"}, {"original_string": "private static final int NUM_TEST_ITERS = 30;", "modifier": "private static final", "type": "int", "declarator": "NUM_TEST_ITERS = 30", "var_name": "NUM_TEST_ITERS"}, {"original_string": "private static final int BLOCK_SIZE = 64*1024;", "modifier": "private static final", "type": "int", "declarator": "BLOCK_SIZE = 64*1024", "var_name": "BLOCK_SIZE"}, {"original_string": "private FSNamesystem fsn;", "modifier": "private", "type": "FSNamesystem", "declarator": "fsn", "var_name": "fsn"}, {"original_string": "private BlockManager bm;", "modifier": "private", "type": "BlockManager", "declarator": "bm", "var_name": "bm"}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/blockmanagement/TestBlockManager.java"}, "test_case": {"identifier": "testAllReplicasOnSameRack", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAllReplicasOnSameRack() throws Exception {\n    Configuration conf = new HdfsConfiguration();\n    conf.unset(DFSConfigKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY);\n    fsn = Mockito.mock(FSNamesystem.class);\n    Mockito.doReturn(true).when(fsn).hasWriteLock();\n    Mockito.doReturn(true).when(fsn).hasReadLock();\n    bm = new BlockManager(fsn, conf);\n    // Add nodes on two racks\n    addNodes(nodes);\n    // Added a new block in blocksMap and all the replicas are on the same rack\n    BlockInfoContiguous blockInfo = addBlockOnNodes(1, rackA);\n    // Since the network toppolgy is multi-rack, the blockHasEnoughRacks \n    // should return false.\n    assertFalse(\"Replicas for block is not stored on enough racks\", \n        bm.blockHasEnoughRacks(blockInfo));\n  }", "signature": "void testAllReplicasOnSameRack()", "full_signature": "@Test public void testAllReplicasOnSameRack()", "class_method_signature": "TestBlockManager.testAllReplicasOnSameRack()", "testcase": true, "constructor": false, "invocations": ["unset", "mock", "hasWriteLock", "when", "doReturn", "hasReadLock", "when", "doReturn", "addNodes", "addBlockOnNodes", "assertFalse", "blockHasEnoughRacks"]}, "focal_class": {"identifier": "BlockManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(BlockManager.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BlockManager.class)", "var_name": "LOG"}, {"original_string": "public static final Logger blockLog = NameNode.blockStateChangeLog;", "modifier": "public static final", "type": "Logger", "declarator": "blockLog = NameNode.blockStateChangeLog", "var_name": "blockLog"}, {"original_string": "private static final String QUEUE_REASON_CORRUPT_STATE =\n    \"it has the wrong state or generation stamp\";", "modifier": "private static final", "type": "String", "declarator": "QUEUE_REASON_CORRUPT_STATE =\n    \"it has the wrong state or generation stamp\"", "var_name": "QUEUE_REASON_CORRUPT_STATE"}, {"original_string": "private static final String QUEUE_REASON_FUTURE_GENSTAMP =\n    \"generation stamp is in the future\";", "modifier": "private static final", "type": "String", "declarator": "QUEUE_REASON_FUTURE_GENSTAMP =\n    \"generation stamp is in the future\"", "var_name": "QUEUE_REASON_FUTURE_GENSTAMP"}, {"original_string": "private final Namesystem namesystem;", "modifier": "private final", "type": "Namesystem", "declarator": "namesystem", "var_name": "namesystem"}, {"original_string": "private final DatanodeManager datanodeManager;", "modifier": "private final", "type": "DatanodeManager", "declarator": "datanodeManager", "var_name": "datanodeManager"}, {"original_string": "private final HeartbeatManager heartbeatManager;", "modifier": "private final", "type": "HeartbeatManager", "declarator": "heartbeatManager", "var_name": "heartbeatManager"}, {"original_string": "private final BlockTokenSecretManager blockTokenSecretManager;", "modifier": "private final", "type": "BlockTokenSecretManager", "declarator": "blockTokenSecretManager", "var_name": "blockTokenSecretManager"}, {"original_string": "private final PendingDataNodeMessages pendingDNMessages =\n    new PendingDataNodeMessages();", "modifier": "private final", "type": "PendingDataNodeMessages", "declarator": "pendingDNMessages =\n    new PendingDataNodeMessages()", "var_name": "pendingDNMessages"}, {"original_string": "private volatile long pendingReplicationBlocksCount = 0L;", "modifier": "private volatile", "type": "long", "declarator": "pendingReplicationBlocksCount = 0L", "var_name": "pendingReplicationBlocksCount"}, {"original_string": "private volatile long corruptReplicaBlocksCount = 0L;", "modifier": "private volatile", "type": "long", "declarator": "corruptReplicaBlocksCount = 0L", "var_name": "corruptReplicaBlocksCount"}, {"original_string": "private volatile long underReplicatedBlocksCount = 0L;", "modifier": "private volatile", "type": "long", "declarator": "underReplicatedBlocksCount = 0L", "var_name": "underReplicatedBlocksCount"}, {"original_string": "private volatile long scheduledReplicationBlocksCount = 0L;", "modifier": "private volatile", "type": "long", "declarator": "scheduledReplicationBlocksCount = 0L", "var_name": "scheduledReplicationBlocksCount"}, {"original_string": "private final AtomicLong excessBlocksCount = new AtomicLong(0L);", "modifier": "private final", "type": "AtomicLong", "declarator": "excessBlocksCount = new AtomicLong(0L)", "var_name": "excessBlocksCount"}, {"original_string": "private final AtomicLong postponedMisreplicatedBlocksCount = new AtomicLong(0L);", "modifier": "private final", "type": "AtomicLong", "declarator": "postponedMisreplicatedBlocksCount = new AtomicLong(0L)", "var_name": "postponedMisreplicatedBlocksCount"}, {"original_string": "private final long startupDelayBlockDeletionInMs;", "modifier": "private final", "type": "long", "declarator": "startupDelayBlockDeletionInMs", "var_name": "startupDelayBlockDeletionInMs"}, {"original_string": "private final long replicationRecheckInterval;", "modifier": "private final", "type": "long", "declarator": "replicationRecheckInterval", "var_name": "replicationRecheckInterval"}, {"original_string": "final BlocksMap blocksMap;", "modifier": "final", "type": "BlocksMap", "declarator": "blocksMap", "var_name": "blocksMap"}, {"original_string": "final Daemon replicationThread = new Daemon(new ReplicationMonitor());", "modifier": "final", "type": "Daemon", "declarator": "replicationThread = new Daemon(new ReplicationMonitor())", "var_name": "replicationThread"}, {"original_string": "final CorruptReplicasMap corruptReplicas = new CorruptReplicasMap();", "modifier": "final", "type": "CorruptReplicasMap", "declarator": "corruptReplicas = new CorruptReplicasMap()", "var_name": "corruptReplicas"}, {"original_string": "private final InvalidateBlocks invalidateBlocks;", "modifier": "private final", "type": "InvalidateBlocks", "declarator": "invalidateBlocks", "var_name": "invalidateBlocks"}, {"original_string": "private final Set<Block> postponedMisreplicatedBlocks = Sets.newHashSet();", "modifier": "private final", "type": "Set<Block>", "declarator": "postponedMisreplicatedBlocks = Sets.newHashSet()", "var_name": "postponedMisreplicatedBlocks"}, {"original_string": "public final Map<String, LightWeightLinkedSet<Block>> excessReplicateMap =\n    new TreeMap<String, LightWeightLinkedSet<Block>>();", "modifier": "public final", "type": "Map<String, LightWeightLinkedSet<Block>>", "declarator": "excessReplicateMap =\n    new TreeMap<String, LightWeightLinkedSet<Block>>()", "var_name": "excessReplicateMap"}, {"original_string": "public final UnderReplicatedBlocks neededReplications = new UnderReplicatedBlocks();", "modifier": "public final", "type": "UnderReplicatedBlocks", "declarator": "neededReplications = new UnderReplicatedBlocks()", "var_name": "neededReplications"}, {"original_string": "@VisibleForTesting\n  final PendingReplicationBlocks pendingReplications;", "modifier": "@VisibleForTesting\n  final", "type": "PendingReplicationBlocks", "declarator": "pendingReplications", "var_name": "pendingReplications"}, {"original_string": "public final short maxReplication;", "modifier": "public final", "type": "short", "declarator": "maxReplication", "var_name": "maxReplication"}, {"original_string": "int maxReplicationStreams;", "modifier": "", "type": "int", "declarator": "maxReplicationStreams", "var_name": "maxReplicationStreams"}, {"original_string": "int replicationStreamsHardLimit;", "modifier": "", "type": "int", "declarator": "replicationStreamsHardLimit", "var_name": "replicationStreamsHardLimit"}, {"original_string": "public final short minReplication;", "modifier": "public final", "type": "short", "declarator": "minReplication", "var_name": "minReplication"}, {"original_string": "public final int defaultReplication;", "modifier": "public final", "type": "int", "declarator": "defaultReplication", "var_name": "defaultReplication"}, {"original_string": "final int maxCorruptFilesReturned;", "modifier": "final", "type": "int", "declarator": "maxCorruptFilesReturned", "var_name": "maxCorruptFilesReturned"}, {"original_string": "final float blocksInvalidateWorkPct;", "modifier": "final", "type": "float", "declarator": "blocksInvalidateWorkPct", "var_name": "blocksInvalidateWorkPct"}, {"original_string": "final int blocksReplWorkMultiplier;", "modifier": "final", "type": "int", "declarator": "blocksReplWorkMultiplier", "var_name": "blocksReplWorkMultiplier"}, {"original_string": "final boolean encryptDataTransfer;", "modifier": "final", "type": "boolean", "declarator": "encryptDataTransfer", "var_name": "encryptDataTransfer"}, {"original_string": "private final long maxNumBlocksToLog;", "modifier": "private final", "type": "long", "declarator": "maxNumBlocksToLog", "var_name": "maxNumBlocksToLog"}, {"original_string": "private boolean shouldPostponeBlocksFromFuture = false;", "modifier": "private", "type": "boolean", "declarator": "shouldPostponeBlocksFromFuture = false", "var_name": "shouldPostponeBlocksFromFuture"}, {"original_string": "private Daemon replicationQueuesInitializer = null;", "modifier": "private", "type": "Daemon", "declarator": "replicationQueuesInitializer = null", "var_name": "replicationQueuesInitializer"}, {"original_string": "private int numBlocksPerIteration;", "modifier": "private", "type": "int", "declarator": "numBlocksPerIteration", "var_name": "numBlocksPerIteration"}, {"original_string": "private double replicationQueuesInitProgress = 0.0;", "modifier": "private", "type": "double", "declarator": "replicationQueuesInitProgress = 0.0", "var_name": "replicationQueuesInitProgress"}, {"original_string": "private BlockPlacementPolicy blockplacement;", "modifier": "private", "type": "BlockPlacementPolicy", "declarator": "blockplacement", "var_name": "blockplacement"}, {"original_string": "private final BlockStoragePolicySuite storagePolicySuite;", "modifier": "private final", "type": "BlockStoragePolicySuite", "declarator": "storagePolicySuite", "var_name": "storagePolicySuite"}, {"original_string": "private boolean checkNSRunning = true;", "modifier": "private", "type": "boolean", "declarator": "checkNSRunning = true", "var_name": "checkNSRunning"}], "methods": [{"identifier": "getPendingReplicationBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPendingReplicationBlocksCount()", "full_signature": "public long getPendingReplicationBlocksCount()", "class_method_signature": "BlockManager.getPendingReplicationBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getUnderReplicatedBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getUnderReplicatedBlocksCount()", "full_signature": "public long getUnderReplicatedBlocksCount()", "class_method_signature": "BlockManager.getUnderReplicatedBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getCorruptReplicaBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCorruptReplicaBlocksCount()", "full_signature": "public long getCorruptReplicaBlocksCount()", "class_method_signature": "BlockManager.getCorruptReplicaBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getScheduledReplicationBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getScheduledReplicationBlocksCount()", "full_signature": "public long getScheduledReplicationBlocksCount()", "class_method_signature": "BlockManager.getScheduledReplicationBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getPendingDeletionBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPendingDeletionBlocksCount()", "full_signature": "public long getPendingDeletionBlocksCount()", "class_method_signature": "BlockManager.getPendingDeletionBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getStartupDelayBlockDeletionInMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartupDelayBlockDeletionInMs()", "full_signature": "public long getStartupDelayBlockDeletionInMs()", "class_method_signature": "BlockManager.getStartupDelayBlockDeletionInMs()", "testcase": false, "constructor": false}, {"identifier": "getExcessBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getExcessBlocksCount()", "full_signature": "public long getExcessBlocksCount()", "class_method_signature": "BlockManager.getExcessBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getPostponedMisreplicatedBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPostponedMisreplicatedBlocksCount()", "full_signature": "public long getPostponedMisreplicatedBlocksCount()", "class_method_signature": "BlockManager.getPostponedMisreplicatedBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getPendingDataNodeMessageCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPendingDataNodeMessageCount()", "full_signature": "public int getPendingDataNodeMessageCount()", "class_method_signature": "BlockManager.getPendingDataNodeMessageCount()", "testcase": false, "constructor": false}, {"identifier": "BlockManager", "parameters": "(final Namesystem namesystem, final Configuration conf)", "modifiers": "public", "return": "", "signature": " BlockManager(final Namesystem namesystem, final Configuration conf)", "full_signature": "public  BlockManager(final Namesystem namesystem, final Configuration conf)", "class_method_signature": "BlockManager.BlockManager(final Namesystem namesystem, final Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "createBlockTokenSecretManager", "parameters": "(\n      final Configuration conf)", "modifiers": "private static", "return": "BlockTokenSecretManager", "signature": "BlockTokenSecretManager createBlockTokenSecretManager(\n      final Configuration conf)", "full_signature": "private static BlockTokenSecretManager createBlockTokenSecretManager(\n      final Configuration conf)", "class_method_signature": "BlockManager.createBlockTokenSecretManager(\n      final Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicy", "parameters": "(final String policyName)", "modifiers": "public", "return": "BlockStoragePolicy", "signature": "BlockStoragePolicy getStoragePolicy(final String policyName)", "full_signature": "public BlockStoragePolicy getStoragePolicy(final String policyName)", "class_method_signature": "BlockManager.getStoragePolicy(final String policyName)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicy", "parameters": "(final byte policyId)", "modifiers": "public", "return": "BlockStoragePolicy", "signature": "BlockStoragePolicy getStoragePolicy(final byte policyId)", "full_signature": "public BlockStoragePolicy getStoragePolicy(final byte policyId)", "class_method_signature": "BlockManager.getStoragePolicy(final byte policyId)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicies", "parameters": "()", "modifiers": "public", "return": "BlockStoragePolicy[]", "signature": "BlockStoragePolicy[] getStoragePolicies()", "full_signature": "public BlockStoragePolicy[] getStoragePolicies()", "class_method_signature": "BlockManager.getStoragePolicies()", "testcase": false, "constructor": false}, {"identifier": "setBlockPoolId", "parameters": "(String blockPoolId)", "modifiers": "public", "return": "void", "signature": "void setBlockPoolId(String blockPoolId)", "full_signature": "public void setBlockPoolId(String blockPoolId)", "class_method_signature": "BlockManager.setBlockPoolId(String blockPoolId)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicySuite", "parameters": "()", "modifiers": "public", "return": "BlockStoragePolicySuite", "signature": "BlockStoragePolicySuite getStoragePolicySuite()", "full_signature": "public BlockStoragePolicySuite getStoragePolicySuite()", "class_method_signature": "BlockManager.getStoragePolicySuite()", "testcase": false, "constructor": false}, {"identifier": "getBlockTokenSecretManager", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "BlockTokenSecretManager", "signature": "BlockTokenSecretManager getBlockTokenSecretManager()", "full_signature": "@VisibleForTesting public BlockTokenSecretManager getBlockTokenSecretManager()", "class_method_signature": "BlockManager.getBlockTokenSecretManager()", "testcase": false, "constructor": false}, {"identifier": "enableRMTerminationForTesting", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void enableRMTerminationForTesting()", "full_signature": "@VisibleForTesting void enableRMTerminationForTesting()", "class_method_signature": "BlockManager.enableRMTerminationForTesting()", "testcase": false, "constructor": false}, {"identifier": "isBlockTokenEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isBlockTokenEnabled()", "full_signature": "private boolean isBlockTokenEnabled()", "class_method_signature": "BlockManager.isBlockTokenEnabled()", "testcase": false, "constructor": false}, {"identifier": "shouldUpdateBlockKey", "parameters": "(final long updateTime)", "modifiers": "", "return": "boolean", "signature": "boolean shouldUpdateBlockKey(final long updateTime)", "full_signature": " boolean shouldUpdateBlockKey(final long updateTime)", "class_method_signature": "BlockManager.shouldUpdateBlockKey(final long updateTime)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(Configuration conf)", "modifiers": "public", "return": "void", "signature": "void activate(Configuration conf)", "full_signature": "public void activate(Configuration conf)", "class_method_signature": "BlockManager.activate(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "BlockManager.close()", "testcase": false, "constructor": false}, {"identifier": "getDatanodeManager", "parameters": "()", "modifiers": "public", "return": "DatanodeManager", "signature": "DatanodeManager getDatanodeManager()", "full_signature": "public DatanodeManager getDatanodeManager()", "class_method_signature": "BlockManager.getDatanodeManager()", "testcase": false, "constructor": false}, {"identifier": "getBlockPlacementPolicy", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "BlockPlacementPolicy", "signature": "BlockPlacementPolicy getBlockPlacementPolicy()", "full_signature": "@VisibleForTesting public BlockPlacementPolicy getBlockPlacementPolicy()", "class_method_signature": "BlockManager.getBlockPlacementPolicy()", "testcase": false, "constructor": false}, {"identifier": "setBlockPlacementPolicy", "parameters": "(BlockPlacementPolicy newpolicy)", "modifiers": "public", "return": "void", "signature": "void setBlockPlacementPolicy(BlockPlacementPolicy newpolicy)", "full_signature": "public void setBlockPlacementPolicy(BlockPlacementPolicy newpolicy)", "class_method_signature": "BlockManager.setBlockPlacementPolicy(BlockPlacementPolicy newpolicy)", "testcase": false, "constructor": false}, {"identifier": "metaSave", "parameters": "(PrintWriter out)", "modifiers": "public", "return": "void", "signature": "void metaSave(PrintWriter out)", "full_signature": "public void metaSave(PrintWriter out)", "class_method_signature": "BlockManager.metaSave(PrintWriter out)", "testcase": false, "constructor": false}, {"identifier": "dumpBlockMeta", "parameters": "(Block block, PrintWriter out)", "modifiers": "private", "return": "void", "signature": "void dumpBlockMeta(Block block, PrintWriter out)", "full_signature": "private void dumpBlockMeta(Block block, PrintWriter out)", "class_method_signature": "BlockManager.dumpBlockMeta(Block block, PrintWriter out)", "testcase": false, "constructor": false}, {"identifier": "getMaxReplicationStreams", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxReplicationStreams()", "full_signature": "public int getMaxReplicationStreams()", "class_method_signature": "BlockManager.getMaxReplicationStreams()", "testcase": false, "constructor": false}, {"identifier": "checkMinReplication", "parameters": "(Block block)", "modifiers": "public", "return": "boolean", "signature": "boolean checkMinReplication(Block block)", "full_signature": "public boolean checkMinReplication(Block block)", "class_method_signature": "BlockManager.checkMinReplication(Block block)", "testcase": false, "constructor": false}, {"identifier": "commitBlock", "parameters": "(\n      final BlockInfoContiguousUnderConstruction block, final Block commitBlock)", "modifiers": "private static", "return": "boolean", "signature": "boolean commitBlock(\n      final BlockInfoContiguousUnderConstruction block, final Block commitBlock)", "full_signature": "private static boolean commitBlock(\n      final BlockInfoContiguousUnderConstruction block, final Block commitBlock)", "class_method_signature": "BlockManager.commitBlock(\n      final BlockInfoContiguousUnderConstruction block, final Block commitBlock)", "testcase": false, "constructor": false}, {"identifier": "commitOrCompleteLastBlock", "parameters": "(BlockCollection bc,\n      Block commitBlock)", "modifiers": "public", "return": "boolean", "signature": "boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock)", "full_signature": "public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock)", "class_method_signature": "BlockManager.commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock)", "testcase": false, "constructor": false}, {"identifier": "completeBlock", "parameters": "(final BlockCollection bc,\n      final int blkIndex, boolean force)", "modifiers": "private", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force)", "full_signature": "private BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force)", "class_method_signature": "BlockManager.completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force)", "testcase": false, "constructor": false}, {"identifier": "completeBlock", "parameters": "(final BlockCollection bc,\n      final BlockInfoContiguous block, boolean force)", "modifiers": "private", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final BlockInfoContiguous block, boolean force)", "full_signature": "private BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final BlockInfoContiguous block, boolean force)", "class_method_signature": "BlockManager.completeBlock(final BlockCollection bc,\n      final BlockInfoContiguous block, boolean force)", "testcase": false, "constructor": false}, {"identifier": "forceCompleteBlock", "parameters": "(final BlockCollection bc,\n      final BlockInfoContiguousUnderConstruction block)", "modifiers": "public", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous forceCompleteBlock(final BlockCollection bc,\n      final BlockInfoContiguousUnderConstruction block)", "full_signature": "public BlockInfoContiguous forceCompleteBlock(final BlockCollection bc,\n      final BlockInfoContiguousUnderConstruction block)", "class_method_signature": "BlockManager.forceCompleteBlock(final BlockCollection bc,\n      final BlockInfoContiguousUnderConstruction block)", "testcase": false, "constructor": false}, {"identifier": "convertLastBlockToUnderConstruction", "parameters": "(\n      BlockCollection bc, long bytesToRemove)", "modifiers": "public", "return": "LocatedBlock", "signature": "LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove)", "full_signature": "public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove)", "class_method_signature": "BlockManager.convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove)", "testcase": false, "constructor": false}, {"identifier": "getValidLocations", "parameters": "(Block block)", "modifiers": "private", "return": "List<DatanodeStorageInfo>", "signature": "List<DatanodeStorageInfo> getValidLocations(Block block)", "full_signature": "private List<DatanodeStorageInfo> getValidLocations(Block block)", "class_method_signature": "BlockManager.getValidLocations(Block block)", "testcase": false, "constructor": false}, {"identifier": "createLocatedBlockList", "parameters": "(\n      final BlockInfoContiguous[] blocks,\n      final long offset, final long length, final int nrBlocksToReturn,\n      final AccessMode mode)", "modifiers": "private", "return": "List<LocatedBlock>", "signature": "List<LocatedBlock> createLocatedBlockList(\n      final BlockInfoContiguous[] blocks,\n      final long offset, final long length, final int nrBlocksToReturn,\n      final AccessMode mode)", "full_signature": "private List<LocatedBlock> createLocatedBlockList(\n      final BlockInfoContiguous[] blocks,\n      final long offset, final long length, final int nrBlocksToReturn,\n      final AccessMode mode)", "class_method_signature": "BlockManager.createLocatedBlockList(\n      final BlockInfoContiguous[] blocks,\n      final long offset, final long length, final int nrBlocksToReturn,\n      final AccessMode mode)", "testcase": false, "constructor": false}, {"identifier": "createLocatedBlock", "parameters": "(final BlockInfoContiguous[] blocks,\n      final long endPos, final AccessMode mode)", "modifiers": "private", "return": "LocatedBlock", "signature": "LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n      final long endPos, final AccessMode mode)", "full_signature": "private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n      final long endPos, final AccessMode mode)", "class_method_signature": "BlockManager.createLocatedBlock(final BlockInfoContiguous[] blocks,\n      final long endPos, final AccessMode mode)", "testcase": false, "constructor": false}, {"identifier": "createLocatedBlock", "parameters": "(final BlockInfoContiguous blk, final long pos,\n    final BlockTokenSecretManager.AccessMode mode)", "modifiers": "private", "return": "LocatedBlock", "signature": "LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos,\n    final BlockTokenSecretManager.AccessMode mode)", "full_signature": "private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos,\n    final BlockTokenSecretManager.AccessMode mode)", "class_method_signature": "BlockManager.createLocatedBlock(final BlockInfoContiguous blk, final long pos,\n    final BlockTokenSecretManager.AccessMode mode)", "testcase": false, "constructor": false}, {"identifier": "createLocatedBlock", "parameters": "(final BlockInfoContiguous blk, final long pos\n      )", "modifiers": "private", "return": "LocatedBlock", "signature": "LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      )", "full_signature": "private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      )", "class_method_signature": "BlockManager.createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      )", "testcase": false, "constructor": false}, {"identifier": "createLocatedBlocks", "parameters": "(final BlockInfoContiguous[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo)", "modifiers": "public", "return": "LocatedBlocks", "signature": "LocatedBlocks createLocatedBlocks(final BlockInfoContiguous[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo)", "full_signature": "public LocatedBlocks createLocatedBlocks(final BlockInfoContiguous[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo)", "class_method_signature": "BlockManager.createLocatedBlocks(final BlockInfoContiguous[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo)", "testcase": false, "constructor": false}, {"identifier": "getBlockKeys", "parameters": "()", "modifiers": "public", "return": "ExportedBlockKeys", "signature": "ExportedBlockKeys getBlockKeys()", "full_signature": "public ExportedBlockKeys getBlockKeys()", "class_method_signature": "BlockManager.getBlockKeys()", "testcase": false, "constructor": false}, {"identifier": "setBlockToken", "parameters": "(final LocatedBlock b,\n      final BlockTokenSecretManager.AccessMode mode)", "modifiers": "public", "return": "void", "signature": "void setBlockToken(final LocatedBlock b,\n      final BlockTokenSecretManager.AccessMode mode)", "full_signature": "public void setBlockToken(final LocatedBlock b,\n      final BlockTokenSecretManager.AccessMode mode)", "class_method_signature": "BlockManager.setBlockToken(final LocatedBlock b,\n      final BlockTokenSecretManager.AccessMode mode)", "testcase": false, "constructor": false}, {"identifier": "addKeyUpdateCommand", "parameters": "(final List<DatanodeCommand> cmds,\n      final DatanodeDescriptor nodeinfo)", "modifiers": "", "return": "void", "signature": "void addKeyUpdateCommand(final List<DatanodeCommand> cmds,\n      final DatanodeDescriptor nodeinfo)", "full_signature": " void addKeyUpdateCommand(final List<DatanodeCommand> cmds,\n      final DatanodeDescriptor nodeinfo)", "class_method_signature": "BlockManager.addKeyUpdateCommand(final List<DatanodeCommand> cmds,\n      final DatanodeDescriptor nodeinfo)", "testcase": false, "constructor": false}, {"identifier": "generateDataEncryptionKey", "parameters": "()", "modifiers": "public", "return": "DataEncryptionKey", "signature": "DataEncryptionKey generateDataEncryptionKey()", "full_signature": "public DataEncryptionKey generateDataEncryptionKey()", "class_method_signature": "BlockManager.generateDataEncryptionKey()", "testcase": false, "constructor": false}, {"identifier": "adjustReplication", "parameters": "(short replication)", "modifiers": "public", "return": "short", "signature": "short adjustReplication(short replication)", "full_signature": "public short adjustReplication(short replication)", "class_method_signature": "BlockManager.adjustReplication(short replication)", "testcase": false, "constructor": false}, {"identifier": "verifyReplication", "parameters": "(String src,\n                          short replication,\n                          String clientName)", "modifiers": "public", "return": "void", "signature": "void verifyReplication(String src,\n                          short replication,\n                          String clientName)", "full_signature": "public void verifyReplication(String src,\n                          short replication,\n                          String clientName)", "class_method_signature": "BlockManager.verifyReplication(String src,\n                          short replication,\n                          String clientName)", "testcase": false, "constructor": false}, {"identifier": "isSufficientlyReplicated", "parameters": "(BlockInfoContiguous b)", "modifiers": "public", "return": "boolean", "signature": "boolean isSufficientlyReplicated(BlockInfoContiguous b)", "full_signature": "public boolean isSufficientlyReplicated(BlockInfoContiguous b)", "class_method_signature": "BlockManager.isSufficientlyReplicated(BlockInfoContiguous b)", "testcase": false, "constructor": false}, {"identifier": "getBlocks", "parameters": "(DatanodeID datanode, long size\n      )", "modifiers": "public", "return": "BlocksWithLocations", "signature": "BlocksWithLocations getBlocks(DatanodeID datanode, long size\n      )", "full_signature": "public BlocksWithLocations getBlocks(DatanodeID datanode, long size\n      )", "class_method_signature": "BlockManager.getBlocks(DatanodeID datanode, long size\n      )", "testcase": false, "constructor": false}, {"identifier": "getBlocksWithLocations", "parameters": "(final DatanodeID datanode,\n      final long size)", "modifiers": "private", "return": "BlocksWithLocations", "signature": "BlocksWithLocations getBlocksWithLocations(final DatanodeID datanode,\n      final long size)", "full_signature": "private BlocksWithLocations getBlocksWithLocations(final DatanodeID datanode,\n      final long size)", "class_method_signature": "BlockManager.getBlocksWithLocations(final DatanodeID datanode,\n      final long size)", "testcase": false, "constructor": false}, {"identifier": "removeBlocksAssociatedTo", "parameters": "(final DatanodeDescriptor node)", "modifiers": "", "return": "void", "signature": "void removeBlocksAssociatedTo(final DatanodeDescriptor node)", "full_signature": " void removeBlocksAssociatedTo(final DatanodeDescriptor node)", "class_method_signature": "BlockManager.removeBlocksAssociatedTo(final DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "removeBlocksAssociatedTo", "parameters": "(final DatanodeStorageInfo storageInfo)", "modifiers": "", "return": "void", "signature": "void removeBlocksAssociatedTo(final DatanodeStorageInfo storageInfo)", "full_signature": " void removeBlocksAssociatedTo(final DatanodeStorageInfo storageInfo)", "class_method_signature": "BlockManager.removeBlocksAssociatedTo(final DatanodeStorageInfo storageInfo)", "testcase": false, "constructor": false}, {"identifier": "addToInvalidates", "parameters": "(final Block block, final DatanodeInfo datanode)", "modifiers": "", "return": "void", "signature": "void addToInvalidates(final Block block, final DatanodeInfo datanode)", "full_signature": " void addToInvalidates(final Block block, final DatanodeInfo datanode)", "class_method_signature": "BlockManager.addToInvalidates(final Block block, final DatanodeInfo datanode)", "testcase": false, "constructor": false}, {"identifier": "addToInvalidates", "parameters": "(Block b)", "modifiers": "private", "return": "void", "signature": "void addToInvalidates(Block b)", "full_signature": "private void addToInvalidates(Block b)", "class_method_signature": "BlockManager.addToInvalidates(Block b)", "testcase": false, "constructor": false}, {"identifier": "removeFromInvalidates", "parameters": "(final DatanodeInfo datanode)", "modifiers": "", "return": "void", "signature": "void removeFromInvalidates(final DatanodeInfo datanode)", "full_signature": " void removeFromInvalidates(final DatanodeInfo datanode)", "class_method_signature": "BlockManager.removeFromInvalidates(final DatanodeInfo datanode)", "testcase": false, "constructor": false}, {"identifier": "findAndMarkBlockAsCorrupt", "parameters": "(final ExtendedBlock blk,\n      final DatanodeInfo dn, String storageID, String reason)", "modifiers": "public", "return": "void", "signature": "void findAndMarkBlockAsCorrupt(final ExtendedBlock blk,\n      final DatanodeInfo dn, String storageID, String reason)", "full_signature": "public void findAndMarkBlockAsCorrupt(final ExtendedBlock blk,\n      final DatanodeInfo dn, String storageID, String reason)", "class_method_signature": "BlockManager.findAndMarkBlockAsCorrupt(final ExtendedBlock blk,\n      final DatanodeInfo dn, String storageID, String reason)", "testcase": false, "constructor": false}, {"identifier": "markBlockAsCorrupt", "parameters": "(BlockToMarkCorrupt b,\n      DatanodeStorageInfo storageInfo,\n      DatanodeDescriptor node)", "modifiers": "private", "return": "void", "signature": "void markBlockAsCorrupt(BlockToMarkCorrupt b,\n      DatanodeStorageInfo storageInfo,\n      DatanodeDescriptor node)", "full_signature": "private void markBlockAsCorrupt(BlockToMarkCorrupt b,\n      DatanodeStorageInfo storageInfo,\n      DatanodeDescriptor node)", "class_method_signature": "BlockManager.markBlockAsCorrupt(BlockToMarkCorrupt b,\n      DatanodeStorageInfo storageInfo,\n      DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "invalidateBlock", "parameters": "(BlockToMarkCorrupt b, DatanodeInfo dn\n      )", "modifiers": "private", "return": "boolean", "signature": "boolean invalidateBlock(BlockToMarkCorrupt b, DatanodeInfo dn\n      )", "full_signature": "private boolean invalidateBlock(BlockToMarkCorrupt b, DatanodeInfo dn\n      )", "class_method_signature": "BlockManager.invalidateBlock(BlockToMarkCorrupt b, DatanodeInfo dn\n      )", "testcase": false, "constructor": false}, {"identifier": "setPostponeBlocksFromFuture", "parameters": "(boolean postpone)", "modifiers": "public", "return": "void", "signature": "void setPostponeBlocksFromFuture(boolean postpone)", "full_signature": "public void setPostponeBlocksFromFuture(boolean postpone)", "class_method_signature": "BlockManager.setPostponeBlocksFromFuture(boolean postpone)", "testcase": false, "constructor": false}, {"identifier": "postponeBlock", "parameters": "(Block blk)", "modifiers": "private", "return": "void", "signature": "void postponeBlock(Block blk)", "full_signature": "private void postponeBlock(Block blk)", "class_method_signature": "BlockManager.postponeBlock(Block blk)", "testcase": false, "constructor": false}, {"identifier": "updateState", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateState()", "full_signature": " void updateState()", "class_method_signature": "BlockManager.updateState()", "testcase": false, "constructor": false}, {"identifier": "getUnderReplicatedNotMissingBlocks", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getUnderReplicatedNotMissingBlocks()", "full_signature": "public int getUnderReplicatedNotMissingBlocks()", "class_method_signature": "BlockManager.getUnderReplicatedNotMissingBlocks()", "testcase": false, "constructor": false}, {"identifier": "computeInvalidateWork", "parameters": "(int nodesToProcess)", "modifiers": "", "return": "int", "signature": "int computeInvalidateWork(int nodesToProcess)", "full_signature": " int computeInvalidateWork(int nodesToProcess)", "class_method_signature": "BlockManager.computeInvalidateWork(int nodesToProcess)", "testcase": false, "constructor": false}, {"identifier": "computeReplicationWork", "parameters": "(int blocksToProcess)", "modifiers": "", "return": "int", "signature": "int computeReplicationWork(int blocksToProcess)", "full_signature": " int computeReplicationWork(int blocksToProcess)", "class_method_signature": "BlockManager.computeReplicationWork(int blocksToProcess)", "testcase": false, "constructor": false}, {"identifier": "computeReplicationWorkForBlocks", "parameters": "(List<List<Block>> blocksToReplicate)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate)", "full_signature": "@VisibleForTesting int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate)", "class_method_signature": "BlockManager.computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate)", "testcase": false, "constructor": false}, {"identifier": "chooseTarget4WebHDFS", "parameters": "(String src,\n      DatanodeDescriptor clientnode, Set<Node> excludes, long blocksize)", "modifiers": "public", "return": "DatanodeStorageInfo[]", "signature": "DatanodeStorageInfo[] chooseTarget4WebHDFS(String src,\n      DatanodeDescriptor clientnode, Set<Node> excludes, long blocksize)", "full_signature": "public DatanodeStorageInfo[] chooseTarget4WebHDFS(String src,\n      DatanodeDescriptor clientnode, Set<Node> excludes, long blocksize)", "class_method_signature": "BlockManager.chooseTarget4WebHDFS(String src,\n      DatanodeDescriptor clientnode, Set<Node> excludes, long blocksize)", "testcase": false, "constructor": false}, {"identifier": "chooseTarget4AdditionalDatanode", "parameters": "(String src,\n      int numAdditionalNodes,\n      Node clientnode,\n      List<DatanodeStorageInfo> chosen,\n      Set<Node> excludes,\n      long blocksize,\n      byte storagePolicyID)", "modifiers": "public", "return": "DatanodeStorageInfo[]", "signature": "DatanodeStorageInfo[] chooseTarget4AdditionalDatanode(String src,\n      int numAdditionalNodes,\n      Node clientnode,\n      List<DatanodeStorageInfo> chosen,\n      Set<Node> excludes,\n      long blocksize,\n      byte storagePolicyID)", "full_signature": "public DatanodeStorageInfo[] chooseTarget4AdditionalDatanode(String src,\n      int numAdditionalNodes,\n      Node clientnode,\n      List<DatanodeStorageInfo> chosen,\n      Set<Node> excludes,\n      long blocksize,\n      byte storagePolicyID)", "class_method_signature": "BlockManager.chooseTarget4AdditionalDatanode(String src,\n      int numAdditionalNodes,\n      Node clientnode,\n      List<DatanodeStorageInfo> chosen,\n      Set<Node> excludes,\n      long blocksize,\n      byte storagePolicyID)", "testcase": false, "constructor": false}, {"identifier": "chooseTarget4NewBlock", "parameters": "(final String src,\n      final int numOfReplicas, final Node client,\n      final Set<Node> excludedNodes,\n      final long blocksize,\n      final List<String> favoredNodes,\n      final byte storagePolicyID)", "modifiers": "public", "return": "DatanodeStorageInfo[]", "signature": "DatanodeStorageInfo[] chooseTarget4NewBlock(final String src,\n      final int numOfReplicas, final Node client,\n      final Set<Node> excludedNodes,\n      final long blocksize,\n      final List<String> favoredNodes,\n      final byte storagePolicyID)", "full_signature": "public DatanodeStorageInfo[] chooseTarget4NewBlock(final String src,\n      final int numOfReplicas, final Node client,\n      final Set<Node> excludedNodes,\n      final long blocksize,\n      final List<String> favoredNodes,\n      final byte storagePolicyID)", "class_method_signature": "BlockManager.chooseTarget4NewBlock(final String src,\n      final int numOfReplicas, final Node client,\n      final Set<Node> excludedNodes,\n      final long blocksize,\n      final List<String> favoredNodes,\n      final byte storagePolicyID)", "testcase": false, "constructor": false}, {"identifier": "getDatanodeDescriptors", "parameters": "(List<String> nodes)", "modifiers": "", "return": "List<DatanodeDescriptor>", "signature": "List<DatanodeDescriptor> getDatanodeDescriptors(List<String> nodes)", "full_signature": " List<DatanodeDescriptor> getDatanodeDescriptors(List<String> nodes)", "class_method_signature": "BlockManager.getDatanodeDescriptors(List<String> nodes)", "testcase": false, "constructor": false}, {"identifier": "chooseSourceDatanode", "parameters": "(Block block,\n       List<DatanodeDescriptor> containingNodes,\n       List<DatanodeStorageInfo>  nodesContainingLiveReplicas,\n       NumberReplicas numReplicas,\n       int priority)", "modifiers": "@VisibleForTesting", "return": "DatanodeDescriptor", "signature": "DatanodeDescriptor chooseSourceDatanode(Block block,\n       List<DatanodeDescriptor> containingNodes,\n       List<DatanodeStorageInfo>  nodesContainingLiveReplicas,\n       NumberReplicas numReplicas,\n       int priority)", "full_signature": "@VisibleForTesting DatanodeDescriptor chooseSourceDatanode(Block block,\n       List<DatanodeDescriptor> containingNodes,\n       List<DatanodeStorageInfo>  nodesContainingLiveReplicas,\n       NumberReplicas numReplicas,\n       int priority)", "class_method_signature": "BlockManager.chooseSourceDatanode(Block block,\n       List<DatanodeDescriptor> containingNodes,\n       List<DatanodeStorageInfo>  nodesContainingLiveReplicas,\n       NumberReplicas numReplicas,\n       int priority)", "testcase": false, "constructor": false}, {"identifier": "processPendingReplications", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processPendingReplications()", "full_signature": "private void processPendingReplications()", "class_method_signature": "BlockManager.processPendingReplications()", "testcase": false, "constructor": false}, {"identifier": "processReport", "parameters": "(final DatanodeID nodeID,\n      final DatanodeStorage storage,\n      final BlockListAsLongs newReport, BlockReportContext context,\n      boolean lastStorageInRpc)", "modifiers": "public", "return": "boolean", "signature": "boolean processReport(final DatanodeID nodeID,\n      final DatanodeStorage storage,\n      final BlockListAsLongs newReport, BlockReportContext context,\n      boolean lastStorageInRpc)", "full_signature": "public boolean processReport(final DatanodeID nodeID,\n      final DatanodeStorage storage,\n      final BlockListAsLongs newReport, BlockReportContext context,\n      boolean lastStorageInRpc)", "class_method_signature": "BlockManager.processReport(final DatanodeID nodeID,\n      final DatanodeStorage storage,\n      final BlockListAsLongs newReport, BlockReportContext context,\n      boolean lastStorageInRpc)", "testcase": false, "constructor": false}, {"identifier": "removeZombieReplicas", "parameters": "(BlockReportContext context,\n      DatanodeStorageInfo zombie)", "modifiers": "private", "return": "void", "signature": "void removeZombieReplicas(BlockReportContext context,\n      DatanodeStorageInfo zombie)", "full_signature": "private void removeZombieReplicas(BlockReportContext context,\n      DatanodeStorageInfo zombie)", "class_method_signature": "BlockManager.removeZombieReplicas(BlockReportContext context,\n      DatanodeStorageInfo zombie)", "testcase": false, "constructor": false}, {"identifier": "rescanPostponedMisreplicatedBlocks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void rescanPostponedMisreplicatedBlocks()", "full_signature": " void rescanPostponedMisreplicatedBlocks()", "class_method_signature": "BlockManager.rescanPostponedMisreplicatedBlocks()", "testcase": false, "constructor": false}, {"identifier": "processReport", "parameters": "(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "modifiers": "private", "return": "Collection<Block>", "signature": "Collection<Block> processReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "full_signature": "private Collection<Block> processReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "class_method_signature": "BlockManager.processReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "testcase": false, "constructor": false}, {"identifier": "markBlockReplicasAsCorrupt", "parameters": "(BlockInfoContiguous block, \n      long oldGenerationStamp, long oldNumBytes, \n      DatanodeStorageInfo[] newStorages)", "modifiers": "public", "return": "void", "signature": "void markBlockReplicasAsCorrupt(BlockInfoContiguous block, \n      long oldGenerationStamp, long oldNumBytes, \n      DatanodeStorageInfo[] newStorages)", "full_signature": "public void markBlockReplicasAsCorrupt(BlockInfoContiguous block, \n      long oldGenerationStamp, long oldNumBytes, \n      DatanodeStorageInfo[] newStorages)", "class_method_signature": "BlockManager.markBlockReplicasAsCorrupt(BlockInfoContiguous block, \n      long oldGenerationStamp, long oldNumBytes, \n      DatanodeStorageInfo[] newStorages)", "testcase": false, "constructor": false}, {"identifier": "processFirstBlockReport", "parameters": "(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "modifiers": "private", "return": "void", "signature": "void processFirstBlockReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "full_signature": "private void processFirstBlockReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "class_method_signature": "BlockManager.processFirstBlockReport(\n      final DatanodeStorageInfo storageInfo,\n      final BlockListAsLongs report)", "testcase": false, "constructor": false}, {"identifier": "reportDiff", "parameters": "(DatanodeStorageInfo storageInfo, \n      BlockListAsLongs newReport, \n      Collection<BlockInfoContiguous> toAdd,              // add to DatanodeDescriptor\n      Collection<Block> toRemove,           // remove from DatanodeDescriptor\n      Collection<Block> toInvalidate,       // should be removed from DN\n      Collection<BlockToMarkCorrupt> toCorrupt, // add to corrupt replicas list\n      Collection<StatefulBlockInfo> toUC)", "modifiers": "private", "return": "void", "signature": "void reportDiff(DatanodeStorageInfo storageInfo, \n      BlockListAsLongs newReport, \n      Collection<BlockInfoContiguous> toAdd,              // add to DatanodeDescriptor\n      Collection<Block> toRemove,           // remove from DatanodeDescriptor\n      Collection<Block> toInvalidate,       // should be removed from DN\n      Collection<BlockToMarkCorrupt> toCorrupt, // add to corrupt replicas list\n      Collection<StatefulBlockInfo> toUC)", "full_signature": "private void reportDiff(DatanodeStorageInfo storageInfo, \n      BlockListAsLongs newReport, \n      Collection<BlockInfoContiguous> toAdd,              // add to DatanodeDescriptor\n      Collection<Block> toRemove,           // remove from DatanodeDescriptor\n      Collection<Block> toInvalidate,       // should be removed from DN\n      Collection<BlockToMarkCorrupt> toCorrupt, // add to corrupt replicas list\n      Collection<StatefulBlockInfo> toUC)", "class_method_signature": "BlockManager.reportDiff(DatanodeStorageInfo storageInfo, \n      BlockListAsLongs newReport, \n      Collection<BlockInfoContiguous> toAdd,              // add to DatanodeDescriptor\n      Collection<Block> toRemove,           // remove from DatanodeDescriptor\n      Collection<Block> toInvalidate,       // should be removed from DN\n      Collection<BlockToMarkCorrupt> toCorrupt, // add to corrupt replicas list\n      Collection<StatefulBlockInfo> toUC)", "testcase": false, "constructor": false}, {"identifier": "processReportedBlock", "parameters": "(\n      final DatanodeStorageInfo storageInfo,\n      final Block block, final ReplicaState reportedState, \n      final Collection<BlockInfoContiguous> toAdd,\n      final Collection<Block> toInvalidate, \n      final Collection<BlockToMarkCorrupt> toCorrupt,\n      final Collection<StatefulBlockInfo> toUC)", "modifiers": "private", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous processReportedBlock(\n      final DatanodeStorageInfo storageInfo,\n      final Block block, final ReplicaState reportedState, \n      final Collection<BlockInfoContiguous> toAdd,\n      final Collection<Block> toInvalidate, \n      final Collection<BlockToMarkCorrupt> toCorrupt,\n      final Collection<StatefulBlockInfo> toUC)", "full_signature": "private BlockInfoContiguous processReportedBlock(\n      final DatanodeStorageInfo storageInfo,\n      final Block block, final ReplicaState reportedState, \n      final Collection<BlockInfoContiguous> toAdd,\n      final Collection<Block> toInvalidate, \n      final Collection<BlockToMarkCorrupt> toCorrupt,\n      final Collection<StatefulBlockInfo> toUC)", "class_method_signature": "BlockManager.processReportedBlock(\n      final DatanodeStorageInfo storageInfo,\n      final Block block, final ReplicaState reportedState, \n      final Collection<BlockInfoContiguous> toAdd,\n      final Collection<Block> toInvalidate, \n      final Collection<BlockToMarkCorrupt> toCorrupt,\n      final Collection<StatefulBlockInfo> toUC)", "testcase": false, "constructor": false}, {"identifier": "queueReportedBlock", "parameters": "(DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, String reason)", "modifiers": "private", "return": "void", "signature": "void queueReportedBlock(DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, String reason)", "full_signature": "private void queueReportedBlock(DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, String reason)", "class_method_signature": "BlockManager.queueReportedBlock(DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, String reason)", "testcase": false, "constructor": false}, {"identifier": "processQueuedMessagesForBlock", "parameters": "(Block b)", "modifiers": "public", "return": "void", "signature": "void processQueuedMessagesForBlock(Block b)", "full_signature": "public void processQueuedMessagesForBlock(Block b)", "class_method_signature": "BlockManager.processQueuedMessagesForBlock(Block b)", "testcase": false, "constructor": false}, {"identifier": "processQueuedMessages", "parameters": "(Iterable<ReportedBlockInfo> rbis)", "modifiers": "private", "return": "void", "signature": "void processQueuedMessages(Iterable<ReportedBlockInfo> rbis)", "full_signature": "private void processQueuedMessages(Iterable<ReportedBlockInfo> rbis)", "class_method_signature": "BlockManager.processQueuedMessages(Iterable<ReportedBlockInfo> rbis)", "testcase": false, "constructor": false}, {"identifier": "processAllPendingDNMessages", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void processAllPendingDNMessages()", "full_signature": "public void processAllPendingDNMessages()", "class_method_signature": "BlockManager.processAllPendingDNMessages()", "testcase": false, "constructor": false}, {"identifier": "checkReplicaCorrupt", "parameters": "(\n      Block reported, ReplicaState reportedState, \n      BlockInfoContiguous storedBlock, BlockUCState ucState,\n      DatanodeDescriptor dn)", "modifiers": "private", "return": "BlockToMarkCorrupt", "signature": "BlockToMarkCorrupt checkReplicaCorrupt(\n      Block reported, ReplicaState reportedState, \n      BlockInfoContiguous storedBlock, BlockUCState ucState,\n      DatanodeDescriptor dn)", "full_signature": "private BlockToMarkCorrupt checkReplicaCorrupt(\n      Block reported, ReplicaState reportedState, \n      BlockInfoContiguous storedBlock, BlockUCState ucState,\n      DatanodeDescriptor dn)", "class_method_signature": "BlockManager.checkReplicaCorrupt(\n      Block reported, ReplicaState reportedState, \n      BlockInfoContiguous storedBlock, BlockUCState ucState,\n      DatanodeDescriptor dn)", "testcase": false, "constructor": false}, {"identifier": "isBlockUnderConstruction", "parameters": "(BlockInfoContiguous storedBlock,\n      BlockUCState ucState, ReplicaState reportedState)", "modifiers": "private", "return": "boolean", "signature": "boolean isBlockUnderConstruction(BlockInfoContiguous storedBlock,\n      BlockUCState ucState, ReplicaState reportedState)", "full_signature": "private boolean isBlockUnderConstruction(BlockInfoContiguous storedBlock,\n      BlockUCState ucState, ReplicaState reportedState)", "class_method_signature": "BlockManager.isBlockUnderConstruction(BlockInfoContiguous storedBlock,\n      BlockUCState ucState, ReplicaState reportedState)", "testcase": false, "constructor": false}, {"identifier": "addStoredBlockUnderConstruction", "parameters": "(StatefulBlockInfo ucBlock,\n      DatanodeStorageInfo storageInfo)", "modifiers": "", "return": "void", "signature": "void addStoredBlockUnderConstruction(StatefulBlockInfo ucBlock,\n      DatanodeStorageInfo storageInfo)", "full_signature": " void addStoredBlockUnderConstruction(StatefulBlockInfo ucBlock,\n      DatanodeStorageInfo storageInfo)", "class_method_signature": "BlockManager.addStoredBlockUnderConstruction(StatefulBlockInfo ucBlock,\n      DatanodeStorageInfo storageInfo)", "testcase": false, "constructor": false}, {"identifier": "addStoredBlockImmediate", "parameters": "(BlockInfoContiguous storedBlock,\n      DatanodeStorageInfo storageInfo)", "modifiers": "private", "return": "void", "signature": "void addStoredBlockImmediate(BlockInfoContiguous storedBlock,\n      DatanodeStorageInfo storageInfo)", "full_signature": "private void addStoredBlockImmediate(BlockInfoContiguous storedBlock,\n      DatanodeStorageInfo storageInfo)", "class_method_signature": "BlockManager.addStoredBlockImmediate(BlockInfoContiguous storedBlock,\n      DatanodeStorageInfo storageInfo)", "testcase": false, "constructor": false}, {"identifier": "addStoredBlock", "parameters": "(final BlockInfoContiguous block,\n                               DatanodeStorageInfo storageInfo,\n                               DatanodeDescriptor delNodeHint,\n                               boolean logEveryBlock)", "modifiers": "private", "return": "Block", "signature": "Block addStoredBlock(final BlockInfoContiguous block,\n                               DatanodeStorageInfo storageInfo,\n                               DatanodeDescriptor delNodeHint,\n                               boolean logEveryBlock)", "full_signature": "private Block addStoredBlock(final BlockInfoContiguous block,\n                               DatanodeStorageInfo storageInfo,\n                               DatanodeDescriptor delNodeHint,\n                               boolean logEveryBlock)", "class_method_signature": "BlockManager.addStoredBlock(final BlockInfoContiguous block,\n                               DatanodeStorageInfo storageInfo,\n                               DatanodeDescriptor delNodeHint,\n                               boolean logEveryBlock)", "testcase": false, "constructor": false}, {"identifier": "logAddStoredBlock", "parameters": "(BlockInfoContiguous storedBlock,\n      DatanodeDescriptor node)", "modifiers": "private", "return": "void", "signature": "void logAddStoredBlock(BlockInfoContiguous storedBlock,\n      DatanodeDescriptor node)", "full_signature": "private void logAddStoredBlock(BlockInfoContiguous storedBlock,\n      DatanodeDescriptor node)", "class_method_signature": "BlockManager.logAddStoredBlock(BlockInfoContiguous storedBlock,\n      DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "invalidateCorruptReplicas", "parameters": "(BlockInfoContiguous blk)", "modifiers": "private", "return": "void", "signature": "void invalidateCorruptReplicas(BlockInfoContiguous blk)", "full_signature": "private void invalidateCorruptReplicas(BlockInfoContiguous blk)", "class_method_signature": "BlockManager.invalidateCorruptReplicas(BlockInfoContiguous blk)", "testcase": false, "constructor": false}, {"identifier": "processMisReplicatedBlocks", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void processMisReplicatedBlocks()", "full_signature": "public void processMisReplicatedBlocks()", "class_method_signature": "BlockManager.processMisReplicatedBlocks()", "testcase": false, "constructor": false}, {"identifier": "stopReplicationInitializer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopReplicationInitializer()", "full_signature": "private void stopReplicationInitializer()", "class_method_signature": "BlockManager.stopReplicationInitializer()", "testcase": false, "constructor": false}, {"identifier": "processMisReplicatesAsync", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processMisReplicatesAsync()", "full_signature": "private void processMisReplicatesAsync()", "class_method_signature": "BlockManager.processMisReplicatesAsync()", "testcase": false, "constructor": false}, {"identifier": "getReplicationQueuesInitProgress", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getReplicationQueuesInitProgress()", "full_signature": "public double getReplicationQueuesInitProgress()", "class_method_signature": "BlockManager.getReplicationQueuesInitProgress()", "testcase": false, "constructor": false}, {"identifier": "processMisReplicatedBlock", "parameters": "(BlockInfoContiguous block)", "modifiers": "private", "return": "MisReplicationResult", "signature": "MisReplicationResult processMisReplicatedBlock(BlockInfoContiguous block)", "full_signature": "private MisReplicationResult processMisReplicatedBlock(BlockInfoContiguous block)", "class_method_signature": "BlockManager.processMisReplicatedBlock(BlockInfoContiguous block)", "testcase": false, "constructor": false}, {"identifier": "setReplication", "parameters": "(final short oldRepl, final short newRepl,\n      final String src, final Block... blocks)", "modifiers": "public", "return": "void", "signature": "void setReplication(final short oldRepl, final short newRepl,\n      final String src, final Block... blocks)", "full_signature": "public void setReplication(final short oldRepl, final short newRepl,\n      final String src, final Block... blocks)", "class_method_signature": "BlockManager.setReplication(final short oldRepl, final short newRepl,\n      final String src, final Block... blocks)", "testcase": false, "constructor": false}, {"identifier": "processOverReplicatedBlock", "parameters": "(final Block block,\n      final short replication, final DatanodeDescriptor addedNode,\n      DatanodeDescriptor delNodeHint)", "modifiers": "private", "return": "void", "signature": "void processOverReplicatedBlock(final Block block,\n      final short replication, final DatanodeDescriptor addedNode,\n      DatanodeDescriptor delNodeHint)", "full_signature": "private void processOverReplicatedBlock(final Block block,\n      final short replication, final DatanodeDescriptor addedNode,\n      DatanodeDescriptor delNodeHint)", "class_method_signature": "BlockManager.processOverReplicatedBlock(final Block block,\n      final short replication, final DatanodeDescriptor addedNode,\n      DatanodeDescriptor delNodeHint)", "testcase": false, "constructor": false}, {"identifier": "chooseExcessReplicates", "parameters": "(final Collection<DatanodeStorageInfo> nonExcess, \n                              Block b, short replication,\n                              DatanodeDescriptor addedNode,\n                              DatanodeDescriptor delNodeHint,\n                              BlockPlacementPolicy replicator)", "modifiers": "private", "return": "void", "signature": "void chooseExcessReplicates(final Collection<DatanodeStorageInfo> nonExcess, \n                              Block b, short replication,\n                              DatanodeDescriptor addedNode,\n                              DatanodeDescriptor delNodeHint,\n                              BlockPlacementPolicy replicator)", "full_signature": "private void chooseExcessReplicates(final Collection<DatanodeStorageInfo> nonExcess, \n                              Block b, short replication,\n                              DatanodeDescriptor addedNode,\n                              DatanodeDescriptor delNodeHint,\n                              BlockPlacementPolicy replicator)", "class_method_signature": "BlockManager.chooseExcessReplicates(final Collection<DatanodeStorageInfo> nonExcess, \n                              Block b, short replication,\n                              DatanodeDescriptor addedNode,\n                              DatanodeDescriptor delNodeHint,\n                              BlockPlacementPolicy replicator)", "testcase": false, "constructor": false}, {"identifier": "useDelHint", "parameters": "(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List<DatanodeStorageInfo> moreThan1Racks,\n      List<StorageType> excessTypes)", "modifiers": "static", "return": "boolean", "signature": "boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List<DatanodeStorageInfo> moreThan1Racks,\n      List<StorageType> excessTypes)", "full_signature": "static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List<DatanodeStorageInfo> moreThan1Racks,\n      List<StorageType> excessTypes)", "class_method_signature": "BlockManager.useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List<DatanodeStorageInfo> moreThan1Racks,\n      List<StorageType> excessTypes)", "testcase": false, "constructor": false}, {"identifier": "addToExcessReplicate", "parameters": "(DatanodeInfo dn, Block block)", "modifiers": "private", "return": "void", "signature": "void addToExcessReplicate(DatanodeInfo dn, Block block)", "full_signature": "private void addToExcessReplicate(DatanodeInfo dn, Block block)", "class_method_signature": "BlockManager.addToExcessReplicate(DatanodeInfo dn, Block block)", "testcase": false, "constructor": false}, {"identifier": "removeStoredBlock", "parameters": "(DatanodeStorageInfo storageInfo, Block block,\n      DatanodeDescriptor node)", "modifiers": "private", "return": "void", "signature": "void removeStoredBlock(DatanodeStorageInfo storageInfo, Block block,\n      DatanodeDescriptor node)", "full_signature": "private void removeStoredBlock(DatanodeStorageInfo storageInfo, Block block,\n      DatanodeDescriptor node)", "class_method_signature": "BlockManager.removeStoredBlock(DatanodeStorageInfo storageInfo, Block block,\n      DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "removeStoredBlock", "parameters": "(Block block, DatanodeDescriptor node)", "modifiers": "public", "return": "void", "signature": "void removeStoredBlock(Block block, DatanodeDescriptor node)", "full_signature": "public void removeStoredBlock(Block block, DatanodeDescriptor node)", "class_method_signature": "BlockManager.removeStoredBlock(Block block, DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(Block block, List<BlockWithLocations> results)", "modifiers": "private", "return": "long", "signature": "long addBlock(Block block, List<BlockWithLocations> results)", "full_signature": "private long addBlock(Block block, List<BlockWithLocations> results)", "class_method_signature": "BlockManager.addBlock(Block block, List<BlockWithLocations> results)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(DatanodeStorageInfo storageInfo, Block block, String delHint)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)", "full_signature": "@VisibleForTesting void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)", "class_method_signature": "BlockManager.addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)", "testcase": false, "constructor": false}, {"identifier": "processAndHandleReportedBlock", "parameters": "(\n      DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, DatanodeDescriptor delHintNode)", "modifiers": "private", "return": "void", "signature": "void processAndHandleReportedBlock(\n      DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, DatanodeDescriptor delHintNode)", "full_signature": "private void processAndHandleReportedBlock(\n      DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, DatanodeDescriptor delHintNode)", "class_method_signature": "BlockManager.processAndHandleReportedBlock(\n      DatanodeStorageInfo storageInfo, Block block,\n      ReplicaState reportedState, DatanodeDescriptor delHintNode)", "testcase": false, "constructor": false}, {"identifier": "processIncrementalBlockReport", "parameters": "(final DatanodeID nodeID,\n      final StorageReceivedDeletedBlocks srdb)", "modifiers": "public", "return": "void", "signature": "void processIncrementalBlockReport(final DatanodeID nodeID,\n      final StorageReceivedDeletedBlocks srdb)", "full_signature": "public void processIncrementalBlockReport(final DatanodeID nodeID,\n      final StorageReceivedDeletedBlocks srdb)", "class_method_signature": "BlockManager.processIncrementalBlockReport(final DatanodeID nodeID,\n      final StorageReceivedDeletedBlocks srdb)", "testcase": false, "constructor": false}, {"identifier": "countNodes", "parameters": "(Block b)", "modifiers": "public", "return": "NumberReplicas", "signature": "NumberReplicas countNodes(Block b)", "full_signature": "public NumberReplicas countNodes(Block b)", "class_method_signature": "BlockManager.countNodes(Block b)", "testcase": false, "constructor": false}, {"identifier": "countLiveNodes", "parameters": "(BlockInfoContiguous b)", "modifiers": "", "return": "int", "signature": "int countLiveNodes(BlockInfoContiguous b)", "full_signature": " int countLiveNodes(BlockInfoContiguous b)", "class_method_signature": "BlockManager.countLiveNodes(BlockInfoContiguous b)", "testcase": false, "constructor": false}, {"identifier": "processOverReplicatedBlocksOnReCommission", "parameters": "(\n      final DatanodeDescriptor srcNode)", "modifiers": "", "return": "void", "signature": "void processOverReplicatedBlocksOnReCommission(\n      final DatanodeDescriptor srcNode)", "full_signature": " void processOverReplicatedBlocksOnReCommission(\n      final DatanodeDescriptor srcNode)", "class_method_signature": "BlockManager.processOverReplicatedBlocksOnReCommission(\n      final DatanodeDescriptor srcNode)", "testcase": false, "constructor": false}, {"identifier": "isNodeHealthyForDecommission", "parameters": "(DatanodeDescriptor node)", "modifiers": "", "return": "boolean", "signature": "boolean isNodeHealthyForDecommission(DatanodeDescriptor node)", "full_signature": " boolean isNodeHealthyForDecommission(DatanodeDescriptor node)", "class_method_signature": "BlockManager.isNodeHealthyForDecommission(DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "getActiveBlockCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getActiveBlockCount()", "full_signature": "public int getActiveBlockCount()", "class_method_signature": "BlockManager.getActiveBlockCount()", "testcase": false, "constructor": false}, {"identifier": "getStorages", "parameters": "(BlockInfoContiguous block)", "modifiers": "public", "return": "DatanodeStorageInfo[]", "signature": "DatanodeStorageInfo[] getStorages(BlockInfoContiguous block)", "full_signature": "public DatanodeStorageInfo[] getStorages(BlockInfoContiguous block)", "class_method_signature": "BlockManager.getStorages(BlockInfoContiguous block)", "testcase": false, "constructor": false}, {"identifier": "getTotalBlocks", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalBlocks()", "full_signature": "public int getTotalBlocks()", "class_method_signature": "BlockManager.getTotalBlocks()", "testcase": false, "constructor": false}, {"identifier": "removeBlock", "parameters": "(Block block)", "modifiers": "public", "return": "void", "signature": "void removeBlock(Block block)", "full_signature": "public void removeBlock(Block block)", "class_method_signature": "BlockManager.removeBlock(Block block)", "testcase": false, "constructor": false}, {"identifier": "getStoredBlock", "parameters": "(Block block)", "modifiers": "public", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous getStoredBlock(Block block)", "full_signature": "public BlockInfoContiguous getStoredBlock(Block block)", "class_method_signature": "BlockManager.getStoredBlock(Block block)", "testcase": false, "constructor": false}, {"identifier": "updateNeededReplications", "parameters": "(final Block block,\n      final int curReplicasDelta, int expectedReplicasDelta)", "modifiers": "private", "return": "void", "signature": "void updateNeededReplications(final Block block,\n      final int curReplicasDelta, int expectedReplicasDelta)", "full_signature": "private void updateNeededReplications(final Block block,\n      final int curReplicasDelta, int expectedReplicasDelta)", "class_method_signature": "BlockManager.updateNeededReplications(final Block block,\n      final int curReplicasDelta, int expectedReplicasDelta)", "testcase": false, "constructor": false}, {"identifier": "checkReplication", "parameters": "(BlockCollection bc)", "modifiers": "public", "return": "void", "signature": "void checkReplication(BlockCollection bc)", "full_signature": "public void checkReplication(BlockCollection bc)", "class_method_signature": "BlockManager.checkReplication(BlockCollection bc)", "testcase": false, "constructor": false}, {"identifier": "getReplication", "parameters": "(Block block)", "modifiers": "private", "return": "int", "signature": "int getReplication(Block block)", "full_signature": "private int getReplication(Block block)", "class_method_signature": "BlockManager.getReplication(Block block)", "testcase": false, "constructor": false}, {"identifier": "invalidateWorkForOneNode", "parameters": "(DatanodeInfo dn)", "modifiers": "private", "return": "int", "signature": "int invalidateWorkForOneNode(DatanodeInfo dn)", "full_signature": "private int invalidateWorkForOneNode(DatanodeInfo dn)", "class_method_signature": "BlockManager.invalidateWorkForOneNode(DatanodeInfo dn)", "testcase": false, "constructor": false}, {"identifier": "blockHasEnoughRacks", "parameters": "(Block b)", "modifiers": "", "return": "boolean", "signature": "boolean blockHasEnoughRacks(Block b)", "full_signature": " boolean blockHasEnoughRacks(Block b)", "class_method_signature": "BlockManager.blockHasEnoughRacks(Block b)", "testcase": false, "constructor": false}, {"identifier": "isNeededReplication", "parameters": "(Block b, int expected, int current)", "modifiers": "", "return": "boolean", "signature": "boolean isNeededReplication(Block b, int expected, int current)", "full_signature": " boolean isNeededReplication(Block b, int expected, int current)", "class_method_signature": "BlockManager.isNeededReplication(Block b, int expected, int current)", "testcase": false, "constructor": false}, {"identifier": "getMissingBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMissingBlocksCount()", "full_signature": "public long getMissingBlocksCount()", "class_method_signature": "BlockManager.getMissingBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "getMissingReplOneBlocksCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMissingReplOneBlocksCount()", "full_signature": "public long getMissingReplOneBlocksCount()", "class_method_signature": "BlockManager.getMissingReplOneBlocksCount()", "testcase": false, "constructor": false}, {"identifier": "addBlockCollection", "parameters": "(BlockInfoContiguous block,\n      BlockCollection bc)", "modifiers": "public", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous addBlockCollection(BlockInfoContiguous block,\n      BlockCollection bc)", "full_signature": "public BlockInfoContiguous addBlockCollection(BlockInfoContiguous block,\n      BlockCollection bc)", "class_method_signature": "BlockManager.addBlockCollection(BlockInfoContiguous block,\n      BlockCollection bc)", "testcase": false, "constructor": false}, {"identifier": "getBlockCollection", "parameters": "(Block b)", "modifiers": "public", "return": "BlockCollection", "signature": "BlockCollection getBlockCollection(Block b)", "full_signature": "public BlockCollection getBlockCollection(Block b)", "class_method_signature": "BlockManager.getBlockCollection(Block b)", "testcase": false, "constructor": false}, {"identifier": "getStorages", "parameters": "(final Block block)", "modifiers": "public", "return": "Iterable<DatanodeStorageInfo>", "signature": "Iterable<DatanodeStorageInfo> getStorages(final Block block)", "full_signature": "public Iterable<DatanodeStorageInfo> getStorages(final Block block)", "class_method_signature": "BlockManager.getStorages(final Block block)", "testcase": false, "constructor": false}, {"identifier": "numCorruptReplicas", "parameters": "(Block block)", "modifiers": "public", "return": "int", "signature": "int numCorruptReplicas(Block block)", "full_signature": "public int numCorruptReplicas(Block block)", "class_method_signature": "BlockManager.numCorruptReplicas(Block block)", "testcase": false, "constructor": false}, {"identifier": "removeBlockFromMap", "parameters": "(Block block)", "modifiers": "public", "return": "void", "signature": "void removeBlockFromMap(Block block)", "full_signature": "public void removeBlockFromMap(Block block)", "class_method_signature": "BlockManager.removeBlockFromMap(Block block)", "testcase": false, "constructor": false}, {"identifier": "removeFromExcessReplicateMap", "parameters": "(Block block)", "modifiers": "private", "return": "void", "signature": "void removeFromExcessReplicateMap(Block block)", "full_signature": "private void removeFromExcessReplicateMap(Block block)", "class_method_signature": "BlockManager.removeFromExcessReplicateMap(Block block)", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "BlockManager.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "getCorruptReplicaBlockIds", "parameters": "(int numExpectedBlocks,\n                                   Long startingBlockId)", "modifiers": "public", "return": "long[]", "signature": "long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId)", "full_signature": "public long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId)", "class_method_signature": "BlockManager.getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId)", "testcase": false, "constructor": false}, {"identifier": "getCorruptReplicaBlockIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Block>", "signature": "Iterator<Block> getCorruptReplicaBlockIterator()", "full_signature": "public Iterator<Block> getCorruptReplicaBlockIterator()", "class_method_signature": "BlockManager.getCorruptReplicaBlockIterator()", "testcase": false, "constructor": false}, {"identifier": "getCorruptReplicas", "parameters": "(Block block)", "modifiers": "public", "return": "Collection<DatanodeDescriptor>", "signature": "Collection<DatanodeDescriptor> getCorruptReplicas(Block block)", "full_signature": "public Collection<DatanodeDescriptor> getCorruptReplicas(Block block)", "class_method_signature": "BlockManager.getCorruptReplicas(Block block)", "testcase": false, "constructor": false}, {"identifier": "getCorruptReason", "parameters": "(Block block, DatanodeDescriptor node)", "modifiers": "public", "return": "String", "signature": "String getCorruptReason(Block block, DatanodeDescriptor node)", "full_signature": "public String getCorruptReason(Block block, DatanodeDescriptor node)", "class_method_signature": "BlockManager.getCorruptReason(Block block, DatanodeDescriptor node)", "testcase": false, "constructor": false}, {"identifier": "numOfUnderReplicatedBlocks", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numOfUnderReplicatedBlocks()", "full_signature": "public int numOfUnderReplicatedBlocks()", "class_method_signature": "BlockManager.numOfUnderReplicatedBlocks()", "testcase": false, "constructor": false}, {"identifier": "computeDatanodeWork", "parameters": "()", "modifiers": "", "return": "int", "signature": "int computeDatanodeWork()", "full_signature": " int computeDatanodeWork()", "class_method_signature": "BlockManager.computeDatanodeWork()", "testcase": false, "constructor": false}, {"identifier": "clearQueues", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearQueues()", "full_signature": "public void clearQueues()", "class_method_signature": "BlockManager.clearQueues()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "BlockManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "BlockManager.clear()", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"}, "focal_method": {"identifier": "blockHasEnoughRacks", "parameters": "(Block b)", "modifiers": "", "return": "boolean", "body": "boolean blockHasEnoughRacks(Block b) {\n    boolean enoughRacks = false;;\n    Collection<DatanodeDescriptor> corruptNodes = \n                                  corruptReplicas.getNodes(b);\n    int numExpectedReplicas = getReplication(b);\n    String rackName = null;\n    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {\n      final DatanodeDescriptor cur = storage.getDatanodeDescriptor();\n      if (!cur.isDecommissionInProgress() && !cur.isDecommissioned()) {\n        if ((corruptNodes == null ) || !corruptNodes.contains(cur)) {\n          if (numExpectedReplicas == 1 ||\n              (numExpectedReplicas > 1 &&\n                  !datanodeManager.hasClusterEverBeenMultiRack())) {\n            enoughRacks = true;\n            break;\n          }\n          String rackNameNew = cur.getNetworkLocation();\n          if (rackName == null) {\n            rackName = rackNameNew;\n          } else if (!rackName.equals(rackNameNew)) {\n            enoughRacks = true;\n            break;\n          }\n        }\n      }\n    }\n    return enoughRacks;\n  }", "signature": "boolean blockHasEnoughRacks(Block b)", "full_signature": " boolean blockHasEnoughRacks(Block b)", "class_method_signature": "BlockManager.blockHasEnoughRacks(Block b)", "testcase": false, "constructor": false, "invocations": ["getNodes", "getReplication", "getStorages", "getDatanodeDescriptor", "isDecommissionInProgress", "isDecommissioned", "contains", "hasClusterEverBeenMultiRack", "getNetworkLocation", "equals"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}