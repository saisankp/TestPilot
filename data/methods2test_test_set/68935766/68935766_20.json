{"test_class": {"identifier": "TrieEntryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final TrieEntry<String> ENTRY = new TrieEntry<>('a', null, \"key\", \"value\");", "modifier": "static final", "type": "TrieEntry<String>", "declarator": "ENTRY = new TrieEntry<>('a', null, \"key\", \"value\")", "var_name": "ENTRY"}, {"original_string": "TrieEntry<String> entry = new TrieEntry((char) 0, null);", "modifier": "", "type": "TrieEntry<String>", "declarator": "entry = new TrieEntry((char) 0, null)", "var_name": "entry"}], "file": "commons/src/test/java/com/karuslabs/commons/util/collection/TrieEntryTest.java"}, "test_case": {"identifier": "get_null", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void get_null() {\n        assertNull(entry.child(' '));\n    }", "signature": "void get_null()", "full_signature": "@Test void get_null()", "class_method_signature": "TrieEntryTest.get_null()", "testcase": true, "constructor": false, "invocations": ["assertNull", "child"]}, "focal_class": {"identifier": "TrieEntry", "superclass": "", "interfaces": "implements Entry<String, T>", "fields": [{"original_string": "static final int PRINTABLE = 95;", "modifier": "static final", "type": "int", "declarator": "PRINTABLE = 95", "var_name": "PRINTABLE"}, {"original_string": "static final int OFFSET = 32;", "modifier": "static final", "type": "int", "declarator": "OFFSET = 32", "var_name": "OFFSET"}, {"original_string": "final char character;", "modifier": "final", "type": "char", "declarator": "character", "var_name": "character"}, {"original_string": "final @Nullable TrieEntry<T> parent;", "modifier": "final @Nullable", "type": "TrieEntry<T>", "declarator": "parent", "var_name": "parent"}, {"original_string": "@Nullable String key;", "modifier": "@Nullable", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "@Nullable T value;", "modifier": "@Nullable", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "@Lazy TrieEntry<T>[] ascii;", "modifier": "@Lazy", "type": "TrieEntry<T>[]", "declarator": "ascii", "var_name": "ascii"}, {"original_string": "@Lazy Map<Character, TrieEntry<T>> expanded;", "modifier": "@Lazy", "type": "Map<Character, TrieEntry<T>>", "declarator": "expanded", "var_name": "expanded"}, {"original_string": "int children;", "modifier": "", "type": "int", "declarator": "children", "var_name": "children"}], "methods": [{"identifier": "TrieEntry", "parameters": "(char character, @Nullable TrieEntry<T> parent)", "modifiers": "", "return": "", "signature": " TrieEntry(char character, @Nullable TrieEntry<T> parent)", "full_signature": "  TrieEntry(char character, @Nullable TrieEntry<T> parent)", "class_method_signature": "TrieEntry.TrieEntry(char character, @Nullable TrieEntry<T> parent)", "testcase": false, "constructor": true}, {"identifier": "TrieEntry", "parameters": "(char character, @Nullable TrieEntry<T> parent, String key, T value)", "modifiers": "", "return": "", "signature": " TrieEntry(char character, @Nullable TrieEntry<T> parent, String key, T value)", "full_signature": "  TrieEntry(char character, @Nullable TrieEntry<T> parent, String key, T value)", "class_method_signature": "TrieEntry.TrieEntry(char character, @Nullable TrieEntry<T> parent, String key, T value)", "testcase": false, "constructor": true}, {"identifier": "child", "parameters": "(char character)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "signature": "TrieEntry<T> child(char character)", "full_signature": "@Nullable TrieEntry<T> child(char character)", "class_method_signature": "TrieEntry.child(char character)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(char character)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "signature": "TrieEntry<T> add(char character)", "full_signature": "@Nullable TrieEntry<T> add(char character)", "class_method_signature": "TrieEntry.add(char character)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(char character, String key, T value)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "signature": "TrieEntry<T> add(char character, String key, T value)", "full_signature": "@Nullable TrieEntry<T> add(char character, String key, T value)", "class_method_signature": "TrieEntry.add(char character, String key, T value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(char character, String key, T value)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "signature": "TrieEntry<T> set(char character, String key, T value)", "full_signature": "@Nullable TrieEntry<T> set(char character, String key, T value)", "class_method_signature": "TrieEntry.set(char character, String key, T value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(char character)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "signature": "TrieEntry<T> remove(char character)", "full_signature": "@Nullable TrieEntry<T> remove(char character)", "class_method_signature": "TrieEntry.remove(char character)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "TrieEntry.clear()", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "String", "signature": "String getKey()", "full_signature": "@Override public @Nullable String getKey()", "class_method_signature": "TrieEntry.getKey()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "T", "signature": "T getValue()", "full_signature": "@Override public @Nullable T getValue()", "class_method_signature": "TrieEntry.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(T value)", "modifiers": "@Override public @Nullable", "return": "T", "signature": "T setValue(T value)", "full_signature": "@Override public @Nullable T setValue(T value)", "class_method_signature": "TrieEntry.setValue(T value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "TrieEntry.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TrieEntry.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TrieEntry.toString()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/collection/TrieEntry.java"}, "focal_method": {"identifier": "child", "parameters": "(char character)", "modifiers": "@Nullable", "return": "TrieEntry<T>", "body": "@Nullable TrieEntry<T> child(char character) {\n        if (ascii != null && 31 < character && character < 127) {\n            return ascii[character - OFFSET];\n            \n        } else if (expanded != null) {\n            return expanded.get(character);\n            \n        } else {\n            return null;\n        }\n    }", "signature": "TrieEntry<T> child(char character)", "full_signature": "@Nullable TrieEntry<T> child(char character)", "class_method_signature": "TrieEntry.child(char character)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}