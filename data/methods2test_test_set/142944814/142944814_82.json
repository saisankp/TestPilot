{"test_class": {"identifier": "DecoratingRequesterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected Context context;", "modifier": "protected", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "core/transport/src/test/java/hera/client/DecoratingRequesterTest.java"}, "test_case": {"identifier": "testFailRequestOnNoContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFailRequestOnNoContext() throws Exception {\n    final Requester requester = new DecoratingRequester();\n    final Exception expected = new IllegalStateException();\n    final String name = randomUUID().toString();\n    final TestInvocation<String> invocation = new TestInvocation<>(new RequestMethod<String>() {\n      @Override\n      public String getName() {\n        return name;\n      }\n\n      @Override\n      protected String runInternal(final List<Object> parameters) throws Exception {\n        throw expected;\n      }\n    });\n\n    try {\n      requester.request(invocation);\n      fail(\"Should throw exception\");\n    } catch (Exception actual) {\n      assertEquals(expected, actual);\n    }\n  }", "signature": "void testFailRequestOnNoContext()", "full_signature": "@Test public void testFailRequestOnNoContext()", "class_method_signature": "DecoratingRequesterTest.testFailRequestOnNoContext()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "request", "fail", "assertEquals"]}, "focal_class": {"identifier": "DecoratingRequester", "superclass": "", "interfaces": "implements Requester", "fields": [{"original_string": "protected static final String ORIGIN_LINE = \"------------ caused by ------------\";", "modifier": "protected static final", "type": "String", "declarator": "ORIGIN_LINE = \"------------ caused by ------------\"", "var_name": "ORIGIN_LINE"}, {"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Map<String, Invocation<?>> method2Invocation = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "Map<String, Invocation<?>>", "declarator": "method2Invocation = new ConcurrentHashMap<>()", "var_name": "method2Invocation"}, {"original_string": "protected final Object failoverHandlerLock = new Object();", "modifier": "protected final", "type": "Object", "declarator": "failoverHandlerLock = new Object()", "var_name": "failoverHandlerLock"}, {"original_string": "protected volatile FailoverHandler cached;", "modifier": "protected volatile", "type": "FailoverHandler", "declarator": "cached", "var_name": "cached"}], "methods": [{"identifier": "DecoratingRequester", "parameters": "()", "modifiers": "", "return": "", "signature": " DecoratingRequester()", "full_signature": "  DecoratingRequester()", "class_method_signature": "DecoratingRequester.DecoratingRequester()", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(final Invocation<T> invocation)", "modifiers": "@Override public", "return": "T", "signature": "T request(final Invocation<T> invocation)", "full_signature": "@Override public T request(final Invocation<T> invocation)", "class_method_signature": "DecoratingRequester.request(final Invocation<T> invocation)", "testcase": false, "constructor": false}, {"identifier": "withDecorated", "parameters": "(final Invocation<R> invocation)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Invocation<R>", "signature": "Invocation<R> withDecorated(final Invocation<R> invocation)", "full_signature": "@SuppressWarnings(\"unchecked\") protected Invocation<R> withDecorated(final Invocation<R> invocation)", "class_method_signature": "DecoratingRequester.withDecorated(final Invocation<R> invocation)", "testcase": false, "constructor": false}, {"identifier": "withTimeout", "parameters": "(final Invocation<R> invocation)", "modifiers": "protected", "return": "Invocation<R>", "signature": "Invocation<R> withTimeout(final Invocation<R> invocation)", "full_signature": "protected Invocation<R> withTimeout(final Invocation<R> invocation)", "class_method_signature": "DecoratingRequester.withTimeout(final Invocation<R> invocation)", "testcase": false, "constructor": false}, {"identifier": "withBefore", "parameters": "(final Invocation<R> invocation)", "modifiers": "protected", "return": "Invocation<R>", "signature": "Invocation<R> withBefore(final Invocation<R> invocation)", "full_signature": "protected Invocation<R> withBefore(final Invocation<R> invocation)", "class_method_signature": "DecoratingRequester.withBefore(final Invocation<R> invocation)", "testcase": false, "constructor": false}, {"identifier": "withAfterSuccess", "parameters": "(final Invocation<R> invocation)", "modifiers": "protected", "return": "Invocation<R>", "signature": "Invocation<R> withAfterSuccess(final Invocation<R> invocation)", "full_signature": "protected Invocation<R> withAfterSuccess(final Invocation<R> invocation)", "class_method_signature": "DecoratingRequester.withAfterSuccess(final Invocation<R> invocation)", "testcase": false, "constructor": false}, {"identifier": "withAtferFailure", "parameters": "(final Invocation<R> invocation)", "modifiers": "protected", "return": "Invocation<R>", "signature": "Invocation<R> withAtferFailure(final Invocation<R> invocation)", "full_signature": "protected Invocation<R> withAtferFailure(final Invocation<R> invocation)", "class_method_signature": "DecoratingRequester.withAtferFailure(final Invocation<R> invocation)", "testcase": false, "constructor": false}, {"identifier": "handleFailover", "parameters": "(final Invocation<T> invocation,\n      final Response<T> response)", "modifiers": "protected", "return": "Response<T>", "signature": "Response<T> handleFailover(final Invocation<T> invocation,\n      final Response<T> response)", "full_signature": "protected Response<T> handleFailover(final Invocation<T> invocation,\n      final Response<T> response)", "class_method_signature": "DecoratingRequester.handleFailover(final Invocation<T> invocation,\n      final Response<T> response)", "testcase": false, "constructor": false}, {"identifier": "getFailoverHandler", "parameters": "()", "modifiers": "protected", "return": "FailoverHandler", "signature": "FailoverHandler getFailoverHandler()", "full_signature": "protected FailoverHandler getFailoverHandler()", "class_method_signature": "DecoratingRequester.getFailoverHandler()", "testcase": false, "constructor": false}, {"identifier": "concatStackTrace", "parameters": "(final StackTraceElement[] current,\n      final StackTraceElement[] cause)", "modifiers": "protected final", "return": "StackTraceElement[]", "signature": "StackTraceElement[] concatStackTrace(final StackTraceElement[] current,\n      final StackTraceElement[] cause)", "full_signature": "protected final StackTraceElement[] concatStackTrace(final StackTraceElement[] current,\n      final StackTraceElement[] cause)", "class_method_signature": "DecoratingRequester.concatStackTrace(final StackTraceElement[] current,\n      final StackTraceElement[] cause)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/DecoratingRequester.java"}, "focal_method": {"identifier": "request", "parameters": "(final Invocation<T> invocation)", "modifiers": "@Override public", "return": "T", "body": "@Override\n  public <T> T request(final Invocation<T> invocation) throws Exception {\n    assertNotNull(invocation, \"Invocation must not null\");\n    logger.debug(\"Request with invocation: {}\", invocation);\n\n    Response<T> response;\n    final Invocation<T> decorated = withDecorated(invocation);\n    logger.trace(\"Decorated: {}\", decorated);\n    try {\n      final T value = decorated.invoke();\n      logger.debug(\"Success: {}\", value);\n      response = Response.success(value);\n    } catch (Exception e) {\n      logger.debug(\"Failure: {}\", e.toString());\n      response = Response.fail(e);\n      response = handleFailover(decorated, response);\n    }\n\n    if (null != response.getError()) {\n      // need to adjust stacktrace (current stack + origin stack)\n      final Exception error = response.getError();\n      error.setStackTrace(concatStackTrace(new Throwable().getStackTrace(),\n          error.getStackTrace()));\n      throw error;\n    }\n\n    return response.getValue();\n  }", "signature": "T request(final Invocation<T> invocation)", "full_signature": "@Override public T request(final Invocation<T> invocation)", "class_method_signature": "DecoratingRequester.request(final Invocation<T> invocation)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "debug", "withDecorated", "trace", "invoke", "debug", "success", "debug", "toString", "fail", "handleFailover", "getError", "getError", "setStackTrace", "concatStackTrace", "getStackTrace", "getStackTrace", "getValue"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}