{"test_class": {"identifier": "DebuggerSequenceImplTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IRouter routerMock;", "modifier": "private", "type": "IRouter", "declarator": "routerMock", "var_name": "routerMock"}, {"original_string": "private IMessageProcessingSequence sequenceMock;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "sequenceMock", "var_name": "sequenceMock"}, {"original_string": "private IMessageReceiver debuggerReceiverMock;", "modifier": "private", "type": "IMessageReceiver", "declarator": "debuggerReceiverMock", "var_name": "debuggerReceiverMock"}, {"original_string": "private IMessageReceiver sequenceReceiverMock = mock(IMessageReceiver.class);", "modifier": "private", "type": "IMessageReceiver", "declarator": "sequenceReceiverMock = mock(IMessageReceiver.class)", "var_name": "sequenceReceiverMock"}, {"original_string": "private IObject sequenceArgumentsMock = mock(IObject.class);", "modifier": "private", "type": "IObject", "declarator": "sequenceArgumentsMock = mock(IObject.class)", "var_name": "sequenceArgumentsMock"}, {"original_string": "private Object debuggerAddress = new Object();", "modifier": "private", "type": "Object", "declarator": "debuggerAddress = new Object()", "var_name": "debuggerAddress"}, {"original_string": "private IResolveDependencyStrategy dumpCreationStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "dumpCreationStrategy", "var_name": "dumpCreationStrategy"}], "file": "CoreFeatures/Debugger/DebuggerSequenceImpl/src/test/java/info/smart_tools/smartactors/debugger/sequence_impl/DebuggerSequenceImplTest.java"}, "test_case": {"identifier": "Should_createDumpOfUnderlyingSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_createDumpOfUnderlyingSequence()\n            throws Exception {\n        IObject options = mock(IObject.class);\n        IObject dump = mock(IObject.class);\n        when(dumpCreationStrategy.resolve(same(sequenceMock), same(options))).thenReturn(dump);\n\n        IObject doneDump = new DebuggerSequenceImpl(sequenceMock, debuggerAddress).dump(options);\n\n        assertSame(dump, doneDump);\n    }", "signature": "void Should_createDumpOfUnderlyingSequence()", "full_signature": "@Test public void Should_createDumpOfUnderlyingSequence()", "class_method_signature": "DebuggerSequenceImplTest.Should_createDumpOfUnderlyingSequence()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "resolve", "same", "same", "dump", "assertSame"]}, "focal_class": {"identifier": "DebuggerSequenceImpl", "superclass": "", "interfaces": "implements IDebuggerSequence, IDumpable", "fields": [{"original_string": "private final IMessageProcessingSequence wrapped;", "modifier": "private final", "type": "IMessageProcessingSequence", "declarator": "wrapped", "var_name": "wrapped"}, {"original_string": "private Throwable exception;", "modifier": "private", "type": "Throwable", "declarator": "exception", "var_name": "exception"}, {"original_string": "private IObject exceptionContext;", "modifier": "private", "type": "IObject", "declarator": "exceptionContext", "var_name": "exceptionContext"}, {"original_string": "private boolean isInDebugger;", "modifier": "private", "type": "boolean", "declarator": "isInDebugger", "var_name": "isInDebugger"}, {"original_string": "private boolean isCompleted;", "modifier": "private", "type": "boolean", "declarator": "isCompleted", "var_name": "isCompleted"}, {"original_string": "private static final String DEBUGGER_INTERRUPT_TARGET =\n                   (\"{\" +\n                    \"   'handler':'interrupt',\" +\n                    \"   'wrapper': {\" +\n                    \"       'in_getSessionId':'context/sessionId',\" +\n                    \"       'in_getProcessor':'processor'\" +\n                    \"   }\" +\n                    \"}\").replace('\\'', '\"');", "modifier": "private static final", "type": "String", "declarator": "DEBUGGER_INTERRUPT_TARGET =\n                   (\"{\" +\n                    \"   'handler':'interrupt',\" +\n                    \"   'wrapper': {\" +\n                    \"       'in_getSessionId':'context/sessionId',\" +\n                    \"       'in_getProcessor':'processor'\" +\n                    \"   }\" +\n                    \"}\").replace('\\'', '\"')", "var_name": "DEBUGGER_INTERRUPT_TARGET"}, {"original_string": "private final IObject debuggerArguments;", "modifier": "private final", "type": "IObject", "declarator": "debuggerArguments", "var_name": "debuggerArguments"}, {"original_string": "private final IMessageReceiver debuggerReceiver;", "modifier": "private final", "type": "IMessageReceiver", "declarator": "debuggerReceiver", "var_name": "debuggerReceiver"}], "methods": [{"identifier": "DebuggerSequenceImpl", "parameters": "(final IMessageProcessingSequence sequence, final Object debuggerAddress)", "modifiers": "public", "return": "", "signature": " DebuggerSequenceImpl(final IMessageProcessingSequence sequence, final Object debuggerAddress)", "full_signature": "public  DebuggerSequenceImpl(final IMessageProcessingSequence sequence, final Object debuggerAddress)", "class_method_signature": "DebuggerSequenceImpl.DebuggerSequenceImpl(final IMessageProcessingSequence sequence, final Object debuggerAddress)", "testcase": false, "constructor": true}, {"identifier": "isExceptionOccurred", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExceptionOccurred()", "full_signature": "@Override public boolean isExceptionOccurred()", "class_method_signature": "DebuggerSequenceImpl.isExceptionOccurred()", "testcase": false, "constructor": false}, {"identifier": "isCompleted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCompleted()", "full_signature": "@Override public boolean isCompleted()", "class_method_signature": "DebuggerSequenceImpl.isCompleted()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "DebuggerSequenceImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "getException", "parameters": "()", "modifiers": "@Override public", "return": "Throwable", "signature": "Throwable getException()", "full_signature": "@Override public Throwable getException()", "class_method_signature": "DebuggerSequenceImpl.getException()", "testcase": false, "constructor": false}, {"identifier": "processException", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processException()", "full_signature": "@Override public boolean processException()", "class_method_signature": "DebuggerSequenceImpl.processException()", "testcase": false, "constructor": false}, {"identifier": "getRealSequence", "parameters": "()", "modifiers": "@Override public", "return": "IMessageProcessingSequence", "signature": "IMessageProcessingSequence getRealSequence()", "full_signature": "@Override public IMessageProcessingSequence getRealSequence()", "class_method_signature": "DebuggerSequenceImpl.getRealSequence()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "DebuggerSequenceImpl.reset()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean next()", "full_signature": "@Override public boolean next()", "class_method_signature": "DebuggerSequenceImpl.next()", "testcase": false, "constructor": false}, {"identifier": "goTo", "parameters": "(final int level, final int step)", "modifiers": "@Override public", "return": "void", "signature": "void goTo(final int level, final int step)", "full_signature": "@Override public void goTo(final int level, final int step)", "class_method_signature": "DebuggerSequenceImpl.goTo(final int level, final int step)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void end()", "full_signature": "@Override public void end()", "class_method_signature": "DebuggerSequenceImpl.end()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLevel", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCurrentLevel()", "full_signature": "@Override public int getCurrentLevel()", "class_method_signature": "DebuggerSequenceImpl.getCurrentLevel()", "testcase": false, "constructor": false}, {"identifier": "getStepAtLevel", "parameters": "(final int level)", "modifiers": "@Override public", "return": "int", "signature": "int getStepAtLevel(final int level)", "full_signature": "@Override public int getStepAtLevel(final int level)", "class_method_signature": "DebuggerSequenceImpl.getStepAtLevel(final int level)", "testcase": false, "constructor": false}, {"identifier": "getCurrentReceiver", "parameters": "()", "modifiers": "@Override public", "return": "IMessageReceiver", "signature": "IMessageReceiver getCurrentReceiver()", "full_signature": "@Override public IMessageReceiver getCurrentReceiver()", "class_method_signature": "DebuggerSequenceImpl.getCurrentReceiver()", "testcase": false, "constructor": false}, {"identifier": "getCurrentReceiverArguments", "parameters": "()", "modifiers": "@Override public", "return": "IObject", "signature": "IObject getCurrentReceiverArguments()", "full_signature": "@Override public IObject getCurrentReceiverArguments()", "class_method_signature": "DebuggerSequenceImpl.getCurrentReceiverArguments()", "testcase": false, "constructor": false}, {"identifier": "callChain", "parameters": "(final IReceiverChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void callChain(final IReceiverChain chain)", "full_signature": "@Override public void callChain(final IReceiverChain chain)", "class_method_signature": "DebuggerSequenceImpl.callChain(final IReceiverChain chain)", "testcase": false, "constructor": false}, {"identifier": "catchException", "parameters": "(final Throwable exc, final IObject context)", "modifiers": "@Override public", "return": "void", "signature": "void catchException(final Throwable exc, final IObject context)", "full_signature": "@Override public void catchException(final Throwable exc, final IObject context)", "class_method_signature": "DebuggerSequenceImpl.catchException(final Throwable exc, final IObject context)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(final IObject options)", "modifiers": "@Override public", "return": "IObject", "signature": "IObject dump(final IObject options)", "full_signature": "@Override public IObject dump(final IObject options)", "class_method_signature": "DebuggerSequenceImpl.dump(final IObject options)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Debugger/DebuggerSequenceImpl/src/main/java/info/smart_tools/smartactors/debugger/sequence_impl/DebuggerSequenceImpl.java"}, "focal_method": {"identifier": "dump", "parameters": "(final IObject options)", "modifiers": "@Override public", "return": "IObject", "body": "@Override\n    public IObject dump(final IObject options) throws DumpException, InvalidArgumentException {\n        try {\n            return IOC.resolve(Keys.getOrAdd(\"make dump\"), wrapped, options);\n        } catch (ResolutionException e) {\n            throw new DumpException(\"Error creating dump of debugger sequence.\", e);\n        }\n    }", "signature": "IObject dump(final IObject options)", "full_signature": "@Override public IObject dump(final IObject options)", "class_method_signature": "DebuggerSequenceImpl.dump(final IObject options)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}