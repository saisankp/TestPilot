{"test_class": {"identifier": "JAXRSContractTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> STRING_LIST = null;", "modifier": "private static final", "type": "List<String>", "declarator": "STRING_LIST = null", "var_name": "STRING_LIST"}, {"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "JAXRSContract contract = createContract();", "modifier": "", "type": "JAXRSContract", "declarator": "contract = createContract()", "var_name": "contract"}], "file": "jaxrs/src/test/java/feign/jaxrs/JAXRSContractTest.java"}, "test_case": {"identifier": "producesMultipleAddsAcceptHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void producesMultipleAddsAcceptHeader() throws Exception {\n    final MethodMetadata md =\n        parseAndValidateMetadata(ProducesAndConsumes.class, \"producesMultiple\");\n\n    assertThat(md.template())\n        .hasHeaders(\n            entry(\"Content-Type\", Collections.singletonList(\"application/json\")),\n            entry(\"Accept\", asList(\"application/xml\", \"text/plain\")));\n  }", "signature": "void producesMultipleAddsAcceptHeader()", "full_signature": "@Test public void producesMultipleAddsAcceptHeader()", "class_method_signature": "JAXRSContractTest.producesMultipleAddsAcceptHeader()", "testcase": true, "constructor": false, "invocations": ["parseAndValidateMetadata", "hasHeaders", "assertThat", "template", "entry", "singletonList", "entry", "asList"]}, "focal_class": {"identifier": "JAXRSContract", "superclass": "extends DeclarativeContract", "interfaces": "", "fields": [{"original_string": "static final String ACCEPT = \"Accept\";", "modifier": "static final", "type": "String", "declarator": "ACCEPT = \"Accept\"", "var_name": "ACCEPT"}, {"original_string": "static final String CONTENT_TYPE = \"Content-Type\";", "modifier": "static final", "type": "String", "declarator": "CONTENT_TYPE = \"Content-Type\"", "var_name": "CONTENT_TYPE"}], "methods": [{"identifier": "parseAndValidateMetadata", "parameters": "(Class<?> targetType, Method method)", "modifiers": "@Override protected", "return": "MethodMetadata", "signature": "MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method method)", "full_signature": "@Override protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method method)", "class_method_signature": "JAXRSContract.parseAndValidateMetadata(Class<?> targetType, Method method)", "testcase": false, "constructor": false}, {"identifier": "JAXRSContract", "parameters": "()", "modifiers": "public", "return": "", "signature": " JAXRSContract()", "full_signature": "public  JAXRSContract()", "class_method_signature": "JAXRSContract.JAXRSContract()", "testcase": false, "constructor": true}, {"identifier": "handleProducesAnnotation", "parameters": "(Produces produces, MethodMetadata data)", "modifiers": "private", "return": "void", "signature": "void handleProducesAnnotation(Produces produces, MethodMetadata data)", "full_signature": "private void handleProducesAnnotation(Produces produces, MethodMetadata data)", "class_method_signature": "JAXRSContract.handleProducesAnnotation(Produces produces, MethodMetadata data)", "testcase": false, "constructor": false}, {"identifier": "handleConsumesAnnotation", "parameters": "(Consumes consumes, MethodMetadata data)", "modifiers": "private", "return": "void", "signature": "void handleConsumesAnnotation(Consumes consumes, MethodMetadata data)", "full_signature": "private void handleConsumesAnnotation(Consumes consumes, MethodMetadata data)", "class_method_signature": "JAXRSContract.handleConsumesAnnotation(Consumes consumes, MethodMetadata data)", "testcase": false, "constructor": false}, {"identifier": "registerParamAnnotations", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void registerParamAnnotations()", "full_signature": "protected void registerParamAnnotations()", "class_method_signature": "JAXRSContract.registerParamAnnotations()", "testcase": false, "constructor": false}, {"identifier": "addTemplatedParam", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String addTemplatedParam(String name)", "full_signature": "private String addTemplatedParam(String name)", "class_method_signature": "JAXRSContract.addTemplatedParam(String name)", "testcase": false, "constructor": false}], "file": "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java"}, "focal_method": {"identifier": "parseAndValidateMetadata", "parameters": "(Class<?> targetType, Method method)", "modifiers": "@Override protected", "return": "MethodMetadata", "body": "@Override\n  protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method method) {\n    return super.parseAndValidateMetadata(targetType, method);\n  }", "signature": "MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method method)", "full_signature": "@Override protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method method)", "class_method_signature": "JAXRSContract.parseAndValidateMetadata(Class<?> targetType, Method method)", "testcase": false, "constructor": false, "invocations": ["parseAndValidateMetadata"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}