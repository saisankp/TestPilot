{"test_class": {"identifier": "ClientAuthFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "private static Principal clientPrincipal;", "modifier": "private static", "type": "Principal", "declarator": "clientPrincipal", "var_name": "clientPrincipal"}, {"original_string": "private static final String clientName = \"principal\";", "modifier": "private static final", "type": "String", "declarator": "clientName = \"principal\"", "var_name": "clientName"}, {"original_string": "private static final String clientSpiffe = \"spiffe://example.org/principal\";", "modifier": "private static final", "type": "String", "declarator": "clientSpiffe = \"spiffe://example.org/principal\"", "var_name": "clientSpiffe"}, {"original_string": "private static final Client client =\n      new Client(0, clientName, null, clientSpiffe, null, null, null, null, null, null, true,\n          false);", "modifier": "private static final", "type": "Client", "declarator": "client =\n      new Client(0, clientName, null, clientSpiffe, null, null, null, null, null, null, true,\n          false)", "var_name": "client"}, {"original_string": "private static Principal xfccPrincipal;", "modifier": "private static", "type": "Principal", "declarator": "xfccPrincipal", "var_name": "xfccPrincipal"}, {"original_string": "private static final String xfccName = \"principal-allowed-for-xfcc\";", "modifier": "private static final", "type": "String", "declarator": "xfccName = \"principal-allowed-for-xfcc\"", "var_name": "xfccName"}, {"original_string": "private static final String xfccSpiffe = \"spiffe://example.org/principal-allowed-for-xfcc\";", "modifier": "private static final", "type": "String", "declarator": "xfccSpiffe = \"spiffe://example.org/principal-allowed-for-xfcc\"", "var_name": "xfccSpiffe"}, {"original_string": "private static final String xfccPem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEkzCCAnugAwIBAgIRAOQ9Lh+heQYgQENI/d6pnz4wDQYJKoZIhvcNAQELBQAw\\n\"\n      + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjI1MjIyMTE0WhcNMjExMjE2\\n\"\n      + \"MDAzNzAxWjBDMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MSMwIQYDVQQD\\n\"\n      + \"ExpwcmluY2lwYWwtYWxsb3dlZC1mb3IteGZjYzCCASIwDQYJKoZIhvcNAQEBBQAD\\n\"\n      + \"ggEPADCCAQoCggEBANIDghKpOJv4En7ubT8bmgab+2kTidQKK6PaFm118K3z8Qr9\\n\"\n      + \"sqENKPcjsGgJucH/CWrxN3JpybX1NyEe+XvxWqRFqFsNTfOTKN8NIdqVxW0LPGCv\\n\"\n      + \"AIH3Nrxuo26isqMRRF6sHp8g6C98H9EoDW3w0wFHr2J/M/5WVx9biBHUhTdNpLAj\\n\"\n      + \"pQ9VUBn/1mNYMaTsJMxw/YPW8pH6yzLUGw9Kq4Dm6RCUqSc3VyC9uQFIHKeIphme\\n\"\n      + \"P4EeoQcoMDVaSghHeXJ2qKpWPpokq6V1Yx56AmVHTui2qanp0InOAqKozU43C/rt\\n\"\n      + \"0EWk+jsd4IJizpSnEDOdvSqqx3vzNhzxH3mLwAUCAwEAAaOBrjCBqzAOBgNVHQ8B\\n\"\n      + \"Af8EBAMCA7gwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW\\n\"\n      + \"BBRmicipX4nvPRhdFOAziDFQ03NVFzAfBgNVHSMEGDAWgBRS1V0zAdxtZ1Fn9XKl\\n\"\n      + \"MGWkJvGAMjA6BgNVHREEMzAxhi9zcGlmZmU6Ly9leGFtcGxlLm9yZy9wcmluY2lw\\n\"\n      + \"YWwtYWxsb3dlZC1mb3IteGZjYzANBgkqhkiG9w0BAQsFAAOCAgEAJIG7+DoDvH32\\n\"\n      + \"3kJV2uhPUg2g+omouj9ZaHCT7j4I+B/sen6xvE3qHSM2j2bzIt20/RjM3ql6Bqc8\\n\"\n      + \"OPR52NUVZUrfjCmkMc2clN9fSjIaKArx63wXpCgNJckEkhzPgoFjLlpkfIjXiSFb\\n\"\n      + \"0ZMVrQHsPd8yAOnLxTm9RxoCh029TGxs0a5a7whWZG6UwmHgt4z1dZCO519CPpER\\n\"\n      + \"EW/sRC7ceJiDgJULWDjYoJrHBS/vWYWZxTboB34bk9ZkGr8eRkswboiQGzjPV7cU\\n\"\n      + \"IlYMa4wqZTDCJrevl3WbUiIVRy5k9pM88LNAqRRsCF3tlB0neyhvUdzMTy1MWoW/\\n\"\n      + \"sJvGbBQWyRbk6mvzcvcKomsGosGvtLPfqSCKxeGpW1wu5nz0ybNpWr0h//E3HP2W\\n\"\n      + \"k/WlOVrLZkQLergW5ggzhwuJYnSi5ei1inCC9DzOfj8HRiJXJ69Ef2tQRLkSVUb+\\n\"\n      + \"2yQJn9Z62suVSTi/Pk9zTbaHlsq12ovP4Btt23hxlg0ScmJNX83a38fEFjOT/ELW\\n\"\n      + \"fUpvPDvECi/B+yGZhIhcvA2fn7+8+JUjZG1WT6RRBj1fCOOTsmcSa1bA57v6/1sM\\n\"\n      + \"K+QLScCfQ/QgWR5kMhvyGH6Yw00Af9Kjs3QRN9EzZ3CmQBKqwWAEzsfiMxBxPcW/\\n\"\n      + \"PimCeTSLAdMAH/Q+cvlp5w5GYpEwsQk=\\n\"\n      + \"-----END CERTIFICATE-----\";", "modifier": "private static final", "type": "String", "declarator": "xfccPem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEkzCCAnugAwIBAgIRAOQ9Lh+heQYgQENI/d6pnz4wDQYJKoZIhvcNAQELBQAw\\n\"\n      + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjI1MjIyMTE0WhcNMjExMjE2\\n\"\n      + \"MDAzNzAxWjBDMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MSMwIQYDVQQD\\n\"\n      + \"ExpwcmluY2lwYWwtYWxsb3dlZC1mb3IteGZjYzCCASIwDQYJKoZIhvcNAQEBBQAD\\n\"\n      + \"ggEPADCCAQoCggEBANIDghKpOJv4En7ubT8bmgab+2kTidQKK6PaFm118K3z8Qr9\\n\"\n      + \"sqENKPcjsGgJucH/CWrxN3JpybX1NyEe+XvxWqRFqFsNTfOTKN8NIdqVxW0LPGCv\\n\"\n      + \"AIH3Nrxuo26isqMRRF6sHp8g6C98H9EoDW3w0wFHr2J/M/5WVx9biBHUhTdNpLAj\\n\"\n      + \"pQ9VUBn/1mNYMaTsJMxw/YPW8pH6yzLUGw9Kq4Dm6RCUqSc3VyC9uQFIHKeIphme\\n\"\n      + \"P4EeoQcoMDVaSghHeXJ2qKpWPpokq6V1Yx56AmVHTui2qanp0InOAqKozU43C/rt\\n\"\n      + \"0EWk+jsd4IJizpSnEDOdvSqqx3vzNhzxH3mLwAUCAwEAAaOBrjCBqzAOBgNVHQ8B\\n\"\n      + \"Af8EBAMCA7gwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQW\\n\"\n      + \"BBRmicipX4nvPRhdFOAziDFQ03NVFzAfBgNVHSMEGDAWgBRS1V0zAdxtZ1Fn9XKl\\n\"\n      + \"MGWkJvGAMjA6BgNVHREEMzAxhi9zcGlmZmU6Ly9leGFtcGxlLm9yZy9wcmluY2lw\\n\"\n      + \"YWwtYWxsb3dlZC1mb3IteGZjYzANBgkqhkiG9w0BAQsFAAOCAgEAJIG7+DoDvH32\\n\"\n      + \"3kJV2uhPUg2g+omouj9ZaHCT7j4I+B/sen6xvE3qHSM2j2bzIt20/RjM3ql6Bqc8\\n\"\n      + \"OPR52NUVZUrfjCmkMc2clN9fSjIaKArx63wXpCgNJckEkhzPgoFjLlpkfIjXiSFb\\n\"\n      + \"0ZMVrQHsPd8yAOnLxTm9RxoCh029TGxs0a5a7whWZG6UwmHgt4z1dZCO519CPpER\\n\"\n      + \"EW/sRC7ceJiDgJULWDjYoJrHBS/vWYWZxTboB34bk9ZkGr8eRkswboiQGzjPV7cU\\n\"\n      + \"IlYMa4wqZTDCJrevl3WbUiIVRy5k9pM88LNAqRRsCF3tlB0neyhvUdzMTy1MWoW/\\n\"\n      + \"sJvGbBQWyRbk6mvzcvcKomsGosGvtLPfqSCKxeGpW1wu5nz0ybNpWr0h//E3HP2W\\n\"\n      + \"k/WlOVrLZkQLergW5ggzhwuJYnSi5ei1inCC9DzOfj8HRiJXJ69Ef2tQRLkSVUb+\\n\"\n      + \"2yQJn9Z62suVSTi/Pk9zTbaHlsq12ovP4Btt23hxlg0ScmJNX83a38fEFjOT/ELW\\n\"\n      + \"fUpvPDvECi/B+yGZhIhcvA2fn7+8+JUjZG1WT6RRBj1fCOOTsmcSa1bA57v6/1sM\\n\"\n      + \"K+QLScCfQ/QgWR5kMhvyGH6Yw00Af9Kjs3QRN9EzZ3CmQBKqwWAEzsfiMxBxPcW/\\n\"\n      + \"PimCeTSLAdMAH/Q+cvlp5w5GYpEwsQk=\\n\"\n      + \"-----END CERTIFICATE-----\"", "var_name": "xfccPem"}, {"original_string": "private static final String clientPem =\n      \"-----BEGIN CERTIFICATE-----\\n\\n\"\n          + \"MIIEcTCCAlmgAwIBAgIRALryCWgCxplmVoNtywrAfR0wDQYJKoZIhvcNAQELBQAw\\n\"\n          + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjE2MDAzODI0WhcNMjExMjE2\\n\"\n          + \"MDAzNzAwWjAyMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRIwEAYDVQQD\\n\"\n          + \"EwlwcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDz9ex2\\n\"\n          + \"HQ7YA9nyOigFjeOqSpkDVReSG2IWSDHnugkO3TVY7NqfgMx1I+KESAj5w/PXIv1I\\n\"\n          + \"Aa4qUnLYQ2IqgYUYvJqTt6DtlFLC6dWdgV0x/zRIbtybPR9Ww0eObShzy4od97w4\\n\"\n          + \"zMN1/xXwpIrTNhn9wwzi4l7vtOYwxtoss/B6MBKyxB8R6iEUupINcFANFzcKdniG\\n\"\n          + \"40HcEW8aUS6aRC8bCc4e6ACJp3VR5wnHpHXUlnkeOyTX5yWD8MKni9eY2t0Ra5OX\\n\"\n          + \"tV1NEwOPJz8fTp8aRnoe8+Rq8Lm7W59PO7cJ45srlQ5kKnagha6KB8TTzvNOtYqj\\n\"\n          + \"SgQNkb/OhS8R7Z/9AgMBAAGjgZ0wgZowDgYDVR0PAQH/BAQDAgO4MB0GA1UdJQQW\\n\"\n          + \"MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUj35sbmMzi/R/rrdMJHnj\\n\"\n          + \"n1TLhMwwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwKQYDVR0RBCIw\\n\"\n          + \"IIYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFsMA0GCSqGSIb3DQEBCwUA\\n\"\n          + \"A4ICAQCXPUPcv9ADJACy5D4Z8bQlGyDj131+vthj95eyO8ftPzTrJANGwpl93oO1\\n\"\n          + \"d7lNh1h2exj/e+gtxdYE/I+DYyvHb2Op+SRNN/ZeZntaoqt22p8CGYIpsPQHttLw\\n\"\n          + \"KJ91ekZhyQhphzgceMrhcnSc/RH7L373ZkFi5FC9EAixKsaDftz+NVTk7vhc+cLV\\n\"\n          + \"Mhkhc3L3dA/Ffqpq6iRVs9eefFlN5Oot3PIihvCrbtl0tur02PjLVWQr5Y/nyVG0\\n\"\n          + \"kN0LU7+w3GNddqB0gsLkwBPZ+UtmbyjHaVQN50jZxA7ysr+EjNhTyZ3lliPX4bGE\\n\"\n          + \"TS/jTexOAObS3tC+e157k2UXbFMNZrE/pQb3juOJHcBgwpZ8FnYlwqe8VIJ6513K\\n\"\n          + \"sOTS2lqAXYCaCOC0X6grRuL+s2JTzhzfgz2xuOSQVtvGYK5FijQVpGBR5BlfgpMM\\n\"\n          + \"/W45PGdkvZGI4281VZUfTSSYK/OstnBAD3BgZXhnQg28dj8BD4jNd5JP7cKHb+ID\\n\"\n          + \"33dh8mAGmSmiSPbxkVwq1AKwa5y6hbfvPIQGaUKveQe0JLTFlU4KmYIRv/nl8N83\\n\"\n          + \"st5hq3sW1qoqXZZ71A/T/BYPODcKgeEBzJ64l7jHtPN91SE8U8vhcrpEWZb/D/PI\\n\"\n          + \"vZTiHaxVIvRRokUPFie1drkj5I7Q7qXqHOCy22rgccR64wkNVg==\\n\"\n          + \"-----END CERTIFICATE-----\";", "modifier": "private static final", "type": "String", "declarator": "clientPem =\n      \"-----BEGIN CERTIFICATE-----\\n\\n\"\n          + \"MIIEcTCCAlmgAwIBAgIRALryCWgCxplmVoNtywrAfR0wDQYJKoZIhvcNAQELBQAw\\n\"\n          + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjE2MDAzODI0WhcNMjExMjE2\\n\"\n          + \"MDAzNzAwWjAyMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRIwEAYDVQQD\\n\"\n          + \"EwlwcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDz9ex2\\n\"\n          + \"HQ7YA9nyOigFjeOqSpkDVReSG2IWSDHnugkO3TVY7NqfgMx1I+KESAj5w/PXIv1I\\n\"\n          + \"Aa4qUnLYQ2IqgYUYvJqTt6DtlFLC6dWdgV0x/zRIbtybPR9Ww0eObShzy4od97w4\\n\"\n          + \"zMN1/xXwpIrTNhn9wwzi4l7vtOYwxtoss/B6MBKyxB8R6iEUupINcFANFzcKdniG\\n\"\n          + \"40HcEW8aUS6aRC8bCc4e6ACJp3VR5wnHpHXUlnkeOyTX5yWD8MKni9eY2t0Ra5OX\\n\"\n          + \"tV1NEwOPJz8fTp8aRnoe8+Rq8Lm7W59PO7cJ45srlQ5kKnagha6KB8TTzvNOtYqj\\n\"\n          + \"SgQNkb/OhS8R7Z/9AgMBAAGjgZ0wgZowDgYDVR0PAQH/BAQDAgO4MB0GA1UdJQQW\\n\"\n          + \"MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUj35sbmMzi/R/rrdMJHnj\\n\"\n          + \"n1TLhMwwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwKQYDVR0RBCIw\\n\"\n          + \"IIYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFsMA0GCSqGSIb3DQEBCwUA\\n\"\n          + \"A4ICAQCXPUPcv9ADJACy5D4Z8bQlGyDj131+vthj95eyO8ftPzTrJANGwpl93oO1\\n\"\n          + \"d7lNh1h2exj/e+gtxdYE/I+DYyvHb2Op+SRNN/ZeZntaoqt22p8CGYIpsPQHttLw\\n\"\n          + \"KJ91ekZhyQhphzgceMrhcnSc/RH7L373ZkFi5FC9EAixKsaDftz+NVTk7vhc+cLV\\n\"\n          + \"Mhkhc3L3dA/Ffqpq6iRVs9eefFlN5Oot3PIihvCrbtl0tur02PjLVWQr5Y/nyVG0\\n\"\n          + \"kN0LU7+w3GNddqB0gsLkwBPZ+UtmbyjHaVQN50jZxA7ysr+EjNhTyZ3lliPX4bGE\\n\"\n          + \"TS/jTexOAObS3tC+e157k2UXbFMNZrE/pQb3juOJHcBgwpZ8FnYlwqe8VIJ6513K\\n\"\n          + \"sOTS2lqAXYCaCOC0X6grRuL+s2JTzhzfgz2xuOSQVtvGYK5FijQVpGBR5BlfgpMM\\n\"\n          + \"/W45PGdkvZGI4281VZUfTSSYK/OstnBAD3BgZXhnQg28dj8BD4jNd5JP7cKHb+ID\\n\"\n          + \"33dh8mAGmSmiSPbxkVwq1AKwa5y6hbfvPIQGaUKveQe0JLTFlU4KmYIRv/nl8N83\\n\"\n          + \"st5hq3sW1qoqXZZ71A/T/BYPODcKgeEBzJ64l7jHtPN91SE8U8vhcrpEWZb/D/PI\\n\"\n          + \"vZTiHaxVIvRRokUPFie1drkj5I7Q7qXqHOCy22rgccR64wkNVg==\\n\"\n          + \"-----END CERTIFICATE-----\"", "var_name": "clientPem"}, {"original_string": "private static final String xfccHeader =\n      format(\"Cert=\\\"%s\\\"\", UrlEncoded.encodeString(clientPem, UTF_8));", "modifier": "private static final", "type": "String", "declarator": "xfccHeader =\n      format(\"Cert=\\\"%s\\\"\", UrlEncoded.encodeString(clientPem, UTF_8))", "var_name": "xfccHeader"}, {"original_string": "private static final int xfccAllowedPort = 4446;", "modifier": "private static final", "type": "int", "declarator": "xfccAllowedPort = 4446", "var_name": "xfccAllowedPort"}, {"original_string": "private static final int xfccDisallowedPort = 4445;", "modifier": "private static final", "type": "int", "declarator": "xfccDisallowedPort = 4445", "var_name": "xfccDisallowedPort"}, {"original_string": "@Mock XfccSourceConfig xfccSourceConfig;", "modifier": "@Mock", "type": "XfccSourceConfig", "declarator": "xfccSourceConfig", "var_name": "xfccSourceConfig"}, {"original_string": "@Mock ClientAuthTypeConfig clientAuthTypeConfig;", "modifier": "@Mock", "type": "ClientAuthTypeConfig", "declarator": "clientAuthTypeConfig", "var_name": "clientAuthTypeConfig"}, {"original_string": "@Mock ClientAuthConfig clientAuthConfig;", "modifier": "@Mock", "type": "ClientAuthConfig", "declarator": "clientAuthConfig", "var_name": "clientAuthConfig"}, {"original_string": "@Mock ContainerRequest request;", "modifier": "@Mock", "type": "ContainerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock HttpServletRequest httpServletRequest;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}, {"original_string": "@Mock SecurityContext securityContext;", "modifier": "@Mock", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "ClientAuthFactory factory;", "modifier": "", "type": "ClientAuthFactory", "declarator": "factory", "var_name": "factory"}], "file": "server/src/test/java/keywhiz/service/providers/ClientAuthFactoryTest.java"}, "test_case": {"identifier": "rejectsXfcc_requesterSpiffeNotAllowed", "parameters": "()", "modifiers": "@Test(expected = NotAuthorizedException.class) public", "return": "void", "body": "@Test(expected = NotAuthorizedException.class)\n  public void rejectsXfcc_requesterSpiffeNotAllowed() {\n    when(httpServletRequest.getLocalPort()).thenReturn(xfccAllowedPort);\n    when(request.getRequestHeader(ClientAuthFactory.XFCC_HEADER_NAME)).thenReturn(\n        List.of(xfccHeader));\n    when(securityContext.getUserPrincipal()).thenReturn(xfccPrincipal);\n\n    when(xfccSourceConfig.allowedClientNames()).thenReturn(List.of(xfccName));\n    when(xfccSourceConfig.allowedSpiffeIds()).thenReturn(List.of());\n\n    factory.provide(request, httpServletRequest);\n  }", "signature": "void rejectsXfcc_requesterSpiffeNotAllowed()", "full_signature": "@Test(expected = NotAuthorizedException.class) public void rejectsXfcc_requesterSpiffeNotAllowed()", "class_method_signature": "ClientAuthFactoryTest.rejectsXfcc_requesterSpiffeNotAllowed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getLocalPort", "thenReturn", "when", "getRequestHeader", "of", "thenReturn", "when", "getUserPrincipal", "thenReturn", "when", "allowedClientNames", "of", "thenReturn", "when", "allowedSpiffeIds", "of", "provide"]}, "focal_class": {"identifier": "ClientAuthFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientAuthFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientAuthFactory.class)", "var_name": "logger"}, {"original_string": "@VisibleForTesting\n  protected static final String XFCC_HEADER_NAME = \"X-Forwarded-Client-Cert\";", "modifier": "@VisibleForTesting\n  protected static final", "type": "String", "declarator": "XFCC_HEADER_NAME = \"X-Forwarded-Client-Cert\"", "var_name": "XFCC_HEADER_NAME"}, {"original_string": "@VisibleForTesting\n  protected static final String CERT_KEY = \"Cert\";", "modifier": "@VisibleForTesting\n  protected static final", "type": "String", "declarator": "CERT_KEY = \"Cert\"", "var_name": "CERT_KEY"}, {"original_string": "private final ClientAuthenticator authenticator;", "modifier": "private final", "type": "ClientAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "private final ClientAuthConfig clientAuthConfig;", "modifier": "private final", "type": "ClientAuthConfig", "declarator": "clientAuthConfig", "var_name": "clientAuthConfig"}], "methods": [{"identifier": "ClientAuthFactory", "parameters": "(ClientDAOFactory clientDAOFactory, KeywhizConfig keywhizConfig)", "modifiers": "@Inject public", "return": "", "signature": " ClientAuthFactory(ClientDAOFactory clientDAOFactory, KeywhizConfig keywhizConfig)", "full_signature": "@Inject public  ClientAuthFactory(ClientDAOFactory clientDAOFactory, KeywhizConfig keywhizConfig)", "class_method_signature": "ClientAuthFactory.ClientAuthFactory(ClientDAOFactory clientDAOFactory, KeywhizConfig keywhizConfig)", "testcase": false, "constructor": true}, {"identifier": "ClientAuthFactory", "parameters": "(ClientDAO clientDAO, ClientAuthConfig clientAuthConfig)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ClientAuthFactory(ClientDAO clientDAO, ClientAuthConfig clientAuthConfig)", "full_signature": "@VisibleForTesting  ClientAuthFactory(ClientDAO clientDAO, ClientAuthConfig clientAuthConfig)", "class_method_signature": "ClientAuthFactory.ClientAuthFactory(ClientDAO clientDAO, ClientAuthConfig clientAuthConfig)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "modifiers": "public", "return": "Client", "signature": "Client provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "full_signature": "public Client provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "class_method_signature": "ClientAuthFactory.provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "(ContainerRequest request)", "modifiers": "static", "return": "Optional<Principal>", "signature": "Optional<Principal> getPrincipal(ContainerRequest request)", "full_signature": "static Optional<Principal> getPrincipal(ContainerRequest request)", "class_method_signature": "ClientAuthFactory.getPrincipal(ContainerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getXfccConfigForPort", "parameters": "(int port)", "modifiers": "private", "return": "Optional<XfccSourceConfig>", "signature": "Optional<XfccSourceConfig> getXfccConfigForPort(int port)", "full_signature": "private Optional<XfccSourceConfig> getXfccConfigForPort(int port)", "class_method_signature": "ClientAuthFactory.getXfccConfigForPort(int port)", "testcase": false, "constructor": false}, {"identifier": "authorizeClientFromXfccHeader", "parameters": "(XfccSourceConfig xfccConfig,\n      List<String> xfccHeaderValues, Principal requestPrincipal)", "modifiers": "private", "return": "Client", "signature": "Client authorizeClientFromXfccHeader(XfccSourceConfig xfccConfig,\n      List<String> xfccHeaderValues, Principal requestPrincipal)", "full_signature": "private Client authorizeClientFromXfccHeader(XfccSourceConfig xfccConfig,\n      List<String> xfccHeaderValues, Principal requestPrincipal)", "class_method_signature": "ClientAuthFactory.authorizeClientFromXfccHeader(XfccSourceConfig xfccConfig,\n      List<String> xfccHeaderValues, Principal requestPrincipal)", "testcase": false, "constructor": false}, {"identifier": "validateXfccHeaderAllowed", "parameters": "(XfccSourceConfig xfccConfig, Principal requestPrincipal)", "modifiers": "private", "return": "void", "signature": "void validateXfccHeaderAllowed(XfccSourceConfig xfccConfig, Principal requestPrincipal)", "full_signature": "private void validateXfccHeaderAllowed(XfccSourceConfig xfccConfig, Principal requestPrincipal)", "class_method_signature": "ClientAuthFactory.validateXfccHeaderAllowed(XfccSourceConfig xfccConfig, Principal requestPrincipal)", "testcase": false, "constructor": false}, {"identifier": "containsUri", "parameters": "(List<String> uriList, URI targetUri)", "modifiers": "private", "return": "boolean", "signature": "boolean containsUri(List<String> uriList, URI targetUri)", "full_signature": "private boolean containsUri(List<String> uriList, URI targetUri)", "class_method_signature": "ClientAuthFactory.containsUri(List<String> uriList, URI targetUri)", "testcase": false, "constructor": false}, {"identifier": "getClientCertFromXfccHeaderEnvoyFormatted", "parameters": "(\n      List<String> xfccHeaderValues)", "modifiers": "private", "return": "Optional<X509Certificate>", "signature": "Optional<X509Certificate> getClientCertFromXfccHeaderEnvoyFormatted(\n      List<String> xfccHeaderValues)", "full_signature": "private Optional<X509Certificate> getClientCertFromXfccHeaderEnvoyFormatted(\n      List<String> xfccHeaderValues)", "class_method_signature": "ClientAuthFactory.getClientCertFromXfccHeaderEnvoyFormatted(\n      List<String> xfccHeaderValues)", "testcase": false, "constructor": false}, {"identifier": "parseUrlEncodedPem", "parameters": "(String urlEncodedPem)", "modifiers": "private", "return": "Optional<X509Certificate>", "signature": "Optional<X509Certificate> parseUrlEncodedPem(String urlEncodedPem)", "full_signature": "private Optional<X509Certificate> parseUrlEncodedPem(String urlEncodedPem)", "class_method_signature": "ClientAuthFactory.parseUrlEncodedPem(String urlEncodedPem)", "testcase": false, "constructor": false}, {"identifier": "createMissingClient", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean createMissingClient()", "full_signature": "protected boolean createMissingClient()", "class_method_signature": "ClientAuthFactory.createMissingClient()", "testcase": false, "constructor": false}, {"identifier": "authenticateClientFromCertificate", "parameters": "(Principal clientPrincipal)", "modifiers": "private", "return": "Client", "signature": "Client authenticateClientFromCertificate(Principal clientPrincipal)", "full_signature": "private Client authenticateClientFromCertificate(Principal clientPrincipal)", "class_method_signature": "ClientAuthFactory.authenticateClientFromCertificate(Principal clientPrincipal)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/providers/ClientAuthFactory.java"}, "focal_method": {"identifier": "provide", "parameters": "(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "modifiers": "public", "return": "Client", "body": "public Client provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest) {\n    // Ports must either always send an x-forwarded-client-cert header, or\n    // never send this header. This also throws an error if a single port\n    // has multiple configurations.\n    int requestPort = httpServletRequest.getLocalPort();\n    Optional<XfccSourceConfig> possibleXfccConfig =\n        getXfccConfigForPort(requestPort);\n\n    List<String> xfccHeaderValues =\n        Optional.ofNullable(containerRequest.getRequestHeader(XFCC_HEADER_NAME)).orElse(List.of());\n\n    if (possibleXfccConfig.isEmpty() != xfccHeaderValues.isEmpty()) {\n      throw new NotAuthorizedException(format(\n          \"Port %d is configured to %s receive traffic with the %s header set\",\n          requestPort, possibleXfccConfig.isEmpty() ? \"never\" : \"only\", XFCC_HEADER_NAME));\n    }\n\n    // Extract information about the requester. This may be a Keywhiz client, or it may be a proxy\n    // forwarding the real Keywhiz client information in the x-forwarded-client-certs header\n    Principal requestPrincipal = getPrincipal(containerRequest).orElseThrow(\n        () -> new NotAuthorizedException(\"Not authorized as Keywhiz client\"));\n\n    // Extract client information based on the x-forwarded-client-cert header or\n    // on the security context of this request\n    if (possibleXfccConfig.isEmpty()) {\n      // The XFCC header is not used; use the security context of this request to identify the client\n      return authenticateClientFromCertificate(requestPrincipal);\n    } else {\n      return authorizeClientFromXfccHeader(possibleXfccConfig.get(), xfccHeaderValues,\n          requestPrincipal);\n    }\n  }", "signature": "Client provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "full_signature": "public Client provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "class_method_signature": "ClientAuthFactory.provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false, "invocations": ["getLocalPort", "getXfccConfigForPort", "orElse", "ofNullable", "getRequestHeader", "of", "isEmpty", "isEmpty", "format", "isEmpty", "orElseThrow", "getPrincipal", "isEmpty", "authenticateClientFromCertificate", "authorizeClientFromXfccHeader", "get"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}