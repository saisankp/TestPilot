{"test_class": {"identifier": "DisplayerCoordinatorTest", "superclass": "extends AbstractDisplayerTest", "interfaces": "", "fields": [{"original_string": "DisplayerSettings byDepartment = DisplayerSettingsFactory.newPieChartSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DEPARTMENT)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_AMOUNT, SUM)\n            .sort(COLUMN_DEPARTMENT, SortOrder.ASCENDING)\n            .filterOn(false, true, true)\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "byDepartment = DisplayerSettingsFactory.newPieChartSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DEPARTMENT)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_AMOUNT, SUM)\n            .sort(COLUMN_DEPARTMENT, SortOrder.ASCENDING)\n            .filterOn(false, true, true)\n            .buildSettings()", "var_name": "byDepartment"}, {"original_string": "DisplayerSettings byDepartmentSelector = DisplayerSettingsFactory.newSelectorSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DEPARTMENT)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_AMOUNT, SUM)\n            .sort(COLUMN_DEPARTMENT, SortOrder.ASCENDING)\n            .filterOn(false, true, false)\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "byDepartmentSelector = DisplayerSettingsFactory.newSelectorSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DEPARTMENT)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_AMOUNT, SUM)\n            .sort(COLUMN_DEPARTMENT, SortOrder.ASCENDING)\n            .filterOn(false, true, false)\n            .buildSettings()", "var_name": "byDepartmentSelector"}, {"original_string": "DisplayerSettings byYear = DisplayerSettingsFactory.newBarChartSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DATE).dynamic(DateIntervalType.YEAR, true)\n            .column(COLUMN_DATE)\n            .column(COLUMN_AMOUNT, SUM)\n            .filterOn(false, true, true)\n            .sort(COLUMN_DATE, SortOrder.ASCENDING)\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "byYear = DisplayerSettingsFactory.newBarChartSettings()\n            .dataset(EXPENSES)\n            .group(COLUMN_DATE).dynamic(DateIntervalType.YEAR, true)\n            .column(COLUMN_DATE)\n            .column(COLUMN_AMOUNT, SUM)\n            .filterOn(false, true, true)\n            .sort(COLUMN_DATE, SortOrder.ASCENDING)\n            .buildSettings()", "var_name": "byYear"}, {"original_string": "DisplayerSettings byQuarter = DisplayerSettingsFactory.newBarChartSettings()\n            .dataset(EXPENSES)\n            .filter(COLUMN_ID, FilterFactory.equalsTo(1))\n            .group(COLUMN_DATE).fixed(DateIntervalType.QUARTER, false)\n            .column(COLUMN_DATE)\n            .column(COLUMN_AMOUNT, SUM)\n            .filterOn(false, true, true)\n            .sort(COLUMN_DATE, SortOrder.ASCENDING)\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "byQuarter = DisplayerSettingsFactory.newBarChartSettings()\n            .dataset(EXPENSES)\n            .filter(COLUMN_ID, FilterFactory.equalsTo(1))\n            .group(COLUMN_DATE).fixed(DateIntervalType.QUARTER, false)\n            .column(COLUMN_DATE)\n            .column(COLUMN_AMOUNT, SUM)\n            .filterOn(false, true, true)\n            .sort(COLUMN_DATE, SortOrder.ASCENDING)\n            .buildSettings()", "var_name": "byQuarter"}, {"original_string": "DisplayerSettings allRows = DisplayerSettingsFactory.newTableSettings()\n            .dataset(EXPENSES)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_CITY)\n            .column(COLUMN_EMPLOYEE)\n            .column(COLUMN_AMOUNT)\n            .column(COLUMN_DATE)\n            .filterOn(true, false, true)\n            .buildSettings();", "modifier": "", "type": "DisplayerSettings", "declarator": "allRows = DisplayerSettingsFactory.newTableSettings()\n            .dataset(EXPENSES)\n            .column(COLUMN_DEPARTMENT)\n            .column(COLUMN_CITY)\n            .column(COLUMN_EMPLOYEE)\n            .column(COLUMN_AMOUNT)\n            .column(COLUMN_DATE)\n            .filterOn(true, false, true)\n            .buildSettings()", "var_name": "allRows"}, {"original_string": "DisplayerCoordinator displayerCoordinator;", "modifier": "", "type": "DisplayerCoordinator", "declarator": "displayerCoordinator", "var_name": "displayerCoordinator"}, {"original_string": "AbstractDisplayer allRowsTable;", "modifier": "", "type": "AbstractDisplayer", "declarator": "allRowsTable", "var_name": "allRowsTable"}, {"original_string": "AbstractDisplayer deptPieChart;", "modifier": "", "type": "AbstractDisplayer", "declarator": "deptPieChart", "var_name": "deptPieChart"}, {"original_string": "AbstractDisplayer deptSelector;", "modifier": "", "type": "AbstractDisplayer", "declarator": "deptSelector", "var_name": "deptSelector"}, {"original_string": "AbstractDisplayer yearBarChart;", "modifier": "", "type": "AbstractDisplayer", "declarator": "yearBarChart", "var_name": "yearBarChart"}, {"original_string": "AbstractDisplayer quarterPieChart;", "modifier": "", "type": "AbstractDisplayer", "declarator": "quarterPieChart", "var_name": "quarterPieChart"}, {"original_string": "@Mock\n    DisplayerListener listener;", "modifier": "@Mock", "type": "DisplayerListener", "declarator": "listener", "var_name": "listener"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/DisplayerCoordinatorTest.java"}, "test_case": {"identifier": "testMultipleFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleFilter() {\n        displayerCoordinator.drawAll();\n\n        // Click on the \"2014\" slice\n        yearBarChart.filterUpdate(COLUMN_DATE, 2);\n\n        // Click on the \"Sales\" slice\n        deptPieChart.filterUpdate(COLUMN_DEPARTMENT, 1);\n\n        // Check the allRowsTable receives all the filter requests\n        DataSet dataSet = allRowsTable.getDataSetHandler().getLastDataSet();\n        assertEquals(dataSet.getRowCount(), 2);\n    }", "signature": "void testMultipleFilter()", "full_signature": "@Test public void testMultipleFilter()", "class_method_signature": "DisplayerCoordinatorTest.testMultipleFilter()", "testcase": true, "constructor": false, "invocations": ["drawAll", "filterUpdate", "filterUpdate", "getLastDataSet", "getDataSetHandler", "assertEquals", "getRowCount"]}, "focal_class": {"identifier": "DisplayerCoordinator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected List<Displayer> displayerList = new ArrayList<>();", "modifier": "protected", "type": "List<Displayer>", "declarator": "displayerList = new ArrayList<>()", "var_name": "displayerList"}, {"original_string": "protected Set<DisplayerListener> listenerSet = new HashSet<>();", "modifier": "protected", "type": "Set<DisplayerListener>", "declarator": "listenerSet = new HashSet<>()", "var_name": "listenerSet"}, {"original_string": "protected Map<RendererLibrary,List<Displayer>> rendererMap = new HashMap<>();", "modifier": "protected", "type": "Map<RendererLibrary,List<Displayer>>", "declarator": "rendererMap = new HashMap<>()", "var_name": "rendererMap"}, {"original_string": "protected CoordinatorListener coordinatorListener = new CoordinatorListener();", "modifier": "protected", "type": "CoordinatorListener", "declarator": "coordinatorListener = new CoordinatorListener()", "var_name": "coordinatorListener"}, {"original_string": "protected Map<Displayer,List<Displayer>> notificationVetoMap = new HashMap<>();", "modifier": "protected", "type": "Map<Displayer,List<Displayer>>", "declarator": "notificationVetoMap = new HashMap<>()", "var_name": "notificationVetoMap"}, {"original_string": "protected RendererManager rendererManager;", "modifier": "protected", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}], "methods": [{"identifier": "DisplayerCoordinator", "parameters": "(RendererManager rendererManager)", "modifiers": "@Inject public", "return": "", "signature": " DisplayerCoordinator(RendererManager rendererManager)", "full_signature": "@Inject public  DisplayerCoordinator(RendererManager rendererManager)", "class_method_signature": "DisplayerCoordinator.DisplayerCoordinator(RendererManager rendererManager)", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(DisplayerListener... listeners)", "modifiers": "public", "return": "void", "signature": "void addListener(DisplayerListener... listeners)", "full_signature": "public void addListener(DisplayerListener... listeners)", "class_method_signature": "DisplayerCoordinator.addListener(DisplayerListener... listeners)", "testcase": false, "constructor": false}, {"identifier": "addDisplayers", "parameters": "(Collection<Displayer> displayers)", "modifiers": "public", "return": "void", "signature": "void addDisplayers(Collection<Displayer> displayers)", "full_signature": "public void addDisplayers(Collection<Displayer> displayers)", "class_method_signature": "DisplayerCoordinator.addDisplayers(Collection<Displayer> displayers)", "testcase": false, "constructor": false}, {"identifier": "addDisplayers", "parameters": "(Displayer... displayers)", "modifiers": "public", "return": "void", "signature": "void addDisplayers(Displayer... displayers)", "full_signature": "public void addDisplayers(Displayer... displayers)", "class_method_signature": "DisplayerCoordinator.addDisplayers(Displayer... displayers)", "testcase": false, "constructor": false}, {"identifier": "addDisplayer", "parameters": "(Displayer displayer)", "modifiers": "public", "return": "void", "signature": "void addDisplayer(Displayer displayer)", "full_signature": "public void addDisplayer(Displayer displayer)", "class_method_signature": "DisplayerCoordinator.addDisplayer(Displayer displayer)", "testcase": false, "constructor": false}, {"identifier": "getDisplayerList", "parameters": "()", "modifiers": "public", "return": "List<Displayer>", "signature": "List<Displayer> getDisplayerList()", "full_signature": "public List<Displayer> getDisplayerList()", "class_method_signature": "DisplayerCoordinator.getDisplayerList()", "testcase": false, "constructor": false}, {"identifier": "removeDisplayer", "parameters": "(Displayer displayer)", "modifiers": "public", "return": "boolean", "signature": "boolean removeDisplayer(Displayer displayer)", "full_signature": "public boolean removeDisplayer(Displayer displayer)", "class_method_signature": "DisplayerCoordinator.removeDisplayer(Displayer displayer)", "testcase": false, "constructor": false}, {"identifier": "drawAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void drawAll()", "full_signature": "public void drawAll()", "class_method_signature": "DisplayerCoordinator.drawAll()", "testcase": false, "constructor": false}, {"identifier": "redrawAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void redrawAll()", "full_signature": "public void redrawAll()", "class_method_signature": "DisplayerCoordinator.redrawAll()", "testcase": false, "constructor": false}, {"identifier": "drawAll", "parameters": "(Command onSuccess, Command onFailure)", "modifiers": "public", "return": "void", "signature": "void drawAll(Command onSuccess, Command onFailure)", "full_signature": "public void drawAll(Command onSuccess, Command onFailure)", "class_method_signature": "DisplayerCoordinator.drawAll(Command onSuccess, Command onFailure)", "testcase": false, "constructor": false}, {"identifier": "redrawAll", "parameters": "(Command onSuccess, Command onFailure)", "modifiers": "public", "return": "void", "signature": "void redrawAll(Command onSuccess, Command onFailure)", "full_signature": "public void redrawAll(Command onSuccess, Command onFailure)", "class_method_signature": "DisplayerCoordinator.redrawAll(Command onSuccess, Command onFailure)", "testcase": false, "constructor": false}, {"identifier": "closeAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeAll()", "full_signature": "public void closeAll()", "class_method_signature": "DisplayerCoordinator.closeAll()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DisplayerCoordinator.clear()", "testcase": false, "constructor": false}, {"identifier": "addNotificationVeto", "parameters": "(Displayer target, List<Displayer> vetoedDisplayers)", "modifiers": "public", "return": "void", "signature": "void addNotificationVeto(Displayer target, List<Displayer> vetoedDisplayers)", "full_signature": "public void addNotificationVeto(Displayer target, List<Displayer> vetoedDisplayers)", "class_method_signature": "DisplayerCoordinator.addNotificationVeto(Displayer target, List<Displayer> vetoedDisplayers)", "testcase": false, "constructor": false}, {"identifier": "addNotificationVeto", "parameters": "(List<Displayer> vetoedDisplayers)", "modifiers": "public", "return": "void", "signature": "void addNotificationVeto(List<Displayer> vetoedDisplayers)", "full_signature": "public void addNotificationVeto(List<Displayer> vetoedDisplayers)", "class_method_signature": "DisplayerCoordinator.addNotificationVeto(List<Displayer> vetoedDisplayers)", "testcase": false, "constructor": false}, {"identifier": "isNotificationVetoed", "parameters": "(Displayer from, Displayer to)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotificationVetoed(Displayer from, Displayer to)", "full_signature": "public boolean isNotificationVetoed(Displayer from, Displayer to)", "class_method_signature": "DisplayerCoordinator.isNotificationVetoed(Displayer from, Displayer to)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/DisplayerCoordinator.java"}, "focal_method": {"identifier": "drawAll", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void drawAll() {\n        drawAll(null, null);\n    }", "signature": "void drawAll()", "full_signature": "public void drawAll()", "class_method_signature": "DisplayerCoordinator.drawAll()", "testcase": false, "constructor": false, "invocations": ["drawAll"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}