{"test_class": {"identifier": "LicenseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String dbName = DatabaseSettings.COUCH_DB_DATABASE;", "modifier": "private static final", "type": "String", "declarator": "dbName = DatabaseSettings.COUCH_DB_DATABASE", "var_name": "dbName"}, {"original_string": "private LicenseHandler handler;", "modifier": "private", "type": "LicenseHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private Map<String, License> licenses;", "modifier": "private", "type": "Map<String, License>", "declarator": "licenses", "var_name": "licenses"}, {"original_string": "private Map<String, Todo> todos;", "modifier": "private", "type": "Map<String, Todo>", "declarator": "todos", "var_name": "todos"}, {"original_string": "private Map<String, Obligation> obligations;", "modifier": "private", "type": "Map<String, Obligation>", "declarator": "obligations", "var_name": "obligations"}], "file": "backend/src/src-licenses/src/test/java/org/eclipse/sw360/licenses/LicenseHandlerTest.java"}, "test_case": {"identifier": "testGetLicense3", "parameters": "()", "modifiers": "@Test(expected = SW360Exception.class) public", "return": "void", "body": "@Test(expected = SW360Exception.class)\n    public void testGetLicense3() throws Exception {\n        // Test existing ID, but that is not a license\n        License license = handler.getByID(todos.values().iterator().next().getId(), user.getDepartment());\n        assertNull(license);\n    }", "signature": "void testGetLicense3()", "full_signature": "@Test(expected = SW360Exception.class) public void testGetLicense3()", "class_method_signature": "LicenseHandlerTest.testGetLicense3()", "testcase": true, "constructor": false, "invocations": ["getByID", "getId", "next", "iterator", "values", "getDepartment", "assertNull"]}, "focal_class": {"identifier": "LicenseHandler", "superclass": "", "interfaces": "implements LicenseService.Iface", "fields": [{"original_string": "LicenseDatabaseHandler handler;", "modifier": "", "type": "LicenseDatabaseHandler", "declarator": "handler", "var_name": "handler"}], "methods": [{"identifier": "LicenseHandler", "parameters": "()", "modifiers": "", "return": "", "signature": " LicenseHandler()", "full_signature": "  LicenseHandler()", "class_method_signature": "LicenseHandler.LicenseHandler()", "testcase": false, "constructor": true}, {"identifier": "getObligations", "parameters": "()", "modifiers": "@Override public", "return": "List<Obligation>", "signature": "List<Obligation> getObligations()", "full_signature": "@Override public List<Obligation> getObligations()", "class_method_signature": "LicenseHandler.getObligations()", "testcase": false, "constructor": false}, {"identifier": "getLicenseSummary", "parameters": "()", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getLicenseSummary()", "full_signature": "@Override public List<License> getLicenseSummary()", "class_method_signature": "LicenseHandler.getLicenseSummary()", "testcase": false, "constructor": false}, {"identifier": "getLicenseSummaryForExport", "parameters": "()", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getLicenseSummaryForExport()", "full_signature": "@Override public List<License> getLicenseSummaryForExport()", "class_method_signature": "LicenseHandler.getLicenseSummaryForExport()", "testcase": false, "constructor": false}, {"identifier": "getDetailedLicenseSummaryForExport", "parameters": "(String organisation)", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getDetailedLicenseSummaryForExport(String organisation)", "full_signature": "@Override public List<License> getDetailedLicenseSummaryForExport(String organisation)", "class_method_signature": "LicenseHandler.getDetailedLicenseSummaryForExport(String organisation)", "testcase": false, "constructor": false}, {"identifier": "getDetailedLicenseSummary", "parameters": "(String organisation, List<String> identifiers)", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getDetailedLicenseSummary(String organisation, List<String> identifiers)", "full_signature": "@Override public List<License> getDetailedLicenseSummary(String organisation, List<String> identifiers)", "class_method_signature": "LicenseHandler.getDetailedLicenseSummary(String organisation, List<String> identifiers)", "testcase": false, "constructor": false}, {"identifier": "addRiskCategories", "parameters": "(List<RiskCategory> riskCategories, User user)", "modifiers": "@Override public", "return": "List<RiskCategory>", "signature": "List<RiskCategory> addRiskCategories(List<RiskCategory> riskCategories, User user)", "full_signature": "@Override public List<RiskCategory> addRiskCategories(List<RiskCategory> riskCategories, User user)", "class_method_signature": "LicenseHandler.addRiskCategories(List<RiskCategory> riskCategories, User user)", "testcase": false, "constructor": false}, {"identifier": "addRisks", "parameters": "(List<Risk> risks, User user)", "modifiers": "@Override public", "return": "List<Risk>", "signature": "List<Risk> addRisks(List<Risk> risks, User user)", "full_signature": "@Override public List<Risk> addRisks(List<Risk> risks, User user)", "class_method_signature": "LicenseHandler.addRisks(List<Risk> risks, User user)", "testcase": false, "constructor": false}, {"identifier": "addObligations", "parameters": "(List<Obligation> obligations, User user)", "modifiers": "@Override public", "return": "List<Obligation>", "signature": "List<Obligation> addObligations(List<Obligation> obligations, User user)", "full_signature": "@Override public List<Obligation> addObligations(List<Obligation> obligations, User user)", "class_method_signature": "LicenseHandler.addObligations(List<Obligation> obligations, User user)", "testcase": false, "constructor": false}, {"identifier": "addLicenseTypes", "parameters": "(List<LicenseType> licenseTypes, User user)", "modifiers": "@Override public", "return": "List<LicenseType>", "signature": "List<LicenseType> addLicenseTypes(List<LicenseType> licenseTypes, User user)", "full_signature": "@Override public List<LicenseType> addLicenseTypes(List<LicenseType> licenseTypes, User user)", "class_method_signature": "LicenseHandler.addLicenseTypes(List<LicenseType> licenseTypes, User user)", "testcase": false, "constructor": false}, {"identifier": "addLicenses", "parameters": "(List<License> licenses, User user)", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> addLicenses(List<License> licenses, User user)", "full_signature": "@Override public List<License> addLicenses(List<License> licenses, User user)", "class_method_signature": "LicenseHandler.addLicenses(List<License> licenses, User user)", "testcase": false, "constructor": false}, {"identifier": "addTodos", "parameters": "(List<Todo> todos, User user)", "modifiers": "@Override public", "return": "List<Todo>", "signature": "List<Todo> addTodos(List<Todo> todos, User user)", "full_signature": "@Override public List<Todo> addTodos(List<Todo> todos, User user)", "class_method_signature": "LicenseHandler.addTodos(List<Todo> todos, User user)", "testcase": false, "constructor": false}, {"identifier": "getRiskCategories", "parameters": "()", "modifiers": "@Override public", "return": "List<RiskCategory>", "signature": "List<RiskCategory> getRiskCategories()", "full_signature": "@Override public List<RiskCategory> getRiskCategories()", "class_method_signature": "LicenseHandler.getRiskCategories()", "testcase": false, "constructor": false}, {"identifier": "getRisks", "parameters": "()", "modifiers": "@Override public", "return": "List<Risk>", "signature": "List<Risk> getRisks()", "full_signature": "@Override public List<Risk> getRisks()", "class_method_signature": "LicenseHandler.getRisks()", "testcase": false, "constructor": false}, {"identifier": "getLicenseTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<LicenseType>", "signature": "List<LicenseType> getLicenseTypes()", "full_signature": "@Override public List<LicenseType> getLicenseTypes()", "class_method_signature": "LicenseHandler.getLicenseTypes()", "testcase": false, "constructor": false}, {"identifier": "getLicenses", "parameters": "()", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getLicenses()", "full_signature": "@Override public List<License> getLicenses()", "class_method_signature": "LicenseHandler.getLicenses()", "testcase": false, "constructor": false}, {"identifier": "getTodos", "parameters": "()", "modifiers": "@Override public", "return": "List<Todo>", "signature": "List<Todo> getTodos()", "full_signature": "@Override public List<Todo> getTodos()", "class_method_signature": "LicenseHandler.getTodos()", "testcase": false, "constructor": false}, {"identifier": "getRisksByIds", "parameters": "(List<String> ids)", "modifiers": "@Override public", "return": "List<Risk>", "signature": "List<Risk> getRisksByIds(List<String> ids)", "full_signature": "@Override public List<Risk> getRisksByIds(List<String> ids)", "class_method_signature": "LicenseHandler.getRisksByIds(List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getRiskCategoriesByIds", "parameters": "(List<String> ids)", "modifiers": "@Override public", "return": "List<RiskCategory>", "signature": "List<RiskCategory> getRiskCategoriesByIds(List<String> ids)", "full_signature": "@Override public List<RiskCategory> getRiskCategoriesByIds(List<String> ids)", "class_method_signature": "LicenseHandler.getRiskCategoriesByIds(List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getObligationsByIds", "parameters": "(List<String> ids)", "modifiers": "@Override public", "return": "List<Obligation>", "signature": "List<Obligation> getObligationsByIds(List<String> ids)", "full_signature": "@Override public List<Obligation> getObligationsByIds(List<String> ids)", "class_method_signature": "LicenseHandler.getObligationsByIds(List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getLicenseTypesByIds", "parameters": "(List<String> ids)", "modifiers": "@Override public", "return": "List<LicenseType>", "signature": "List<LicenseType> getLicenseTypesByIds(List<String> ids)", "full_signature": "@Override public List<LicenseType> getLicenseTypesByIds(List<String> ids)", "class_method_signature": "LicenseHandler.getLicenseTypesByIds(List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getTodosByIds", "parameters": "(List<String> ids)", "modifiers": "@Override public", "return": "List<Todo>", "signature": "List<Todo> getTodosByIds(List<String> ids)", "full_signature": "@Override public List<Todo> getTodosByIds(List<String> ids)", "class_method_signature": "LicenseHandler.getTodosByIds(List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getByID", "parameters": "(String id, String organisation)", "modifiers": "@Override public", "return": "License", "signature": "License getByID(String id, String organisation)", "full_signature": "@Override public License getByID(String id, String organisation)", "class_method_signature": "LicenseHandler.getByID(String id, String organisation)", "testcase": false, "constructor": false}, {"identifier": "getByIDWithOwnModerationRequests", "parameters": "(String id, String organisation, User user)", "modifiers": "@Override public", "return": "License", "signature": "License getByIDWithOwnModerationRequests(String id, String organisation, User user)", "full_signature": "@Override public License getByIDWithOwnModerationRequests(String id, String organisation, User user)", "class_method_signature": "LicenseHandler.getByIDWithOwnModerationRequests(String id, String organisation, User user)", "testcase": false, "constructor": false}, {"identifier": "getByIds", "parameters": "(Set<String> ids, String organisation)", "modifiers": "@Override public", "return": "List<License>", "signature": "List<License> getByIds(Set<String> ids, String organisation)", "full_signature": "@Override public List<License> getByIds(Set<String> ids, String organisation)", "class_method_signature": "LicenseHandler.getByIds(Set<String> ids, String organisation)", "testcase": false, "constructor": false}, {"identifier": "getRiskById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Risk", "signature": "Risk getRiskById(String id)", "full_signature": "@Override public Risk getRiskById(String id)", "class_method_signature": "LicenseHandler.getRiskById(String id)", "testcase": false, "constructor": false}, {"identifier": "getRiskCategoryById", "parameters": "(String id)", "modifiers": "@Override public", "return": "RiskCategory", "signature": "RiskCategory getRiskCategoryById(String id)", "full_signature": "@Override public RiskCategory getRiskCategoryById(String id)", "class_method_signature": "LicenseHandler.getRiskCategoryById(String id)", "testcase": false, "constructor": false}, {"identifier": "getObligationById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Obligation", "signature": "Obligation getObligationById(String id)", "full_signature": "@Override public Obligation getObligationById(String id)", "class_method_signature": "LicenseHandler.getObligationById(String id)", "testcase": false, "constructor": false}, {"identifier": "getLicenseTypeById", "parameters": "(String id)", "modifiers": "@Override public", "return": "LicenseType", "signature": "LicenseType getLicenseTypeById(String id)", "full_signature": "@Override public LicenseType getLicenseTypeById(String id)", "class_method_signature": "LicenseHandler.getLicenseTypeById(String id)", "testcase": false, "constructor": false}, {"identifier": "getTodoById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Todo", "signature": "Todo getTodoById(String id)", "full_signature": "@Override public Todo getTodoById(String id)", "class_method_signature": "LicenseHandler.getTodoById(String id)", "testcase": false, "constructor": false}, {"identifier": "addTodo", "parameters": "(Todo todo, User user)", "modifiers": "@Override public", "return": "String", "signature": "String addTodo(Todo todo, User user)", "full_signature": "@Override public String addTodo(Todo todo, User user)", "class_method_signature": "LicenseHandler.addTodo(Todo todo, User user)", "testcase": false, "constructor": false}, {"identifier": "addTodoToLicense", "parameters": "(Todo todo, String licenseId, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus addTodoToLicense(Todo todo, String licenseId, User user)", "full_signature": "@Override public RequestStatus addTodoToLicense(Todo todo, String licenseId, User user)", "class_method_signature": "LicenseHandler.addTodoToLicense(Todo todo, String licenseId, User user)", "testcase": false, "constructor": false}, {"identifier": "updateLicense", "parameters": "(License license, User user, User requestingUser)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus updateLicense(License license, User user, User requestingUser)", "full_signature": "@Override public RequestStatus updateLicense(License license, User user, User requestingUser)", "class_method_signature": "LicenseHandler.updateLicense(License license, User user, User requestingUser)", "testcase": false, "constructor": false}, {"identifier": "updateLicenseFromModerationRequest", "parameters": "(License licenseAdditions,\n                                                            License licenseDeletions,\n                                                            User user,\n                                                            User requestingUser)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus updateLicenseFromModerationRequest(License licenseAdditions,\n                                                            License licenseDeletions,\n                                                            User user,\n                                                            User requestingUser)", "full_signature": "@Override public RequestStatus updateLicenseFromModerationRequest(License licenseAdditions,\n                                                            License licenseDeletions,\n                                                            User user,\n                                                            User requestingUser)", "class_method_signature": "LicenseHandler.updateLicenseFromModerationRequest(License licenseAdditions,\n                                                            License licenseDeletions,\n                                                            User user,\n                                                            User requestingUser)", "testcase": false, "constructor": false}, {"identifier": "updateWhitelist", "parameters": "(String licenceId, Set<String> whitelist, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus updateWhitelist(String licenceId, Set<String> whitelist, User user)", "full_signature": "@Override public RequestStatus updateWhitelist(String licenceId, Set<String> whitelist, User user)", "class_method_signature": "LicenseHandler.updateWhitelist(String licenceId, Set<String> whitelist, User user)", "testcase": false, "constructor": false}, {"identifier": "deleteLicense", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus deleteLicense(String id, User user)", "full_signature": "@Override public RequestStatus deleteLicense(String id, User user)", "class_method_signature": "LicenseHandler.deleteLicense(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getCustomProperties", "parameters": "(String documentType)", "modifiers": "@Override public", "return": "List<CustomProperties>", "signature": "List<CustomProperties> getCustomProperties(String documentType)", "full_signature": "@Override public List<CustomProperties> getCustomProperties(String documentType)", "class_method_signature": "LicenseHandler.getCustomProperties(String documentType)", "testcase": false, "constructor": false}, {"identifier": "updateCustomProperties", "parameters": "(CustomProperties customProperties, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus updateCustomProperties(CustomProperties customProperties, User user)", "full_signature": "@Override public RequestStatus updateCustomProperties(CustomProperties customProperties, User user)", "class_method_signature": "LicenseHandler.updateCustomProperties(CustomProperties customProperties, User user)", "testcase": false, "constructor": false}, {"identifier": "deleteAllLicenseInformation", "parameters": "(User user)", "modifiers": "@Override public", "return": "RequestSummary", "signature": "RequestSummary deleteAllLicenseInformation(User user)", "full_signature": "@Override public RequestSummary deleteAllLicenseInformation(User user)", "class_method_signature": "LicenseHandler.deleteAllLicenseInformation(User user)", "testcase": false, "constructor": false}, {"identifier": "importAllSpdxLicenses", "parameters": "(User user)", "modifiers": "@Override public", "return": "RequestSummary", "signature": "RequestSummary importAllSpdxLicenses(User user)", "full_signature": "@Override public RequestSummary importAllSpdxLicenses(User user)", "class_method_signature": "LicenseHandler.importAllSpdxLicenses(User user)", "testcase": false, "constructor": false}], "file": "backend/src/src-licenses/src/main/java/org/eclipse/sw360/licenses/LicenseHandler.java"}, "focal_method": {"identifier": "getByID", "parameters": "(String id, String organisation)", "modifiers": "@Override public", "return": "License", "body": "@Override\n    public License getByID(String id, String organisation) throws TException {\n        assertNotEmpty(id);\n        assertNotEmpty(organisation);\n\n        return handler.getLicenseForOrganisation(id, organisation);\n    }", "signature": "License getByID(String id, String organisation)", "full_signature": "@Override public License getByID(String id, String organisation)", "class_method_signature": "LicenseHandler.getByID(String id, String organisation)", "testcase": false, "constructor": false, "invocations": ["assertNotEmpty", "assertNotEmpty", "getLicenseForOrganisation"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}