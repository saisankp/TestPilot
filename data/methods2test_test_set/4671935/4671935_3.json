{"test_class": {"identifier": "GeocoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/location/GeocoderTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parse() throws ParseException {\n        final LatLngAlt lla = Geocoder.parse(\"12.3456, -78.9012, 66ft\");\n        assertEquals(12.3456, lla.lat, 0.00001);\n        assertEquals(-78.9012, lla.lng, 0.00001);\n        assertEquals(20.11, lla.alt, 0.01);\n    }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "GeocoderTest.parse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Geocoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String defaultError = \"Invalid latitude, longitude, altitude\";", "modifier": "private static final", "type": "String", "declarator": "defaultError = \"Invalid latitude, longitude, altitude\"", "var_name": "defaultError"}], "methods": [{"identifier": "parse", "parameters": "(@Nullable String str)", "modifiers": "@NonNull public static", "return": "LatLngAlt", "signature": "LatLngAlt parse(@Nullable String str)", "full_signature": "@NonNull public static LatLngAlt parse(@Nullable String str)", "class_method_signature": "Geocoder.parse(@Nullable String str)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/location/Geocoder.java"}, "focal_method": {"identifier": "parse", "parameters": "(@Nullable String str)", "modifiers": "@NonNull public static", "return": "LatLngAlt", "body": "@NonNull\n    public static LatLngAlt parse(@Nullable String str) throws ParseException {\n        if (str == null || str.trim().isEmpty()) {\n            throw new ParseException(\"Missing latitude, longitude, altitude\", 0);\n        }\n        final String[] split = str.split(\",\");\n        if (split.length < 2 || split.length > 3) {\n            throw new ParseException(defaultError, 0);\n        }\n\n        // Latitude\n        if (split[0].trim().isEmpty()) {\n            if (split.length == 3) {\n                throw new ParseException(\"Missing latitude\", 0);\n            } else {\n                throw new ParseException(defaultError, 0);\n            }\n        }\n        final Double lat = Numbers.parseDoubleNull(split[0]);\n        if (lat == null) {\n            throw new ParseException(\"Invalid latitude: \" + split[0].trim(), 0);\n        }\n        if (lat < -90 || lat > 90) {\n            throw new ParseException(\"Invalid latitude: \" + split[0].trim() + \" is not between -90 and 90\", 0);\n        }\n\n        // Longitude\n        if (split[1].trim().isEmpty()) {\n            if (split.length == 2) {\n                throw new ParseException(\"Missing longitude, altitude\", 0);\n            } else {\n                throw new ParseException(\"Missing longitude\", 0);\n            }\n        }\n        final Double lng = Numbers.parseDoubleNull(split[1]);\n        if (lng == null) {\n            throw new ParseException(\"Invalid longitude: \" + split[1].trim(), 0);\n        }\n        if (lng < -180 || lng > 180) {\n            throw new ParseException(\"Invalid longitude: \" + split[1].trim() + \" is not between -180 and 180\", 0);\n        }\n\n        // Altitude\n        if (split.length == 2 || split[2].trim().isEmpty()) {\n            throw new ParseException(\"Missing altitude\", 0);\n        }\n        final String altStr = split[2].trim();\n        final Double alt;\n        if (altStr.endsWith(\"ft\")) {\n            final Double feet = Numbers.parseDoubleNull(altStr.substring(0, altStr.length() - 2));\n            alt = feet == null ? null : feet * 0.3048;\n        } else if (altStr.endsWith(\"m\")) {\n            alt = Numbers.parseDoubleNull(altStr.substring(0, altStr.length() - 1));\n        } else {\n            alt = Numbers.parseDoubleNull(altStr);\n        }\n        if (alt == null) {\n            throw new ParseException(\"Invalid altitude: \" + split[2].trim(), 0);\n        }\n        return new LatLngAlt(lat, lng, alt);\n    }", "signature": "LatLngAlt parse(@Nullable String str)", "full_signature": "@NonNull public static LatLngAlt parse(@Nullable String str)", "class_method_signature": "Geocoder.parse(@Nullable String str)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "trim", "split", "isEmpty", "trim", "parseDoubleNull", "trim", "trim", "isEmpty", "trim", "parseDoubleNull", "trim", "trim", "isEmpty", "trim", "trim", "endsWith", "parseDoubleNull", "substring", "length", "endsWith", "parseDoubleNull", "substring", "length", "parseDoubleNull", "trim"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}