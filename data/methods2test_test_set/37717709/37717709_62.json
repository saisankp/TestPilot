{"test_class": {"identifier": "TestJVoiceXmlConfiguration", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.config/src/test/java/org/jvoicexml/config/TestJVoiceXmlConfiguration.java"}, "test_case": {"identifier": "testLoadObjects", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"rawtypes\")\n    public void testLoadObjects() throws Exception {\n        JVoiceXmlConfiguration config = new JVoiceXmlConfiguration();\n        final Collection<ResourceFactory> factories =\n            config.loadObjects(ResourceFactory.class, \"implementation\");\n        Assert.assertEquals(1, factories.size());\n        final ResourceFactory factory = factories.iterator().next();\n        Assert.assertEquals(DesktopTelephonySupportFactory.class,\n                factory.getClass());\n    }", "signature": "void testLoadObjects()", "full_signature": "@Test @SuppressWarnings(\"rawtypes\") public void testLoadObjects()", "class_method_signature": "TestJVoiceXmlConfiguration.testLoadObjects()", "testcase": true, "constructor": false, "invocations": ["loadObjects", "assertEquals", "size", "next", "iterator", "assertEquals", "getClass"]}, "focal_class": {"identifier": "JVoiceXmlConfiguration", "superclass": "", "interfaces": "implements Configuration", "fields": [{"original_string": "private static final Logger LOGGER =\n        LogManager.getLogger(JVoiceXmlConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n        LogManager.getLogger(JVoiceXmlConfiguration.class)", "var_name": "LOGGER"}, {"original_string": "private ApplicationContext context;", "modifier": "private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Map<String, JVoiceXmlClassLoader> loaderRepositories;", "modifier": "private final", "type": "Map<String, JVoiceXmlClassLoader>", "declarator": "loaderRepositories", "var_name": "loaderRepositories"}, {"original_string": "private final File configFolder;", "modifier": "private final", "type": "File", "declarator": "configFolder", "var_name": "configFolder"}, {"original_string": "private ConfigurationRepository configurationRepository;", "modifier": "private", "type": "ConfigurationRepository", "declarator": "configurationRepository", "var_name": "configurationRepository"}, {"original_string": "private SAXParserFactory parserFactory;", "modifier": "private", "type": "SAXParserFactory", "declarator": "parserFactory", "var_name": "parserFactory"}], "methods": [{"identifier": "JVoiceXmlConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " JVoiceXmlConfiguration()", "full_signature": "public  JVoiceXmlConfiguration()", "class_method_signature": "JVoiceXmlConfiguration.JVoiceXmlConfiguration()", "testcase": false, "constructor": true}, {"identifier": "getClassLoader", "parameters": "(final String repository)", "modifiers": "private", "return": "JVoiceXmlClassLoader", "signature": "JVoiceXmlClassLoader getClassLoader(final String repository)", "full_signature": "private JVoiceXmlClassLoader getClassLoader(final String repository)", "class_method_signature": "JVoiceXmlConfiguration.getClassLoader(final String repository)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(final File file)", "modifiers": "private", "return": "Resource", "signature": "Resource getResource(final File file)", "full_signature": "private Resource getResource(final File file)", "class_method_signature": "JVoiceXmlConfiguration.getResource(final File file)", "testcase": false, "constructor": false}, {"identifier": "getSAXParser", "parameters": "()", "modifiers": "private", "return": "SAXParser", "signature": "SAXParser getSAXParser()", "full_signature": "private SAXParser getSAXParser()", "class_method_signature": "JVoiceXmlConfiguration.getSAXParser()", "testcase": false, "constructor": false}, {"identifier": "getConfigurationFiles", "parameters": "(final String root)", "modifiers": "", "return": "Collection<File>", "signature": "Collection<File> getConfigurationFiles(final String root)", "full_signature": " Collection<File> getConfigurationFiles(final String root)", "class_method_signature": "JVoiceXmlConfiguration.getConfigurationFiles(final String root)", "testcase": false, "constructor": false}, {"identifier": "getClassPathExtractor", "parameters": "(final File file)", "modifiers": "private", "return": "ClasspathExtractor", "signature": "ClasspathExtractor getClassPathExtractor(final File file)", "full_signature": "private ClasspathExtractor getClassPathExtractor(final File file)", "class_method_signature": "JVoiceXmlConfiguration.getClassPathExtractor(final File file)", "testcase": false, "constructor": false}, {"identifier": "loadObjects", "parameters": "(\n            final Class<T> baseClass, final String root)", "modifiers": "@Override public synchronized", "return": "Collection<T>", "signature": "Collection<T> loadObjects(\n            final Class<T> baseClass, final String root)", "full_signature": "@Override public synchronized Collection<T> loadObjects(\n            final Class<T> baseClass, final String root)", "class_method_signature": "JVoiceXmlConfiguration.loadObjects(\n            final Class<T> baseClass, final String root)", "testcase": false, "constructor": false}, {"identifier": "loadObject", "parameters": "(\n            final Class<T> baseClass, final String key)", "modifiers": "@Override public synchronized", "return": "T", "signature": "T loadObject(\n            final Class<T> baseClass, final String key)", "full_signature": "@Override public synchronized T loadObject(\n            final Class<T> baseClass, final String key)", "class_method_signature": "JVoiceXmlConfiguration.loadObject(\n            final Class<T> baseClass, final String key)", "testcase": false, "constructor": false}, {"identifier": "loadObject", "parameters": "(\n            final Class<T> baseClass)", "modifiers": "@Override public synchronized", "return": "T", "signature": "T loadObject(\n            final Class<T> baseClass)", "full_signature": "@Override public synchronized T loadObject(\n            final Class<T> baseClass)", "class_method_signature": "JVoiceXmlConfiguration.loadObject(\n            final Class<T> baseClass)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.config/src/main/java/org/jvoicexml/config/JVoiceXmlConfiguration.java"}, "focal_method": {"identifier": "loadObjects", "parameters": "(\n            final Class<T> baseClass, final String root)", "modifiers": "@Override public synchronized", "return": "Collection<T>", "body": "@Override\n    public synchronized <T extends Object> Collection<T> loadObjects(\n            final Class<T> baseClass, final String root)\n            throws ConfigurationException {\n        final Collection<T> beans = new java.util.ArrayList<T>();\n        final Collection<File> files;\n        try {\n            files = getConfigurationFiles(root);\n        } catch (IOException e) {\n            throw new ConfigurationException(e.getMessage(), e);\n        }\n        for (File file : files) {\n            try {\n                LOGGER.info(\"loading configuration '\" + file.getCanonicalPath()\n                        + \"'...\");\n                final Resource resource = getResource(file);\n                if (resource == null) {\n                    continue;\n                }\n                final DefaultListableBeanFactory factory =\n                        new DefaultListableBeanFactory();\n                final XmlBeanDefinitionReader reader =\n                        new XmlBeanDefinitionReader(factory);\n                reader.loadBeanDefinitions(resource);\n                final ClasspathExtractor extractor =\n                    getClassPathExtractor(file);\n                if (extractor == null) {\n                    continue;\n                }\n                final String repository = extractor.getLoaderRepostory();\n                final JVoiceXmlClassLoader loader = getClassLoader(repository);\n                final URL[] urls = extractor.getClasspathEntries();\n                loader.addURLs(urls);\n                if (LOGGER.isDebugEnabled()) {\n                    for (URL url : urls) {\n                        LOGGER.debug(\"using classpath entry '\" + url + \"'\");\n                    }\n                }\n                factory.setBeanClassLoader(loader);\n                final String[] names =\n                        factory.getBeanNamesForType(baseClass);\n                if (names.length == 0) {\n                    LOGGER.info(\"no loadable objects of type '\" + baseClass \n                            + \"' in file '\"\n                            + file.getCanonicalPath() + \"'\");\n                } else {\n                    for (String name : names) {\n                        LOGGER.info(\"loading '\" + name + \"'\");\n                        final Object o =\n                                factory.getBean(name, baseClass);\n                        final T bean = baseClass.cast(o);\n                        beans.add(bean);\n                        if (bean instanceof ExtendedConfiguration) {\n                            final ExtendedConfiguration config =\n                                (ExtendedConfiguration) bean;\n                            config.setConfigurationFile(file);\n                        }\n                    }\n                }\n            } catch (IOException | BeansException e) {\n                throw new ConfigurationException(e.getMessage(), e);\n            }\n        }\n        return beans;\n    }", "signature": "Collection<T> loadObjects(\n            final Class<T> baseClass, final String root)", "full_signature": "@Override public synchronized Collection<T> loadObjects(\n            final Class<T> baseClass, final String root)", "class_method_signature": "JVoiceXmlConfiguration.loadObjects(\n            final Class<T> baseClass, final String root)", "testcase": false, "constructor": false, "invocations": ["getConfigurationFiles", "getMessage", "info", "getCanonicalPath", "getResource", "loadBeanDefinitions", "getClassPathExtractor", "getLoaderRepostory", "getClassLoader", "getClasspathEntries", "addURLs", "isDebugEnabled", "debug", "setBeanClassLoader", "getBeanNamesForType", "info", "getCanonicalPath", "info", "getBean", "cast", "add", "setConfigurationFile", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}