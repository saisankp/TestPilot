{"test_class": {"identifier": "UnsafeByteArrayInputStreamTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/io/UnsafeByteArrayInputStreamTest.java"}, "test_case": {"identifier": "testMark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMark() {\n        UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes(), 1);\n        assertThat(stream.markSupported(), is(true));\n\n        stream.mark(2);\n        stream.read();\n        assertThat(stream.position(), is(2));\n        stream.reset();\n        assertThat(stream.position(), is(1));\n    }", "signature": "void testMark()", "full_signature": "@Test public void testMark()", "class_method_signature": "UnsafeByteArrayInputStreamTest.testMark()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertThat", "markSupported", "is", "mark", "read", "assertThat", "position", "is", "reset", "assertThat", "position", "is"]}, "focal_class": {"identifier": "UnsafeByteArrayInputStream", "superclass": "extends InputStream", "interfaces": "", "fields": [{"original_string": "protected byte mData[];", "modifier": "protected", "type": "byte", "declarator": "mData[]", "var_name": "mData"}, {"original_string": "protected int mPosition, mLimit, mMark = 0;", "modifier": "protected", "type": "int", "declarator": "mPosition", "var_name": "mPosition"}], "methods": [{"identifier": "UnsafeByteArrayInputStream", "parameters": "(byte buf[])", "modifiers": "public", "return": "", "signature": " UnsafeByteArrayInputStream(byte buf[])", "full_signature": "public  UnsafeByteArrayInputStream(byte buf[])", "class_method_signature": "UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte buf[])", "testcase": false, "constructor": true}, {"identifier": "UnsafeByteArrayInputStream", "parameters": "(byte buf[], int offset)", "modifiers": "public", "return": "", "signature": " UnsafeByteArrayInputStream(byte buf[], int offset)", "full_signature": "public  UnsafeByteArrayInputStream(byte buf[], int offset)", "class_method_signature": "UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte buf[], int offset)", "testcase": false, "constructor": true}, {"identifier": "UnsafeByteArrayInputStream", "parameters": "(byte buf[], int offset, int length)", "modifiers": "public", "return": "", "signature": " UnsafeByteArrayInputStream(byte buf[], int offset, int length)", "full_signature": "public  UnsafeByteArrayInputStream(byte buf[], int offset, int length)", "class_method_signature": "UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte buf[], int offset, int length)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "UnsafeByteArrayInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte b[], int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte b[], int off, int len)", "full_signature": "@Override public int read(byte b[], int off, int len)", "class_method_signature": "UnsafeByteArrayInputStream.read(byte b[], int off, int len)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long len)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long len)", "full_signature": "@Override public long skip(long len)", "class_method_signature": "UnsafeByteArrayInputStream.skip(long len)", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "UnsafeByteArrayInputStream.available()", "testcase": false, "constructor": false}, {"identifier": "markSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean markSupported()", "full_signature": "@Override public boolean markSupported()", "class_method_signature": "UnsafeByteArrayInputStream.markSupported()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(int readAheadLimit)", "modifiers": "@Override public", "return": "void", "signature": "void mark(int readAheadLimit)", "full_signature": "@Override public void mark(int readAheadLimit)", "class_method_signature": "UnsafeByteArrayInputStream.mark(int readAheadLimit)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "UnsafeByteArrayInputStream.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "UnsafeByteArrayInputStream.close()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int position()", "full_signature": "public int position()", "class_method_signature": "UnsafeByteArrayInputStream.position()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "(int newPosition)", "modifiers": "public", "return": "void", "signature": "void position(int newPosition)", "full_signature": "public void position(int newPosition)", "class_method_signature": "UnsafeByteArrayInputStream.position(int newPosition)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "UnsafeByteArrayInputStream.size()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/io/UnsafeByteArrayInputStream.java"}, "focal_method": {"identifier": "mark", "parameters": "(int readAheadLimit)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mark(int readAheadLimit) {\n        mMark = mPosition;\n    }", "signature": "void mark(int readAheadLimit)", "full_signature": "@Override public void mark(int readAheadLimit)", "class_method_signature": "UnsafeByteArrayInputStream.mark(int readAheadLimit)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}