{"test_class": {"identifier": "AddressObserverUsingIpv6Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AddressObservationWriter addressObservationWriterMock;", "modifier": "private", "type": "AddressObservationWriter", "declarator": "addressObservationWriterMock", "var_name": "addressObservationWriterMock"}], "file": "addresstracker/implementation/src/test/java/org/opendaylight/l2switch/addresstracker/addressobserver/AddressObserverUsingIpv6Test.java"}, "test_case": {"identifier": "onIpv6PacketReceivedNullInputTest2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onIpv6PacketReceivedNullInputTest2() throws Exception {\n\n        ArrayList<PacketChain> packetChainList = new ArrayList<PacketChain>();\n        packetChainList.add(new PacketChainBuilder().setPacket(new RawPacketBuilder().build()).build());\n        packetChainList.add(new PacketChainBuilder()\n                .setPacket(new EthernetPacketBuilder().setSourceMac(new MacAddress(\"aa:bb:cc:dd:ee:ff\")).build())\n                .build());\n\n        Ipv6PacketReceived ipv6PktReceived = new Ipv6PacketReceivedBuilder().setPacketChain(packetChainList).build();\n        AddressObserverUsingIpv6 addressObserverIpv6 = new AddressObserverUsingIpv6(addressObservationWriterMock);\n        addressObserverIpv6.onIpv6PacketReceived(ipv6PktReceived);\n\n        verify(addressObservationWriterMock, times(0)).addAddress(any(MacAddress.class), any(IpAddress.class),\n                any(NodeConnectorRef.class));\n    }", "signature": "void onIpv6PacketReceivedNullInputTest2()", "full_signature": "@Test public void onIpv6PacketReceivedNullInputTest2()", "class_method_signature": "AddressObserverUsingIpv6Test.onIpv6PacketReceivedNullInputTest2()", "testcase": true, "constructor": false, "invocations": ["add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "setSourceMac", "build", "setPacketChain", "onIpv6PacketReceived", "addAddress", "verify", "times", "any", "any", "any"]}, "focal_class": {"identifier": "AddressObserverUsingIpv6", "superclass": "", "interfaces": "implements Ipv6PacketListener", "fields": [{"original_string": "private static final String IPV6_IP_TO_IGNORE = \"0:0:0:0:0:0:0:0\";", "modifier": "private static final", "type": "String", "declarator": "IPV6_IP_TO_IGNORE = \"0:0:0:0:0:0:0:0\"", "var_name": "IPV6_IP_TO_IGNORE"}, {"original_string": "private final AddressObservationWriter addressObservationWriter;", "modifier": "private final", "type": "AddressObservationWriter", "declarator": "addressObservationWriter", "var_name": "addressObservationWriter"}], "methods": [{"identifier": "AddressObserverUsingIpv6", "parameters": "(AddressObservationWriter addressObservationWriter)", "modifiers": "public", "return": "", "signature": " AddressObserverUsingIpv6(AddressObservationWriter addressObservationWriter)", "full_signature": "public  AddressObserverUsingIpv6(AddressObservationWriter addressObservationWriter)", "class_method_signature": "AddressObserverUsingIpv6.AddressObserverUsingIpv6(AddressObservationWriter addressObservationWriter)", "testcase": false, "constructor": true}, {"identifier": "onIpv6PacketReceived", "parameters": "(Ipv6PacketReceived packetReceived)", "modifiers": "@Override public", "return": "void", "signature": "void onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "full_signature": "@Override public void onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "class_method_signature": "AddressObserverUsingIpv6.onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "testcase": false, "constructor": false}], "file": "addresstracker/implementation/src/main/java/org/opendaylight/l2switch/addresstracker/addressobserver/AddressObserverUsingIpv6.java"}, "focal_method": {"identifier": "onIpv6PacketReceived", "parameters": "(Ipv6PacketReceived packetReceived)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onIpv6PacketReceived(Ipv6PacketReceived packetReceived) {\n        if (packetReceived == null || packetReceived.getPacketChain() == null) {\n            return;\n        }\n\n        RawPacket rawPacket = null;\n        EthernetPacket ethernetPacket = null;\n        Ipv6Packet ipv6Packet = null;\n        for (PacketChain packetChain : packetReceived.getPacketChain()) {\n            if (packetChain.getPacket() instanceof RawPacket) {\n                rawPacket = (RawPacket) packetChain.getPacket();\n            } else if (packetChain.getPacket() instanceof EthernetPacket) {\n                ethernetPacket = (EthernetPacket) packetChain.getPacket();\n            } else if (packetChain.getPacket() instanceof Ipv6Packet) {\n                ipv6Packet = (Ipv6Packet) packetChain.getPacket();\n            }\n        }\n        if (rawPacket == null || ethernetPacket == null || ipv6Packet == null) {\n            return;\n        }\n\n        if (!IPV6_IP_TO_IGNORE.equals(ipv6Packet.getSourceIpv6().getValue())) {\n            addressObservationWriter.addAddress(ethernetPacket.getSourceMac(),\n                    new IpAddress(ipv6Packet.getSourceIpv6().getValue().toCharArray()), rawPacket.getIngress());\n        }\n    }", "signature": "void onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "full_signature": "@Override public void onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "class_method_signature": "AddressObserverUsingIpv6.onIpv6PacketReceived(Ipv6PacketReceived packetReceived)", "testcase": false, "constructor": false, "invocations": ["getPacketChain", "getPacketChain", "getPacket", "getPacket", "getPacket", "getPacket", "getPacket", "getPacket", "equals", "getValue", "getSourceIpv6", "addAddress", "getSourceMac", "toCharArray", "getValue", "getSourceIpv6", "getIngress"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}