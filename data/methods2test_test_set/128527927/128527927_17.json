{"test_class": {"identifier": "IntListTest", "superclass": "", "interfaces": "", "fields": [], "file": "lab3/IntList/IntListTest.java"}, "test_case": {"identifier": "testCatenate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCatenate() {\n        IntList A = IntList.of(1, 2, 3);\n        IntList B = IntList.of(4, 5, 6);\n        IntList exp = IntList.of(1, 2, 3, 4, 5, 6);\n        assertEquals(exp, IntList.catenate(A, B));\n        assertEquals(IntList.of(1, 2, 3), A);\n    }", "signature": "void testCatenate()", "full_signature": "@Test public void testCatenate()", "class_method_signature": "IntListTest.testCatenate()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "assertEquals", "catenate", "assertEquals", "of"]}, "focal_class": {"identifier": "IntList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int first;", "modifier": "private", "type": "int", "declarator": "first", "var_name": "first"}, {"original_string": "private IntList rest;", "modifier": "private", "type": "IntList", "declarator": "rest", "var_name": "rest"}], "methods": [{"identifier": "IntList", "parameters": "(int first0, IntList rest0)", "modifiers": "public", "return": "", "signature": " IntList(int first0, IntList rest0)", "full_signature": "public  IntList(int first0, IntList rest0)", "class_method_signature": "IntList.IntList(int first0, IntList rest0)", "testcase": false, "constructor": true}, {"identifier": "IntList", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntList()", "full_signature": "public  IntList()", "class_method_signature": "IntList.IntList()", "testcase": false, "constructor": true}, {"identifier": "dSquareList", "parameters": "(IntList L)", "modifiers": "public static", "return": "void", "signature": "void dSquareList(IntList L)", "full_signature": "public static void dSquareList(IntList L)", "class_method_signature": "IntList.dSquareList(IntList L)", "testcase": false, "constructor": false}, {"identifier": "squareListIterative", "parameters": "(IntList L)", "modifiers": "public static", "return": "IntList", "signature": "IntList squareListIterative(IntList L)", "full_signature": "public static IntList squareListIterative(IntList L)", "class_method_signature": "IntList.squareListIterative(IntList L)", "testcase": false, "constructor": false}, {"identifier": "squareListRecursive", "parameters": "(IntList L)", "modifiers": "public static", "return": "IntList", "signature": "IntList squareListRecursive(IntList L)", "full_signature": "public static IntList squareListRecursive(IntList L)", "class_method_signature": "IntList.squareListRecursive(IntList L)", "testcase": false, "constructor": false}, {"identifier": "dcatenate", "parameters": "(IntList A, IntList B)", "modifiers": "public static", "return": "IntList", "signature": "IntList dcatenate(IntList A, IntList B)", "full_signature": "public static IntList dcatenate(IntList A, IntList B)", "class_method_signature": "IntList.dcatenate(IntList A, IntList B)", "testcase": false, "constructor": false}, {"identifier": "catenate", "parameters": "(IntList A, IntList B)", "modifiers": "public static", "return": "IntList", "signature": "IntList catenate(IntList A, IntList B)", "full_signature": "public static IntList catenate(IntList A, IntList B)", "class_method_signature": "IntList.catenate(IntList A, IntList B)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(IntList A)", "modifiers": "public static", "return": "IntList", "signature": "IntList reverse(IntList A)", "full_signature": "public static IntList reverse(IntList A)", "class_method_signature": "IntList.reverse(IntList A)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IntList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Integer... args)", "modifiers": "public static", "return": "IntList", "signature": "IntList of(Integer... args)", "full_signature": "public static IntList of(Integer... args)", "class_method_signature": "IntList.of(Integer... args)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object x)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object x)", "full_signature": "public boolean equals(Object x)", "class_method_signature": "IntList.equals(Object x)", "testcase": false, "constructor": false}, {"identifier": "detectCycles", "parameters": "(IntList A)", "modifiers": "private", "return": "int", "signature": "int detectCycles(IntList A)", "full_signature": "private int detectCycles(IntList A)", "class_method_signature": "IntList.detectCycles(IntList A)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override /** Outputs the IntList as a String. You are not expected to read * or understand this method. */ public", "return": "String", "signature": "String toString()", "full_signature": "@Override /** Outputs the IntList as a String. You are not expected to read * or understand this method. */ public String toString()", "class_method_signature": "IntList.toString()", "testcase": false, "constructor": false}], "file": "lab3/IntList/IntList.java"}, "focal_method": {"identifier": "catenate", "parameters": "(IntList A, IntList B)", "modifiers": "public static", "return": "IntList", "body": "public static IntList catenate(IntList A, IntList B) {\n        IntList res = new IntList(A.first, null);\n        IntList ptr = res;\n        A = A.rest;\n        while (A != null) {\n            ptr.rest = new IntList(A.first, null);\n            ptr = ptr.rest;\n            A = A.rest;\n        }\n        ptr.rest = B;\n        return res;\n    }", "signature": "IntList catenate(IntList A, IntList B)", "full_signature": "public static IntList catenate(IntList A, IntList B)", "class_method_signature": "IntList.catenate(IntList A, IntList B)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128527927, "url": "https://github.com/shenzheyu/CS61B", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 21, "size": 2766, "license": "licensed"}}