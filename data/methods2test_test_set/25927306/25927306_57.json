{"test_class": {"identifier": "PropertyValueParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/props/PropertyValueParserTest.java"}, "test_case": {"identifier": "initializeType", "parameters": "(final String property, final Class<?> type, final Object initialized)", "modifiers": "@Test(groups = \"props\", dataProvider = \"properties\") public", "return": "void", "body": "@Test(groups = \"props\", dataProvider = \"properties\")\n  public void initializeType(final String property, final Class<?> type, final Object initialized)\n    throws Exception\n  {\n    final PropertyValueParser parser;\n    if (type != null) {\n      parser = new PropertyValueParser(property, type.getName());\n      Assert.assertTrue(PropertyValueParser.isParamsOnlyConfig(property));\n    } else {\n      parser = new PropertyValueParser(property);\n      Assert.assertTrue(PropertyValueParser.isConfig(property));\n    }\n\n    final Object o = parser.initializeType();\n    Assert.assertEquals(initialized.toString().split(\"::\")[1], o.toString().split(\"::\")[1]);\n  }", "signature": "void initializeType(final String property, final Class<?> type, final Object initialized)", "full_signature": "@Test(groups = \"props\", dataProvider = \"properties\") public void initializeType(final String property, final Class<?> type, final Object initialized)", "class_method_signature": "PropertyValueParserTest.initializeType(final String property, final Class<?> type, final Object initialized)", "testcase": true, "constructor": false, "invocations": ["getName", "assertTrue", "isParamsOnlyConfig", "assertTrue", "isConfig", "initializeType", "assertEquals", "split", "toString", "split", "toString"]}, "focal_class": {"identifier": "PropertyValueParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Pattern CONFIG_PATTERN = Pattern.compile(\"([^\\\\{]+)\\\\s*\\\\{(.*)\\\\}\\\\s*\");", "modifier": "protected static final", "type": "Pattern", "declarator": "CONFIG_PATTERN = Pattern.compile(\"([^\\\\{]+)\\\\s*\\\\{(.*)\\\\}\\\\s*\")", "var_name": "CONFIG_PATTERN"}, {"original_string": "protected static final Pattern PARAMS_ONLY_CONFIG_PATTERN = Pattern.compile(\"\\\\s*\\\\{\\\\s*(.*)\\\\s*\\\\}\\\\s*\");", "modifier": "protected static final", "type": "Pattern", "declarator": "PARAMS_ONLY_CONFIG_PATTERN = Pattern.compile(\"\\\\s*\\\\{\\\\s*(.*)\\\\s*\\\\}\\\\s*\")", "var_name": "PARAMS_ONLY_CONFIG_PATTERN"}, {"original_string": "protected static final Pattern PROPERTY_PATTERN = Pattern.compile(\"([^\\\\}\\\\{])+\");", "modifier": "protected static final", "type": "Pattern", "declarator": "PROPERTY_PATTERN = Pattern.compile(\"([^\\\\}\\\\{])+\")", "var_name": "PROPERTY_PATTERN"}, {"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private String className;", "modifier": "private", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private final Map<String, String> properties = new HashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "properties = new HashMap<>()", "var_name": "properties"}], "methods": [{"identifier": "PropertyValueParser", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PropertyValueParser()", "full_signature": "protected  PropertyValueParser()", "class_method_signature": "PropertyValueParser.PropertyValueParser()", "testcase": false, "constructor": true}, {"identifier": "PropertyValueParser", "parameters": "(final String config)", "modifiers": "public", "return": "", "signature": " PropertyValueParser(final String config)", "full_signature": "public  PropertyValueParser(final String config)", "class_method_signature": "PropertyValueParser.PropertyValueParser(final String config)", "testcase": false, "constructor": true}, {"identifier": "PropertyValueParser", "parameters": "(final String config, final String clazz)", "modifiers": "public", "return": "", "signature": " PropertyValueParser(final String config, final String clazz)", "full_signature": "public  PropertyValueParser(final String config, final String clazz)", "class_method_signature": "PropertyValueParser.PropertyValueParser(final String config, final String clazz)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(final String clazz, final String props)", "modifiers": "protected", "return": "void", "signature": "void initialize(final String clazz, final String props)", "full_signature": "protected void initialize(final String clazz, final String props)", "class_method_signature": "PropertyValueParser.initialize(final String clazz, final String props)", "testcase": false, "constructor": false}, {"identifier": "initializeProperties", "parameters": "(final Matcher matcher)", "modifiers": "protected", "return": "void", "signature": "void initializeProperties(final Matcher matcher)", "full_signature": "protected void initializeProperties(final Matcher matcher)", "class_method_signature": "PropertyValueParser.initializeProperties(final Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "PropertyValueParser.getClassName()", "testcase": false, "constructor": false}, {"identifier": "setClassName", "parameters": "(final String name)", "modifiers": "protected", "return": "void", "signature": "void setClassName(final String name)", "full_signature": "protected void setClassName(final String name)", "class_method_signature": "PropertyValueParser.setClassName(final String name)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getProperties()", "full_signature": "public Map<String, String> getProperties()", "class_method_signature": "PropertyValueParser.getProperties()", "testcase": false, "constructor": false}, {"identifier": "isConfig", "parameters": "(final String config)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConfig(final String config)", "full_signature": "public static boolean isConfig(final String config)", "class_method_signature": "PropertyValueParser.isConfig(final String config)", "testcase": false, "constructor": false}, {"identifier": "isParamsOnlyConfig", "parameters": "(final String config)", "modifiers": "public static", "return": "boolean", "signature": "boolean isParamsOnlyConfig(final String config)", "full_signature": "public static boolean isParamsOnlyConfig(final String config)", "class_method_signature": "PropertyValueParser.isParamsOnlyConfig(final String config)", "testcase": false, "constructor": false}, {"identifier": "initializeType", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object initializeType()", "full_signature": "public Object initializeType()", "class_method_signature": "PropertyValueParser.initializeType()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(final Class<?> c, final Object o)", "modifiers": "protected", "return": "void", "signature": "void setProperties(final Class<?> c, final Object o)", "full_signature": "protected void setProperties(final Class<?> c, final Object o)", "class_method_signature": "PropertyValueParser.setProperties(final Class<?> c, final Object o)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/props/PropertyValueParser.java"}, "focal_method": {"identifier": "initializeType", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object initializeType()\n  {\n    final Class<?> c = SimplePropertyInvoker.createClass(getClassName());\n    final Object o = SimplePropertyInvoker.instantiateType(c, getClassName());\n    setProperties(c, o);\n    return o;\n  }", "signature": "Object initializeType()", "full_signature": "public Object initializeType()", "class_method_signature": "PropertyValueParser.initializeType()", "testcase": false, "constructor": false, "invocations": ["createClass", "getClassName", "instantiateType", "getClassName", "setProperties"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}