{"test_class": {"identifier": "MoSSOutputReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [], "file": "storage/smiles/src/test/java/org/openscience/cdk/io/MoSSOutputReaderTest.java"}, "test_case": {"identifier": "testExampleFile_SupportColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExampleFile_SupportColumns() throws Exception {\n        String filename = \"data/moss/TKO.mossoutput\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        MoSSOutputReader reader = new MoSSOutputReader(ins);\n        IAtomContainerSet moleculeSet = new AtomContainerSet();\n        moleculeSet = reader.read(moleculeSet);\n        Assert.assertEquals(5.06, Double\n                .valueOf(moleculeSet.getAtomContainer(0).getProperty(\"focusSupport\").toString()).doubleValue(), 0.01);\n        Assert.assertEquals(1.74,\n                Double.valueOf(moleculeSet.getAtomContainer(0).getProperty(\"complementSupport\").toString())\n                        .doubleValue(), 0.01);\n    }", "signature": "void testExampleFile_SupportColumns()", "full_signature": "@Test public void testExampleFile_SupportColumns()", "class_method_signature": "MoSSOutputReaderTest.testExampleFile_SupportColumns()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "assertEquals", "doubleValue", "valueOf", "toString", "getProperty", "getAtomContainer", "assertEquals", "doubleValue", "valueOf", "toString", "getProperty", "getAtomContainer"]}, "focal_class": {"identifier": "MoSSOutputReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "private BufferedReader      input;", "modifier": "private", "type": "BufferedReader", "declarator": "input", "var_name": "input"}, {"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MoSSOutputReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MoSSOutputReader.class)", "var_name": "logger"}], "methods": [{"identifier": "MoSSOutputReader", "parameters": "(Reader input)", "modifiers": "public", "return": "", "signature": " MoSSOutputReader(Reader input)", "full_signature": "public  MoSSOutputReader(Reader input)", "class_method_signature": "MoSSOutputReader.MoSSOutputReader(Reader input)", "testcase": false, "constructor": true}, {"identifier": "MoSSOutputReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " MoSSOutputReader(InputStream input)", "full_signature": "public  MoSSOutputReader(InputStream input)", "class_method_signature": "MoSSOutputReader.MoSSOutputReader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "MoSSOutputReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MoSSOutputReader()", "full_signature": "public  MoSSOutputReader()", "class_method_signature": "MoSSOutputReader.MoSSOutputReader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MoSSOutputReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader reader)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader reader)", "full_signature": "@Override public void setReader(Reader reader)", "class_method_signature": "MoSSOutputReader.setReader(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MoSSOutputReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> testClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> testClass)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> testClass)", "class_method_signature": "MoSSOutputReader.accepts(Class<? extends IChemObject> testClass)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MoSSOutputReader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readAtomContainerSet", "parameters": "(IAtomContainerSet molSet)", "modifiers": "private", "return": "IAtomContainerSet", "signature": "IAtomContainerSet readAtomContainerSet(IAtomContainerSet molSet)", "full_signature": "private IAtomContainerSet readAtomContainerSet(IAtomContainerSet molSet)", "class_method_signature": "MoSSOutputReader.readAtomContainerSet(IAtomContainerSet molSet)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MoSSOutputReader.close()", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/io/MoSSOutputReader.java"}, "focal_method": {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends IChemObject> T read(T object) throws CDKException {\n        if (object instanceof IAtomContainerSet) {\n            IAtomContainerSet cf = (IAtomContainerSet) object;\n            try {\n                cf = readAtomContainerSet(cf);\n            } catch (IOException e) {\n                logger.error(\"Input/Output error while reading from input.\");\n            }\n            return (T) cf;\n        } else if (object instanceof IChemFile) {\n            IChemFile chemFile = (IChemFile) object;\n            IChemSequence chemSeq = object.getBuilder().newInstance(IChemSequence.class);\n            IChemModel chemModel = object.getBuilder().newInstance(IChemModel.class);\n            IAtomContainerSet molSet = object.getBuilder().newInstance(IAtomContainerSet.class);\n            try {\n                molSet = readAtomContainerSet(molSet);\n            } catch (IOException e) {\n                logger.error(\"Input/Output error while reading from input.\");\n            }\n            chemModel.setMoleculeSet(molSet);\n            chemSeq.addChemModel(chemModel);\n            chemFile.addChemSequence(chemSeq);\n            return (T) chemFile;\n        } else {\n            throw new CDKException(\"Only supported is reading of IAtomContainerSet.\");\n        }\n    }", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MoSSOutputReader.read(T object)", "testcase": false, "constructor": false, "invocations": ["readAtomContainerSet", "error", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "readAtomContainerSet", "error", "setMoleculeSet", "addChemModel", "addChemSequence"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}