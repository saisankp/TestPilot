{"test_class": {"identifier": "DateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "motu-web/src/test/java/fr/cls/atoll/motu/web/common/utils/DateUtilsTest.java"}, "test_case": {"identifier": "testGetDurationISO8601", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDurationISO8601() {\n        // @formatter:off\n        // Time testing\n        assertTrue(DateUtils.getDurationISO8601(1).equalsIgnoreCase(\"PT.001\"));\n        assertTrue(DateUtils.getDurationISO8601(1000).equalsIgnoreCase(\"PT1S\"));\n        assertTrue(DateUtils.getDurationISO8601(60000).equalsIgnoreCase(\"PT1M\"));\n        assertTrue(DateUtils.getDurationISO8601(3600000).equalsIgnoreCase(\"PT1H\"));\n\n        assertTrue(DateUtils.getDurationISO8601(2 * DateUtils.ONE_SECOND_IN_MILLI + 44).equalsIgnoreCase(\"PT2S.044\"));\n        assertTrue(DateUtils.getDurationISO8601(2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44)\n                .equalsIgnoreCase(\"PT2M3S.044\"));\n        assertTrue(DateUtils\n                .getDurationISO8601(2 * DateUtils.ONE_HOUR_IN_MILLI + (2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"PT2H2M3S.044\"));\n\n        // DateTime testing\n        assertTrue(DateUtils\n                .getDurationISO8601(6 * DateUtils.ONE_DAY_IN_MILLI\n                        + (2 * DateUtils.ONE_HOUR_IN_MILLI + 2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"P6DT2H2M3S.044\"));\n        assertTrue(DateUtils\n                .getDurationISO8601(DateUtils.ONE_MONTH_IN_MILLI + 6 * DateUtils.ONE_DAY_IN_MILLI\n                        + (2 * DateUtils.ONE_HOUR_IN_MILLI + 2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"P1M6DT2H2M3S.044\"));\n        assertTrue(DateUtils\n                .getDurationISO8601(DateUtils.ONE_YEAR_IN_MILLI\n                        + (2 * DateUtils.ONE_HOUR_IN_MILLI + 2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"P1YT2H2M3S.044\"));\n        assertTrue(DateUtils\n                .getDurationISO8601(DateUtils.ONE_YEAR_IN_MILLI + 3 * DateUtils.ONE_MONTH_IN_MILLI\n                        + (2 * DateUtils.ONE_HOUR_IN_MILLI + 2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"P1Y3MT2H2M3S.044\"));\n        assertTrue(DateUtils\n                .getDurationISO8601(DateUtils.ONE_YEAR_IN_MILLI + 3 * DateUtils.ONE_MONTH_IN_MILLI + 5 * DateUtils.ONE_DAY_IN_MILLI\n                        + (2 * DateUtils.ONE_HOUR_IN_MILLI + 2 * DateUtils.ONE_MINUTE_IN_MILLI + 3 * DateUtils.ONE_SECOND_IN_MILLI + 44))\n                .equalsIgnoreCase(\"P1Y3M5DT2H2M3S.044\"));\n        // @formatter:on\n    }", "signature": "void testGetDurationISO8601()", "full_signature": "@Test public void testGetDurationISO8601()", "class_method_signature": "DateUtilsTest.testGetDurationISO8601()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601", "assertTrue", "equalsIgnoreCase", "getDurationISO8601"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger()", "var_name": "LOG"}, {"original_string": "public static final Map<String, FastDateFormat> DATETIME_FORMATTERS = new HashMap<>();", "modifier": "public static final", "type": "Map<String, FastDateFormat>", "declarator": "DATETIME_FORMATTERS = new HashMap<>()", "var_name": "DATETIME_FORMATTERS"}, {"original_string": "public static final Map<String, DateTimeFormatter> JODA_DATETIME_FORMATTERS = new HashMap<>();", "modifier": "public static final", "type": "Map<String, DateTimeFormatter>", "declarator": "JODA_DATETIME_FORMATTERS = new HashMap<>()", "var_name": "JODA_DATETIME_FORMATTERS"}, {"original_string": "public static final String PERIOD_PATTERN_ISO_STANDARD = \"PyYmMwWdDThHmMsS\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_PATTERN_ISO_STANDARD = \"PyYmMwWdDThHmMsS\"", "var_name": "PERIOD_PATTERN_ISO_STANDARD"}, {"original_string": "public static final String PERIOD_PATTERN_ISO_ALTERNATE = \"PyyyymmddThhmmss\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_PATTERN_ISO_ALTERNATE = \"PyyyymmddThhmmss\"", "var_name": "PERIOD_PATTERN_ISO_ALTERNATE"}, {"original_string": "public static final String PERIOD_PATTERN_ISO_ALTERNATE_WITH_WEEKS = \"PyyyyWwwddThhmmss\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_PATTERN_ISO_ALTERNATE_WITH_WEEKS = \"PyyyyWwwddThhmmss\"", "var_name": "PERIOD_PATTERN_ISO_ALTERNATE_WITH_WEEKS"}, {"original_string": "public static final String PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED = \"Pyyyy-mm-ddThh:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED = \"Pyyyy-mm-ddThh:mm:ss\"", "var_name": "PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED"}, {"original_string": "public static final String PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED_WITH_WEEKS = \"Pyyyy-Www-ddThh:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED_WITH_WEEKS = \"Pyyyy-Www-ddThh:mm:ss\"", "var_name": "PERIOD_PATTERN_ISO_ALTERNATE_EXTENDED_WITH_WEEKS"}, {"original_string": "public static final Map<String, PeriodFormatter> PERIOD_FORMATTERS = new HashMap<>();", "modifier": "public static final", "type": "Map<String, PeriodFormatter>", "declarator": "PERIOD_FORMATTERS = new HashMap<>()", "var_name": "PERIOD_FORMATTERS"}, {"original_string": "public static final long ONE_SECOND_IN_MILLI = 1000L;", "modifier": "public static final", "type": "long", "declarator": "ONE_SECOND_IN_MILLI = 1000L", "var_name": "ONE_SECOND_IN_MILLI"}, {"original_string": "public static final long ONE_MINUTE_IN_MILLI = 60 * ONE_SECOND_IN_MILLI;", "modifier": "public static final", "type": "long", "declarator": "ONE_MINUTE_IN_MILLI = 60 * ONE_SECOND_IN_MILLI", "var_name": "ONE_MINUTE_IN_MILLI"}, {"original_string": "public static final long ONE_HOUR_IN_MILLI = 60 * ONE_MINUTE_IN_MILLI;", "modifier": "public static final", "type": "long", "declarator": "ONE_HOUR_IN_MILLI = 60 * ONE_MINUTE_IN_MILLI", "var_name": "ONE_HOUR_IN_MILLI"}, {"original_string": "public static final long ONE_DAY_IN_MILLI = 24 * ONE_HOUR_IN_MILLI;", "modifier": "public static final", "type": "long", "declarator": "ONE_DAY_IN_MILLI = 24 * ONE_HOUR_IN_MILLI", "var_name": "ONE_DAY_IN_MILLI"}, {"original_string": "public static final long ONE_MONTH_IN_MILLI = 30 * ONE_DAY_IN_MILLI;", "modifier": "public static final", "type": "long", "declarator": "ONE_MONTH_IN_MILLI = 30 * ONE_DAY_IN_MILLI", "var_name": "ONE_MONTH_IN_MILLI"}, {"original_string": "public static final long ONE_YEAR_IN_MILLI = 365 * ONE_DAY_IN_MILLI;", "modifier": "public static final", "type": "long", "declarator": "ONE_YEAR_IN_MILLI = 365 * ONE_DAY_IN_MILLI", "var_name": "ONE_YEAR_IN_MILLI"}, {"original_string": "public static final String DATE_PATTERN = \"yyyy-MM-dd\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN = \"yyyy-MM-dd\"", "var_name": "DATE_PATTERN"}, {"original_string": "public static final String DATETIME_PATTERN = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_PATTERN = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "DATETIME_PATTERN"}, {"original_string": "public static final String DATETIME_MILLIS_EU_PATTERN = \"yyyy-MM-dd HH:mm:ss,SSS\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_MILLIS_EU_PATTERN = \"yyyy-MM-dd HH:mm:ss,SSS\"", "var_name": "DATETIME_MILLIS_EU_PATTERN"}, {"original_string": "public static final String DATETIME_MILLIS_PATTERN = \"yyyy-MM-dd' 'HH:mm:ss.SSSZZ\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_MILLIS_PATTERN = \"yyyy-MM-dd' 'HH:mm:ss.SSSZZ\"", "var_name": "DATETIME_MILLIS_PATTERN"}, {"original_string": "public static final String DATETIME_T_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_T_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "DATETIME_T_PATTERN"}, {"original_string": "public static final String DATETIME_T_MILLIS_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_T_MILLIS_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\"", "var_name": "DATETIME_T_MILLIS_PATTERN"}, {"original_string": "public static final String DATETIME_T_MILLIS_EU_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss,SSS\";", "modifier": "public static final", "type": "String", "declarator": "DATETIME_T_MILLIS_EU_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss,SSS\"", "var_name": "DATETIME_T_MILLIS_EU_PATTERN"}, {"original_string": "public static final TimeZone GMT_TIMEZONE = TimeZone.getTimeZone(\"GMT\");", "modifier": "public static final", "type": "TimeZone", "declarator": "GMT_TIMEZONE = TimeZone.getTimeZone(\"GMT\")", "var_name": "GMT_TIMEZONE"}, {"original_string": "public static final TimeZone UTC_TIMEZONE = TimeZone.getTimeZone(ZoneOffset.UTC);", "modifier": "public static final", "type": "TimeZone", "declarator": "UTC_TIMEZONE = TimeZone.getTimeZone(ZoneOffset.UTC)", "var_name": "UTC_TIMEZONE"}, {"original_string": "public static final FastDateFormat DATETIME_TO_STRING_DEFAULT = FastDateFormat.getInstance(DATETIME_PATTERN, GMT_TIMEZONE);", "modifier": "public static final", "type": "FastDateFormat", "declarator": "DATETIME_TO_STRING_DEFAULT = FastDateFormat.getInstance(DATETIME_PATTERN, GMT_TIMEZONE)", "var_name": "DATETIME_TO_STRING_DEFAULT"}, {"original_string": "public static final FastDateFormat DATE_TO_STRING_DEFAULT = FastDateFormat.getInstance(DATE_PATTERN, GMT_TIMEZONE);", "modifier": "public static final", "type": "FastDateFormat", "declarator": "DATE_TO_STRING_DEFAULT = FastDateFormat.getInstance(DATE_PATTERN, GMT_TIMEZONE)", "var_name": "DATE_TO_STRING_DEFAULT"}, {"original_string": "public static final String[] DATE_FORMATS = new String[] { DATETIME_PATTERN, DATETIME_T_PATTERN, DATE_PATTERN, DATETIME_T_MILLIS_EU_PATTERN };", "modifier": "public static final", "type": "String[]", "declarator": "DATE_FORMATS = new String[] { DATETIME_PATTERN, DATETIME_T_PATTERN, DATE_PATTERN, DATETIME_T_MILLIS_EU_PATTERN }", "var_name": "DATE_FORMATS"}], "methods": [{"identifier": "DateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtils()", "full_signature": "private  DateUtils()", "class_method_signature": "DateUtils.DateUtils()", "testcase": false, "constructor": true}, {"identifier": "dateToXMLGregorianCalendar", "parameters": "(Date date)", "modifiers": "public static", "return": "XMLGregorianCalendar", "signature": "XMLGregorianCalendar dateToXMLGregorianCalendar(Date date)", "full_signature": "public static XMLGregorianCalendar dateToXMLGregorianCalendar(Date date)", "class_method_signature": "DateUtils.dateToXMLGregorianCalendar(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDurationMinSecMsec", "parameters": "(long timeInMSec)", "modifiers": "public static", "return": "String", "signature": "String getDurationMinSecMsec(long timeInMSec)", "full_signature": "public static String getDurationMinSecMsec(long timeInMSec)", "class_method_signature": "DateUtils.getDurationMinSecMsec(long timeInMSec)", "testcase": false, "constructor": false}, {"identifier": "getDurationISO8601", "parameters": "(long timeInMSec)", "modifiers": "public static", "return": "String", "signature": "String getDurationISO8601(long timeInMSec)", "full_signature": "public static String getDurationISO8601(long timeInMSec)", "class_method_signature": "DateUtils.getDurationISO8601(long timeInMSec)", "testcase": false, "constructor": false}, {"identifier": "getDateAsGMTNoZeroTimeString", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String getDateAsGMTNoZeroTimeString(Date date)", "full_signature": "public static String getDateAsGMTNoZeroTimeString(Date date)", "class_method_signature": "DateUtils.getDateAsGMTNoZeroTimeString(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDateAsGMTString", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String getDateAsGMTString(Date date)", "full_signature": "public static String getDateAsGMTString(Date date)", "class_method_signature": "DateUtils.getDateAsGMTString(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDateAsIsoString", "parameters": "(double value, String unitsString)", "modifiers": "public static", "return": "String", "signature": "String getDateAsIsoString(double value, String unitsString)", "full_signature": "public static String getDateAsIsoString(double value, String unitsString)", "class_method_signature": "DateUtils.getDateAsIsoString(double value, String unitsString)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(Date date, String unitsString)", "modifiers": "public static", "return": "double", "signature": "double getDate(Date date, String unitsString)", "full_signature": "public static double getDate(Date date, String unitsString)", "class_method_signature": "DateUtils.getDate(Date date, String unitsString)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(Date date, DateUnit dateUnit)", "modifiers": "public static", "return": "double", "signature": "double getDate(Date date, DateUnit dateUnit)", "full_signature": "public static double getDate(Date date, DateUnit dateUnit)", "class_method_signature": "DateUtils.getDate(Date date, DateUnit dateUnit)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(double value, String unitsString)", "modifiers": "public static", "return": "Date", "signature": "Date getDate(double value, String unitsString)", "full_signature": "public static Date getDate(double value, String unitsString)", "class_method_signature": "DateUtils.getDate(double value, String unitsString)", "testcase": false, "constructor": false}, {"identifier": "getDateUnit", "parameters": "(String unitsString)", "modifiers": "public static", "return": "DateUnit", "signature": "DateUnit getDateUnit(String unitsString)", "full_signature": "public static DateUnit getDateUnit(String unitsString)", "class_method_signature": "DateUtils.getDateUnit(String unitsString)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(double value, DateUnit dateUnit)", "modifiers": "public static", "return": "Date", "signature": "Date getDate(double value, DateUnit dateUnit)", "full_signature": "public static Date getDate(double value, DateUnit dateUnit)", "class_method_signature": "DateUtils.getDate(double value, DateUnit dateUnit)", "testcase": false, "constructor": false}, {"identifier": "getDateAsGMTString", "parameters": "(double value, String unitsString)", "modifiers": "public static", "return": "String", "signature": "String getDateAsGMTString(double value, String unitsString)", "full_signature": "public static String getDateAsGMTString(double value, String unitsString)", "class_method_signature": "DateUtils.getDateAsGMTString(double value, String unitsString)", "testcase": false, "constructor": false}, {"identifier": "getDateAsGMTString", "parameters": "(double value, DateUnit dateUnit)", "modifiers": "public static", "return": "String", "signature": "String getDateAsGMTString(double value, DateUnit dateUnit)", "full_signature": "public static String getDateAsGMTString(double value, DateUnit dateUnit)", "class_method_signature": "DateUtils.getDateAsGMTString(double value, DateUnit dateUnit)", "testcase": false, "constructor": false}, {"identifier": "getDateAsGMTNoZeroTimeString", "parameters": "(double value, String unitsString)", "modifiers": "public static", "return": "String", "signature": "String getDateAsGMTNoZeroTimeString(double value, String unitsString)", "full_signature": "public static String getDateAsGMTNoZeroTimeString(double value, String unitsString)", "class_method_signature": "DateUtils.getDateAsGMTNoZeroTimeString(double value, String unitsString)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateStr, String dateFormat)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String dateStr, String dateFormat)", "full_signature": "public static Date parseDate(String dateStr, String dateFormat)", "class_method_signature": "DateUtils.parseDate(String dateStr, String dateFormat)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String source, int setTimeTo0ForBeginOfDays1ForEndOfDayNegativeForNow)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String source, int setTimeTo0ForBeginOfDays1ForEndOfDayNegativeForNow)", "full_signature": "public static Date parseDate(String source, int setTimeTo0ForBeginOfDays1ForEndOfDayNegativeForNow)", "class_method_signature": "DateUtils.parseDate(String source, int setTimeTo0ForBeginOfDays1ForEndOfDayNegativeForNow)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(ReadableInterval interval, long millisInstant)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(ReadableInterval interval, long millisInstant)", "full_signature": "public static boolean contains(ReadableInterval interval, long millisInstant)", "class_method_signature": "DateUtils.contains(ReadableInterval interval, long millisInstant)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(ReadableInterval interval, ReadableInterval intervalCompareTo)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(ReadableInterval interval, ReadableInterval intervalCompareTo)", "full_signature": "public static boolean contains(ReadableInterval interval, ReadableInterval intervalCompareTo)", "class_method_signature": "DateUtils.contains(ReadableInterval interval, ReadableInterval intervalCompareTo)", "testcase": false, "constructor": false}, {"identifier": "containsNow", "parameters": "(ReadableInterval interval)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNow(ReadableInterval interval)", "full_signature": "public static boolean containsNow(ReadableInterval interval)", "class_method_signature": "DateUtils.containsNow(ReadableInterval interval)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(ReadableInterval interval1, ReadableInterval interval2)", "modifiers": "public static", "return": "boolean", "signature": "boolean intersects(ReadableInterval interval1, ReadableInterval interval2)", "full_signature": "public static boolean intersects(ReadableInterval interval1, ReadableInterval interval2)", "class_method_signature": "DateUtils.intersects(ReadableInterval interval1, ReadableInterval interval2)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(ReadableInterval interval1, ReadableInterval interval2)", "modifiers": "public static", "return": "Interval", "signature": "Interval intersect(ReadableInterval interval1, ReadableInterval interval2)", "full_signature": "public static Interval intersect(ReadableInterval interval1, ReadableInterval interval2)", "class_method_signature": "DateUtils.intersect(ReadableInterval interval1, ReadableInterval interval2)", "testcase": false, "constructor": false}, {"identifier": "dateTimeToUTC", "parameters": "(DateTime dateTime)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime dateTimeToUTC(DateTime dateTime)", "full_signature": "public static DateTime dateTimeToUTC(DateTime dateTime)", "class_method_signature": "DateUtils.dateTimeToUTC(DateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "dateTimeToUTC", "parameters": "(Date date)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime dateTimeToUTC(Date date)", "full_signature": "public static DateTime dateTimeToUTC(Date date)", "class_method_signature": "DateUtils.dateTimeToUTC(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeAsUTCString", "parameters": "(DateTime dateTime)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeAsUTCString(DateTime dateTime)", "full_signature": "public static String getDateTimeAsUTCString(DateTime dateTime)", "class_method_signature": "DateUtils.getDateTimeAsUTCString(DateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeAsUTCString", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeAsUTCString(Date date)", "full_signature": "public static String getDateTimeAsUTCString(Date date)", "class_method_signature": "DateUtils.getDateTimeAsUTCString(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeAsUTCString", "parameters": "(DateTime dateTime, String pattern)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeAsUTCString(DateTime dateTime, String pattern)", "full_signature": "public static String getDateTimeAsUTCString(DateTime dateTime, String pattern)", "class_method_signature": "DateUtils.getDateTimeAsUTCString(DateTime dateTime, String pattern)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeAsUTCString", "parameters": "(Date date, String pattern)", "modifiers": "public static", "return": "String", "signature": "String getDateTimeAsUTCString(Date date, String pattern)", "full_signature": "public static String getDateTimeAsUTCString(Date date, String pattern)", "class_method_signature": "DateUtils.getDateTimeAsUTCString(Date date, String pattern)", "testcase": false, "constructor": false}, {"identifier": "dateToString", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "String", "signature": "String dateToString(DateTime dt)", "full_signature": "public static String dateToString(DateTime dt)", "class_method_signature": "DateUtils.dateToString(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "dateTimeToString", "parameters": "(DateTime dt, final String pattern)", "modifiers": "public static", "return": "String", "signature": "String dateTimeToString(DateTime dt, final String pattern)", "full_signature": "public static String dateTimeToString(DateTime dt, final String pattern)", "class_method_signature": "DateUtils.dateTimeToString(DateTime dt, final String pattern)", "testcase": false, "constructor": false}, {"identifier": "dateTimeToString", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "String", "signature": "String dateTimeToString(DateTime dt)", "full_signature": "public static String dateTimeToString(DateTime dt)", "class_method_signature": "DateUtils.dateTimeToString(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "stringToDate", "parameters": "(String s)", "modifiers": "public static", "return": "Date", "signature": "Date stringToDate(String s)", "full_signature": "public static Date stringToDate(String s)", "class_method_signature": "DateUtils.stringToDate(String s)", "testcase": false, "constructor": false}, {"identifier": "stringToPeriod", "parameters": "(String s)", "modifiers": "public static", "return": "Period", "signature": "Period stringToPeriod(String s)", "full_signature": "public static Period stringToPeriod(String s)", "class_method_signature": "DateUtils.stringToPeriod(String s)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String st)", "modifiers": "public static", "return": "String", "signature": "String getDate(String st)", "full_signature": "public static String getDate(String st)", "class_method_signature": "DateUtils.getDate(String st)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String lastupdate)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String lastupdate)", "full_signature": "public static Date parseDate(String lastupdate)", "class_method_signature": "DateUtils.parseDate(String lastupdate)", "testcase": false, "constructor": false}, {"identifier": "parseDateTime", "parameters": "(String lastupdate)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseDateTime(String lastupdate)", "full_signature": "public static DateTime parseDateTime(String lastupdate)", "class_method_signature": "DateUtils.parseDateTime(String lastupdate)", "testcase": false, "constructor": false}], "file": "motu-web/src/main/java/fr/cls/atoll/motu/web/common/utils/DateUtils.java"}, "focal_method": {"identifier": "getDurationISO8601", "parameters": "(long timeInMSec)", "modifiers": "public static", "return": "String", "body": "public static String getDurationISO8601(long timeInMSec) {\n        double totalTime = 0.0;\n        int year = (int) Math.floor((timeInMSec - totalTime) / ONE_YEAR_IN_MILLI);\n        totalTime += year * ONE_YEAR_IN_MILLI;\n\n        int month = (int) Math.floor((timeInMSec - totalTime) / ONE_MONTH_IN_MILLI);\n        totalTime += month * ONE_MONTH_IN_MILLI;\n\n        int day = (int) Math.floor((timeInMSec - totalTime) / ONE_DAY_IN_MILLI);\n        totalTime += day * ONE_DAY_IN_MILLI;\n\n        int hour = (int) Math.floor((timeInMSec - totalTime) / ONE_HOUR_IN_MILLI);\n        totalTime += hour * ONE_HOUR_IN_MILLI;\n\n        int min = (int) Math.floor((timeInMSec - totalTime) / ONE_MINUTE_IN_MILLI);\n        totalTime += min * ONE_MINUTE_IN_MILLI;\n\n        int sec = (int) Math.floor((timeInMSec - totalTime) / ONE_SECOND_IN_MILLI);\n        totalTime += sec * ONE_SECOND_IN_MILLI;\n\n        int milli = (int) Math.floor((timeInMSec - totalTime));\n\n        StringBuilder sb = new StringBuilder();\n        if (milli > 0) {\n            sb.insert(0, \".\" + String.format(\"%03d\", milli));\n        }\n        if (sec > 0) {\n            sb.insert(0, sec + \"S\");\n        }\n        if (min > 0) {\n            sb.insert(0, min + \"M\");\n        }\n        if (hour > 0) {\n            sb.insert(0, hour + \"H\");\n        }\n        if (sb.length() > 0) {\n            sb.insert(0, \"T\");\n        }\n\n        if (day > 0) {\n            sb.insert(0, day + \"D\");\n        }\n\n        if (month > 0) {\n            sb.insert(0, month + \"M\");\n        }\n\n        if (year > 0) {\n            sb.insert(0, year + \"Y\");\n        }\n        sb.insert(0, \"P\");\n        if (sb.length() == 1) {\n            sb.append(\"0D\");\n        }\n        return sb.toString();\n    }", "signature": "String getDurationISO8601(long timeInMSec)", "full_signature": "public static String getDurationISO8601(long timeInMSec)", "class_method_signature": "DateUtils.getDurationISO8601(long timeInMSec)", "testcase": false, "constructor": false, "invocations": ["floor", "floor", "floor", "floor", "floor", "floor", "floor", "insert", "format", "insert", "insert", "insert", "length", "insert", "insert", "insert", "insert", "insert", "length", "append", "toString"]}, "repository": {"repo_id": 54110401, "url": "https://github.com/clstoulouse/motu", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 16, "size": 29467, "license": "licensed"}}