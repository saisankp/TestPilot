{"test_class": {"identifier": "SortedArrayToBSTTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SortedArrayToBST sortedArrayToBST;", "modifier": "private", "type": "SortedArrayToBST", "declarator": "sortedArrayToBST", "var_name": "sortedArrayToBST"}], "file": "algs/src/test/java/com/github/pedrovgs/problem24/SortedArrayToBSTTest.java"}, "test_case": {"identifier": "shouldReturnOneBinarySearchTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnOneBinarySearchTree() {\n    Integer[] array = { 1, 2, 3, 4, 5, 6, 7, 8 };\n\n    BinaryNode<Integer> result = sortedArrayToBST.transform(array);\n\n    BinaryTreeInOrder inOrder = new BinaryTreeInOrder();\n    List<BinaryNode<Integer>> resultList = inOrder.getIterative(result);\n    Integer[] resultArray = new Integer[resultList.size()];\n    for (int i = 0; i < resultList.size(); i++) {\n      resultArray[i] = resultList.get(i).getData();\n    }\n    assertArrayEquals(array, resultArray);\n  }", "signature": "void shouldReturnOneBinarySearchTree()", "full_signature": "@Test public void shouldReturnOneBinarySearchTree()", "class_method_signature": "SortedArrayToBSTTest.shouldReturnOneBinarySearchTree()", "testcase": true, "constructor": false, "invocations": ["transform", "getIterative", "size", "size", "getData", "get", "assertArrayEquals"]}, "focal_class": {"identifier": "SortedArrayToBST", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "transform", "parameters": "(Integer[] sortedArray)", "modifiers": "public", "return": "BinaryNode<Integer>", "signature": "BinaryNode<Integer> transform(Integer[] sortedArray)", "full_signature": "public BinaryNode<Integer> transform(Integer[] sortedArray)", "class_method_signature": "SortedArrayToBST.transform(Integer[] sortedArray)", "testcase": false, "constructor": false}, {"identifier": "transformToBST", "parameters": "(Integer[] sortedArray, int bottom, int top)", "modifiers": "private static", "return": "BinaryNode<Integer>", "signature": "BinaryNode<Integer> transformToBST(Integer[] sortedArray, int bottom, int top)", "full_signature": "private static BinaryNode<Integer> transformToBST(Integer[] sortedArray, int bottom, int top)", "class_method_signature": "SortedArrayToBST.transformToBST(Integer[] sortedArray, int bottom, int top)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem24/SortedArrayToBST.java"}, "focal_method": {"identifier": "transform", "parameters": "(Integer[] sortedArray)", "modifiers": "public", "return": "BinaryNode<Integer>", "body": "public BinaryNode<Integer> transform(Integer[] sortedArray) {\n    if (sortedArray == null || sortedArray.length == 0) {\n      throw new IllegalArgumentException(\"You can't use a null or empty array.\");\n    }\n    return transformToBST(sortedArray, 0, sortedArray.length - 1);\n  }", "signature": "BinaryNode<Integer> transform(Integer[] sortedArray)", "full_signature": "public BinaryNode<Integer> transform(Integer[] sortedArray)", "class_method_signature": "SortedArrayToBST.transform(Integer[] sortedArray)", "testcase": false, "constructor": false, "invocations": ["transformToBST"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}