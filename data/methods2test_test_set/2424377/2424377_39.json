{"test_class": {"identifier": "AttrStringArrayTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/attrs/AttrStringArrayTest.java"}, "test_case": {"identifier": "testListValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testListValue() {\n    class Clazz extends AttrComposite {\n      public AttrStringArray value =\n          attributes.register(\"value\", AttrStringArray.builder().defaultValue(new String[0]));\n    }\n\n    AliasMapper mapper = new AliasMapper();\n    mapper.alias(\"clazz\", Clazz.class, Clazz::new);\n\n    Assertions.assertThat(\n            Attrs.populate(\n                    new Clazz(),\n                    Map.of(\"value\", new String[] {\"foo\", \"bar\", null}),\n                    mapper::fromName)\n                .value\n                .get())\n        .isEqualTo(new String[] {\"foo\", \"bar\", null});\n\n    Assertions.assertThat(\n            Attrs.populate(\n                    new Clazz(),\n                    Map.of(\"value\", Arrays.asList(\"foo\", \"bar\", null)),\n                    mapper::fromName)\n                .value\n                .get())\n        .isEqualTo(new String[] {\"foo\", \"bar\", null});\n\n    Assertions.assertThat(\n            Attrs.populate(\n                    new Clazz(),\n                    Map.of(\"value\", new Object[] {\"foo\", \"bar\", null}),\n                    mapper::fromName)\n                .value\n                .get())\n        .isEqualTo(new String[] {\"foo\", \"bar\", null});\n\n    Assertions.assertThat(\n            Attrs.populate(\n                    new Clazz(),\n                    Map.of(\"value\", new CharSequence[] {\"foo\", \"bar\", null}),\n                    mapper::fromName)\n                .value\n                .get())\n        .isEqualTo(new String[] {\"foo\", \"bar\", null});\n\n    Assertions.assertThatCode(\n            () -> {\n              Attrs.populate(\n                      new Clazz(), Map.of(\"value\", List.of(new Object(), \"bar\")), mapper::fromName)\n                  .value\n                  .get();\n            })\n        .isInstanceOf(IllegalArgumentException.class);\n\n    Assertions.assertThatCode(\n            () -> {\n              Attrs.populate(\n                      new Clazz(),\n                      Map.of(\"value\", new Object[] {\"bar\", new Object(), null}),\n                      mapper::fromName)\n                  .value\n                  .get();\n            })\n        .isInstanceOf(IllegalArgumentException.class);\n  }", "signature": "void testListValue()", "full_signature": "@Test public void testListValue()", "class_method_signature": "AttrStringArrayTest.testListValue()", "testcase": true, "constructor": false, "invocations": ["register", "defaultValue", "builder", "alias", "isEqualTo", "assertThat", "get", "populate", "of", "isEqualTo", "assertThat", "get", "populate", "of", "asList", "isEqualTo", "assertThat", "get", "populate", "of", "isEqualTo", "assertThat", "get", "populate", "of", "isInstanceOf", "assertThatCode", "get", "populate", "of", "of", "isInstanceOf", "assertThatCode", "get", "populate", "of"]}, "focal_class": {"identifier": "AttrStringArray", "superclass": "extends Attr<String[]>", "interfaces": "", "fields": [], "methods": [{"identifier": "AttrStringArray", "parameters": "(\n      String[] value, List<? extends Constraint<? super String[]>> constraint, String label)", "modifiers": "private", "return": "", "signature": " AttrStringArray(\n      String[] value, List<? extends Constraint<? super String[]>> constraint, String label)", "full_signature": "private  AttrStringArray(\n      String[] value, List<? extends Constraint<? super String[]>> constraint, String label)", "class_method_signature": "AttrStringArray.AttrStringArray(\n      String[] value, List<? extends Constraint<? super String[]>> constraint, String label)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(String value, String... values)", "modifiers": "public", "return": "void", "signature": "void set(String value, String... values)", "full_signature": "public void set(String value, String... values)", "class_method_signature": "AttrStringArray.set(String value, String... values)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "AttrStringArray.builder()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/attrs/AttrStringArray.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder builder() {\n    return new Builder();\n  }", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "AttrStringArray.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}