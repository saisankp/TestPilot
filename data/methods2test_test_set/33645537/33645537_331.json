{"test_class": {"identifier": "FindSumsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FindSums findSums;", "modifier": "private", "type": "FindSums", "declarator": "findSums", "var_name": "findSums"}], "file": "algs/src/test/java/com/github/pedrovgs/problem28/FindSumsTest.java"}, "test_case": {"identifier": "shouldWorkWithNegativeIntegersAsInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldWorkWithNegativeIntegersAsInput() {\n    int[] inputArray = { 5, 2, -17, 6, 1, 9 };\n    int inputValue = -8;\n\n    List<Pair<Integer, Integer>> result = findSums.find(inputArray, inputValue);\n\n    assertTrue(result.contains(new Pair<Integer, Integer>(-17, 9)));\n  }", "signature": "void shouldWorkWithNegativeIntegersAsInput()", "full_signature": "@Test public void shouldWorkWithNegativeIntegersAsInput()", "class_method_signature": "FindSumsTest.shouldWorkWithNegativeIntegersAsInput()", "testcase": true, "constructor": false, "invocations": ["find", "assertTrue", "contains"]}, "focal_class": {"identifier": "FindSums", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "find", "parameters": "(int[] numbers, int value)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> find(int[] numbers, int value)", "full_signature": "public List<Pair<Integer, Integer>> find(int[] numbers, int value)", "class_method_signature": "FindSums.find(int[] numbers, int value)", "testcase": false, "constructor": false}, {"identifier": "findLinearComplexityOrder", "parameters": "(int[] numbers, int n)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "full_signature": "public List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "class_method_signature": "FindSums.findLinearComplexityOrder(int[] numbers, int n)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(int[] numbers)", "modifiers": "private", "return": "void", "signature": "void validateInput(int[] numbers)", "full_signature": "private void validateInput(int[] numbers)", "class_method_signature": "FindSums.validateInput(int[] numbers)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem28/FindSums.java"}, "focal_method": {"identifier": "find", "parameters": "(int[] numbers, int value)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "body": "public List<Pair<Integer, Integer>> find(int[] numbers, int value) {\n    validateInput(numbers);\n    List<Pair<Integer, Integer>> sums = new LinkedList<Pair<Integer, Integer>>();\n    for (int i = 0; i < numbers.length; i++) {\n      for (int j = 0; j < numbers.length; j++) {\n        if (numbers[i] + numbers[j] == value) {\n          sums.add(new Pair(numbers[i], numbers[j]));\n        }\n      }\n    }\n    return sums;\n  }", "signature": "List<Pair<Integer, Integer>> find(int[] numbers, int value)", "full_signature": "public List<Pair<Integer, Integer>> find(int[] numbers, int value)", "class_method_signature": "FindSums.find(int[] numbers, int value)", "testcase": false, "constructor": false, "invocations": ["validateInput", "add"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}