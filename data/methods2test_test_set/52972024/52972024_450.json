{"test_class": {"identifier": "OperatorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PostgresQueryWriterResolver resolver;", "modifier": "private", "type": "PostgresQueryWriterResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/OperatorsTest.java"}, "test_case": {"identifier": "should_AddsAllOperators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_AddsAllOperators() throws Exception {\n        PostgresQueryWriterResolver resolverMock = mock(PostgresQueryWriterResolver.class);\n        Operators.addAll(resolverMock);\n\n        verify(resolverMock, times(12)).addQueryWriter(anyString(), anyObject());\n    }", "signature": "void should_AddsAllOperators()", "full_signature": "@Test public void should_AddsAllOperators()", "class_method_signature": "OperatorsTest.should_AddsAllOperators()", "testcase": true, "constructor": false, "invocations": ["mock", "addAll", "addQueryWriter", "verify", "times", "anyString", "anyObject"]}, "focal_class": {"identifier": "Operators", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Operators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Operators()", "full_signature": "private  Operators()", "class_method_signature": "Operators.Operators()", "testcase": false, "constructor": true}, {"identifier": "addAll", "parameters": "(final PostgresQueryWriterResolver resolver)", "modifiers": "public static", "return": "void", "signature": "void addAll(final PostgresQueryWriterResolver resolver)", "full_signature": "public static void addAll(final PostgresQueryWriterResolver resolver)", "class_method_signature": "Operators.addAll(final PostgresQueryWriterResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "formattedCheckWriter", "parameters": "(final String format)", "modifiers": "private static", "return": "QueryWriter", "signature": "QueryWriter formattedCheckWriter(final String format)", "full_signature": "private static QueryWriter formattedCheckWriter(final String format)", "class_method_signature": "Operators.formattedCheckWriter(final String format)", "testcase": false, "constructor": false}, {"identifier": "writeFieldCheckCondition", "parameters": "(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}, {"identifier": "writeFieldExistsCheckCondition", "parameters": "(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}, {"identifier": "writeFieldInArrayCheckCondition", "parameters": "(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/Operators.java"}, "focal_method": {"identifier": "addAll", "parameters": "(final PostgresQueryWriterResolver resolver)", "modifiers": "public static", "return": "void", "body": "public static void addAll(final PostgresQueryWriterResolver resolver) {\n\n        // Basic field comparison operators\n        resolver.addQueryWriter(\"$eq\", formattedCheckWriter(\"((%s)=to_json(?)::jsonb)\"));\n        resolver.addQueryWriter(\"$ne\", formattedCheckWriter(\"((%s)!=to_json(?)::jsonb)\"));\n        resolver.addQueryWriter(\"$lt\", formattedCheckWriter(\"((%s)<to_json(?)::jsonb)\"));\n        resolver.addQueryWriter(\"$gt\", formattedCheckWriter(\"((%s)>to_json(?)::jsonb)\"));\n        resolver.addQueryWriter(\"$lte\", formattedCheckWriter(\"((%s)<=to_json(?)::jsonb)\"));\n        resolver.addQueryWriter(\"$gte\", formattedCheckWriter(\"((%s)>=to_json(?)::jsonb)\"));\n\n        //Check on present\n        resolver.addQueryWriter(\"$isNull\", Operators::writeFieldExistsCheckCondition);\n\n        // ISO 8601 date/time operators\n        /*TODO: Find a way to build an index on date/time field.*/\n        resolver.addQueryWriter(\"$date-from\", formattedCheckWriter(\"(parse_timestamp_immutable(%s)>=(?)::timestamp)\"));\n        resolver.addQueryWriter(\"$date-to\", formattedCheckWriter(\"(parse_timestamp_immutable(%s)<=(?)::timestamp)\"));\n\n        // Value in list check\n        resolver.addQueryWriter(\"$in\", Operators::writeFieldInArrayCheckCondition);\n\n        // Tags operators\n        resolver.addQueryWriter(\"$hasTag\", formattedCheckWriter(\"((%s)??(?))\"));\n\n        // Fulltext search\n        resolver.addQueryWriter(\"$fulltext\", formattedCheckWriter(\n                String.format(\"%s@@(to_tsquery('%s',?))\", PostgresSchema.FULLTEXT_COLUMN, PostgresSchema.FTS_DICTIONARY)));\n    }", "signature": "void addAll(final PostgresQueryWriterResolver resolver)", "full_signature": "public static void addAll(final PostgresQueryWriterResolver resolver)", "class_method_signature": "Operators.addAll(final PostgresQueryWriterResolver resolver)", "testcase": false, "constructor": false, "invocations": ["addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "addQueryWriter", "formattedCheckWriter", "addQueryWriter", "formattedCheckWriter", "format"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}