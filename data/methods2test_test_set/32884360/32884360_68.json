{"test_class": {"identifier": "TapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int THREADS = 20;", "modifier": "private static final", "type": "int", "declarator": "THREADS = 20", "var_name": "THREADS"}, {"original_string": "private static final int CYCLES = 10000;", "modifier": "private static final", "type": "int", "declarator": "CYCLES = 10000", "var_name": "CYCLES"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/util/tap/TapTest.java"}, "test_case": {"identifier": "testEnableInitial", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnableInitial()\n    {\n        Tap.setInitiallyEnabled(\"^c|d$\");\n        InOutTap a = Tap.createTimer(\"a\");\n        PointTap b = Tap.createCount(\"b\");\n        InOutTap c = Tap.createTimer(\"c\");\n        PointTap d = Tap.createCount(\"d\");\n        Tap.setEnabled(\".*\", false);\n        TapReport[] reports = Tap.getReport(\".*\");\n        assertEquals(0, reports.length);\n        Tap.enableInitial();\n        reports = Tap.getReport(\".*\");\n        assertEquals(2, reports.length);\n        int mask = 0;\n        for (TapReport report : reports) {\n            if (report.getName().equals(\"c\")) {\n                mask |= 0x1;\n            } else if (report.getName().equals(\"d\")) {\n                mask |= 0x2;\n            } else {\n                fail();\n            }\n        }\n        assertEquals(0x3, mask);\n    }", "signature": "void testEnableInitial()", "full_signature": "@Test public void testEnableInitial()", "class_method_signature": "TapTest.testEnableInitial()", "testcase": true, "constructor": false, "invocations": ["setInitiallyEnabled", "createTimer", "createCount", "createTimer", "createCount", "setEnabled", "getReport", "assertEquals", "enableInitial", "getReport", "assertEquals", "equals", "getName", "equals", "getName", "fail", "assertEquals"]}, "focal_class": {"identifier": "Tap", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(Tap.class.getName());", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Tap.class.getName())", "var_name": "LOG"}, {"original_string": "static final String NEW_LINE = System.getProperty(\"line.separator\");", "modifier": "static final", "type": "String", "declarator": "NEW_LINE = System.getProperty(\"line.separator\")", "var_name": "NEW_LINE"}, {"original_string": "private static final Comparator<TapReport> TAPS_BY_NAME_COMPARATOR = new Comparator<TapReport>()\n    {\n        @Override\n        public int compare(TapReport x, TapReport y)\n        {\n            return x.getName().compareTo(y.getName());\n        }\n    };", "modifier": "private static final", "type": "Comparator<TapReport>", "declarator": "TAPS_BY_NAME_COMPARATOR = new Comparator<TapReport>()\n    {\n        @Override\n        public int compare(TapReport x, TapReport y)\n        {\n            return x.getName().compareTo(y.getName());\n        }\n    }", "var_name": "TAPS_BY_NAME_COMPARATOR"}, {"original_string": "static final Map<String, Dispatch> DISPATCHES = new TreeMap<>();", "modifier": "static final", "type": "Map<String, Dispatch>", "declarator": "DISPATCHES = new TreeMap<>()", "var_name": "DISPATCHES"}, {"original_string": "static volatile BadNestingHandler badNestingHandler =\n        new BadNestingHandler()\n        {\n            @Override\n            public void handleBadNesting(Tap tap)\n            {\n/* TODO: Re-enable warnings\n                if ((count.getAndIncrement() % 1000) == 0) {\n                    LOG.warn(\"Bad nesting encountered for tap {}, in: {}, out: {}\",\n                             new Object[]{tap.getName(), tap.inCount, tap.outCount});\n                    LOG.warn(\"you are here\", new Exception());\n                }\n*/\n            }\n            \n            private final AtomicLong count = new AtomicLong(0);\n        };", "modifier": "static volatile", "type": "BadNestingHandler", "declarator": "badNestingHandler =\n        new BadNestingHandler()\n        {\n            @Override\n            public void handleBadNesting(Tap tap)\n            {\n/* TODO: Re-enable warnings\n                if ((count.getAndIncrement() % 1000) == 0) {\n                    LOG.warn(\"Bad nesting encountered for tap {}, in: {}, out: {}\",\n                             new Object[]{tap.getName(), tap.inCount, tap.outCount});\n                    LOG.warn(\"you are here\", new Exception());\n                }\n*/\n            }\n            \n            private final AtomicLong count = new AtomicLong(0);\n        }", "var_name": "badNestingHandler"}, {"original_string": "private static boolean registered;", "modifier": "private static", "type": "boolean", "declarator": "registered", "var_name": "registered"}, {"original_string": "private static Pattern initiallyEnabledPattern;", "modifier": "private static", "type": "Pattern", "declarator": "initiallyEnabledPattern", "var_name": "initiallyEnabledPattern"}, {"original_string": "protected final String name;", "modifier": "protected final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected volatile long inCount = 0;", "modifier": "protected volatile", "type": "long", "declarator": "inCount = 0", "var_name": "inCount"}, {"original_string": "protected volatile long outCount = 0;", "modifier": "protected volatile", "type": "long", "declarator": "outCount = 0", "var_name": "outCount"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getName()", "full_signature": "public final String getName()", "class_method_signature": "Tap.getName()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long getDuration()", "full_signature": "public abstract long getDuration()", "class_method_signature": "Tap.getDuration()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void reset()", "full_signature": "public abstract void reset()", "class_method_signature": "Tap.reset()", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disable()", "full_signature": "public void disable()", "class_method_signature": "Tap.disable()", "testcase": false, "constructor": false}, {"identifier": "isSubsidiary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSubsidiary()", "full_signature": "public boolean isSubsidiary()", "class_method_signature": "Tap.isSubsidiary()", "testcase": false, "constructor": false}, {"identifier": "createSubsidiaryTap", "parameters": "(String name, InOutTap outermostRecursiveTapWrapper)", "modifiers": "public", "return": "InOutTap", "signature": "InOutTap createSubsidiaryTap(String name, InOutTap outermostRecursiveTapWrapper)", "full_signature": "public InOutTap createSubsidiaryTap(String name, InOutTap outermostRecursiveTapWrapper)", "class_method_signature": "Tap.createSubsidiaryTap(String name, InOutTap outermostRecursiveTapWrapper)", "testcase": false, "constructor": false}, {"identifier": "createCount", "parameters": "(String name)", "modifiers": "public static", "return": "PointTap", "signature": "PointTap createCount(String name)", "full_signature": "public static PointTap createCount(String name)", "class_method_signature": "Tap.createCount(String name)", "testcase": false, "constructor": false}, {"identifier": "createTimer", "parameters": "(String name)", "modifiers": "public static", "return": "InOutTap", "signature": "InOutTap createTimer(String name)", "full_signature": "public static InOutTap createTimer(String name)", "class_method_signature": "Tap.createTimer(String name)", "testcase": false, "constructor": false}, {"identifier": "createRecursiveTimer", "parameters": "(String name)", "modifiers": "public static", "return": "InOutTap", "signature": "InOutTap createRecursiveTimer(String name)", "full_signature": "public static InOutTap createRecursiveTimer(String name)", "class_method_signature": "Tap.createRecursiveTimer(String name)", "testcase": false, "constructor": false}, {"identifier": "defaultToOn", "parameters": "(boolean defaultIsOn)", "modifiers": "public static", "return": "void", "signature": "void defaultToOn(boolean defaultIsOn)", "full_signature": "public static void defaultToOn(boolean defaultIsOn)", "class_method_signature": "Tap.defaultToOn(boolean defaultIsOn)", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(String regExPattern, boolean enabled)", "modifiers": "public static", "return": "void", "signature": "void setEnabled(String regExPattern, boolean enabled)", "full_signature": "public static void setEnabled(String regExPattern, boolean enabled)", "class_method_signature": "Tap.setEnabled(String regExPattern, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "enableInitial", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void enableInitial()", "full_signature": "public static void enableInitial()", "class_method_signature": "Tap.enableInitial()", "testcase": false, "constructor": false}, {"identifier": "setInitiallyEnabled", "parameters": "(String initiallyEnabledRegex)", "modifiers": "public static", "return": "void", "signature": "void setInitiallyEnabled(String initiallyEnabledRegex)", "full_signature": "public static void setInitiallyEnabled(String initiallyEnabledRegex)", "class_method_signature": "Tap.setInitiallyEnabled(String initiallyEnabledRegex)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(String regExPattern)", "modifiers": "public static", "return": "void", "signature": "void reset(String regExPattern)", "full_signature": "public static void reset(String regExPattern)", "class_method_signature": "Tap.reset(String regExPattern)", "testcase": false, "constructor": false}, {"identifier": "getReport", "parameters": "(String regExPattern)", "modifiers": "public static", "return": "TapReport[]", "signature": "TapReport[] getReport(String regExPattern)", "full_signature": "public static TapReport[] getReport(String regExPattern)", "class_method_signature": "Tap.getReport(String regExPattern)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String report()", "full_signature": "public static String report()", "class_method_signature": "Tap.report()", "testcase": false, "constructor": false}, {"identifier": "registerBadNestingHandler", "parameters": "(BadNestingHandler badNestingHandler)", "modifiers": "public synchronized static", "return": "void", "signature": "void registerBadNestingHandler(BadNestingHandler badNestingHandler)", "full_signature": "public synchronized static void registerBadNestingHandler(BadNestingHandler badNestingHandler)", "class_method_signature": "Tap.registerBadNestingHandler(BadNestingHandler badNestingHandler)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "()", "modifiers": "abstract", "return": "void", "signature": "void in()", "full_signature": "abstract void in()", "class_method_signature": "Tap.in()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "()", "modifiers": "abstract", "return": "void", "signature": "void out()", "full_signature": "abstract void out()", "class_method_signature": "Tap.out()", "testcase": false, "constructor": false}, {"identifier": "appendReport", "parameters": "(String label, StringBuilder buffer)", "modifiers": "abstract", "return": "void", "signature": "void appendReport(String label, StringBuilder buffer)", "full_signature": "abstract void appendReport(String label, StringBuilder buffer)", "class_method_signature": "Tap.appendReport(String label, StringBuilder buffer)", "testcase": false, "constructor": false}, {"identifier": "getReports", "parameters": "()", "modifiers": "abstract", "return": "TapReport[]", "signature": "TapReport[] getReports()", "full_signature": "abstract TapReport[] getReports()", "class_method_signature": "Tap.getReports()", "testcase": false, "constructor": false}, {"identifier": "checkNesting", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean checkNesting()", "full_signature": "protected boolean checkNesting()", "class_method_signature": "Tap.checkNesting()", "testcase": false, "constructor": false}, {"identifier": "Tap", "parameters": "(String name)", "modifiers": "protected", "return": "", "signature": " Tap(String name)", "full_signature": "protected  Tap(String name)", "class_method_signature": "Tap.Tap(String name)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Tap tap)", "modifiers": "private static", "return": "Dispatch", "signature": "Dispatch add(Tap tap)", "full_signature": "private static Dispatch add(Tap tap)", "class_method_signature": "Tap.add(Tap tap)", "testcase": false, "constructor": false}, {"identifier": "defaultOn", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean defaultOn(String name)", "full_signature": "private static boolean defaultOn(String name)", "class_method_signature": "Tap.defaultOn(String name)", "testcase": false, "constructor": false}, {"identifier": "dispatchesCopy", "parameters": "()", "modifiers": "private static", "return": "Collection<Dispatch>", "signature": "Collection<Dispatch> dispatchesCopy()", "full_signature": "private static Collection<Dispatch> dispatchesCopy()", "class_method_signature": "Tap.dispatchesCopy()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/util/tap/Tap.java"}, "focal_method": {"identifier": "enableInitial", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void enableInitial()\n    {\n        if (initiallyEnabledPattern != null) {\n            for (Dispatch dispatch : DISPATCHES.values()) {\n                dispatch.setEnabled(initiallyEnabledPattern.matcher(dispatch.getName()).find());\n            }\n        }\n    }", "signature": "void enableInitial()", "full_signature": "public static void enableInitial()", "class_method_signature": "Tap.enableInitial()", "testcase": false, "constructor": false, "invocations": ["values", "setEnabled", "find", "matcher", "getName"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}