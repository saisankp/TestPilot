{"test_class": {"identifier": "Jackson2RequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String url = \"http://localhost\";", "modifier": "", "type": "String", "declarator": "url = \"http://localhost\"", "var_name": "url"}, {"original_string": "ResponseHoldListener<News> listener = new ResponseHoldListener<News>();", "modifier": "", "type": "ResponseHoldListener<News>", "declarator": "listener = new ResponseHoldListener<News>()", "var_name": "listener"}, {"original_string": "ErrorResponseHoldListener errorListener = new ErrorResponseHoldListener();", "modifier": "", "type": "ErrorResponseHoldListener", "declarator": "errorListener = new ErrorResponseHoldListener()", "var_name": "errorListener"}], "file": "volley-requests/src/test/java/com/navercorp/volleyextensions/request/Jackson2RequestTest.java"}, "test_case": {"identifier": "networkResponseShouldBeParsedWithSpecialChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void networkResponseShouldBeParsedWithSpecialChars() throws JsonProcessingException {\n\t\t// Given\n\t\tString content = \"{\\\"title\\\":\\\"\u00e5 &acirc;\\\"}\";\n\t\tNetworkResponse networkResponse = new NetworkResponse(content.getBytes());\n\t\tObjectMapper objectMapperWithDefaultOption = new ObjectMapper();\n\t\tJackson2Request<News> request = new Jackson2Request<News>(url, News.class, objectMapperWithDefaultOption, listener);\n\t\t// When\n\t\tResponse<News> response = request.parseNetworkResponse(networkResponse);\n\t\t// Then\n\t\tassertNotNull(response.result);\n\t\tassertNull(response.error);\n\t}", "signature": "void networkResponseShouldBeParsedWithSpecialChars()", "full_signature": "@Test public void networkResponseShouldBeParsedWithSpecialChars()", "class_method_signature": "Jackson2RequestTest.networkResponseShouldBeParsedWithSpecialChars()", "testcase": true, "constructor": false, "invocations": ["getBytes", "parseNetworkResponse", "assertNotNull", "assertNull"]}, "focal_class": {"identifier": "Jackson2Request", "superclass": "extends AbstractConverterRequest<T>", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "Jackson2Request", "parameters": "(int method, String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(int method, String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "full_signature": "public  Jackson2Request(int method, String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "class_method_signature": "Jackson2Request.Jackson2Request(int method, String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "testcase": false, "constructor": true}, {"identifier": "Jackson2Request", "parameters": "(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "full_signature": "public  Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "class_method_signature": "Jackson2Request.Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "testcase": false, "constructor": true}, {"identifier": "Jackson2Request", "parameters": "(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener)", "full_signature": "public  Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener)", "class_method_signature": "Jackson2Request.Jackson2Request(String url, Class<T> clazz, ObjectMapper objectMapper, Listener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "assertObjectMapper", "parameters": "(ObjectMapper objectMapper)", "modifiers": "private final", "return": "void", "signature": "void assertObjectMapper(ObjectMapper objectMapper)", "full_signature": "private final void assertObjectMapper(ObjectMapper objectMapper)", "class_method_signature": "Jackson2Request.assertObjectMapper(ObjectMapper objectMapper)", "testcase": false, "constructor": false}, {"identifier": "Jackson2Request", "parameters": "(int method, String url, Class<T> clazz, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(int method, String url, Class<T> clazz, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "full_signature": "public  Jackson2Request(int method, String url, Class<T> clazz, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "class_method_signature": "Jackson2Request.Jackson2Request(int method, String url, Class<T> clazz, Listener<T> listener,\n\t\t\tErrorListener errorListener)", "testcase": false, "constructor": true}, {"identifier": "Jackson2Request", "parameters": "(String url, Class<T> clazz, Listener<T> listener, ErrorListener errorListener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(String url, Class<T> clazz, Listener<T> listener, ErrorListener errorListener)", "full_signature": "public  Jackson2Request(String url, Class<T> clazz, Listener<T> listener, ErrorListener errorListener)", "class_method_signature": "Jackson2Request.Jackson2Request(String url, Class<T> clazz, Listener<T> listener, ErrorListener errorListener)", "testcase": false, "constructor": true}, {"identifier": "Jackson2Request", "parameters": "(String url, Class<T> clazz, Listener<T> listener)", "modifiers": "public", "return": "", "signature": " Jackson2Request(String url, Class<T> clazz, Listener<T> listener)", "full_signature": "public  Jackson2Request(String url, Class<T> clazz, Listener<T> listener)", "class_method_signature": "Jackson2Request.Jackson2Request(String url, Class<T> clazz, Listener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "parseNetworkResponse", "parameters": "(NetworkResponse response)", "modifiers": "@Override protected", "return": "Response<T>", "signature": "Response<T> parseNetworkResponse(NetworkResponse response)", "full_signature": "@Override protected Response<T> parseNetworkResponse(NetworkResponse response)", "class_method_signature": "Jackson2Request.parseNetworkResponse(NetworkResponse response)", "testcase": false, "constructor": false}], "file": "volley-requests/src/main/java/com/navercorp/volleyextensions/request/Jackson2Request.java"}, "focal_method": {"identifier": "parseNetworkResponse", "parameters": "(NetworkResponse response)", "modifiers": "@Override protected", "return": "Response<T>", "body": "@Override\n\tprotected Response<T> parseNetworkResponse(NetworkResponse response) {\n\t\tString charset = HttpHeaderParser.parseCharset(response.headers);\n\t\tReader reader = null;\n\t\ttry {\n\t\t\treader = new InputStreamReader(new ByteArrayInputStream(response.data), charset);\n\t\t\tT result = objectMapper.readValue(reader, getTargetClass());\n\t\t\treturn Response.success(result,\n\t\t\t\t\tHttpHeaderParser.parseCacheHeaders(response));\n\t\t} catch (JsonParseException e) {\n\t\t\treturn Response.error(new ParseError(e));\n\t\t} catch (JsonMappingException e) {\n\t\t\treturn Response.error(new ParseError(e));\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\treturn Response.error(new ParseError(e));\n\t\t} catch (IOException e) {\n\t\t\treturn Response.error(new VolleyError(e));\n\t\t} catch (Exception e) {\n\t\t\treturn Response.error(new VolleyError(e));\n\t\t} finally {\n\t\t\tIoUtils.closeQuietly(reader);\n\t\t}\n\t}", "signature": "Response<T> parseNetworkResponse(NetworkResponse response)", "full_signature": "@Override protected Response<T> parseNetworkResponse(NetworkResponse response)", "class_method_signature": "Jackson2Request.parseNetworkResponse(NetworkResponse response)", "testcase": false, "constructor": false, "invocations": ["parseCharset", "readValue", "getTargetClass", "success", "parseCacheHeaders", "error", "error", "error", "error", "error", "closeQuietly"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}