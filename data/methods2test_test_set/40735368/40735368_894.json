{"test_class": {"identifier": "FilterFunction_setCRSTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();", "modifier": "", "type": "FilterFactory2", "declarator": "ff = CommonFactoryFinder.getFilterFactory2()", "var_name": "ff"}, {"original_string": "Geometry g;", "modifier": "", "type": "Geometry", "declarator": "g", "var_name": "g"}], "file": "modules/library/main/src/test/java/org/geotools/filter/function/FilterFunction_setCRSTest.java"}, "test_case": {"identifier": "setCRSCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setCRSCode() throws Exception {\n        Function f = ff.function(\"setCRS\", ff.literal(g), ff.literal(\"EPSG:4326\"));\n        Geometry sg = (Geometry) f.evaluate(null);\n        assertEquals(CRS.decode(\"EPSG:4326\"), sg.getUserData());\n    }", "signature": "void setCRSCode()", "full_signature": "@Test public void setCRSCode()", "class_method_signature": "FilterFunction_setCRSTest.setCRSCode()", "testcase": true, "constructor": false, "invocations": ["function", "literal", "literal", "evaluate", "assertEquals", "decode", "getUserData"]}, "focal_class": {"identifier": "FilterFunction_setCRS", "superclass": "extends FunctionExpressionImpl", "interfaces": "", "fields": [{"original_string": "public static FunctionName NAME = new FunctionNameImpl(\"setCRS\", Geometry.class,\n            parameter(\"geometry\", Geometry.class), parameter(\"CRS\", String.class));", "modifier": "public static", "type": "FunctionName", "declarator": "NAME = new FunctionNameImpl(\"setCRS\", Geometry.class,\n            parameter(\"geometry\", Geometry.class), parameter(\"CRS\", String.class))", "var_name": "NAME"}], "methods": [{"identifier": "FilterFunction_setCRS", "parameters": "()", "modifiers": "public", "return": "", "signature": " FilterFunction_setCRS()", "full_signature": "public  FilterFunction_setCRS()", "class_method_signature": "FilterFunction_setCRS.FilterFunction_setCRS()", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(Object feature)", "modifiers": "public", "return": "Object", "signature": "Object evaluate(Object feature)", "full_signature": "public Object evaluate(Object feature)", "class_method_signature": "FilterFunction_setCRS.evaluate(Object feature)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/function/FilterFunction_setCRS.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Object feature)", "modifiers": "public", "return": "Object", "body": "public Object evaluate(Object feature) {\n        Geometry geom;\n        CoordinateReferenceSystem crs;\n\n        try { // attempt to get value and perform conversion\n            geom = (Geometry) getExpression(0).evaluate(feature, Geometry.class);\n        } catch (Exception e) // probably a type error\n        {\n            throw new IllegalArgumentException(\n                    \"Expected argument of type Geometry for argument #0\");\n        }\n        \n        try { // try to parse the SRS\n            crs = getExpression(1).evaluate(feature, CoordinateReferenceSystem.class);\n            if(crs == null) {\n                String srs = getExpression(1).evaluate(feature, String.class);\n                try {\n                    crs = CRS.decode(srs);\n                } catch(FactoryException e) {\n                    crs = CRS.parseWKT(srs);\n                }\n            }\n        } catch(Exception e) {\n            throw new IllegalArgumentException(\n                    \"Expected argument of type CoordinateReferenceSystem, WKT or valid EPSG code for argument #1\");\n        }\n\n        if(geom != null) {\n            geom.setUserData(crs);\n        }\n        \n        return geom;\n    }", "signature": "Object evaluate(Object feature)", "full_signature": "public Object evaluate(Object feature)", "class_method_signature": "FilterFunction_setCRS.evaluate(Object feature)", "testcase": false, "constructor": false, "invocations": ["evaluate", "getExpression", "evaluate", "getExpression", "evaluate", "getExpression", "decode", "parseWKT", "setUserData"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}