{"test_class": {"identifier": "DefaultJwtAuthenticationServiceTest", "superclass": "extends AbstractEvaluatorIntegrationTest", "interfaces": "", "fields": [{"original_string": "@Autowired private SecurityService securityService;", "modifier": "@Autowired private", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}, {"original_string": "@Autowired private DefaultJwtAuthenticationService jwtAuthenticationService;", "modifier": "@Autowired private", "type": "DefaultJwtAuthenticationService", "declarator": "jwtAuthenticationService", "var_name": "jwtAuthenticationService"}, {"original_string": "private static final String MODULE = \"djastModule\";", "modifier": "private static final", "type": "String", "declarator": "MODULE = \"djastModule\"", "var_name": "MODULE"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/security/service/impl/DefaultJwtAuthenticationServiceTest.java"}, "test_case": {"identifier": "createJwtAuthenticationAndAuthenticateTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createJwtAuthenticationAndAuthenticateTest() {\n\t\tString username = getHelper().createName();\n\t\tIdmIdentityDto identityDto = getHelper().createIdentity(username, (GuardedString) null);\n\t\tLoginDto loginDto =  new LoginDto(identityDto.getUsername(), identityDto.getPassword());\n\n\t\tLoginDto resultLoginDto = jwtAuthenticationService.createJwtAuthenticationAndAuthenticate(loginDto, identityDto, MODULE);\n\n\t\tAssert.assertTrue(securityService.isAuthenticated());\n\t\tAssert.assertEquals(username, securityService.getCurrentUsername());\n\n\t\tAssert.assertEquals(username, resultLoginDto.getUsername());\n\t\tAssert.assertEquals(MODULE, resultLoginDto.getAuthenticationModule());\n\t\tAssert.assertNotNull(resultLoginDto.getToken());\n\n\t\tIdmJwtAuthenticationDto jwtAuthenticationDto = resultLoginDto.getAuthentication();\n\t\tAssert.assertNotNull(jwtAuthenticationDto);\n\t\tAssert.assertEquals(username, jwtAuthenticationDto.getCurrentUsername());\n\t\tAssert.assertEquals(MODULE, jwtAuthenticationDto.getFromModule());\n\t\tAssert.assertTrue(resultLoginDto.getAuthorities().isEmpty());\n\t}", "signature": "void createJwtAuthenticationAndAuthenticateTest()", "full_signature": "@Test public void createJwtAuthenticationAndAuthenticateTest()", "class_method_signature": "DefaultJwtAuthenticationServiceTest.createJwtAuthenticationAndAuthenticateTest()", "testcase": true, "constructor": false, "invocations": ["createName", "getHelper", "createIdentity", "getHelper", "getUsername", "getPassword", "createJwtAuthenticationAndAuthenticate", "assertTrue", "isAuthenticated", "assertEquals", "getCurrentUsername", "assertEquals", "getUsername", "assertEquals", "getAuthenticationModule", "assertNotNull", "getToken", "getAuthentication", "assertNotNull", "assertEquals", "getCurrentUsername", "assertEquals", "getFromModule", "assertTrue", "isEmpty", "getAuthorities"]}, "focal_class": {"identifier": "DefaultJwtAuthenticationService", "superclass": "", "interfaces": "implements JwtAuthenticationService", "fields": [{"original_string": "@Autowired private OAuthAuthenticationManager oauthAuthenticationManager;", "modifier": "@Autowired private", "type": "OAuthAuthenticationManager", "declarator": "oauthAuthenticationManager", "var_name": "oauthAuthenticationManager"}, {"original_string": "@Autowired private JwtAuthenticationMapper jwtTokenMapper;", "modifier": "@Autowired private", "type": "JwtAuthenticationMapper", "declarator": "jwtTokenMapper", "var_name": "jwtTokenMapper"}], "methods": [{"identifier": "createJwtAuthenticationAndAuthenticate", "parameters": "(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "modifiers": "@Override public", "return": "LoginDto", "signature": "LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "full_signature": "@Override public LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "class_method_signature": "DefaultJwtAuthenticationService.createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "testcase": false, "constructor": false}, {"identifier": "createJwtAuthenticationAndAuthenticate", "parameters": "(LoginDto loginDto, IdmIdentityDto identity, IdmTokenDto preparedToken)", "modifiers": "@Override public", "return": "LoginDto", "signature": "LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, IdmTokenDto preparedToken)", "full_signature": "@Override public LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, IdmTokenDto preparedToken)", "class_method_signature": "DefaultJwtAuthenticationService.createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, IdmTokenDto preparedToken)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(LoginDto loginDto, IdmTokenDto token)", "modifiers": "private", "return": "LoginDto", "signature": "LoginDto login(LoginDto loginDto, IdmTokenDto token)", "full_signature": "private LoginDto login(LoginDto loginDto, IdmTokenDto token)", "class_method_signature": "DefaultJwtAuthenticationService.login(LoginDto loginDto, IdmTokenDto token)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(IdmTokenDto token)", "modifiers": "@Override public", "return": "void", "signature": "void logout(IdmTokenDto token)", "full_signature": "@Override public void logout(IdmTokenDto token)", "class_method_signature": "DefaultJwtAuthenticationService.logout(IdmTokenDto token)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/security/service/impl/DefaultJwtAuthenticationService.java"}, "focal_method": {"identifier": "createJwtAuthenticationAndAuthenticate", "parameters": "(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "modifiers": "@Override public", "return": "LoginDto", "body": "@Override\n\tpublic LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId) {\n\t\tIdmTokenDto preparedToken = new IdmTokenDto();\n\t\tpreparedToken.setModuleId(moduleId);\n\t\treturn createJwtAuthenticationAndAuthenticate(loginDto, identity, preparedToken);\n\t}", "signature": "LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "full_signature": "@Override public LoginDto createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "class_method_signature": "DefaultJwtAuthenticationService.createJwtAuthenticationAndAuthenticate(LoginDto loginDto, IdmIdentityDto identity, String moduleId)", "testcase": false, "constructor": false, "invocations": ["setModuleId", "createJwtAuthenticationAndAuthenticate"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}