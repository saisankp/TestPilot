{"test_class": {"identifier": "ExpressionTest", "superclass": "extends BaseExpressionTest", "interfaces": "", "fields": [], "file": "worldedit-core/src/test/java/com/sk89q/worldedit/internal/expression/ExpressionTest.java"}, "test_case": {"identifier": "testErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testErrors() {\n        // test lexer errors\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"#\"));\n            assertEquals(0, e.getPosition(), \"Error position\");\n        }\n        // test parser errors\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"x\"));\n            assertEquals(0, e.getPosition(), \"Error position\");\n        }\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"x()\"));\n            assertEquals(0, e.getPosition(), \"Error position\");\n        }\n        {\n            // verify that you must return a value\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"return\"));\n            assertEquals(6, e.getPosition(), \"Error position\");\n        }\n        assertThrows(ExpressionException.class,\n            () -> compile(\"(\"));\n        assertThrows(ExpressionException.class,\n            () -> compile(\"x(\"));\n        // test overloader errors\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"atan2(1)\"));\n            assertEquals(0, e.getPosition(), \"Error position\");\n        }\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"atan2(1, 2, 3)\"));\n            assertEquals(0, e.getPosition(), \"Error position\");\n        }\n        {\n            ExpressionException e = assertThrows(ExpressionException.class,\n                () -> compile(\"rotate(1, 2, 3)\"));\n            assertEquals(7, e.getPosition(), \"Error position\");\n        }\n\n    }", "signature": "void testErrors()", "full_signature": "@Test public void testErrors()", "class_method_signature": "ExpressionTest.testErrors()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertThrows", "compile", "assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertEquals", "getPosition", "assertThrows", "compile", "assertEquals", "getPosition"]}, "focal_class": {"identifier": "Expression", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "private final SlotTable slots = new SlotTable();", "modifier": "private final", "type": "SlotTable", "declarator": "slots = new SlotTable()", "var_name": "slots"}, {"original_string": "private final List<String> providedSlots;", "modifier": "private final", "type": "List<String>", "declarator": "providedSlots", "var_name": "providedSlots"}, {"original_string": "private final ExpressionParser.AllStatementsContext root;", "modifier": "private final", "type": "ExpressionParser.AllStatementsContext", "declarator": "root", "var_name": "root"}, {"original_string": "private final Functions functions = Functions.create();", "modifier": "private final", "type": "Functions", "declarator": "functions = Functions.create()", "var_name": "functions"}, {"original_string": "private final CompiledExpression compiledExpression;", "modifier": "private final", "type": "CompiledExpression", "declarator": "compiledExpression", "var_name": "compiledExpression"}, {"original_string": "private final String initialExpression;", "modifier": "private final", "type": "String", "declarator": "initialExpression", "var_name": "initialExpression"}], "methods": [{"identifier": "compile", "parameters": "(String expression, String... variableNames)", "modifiers": "public static", "return": "Expression", "signature": "Expression compile(String expression, String... variableNames)", "full_signature": "public static Expression compile(String expression, String... variableNames)", "class_method_signature": "Expression.compile(String expression, String... variableNames)", "testcase": false, "constructor": false}, {"identifier": "Expression", "parameters": "(String expression, String... variableNames)", "modifiers": "private", "return": "", "signature": " Expression(String expression, String... variableNames)", "full_signature": "private  Expression(String expression, String... variableNames)", "class_method_signature": "Expression.Expression(String expression, String... variableNames)", "testcase": false, "constructor": true}, {"identifier": "Expression", "parameters": "(String expression, Set<String> variableNames)", "modifiers": "private", "return": "", "signature": " Expression(String expression, Set<String> variableNames)", "full_signature": "private  Expression(String expression, Set<String> variableNames)", "class_method_signature": "Expression.Expression(String expression, Set<String> variableNames)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(double... values)", "modifiers": "public", "return": "double", "signature": "double evaluate(double... values)", "full_signature": "public double evaluate(double... values)", "class_method_signature": "Expression.evaluate(double... values)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(double[] values, int timeout)", "modifiers": "public", "return": "double", "signature": "double evaluate(double[] values, int timeout)", "full_signature": "public double evaluate(double[] values, int timeout)", "class_method_signature": "Expression.evaluate(double[] values, int timeout)", "testcase": false, "constructor": false}, {"identifier": "optimize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void optimize()", "full_signature": "public void optimize()", "class_method_signature": "Expression.optimize()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Expression.toString()", "testcase": false, "constructor": false}, {"identifier": "getSlots", "parameters": "()", "modifiers": "public", "return": "SlotTable", "signature": "SlotTable getSlots()", "full_signature": "public SlotTable getSlots()", "class_method_signature": "Expression.getSlots()", "testcase": false, "constructor": false}, {"identifier": "getEnvironment", "parameters": "()", "modifiers": "public", "return": "ExpressionEnvironment", "signature": "ExpressionEnvironment getEnvironment()", "full_signature": "public ExpressionEnvironment getEnvironment()", "class_method_signature": "Expression.getEnvironment()", "testcase": false, "constructor": false}, {"identifier": "setEnvironment", "parameters": "(ExpressionEnvironment environment)", "modifiers": "public", "return": "void", "signature": "void setEnvironment(ExpressionEnvironment environment)", "full_signature": "public void setEnvironment(ExpressionEnvironment environment)", "class_method_signature": "Expression.setEnvironment(ExpressionEnvironment environment)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression clone()", "full_signature": "public Expression clone()", "class_method_signature": "Expression.clone()", "testcase": false, "constructor": false}], "file": "worldedit-core/src/main/java/com/sk89q/worldedit/internal/expression/Expression.java"}, "focal_method": {"identifier": "compile", "parameters": "(String expression, String... variableNames)", "modifiers": "public static", "return": "Expression", "body": "public static Expression compile(String expression, String... variableNames) throws ExpressionException {\n        return new Expression(expression, variableNames);\n    }", "signature": "Expression compile(String expression, String... variableNames)", "full_signature": "public static Expression compile(String expression, String... variableNames)", "class_method_signature": "Expression.compile(String expression, String... variableNames)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 162610309, "url": "https://github.com/IntellectualSites/FastAsyncWorldEdit-1.13", "stars": 52, "created": "12/20/2018 5:22:31 PM +00:00", "updates": "2020-01-26T18:10:28+00:00", "fork": "False", "license": "licensed"}}