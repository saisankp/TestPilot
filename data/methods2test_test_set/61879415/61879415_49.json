{"test_class": {"identifier": "TreeNodeCodeGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IdmTreeNodeService treeNodeService;", "modifier": "@Autowired\n\tprivate", "type": "IdmTreeNodeService", "declarator": "treeNodeService", "var_name": "treeNodeService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/generator/treenode/TreeNodeCodeGeneratorTest.java"}, "test_case": {"identifier": "testNullName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNullName() {\n\t\tIdmTreeTypeDto type = getHelper().createTreeType();\n\t\tIdmTreeNodeDto node = new IdmTreeNodeDto();\n\t\tnode.setTreeType(type.getId());\n\t\tnode.setName(null);\n\t\t\n\t\tIdmGenerateValueDto generator = this.createGenerator(getDtoType(), getGeneratorType(), null, 1, null);\n\t\t\n\t\tIdmTreeNodeDto generated = valueGeneratorManager.generate(node);\n\t\t\n\t\tassertNull(generated.getCode());\n\n\t\tgeneratedAttributeService.delete(generator);\n\t}", "signature": "void testNullName()", "full_signature": "@Test public void testNullName()", "class_method_signature": "TreeNodeCodeGeneratorTest.testNullName()", "testcase": true, "constructor": false, "invocations": ["createTreeType", "getHelper", "setTreeType", "getId", "setName", "createGenerator", "getDtoType", "getGeneratorType", "generate", "assertNull", "getCode", "delete"]}, "focal_class": {"identifier": "TreeNodeCodeGenerator", "superclass": "extends AbstractValueGenerator<IdmTreeNodeDto>", "interfaces": "", "fields": [{"original_string": "public static final String GENERATOR_NAME = \"core-tree-node-code-value-generator\";", "modifier": "public static final", "type": "String", "declarator": "GENERATOR_NAME = \"core-tree-node-code-value-generator\"", "var_name": "GENERATOR_NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "TreeNodeCodeGenerator.getName()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "modifiers": "@Override public", "return": "IdmTreeNodeDto", "signature": "IdmTreeNodeDto generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "full_signature": "@Override public IdmTreeNodeDto generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "class_method_signature": "TreeNodeCodeGenerator.generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/generator/treenode/TreeNodeCodeGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "modifiers": "@Override public", "return": "IdmTreeNodeDto", "body": "@Override\n\tpublic IdmTreeNodeDto generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator) {\n\t\tAssert.notNull(dto, \"DTO is required.\");\n\t\tAssert.notNull(valueGenerator, \"Value generator is required.\");\n\n\t\t// Code is based from name\n\t\tString code = dto.getName();\n\n\t\tif (code == null) {\n\t\t\treturn dto;\n\t\t}\n\t\n\t\t// if exists email and configuration doesn't allow regenerate return dto\n\t\tif (!valueGenerator.isRegenerateValue() && StringUtils.isNotEmpty(dto.getCode())) {\n\t\t\treturn dto;\n\t\t}\n\t\t\n\t\tcode = StringUtils.stripAccents(code);\n\t\tcode = StringUtils.deleteWhitespace(code);\n\t\tcode = code.toLowerCase();\n\n\t\tdto.setCode(code);\n\t\treturn dto;\n\t}", "signature": "IdmTreeNodeDto generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "full_signature": "@Override public IdmTreeNodeDto generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "class_method_signature": "TreeNodeCodeGenerator.generate(IdmTreeNodeDto dto, IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "getName", "isRegenerateValue", "isNotEmpty", "getCode", "stripAccents", "deleteWhitespace", "toLowerCase", "setCode"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}