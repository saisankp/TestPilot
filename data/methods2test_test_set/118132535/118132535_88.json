{"test_class": {"identifier": "MobiusLoopViewModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public InstantTaskExecutorRule rule = new InstantTaskExecutorRule();", "modifier": "@Rule public", "type": "InstantTaskExecutorRule", "declarator": "rule = new InstantTaskExecutorRule()", "var_name": "rule"}, {"original_string": "private List<TestEvent> recordedEvents = new ArrayList<>();", "modifier": "private", "type": "List<TestEvent>", "declarator": "recordedEvents = new ArrayList<>()", "var_name": "recordedEvents"}, {"original_string": "private final Update<TestModel, TestEvent, TestEffect> updateFunction =\n      (model, event) -> {\n        recordedEvents.add(event);\n        return Next.noChange();\n      };", "modifier": "private final", "type": "Update<TestModel, TestEvent, TestEffect>", "declarator": "updateFunction =\n      (model, event) -> {\n        recordedEvents.add(event);\n        return Next.noChange();\n      }", "var_name": "updateFunction"}, {"original_string": "private MobiusLoopViewModel<TestModel, TestEvent, TestEffect, TestViewEffect> underTest;", "modifier": "private", "type": "MobiusLoopViewModel<TestModel, TestEvent, TestEffect, TestViewEffect>", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private TestViewEffectHandler<TestEvent, TestEffect, TestViewEffect> testViewEffectHandler;", "modifier": "private", "type": "TestViewEffectHandler<TestEvent, TestEffect, TestViewEffect>", "declarator": "testViewEffectHandler", "var_name": "testViewEffectHandler"}, {"original_string": "private FakeLifecycleOwner fakeLifecycle;", "modifier": "private", "type": "FakeLifecycleOwner", "declarator": "fakeLifecycle", "var_name": "fakeLifecycle"}, {"original_string": "private RecordingObserver<TestModel> recordingModelObserver = new RecordingObserver<>();", "modifier": "private", "type": "RecordingObserver<TestModel>", "declarator": "recordingModelObserver = new RecordingObserver<>()", "var_name": "recordingModelObserver"}, {"original_string": "private RecordingObserver<TestViewEffect> recordingForegroundViewEffectObserver =\n      new RecordingObserver<>();", "modifier": "private", "type": "RecordingObserver<TestViewEffect>", "declarator": "recordingForegroundViewEffectObserver =\n      new RecordingObserver<>()", "var_name": "recordingForegroundViewEffectObserver"}, {"original_string": "private RecordingObserver<Iterable<TestViewEffect>> recordingBackgroundEffectObserver =\n      new RecordingObserver<>();", "modifier": "private", "type": "RecordingObserver<Iterable<TestViewEffect>>", "declarator": "recordingBackgroundEffectObserver =\n      new RecordingObserver<>()", "var_name": "recordingBackgroundEffectObserver"}, {"original_string": "private TestModel initialModel;", "modifier": "private", "type": "TestModel", "declarator": "initialModel", "var_name": "initialModel"}], "file": "mobius-android/src/test/java/com/spotify/mobius/android/MobiusLoopViewModelTest.java"}, "test_case": {"identifier": "testViewEffectsPostedImmediatelyAreSentCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testViewEffectsPostedImmediatelyAreSentCorrectly() {\n    //noinspection Convert2MethodRef\n    underTest =\n        new MobiusLoopViewModel<>(\n            (Consumer<TestViewEffect> consumer) -> {\n              Connectable<TestEffect, TestEvent> viewEffectSendingEffectHandler =\n                  new ViewEffectSendingEffectHandler(consumer);\n              testViewEffectHandler = new TestViewEffectHandler<>(consumer);\n              return Mobius.loop(updateFunction, viewEffectSendingEffectHandler)\n                  .eventRunner(ImmediateWorkRunner::new)\n                  .effectRunner(ImmediateWorkRunner::new);\n            },\n            initialModel,\n            (TestModel model) -> First.first(model, effects(new TestEffect(\"oops\"))),\n            new ImmediateWorkRunner(),\n            100);\n    underTest\n        .getViewEffects()\n        .setObserver(\n            fakeLifecycle,\n            recordingForegroundViewEffectObserver,\n            recordingBackgroundEffectObserver);\n    fakeLifecycle.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n    assertThat(recordingForegroundViewEffectObserver.valueCount(), equalTo(0));\n    assertThat(recordingBackgroundEffectObserver.valueCount(), equalTo(1));\n  }", "signature": "void testViewEffectsPostedImmediatelyAreSentCorrectly()", "full_signature": "@Test public void testViewEffectsPostedImmediatelyAreSentCorrectly()", "class_method_signature": "MobiusLoopViewModelTest.testViewEffectsPostedImmediatelyAreSentCorrectly()", "testcase": true, "constructor": false, "invocations": ["effectRunner", "eventRunner", "loop", "first", "effects", "setObserver", "getViewEffects", "handleLifecycleEvent", "assertThat", "valueCount", "equalTo", "assertThat", "valueCount", "equalTo"]}, "focal_class": {"identifier": "MobiusLoopViewModel", "superclass": "extends ViewModel", "interfaces": "", "fields": [{"original_string": "private final MutableLiveData<M> modelData = new MutableLiveData<>();", "modifier": "private final", "type": "MutableLiveData<M>", "declarator": "modelData = new MutableLiveData<>()", "var_name": "modelData"}, {"original_string": "private final MutableLiveQueue<V> viewEffectQueue;", "modifier": "private final", "type": "MutableLiveQueue<V>", "declarator": "viewEffectQueue", "var_name": "viewEffectQueue"}, {"original_string": "private final MobiusLoop<M, E, F> loop;", "modifier": "private final", "type": "MobiusLoop<M, E, F>", "declarator": "loop", "var_name": "loop"}, {"original_string": "private final M startModel;", "modifier": "private final", "type": "M", "declarator": "startModel", "var_name": "startModel"}, {"original_string": "private final AtomicBoolean loopActive = new AtomicBoolean(true);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "loopActive = new AtomicBoolean(true)", "var_name": "loopActive"}], "methods": [{"identifier": "MobiusLoopViewModel", "parameters": "(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      @Nonnull WorkRunner mainLoopWorkRunner,\n      int maxEffectQueueSize)", "modifiers": "protected", "return": "", "signature": " MobiusLoopViewModel(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      @Nonnull WorkRunner mainLoopWorkRunner,\n      int maxEffectQueueSize)", "full_signature": "protected  MobiusLoopViewModel(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      @Nonnull WorkRunner mainLoopWorkRunner,\n      int maxEffectQueueSize)", "class_method_signature": "MobiusLoopViewModel.MobiusLoopViewModel(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      @Nonnull WorkRunner mainLoopWorkRunner,\n      int maxEffectQueueSize)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init)", "modifiers": "public static", "return": "MobiusLoopViewModel<M, E, F, V>", "signature": "MobiusLoopViewModel<M, E, F, V> create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init)", "full_signature": "public static MobiusLoopViewModel<M, E, F, V> create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init)", "class_method_signature": "MobiusLoopViewModel.create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      int maxEffectsToQueue)", "modifiers": "public static", "return": "MobiusLoopViewModel<M, E, F, V>", "signature": "MobiusLoopViewModel<M, E, F, V> create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      int maxEffectsToQueue)", "full_signature": "public static MobiusLoopViewModel<M, E, F, V> create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      int maxEffectsToQueue)", "class_method_signature": "MobiusLoopViewModel.create(\n      @Nonnull Function<Consumer<V>, MobiusLoop.Factory<M, E, F>> loopFactoryProvider,\n      @Nonnull M modelToStartFrom,\n      @Nonnull Init<M, F> init,\n      int maxEffectsToQueue)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "@Nonnull public final", "return": "M", "signature": "M getModel()", "full_signature": "@Nonnull public final M getModel()", "class_method_signature": "MobiusLoopViewModel.getModel()", "testcase": false, "constructor": false}, {"identifier": "getModels", "parameters": "()", "modifiers": "@Nonnull public final", "return": "LiveData<M>", "signature": "LiveData<M> getModels()", "full_signature": "@Nonnull public final LiveData<M> getModels()", "class_method_signature": "MobiusLoopViewModel.getModels()", "testcase": false, "constructor": false}, {"identifier": "getViewEffects", "parameters": "()", "modifiers": "@Nonnull public final", "return": "LiveQueue<V>", "signature": "LiveQueue<V> getViewEffects()", "full_signature": "@Nonnull public final LiveQueue<V> getViewEffects()", "class_method_signature": "MobiusLoopViewModel.getViewEffects()", "testcase": false, "constructor": false}, {"identifier": "dispatchEvent", "parameters": "(@Nonnull E event)", "modifiers": "public final", "return": "void", "signature": "void dispatchEvent(@Nonnull E event)", "full_signature": "public final void dispatchEvent(@Nonnull E event)", "class_method_signature": "MobiusLoopViewModel.dispatchEvent(@Nonnull E event)", "testcase": false, "constructor": false}, {"identifier": "onCleared", "parameters": "()", "modifiers": "@Override protected final", "return": "void", "signature": "void onCleared()", "full_signature": "@Override protected final void onCleared()", "class_method_signature": "MobiusLoopViewModel.onCleared()", "testcase": false, "constructor": false}, {"identifier": "onModelChanged", "parameters": "(M model)", "modifiers": "private", "return": "void", "signature": "void onModelChanged(M model)", "full_signature": "private void onModelChanged(M model)", "class_method_signature": "MobiusLoopViewModel.onModelChanged(M model)", "testcase": false, "constructor": false}, {"identifier": "acceptViewEffect", "parameters": "(V viewEffect)", "modifiers": "private", "return": "void", "signature": "void acceptViewEffect(V viewEffect)", "full_signature": "private void acceptViewEffect(V viewEffect)", "class_method_signature": "MobiusLoopViewModel.acceptViewEffect(V viewEffect)", "testcase": false, "constructor": false}], "file": "mobius-android/src/main/java/com/spotify/mobius/android/MobiusLoopViewModel.java"}, "focal_method": {"identifier": "getViewEffects", "parameters": "()", "modifiers": "@Nonnull public final", "return": "LiveQueue<V>", "body": "@Nonnull\n  public final LiveQueue<V> getViewEffects() {\n    return viewEffectQueue;\n  }", "signature": "LiveQueue<V> getViewEffects()", "full_signature": "@Nonnull public final LiveQueue<V> getViewEffects()", "class_method_signature": "MobiusLoopViewModel.getViewEffects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}