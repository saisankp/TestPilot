{"test_class": {"identifier": "DefaultsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/command/DefaultsTest.java"}, "test_case": {"identifier": "shouldReturnString_handleIOError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnString_handleIOError() throws Exception {\n        // When\n        final BasicHttpResponse response = buildResponse();\n        response.setEntity(new StringEntity(\"\") {\n\n            @Override\n            public InputStream getContent() throws IOException {\n                throw new IOException(\"Unexpected exception\");\n            }\n        });\n\n        try {\n            Defaults.asString().apply(buildRequest(), response);\n        } catch (TDPException e) {\n            // Then\n            assertEquals(CommonErrorCodes.UNEXPECTED_EXCEPTION, e.getCode());\n        }\n    }", "signature": "void shouldReturnString_handleIOError()", "full_signature": "@Test public void shouldReturnString_handleIOError()", "class_method_signature": "DefaultsTest.shouldReturnString_handleIOError()", "testcase": true, "constructor": false, "invocations": ["buildResponse", "setEntity", "apply", "asString", "buildRequest", "assertEquals", "getCode"]}, "focal_class": {"identifier": "Defaults", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Defaults", "parameters": "()", "modifiers": "private", "return": "", "signature": " Defaults()", "full_signature": "private  Defaults()", "class_method_signature": "Defaults.Defaults()", "testcase": false, "constructor": true}, {"identifier": "passthrough", "parameters": "()", "modifiers": "public static", "return": "Function<Exception, RuntimeException>", "signature": "Function<Exception, RuntimeException> passthrough()", "full_signature": "public static Function<Exception, RuntimeException> passthrough()", "class_method_signature": "Defaults.passthrough()", "testcase": false, "constructor": false}, {"identifier": "asNull", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> asNull()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, T> asNull()", "class_method_signature": "Defaults.asNull()", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, String>", "signature": "BiFunction<HttpRequestBase, HttpResponse, String> asString()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, String> asString()", "class_method_signature": "Defaults.asString()", "testcase": false, "constructor": false}, {"identifier": "emptyString", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, String>", "signature": "BiFunction<HttpRequestBase, HttpResponse, String> emptyString()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, String> emptyString()", "class_method_signature": "Defaults.emptyString()", "testcase": false, "constructor": false}, {"identifier": "emptyStream", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, InputStream>", "signature": "BiFunction<HttpRequestBase, HttpResponse, InputStream> emptyStream()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, InputStream> emptyStream()", "class_method_signature": "Defaults.emptyStream()", "testcase": false, "constructor": false}, {"identifier": "pipeStream", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, InputStream>", "signature": "BiFunction<HttpRequestBase, HttpResponse, InputStream> pipeStream()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, InputStream> pipeStream()", "class_method_signature": "Defaults.pipeStream()", "testcase": false, "constructor": false}, {"identifier": "convertResponse", "parameters": "(ObjectMapper mapper,\n            Class<T> clazz)", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            Class<T> clazz)", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            Class<T> clazz)", "class_method_signature": "Defaults.convertResponse(ObjectMapper mapper,\n            Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "convertResponse", "parameters": "(ObjectMapper mapper,\n            TypeReference<T> typeReference)", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference)", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference)", "class_method_signature": "Defaults.convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference)", "testcase": false, "constructor": false}, {"identifier": "convertResponse", "parameters": "(ObjectMapper mapper,\n            TypeReference<T> typeReference, Function<Exception, T> errorHandler)", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, T>", "signature": "BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference, Function<Exception, T> errorHandler)", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, T> convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference, Function<Exception, T> errorHandler)", "class_method_signature": "Defaults.convertResponse(ObjectMapper mapper,\n            TypeReference<T> typeReference, Function<Exception, T> errorHandler)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(ObjectMapper mapper)", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, JsonNode>", "signature": "BiFunction<HttpRequestBase, HttpResponse, JsonNode> toJson(ObjectMapper mapper)", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, JsonNode> toJson(ObjectMapper mapper)", "class_method_signature": "Defaults.toJson(ObjectMapper mapper)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(Class<T> clazz, ObjectMapper mapper,\n            Function<Iterator<T>, S> convert)", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, S>", "signature": "BiFunction<HttpRequestBase, HttpResponse, S> iterate(Class<T> clazz, ObjectMapper mapper,\n            Function<Iterator<T>, S> convert)", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, S> iterate(Class<T> clazz, ObjectMapper mapper,\n            Function<Iterator<T>, S> convert)", "class_method_signature": "Defaults.iterate(Class<T> clazz, ObjectMapper mapper,\n            Function<Iterator<T>, S> convert)", "testcase": false, "constructor": false}, {"identifier": "getResponseEntity", "parameters": "(HttpStatus status, HttpResponse response)", "modifiers": "public static", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> getResponseEntity(HttpStatus status, HttpResponse response)", "full_signature": "public static ResponseEntity<String> getResponseEntity(HttpStatus status, HttpResponse response)", "class_method_signature": "Defaults.getResponseEntity(HttpStatus status, HttpResponse response)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/command/Defaults.java"}, "focal_method": {"identifier": "asString", "parameters": "()", "modifiers": "public static", "return": "BiFunction<HttpRequestBase, HttpResponse, String>", "body": "public static BiFunction<HttpRequestBase, HttpResponse, String> asString() {\n        return (request, response) -> {\n            try (InputStream content = response.getEntity().getContent()) {\n                return IOUtils.toString(content, UTF_8);\n            } catch (IOException e) {\n                throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n            } finally {\n                EntityUtils.consumeQuietly(response.getEntity());\n                request.releaseConnection();\n            }\n        };\n    }", "signature": "BiFunction<HttpRequestBase, HttpResponse, String> asString()", "full_signature": "public static BiFunction<HttpRequestBase, HttpResponse, String> asString()", "class_method_signature": "Defaults.asString()", "testcase": false, "constructor": false, "invocations": ["getContent", "getEntity", "toString", "consumeQuietly", "getEntity", "releaseConnection"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}