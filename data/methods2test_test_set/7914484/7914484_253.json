{"test_class": {"identifier": "TraxUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-xml/src/test/java/org/springframework/xml/transform/TraxUtilsTest.java"}, "test_case": {"identifier": "testDoWithInvalidResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDoWithInvalidResult() throws Exception {\n\t\tResult result = new Result() {\n\n\t\t\tpublic void setSystemId(String systemId) {}\n\n\t\t\tpublic String getSystemId() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tTraxUtils.doWithResult(result, null);\n\t\t\tAssert.fail(\"IllegalArgumentException expected\");\n\t\t} catch (IllegalArgumentException ex) {\n\t\t\t// expected\n\t\t}\n\t}", "signature": "void testDoWithInvalidResult()", "full_signature": "@Test public void testDoWithInvalidResult()", "class_method_signature": "TraxUtilsTest.testDoWithInvalidResult()", "testcase": true, "constructor": false, "invocations": ["doWithResult", "fail"]}, "focal_class": {"identifier": "TraxUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getDocument", "parameters": "(DOMSource source)", "modifiers": "public static", "return": "Document", "signature": "Document getDocument(DOMSource source)", "full_signature": "public static Document getDocument(DOMSource source)", "class_method_signature": "TraxUtils.getDocument(DOMSource source)", "testcase": false, "constructor": false}, {"identifier": "doWithSource", "parameters": "(Source source, SourceCallback callback)", "modifiers": "public static", "return": "void", "signature": "void doWithSource(Source source, SourceCallback callback)", "full_signature": "public static void doWithSource(Source source, SourceCallback callback)", "class_method_signature": "TraxUtils.doWithSource(Source source, SourceCallback callback)", "testcase": false, "constructor": false}, {"identifier": "doWithResult", "parameters": "(Result result, ResultCallback callback)", "modifiers": "public static", "return": "void", "signature": "void doWithResult(Result result, ResultCallback callback)", "full_signature": "public static void doWithResult(Result result, ResultCallback callback)", "class_method_signature": "TraxUtils.doWithResult(Result result, ResultCallback callback)", "testcase": false, "constructor": false}], "file": "spring-xml/src/main/java/org/springframework/xml/transform/TraxUtils.java"}, "focal_method": {"identifier": "doWithResult", "parameters": "(Result result, ResultCallback callback)", "modifiers": "public static", "return": "void", "body": "public static void doWithResult(Result result, ResultCallback callback) throws Exception {\n\t\tif (result instanceof DOMResult) {\n\t\t\tcallback.domResult(((DOMResult) result).getNode());\n\t\t\treturn;\n\t\t} else if (StaxUtils.isStaxResult(result)) {\n\t\t\tXMLStreamWriter streamWriter = StaxUtils.getXMLStreamWriter(result);\n\t\t\tif (streamWriter != null) {\n\t\t\t\tcallback.staxResult(streamWriter);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tXMLEventWriter eventWriter = StaxUtils.getXMLEventWriter(result);\n\t\t\t\tif (eventWriter != null) {\n\t\t\t\t\tcallback.staxResult(eventWriter);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (result instanceof SAXResult) {\n\t\t\tSAXResult saxSource = (SAXResult) result;\n\t\t\tcallback.saxResult(saxSource.getHandler(), saxSource.getLexicalHandler());\n\t\t\treturn;\n\t\t} else if (result instanceof StreamResult) {\n\t\t\tStreamResult streamSource = (StreamResult) result;\n\t\t\tif (streamSource.getOutputStream() != null) {\n\t\t\t\tcallback.streamResult(streamSource.getOutputStream());\n\t\t\t\treturn;\n\t\t\t} else if (streamSource.getWriter() != null) {\n\t\t\t\tcallback.streamResult(streamSource.getWriter());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (StringUtils.hasLength(result.getSystemId())) {\n\t\t\tString systemId = result.getSystemId();\n\t\t\tcallback.result(systemId);\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Unknown Result type: \" + result.getClass());\n\t\t}\n\t}", "signature": "void doWithResult(Result result, ResultCallback callback)", "full_signature": "public static void doWithResult(Result result, ResultCallback callback)", "class_method_signature": "TraxUtils.doWithResult(Result result, ResultCallback callback)", "testcase": false, "constructor": false, "invocations": ["domResult", "getNode", "isStaxResult", "getXMLStreamWriter", "staxResult", "getXMLEventWriter", "staxResult", "saxResult", "getHandler", "getLexicalHandler", "getOutputStream", "streamResult", "getOutputStream", "getWriter", "streamResult", "getWriter", "hasLength", "getSystemId", "getSystemId", "result", "getClass"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}