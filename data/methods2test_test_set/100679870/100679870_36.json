{"test_class": {"identifier": "TestAbstractCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArrayList<ICacheEntry<StoreImage>> entries;", "modifier": "private", "type": "ArrayList<ICacheEntry<StoreImage>>", "declarator": "entries", "var_name": "entries"}, {"original_string": "@Mock\n  private StoreImage c0;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "c0", "var_name": "c0"}, {"original_string": "@Mock\n  private StoreImage c1;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "c1", "var_name": "c1"}, {"original_string": "@Mock\n  private StoreImage c2;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "c2", "var_name": "c2"}, {"original_string": "@Mock\n  private StoreImage c3;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "c3", "var_name": "c3"}, {"original_string": "@Mock\n  private StoreImage c4;", "modifier": "@Mock\n  private", "type": "StoreImage", "declarator": "c4", "var_name": "c4"}, {"original_string": "@Mock\n  private IDataStorage<StoreImage> storageAll;", "modifier": "@Mock\n  private", "type": "IDataStorage<StoreImage>", "declarator": "storageAll", "var_name": "storageAll"}, {"original_string": "@Mock\n  private IDataStorage<StoreImage> storageNone;", "modifier": "@Mock\n  private", "type": "IDataStorage<StoreImage>", "declarator": "storageNone", "var_name": "storageNone"}], "file": "services/tools.descartes.teastore.image/src/test/java/tools/descartes/teastore/image/cache/TestAbstractCache.java"}, "test_case": {"identifier": "testGetMaxCacheSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetMaxCacheSize() {\n    AbstractCacheWrapper uut = new AbstractCacheWrapper(entries, storageAll,\n        IDataCache.STD_MAX_CACHE_SIZE, predicate -> true);\n    assertEquals(IDataCache.STD_MAX_CACHE_SIZE, uut.getMaxCacheSize());\n    uut = new AbstractCacheWrapper(entries, storageAll, 1234567890, predicate -> true);\n    assertEquals(1234567890, uut.getMaxCacheSize());\n  }", "signature": "void testGetMaxCacheSize()", "full_signature": "@Test public void testGetMaxCacheSize()", "class_method_signature": "TestAbstractCache.testGetMaxCacheSize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMaxCacheSize", "assertEquals", "getMaxCacheSize"]}, "focal_class": {"identifier": "AbstractCache", "superclass": "", "interfaces": "implements IDataCache<T>", "fields": [{"original_string": "private IDataStorage<T> cachedStorage;", "modifier": "private", "type": "IDataStorage<T>", "declarator": "cachedStorage", "var_name": "cachedStorage"}, {"original_string": "private S entries;", "modifier": "private", "type": "S", "declarator": "entries", "var_name": "entries"}, {"original_string": "private long maxCacheSize;", "modifier": "private", "type": "long", "declarator": "maxCacheSize", "var_name": "maxCacheSize"}, {"original_string": "private long currentCacheSize;", "modifier": "private", "type": "long", "declarator": "currentCacheSize", "var_name": "currentCacheSize"}, {"original_string": "private Predicate<T> cachingRule;", "modifier": "private", "type": "Predicate<T>", "declarator": "cachingRule", "var_name": "cachingRule"}, {"original_string": "private Logger log = LoggerFactory.getLogger(AbstractCache.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractCache.class)", "var_name": "log"}, {"original_string": "private final ReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}], "methods": [{"identifier": "AbstractCache", "parameters": "(S entries, IDataStorage<T> cachedStorage, long maxCacheSize,\n      Predicate<T> cachingRule)", "modifiers": "public", "return": "", "signature": " AbstractCache(S entries, IDataStorage<T> cachedStorage, long maxCacheSize,\n      Predicate<T> cachingRule)", "full_signature": "public  AbstractCache(S entries, IDataStorage<T> cachedStorage, long maxCacheSize,\n      Predicate<T> cachingRule)", "class_method_signature": "AbstractCache.AbstractCache(S entries, IDataStorage<T> cachedStorage, long maxCacheSize,\n      Predicate<T> cachingRule)", "testcase": false, "constructor": true}, {"identifier": "getCachedStorage", "parameters": "()", "modifiers": "protected", "return": "IDataStorage<T>", "signature": "IDataStorage<T> getCachedStorage()", "full_signature": "protected IDataStorage<T> getCachedStorage()", "class_method_signature": "AbstractCache.getCachedStorage()", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "protected", "return": "S", "signature": "S getEntries()", "full_signature": "protected S getEntries()", "class_method_signature": "AbstractCache.getEntries()", "testcase": false, "constructor": false}, {"identifier": "findInEntries", "parameters": "(long id)", "modifiers": "private", "return": "F", "signature": "F findInEntries(long id)", "full_signature": "private F findInEntries(long id)", "class_method_signature": "AbstractCache.findInEntries(long id)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(long id, boolean markUsed)", "modifiers": "private", "return": "T", "signature": "T getData(long id, boolean markUsed)", "full_signature": "private T getData(long id, boolean markUsed)", "class_method_signature": "AbstractCache.getData(long id, boolean markUsed)", "testcase": false, "constructor": false}, {"identifier": "getMaxCacheSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMaxCacheSize()", "full_signature": "@Override public long getMaxCacheSize()", "class_method_signature": "AbstractCache.getMaxCacheSize()", "testcase": false, "constructor": false}, {"identifier": "setMaxCacheSize", "parameters": "(long maxCacheSize)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setMaxCacheSize(long maxCacheSize)", "full_signature": "@Override public boolean setMaxCacheSize(long maxCacheSize)", "class_method_signature": "AbstractCache.setMaxCacheSize(long maxCacheSize)", "testcase": false, "constructor": false}, {"identifier": "getCurrentCacheSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCurrentCacheSize()", "full_signature": "@Override public long getCurrentCacheSize()", "class_method_signature": "AbstractCache.getCurrentCacheSize()", "testcase": false, "constructor": false}, {"identifier": "getFreeSpace", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getFreeSpace()", "full_signature": "@Override public long getFreeSpace()", "class_method_signature": "AbstractCache.getFreeSpace()", "testcase": false, "constructor": false}, {"identifier": "hasStorageFor", "parameters": "(long size)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasStorageFor(long size)", "full_signature": "@Override public boolean hasStorageFor(long size)", "class_method_signature": "AbstractCache.hasStorageFor(long size)", "testcase": false, "constructor": false}, {"identifier": "cacheData", "parameters": "(T data)", "modifiers": "@Override public", "return": "void", "signature": "void cacheData(T data)", "full_signature": "@Override public void cacheData(T data)", "class_method_signature": "AbstractCache.cacheData(T data)", "testcase": false, "constructor": false}, {"identifier": "uncacheData", "parameters": "(T data)", "modifiers": "@Override public", "return": "void", "signature": "void uncacheData(T data)", "full_signature": "@Override public void uncacheData(T data)", "class_method_signature": "AbstractCache.uncacheData(T data)", "testcase": false, "constructor": false}, {"identifier": "dataIsCachable", "parameters": "(T data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataIsCachable(T data)", "full_signature": "@Override public boolean dataIsCachable(T data)", "class_method_signature": "AbstractCache.dataIsCachable(T data)", "testcase": false, "constructor": false}, {"identifier": "dataIsInCache", "parameters": "(long id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataIsInCache(long id)", "full_signature": "@Override public boolean dataIsInCache(long id)", "class_method_signature": "AbstractCache.dataIsInCache(long id)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "AbstractCache.clearCache()", "testcase": false, "constructor": false}, {"identifier": "dataExists", "parameters": "(long id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataExists(long id)", "full_signature": "@Override public boolean dataExists(long id)", "class_method_signature": "AbstractCache.dataExists(long id)", "testcase": false, "constructor": false}, {"identifier": "loadData", "parameters": "(long id)", "modifiers": "@Override public", "return": "T", "signature": "T loadData(long id)", "full_signature": "@Override public T loadData(long id)", "class_method_signature": "AbstractCache.loadData(long id)", "testcase": false, "constructor": false}, {"identifier": "saveData", "parameters": "(T data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean saveData(T data)", "full_signature": "@Override public boolean saveData(T data)", "class_method_signature": "AbstractCache.saveData(T data)", "testcase": false, "constructor": false}, {"identifier": "dataIsStorable", "parameters": "(T data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataIsStorable(T data)", "full_signature": "@Override public boolean dataIsStorable(T data)", "class_method_signature": "AbstractCache.dataIsStorable(T data)", "testcase": false, "constructor": false}, {"identifier": "deleteData", "parameters": "(T data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteData(T data)", "full_signature": "@Override public boolean deleteData(T data)", "class_method_signature": "AbstractCache.deleteData(T data)", "testcase": false, "constructor": false}, {"identifier": "dataRemovedFromCache", "parameters": "(long size)", "modifiers": "protected", "return": "void", "signature": "void dataRemovedFromCache(long size)", "full_signature": "protected void dataRemovedFromCache(long size)", "class_method_signature": "AbstractCache.dataRemovedFromCache(long size)", "testcase": false, "constructor": false}, {"identifier": "dataAddedToCache", "parameters": "(long size)", "modifiers": "protected", "return": "void", "signature": "void dataAddedToCache(long size)", "full_signature": "protected void dataAddedToCache(long size)", "class_method_signature": "AbstractCache.dataAddedToCache(long size)", "testcase": false, "constructor": false}, {"identifier": "createEntry", "parameters": "(T data)", "modifiers": "protected abstract", "return": "F", "signature": "F createEntry(T data)", "full_signature": "protected abstract F createEntry(T data)", "class_method_signature": "AbstractCache.createEntry(T data)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(F data)", "modifiers": "protected", "return": "void", "signature": "void addEntry(F data)", "full_signature": "protected void addEntry(F data)", "class_method_signature": "AbstractCache.addEntry(F data)", "testcase": false, "constructor": false}, {"identifier": "removeEntryByCachingStrategy", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void removeEntryByCachingStrategy()", "full_signature": "protected abstract void removeEntryByCachingStrategy()", "class_method_signature": "AbstractCache.removeEntryByCachingStrategy()", "testcase": false, "constructor": false}, {"identifier": "reorderAndTag", "parameters": "(F data)", "modifiers": "protected", "return": "void", "signature": "void reorderAndTag(F data)", "full_signature": "protected void reorderAndTag(F data)", "class_method_signature": "AbstractCache.reorderAndTag(F data)", "testcase": false, "constructor": false}], "file": "services/tools.descartes.teastore.image/src/main/java/tools/descartes/teastore/image/cache/AbstractCache.java"}, "focal_method": {"identifier": "getMaxCacheSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n  public long getMaxCacheSize() {\n    return maxCacheSize;\n  }", "signature": "long getMaxCacheSize()", "full_signature": "@Override public long getMaxCacheSize()", "class_method_signature": "AbstractCache.getMaxCacheSize()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 100679870, "url": "https://github.com/DescartesResearch/TeaStore", "language": "Java", "is_fork": false, "fork_count": 31, "stargazer_count": 43, "size": 91777, "license": "licensed"}}