{"test_class": {"identifier": "AuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Authorizer authorizer;", "modifier": "private", "type": "Authorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private static final String ROLE_PATTERN = \"^z-gateleen[-_](.*)$\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_PATTERN = \"^z-gateleen[-_](.*)$\"", "var_name": "ROLE_PATTERN"}, {"original_string": "private static final String ROLE_PREFIX = \"z-gateleen-\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_PREFIX = \"z-gateleen-\"", "var_name": "ROLE_PREFIX"}, {"original_string": "private static final String ACLS = \"/gateleen/server/security/v1/acls/\";", "modifier": "private static final", "type": "String", "declarator": "ACLS = \"/gateleen/server/security/v1/acls/\"", "var_name": "ACLS"}, {"original_string": "private static final String ACLS_DIR = \"acls/\";", "modifier": "private static final", "type": "String", "declarator": "ACLS_DIR = \"acls/\"", "var_name": "ACLS_DIR"}, {"original_string": "private static final String ROLEMAPPER = \"/gateleen/server/security/v1/rolemapper\";", "modifier": "private static final", "type": "String", "declarator": "ROLEMAPPER = \"/gateleen/server/security/v1/rolemapper\"", "var_name": "ROLEMAPPER"}, {"original_string": "private static final String ROLEMAPPER_DIR = \"rolemapper/\";", "modifier": "private static final", "type": "String", "declarator": "ROLEMAPPER_DIR = \"rolemapper/\"", "var_name": "ROLEMAPPER_DIR"}, {"original_string": "@Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-security/src/test/java/org/swisspush/gateleen/security/authorization/AuthorizerTest.java"}, "test_case": {"identifier": "testAuthorizeUserUriPUTRequest", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthorizeUserUriPUTRequest(TestContext context) {\n        String requestUri = \"/gateleen/server/security/v1/user\";\n\n        CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders();\n        headers.add(\"x-rp-usr\", \"user_1234\");\n        headers.add(\"x-rp-grp\", \"z-gateleen-admin,z-gateleen-authenticated,z-gateleen-developer\");\n\n        DummyHttpServerResponse response = Mockito.spy(new DummyHttpServerResponse());\n        AuthorizerRequest req = new AuthorizerRequest(HttpMethod.PUT, requestUri, headers, response);\n\n        authorizer.authorize(req).setHandler(event -> {\n            context.assertTrue(event.succeeded());\n            context.assertFalse(event.result()); // false means that the request must not be handled anymore\n        });\n\n        Mockito.verify(response, timeout(1000).times(1)).setStatusCode(eq(StatusCode.METHOD_NOT_ALLOWED.getStatusCode()));\n        Mockito.verify(response, timeout(1000).times(1)).setStatusMessage(eq(StatusCode.METHOD_NOT_ALLOWED.getStatusMessage()));\n        Mockito.verify(response, timeout(1000).times(1)).end();\n    }", "signature": "void testAuthorizeUserUriPUTRequest(TestContext context)", "full_signature": "@Test public void testAuthorizeUserUriPUTRequest(TestContext context)", "class_method_signature": "AuthorizerTest.testAuthorizeUserUriPUTRequest(TestContext context)", "testcase": true, "constructor": false, "invocations": ["add", "add", "spy", "setHandler", "authorize", "assertTrue", "succeeded", "assertFalse", "result", "setStatusCode", "verify", "times", "timeout", "eq", "getStatusCode", "setStatusMessage", "verify", "times", "timeout", "eq", "getStatusMessage", "end", "verify", "times", "timeout"]}, "focal_class": {"identifier": "Authorizer", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private static final String UPDATE_ADDRESS = \"gateleen.authorization-updated\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_ADDRESS = \"gateleen.authorization-updated\"", "var_name": "UPDATE_ADDRESS"}, {"original_string": "private Pattern userUriPattern;", "modifier": "private", "type": "Pattern", "declarator": "userUriPattern", "var_name": "userUriPattern"}, {"original_string": "private String aclKey = \"acls\";", "modifier": "private", "type": "String", "declarator": "aclKey = \"acls\"", "var_name": "aclKey"}, {"original_string": "private String anonymousRole = \"everyone\";", "modifier": "private", "type": "String", "declarator": "anonymousRole = \"everyone\"", "var_name": "anonymousRole"}, {"original_string": "private RoleMapper roleMapper;", "modifier": "private", "type": "RoleMapper", "declarator": "roleMapper", "var_name": "roleMapper"}, {"original_string": "private RoleAuthorizer roleAuthorizer;", "modifier": "private", "type": "RoleAuthorizer", "declarator": "roleAuthorizer", "var_name": "roleAuthorizer"}, {"original_string": "private PatternHolder aclUriPattern;", "modifier": "private", "type": "PatternHolder", "declarator": "aclUriPattern", "var_name": "aclUriPattern"}, {"original_string": "private PatternHolder roleMapperUriPattern;", "modifier": "private", "type": "PatternHolder", "declarator": "roleMapperUriPattern", "var_name": "roleMapperUriPattern"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private EventBus eb;", "modifier": "private", "type": "EventBus", "declarator": "eb", "var_name": "eb"}, {"original_string": "private boolean logACLChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logACLChanges = false", "var_name": "logACLChanges"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private RoleExtractor roleExtractor;", "modifier": "private", "type": "RoleExtractor", "declarator": "roleExtractor", "var_name": "roleExtractor"}, {"original_string": "public static final Logger log = LoggerFactory.getLogger(Authorizer.class);", "modifier": "public static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Authorizer.class)", "var_name": "log"}, {"original_string": "private long updateTimerId = -1;", "modifier": "private", "type": "long", "declarator": "updateTimerId = -1", "var_name": "updateTimerId"}], "methods": [{"identifier": "Authorizer", "parameters": "(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern)", "modifiers": "public", "return": "", "signature": " Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern)", "full_signature": "public  Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern)", "class_method_signature": "Authorizer.Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern)", "testcase": false, "constructor": true}, {"identifier": "Authorizer", "parameters": "(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern, String rolePrefix, Map<String, Object> properties)", "modifiers": "public", "return": "", "signature": " Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern, String rolePrefix, Map<String, Object> properties)", "full_signature": "public  Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern, String rolePrefix, Map<String, Object> properties)", "class_method_signature": "Authorizer.Authorizer(Vertx vertx, final ResourceStorage storage, String securityRoot, String rolePattern, String rolePrefix, Map<String, Object> properties)", "testcase": false, "constructor": true}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "Authorizer.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "Future<Boolean>", "signature": "Future<Boolean> authorize(final HttpServerRequest request)", "full_signature": "public Future<Boolean> authorize(final HttpServerRequest request)", "class_method_signature": "Authorizer.authorize(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(final HttpServerRequest request, final Handler<Void> handler)", "modifiers": "public", "return": "void", "signature": "void authorize(final HttpServerRequest request, final Handler<Void> handler)", "full_signature": "public void authorize(final HttpServerRequest request, final Handler<Void> handler)", "class_method_signature": "Authorizer.authorize(final HttpServerRequest request, final Handler<Void> handler)", "testcase": false, "constructor": false}, {"identifier": "handleUserUriRequest", "parameters": "(final HttpServerRequest request, Future<Boolean> future)", "modifiers": "private", "return": "void", "signature": "void handleUserUriRequest(final HttpServerRequest request, Future<Boolean> future)", "full_signature": "private void handleUserUriRequest(final HttpServerRequest request, Future<Boolean> future)", "class_method_signature": "Authorizer.handleUserUriRequest(final HttpServerRequest request, Future<Boolean> future)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationUriRequest", "parameters": "(final HttpServerRequest request, Future<Boolean> future, PatternHolder patternHolder, ConfigurationResource checker)", "modifiers": "private", "return": "void", "signature": "void handleConfigurationUriRequest(final HttpServerRequest request, Future<Boolean> future, PatternHolder patternHolder, ConfigurationResource checker)", "full_signature": "private void handleConfigurationUriRequest(final HttpServerRequest request, Future<Boolean> future, PatternHolder patternHolder, ConfigurationResource checker)", "class_method_signature": "Authorizer.handleConfigurationUriRequest(final HttpServerRequest request, Future<Boolean> future, PatternHolder patternHolder, ConfigurationResource checker)", "testcase": false, "constructor": false}, {"identifier": "updateAllConfigs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateAllConfigs()", "full_signature": "private void updateAllConfigs()", "class_method_signature": "Authorizer.updateAllConfigs()", "testcase": false, "constructor": false}, {"identifier": "scheduleUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scheduleUpdate()", "full_signature": "private void scheduleUpdate()", "class_method_signature": "Authorizer.scheduleUpdate()", "testcase": false, "constructor": false}], "file": "gateleen-security/src/main/java/org/swisspush/gateleen/security/authorization/Authorizer.java"}, "focal_method": {"identifier": "authorize", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "Future<Boolean>", "body": "public Future<Boolean> authorize(final HttpServerRequest request) {\n        Future<Boolean> future = Future.future();\n\n        handleUserUriRequest(request, future);\n\n        if (!future.isComplete()) {\n            roleAuthorizer.handleIsAuthorized(request, future);\n        }\n\n        if (!future.isComplete()) {\n            handleConfigurationUriRequest(request, future, aclUriPattern, roleAuthorizer);\n        }\n\n        if (!future.isComplete()) {\n            handleConfigurationUriRequest(request, future, roleMapperUriPattern, roleMapper);\n        }\n\n        if (!future.isComplete()) {\n            future.complete(Boolean.TRUE);\n        }\n\n        return future;\n    }", "signature": "Future<Boolean> authorize(final HttpServerRequest request)", "full_signature": "public Future<Boolean> authorize(final HttpServerRequest request)", "class_method_signature": "Authorizer.authorize(final HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["future", "handleUserUriRequest", "isComplete", "handleIsAuthorized", "isComplete", "handleConfigurationUriRequest", "isComplete", "handleConfigurationUriRequest", "isComplete", "complete"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}