{"test_class": {"identifier": "LongRunningProcessStopTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<UUID, Future<?>> metadataStorage = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<UUID, Future<?>>", "declarator": "metadataStorage = new ConcurrentHashMap<>()", "var_name": "metadataStorage"}], "file": "modules/tensorflow/src/test/java/org/apache/ignite/tensorflow/core/longrunning/task/LongRunningProcessStopTaskTest.java"}, "test_case": {"identifier": "testCallProcessIsDoneWithException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCallProcessIsDoneWithException() throws ExecutionException, InterruptedException {\n        UUID procId = UUID.randomUUID();\n\n        Future<?> fut = mock(Future.class);\n        doReturn(true).when(fut).isDone();\n        doThrow(RuntimeException.class).when(fut).get();\n        metadataStorage.put(procId, fut);\n\n        LongRunningProcessStopTask stopTask = createTask(procId, true);\n\n        List<LongRunningProcessStatus> statuses = stopTask.call();\n\n        assertEquals(1, statuses.size());\n        verify(fut).cancel(eq(true));\n\n        LongRunningProcessStatus status = statuses.get(0);\n        assertEquals(LongRunningProcessState.DONE, status.getState());\n        assertNotNull(status.getException());\n        assertTrue(status.getException() instanceof RuntimeException);\n\n        assertEquals(0, metadataStorage.size());\n    }", "signature": "void testCallProcessIsDoneWithException()", "full_signature": "@Test public void testCallProcessIsDoneWithException()", "class_method_signature": "LongRunningProcessStopTaskTest.testCallProcessIsDoneWithException()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "mock", "isDone", "when", "doReturn", "get", "when", "doThrow", "put", "createTask", "call", "assertEquals", "size", "cancel", "verify", "eq", "get", "assertEquals", "getState", "assertNotNull", "getException", "assertTrue", "getException", "assertEquals", "size"]}, "focal_class": {"identifier": "LongRunningProcessStopTask", "superclass": "extends LongRunningProcessTask<List<LongRunningProcessStatus>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5552468435820611170L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5552468435820611170L", "var_name": "serialVersionUID"}, {"original_string": "private final List<UUID> procIds;", "modifier": "private final", "type": "List<UUID>", "declarator": "procIds", "var_name": "procIds"}, {"original_string": "private final boolean clear;", "modifier": "private final", "type": "boolean", "declarator": "clear", "var_name": "clear"}], "methods": [{"identifier": "LongRunningProcessStopTask", "parameters": "(List<UUID> procIds, boolean clear)", "modifiers": "public", "return": "", "signature": " LongRunningProcessStopTask(List<UUID> procIds, boolean clear)", "full_signature": "public  LongRunningProcessStopTask(List<UUID> procIds, boolean clear)", "class_method_signature": "LongRunningProcessStopTask.LongRunningProcessStopTask(List<UUID> procIds, boolean clear)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "List<LongRunningProcessStatus>", "signature": "List<LongRunningProcessStatus> call()", "full_signature": "@Override public List<LongRunningProcessStatus> call()", "class_method_signature": "LongRunningProcessStopTask.call()", "testcase": false, "constructor": false}, {"identifier": "stopProcess", "parameters": "(UUID procId)", "modifiers": "private", "return": "LongRunningProcessStatus", "signature": "LongRunningProcessStatus stopProcess(UUID procId)", "full_signature": "private LongRunningProcessStatus stopProcess(UUID procId)", "class_method_signature": "LongRunningProcessStopTask.stopProcess(UUID procId)", "testcase": false, "constructor": false}, {"identifier": "removeProcessesFromMetadataStorage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeProcessesFromMetadataStorage()", "full_signature": "private void removeProcessesFromMetadataStorage()", "class_method_signature": "LongRunningProcessStopTask.removeProcessesFromMetadataStorage()", "testcase": false, "constructor": false}], "file": "modules/tensorflow/src/main/java/org/apache/ignite/tensorflow/core/longrunning/task/LongRunningProcessStopTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "List<LongRunningProcessStatus>", "body": "@Override public List<LongRunningProcessStatus> call() {\n        ArrayList<LongRunningProcessStatus> res = new ArrayList<>();\n\n        for (UUID prodId : procIds)\n            res.add(stopProcess(prodId));\n\n        // All-or-nothing strategy. Processes will be removed only if all processes can be removed.\n        if (clear)\n            removeProcessesFromMetadataStorage();\n\n        return res;\n    }", "signature": "List<LongRunningProcessStatus> call()", "full_signature": "@Override public List<LongRunningProcessStatus> call()", "class_method_signature": "LongRunningProcessStopTask.call()", "testcase": false, "constructor": false, "invocations": ["add", "stopProcess", "removeProcessesFromMetadataStorage"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}