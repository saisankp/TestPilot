{"test_class": {"identifier": "TestFsDatasetImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_DIR =\n      new FileSystemTestHelper().getTestRootDir();", "modifier": "private static final", "type": "String", "declarator": "BASE_DIR =\n      new FileSystemTestHelper().getTestRootDir()", "var_name": "BASE_DIR"}, {"original_string": "private static final int NUM_INIT_VOLUMES = 2;", "modifier": "private static final", "type": "int", "declarator": "NUM_INIT_VOLUMES = 2", "var_name": "NUM_INIT_VOLUMES"}, {"original_string": "private static final String CLUSTER_ID = \"cluser-id\";", "modifier": "private static final", "type": "String", "declarator": "CLUSTER_ID = \"cluser-id\"", "var_name": "CLUSTER_ID"}, {"original_string": "private static final String[] BLOCK_POOL_IDS = {\"bpid-0\", \"bpid-1\"};", "modifier": "private static final", "type": "String[]", "declarator": "BLOCK_POOL_IDS = {\"bpid-0\", \"bpid-1\"}", "var_name": "BLOCK_POOL_IDS"}, {"original_string": "private static final DataStorage dsForStorageUuid = new DataStorage(\n      new StorageInfo(HdfsServerConstants.NodeType.DATA_NODE));", "modifier": "private static final", "type": "DataStorage", "declarator": "dsForStorageUuid = new DataStorage(\n      new StorageInfo(HdfsServerConstants.NodeType.DATA_NODE))", "var_name": "dsForStorageUuid"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private DataNode datanode;", "modifier": "private", "type": "DataNode", "declarator": "datanode", "var_name": "datanode"}, {"original_string": "private DataStorage storage;", "modifier": "private", "type": "DataStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private FsDatasetImpl dataset;", "modifier": "private", "type": "FsDatasetImpl", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private final static String BLOCKPOOL = \"BP-TEST\";", "modifier": "private final static", "type": "String", "declarator": "BLOCKPOOL = \"BP-TEST\"", "var_name": "BLOCKPOOL"}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestFsDatasetImpl.java"}, "test_case": {"identifier": "testRemoveVolumes", "parameters": "()", "modifiers": "@Test(timeout = 30000) public", "return": "void", "body": "@Test(timeout = 30000)\n  public void testRemoveVolumes() throws IOException {\n    // Feed FsDataset with block metadata.\n    final int NUM_BLOCKS = 100;\n    for (int i = 0; i < NUM_BLOCKS; i++) {\n      String bpid = BLOCK_POOL_IDS[NUM_BLOCKS % BLOCK_POOL_IDS.length];\n      ExtendedBlock eb = new ExtendedBlock(bpid, i);\n      try (ReplicaHandler replica =\n          dataset.createRbw(StorageType.DEFAULT, eb, false)) {\n      }\n    }\n    final String[] dataDirs =\n        conf.get(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY).split(\",\");\n    final String volumePathToRemove = dataDirs[0];\n    Set<File> volumesToRemove = new HashSet<>();\n    volumesToRemove.add(StorageLocation.parse(volumePathToRemove).getFile());\n\n    dataset.removeVolumes(volumesToRemove, true);\n    int expectedNumVolumes = dataDirs.length - 1;\n    assertEquals(\"The volume has been removed from the volumeList.\",\n        expectedNumVolumes, dataset.getVolumes().size());\n    assertEquals(\"The volume has been removed from the storageMap.\",\n        expectedNumVolumes, dataset.storageMap.size());\n\n    try {\n      dataset.asyncDiskService.execute(volumesToRemove.iterator().next(),\n          new Runnable() {\n            @Override\n            public void run() {}\n          });\n      fail(\"Expect RuntimeException: the volume has been removed from the \"\n           + \"AsyncDiskService.\");\n    } catch (RuntimeException e) {\n      GenericTestUtils.assertExceptionContains(\"Cannot find root\", e);\n    }\n\n    int totalNumReplicas = 0;\n    for (String bpid : dataset.volumeMap.getBlockPoolList()) {\n      totalNumReplicas += dataset.volumeMap.size(bpid);\n    }\n    assertEquals(\"The replica infos on this volume has been removed from the \"\n                 + \"volumeMap.\", NUM_BLOCKS / NUM_INIT_VOLUMES,\n                 totalNumReplicas);\n  }", "signature": "void testRemoveVolumes()", "full_signature": "@Test(timeout = 30000) public void testRemoveVolumes()", "class_method_signature": "TestFsDatasetImpl.testRemoveVolumes()", "testcase": true, "constructor": false, "invocations": ["createRbw", "split", "get", "add", "getFile", "parse", "removeVolumes", "assertEquals", "size", "getVolumes", "assertEquals", "size", "execute", "next", "iterator", "fail", "assertExceptionContains", "getBlockPoolList", "size", "assertEquals"]}, "focal_class": {"identifier": "FsDatasetImpl", "superclass": "", "interfaces": "implements FsDatasetSpi<FsVolumeImpl>", "fields": [{"original_string": "static final Log LOG = LogFactory.getLog(FsDatasetImpl.class);", "modifier": "static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(FsDatasetImpl.class)", "var_name": "LOG"}, {"original_string": "private final static boolean isNativeIOAvailable;", "modifier": "private final static", "type": "boolean", "declarator": "isNativeIOAvailable", "var_name": "isNativeIOAvailable"}, {"original_string": "final DataNode datanode;", "modifier": "final", "type": "DataNode", "declarator": "datanode", "var_name": "datanode"}, {"original_string": "final DataStorage dataStorage;", "modifier": "final", "type": "DataStorage", "declarator": "dataStorage", "var_name": "dataStorage"}, {"original_string": "final FsVolumeList volumes;", "modifier": "final", "type": "FsVolumeList", "declarator": "volumes", "var_name": "volumes"}, {"original_string": "final Map<String, DatanodeStorage> storageMap;", "modifier": "final", "type": "Map<String, DatanodeStorage>", "declarator": "storageMap", "var_name": "storageMap"}, {"original_string": "final FsDatasetAsyncDiskService asyncDiskService;", "modifier": "final", "type": "FsDatasetAsyncDiskService", "declarator": "asyncDiskService", "var_name": "asyncDiskService"}, {"original_string": "final Daemon lazyWriter;", "modifier": "final", "type": "Daemon", "declarator": "lazyWriter", "var_name": "lazyWriter"}, {"original_string": "final FsDatasetCache cacheManager;", "modifier": "final", "type": "FsDatasetCache", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private final Configuration conf;", "modifier": "private final", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private final int validVolsRequired;", "modifier": "private final", "type": "int", "declarator": "validVolsRequired", "var_name": "validVolsRequired"}, {"original_string": "private volatile boolean fsRunning;", "modifier": "private volatile", "type": "boolean", "declarator": "fsRunning", "var_name": "fsRunning"}, {"original_string": "final ReplicaMap volumeMap;", "modifier": "final", "type": "ReplicaMap", "declarator": "volumeMap", "var_name": "volumeMap"}, {"original_string": "final Map<String, Set<Long>> deletingBlock;", "modifier": "final", "type": "Map<String, Set<Long>>", "declarator": "deletingBlock", "var_name": "deletingBlock"}, {"original_string": "final RamDiskReplicaTracker ramDiskReplicaTracker;", "modifier": "final", "type": "RamDiskReplicaTracker", "declarator": "ramDiskReplicaTracker", "var_name": "ramDiskReplicaTracker"}, {"original_string": "final RamDiskAsyncLazyPersistService asyncLazyPersistService;", "modifier": "final", "type": "RamDiskAsyncLazyPersistService", "declarator": "asyncLazyPersistService", "var_name": "asyncLazyPersistService"}, {"original_string": "private static final int MAX_BLOCK_EVICTIONS_PER_ITERATION = 3;", "modifier": "private static final", "type": "int", "declarator": "MAX_BLOCK_EVICTIONS_PER_ITERATION = 3", "var_name": "MAX_BLOCK_EVICTIONS_PER_ITERATION"}, {"original_string": "private final Object statsLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "statsLock = new Object()", "var_name": "statsLock"}, {"original_string": "final LocalFileSystem localFS;", "modifier": "final", "type": "LocalFileSystem", "declarator": "localFS", "var_name": "localFS"}, {"original_string": "private boolean blockPinningEnabled;", "modifier": "private", "type": "boolean", "declarator": "blockPinningEnabled", "var_name": "blockPinningEnabled"}, {"original_string": "private ObjectName mbeanName;", "modifier": "private", "type": "ObjectName", "declarator": "mbeanName", "var_name": "mbeanName"}], "methods": [{"identifier": "getVolumes", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "List<FsVolumeImpl>", "signature": "List<FsVolumeImpl> getVolumes()", "full_signature": "@Override // FsDatasetSpi public List<FsVolumeImpl> getVolumes()", "class_method_signature": "FsDatasetImpl.getVolumes()", "testcase": false, "constructor": false}, {"identifier": "getStorage", "parameters": "(final String storageUuid)", "modifiers": "@Override public", "return": "DatanodeStorage", "signature": "DatanodeStorage getStorage(final String storageUuid)", "full_signature": "@Override public DatanodeStorage getStorage(final String storageUuid)", "class_method_signature": "FsDatasetImpl.getStorage(final String storageUuid)", "testcase": false, "constructor": false}, {"identifier": "getStorageReports", "parameters": "(String bpid)", "modifiers": "@Override // FsDatasetSpi public", "return": "StorageReport[]", "signature": "StorageReport[] getStorageReports(String bpid)", "full_signature": "@Override // FsDatasetSpi public StorageReport[] getStorageReports(String bpid)", "class_method_signature": "FsDatasetImpl.getStorageReports(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getVolume", "parameters": "(final ExtendedBlock b)", "modifiers": "@Override public synchronized", "return": "FsVolumeImpl", "signature": "FsVolumeImpl getVolume(final ExtendedBlock b)", "full_signature": "@Override public synchronized FsVolumeImpl getVolume(final ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.getVolume(final ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "getStoredBlock", "parameters": "(String bpid, long blkid)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "Block", "signature": "Block getStoredBlock(String bpid, long blkid)", "full_signature": "@Override // FsDatasetSpi public synchronized Block getStoredBlock(String bpid, long blkid)", "class_method_signature": "FsDatasetImpl.getStoredBlock(String bpid, long blkid)", "testcase": false, "constructor": false}, {"identifier": "fetchReplicaInfo", "parameters": "(String bpid, long blockId)", "modifiers": "", "return": "ReplicaInfo", "signature": "ReplicaInfo fetchReplicaInfo(String bpid, long blockId)", "full_signature": " ReplicaInfo fetchReplicaInfo(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.fetchReplicaInfo(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "getMetaDataInputStream", "parameters": "(ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public", "return": "LengthInputStream", "signature": "LengthInputStream getMetaDataInputStream(ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public LengthInputStream getMetaDataInputStream(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.getMetaDataInputStream(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "FsDatasetImpl", "parameters": "(DataNode datanode, DataStorage storage, Configuration conf\n      )", "modifiers": "", "return": "", "signature": " FsDatasetImpl(DataNode datanode, DataStorage storage, Configuration conf\n      )", "full_signature": "  FsDatasetImpl(DataNode datanode, DataStorage storage, Configuration conf\n      )", "class_method_signature": "FsDatasetImpl.FsDatasetImpl(DataNode datanode, DataStorage storage, Configuration conf\n      )", "testcase": false, "constructor": true}, {"identifier": "getInitialVolumeFailureInfos", "parameters": "(\n      Collection<StorageLocation> dataLocations, DataStorage storage)", "modifiers": "private static", "return": "List<VolumeFailureInfo>", "signature": "List<VolumeFailureInfo> getInitialVolumeFailureInfos(\n      Collection<StorageLocation> dataLocations, DataStorage storage)", "full_signature": "private static List<VolumeFailureInfo> getInitialVolumeFailureInfos(\n      Collection<StorageLocation> dataLocations, DataStorage storage)", "class_method_signature": "FsDatasetImpl.getInitialVolumeFailureInfos(\n      Collection<StorageLocation> dataLocations, DataStorage storage)", "testcase": false, "constructor": false}, {"identifier": "addVolume", "parameters": "(Collection<StorageLocation> dataLocations,\n      Storage.StorageDirectory sd)", "modifiers": "private", "return": "void", "signature": "void addVolume(Collection<StorageLocation> dataLocations,\n      Storage.StorageDirectory sd)", "full_signature": "private void addVolume(Collection<StorageLocation> dataLocations,\n      Storage.StorageDirectory sd)", "class_method_signature": "FsDatasetImpl.addVolume(Collection<StorageLocation> dataLocations,\n      Storage.StorageDirectory sd)", "testcase": false, "constructor": false}, {"identifier": "createFsVolume", "parameters": "(String storageUuid, File currentDir,\n      StorageType storageType)", "modifiers": "@VisibleForTesting public", "return": "FsVolumeImpl", "signature": "FsVolumeImpl createFsVolume(String storageUuid, File currentDir,\n      StorageType storageType)", "full_signature": "@VisibleForTesting public FsVolumeImpl createFsVolume(String storageUuid, File currentDir,\n      StorageType storageType)", "class_method_signature": "FsDatasetImpl.createFsVolume(String storageUuid, File currentDir,\n      StorageType storageType)", "testcase": false, "constructor": false}, {"identifier": "addVolume", "parameters": "(final StorageLocation location,\n      final List<NamespaceInfo> nsInfos)", "modifiers": "@Override public", "return": "void", "signature": "void addVolume(final StorageLocation location,\n      final List<NamespaceInfo> nsInfos)", "full_signature": "@Override public void addVolume(final StorageLocation location,\n      final List<NamespaceInfo> nsInfos)", "class_method_signature": "FsDatasetImpl.addVolume(final StorageLocation location,\n      final List<NamespaceInfo> nsInfos)", "testcase": false, "constructor": false}, {"identifier": "removeVolumes", "parameters": "(Set<File> volumesToRemove, boolean clearFailure)", "modifiers": "@Override public", "return": "void", "signature": "void removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "full_signature": "@Override public void removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "class_method_signature": "FsDatasetImpl.removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "testcase": false, "constructor": false}, {"identifier": "getStorageTypeFromLocations", "parameters": "(\n      Collection<StorageLocation> dataLocations, File dir)", "modifiers": "private", "return": "StorageType", "signature": "StorageType getStorageTypeFromLocations(\n      Collection<StorageLocation> dataLocations, File dir)", "full_signature": "private StorageType getStorageTypeFromLocations(\n      Collection<StorageLocation> dataLocations, File dir)", "class_method_signature": "FsDatasetImpl.getStorageTypeFromLocations(\n      Collection<StorageLocation> dataLocations, File dir)", "testcase": false, "constructor": false}, {"identifier": "getDfsUsed", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getDfsUsed()", "full_signature": "@Override // FSDatasetMBean public long getDfsUsed()", "class_method_signature": "FsDatasetImpl.getDfsUsed()", "testcase": false, "constructor": false}, {"identifier": "getBlockPoolUsed", "parameters": "(String bpid)", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getBlockPoolUsed(String bpid)", "full_signature": "@Override // FSDatasetMBean public long getBlockPoolUsed(String bpid)", "class_method_signature": "FsDatasetImpl.getBlockPoolUsed(String bpid)", "testcase": false, "constructor": false}, {"identifier": "hasEnoughResource", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "boolean", "signature": "boolean hasEnoughResource()", "full_signature": "@Override // FsDatasetSpi public boolean hasEnoughResource()", "class_method_signature": "FsDatasetImpl.hasEnoughResource()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getCapacity()", "full_signature": "@Override // FSDatasetMBean public long getCapacity()", "class_method_signature": "FsDatasetImpl.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "getRemaining", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getRemaining()", "full_signature": "@Override // FSDatasetMBean public long getRemaining()", "class_method_signature": "FsDatasetImpl.getRemaining()", "testcase": false, "constructor": false}, {"identifier": "getNumFailedVolumes", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "int", "signature": "int getNumFailedVolumes()", "full_signature": "@Override // FSDatasetMBean public int getNumFailedVolumes()", "class_method_signature": "FsDatasetImpl.getNumFailedVolumes()", "testcase": false, "constructor": false}, {"identifier": "getFailedStorageLocations", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "String[]", "signature": "String[] getFailedStorageLocations()", "full_signature": "@Override // FSDatasetMBean public String[] getFailedStorageLocations()", "class_method_signature": "FsDatasetImpl.getFailedStorageLocations()", "testcase": false, "constructor": false}, {"identifier": "getLastVolumeFailureDate", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getLastVolumeFailureDate()", "full_signature": "@Override // FSDatasetMBean public long getLastVolumeFailureDate()", "class_method_signature": "FsDatasetImpl.getLastVolumeFailureDate()", "testcase": false, "constructor": false}, {"identifier": "getEstimatedCapacityLostTotal", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getEstimatedCapacityLostTotal()", "full_signature": "@Override // FSDatasetMBean public long getEstimatedCapacityLostTotal()", "class_method_signature": "FsDatasetImpl.getEstimatedCapacityLostTotal()", "testcase": false, "constructor": false}, {"identifier": "getVolumeFailureSummary", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "VolumeFailureSummary", "signature": "VolumeFailureSummary getVolumeFailureSummary()", "full_signature": "@Override // FsDatasetSpi public VolumeFailureSummary getVolumeFailureSummary()", "class_method_signature": "FsDatasetImpl.getVolumeFailureSummary()", "testcase": false, "constructor": false}, {"identifier": "getCacheUsed", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getCacheUsed()", "full_signature": "@Override // FSDatasetMBean public long getCacheUsed()", "class_method_signature": "FsDatasetImpl.getCacheUsed()", "testcase": false, "constructor": false}, {"identifier": "getCacheCapacity", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getCacheCapacity()", "full_signature": "@Override // FSDatasetMBean public long getCacheCapacity()", "class_method_signature": "FsDatasetImpl.getCacheCapacity()", "testcase": false, "constructor": false}, {"identifier": "getNumBlocksFailedToCache", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getNumBlocksFailedToCache()", "full_signature": "@Override // FSDatasetMBean public long getNumBlocksFailedToCache()", "class_method_signature": "FsDatasetImpl.getNumBlocksFailedToCache()", "testcase": false, "constructor": false}, {"identifier": "getNumBlocksFailedToUncache", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getNumBlocksFailedToUncache()", "full_signature": "@Override // FSDatasetMBean public long getNumBlocksFailedToUncache()", "class_method_signature": "FsDatasetImpl.getNumBlocksFailedToUncache()", "testcase": false, "constructor": false}, {"identifier": "getNumBlocksCached", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "long", "signature": "long getNumBlocksCached()", "full_signature": "@Override // FSDatasetMBean public long getNumBlocksCached()", "class_method_signature": "FsDatasetImpl.getNumBlocksCached()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "(ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public", "return": "long", "signature": "long getLength(ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public long getLength(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.getLength(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "getBlockFile", "parameters": "(ExtendedBlock b)", "modifiers": "private", "return": "File", "signature": "File getBlockFile(ExtendedBlock b)", "full_signature": "private File getBlockFile(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.getBlockFile(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "getBlockFile", "parameters": "(String bpid, long blockId)", "modifiers": "", "return": "File", "signature": "File getBlockFile(String bpid, long blockId)", "full_signature": " File getBlockFile(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.getBlockFile(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "getBlockFileNoExistsCheck", "parameters": "(ExtendedBlock b,\n                                         boolean touch)", "modifiers": "private", "return": "File", "signature": "File getBlockFileNoExistsCheck(ExtendedBlock b,\n                                         boolean touch)", "full_signature": "private File getBlockFileNoExistsCheck(ExtendedBlock b,\n                                         boolean touch)", "class_method_signature": "FsDatasetImpl.getBlockFileNoExistsCheck(ExtendedBlock b,\n                                         boolean touch)", "testcase": false, "constructor": false}, {"identifier": "getBlockInputStream", "parameters": "(ExtendedBlock b,\n      long seekOffset)", "modifiers": "@Override // FsDatasetSpi public", "return": "InputStream", "signature": "InputStream getBlockInputStream(ExtendedBlock b,\n      long seekOffset)", "full_signature": "@Override // FsDatasetSpi public InputStream getBlockInputStream(ExtendedBlock b,\n      long seekOffset)", "class_method_signature": "FsDatasetImpl.getBlockInputStream(ExtendedBlock b,\n      long seekOffset)", "testcase": false, "constructor": false}, {"identifier": "getReplicaInfo", "parameters": "(ExtendedBlock b)", "modifiers": "", "return": "ReplicaInfo", "signature": "ReplicaInfo getReplicaInfo(ExtendedBlock b)", "full_signature": " ReplicaInfo getReplicaInfo(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.getReplicaInfo(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "getReplicaInfo", "parameters": "(String bpid, long blkid)", "modifiers": "private", "return": "ReplicaInfo", "signature": "ReplicaInfo getReplicaInfo(String bpid, long blkid)", "full_signature": "private ReplicaInfo getReplicaInfo(String bpid, long blkid)", "class_method_signature": "FsDatasetImpl.getReplicaInfo(String bpid, long blkid)", "testcase": false, "constructor": false}, {"identifier": "getTmpInputStreams", "parameters": "(ExtendedBlock b,\n      long blkOffset, long metaOffset)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaInputStreams", "signature": "ReplicaInputStreams getTmpInputStreams(ExtendedBlock b,\n      long blkOffset, long metaOffset)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaInputStreams getTmpInputStreams(ExtendedBlock b,\n      long blkOffset, long metaOffset)", "class_method_signature": "FsDatasetImpl.getTmpInputStreams(ExtendedBlock b,\n      long blkOffset, long metaOffset)", "testcase": false, "constructor": false}, {"identifier": "openAndSeek", "parameters": "(File file, long offset)", "modifiers": "private static", "return": "FileInputStream", "signature": "FileInputStream openAndSeek(File file, long offset)", "full_signature": "private static FileInputStream openAndSeek(File file, long offset)", "class_method_signature": "FsDatasetImpl.openAndSeek(File file, long offset)", "testcase": false, "constructor": false}, {"identifier": "moveBlockFiles", "parameters": "(Block b, File srcfile, File destdir)", "modifiers": "static", "return": "File", "signature": "File moveBlockFiles(Block b, File srcfile, File destdir)", "full_signature": "static File moveBlockFiles(Block b, File srcfile, File destdir)", "class_method_signature": "FsDatasetImpl.moveBlockFiles(Block b, File srcfile, File destdir)", "testcase": false, "constructor": false}, {"identifier": "copyBlockFiles", "parameters": "(long blockId, long genStamp, File srcMeta,\n      File srcFile, File destRoot, boolean calculateChecksum)", "modifiers": "static", "return": "File[]", "signature": "File[] copyBlockFiles(long blockId, long genStamp, File srcMeta,\n      File srcFile, File destRoot, boolean calculateChecksum)", "full_signature": "static File[] copyBlockFiles(long blockId, long genStamp, File srcMeta,\n      File srcFile, File destRoot, boolean calculateChecksum)", "class_method_signature": "FsDatasetImpl.copyBlockFiles(long blockId, long genStamp, File srcMeta,\n      File srcFile, File destRoot, boolean calculateChecksum)", "testcase": false, "constructor": false}, {"identifier": "copyBlockFiles", "parameters": "(File srcMeta, File srcFile, File dstMeta,\n                               File dstFile, boolean calculateChecksum)", "modifiers": "static", "return": "File[]", "signature": "File[] copyBlockFiles(File srcMeta, File srcFile, File dstMeta,\n                               File dstFile, boolean calculateChecksum)", "full_signature": "static File[] copyBlockFiles(File srcMeta, File srcFile, File dstMeta,\n                               File dstFile, boolean calculateChecksum)", "class_method_signature": "FsDatasetImpl.copyBlockFiles(File srcMeta, File srcFile, File dstMeta,\n                               File dstFile, boolean calculateChecksum)", "testcase": false, "constructor": false}, {"identifier": "moveBlockAcrossStorage", "parameters": "(ExtendedBlock block,\n      StorageType targetStorageType)", "modifiers": "@Override public", "return": "ReplicaInfo", "signature": "ReplicaInfo moveBlockAcrossStorage(ExtendedBlock block,\n      StorageType targetStorageType)", "full_signature": "@Override public ReplicaInfo moveBlockAcrossStorage(ExtendedBlock block,\n      StorageType targetStorageType)", "class_method_signature": "FsDatasetImpl.moveBlockAcrossStorage(ExtendedBlock block,\n      StorageType targetStorageType)", "testcase": false, "constructor": false}, {"identifier": "computeChecksum", "parameters": "(File srcMeta, File dstMeta, File blockFile)", "modifiers": "private static", "return": "void", "signature": "void computeChecksum(File srcMeta, File dstMeta, File blockFile)", "full_signature": "private static void computeChecksum(File srcMeta, File dstMeta, File blockFile)", "class_method_signature": "FsDatasetImpl.computeChecksum(File srcMeta, File dstMeta, File blockFile)", "testcase": false, "constructor": false}, {"identifier": "truncateBlock", "parameters": "(File blockFile, File metaFile,\n      long oldlen, long newlen)", "modifiers": "static private", "return": "void", "signature": "void truncateBlock(File blockFile, File metaFile,\n      long oldlen, long newlen)", "full_signature": "static private void truncateBlock(File blockFile, File metaFile,\n      long oldlen, long newlen)", "class_method_signature": "FsDatasetImpl.truncateBlock(File blockFile, File metaFile,\n      long oldlen, long newlen)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(ExtendedBlock b,\n      long newGS, long expectedBlockLen)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaHandler", "signature": "ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen)", "class_method_signature": "FsDatasetImpl.append(ExtendedBlock b,\n      long newGS, long expectedBlockLen)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(String bpid,\n      FinalizedReplica replicaInfo, long newGS, long estimateBlockLen)", "modifiers": "private synchronized", "return": "ReplicaBeingWritten", "signature": "ReplicaBeingWritten append(String bpid,\n      FinalizedReplica replicaInfo, long newGS, long estimateBlockLen)", "full_signature": "private synchronized ReplicaBeingWritten append(String bpid,\n      FinalizedReplica replicaInfo, long newGS, long estimateBlockLen)", "class_method_signature": "FsDatasetImpl.append(String bpid,\n      FinalizedReplica replicaInfo, long newGS, long estimateBlockLen)", "testcase": false, "constructor": false}, {"identifier": "recoverCheck", "parameters": "(ExtendedBlock b, long newGS, \n      long expectedBlockLen)", "modifiers": "private", "return": "ReplicaInfo", "signature": "ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen)", "full_signature": "private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen)", "class_method_signature": "FsDatasetImpl.recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen)", "testcase": false, "constructor": false}, {"identifier": "recoverAppend", "parameters": "(\n      ExtendedBlock b, long newGS, long expectedBlockLen)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaHandler", "signature": "ReplicaHandler recoverAppend(\n      ExtendedBlock b, long newGS, long expectedBlockLen)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaHandler recoverAppend(\n      ExtendedBlock b, long newGS, long expectedBlockLen)", "class_method_signature": "FsDatasetImpl.recoverAppend(\n      ExtendedBlock b, long newGS, long expectedBlockLen)", "testcase": false, "constructor": false}, {"identifier": "recoverClose", "parameters": "(ExtendedBlock b, long newGS,\n      long expectedBlockLen)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "String", "signature": "String recoverClose(ExtendedBlock b, long newGS,\n      long expectedBlockLen)", "full_signature": "@Override // FsDatasetSpi public synchronized String recoverClose(ExtendedBlock b, long newGS,\n      long expectedBlockLen)", "class_method_signature": "FsDatasetImpl.recoverClose(ExtendedBlock b, long newGS,\n      long expectedBlockLen)", "testcase": false, "constructor": false}, {"identifier": "bumpReplicaGS", "parameters": "(ReplicaInfo replicaInfo, \n      long newGS)", "modifiers": "private", "return": "void", "signature": "void bumpReplicaGS(ReplicaInfo replicaInfo, \n      long newGS)", "full_signature": "private void bumpReplicaGS(ReplicaInfo replicaInfo, \n      long newGS)", "class_method_signature": "FsDatasetImpl.bumpReplicaGS(ReplicaInfo replicaInfo, \n      long newGS)", "testcase": false, "constructor": false}, {"identifier": "createRbw", "parameters": "(\n      StorageType storageType, ExtendedBlock b, boolean allowLazyPersist)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaHandler", "signature": "ReplicaHandler createRbw(\n      StorageType storageType, ExtendedBlock b, boolean allowLazyPersist)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaHandler createRbw(\n      StorageType storageType, ExtendedBlock b, boolean allowLazyPersist)", "class_method_signature": "FsDatasetImpl.createRbw(\n      StorageType storageType, ExtendedBlock b, boolean allowLazyPersist)", "testcase": false, "constructor": false}, {"identifier": "recoverRbw", "parameters": "(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaHandler", "signature": "ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)", "class_method_signature": "FsDatasetImpl.recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)", "testcase": false, "constructor": false}, {"identifier": "convertTemporaryToRbw", "parameters": "(\n      final ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaInPipeline", "signature": "ReplicaInPipeline convertTemporaryToRbw(\n      final ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaInPipeline convertTemporaryToRbw(\n      final ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.convertTemporaryToRbw(\n      final ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "createTemporary", "parameters": "(\n      StorageType storageType, ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public", "return": "ReplicaHandler", "signature": "ReplicaHandler createTemporary(\n      StorageType storageType, ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public ReplicaHandler createTemporary(\n      StorageType storageType, ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.createTemporary(\n      StorageType storageType, ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "adjustCrcChannelPosition", "parameters": "(ExtendedBlock b, ReplicaOutputStreams streams, \n      int checksumSize)", "modifiers": "@Override // FsDatasetSpi public", "return": "void", "signature": "void adjustCrcChannelPosition(ExtendedBlock b, ReplicaOutputStreams streams, \n      int checksumSize)", "full_signature": "@Override // FsDatasetSpi public void adjustCrcChannelPosition(ExtendedBlock b, ReplicaOutputStreams streams, \n      int checksumSize)", "class_method_signature": "FsDatasetImpl.adjustCrcChannelPosition(ExtendedBlock b, ReplicaOutputStreams streams, \n      int checksumSize)", "testcase": false, "constructor": false}, {"identifier": "finalizeBlock", "parameters": "(ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "void", "signature": "void finalizeBlock(ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public synchronized void finalizeBlock(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.finalizeBlock(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "finalizeReplica", "parameters": "(String bpid,\n      ReplicaInfo replicaInfo)", "modifiers": "private synchronized", "return": "FinalizedReplica", "signature": "FinalizedReplica finalizeReplica(String bpid,\n      ReplicaInfo replicaInfo)", "full_signature": "private synchronized FinalizedReplica finalizeReplica(String bpid,\n      ReplicaInfo replicaInfo)", "class_method_signature": "FsDatasetImpl.finalizeReplica(String bpid,\n      ReplicaInfo replicaInfo)", "testcase": false, "constructor": false}, {"identifier": "unfinalizeBlock", "parameters": "(ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "void", "signature": "void unfinalizeBlock(ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public synchronized void unfinalizeBlock(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.unfinalizeBlock(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "delBlockFromDisk", "parameters": "(File blockFile, File metaFile, Block b)", "modifiers": "private", "return": "boolean", "signature": "boolean delBlockFromDisk(File blockFile, File metaFile, Block b)", "full_signature": "private boolean delBlockFromDisk(File blockFile, File metaFile, Block b)", "class_method_signature": "FsDatasetImpl.delBlockFromDisk(File blockFile, File metaFile, Block b)", "testcase": false, "constructor": false}, {"identifier": "getBlockReports", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "Map<DatanodeStorage, BlockListAsLongs>", "signature": "Map<DatanodeStorage, BlockListAsLongs> getBlockReports(String bpid)", "full_signature": "@Override public Map<DatanodeStorage, BlockListAsLongs> getBlockReports(String bpid)", "class_method_signature": "FsDatasetImpl.getBlockReports(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getCacheReport", "parameters": "(String bpid)", "modifiers": "@Override // FsDatasetSpi public", "return": "List<Long>", "signature": "List<Long> getCacheReport(String bpid)", "full_signature": "@Override // FsDatasetSpi public List<Long> getCacheReport(String bpid)", "class_method_signature": "FsDatasetImpl.getCacheReport(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getFinalizedBlocks", "parameters": "(String bpid)", "modifiers": "@Override public synchronized", "return": "List<FinalizedReplica>", "signature": "List<FinalizedReplica> getFinalizedBlocks(String bpid)", "full_signature": "@Override public synchronized List<FinalizedReplica> getFinalizedBlocks(String bpid)", "class_method_signature": "FsDatasetImpl.getFinalizedBlocks(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getFinalizedBlocksOnPersistentStorage", "parameters": "(String bpid)", "modifiers": "@Override public synchronized", "return": "List<FinalizedReplica>", "signature": "List<FinalizedReplica> getFinalizedBlocksOnPersistentStorage(String bpid)", "full_signature": "@Override public synchronized List<FinalizedReplica> getFinalizedBlocksOnPersistentStorage(String bpid)", "class_method_signature": "FsDatasetImpl.getFinalizedBlocksOnPersistentStorage(String bpid)", "testcase": false, "constructor": false}, {"identifier": "checkBlock", "parameters": "(ExtendedBlock b, long minLength, ReplicaState state)", "modifiers": "public", "return": "void", "signature": "void checkBlock(ExtendedBlock b, long minLength, ReplicaState state)", "full_signature": "public void checkBlock(ExtendedBlock b, long minLength, ReplicaState state)", "class_method_signature": "FsDatasetImpl.checkBlock(ExtendedBlock b, long minLength, ReplicaState state)", "testcase": false, "constructor": false}, {"identifier": "isValidBlock", "parameters": "(ExtendedBlock b)", "modifiers": "@Override // FsDatasetSpi public", "return": "boolean", "signature": "boolean isValidBlock(ExtendedBlock b)", "full_signature": "@Override // FsDatasetSpi public boolean isValidBlock(ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.isValidBlock(ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "isValidRbw", "parameters": "(final ExtendedBlock b)", "modifiers": "@Override // {@link FsDatasetSpi} public", "return": "boolean", "signature": "boolean isValidRbw(final ExtendedBlock b)", "full_signature": "@Override // {@link FsDatasetSpi} public boolean isValidRbw(final ExtendedBlock b)", "class_method_signature": "FsDatasetImpl.isValidRbw(final ExtendedBlock b)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(final ExtendedBlock b, final ReplicaState state)", "modifiers": "private", "return": "boolean", "signature": "boolean isValid(final ExtendedBlock b, final ReplicaState state)", "full_signature": "private boolean isValid(final ExtendedBlock b, final ReplicaState state)", "class_method_signature": "FsDatasetImpl.isValid(final ExtendedBlock b, final ReplicaState state)", "testcase": false, "constructor": false}, {"identifier": "validateBlockFile", "parameters": "(String bpid, long blockId)", "modifiers": "", "return": "File", "signature": "File validateBlockFile(String bpid, long blockId)", "full_signature": " File validateBlockFile(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.validateBlockFile(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "checkReplicaFiles", "parameters": "(final ReplicaInfo r)", "modifiers": "static", "return": "void", "signature": "void checkReplicaFiles(final ReplicaInfo r)", "full_signature": "static void checkReplicaFiles(final ReplicaInfo r)", "class_method_signature": "FsDatasetImpl.checkReplicaFiles(final ReplicaInfo r)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String bpid, Block invalidBlks[])", "modifiers": "@Override // FsDatasetSpi public", "return": "void", "signature": "void invalidate(String bpid, Block invalidBlks[])", "full_signature": "@Override // FsDatasetSpi public void invalidate(String bpid, Block invalidBlks[])", "class_method_signature": "FsDatasetImpl.invalidate(String bpid, Block invalidBlks[])", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String bpid, ReplicaInfo block)", "modifiers": "public", "return": "void", "signature": "void invalidate(String bpid, ReplicaInfo block)", "full_signature": "public void invalidate(String bpid, ReplicaInfo block)", "class_method_signature": "FsDatasetImpl.invalidate(String bpid, ReplicaInfo block)", "testcase": false, "constructor": false}, {"identifier": "cacheBlock", "parameters": "(String bpid, long blockId)", "modifiers": "private", "return": "void", "signature": "void cacheBlock(String bpid, long blockId)", "full_signature": "private void cacheBlock(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.cacheBlock(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "cache", "parameters": "(String bpid, long[] blockIds)", "modifiers": "@Override // FsDatasetSpi public", "return": "void", "signature": "void cache(String bpid, long[] blockIds)", "full_signature": "@Override // FsDatasetSpi public void cache(String bpid, long[] blockIds)", "class_method_signature": "FsDatasetImpl.cache(String bpid, long[] blockIds)", "testcase": false, "constructor": false}, {"identifier": "uncache", "parameters": "(String bpid, long[] blockIds)", "modifiers": "@Override // FsDatasetSpi public", "return": "void", "signature": "void uncache(String bpid, long[] blockIds)", "full_signature": "@Override // FsDatasetSpi public void uncache(String bpid, long[] blockIds)", "class_method_signature": "FsDatasetImpl.uncache(String bpid, long[] blockIds)", "testcase": false, "constructor": false}, {"identifier": "isCached", "parameters": "(String bpid, long blockId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCached(String bpid, long blockId)", "full_signature": "@Override public boolean isCached(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.isCached(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final ExtendedBlock block)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "boolean", "signature": "boolean contains(final ExtendedBlock block)", "full_signature": "@Override // FsDatasetSpi public synchronized boolean contains(final ExtendedBlock block)", "class_method_signature": "FsDatasetImpl.contains(final ExtendedBlock block)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(final String bpid, final long blockId, boolean touch)", "modifiers": "", "return": "File", "signature": "File getFile(final String bpid, final long blockId, boolean touch)", "full_signature": " File getFile(final String bpid, final long blockId, boolean touch)", "class_method_signature": "FsDatasetImpl.getFile(final String bpid, final long blockId, boolean touch)", "testcase": false, "constructor": false}, {"identifier": "checkDataDir", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "Set<File>", "signature": "Set<File> checkDataDir()", "full_signature": "@Override // FsDatasetSpi public Set<File> checkDataDir()", "class_method_signature": "FsDatasetImpl.checkDataDir()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "String", "signature": "String toString()", "full_signature": "@Override // FsDatasetSpi public String toString()", "class_method_signature": "FsDatasetImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "registerMBean", "parameters": "(final String datanodeUuid)", "modifiers": "", "return": "void", "signature": "void registerMBean(final String datanodeUuid)", "full_signature": " void registerMBean(final String datanodeUuid)", "class_method_signature": "FsDatasetImpl.registerMBean(final String datanodeUuid)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override // FsDatasetSpi public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override // FsDatasetSpi public void shutdown()", "class_method_signature": "FsDatasetImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getStorageInfo", "parameters": "()", "modifiers": "@Override // FSDatasetMBean public", "return": "String", "signature": "String getStorageInfo()", "full_signature": "@Override // FSDatasetMBean public String getStorageInfo()", "class_method_signature": "FsDatasetImpl.getStorageInfo()", "testcase": false, "constructor": false}, {"identifier": "checkAndUpdate", "parameters": "(String bpid, long blockId, File diskFile,\n      File diskMetaFile, FsVolumeSpi vol)", "modifiers": "@Override public", "return": "void", "signature": "void checkAndUpdate(String bpid, long blockId, File diskFile,\n      File diskMetaFile, FsVolumeSpi vol)", "full_signature": "@Override public void checkAndUpdate(String bpid, long blockId, File diskFile,\n      File diskMetaFile, FsVolumeSpi vol)", "class_method_signature": "FsDatasetImpl.checkAndUpdate(String bpid, long blockId, File diskFile,\n      File diskMetaFile, FsVolumeSpi vol)", "testcase": false, "constructor": false}, {"identifier": "getReplica", "parameters": "(String bpid, long blockId)", "modifiers": "@Override // FsDatasetSpi @Deprecated public", "return": "ReplicaInfo", "signature": "ReplicaInfo getReplica(String bpid, long blockId)", "full_signature": "@Override // FsDatasetSpi @Deprecated public ReplicaInfo getReplica(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.getReplica(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "getReplicaString", "parameters": "(String bpid, long blockId)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String getReplicaString(String bpid, long blockId)", "full_signature": "@Override public synchronized String getReplicaString(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.getReplicaString(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "initReplicaRecovery", "parameters": "(\n      RecoveringBlock rBlock)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "ReplicaRecoveryInfo", "signature": "ReplicaRecoveryInfo initReplicaRecovery(\n      RecoveringBlock rBlock)", "full_signature": "@Override // FsDatasetSpi public synchronized ReplicaRecoveryInfo initReplicaRecovery(\n      RecoveringBlock rBlock)", "class_method_signature": "FsDatasetImpl.initReplicaRecovery(\n      RecoveringBlock rBlock)", "testcase": false, "constructor": false}, {"identifier": "initReplicaRecovery", "parameters": "(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout)", "modifiers": "static", "return": "ReplicaRecoveryInfo", "signature": "ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout)", "full_signature": "static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout)", "class_method_signature": "FsDatasetImpl.initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout)", "testcase": false, "constructor": false}, {"identifier": "updateReplicaUnderRecovery", "parameters": "(\n                                    final ExtendedBlock oldBlock,\n                                    final long recoveryId,\n                                    final long newBlockId,\n                                    final long newlength)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "String", "signature": "String updateReplicaUnderRecovery(\n                                    final ExtendedBlock oldBlock,\n                                    final long recoveryId,\n                                    final long newBlockId,\n                                    final long newlength)", "full_signature": "@Override // FsDatasetSpi public synchronized String updateReplicaUnderRecovery(\n                                    final ExtendedBlock oldBlock,\n                                    final long recoveryId,\n                                    final long newBlockId,\n                                    final long newlength)", "class_method_signature": "FsDatasetImpl.updateReplicaUnderRecovery(\n                                    final ExtendedBlock oldBlock,\n                                    final long recoveryId,\n                                    final long newBlockId,\n                                    final long newlength)", "testcase": false, "constructor": false}, {"identifier": "updateReplicaUnderRecovery", "parameters": "(\n                                          String bpid,\n                                          ReplicaUnderRecovery rur,\n                                          long recoveryId,\n                                          long newBlockId,\n                                          long newlength)", "modifiers": "private", "return": "FinalizedReplica", "signature": "FinalizedReplica updateReplicaUnderRecovery(\n                                          String bpid,\n                                          ReplicaUnderRecovery rur,\n                                          long recoveryId,\n                                          long newBlockId,\n                                          long newlength)", "full_signature": "private FinalizedReplica updateReplicaUnderRecovery(\n                                          String bpid,\n                                          ReplicaUnderRecovery rur,\n                                          long recoveryId,\n                                          long newBlockId,\n                                          long newlength)", "class_method_signature": "FsDatasetImpl.updateReplicaUnderRecovery(\n                                          String bpid,\n                                          ReplicaUnderRecovery rur,\n                                          long recoveryId,\n                                          long newBlockId,\n                                          long newlength)", "testcase": false, "constructor": false}, {"identifier": "copyReplicaWithNewBlockIdAndGS", "parameters": "(\n      ReplicaUnderRecovery replicaInfo, String bpid, long newBlkId, long newGS)", "modifiers": "private", "return": "File[]", "signature": "File[] copyReplicaWithNewBlockIdAndGS(\n      ReplicaUnderRecovery replicaInfo, String bpid, long newBlkId, long newGS)", "full_signature": "private File[] copyReplicaWithNewBlockIdAndGS(\n      ReplicaUnderRecovery replicaInfo, String bpid, long newBlkId, long newGS)", "class_method_signature": "FsDatasetImpl.copyReplicaWithNewBlockIdAndGS(\n      ReplicaUnderRecovery replicaInfo, String bpid, long newBlkId, long newGS)", "testcase": false, "constructor": false}, {"identifier": "getReplicaVisibleLength", "parameters": "(final ExtendedBlock block)", "modifiers": "@Override // FsDatasetSpi public synchronized", "return": "long", "signature": "long getReplicaVisibleLength(final ExtendedBlock block)", "full_signature": "@Override // FsDatasetSpi public synchronized long getReplicaVisibleLength(final ExtendedBlock block)", "class_method_signature": "FsDatasetImpl.getReplicaVisibleLength(final ExtendedBlock block)", "testcase": false, "constructor": false}, {"identifier": "addBlockPool", "parameters": "(String bpid, Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void addBlockPool(String bpid, Configuration conf)", "full_signature": "@Override public void addBlockPool(String bpid, Configuration conf)", "class_method_signature": "FsDatasetImpl.addBlockPool(String bpid, Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "shutdownBlockPool", "parameters": "(String bpid)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdownBlockPool(String bpid)", "full_signature": "@Override public synchronized void shutdownBlockPool(String bpid)", "class_method_signature": "FsDatasetImpl.shutdownBlockPool(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getVolumeInfo", "parameters": "()", "modifiers": "private", "return": "Collection<VolumeInfo>", "signature": "Collection<VolumeInfo> getVolumeInfo()", "full_signature": "private Collection<VolumeInfo> getVolumeInfo()", "class_method_signature": "FsDatasetImpl.getVolumeInfo()", "testcase": false, "constructor": false}, {"identifier": "getVolumeInfoMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getVolumeInfoMap()", "full_signature": "@Override public Map<String, Object> getVolumeInfoMap()", "class_method_signature": "FsDatasetImpl.getVolumeInfoMap()", "testcase": false, "constructor": false}, {"identifier": "deleteBlockPool", "parameters": "(String bpid, boolean force)", "modifiers": "@Override //FsDatasetSpi public synchronized", "return": "void", "signature": "void deleteBlockPool(String bpid, boolean force)", "full_signature": "@Override //FsDatasetSpi public synchronized void deleteBlockPool(String bpid, boolean force)", "class_method_signature": "FsDatasetImpl.deleteBlockPool(String bpid, boolean force)", "testcase": false, "constructor": false}, {"identifier": "getBlockLocalPathInfo", "parameters": "(ExtendedBlock block)", "modifiers": "@Override // FsDatasetSpi public", "return": "BlockLocalPathInfo", "signature": "BlockLocalPathInfo getBlockLocalPathInfo(ExtendedBlock block)", "full_signature": "@Override // FsDatasetSpi public BlockLocalPathInfo getBlockLocalPathInfo(ExtendedBlock block)", "class_method_signature": "FsDatasetImpl.getBlockLocalPathInfo(ExtendedBlock block)", "testcase": false, "constructor": false}, {"identifier": "getHdfsBlocksMetadata", "parameters": "(String poolId,\n      long[] blockIds)", "modifiers": "@Override // FsDatasetSpi public", "return": "HdfsBlocksMetadata", "signature": "HdfsBlocksMetadata getHdfsBlocksMetadata(String poolId,\n      long[] blockIds)", "full_signature": "@Override // FsDatasetSpi public HdfsBlocksMetadata getHdfsBlocksMetadata(String poolId,\n      long[] blockIds)", "class_method_signature": "FsDatasetImpl.getHdfsBlocksMetadata(String poolId,\n      long[] blockIds)", "testcase": false, "constructor": false}, {"identifier": "enableTrash", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "void", "signature": "void enableTrash(String bpid)", "full_signature": "@Override public void enableTrash(String bpid)", "class_method_signature": "FsDatasetImpl.enableTrash(String bpid)", "testcase": false, "constructor": false}, {"identifier": "clearTrash", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "void", "signature": "void clearTrash(String bpid)", "full_signature": "@Override public void clearTrash(String bpid)", "class_method_signature": "FsDatasetImpl.clearTrash(String bpid)", "testcase": false, "constructor": false}, {"identifier": "trashEnabled", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean trashEnabled(String bpid)", "full_signature": "@Override public boolean trashEnabled(String bpid)", "class_method_signature": "FsDatasetImpl.trashEnabled(String bpid)", "testcase": false, "constructor": false}, {"identifier": "setRollingUpgradeMarker", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "void", "signature": "void setRollingUpgradeMarker(String bpid)", "full_signature": "@Override public void setRollingUpgradeMarker(String bpid)", "class_method_signature": "FsDatasetImpl.setRollingUpgradeMarker(String bpid)", "testcase": false, "constructor": false}, {"identifier": "clearRollingUpgradeMarker", "parameters": "(String bpid)", "modifiers": "@Override public", "return": "void", "signature": "void clearRollingUpgradeMarker(String bpid)", "full_signature": "@Override public void clearRollingUpgradeMarker(String bpid)", "class_method_signature": "FsDatasetImpl.clearRollingUpgradeMarker(String bpid)", "testcase": false, "constructor": false}, {"identifier": "onCompleteLazyPersist", "parameters": "(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume)", "modifiers": "@Override public", "return": "void", "signature": "void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume)", "full_signature": "@Override public void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume)", "class_method_signature": "FsDatasetImpl.onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume)", "testcase": false, "constructor": false}, {"identifier": "onFailLazyPersist", "parameters": "(String bpId, long blockId)", "modifiers": "@Override public", "return": "void", "signature": "void onFailLazyPersist(String bpId, long blockId)", "full_signature": "@Override public void onFailLazyPersist(String bpId, long blockId)", "class_method_signature": "FsDatasetImpl.onFailLazyPersist(String bpId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "submitBackgroundSyncFileRangeRequest", "parameters": "(ExtendedBlock block,\n      FileDescriptor fd, long offset, long nbytes, int flags)", "modifiers": "@Override public", "return": "void", "signature": "void submitBackgroundSyncFileRangeRequest(ExtendedBlock block,\n      FileDescriptor fd, long offset, long nbytes, int flags)", "full_signature": "@Override public void submitBackgroundSyncFileRangeRequest(ExtendedBlock block,\n      FileDescriptor fd, long offset, long nbytes, int flags)", "class_method_signature": "FsDatasetImpl.submitBackgroundSyncFileRangeRequest(ExtendedBlock block,\n      FileDescriptor fd, long offset, long nbytes, int flags)", "testcase": false, "constructor": false}, {"identifier": "ramDiskConfigured", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean ramDiskConfigured()", "full_signature": "private boolean ramDiskConfigured()", "class_method_signature": "FsDatasetImpl.ramDiskConfigured()", "testcase": false, "constructor": false}, {"identifier": "setupAsyncLazyPersistThreads", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupAsyncLazyPersistThreads()", "full_signature": "private void setupAsyncLazyPersistThreads()", "class_method_signature": "FsDatasetImpl.setupAsyncLazyPersistThreads()", "testcase": false, "constructor": false}, {"identifier": "setupAsyncLazyPersistThread", "parameters": "(final FsVolumeImpl v)", "modifiers": "private", "return": "void", "signature": "void setupAsyncLazyPersistThread(final FsVolumeImpl v)", "full_signature": "private void setupAsyncLazyPersistThread(final FsVolumeImpl v)", "class_method_signature": "FsDatasetImpl.setupAsyncLazyPersistThread(final FsVolumeImpl v)", "testcase": false, "constructor": false}, {"identifier": "removeOldReplica", "parameters": "(ReplicaInfo replicaInfo,\n      ReplicaInfo newReplicaInfo, File blockFile, File metaFile,\n      long blockFileUsed, long metaFileUsed, final String bpid)", "modifiers": "private", "return": "void", "signature": "void removeOldReplica(ReplicaInfo replicaInfo,\n      ReplicaInfo newReplicaInfo, File blockFile, File metaFile,\n      long blockFileUsed, long metaFileUsed, final String bpid)", "full_signature": "private void removeOldReplica(ReplicaInfo replicaInfo,\n      ReplicaInfo newReplicaInfo, File blockFile, File metaFile,\n      long blockFileUsed, long metaFileUsed, final String bpid)", "class_method_signature": "FsDatasetImpl.removeOldReplica(ReplicaInfo replicaInfo,\n      ReplicaInfo newReplicaInfo, File blockFile, File metaFile,\n      long blockFileUsed, long metaFileUsed, final String bpid)", "testcase": false, "constructor": false}, {"identifier": "setPinning", "parameters": "(ExtendedBlock block)", "modifiers": "@Override public", "return": "void", "signature": "void setPinning(ExtendedBlock block)", "full_signature": "@Override public void setPinning(ExtendedBlock block)", "class_method_signature": "FsDatasetImpl.setPinning(ExtendedBlock block)", "testcase": false, "constructor": false}, {"identifier": "getPinning", "parameters": "(ExtendedBlock block)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getPinning(ExtendedBlock block)", "full_signature": "@Override public boolean getPinning(ExtendedBlock block)", "class_method_signature": "FsDatasetImpl.getPinning(ExtendedBlock block)", "testcase": false, "constructor": false}, {"identifier": "isDeletingBlock", "parameters": "(String bpid, long blockId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeletingBlock(String bpid, long blockId)", "full_signature": "@Override public boolean isDeletingBlock(String bpid, long blockId)", "class_method_signature": "FsDatasetImpl.isDeletingBlock(String bpid, long blockId)", "testcase": false, "constructor": false}, {"identifier": "removeDeletedBlocks", "parameters": "(String bpid, Set<Long> blockIds)", "modifiers": "public", "return": "void", "signature": "void removeDeletedBlocks(String bpid, Set<Long> blockIds)", "full_signature": "public void removeDeletedBlocks(String bpid, Set<Long> blockIds)", "class_method_signature": "FsDatasetImpl.removeDeletedBlocks(String bpid, Set<Long> blockIds)", "testcase": false, "constructor": false}, {"identifier": "addDeletingBlock", "parameters": "(String bpid, Long blockId)", "modifiers": "private", "return": "void", "signature": "void addDeletingBlock(String bpid, Long blockId)", "full_signature": "private void addDeletingBlock(String bpid, Long blockId)", "class_method_signature": "FsDatasetImpl.addDeletingBlock(String bpid, Long blockId)", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java"}, "focal_method": {"identifier": "removeVolumes", "parameters": "(Set<File> volumesToRemove, boolean clearFailure)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void removeVolumes(Set<File> volumesToRemove, boolean clearFailure) {\n    // Make sure that all volumes are absolute path.\n    for (File vol : volumesToRemove) {\n      Preconditions.checkArgument(vol.isAbsolute(),\n          String.format(\"%s is not absolute path.\", vol.getPath()));\n    }\n\n    Map<String, List<ReplicaInfo>> blkToInvalidate = new HashMap<>();\n    List<String> storageToRemove = new ArrayList<>();\n    synchronized (this) {\n      for (int idx = 0; idx < dataStorage.getNumStorageDirs(); idx++) {\n        Storage.StorageDirectory sd = dataStorage.getStorageDir(idx);\n        final File absRoot = sd.getRoot().getAbsoluteFile();\n        if (volumesToRemove.contains(absRoot)) {\n          LOG.info(\"Removing \" + absRoot + \" from FsDataset.\");\n\n          // Disable the volume from the service.\n          asyncDiskService.removeVolume(sd.getCurrentDir());\n          volumes.removeVolume(absRoot, clearFailure);\n\n          // Removed all replica information for the blocks on the volume.\n          // Unlike updating the volumeMap in addVolume(), this operation does\n          // not scan disks.\n          for (String bpid : volumeMap.getBlockPoolList()) {\n            List<ReplicaInfo> blocks = new ArrayList<>();\n            for (Iterator<ReplicaInfo> it = volumeMap.replicas(bpid).iterator();\n                 it.hasNext(); ) {\n              ReplicaInfo block = it.next();\n              final File absBasePath =\n                  new File(block.getVolume().getBasePath()).getAbsoluteFile();\n              if (absBasePath.equals(absRoot)) {\n                blocks.add(block);\n                it.remove();\n              }\n            }\n            blkToInvalidate.put(bpid, blocks);\n          }\n\n          storageToRemove.add(sd.getStorageUuid());\n        }\n      }\n      setupAsyncLazyPersistThreads();\n    }\n\n    // Call this outside the lock.\n    for (Map.Entry<String, List<ReplicaInfo>> entry :\n        blkToInvalidate.entrySet()) {\n      String bpid = entry.getKey();\n      List<ReplicaInfo> blocks = entry.getValue();\n      for (ReplicaInfo block : blocks) {\n        invalidate(bpid, block);\n      }\n    }\n\n    synchronized (this) {\n      for(String storageUuid : storageToRemove) {\n        storageMap.remove(storageUuid);\n      }\n    }\n  }", "signature": "void removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "full_signature": "@Override public void removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "class_method_signature": "FsDatasetImpl.removeVolumes(Set<File> volumesToRemove, boolean clearFailure)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isAbsolute", "format", "getPath", "getNumStorageDirs", "getStorageDir", "getAbsoluteFile", "getRoot", "contains", "info", "removeVolume", "getCurrentDir", "removeVolume", "getBlockPoolList", "iterator", "replicas", "hasNext", "next", "getAbsoluteFile", "getBasePath", "getVolume", "equals", "add", "remove", "put", "add", "getStorageUuid", "setupAsyncLazyPersistThreads", "entrySet", "getKey", "getValue", "invalidate", "remove"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}