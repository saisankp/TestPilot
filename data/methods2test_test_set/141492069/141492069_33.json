{"test_class": {"identifier": "TestJMSCore", "superclass": "extends TestJMSBase", "interfaces": "", "fields": [{"original_string": "NoSendJMSCore core;", "modifier": "", "type": "NoSendJMSCore", "declarator": "core", "var_name": "core"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "String authToken;", "modifier": "", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "String targetVantiqServer;", "modifier": "", "type": "String", "declarator": "targetVantiqServer", "var_name": "targetVantiqServer"}, {"original_string": "JMS jms;", "modifier": "", "type": "JMS", "declarator": "jms", "var_name": "jms"}], "file": "jmsSource/src/test/java/io/vantiq/extsrc/jmsSource/TestJMSCore.java"}, "test_case": {"identifier": "testExitIfConnectionFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExitIfConnectionFails() {        \n        core.start(3);\n        assertTrue(\"Should have succeeded\", core.exitIfConnectionFails(core.client, 3));\n        assertFalse(\"Success means it shouldn't be closed\", core.isClosed());\n        \n        \n        core.close();\n        core = new NoSendJMSCore(sourceName, authToken, targetVantiqServer);\n        FalseClient fc = new FalseClient(sourceName);\n        core.client = core.fClient = fc;\n        fc.initiateFullConnection(targetVantiqServer, authToken);\n        fc.completeWebSocketConnection(true);\n        fc.completeAuthentication(false);\n        assertFalse(\"Should fail due to authentication failing\", core.exitIfConnectionFails(core.client, 3));\n        assertFalse(\"Failure does not mean it should be closed\", core.isClosed());\n        \n        core.close();\n        core = new NoSendJMSCore(sourceName, authToken, targetVantiqServer);\n        fc = new FalseClient(sourceName);\n        core.client = core.fClient = fc;\n        fc.initiateFullConnection(targetVantiqServer, authToken);\n        fc.completeWebSocketConnection(false);\n        assertFalse(\"Should fail due to WebSocket failing\", core.exitIfConnectionFails(core.client, 3));\n        assertFalse(\"Failure does not mean it should be closed\", core.isClosed());\n        \n        core.close();\n        core = new NoSendJMSCore(sourceName, authToken, targetVantiqServer);\n        fc = new FalseClient(sourceName);\n        core.client = core.fClient = fc;\n        fc.initiateFullConnection(targetVantiqServer, authToken);\n        fc.completeWebSocketConnection(true);\n        fc.completeAuthentication(true);\n        assertFalse(\"Should fail due to timeout on source connection\", core.exitIfConnectionFails(core.client, 3));\n        assertFalse(\"Failure does not mean it should be closed\", core.isClosed());\n    }", "signature": "void testExitIfConnectionFails()", "full_signature": "@Test public void testExitIfConnectionFails()", "class_method_signature": "TestJMSCore.testExitIfConnectionFails()", "testcase": true, "constructor": false, "invocations": ["start", "assertTrue", "exitIfConnectionFails", "assertFalse", "isClosed", "close", "initiateFullConnection", "completeWebSocketConnection", "completeAuthentication", "assertFalse", "exitIfConnectionFails", "assertFalse", "isClosed", "close", "initiateFullConnection", "completeWebSocketConnection", "assertFalse", "exitIfConnectionFails", "assertFalse", "isClosed", "close", "initiateFullConnection", "completeWebSocketConnection", "completeAuthentication", "assertFalse", "exitIfConnectionFails", "assertFalse", "isClosed"]}, "focal_class": {"identifier": "JMSCore", "superclass": "", "interfaces": "", "fields": [{"original_string": "String initialContextCheck = null;", "modifier": "", "type": "String", "declarator": "initialContextCheck = null", "var_name": "initialContextCheck"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "String authToken;", "modifier": "", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "String targetVantiqServer;", "modifier": "", "type": "String", "declarator": "targetVantiqServer", "var_name": "targetVantiqServer"}, {"original_string": "JMSHandleConfiguration jmsConfigHandler;", "modifier": "", "type": "JMSHandleConfiguration", "declarator": "jmsConfigHandler", "var_name": "jmsConfigHandler"}, {"original_string": "ExtensionWebSocketClient client = null;", "modifier": "", "type": "ExtensionWebSocketClient", "declarator": "client = null", "var_name": "client"}, {"original_string": "JMS jms = null;", "modifier": "", "type": "JMS", "declarator": "jms = null", "var_name": "jms"}, {"original_string": "final Logger log;", "modifier": "final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "final static int RECONNECT_INTERVAL = 5000;", "modifier": "final static", "type": "int", "declarator": "RECONNECT_INTERVAL = 5000", "var_name": "RECONNECT_INTERVAL"}, {"original_string": "final static int CONNECTION_TIMEOUT = 10;", "modifier": "final static", "type": "int", "declarator": "CONNECTION_TIMEOUT = 10", "var_name": "CONNECTION_TIMEOUT"}, {"original_string": "private static final String SYNCH_LOCK = \"synchLock\";", "modifier": "private static final", "type": "String", "declarator": "SYNCH_LOCK = \"synchLock\"", "var_name": "SYNCH_LOCK"}, {"original_string": "public final Handler<ExtensionServiceMessage> reconnectHandler = new Handler<ExtensionServiceMessage>() {\n        @Override\n        public void handleMessage(ExtensionServiceMessage message) {\n            log.trace(\"Reconnect message received. Reinitializing configuration\");\n\n            jmsConfigHandler.configComplete = false;\n\n            CompletableFuture<Boolean> success = client.connectToSource();\n\n            try {\n                if ( !success.get(CONNECTION_TIMEOUT, TimeUnit.SECONDS) ) {\n                    if (!client.isOpen()) {\n                        log.error(\"Failed to connect to server url '\" + targetVantiqServer + \"'.\");\n                    } else if (!client.isAuthed()) {\n                        log.error(\"Failed to authenticate within 10 seconds using the given authentication data.\");\n                    } else {\n                        log.error(\"Failed to connect within 10 seconds\");\n                    }\n                    close();\n                }\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                log.error(\"Could not reconnect to source within 10 seconds: \", e);\n                close();\n            }\n        }\n    };", "modifier": "public final", "type": "Handler<ExtensionServiceMessage>", "declarator": "reconnectHandler = new Handler<ExtensionServiceMessage>() {\n        @Override\n        public void handleMessage(ExtensionServiceMessage message) {\n            log.trace(\"Reconnect message received. Reinitializing configuration\");\n\n            jmsConfigHandler.configComplete = false;\n\n            CompletableFuture<Boolean> success = client.connectToSource();\n\n            try {\n                if ( !success.get(CONNECTION_TIMEOUT, TimeUnit.SECONDS) ) {\n                    if (!client.isOpen()) {\n                        log.error(\"Failed to connect to server url '\" + targetVantiqServer + \"'.\");\n                    } else if (!client.isAuthed()) {\n                        log.error(\"Failed to authenticate within 10 seconds using the given authentication data.\");\n                    } else {\n                        log.error(\"Failed to connect within 10 seconds\");\n                    }\n                    close();\n                }\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                log.error(\"Could not reconnect to source within 10 seconds: \", e);\n                close();\n            }\n        }\n    }", "var_name": "reconnectHandler"}, {"original_string": "public final Handler<ExtensionWebSocketClient> closeHandler = new Handler<ExtensionWebSocketClient>() {\n        @Override\n        public void handleMessage(ExtensionWebSocketClient message) {\n            log.trace(\"WebSocket closed unexpectedly. Attempting to reconnect\");\n\n            jmsConfigHandler.configComplete = false;\n\n            boolean sourcesSucceeded = false;\n            while (!sourcesSucceeded) {\n                client.initiateFullConnection(targetVantiqServer, authToken);\n                sourcesSucceeded = exitIfConnectionFails(client, CONNECTION_TIMEOUT);\n                if (!sourcesSucceeded) {\n                    try {\n                        Thread.sleep(RECONNECT_INTERVAL);\n                    } catch (InterruptedException e) {\n                        log.error(\"An error occurred when trying to sleep the current thread. Error Message: \", e);\n                    }\n                }\n            }\n        }\n    };", "modifier": "public final", "type": "Handler<ExtensionWebSocketClient>", "declarator": "closeHandler = new Handler<ExtensionWebSocketClient>() {\n        @Override\n        public void handleMessage(ExtensionWebSocketClient message) {\n            log.trace(\"WebSocket closed unexpectedly. Attempting to reconnect\");\n\n            jmsConfigHandler.configComplete = false;\n\n            boolean sourcesSucceeded = false;\n            while (!sourcesSucceeded) {\n                client.initiateFullConnection(targetVantiqServer, authToken);\n                sourcesSucceeded = exitIfConnectionFails(client, CONNECTION_TIMEOUT);\n                if (!sourcesSucceeded) {\n                    try {\n                        Thread.sleep(RECONNECT_INTERVAL);\n                    } catch (InterruptedException e) {\n                        log.error(\"An error occurred when trying to sleep the current thread. Error Message: \", e);\n                    }\n                }\n            }\n        }\n    }", "var_name": "closeHandler"}], "methods": [{"identifier": "JMSCore", "parameters": "(String sourceName, String authToken, String targetVantiqServer)", "modifiers": "public", "return": "", "signature": " JMSCore(String sourceName, String authToken, String targetVantiqServer)", "full_signature": "public  JMSCore(String sourceName, String authToken, String targetVantiqServer)", "class_method_signature": "JMSCore.JMSCore(String sourceName, String authToken, String targetVantiqServer)", "testcase": false, "constructor": true}, {"identifier": "getSourceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSourceName()", "full_signature": "public String getSourceName()", "class_method_signature": "JMSCore.getSourceName()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(int timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean start(int timeout)", "full_signature": "public boolean start(int timeout)", "class_method_signature": "JMSCore.start(int timeout)", "testcase": false, "constructor": false}, {"identifier": "sendJMSMessage", "parameters": "(ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "signature": "void sendJMSMessage(ExtensionServiceMessage message)", "full_signature": "public void sendJMSMessage(ExtensionServiceMessage message)", "class_method_signature": "JMSCore.sendJMSMessage(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "readQueueMessage", "parameters": "(ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "signature": "void readQueueMessage(ExtensionServiceMessage message)", "full_signature": "public void readQueueMessage(ExtensionServiceMessage message)", "class_method_signature": "JMSCore.readQueueMessage(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "JMSCore.close()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JMSCore.stop()", "testcase": false, "constructor": false}, {"identifier": "exitIfConnectionFails", "parameters": "(ExtensionWebSocketClient client, int timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "full_signature": "public boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "class_method_signature": "JMSCore.exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "testcase": false, "constructor": false}], "file": "jmsSource/src/main/java/io/vantiq/extsrc/jmsSource/JMSCore.java"}, "focal_method": {"identifier": "exitIfConnectionFails", "parameters": "(ExtensionWebSocketClient client, int timeout)", "modifiers": "public", "return": "boolean", "body": "public boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout) {\n        boolean sourcesSucceeded = false;\n        try {\n            sourcesSucceeded = client.getSourceConnectionFuture().get(timeout, TimeUnit.SECONDS);\n        }\n        catch (TimeoutException e) {\n            log.error(\"Timeout: full connection did not succeed within {} seconds: {}\", timeout, e);\n        }\n        catch (Exception e) {\n            log.error(\"Exception occurred while waiting for webSocket connection\", e);\n        }\n        if (!sourcesSucceeded) {\n            log.error(\"Failed to connect to all sources.\");\n            if (!client.isOpen()) {\n                log.error(\"Failed to connect to server url '\" + targetVantiqServer + \"'.\");\n            } else if (!client.isAuthed()) {\n                log.error(\"Failed to authenticate within \" + timeout + \" seconds using the given authentication data.\");\n            } else {\n                log.error(\"Failed to connect within 10 seconds\");\n            }\n            return false;\n        }\n        return true;\n    }", "signature": "boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "full_signature": "public boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "class_method_signature": "JMSCore.exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "testcase": false, "constructor": false, "invocations": ["get", "getSourceConnectionFuture", "error", "error", "error", "isOpen", "error", "isAuthed", "error", "error"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}