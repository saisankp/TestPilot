{"test_class": {"identifier": "RxJavaPluginsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Function<Scheduler, Scheduler> replaceWithImmediate = new Function<Scheduler, Scheduler>() {\n        @Override\n        public Scheduler apply(Scheduler t) {\n            return ImmediateThinScheduler.INSTANCE;\n        }\n    };", "modifier": "", "type": "Function<Scheduler, Scheduler>", "declarator": "replaceWithImmediate = new Function<Scheduler, Scheduler>() {\n        @Override\n        public Scheduler apply(Scheduler t) {\n            return ImmediateThinScheduler.INSTANCE;\n        }\n    }", "var_name": "replaceWithImmediate"}, {"original_string": "Function<Callable<Scheduler>, Scheduler> initReplaceWithImmediate = new Function<Callable<Scheduler>, Scheduler>() {\n        @Override\n        public Scheduler apply(Callable<Scheduler> t) {\n            return ImmediateThinScheduler.INSTANCE;\n        }\n    };", "modifier": "", "type": "Function<Callable<Scheduler>, Scheduler>", "declarator": "initReplaceWithImmediate = new Function<Callable<Scheduler>, Scheduler>() {\n        @Override\n        public Scheduler apply(Callable<Scheduler> t) {\n            return ImmediateThinScheduler.INSTANCE;\n        }\n    }", "var_name": "initReplaceWithImmediate"}, {"original_string": "Callable<Scheduler> nullResultCallable = new Callable<Scheduler>() {\n        @Override\n        public Scheduler call() throws Exception {\n            return null;\n        }\n    };", "modifier": "", "type": "Callable<Scheduler>", "declarator": "nullResultCallable = new Callable<Scheduler>() {\n        @Override\n        public Scheduler call() throws Exception {\n            return null;\n        }\n    }", "var_name": "nullResultCallable"}, {"original_string": "Callable<Scheduler> unsafeDefault = new Callable<Scheduler>() {\n        @Override\n        public Scheduler call() throws Exception {\n            throw new AssertionError(\"Default Scheduler instance should not have been evaluated\");\n        }\n    };", "modifier": "", "type": "Callable<Scheduler>", "declarator": "unsafeDefault = new Callable<Scheduler>() {\n        @Override\n        public Scheduler call() throws Exception {\n            throw new AssertionError(\"Default Scheduler instance should not have been evaluated\");\n        }\n    }", "var_name": "unsafeDefault"}], "file": "rxjava/src/test/java/io/reactivex/plugins/RxJavaPluginsTest.java"}, "test_case": {"identifier": "onScheduleIO", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onScheduleIO() throws InterruptedException {\n        onSchedule(Schedulers.io().createWorker());\n    }", "signature": "void onScheduleIO()", "full_signature": "@Test public void onScheduleIO()", "class_method_signature": "RxJavaPluginsTest.onScheduleIO()", "testcase": true, "constructor": false, "invocations": ["onSchedule", "createWorker", "io"]}, "focal_class": {"identifier": "RxJavaPlugins", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nullable\n    static volatile Consumer<? super Throwable> errorHandler;", "modifier": "@Nullable\n    static volatile", "type": "Consumer<? super Throwable>", "declarator": "errorHandler", "var_name": "errorHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Runnable, ? extends Runnable> onScheduleHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Runnable, ? extends Runnable>", "declarator": "onScheduleHandler", "var_name": "onScheduleHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitComputationHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "declarator": "onInitComputationHandler", "var_name": "onInitComputationHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitSingleHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "declarator": "onInitSingleHandler", "var_name": "onInitSingleHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitIoHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "declarator": "onInitIoHandler", "var_name": "onInitIoHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitNewThreadHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "declarator": "onInitNewThreadHandler", "var_name": "onInitNewThreadHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Scheduler, ? extends Scheduler> onComputationHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Scheduler, ? extends Scheduler>", "declarator": "onComputationHandler", "var_name": "onComputationHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Scheduler, ? extends Scheduler> onSingleHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Scheduler, ? extends Scheduler>", "declarator": "onSingleHandler", "var_name": "onSingleHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Scheduler, ? extends Scheduler> onIoHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Scheduler, ? extends Scheduler>", "declarator": "onIoHandler", "var_name": "onIoHandler"}, {"original_string": "@Nullable\n    static volatile Function<? super Scheduler, ? extends Scheduler> onNewThreadHandler;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Scheduler, ? extends Scheduler>", "declarator": "onNewThreadHandler", "var_name": "onNewThreadHandler"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super Flowable, ? extends Flowable> onFlowableAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super Flowable, ? extends Flowable>", "declarator": "onFlowableAssembly", "var_name": "onFlowableAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super ConnectableFlowable, ? extends ConnectableFlowable>", "declarator": "onConnectableFlowableAssembly", "var_name": "onConnectableFlowableAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super Observable, ? extends Observable> onObservableAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super Observable, ? extends Observable>", "declarator": "onObservableAssembly", "var_name": "onObservableAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super ConnectableObservable, ? extends ConnectableObservable>", "declarator": "onConnectableObservableAssembly", "var_name": "onConnectableObservableAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super Maybe, ? extends Maybe> onMaybeAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super Maybe, ? extends Maybe>", "declarator": "onMaybeAssembly", "var_name": "onMaybeAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super Single, ? extends Single> onSingleAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super Single, ? extends Single>", "declarator": "onSingleAssembly", "var_name": "onSingleAssembly"}, {"original_string": "@Nullable\n    static volatile Function<? super Completable, ? extends Completable> onCompletableAssembly;", "modifier": "@Nullable\n    static volatile", "type": "Function<? super Completable, ? extends Completable>", "declarator": "onCompletableAssembly", "var_name": "onCompletableAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile Function<? super ParallelFlowable, ? extends ParallelFlowable> onParallelAssembly;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "Function<? super ParallelFlowable, ? extends ParallelFlowable>", "declarator": "onParallelAssembly", "var_name": "onParallelAssembly"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber>", "declarator": "onFlowableSubscribe", "var_name": "onFlowableSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver>", "declarator": "onMaybeSubscribe", "var_name": "onMaybeSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "BiFunction<? super Observable, ? super Observer, ? extends Observer>", "declarator": "onObservableSubscribe", "var_name": "onObservableSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    @Nullable\n    static volatile", "type": "BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver>", "declarator": "onSingleSubscribe", "var_name": "onSingleSubscribe"}, {"original_string": "@Nullable\n    static volatile BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe;", "modifier": "@Nullable\n    static volatile", "type": "BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver>", "declarator": "onCompletableSubscribe", "var_name": "onCompletableSubscribe"}, {"original_string": "@Nullable\n    static volatile BooleanSupplier onBeforeBlocking;", "modifier": "@Nullable\n    static volatile", "type": "BooleanSupplier", "declarator": "onBeforeBlocking", "var_name": "onBeforeBlocking"}, {"original_string": "static volatile boolean lockdown;", "modifier": "static volatile", "type": "boolean", "declarator": "lockdown", "var_name": "lockdown"}, {"original_string": "static volatile boolean failNonBlockingScheduler;", "modifier": "static volatile", "type": "boolean", "declarator": "failNonBlockingScheduler", "var_name": "failNonBlockingScheduler"}], "methods": [{"identifier": "lockdown", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void lockdown()", "full_signature": "public static void lockdown()", "class_method_signature": "RxJavaPlugins.lockdown()", "testcase": false, "constructor": false}, {"identifier": "isLockdown", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isLockdown()", "full_signature": "public static boolean isLockdown()", "class_method_signature": "RxJavaPlugins.isLockdown()", "testcase": false, "constructor": false}, {"identifier": "setFailOnNonBlockingScheduler", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void setFailOnNonBlockingScheduler(boolean enable)", "full_signature": "public static void setFailOnNonBlockingScheduler(boolean enable)", "class_method_signature": "RxJavaPlugins.setFailOnNonBlockingScheduler(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "isFailOnNonBlockingScheduler", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isFailOnNonBlockingScheduler()", "full_signature": "public static boolean isFailOnNonBlockingScheduler()", "class_method_signature": "RxJavaPlugins.isFailOnNonBlockingScheduler()", "testcase": false, "constructor": false}, {"identifier": "getComputationSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Scheduler, ? extends Scheduler>", "signature": "Function<? super Scheduler, ? extends Scheduler> getComputationSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Scheduler, ? extends Scheduler> getComputationSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getComputationSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getErrorHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Consumer<? super Throwable>", "signature": "Consumer<? super Throwable> getErrorHandler()", "full_signature": "@Nullable public static Consumer<? super Throwable> getErrorHandler()", "class_method_signature": "RxJavaPlugins.getErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "getInitComputationSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "signature": "Function<? super Callable<Scheduler>, ? extends Scheduler> getInitComputationSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitComputationSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getInitComputationSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getInitIoSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "signature": "Function<? super Callable<Scheduler>, ? extends Scheduler> getInitIoSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitIoSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getInitIoSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getInitNewThreadSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "signature": "Function<? super Callable<Scheduler>, ? extends Scheduler> getInitNewThreadSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitNewThreadSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getInitNewThreadSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getInitSingleSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Callable<Scheduler>, ? extends Scheduler>", "signature": "Function<? super Callable<Scheduler>, ? extends Scheduler> getInitSingleSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitSingleSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getInitSingleSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getIoSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Scheduler, ? extends Scheduler>", "signature": "Function<? super Scheduler, ? extends Scheduler> getIoSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Scheduler, ? extends Scheduler> getIoSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getIoSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getNewThreadSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Scheduler, ? extends Scheduler>", "signature": "Function<? super Scheduler, ? extends Scheduler> getNewThreadSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Scheduler, ? extends Scheduler> getNewThreadSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getNewThreadSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "getScheduleHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Runnable, ? extends Runnable>", "signature": "Function<? super Runnable, ? extends Runnable> getScheduleHandler()", "full_signature": "@Nullable public static Function<? super Runnable, ? extends Runnable> getScheduleHandler()", "class_method_signature": "RxJavaPlugins.getScheduleHandler()", "testcase": false, "constructor": false}, {"identifier": "getSingleSchedulerHandler", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Scheduler, ? extends Scheduler>", "signature": "Function<? super Scheduler, ? extends Scheduler> getSingleSchedulerHandler()", "full_signature": "@Nullable public static Function<? super Scheduler, ? extends Scheduler> getSingleSchedulerHandler()", "class_method_signature": "RxJavaPlugins.getSingleSchedulerHandler()", "testcase": false, "constructor": false}, {"identifier": "initComputationScheduler", "parameters": "(@NonNull Callable<Scheduler> defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler initComputationScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "full_signature": "@NonNull public static Scheduler initComputationScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "class_method_signature": "RxJavaPlugins.initComputationScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "initIoScheduler", "parameters": "(@NonNull Callable<Scheduler> defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler initIoScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "full_signature": "@NonNull public static Scheduler initIoScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "class_method_signature": "RxJavaPlugins.initIoScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "initNewThreadScheduler", "parameters": "(@NonNull Callable<Scheduler> defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler initNewThreadScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "full_signature": "@NonNull public static Scheduler initNewThreadScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "class_method_signature": "RxJavaPlugins.initNewThreadScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "initSingleScheduler", "parameters": "(@NonNull Callable<Scheduler> defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler initSingleScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "full_signature": "@NonNull public static Scheduler initSingleScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "class_method_signature": "RxJavaPlugins.initSingleScheduler(@NonNull Callable<Scheduler> defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "onComputationScheduler", "parameters": "(@NonNull Scheduler defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler onComputationScheduler(@NonNull Scheduler defaultScheduler)", "full_signature": "@NonNull public static Scheduler onComputationScheduler(@NonNull Scheduler defaultScheduler)", "class_method_signature": "RxJavaPlugins.onComputationScheduler(@NonNull Scheduler defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(@NonNull Throwable error)", "modifiers": "public static", "return": "void", "signature": "void onError(@NonNull Throwable error)", "full_signature": "public static void onError(@NonNull Throwable error)", "class_method_signature": "RxJavaPlugins.onError(@NonNull Throwable error)", "testcase": false, "constructor": false}, {"identifier": "isBug", "parameters": "(Throwable error)", "modifiers": "static", "return": "boolean", "signature": "boolean isBug(Throwable error)", "full_signature": "static boolean isBug(Throwable error)", "class_method_signature": "RxJavaPlugins.isBug(Throwable error)", "testcase": false, "constructor": false}, {"identifier": "uncaught", "parameters": "(@NonNull Throwable error)", "modifiers": "static", "return": "void", "signature": "void uncaught(@NonNull Throwable error)", "full_signature": "static void uncaught(@NonNull Throwable error)", "class_method_signature": "RxJavaPlugins.uncaught(@NonNull Throwable error)", "testcase": false, "constructor": false}, {"identifier": "onIoScheduler", "parameters": "(@NonNull Scheduler defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler onIoScheduler(@NonNull Scheduler defaultScheduler)", "full_signature": "@NonNull public static Scheduler onIoScheduler(@NonNull Scheduler defaultScheduler)", "class_method_signature": "RxJavaPlugins.onIoScheduler(@NonNull Scheduler defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "onNewThreadScheduler", "parameters": "(@NonNull Scheduler defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler onNewThreadScheduler(@NonNull Scheduler defaultScheduler)", "full_signature": "@NonNull public static Scheduler onNewThreadScheduler(@NonNull Scheduler defaultScheduler)", "class_method_signature": "RxJavaPlugins.onNewThreadScheduler(@NonNull Scheduler defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "onSchedule", "parameters": "(@NonNull Runnable run)", "modifiers": "@NonNull public static", "return": "Runnable", "signature": "Runnable onSchedule(@NonNull Runnable run)", "full_signature": "@NonNull public static Runnable onSchedule(@NonNull Runnable run)", "class_method_signature": "RxJavaPlugins.onSchedule(@NonNull Runnable run)", "testcase": false, "constructor": false}, {"identifier": "onSingleScheduler", "parameters": "(@NonNull Scheduler defaultScheduler)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler onSingleScheduler(@NonNull Scheduler defaultScheduler)", "full_signature": "@NonNull public static Scheduler onSingleScheduler(@NonNull Scheduler defaultScheduler)", "class_method_signature": "RxJavaPlugins.onSingleScheduler(@NonNull Scheduler defaultScheduler)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "RxJavaPlugins.reset()", "testcase": false, "constructor": false}, {"identifier": "setComputationSchedulerHandler", "parameters": "(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setComputationSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "full_signature": "public static void setComputationSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setComputationSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setErrorHandler", "parameters": "(@Nullable Consumer<? super Throwable> handler)", "modifiers": "public static", "return": "void", "signature": "void setErrorHandler(@Nullable Consumer<? super Throwable> handler)", "full_signature": "public static void setErrorHandler(@Nullable Consumer<? super Throwable> handler)", "class_method_signature": "RxJavaPlugins.setErrorHandler(@Nullable Consumer<? super Throwable> handler)", "testcase": false, "constructor": false}, {"identifier": "setInitComputationSchedulerHandler", "parameters": "(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setInitComputationSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "full_signature": "public static void setInitComputationSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setInitComputationSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setInitIoSchedulerHandler", "parameters": "(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setInitIoSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "full_signature": "public static void setInitIoSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setInitIoSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setInitNewThreadSchedulerHandler", "parameters": "(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setInitNewThreadSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "full_signature": "public static void setInitNewThreadSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setInitNewThreadSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setInitSingleSchedulerHandler", "parameters": "(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setInitSingleSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "full_signature": "public static void setInitSingleSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setInitSingleSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setIoSchedulerHandler", "parameters": "(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setIoSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "full_signature": "public static void setIoSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setIoSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setNewThreadSchedulerHandler", "parameters": "(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setNewThreadSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "full_signature": "public static void setNewThreadSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setNewThreadSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "setScheduleHandler", "parameters": "(@Nullable Function<? super Runnable, ? extends Runnable> handler)", "modifiers": "public static", "return": "void", "signature": "void setScheduleHandler(@Nullable Function<? super Runnable, ? extends Runnable> handler)", "full_signature": "public static void setScheduleHandler(@Nullable Function<? super Runnable, ? extends Runnable> handler)", "class_method_signature": "RxJavaPlugins.setScheduleHandler(@Nullable Function<? super Runnable, ? extends Runnable> handler)", "testcase": false, "constructor": false}, {"identifier": "setSingleSchedulerHandler", "parameters": "(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "modifiers": "public static", "return": "void", "signature": "void setSingleSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "full_signature": "public static void setSingleSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "class_method_signature": "RxJavaPlugins.setSingleSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler)", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void unlock()", "full_signature": "static void unlock()", "class_method_signature": "RxJavaPlugins.unlock()", "testcase": false, "constructor": false}, {"identifier": "getOnCompletableAssembly", "parameters": "()", "modifiers": "@Nullable public static", "return": "Function<? super Completable, ? extends Completable>", "signature": "Function<? super Completable, ? extends Completable> getOnCompletableAssembly()", "full_signature": "@Nullable public static Function<? super Completable, ? extends Completable> getOnCompletableAssembly()", "class_method_signature": "RxJavaPlugins.getOnCompletableAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnCompletableSubscribe", "parameters": "()", "modifiers": "@Nullable public static", "return": "BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver>", "signature": "BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> getOnCompletableSubscribe()", "full_signature": "@Nullable public static BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> getOnCompletableSubscribe()", "class_method_signature": "RxJavaPlugins.getOnCompletableSubscribe()", "testcase": false, "constructor": false}, {"identifier": "getOnFlowableAssembly", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Nullable public static", "return": "Function<? super Flowable, ? extends Flowable>", "signature": "Function<? super Flowable, ? extends Flowable> getOnFlowableAssembly()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Nullable public static Function<? super Flowable, ? extends Flowable> getOnFlowableAssembly()", "class_method_signature": "RxJavaPlugins.getOnFlowableAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnConnectableFlowableAssembly", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Nullable public static", "return": "Function<? super ConnectableFlowable, ? extends ConnectableFlowable>", "signature": "Function<? super ConnectableFlowable, ? extends ConnectableFlowable> getOnConnectableFlowableAssembly()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Nullable public static Function<? super ConnectableFlowable, ? extends ConnectableFlowable> getOnConnectableFlowableAssembly()", "class_method_signature": "RxJavaPlugins.getOnConnectableFlowableAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnFlowableSubscribe", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber>", "signature": "BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> getOnFlowableSubscribe()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> getOnFlowableSubscribe()", "class_method_signature": "RxJavaPlugins.getOnFlowableSubscribe()", "testcase": false, "constructor": false}, {"identifier": "getOnMaybeSubscribe", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver>", "signature": "BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> getOnMaybeSubscribe()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> getOnMaybeSubscribe()", "class_method_signature": "RxJavaPlugins.getOnMaybeSubscribe()", "testcase": false, "constructor": false}, {"identifier": "getOnMaybeAssembly", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "Function<? super Maybe, ? extends Maybe>", "signature": "Function<? super Maybe, ? extends Maybe> getOnMaybeAssembly()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static Function<? super Maybe, ? extends Maybe> getOnMaybeAssembly()", "class_method_signature": "RxJavaPlugins.getOnMaybeAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnSingleAssembly", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "Function<? super Single, ? extends Single>", "signature": "Function<? super Single, ? extends Single> getOnSingleAssembly()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static Function<? super Single, ? extends Single> getOnSingleAssembly()", "class_method_signature": "RxJavaPlugins.getOnSingleAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnSingleSubscribe", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver>", "signature": "BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> getOnSingleSubscribe()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> getOnSingleSubscribe()", "class_method_signature": "RxJavaPlugins.getOnSingleSubscribe()", "testcase": false, "constructor": false}, {"identifier": "getOnObservableAssembly", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "Function<? super Observable, ? extends Observable>", "signature": "Function<? super Observable, ? extends Observable> getOnObservableAssembly()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static Function<? super Observable, ? extends Observable> getOnObservableAssembly()", "class_method_signature": "RxJavaPlugins.getOnObservableAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnConnectableObservableAssembly", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "Function<? super ConnectableObservable, ? extends ConnectableObservable>", "signature": "Function<? super ConnectableObservable, ? extends ConnectableObservable> getOnConnectableObservableAssembly()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static Function<? super ConnectableObservable, ? extends ConnectableObservable> getOnConnectableObservableAssembly()", "class_method_signature": "RxJavaPlugins.getOnConnectableObservableAssembly()", "testcase": false, "constructor": false}, {"identifier": "getOnObservableSubscribe", "parameters": "()", "modifiers": "@Nullable @SuppressWarnings(\"rawtypes\") public static", "return": "BiFunction<? super Observable, ? super Observer, ? extends Observer>", "signature": "BiFunction<? super Observable, ? super Observer, ? extends Observer> getOnObservableSubscribe()", "full_signature": "@Nullable @SuppressWarnings(\"rawtypes\") public static BiFunction<? super Observable, ? super Observer, ? extends Observer> getOnObservableSubscribe()", "class_method_signature": "RxJavaPlugins.getOnObservableSubscribe()", "testcase": false, "constructor": false}, {"identifier": "setOnCompletableAssembly", "parameters": "(@Nullable Function<? super Completable, ? extends Completable> onCompletableAssembly)", "modifiers": "public static", "return": "void", "signature": "void setOnCompletableAssembly(@Nullable Function<? super Completable, ? extends Completable> onCompletableAssembly)", "full_signature": "public static void setOnCompletableAssembly(@Nullable Function<? super Completable, ? extends Completable> onCompletableAssembly)", "class_method_signature": "RxJavaPlugins.setOnCompletableAssembly(@Nullable Function<? super Completable, ? extends Completable> onCompletableAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnCompletableSubscribe", "parameters": "(\n            @Nullable BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe)", "modifiers": "public static", "return": "void", "signature": "void setOnCompletableSubscribe(\n            @Nullable BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe)", "full_signature": "public static void setOnCompletableSubscribe(\n            @Nullable BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe)", "class_method_signature": "RxJavaPlugins.setOnCompletableSubscribe(\n            @Nullable BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe)", "testcase": false, "constructor": false}, {"identifier": "setOnFlowableAssembly", "parameters": "(@Nullable Function<? super Flowable, ? extends Flowable> onFlowableAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnFlowableAssembly(@Nullable Function<? super Flowable, ? extends Flowable> onFlowableAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnFlowableAssembly(@Nullable Function<? super Flowable, ? extends Flowable> onFlowableAssembly)", "class_method_signature": "RxJavaPlugins.setOnFlowableAssembly(@Nullable Function<? super Flowable, ? extends Flowable> onFlowableAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnMaybeAssembly", "parameters": "(@Nullable Function<? super Maybe, ? extends Maybe> onMaybeAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnMaybeAssembly(@Nullable Function<? super Maybe, ? extends Maybe> onMaybeAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnMaybeAssembly(@Nullable Function<? super Maybe, ? extends Maybe> onMaybeAssembly)", "class_method_signature": "RxJavaPlugins.setOnMaybeAssembly(@Nullable Function<? super Maybe, ? extends Maybe> onMaybeAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnConnectableFlowableAssembly", "parameters": "(@Nullable Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnConnectableFlowableAssembly(@Nullable Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnConnectableFlowableAssembly(@Nullable Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly)", "class_method_signature": "RxJavaPlugins.setOnConnectableFlowableAssembly(@Nullable Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnFlowableSubscribe", "parameters": "(@Nullable BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnFlowableSubscribe(@Nullable BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnFlowableSubscribe(@Nullable BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe)", "class_method_signature": "RxJavaPlugins.setOnFlowableSubscribe(@Nullable BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe)", "testcase": false, "constructor": false}, {"identifier": "setOnMaybeSubscribe", "parameters": "(@Nullable BiFunction<? super Maybe, MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnMaybeSubscribe(@Nullable BiFunction<? super Maybe, MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnMaybeSubscribe(@Nullable BiFunction<? super Maybe, MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe)", "class_method_signature": "RxJavaPlugins.setOnMaybeSubscribe(@Nullable BiFunction<? super Maybe, MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe)", "testcase": false, "constructor": false}, {"identifier": "setOnObservableAssembly", "parameters": "(@Nullable Function<? super Observable, ? extends Observable> onObservableAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnObservableAssembly(@Nullable Function<? super Observable, ? extends Observable> onObservableAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnObservableAssembly(@Nullable Function<? super Observable, ? extends Observable> onObservableAssembly)", "class_method_signature": "RxJavaPlugins.setOnObservableAssembly(@Nullable Function<? super Observable, ? extends Observable> onObservableAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnConnectableObservableAssembly", "parameters": "(@Nullable Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnConnectableObservableAssembly(@Nullable Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnConnectableObservableAssembly(@Nullable Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly)", "class_method_signature": "RxJavaPlugins.setOnConnectableObservableAssembly(@Nullable Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnObservableSubscribe", "parameters": "(\n            @Nullable BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnObservableSubscribe(\n            @Nullable BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnObservableSubscribe(\n            @Nullable BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe)", "class_method_signature": "RxJavaPlugins.setOnObservableSubscribe(\n            @Nullable BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe)", "testcase": false, "constructor": false}, {"identifier": "setOnSingleAssembly", "parameters": "(@Nullable Function<? super Single, ? extends Single> onSingleAssembly)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnSingleAssembly(@Nullable Function<? super Single, ? extends Single> onSingleAssembly)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnSingleAssembly(@Nullable Function<? super Single, ? extends Single> onSingleAssembly)", "class_method_signature": "RxJavaPlugins.setOnSingleAssembly(@Nullable Function<? super Single, ? extends Single> onSingleAssembly)", "testcase": false, "constructor": false}, {"identifier": "setOnSingleSubscribe", "parameters": "(@Nullable BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnSingleSubscribe(@Nullable BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static void setOnSingleSubscribe(@Nullable BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe)", "class_method_signature": "RxJavaPlugins.setOnSingleSubscribe(@Nullable BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(@NonNull Flowable<T> source, @NonNull Subscriber<? super T> subscriber)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Subscriber<? super T>", "signature": "Subscriber<? super T> onSubscribe(@NonNull Flowable<T> source, @NonNull Subscriber<? super T> subscriber)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Subscriber<? super T> onSubscribe(@NonNull Flowable<T> source, @NonNull Subscriber<? super T> subscriber)", "class_method_signature": "RxJavaPlugins.onSubscribe(@NonNull Flowable<T> source, @NonNull Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(@NonNull Observable<T> source, @NonNull Observer<? super T> observer)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Observer<? super T>", "signature": "Observer<? super T> onSubscribe(@NonNull Observable<T> source, @NonNull Observer<? super T> observer)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Observer<? super T> onSubscribe(@NonNull Observable<T> source, @NonNull Observer<? super T> observer)", "class_method_signature": "RxJavaPlugins.onSubscribe(@NonNull Observable<T> source, @NonNull Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(@NonNull Single<T> source, @NonNull SingleObserver<? super T> observer)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "SingleObserver<? super T>", "signature": "SingleObserver<? super T> onSubscribe(@NonNull Single<T> source, @NonNull SingleObserver<? super T> observer)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static SingleObserver<? super T> onSubscribe(@NonNull Single<T> source, @NonNull SingleObserver<? super T> observer)", "class_method_signature": "RxJavaPlugins.onSubscribe(@NonNull Single<T> source, @NonNull SingleObserver<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(@NonNull Completable source, @NonNull CompletableObserver observer)", "modifiers": "@NonNull public static", "return": "CompletableObserver", "signature": "CompletableObserver onSubscribe(@NonNull Completable source, @NonNull CompletableObserver observer)", "full_signature": "@NonNull public static CompletableObserver onSubscribe(@NonNull Completable source, @NonNull CompletableObserver observer)", "class_method_signature": "RxJavaPlugins.onSubscribe(@NonNull Completable source, @NonNull CompletableObserver observer)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(@NonNull Maybe<T> source, @NonNull MaybeObserver<? super T> subscriber)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "MaybeObserver<? super T>", "signature": "MaybeObserver<? super T> onSubscribe(@NonNull Maybe<T> source, @NonNull MaybeObserver<? super T> subscriber)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static MaybeObserver<? super T> onSubscribe(@NonNull Maybe<T> source, @NonNull MaybeObserver<? super T> subscriber)", "class_method_signature": "RxJavaPlugins.onSubscribe(@NonNull Maybe<T> source, @NonNull MaybeObserver<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull Maybe<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Maybe<T>", "signature": "Maybe<T> onAssembly(@NonNull Maybe<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Maybe<T> onAssembly(@NonNull Maybe<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull Maybe<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull Flowable<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Flowable<T>", "signature": "Flowable<T> onAssembly(@NonNull Flowable<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Flowable<T> onAssembly(@NonNull Flowable<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull Flowable<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull ConnectableFlowable<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> onAssembly(@NonNull ConnectableFlowable<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static ConnectableFlowable<T> onAssembly(@NonNull ConnectableFlowable<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull ConnectableFlowable<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull Observable<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Observable<T>", "signature": "Observable<T> onAssembly(@NonNull Observable<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Observable<T> onAssembly(@NonNull Observable<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull Observable<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull ConnectableObservable<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> onAssembly(@NonNull ConnectableObservable<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static ConnectableObservable<T> onAssembly(@NonNull ConnectableObservable<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull ConnectableObservable<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull Single<T> source)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "Single<T>", "signature": "Single<T> onAssembly(@NonNull Single<T> source)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static Single<T> onAssembly(@NonNull Single<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull Single<T> source)", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull Completable source)", "modifiers": "@NonNull public static", "return": "Completable", "signature": "Completable onAssembly(@NonNull Completable source)", "full_signature": "@NonNull public static Completable onAssembly(@NonNull Completable source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull Completable source)", "testcase": false, "constructor": false}, {"identifier": "setOnParallelAssembly", "parameters": "(@Nullable Function<? super ParallelFlowable, ? extends ParallelFlowable> handler)", "modifiers": "@Beta @SuppressWarnings(\"rawtypes\") public static", "return": "void", "signature": "void setOnParallelAssembly(@Nullable Function<? super ParallelFlowable, ? extends ParallelFlowable> handler)", "full_signature": "@Beta @SuppressWarnings(\"rawtypes\") public static void setOnParallelAssembly(@Nullable Function<? super ParallelFlowable, ? extends ParallelFlowable> handler)", "class_method_signature": "RxJavaPlugins.setOnParallelAssembly(@Nullable Function<? super ParallelFlowable, ? extends ParallelFlowable> handler)", "testcase": false, "constructor": false}, {"identifier": "getOnParallelAssembly", "parameters": "()", "modifiers": "@Beta @SuppressWarnings(\"rawtypes\") @Nullable public static", "return": "Function<? super ParallelFlowable, ? extends ParallelFlowable>", "signature": "Function<? super ParallelFlowable, ? extends ParallelFlowable> getOnParallelAssembly()", "full_signature": "@Beta @SuppressWarnings(\"rawtypes\") @Nullable public static Function<? super ParallelFlowable, ? extends ParallelFlowable> getOnParallelAssembly()", "class_method_signature": "RxJavaPlugins.getOnParallelAssembly()", "testcase": false, "constructor": false}, {"identifier": "onAssembly", "parameters": "(@NonNull ParallelFlowable<T> source)", "modifiers": "@Beta @SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static", "return": "ParallelFlowable<T>", "signature": "ParallelFlowable<T> onAssembly(@NonNull ParallelFlowable<T> source)", "full_signature": "@Beta @SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @NonNull public static ParallelFlowable<T> onAssembly(@NonNull ParallelFlowable<T> source)", "class_method_signature": "RxJavaPlugins.onAssembly(@NonNull ParallelFlowable<T> source)", "testcase": false, "constructor": false}, {"identifier": "onBeforeBlocking", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean onBeforeBlocking()", "full_signature": "public static boolean onBeforeBlocking()", "class_method_signature": "RxJavaPlugins.onBeforeBlocking()", "testcase": false, "constructor": false}, {"identifier": "setOnBeforeBlocking", "parameters": "(@Nullable BooleanSupplier handler)", "modifiers": "public static", "return": "void", "signature": "void setOnBeforeBlocking(@Nullable BooleanSupplier handler)", "full_signature": "public static void setOnBeforeBlocking(@Nullable BooleanSupplier handler)", "class_method_signature": "RxJavaPlugins.setOnBeforeBlocking(@Nullable BooleanSupplier handler)", "testcase": false, "constructor": false}, {"identifier": "getOnBeforeBlocking", "parameters": "()", "modifiers": "@Nullable public static", "return": "BooleanSupplier", "signature": "BooleanSupplier getOnBeforeBlocking()", "full_signature": "@Nullable public static BooleanSupplier getOnBeforeBlocking()", "class_method_signature": "RxJavaPlugins.getOnBeforeBlocking()", "testcase": false, "constructor": false}, {"identifier": "createComputationScheduler", "parameters": "(@NonNull ThreadFactory threadFactory)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler createComputationScheduler(@NonNull ThreadFactory threadFactory)", "full_signature": "@NonNull public static Scheduler createComputationScheduler(@NonNull ThreadFactory threadFactory)", "class_method_signature": "RxJavaPlugins.createComputationScheduler(@NonNull ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "createIoScheduler", "parameters": "(@NonNull ThreadFactory threadFactory)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler createIoScheduler(@NonNull ThreadFactory threadFactory)", "full_signature": "@NonNull public static Scheduler createIoScheduler(@NonNull ThreadFactory threadFactory)", "class_method_signature": "RxJavaPlugins.createIoScheduler(@NonNull ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "createNewThreadScheduler", "parameters": "(@NonNull ThreadFactory threadFactory)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler createNewThreadScheduler(@NonNull ThreadFactory threadFactory)", "full_signature": "@NonNull public static Scheduler createNewThreadScheduler(@NonNull ThreadFactory threadFactory)", "class_method_signature": "RxJavaPlugins.createNewThreadScheduler(@NonNull ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "createSingleScheduler", "parameters": "(@NonNull ThreadFactory threadFactory)", "modifiers": "@NonNull public static", "return": "Scheduler", "signature": "Scheduler createSingleScheduler(@NonNull ThreadFactory threadFactory)", "full_signature": "@NonNull public static Scheduler createSingleScheduler(@NonNull ThreadFactory threadFactory)", "class_method_signature": "RxJavaPlugins.createSingleScheduler(@NonNull ThreadFactory threadFactory)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@NonNull Function<T, R> f, @NonNull T t)", "modifiers": "@NonNull static", "return": "R", "signature": "R apply(@NonNull Function<T, R> f, @NonNull T t)", "full_signature": "@NonNull static R apply(@NonNull Function<T, R> f, @NonNull T t)", "class_method_signature": "RxJavaPlugins.apply(@NonNull Function<T, R> f, @NonNull T t)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@NonNull BiFunction<T, U, R> f, @NonNull T t, @NonNull U u)", "modifiers": "@NonNull static", "return": "R", "signature": "R apply(@NonNull BiFunction<T, U, R> f, @NonNull T t, @NonNull U u)", "full_signature": "@NonNull static R apply(@NonNull BiFunction<T, U, R> f, @NonNull T t, @NonNull U u)", "class_method_signature": "RxJavaPlugins.apply(@NonNull BiFunction<T, U, R> f, @NonNull T t, @NonNull U u)", "testcase": false, "constructor": false}, {"identifier": "callRequireNonNull", "parameters": "(@NonNull Callable<Scheduler> s)", "modifiers": "@NonNull static", "return": "Scheduler", "signature": "Scheduler callRequireNonNull(@NonNull Callable<Scheduler> s)", "full_signature": "@NonNull static Scheduler callRequireNonNull(@NonNull Callable<Scheduler> s)", "class_method_signature": "RxJavaPlugins.callRequireNonNull(@NonNull Callable<Scheduler> s)", "testcase": false, "constructor": false}, {"identifier": "applyRequireNonNull", "parameters": "(@NonNull Function<? super Callable<Scheduler>, ? extends Scheduler> f, Callable<Scheduler> s)", "modifiers": "@NonNull static", "return": "Scheduler", "signature": "Scheduler applyRequireNonNull(@NonNull Function<? super Callable<Scheduler>, ? extends Scheduler> f, Callable<Scheduler> s)", "full_signature": "@NonNull static Scheduler applyRequireNonNull(@NonNull Function<? super Callable<Scheduler>, ? extends Scheduler> f, Callable<Scheduler> s)", "class_method_signature": "RxJavaPlugins.applyRequireNonNull(@NonNull Function<? super Callable<Scheduler>, ? extends Scheduler> f, Callable<Scheduler> s)", "testcase": false, "constructor": false}, {"identifier": "RxJavaPlugins", "parameters": "()", "modifiers": "private", "return": "", "signature": " RxJavaPlugins()", "full_signature": "private  RxJavaPlugins()", "class_method_signature": "RxJavaPlugins.RxJavaPlugins()", "testcase": false, "constructor": true}], "file": "rxjava/src/main/java/io/reactivex/plugins/RxJavaPlugins.java"}, "focal_method": {"identifier": "onSchedule", "parameters": "(@NonNull Runnable run)", "modifiers": "@NonNull public static", "return": "Runnable", "body": "@NonNull\n    public static Runnable onSchedule(@NonNull Runnable run) {\n        ObjectHelper.requireNonNull(run, \"run is null\");\n\n        Function<? super Runnable, ? extends Runnable> f = onScheduleHandler;\n        if (f == null) {\n            return run;\n        }\n        return apply(f, run);\n    }", "signature": "Runnable onSchedule(@NonNull Runnable run)", "full_signature": "@NonNull public static Runnable onSchedule(@NonNull Runnable run)", "class_method_signature": "RxJavaPlugins.onSchedule(@NonNull Runnable run)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "apply"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}