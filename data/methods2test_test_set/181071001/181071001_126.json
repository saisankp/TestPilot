{"test_class": {"identifier": "TestDatabaseFDFlowManager", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FDFlowManager flowManager;", "modifier": "@Autowired\n    private", "type": "FDFlowManager", "declarator": "flowManager", "var_name": "flowManager"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/service/flow/TestDatabaseFDFlowManager.java"}, "test_case": {"identifier": "testCreateFlow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFlow() {\n        final String agentClassFoo = \"Class FOO\";\n        final NiFiUser user = new StandardNiFiUser.Builder().identity(\"system\").build();\n        final FDFlowMetadata flowMetadata = flowManager.createFlow(agentClassFoo, user);\n        entityManager.flush();\n\n        assertEquals(agentClassFoo, flowMetadata.getAgentClass());\n        assertNotNull(flowMetadata.getIdentifier());\n        assertNotNull(flowMetadata.getCreated());\n        assertNotNull(flowMetadata.getUpdated());\n\n        final Optional<FDFlow> flowOptional = flowManager.getFlow(flowMetadata.getIdentifier());\n        assertTrue(flowOptional.isPresent());\n\n        final FDFlow flow = flowOptional.get();\n        assertEquals(flowMetadata.getIdentifier(), flow.getFlowMetadata().getIdentifier());\n        assertNotNull(flow.getFlowContent());\n        assertNotNull(flow.getFlowContent().getIdentifier());\n        assertNotNull(flow.getFlowContent().getName());\n    }", "signature": "void testCreateFlow()", "full_signature": "@Test public void testCreateFlow()", "class_method_signature": "TestDatabaseFDFlowManager.testCreateFlow()", "testcase": true, "constructor": false, "invocations": ["build", "identity", "createFlow", "flush", "assertEquals", "getAgentClass", "assertNotNull", "getIdentifier", "assertNotNull", "getCreated", "assertNotNull", "getUpdated", "getFlow", "getIdentifier", "assertTrue", "isPresent", "get", "assertEquals", "getIdentifier", "getIdentifier", "getFlowMetadata", "assertNotNull", "getFlowContent", "assertNotNull", "getIdentifier", "getFlowContent", "assertNotNull", "getName", "getFlowContent"]}, "focal_class": {"identifier": "DatabaseFDFlowManager", "superclass": "extends BaseService", "interfaces": "implements FDFlowManager", "fields": [{"original_string": "static final String ROOT_PROCESS_GROUP_NAME = \"root\";", "modifier": "static final", "type": "String", "declarator": "ROOT_PROCESS_GROUP_NAME = \"root\"", "var_name": "ROOT_PROCESS_GROUP_NAME"}, {"original_string": "static final String UNPUBLISHED = \"UNPUBLISHED\";", "modifier": "static final", "type": "String", "declarator": "UNPUBLISHED = \"UNPUBLISHED\"", "var_name": "UNPUBLISHED"}, {"original_string": "public static final FDFlowFormat CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1;", "modifier": "public static final", "type": "FDFlowFormat", "declarator": "CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1", "var_name": "CURRENT_FLOW_FORMAT"}, {"original_string": "private final FDFlowRepository flowRepository;", "modifier": "private final", "type": "FDFlowRepository", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private final FDFlowEventRepository flowEventRepository;", "modifier": "private final", "type": "FDFlowEventRepository", "declarator": "flowEventRepository", "var_name": "flowEventRepository"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private Map<String,FDFlow> flowsById = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String,FDFlow>", "declarator": "flowsById = new ConcurrentHashMap<>()", "var_name": "flowsById"}], "methods": [{"identifier": "DatabaseFDFlowManager", "parameters": "(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "modifiers": "@Autowired public", "return": "", "signature": " DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "full_signature": "@Autowired public  DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "class_method_signature": "DatabaseFDFlowManager.DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "testcase": false, "constructor": true}, {"identifier": "getFlowMetadata", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowMetadata>", "signature": "Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "full_signature": "@Override public Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowMetadata(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlow>", "signature": "Optional<FDFlow> getFlow(final String flowId)", "full_signature": "@Override public Optional<FDFlow> getFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "createFlow", "parameters": "(final String agentClass, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "full_signature": "@Override public FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.createFlow(final String agentClass, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "getAvailableFlows", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowMetadata>", "signature": "List<FDFlowMetadata> getAvailableFlows()", "full_signature": "@Override public List<FDFlowMetadata> getAvailableFlows()", "class_method_signature": "DatabaseFDFlowManager.getAvailableFlows()", "testcase": false, "constructor": false}, {"identifier": "getFlowSummaries", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowSummary>", "signature": "List<FDFlowSummary> getFlowSummaries()", "full_signature": "@Override public List<FDFlowSummary> getFlowSummaries()", "class_method_signature": "DatabaseFDFlowManager.getFlowSummaries()", "testcase": false, "constructor": false}, {"identifier": "deleteFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata deleteFlow(final String flowId)", "full_signature": "@Override public FDFlowMetadata deleteFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "List<FDFlowEvent>", "signature": "List<FDFlowEvent> getFlowEvents(final String flowId)", "full_signature": "@Override public List<FDFlowEvent> getFlowEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEventEntity", "parameters": "(final String flowId)", "modifiers": "private", "return": "Optional<FDFlowEventEntity>", "signature": "Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "full_signature": "private Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEventEntity(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestPublishFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestPublishFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "full_signature": "@Override public Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "addFlowEvent", "parameters": "(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "full_signature": "@Override public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "deleteFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent deleteFlowEvent(final String flowEventId)", "full_signature": "@Override public FDFlowEvent deleteFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "retainPublishEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "void", "signature": "void retainPublishEvents(final String flowId)", "full_signature": "@Override public void retainPublishEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.retainPublishEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "revertToFlowRevision", "parameters": "(final String flowId, final BigInteger flowRevision)", "modifiers": "@Override public", "return": "void", "signature": "void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "full_signature": "@Override public void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "class_method_signature": "DatabaseFDFlowManager.revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "testcase": false, "constructor": false}, {"identifier": "serializeFlowContent", "parameters": "(final VersionedProcessGroup flowContent)", "modifiers": "private", "return": "String", "signature": "String serializeFlowContent(final VersionedProcessGroup flowContent)", "full_signature": "private String serializeFlowContent(final VersionedProcessGroup flowContent)", "class_method_signature": "DatabaseFDFlowManager.serializeFlowContent(final VersionedProcessGroup flowContent)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String flowContent)", "modifiers": "private", "return": "VersionedProcessGroup", "signature": "VersionedProcessGroup deserialize(String flowContent)", "full_signature": "private VersionedProcessGroup deserialize(String flowContent)", "class_method_signature": "DatabaseFDFlowManager.deserialize(String flowContent)", "testcase": false, "constructor": false}, {"identifier": "createVersionInfo", "parameters": "(final FDFlowEventEntity flowEvent)", "modifiers": "private", "return": "FDVersionInfo", "signature": "FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "full_signature": "private FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "class_method_signature": "DatabaseFDFlowManager.createVersionInfo(final FDFlowEventEntity flowEvent)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/service/flow/DatabaseFDFlowManager.java"}, "focal_method": {"identifier": "createFlow", "parameters": "(final String agentClass, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowMetadata", "body": "@Override\n    public FDFlowMetadata createFlow(final String agentClass, final NiFiUser user) {\n        if (StringUtils.isBlank(agentClass)) {\n            throw new IllegalArgumentException(\"Agent class cannot be null or blank\");\n        }\n\n        if (user == null || StringUtils.isBlank(user.getIdentity())) {\n            throw new IllegalArgumentException(\"A user identity must be provided\");\n        }\n\n        // Create the initial root process group for the flow\n        final VersionedProcessGroup flowContent = new VersionedProcessGroup();\n        flowContent.setIdentifier(UUID.randomUUID().toString());\n        flowContent.setName(ROOT_PROCESS_GROUP_NAME);\n\n        // Save the flow entity to the db\n        final FDFlowEntity flowEntity = new FDFlowEntity();\n        flowEntity.setId(UUID.randomUUID().toString());\n        flowEntity.setAgentClass(agentClass);\n        flowEntity.setRootProcessGroupId(flowContent.getIdentifier());\n\n        final FDFlowEntity savedFlowEntity = flowRepository.save(flowEntity);\n\n        // Create the flow event for the initial flow\n        final FDFlowEventEntity flowEventEntity = new FDFlowEventEntity();\n        flowEventEntity.setId(UUID.randomUUID().toString());\n        flowEventEntity.setFlow(savedFlowEntity);\n        flowEventEntity.setEventType(FDFlowEventType.COMPONENT_ADDED);\n        flowEventEntity.setEventDescription(\"Created root process group\");\n        flowEventEntity.setComponentId(flowContent.getIdentifier());\n        flowEventEntity.setFlowRevision(BigInteger.ZERO);\n        flowEventEntity.setUserIdentity(user.getIdentity());\n\n        // Set the initial NiFi Registry info\n        flowEventEntity.setRegistryUrl(UNPUBLISHED);\n        flowEventEntity.setRegistryBucketId(UNPUBLISHED);\n        flowEventEntity.setRegistryFlowId(UNPUBLISHED);\n        flowEventEntity.setRegistryVersion(0);\n        flowEventEntity.setLastPublished(null);\n        flowEventEntity.setLastPublishedUserIdentity(null);\n\n        // Serialize the flow content and set it in the flow event\n        final String serializedFlowContent = serializeFlowContent(flowContent);\n        flowEventEntity.setFlowContent(serializedFlowContent);\n        flowEventEntity.setFlowFormat(CURRENT_FLOW_FORMAT);\n\n        // Save the initial flow event to the db\n        flowEventRepository.save(flowEventEntity);\n\n        return modelMapper.map(savedFlowEntity, FDFlowMetadata.class);\n    }", "signature": "FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "full_signature": "@Override public FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.createFlow(final String agentClass, final NiFiUser user)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isBlank", "getIdentity", "setIdentifier", "toString", "randomUUID", "setName", "setId", "toString", "randomUUID", "setAgentClass", "setRootProcessGroupId", "getIdentifier", "save", "setId", "toString", "randomUUID", "setFlow", "setEventType", "setEventDescription", "setComponentId", "getIdentifier", "setFlowRevision", "setUserIdentity", "getIdentity", "setRegistryUrl", "setRegistryBucketId", "setRegistryFlowId", "setRegistryVersion", "setLastPublished", "setLastPublishedUserIdentity", "serializeFlowContent", "setFlowContent", "setFlowFormat", "save", "map"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}