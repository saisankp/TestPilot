{"test_class": {"identifier": "ReadOnlyFilteredCOSStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private InputStream stream;", "modifier": "private", "type": "InputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private COSDictionary dictionary;", "modifier": "private", "type": "COSDictionary", "declarator": "dictionary", "var_name": "dictionary"}, {"original_string": "private ReadOnlyFilteredCOSStream victim;", "modifier": "private", "type": "ReadOnlyFilteredCOSStream", "declarator": "victim", "var_name": "victim"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/ReadOnlyFilteredCOSStreamTest.java"}, "test_case": {"identifier": "testGetUnfilteredStream", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void testGetUnfilteredStream() throws IOException {\n        victim.getUnfilteredStream();\n    }", "signature": "void testGetUnfilteredStream()", "full_signature": "@Test(expected = IOException.class) public void testGetUnfilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStreamTest.testGetUnfilteredStream()", "testcase": true, "constructor": false, "invocations": ["getUnfilteredStream"]}, "focal_class": {"identifier": "ReadOnlyFilteredCOSStream", "superclass": "extends COSStream", "interfaces": "", "fields": [{"original_string": "private InputStreamSupplier<InputStream> stream;", "modifier": "private", "type": "InputStreamSupplier<InputStream>", "declarator": "stream", "var_name": "stream"}, {"original_string": "private long length;", "modifier": "private", "type": "long", "declarator": "length", "var_name": "length"}, {"original_string": "private COSDictionary wrapped;", "modifier": "private", "type": "COSDictionary", "declarator": "wrapped", "var_name": "wrapped"}], "methods": [{"identifier": "ReadOnlyFilteredCOSStream", "parameters": "(COSDictionary existingDictionary, InputStream stream, long length)", "modifiers": "", "return": "", "signature": " ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStream stream, long length)", "full_signature": "  ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStream stream, long length)", "class_method_signature": "ReadOnlyFilteredCOSStream.ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStream stream, long length)", "testcase": false, "constructor": true}, {"identifier": "ReadOnlyFilteredCOSStream", "parameters": "(COSDictionary existingDictionary, InputStreamSupplier<InputStream> stream,\n            long length)", "modifiers": "public", "return": "", "signature": " ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStreamSupplier<InputStream> stream,\n            long length)", "full_signature": "public  ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStreamSupplier<InputStream> stream,\n            long length)", "class_method_signature": "ReadOnlyFilteredCOSStream.ReadOnlyFilteredCOSStream(COSDictionary existingDictionary, InputStreamSupplier<InputStream> stream,\n            long length)", "testcase": false, "constructor": true}, {"identifier": "doGetFilteredStream", "parameters": "()", "modifiers": "@Override protected", "return": "InputStream", "signature": "InputStream doGetFilteredStream()", "full_signature": "@Override protected InputStream doGetFilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStream.doGetFilteredStream()", "testcase": false, "constructor": false}, {"identifier": "getFilteredLength", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getFilteredLength()", "full_signature": "@Override public long getFilteredLength()", "class_method_signature": "ReadOnlyFilteredCOSStream.getFilteredLength()", "testcase": false, "constructor": false}, {"identifier": "getUnfilteredLength", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getUnfilteredLength()", "full_signature": "@Override public long getUnfilteredLength()", "class_method_signature": "ReadOnlyFilteredCOSStream.getUnfilteredLength()", "testcase": false, "constructor": false}, {"identifier": "getUnfilteredStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getUnfilteredStream()", "full_signature": "@Override public InputStream getUnfilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStream.getUnfilteredStream()", "testcase": false, "constructor": false}, {"identifier": "getUnfilteredSource", "parameters": "()", "modifiers": "@Override public", "return": "SeekableSource", "signature": "SeekableSource getUnfilteredSource()", "full_signature": "@Override public SeekableSource getUnfilteredSource()", "class_method_signature": "ReadOnlyFilteredCOSStream.getUnfilteredSource()", "testcase": false, "constructor": false}, {"identifier": "createFilteredStream", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream createFilteredStream()", "full_signature": "@Override public OutputStream createFilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStream.createFilteredStream()", "testcase": false, "constructor": false}, {"identifier": "createFilteredStream", "parameters": "(COSBase filters)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream createFilteredStream(COSBase filters)", "full_signature": "@Override public OutputStream createFilteredStream(COSBase filters)", "class_method_signature": "ReadOnlyFilteredCOSStream.createFilteredStream(COSBase filters)", "testcase": false, "constructor": false}, {"identifier": "setFilters", "parameters": "(COSBase filters)", "modifiers": "@Override public", "return": "void", "signature": "void setFilters(COSBase filters)", "full_signature": "@Override public void setFilters(COSBase filters)", "class_method_signature": "ReadOnlyFilteredCOSStream.setFilters(COSBase filters)", "testcase": false, "constructor": false}, {"identifier": "addCompression", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addCompression()", "full_signature": "@Override public boolean addCompression()", "class_method_signature": "ReadOnlyFilteredCOSStream.addCompression()", "testcase": false, "constructor": false}, {"identifier": "encryptable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean encryptable()", "full_signature": "@Override public boolean encryptable()", "class_method_signature": "ReadOnlyFilteredCOSStream.encryptable()", "testcase": false, "constructor": false}, {"identifier": "encryptable", "parameters": "(boolean encryptable)", "modifiers": "@Override public", "return": "void", "signature": "void encryptable(boolean encryptable)", "full_signature": "@Override public void encryptable(boolean encryptable)", "class_method_signature": "ReadOnlyFilteredCOSStream.encryptable(boolean encryptable)", "testcase": false, "constructor": false}, {"identifier": "createUnfilteredStream", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream createUnfilteredStream()", "full_signature": "@Override public OutputStream createUnfilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStream.createUnfilteredStream()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ReadOnlyFilteredCOSStream.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "indirectLength", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean indirectLength()", "full_signature": "@Override public boolean indirectLength()", "class_method_signature": "ReadOnlyFilteredCOSStream.indirectLength()", "testcase": false, "constructor": false}, {"identifier": "indirectLength", "parameters": "(boolean indirectLength)", "modifiers": "@Override public", "return": "void", "signature": "void indirectLength(boolean indirectLength)", "full_signature": "@Override public void indirectLength(boolean indirectLength)", "class_method_signature": "ReadOnlyFilteredCOSStream.indirectLength(boolean indirectLength)", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "@Override public", "return": "IndirectCOSObjectIdentifier", "signature": "IndirectCOSObjectIdentifier id()", "full_signature": "@Override public IndirectCOSObjectIdentifier id()", "class_method_signature": "ReadOnlyFilteredCOSStream.id()", "testcase": false, "constructor": false}, {"identifier": "idIfAbsent", "parameters": "(IndirectCOSObjectIdentifier id)", "modifiers": "@Override public", "return": "void", "signature": "void idIfAbsent(IndirectCOSObjectIdentifier id)", "full_signature": "@Override public void idIfAbsent(IndirectCOSObjectIdentifier id)", "class_method_signature": "ReadOnlyFilteredCOSStream.idIfAbsent(IndirectCOSObjectIdentifier id)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ReadOnlyFilteredCOSStream.close()", "testcase": false, "constructor": false}, {"identifier": "readOnly", "parameters": "(COSStream existing)", "modifiers": "public static", "return": "ReadOnlyFilteredCOSStream", "signature": "ReadOnlyFilteredCOSStream readOnly(COSStream existing)", "full_signature": "public static ReadOnlyFilteredCOSStream readOnly(COSStream existing)", "class_method_signature": "ReadOnlyFilteredCOSStream.readOnly(COSStream existing)", "testcase": false, "constructor": false}, {"identifier": "readOnlyJpegImage", "parameters": "(File imageFile, int width, int height,\n            int bitsPerComponent, PDColorSpace colorSpace)", "modifiers": "public static", "return": "ReadOnlyFilteredCOSStream", "signature": "ReadOnlyFilteredCOSStream readOnlyJpegImage(File imageFile, int width, int height,\n            int bitsPerComponent, PDColorSpace colorSpace)", "full_signature": "public static ReadOnlyFilteredCOSStream readOnlyJpegImage(File imageFile, int width, int height,\n            int bitsPerComponent, PDColorSpace colorSpace)", "class_method_signature": "ReadOnlyFilteredCOSStream.readOnlyJpegImage(File imageFile, int width, int height,\n            int bitsPerComponent, PDColorSpace colorSpace)", "testcase": false, "constructor": false}, {"identifier": "readOnlyEmbeddedFile", "parameters": "(Source<?> source)", "modifiers": "public static final", "return": "ReadOnlyFilteredCOSStream", "signature": "ReadOnlyFilteredCOSStream readOnlyEmbeddedFile(Source<?> source)", "full_signature": "public static final ReadOnlyFilteredCOSStream readOnlyEmbeddedFile(Source<?> source)", "class_method_signature": "ReadOnlyFilteredCOSStream.readOnlyEmbeddedFile(Source<?> source)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/ReadOnlyFilteredCOSStream.java"}, "focal_method": {"identifier": "getUnfilteredStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getUnfilteredStream() throws IOException {\n        throw new IOException(\"getUnfilteredStream  cannot be requested\");\n    }", "signature": "InputStream getUnfilteredStream()", "full_signature": "@Override public InputStream getUnfilteredStream()", "class_method_signature": "ReadOnlyFilteredCOSStream.getUnfilteredStream()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}