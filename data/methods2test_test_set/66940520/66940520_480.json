{"test_class": {"identifier": "AbstractAnalyticsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Period peA;", "modifier": "private", "type": "Period", "declarator": "peA", "var_name": "peA"}, {"original_string": "private OrganisationUnit ouA;", "modifier": "private", "type": "OrganisationUnit", "declarator": "ouA", "var_name": "ouA"}, {"original_string": "private DataElement deA;", "modifier": "private", "type": "DataElement", "declarator": "deA", "var_name": "deA"}, {"original_string": "private DataElement deB;", "modifier": "private", "type": "DataElement", "declarator": "deB", "var_name": "deB"}, {"original_string": "private DataElement deC;", "modifier": "private", "type": "DataElement", "declarator": "deC", "var_name": "deC"}, {"original_string": "private DummyAnalyticsService dummyAnalyticsService;", "modifier": "private", "type": "DummyAnalyticsService", "declarator": "dummyAnalyticsService", "var_name": "dummyAnalyticsService"}, {"original_string": "@Mock\n    private AnalyticsSecurityManager securityManager;", "modifier": "@Mock\n    private", "type": "AnalyticsSecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "@Mock\n    private EventQueryValidator eventQueryValidator;", "modifier": "@Mock\n    private", "type": "EventQueryValidator", "declarator": "eventQueryValidator", "var_name": "eventQueryValidator"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/event/data/AbstractAnalyticsServiceTest.java"}, "test_case": {"identifier": "verifyHeaderCreationBasedOnQueryItemsAndDimensions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyHeaderCreationBasedOnQueryItemsAndDimensions()\n    {\n        // Given\n        DimensionalObject periods = new BaseDimensionalObject( DimensionalObject.PERIOD_DIM_ID, DimensionType.PERIOD,\n            Lists.newArrayList( peA ) );\n\n        DimensionalObject orgUnits = new BaseDimensionalObject( DimensionalObject.ORGUNIT_DIM_ID,\n            DimensionType.ORGANISATION_UNIT, \"ouA\", Lists.newArrayList( ouA ) );\n\n        QueryItem qiA = new QueryItem( deA, null, deA.getValueType(), deA.getAggregationType(), null );\n        QueryItem qiB = new QueryItem( deB, null, deB.getValueType(), deB.getAggregationType(), null );\n        QueryItem qiC = new QueryItem( deC, null, deC.getValueType(), deC.getAggregationType(), null );\n\n        EventQueryParams params = new EventQueryParams.Builder()\n            .addDimension( periods )\n            .addDimension( orgUnits )\n            .addItem( qiA ).addItem( qiB ).addItem( qiC )\n            .withCoordinateField( deB.getUid() )\n            .withSkipData( true )\n            .withSkipMeta( false )\n            .withApiVersion( DhisApiVersion.V33 )\n            .build();\n\n        when( securityManager.withUserConstraints( any( EventQueryParams.class ) ) ).thenReturn( params );\n\n        // When\n        Grid grid = dummyAnalyticsService.getGrid( params );\n\n        // Then\n        final List<GridHeader> headers = grid.getHeaders();\n        assertThat( headers, is( notNullValue() ) );\n        assertThat( headers, hasSize( 4 ) );\n\n        assertHeader( headers.get( 0 ), \"ou\", \"ouA\", ValueType.TEXT, String.class.getName() );\n        assertHeader( headers.get( 1 ), deA.getUid(), deA.getName(), ValueType.TEXT, String.class.getName() );\n        assertHeader( headers.get( 2 ), deB.getUid(), deB.getName(), ValueType.COORDINATE, Point.class.getName() );\n        assertHeader( headers.get( 3 ), deC.getUid(), deC.getName(), ValueType.NUMBER, Double.class.getName() );\n    }", "signature": "void verifyHeaderCreationBasedOnQueryItemsAndDimensions()", "full_signature": "@Test public void verifyHeaderCreationBasedOnQueryItemsAndDimensions()", "class_method_signature": "AbstractAnalyticsServiceTest.verifyHeaderCreationBasedOnQueryItemsAndDimensions()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "getValueType", "getAggregationType", "getValueType", "getAggregationType", "getValueType", "getAggregationType", "build", "withApiVersion", "withSkipMeta", "withSkipData", "withCoordinateField", "addItem", "addItem", "addItem", "addDimension", "addDimension", "getUid", "thenReturn", "when", "withUserConstraints", "any", "getGrid", "getHeaders", "assertThat", "is", "notNullValue", "assertThat", "hasSize", "assertHeader", "get", "getName", "assertHeader", "get", "getUid", "getName", "getName", "assertHeader", "get", "getUid", "getName", "getName", "assertHeader", "get", "getUid", "getName", "getName"]}, "focal_class": {"identifier": "AbstractAnalyticsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "final AnalyticsSecurityManager securityManager;", "modifier": "final", "type": "AnalyticsSecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "final EventQueryValidator queryValidator;", "modifier": "final", "type": "EventQueryValidator", "declarator": "queryValidator", "var_name": "queryValidator"}], "methods": [{"identifier": "AbstractAnalyticsService", "parameters": "( AnalyticsSecurityManager securityManager, EventQueryValidator queryValidator )", "modifiers": "public", "return": "", "signature": " AbstractAnalyticsService( AnalyticsSecurityManager securityManager, EventQueryValidator queryValidator )", "full_signature": "public  AbstractAnalyticsService( AnalyticsSecurityManager securityManager, EventQueryValidator queryValidator )", "class_method_signature": "AbstractAnalyticsService.AbstractAnalyticsService( AnalyticsSecurityManager securityManager, EventQueryValidator queryValidator )", "testcase": false, "constructor": true}, {"identifier": "getGrid", "parameters": "( EventQueryParams params )", "modifiers": "protected", "return": "Grid", "signature": "Grid getGrid( EventQueryParams params )", "full_signature": "protected Grid getGrid( EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.getGrid( EventQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "createGridWithHeaders", "parameters": "( EventQueryParams params )", "modifiers": "protected abstract", "return": "Grid", "signature": "Grid createGridWithHeaders( EventQueryParams params )", "full_signature": "protected abstract Grid createGridWithHeaders( EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.createGridWithHeaders( EventQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "addEventData", "parameters": "( Grid grid, EventQueryParams params )", "modifiers": "protected abstract", "return": "long", "signature": "long addEventData( Grid grid, EventQueryParams params )", "full_signature": "protected abstract long addEventData( Grid grid, EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.addEventData( Grid grid, EventQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "addMetadata", "parameters": "( EventQueryParams params, Grid grid )", "modifiers": "protected", "return": "void", "signature": "void addMetadata( EventQueryParams params, Grid grid )", "full_signature": "protected void addMetadata( EventQueryParams params, Grid grid )", "class_method_signature": "AbstractAnalyticsService.addMetadata( EventQueryParams params, Grid grid )", "testcase": false, "constructor": false}, {"identifier": "getMetadataItems", "parameters": "( EventQueryParams params )", "modifiers": "private", "return": "Map<String, MetadataItem>", "signature": "Map<String, MetadataItem> getMetadataItems( EventQueryParams params )", "full_signature": "private Map<String, MetadataItem> getMetadataItems( EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.getMetadataItems( EventQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getDimensionItems", "parameters": "( EventQueryParams params )", "modifiers": "private", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getDimensionItems( EventQueryParams params )", "full_signature": "private Map<String, List<String>> getDimensionItems( EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.getDimensionItems( EventQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "substituteData", "parameters": "( Grid grid )", "modifiers": "private", "return": "void", "signature": "void substituteData( Grid grid )", "full_signature": "private void substituteData( Grid grid )", "class_method_signature": "AbstractAnalyticsService.substituteData( Grid grid )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/data/AbstractAnalyticsService.java"}, "focal_method": {"identifier": "getGrid", "parameters": "( EventQueryParams params )", "modifiers": "protected", "return": "Grid", "body": "protected Grid getGrid( EventQueryParams params )\n    {\n        // ---------------------------------------------------------------------\n        // Decide access, add constraints and validate\n        // ---------------------------------------------------------------------\n\n        securityManager.decideAccessEventQuery( params );\n\n        params = securityManager.withUserConstraints( params );\n\n        queryValidator.validate( params );\n\n        params = new EventQueryParams.Builder( params )\n            .withStartEndDatesForPeriods()\n            .build();\n\n        // ---------------------------------------------------------------------\n        // Headers\n        // ---------------------------------------------------------------------\n\n        Grid grid = createGridWithHeaders( params );\n\n        for ( DimensionalObject dimension : params.getDimensions() )\n        {\n            grid.addHeader( new GridHeader( dimension.getDimension(), dimension.getDimensionDisplayName(), ValueType.TEXT, String.class.getName(), false, true ) );\n        }\n\n        for ( QueryItem item : params.getItems() )\n        {\n            if ( item.getValueType() == ValueType.ORGANISATION_UNIT\n                && params.getCoordinateField().equals( item.getItem().getUid() ) )\n            {   // Special case: if the request contains an item of Org Unit value type and the item uid\n                // is linked to coordinates (coordinateField), then create an Header of ValueType\n                // COORDINATE and type \"Point\"\n                grid.addHeader( new GridHeader( item.getItem().getUid(),\n                    item.getItem().getDisplayProperty( params.getDisplayProperty() ), COORDINATE,\n                    Point.class.getName(), false, true, item.getOptionSet(), item.getLegendSet() ) );\n            }\n            else\n            {\n                grid.addHeader( new GridHeader( item.getItem().getUid(),\n                    item.getItem().getDisplayProperty( params.getDisplayProperty() ), item.getValueType(),\n                    item.getTypeAsString(), false, true, item.getOptionSet(), item.getLegendSet() ) );\n            }\n        }\n\n        // ---------------------------------------------------------------------\n        // Data\n        // ---------------------------------------------------------------------\n\n        long count = addEventData( grid, params );\n\n        // ---------------------------------------------------------------------\n        // Meta-data\n        // ---------------------------------------------------------------------\n\n        addMetadata( params, grid );\n\n        // ---------------------------------------------------------------------\n        // Data ID scheme\n        // ---------------------------------------------------------------------\n\n        if ( params.hasDataIdScheme() )\n        {\n            substituteData( grid );\n        }\n\n        // ---------------------------------------------------------------------\n        // Paging\n        // ---------------------------------------------------------------------\n\n        if ( params.isPaging() )\n        {\n            Pager pager = new Pager( params.getPageWithDefault(), count, params.getPageSizeWithDefault() );\n\n            grid.getMetaData().put( PAGER.getKey(), pager );\n        }\n\n        return grid;\n    }", "signature": "Grid getGrid( EventQueryParams params )", "full_signature": "protected Grid getGrid( EventQueryParams params )", "class_method_signature": "AbstractAnalyticsService.getGrid( EventQueryParams params )", "testcase": false, "constructor": false, "invocations": ["decideAccessEventQuery", "withUserConstraints", "validate", "build", "withStartEndDatesForPeriods", "createGridWithHeaders", "getDimensions", "addHeader", "getDimension", "getDimensionDisplayName", "getName", "getItems", "getValueType", "equals", "getCoordinateField", "getUid", "getItem", "addHeader", "getUid", "getItem", "getDisplayProperty", "getItem", "getDisplayProperty", "getName", "getOptionSet", "getLegendSet", "addHeader", "getUid", "getItem", "getDisplayProperty", "getItem", "getDisplayProperty", "getValueType", "getTypeAsString", "getOptionSet", "getLegendSet", "addEventData", "addMetadata", "hasDataIdScheme", "substituteData", "isPaging", "getPageWithDefault", "getPageSizeWithDefault", "put", "getMetaData", "getKey"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}