{"test_class": {"identifier": "BuildProjectCommandModeTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/BuildProjectCommandModeTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest(BuildProjectCommandMode.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(BuildProjectCommandMode.class)\n  public void testExecute() throws Exception {\n    final Builder builder = mock(Builder.class);\n    final BuildDetails buildDetails = new BuildDetails();\n    buildDetails.setResult(randomUUID().toString());\n    final WriteProjectTarget targetWriter = mock(WriteProjectTarget.class);\n\n    whenNew(Builder.class).withAnyArguments().thenReturn(builder);\n    when(builder.build(anyString())).thenReturn(buildDetails);\n\n    final ProjectFile projectFile = new ProjectFile();\n    projectFile.setSource(randomUUID().toString());\n    projectFile.setTarget(randomUUID().toString());\n    final BuildProjectCommandMode buildProject = new BuildProjectCommandMode() {\n      @Override\n      public ProjectFile readProject() throws IOException {\n        return projectFile;\n      }\n    };\n    buildProject.setTargetWriter(targetWriter);\n    buildProject.execute();\n    final BuildDetails lastBuildDetails = buildProject.getLastBuildResult();\n    logger.debug(\"Error: {}\", lastBuildDetails.getError());\n\n    verify(targetWriter).execute();\n\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest(BuildProjectCommandMode.class) public void testExecute()", "class_method_signature": "BuildProjectCommandModeTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["mock", "setResult", "toString", "randomUUID", "mock", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "build", "anyString", "setSource", "toString", "randomUUID", "setTarget", "toString", "randomUUID", "setTargetWriter", "execute", "getLastBuildResult", "debug", "getError", "execute", "verify"]}, "focal_class": {"identifier": "BuildProjectCommandMode", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "protected static final String NL_0 = BuildProject.class.getName() + \".0\";", "modifier": "protected static final", "type": "String", "declarator": "NL_0 = BuildProject.class.getName() + \".0\"", "var_name": "NL_0"}, {"original_string": "protected static final String NL_1 = BuildProject.class.getName() + \".1\";", "modifier": "protected static final", "type": "String", "declarator": "NL_1 = BuildProject.class.getName() + \".1\"", "var_name": "NL_1"}, {"original_string": "protected static final String NL_2 = BuildProject.class.getName() + \".2\";", "modifier": "protected static final", "type": "String", "declarator": "NL_2 = BuildProject.class.getName() + \".2\"", "var_name": "NL_2"}, {"original_string": "protected static final String NL_3 = BuildProject.class.getName() + \".3\";", "modifier": "protected static final", "type": "String", "declarator": "NL_3 = BuildProject.class.getName() + \".3\"", "var_name": "NL_3"}, {"original_string": "protected static final String NL_4 = BuildProject.class.getName() + \".4\";", "modifier": "protected static final", "type": "String", "declarator": "NL_4 = BuildProject.class.getName() + \".4\"", "var_name": "NL_4"}, {"original_string": "protected Project project;", "modifier": "protected", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "@Getter\n  @Setter\n  protected BuilderFactory builderFactory = project -> new Builder(new ResourceManager(project));", "modifier": "@Getter\n  @Setter\n  protected", "type": "BuilderFactory", "declarator": "builderFactory = project -> new Builder(new ResourceManager(project))", "var_name": "builderFactory"}, {"original_string": "protected Builder builder;", "modifier": "protected", "type": "Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "@Getter\n  protected BuildDetails lastBuildResult;", "modifier": "@Getter\n  protected", "type": "BuildDetails", "declarator": "lastBuildResult", "var_name": "lastBuildResult"}, {"original_string": "@Getter\n  @Setter\n  protected WriteProjectTarget targetWriter = new WriteProjectTarget();", "modifier": "@Getter\n  @Setter\n  protected", "type": "WriteProjectTarget", "declarator": "targetWriter = new WriteProjectTarget()", "var_name": "targetWriter"}], "methods": [{"identifier": "build", "parameters": "(final Project project)", "modifiers": "protected", "return": "BuildDetails", "signature": "BuildDetails build(final Project project)", "full_signature": "protected BuildDetails build(final Project project)", "class_method_signature": "BuildProjectCommandMode.build(final Project project)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initialize()", "full_signature": "protected void initialize()", "class_method_signature": "BuildProjectCommandMode.initialize()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "BuildProjectCommandMode.execute()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(BuildDetails result)", "modifiers": "protected", "return": "void", "signature": "void handle(BuildDetails result)", "full_signature": "protected void handle(BuildDetails result)", "class_method_signature": "BuildProjectCommandMode.handle(BuildDetails result)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/BuildProjectCommandMode.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    initialize();\n    final BuildDetails buildDetails = build(project);\n    handle(buildDetails);\n    this.lastBuildResult = buildDetails;\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "BuildProjectCommandMode.execute()", "testcase": false, "constructor": false, "invocations": ["initialize", "build", "handle"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}