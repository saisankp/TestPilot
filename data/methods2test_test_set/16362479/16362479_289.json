{"test_class": {"identifier": "ClientBackedDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ClientIdentifier UNKNOWN_ID = ClientIdentifier.create(\n            FrontendIdentifier.create(MemberName.forName(\"local\"), FrontendType.forName(\"unknown\")), 0);", "modifier": "private static final", "type": "ClientIdentifier", "declarator": "UNKNOWN_ID = ClientIdentifier.create(\n            FrontendIdentifier.create(MemberName.forName(\"local\"), FrontendType.forName(\"unknown\")), 0)", "var_name": "UNKNOWN_ID"}, {"original_string": "private static final FrontendIdentifier FRONTEND_IDENTIFIER = FrontendIdentifier.create(\n            MemberName.forName(\"member\"), FrontendType.forName(\"frontend\"));", "modifier": "private static final", "type": "FrontendIdentifier", "declarator": "FRONTEND_IDENTIFIER = FrontendIdentifier.create(\n            MemberName.forName(\"member\"), FrontendType.forName(\"frontend\"))", "var_name": "FRONTEND_IDENTIFIER"}, {"original_string": "private static final ClientIdentifier CLIENT_IDENTIFIER = ClientIdentifier.create(FRONTEND_IDENTIFIER, 0);", "modifier": "private static final", "type": "ClientIdentifier", "declarator": "CLIENT_IDENTIFIER = ClientIdentifier.create(FRONTEND_IDENTIFIER, 0)", "var_name": "CLIENT_IDENTIFIER"}, {"original_string": "private static final LocalHistoryIdentifier HISTORY_ID = new LocalHistoryIdentifier(CLIENT_IDENTIFIER, 0);", "modifier": "private static final", "type": "LocalHistoryIdentifier", "declarator": "HISTORY_ID = new LocalHistoryIdentifier(CLIENT_IDENTIFIER, 0)", "var_name": "HISTORY_ID"}, {"original_string": "private static final TransactionIdentifier TRANSACTION_IDENTIFIER = new TransactionIdentifier(HISTORY_ID, 0);", "modifier": "private static final", "type": "TransactionIdentifier", "declarator": "TRANSACTION_IDENTIFIER = new TransactionIdentifier(HISTORY_ID, 0)", "var_name": "TRANSACTION_IDENTIFIER"}, {"original_string": "private static EffectiveModelContext SCHEMA_CONTEXT;", "modifier": "private static", "type": "EffectiveModelContext", "declarator": "SCHEMA_CONTEXT", "var_name": "SCHEMA_CONTEXT"}, {"original_string": "@Mock\n    private DataStoreClient clientActor;", "modifier": "@Mock\n    private", "type": "DataStoreClient", "declarator": "clientActor", "var_name": "clientActor"}, {"original_string": "@Mock\n    private ActorUtils actorUtils;", "modifier": "@Mock\n    private", "type": "ActorUtils", "declarator": "actorUtils", "var_name": "actorUtils"}, {"original_string": "@Mock\n    private ClientLocalHistory clientLocalHistory;", "modifier": "@Mock\n    private", "type": "ClientLocalHistory", "declarator": "clientLocalHistory", "var_name": "clientLocalHistory"}, {"original_string": "@Mock\n    private ClientTransaction clientTransaction;", "modifier": "@Mock\n    private", "type": "ClientTransaction", "declarator": "clientTransaction", "var_name": "clientTransaction"}, {"original_string": "@Mock\n    private ClientSnapshot clientSnapshot;", "modifier": "@Mock\n    private", "type": "ClientSnapshot", "declarator": "clientSnapshot", "var_name": "clientSnapshot"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ClientBackedDataStoreTest.java"}, "test_case": {"identifier": "testNewReadOnlyTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewReadOnlyTransaction() {\n        try (ClientBackedDataStore clientBackedDataStore = new ClientBackedDataStore(\n                actorUtils, UNKNOWN_ID, clientActor)) {\n            final DOMStoreReadTransaction tx = clientBackedDataStore.newReadOnlyTransaction();\n            assertNotNull(tx);\n            verify(clientActor, Mockito.times(1)).createSnapshot();\n        }\n    }", "signature": "void testNewReadOnlyTransaction()", "full_signature": "@Test public void testNewReadOnlyTransaction()", "class_method_signature": "ClientBackedDataStoreTest.testNewReadOnlyTransaction()", "testcase": true, "constructor": false, "invocations": ["newReadOnlyTransaction", "assertNotNull", "createSnapshot", "verify", "times"]}, "focal_class": {"identifier": "ClientBackedDataStore", "superclass": "extends AbstractDataStore", "interfaces": "", "fields": [], "methods": [{"identifier": "ClientBackedDataStore", "parameters": "(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "modifiers": "public", "return": "", "signature": " ClientBackedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "full_signature": "public  ClientBackedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "class_method_signature": "ClientBackedDataStore.ClientBackedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "testcase": false, "constructor": true}, {"identifier": "ClientBackedDataStore", "parameters": "(final ActorUtils actorUtils, final ClientIdentifier identifier,\n                          final DataStoreClient clientActor)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ClientBackedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier,\n                          final DataStoreClient clientActor)", "full_signature": "@VisibleForTesting  ClientBackedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier,\n                          final DataStoreClient clientActor)", "class_method_signature": "ClientBackedDataStore.ClientBackedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier,\n                          final DataStoreClient clientActor)", "testcase": false, "constructor": true}, {"identifier": "createTransactionChain", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreTransactionChain", "signature": "DOMStoreTransactionChain createTransactionChain()", "full_signature": "@Override public DOMStoreTransactionChain createTransactionChain()", "class_method_signature": "ClientBackedDataStore.createTransactionChain()", "testcase": false, "constructor": false}, {"identifier": "newReadOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadTransaction", "signature": "DOMStoreReadTransaction newReadOnlyTransaction()", "full_signature": "@Override public DOMStoreReadTransaction newReadOnlyTransaction()", "class_method_signature": "ClientBackedDataStore.newReadOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "newWriteOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreWriteTransaction", "signature": "DOMStoreWriteTransaction newWriteOnlyTransaction()", "full_signature": "@Override public DOMStoreWriteTransaction newWriteOnlyTransaction()", "class_method_signature": "ClientBackedDataStore.newWriteOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "newReadWriteTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadWriteTransaction", "signature": "DOMStoreReadWriteTransaction newReadWriteTransaction()", "full_signature": "@Override public DOMStoreReadWriteTransaction newReadWriteTransaction()", "class_method_signature": "ClientBackedDataStore.newReadWriteTransaction()", "testcase": false, "constructor": false}, {"identifier": "debugAllocation", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean debugAllocation()", "full_signature": "private boolean debugAllocation()", "class_method_signature": "ClientBackedDataStore.debugAllocation()", "testcase": false, "constructor": false}, {"identifier": "allocationContext", "parameters": "()", "modifiers": "private", "return": "Throwable", "signature": "Throwable allocationContext()", "full_signature": "private Throwable allocationContext()", "class_method_signature": "ClientBackedDataStore.allocationContext()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ClientBackedDataStore.java"}, "focal_method": {"identifier": "newReadOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadTransaction", "body": "@Override\n    public DOMStoreReadTransaction newReadOnlyTransaction() {\n        return new ClientBackedReadTransaction(getClient().createSnapshot(), null, allocationContext());\n    }", "signature": "DOMStoreReadTransaction newReadOnlyTransaction()", "full_signature": "@Override public DOMStoreReadTransaction newReadOnlyTransaction()", "class_method_signature": "ClientBackedDataStore.newReadOnlyTransaction()", "testcase": false, "constructor": false, "invocations": ["createSnapshot", "getClient", "allocationContext"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}