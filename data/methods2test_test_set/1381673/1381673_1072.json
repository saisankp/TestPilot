{"test_class": {"identifier": "PMMLCompilerServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/test/java/org/kie/pmml/evaluator/assembler/service/PMMLCompilerServiceTest.java"}, "test_case": {"identifier": "addPMMLRuleMapperKiePMMLModelHasNestedModelsHasSourceMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addPMMLRuleMapperKiePMMLModelHasNestedModelsHasSourceMap() {\n        KiePMMLModelHasNestedModelsHasSourceMap kiePmmlModel = new KiePMMLModelHasNestedModelsHasSourceMap(\"TEST\",\n                                                                                                           Collections.emptyList());\n        assertTrue(kiePmmlModel.sourcesMap.isEmpty());\n        final List<String> generatedRuleMappers = new ArrayList<>();\n        PMMLCompilerService.addPMMLRuleMapper(kiePmmlModel, generatedRuleMappers, \"source_path\");\n        assertTrue(kiePmmlModel.sourcesMap.isEmpty());\n        assertTrue(generatedRuleMappers.isEmpty());\n        kiePmmlModel.nestedModels.forEach(nestedModel -> {\n            assertTrue(((HasSourcesMap) nestedModel).getSourcesMap().isEmpty());\n        });\n    }", "signature": "void addPMMLRuleMapperKiePMMLModelHasNestedModelsHasSourceMap()", "full_signature": "@Test public void addPMMLRuleMapperKiePMMLModelHasNestedModelsHasSourceMap()", "class_method_signature": "PMMLCompilerServiceTest.addPMMLRuleMapperKiePMMLModelHasNestedModelsHasSourceMap()", "testcase": true, "constructor": false, "invocations": ["emptyList", "assertTrue", "isEmpty", "addPMMLRuleMapper", "assertTrue", "isEmpty", "assertTrue", "isEmpty", "forEach", "assertTrue", "isEmpty", "getSourcesMap"]}, "focal_class": {"identifier": "PMMLCompilerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String RULES_FILE_NAME = \"Rules\";", "modifier": "static final", "type": "String", "declarator": "RULES_FILE_NAME = \"Rules\"", "var_name": "RULES_FILE_NAME"}], "methods": [{"identifier": "PMMLCompilerService", "parameters": "()", "modifiers": "private", "return": "", "signature": " PMMLCompilerService()", "full_signature": "private  PMMLCompilerService()", "class_method_signature": "PMMLCompilerService.PMMLCompilerService()", "testcase": false, "constructor": true}, {"identifier": "getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin", "parameters": "(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "modifiers": "public static", "return": "List<KiePMMLModel>", "signature": "List<KiePMMLModel> getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "full_signature": "public static List<KiePMMLModel> getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "class_method_signature": "PMMLCompilerService.getKiePMMLModelsFromResourcesWithConfigurationsFromPlugin(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModelsCompiledFromResourcesWithConfigurations", "parameters": "(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "modifiers": "public static", "return": "List<KiePMMLModel>", "signature": "List<KiePMMLModel> getKiePMMLModelsCompiledFromResourcesWithConfigurations(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "full_signature": "public static List<KiePMMLModel> getKiePMMLModelsCompiledFromResourcesWithConfigurations(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "class_method_signature": "PMMLCompilerService.getKiePMMLModelsCompiledFromResourcesWithConfigurations(KnowledgeBuilderImpl kbuilderImpl, Collection<ResourceWithConfiguration> resourceWithConfigurations)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModelsCompiledFromResource", "parameters": "(KnowledgeBuilderImpl kbuilderImpl,\n                                                                          Resource resource)", "modifiers": "public static", "return": "List<KiePMMLModel>", "signature": "List<KiePMMLModel> getKiePMMLModelsCompiledFromResource(KnowledgeBuilderImpl kbuilderImpl,\n                                                                          Resource resource)", "full_signature": "public static List<KiePMMLModel> getKiePMMLModelsCompiledFromResource(KnowledgeBuilderImpl kbuilderImpl,\n                                                                          Resource resource)", "class_method_signature": "PMMLCompilerService.getKiePMMLModelsCompiledFromResource(KnowledgeBuilderImpl kbuilderImpl,\n                                                                          Resource resource)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModelsFromResourceFromPlugin", "parameters": "(KnowledgeBuilderImpl kbuilderImpl,\n                                                                            Resource resource)", "modifiers": "public static", "return": "List<KiePMMLModel>", "signature": "List<KiePMMLModel> getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl,\n                                                                            Resource resource)", "full_signature": "public static List<KiePMMLModel> getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl,\n                                                                            Resource resource)", "class_method_signature": "PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin(KnowledgeBuilderImpl kbuilderImpl,\n                                                                            Resource resource)", "testcase": false, "constructor": false}, {"identifier": "populateWithPMMLRuleMappers", "parameters": "(final  List<KiePMMLModel> toReturn, final Resource resource)", "modifiers": "static", "return": "void", "signature": "void populateWithPMMLRuleMappers(final  List<KiePMMLModel> toReturn, final Resource resource)", "full_signature": "static void populateWithPMMLRuleMappers(final  List<KiePMMLModel> toReturn, final Resource resource)", "class_method_signature": "PMMLCompilerService.populateWithPMMLRuleMappers(final  List<KiePMMLModel> toReturn, final Resource resource)", "testcase": false, "constructor": false}, {"identifier": "addPMMLRuleMapper", "parameters": "(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "modifiers": "static", "return": "void", "signature": "void addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "full_signature": "static void addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "class_method_signature": "PMMLCompilerService.addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "testcase": false, "constructor": false}, {"identifier": "addPMMLRuleMappers", "parameters": "(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                   final String sourcePath)", "modifiers": "static", "return": "void", "signature": "void addPMMLRuleMappers(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                   final String sourcePath)", "full_signature": "static void addPMMLRuleMappers(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                   final String sourcePath)", "class_method_signature": "PMMLCompilerService.addPMMLRuleMappers(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                   final String sourcePath)", "testcase": false, "constructor": false}, {"identifier": "getCompiler", "parameters": "(KnowledgeBuilderImpl kbuilderImpl)", "modifiers": "static", "return": "PMMLCompiler", "signature": "PMMLCompiler getCompiler(KnowledgeBuilderImpl kbuilderImpl)", "full_signature": "static PMMLCompiler getCompiler(KnowledgeBuilderImpl kbuilderImpl)", "class_method_signature": "PMMLCompilerService.getCompiler(KnowledgeBuilderImpl kbuilderImpl)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(final String fullPath)", "modifiers": "static", "return": "String", "signature": "String getFileName(final String fullPath)", "full_signature": "static String getFileName(final String fullPath)", "class_method_signature": "PMMLCompilerService.getFileName(final String fullPath)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLCompilerService.java"}, "focal_method": {"identifier": "addPMMLRuleMapper", "parameters": "(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "modifiers": "static", "return": "void", "body": "static void addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath) {\n        if (!(kiePMMLModel instanceof HasSourcesMap)) {\n            String errorMessage = String.format(\"Expecting HasSourcesMap instance, retrieved %s inside %s\",\n                                                kiePMMLModel.getClass().getName(),\n                                                sourcePath);\n            throw new KiePMMLException(errorMessage);\n        }\n        if (kiePMMLModel instanceof HasRule) {\n            String pkgUUID = ((HasRule)kiePMMLModel).getPkgUUID();\n            String rulesFileName = kiePMMLModel.getKModulePackageName() + \".\" + RULES_FILE_NAME + pkgUUID;\n            String pmmlRuleMapper = kiePMMLModel.getKModulePackageName() + \".\" + KIE_PMML_RULE_MAPPER_CLASS_NAME;\n            String ruleMapperSource = PMMLRuleMapperFactory.getPMMLRuleMapperSource(rulesFileName);\n            ((HasRule) kiePMMLModel).addSourceMap(pmmlRuleMapper, ruleMapperSource);\n            generatedRuleMappers.add(pmmlRuleMapper);\n        }\n        if (kiePMMLModel instanceof HasNestedModels) {\n            for (KiePMMLModel nestedModel : ((HasNestedModels) kiePMMLModel).getNestedModels()) {\n                addPMMLRuleMapper(nestedModel, generatedRuleMappers, sourcePath);\n            }\n        }\n    }", "signature": "void addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "full_signature": "static void addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "class_method_signature": "PMMLCompilerService.addPMMLRuleMapper(final KiePMMLModel kiePMMLModel, final List<String> generatedRuleMappers,\n                                  final String sourcePath)", "testcase": false, "constructor": false, "invocations": ["format", "getName", "getClass", "getPkgUUID", "getKModulePackageName", "getKModulePackageName", "getPMMLRuleMapperSource", "addSourceMap", "add", "getNestedModels", "addPMMLRuleMapper"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}