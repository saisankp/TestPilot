{"test_class": {"identifier": "CandidateLineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int RATIO_400 = 400;", "modifier": "private static final", "type": "int", "declarator": "RATIO_400 = 400", "var_name": "RATIO_400"}, {"original_string": "private static final int RATIO_999 = 999;", "modifier": "private static final", "type": "int", "declarator": "RATIO_999 = 999", "var_name": "RATIO_999"}, {"original_string": "private static final int RATIO_1000 = 1000;", "modifier": "private static final", "type": "int", "declarator": "RATIO_1000 = 1000", "var_name": "RATIO_1000"}], "file": "decoder/src/test/java/openlr/decoder/data/CandidateLineTest.java"}, "test_case": {"identifier": "testToStringPair", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testToStringPair() {\n        CandidateLinePair pair = new CandidateLinePair(0, 1, Integer.MAX_VALUE);\n        assertNotNull(pair.toString());\n    }", "signature": "void testToStringPair()", "full_signature": "@Test public final void testToStringPair()", "class_method_signature": "CandidateLineTest.testToStringPair()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "toString"]}, "focal_class": {"identifier": "CandidateLine", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final CandidateLine INVALID = new CandidateLine();", "modifier": "public static final", "type": "CandidateLine", "declarator": "INVALID = new CandidateLine()", "var_name": "INVALID"}, {"original_string": "private final Line line;", "modifier": "private final", "type": "Line", "declarator": "line", "var_name": "line"}, {"original_string": "private int rating;", "modifier": "private", "type": "int", "declarator": "rating", "var_name": "rating"}, {"original_string": "private int projectionAlongLine = Integer.MIN_VALUE;", "modifier": "private", "type": "int", "declarator": "projectionAlongLine = Integer.MIN_VALUE", "var_name": "projectionAlongLine"}], "methods": [{"identifier": "CandidateLine", "parameters": "(final Line l, final int r, final int projection)", "modifiers": "public", "return": "", "signature": " CandidateLine(final Line l, final int r, final int projection)", "full_signature": "public  CandidateLine(final Line l, final int r, final int projection)", "class_method_signature": "CandidateLine.CandidateLine(final Line l, final int r, final int projection)", "testcase": false, "constructor": true}, {"identifier": "CandidateLine", "parameters": "(final Line l, final int r)", "modifiers": "public", "return": "", "signature": " CandidateLine(final Line l, final int r)", "full_signature": "public  CandidateLine(final Line l, final int r)", "class_method_signature": "CandidateLine.CandidateLine(final Line l, final int r)", "testcase": false, "constructor": true}, {"identifier": "CandidateLine", "parameters": "()", "modifiers": "private", "return": "", "signature": " CandidateLine()", "full_signature": "private  CandidateLine()", "class_method_signature": "CandidateLine.CandidateLine()", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public final boolean isValid()", "class_method_signature": "CandidateLine.isValid()", "testcase": false, "constructor": false}, {"identifier": "getLine", "parameters": "()", "modifiers": "public final", "return": "Line", "signature": "Line getLine()", "full_signature": "public final Line getLine()", "class_method_signature": "CandidateLine.getLine()", "testcase": false, "constructor": false}, {"identifier": "getRating", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getRating()", "full_signature": "public final int getRating()", "class_method_signature": "CandidateLine.getRating()", "testcase": false, "constructor": false}, {"identifier": "getProjectionAlongLine", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getProjectionAlongLine()", "full_signature": "public final int getProjectionAlongLine()", "class_method_signature": "CandidateLine.getProjectionAlongLine()", "testcase": false, "constructor": false}, {"identifier": "hasProjectionAlongLine", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasProjectionAlongLine()", "full_signature": "public final boolean hasProjectionAlongLine()", "class_method_signature": "CandidateLine.hasProjectionAlongLine()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "CandidateLine.toString()", "testcase": false, "constructor": false}, {"identifier": "hasSameLine", "parameters": "(final CandidateLine cl)", "modifiers": "public final", "return": "boolean", "signature": "boolean hasSameLine(final CandidateLine cl)", "full_signature": "public final boolean hasSameLine(final CandidateLine cl)", "class_method_signature": "CandidateLine.hasSameLine(final CandidateLine cl)", "testcase": false, "constructor": false}, {"identifier": "setNewRating", "parameters": "(final int rate, final int lengthAlong)", "modifiers": "public final", "return": "void", "signature": "void setNewRating(final int rate, final int lengthAlong)", "full_signature": "public final void setNewRating(final int rate, final int lengthAlong)", "class_method_signature": "CandidateLine.setNewRating(final int rate, final int lengthAlong)", "testcase": false, "constructor": false}], "file": "decoder/src/main/java/openlr/decoder/data/CandidateLine.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "body": "@Override\n    public final String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"line: \").append(line.getID());\n        sb.append(\" rating: \").append(rating);\n        sb.append(\" projectionAlongLine: \").append(projectionAlongLine).append(\"m\");\n        return sb.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "CandidateLine.toString()", "testcase": false, "constructor": false, "invocations": ["append", "append", "getID", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}