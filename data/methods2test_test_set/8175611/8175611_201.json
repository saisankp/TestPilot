{"test_class": {"identifier": "DefaultDataProviderMethodResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Spy\n    private DefaultDataProviderMethodResolver underTest;", "modifier": "@Spy\n    private", "type": "DefaultDataProviderMethodResolver", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private DataProviderResolverContext context;", "modifier": "@Mock\n    private", "type": "DataProviderResolverContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Method method = Methods.anyMethod();", "modifier": "private final", "type": "Method", "declarator": "method = Methods.anyMethod()", "var_name": "method"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/resolver/DefaultDataProviderMethodResolverTest.java"}, "test_case": {"identifier": "testFindAnnotatedMethodsShouldNotShadowedMethodsHavingAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindAnnotatedMethodsShouldNotShadowedMethodsHavingAnnotation() {\n        // Given:\n        final List<Class<?>> locations = Collections.<Class<?>>singletonList(ShadowingTestChild.class);\n\n        // When:\n        List<Method> result = underTest.findAnnotatedMethods(locations, TestAnnotation.class);\n\n        // Then:\n        // @formatter:off\n        assertThat(result).hasSize(7)\n                .has(name(\"privateWithAnnotation\"), atIndex(0))\n                .has(name(\"notShadowedDueToParameterLength\"), atIndex(1))\n                .has(name(\"notShadowedDueToParameterTypes\"), atIndex(2))\n                .has(name(\"shadowed\"), atIndex(3))\n                .has(name(\"notShadowedDueToParameterLength\"), atIndex(4))\n                .has(name(\"notShadowedDueToParameterTypes\"), atIndex(5))\n                .has(name(\"shadowedButChildHasNoAnnotation\"), atIndex(6))\n            ;\n        // @formatter:on\n    }", "signature": "void testFindAnnotatedMethodsShouldNotShadowedMethodsHavingAnnotation()", "full_signature": "@Test public void testFindAnnotatedMethodsShouldNotShadowedMethodsHavingAnnotation()", "class_method_signature": "DefaultDataProviderMethodResolverTest.testFindAnnotatedMethodsShouldNotShadowedMethodsHavingAnnotation()", "testcase": true, "constructor": false, "invocations": ["singletonList", "findAnnotatedMethods", "has", "has", "has", "has", "has", "has", "has", "hasSize", "assertThat", "name", "atIndex", "name", "atIndex", "name", "atIndex", "name", "atIndex", "name", "atIndex", "name", "atIndex", "name", "atIndex"]}, "focal_class": {"identifier": "DefaultDataProviderMethodResolver", "superclass": "", "interfaces": "implements DataProviderMethodResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(DataProviderResolverContext context)", "modifiers": "@Override public", "return": "List<Method>", "signature": "List<Method> resolve(DataProviderResolverContext context)", "full_signature": "@Override public List<Method> resolve(DataProviderResolverContext context)", "class_method_signature": "DefaultDataProviderMethodResolver.resolve(DataProviderResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "findAnnotatedMethods", "parameters": "(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "modifiers": "protected", "return": "List<Method>", "signature": "List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "full_signature": "protected List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "class_method_signature": "DefaultDataProviderMethodResolver.findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "isMatchingNameConvention", "parameters": "(String testMethodName, String dataProviderMethodName)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "full_signature": "protected boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "class_method_signature": "DefaultDataProviderMethodResolver.isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "testcase": false, "constructor": false}, {"identifier": "sorted", "parameters": "(Method[] methods)", "modifiers": "private", "return": "Method[]", "signature": "Method[] sorted(Method[] methods)", "full_signature": "private Method[] sorted(Method[] methods)", "class_method_signature": "DefaultDataProviderMethodResolver.sorted(Method[] methods)", "testcase": false, "constructor": false}, {"identifier": "isMethodShadowedBy", "parameters": "(Method method, List<Method> methods)", "modifiers": "private", "return": "boolean", "signature": "boolean isMethodShadowedBy(Method method, List<Method> methods)", "full_signature": "private boolean isMethodShadowedBy(Method method, List<Method> methods)", "class_method_signature": "DefaultDataProviderMethodResolver.isMethodShadowedBy(Method method, List<Method> methods)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/resolver/DefaultDataProviderMethodResolver.java"}, "focal_method": {"identifier": "findAnnotatedMethods", "parameters": "(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "modifiers": "protected", "return": "List<Method>", "body": "protected List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass) {\n        List<Method> result = new ArrayList<Method>();\n        for (Class<?> location : locations) {\n            List<Method> intermediateResult = new ArrayList<Method>();\n            Class<?> currentClass = location;\n            while (currentClass != null) {\n                for (Method method : sorted(currentClass.getDeclaredMethods())) {\n                    Annotation foundAnnotation = method.getAnnotation(annotationClass);\n                    if (foundAnnotation != null && !isMethodShadowedBy(method, intermediateResult)) {\n                        intermediateResult.add(method);\n                    }\n                }\n                currentClass = currentClass.getSuperclass();\n            }\n            result.addAll(intermediateResult);\n        }\n        return result;\n    }", "signature": "List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "full_signature": "protected List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "class_method_signature": "DefaultDataProviderMethodResolver.findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false, "invocations": ["sorted", "getDeclaredMethods", "getAnnotation", "isMethodShadowedBy", "add", "getSuperclass", "addAll"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}