{"test_class": {"identifier": "ExtSourceLdapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n\tprivate static ExtSourceLdap extSourceLdap;", "modifier": "@Spy\n\tprivate static", "type": "ExtSourceLdap", "declarator": "extSourceLdap", "var_name": "extSourceLdap"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/ExtSourceLdapTest.java"}, "test_case": {"identifier": "getUsersSubjectsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUsersSubjectsTest() throws Exception {\n\t\tSystem.out.println(\"getUsersSubjectsTest\");\n\n\t\t// define needed attributes\n\t\tString base = \"cn=firstName,dc=dc\";\n\t\tString usersQuery = \"dc=cz\";\n\t\tMap<String, String> mapOfAttributes = new HashMap<>();\n\t\tmapOfAttributes.put(\"usersQuery\", usersQuery);\n\t\tmapOfAttributes.put(\"base\", base);\n\t\tdoReturn(mapOfAttributes).when(extSourceLdap).getAttributes();\n\n\t\t// mock connection and define received attributes\n\t\tDirContext dirContext = mock(DirContext.class);\n\t\tdoReturn(dirContext).when(extSourceLdap).getContext();\n\t\tAttribute attribute = new BasicAttribute(\"firstName\", \"josef\");\n\t\tAttribute attribute2 = new BasicAttribute(\"dc\", \"cz\");\n\t\tAttributes attributes = new BasicAttributes();\n\t\tattributes.put(attribute);\n\t\tattributes.put(attribute2);\n\t\tNamingEnumeration<SearchResult> namingEnumeration = mock(NamingEnumeration.class);\n\t\tdoReturn(namingEnumeration).when(dirContext).search(anyString(), anyString(), any());\n\t\tdoReturn(true,false).when(namingEnumeration).hasMore();\n\t\tSearchResult searchResult = new SearchResult(\"name\", namingEnumeration, attributes);\n\t\tdoReturn(searchResult).when(namingEnumeration).next();\n\n\t\t// create expected subject to get\n\t\tList<Map<String, String>> expectedSubjects = new ArrayList<>();\n\t\tMap<String, String> subject = new HashMap<>();\n\t\tsubject.put(\"cn\", \"josef\");\n\t\tsubject.put(\"dc\", \"cz\");\n\t\texpectedSubjects.add(subject);\n\n\t\t// test the method\n\t\tList<Map<String, String>> actualSubjects = extSourceLdap.getUsersSubjects();\n\t\tassertEquals(\"subjects should be same\", expectedSubjects, actualSubjects);\n\t}", "signature": "void getUsersSubjectsTest()", "full_signature": "@Test public void getUsersSubjectsTest()", "class_method_signature": "ExtSourceLdapTest.getUsersSubjectsTest()", "testcase": true, "constructor": false, "invocations": ["println", "put", "put", "getAttributes", "when", "doReturn", "mock", "getContext", "when", "doReturn", "put", "put", "mock", "search", "when", "doReturn", "anyString", "anyString", "any", "hasMore", "when", "doReturn", "next", "when", "doReturn", "put", "put", "add", "getUsersSubjects", "assertEquals"]}, "focal_class": {"identifier": "ExtSourceLdap", "superclass": "extends ExtSource", "interfaces": "implements ExtSourceApi", "fields": [{"original_string": "protected Map<String, String> mapping;", "modifier": "protected", "type": "Map<String, String>", "declarator": "mapping", "var_name": "mapping"}, {"original_string": "protected final static Logger log = LoggerFactory.getLogger(ExtSourceLdap.class);", "modifier": "protected final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExtSourceLdap.class)", "var_name": "log"}, {"original_string": "protected DirContext dirContext = null;", "modifier": "protected", "type": "DirContext", "declarator": "dirContext = null", "var_name": "dirContext"}, {"original_string": "protected String filteredQuery = null;", "modifier": "protected", "type": "String", "declarator": "filteredQuery = null", "var_name": "filteredQuery"}, {"original_string": "private static PerunBlImpl perunBl;", "modifier": "private static", "type": "PerunBlImpl", "declarator": "perunBl", "var_name": "perunBl"}], "methods": [{"identifier": "getContext", "parameters": "()", "modifiers": "protected", "return": "DirContext", "signature": "DirContext getContext()", "full_signature": "protected DirContext getContext()", "class_method_signature": "ExtSourceLdap.getContext()", "testcase": false, "constructor": false}, {"identifier": "setPerunBlImpl", "parameters": "(PerunBlImpl perun)", "modifiers": "public static", "return": "PerunBlImpl", "signature": "PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "full_signature": "public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "class_method_signature": "ExtSourceLdap.setPerunBlImpl(PerunBlImpl perun)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString)", "class_method_signature": "ExtSourceLdap.findSubjectsLogins(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString, int maxResults)", "class_method_signature": "ExtSourceLdap.findSubjectsLogins(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getSubjectByLogin", "parameters": "(String login)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSubjectByLogin(String login)", "full_signature": "@Override public Map<String, String> getSubjectByLogin(String login)", "class_method_signature": "ExtSourceLdap.getSubjectByLogin(String login)", "testcase": false, "constructor": false}, {"identifier": "getGroupSubjects", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "class_method_signature": "ExtSourceLdap.getGroupSubjects(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceLdap.getUsersSubjects()", "testcase": false, "constructor": false}, {"identifier": "initContext", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initContext()", "full_signature": "protected void initContext()", "class_method_signature": "ExtSourceLdap.initContext()", "testcase": false, "constructor": false}, {"identifier": "getSubjectAttributes", "parameters": "(Attributes attributes)", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getSubjectAttributes(Attributes attributes)", "full_signature": "protected Map<String,String> getSubjectAttributes(Attributes attributes)", "class_method_signature": "ExtSourceLdap.getSubjectAttributes(Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "getLdapAttributeValue", "parameters": "(Attributes attributes, String ldapAttrNameRaw)", "modifiers": "protected", "return": "String", "signature": "String getLdapAttributeValue(Attributes attributes, String ldapAttrNameRaw)", "full_signature": "protected String getLdapAttributeValue(Attributes attributes, String ldapAttrNameRaw)", "class_method_signature": "ExtSourceLdap.getLdapAttributeValue(Attributes attributes, String ldapAttrNameRaw)", "testcase": false, "constructor": false}, {"identifier": "querySource", "parameters": "(String query, String base, int maxResults)", "modifiers": "protected", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> querySource(String query, String base, int maxResults)", "full_signature": "protected List<Map<String,String>> querySource(String query, String base, int maxResults)", "class_method_signature": "ExtSourceLdap.querySource(String query, String base, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtSourceLdap.close()", "testcase": false, "constructor": false}, {"identifier": "getSubjectGroups", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "class_method_signature": "ExtSourceLdap.getSubjectGroups(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjects(String searchString)", "full_signature": "@Override public List<Map<String, String>> findSubjects(String searchString)", "class_method_signature": "ExtSourceLdap.findSubjects(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjects(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String, String>> findSubjects(String searchString, int maxResults)", "class_method_signature": "ExtSourceLdap.findSubjects(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getAttributes()", "full_signature": "protected Map<String,String> getAttributes()", "class_method_signature": "ExtSourceLdap.getAttributes()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/ExtSourceLdap.java"}, "focal_method": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "body": "@Override\n\tpublic List<Map<String, String>> getUsersSubjects() {\n\t\t// if usersQuery is null, there is no filter and method returns all users subjects\n\t\tString filter = getAttributes().get(UsersManager.USERS_QUERY);\n\n\t\tString base = getAttributes().get(\"base\");\n\t\tif (base == null) {\n\t\t\tthrow new InternalErrorException(\"base attributes is required\");\n\t\t}\n\n\t\treturn querySource(filter, base, 0);\n\t}", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceLdap.getUsersSubjects()", "testcase": false, "constructor": false, "invocations": ["get", "getAttributes", "get", "getAttributes", "querySource"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}