{"test_class": {"identifier": "TestGrammarIdentifierCentral", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GrammarIdentifierCentral central;", "modifier": "private", "type": "GrammarIdentifierCentral", "declarator": "central", "var_name": "central"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/grammar/TestGrammarIdentifierCentral.java"}, "test_case": {"identifier": "testIdentifyExternalGrammar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdentifyExternalGrammar() throws UnsupportedFormatError {\n        final String grammar = \"<grammar type=\\\"application/srgs+xml\\\" \"\n            + \"root=\\\"r2\\\" src=\\\"grammar.grxml\\\" version=\\\"1.0\\\"></grammar>\";\n        final GrammarDocument doc = getGrammarFromString(grammar);\n\n        final GrammarType type = central.identifyGrammar(doc,\n                GrammarType.SRGS_XML);\n        Assert.assertEquals(GrammarType.SRGS_XML, type);\n    }", "signature": "void testIdentifyExternalGrammar()", "full_signature": "@Test public void testIdentifyExternalGrammar()", "class_method_signature": "TestGrammarIdentifierCentral.testIdentifyExternalGrammar()", "testcase": true, "constructor": false, "invocations": ["getGrammarFromString", "identifyGrammar", "assertEquals"]}, "focal_class": {"identifier": "GrammarIdentifierCentral", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Collection<GrammarIdentifier> identifier;", "modifier": "private final", "type": "Collection<GrammarIdentifier>", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(GrammarIdentifierCentral.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(GrammarIdentifierCentral.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "GrammarIdentifierCentral", "parameters": "()", "modifiers": "public", "return": "", "signature": " GrammarIdentifierCentral()", "full_signature": "public  GrammarIdentifierCentral()", "class_method_signature": "GrammarIdentifierCentral.GrammarIdentifierCentral()", "testcase": false, "constructor": true}, {"identifier": "identifyGrammar", "parameters": "(final GrammarDocument grammar,\n            final GrammarType expectedType)", "modifiers": "public", "return": "GrammarType", "signature": "GrammarType identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "full_signature": "public GrammarType identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "class_method_signature": "GrammarIdentifierCentral.identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "testcase": false, "constructor": false}, {"identifier": "getAvailableIdentifier", "parameters": "(final GrammarType type)", "modifiers": "protected", "return": "List<GrammarIdentifier>", "signature": "List<GrammarIdentifier> getAvailableIdentifier(final GrammarType type)", "full_signature": "protected List<GrammarIdentifier> getAvailableIdentifier(final GrammarType type)", "class_method_signature": "GrammarIdentifierCentral.getAvailableIdentifier(final GrammarType type)", "testcase": false, "constructor": false}, {"identifier": "typeSupported", "parameters": "(final GrammarType type)", "modifiers": "public", "return": "boolean", "signature": "boolean typeSupported(final GrammarType type)", "full_signature": "public boolean typeSupported(final GrammarType type)", "class_method_signature": "GrammarIdentifierCentral.typeSupported(final GrammarType type)", "testcase": false, "constructor": false}, {"identifier": "setIdentifier", "parameters": "(final List<GrammarIdentifier> grammarIdenifier)", "modifiers": "public", "return": "void", "signature": "void setIdentifier(final List<GrammarIdentifier> grammarIdenifier)", "full_signature": "public void setIdentifier(final List<GrammarIdentifier> grammarIdenifier)", "class_method_signature": "GrammarIdentifierCentral.setIdentifier(final List<GrammarIdentifier> grammarIdenifier)", "testcase": false, "constructor": false}, {"identifier": "addIdentifier", "parameters": "(final GrammarIdentifier id)", "modifiers": "public", "return": "void", "signature": "void addIdentifier(final GrammarIdentifier id)", "full_signature": "public void addIdentifier(final GrammarIdentifier id)", "class_method_signature": "GrammarIdentifierCentral.addIdentifier(final GrammarIdentifier id)", "testcase": false, "constructor": false}, {"identifier": "getIdentifierByType", "parameters": "(final GrammarType type)", "modifiers": "private", "return": "GrammarIdentifier", "signature": "GrammarIdentifier getIdentifierByType(final GrammarType type)", "full_signature": "private GrammarIdentifier getIdentifierByType(final GrammarType type)", "class_method_signature": "GrammarIdentifierCentral.getIdentifierByType(final GrammarType type)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/grammar/GrammarIdentifierCentral.java"}, "focal_method": {"identifier": "identifyGrammar", "parameters": "(final GrammarDocument grammar,\n            final GrammarType expectedType)", "modifiers": "public", "return": "GrammarType", "body": "public GrammarType identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)\n            throws UnsupportedFormatError {\n        // first of all make sure, grammar is not null nor empty\n        if (grammar == null) {\n            throw new UnsupportedFormatError(\"Cannot identify a null grammar!\");\n        }\n\n        // Do nothing if there is are no identifiers.\n        if (identifier.isEmpty()) {\n            LOGGER.warn(\"no registered identifier!\");\n            return null;\n        }\n\n        // Check the expected identifier first\n        final GrammarIdentifier expectedIdentifier =\n            getIdentifierByType(expectedType);\n        if (expectedIdentifier != null) {\n            // It is not a drama at this point if we do no not find an\n            // identifier.It may be the case that the actual type is different\n            // to the expected type.\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"trying to identify grammar with '\"\n                        + expectedIdentifier.getClass() + \"'\");\n            }\n            final GrammarType type = expectedIdentifier.identify(grammar);\n            if (type != null) {\n                return type;\n            }\n        }\n\n        /*\n         * allright let's see, if there is any identifier,\n         * supporting the type\n         */\n        for (GrammarIdentifier current : identifier) {\n            /* try to identify */\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"trying to identify grammar with '\"\n                        + current.getClass() + \"'\");\n            }\n\n            // Skip the already tested identifier\n            if (current.getSupportedType() != expectedType) { \n                final GrammarType currentType = current.identify(grammar);\n                if (currentType != null) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(\"identified grammar with type '\"\n                                     + currentType + \"'\");\n                    }\n    \n                    return currentType;\n                }\n            }\n        }\n\n        LOGGER.warn(\"unable to identify grammar\");\n        return null;\n    }", "signature": "GrammarType identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "full_signature": "public GrammarType identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "class_method_signature": "GrammarIdentifierCentral.identifyGrammar(final GrammarDocument grammar,\n            final GrammarType expectedType)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "warn", "getIdentifierByType", "isDebugEnabled", "debug", "getClass", "identify", "isDebugEnabled", "debug", "getClass", "getSupportedType", "identify", "isDebugEnabled", "debug", "warn"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}