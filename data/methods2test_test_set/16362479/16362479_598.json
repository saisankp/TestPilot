{"test_class": {"identifier": "WriteModificationTest", "superclass": "extends AbstractModificationTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/modification/WriteModificationTest.java"}, "test_case": {"identifier": "testSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialization() {\n        YangInstanceIdentifier path = TestModel.TEST_PATH;\n        NormalizedNode<?, ?> data = ImmutableContainerNodeBuilder.create()\n                .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(TestModel.TEST_QNAME))\n                .withChild(ImmutableNodes.leafNode(TestModel.DESC_QNAME, \"foo\")).build();\n\n        WriteModification expected = new WriteModification(path, data);\n\n        WriteModification clone = (WriteModification) SerializationUtils.clone(expected);\n        assertEquals(\"getPath\", expected.getPath(), clone.getPath());\n        assertEquals(\"getData\", expected.getData(), clone.getData());\n    }", "signature": "void testSerialization()", "full_signature": "@Test public void testSerialization()", "class_method_signature": "WriteModificationTest.testSerialization()", "testcase": true, "constructor": false, "invocations": ["build", "withChild", "withNodeIdentifier", "create", "leafNode", "clone", "assertEquals", "getPath", "getPath", "assertEquals", "getData", "getData"]}, "focal_class": {"identifier": "WriteModification", "superclass": "extends AbstractModification", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private NormalizedNode<?, ?> data;", "modifier": "private", "type": "NormalizedNode<?, ?>", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "WriteModification", "parameters": "()", "modifiers": "public", "return": "", "signature": " WriteModification()", "full_signature": "public  WriteModification()", "class_method_signature": "WriteModification.WriteModification()", "testcase": false, "constructor": true}, {"identifier": "WriteModification", "parameters": "(final short version)", "modifiers": "public", "return": "", "signature": " WriteModification(final short version)", "full_signature": "public  WriteModification(final short version)", "class_method_signature": "WriteModification.WriteModification(final short version)", "testcase": false, "constructor": true}, {"identifier": "WriteModification", "parameters": "(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "", "return": "", "signature": " WriteModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "  WriteModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "WriteModification.WriteModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": true}, {"identifier": "WriteModification", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "public", "return": "", "signature": " WriteModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "public  WriteModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "WriteModification.WriteModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final DOMStoreWriteTransaction transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DOMStoreWriteTransaction transaction)", "full_signature": "@Override public void apply(final DOMStoreWriteTransaction transaction)", "class_method_signature": "WriteModification.apply(final DOMStoreWriteTransaction transaction)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final DataTreeModification transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DataTreeModification transaction)", "full_signature": "@Override public void apply(final DataTreeModification transaction)", "class_method_signature": "WriteModification.apply(final DataTreeModification transaction)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "NormalizedNode<?, ?>", "signature": "NormalizedNode<?, ?> getData()", "full_signature": "public NormalizedNode<?, ?> getData()", "class_method_signature": "WriteModification.getData()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "byte", "signature": "byte getType()", "full_signature": "@Override public byte getType()", "class_method_signature": "WriteModification.getType()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(final ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(final ObjectInput in)", "full_signature": "@Override public void readExternal(final ObjectInput in)", "class_method_signature": "WriteModification.readExternal(final ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(final ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(final ObjectOutput out)", "full_signature": "@Override public void writeExternal(final ObjectOutput out)", "class_method_signature": "WriteModification.writeExternal(final ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "fromStream", "parameters": "(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "modifiers": "public static", "return": "WriteModification", "signature": "WriteModification fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "full_signature": "public static WriteModification fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "class_method_signature": "WriteModification.fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(final NormalizedNodeDataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(final NormalizedNodeDataOutput out)", "full_signature": "@Override public void writeTo(final NormalizedNodeDataOutput out)", "class_method_signature": "WriteModification.writeTo(final NormalizedNodeDataOutput out)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/modification/WriteModification.java"}, "focal_method": {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "NormalizedNode<?, ?>", "body": "public NormalizedNode<?, ?> getData() {\n        return data;\n    }", "signature": "NormalizedNode<?, ?> getData()", "full_signature": "public NormalizedNode<?, ?> getData()", "class_method_signature": "WriteModification.getData()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}