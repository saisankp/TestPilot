{"test_class": {"identifier": "XlsLegendParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XlsLegendParser parser;", "modifier": "private", "type": "XlsLegendParser", "declarator": "parser", "var_name": "parser"}], "file": "beam-glob-due-reader/src/test/java/org/esa/beam/dataio/globcover/geotiff/XlsLegendParserTest.java"}, "test_case": {"identifier": "testRegionalLegendParsingRegionalSheet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegionalLegendParsingRegionalSheet() {\n        final InputStream stream = XlsLegendParserTest.class.getResourceAsStream(\"regional_Legend.xls\");\n        final LegendClass[] regionalClasses = parser.parse(stream, true);\n        assertEquals(41, regionalClasses.length);\n        final LegendClass class1 = new LegendClass(11, \"Post-flooding or irrigated croplands (or aquatic)\", \"Class_1\",\n                                                   new Color(170, 240, 240));\n        assertLegendEquals(class1, regionalClasses[0]);\n\n        final LegendClass class8 = new LegendClass(21, \"Mosaic cropland (50-70%) / grassland or shrubland (20-50%)\",\n                                                   \"Class_8\",\n                                                   new Color(220, 240, 100));\n        assertLegendEquals(class8, regionalClasses[7]);\n        final LegendClass class41 = new LegendClass(230, \"No data (burnt areas, clouds,\u2026)\", \"Class_41\",\n                                                    new Color(0, 0, 0));\n        assertLegendEquals(class41, regionalClasses[40]);\n    }", "signature": "void testRegionalLegendParsingRegionalSheet()", "full_signature": "@Test public void testRegionalLegendParsingRegionalSheet()", "class_method_signature": "XlsLegendParserTest.testRegionalLegendParsingRegionalSheet()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "parse", "assertEquals", "assertLegendEquals", "assertLegendEquals", "assertLegendEquals"]}, "focal_class": {"identifier": "XlsLegendParser", "superclass": "", "interfaces": "implements Parser", "fields": [{"original_string": "private static final String GLOBAL_LEGEND_SHEET = \"Global\";", "modifier": "private static final", "type": "String", "declarator": "GLOBAL_LEGEND_SHEET = \"Global\"", "var_name": "GLOBAL_LEGEND_SHEET"}, {"original_string": "private static final String REGIONAL_LEGEND_SHEET = \"Regional\";", "modifier": "private static final", "type": "String", "declarator": "REGIONAL_LEGEND_SHEET = \"Regional\"", "var_name": "REGIONAL_LEGEND_SHEET"}, {"original_string": "private static final String VALUE = \"Value\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"Value\"", "var_name": "VALUE"}, {"original_string": "private static final String LABEL = \"Label\";", "modifier": "private static final", "type": "String", "declarator": "LABEL = \"Label\"", "var_name": "LABEL"}, {"original_string": "private static final String RED = \"Red\";", "modifier": "private static final", "type": "String", "declarator": "RED = \"Red\"", "var_name": "RED"}, {"original_string": "private static final String BLUE = \"Blue\";", "modifier": "private static final", "type": "String", "declarator": "BLUE = \"Blue\"", "var_name": "BLUE"}, {"original_string": "private static final String GREEN = \"Green\";", "modifier": "private static final", "type": "String", "declarator": "GREEN = \"Green\"", "var_name": "GREEN"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inputStream, boolean isRegional)", "modifiers": "@Override public", "return": "LegendClass[]", "signature": "LegendClass[] parse(InputStream inputStream, boolean isRegional)", "full_signature": "@Override public LegendClass[] parse(InputStream inputStream, boolean isRegional)", "class_method_signature": "XlsLegendParser.parse(InputStream inputStream, boolean isRegional)", "testcase": false, "constructor": false}], "file": "beam-glob-due-reader/src/main/java/org/esa/beam/dataio/globcover/geotiff/XlsLegendParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inputStream, boolean isRegional)", "modifiers": "@Override public", "return": "LegendClass[]", "body": "@Override\n    public LegendClass[] parse(InputStream inputStream, boolean isRegional) {\n        Workbook workbook = null;\n        LegendClass[] classes = new LegendClass[0];\n        try {\n            workbook = Workbook.getWorkbook(inputStream);\n            Sheet sheet;\n            if( isRegional ) {\n                sheet = workbook.getSheet(REGIONAL_LEGEND_SHEET);\n                if(sheet == null) {\n                    throw new IllegalArgumentException(\"Given xls-legend is not regional.\");\n                }\n            } else {\n                sheet = workbook.getSheet(GLOBAL_LEGEND_SHEET);\n            }\n\n            final int valueCol = sheet.findCell(VALUE).getColumn();\n            final int labelCol = sheet.findCell(LABEL).getColumn();\n            final int redCol = sheet.findCell(RED).getColumn();\n            final int blueCol = sheet.findCell(BLUE).getColumn();\n            final int greenCol = sheet.findCell(GREEN).getColumn();\n\n            classes = new LegendClass[ sheet.getRows() - 1 ];\n\n            for (int i = 1; i < sheet.getRows(); i++) {\n                final Cell valueCell = sheet.getCell(valueCol, i);\n                if(StringUtils.isNullOrEmpty(valueCell.getContents())) {\n                    continue;\n                }\n                final Cell labelCell = sheet.getCell(labelCol, i);\n                final Cell redCell = sheet.getCell(redCol, i);\n                final Cell greenCell = sheet.getCell(greenCol, i);\n                final Cell blueCell = sheet.getCell(blueCol, i);\n\n                final int value = Integer.parseInt(valueCell.getContents());\n                final String name = \"Class_\" + i;\n                final String descr = labelCell.getContents().trim();\n                final Color color = new Color(Integer.parseInt(redCell.getContents()),\n                                              Integer.parseInt(greenCell.getContents()),\n                                              Integer.parseInt(blueCell.getContents()));\n\n                final LegendClass legendClass = new LegendClass(value, descr, name, color);\n                classes[ i - 1 ] = legendClass;\n            }\n\n        } catch (BiffException e) {\n            Debug.trace(e);\n        } catch (IOException e) {\n            Debug.trace(e);\n        } finally {\n            if( workbook != null ) {\n                workbook.close();\n            }\n        }\n        return classes;\n    }", "signature": "LegendClass[] parse(InputStream inputStream, boolean isRegional)", "full_signature": "@Override public LegendClass[] parse(InputStream inputStream, boolean isRegional)", "class_method_signature": "XlsLegendParser.parse(InputStream inputStream, boolean isRegional)", "testcase": false, "constructor": false, "invocations": ["getWorkbook", "getSheet", "getSheet", "getColumn", "findCell", "getColumn", "findCell", "getColumn", "findCell", "getColumn", "findCell", "getColumn", "findCell", "getRows", "getRows", "getCell", "isNullOrEmpty", "getContents", "getCell", "getCell", "getCell", "getCell", "parseInt", "getContents", "trim", "getContents", "parseInt", "getContents", "parseInt", "getContents", "parseInt", "getContents", "trace", "trace", "close"]}, "repository": {"repo_id": 526150, "url": "https://github.com/bcdev/glob-box", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 6440, "license": "licensed"}}