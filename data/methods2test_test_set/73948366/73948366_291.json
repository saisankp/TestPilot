{"test_class": {"identifier": "TestJwtsSigningKeyResolver", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/token/jwts/TestJwtsSigningKeyResolver.java"}, "test_case": {"identifier": "testGetSocketFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSocketFactory() {\n\n        final String oldConf = System.setProperty(JwtsSigningKeyResolver.ZTS_PROP_ATHENZ_CONF,\n                \"src/test/resources/athenz.conf\");\n\n        JwtsSigningKeyResolver resolver = new JwtsSigningKeyResolver(null, null);\n        assertNull(resolver.getSocketFactory(null));\n\n        if (oldConf == null) {\n            System.clearProperty(JwtsSigningKeyResolver.ZTS_PROP_ATHENZ_CONF);\n        } else {\n            System.setProperty(JwtsSigningKeyResolver.ZTS_PROP_ATHENZ_CONF, oldConf);\n        }\n    }", "signature": "void testGetSocketFactory()", "full_signature": "@Test public void testGetSocketFactory()", "class_method_signature": "TestJwtsSigningKeyResolver.testGetSocketFactory()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertNull", "getSocketFactory", "clearProperty", "setProperty"]}, "focal_class": {"identifier": "JwtsSigningKeyResolver", "superclass": "", "interfaces": "implements SigningKeyResolver", "fields": [{"original_string": "public static final String ZTS_PROP_ATHENZ_CONF = \"athenz.athenz_conf\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_PROP_ATHENZ_CONF = \"athenz.athenz_conf\"", "var_name": "ZTS_PROP_ATHENZ_CONF"}, {"original_string": "private static final String ZTS_DEFAULT_ATHENZ_CONFIG = \"/conf/athenz/athenz.conf\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_DEFAULT_ATHENZ_CONFIG = \"/conf/athenz/athenz.conf\"", "var_name": "ZTS_DEFAULT_ATHENZ_CONFIG"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JwtsSigningKeyResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JwtsSigningKeyResolver.class)", "var_name": "LOGGER"}, {"original_string": "private static final ObjectMapper JSON_MAPPER = initJsonMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "JSON_MAPPER = initJsonMapper()", "var_name": "JSON_MAPPER"}, {"original_string": "ConcurrentHashMap<String, PublicKey> publicKeys;", "modifier": "", "type": "ConcurrentHashMap<String, PublicKey>", "declarator": "publicKeys", "var_name": "publicKeys"}], "methods": [{"identifier": "initJsonMapper", "parameters": "()", "modifiers": "static", "return": "ObjectMapper", "signature": "ObjectMapper initJsonMapper()", "full_signature": "static ObjectMapper initJsonMapper()", "class_method_signature": "JwtsSigningKeyResolver.initJsonMapper()", "testcase": false, "constructor": false}, {"identifier": "JwtsSigningKeyResolver", "parameters": "(final String serverUrl, final SSLContext sslContext)", "modifiers": "public", "return": "", "signature": " JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext)", "full_signature": "public  JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext)", "class_method_signature": "JwtsSigningKeyResolver.JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext)", "testcase": false, "constructor": true}, {"identifier": "JwtsSigningKeyResolver", "parameters": "(final String serverUrl, final SSLContext sslContext, boolean skipConfig)", "modifiers": "public", "return": "", "signature": " JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext, boolean skipConfig)", "full_signature": "public  JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext, boolean skipConfig)", "class_method_signature": "JwtsSigningKeyResolver.JwtsSigningKeyResolver(final String serverUrl, final SSLContext sslContext, boolean skipConfig)", "testcase": false, "constructor": true}, {"identifier": "resolveSigningKey", "parameters": "(JwsHeader jwsHeader, Claims claims)", "modifiers": "@Override public", "return": "Key", "signature": "Key resolveSigningKey(JwsHeader jwsHeader, Claims claims)", "full_signature": "@Override public Key resolveSigningKey(JwsHeader jwsHeader, Claims claims)", "class_method_signature": "JwtsSigningKeyResolver.resolveSigningKey(JwsHeader jwsHeader, Claims claims)", "testcase": false, "constructor": false}, {"identifier": "resolveSigningKey", "parameters": "(JwsHeader jwsHeader, String body)", "modifiers": "@Override public", "return": "Key", "signature": "Key resolveSigningKey(JwsHeader jwsHeader, String body)", "full_signature": "@Override public Key resolveSigningKey(JwsHeader jwsHeader, String body)", "class_method_signature": "JwtsSigningKeyResolver.resolveSigningKey(JwsHeader jwsHeader, String body)", "testcase": false, "constructor": false}, {"identifier": "resolveSigningKey", "parameters": "(JwsHeader jwsHeader)", "modifiers": "private", "return": "Key", "signature": "Key resolveSigningKey(JwsHeader jwsHeader)", "full_signature": "private Key resolveSigningKey(JwsHeader jwsHeader)", "class_method_signature": "JwtsSigningKeyResolver.resolveSigningKey(JwsHeader jwsHeader)", "testcase": false, "constructor": false}, {"identifier": "addPublicKey", "parameters": "(final String keyId, final PublicKey publicKey)", "modifiers": "public", "return": "void", "signature": "void addPublicKey(final String keyId, final PublicKey publicKey)", "full_signature": "public void addPublicKey(final String keyId, final PublicKey publicKey)", "class_method_signature": "JwtsSigningKeyResolver.addPublicKey(final String keyId, final PublicKey publicKey)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKeysFromServer", "parameters": "(final String serverUrl, final SSLContext sslContext)", "modifiers": "", "return": "void", "signature": "void loadPublicKeysFromServer(final String serverUrl, final SSLContext sslContext)", "full_signature": " void loadPublicKeysFromServer(final String serverUrl, final SSLContext sslContext)", "class_method_signature": "JwtsSigningKeyResolver.loadPublicKeysFromServer(final String serverUrl, final SSLContext sslContext)", "testcase": false, "constructor": false}, {"identifier": "getSocketFactory", "parameters": "(SSLContext sslContext)", "modifiers": "", "return": "SSLSocketFactory", "signature": "SSLSocketFactory getSocketFactory(SSLContext sslContext)", "full_signature": " SSLSocketFactory getSocketFactory(SSLContext sslContext)", "class_method_signature": "JwtsSigningKeyResolver.getSocketFactory(SSLContext sslContext)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(final String serverUrl)", "modifiers": "", "return": "URLConnection", "signature": "URLConnection getConnection(final String serverUrl)", "full_signature": " URLConnection getConnection(final String serverUrl)", "class_method_signature": "JwtsSigningKeyResolver.getConnection(final String serverUrl)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKeysFromConfig", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadPublicKeysFromConfig()", "full_signature": " void loadPublicKeysFromConfig()", "class_method_signature": "JwtsSigningKeyResolver.loadPublicKeysFromConfig()", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/jwts/JwtsSigningKeyResolver.java"}, "focal_method": {"identifier": "getSocketFactory", "parameters": "(SSLContext sslContext)", "modifiers": "", "return": "SSLSocketFactory", "body": "SSLSocketFactory getSocketFactory(SSLContext sslContext) {\n        return (sslContext == null) ? null : sslContext.getSocketFactory();\n    }", "signature": "SSLSocketFactory getSocketFactory(SSLContext sslContext)", "full_signature": " SSLSocketFactory getSocketFactory(SSLContext sslContext)", "class_method_signature": "JwtsSigningKeyResolver.getSocketFactory(SSLContext sslContext)", "testcase": false, "constructor": false, "invocations": ["getSocketFactory"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}