{"test_class": {"identifier": "AbstractServiceBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractServiceBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void build() {\n        ProtocolConfig protocol = new ProtocolConfig();\n\n        ServiceBuilder builder = new ServiceBuilder();\n        builder.version(\"version\").group(\"group\").deprecated(true).delay(1000).export(false).weight(1)\n                .document(\"document\").dynamic(true).token(\"token\").accesslog(\"accesslog\")\n                .addProtocol(protocol).protocolIds(\"protocolIds\").tag(\"tag\").executes(100).register(false)\n                .warmup(200).serialization(\"serialization\").id(\"id\").prefix(\"prefix\");\n\n        ServiceConfig config = builder.build();\n        ServiceConfig config2 = builder.build();\n\n        Assertions.assertEquals(\"id\", config.getId());\n        Assertions.assertEquals(\"prefix\", config.getPrefix());\n        Assertions.assertEquals(\"version\", config.getVersion());\n        Assertions.assertEquals(\"group\", config.getGroup());\n        Assertions.assertEquals(\"document\", config.getDocument());\n        Assertions.assertEquals(\"token\", config.getToken());\n        Assertions.assertEquals(\"accesslog\", config.getAccesslog());\n        Assertions.assertEquals(\"protocolIds\", config.getProtocolIds());\n        Assertions.assertEquals(\"tag\", config.getTag());\n        Assertions.assertEquals(\"serialization\", config.getSerialization());\n        Assertions.assertTrue(config.isDeprecated());\n        Assertions.assertFalse(config.getExport());\n        Assertions.assertTrue(config.isDynamic());\n        Assertions.assertFalse(config.isRegister());\n        Assertions.assertEquals(1000, config.getDelay());\n        Assertions.assertEquals(1, config.getWeight());\n        Assertions.assertEquals(100, config.getExecutes());\n        Assertions.assertEquals(200, config.getWarmup());\n\n        Assertions.assertNotSame(config, config2);\n    }", "signature": "void build()", "full_signature": "@Test void build()", "class_method_signature": "AbstractServiceBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["prefix", "id", "serialization", "warmup", "register", "executes", "tag", "protocolIds", "addProtocol", "accesslog", "token", "dynamic", "document", "weight", "export", "delay", "deprecated", "group", "version", "build", "build", "assertEquals", "getId", "assertEquals", "getPrefix", "assertEquals", "getVersion", "assertEquals", "getGroup", "assertEquals", "getDocument", "assertEquals", "getToken", "assertEquals", "getAccesslog", "assertEquals", "getProtocolIds", "assertEquals", "getTag", "assertEquals", "getSerialization", "assertTrue", "isDeprecated", "assertFalse", "getExport", "assertTrue", "isDynamic", "assertFalse", "isRegister", "assertEquals", "getDelay", "assertEquals", "getWeight", "assertEquals", "getExecutes", "assertEquals", "getWarmup", "assertNotSame"]}, "focal_class": {"identifier": "AbstractServiceBuilder", "superclass": "extends AbstractInterfaceBuilder<T, B>", "interfaces": "", "fields": [{"original_string": "protected String version;", "modifier": "protected", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "protected String group;", "modifier": "protected", "type": "String", "declarator": "group", "var_name": "group"}, {"original_string": "protected Boolean deprecated;", "modifier": "protected", "type": "Boolean", "declarator": "deprecated", "var_name": "deprecated"}, {"original_string": "protected Integer delay;", "modifier": "protected", "type": "Integer", "declarator": "delay", "var_name": "delay"}, {"original_string": "protected Boolean export;", "modifier": "protected", "type": "Boolean", "declarator": "export", "var_name": "export"}, {"original_string": "protected Integer weight;", "modifier": "protected", "type": "Integer", "declarator": "weight", "var_name": "weight"}, {"original_string": "protected String document;", "modifier": "protected", "type": "String", "declarator": "document", "var_name": "document"}, {"original_string": "protected Boolean dynamic;", "modifier": "protected", "type": "Boolean", "declarator": "dynamic", "var_name": "dynamic"}, {"original_string": "protected String token;", "modifier": "protected", "type": "String", "declarator": "token", "var_name": "token"}, {"original_string": "protected String accesslog;", "modifier": "protected", "type": "String", "declarator": "accesslog", "var_name": "accesslog"}, {"original_string": "protected List<ProtocolConfig> protocols;", "modifier": "protected", "type": "List<ProtocolConfig>", "declarator": "protocols", "var_name": "protocols"}, {"original_string": "protected String protocolIds;", "modifier": "protected", "type": "String", "declarator": "protocolIds", "var_name": "protocolIds"}, {"original_string": "private Integer executes;", "modifier": "private", "type": "Integer", "declarator": "executes", "var_name": "executes"}, {"original_string": "private Boolean register;", "modifier": "private", "type": "Boolean", "declarator": "register", "var_name": "register"}, {"original_string": "private Integer warmup;", "modifier": "private", "type": "Integer", "declarator": "warmup", "var_name": "warmup"}, {"original_string": "private String serialization;", "modifier": "private", "type": "String", "declarator": "serialization", "var_name": "serialization"}], "methods": [{"identifier": "version", "parameters": "(String version)", "modifiers": "public", "return": "B", "signature": "B version(String version)", "full_signature": "public B version(String version)", "class_method_signature": "AbstractServiceBuilder.version(String version)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(String group)", "modifiers": "public", "return": "B", "signature": "B group(String group)", "full_signature": "public B group(String group)", "class_method_signature": "AbstractServiceBuilder.group(String group)", "testcase": false, "constructor": false}, {"identifier": "deprecated", "parameters": "(Boolean deprecated)", "modifiers": "public", "return": "B", "signature": "B deprecated(Boolean deprecated)", "full_signature": "public B deprecated(Boolean deprecated)", "class_method_signature": "AbstractServiceBuilder.deprecated(Boolean deprecated)", "testcase": false, "constructor": false}, {"identifier": "delay", "parameters": "(Integer delay)", "modifiers": "public", "return": "B", "signature": "B delay(Integer delay)", "full_signature": "public B delay(Integer delay)", "class_method_signature": "AbstractServiceBuilder.delay(Integer delay)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Boolean export)", "modifiers": "public", "return": "B", "signature": "B export(Boolean export)", "full_signature": "public B export(Boolean export)", "class_method_signature": "AbstractServiceBuilder.export(Boolean export)", "testcase": false, "constructor": false}, {"identifier": "weight", "parameters": "(Integer weight)", "modifiers": "public", "return": "B", "signature": "B weight(Integer weight)", "full_signature": "public B weight(Integer weight)", "class_method_signature": "AbstractServiceBuilder.weight(Integer weight)", "testcase": false, "constructor": false}, {"identifier": "document", "parameters": "(String document)", "modifiers": "public", "return": "B", "signature": "B document(String document)", "full_signature": "public B document(String document)", "class_method_signature": "AbstractServiceBuilder.document(String document)", "testcase": false, "constructor": false}, {"identifier": "dynamic", "parameters": "(Boolean dynamic)", "modifiers": "public", "return": "B", "signature": "B dynamic(Boolean dynamic)", "full_signature": "public B dynamic(Boolean dynamic)", "class_method_signature": "AbstractServiceBuilder.dynamic(Boolean dynamic)", "testcase": false, "constructor": false}, {"identifier": "token", "parameters": "(String token)", "modifiers": "public", "return": "B", "signature": "B token(String token)", "full_signature": "public B token(String token)", "class_method_signature": "AbstractServiceBuilder.token(String token)", "testcase": false, "constructor": false}, {"identifier": "token", "parameters": "(Boolean token)", "modifiers": "public", "return": "B", "signature": "B token(Boolean token)", "full_signature": "public B token(Boolean token)", "class_method_signature": "AbstractServiceBuilder.token(Boolean token)", "testcase": false, "constructor": false}, {"identifier": "accesslog", "parameters": "(String accesslog)", "modifiers": "public", "return": "B", "signature": "B accesslog(String accesslog)", "full_signature": "public B accesslog(String accesslog)", "class_method_signature": "AbstractServiceBuilder.accesslog(String accesslog)", "testcase": false, "constructor": false}, {"identifier": "accesslog", "parameters": "(Boolean accesslog)", "modifiers": "public", "return": "B", "signature": "B accesslog(Boolean accesslog)", "full_signature": "public B accesslog(Boolean accesslog)", "class_method_signature": "AbstractServiceBuilder.accesslog(Boolean accesslog)", "testcase": false, "constructor": false}, {"identifier": "addProtocols", "parameters": "(List<ProtocolConfig> protocols)", "modifiers": "public", "return": "B", "signature": "B addProtocols(List<ProtocolConfig> protocols)", "full_signature": "public B addProtocols(List<ProtocolConfig> protocols)", "class_method_signature": "AbstractServiceBuilder.addProtocols(List<ProtocolConfig> protocols)", "testcase": false, "constructor": false}, {"identifier": "addProtocol", "parameters": "(ProtocolConfig protocol)", "modifiers": "public", "return": "B", "signature": "B addProtocol(ProtocolConfig protocol)", "full_signature": "public B addProtocol(ProtocolConfig protocol)", "class_method_signature": "AbstractServiceBuilder.addProtocol(ProtocolConfig protocol)", "testcase": false, "constructor": false}, {"identifier": "protocolIds", "parameters": "(String protocolIds)", "modifiers": "public", "return": "B", "signature": "B protocolIds(String protocolIds)", "full_signature": "public B protocolIds(String protocolIds)", "class_method_signature": "AbstractServiceBuilder.protocolIds(String protocolIds)", "testcase": false, "constructor": false}, {"identifier": "executes", "parameters": "(Integer executes)", "modifiers": "public", "return": "B", "signature": "B executes(Integer executes)", "full_signature": "public B executes(Integer executes)", "class_method_signature": "AbstractServiceBuilder.executes(Integer executes)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Boolean register)", "modifiers": "public", "return": "B", "signature": "B register(Boolean register)", "full_signature": "public B register(Boolean register)", "class_method_signature": "AbstractServiceBuilder.register(Boolean register)", "testcase": false, "constructor": false}, {"identifier": "warmup", "parameters": "(Integer warmup)", "modifiers": "public", "return": "B", "signature": "B warmup(Integer warmup)", "full_signature": "public B warmup(Integer warmup)", "class_method_signature": "AbstractServiceBuilder.warmup(Integer warmup)", "testcase": false, "constructor": false}, {"identifier": "serialization", "parameters": "(String serialization)", "modifiers": "public", "return": "B", "signature": "B serialization(String serialization)", "full_signature": "public B serialization(String serialization)", "class_method_signature": "AbstractServiceBuilder.serialization(String serialization)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractServiceBuilder.build(T instance)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/AbstractServiceBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void build(T instance) {\n        super.build(instance);\n\n        if (!StringUtils.isEmpty(version)) {\n            instance.setVersion(version);\n        }\n        if (!StringUtils.isEmpty(group)) {\n            instance.setGroup(group);\n        }\n        if (deprecated != null) {\n            instance.setDeprecated(deprecated);\n        }\n        if (delay != null) {\n            instance.setDelay(delay);\n        }\n        if (export != null) {\n            instance.setExport(export);\n        }\n        if (weight != null) {\n            instance.setWeight(weight);\n        }\n        if (!StringUtils.isEmpty(document)) {\n            instance.setDocument(document);\n        }\n        if (dynamic != null) {\n            instance.setDynamic(dynamic);\n        }\n        if (!StringUtils.isEmpty(token)) {\n            instance.setToken(token);\n        }\n        if (!StringUtils.isEmpty(accesslog)) {\n            instance.setAccesslog(accesslog);\n        }\n        if (protocols != null) {\n            instance.setProtocols(protocols);\n        }\n        if (!StringUtils.isEmpty(protocolIds)) {\n            instance.setProtocolIds(protocolIds);\n        }\n        if (executes != null) {\n            instance.setExecutes(executes);\n        }\n        if (register != null) {\n            instance.setRegister(register);\n        }\n        if (warmup != null) {\n            instance.setWarmup(warmup);\n        }\n        if (!StringUtils.isEmpty(serialization)) {\n            instance.setSerialization(serialization);\n        }\n    }", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractServiceBuilder.build(T instance)", "testcase": false, "constructor": false, "invocations": ["build", "isEmpty", "setVersion", "isEmpty", "setGroup", "setDeprecated", "setDelay", "setExport", "setWeight", "isEmpty", "setDocument", "setDynamic", "isEmpty", "setToken", "isEmpty", "setAccesslog", "setProtocols", "isEmpty", "setProtocolIds", "setExecutes", "setRegister", "setWarmup", "isEmpty", "setSerialization"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}