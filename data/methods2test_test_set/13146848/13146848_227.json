{"test_class": {"identifier": "DefaultMultipleOutputWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private TaskExecutionContext context;", "modifier": "private", "type": "TaskExecutionContext", "declarator": "context", "var_name": "context"}], "file": "sejda-core/src/test/java/org/sejda/core/support/io/DefaultMultipleOutputWriterTest.java"}, "test_case": {"identifier": "moveToFileOrDirExsistingRenamed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void moveToFileOrDirExsistingRenamed() throws TaskOutputVisitException, IOException {\n        File outFile = folder.newFile();\n        DefaultMultipleOutputWriter victim = new DefaultMultipleOutputWriter(ExistingOutputPolicy.RENAME, context);\n        victim.addOutput(FileOutput.file(folder.newFile()).name(outFile.getName()));\n        new FileOrDirectoryTaskOutput(outFile.getParentFile()).accept(victim);\n        assertEquals(2, outFile.getParentFile().list().length);\n    }", "signature": "void moveToFileOrDirExsistingRenamed()", "full_signature": "@Test public void moveToFileOrDirExsistingRenamed()", "class_method_signature": "DefaultMultipleOutputWriterTest.moveToFileOrDirExsistingRenamed()", "testcase": true, "constructor": false, "invocations": ["newFile", "addOutput", "name", "file", "newFile", "getName", "accept", "getParentFile", "assertEquals", "list", "getParentFile"]}, "focal_class": {"identifier": "DefaultMultipleOutputWriter", "superclass": "", "interfaces": "implements MultipleOutputWriter", "fields": [{"original_string": "private Map<String, File> multipleFiles = new HashMap<>();", "modifier": "private", "type": "Map<String, File>", "declarator": "multipleFiles = new HashMap<>()", "var_name": "multipleFiles"}, {"original_string": "private final ExistingOutputPolicy existingOutputPolicy;", "modifier": "private final", "type": "ExistingOutputPolicy", "declarator": "existingOutputPolicy", "var_name": "existingOutputPolicy"}, {"original_string": "private final TaskExecutionContext executionContext;", "modifier": "private final", "type": "TaskExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}], "methods": [{"identifier": "DefaultMultipleOutputWriter", "parameters": "(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "modifiers": "", "return": "", "signature": " DefaultMultipleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "full_signature": "  DefaultMultipleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "class_method_signature": "DefaultMultipleOutputWriter.DefaultMultipleOutputWriter(ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "testcase": false, "constructor": true}, {"identifier": "dispatch", "parameters": "(FileTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(FileTaskOutput output)", "full_signature": "@Override public void dispatch(FileTaskOutput output)", "class_method_signature": "DefaultMultipleOutputWriter.dispatch(FileTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(DirectoryTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(DirectoryTaskOutput output)", "full_signature": "@Override public void dispatch(DirectoryTaskOutput output)", "class_method_signature": "DefaultMultipleOutputWriter.dispatch(DirectoryTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(FileOrDirectoryTaskOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void dispatch(FileOrDirectoryTaskOutput output)", "full_signature": "@Override public void dispatch(FileOrDirectoryTaskOutput output)", "class_method_signature": "DefaultMultipleOutputWriter.dispatch(FileOrDirectoryTaskOutput output)", "testcase": false, "constructor": false}, {"identifier": "addOutput", "parameters": "(PopulatedFileOutput fileOutput)", "modifiers": "@Override public", "return": "void", "signature": "void addOutput(PopulatedFileOutput fileOutput)", "full_signature": "@Override public void addOutput(PopulatedFileOutput fileOutput)", "class_method_signature": "DefaultMultipleOutputWriter.addOutput(PopulatedFileOutput fileOutput)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/support/io/DefaultMultipleOutputWriter.java"}, "focal_method": {"identifier": "addOutput", "parameters": "(PopulatedFileOutput fileOutput)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addOutput(PopulatedFileOutput fileOutput) {\n        if (nonNull(multipleFiles.putIfAbsent(fileOutput.getName(), fileOutput.getFile()))) {\n            // we already have a file with the same name, this shouldn't happen but could happen in split by text or bookmarks\n            int count = 1;\n            String basename = getBaseName(fileOutput.getName());\n            String extension = getExtension(fileOutput.getName());\n\n            while (nonNull(\n                    multipleFiles.putIfAbsent(format(\"%s(%d).%s\", basename, count, extension), fileOutput.getFile()))\n                    && count < 100) {\n                count++;\n            }\n        }\n    }", "signature": "void addOutput(PopulatedFileOutput fileOutput)", "full_signature": "@Override public void addOutput(PopulatedFileOutput fileOutput)", "class_method_signature": "DefaultMultipleOutputWriter.addOutput(PopulatedFileOutput fileOutput)", "testcase": false, "constructor": false, "invocations": ["nonNull", "putIfAbsent", "getName", "getFile", "getBaseName", "getName", "getExtension", "getName", "nonNull", "putIfAbsent", "format", "getFile"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}