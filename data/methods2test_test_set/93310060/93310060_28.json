{"test_class": {"identifier": "RetriableLockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private Lock lock;", "modifier": "@Mock\n  private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "distributed-lock-core/src/test/java/com/github/alturkovic/lock/retry/RetriableLockTest.java"}, "test_case": {"identifier": "shouldRetryWhenFirstAttemptIsNotSuccessful", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRetryWhenFirstAttemptIsNotSuccessful() {\n    when(lock.acquire(anyList(), anyString(), anyLong()))\n      .thenReturn(null)\n      .thenReturn(\"abc\");\n\n    final var retryTemplate = new RetryTemplate();\n    retryTemplate.setRetryPolicy(new SimpleRetryPolicy(2));\n\n    final var retriableLock = new RetriableLock(lock, retryTemplate);\n    final var token = retriableLock.acquire(List.of(\"key\"), \"defaultStore\", 1000L);\n\n    assertThat(token).isEqualTo(\"abc\");\n    verify(lock, times(2)).acquire(anyList(), anyString(), anyLong());\n  }", "signature": "void shouldRetryWhenFirstAttemptIsNotSuccessful()", "full_signature": "@Test public void shouldRetryWhenFirstAttemptIsNotSuccessful()", "class_method_signature": "RetriableLockTest.shouldRetryWhenFirstAttemptIsNotSuccessful()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "thenReturn", "when", "acquire", "anyList", "anyString", "anyLong", "setRetryPolicy", "acquire", "of", "isEqualTo", "assertThat", "acquire", "verify", "times", "anyList", "anyString", "anyLong"]}, "focal_class": {"identifier": "RetriableLock", "superclass": "", "interfaces": "implements Lock", "fields": [{"original_string": "private final Lock lock;", "modifier": "private final", "type": "Lock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final RetryTemplate retryTemplate;", "modifier": "private final", "type": "RetryTemplate", "declarator": "retryTemplate", "var_name": "retryTemplate"}], "methods": [{"identifier": "acquire", "parameters": "(final List<String> keys, final String storeId, final long expiration)", "modifiers": "@Override public", "return": "String", "signature": "String acquire(final List<String> keys, final String storeId, final long expiration)", "full_signature": "@Override public String acquire(final List<String> keys, final String storeId, final long expiration)", "class_method_signature": "RetriableLock.acquire(final List<String> keys, final String storeId, final long expiration)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final List<String> keys, final String storeId, final String token)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean release(final List<String> keys, final String storeId, final String token)", "full_signature": "@Override public boolean release(final List<String> keys, final String storeId, final String token)", "class_method_signature": "RetriableLock.release(final List<String> keys, final String storeId, final String token)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final List<String> keys, final String storeId, final String token, final long expiration)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean refresh(final List<String> keys, final String storeId, final String token, final long expiration)", "full_signature": "@Override public boolean refresh(final List<String> keys, final String storeId, final String token, final long expiration)", "class_method_signature": "RetriableLock.refresh(final List<String> keys, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}], "file": "distributed-lock-core/src/main/java/com/github/alturkovic/lock/retry/RetriableLock.java"}, "focal_method": {"identifier": "acquire", "parameters": "(final List<String> keys, final String storeId, final long expiration)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String acquire(final List<String> keys, final String storeId, final long expiration) {\n    return retryTemplate.execute(ctx -> {\n      final String token = lock.acquire(keys, storeId, expiration);\n\n      if (StringUtils.isEmpty(token)) {\n        throw new LockNotAvailableException(String.format(\"Lock not available for keys: %s in store %s\", keys, storeId));\n      }\n\n      return token;\n    });\n  }", "signature": "String acquire(final List<String> keys, final String storeId, final long expiration)", "full_signature": "@Override public String acquire(final List<String> keys, final String storeId, final long expiration)", "class_method_signature": "RetriableLock.acquire(final List<String> keys, final String storeId, final long expiration)", "testcase": false, "constructor": false, "invocations": ["execute", "acquire", "isEmpty", "format"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}