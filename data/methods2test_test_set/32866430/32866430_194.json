{"test_class": {"identifier": "SecretSeriesDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject DSLContext jooqContext;", "modifier": "@Inject", "type": "DSLContext", "declarator": "jooqContext", "var_name": "jooqContext"}, {"original_string": "@Inject SecretSeriesDAOFactory secretSeriesDAOFactory;", "modifier": "@Inject", "type": "SecretSeriesDAOFactory", "declarator": "secretSeriesDAOFactory", "var_name": "secretSeriesDAOFactory"}, {"original_string": "@Inject SecretContentDAO.SecretContentDAOFactory secretContentDAOFactory;", "modifier": "@Inject", "type": "SecretContentDAO.SecretContentDAOFactory", "declarator": "secretContentDAOFactory", "var_name": "secretContentDAOFactory"}, {"original_string": "SecretSeriesDAO secretSeriesDAO;", "modifier": "", "type": "SecretSeriesDAO", "declarator": "secretSeriesDAO", "var_name": "secretSeriesDAO"}, {"original_string": "SecretContentDAO secretContentDAO;", "modifier": "", "type": "SecretContentDAO", "declarator": "secretContentDAO", "var_name": "secretContentDAO"}], "file": "server/src/test/java/keywhiz/service/daos/SecretSeriesDAOTest.java"}, "test_case": {"identifier": "getSecretSeries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSecretSeries() {\n    // Create multiple secret series\n    long now = OffsetDateTime.now().toEpochSecond();\n    long firstExpiry = now + 10000;\n    long secondExpiry = now + 20000;\n    long thirdExpiry = now + 30000;\n    long fourthExpiry = now + 40000;\n    long firstId = secretSeriesDAO.createSecretSeries(\"expiringFirst\",\n        \"creator\", \"\", null, null, now);\n    long firstContentId = secretContentDAO.createSecretContent(firstId,\n        \"blah\", \"checksum\", \"creator\", null, firstExpiry, now);\n    secretSeriesDAO.setCurrentVersion(firstId, firstContentId, \"creator\", now);\n\n    long secondId = secretSeriesDAO.createSecretSeries(\"expiringSecond\",\n        \"creator\", \"\", null, null, now);\n    long secondContentId = secretContentDAO.createSecretContent(secondId, \"blah\",\n        \"checksum\", \"creator\", null, secondExpiry, now);\n    secretSeriesDAO.setCurrentVersion(secondId, secondContentId, \"creator\", now);\n\n    // Make sure the rows aren't ordered by expiry\n    long fourthId = secretSeriesDAO.createSecretSeries(\"expiringFourth\",\n        \"creator\", \"\", null, null, now);\n    long fourthContentId = secretContentDAO.createSecretContent(fourthId, \"blah\",\n        \"checksum\", \"creator\", null, fourthExpiry, now);\n    secretSeriesDAO.setCurrentVersion(fourthId, fourthContentId, \"creator\", now);\n\n    long thirdId = secretSeriesDAO.createSecretSeries(\"expiringThird\",\n        \"creator\", \"\", null, null, now);\n    long thirdContentId = secretContentDAO.createSecretContent(thirdId, \"blah\",\n        \"checksum\", \"creator\", null, thirdExpiry, now);\n    secretSeriesDAO.setCurrentVersion(thirdId, thirdContentId, \"creator\", now);\n\n    long fifthId = secretSeriesDAO.createSecretSeries(\"laterInAlphabetExpiringFourth\",\n        \"creator\", \"\", null, null, now);\n    long fifthContentId = secretContentDAO.createSecretContent(fifthId, \"blah\",\n        \"checksum\", \"creator\", null, fourthExpiry, now);\n    secretSeriesDAO.setCurrentVersion(fifthId, fifthContentId, \"creator\", now);\n\n    // Retrieving secrets with no parameters should retrieve all created secrets (although given\n    // the shared database, it's likely to also retrieve others)\n    ImmutableList<SecretSeries>\n        retrievedSeries = secretSeriesDAO.getSecretSeries(null, null, null, null, null);\n    assertListContainsSecretsWithIds(retrievedSeries, ImmutableList.of(firstId, secondId, thirdId, fourthId, fifthId));\n\n    // Restrict expireMaxTime to exclude the last secrets\n    retrievedSeries = secretSeriesDAO.getSecretSeries(fourthExpiry - 100, null, null,null, null);\n    assertListContainsSecretsWithIds(retrievedSeries, ImmutableList.of(firstId, secondId, thirdId));\n    assertListDoesNotContainSecretsWithIds(retrievedSeries, ImmutableList.of(fourthId, fifthId));\n\n    // Restrict expireMinTime to exclude the first secret\n    retrievedSeries = secretSeriesDAO.getSecretSeries(fourthExpiry - 100, null, firstExpiry + 10, null,null);\n    assertListContainsSecretsWithIds(retrievedSeries, ImmutableList.of(secondId, thirdId));\n    assertListDoesNotContainSecretsWithIds(retrievedSeries, ImmutableList.of(firstId, fourthId, fifthId));\n\n    // Adjust the limit to exclude the third secret\n    retrievedSeries = secretSeriesDAO.getSecretSeries(fourthExpiry - 100, null, firstExpiry + 10, null,1);\n    assertListContainsSecretsWithIds(retrievedSeries, ImmutableList.of(secondId));\n    assertListDoesNotContainSecretsWithIds(retrievedSeries, ImmutableList.of(firstId, thirdId, fourthId, fifthId));\n\n    // Restrict the minName to exclude the fourth secret\n    retrievedSeries = secretSeriesDAO.getSecretSeries(null, null, fourthExpiry, \"laterInAlphabetExpiringFourth\", null);\n    assertListContainsSecretsWithIds(retrievedSeries, ImmutableList.of(fifthId));\n    assertListDoesNotContainSecretsWithIds(retrievedSeries, ImmutableList.of(firstId, secondId, thirdId, fourthId));\n  }", "signature": "void getSecretSeries()", "full_signature": "@Test public void getSecretSeries()", "class_method_signature": "SecretSeriesDAOTest.getSecretSeries()", "testcase": true, "constructor": false, "invocations": ["toEpochSecond", "now", "createSecretSeries", "createSecretContent", "setCurrentVersion", "createSecretSeries", "createSecretContent", "setCurrentVersion", "createSecretSeries", "createSecretContent", "setCurrentVersion", "createSecretSeries", "createSecretContent", "setCurrentVersion", "createSecretSeries", "createSecretContent", "setCurrentVersion", "getSecretSeries", "assertListContainsSecretsWithIds", "of", "getSecretSeries", "assertListContainsSecretsWithIds", "of", "assertListDoesNotContainSecretsWithIds", "of", "getSecretSeries", "assertListContainsSecretsWithIds", "of", "assertListDoesNotContainSecretsWithIds", "of", "getSecretSeries", "assertListContainsSecretsWithIds", "of", "assertListDoesNotContainSecretsWithIds", "of", "getSecretSeries", "assertListContainsSecretsWithIds", "of", "assertListDoesNotContainSecretsWithIds", "of"]}, "focal_class": {"identifier": "SecretSeriesDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final SecretSeriesMapper secretSeriesMapper;", "modifier": "private final", "type": "SecretSeriesMapper", "declarator": "secretSeriesMapper", "var_name": "secretSeriesMapper"}, {"original_string": "private final RowHmacGenerator rowHmacGenerator;", "modifier": "private final", "type": "RowHmacGenerator", "declarator": "rowHmacGenerator", "var_name": "rowHmacGenerator"}], "methods": [{"identifier": "SecretSeriesDAO", "parameters": "(DSLContext dslContext, ObjectMapper mapper,\n      SecretSeriesMapper secretSeriesMapper, RowHmacGenerator rowHmacGenerator)", "modifiers": "private", "return": "", "signature": " SecretSeriesDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretSeriesMapper secretSeriesMapper, RowHmacGenerator rowHmacGenerator)", "full_signature": "private  SecretSeriesDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretSeriesMapper secretSeriesMapper, RowHmacGenerator rowHmacGenerator)", "class_method_signature": "SecretSeriesDAO.SecretSeriesDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretSeriesMapper secretSeriesMapper, RowHmacGenerator rowHmacGenerator)", "testcase": false, "constructor": true}, {"identifier": "createSecretSeries", "parameters": "(String name, String creator, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions, long now)", "modifiers": "", "return": "long", "signature": "long createSecretSeries(String name, String creator, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions, long now)", "full_signature": " long createSecretSeries(String name, String creator, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions, long now)", "class_method_signature": "SecretSeriesDAO.createSecretSeries(String name, String creator, String description, @Nullable String type,\n      @Nullable Map<String, String> generationOptions, long now)", "testcase": false, "constructor": false}, {"identifier": "updateSecretSeries", "parameters": "(long secretId, String name, String creator, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions, long now)", "modifiers": "", "return": "void", "signature": "void updateSecretSeries(long secretId, String name, String creator, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions, long now)", "full_signature": " void updateSecretSeries(long secretId, String name, String creator, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions, long now)", "class_method_signature": "SecretSeriesDAO.updateSecretSeries(long secretId, String name, String creator, String description,\n      @Nullable String type, @Nullable Map<String, String> generationOptions, long now)", "testcase": false, "constructor": false}, {"identifier": "setExpiration", "parameters": "(long secretContentId, Instant expiration)", "modifiers": "public", "return": "int", "signature": "int setExpiration(long secretContentId, Instant expiration)", "full_signature": "public int setExpiration(long secretContentId, Instant expiration)", "class_method_signature": "SecretSeriesDAO.setExpiration(long secretContentId, Instant expiration)", "testcase": false, "constructor": false}, {"identifier": "setHmac", "parameters": "(long secretContentId, String hmac)", "modifiers": "public", "return": "int", "signature": "int setHmac(long secretContentId, String hmac)", "full_signature": "public int setHmac(long secretContentId, String hmac)", "class_method_signature": "SecretSeriesDAO.setHmac(long secretContentId, String hmac)", "testcase": false, "constructor": false}, {"identifier": "setCurrentVersion", "parameters": "(long secretId, long secretContentId, String updater, long now)", "modifiers": "public", "return": "int", "signature": "int setCurrentVersion(long secretId, long secretContentId, String updater, long now)", "full_signature": "public int setCurrentVersion(long secretId, long secretContentId, String updater, long now)", "class_method_signature": "SecretSeriesDAO.setCurrentVersion(long secretId, long secretContentId, String updater, long now)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeriesById", "parameters": "(long id)", "modifiers": "public", "return": "Optional<SecretSeries>", "signature": "Optional<SecretSeries> getSecretSeriesById(long id)", "full_signature": "public Optional<SecretSeries> getSecretSeriesById(long id)", "class_method_signature": "SecretSeriesDAO.getSecretSeriesById(long id)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeriesByName", "parameters": "(String name)", "modifiers": "public", "return": "Optional<SecretSeries>", "signature": "Optional<SecretSeries> getSecretSeriesByName(String name)", "full_signature": "public Optional<SecretSeries> getSecretSeriesByName(String name)", "class_method_signature": "SecretSeriesDAO.getSecretSeriesByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getMultipleSecretSeriesByName", "parameters": "(List<String> names)", "modifiers": "public", "return": "List<SecretSeries>", "signature": "List<SecretSeries> getMultipleSecretSeriesByName(List<String> names)", "full_signature": "public List<SecretSeries> getMultipleSecretSeriesByName(List<String> names)", "class_method_signature": "SecretSeriesDAO.getMultipleSecretSeriesByName(List<String> names)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeries", "parameters": "(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "modifiers": "public", "return": "ImmutableList<SecretSeries>", "signature": "ImmutableList<SecretSeries> getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "full_signature": "public ImmutableList<SecretSeries> getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "class_method_signature": "SecretSeriesDAO.getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeriesBatched", "parameters": "(int idx, int num, boolean newestFirst)", "modifiers": "public", "return": "ImmutableList<SecretSeries>", "signature": "ImmutableList<SecretSeries> getSecretSeriesBatched(int idx, int num, boolean newestFirst)", "full_signature": "public ImmutableList<SecretSeries> getSecretSeriesBatched(int idx, int num, boolean newestFirst)", "class_method_signature": "SecretSeriesDAO.getSecretSeriesBatched(int idx, int num, boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "deleteSecretSeriesByName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void deleteSecretSeriesByName(String name)", "full_signature": "public void deleteSecretSeriesByName(String name)", "class_method_signature": "SecretSeriesDAO.deleteSecretSeriesByName(String name)", "testcase": false, "constructor": false}, {"identifier": "deleteSecretSeriesById", "parameters": "(long id)", "modifiers": "public", "return": "void", "signature": "void deleteSecretSeriesById(long id)", "full_signature": "public void deleteSecretSeriesById(long id)", "class_method_signature": "SecretSeriesDAO.deleteSecretSeriesById(long id)", "testcase": false, "constructor": false}, {"identifier": "countDeletedSecretSeries", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countDeletedSecretSeries()", "full_signature": "public int countDeletedSecretSeries()", "class_method_signature": "SecretSeriesDAO.countDeletedSecretSeries()", "testcase": false, "constructor": false}, {"identifier": "getIdsForSecretSeriesDeletedBeforeDate", "parameters": "(DateTime deleteBefore)", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getIdsForSecretSeriesDeletedBeforeDate(DateTime deleteBefore)", "full_signature": "public List<Long> getIdsForSecretSeriesDeletedBeforeDate(DateTime deleteBefore)", "class_method_signature": "SecretSeriesDAO.getIdsForSecretSeriesDeletedBeforeDate(DateTime deleteBefore)", "testcase": false, "constructor": false}, {"identifier": "dangerPermanentlyRemoveRecordsForGivenIDs", "parameters": "(List<Long> ids)", "modifiers": "public", "return": "long", "signature": "long dangerPermanentlyRemoveRecordsForGivenIDs(List<Long> ids)", "full_signature": "public long dangerPermanentlyRemoveRecordsForGivenIDs(List<Long> ids)", "class_method_signature": "SecretSeriesDAO.dangerPermanentlyRemoveRecordsForGivenIDs(List<Long> ids)", "testcase": false, "constructor": false}, {"identifier": "transformNameForDeletion", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String transformNameForDeletion(String name)", "full_signature": "private String transformNameForDeletion(String name)", "class_method_signature": "SecretSeriesDAO.transformNameForDeletion(String name)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/daos/SecretSeriesDAO.java"}, "focal_method": {"identifier": "getSecretSeries", "parameters": "(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "modifiers": "public", "return": "ImmutableList<SecretSeries>", "body": "public ImmutableList<SecretSeries> getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit) {\n    SelectQuery<Record> select = dslContext\n          .select()\n          .from(SECRETS)\n          .join(SECRETS_CONTENT)\n          .on(SECRETS.CURRENT.equal(SECRETS_CONTENT.ID))\n          .where(SECRETS.CURRENT.isNotNull())\n          .getQuery();\n    select.addOrderBy(SECRETS_CONTENT.EXPIRY.asc().nullsLast(), SECRETS.NAME.asc().nullsLast());\n\n    // Set an upper bound on expiration dates\n    if (expireMaxTime != null && expireMaxTime > 0) {\n      // Set a lower bound of \"now\" on the expiration only if it isn't configured separately\n      if (expireMinTime == null || expireMinTime == 0) {\n        long now = System.currentTimeMillis() / 1000L;\n        select.addConditions(SECRETS_CONTENT.EXPIRY.greaterOrEqual(now));\n      }\n      select.addConditions(SECRETS_CONTENT.EXPIRY.lessThan(expireMaxTime));\n    }\n\n    if (expireMinTime != null && expireMinTime > 0) {\n      // set a lower bound on expiration dates, using the secret name as a tiebreaker\n      select.addConditions(SECRETS_CONTENT.EXPIRY.greaterThan(expireMinTime)\n          .or(SECRETS_CONTENT.EXPIRY.eq(expireMinTime)\n              .and(SECRETS.NAME.greaterOrEqual(minName))));\n    }\n\n    if (group != null) {\n      select.addJoin(ACCESSGRANTS, SECRETS.ID.eq(ACCESSGRANTS.SECRETID));\n      select.addJoin(GROUPS, GROUPS.ID.eq(ACCESSGRANTS.GROUPID));\n      select.addConditions(GROUPS.NAME.eq(group.getName()));\n    }\n\n    if (limit != null && limit >= 0) {\n      select.addLimit(limit);\n    }\n\n    List<SecretSeries> r = select.fetchInto(SECRETS).map(secretSeriesMapper);\n    return ImmutableList.copyOf(r);\n  }", "signature": "ImmutableList<SecretSeries> getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "full_signature": "public ImmutableList<SecretSeries> getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "class_method_signature": "SecretSeriesDAO.getSecretSeries(@Nullable Long expireMaxTime,\n      @Nullable Group group, @Nullable Long expireMinTime, @Nullable String minName,\n      @Nullable Integer limit)", "testcase": false, "constructor": false, "invocations": ["getQuery", "where", "on", "join", "from", "select", "equal", "isNotNull", "addOrderBy", "nullsLast", "asc", "nullsLast", "asc", "currentTimeMillis", "addConditions", "greaterOrEqual", "addConditions", "lessThan", "addConditions", "or", "greaterThan", "and", "eq", "greaterOrEqual", "addJoin", "eq", "addJoin", "eq", "addConditions", "eq", "getName", "addLimit", "map", "fetchInto", "copyOf"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}