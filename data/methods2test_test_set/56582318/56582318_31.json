{"test_class": {"identifier": "JtsAlgorithmsTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/util/algo/JtsAlgorithmsTest.java"}, "test_case": {"identifier": "testOffsetCurveILineStringDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOffsetCurveILineStringDouble() {\n    IDirectPosition p1 = new DirectPosition(651049.4584816409, 6861902.601655778);\n    IDirectPosition p2 = new DirectPosition(651069.3941174329, 6861891.803186391);\n    ILineString line = new GM_LineString(p1, p2);\n    double distance = 3.0 / 4.0;\n    IMultiCurve<ILineString> offset1 = JtsAlgorithms.offsetCurve(line, distance);\n    IMultiCurve<ILineString> offset2 = JtsAlgorithms.offsetCurve(line.reverse(), distance);\n    System.out.println(offset1);\n    System.out.println(offset2);\n    \n    IDirectPosition p3 = new DirectPosition(651345.6220778765, 6861505.810661668);\n    IDirectPosition p4 = new DirectPosition(651246.3, 6861498.9);\n    IDirectPosition p5 = new DirectPosition(651271.8, 6861500.7);\n    IDirectPosition p6 = new DirectPosition(651304.3, 6861502.9);\n    IDirectPosition p7 = new DirectPosition(651327.2000000001, 6861504.5);\n    IDirectPosition p8 = new DirectPosition(651230.7842965396, 6861497.820646716);\n    line = new GM_LineString(p3, p7, p6, p5, p4, p8);\n    System.out.println(line);\n    distance = 1.0;\n    offset1 = JtsAlgorithms.offsetCurve(line, distance);\n    offset2 = JtsAlgorithms.offsetCurve(line.reverse(), distance);\n    System.out.println(offset1);\n    System.out.println(offset2);\n    \n  }", "signature": "void testOffsetCurveILineStringDouble()", "full_signature": "@Test public void testOffsetCurveILineStringDouble()", "class_method_signature": "JtsAlgorithmsTest.testOffsetCurveILineStringDouble()", "testcase": true, "constructor": false, "invocations": ["offsetCurve", "offsetCurve", "reverse", "println", "println", "println", "offsetCurve", "offsetCurve", "reverse", "println", "println"]}, "focal_class": {"identifier": "JtsAlgorithms", "superclass": "", "interfaces": "implements GeomAlgorithms", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(JtsAlgorithms.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(JtsAlgorithms.class.getName())", "var_name": "logger"}, {"original_string": "static JtsAlgorithms singleton = new JtsAlgorithms();", "modifier": "static", "type": "JtsAlgorithms", "declarator": "singleton = new JtsAlgorithms()", "var_name": "singleton"}, {"original_string": "protected static EventListenerList listenerList = new EventListenerList();", "modifier": "protected static", "type": "EventListenerList", "declarator": "listenerList = new EventListenerList()", "var_name": "listenerList"}], "methods": [{"identifier": "JtsAlgorithms", "parameters": "()", "modifiers": "public", "return": "", "signature": " JtsAlgorithms()", "full_signature": "public  JtsAlgorithms()", "class_method_signature": "JtsAlgorithms.JtsAlgorithms()", "testcase": false, "constructor": true}, {"identifier": "centroid", "parameters": "(IGeometry geom)", "modifiers": "@Override public", "return": "DirectPosition", "signature": "DirectPosition centroid(IGeometry geom)", "full_signature": "@Override public DirectPosition centroid(IGeometry geom)", "class_method_signature": "JtsAlgorithms.centroid(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "convexHull", "parameters": "(IGeometry geom)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry convexHull(IGeometry geom)", "full_signature": "@Override public IGeometry convexHull(IGeometry geom)", "class_method_signature": "JtsAlgorithms.convexHull(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "(IGeometry geom, double distance)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry buffer(IGeometry geom, double distance)", "full_signature": "@Override public IGeometry buffer(IGeometry geom, double distance)", "class_method_signature": "JtsAlgorithms.buffer(IGeometry geom, double distance)", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "(IGeometry geom, double distance, int nSegments)", "modifiers": "public", "return": "IGeometry", "signature": "IGeometry buffer(IGeometry geom, double distance, int nSegments)", "full_signature": "public IGeometry buffer(IGeometry geom, double distance, int nSegments)", "class_method_signature": "JtsAlgorithms.buffer(IGeometry geom, double distance, int nSegments)", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "(IGeometry geom, double distance, int nSegments,\n      int cap)", "modifiers": "public", "return": "IGeometry", "signature": "IGeometry buffer(IGeometry geom, double distance, int nSegments,\n      int cap)", "full_signature": "public IGeometry buffer(IGeometry geom, double distance, int nSegments,\n      int cap)", "class_method_signature": "JtsAlgorithms.buffer(IGeometry geom, double distance, int nSegments,\n      int cap)", "testcase": false, "constructor": false}, {"identifier": "buffer", "parameters": "(IGeometry geom, double distance, int nSegments,\n      int cap, int join)", "modifiers": "public", "return": "IGeometry", "signature": "IGeometry buffer(IGeometry geom, double distance, int nSegments,\n      int cap, int join)", "full_signature": "public IGeometry buffer(IGeometry geom, double distance, int nSegments,\n      int cap, int join)", "class_method_signature": "JtsAlgorithms.buffer(IGeometry geom, double distance, int nSegments,\n      int cap, int join)", "testcase": false, "constructor": false}, {"identifier": "boundary", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "IGeometry", "signature": "IGeometry boundary(IGeometry geom)", "full_signature": "public IGeometry boundary(IGeometry geom)", "class_method_signature": "JtsAlgorithms.boundary(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry union(IGeometry g1, IGeometry g2)", "full_signature": "@Override public IGeometry union(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.union(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry intersection(IGeometry g1, IGeometry g2)", "full_signature": "@Override public IGeometry intersection(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.intersection(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry difference(IGeometry g1, IGeometry g2)", "full_signature": "@Override public IGeometry difference(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.difference(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "symDifference", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "IGeometry", "signature": "IGeometry symDifference(IGeometry g1, IGeometry g2)", "full_signature": "@Override public IGeometry symDifference(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.symDifference(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(IGeometry g1, IGeometry g2)", "full_signature": "@Override public boolean equals(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.equals(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean equalsExact(IGeometry g1, IGeometry g2)", "full_signature": "public boolean equalsExact(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.equalsExact(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "(IGeometry g1, IGeometry g2, double tol)", "modifiers": "public", "return": "boolean", "signature": "boolean equalsExact(IGeometry g1, IGeometry g2, double tol)", "full_signature": "public boolean equalsExact(IGeometry g1, IGeometry g2, double tol)", "class_method_signature": "JtsAlgorithms.equalsExact(IGeometry g1, IGeometry g2, double tol)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IGeometry g1, IGeometry g2)", "full_signature": "@Override public boolean contains(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.contains(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "crosses", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean crosses(IGeometry g1, IGeometry g2)", "full_signature": "public boolean crosses(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.crosses(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "disjoint", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean disjoint(IGeometry g1, IGeometry g2)", "full_signature": "public boolean disjoint(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.disjoint(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean within(IGeometry g1, IGeometry g2)", "full_signature": "public boolean within(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.within(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "isWithinDistance", "parameters": "(IGeometry g1, IGeometry g2, double dist)", "modifiers": "public", "return": "boolean", "signature": "boolean isWithinDistance(IGeometry g1, IGeometry g2, double dist)", "full_signature": "public boolean isWithinDistance(IGeometry g1, IGeometry g2, double dist)", "class_method_signature": "JtsAlgorithms.isWithinDistance(IGeometry g1, IGeometry g2, double dist)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(IGeometry g1, IGeometry g2)", "full_signature": "@Override public boolean intersects(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.intersects(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "overlaps", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean overlaps(IGeometry g1, IGeometry g2)", "full_signature": "public boolean overlaps(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.overlaps(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "touches", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "boolean", "signature": "boolean touches(IGeometry g1, IGeometry g2)", "full_signature": "public boolean touches(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.touches(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty(IGeometry geom)", "full_signature": "public boolean isEmpty(IGeometry geom)", "class_method_signature": "JtsAlgorithms.isEmpty(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "isSimple", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "boolean", "signature": "boolean isSimple(IGeometry geom)", "full_signature": "public boolean isSimple(IGeometry geom)", "class_method_signature": "JtsAlgorithms.isSimple(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "boolean", "signature": "boolean isValid(IGeometry geom)", "full_signature": "public boolean isValid(IGeometry geom)", "class_method_signature": "JtsAlgorithms.isValid(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "@Override public", "return": "double", "signature": "double distance(IGeometry g1, IGeometry g2)", "full_signature": "@Override public double distance(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.distance(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "area", "parameters": "(IGeometry geom)", "modifiers": "@Override public", "return": "double", "signature": "double area(IGeometry geom)", "full_signature": "@Override public double area(IGeometry geom)", "class_method_signature": "JtsAlgorithms.area(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(IGeometry geom)", "modifiers": "@Override public", "return": "double", "signature": "double length(IGeometry geom)", "full_signature": "@Override public double length(IGeometry geom)", "class_method_signature": "JtsAlgorithms.length(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "dimension", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "int", "signature": "int dimension(IGeometry geom)", "full_signature": "public int dimension(IGeometry geom)", "class_method_signature": "JtsAlgorithms.dimension(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "numPoints", "parameters": "(IGeometry geom)", "modifiers": "public", "return": "int", "signature": "int numPoints(IGeometry geom)", "full_signature": "public int numPoints(IGeometry geom)", "class_method_signature": "JtsAlgorithms.numPoints(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(IGeometry geom, final double tx, final double ty,\n      final double tz)", "modifiers": "public", "return": "IGeometry", "signature": "IGeometry translate(IGeometry geom, final double tx, final double ty,\n      final double tz)", "full_signature": "public IGeometry translate(IGeometry geom, final double tx, final double ty,\n      final double tz)", "class_method_signature": "JtsAlgorithms.translate(IGeometry geom, final double tx, final double ty,\n      final double tz)", "testcase": false, "constructor": false}, {"identifier": "relate", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public", "return": "String", "signature": "String relate(IGeometry g1, IGeometry g2)", "full_signature": "public String relate(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.relate(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(List<? extends IGeometry> listeGeometries)", "modifiers": "public static", "return": "IGeometry", "signature": "IGeometry union(List<? extends IGeometry> listeGeometries)", "full_signature": "public static IGeometry union(List<? extends IGeometry> listeGeometries)", "class_method_signature": "JtsAlgorithms.union(List<? extends IGeometry> listeGeometries)", "testcase": false, "constructor": false}, {"identifier": "getFurthestPoint", "parameters": "(Point pt, Polygon poly)", "modifiers": "public static", "return": "Point", "signature": "Point getFurthestPoint(Point pt, Polygon poly)", "full_signature": "public static Point getFurthestPoint(Point pt, Polygon poly)", "class_method_signature": "JtsAlgorithms.getFurthestPoint(Point pt, Polygon poly)", "testcase": false, "constructor": false}, {"identifier": "getClosestPoint", "parameters": "(IDirectPosition pt,\n      IPolygon poly)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition getClosestPoint(IDirectPosition pt,\n      IPolygon poly)", "full_signature": "public static IDirectPosition getClosestPoint(IDirectPosition pt,\n      IPolygon poly)", "class_method_signature": "JtsAlgorithms.getClosestPoint(IDirectPosition pt,\n      IPolygon poly)", "testcase": false, "constructor": false}, {"identifier": "getClosestPoint", "parameters": "(IDirectPosition pt,\n      ILineString l)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition getClosestPoint(IDirectPosition pt,\n      ILineString l)", "full_signature": "public static IDirectPosition getClosestPoint(IDirectPosition pt,\n      ILineString l)", "class_method_signature": "JtsAlgorithms.getClosestPoint(IDirectPosition pt,\n      ILineString l)", "testcase": false, "constructor": false}, {"identifier": "getFurthestPoint", "parameters": "(ILineString base, ILineString l)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition getFurthestPoint(ILineString base, ILineString l)", "full_signature": "public static IDirectPosition getFurthestPoint(ILineString base, ILineString l)", "class_method_signature": "JtsAlgorithms.getFurthestPoint(ILineString base, ILineString l)", "testcase": false, "constructor": false}, {"identifier": "getClosestPoints", "parameters": "(IGeometry g1, IGeometry g2)", "modifiers": "public static", "return": "IDirectPositionList", "signature": "IDirectPositionList getClosestPoints(IGeometry g1, IGeometry g2)", "full_signature": "public static IDirectPositionList getClosestPoints(IGeometry g1, IGeometry g2)", "class_method_signature": "JtsAlgorithms.getClosestPoints(IGeometry g1, IGeometry g2)", "testcase": false, "constructor": false}, {"identifier": "addActionListener", "parameters": "(ActionListener l)", "modifiers": "public static", "return": "void", "signature": "void addActionListener(ActionListener l)", "full_signature": "public static void addActionListener(ActionListener l)", "class_method_signature": "JtsAlgorithms.addActionListener(ActionListener l)", "testcase": false, "constructor": false}, {"identifier": "fireActionPerformed", "parameters": "(ActionEvent event)", "modifiers": "protected static", "return": "void", "signature": "void fireActionPerformed(ActionEvent event)", "full_signature": "protected static void fireActionPerformed(ActionEvent event)", "class_method_signature": "JtsAlgorithms.fireActionPerformed(ActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(Geometry[] geometryArray)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry union(Geometry[] geometryArray)", "full_signature": "public static Geometry union(Geometry[] geometryArray)", "class_method_signature": "JtsAlgorithms.union(Geometry[] geometryArray)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(Collection<Geometry> geometryCollection)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry union(Collection<Geometry> geometryCollection)", "full_signature": "public static Geometry union(Collection<Geometry> geometryCollection)", "class_method_signature": "JtsAlgorithms.union(Collection<Geometry> geometryCollection)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(TreeSet<Geometry> treeSet, int groupSize)", "modifiers": "private static", "return": "List<Geometry>", "signature": "List<Geometry> union(TreeSet<Geometry> treeSet, int groupSize)", "full_signature": "private static List<Geometry> union(TreeSet<Geometry> treeSet, int groupSize)", "class_method_signature": "JtsAlgorithms.union(TreeSet<Geometry> treeSet, int groupSize)", "testcase": false, "constructor": false}, {"identifier": "unionLineString", "parameters": "(List<Geometry> geometryCollection)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry unionLineString(List<Geometry> geometryCollection)", "full_signature": "public static Geometry unionLineString(List<Geometry> geometryCollection)", "class_method_signature": "JtsAlgorithms.unionLineString(List<Geometry> geometryCollection)", "testcase": false, "constructor": false}, {"identifier": "unionLineString", "parameters": "(TreeSet<Geometry> treeSet,\n      int groupSize)", "modifiers": "private static", "return": "List<Geometry>", "signature": "List<Geometry> unionLineString(TreeSet<Geometry> treeSet,\n      int groupSize)", "full_signature": "private static List<Geometry> unionLineString(TreeSet<Geometry> treeSet,\n      int groupSize)", "class_method_signature": "JtsAlgorithms.unionLineString(TreeSet<Geometry> treeSet,\n      int groupSize)", "testcase": false, "constructor": false}, {"identifier": "isCCW", "parameters": "(ILineString line)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCCW(ILineString line)", "full_signature": "public static boolean isCCW(ILineString line)", "class_method_signature": "JtsAlgorithms.isCCW(ILineString line)", "testcase": false, "constructor": false}, {"identifier": "filtreDouglasPeucker", "parameters": "(Geometry geom, double seuil)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry filtreDouglasPeucker(Geometry geom, double seuil)", "full_signature": "public static Geometry filtreDouglasPeucker(Geometry geom, double seuil)", "class_method_signature": "JtsAlgorithms.filtreDouglasPeucker(Geometry geom, double seuil)", "testcase": false, "constructor": false}, {"identifier": "fermeture", "parameters": "(Geometry geometry, double distance,\n      int quadrantSegments, int endCapStyle)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry fermeture(Geometry geometry, double distance,\n      int quadrantSegments, int endCapStyle)", "full_signature": "public static Geometry fermeture(Geometry geometry, double distance,\n      int quadrantSegments, int endCapStyle)", "class_method_signature": "JtsAlgorithms.fermeture(Geometry geometry, double distance,\n      int quadrantSegments, int endCapStyle)", "testcase": false, "constructor": false}, {"identifier": "fermeture", "parameters": "(Geometry geometry, double distance,\n      int quadrantSegments)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry fermeture(Geometry geometry, double distance,\n      int quadrantSegments)", "full_signature": "public static Geometry fermeture(Geometry geometry, double distance,\n      int quadrantSegments)", "class_method_signature": "JtsAlgorithms.fermeture(Geometry geometry, double distance,\n      int quadrantSegments)", "testcase": false, "constructor": false}, {"identifier": "supprimeTrous", "parameters": "(Polygon poly)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon supprimeTrous(Polygon poly)", "full_signature": "public static Polygon supprimeTrous(Polygon poly)", "class_method_signature": "JtsAlgorithms.supprimeTrous(Polygon poly)", "testcase": false, "constructor": false}, {"identifier": "supprimeTrous", "parameters": "(MultiPolygon mp)", "modifiers": "public static", "return": "MultiPolygon", "signature": "MultiPolygon supprimeTrous(MultiPolygon mp)", "full_signature": "public static MultiPolygon supprimeTrous(MultiPolygon mp)", "class_method_signature": "JtsAlgorithms.supprimeTrous(MultiPolygon mp)", "testcase": false, "constructor": false}, {"identifier": "supprimeTrous", "parameters": "(Polygon poly, double minArea)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon supprimeTrous(Polygon poly, double minArea)", "full_signature": "public static Polygon supprimeTrous(Polygon poly, double minArea)", "class_method_signature": "JtsAlgorithms.supprimeTrous(Polygon poly, double minArea)", "testcase": false, "constructor": false}, {"identifier": "supprimeTrous", "parameters": "(MultiPolygon mp, double minArea)", "modifiers": "public static", "return": "MultiPolygon", "signature": "MultiPolygon supprimeTrous(MultiPolygon mp, double minArea)", "full_signature": "public static MultiPolygon supprimeTrous(MultiPolygon mp, double minArea)", "class_method_signature": "JtsAlgorithms.supprimeTrous(MultiPolygon mp, double minArea)", "testcase": false, "constructor": false}, {"identifier": "offsetCurve", "parameters": "(ILineString line,\n      double distance)", "modifiers": "public static", "return": "IMultiCurve<ILineString>", "signature": "IMultiCurve<ILineString> offsetCurve(ILineString line,\n      double distance)", "full_signature": "public static IMultiCurve<ILineString> offsetCurve(ILineString line,\n      double distance)", "class_method_signature": "JtsAlgorithms.offsetCurve(ILineString line,\n      double distance)", "testcase": false, "constructor": false}, {"identifier": "offsetCurve", "parameters": "(IGeometry geometry,\n      double distance)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "IMultiCurve<ILineString>", "signature": "IMultiCurve<ILineString> offsetCurve(IGeometry geometry,\n      double distance)", "full_signature": "@SuppressWarnings(\"unchecked\") public static IMultiCurve<ILineString> offsetCurve(IGeometry geometry,\n      double distance)", "class_method_signature": "JtsAlgorithms.offsetCurve(IGeometry geometry,\n      double distance)", "testcase": false, "constructor": false}, {"identifier": "getLineStringWithoutDuplicates", "parameters": "(LineString lineString)", "modifiers": "private static", "return": "LineString", "signature": "LineString getLineStringWithoutDuplicates(LineString lineString)", "full_signature": "private static LineString getLineStringWithoutDuplicates(LineString lineString)", "class_method_signature": "JtsAlgorithms.getLineStringWithoutDuplicates(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "bufferError", "parameters": "(LineString bufferRing, LineString line,\n      double distance)", "modifiers": "public static", "return": "double", "signature": "double bufferError(LineString bufferRing, LineString line,\n      double distance)", "full_signature": "public static double bufferError(LineString bufferRing, LineString line,\n      double distance)", "class_method_signature": "JtsAlgorithms.bufferError(LineString bufferRing, LineString line,\n      double distance)", "testcase": false, "constructor": false}, {"identifier": "getOffsetCurveFromRing", "parameters": "(LineString ring,\n      LineString line, int orientationIndex, double distance)", "modifiers": "private static", "return": "ILineString", "signature": "ILineString getOffsetCurveFromRing(LineString ring,\n      LineString line, int orientationIndex, double distance)", "full_signature": "private static ILineString getOffsetCurveFromRing(LineString ring,\n      LineString line, int orientationIndex, double distance)", "class_method_signature": "JtsAlgorithms.getOffsetCurveFromRing(LineString ring,\n      LineString line, int orientationIndex, double distance)", "testcase": false, "constructor": false}, {"identifier": "isOnRoundCap", "parameters": "(Coordinate c, LineString line,\n      double distance, double tolerance, boolean startCoordinate)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOnRoundCap(Coordinate c, LineString line,\n      double distance, double tolerance, boolean startCoordinate)", "full_signature": "private static boolean isOnRoundCap(Coordinate c, LineString line,\n      double distance, double tolerance, boolean startCoordinate)", "class_method_signature": "JtsAlgorithms.isOnRoundCap(Coordinate c, LineString line,\n      double distance, double tolerance, boolean startCoordinate)", "testcase": false, "constructor": false}, {"identifier": "orientationIndex", "parameters": "(Coordinate c, LineString line,\n      double tolerance)", "modifiers": "public static", "return": "int", "signature": "int orientationIndex(Coordinate c, LineString line,\n      double tolerance)", "full_signature": "public static int orientationIndex(Coordinate c, LineString line,\n      double tolerance)", "class_method_signature": "JtsAlgorithms.orientationIndex(Coordinate c, LineString line,\n      double tolerance)", "testcase": false, "constructor": false}, {"identifier": "cap", "parameters": "(ILineString line, double distance, boolean start)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString cap(ILineString line, double distance, boolean start)", "full_signature": "public static ILineString cap(ILineString line, double distance, boolean start)", "class_method_signature": "JtsAlgorithms.cap(ILineString line, double distance, boolean start)", "testcase": false, "constructor": false}, {"identifier": "getCapFromRing", "parameters": "(LineString ring, LineString line,\n      double distance, boolean start)", "modifiers": "private static", "return": "GM_LineString", "signature": "GM_LineString getCapFromRing(LineString ring, LineString line,\n      double distance, boolean start)", "full_signature": "private static GM_LineString getCapFromRing(LineString ring, LineString line,\n      double distance, boolean start)", "class_method_signature": "JtsAlgorithms.getCapFromRing(LineString ring, LineString line,\n      double distance, boolean start)", "testcase": false, "constructor": false}, {"identifier": "MBRAirePreservee", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon MBRAirePreservee(Geometry geom)", "full_signature": "public static Polygon MBRAirePreservee(Geometry geom)", "class_method_signature": "JtsAlgorithms.MBRAirePreservee(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "MBRAireCible", "parameters": "(Geometry geom, double aireCible)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon MBRAireCible(Geometry geom, double aireCible)", "full_signature": "public static Polygon MBRAireCible(Geometry geom, double aireCible)", "class_method_signature": "JtsAlgorithms.MBRAireCible(Geometry geom, double aireCible)", "testcase": false, "constructor": false}, {"identifier": "MBR", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon MBR(Geometry geom)", "full_signature": "public static Polygon MBR(Geometry geom)", "class_method_signature": "JtsAlgorithms.MBR(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "squareEnveloppe", "parameters": "(Envelope env)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon squareEnveloppe(Envelope env)", "full_signature": "public static Polygon squareEnveloppe(Envelope env)", "class_method_signature": "JtsAlgorithms.squareEnveloppe(Envelope env)", "testcase": false, "constructor": false}, {"identifier": "MBS", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon MBS(Geometry geom)", "full_signature": "public static Polygon MBS(Geometry geom)", "class_method_signature": "JtsAlgorithms.MBS(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "MBSAirePreservee", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon MBSAirePreservee(Geometry geom)", "full_signature": "public static Polygon MBSAirePreservee(Geometry geom)", "class_method_signature": "JtsAlgorithms.MBSAirePreservee(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "rotation", "parameters": "(Polygon geom, Coordinate c, double angle)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon rotation(Polygon geom, Coordinate c, double angle)", "full_signature": "public static Polygon rotation(Polygon geom, Coordinate c, double angle)", "class_method_signature": "JtsAlgorithms.rotation(Polygon geom, Coordinate c, double angle)", "testcase": false, "constructor": false}, {"identifier": "homothetie", "parameters": "(Polygon geom, double x0, double y0,\n      double scale)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon homothetie(Polygon geom, double x0, double y0,\n      double scale)", "full_signature": "public static Polygon homothetie(Polygon geom, double x0, double y0,\n      double scale)", "class_method_signature": "JtsAlgorithms.homothetie(Polygon geom, double x0, double y0,\n      double scale)", "testcase": false, "constructor": false}, {"identifier": "homothetie", "parameters": "(Polygon geom, double x0, double y0,\n      double scaleX, double scaleY)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon homothetie(Polygon geom, double x0, double y0,\n      double scaleX, double scaleY)", "full_signature": "public static Polygon homothetie(Polygon geom, double x0, double y0,\n      double scaleX, double scaleY)", "class_method_signature": "JtsAlgorithms.homothetie(Polygon geom, double x0, double y0,\n      double scaleX, double scaleY)", "testcase": false, "constructor": false}, {"identifier": "homothetie", "parameters": "(Polygon geom, double scaleX, double scaleY)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon homothetie(Polygon geom, double scaleX, double scaleY)", "full_signature": "public static Polygon homothetie(Polygon geom, double scaleX, double scaleY)", "class_method_signature": "JtsAlgorithms.homothetie(Polygon geom, double scaleX, double scaleY)", "testcase": false, "constructor": false}, {"identifier": "homothetie", "parameters": "(Polygon geom, double scale)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon homothetie(Polygon geom, double scale)", "full_signature": "public static Polygon homothetie(Polygon geom, double scale)", "class_method_signature": "JtsAlgorithms.homothetie(Polygon geom, double scale)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/util/algo/JtsAlgorithms.java"}, "focal_method": {"identifier": "offsetCurve", "parameters": "(ILineString line,\n      double distance)", "modifiers": "public static", "return": "IMultiCurve<ILineString>", "body": "public static IMultiCurve<ILineString> offsetCurve(ILineString line,\n      double distance) {\n    double d = Math.abs(distance);\n    if (d == 0) {\n      IMultiCurve<ILineString> result = new GM_MultiCurve<ILineString>();\n      result.add(line);\n      return result;\n    }\n\n    int orientationIndex = (int) (d / distance);\n    try {\n      // removing duplicate coordinates from the input linestring.\n      LineString lineString = JtsAlgorithms\n          .getLineStringWithoutDuplicates((LineString) JtsGeOxygene\n              .makeJtsGeom(line));\n      BufferParameters bufParams = new BufferParameters();\n      bufParams.setSingleSided(true);\n      // bufParams.setEndCapStyle(BufferParameters.CAP_SQUARE);\n      Geometry buffer = BufferOp.bufferOp(lineString, distance, bufParams);\n      // lineString.buffer(distance, 4, BufferParameters.CAP_SQUARE);\n      // System.out.println(\"SS \" + buffer);\n      if (lineString != null) {\n        buffer = lineString.buffer(d, 4, BufferParameters.CAP_ROUND);\n        // System.out.println(buffer);\n        Polygon polygon = null;\n        if (!(buffer instanceof Polygon)) {\n          JtsAlgorithms.logger.error(\"Can't compute offsetcurve of \" + //$NON-NLS-1$\n              buffer.getGeometryType());\n          return null;\n        }\n        polygon = (Polygon) buffer;\n        IMultiCurve<ILineString> result = new GM_MultiCurve<ILineString>();\n        // build the offset curve for the exterior ring\n        ILineString r = JtsAlgorithms.getOffsetCurveFromRing(\n            polygon.getExteriorRing(), lineString, orientationIndex, d);\n        if ((r != null) && !r.isEmpty() && (r.coord().size() != 1)) {\n          result.add(r);\n        } // modif JFG\n        // go through all interior rings\n        for (int i = 0; i < polygon.getNumInteriorRing(); i++) {\n          LineString ring = polygon.getInteriorRingN(i);\n          // build the offset curve for the interior ring\n          r = JtsAlgorithms.getOffsetCurveFromRing(ring, lineString,\n              orientationIndex, d);\n          if ((r != null) && !r.isEmpty() && (r.coord().size() != 1)) {\n            result.add(r);\n          } // modif JFG\n        }\n        return result;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;\n  }", "signature": "IMultiCurve<ILineString> offsetCurve(ILineString line,\n      double distance)", "full_signature": "public static IMultiCurve<ILineString> offsetCurve(ILineString line,\n      double distance)", "class_method_signature": "JtsAlgorithms.offsetCurve(ILineString line,\n      double distance)", "testcase": false, "constructor": false, "invocations": ["abs", "add", "getLineStringWithoutDuplicates", "makeJtsGeom", "setSingleSided", "bufferOp", "buffer", "error", "getGeometryType", "getOffsetCurveFromRing", "getExteriorRing", "isEmpty", "size", "coord", "add", "getNumInteriorRing", "getInteriorRingN", "getOffsetCurveFromRing", "isEmpty", "size", "coord", "add", "printStackTrace"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}