{"test_class": {"identifier": "OdfValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String WSDL = \"/pserv-pc-odfvalidator/OdfValidator?wsdl\";", "modifier": "private static", "type": "String", "declarator": "WSDL = \"/pserv-pc-odfvalidator/OdfValidator?wsdl\"", "var_name": "WSDL"}, {"original_string": "private static Validate validator = null;", "modifier": "private static", "type": "Validate", "declarator": "validator = null", "var_name": "validator"}, {"original_string": "File v10TestIn = new File(\"tests/test-files/documents/test_pdf/2274192346_4a0a03c5d6.pdf\");", "modifier": "", "type": "File", "declarator": "v10TestIn = new File(\"tests/test-files/documents/test_pdf/2274192346_4a0a03c5d6.pdf\")", "var_name": "v10TestIn"}, {"original_string": "static File v10UserDocSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserDocSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-schema-v1.0-os.rng\")", "var_name": "v10UserDocSchema"}, {"original_string": "static File v10UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-strict-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-strict-schema-v1.0-os.rng\")", "var_name": "v10UserDocStrictSchema"}, {"original_string": "static File v10UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-manifest-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-manifest-schema-v1.0-os.rng\")", "var_name": "v10UserManifestSchema"}, {"original_string": "File v11_text = new File(\"tests/test-files/documents/test_odt/v11/test_file_v11.odt\");", "modifier": "", "type": "File", "declarator": "v11_text = new File(\"tests/test-files/documents/test_odt/v11/test_file_v11.odt\")", "var_name": "v11_text"}, {"original_string": "File v11_presentation = new File(\"tests/test-files/documents/test_odt/v11/test_presentation_v11.odp\");", "modifier": "", "type": "File", "declarator": "v11_presentation = new File(\"tests/test-files/documents/test_odt/v11/test_presentation_v11.odp\")", "var_name": "v11_presentation"}, {"original_string": "File v11_database = new File(\"tests/test-files/documents/test_odt/v11/test_database_v11.odb\");", "modifier": "", "type": "File", "declarator": "v11_database = new File(\"tests/test-files/documents/test_odt/v11/test_database_v11.odb\")", "var_name": "v11_database"}, {"original_string": "File v11_drawing = new File(\"tests/test-files/documents/test_odt/v11/drawing_v11.odg\");", "modifier": "", "type": "File", "declarator": "v11_drawing = new File(\"tests/test-files/documents/test_odt/v11/drawing_v11.odg\")", "var_name": "v11_drawing"}, {"original_string": "File v11_table = new File(\"tests/test-files/documents/test_odt/v11/table_v11.ods\");", "modifier": "", "type": "File", "declarator": "v11_table = new File(\"tests/test-files/documents/test_odt/v11/table_v11.ods\")", "var_name": "v11_table"}, {"original_string": "File v11_formula = new File(\"tests/test-files/documents/test_odt/v11/formula_v11.odf\");", "modifier": "", "type": "File", "declarator": "v11_formula = new File(\"tests/test-files/documents/test_odt/v11/formula_v11.odf\")", "var_name": "v11_formula"}, {"original_string": "static File v11UserDocSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserDocSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-schema-v1.1.rng\")", "var_name": "v11UserDocSchema"}, {"original_string": "static File v11UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-strict-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-strict-schema-v1.1.rng\")", "var_name": "v11UserDocStrictSchema"}, {"original_string": "static File v11UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-manifest-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-manifest-schema-v1.1.rng\")", "var_name": "v11UserManifestSchema"}, {"original_string": "File v12TestIn = new File(\"tests/test-files/documents/test_odt/v12/test_presentation_v12.odp\");", "modifier": "", "type": "File", "declarator": "v12TestIn = new File(\"tests/test-files/documents/test_odt/v12/test_presentation_v12.odp\")", "var_name": "v12TestIn"}, {"original_string": "static File v12UserDocSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-schema-v1.2-cd03.rng\");", "modifier": "static", "type": "File", "declarator": "v12UserDocSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-schema-v1.2-cd03.rng\")", "var_name": "v12UserDocSchema"}, {"original_string": "static File v12UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-manifest-schema-v1.2-draft7.rng\");", "modifier": "static", "type": "File", "declarator": "v12UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-manifest-schema-v1.2-draft7.rng\")", "var_name": "v12UserManifestSchema"}, {"original_string": "FormatRegistry techReg = FormatRegistryFactory.getFormatRegistry();", "modifier": "", "type": "FormatRegistry", "declarator": "techReg = FormatRegistryFactory.getFormatRegistry()", "var_name": "techReg"}, {"original_string": "static List<Parameter> params = new ArrayList<Parameter>();", "modifier": "static", "type": "List<Parameter>", "declarator": "params = new ArrayList<Parameter>()", "var_name": "params"}, {"original_string": "static List<Parameter> v12_params = new ArrayList<Parameter>();", "modifier": "static", "type": "List<Parameter>", "declarator": "v12_params = new ArrayList<Parameter>()", "var_name": "v12_params"}, {"original_string": "static File[] testFiles = null;", "modifier": "static", "type": "File[]", "declarator": "testFiles = null", "var_name": "testFiles"}], "file": "services/odfvalidator/src/test/java/eu/planets_project/services/validation/odfvalidator/OdfValidatorTest.java"}, "test_case": {"identifier": "testOdfValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOdfValidate() {\n\t\t\n\t\tfor (File currentFile : testFiles) {\n\t\t\t// ignore the .svn folder ;-)\n\t\t\tif(currentFile.isHidden() /*|| !currentFile.getName().contains(\"presentation\")*/) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprintTestTitle(\"Testing OdfValidator with input file: \" + currentFile.getName());\n\t\t\tDigitalObject testIn = new DigitalObject.Builder(Content.byReference(currentFile)).title(currentFile.getName()).build();\n\t\t\t\n\t\t\tURI format = techReg.createExtensionUri(FilenameUtils.getExtension(currentFile.getName()));\n\t\t\t\n\t\t\tValidateResult vr = validator.validate(testIn, format, null);\n\t\t\t\n\t\t\tassertTrue(\"ValidateResult should not be NULL!\", vr!=null);\n\t\t\tServiceReport sr = vr.getReport();\n\t\t\tSystem.out.println(sr);\n\t\t}\n\t}", "signature": "void testOdfValidate()", "full_signature": "@Test public void testOdfValidate()", "class_method_signature": "OdfValidatorTest.testOdfValidate()", "testcase": true, "constructor": false, "invocations": ["isHidden", "printTestTitle", "getName", "build", "title", "byReference", "getName", "createExtensionUri", "getExtension", "getName", "validate", "assertTrue", "getReport", "println"]}, "focal_class": {"identifier": "OdfValidator", "superclass": "", "interfaces": "implements Validate", "fields": [{"original_string": "public static final String NAME = \"OdfValidator\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"OdfValidator\"", "var_name": "NAME"}, {"original_string": "private static Logger log = Logger.getLogger(OdfValidator.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(OdfValidator.class.getName())", "var_name": "log"}, {"original_string": "private static FormatRegistry techReg = FormatRegistryFactory.getFormatRegistry();", "modifier": "private static", "type": "FormatRegistry", "declarator": "techReg = FormatRegistryFactory.getFormatRegistry()", "var_name": "techReg"}, {"original_string": "private static String NEWLINE = System.getProperty(\"line.separator\");", "modifier": "private static", "type": "String", "declarator": "NEWLINE = System.getProperty(\"line.separator\")", "var_name": "NEWLINE"}, {"original_string": "private String usedSchemas = loadSchemas();", "modifier": "private", "type": "String", "declarator": "usedSchemas = loadSchemas()", "var_name": "usedSchemas"}], "methods": [{"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "OdfValidator.describe()", "testcase": false, "constructor": false}, {"identifier": "loadSchemas", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String loadSchemas()", "full_signature": "private String loadSchemas()", "class_method_signature": "OdfValidator.loadSchemas()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "modifiers": "public", "return": "ValidateResult", "signature": "ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "full_signature": "public ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "class_method_signature": "OdfValidator.validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "returnWithErrorMessage", "parameters": "(final URI format, final String message,\n            final Exception e)", "modifiers": "private", "return": "ValidateResult", "signature": "ValidateResult returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "full_signature": "private ValidateResult returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "class_method_signature": "OdfValidator.returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "testcase": false, "constructor": false}], "file": "services/odfvalidator/src/main/java/eu/planets_project/services/validation/odfvalidator/OdfValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "modifiers": "public", "return": "ValidateResult", "body": "public ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters) {\n\t\t\n\t\tif(digitalObject==null || digitalObject.getContent() == null) {\n\t\t\treturn this.returnWithErrorMessage(format, \"[OdfValidator] ERROR: No input file found!\", null);\n\t\t}\n\t\t\n\t\tString name = DigitalObjectUtils.getFileNameFromDigObject(digitalObject, format);\n\t\t\n\t\tFile inputOdfFile = DigitalObjectUtils.toFile(digitalObject);\n\t\tinputOdfFile.deleteOnExit();\n\t\t\n\t\tCoreOdfValidator odfValidator = new CoreOdfValidator();\n\t\t\n\t\tOdfValidatorResult result = odfValidator.validate(inputOdfFile, parameters);\n\t\t\n\t\tValidateResult vr = null;\n\t\t\n\t\tif(result.documentIsValid()) {\n\t\t\tvr = new ValidateResult.Builder(format,\n\t                new ServiceReport(Type.INFO, Status.SUCCESS, result.getValidationResultAsString()))\n\t                .ofThisFormat(result.isOdfFile())\n\t                .validInRegardToThisFormat(result.documentIsValid()).build();\n\t\t}\n\t\telse {\n\t\t\tvr = new ValidateResult.Builder(format, new ServiceReport(Type.INFO, Status.SUCCESS, result.getValidationResultAsString()))\n\t\t\t.ofThisFormat(result.isOdfFile())\n\t\t\t.validInRegardToThisFormat(result.documentIsValid()).build();\n\t\t}\n\t\treturn vr;\n\t}", "signature": "ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "full_signature": "public ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "class_method_signature": "OdfValidator.validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "testcase": false, "constructor": false, "invocations": ["getContent", "returnWithErrorMessage", "getFileNameFromDigObject", "toFile", "deleteOnExit", "validate", "documentIsValid", "build", "validInRegardToThisFormat", "ofThisFormat", "getValidationResultAsString", "isOdfFile", "documentIsValid", "build", "validInRegardToThisFormat", "ofThisFormat", "getValidationResultAsString", "isOdfFile", "documentIsValid"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}