{"test_class": {"identifier": "LpcFeaturesExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int POLES = 20;", "modifier": "private static final", "type": "int", "declarator": "POLES = 20", "var_name": "POLES"}, {"original_string": "private static final float DEFAULT_SAMPLE_RATE = 22050;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_SAMPLE_RATE = 22050", "var_name": "DEFAULT_SAMPLE_RATE"}, {"original_string": "private static final float[] SAMPLE_RATES = new float[] {\n        8000, 10000, 16000, 22050, 44100, 48000, 88200, 96000, 176400, 192000\n    };", "modifier": "private static final", "type": "float[]", "declarator": "SAMPLE_RATES = new float[] {\n        8000, 10000, 16000, 22050, 44100, 48000, 88200, 96000, 176400, 192000\n    }", "var_name": "SAMPLE_RATES"}, {"original_string": "private static final int[] WINDOW_LENGTHS = new int[] {\n        256, 256, 512, 512, 1024, 1024, 2048, 2048, 4096, 4096\n    };", "modifier": "private static final", "type": "int[]", "declarator": "WINDOW_LENGTHS = new int[] {\n        256, 256, 512, 512, 1024, 1024, 2048, 2048, 4096, 4096\n    }", "var_name": "WINDOW_LENGTHS"}, {"original_string": "private LpcFeaturesExtractor lpc;", "modifier": "private", "type": "LpcFeaturesExtractor", "declarator": "lpc", "var_name": "lpc"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/features/LpcFeaturesExtractorTest.java"}, "test_case": {"identifier": "lpcFeaturesAreAveragesOnTheLpcCoefficientsReturnedByLinearPredictiveCodingAlgorithm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lpcFeaturesAreAveragesOnTheLpcCoefficientsReturnedByLinearPredictiveCodingAlgorithm() {\n        lpc = new LpcFeaturesExtractor(DEFAULT_SAMPLE_RATE, POLES);\n        double[] voiceSample = new double[4096];\n        new MockUp<LinearPredictiveCoding>() {\n            private int value = 1;\n            @Mock double[][] applyLinearPredictiveCoding(double[] window) {\n                double[][] result = new double[2][20];\n                Arrays.fill(result[0], value);\n                value++;\n                return result;\n            }\n        };\n        double[] reference = new double[20];\n        // given sliding window 512 with step 256 -> 15 calls to lpc algorithm\n        // given the above mock :\n        // (1 + 2 + 3 + ... + 15) / 15 = 8\n        Arrays.fill(reference, 8.0d);\n        \n        double[] features = lpc.extractFeatures(voiceSample);\n        \n        assertThat(features, is(equalTo(reference)));\n    }", "signature": "void lpcFeaturesAreAveragesOnTheLpcCoefficientsReturnedByLinearPredictiveCodingAlgorithm()", "full_signature": "@Test public void lpcFeaturesAreAveragesOnTheLpcCoefficientsReturnedByLinearPredictiveCodingAlgorithm()", "class_method_signature": "LpcFeaturesExtractorTest.lpcFeaturesAreAveragesOnTheLpcCoefficientsReturnedByLinearPredictiveCodingAlgorithm()", "testcase": true, "constructor": false, "invocations": ["fill", "fill", "extractFeatures", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "LpcFeaturesExtractor", "superclass": "extends WindowedFeaturesExtractor<double[]>", "interfaces": "", "fields": [{"original_string": "private final int poles;", "modifier": "private final", "type": "int", "declarator": "poles", "var_name": "poles"}, {"original_string": "private final WindowFunction windowFunction;", "modifier": "private final", "type": "WindowFunction", "declarator": "windowFunction", "var_name": "windowFunction"}, {"original_string": "private final LinearPredictiveCoding lpc;", "modifier": "private final", "type": "LinearPredictiveCoding", "declarator": "lpc", "var_name": "lpc"}], "methods": [{"identifier": "LpcFeaturesExtractor", "parameters": "(float sampleRate, int poles)", "modifiers": "public", "return": "", "signature": " LpcFeaturesExtractor(float sampleRate, int poles)", "full_signature": "public  LpcFeaturesExtractor(float sampleRate, int poles)", "class_method_signature": "LpcFeaturesExtractor.LpcFeaturesExtractor(float sampleRate, int poles)", "testcase": false, "constructor": true}, {"identifier": "extractFeatures", "parameters": "(double[] voiceSample)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] extractFeatures(double[] voiceSample)", "full_signature": "@Override public double[] extractFeatures(double[] voiceSample)", "class_method_signature": "LpcFeaturesExtractor.extractFeatures(double[] voiceSample)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/features/LpcFeaturesExtractor.java"}, "focal_method": {"identifier": "extractFeatures", "parameters": "(double[] voiceSample)", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] extractFeatures(double[] voiceSample) {\n\n        double[] voiceFeatures = new double[poles];\n        double[] audioWindow = new double[windowSize];\n\n        int counter = 0;\n        int halfWindowLength = windowSize / 2;\n\n        for (int i = 0; (i + windowSize) <= voiceSample.length; i += halfWindowLength) {\n\n            System.arraycopy(voiceSample, i, audioWindow, 0, windowSize);\n\n            windowFunction.applyFunction(audioWindow);\n            double[] lpcCoeffs = lpc.applyLinearPredictiveCoding(audioWindow)[0];\n\n            for (int j = 0; j < poles; j++) {\n                voiceFeatures[j] += lpcCoeffs[j];\n            }\n            counter++;\n        }\n\n        if (counter > 1) {\n            for (int i = 0; i < poles; i++) {\n                voiceFeatures[i] /= counter;\n            }\n        }\n        return voiceFeatures;\n    }", "signature": "double[] extractFeatures(double[] voiceSample)", "full_signature": "@Override public double[] extractFeatures(double[] voiceSample)", "class_method_signature": "LpcFeaturesExtractor.extractFeatures(double[] voiceSample)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "applyFunction", "applyLinearPredictiveCoding"]}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}