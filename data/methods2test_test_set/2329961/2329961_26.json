{"test_class": {"identifier": "ServiceCoordinateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CloudnamePath cnPath = new CloudnamePath(\n            new String[] { \"local\", \"test\", \"service\" });", "modifier": "private final", "type": "CloudnamePath", "declarator": "cnPath = new CloudnamePath(\n            new String[] { \"local\", \"test\", \"service\" })", "var_name": "cnPath"}], "file": "cn-service/src/test/java/org/cloudname/service/ServiceCoordinateTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        final ServiceCoordinate coordA = ServiceCoordinate.parse(\"a.b.c\");\n        final ServiceCoordinate coordB = ServiceCoordinate.parse(\"a.b.c\");\n        final ServiceCoordinate coordC = ServiceCoordinate.parse(\"a.b.d\");\n        final ServiceCoordinate coordD = ServiceCoordinate.parse(\"a.a.c\");\n        final ServiceCoordinate coordE = ServiceCoordinate.parse(\"a.a.a\");\n        final ServiceCoordinate coordF = ServiceCoordinate.parse(\"c.b.c\");\n\n        assertThat(coordA, is(equalTo(coordB)));\n        assertThat(coordB, is(equalTo(coordA)));\n\n        assertThat(coordA, is(not(equalTo(coordC))));\n        assertThat(coordA, is(not(equalTo(coordD))));\n        assertThat(coordA, is(not(equalTo(coordE))));\n        assertThat(coordA, is(not(equalTo(coordF))));\n\n        assertThat(coordA.equals(null), is(false));\n        assertThat(coordA.equals(new Object()), is(false));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ServiceCoordinateTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "parse", "parse", "parse", "parse", "assertThat", "is", "equalTo", "assertThat", "is", "equalTo", "assertThat", "is", "not", "equalTo", "assertThat", "is", "not", "equalTo", "assertThat", "is", "not", "equalTo", "assertThat", "is", "not", "equalTo", "assertThat", "equals", "is", "assertThat", "equals", "is"]}, "focal_class": {"identifier": "ServiceCoordinate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String region;", "modifier": "private final", "type": "String", "declarator": "region", "var_name": "region"}, {"original_string": "private final String tag;", "modifier": "private final", "type": "String", "declarator": "tag", "var_name": "tag"}, {"original_string": "private final String service;", "modifier": "private final", "type": "String", "declarator": "service", "var_name": "service"}, {"original_string": "private static final Pattern COORDINATE_PATTERN = Pattern.compile(\"(.*)\\\\.(.*)\\\\.(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "COORDINATE_PATTERN = Pattern.compile(\"(.*)\\\\.(.*)\\\\.(.*)\")", "var_name": "COORDINATE_PATTERN"}], "methods": [{"identifier": "ServiceCoordinate", "parameters": "(final CloudnamePath path)", "modifiers": "", "return": "", "signature": " ServiceCoordinate(final CloudnamePath path)", "full_signature": "  ServiceCoordinate(final CloudnamePath path)", "class_method_signature": "ServiceCoordinate.ServiceCoordinate(final CloudnamePath path)", "testcase": false, "constructor": true}, {"identifier": "getRegion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRegion()", "full_signature": "public String getRegion()", "class_method_signature": "ServiceCoordinate.getRegion()", "testcase": false, "constructor": false}, {"identifier": "getTag", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTag()", "full_signature": "public String getTag()", "class_method_signature": "ServiceCoordinate.getTag()", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getService()", "full_signature": "public String getService()", "class_method_signature": "ServiceCoordinate.getService()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String serviceCoordinateString)", "modifiers": "public static", "return": "ServiceCoordinate", "signature": "ServiceCoordinate parse(final String serviceCoordinateString)", "full_signature": "public static ServiceCoordinate parse(final String serviceCoordinateString)", "class_method_signature": "ServiceCoordinate.parse(final String serviceCoordinateString)", "testcase": false, "constructor": false}, {"identifier": "toCloudnamePath", "parameters": "()", "modifiers": "", "return": "CloudnamePath", "signature": "CloudnamePath toCloudnamePath()", "full_signature": " CloudnamePath toCloudnamePath()", "class_method_signature": "ServiceCoordinate.toCloudnamePath()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object otherInstance)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object otherInstance)", "full_signature": "@Override public boolean equals(final Object otherInstance)", "class_method_signature": "ServiceCoordinate.equals(final Object otherInstance)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ServiceCoordinate.hashCode()", "testcase": false, "constructor": false}], "file": "cn-service/src/main/java/org/cloudname/service/ServiceCoordinate.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object otherInstance)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(final Object otherInstance) {\n        if (this == otherInstance) {\n            return true;\n        }\n        if (otherInstance == null || getClass() != otherInstance.getClass()) {\n            return false;\n        }\n\n        final ServiceCoordinate other = (ServiceCoordinate) otherInstance;\n\n        if (!this.region.equals(other.region)\n                || !this.tag.equals(other.tag)\n                || !this.service.equals(other.service)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(final Object otherInstance)", "full_signature": "@Override public boolean equals(final Object otherInstance)", "class_method_signature": "ServiceCoordinate.equals(final Object otherInstance)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}