{"test_class": {"identifier": "PdfACopyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String outputDir = \"./target/test/copy/\";", "modifier": "protected static final", "type": "String", "declarator": "outputDir = \"./target/test/copy/\"", "var_name": "outputDir"}], "file": "pdfa/src/test/java/com/itextpdf/text/pdf/PdfACopyTest.java"}, "test_case": {"identifier": "testMergeFields3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeFields3() throws DocumentException, IOException {\n        String f1 = \"./src/test/resources/com/itextpdf/text/pdf/copy/pdfa-1a.pdf\";\n        String f2 = \"./src/test/resources/com/itextpdf/text/pdf/copy/pdfa-2a.pdf\";\n\n        OutputStream outputPdfStream = new ByteArrayOutputStream();\n        Document document = new Document();\n        PdfACopy copy = new PdfACopy(document, outputPdfStream, PdfAConformanceLevel.PDF_A_1A);\n        copy.setMergeFields();\n        copy.createXmpMetadata();\n        copy.setTagged();\n        document.open();\n        document.addLanguage(\"en-US\");\n\n        boolean exceptionThrown = false;\n        try {\n            for (String f : new String[]{f1, f2}) {\n                PdfReader reader = new PdfReader(f);\n                copy.addDocument(reader);\n            }\n        } catch (PdfAConformanceException e) {\n            if (e.getMessage().contains(\"Different PDF/A version\"))\n                exceptionThrown = true;\n        }\n\n        if (!exceptionThrown)\n            junit.framework.Assert.fail(\"PdfAConformanceException should be thrown.\");\n\n\n    }", "signature": "void testMergeFields3()", "full_signature": "@Test public void testMergeFields3()", "class_method_signature": "PdfACopyTest.testMergeFields3()", "testcase": true, "constructor": false, "invocations": ["setMergeFields", "createXmpMetadata", "setTagged", "open", "addLanguage", "addDocument", "contains", "getMessage", "fail"]}, "focal_class": {"identifier": "PdfACopy", "superclass": "extends PdfCopy", "interfaces": "", "fields": [{"original_string": "protected Counter COUNTER = CounterFactory.getCounter(PdfACopy.class);", "modifier": "protected", "type": "Counter", "declarator": "COUNTER = CounterFactory.getCounter(PdfACopy.class)", "var_name": "COUNTER"}], "methods": [{"identifier": "PdfACopy", "parameters": "(Document document, OutputStream os, PdfAConformanceLevel conformanceLevel)", "modifiers": "public", "return": "", "signature": " PdfACopy(Document document, OutputStream os, PdfAConformanceLevel conformanceLevel)", "full_signature": "public  PdfACopy(Document document, OutputStream os, PdfAConformanceLevel conformanceLevel)", "class_method_signature": "PdfACopy.PdfACopy(Document document, OutputStream os, PdfAConformanceLevel conformanceLevel)", "testcase": false, "constructor": true}, {"identifier": "getCounter", "parameters": "()", "modifiers": "protected", "return": "Counter", "signature": "Counter getCounter()", "full_signature": "protected Counter getCounter()", "class_method_signature": "PdfACopy.getCounter()", "testcase": false, "constructor": false}, {"identifier": "initPdfIsoConformance", "parameters": "()", "modifiers": "@Override protected", "return": "PdfIsoConformance", "signature": "PdfIsoConformance initPdfIsoConformance()", "full_signature": "@Override protected PdfIsoConformance initPdfIsoConformance()", "class_method_signature": "PdfACopy.initPdfIsoConformance()", "testcase": false, "constructor": false}, {"identifier": "cacheObject", "parameters": "(PdfIndirectObject iobj)", "modifiers": "@Override protected", "return": "void", "signature": "void cacheObject(PdfIndirectObject iobj)", "full_signature": "@Override protected void cacheObject(PdfIndirectObject iobj)", "class_method_signature": "PdfACopy.cacheObject(PdfIndirectObject iobj)", "testcase": false, "constructor": false}, {"identifier": "getPdfAChecker", "parameters": "()", "modifiers": "private", "return": "PdfAChecker", "signature": "PdfAChecker getPdfAChecker()", "full_signature": "private PdfAChecker getPdfAChecker()", "class_method_signature": "PdfACopy.getPdfAChecker()", "testcase": false, "constructor": false}, {"identifier": "addDocument", "parameters": "(PdfReader reader)", "modifiers": "@Override public", "return": "void", "signature": "void addDocument(PdfReader reader)", "full_signature": "@Override public void addDocument(PdfReader reader)", "class_method_signature": "PdfACopy.addDocument(PdfReader reader)", "testcase": false, "constructor": false}, {"identifier": "addPage", "parameters": "(PdfImportedPage iPage)", "modifiers": "@Override public", "return": "void", "signature": "void addPage(PdfImportedPage iPage)", "full_signature": "@Override public void addPage(PdfImportedPage iPage)", "class_method_signature": "PdfACopy.addPage(PdfImportedPage iPage)", "testcase": false, "constructor": false}, {"identifier": "createPageStamp", "parameters": "(PdfImportedPage iPage)", "modifiers": "@Override public", "return": "PageStamp", "signature": "PageStamp createPageStamp(PdfImportedPage iPage)", "full_signature": "@Override public PageStamp createPageStamp(PdfImportedPage iPage)", "class_method_signature": "PdfACopy.createPageStamp(PdfImportedPage iPage)", "testcase": false, "constructor": false}, {"identifier": "setOutputIntents", "parameters": "(final String outputConditionIdentifier, final String outputCondition, final String registryName, final String info, final ICC_Profile colorProfile)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputIntents(final String outputConditionIdentifier, final String outputCondition, final String registryName, final String info, final ICC_Profile colorProfile)", "full_signature": "@Override public void setOutputIntents(final String outputConditionIdentifier, final String outputCondition, final String registryName, final String info, final ICC_Profile colorProfile)", "class_method_signature": "PdfACopy.setOutputIntents(final String outputConditionIdentifier, final String outputCondition, final String registryName, final String info, final ICC_Profile colorProfile)", "testcase": false, "constructor": false}, {"identifier": "setOutputIntents", "parameters": "(PdfReader reader, boolean checkExistence)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setOutputIntents(PdfReader reader, boolean checkExistence)", "full_signature": "@Override public boolean setOutputIntents(PdfReader reader, boolean checkExistence)", "class_method_signature": "PdfACopy.setOutputIntents(PdfReader reader, boolean checkExistence)", "testcase": false, "constructor": false}, {"identifier": "createXmpWriter", "parameters": "(ByteArrayOutputStream baos, PdfDictionary info)", "modifiers": "@Override protected", "return": "XmpWriter", "signature": "XmpWriter createXmpWriter(ByteArrayOutputStream baos, PdfDictionary info)", "full_signature": "@Override protected XmpWriter createXmpWriter(ByteArrayOutputStream baos, PdfDictionary info)", "class_method_signature": "PdfACopy.createXmpWriter(ByteArrayOutputStream baos, PdfDictionary info)", "testcase": false, "constructor": false}, {"identifier": "createXmpWriter", "parameters": "(ByteArrayOutputStream baos, HashMap<String, String> info)", "modifiers": "@Override protected", "return": "XmpWriter", "signature": "XmpWriter createXmpWriter(ByteArrayOutputStream baos, HashMap<String, String> info)", "full_signature": "@Override protected XmpWriter createXmpWriter(ByteArrayOutputStream baos, HashMap<String, String> info)", "class_method_signature": "PdfACopy.createXmpWriter(ByteArrayOutputStream baos, HashMap<String, String> info)", "testcase": false, "constructor": false}, {"identifier": "getTtfUnicodeWriter", "parameters": "()", "modifiers": "@Override protected", "return": "TtfUnicodeWriter", "signature": "TtfUnicodeWriter getTtfUnicodeWriter()", "full_signature": "@Override protected TtfUnicodeWriter getTtfUnicodeWriter()", "class_method_signature": "PdfACopy.getTtfUnicodeWriter()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PdfACopy.close()", "testcase": false, "constructor": false}, {"identifier": "checkPdfAInfo", "parameters": "(PdfReader reader)", "modifiers": "private", "return": "void", "signature": "void checkPdfAInfo(PdfReader reader)", "full_signature": "private void checkPdfAInfo(PdfReader reader)", "class_method_signature": "PdfACopy.checkPdfAInfo(PdfReader reader)", "testcase": false, "constructor": false}], "file": "pdfa/src/main/java/com/itextpdf/text/pdf/PdfACopy.java"}, "focal_method": {"identifier": "addDocument", "parameters": "(PdfReader reader)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addDocument(PdfReader reader) throws DocumentException, IOException {\n        checkPdfAInfo(reader);\n        super.addDocument(reader);\n    }", "signature": "void addDocument(PdfReader reader)", "full_signature": "@Override public void addDocument(PdfReader reader)", "class_method_signature": "PdfACopy.addDocument(PdfReader reader)", "testcase": false, "constructor": false, "invocations": ["checkPdfAInfo", "addDocument"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}