{"test_class": {"identifier": "CmakeOutputParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Mock public Consumer<? super BuildEvent> messageConsumer;", "modifier": "@Mock public", "type": "Consumer<? super BuildEvent>", "declarator": "messageConsumer", "var_name": "messageConsumer"}, {"original_string": "private CmakeOutputParser parser;", "modifier": "private", "type": "CmakeOutputParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private File sourceFile;", "modifier": "private", "type": "File", "declarator": "sourceFile", "var_name": "sourceFile"}], "file": "android/testSrc/com/android/tools/idea/gradle/project/build/output/CmakeOutputParserTest.java"}, "test_case": {"identifier": "testPosixFilePatternMatcherForFileAndLineNumberError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPosixFilePatternMatcherForFileAndLineNumberError() {\n    int lineNumber = 123;\n    int columnNumber = 456;\n    String filePath = \"/path/to/file.type\";\n    String error = \"%s:%d:%d\";\n    error = String.format(Locale.getDefault(), error, filePath, lineNumber, columnNumber);\n\n    Matcher matcher = CmakeOutputParser.fileAndLineNumber.matcher(error);\n    assertTrue(\"[match file path]\", matcher.matches());\n\n    String matchedPath = matcher.group(1);\n    CmakeOutputParser.ErrorFields fields =\n      CmakeOutputParser.matchFileAndLineNumberErrorParts(matcher, error);\n    assertEquals(\"[source path]\", filePath.trim(), matchedPath);\n    assertEquals(\"[line number]\", lineNumber, fields.lineNumber);\n    assertEquals(\"[column number]\", columnNumber, fields.columnNumber);\n  }", "signature": "void testPosixFilePatternMatcherForFileAndLineNumberError()", "full_signature": "@Test public void testPosixFilePatternMatcherForFileAndLineNumberError()", "class_method_signature": "CmakeOutputParserTest.testPosixFilePatternMatcherForFileAndLineNumberError()", "testcase": true, "constructor": false, "invocations": ["format", "getDefault", "matcher", "assertTrue", "matches", "group", "matchFileAndLineNumberErrorParts", "assertEquals", "trim", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CmakeOutputParser", "superclass": "", "interfaces": "implements BuildOutputParser", "fields": [{"original_string": "@NonNull static final String CMAKE = \"CMake\";", "modifier": "@NonNull static final", "type": "String", "declarator": "CMAKE = \"CMake\"", "var_name": "CMAKE"}, {"original_string": "@NonNull private static final String ERROR = \"Error\";", "modifier": "@NonNull private static final", "type": "String", "declarator": "ERROR = \"Error\"", "var_name": "ERROR"}, {"original_string": "@NonNull private static final String CMAKE_ERROR = CMAKE + \" \" + ERROR;", "modifier": "@NonNull private static final", "type": "String", "declarator": "CMAKE_ERROR = CMAKE + \" \" + ERROR", "var_name": "CMAKE_ERROR"}, {"original_string": "private final Pattern cmakeErrorOrWarning = Pattern.compile(\"^\\\\s*CMake (Error|Warning).+\");", "modifier": "private final", "type": "Pattern", "declarator": "cmakeErrorOrWarning = Pattern.compile(\"^\\\\s*CMake (Error|Warning).+\")", "var_name": "cmakeErrorOrWarning"}, {"original_string": "static final Pattern fileAndLineNumber = Pattern.compile(\"^(([A-Za-z]:)?.*):([0-9]+)? *:([0-9]+)?(.+)?\");", "modifier": "static final", "type": "Pattern", "declarator": "fileAndLineNumber = Pattern.compile(\"^(([A-Za-z]:)?.*):([0-9]+)? *:([0-9]+)?(.+)?\")", "var_name": "fileAndLineNumber"}, {"original_string": "static final Pattern errorFileAndLineNumber =\n    Pattern.compile(\"CMake (Error|Warning).*at (([A-Za-z]:)?[^:]+):([0-9]+)?.*(\\\\([^:]*\\\\))?:([0-9]+)?(.+)?\");", "modifier": "static final", "type": "Pattern", "declarator": "errorFileAndLineNumber =\n    Pattern.compile(\"CMake (Error|Warning).*at (([A-Za-z]:)?[^:]+):([0-9]+)?.*(\\\\([^:]*\\\\))?:([0-9]+)?(.+)?\")", "var_name": "errorFileAndLineNumber"}, {"original_string": "private static final int SOURCE_POSITION_OFFSET = -1;", "modifier": "private static final", "type": "int", "declarator": "SOURCE_POSITION_OFFSET = -1", "var_name": "SOURCE_POSITION_OFFSET"}], "methods": [{"identifier": "parse", "parameters": "(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "full_signature": "@Override public boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchesFileAndLineNumberError", "parameters": "(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "full_signature": "private static boolean matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchFileAndLineNumberErrorParts", "parameters": "(\n    @NonNull Matcher matcher, @NonNull String line)", "modifiers": "@VisibleForTesting static", "return": "ErrorFields", "signature": "ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "full_signature": "@VisibleForTesting static ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "class_method_signature": "CmakeOutputParser.matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "testcase": false, "constructor": false}, {"identifier": "matchesErrorFileAndLineNumberError", "parameters": "(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "full_signature": "private static boolean matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchErrorFileAndLineNumberErrorParts", "parameters": "(\n    @NonNull Matcher matcher, @NonNull String line)", "modifiers": "@VisibleForTesting static", "return": "ErrorFields", "signature": "ErrorFields matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "full_signature": "@VisibleForTesting static ErrorFields matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "class_method_signature": "CmakeOutputParser.matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/project/build/output/CmakeOutputParser.java"}, "focal_method": {"identifier": "matchFileAndLineNumberErrorParts", "parameters": "(\n    @NonNull Matcher matcher, @NonNull String line)", "modifiers": "@VisibleForTesting static", "return": "ErrorFields", "body": "@VisibleForTesting\n  static ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line) {\n    ErrorFields fields = new ErrorFields();\n    fields.lineNumber = -1;\n    if (matcher.group(3) != null) {\n      fields.lineNumber = Integer.valueOf(matcher.group(3));\n    }\n\n    fields.columnNumber = -1;\n    if (matcher.group(4) != null) {\n      fields.columnNumber = Integer.valueOf(matcher.group(4));\n    }\n\n    fields.errorMessage = line;\n    if (matcher.group(5) != null) {\n      fields.errorMessage = matcher.group(5);\n    }\n\n    return fields;\n  }", "signature": "ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "full_signature": "@VisibleForTesting static ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "class_method_signature": "CmakeOutputParser.matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "testcase": false, "constructor": false, "invocations": ["group", "valueOf", "group", "group", "valueOf", "group", "group", "group"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}