{"test_class": {"identifier": "MenuServiceTest", "superclass": "extends FrameUcenterApplicationTests", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MenuService menuService;", "modifier": "@Autowired\n    private", "type": "MenuService", "declarator": "menuService", "var_name": "menuService"}, {"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "frame-ucenter/src/test/java/com/blessedbin/frame/ucenter/service/MenuServiceTest.java"}, "test_case": {"identifier": "getUserMenu", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUserMenu() {\n\n        SysUser admin = userService.findByUsername(\"admin\");\n        String uuid = admin.getUuid();\n\n        List<MenuTreeDto> menus = menuService.getUserMenu(uuid);\n        System.out.println(menus);\n\n    }", "signature": "void getUserMenu()", "full_signature": "@Test public void getUserMenu()", "class_method_signature": "MenuServiceTest.getUserMenu()", "testcase": true, "constructor": false, "invocations": ["findByUsername", "getUuid", "getUserMenu", "println"]}, "focal_class": {"identifier": "MenuService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ISysPermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "ISysPermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private ISysRoleService roleService;", "modifier": "@Autowired\n    private", "type": "ISysRoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "@Autowired\n    private ObjectMapper objectMapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "allMenus", "parameters": "()", "modifiers": "private", "return": "List<Menu>", "signature": "List<Menu> allMenus()", "full_signature": "private List<Menu> allMenus()", "class_method_signature": "MenuService.allMenus()", "testcase": false, "constructor": false}, {"identifier": "allMenuEnabled", "parameters": "()", "modifiers": "private", "return": "List<Menu>", "signature": "List<Menu> allMenuEnabled()", "full_signature": "private List<Menu> allMenuEnabled()", "class_method_signature": "MenuService.allMenuEnabled()", "testcase": false, "constructor": false}, {"identifier": "toMenus", "parameters": "(List<SysPermission> permissions)", "modifiers": "private", "return": "List<Menu>", "signature": "List<Menu> toMenus(List<SysPermission> permissions)", "full_signature": "private List<Menu> toMenus(List<SysPermission> permissions)", "class_method_signature": "MenuService.toMenus(List<SysPermission> permissions)", "testcase": false, "constructor": false}, {"identifier": "buildMenuTree", "parameters": "(List<Menu> menus,Integer pid)", "modifiers": "private", "return": "List<MenuTreeDto>", "signature": "List<MenuTreeDto> buildMenuTree(List<Menu> menus,Integer pid)", "full_signature": "private List<MenuTreeDto> buildMenuTree(List<Menu> menus,Integer pid)", "class_method_signature": "MenuService.buildMenuTree(List<Menu> menus,Integer pid)", "testcase": false, "constructor": false}, {"identifier": "getMenuTree", "parameters": "()", "modifiers": "public", "return": "List<MenuTreeDto>", "signature": "List<MenuTreeDto> getMenuTree()", "full_signature": "public List<MenuTreeDto> getMenuTree()", "class_method_signature": "MenuService.getMenuTree()", "testcase": false, "constructor": false}, {"identifier": "getMenuTreeEnabled", "parameters": "()", "modifiers": "public", "return": "List<MenuTreeDto>", "signature": "List<MenuTreeDto> getMenuTreeEnabled()", "full_signature": "public List<MenuTreeDto> getMenuTreeEnabled()", "class_method_signature": "MenuService.getMenuTreeEnabled()", "testcase": false, "constructor": false}, {"identifier": "getUserMenu", "parameters": "(String uuid)", "modifiers": "public", "return": "List<MenuTreeDto>", "signature": "List<MenuTreeDto> getUserMenu(String uuid)", "full_signature": "public List<MenuTreeDto> getUserMenu(String uuid)", "class_method_signature": "MenuService.getUserMenu(String uuid)", "testcase": false, "constructor": false}, {"identifier": "addMenu", "parameters": "(Menu menu)", "modifiers": "@Transactional(rollbackFor = Exception.class) public", "return": "void", "signature": "void addMenu(Menu menu)", "full_signature": "@Transactional(rollbackFor = Exception.class) public void addMenu(Menu menu)", "class_method_signature": "MenuService.addMenu(Menu menu)", "testcase": false, "constructor": false}, {"identifier": "updateMenu", "parameters": "(Menu menu)", "modifiers": "@Transactional(rollbackFor = Exception.class) public", "return": "void", "signature": "void updateMenu(Menu menu)", "full_signature": "@Transactional(rollbackFor = Exception.class) public void updateMenu(Menu menu)", "class_method_signature": "MenuService.updateMenu(Menu menu)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(Integer id)", "modifiers": "@Transactional(rollbackFor = Exception.class) public", "return": "boolean", "signature": "boolean deleteById(Integer id)", "full_signature": "@Transactional(rollbackFor = Exception.class) public boolean deleteById(Integer id)", "class_method_signature": "MenuService.deleteById(Integer id)", "testcase": false, "constructor": false}, {"identifier": "hasChildren", "parameters": "(Integer menuId)", "modifiers": "public", "return": "boolean", "signature": "boolean hasChildren(Integer menuId)", "full_signature": "public boolean hasChildren(Integer menuId)", "class_method_signature": "MenuService.hasChildren(Integer menuId)", "testcase": false, "constructor": false}, {"identifier": "getMenu", "parameters": "(Integer id)", "modifiers": "public", "return": "Menu", "signature": "Menu getMenu(Integer id)", "full_signature": "public Menu getMenu(Integer id)", "class_method_signature": "MenuService.getMenu(Integer id)", "testcase": false, "constructor": false}, {"identifier": "toMenu", "parameters": "(SysPermission permission)", "modifiers": "private", "return": "Menu", "signature": "Menu toMenu(SysPermission permission)", "full_signature": "private Menu toMenu(SysPermission permission)", "class_method_signature": "MenuService.toMenu(SysPermission permission)", "testcase": false, "constructor": false}], "file": "frame-ucenter/src/main/java/com/blessedbin/frame/ucenter/service/MenuService.java"}, "focal_method": {"identifier": "getUserMenu", "parameters": "(String uuid)", "modifiers": "public", "return": "List<MenuTreeDto>", "body": "public List<MenuTreeDto> getUserMenu(String uuid){\n        Assert.notNull(uuid,\"uuid is not null\");\n\n        // \u5224\u65ad\u662f\u5426\u662f\u8d85\u7ea7\u7ba1\u7406\u5458\n        List<SysRole> roles = roleService.selectByUuid(uuid);\n        boolean isAdmin = roles.stream().anyMatch(role -> \"ROLE_ADMIN\".equals(role.getRoleKey()));\n        if(isAdmin) {\n            return getMenuTreeEnabled();\n        }\n\n        List<SysPermission> permissions = permissionService.selectByUuidAndType(uuid, TYPE_MENU);\n        List<Menu> collect = permissions.stream().map(this::toMenu).collect(Collectors.toList());\n        return buildMenuTree(collect,-1);\n    }", "signature": "List<MenuTreeDto> getUserMenu(String uuid)", "full_signature": "public List<MenuTreeDto> getUserMenu(String uuid)", "class_method_signature": "MenuService.getUserMenu(String uuid)", "testcase": false, "constructor": false, "invocations": ["notNull", "selectByUuid", "anyMatch", "stream", "equals", "getRoleKey", "getMenuTreeEnabled", "selectByUuidAndType", "collect", "map", "stream", "toList", "buildMenuTree"]}, "repository": {"repo_id": 143824400, "url": "https://github.com/blessedbin/frame", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 2316, "license": "licensed"}}