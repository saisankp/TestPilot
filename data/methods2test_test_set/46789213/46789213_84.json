{"test_class": {"identifier": "BinaryLoggingDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DRes<SBool> firstArgument;", "modifier": "private", "type": "DRes<SBool>", "declarator": "firstArgument", "var_name": "firstArgument"}, {"original_string": "private int secondArgument;", "modifier": "private", "type": "int", "declarator": "secondArgument", "var_name": "secondArgument"}], "file": "core/src/test/java/dk/alexandra/fresco/logging/binary/BinaryLoggingDecoratorTest.java"}, "test_case": {"identifier": "open", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void open() {\n    Binary binary = mock(Binary.class);\n    when(binary.open(any(DRes.class), any(int.class)))\n        .then(\n            invocationOnMock -> {\n              firstArgument = invocationOnMock.getArgument(0);\n              secondArgument = invocationOnMock.getArgument(1);\n              return null;\n            });\n\n    BinaryLoggingDecorator decorator = new BinaryLoggingDecorator(binary);\n    DRes<SBool> toOpen = mock(DRes.class);\n    decorator.open(toOpen, 2);\n\n    Assert.assertEquals(toOpen, firstArgument);\n    Assert.assertEquals(2, secondArgument);\n  }", "signature": "void open()", "full_signature": "@Test public void open()", "class_method_signature": "BinaryLoggingDecoratorTest.open()", "testcase": true, "constructor": false, "invocations": ["mock", "then", "when", "open", "any", "any", "getArgument", "getArgument", "mock", "open", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "BinaryLoggingDecorator", "superclass": "", "interfaces": "implements PerformanceLogger, Binary", "fields": [{"original_string": "public static final String BINARY_BASIC_XOR = \"XOR_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "BINARY_BASIC_XOR = \"XOR_COUNT\"", "var_name": "BINARY_BASIC_XOR"}, {"original_string": "public static final String BINARY_BASIC_AND = \"AND_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "BINARY_BASIC_AND = \"AND_COUNT\"", "var_name": "BINARY_BASIC_AND"}, {"original_string": "public static final String BINARY_BASIC_RANDOM = \"RANDOM_BIT_COUNT\";", "modifier": "public static final", "type": "String", "declarator": "BINARY_BASIC_RANDOM = \"RANDOM_BIT_COUNT\"", "var_name": "BINARY_BASIC_RANDOM"}, {"original_string": "private long xorCount;", "modifier": "private", "type": "long", "declarator": "xorCount", "var_name": "xorCount"}, {"original_string": "private long andCount;", "modifier": "private", "type": "long", "declarator": "andCount", "var_name": "andCount"}, {"original_string": "private long randBitCount;", "modifier": "private", "type": "long", "declarator": "randBitCount", "var_name": "randBitCount"}, {"original_string": "private Binary delegate;", "modifier": "private", "type": "Binary", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "BinaryLoggingDecorator", "parameters": "(Binary delegate)", "modifiers": "public", "return": "", "signature": " BinaryLoggingDecorator(Binary delegate)", "full_signature": "public  BinaryLoggingDecorator(Binary delegate)", "class_method_signature": "BinaryLoggingDecorator.BinaryLoggingDecorator(Binary delegate)", "testcase": false, "constructor": true}, {"identifier": "known", "parameters": "(boolean known)", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> known(boolean known)", "full_signature": "@Override public DRes<SBool> known(boolean known)", "class_method_signature": "BinaryLoggingDecorator.known(boolean known)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(boolean in, int inputter)", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> input(boolean in, int inputter)", "full_signature": "@Override public DRes<SBool> input(boolean in, int inputter)", "class_method_signature": "BinaryLoggingDecorator.input(boolean in, int inputter)", "testcase": false, "constructor": false}, {"identifier": "randomBit", "parameters": "()", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> randomBit()", "full_signature": "@Override public DRes<SBool> randomBit()", "class_method_signature": "BinaryLoggingDecorator.randomBit()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(DRes<SBool> toOpen)", "modifiers": "@Override public", "return": "DRes<Boolean>", "signature": "DRes<Boolean> open(DRes<SBool> toOpen)", "full_signature": "@Override public DRes<Boolean> open(DRes<SBool> toOpen)", "class_method_signature": "BinaryLoggingDecorator.open(DRes<SBool> toOpen)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(DRes<SBool> toOpen, int towardsPartyId)", "modifiers": "@Override public", "return": "DRes<Boolean>", "signature": "DRes<Boolean> open(DRes<SBool> toOpen, int towardsPartyId)", "full_signature": "@Override public DRes<Boolean> open(DRes<SBool> toOpen, int towardsPartyId)", "class_method_signature": "BinaryLoggingDecorator.open(DRes<SBool> toOpen, int towardsPartyId)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(DRes<SBool> left, DRes<SBool> right)", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> and(DRes<SBool> left, DRes<SBool> right)", "full_signature": "@Override public DRes<SBool> and(DRes<SBool> left, DRes<SBool> right)", "class_method_signature": "BinaryLoggingDecorator.and(DRes<SBool> left, DRes<SBool> right)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(DRes<SBool> left, DRes<SBool> right)", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> xor(DRes<SBool> left, DRes<SBool> right)", "full_signature": "@Override public DRes<SBool> xor(DRes<SBool> left, DRes<SBool> right)", "class_method_signature": "BinaryLoggingDecorator.xor(DRes<SBool> left, DRes<SBool> right)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(DRes<SBool> in)", "modifiers": "@Override public", "return": "DRes<SBool>", "signature": "DRes<SBool> not(DRes<SBool> in)", "full_signature": "@Override public DRes<SBool> not(DRes<SBool> in)", "class_method_signature": "BinaryLoggingDecorator.not(DRes<SBool> in)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "BinaryLoggingDecorator.reset()", "testcase": false, "constructor": false}, {"identifier": "getLoggedValues", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> getLoggedValues()", "full_signature": "@Override public Map<String, Long> getLoggedValues()", "class_method_signature": "BinaryLoggingDecorator.getLoggedValues()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/logging/binary/BinaryLoggingDecorator.java"}, "focal_method": {"identifier": "open", "parameters": "(DRes<SBool> toOpen)", "modifiers": "@Override public", "return": "DRes<Boolean>", "body": "@Override\n  public DRes<Boolean> open(DRes<SBool> toOpen) {\n    return this.delegate.open(toOpen);\n  }", "signature": "DRes<Boolean> open(DRes<SBool> toOpen)", "full_signature": "@Override public DRes<Boolean> open(DRes<SBool> toOpen)", "class_method_signature": "BinaryLoggingDecorator.open(DRes<SBool> toOpen)", "testcase": false, "constructor": false, "invocations": ["open"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}