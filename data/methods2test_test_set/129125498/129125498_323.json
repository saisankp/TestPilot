{"test_class": {"identifier": "AnomalyRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private AnomalyRepositoryImpl serviceUnderTest;", "modifier": "@InjectMocks\n    private", "type": "AnomalyRepositoryImpl", "declarator": "serviceUnderTest", "var_name": "serviceUnderTest"}, {"original_string": "@Spy\n    @Qualifier(\"metricSourceServiceListFactoryBean\")\n    private List<MetricSource> metricSources = new ArrayList<>();", "modifier": "@Spy\n    @Qualifier(\"metricSourceServiceListFactoryBean\")\n    private", "type": "List<MetricSource>", "declarator": "metricSources = new ArrayList<>()", "var_name": "metricSources"}, {"original_string": "@Mock\n    private GraphiteMetricSource graphiteMetricSource;", "modifier": "@Mock\n    private", "type": "GraphiteMetricSource", "declarator": "graphiteMetricSource", "var_name": "graphiteMetricSource"}, {"original_string": "@Spy\n    private MetricSourceResult metricSourceResult;", "modifier": "@Spy\n    private", "type": "MetricSourceResult", "declarator": "metricSourceResult", "var_name": "metricSourceResult"}, {"original_string": "@Spy\n    private List<MetricSourceResult> metricSourceResults = new ArrayList<>();", "modifier": "@Spy\n    private", "type": "List<MetricSourceResult>", "declarator": "metricSourceResults = new ArrayList<>()", "var_name": "metricSourceResults"}, {"original_string": "@Mock\n    private DetectorFactory detectorFactory;", "modifier": "@Mock\n    private", "type": "DetectorFactory", "declarator": "detectorFactory", "var_name": "detectorFactory"}, {"original_string": "@Mock\n    private Detector detector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}, {"original_string": "private AnomalyRequest anomalyRequest;", "modifier": "private", "type": "AnomalyRequest", "declarator": "anomalyRequest", "var_name": "anomalyRequest"}, {"original_string": "@Mock\n    private OutlierDetectorResult outlierDetectorResult;", "modifier": "@Mock\n    private", "type": "OutlierDetectorResult", "declarator": "outlierDetectorResult", "var_name": "outlierDetectorResult"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/repo/impl/AnomalyRepositoryImplTest.java"}, "test_case": {"identifier": "testGetAnomalies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAnomalies() {\n        val actualResults = serviceUnderTest.getAnomalies(anomalyRequest);\n        assertNotNull(actualResults);\n        assertEquals(1, actualResults.size());\n//        assertEquals(AnomalyLevel.WEAK, actualResults.get(0).getAnomalyLevel());\n        verify(graphiteMetricSource, atMost(1)).getMetricData(anyString());\n    }", "signature": "void testGetAnomalies()", "full_signature": "@Test public void testGetAnomalies()", "class_method_signature": "AnomalyRepositoryImplTest.testGetAnomalies()", "testcase": true, "constructor": false, "invocations": ["getAnomalies", "assertNotNull", "assertEquals", "size", "getMetricData", "verify", "atMost", "anyString"]}, "focal_class": {"identifier": "AnomalyRepositoryImpl", "superclass": "", "interfaces": "implements AnomalyRepository", "fields": [{"original_string": "@Autowired\n    private List<? extends MetricSource> metricSources;", "modifier": "@Autowired\n    private", "type": "List<? extends MetricSource>", "declarator": "metricSources", "var_name": "metricSources"}, {"original_string": "@Autowired\n    private DetectorFactory detectorFactory;", "modifier": "@Autowired\n    private", "type": "DetectorFactory", "declarator": "detectorFactory", "var_name": "detectorFactory"}], "methods": [{"identifier": "getAnomalies", "parameters": "(AnomalyRequest request)", "modifiers": "@Override public", "return": "List<OutlierDetectorResult>", "signature": "List<OutlierDetectorResult> getAnomalies(AnomalyRequest request)", "full_signature": "@Override public List<OutlierDetectorResult> getAnomalies(AnomalyRequest request)", "class_method_signature": "AnomalyRepositoryImpl.getAnomalies(AnomalyRequest request)", "testcase": false, "constructor": false}, {"identifier": "buildDetector", "parameters": "(AnomalyRequest request)", "modifiers": "private", "return": "Detector", "signature": "Detector buildDetector(AnomalyRequest request)", "full_signature": "private Detector buildDetector(AnomalyRequest request)", "class_method_signature": "AnomalyRepositoryImpl.buildDetector(AnomalyRequest request)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/repo/impl/AnomalyRepositoryImpl.java"}, "focal_method": {"identifier": "getAnomalies", "parameters": "(AnomalyRequest request)", "modifiers": "@Override public", "return": "List<OutlierDetectorResult>", "body": "@Override\n    public List<OutlierDetectorResult> getAnomalies(AnomalyRequest request) {\n        val metricDef = MetricUtil.metricDefinition();\n        val detector = buildDetector(request);\n\n        val anomalyResults = new ArrayList<OutlierDetectorResult>();\n        metricSources.forEach(metricSource -> {\n            val results = metricSource.getMetricData(request.getMetricTags());\n            for (val result : results) {\n                val metricData = MetricUtil.metricData(metricDef, result.getDataPoint(), result.getEpochSecond());\n                val anomalyResult = (OutlierDetectorResult) detector.detect(metricData);\n                anomalyResults.add(anomalyResult);\n            }\n        });\n        return anomalyResults;\n    }", "signature": "List<OutlierDetectorResult> getAnomalies(AnomalyRequest request)", "full_signature": "@Override public List<OutlierDetectorResult> getAnomalies(AnomalyRequest request)", "class_method_signature": "AnomalyRepositoryImpl.getAnomalies(AnomalyRequest request)", "testcase": false, "constructor": false, "invocations": ["metricDefinition", "buildDetector", "forEach", "getMetricData", "getMetricTags", "metricData", "getDataPoint", "getEpochSecond", "detect", "add"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}