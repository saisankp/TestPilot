{"test_class": {"identifier": "MDLV2000ReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLV2000ReaderTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLV2000ReaderTest.class)", "var_name": "logger"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLV2000ReaderTest.java"}, "test_case": {"identifier": "dataHeader_3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dataHeader_3() {\n        assertThat(MDLV2000Reader.dataHeader(\"> 55 (MD-08974) <BOILING.POINT> DT12\"), is(\"BOILING.POINT\"));\n    }", "signature": "void dataHeader_3()", "full_signature": "@Test public void dataHeader_3()", "class_method_signature": "MDLV2000ReaderTest.dataHeader_3()", "testcase": true, "constructor": false, "invocations": ["assertThat", "dataHeader", "is"]}, "focal_class": {"identifier": "MDLV2000Reader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "BufferedReader                   input            = null;", "modifier": "", "type": "BufferedReader", "declarator": "input            = null", "var_name": "input"}, {"original_string": "private static ILoggingTool      logger           = LoggingToolFactory.createLoggingTool(MDLV2000Reader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger           = LoggingToolFactory.createLoggingTool(MDLV2000Reader.class)", "var_name": "logger"}, {"original_string": "private BooleanIOSetting         forceReadAs3DCoords;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "forceReadAs3DCoords", "var_name": "forceReadAs3DCoords"}, {"original_string": "private BooleanIOSetting         interpretHydrogenIsotopes;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "interpretHydrogenIsotopes", "var_name": "interpretHydrogenIsotopes"}, {"original_string": "private BooleanIOSetting         addStereoElements;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "addStereoElements", "var_name": "addStereoElements"}, {"original_string": "private static final Pattern     TRAILING_SPACE   = Pattern.compile(\"\\\\s+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRAILING_SPACE   = Pattern.compile(\"\\\\s+$\")", "var_name": "TRAILING_SPACE"}, {"original_string": "private static final String      RECORD_DELIMITER = \"$$$$\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_DELIMITER = \"$$$$\"", "var_name": "RECORD_DELIMITER"}, {"original_string": "private static final Set<String> PSUEDO_LABELS    = ImmutableSet.<String> builder().add(\"*\").add(\"A\").add(\"Q\")\n                                                              .add(\"L\").add(\"LP\").add(\"R\") // XXX: not in spec\n                                                              .add(\"R#\").build();", "modifier": "private static final", "type": "Set<String>", "declarator": "PSUEDO_LABELS    = ImmutableSet.<String> builder().add(\"*\").add(\"A\").add(\"Q\")\n                                                              .add(\"L\").add(\"LP\").add(\"R\") // XXX: not in spec\n                                                              .add(\"R#\").build()", "var_name": "PSUEDO_LABELS"}, {"original_string": "private static final Set<String> PSEUDO_LABELS    = ImmutableSet.<String> builder().add(\"*\").add(\"A\").add(\"Q\")\n                                                              .add(\"L\").add(\"LP\").add(\"R\") // XXX: not in spec\n                                                              .add(\"R#\").build();", "modifier": "private static final", "type": "Set<String>", "declarator": "PSEUDO_LABELS    = ImmutableSet.<String> builder().add(\"*\").add(\"A\").add(\"Q\")\n                                                              .add(\"L\").add(\"LP\").add(\"R\") // XXX: not in spec\n                                                              .add(\"R#\").build()", "var_name": "PSEUDO_LABELS"}], "methods": [{"identifier": "MDLV2000Reader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLV2000Reader()", "full_signature": "public  MDLV2000Reader()", "class_method_signature": "MDLV2000Reader.MDLV2000Reader()", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Reader", "parameters": "(InputStream in)", "modifiers": "public", "return": "", "signature": " MDLV2000Reader(InputStream in)", "full_signature": "public  MDLV2000Reader(InputStream in)", "class_method_signature": "MDLV2000Reader.MDLV2000Reader(InputStream in)", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Reader", "parameters": "(InputStream in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLV2000Reader(InputStream in, Mode mode)", "full_signature": "public  MDLV2000Reader(InputStream in, Mode mode)", "class_method_signature": "MDLV2000Reader.MDLV2000Reader(InputStream in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Reader", "parameters": "(Reader in)", "modifiers": "public", "return": "", "signature": " MDLV2000Reader(Reader in)", "full_signature": "public  MDLV2000Reader(Reader in)", "class_method_signature": "MDLV2000Reader.MDLV2000Reader(Reader in)", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Reader", "parameters": "(Reader in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLV2000Reader(Reader in, Mode mode)", "full_signature": "public  MDLV2000Reader(Reader in, Mode mode)", "class_method_signature": "MDLV2000Reader.MDLV2000Reader(Reader in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLV2000Reader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "MDLV2000Reader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MDLV2000Reader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLV2000Reader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T read(T object)", "class_method_signature": "MDLV2000Reader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readChemModel", "parameters": "(IChemModel chemModel)", "modifiers": "private", "return": "IChemModel", "signature": "IChemModel readChemModel(IChemModel chemModel)", "full_signature": "private IChemModel readChemModel(IChemModel chemModel)", "class_method_signature": "MDLV2000Reader.readChemModel(IChemModel chemModel)", "testcase": false, "constructor": false}, {"identifier": "readChemFile", "parameters": "(IChemFile chemFile)", "modifiers": "private", "return": "IChemFile", "signature": "IChemFile readChemFile(IChemFile chemFile)", "full_signature": "private IChemFile readChemFile(IChemFile chemFile)", "class_method_signature": "MDLV2000Reader.readChemFile(IChemFile chemFile)", "testcase": false, "constructor": false}, {"identifier": "newModel", "parameters": "(final IAtomContainer container)", "modifiers": "private static", "return": "IChemModel", "signature": "IChemModel newModel(final IAtomContainer container)", "full_signature": "private static IChemModel newModel(final IAtomContainer container)", "class_method_signature": "MDLV2000Reader.newModel(final IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "readAtomContainer", "parameters": "(IAtomContainer molecule)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer readAtomContainer(IAtomContainer molecule)", "full_signature": "private IAtomContainer readAtomContainer(IAtomContainer molecule)", "class_method_signature": "MDLV2000Reader.readAtomContainer(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "is3Dfile", "parameters": "(String program)", "modifiers": "private", "return": "boolean", "signature": "boolean is3Dfile(String program)", "full_signature": "private boolean is3Dfile(String program)", "class_method_signature": "MDLV2000Reader.is3Dfile(String program)", "testcase": false, "constructor": false}, {"identifier": "applyMDLValenceModel", "parameters": "(IAtom atom, int explicitValence, int unpaired)", "modifiers": "private", "return": "void", "signature": "void applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "full_signature": "private void applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "class_method_signature": "MDLV2000Reader.applyMDLValenceModel(IAtom atom, int explicitValence, int unpaired)", "testcase": false, "constructor": false}, {"identifier": "fixHydrogenIsotopes", "parameters": "(IAtomContainer molecule, IsotopeFactory isotopeFactory)", "modifiers": "private", "return": "void", "signature": "void fixHydrogenIsotopes(IAtomContainer molecule, IsotopeFactory isotopeFactory)", "full_signature": "private void fixHydrogenIsotopes(IAtomContainer molecule, IsotopeFactory isotopeFactory)", "class_method_signature": "MDLV2000Reader.fixHydrogenIsotopes(IAtomContainer molecule, IsotopeFactory isotopeFactory)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLV2000Reader.close()", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "MDLV2000Reader.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "MDLV2000Reader.customizeJob()", "testcase": false, "constructor": false}, {"identifier": "removeNonDigits", "parameters": "(String input)", "modifiers": "private", "return": "String", "signature": "String removeNonDigits(String input)", "full_signature": "private String removeNonDigits(String input)", "class_method_signature": "MDLV2000Reader.removeNonDigits(String input)", "testcase": false, "constructor": false}, {"identifier": "readAtomFast", "parameters": "(String line, IChemObjectBuilder builder, int lineNum)", "modifiers": "", "return": "IAtom", "signature": "IAtom readAtomFast(String line, IChemObjectBuilder builder, int lineNum)", "full_signature": " IAtom readAtomFast(String line, IChemObjectBuilder builder, int lineNum)", "class_method_signature": "MDLV2000Reader.readAtomFast(String line, IChemObjectBuilder builder, int lineNum)", "testcase": false, "constructor": false}, {"identifier": "readAtomFast", "parameters": "(String line, IChemObjectBuilder builder, Map<IAtom,Integer> parities, int lineNum, boolean isQuery)", "modifiers": "", "return": "IAtom", "signature": "IAtom readAtomFast(String line, IChemObjectBuilder builder, Map<IAtom,Integer> parities, int lineNum, boolean isQuery)", "full_signature": " IAtom readAtomFast(String line, IChemObjectBuilder builder, Map<IAtom,Integer> parities, int lineNum, boolean isQuery)", "class_method_signature": "MDLV2000Reader.readAtomFast(String line, IChemObjectBuilder builder, Map<IAtom,Integer> parities, int lineNum, boolean isQuery)", "testcase": false, "constructor": false}, {"identifier": "readBondFast", "parameters": "(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum)", "modifiers": "", "return": "IBond", "signature": "IBond readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum)", "full_signature": " IBond readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum)", "class_method_signature": "MDLV2000Reader.readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum)", "testcase": false, "constructor": false}, {"identifier": "readBondFast", "parameters": "(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum,\n                       boolean isQuery)", "modifiers": "", "return": "IBond", "signature": "IBond readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum,\n                       boolean isQuery)", "full_signature": " IBond readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum,\n                       boolean isQuery)", "class_method_signature": "MDLV2000Reader.readBondFast(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence, int lineNum,\n                       boolean isQuery)", "testcase": false, "constructor": false}, {"identifier": "readPropertiesFast", "parameters": "(final BufferedReader input, final IAtomContainer container, final int nAtoms)", "modifiers": "", "return": "void", "signature": "void readPropertiesFast(final BufferedReader input, final IAtomContainer container, final int nAtoms)", "full_signature": " void readPropertiesFast(final BufferedReader input, final IAtomContainer container, final int nAtoms)", "class_method_signature": "MDLV2000Reader.readPropertiesFast(final BufferedReader input, final IAtomContainer container, final int nAtoms)", "testcase": false, "constructor": false}, {"identifier": "ensureSgroup", "parameters": "(Map<Integer, Sgroup> map, int idx)", "modifiers": "private", "return": "Sgroup", "signature": "Sgroup ensureSgroup(Map<Integer, Sgroup> map, int idx)", "full_signature": "private Sgroup ensureSgroup(Map<Integer, Sgroup> map, int idx)", "class_method_signature": "MDLV2000Reader.ensureSgroup(Map<Integer, Sgroup> map, int idx)", "testcase": false, "constructor": false}, {"identifier": "toStereo", "parameters": "(final int stereo, final int type)", "modifiers": "private", "return": "IBond.Stereo", "signature": "IBond.Stereo toStereo(final int stereo, final int type)", "full_signature": "private IBond.Stereo toStereo(final int stereo, final int type)", "class_method_signature": "MDLV2000Reader.toStereo(final int stereo, final int type)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(final String str)", "modifiers": "static", "return": "int", "signature": "int length(final String str)", "full_signature": "static int length(final String str)", "class_method_signature": "MDLV2000Reader.length(final String str)", "testcase": false, "constructor": false}, {"identifier": "createAtom", "parameters": "(String symbol, IChemObjectBuilder builder, int lineNum)", "modifiers": "private", "return": "IAtom", "signature": "IAtom createAtom(String symbol, IChemObjectBuilder builder, int lineNum)", "full_signature": "private IAtom createAtom(String symbol, IChemObjectBuilder builder, int lineNum)", "class_method_signature": "MDLV2000Reader.createAtom(String symbol, IChemObjectBuilder builder, int lineNum)", "testcase": false, "constructor": false}, {"identifier": "isPseudoElement", "parameters": "(final String symbol)", "modifiers": "static", "return": "boolean", "signature": "boolean isPseudoElement(final String symbol)", "full_signature": "static boolean isPseudoElement(final String symbol)", "class_method_signature": "MDLV2000Reader.isPseudoElement(final String symbol)", "testcase": false, "constructor": false}, {"identifier": "readMDLCoordinate", "parameters": "(final String line, int offset)", "modifiers": "", "return": "double", "signature": "double readMDLCoordinate(final String line, int offset)", "full_signature": " double readMDLCoordinate(final String line, int offset)", "class_method_signature": "MDLV2000Reader.readMDLCoordinate(final String line, int offset)", "testcase": false, "constructor": false}, {"identifier": "toCharge", "parameters": "(final char c)", "modifiers": "private static", "return": "int", "signature": "int toCharge(final char c)", "full_signature": "private static int toCharge(final char c)", "class_method_signature": "MDLV2000Reader.toCharge(final char c)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final char c)", "modifiers": "private static", "return": "int", "signature": "int sign(final char c)", "full_signature": "private static int sign(final char c)", "class_method_signature": "MDLV2000Reader.sign(final char c)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(final char c)", "modifiers": "private static", "return": "int", "signature": "int toInt(final char c)", "full_signature": "private static int toInt(final char c)", "class_method_signature": "MDLV2000Reader.toInt(final char c)", "testcase": false, "constructor": false}, {"identifier": "readUInt", "parameters": "(final String line, int index, int digits)", "modifiers": "private static", "return": "int", "signature": "int readUInt(final String line, int index, int digits)", "full_signature": "private static int readUInt(final String line, int index, int digits)", "class_method_signature": "MDLV2000Reader.readUInt(final String line, int index, int digits)", "testcase": false, "constructor": false}, {"identifier": "readMolfileInt", "parameters": "(final String line, final int index)", "modifiers": "private static", "return": "int", "signature": "int readMolfileInt(final String line, final int index)", "full_signature": "private static int readMolfileInt(final String line, final int index)", "class_method_signature": "MDLV2000Reader.readMolfileInt(final String line, final int index)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(final IAtomContainer container, final int index, final String label)", "modifiers": "static", "return": "void", "signature": "void label(final IAtomContainer container, final int index, final String label)", "full_signature": "static void label(final IAtomContainer container, final int index, final String label)", "class_method_signature": "MDLV2000Reader.label(final IAtomContainer container, final int index, final String label)", "testcase": false, "constructor": false}, {"identifier": "readAtomSlow", "parameters": "(String line, IChemObjectBuilder builder, int linecount)", "modifiers": "private", "return": "IAtom", "signature": "IAtom readAtomSlow(String line, IChemObjectBuilder builder, int linecount)", "full_signature": "private IAtom readAtomSlow(String line, IChemObjectBuilder builder, int linecount)", "class_method_signature": "MDLV2000Reader.readAtomSlow(String line, IChemObjectBuilder builder, int linecount)", "testcase": false, "constructor": false}, {"identifier": "readBondSlow", "parameters": "(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence,\n            int linecount)", "modifiers": "private", "return": "IBond", "signature": "IBond readBondSlow(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence,\n            int linecount)", "full_signature": "private IBond readBondSlow(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence,\n            int linecount)", "class_method_signature": "MDLV2000Reader.readBondSlow(String line, IChemObjectBuilder builder, IAtom[] atoms, int[] explicitValence,\n            int linecount)", "testcase": false, "constructor": false}, {"identifier": "readPropertiesSlow", "parameters": "(BufferedReader input, IAtomContainer container, int nAtoms, int linecount)", "modifiers": "private", "return": "void", "signature": "void readPropertiesSlow(BufferedReader input, IAtomContainer container, int nAtoms, int linecount)", "full_signature": "private void readPropertiesSlow(BufferedReader input, IAtomContainer container, int nAtoms, int linecount)", "class_method_signature": "MDLV2000Reader.readPropertiesSlow(BufferedReader input, IAtomContainer container, int nAtoms, int linecount)", "testcase": false, "constructor": false}, {"identifier": "readNonStructuralData", "parameters": "(final BufferedReader input, final IAtomContainer container)", "modifiers": "static", "return": "void", "signature": "void readNonStructuralData(final BufferedReader input, final IAtomContainer container)", "full_signature": "static void readNonStructuralData(final BufferedReader input, final IAtomContainer container)", "class_method_signature": "MDLV2000Reader.readNonStructuralData(final BufferedReader input, final IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "dataHeader", "parameters": "(final String line)", "modifiers": "static", "return": "String", "signature": "String dataHeader(final String line)", "full_signature": "static String dataHeader(final String line)", "class_method_signature": "MDLV2000Reader.dataHeader(final String line)", "testcase": false, "constructor": false}, {"identifier": "endOfRecord", "parameters": "(final String line)", "modifiers": "private static", "return": "boolean", "signature": "boolean endOfRecord(final String line)", "full_signature": "private static boolean endOfRecord(final String line)", "class_method_signature": "MDLV2000Reader.endOfRecord(final String line)", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java"}, "focal_method": {"identifier": "dataHeader", "parameters": "(final String line)", "modifiers": "static", "return": "String", "body": "static String dataHeader(final String line) {\n        if (line.length() > 2 && line.charAt(0) != '>' && line.charAt(1) != ' ') return null;\n        int i = line.indexOf('<', 2);\n        if (i < 0) return null;\n        int j = line.indexOf('>', i);\n        if (j < 0) return null;\n        return line.substring(i + 1, j);\n    }", "signature": "String dataHeader(final String line)", "full_signature": "static String dataHeader(final String line)", "class_method_signature": "MDLV2000Reader.dataHeader(final String line)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "charAt", "indexOf", "indexOf", "substring"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}