{"test_class": {"identifier": "HerdStringUtilsTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private static final String CSV_INJECTION_ERROR_MSG = \"One or more schema column fields start with a prohibited character.\";", "modifier": "private static final", "type": "String", "declarator": "CSV_INJECTION_ERROR_MSG = \"One or more schema column fields start with a prohibited character.\"", "var_name": "CSV_INJECTION_ERROR_MSG"}], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/HerdStringUtilsTest.java"}, "test_case": {"identifier": "testLoggingPasswordMasked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoggingPasswordMasked()\n    {\n        String message = \"\\\"hive.server2.keystore.name\\\":\\\"testname1\\\",\" + \"\\\"hive.server2.keystore.PASSWORD\\\":\\\"test-123\\\",\" +\n            \"\\\"hive.server3.keystore.password\\\":\\\"TEST$2!1\\\",\" + \"\\\"hive.server2.keystore.name\\\":\\\"testname1\\\"\";\n        String expectedMessage =\n            \"\\\"hive.server2.keystore.name\\\":\\\"testname1\\\",\" + \"\\\"hive.server2.keystore.PASSWORD\\\":\\\"\" + HerdStringUtils.HIDDEN_TEXT + \"\\\",\" +\n                \"\\\"hive.server3.keystore.password\\\":\\\"\" + HerdStringUtils.HIDDEN_TEXT + \"\\\",\" + \"\\\"hive.server2.keystore.name\\\":\\\"testname1\\\"\";\n        String sanitizedMessage = HerdStringUtils.sanitizeLogText(message);\n        assertEquals(expectedMessage, sanitizedMessage);\n\n        String messsage2 = \"{\\\"name\\\": \\\"jdbc.user\\\", \\\"value\\\": \\\"user\\\"},\" +\n            \"{\\\"name\\\": \\\"hive.server2.keystore.password\\\", \\\"value\\\": \\\"!This-is-password\\\"}, {\\\"name\\\": \\\"password\\\", \\\"value\\\": \\\"pass\\\"}\\\", {\\\"name\\\": \\\"jdbc.url\\\", \\\"value\\\": \\\"AURL\\\"}\";\n        String expectedMessage2 =\n            \"{\\\"name\\\": \\\"jdbc.user\\\", \\\"value\\\": \\\"user\\\"},\" + \"{\\\"name\\\": \\\"hive.server2.keystore.password\\\", \\\"value\\\": \\\"\" + HerdStringUtils.HIDDEN_TEXT +\n                \"\\\"}, {\\\"name\\\": \\\"password\\\", \\\"value\\\": \\\"\" + HerdStringUtils.HIDDEN_TEXT + \"\\\"}\\\", {\\\"name\\\": \\\"jdbc.url\\\", \\\"value\\\": \\\"AURL\\\"}\";\n        String sanitizedMessage2 = HerdStringUtils.sanitizeLogText(messsage2);\n        assertEquals(expectedMessage2, sanitizedMessage2);\n\n        String message3 = \"<username>tester</username><password>@!pass_dd</password><url>a url</url>\";\n        String expectedMessage3 = \"<username>tester</username><password>\" + HerdStringUtils.HIDDEN_TEXT + \"</password><url>a url</url>\";\n        String sanitizedMessage3 = HerdStringUtils.sanitizeLogText(message3);\n        assertEquals(expectedMessage3, sanitizedMessage3);\n\n        String message4 = \"<hive.password>hive!pass</hive.password><username>tester</username><jdbc.password>@!pass_dd</jdbc.password><url>a url</url>\";\n        String expectedMessage4 =\n            \"<hive.password>\" + HerdStringUtils.HIDDEN_TEXT + \"</hive.password><username>tester</username>\" + \"<jdbc.password>\" + HerdStringUtils.HIDDEN_TEXT +\n                \"</jdbc.password><url>a url</url>\";\n        String sanitizedMessage4 = HerdStringUtils.sanitizeLogText(message4);\n        assertEquals(expectedMessage4, sanitizedMessage4);\n\n        String message5 = \"\\\\\\\"jdbc.password\\\\\\\":\\\\\\\"pass!word\\\\\\\",\\\\\\\"username\\\\\\\":\\\\\\\"user1\\\\\\\",\\\\\\\"password\\\\\\\":\\\\\\\"pass!word\\\\\\\",\\\\\\\"databaseType\\\\\\\":\\\\\\\"POSTGRES\\\\\\\"\";\n        String expectedMessage5 = \"\\\\\\\"jdbc.password\\\\\\\":\\\\\\\"\" + HerdStringUtils.HIDDEN_TEXT + \"\\\\\\\",\\\\\\\"username\\\\\\\":\\\\\\\"user1\\\\\\\",\\\\\\\"password\\\\\\\":\\\\\\\"\" +  HerdStringUtils.HIDDEN_TEXT + \"\\\\\\\",\\\\\\\"databaseType\\\\\\\":\\\\\\\"POSTGRES\\\\\\\"\";\n        String sanitizedMessage5 = HerdStringUtils.sanitizeLogText(message5);\n        assertEquals(expectedMessage5, sanitizedMessage5);\n\n        String message6 = \"&quot;username&quot;:&quot;user1&quot;,&quot;password&quot;:&quot;pass!word&quot;,&quot;databaseType&quot;:&quot;POSTGRES&quot;\";\n        String expectedMessage6 = \"\\\"username\\\":\\\"user1\\\",\\\"password\\\":\\\"hidden\\\",\\\"databaseType\\\":\\\"POSTGRES\\\"\";\n        String sanitizedMessage6 = HerdStringUtils.sanitizeLogText(message6);\n        assertEquals(expectedMessage6, sanitizedMessage6);\n\n        String message7 = null;\n        String expectedMessage7 = \"\";\n        String sanitizedMessage7 = HerdStringUtils.sanitizeLogText(message7);\n        assertEquals(expectedMessage7, sanitizedMessage7);\n\n        String otherText =\n            \"To become registered, securities professionals are required to pass qualification exams to demonstrate competence in their particular securities \" +\n                \"activities. The information below can help guide you through the membership and registration process.\";\n        StringBuilder messageSB =\n            new StringBuilder(message).append(\" \").append(messsage2).append(\" \").append(message3).append(\" \").append(message4).append(otherText);\n        String message8 = messageSB.toString();\n        StringBuilder expectedMessageSB =\n            new StringBuilder(expectedMessage).append(\" \").append(expectedMessage2).append(\" \").append(expectedMessage3).append(\" \").append(expectedMessage4)\n                .append(otherText);\n        String expectedMessage8 = expectedMessageSB.toString();\n        String sanitizedMessage8 = HerdStringUtils.sanitizeLogText(message8);\n        assertEquals(expectedMessage8, sanitizedMessage8);\n    }", "signature": "void testLoggingPasswordMasked()", "full_signature": "@Test public void testLoggingPasswordMasked()", "class_method_signature": "HerdStringUtilsTest.testLoggingPasswordMasked()", "testcase": true, "constructor": false, "invocations": ["sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "sanitizeLogText", "assertEquals", "append", "append", "append", "append", "append", "append", "append", "toString", "append", "append", "append", "append", "append", "append", "append", "toString", "sanitizeLogText", "assertEquals"]}, "focal_class": {"identifier": "HerdStringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CSV_INJECTION_REGEX = \"^[+=@-].*\";", "modifier": "private static final", "type": "String", "declarator": "CSV_INJECTION_REGEX = \"^[+=@-].*\"", "var_name": "CSV_INJECTION_REGEX"}, {"original_string": "public static final String HIDDEN_TEXT = \"hidden\";", "modifier": "public static final", "type": "String", "declarator": "HIDDEN_TEXT = \"hidden\"", "var_name": "HIDDEN_TEXT"}, {"original_string": "private static Pattern REGEX_JSON_PASSWORD =\n        Pattern.compile(\"(\\\\\\\\?\\\"?password\\\\\\\\?\\\":\\\\\\\\?\\\")[\\\\w\\\\p{Punct}&&[^&]]*?(\\\\\\\\?\\\")\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_JSON_PASSWORD =\n        Pattern.compile(\"(\\\\\\\\?\\\"?password\\\\\\\\?\\\":\\\\\\\\?\\\")[\\\\w\\\\p{Punct}&&[^&]]*?(\\\\\\\\?\\\")\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_JSON_PASSWORD"}, {"original_string": "private static Pattern REGEX_JSON_PASSWORD2 =\n        Pattern.compile(\"(\\\"name\\\": \\\".*?password\\\", \\\"value\\\": \\\")[\\\\w\\\\p{Punct}&&[^&]]*?\\\"\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_JSON_PASSWORD2 =\n        Pattern.compile(\"(\\\"name\\\": \\\".*?password\\\", \\\"value\\\": \\\")[\\\\w\\\\p{Punct}&&[^&]]*?\\\"\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_JSON_PASSWORD2"}, {"original_string": "private static Pattern REGEX_XML_PASSWORD = Pattern.compile(\"(<.*?password>)[\\\\w\\\\p{Punct}&&[^&]]*?<\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_XML_PASSWORD = Pattern.compile(\"(<.*?password>)[\\\\w\\\\p{Punct}&&[^&]]*?<\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_XML_PASSWORD"}], "methods": [{"identifier": "decodeBase64", "parameters": "(String base64EncodedText)", "modifiers": "public static", "return": "String", "signature": "String decodeBase64(String base64EncodedText)", "full_signature": "public static String decodeBase64(String base64EncodedText)", "class_method_signature": "HerdStringUtils.decodeBase64(String base64EncodedText)", "testcase": false, "constructor": false}, {"identifier": "getShortDescription", "parameters": "(String description, Integer shortDescMaxLength)", "modifiers": "public static", "return": "String", "signature": "String getShortDescription(String description, Integer shortDescMaxLength)", "full_signature": "public static String getShortDescription(String description, Integer shortDescMaxLength)", "class_method_signature": "HerdStringUtils.getShortDescription(String description, Integer shortDescMaxLength)", "testcase": false, "constructor": false}, {"identifier": "stripHtml", "parameters": "(String fragment, String... whitelistTags)", "modifiers": "public static", "return": "String", "signature": "String stripHtml(String fragment, String... whitelistTags)", "full_signature": "public static String stripHtml(String fragment, String... whitelistTags)", "class_method_signature": "HerdStringUtils.stripHtml(String fragment, String... whitelistTags)", "testcase": false, "constructor": false}, {"identifier": "checkCsvInjection", "parameters": "(String text, String errorMessage)", "modifiers": "public static", "return": "void", "signature": "void checkCsvInjection(String text, String errorMessage)", "full_signature": "public static void checkCsvInjection(String text, String errorMessage)", "class_method_signature": "HerdStringUtils.checkCsvInjection(String text, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "convertStringToInteger", "parameters": "(final String stringValue, final Integer defaultValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer convertStringToInteger(final String stringValue, final Integer defaultValue)", "full_signature": "public static Integer convertStringToInteger(final String stringValue, final Integer defaultValue)", "class_method_signature": "HerdStringUtils.convertStringToInteger(final String stringValue, final Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "sanitizeLogText", "parameters": "(String loggingText)", "modifiers": "public static", "return": "String", "signature": "String sanitizeLogText(String loggingText)", "full_signature": "public static String sanitizeLogText(String loggingText)", "class_method_signature": "HerdStringUtils.sanitizeLogText(String loggingText)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/HerdStringUtils.java"}, "focal_method": {"identifier": "sanitizeLogText", "parameters": "(String loggingText)", "modifiers": "public static", "return": "String", "body": "public static String sanitizeLogText(String loggingText)\n    {\n        String sanitizedText = (loggingText != null) ? loggingText : \"\";\n        sanitizedText = sanitizedText.replaceAll(\"&quot;\", \"\\\"\");\n        sanitizedText = REGEX_JSON_PASSWORD.matcher(sanitizedText).replaceAll(\"$1\" + HIDDEN_TEXT + \"$2\");\n        sanitizedText = REGEX_JSON_PASSWORD2.matcher(sanitizedText).replaceAll(\"$1\" + HIDDEN_TEXT + \"\\\"\");\n        sanitizedText = REGEX_XML_PASSWORD.matcher(sanitizedText).replaceAll(\"$1\" + HIDDEN_TEXT + \"<\");\n\n        return sanitizedText;\n    }", "signature": "String sanitizeLogText(String loggingText)", "full_signature": "public static String sanitizeLogText(String loggingText)", "class_method_signature": "HerdStringUtils.sanitizeLogText(String loggingText)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "replaceAll", "matcher", "replaceAll", "matcher", "replaceAll", "matcher"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}