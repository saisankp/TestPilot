{"test_class": {"identifier": "DefaultOAuthJwtAccessTokenValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Consumer<ThrowingRunnable> assertDoesNotThrow = (func) -> {\n        try {\n            func.run();\n        } catch (Throwable t) {\n            fail(\"assertDoesNotThrow: unexpected throw\", t);\n        }\n    };", "modifier": "private static final", "type": "Consumer<ThrowingRunnable>", "declarator": "assertDoesNotThrow = (func) -> {\n        try {\n            func.run();\n        } catch (Throwable t) {\n            fail(\"assertDoesNotThrow: unexpected throw\", t);\n        }\n    }", "var_name": "assertDoesNotThrow"}, {"original_string": "private static final BiConsumer<ThrowingRunnable, String> assertThrowable = (func, expectedErrMsg) -> {\n        try {\n            func.run();\n        } catch (OAuthJwtAccessTokenException e) {\n            assertEquals(e.getMessage(), expectedErrMsg);\n            return;\n        } catch (Throwable t) {\n            fail(\"assertThrowable: unexpected throw\", t);\n        }\n        fail(\"assertThrowable: does not throw\");\n    };", "modifier": "private static final", "type": "BiConsumer<ThrowingRunnable, String>", "declarator": "assertThrowable = (func, expectedErrMsg) -> {\n        try {\n            func.run();\n        } catch (OAuthJwtAccessTokenException e) {\n            assertEquals(e.getMessage(), expectedErrMsg);\n            return;\n        } catch (Throwable t) {\n            fail(\"assertThrowable: unexpected throw\", t);\n        }\n        fail(\"assertThrowable: does not throw\");\n    }", "var_name": "assertThrowable"}, {"original_string": "private final String trustedIssuer = \"trustedIssuer\";", "modifier": "private final", "type": "String", "declarator": "trustedIssuer = \"trustedIssuer\"", "var_name": "trustedIssuer"}, {"original_string": "private final Set<String> requiredAudiences = new HashSet<>(Arrays.asList(\"aud_1\", \"aud_2\"));", "modifier": "private final", "type": "Set<String>", "declarator": "requiredAudiences = new HashSet<>(Arrays.asList(\"aud_1\", \"aud_2\"))", "var_name": "requiredAudiences"}, {"original_string": "private final Set<String> requiredScopes = new HashSet<>(Arrays.asList(\"scope_1\", \"scope_2\"));", "modifier": "private final", "type": "Set<String>", "declarator": "requiredScopes = new HashSet<>(Arrays.asList(\"scope_1\", \"scope_2\"))", "var_name": "requiredScopes"}, {"original_string": "private final Map<String, Set<String>> authorizedClientIds = Collections.synchronizedMap(new HashMap<>());", "modifier": "private final", "type": "Map<String, Set<String>>", "declarator": "authorizedClientIds = Collections.synchronizedMap(new HashMap<>())", "var_name": "authorizedClientIds"}, {"original_string": "private final DefaultOAuthJwtAccessTokenValidator baseValidator = new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, this.requiredScopes, this.authorizedClientIds);", "modifier": "private final", "type": "DefaultOAuthJwtAccessTokenValidator", "declarator": "baseValidator = new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, this.requiredScopes, this.authorizedClientIds)", "var_name": "baseValidator"}, {"original_string": "private final OAuthJwtAccessToken baseJwt = new OAuthJwtAccessToken() {\n        public String getScope() { return null; }\n        public String getSubject() { return null; }\n        public String getIssuer() { return null; }\n        public String getAudience() { return null; }\n        public List<String>  getAudiences() { return null; }\n        public String getClientId() { return null; }\n        public String getCertificateThumbprint() { return null; }\n        public long getIssuedAt() { return 0L; }\n        public long getExpiration() { return 0L; }\n        public String getSignature() { return null; }\n    };", "modifier": "private final", "type": "OAuthJwtAccessToken", "declarator": "baseJwt = new OAuthJwtAccessToken() {\n        public String getScope() { return null; }\n        public String getSubject() { return null; }\n        public String getIssuer() { return null; }\n        public String getAudience() { return null; }\n        public List<String>  getAudiences() { return null; }\n        public String getClientId() { return null; }\n        public String getCertificateThumbprint() { return null; }\n        public long getIssuedAt() { return 0L; }\n        public long getExpiration() { return 0L; }\n        public String getSignature() { return null; }\n    }", "var_name": "baseJwt"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/validator/DefaultOAuthJwtAccessTokenValidatorTest.java"}, "test_case": {"identifier": "testDefaultOAuthJwtAccessTokenValidator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultOAuthJwtAccessTokenValidator() {\n        // on null or empty\n        BiConsumer<Supplier<DefaultOAuthJwtAccessTokenValidator>, String> assertThrowable = (func, expectedErrMsg) -> {\n            DefaultOAuthJwtAccessTokenValidator validator = null;\n            try {\n                validator = func.get();\n            } catch (IllegalArgumentException e) {\n                assertEquals(e.getMessage(), expectedErrMsg);\n                return;\n            } finally {\n                assertNull(validator);\n            }\n            fail(\"assertThrowable: does not throw\");\n        };\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(null, this.requiredAudiences, this.requiredScopes, this.authorizedClientIds);\n        }, \"trusted issuers must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(\"\", this.requiredAudiences, this.requiredScopes, this.authorizedClientIds);\n        }, \"trusted issuers must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, null, this.requiredScopes, this.authorizedClientIds);\n        }, \"required audiences must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, new HashSet<>(), this.requiredScopes, this.authorizedClientIds);\n        }, \"required audiences must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, null, this.authorizedClientIds);\n        }, \"required scopes must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, new HashSet<>(), this.authorizedClientIds);\n        }, \"required scopes must be configured\");\n        assertThrowable.accept(() -> {\n            return new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, this.requiredScopes, null);\n        }, \"client ID mapping must be configured\");\n\n        // actual value\n        BiFunction<Field, DefaultOAuthJwtAccessTokenValidator, Object> getFieldValue = (f, object) -> {\n            try {\n                f.setAccessible(true);\n                return f.get(object);\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        };\n        DefaultOAuthJwtAccessTokenValidator validator = new DefaultOAuthJwtAccessTokenValidator(this.trustedIssuer, this.requiredAudiences, this.requiredScopes, this.authorizedClientIds);\n        assertNotNull(validator);\n        for (Field f : validator.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"trustedIssuer\":\n                    assertSame(getFieldValue.apply(f, validator), this.trustedIssuer);\n                    break;\n                case \"requiredAudiences\":\n                    assertSame(getFieldValue.apply(f, validator), this.requiredAudiences);\n                    break;\n                case \"requiredScopes\":\n                    assertSame(getFieldValue.apply(f, validator), this.requiredScopes);\n                    break;\n                case \"authorizedClientIds\":\n                    assertSame(getFieldValue.apply(f, validator), this.authorizedClientIds);\n                    break;\n            }\n        }\n    }", "signature": "void testDefaultOAuthJwtAccessTokenValidator()", "full_signature": "@Test public void testDefaultOAuthJwtAccessTokenValidator()", "class_method_signature": "DefaultOAuthJwtAccessTokenValidatorTest.testDefaultOAuthJwtAccessTokenValidator()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals", "getMessage", "assertNull", "fail", "accept", "accept", "accept", "accept", "accept", "accept", "accept", "setAccessible", "get", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertSame", "apply", "assertSame", "apply", "assertSame", "apply", "assertSame", "apply"]}, "focal_class": {"identifier": "DefaultOAuthJwtAccessTokenValidator", "superclass": "", "interfaces": "implements OAuthJwtAccessTokenValidator", "fields": [{"original_string": "private String trustedIssuer = null;", "modifier": "private", "type": "String", "declarator": "trustedIssuer = null", "var_name": "trustedIssuer"}, {"original_string": "private Set<String> requiredAudiences = null;", "modifier": "private", "type": "Set<String>", "declarator": "requiredAudiences = null", "var_name": "requiredAudiences"}, {"original_string": "private Set<String> requiredScopes = null;", "modifier": "private", "type": "Set<String>", "declarator": "requiredScopes = null", "var_name": "requiredScopes"}, {"original_string": "private Map<String, Set<String>> authorizedClientIds = null;", "modifier": "private", "type": "Map<String, Set<String>>", "declarator": "authorizedClientIds = null", "var_name": "authorizedClientIds"}], "methods": [{"identifier": "DefaultOAuthJwtAccessTokenValidator", "parameters": "(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "modifiers": "public", "return": "", "signature": " DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "full_signature": "public  DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "testcase": false, "constructor": true}, {"identifier": "verifyIssuer", "parameters": "(OAuthJwtAccessToken jwt)", "modifiers": "private", "return": "void", "signature": "void verifyIssuer(OAuthJwtAccessToken jwt)", "full_signature": "private void verifyIssuer(OAuthJwtAccessToken jwt)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.verifyIssuer(OAuthJwtAccessToken jwt)", "testcase": false, "constructor": false}, {"identifier": "verifyAudiences", "parameters": "(OAuthJwtAccessToken jwt)", "modifiers": "private", "return": "void", "signature": "void verifyAudiences(OAuthJwtAccessToken jwt)", "full_signature": "private void verifyAudiences(OAuthJwtAccessToken jwt)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.verifyAudiences(OAuthJwtAccessToken jwt)", "testcase": false, "constructor": false}, {"identifier": "verifyScopes", "parameters": "(OAuthJwtAccessToken jwt)", "modifiers": "private", "return": "void", "signature": "void verifyScopes(OAuthJwtAccessToken jwt)", "full_signature": "private void verifyScopes(OAuthJwtAccessToken jwt)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.verifyScopes(OAuthJwtAccessToken jwt)", "testcase": false, "constructor": false}, {"identifier": "verifyCertificateThumbprint", "parameters": "(OAuthJwtAccessToken jwt, String certificateThumbprint)", "modifiers": "private", "return": "void", "signature": "void verifyCertificateThumbprint(OAuthJwtAccessToken jwt, String certificateThumbprint)", "full_signature": "private void verifyCertificateThumbprint(OAuthJwtAccessToken jwt, String certificateThumbprint)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.verifyCertificateThumbprint(OAuthJwtAccessToken jwt, String certificateThumbprint)", "testcase": false, "constructor": false}, {"identifier": "verifyClientId", "parameters": "(OAuthJwtAccessToken jwt, String certificatePrincipal)", "modifiers": "private", "return": "void", "signature": "void verifyClientId(OAuthJwtAccessToken jwt, String certificatePrincipal)", "full_signature": "private void verifyClientId(OAuthJwtAccessToken jwt, String certificatePrincipal)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.verifyClientId(OAuthJwtAccessToken jwt, String certificatePrincipal)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(OAuthJwtAccessToken jwt)", "modifiers": "@Override public", "return": "void", "signature": "void validate(OAuthJwtAccessToken jwt)", "full_signature": "@Override public void validate(OAuthJwtAccessToken jwt)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.validate(OAuthJwtAccessToken jwt)", "testcase": false, "constructor": false}, {"identifier": "validateClientId", "parameters": "(OAuthJwtAccessToken jwt, String clientId)", "modifiers": "@Override public", "return": "void", "signature": "void validateClientId(OAuthJwtAccessToken jwt, String clientId)", "full_signature": "@Override public void validateClientId(OAuthJwtAccessToken jwt, String clientId)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.validateClientId(OAuthJwtAccessToken jwt, String clientId)", "testcase": false, "constructor": false}, {"identifier": "validateCertificateBinding", "parameters": "(OAuthJwtAccessToken jwt, String certificateThumbprint)", "modifiers": "@Override public", "return": "void", "signature": "void validateCertificateBinding(OAuthJwtAccessToken jwt, String certificateThumbprint)", "full_signature": "@Override public void validateCertificateBinding(OAuthJwtAccessToken jwt, String certificateThumbprint)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.validateCertificateBinding(OAuthJwtAccessToken jwt, String certificateThumbprint)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/validator/DefaultOAuthJwtAccessTokenValidator.java"}, "focal_method": {"identifier": "DefaultOAuthJwtAccessTokenValidator", "parameters": "(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "modifiers": "public", "return": "", "body": "public DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds) {\n\n        // args checking\n        if (trustedIssuer == null || trustedIssuer.isEmpty()) {\n            throw new IllegalArgumentException(\"trusted issuers must be configured\");\n        }\n        if (requiredAudiences == null || requiredAudiences.isEmpty()) {\n            throw new IllegalArgumentException(\"required audiences must be configured\");\n        }\n        if (requiredScopes == null || requiredScopes.isEmpty()) {\n            throw new IllegalArgumentException(\"required scopes must be configured\");\n        }\n        if (authorizedClientIds == null) {\n            throw new IllegalArgumentException(\"client ID mapping must be configured\");\n        }\n\n        this.trustedIssuer = trustedIssuer;\n        this.requiredAudiences = requiredAudiences;\n        this.requiredScopes = requiredScopes;\n        this.authorizedClientIds = authorizedClientIds;\n    }", "signature": " DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "full_signature": "public  DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "class_method_signature": "DefaultOAuthJwtAccessTokenValidator.DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}