{"test_class": {"identifier": "TestMultiBundleCSVFilter", "superclass": "", "interfaces": "", "fields": [], "file": "csv-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/csv/TestMultiBundleCSVFilter.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() {\n        TestResourceStringData[] expectedFoods = {\n                new TestResourceStringData(\"apple\", \"Apple\", 1),\n                new TestResourceStringData(\"orange\", \"Orange\", 2)\n        };\n\n        TestResourceStringData[] expectedGreetings = {\n                new TestResourceStringData(\"msg_hello\", \"Hello\", 1),\n                new TestResourceStringData(\"msg_bye\", \"Bye\", 2)\n        };\n\n        Map<String, TestResourceStringData[]> expectedDataMap = new HashMap<>();\n        expectedDataMap.put(\"foods\", expectedFoods);\n        expectedDataMap.put(\"greetings\", expectedGreetings);\n\n        MultiBundleResourceFilter filter = ResourceFilterFactory.getMultiBundleResourceFilter(MultiBundleCSVFilter.ID);\n        try (InputStream inStream = this.getClass().getResourceAsStream(\"/test-multi.csv\")) {\n            Map<String, LanguageBundle> bundles = filter.parse(inStream, new FilterOptions(Locale.ENGLISH));\n\n            assertEquals(\"Number of modules\", expectedDataMap.size(), bundles.size());\n\n            for (Entry<String, LanguageBundle> bundleEntry : bundles.entrySet()) {\n                String module = bundleEntry.getKey();\n                LanguageBundle bundle = bundleEntry.getValue();\n\n                TestResourceStringData[] expStrings = expectedDataMap.get(module);\n                assertNotNull(\"Module \" + module, expStrings);\n\n                List<ResourceString> resStrings = bundle.getSortedResourceStrings();\n                assertEquals(\"Number of resource strings for module \" + module, expStrings.length, resStrings.size());\n\n                int idx = 0;\n                for (ResourceString resString : resStrings) {\n                    String key = resString.getKey();\n                    String value = resString.getValue();\n                    int seqNum = resString.getSequenceNumber();\n\n                    TestResourceStringData expected = expStrings[idx++];\n\n                    assertEquals(\"Resource key in module (\" + module + \") at index \" + idx, expected.key, key);\n                    assertEquals(\"Resource value in module(\" + module + \") at index \" + idx, expected.value, value);\n                    assertEquals(\"Resource sequence number in module(\" + module + \") at index \" + idx, expected.seq, seqNum);\n                }\n            }\n        } catch (IOException e) {\n            fail(e.getMessage());\n        } catch (ResourceFilterException e) {\n            fail(e.getMessage());\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "TestMultiBundleCSVFilter.testParse()", "testcase": true, "constructor": false, "invocations": ["put", "put", "getMultiBundleResourceFilter", "getResourceAsStream", "getClass", "parse", "assertEquals", "size", "size", "entrySet", "getKey", "getValue", "get", "assertNotNull", "getSortedResourceStrings", "assertEquals", "size", "getKey", "getValue", "getSequenceNumber", "assertEquals", "assertEquals", "assertEquals", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "MultiBundleCSVFilter", "superclass": "extends MultiBundleResourceFilter", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"CSV-MULTI\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"CSV-MULTI\"", "var_name": "ID"}, {"original_string": "public static final Type TYPE = Type.MULTI;", "modifier": "public static final", "type": "Type", "declarator": "TYPE = Type.MULTI", "var_name": "TYPE"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "Map<String, LanguageBundle>", "signature": "Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "csv-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/csv/MultiBundleCSVFilter.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "Map<String, LanguageBundle>", "body": "@Override\n    public Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        Map<String, LanguageBundleBuilder> builders = new HashMap<String, LanguageBundleBuilder>();\n        CSVParser parser = CSVParser.parse(inStream, StandardCharsets.UTF_8,\n                CSVFormat.RFC4180.withHeader(\"module\", \"key\", \"value\").withSkipHeaderRecord(true));\n\n        for (CSVRecord record : parser) {\n            String bundle = record.get(0);\n            String key = record.get(1);\n            String value = record.get(2);\n\n            LanguageBundleBuilder bundleBuilder = builders.get(bundle);\n            if (bundleBuilder == null) {\n                bundleBuilder = new LanguageBundleBuilder(true);\n                builders.put(bundle, bundleBuilder);\n            }\n            bundleBuilder.addResourceString(key, value);\n        }\n\n        Map<String, LanguageBundle> result = new TreeMap<String, LanguageBundle>();\n        for (Entry<String, LanguageBundleBuilder> bundleEntry : builders.entrySet()) {\n            String bundleName = bundleEntry.getKey();\n            LanguageBundle bundleData = bundleEntry.getValue().build();\n            result.put(bundleName, bundleData);\n        }\n\n        return result;\n    }", "signature": "Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["parse", "withSkipHeaderRecord", "withHeader", "get", "get", "get", "get", "put", "addResourceString", "entrySet", "getKey", "build", "getValue", "put"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}