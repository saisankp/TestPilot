{"test_class": {"identifier": "JdbcSessionRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static DataSource ds;", "modifier": "public static", "type": "DataSource", "declarator": "ds", "var_name": "ds"}, {"original_string": "private static Session session;", "modifier": "private static", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private static SessionConfig sessionConfig = (SessionConfig)SingletonServiceFactory.getBean(SessionConfig.class);", "modifier": "private static", "type": "SessionConfig", "declarator": "sessionConfig = (SessionConfig)SingletonServiceFactory.getBean(SessionConfig.class)", "var_name": "sessionConfig"}, {"original_string": "private static SessionRepository sessionRepository = (SessionRepository)SingletonServiceFactory.getBean(SessionRepository.class);", "modifier": "private static", "type": "SessionRepository", "declarator": "sessionRepository = (SessionRepository)SingletonServiceFactory.getBean(SessionRepository.class)", "var_name": "sessionRepository"}], "file": "jdbc-manager/src/test/java/com/networknt/session/jdbc/JdbcSessionRepositoryTest.java"}, "test_case": {"identifier": "testSave", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSave() {\n        session = sessionRepository.createSession();\n\n    }", "signature": "void testSave()", "full_signature": "@Test public void testSave()", "class_method_signature": "JdbcSessionRepositoryTest.testSave()", "testcase": true, "constructor": false, "invocations": ["createSession"]}, "focal_class": {"identifier": "JdbcSessionRepository", "superclass": "", "interfaces": "implements\n        SessionRepository<JdbcSessionRepository.JdbcSession>", "fields": [{"original_string": "private static final String CREATE_SESSION_QUERY =\n            \"INSERT INTO light_session(SESSION_ID, CREATION_TIME, LAST_ACCESS_TIME, MAX_INACTIVE_INTERVAL, EXPIRY_TIME, PRINCIPAL_NAME) \" +\n                    \"VALUES (?, ?, ?, ?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SESSION_QUERY =\n            \"INSERT INTO light_session(SESSION_ID, CREATION_TIME, LAST_ACCESS_TIME, MAX_INACTIVE_INTERVAL, EXPIRY_TIME, PRINCIPAL_NAME) \" +\n                    \"VALUES (?, ?, ?, ?, ?, ?)\"", "var_name": "CREATE_SESSION_QUERY"}, {"original_string": "private static final String CREATE_SESSION_ATTRIBUTE_QUERY =\n            \"INSERT INTO light_session_attributes(SESSION_ID, ATTRIBUTE_NAME, ATTRIBUTE_BYTES) \" +\n                    \"VALUES (?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SESSION_ATTRIBUTE_QUERY =\n            \"INSERT INTO light_session_attributes(SESSION_ID, ATTRIBUTE_NAME, ATTRIBUTE_BYTES) \" +\n                    \"VALUES (?, ?, ?)\"", "var_name": "CREATE_SESSION_ATTRIBUTE_QUERY"}, {"original_string": "private static final String GET_SESSION_QUERY =\n            \"SELECT S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.SESSION_ID = SA.SESSION_ID \" +\n                    \"WHERE S.SESSION_ID = ?\";", "modifier": "private static final", "type": "String", "declarator": "GET_SESSION_QUERY =\n            \"SELECT S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.SESSION_ID = SA.SESSION_ID \" +\n                    \"WHERE S.SESSION_ID = ?\"", "var_name": "GET_SESSION_QUERY"}, {"original_string": "private static final String GET_ALL_SESSION_QUERY =\n            \"SELECT S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.SESSION_ID = SA.SESSION_ID \" +\n                    \"WHERE EXPIRY_TIME > ?\";", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_SESSION_QUERY =\n            \"SELECT S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.SESSION_ID = SA.SESSION_ID \" +\n                    \"WHERE EXPIRY_TIME > ?\"", "var_name": "GET_ALL_SESSION_QUERY"}, {"original_string": "private static final String UPDATE_SESSION_QUERY =\n            \"UPDATE light_session SET SESSION_ID = ?, LAST_ACCESS_TIME = ?, MAX_INACTIVE_INTERVAL = ?, EXPIRY_TIME = ?, PRINCIPAL_NAME = ? \" +\n                    \"WHERE SESSION_ID = ?\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_SESSION_QUERY =\n            \"UPDATE light_session SET SESSION_ID = ?, LAST_ACCESS_TIME = ?, MAX_INACTIVE_INTERVAL = ?, EXPIRY_TIME = ?, PRINCIPAL_NAME = ? \" +\n                    \"WHERE SESSION_ID = ?\"", "var_name": "UPDATE_SESSION_QUERY"}, {"original_string": "private static final String UPDATE_SESSION_ACCESS_TIME_QUERY =\n            \"UPDATE light_session SET  LAST_ACCESS_TIME = ? \" +\n                    \"WHERE SESSION_ID = ?\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_SESSION_ACCESS_TIME_QUERY =\n            \"UPDATE light_session SET  LAST_ACCESS_TIME = ? \" +\n                    \"WHERE SESSION_ID = ?\"", "var_name": "UPDATE_SESSION_ACCESS_TIME_QUERY"}, {"original_string": "private static final String UPDATE_SESSION_ATTRIBUTE_QUERY =\n            \"UPDATE light_session_attributes SET ATTRIBUTE_BYTES = ? \" +\n                    \"WHERE SESSION_ID = ? \" +\n                    \"AND ATTRIBUTE_NAME = ?\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_SESSION_ATTRIBUTE_QUERY =\n            \"UPDATE light_session_attributes SET ATTRIBUTE_BYTES = ? \" +\n                    \"WHERE SESSION_ID = ? \" +\n                    \"AND ATTRIBUTE_NAME = ?\"", "var_name": "UPDATE_SESSION_ATTRIBUTE_QUERY"}, {"original_string": "private static final String DELETE_SESSION_ATTRIBUTE_QUERY =\n            \"DELETE FROM light_session_attributes \" +\n                    \"WHERE SESSION_ID = ? \" +\n                    \"AND ATTRIBUTE_NAME = ?\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_SESSION_ATTRIBUTE_QUERY =\n            \"DELETE FROM light_session_attributes \" +\n                    \"WHERE SESSION_ID = ? \" +\n                    \"AND ATTRIBUTE_NAME = ?\"", "var_name": "DELETE_SESSION_ATTRIBUTE_QUERY"}, {"original_string": "private static final String DELETE_SESSION_QUERY =\n            \"DELETE FROM light_session \" +\n                    \"WHERE SESSION_ID = ?\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_SESSION_QUERY =\n            \"DELETE FROM light_session \" +\n                    \"WHERE SESSION_ID = ?\"", "var_name": "DELETE_SESSION_QUERY"}, {"original_string": "private static final String LIST_SESSIONS_BY_PRINCIPAL_NAME_QUERY =\n            \"SELECT S.PRIMARY_ID, S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.PRIMARY_ID = SA.SESSION_PRIMARY_ID \" +\n                    \"WHERE S.PRINCIPAL_NAME = ?\";", "modifier": "private static final", "type": "String", "declarator": "LIST_SESSIONS_BY_PRINCIPAL_NAME_QUERY =\n            \"SELECT S.PRIMARY_ID, S.SESSION_ID, S.CREATION_TIME, S.LAST_ACCESS_TIME, S.MAX_INACTIVE_INTERVAL, SA.ATTRIBUTE_NAME, SA.ATTRIBUTE_BYTES \" +\n                    \"FROM light_session S \" +\n                    \"LEFT OUTER JOIN light_session_attributes SA ON S.PRIMARY_ID = SA.SESSION_PRIMARY_ID \" +\n                    \"WHERE S.PRINCIPAL_NAME = ?\"", "var_name": "LIST_SESSIONS_BY_PRINCIPAL_NAME_QUERY"}, {"original_string": "private static final String DELETE_SESSIONS_BY_EXPIRY_TIME_QUERY =\n            \"DELETE FROM light_session \" +\n                    \"WHERE EXPIRY_TIME < ?\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_SESSIONS_BY_EXPIRY_TIME_QUERY =\n            \"DELETE FROM light_session \" +\n                    \"WHERE EXPIRY_TIME < ?\"", "var_name": "DELETE_SESSIONS_BY_EXPIRY_TIME_QUERY"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(JdbcSessionRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JdbcSessionRepository.class)", "var_name": "logger"}, {"original_string": "private String createSessionQuery;", "modifier": "private", "type": "String", "declarator": "createSessionQuery", "var_name": "createSessionQuery"}, {"original_string": "private String createSessionAttributeQuery;", "modifier": "private", "type": "String", "declarator": "createSessionAttributeQuery", "var_name": "createSessionAttributeQuery"}, {"original_string": "private String getSessionQuery;", "modifier": "private", "type": "String", "declarator": "getSessionQuery", "var_name": "getSessionQuery"}, {"original_string": "private String getAllSessionQuery;", "modifier": "private", "type": "String", "declarator": "getAllSessionQuery", "var_name": "getAllSessionQuery"}, {"original_string": "private String updateSessionQuery;", "modifier": "private", "type": "String", "declarator": "updateSessionQuery", "var_name": "updateSessionQuery"}, {"original_string": "private String updateSessionAttributeQuery;", "modifier": "private", "type": "String", "declarator": "updateSessionAttributeQuery", "var_name": "updateSessionAttributeQuery"}, {"original_string": "private String deleteSessionAttributeQuery;", "modifier": "private", "type": "String", "declarator": "deleteSessionAttributeQuery", "var_name": "deleteSessionAttributeQuery"}, {"original_string": "private String deleteSessionQuery;", "modifier": "private", "type": "String", "declarator": "deleteSessionQuery", "var_name": "deleteSessionQuery"}, {"original_string": "private String listSessionsByPrincipalNameQuery;", "modifier": "private", "type": "String", "declarator": "listSessionsByPrincipalNameQuery", "var_name": "listSessionsByPrincipalNameQuery"}, {"original_string": "private String deleteSessionsByExpiryTimeQuery;", "modifier": "private", "type": "String", "declarator": "deleteSessionsByExpiryTimeQuery", "var_name": "deleteSessionsByExpiryTimeQuery"}, {"original_string": "private Integer defaultMaxInactiveInterval = 30 * 60;", "modifier": "private", "type": "Integer", "declarator": "defaultMaxInactiveInterval = 30 * 60", "var_name": "defaultMaxInactiveInterval"}, {"original_string": "private volatile long startTime;", "modifier": "private volatile", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private ValueBytesConverter converter = new ValueBytesConverter();", "modifier": "private", "type": "ValueBytesConverter", "declarator": "converter = new ValueBytesConverter()", "var_name": "converter"}, {"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}], "methods": [{"identifier": "JdbcSessionRepository", "parameters": "(DataSource dataSource)", "modifiers": "public", "return": "", "signature": " JdbcSessionRepository(DataSource dataSource)", "full_signature": "public  JdbcSessionRepository(DataSource dataSource)", "class_method_signature": "JdbcSessionRepository.JdbcSessionRepository(DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "setDefaultMaxInactiveInterval", "parameters": "(int defaultMaxInactiveInterval)", "modifiers": "public", "return": "void", "signature": "void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval)", "full_signature": "public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval)", "class_method_signature": "JdbcSessionRepository.setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval)", "testcase": false, "constructor": false}, {"identifier": "createSession", "parameters": "()", "modifiers": "@Override public", "return": "JdbcSession", "signature": "JdbcSession createSession()", "full_signature": "@Override public JdbcSession createSession()", "class_method_signature": "JdbcSessionRepository.createSession()", "testcase": false, "constructor": false}, {"identifier": "getSessions", "parameters": "()", "modifiers": "public", "return": "Map<String, Session>", "signature": "Map<String, Session> getSessions()", "full_signature": "public Map<String, Session> getSessions()", "class_method_signature": "JdbcSessionRepository.getSessions()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(JdbcSession session)", "modifiers": "@Override public", "return": "void", "signature": "void save(JdbcSession session)", "full_signature": "@Override public void save(JdbcSession session)", "class_method_signature": "JdbcSessionRepository.save(JdbcSession session)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(final String id)", "modifiers": "@Override public", "return": "JdbcSession", "signature": "JdbcSession findById(final String id)", "full_signature": "@Override public JdbcSession findById(final String id)", "class_method_signature": "JdbcSessionRepository.findById(final String id)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(final String id)", "modifiers": "@Override public", "return": "void", "signature": "void deleteById(final String id)", "full_signature": "@Override public void deleteById(final String id)", "class_method_signature": "JdbcSessionRepository.deleteById(final String id)", "testcase": false, "constructor": false}, {"identifier": "cleanUpExpiredSessions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanUpExpiredSessions()", "full_signature": "public void cleanUpExpiredSessions()", "class_method_signature": "JdbcSessionRepository.cleanUpExpiredSessions()", "testcase": false, "constructor": false}, {"identifier": "updateSessionLastAccessTime", "parameters": "(final String id)", "modifiers": "public", "return": "void", "signature": "void updateSessionLastAccessTime(final String id)", "full_signature": "public void updateSessionLastAccessTime(final String id)", "class_method_signature": "JdbcSessionRepository.updateSessionLastAccessTime(final String id)", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "(String base)", "modifiers": "private", "return": "String", "signature": "String getQuery(String base)", "full_signature": "private String getQuery(String base)", "class_method_signature": "JdbcSessionRepository.getQuery(String base)", "testcase": false, "constructor": false}, {"identifier": "prepareQueries", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void prepareQueries()", "full_signature": "private void prepareQueries()", "class_method_signature": "JdbcSessionRepository.prepareQueries()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(PreparedStatement ps, int paramIndex, Object attributeValue)", "modifiers": "private", "return": "void", "signature": "void serialize(PreparedStatement ps, int paramIndex, Object attributeValue)", "full_signature": "private void serialize(PreparedStatement ps, int paramIndex, Object attributeValue)", "class_method_signature": "JdbcSessionRepository.serialize(PreparedStatement ps, int paramIndex, Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(ResultSet rs, String columnName)", "modifiers": "private", "return": "Object", "signature": "Object deserialize(ResultSet rs, String columnName)", "full_signature": "private Object deserialize(ResultSet rs, String columnName)", "class_method_signature": "JdbcSessionRepository.deserialize(ResultSet rs, String columnName)", "testcase": false, "constructor": false}, {"identifier": "extractData", "parameters": "(ResultSet rs)", "modifiers": "public", "return": "List<JdbcSession>", "signature": "List<JdbcSession> extractData(ResultSet rs)", "full_signature": "public List<JdbcSession> extractData(ResultSet rs)", "class_method_signature": "JdbcSessionRepository.extractData(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "(List<JdbcSession> sessions)", "modifiers": "private", "return": "JdbcSession", "signature": "JdbcSession getLast(List<JdbcSession> sessions)", "full_signature": "private JdbcSession getLast(List<JdbcSession> sessions)", "class_method_signature": "JdbcSessionRepository.getLast(List<JdbcSession> sessions)", "testcase": false, "constructor": false}], "file": "jdbc-manager/src/main/java/com/networknt/session/jdbc/JdbcSessionRepository.java"}, "focal_method": {"identifier": "save", "parameters": "(JdbcSession session)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(JdbcSession session) {\n        if (session.isNew()) {\n            try (final Connection connection = dataSource.getConnection()) {\n                connection.setAutoCommit(false);\n\n                PreparedStatement stmt = connection.prepareStatement(this.createSessionQuery);\n                stmt.setString(1, session.getId());\n                stmt.setLong(2, session.getCreationTime());\n                stmt.setLong(3, session.getLastAccessedTime());\n                stmt.setInt(4, session.getMaxInactiveInterval());\n                stmt.setLong(5, session.getExpiryTime());\n                stmt.setString(6, session.getPrincipalName());\n                int count = stmt.executeUpdate();\n                if (!session.getAttributeNames().isEmpty()) {\n                    final List<String> attributeNames = new ArrayList<>(session.getAttributeNames());\n                    try (PreparedStatement psAtt = connection.prepareStatement(this.createSessionAttributeQuery)) {\n                        for (String attributeName : attributeNames) {\n                            psAtt.setString(1, session.getId());\n                            psAtt.setString(2, attributeName);\n                            serialize(psAtt, 3, session.getAttribute(attributeName));\n                            psAtt.addBatch();\n                        }\n                        psAtt.executeBatch();\n                    }\n                }\n                connection.commit();\n\n                if (count != 1) {\n                    logger.error(\"Failed to insert session: {}\", session.getId());\n                }\n            } catch (SQLException e) {\n                logger.error(\"SqlException:\", e);\n            }\n        } else {\n            try (final Connection connection = dataSource.getConnection()) {\n\n                connection.setAutoCommit(false);\n                PreparedStatement stmt = connection.prepareStatement(this.updateSessionQuery);\n                stmt.setString(1, session.getId());\n                stmt.setLong(2, session.getLastAccessedTime());\n                stmt.setInt(3, session.getMaxInactiveInterval());\n                stmt.setLong(4, session.getExpiryTime());\n                stmt.setString(5, session.getPrincipalName());\n                stmt.setString(6, session.getId());\n                int count = stmt.executeUpdate();\n\n                Map<String, Object> delta = session.getDelta();\n                if (!delta.isEmpty()) {\n                    for (final Map.Entry<String, Object> entry : delta.entrySet()) {\n                        if (entry.getValue() == null) {\n                            try (PreparedStatement psAtt = connection.prepareStatement(this.deleteSessionAttributeQuery)) {\n                                psAtt.setString(1, session.getId());\n                                psAtt.setString(2, entry.getKey());\n                                psAtt.executeUpdate();\n                            }\n                        } else {\n                            int updatedCount = 0;\n                            try (PreparedStatement psAtt = connection.prepareStatement(this.updateSessionAttributeQuery)) {\n                                serialize(psAtt, 1, entry.getValue());\n                                psAtt.setString(2, session.getId());\n                                psAtt.setString(3, entry.getKey());\n                                updatedCount = psAtt.executeUpdate();\n                            }\n                            if (updatedCount == 0) {\n                                try (PreparedStatement psAtt = connection.prepareStatement(this.createSessionAttributeQuery)) {\n                                    psAtt.setString(1, session.getId());\n                                    psAtt.setString(2, entry.getKey());\n                                    serialize(psAtt, 3, entry.getValue());\n\n                                    psAtt.executeUpdate();\n                                }\n                            }\n\n                        }\n                    }\n                }\n                connection.commit();\n            } catch (SQLException e) {\n                logger.error(\"SqlException:\", e);\n            }\n        }\n        session.clearChangeFlags();\n    }", "signature": "void save(JdbcSession session)", "full_signature": "@Override public void save(JdbcSession session)", "class_method_signature": "JdbcSessionRepository.save(JdbcSession session)", "testcase": false, "constructor": false, "invocations": ["isNew", "getConnection", "setAutoCommit", "prepareStatement", "setString", "getId", "setLong", "getCreationTime", "setLong", "getLastAccessedTime", "setInt", "getMaxInactiveInterval", "setLong", "getExpiryTime", "setString", "getPrincipalName", "executeUpdate", "isEmpty", "getAttributeNames", "getAttributeNames", "prepareStatement", "setString", "getId", "setString", "serialize", "getAttribute", "addBatch", "executeBatch", "commit", "error", "getId", "error", "getConnection", "setAutoCommit", "prepareStatement", "setString", "getId", "setLong", "getLastAccessedTime", "setInt", "getMaxInactiveInterval", "setLong", "getExpiryTime", "setString", "getPrincipalName", "setString", "getId", "executeUpdate", "getDelta", "isEmpty", "entrySet", "getValue", "prepareStatement", "setString", "getId", "setString", "getKey", "executeUpdate", "prepareStatement", "serialize", "getValue", "setString", "getId", "setString", "getKey", "executeUpdate", "prepareStatement", "setString", "getId", "setString", "getKey", "serialize", "getValue", "executeUpdate", "commit", "error", "clearChangeFlags"]}, "repository": {"repo_id": 104141049, "url": "https://github.com/networknt/light-session-4j", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 341, "license": "licensed"}}