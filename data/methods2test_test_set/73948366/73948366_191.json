{"test_class": {"identifier": "AwsPrivateKeyStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ATHENZ_PROP_ZTS_BUCKET_NAME = \"athenz.aws.zts.bucket_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZTS_BUCKET_NAME = \"athenz.aws.zts.bucket_name\"", "var_name": "ATHENZ_PROP_ZTS_BUCKET_NAME"}, {"original_string": "private static final String ATHENZ_AWS_KMS_REGION = \"athenz.aws.store_kms_region\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_AWS_KMS_REGION = \"athenz.aws.store_kms_region\"", "var_name": "ATHENZ_AWS_KMS_REGION"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/auth/impl/aws/AwsPrivateKeyStoreTest.java"}, "test_case": {"identifier": "testGetApplicationSecret", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetApplicationSecret() {\n        System.setProperty(\"athenz.aws.s3.region\", \"us-east-1\");\n        System.setProperty(ATHENZ_AWS_KMS_REGION, \"us-east-1\");\n        String bucketName = \"my_bucket\";\n        String keyName = \"my_key\";\n        String expected = \"my_value\";\n\n        AmazonS3 s3 = mock(AmazonS3.class);\n        AWSKMS kms = mock(AWSKMS.class);\n        S3Object s3Object = mock(S3Object.class);\n        Mockito.when(s3.getObject(bucketName, keyName)).thenReturn(s3Object);\n        InputStream is = new ByteArrayInputStream( expected.getBytes() );\n        S3ObjectInputStream s3ObjectInputStream = new S3ObjectInputStream(is, null);\n        Mockito.when(s3Object.getObjectContent()).thenReturn(s3ObjectInputStream);\n\n        ByteBuffer buffer = ByteBuffer.wrap(expected.getBytes());\n        DecryptResult decryptResult = mock(DecryptResult.class);\n        Mockito.when(kms.decrypt(Mockito.any(DecryptRequest.class))).thenReturn(decryptResult);\n        Mockito.when(decryptResult.getPlaintext()).thenReturn(buffer);\n\n        System.setProperty(\"athenz.aws.store_kms_decrypt\", \"true\");\n        AwsPrivateKeyStore awsPrivateKeyStore = new AwsPrivateKeyStore();\n        AwsPrivateKeyStore spyAWS = Mockito.spy(awsPrivateKeyStore);\n        doReturn(s3).when(spyAWS).getS3();\n        doReturn(kms).when(spyAWS).getKMS();\n        String actual = spyAWS.getApplicationSecret(bucketName, keyName);\n        Assert.assertEquals(actual, expected);\n        System.clearProperty(\"athenz.aws.s3.region\");\n        System.clearProperty(ATHENZ_AWS_KMS_REGION);\n    }", "signature": "void testGetApplicationSecret()", "full_signature": "@Test public void testGetApplicationSecret()", "class_method_signature": "AwsPrivateKeyStoreTest.testGetApplicationSecret()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "mock", "mock", "mock", "thenReturn", "when", "getObject", "getBytes", "thenReturn", "when", "getObjectContent", "wrap", "getBytes", "mock", "thenReturn", "when", "decrypt", "any", "thenReturn", "when", "getPlaintext", "setProperty", "spy", "getS3", "when", "doReturn", "getKMS", "when", "doReturn", "getApplicationSecret", "assertEquals", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "AwsPrivateKeyStore", "superclass": "", "interfaces": "implements PrivateKeyStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AwsPrivateKeyStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AwsPrivateKeyStore.class)", "var_name": "LOG"}, {"original_string": "private static final String ATHENZ_PROP_AWS_S3_REGION   = \"athenz.aws.s3.region\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_AWS_S3_REGION   = \"athenz.aws.s3.region\"", "var_name": "ATHENZ_PROP_AWS_S3_REGION"}, {"original_string": "private static final String ATHENZ_PROP_AWS_KMS_DECRYPT = \"athenz.aws.store_kms_decrypt\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_AWS_KMS_DECRYPT = \"athenz.aws.store_kms_decrypt\"", "var_name": "ATHENZ_PROP_AWS_KMS_DECRYPT"}, {"original_string": "private static final String ATHENZ_PROP_AWS_KMS_REGION  = \"athenz.aws.store_kms_region\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_AWS_KMS_REGION  = \"athenz.aws.store_kms_region\"", "var_name": "ATHENZ_PROP_AWS_KMS_REGION"}, {"original_string": "private static final String ATHENZ_PROP_ZMS_BUCKET_NAME = \"athenz.aws.zms.bucket_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZMS_BUCKET_NAME = \"athenz.aws.zms.bucket_name\"", "var_name": "ATHENZ_PROP_ZMS_BUCKET_NAME"}, {"original_string": "private static final String ATHENZ_PROP_ZMS_KEY_NAME    = \"athenz.aws.zms.key_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZMS_KEY_NAME    = \"athenz.aws.zms.key_name\"", "var_name": "ATHENZ_PROP_ZMS_KEY_NAME"}, {"original_string": "private static final String ATHENZ_PROP_ZMS_KEY_ID_NAME = \"athenz.aws.zms.key_id_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZMS_KEY_ID_NAME = \"athenz.aws.zms.key_id_name\"", "var_name": "ATHENZ_PROP_ZMS_KEY_ID_NAME"}, {"original_string": "private static final String ATHENZ_PROP_ZTS_BUCKET_NAME = \"athenz.aws.zts.bucket_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZTS_BUCKET_NAME = \"athenz.aws.zts.bucket_name\"", "var_name": "ATHENZ_PROP_ZTS_BUCKET_NAME"}, {"original_string": "private static final String ATHENZ_PROP_ZTS_KEY_NAME    = \"athenz.aws.zts.key_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZTS_KEY_NAME    = \"athenz.aws.zts.key_name\"", "var_name": "ATHENZ_PROP_ZTS_KEY_NAME"}, {"original_string": "private static final String ATHENZ_PROP_ZTS_KEY_ID_NAME = \"athenz.aws.zts.key_id_name\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_ZTS_KEY_ID_NAME = \"athenz.aws.zts.key_id_name\"", "var_name": "ATHENZ_PROP_ZTS_KEY_ID_NAME"}, {"original_string": "private static final String ATHENZ_DEFAULT_KEY_NAME     = \"service_private_key\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_DEFAULT_KEY_NAME     = \"service_private_key\"", "var_name": "ATHENZ_DEFAULT_KEY_NAME"}, {"original_string": "private static final String ATHENZ_DEFAULT_KEY_ID_NAME  = \"service_private_key_id\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_DEFAULT_KEY_ID_NAME  = \"service_private_key_id\"", "var_name": "ATHENZ_DEFAULT_KEY_ID_NAME"}, {"original_string": "private static final String ZMS_SERVICE = \"zms\";", "modifier": "private static final", "type": "String", "declarator": "ZMS_SERVICE = \"zms\"", "var_name": "ZMS_SERVICE"}, {"original_string": "private static final String ZTS_SERVICE = \"zts\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_SERVICE = \"zts\"", "var_name": "ZTS_SERVICE"}, {"original_string": "private final AmazonS3 s3;", "modifier": "private final", "type": "AmazonS3", "declarator": "s3", "var_name": "s3"}, {"original_string": "private final AWSKMS kms;", "modifier": "private final", "type": "AWSKMS", "declarator": "kms", "var_name": "kms"}, {"original_string": "private boolean kmsDecrypt;", "modifier": "private", "type": "boolean", "declarator": "kmsDecrypt", "var_name": "kmsDecrypt"}], "methods": [{"identifier": "AwsPrivateKeyStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " AwsPrivateKeyStore()", "full_signature": "public  AwsPrivateKeyStore()", "class_method_signature": "AwsPrivateKeyStore.AwsPrivateKeyStore()", "testcase": false, "constructor": true}, {"identifier": "initAWSKMS", "parameters": "()", "modifiers": "private static", "return": "AWSKMS", "signature": "AWSKMS initAWSKMS()", "full_signature": "private static AWSKMS initAWSKMS()", "class_method_signature": "AwsPrivateKeyStore.initAWSKMS()", "testcase": false, "constructor": false}, {"identifier": "initAmazonS3", "parameters": "()", "modifiers": "private static", "return": "AmazonS3", "signature": "AmazonS3 initAmazonS3()", "full_signature": "private static AmazonS3 initAmazonS3()", "class_method_signature": "AwsPrivateKeyStore.initAmazonS3()", "testcase": false, "constructor": false}, {"identifier": "AwsPrivateKeyStore", "parameters": "(final AmazonS3 s3, final AWSKMS kms)", "modifiers": "public", "return": "", "signature": " AwsPrivateKeyStore(final AmazonS3 s3, final AWSKMS kms)", "full_signature": "public  AwsPrivateKeyStore(final AmazonS3 s3, final AWSKMS kms)", "class_method_signature": "AwsPrivateKeyStore.AwsPrivateKeyStore(final AmazonS3 s3, final AWSKMS kms)", "testcase": false, "constructor": true}, {"identifier": "getPrivateKey", "parameters": "(String service, String serverHostName,\n            StringBuilder privateKeyId)", "modifiers": "@Override public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "full_signature": "@Override public PrivateKey getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "class_method_signature": "AwsPrivateKeyStore.getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId)", "testcase": false, "constructor": false}, {"identifier": "getApplicationSecret", "parameters": "(final String appName, final String keyName)", "modifiers": "@Override public", "return": "String", "signature": "String getApplicationSecret(final String appName, final String keyName)", "full_signature": "@Override public String getApplicationSecret(final String appName, final String keyName)", "class_method_signature": "AwsPrivateKeyStore.getApplicationSecret(final String appName, final String keyName)", "testcase": false, "constructor": false}, {"identifier": "getDecryptedData", "parameters": "(final String bucketName, final String keyName)", "modifiers": "private", "return": "String", "signature": "String getDecryptedData(final String bucketName, final String keyName)", "full_signature": "private String getDecryptedData(final String bucketName, final String keyName)", "class_method_signature": "AwsPrivateKeyStore.getDecryptedData(final String bucketName, final String keyName)", "testcase": false, "constructor": false}, {"identifier": "getS3", "parameters": "()", "modifiers": "", "return": "AmazonS3", "signature": "AmazonS3 getS3()", "full_signature": " AmazonS3 getS3()", "class_method_signature": "AwsPrivateKeyStore.getS3()", "testcase": false, "constructor": false}, {"identifier": "getKMS", "parameters": "()", "modifiers": "", "return": "AWSKMS", "signature": "AWSKMS getKMS()", "full_signature": " AWSKMS getKMS()", "class_method_signature": "AwsPrivateKeyStore.getKMS()", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/auth/impl/aws/AwsPrivateKeyStore.java"}, "focal_method": {"identifier": "getApplicationSecret", "parameters": "(final String appName, final String keyName)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getApplicationSecret(final String appName, final String keyName) {\n        return getDecryptedData(appName, keyName);\n    }", "signature": "String getApplicationSecret(final String appName, final String keyName)", "full_signature": "@Override public String getApplicationSecret(final String appName, final String keyName)", "class_method_signature": "AwsPrivateKeyStore.getApplicationSecret(final String appName, final String keyName)", "testcase": false, "constructor": false, "invocations": ["getDecryptedData"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}