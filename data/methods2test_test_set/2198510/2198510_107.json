{"test_class": {"identifier": "TestRpcClientFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String localhost = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "localhost = \"localhost\"", "var_name": "localhost"}], "file": "flume-ng-sdk/src/test/java/org/apache/flume/api/TestRpcClientFactory.java"}, "test_case": {"identifier": "testPropertiesBatchAppend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPropertiesBatchAppend() throws FlumeException,\n      EventDeliveryException {\n    int batchSize = 7;\n    RpcClient client = null;\n    Server server = RpcTestUtils.startServer(new OKAvroHandler());\n    try {\n      Properties p = new Properties();\n      p.put(\"hosts\", \"host1\");\n      p.put(\"hosts.host1\", localhost + \":\" + String.valueOf(server.getPort()));\n      p.put(\"batch-size\", String.valueOf(batchSize));\n      client = RpcClientFactory.getInstance(p);\n      List<Event> events = new ArrayList<Event>();\n      for (int i = 0; i < batchSize; i++) {\n        events.add(EventBuilder.withBody(\"evt: \" + i, Charset.forName(\"UTF8\")));\n      }\n      client.appendBatch(events);\n    } finally {\n      RpcTestUtils.stopServer(server);\n      if (client != null) client.close();\n    }\n  }", "signature": "void testPropertiesBatchAppend()", "full_signature": "@Test public void testPropertiesBatchAppend()", "class_method_signature": "TestRpcClientFactory.testPropertiesBatchAppend()", "testcase": true, "constructor": false, "invocations": ["startServer", "put", "put", "valueOf", "getPort", "put", "valueOf", "getInstance", "add", "withBody", "forName", "appendBatch", "stopServer", "close"]}, "focal_class": {"identifier": "RpcClientFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInstance", "parameters": "(Properties properties)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "RpcClient", "signature": "RpcClient getInstance(Properties properties)", "full_signature": "@SuppressWarnings(\"unchecked\") public static RpcClient getInstance(Properties properties)", "class_method_signature": "RpcClientFactory.getInstance(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(File propertiesFile)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getInstance(File propertiesFile)", "full_signature": "public static RpcClient getInstance(File propertiesFile)", "class_method_signature": "RpcClientFactory.getInstance(File propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String hostname, Integer port)", "modifiers": "@Deprecated public static", "return": "RpcClient", "signature": "RpcClient getInstance(String hostname, Integer port)", "full_signature": "@Deprecated public static RpcClient getInstance(String hostname, Integer port)", "class_method_signature": "RpcClientFactory.getInstance(String hostname, Integer port)", "testcase": false, "constructor": false}, {"identifier": "getDefaultInstance", "parameters": "(String hostname, Integer port)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getDefaultInstance(String hostname, Integer port)", "full_signature": "public static RpcClient getDefaultInstance(String hostname, Integer port)", "class_method_signature": "RpcClientFactory.getDefaultInstance(String hostname, Integer port)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String hostname, Integer port,\n      Integer batchSize)", "modifiers": "@Deprecated public static", "return": "RpcClient", "signature": "RpcClient getInstance(String hostname, Integer port,\n      Integer batchSize)", "full_signature": "@Deprecated public static RpcClient getInstance(String hostname, Integer port,\n      Integer batchSize)", "class_method_signature": "RpcClientFactory.getInstance(String hostname, Integer port,\n      Integer batchSize)", "testcase": false, "constructor": false}, {"identifier": "getDefaultInstance", "parameters": "(String hostname, Integer port,\n      Integer batchSize)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getDefaultInstance(String hostname, Integer port,\n      Integer batchSize)", "full_signature": "public static RpcClient getDefaultInstance(String hostname, Integer port,\n      Integer batchSize)", "class_method_signature": "RpcClientFactory.getDefaultInstance(String hostname, Integer port,\n      Integer batchSize)", "testcase": false, "constructor": false}, {"identifier": "getThriftInstance", "parameters": "(String hostname, Integer port, Integer batchSize)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getThriftInstance(String hostname, Integer port, Integer batchSize)", "full_signature": "public static RpcClient getThriftInstance(String hostname, Integer port, Integer batchSize)", "class_method_signature": "RpcClientFactory.getThriftInstance(String hostname, Integer port, Integer batchSize)", "testcase": false, "constructor": false}, {"identifier": "getThriftInstance", "parameters": "(String hostname, Integer port)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getThriftInstance(String hostname, Integer port)", "full_signature": "public static RpcClient getThriftInstance(String hostname, Integer port)", "class_method_signature": "RpcClientFactory.getThriftInstance(String hostname, Integer port)", "testcase": false, "constructor": false}, {"identifier": "getThriftInstance", "parameters": "(Properties props)", "modifiers": "public static", "return": "RpcClient", "signature": "RpcClient getThriftInstance(Properties props)", "full_signature": "public static RpcClient getThriftInstance(Properties props)", "class_method_signature": "RpcClientFactory.getThriftInstance(Properties props)", "testcase": false, "constructor": false}], "file": "flume-ng-sdk/src/main/java/org/apache/flume/api/RpcClientFactory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(Properties properties)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "RpcClient", "body": "@SuppressWarnings(\"unchecked\")\n  public static RpcClient getInstance(Properties properties)\n      throws FlumeException {\n    String type = null;\n    type = properties.getProperty(\n        RpcClientConfigurationConstants.CONFIG_CLIENT_TYPE);\n    if (type == null || type.isEmpty()) {\n      type = ClientType.DEFAULT.getClientClassName();\n    }\n    Class<? extends AbstractRpcClient> clazz;\n    AbstractRpcClient client;\n    try {\n      String clientClassType = type;\n      ClientType clientType = null;\n      try {\n        clientType = ClientType.valueOf(type.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        clientType = ClientType.OTHER;\n      }\n      if (!clientType.equals(ClientType.OTHER)) {\n        clientClassType = clientType.getClientClassName();\n      }\n      clazz =\n          (Class<? extends AbstractRpcClient>) Class.forName(clientClassType);\n    } catch (ClassNotFoundException e) {\n      throw new FlumeException(\"No such client!\", e);\n    }\n\n    try {\n      client = clazz.newInstance();\n    } catch (InstantiationException e) {\n      throw new FlumeException(\"Cannot instantiate client. \" +\n          \"Exception follows:\", e);\n    } catch (IllegalAccessException e) {\n      throw new FlumeException(\"Cannot instantiate client. \" +\n          \"Exception follows:\", e);\n    }\n    client.configure(properties);\n    return client;\n\n  }", "signature": "RpcClient getInstance(Properties properties)", "full_signature": "@SuppressWarnings(\"unchecked\") public static RpcClient getInstance(Properties properties)", "class_method_signature": "RpcClientFactory.getInstance(Properties properties)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isEmpty", "getClientClassName", "valueOf", "toUpperCase", "equals", "getClientClassName", "forName", "newInstance", "configure"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}