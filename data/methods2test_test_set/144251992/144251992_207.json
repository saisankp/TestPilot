{"test_class": {"identifier": "RootTermDistanceCalculatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/normalizer/RootTermDistanceCalculatorTest.java"}, "test_case": {"identifier": "calculateMinimalDistanceReturnsZeroWhenTermEqualsRootTerm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateMinimalDistanceReturnsZeroWhenTermEqualsRootTerm() {\n        // given\n        var rootTerm = \"banana\";\n        var term = rootTerm;\n\n        var calculator = new RootTermDistanceCalculator(rootTerm, Set.of());\n\n        // when\n        var actualMinDistance = calculator.calculateMinimalDistance(term);\n\n        // then\n        assertThat(actualMinDistance).isEqualTo(0);\n    }", "signature": "void calculateMinimalDistanceReturnsZeroWhenTermEqualsRootTerm()", "full_signature": "@Test public void calculateMinimalDistanceReturnsZeroWhenTermEqualsRootTerm()", "class_method_signature": "RootTermDistanceCalculatorTest.calculateMinimalDistanceReturnsZeroWhenTermEqualsRootTerm()", "testcase": true, "constructor": false, "invocations": ["of", "calculateMinimalDistance", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RootTermDistanceCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String originalRootTerm;", "modifier": "private final", "type": "String", "declarator": "originalRootTerm", "var_name": "originalRootTerm"}, {"original_string": "private final String lowerCaseRootTerm;", "modifier": "private final", "type": "String", "declarator": "lowerCaseRootTerm", "var_name": "lowerCaseRootTerm"}, {"original_string": "private final Set<String> derivedTerms;", "modifier": "private final", "type": "Set<String>", "declarator": "derivedTerms", "var_name": "derivedTerms"}], "methods": [{"identifier": "RootTermDistanceCalculator", "parameters": "(String rootTerm, Set<String> derivedTerms)", "modifiers": "public", "return": "", "signature": " RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "full_signature": "public  RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "class_method_signature": "RootTermDistanceCalculator.RootTermDistanceCalculator(String rootTerm, Set<String> derivedTerms)", "testcase": false, "constructor": true}, {"identifier": "calculateMinimalDistance", "parameters": "(String stringToMatch)", "modifiers": "public", "return": "int", "signature": "int calculateMinimalDistance(String stringToMatch)", "full_signature": "public int calculateMinimalDistance(String stringToMatch)", "class_method_signature": "RootTermDistanceCalculator.calculateMinimalDistance(String stringToMatch)", "testcase": false, "constructor": false}, {"identifier": "nearestRootTerm", "parameters": "(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "modifiers": "public static", "return": "String", "signature": "String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "full_signature": "public static String nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "class_method_signature": "RootTermDistanceCalculator.nearestRootTerm(Set<RootTermDistanceCalculator> distanceCalculators, String term, int threshold)", "testcase": false, "constructor": false}, {"identifier": "calculateLevenshteinDistance", "parameters": "(String firstString, String secondString)", "modifiers": "private", "return": "int", "signature": "int calculateLevenshteinDistance(String firstString, String secondString)", "full_signature": "private int calculateLevenshteinDistance(String firstString, String secondString)", "class_method_signature": "RootTermDistanceCalculator.calculateLevenshteinDistance(String firstString, String secondString)", "testcase": false, "constructor": false}, {"identifier": "mergeRootTermAndDerivedTerms", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> mergeRootTermAndDerivedTerms()", "full_signature": "private Set<String> mergeRootTermAndDerivedTerms()", "class_method_signature": "RootTermDistanceCalculator.mergeRootTermAndDerivedTerms()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/normalizer/RootTermDistanceCalculator.java"}, "focal_method": {"identifier": "calculateMinimalDistance", "parameters": "(String stringToMatch)", "modifiers": "public", "return": "int", "body": "public int calculateMinimalDistance(String stringToMatch) {\n        var lowerCaseStringToMatch = stringToMatch.toLowerCase();\n        var mergedSet = mergeRootTermAndDerivedTerms();\n        boolean matchesRootTermOrDerivedTerm = mergedSet.contains(lowerCaseStringToMatch);\n\n        if(matchesRootTermOrDerivedTerm) {\n            return 0;\n        }\n\n        return mergedSet.parallelStream()\n                .mapToInt(term -> calculateLevenshteinDistance(term, lowerCaseStringToMatch))\n                .min()\n                .orElse(0);\n    }", "signature": "int calculateMinimalDistance(String stringToMatch)", "full_signature": "public int calculateMinimalDistance(String stringToMatch)", "class_method_signature": "RootTermDistanceCalculator.calculateMinimalDistance(String stringToMatch)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "mergeRootTermAndDerivedTerms", "contains", "orElse", "min", "mapToInt", "parallelStream", "calculateLevenshteinDistance"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}