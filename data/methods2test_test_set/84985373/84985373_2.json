{"test_class": {"identifier": "ParticleTest", "superclass": "", "interfaces": "", "fields": [], "file": "common-tools/clas-physics/src/test/java/org/jlab/clas/physics/ParticleTest.java"}, "test_case": {"identifier": "testEuclideanDistance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEuclideanDistance() {\n\t\tParticle p1 = new Particle();\n\t\tp1.setVector(11, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\t\tParticle p2 = new Particle(22, 0.0, 4.0, 0.0);\n\t\tassertEquals(p1.euclideanDistance(p2), 5.0, 1e-6);\n\t}", "signature": "void testEuclideanDistance()", "full_signature": "@Test public void testEuclideanDistance()", "class_method_signature": "ParticleTest.testEuclideanDistance()", "testcase": true, "constructor": false, "invocations": ["setVector", "assertEquals", "euclideanDistance"]}, "focal_class": {"identifier": "Particle", "superclass": "", "interfaces": "", "fields": [{"original_string": "LorentzVector partVector;", "modifier": "", "type": "LorentzVector", "declarator": "partVector", "var_name": "partVector"}, {"original_string": "Vector3 partVertex;", "modifier": "", "type": "Vector3", "declarator": "partVertex", "var_name": "partVertex"}, {"original_string": "int particleID;", "modifier": "", "type": "int", "declarator": "particleID", "var_name": "particleID"}, {"original_string": "int particleGeantID;", "modifier": "", "type": "int", "declarator": "particleGeantID", "var_name": "particleGeantID"}, {"original_string": "byte particleCharge;", "modifier": "", "type": "byte", "declarator": "particleCharge", "var_name": "particleCharge"}, {"original_string": "HashMap<String, Double> particleProperties;", "modifier": "", "type": "HashMap<String, Double>", "declarator": "particleProperties", "var_name": "particleProperties"}], "methods": [{"identifier": "Particle", "parameters": "()", "modifiers": "public", "return": "", "signature": " Particle()", "full_signature": "public  Particle()", "class_method_signature": "Particle.Particle()", "testcase": false, "constructor": true}, {"identifier": "Particle", "parameters": "(Particle p)", "modifiers": "public", "return": "", "signature": " Particle(Particle p)", "full_signature": "public  Particle(Particle p)", "class_method_signature": "Particle.Particle(Particle p)", "testcase": false, "constructor": true}, {"identifier": "Particle", "parameters": "(int pid, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public", "return": "", "signature": " Particle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public  Particle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.Particle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": true}, {"identifier": "Particle", "parameters": "(int pid, double px, double py, double pz)", "modifiers": "public", "return": "", "signature": " Particle(int pid, double px, double py, double pz)", "full_signature": "public  Particle(int pid, double px, double py, double pz)", "class_method_signature": "Particle.Particle(int pid, double px, double py, double pz)", "testcase": false, "constructor": true}, {"identifier": "Particle", "parameters": "(int pid, double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public", "return": "", "signature": " Particle(int pid, double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public  Particle(int pid, double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.Particle(int pid, double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": true}, {"identifier": "createWithMassCharge", "parameters": "(double mass, int charge ,double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public static", "return": "Particle", "signature": "Particle createWithMassCharge(double mass, int charge ,double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public static Particle createWithMassCharge(double mass, int charge ,double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.createWithMassCharge(double mass, int charge ,double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "createWithPid", "parameters": "(int pid ,double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public static", "return": "Particle", "signature": "Particle createWithPid(int pid ,double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public static Particle createWithPid(int pid ,double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.createWithPid(int pid ,double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "initParticleWithMass", "parameters": "(double mass, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public final", "return": "void", "signature": "void initParticleWithMass(double mass, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public final void initParticleWithMass(double mass, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.initParticleWithMass(double mass, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "initParticle", "parameters": "(int pid, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public final", "return": "void", "signature": "void initParticle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public final void initParticle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.initParticle(int pid, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "setP", "parameters": "(double mom)", "modifiers": "public", "return": "void", "signature": "void setP(double mom)", "full_signature": "public void setP(double mom)", "class_method_signature": "Particle.setP(double mom)", "testcase": false, "constructor": false}, {"identifier": "setTheta", "parameters": "(double theta)", "modifiers": "public", "return": "void", "signature": "void setTheta(double theta)", "full_signature": "public void setTheta(double theta)", "class_method_signature": "Particle.setTheta(double theta)", "testcase": false, "constructor": false}, {"identifier": "changePid", "parameters": "(int pid)", "modifiers": "public", "return": "void", "signature": "void changePid(int pid)", "full_signature": "public void changePid(int pid)", "class_method_signature": "Particle.changePid(int pid)", "testcase": false, "constructor": false}, {"identifier": "setParticleWithMass", "parameters": "(double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public", "return": "void", "signature": "void setParticleWithMass(double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public void setParticleWithMass(double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.setParticleWithMass(double mass, byte charge, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "setVector", "parameters": "(int pid, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "public", "return": "void", "signature": "void setVector(int pid, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": "public void setVector(int pid, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.setVector(int pid, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "px", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double px()", "full_signature": "public double px()", "class_method_signature": "Particle.px()", "testcase": false, "constructor": false}, {"identifier": "py", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double py()", "full_signature": "public double py()", "class_method_signature": "Particle.py()", "testcase": false, "constructor": false}, {"identifier": "pz", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double pz()", "full_signature": "public double pz()", "class_method_signature": "Particle.pz()", "testcase": false, "constructor": false}, {"identifier": "p", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double p()", "full_signature": "public double p()", "class_method_signature": "Particle.p()", "testcase": false, "constructor": false}, {"identifier": "theta", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double theta()", "full_signature": "public double theta()", "class_method_signature": "Particle.theta()", "testcase": false, "constructor": false}, {"identifier": "phi", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double phi()", "full_signature": "public double phi()", "class_method_signature": "Particle.phi()", "testcase": false, "constructor": false}, {"identifier": "e", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double e()", "full_signature": "public double e()", "class_method_signature": "Particle.e()", "testcase": false, "constructor": false}, {"identifier": "vx", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double vx()", "full_signature": "public double vx()", "class_method_signature": "Particle.vx()", "testcase": false, "constructor": false}, {"identifier": "vy", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double vy()", "full_signature": "public double vy()", "class_method_signature": "Particle.vy()", "testcase": false, "constructor": false}, {"identifier": "vz", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double vz()", "full_signature": "public double vz()", "class_method_signature": "Particle.vz()", "testcase": false, "constructor": false}, {"identifier": "clearProperties", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearProperties()", "full_signature": "public void clearProperties()", "class_method_signature": "Particle.clearProperties()", "testcase": false, "constructor": false}, {"identifier": "setVector", "parameters": "(int pid, Vector3 nvect, Vector3 nvert)", "modifiers": "public", "return": "void", "signature": "void setVector(int pid, Vector3 nvect, Vector3 nvert)", "full_signature": "public void setVector(int pid, Vector3 nvect, Vector3 nvert)", "class_method_signature": "Particle.setVector(int pid, Vector3 nvect, Vector3 nvert)", "testcase": false, "constructor": false}, {"identifier": "euclideanDistance", "parameters": "(Particle part)", "modifiers": "public", "return": "double", "signature": "double euclideanDistance(Particle part)", "full_signature": "public double euclideanDistance(Particle part)", "class_method_signature": "Particle.euclideanDistance(Particle part)", "testcase": false, "constructor": false}, {"identifier": "cosTheta", "parameters": "(Particle part)", "modifiers": "public", "return": "double", "signature": "double cosTheta(Particle part)", "full_signature": "public double cosTheta(Particle part)", "class_method_signature": "Particle.cosTheta(Particle part)", "testcase": false, "constructor": false}, {"identifier": "initParticleWithMassSquare", "parameters": "(double mass2, double px, double py, double pz, double vx, double vy, double vz)", "modifiers": "", "return": "void", "signature": "void initParticleWithMassSquare(double mass2, double px, double py, double pz, double vx, double vy, double vz)", "full_signature": " void initParticleWithMassSquare(double mass2, double px, double py, double pz, double vx, double vy, double vz)", "class_method_signature": "Particle.initParticleWithMassSquare(double mass2, double px, double py, double pz, double vx, double vy, double vz)", "testcase": false, "constructor": false}, {"identifier": "initParticleWithPidMassSquare", "parameters": "(int pid, int charge, double mass2, double px, double py, double pz, double vx, double vy,\n\t        double vz)", "modifiers": "public", "return": "void", "signature": "void initParticleWithPidMassSquare(int pid, int charge, double mass2, double px, double py, double pz, double vx, double vy,\n\t        double vz)", "full_signature": "public void initParticleWithPidMassSquare(int pid, int charge, double mass2, double px, double py, double pz, double vx, double vy,\n\t        double vz)", "class_method_signature": "Particle.initParticleWithPidMassSquare(int pid, int charge, double mass2, double px, double py, double pz, double vx, double vy,\n\t        double vz)", "testcase": false, "constructor": false}, {"identifier": "setVector", "parameters": "(LorentzVector nvec, Vector3 nvert)", "modifiers": "public", "return": "void", "signature": "void setVector(LorentzVector nvec, Vector3 nvert)", "full_signature": "public void setVector(LorentzVector nvec, Vector3 nvert)", "class_method_signature": "Particle.setVector(LorentzVector nvec, Vector3 nvert)", "testcase": false, "constructor": false}, {"identifier": "mass", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mass()", "full_signature": "public double mass()", "class_method_signature": "Particle.mass()", "testcase": false, "constructor": false}, {"identifier": "mass2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mass2()", "full_signature": "public double mass2()", "class_method_signature": "Particle.mass2()", "testcase": false, "constructor": false}, {"identifier": "charge", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int charge()", "full_signature": "public int charge()", "class_method_signature": "Particle.charge()", "testcase": false, "constructor": false}, {"identifier": "pid", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int pid()", "full_signature": "public int pid()", "class_method_signature": "Particle.pid()", "testcase": false, "constructor": false}, {"identifier": "gid", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int gid()", "full_signature": "public int gid()", "class_method_signature": "Particle.gid()", "testcase": false, "constructor": false}, {"identifier": "vector", "parameters": "()", "modifiers": "public", "return": "LorentzVector", "signature": "LorentzVector vector()", "full_signature": "public LorentzVector vector()", "class_method_signature": "Particle.vector()", "testcase": false, "constructor": false}, {"identifier": "vertex", "parameters": "()", "modifiers": "public", "return": "Vector3", "signature": "Vector3 vertex()", "full_signature": "public Vector3 vertex()", "class_method_signature": "Particle.vertex()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String pname)", "modifiers": "public", "return": "double", "signature": "double getProperty(String pname)", "full_signature": "public double getProperty(String pname)", "class_method_signature": "Particle.getProperty(String pname)", "testcase": false, "constructor": false}, {"identifier": "inFrame", "parameters": "(Particle parent)", "modifiers": "public", "return": "Particle", "signature": "Particle inFrame(Particle parent)", "full_signature": "public Particle inFrame(Particle parent)", "class_method_signature": "Particle.inFrame(Particle parent)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String pname)", "modifiers": "public", "return": "double", "signature": "double get(String pname)", "full_signature": "public double get(String pname)", "class_method_signature": "Particle.get(String pname)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(String pname)", "modifiers": "public", "return": "boolean", "signature": "boolean hasProperty(String pname)", "full_signature": "public boolean hasProperty(String pname)", "class_method_signature": "Particle.hasProperty(String pname)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String pname, double value)", "modifiers": "public", "return": "void", "signature": "void setProperty(String pname, double value)", "full_signature": "public void setProperty(String pname, double value)", "class_method_signature": "Particle.setProperty(String pname, double value)", "testcase": false, "constructor": false}, {"identifier": "propertyString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String propertyString()", "full_signature": "public String propertyString()", "class_method_signature": "Particle.propertyString()", "testcase": false, "constructor": false}, {"identifier": "toLundString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toLundString()", "full_signature": "public String toLundString()", "class_method_signature": "Particle.toLundString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Particle.toString()", "testcase": false, "constructor": false}, {"identifier": "copyParticle", "parameters": "(Particle part)", "modifiers": "public", "return": "void", "signature": "void copyParticle(Particle part)", "full_signature": "public void copyParticle(Particle part)", "class_method_signature": "Particle.copyParticle(Particle part)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Particle part)", "modifiers": "public", "return": "void", "signature": "void copy(Particle part)", "full_signature": "public void copy(Particle part)", "class_method_signature": "Particle.copy(Particle part)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(Particle cpart, int sign)", "modifiers": "public", "return": "void", "signature": "void combine(Particle cpart, int sign)", "full_signature": "public void combine(Particle cpart, int sign)", "class_method_signature": "Particle.combine(Particle cpart, int sign)", "testcase": false, "constructor": false}, {"identifier": "particleDoca", "parameters": "(Particle cpart)", "modifiers": "public", "return": "Vector3", "signature": "Vector3 particleDoca(Particle cpart)", "full_signature": "public Vector3 particleDoca(Particle cpart)", "class_method_signature": "Particle.particleDoca(Particle cpart)", "testcase": false, "constructor": false}], "file": "common-tools/clas-physics/src/main/java/org/jlab/clas/physics/Particle.java"}, "focal_method": {"identifier": "euclideanDistance", "parameters": "(Particle part)", "modifiers": "public", "return": "double", "body": "public double euclideanDistance(Particle part) {\n\t\tdouble xx = (this.vector().px() - part.vector().px());\n\t\tdouble yy = (this.vector().py() - part.vector().py());\n\t\tdouble zz = (this.vector().pz() - part.vector().pz());\n\t\treturn Math.sqrt(xx * xx + yy * yy + zz * zz);\n\t}", "signature": "double euclideanDistance(Particle part)", "full_signature": "public double euclideanDistance(Particle part)", "class_method_signature": "Particle.euclideanDistance(Particle part)", "testcase": false, "constructor": false, "invocations": ["px", "vector", "px", "vector", "py", "vector", "py", "vector", "pz", "vector", "pz", "vector", "sqrt"]}, "repository": {"repo_id": 84985373, "url": "https://github.com/JeffersonLab/clas12-offline-software", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 5, "size": 561666, "license": "licensed"}}