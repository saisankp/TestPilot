{"test_class": {"identifier": "BlockingOperatorToFutureTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorToFutureTest.java"}, "test_case": {"identifier": "testToFutureList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToFutureList() throws InterruptedException, ExecutionException {\n        Observable<String> obs = Observable.just(\"one\", \"two\", \"three\");\n        Future<List<String>> f = toFuture(obs.toList());\n        assertEquals(\"one\", f.get().get(0));\n        assertEquals(\"two\", f.get().get(1));\n        assertEquals(\"three\", f.get().get(2));\n    }", "signature": "void testToFutureList()", "full_signature": "@Test public void testToFutureList()", "class_method_signature": "BlockingOperatorToFutureTest.testToFutureList()", "testcase": true, "constructor": false, "invocations": ["just", "toFuture", "toList", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "BlockingOperatorToFuture", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorToFuture", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorToFuture()", "full_signature": "private  BlockingOperatorToFuture()", "class_method_signature": "BlockingOperatorToFuture.BlockingOperatorToFuture()", "testcase": false, "constructor": true}, {"identifier": "toFuture", "parameters": "(Observable<? extends T> that)", "modifiers": "public static", "return": "Future<T>", "signature": "Future<T> toFuture(Observable<? extends T> that)", "full_signature": "public static Future<T> toFuture(Observable<? extends T> that)", "class_method_signature": "BlockingOperatorToFuture.toFuture(Observable<? extends T> that)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorToFuture.java"}, "focal_method": {"identifier": "toFuture", "parameters": "(Observable<? extends T> that)", "modifiers": "public static", "return": "Future<T>", "body": "public static <T> Future<T> toFuture(Observable<? extends T> that) {\n\n        final CountDownLatch finished = new CountDownLatch(1);\n        final AtomicReference<T> value = new AtomicReference<T>();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        final Subscription s = that.single().subscribe(new Subscriber<T>() {\n\n            @Override\n            public void onCompleted() {\n                finished.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                error.compareAndSet(null, e);\n                finished.countDown();\n            }\n\n            @Override\n            public void onNext(T v) {\n                // \"single\" guarantees there is only one \"onNext\"\n                value.set(v);\n            }\n        });\n\n        return new Future<T>() {\n\n            private volatile boolean cancelled = false;\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                if (finished.getCount() > 0) {\n                    cancelled = true;\n                    s.unsubscribe();\n                    // release the latch (a race condition may have already released it by now)\n                    finished.countDown();\n                    return true;\n                } else {\n                    // can't cancel\n                    return false;\n                }\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return cancelled;\n            }\n\n            @Override\n            public boolean isDone() {\n                return finished.getCount() == 0;\n            }\n\n            @Override\n            public T get() throws InterruptedException, ExecutionException {\n                finished.await();\n                return getValue();\n            }\n\n            @Override\n            public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                if (finished.await(timeout, unit)) {\n                    return getValue();\n                } else {\n                    throw new TimeoutException(\"Timed out after \" + unit.toMillis(timeout) + \"ms waiting for underlying Observable.\");\n                }\n            }\n\n            private T getValue() throws ExecutionException {\n                if (error.get() != null) {\n                    throw new ExecutionException(\"Observable onError\", error.get());\n                } else if (cancelled) {\n                    // Contract of Future.get() requires us to throw this:\n                    throw new CancellationException(\"Subscription unsubscribed\");\n                } else {\n                    return value.get();\n                }\n            }\n\n        };\n\n    }", "signature": "Future<T> toFuture(Observable<? extends T> that)", "full_signature": "public static Future<T> toFuture(Observable<? extends T> that)", "class_method_signature": "BlockingOperatorToFuture.toFuture(Observable<? extends T> that)", "testcase": false, "constructor": false, "invocations": ["subscribe", "single", "countDown", "compareAndSet", "countDown", "set", "getCount", "unsubscribe", "countDown", "getCount", "await", "getValue", "await", "getValue", "toMillis", "get", "get", "get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}