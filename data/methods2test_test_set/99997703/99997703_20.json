{"test_class": {"identifier": "QuadraticRootFinderTest", "superclass": "", "interfaces": "implements UtilityClassTest", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/maths/QuadraticRootFinderTest.java"}, "test_case": {"identifier": "find_whenGivenLinearEquation_thenReturnsCorrectRoot", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void find_whenGivenLinearEquation_thenReturnsCorrectRoot() {\n        ImmutableList<Complex> roots = QuadraticRootFinder.find(0, 2, 1);\n\n        ImmutableList<Pair<Double, Double>> expectedRoots = ImmutableList.of(\n                Pair.of(-0.5, 0.0)\n        );\n        assertEquals(expectedRoots, roots);\n    }", "signature": "void find_whenGivenLinearEquation_thenReturnsCorrectRoot()", "full_signature": "@Test void find_whenGivenLinearEquation_thenReturnsCorrectRoot()", "class_method_signature": "QuadraticRootFinderTest.find_whenGivenLinearEquation_thenReturnsCorrectRoot()", "testcase": true, "constructor": false, "invocations": ["find", "of", "of", "assertEquals"]}, "focal_class": {"identifier": "QuadraticRootFinder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "QuadraticRootFinder", "parameters": "()", "modifiers": "private", "return": "", "signature": " QuadraticRootFinder()", "full_signature": "private  QuadraticRootFinder()", "class_method_signature": "QuadraticRootFinder.QuadraticRootFinder()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(double a, double b, double c)", "modifiers": "public static", "return": "ImmutableList<Complex>", "signature": "ImmutableList<Complex> find(double a, double b, double c)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c)", "class_method_signature": "QuadraticRootFinder.find(double a, double b, double c)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/maths/QuadraticRootFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(double a, double b, double c)", "modifiers": "public static", "return": "ImmutableList<Complex>", "body": "public static ImmutableList<Complex> find(double a, double b, double c) {\n        if (a == 0) {\n            Preconditions.checkArgument(b != 0, \"No solutions can be found for an equation of the form c = 0\");\n            return ImmutableList.of(new Complex(-c / b, 0));\n        }\n\n        double discriminant = Math.pow(b, 2) - 4 * a * c;\n\n        if (discriminant < 0) {\n            Complex rootOne = new Complex(-b / (2 * a), Math.sqrt(-discriminant) / (2 * a));\n            Complex rootTwo = new Complex(rootOne.getReal(), -rootOne.getImaginary());\n            return ImmutableList.of(rootOne, rootTwo);\n        }\n\n        Complex rootOne =  new Complex((-b + Math.sqrt(discriminant)) / (2 * a), 0d);\n        Complex rootTwo =  new Complex((-b - Math.sqrt(discriminant)) / (2 * a), 0d);\n        return ImmutableList.of(rootOne, rootTwo);\n    }", "signature": "ImmutableList<Complex> find(double a, double b, double c)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c)", "class_method_signature": "QuadraticRootFinder.find(double a, double b, double c)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "of", "pow", "sqrt", "getReal", "getImaginary", "of", "sqrt", "sqrt", "of"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}