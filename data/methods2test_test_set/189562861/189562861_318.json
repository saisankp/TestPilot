{"test_class": {"identifier": "UrlUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String localAddress = \"127.0.0.1\";", "modifier": "", "type": "String", "declarator": "localAddress = \"127.0.0.1\"", "var_name": "localAddress"}], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/UrlUtilsTest.java"}, "test_case": {"identifier": "testParseUrls", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseUrls() {\n        String addresses = \"192.168.0.1|192.168.0.2|192.168.0.3\";\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"username\", \"root\");\n        parameters.put(\"password\", \"alibaba\");\n        parameters.put(\"port\", \"10000\");\n        parameters.put(\"protocol\", \"dubbo\");\n        List<URL> urls = UrlUtils.parseURLs(addresses, parameters);\n        assertEquals(\"192.168.0.1\" + \":10000\", urls.get(0).getAddress());\n        assertEquals(\"192.168.0.2\" + \":10000\", urls.get(1).getAddress());\n    }", "signature": "void testParseUrls()", "full_signature": "@Test public void testParseUrls()", "class_method_signature": "UrlUtilsTest.testParseUrls()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "parseURLs", "assertEquals", "getAddress", "get", "assertEquals", "getAddress", "get"]}, "focal_class": {"identifier": "UrlUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseURL", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "URL", "signature": "URL parseURL(String address, Map<String, String> defaults)", "full_signature": "public static URL parseURL(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURL(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "parseURLs", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> parseURLs(String address, Map<String, String> defaults)", "full_signature": "public static List<URL> parseURLs(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURLs(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "convertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.convertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "convertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> convertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> convertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.convertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.revertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "revertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> revertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> revertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.revertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertNotify", "parameters": "(Map<String, Map<String, String>> notify)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "full_signature": "public static Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "class_method_signature": "UrlUtils.revertNotify(Map<String, Map<String, String>> notify)", "testcase": false, "constructor": false}, {"identifier": "revertForbid", "parameters": "(List<String> forbid, Set<URL> subscribed)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "full_signature": "public static List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "class_method_signature": "UrlUtils.revertForbid(List<String> forbid, Set<URL> subscribed)", "testcase": false, "constructor": false}, {"identifier": "getEmptyUrl", "parameters": "(String service, String category)", "modifiers": "public static", "return": "URL", "signature": "URL getEmptyUrl(String service, String category)", "full_signature": "public static URL getEmptyUrl(String service, String category)", "class_method_signature": "UrlUtils.getEmptyUrl(String service, String category)", "testcase": false, "constructor": false}, {"identifier": "isMatchCategory", "parameters": "(String category, String categories)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchCategory(String category, String categories)", "full_signature": "public static boolean isMatchCategory(String category, String categories)", "class_method_signature": "UrlUtils.isMatchCategory(String category, String categories)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(URL consumerUrl, URL providerUrl)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatch(URL consumerUrl, URL providerUrl)", "full_signature": "public static boolean isMatch(URL consumerUrl, URL providerUrl)", "class_method_signature": "UrlUtils.isMatch(URL consumerUrl, URL providerUrl)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value, URL param)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value, URL param)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value, URL param)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value, URL param)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "isServiceKeyMatch", "parameters": "(URL pattern, URL value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceKeyMatch(URL pattern, URL value)", "full_signature": "public static boolean isServiceKeyMatch(URL pattern, URL value)", "class_method_signature": "UrlUtils.isServiceKeyMatch(URL pattern, URL value)", "testcase": false, "constructor": false}, {"identifier": "isItemMatch", "parameters": "(String pattern, String value)", "modifiers": "static", "return": "boolean", "signature": "boolean isItemMatch(String pattern, String value)", "full_signature": "static boolean isItemMatch(String pattern, String value)", "class_method_signature": "UrlUtils.isItemMatch(String pattern, String value)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/UrlUtils.java"}, "focal_method": {"identifier": "parseURLs", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "List<URL>", "body": "public static List<URL> parseURLs(String address, Map<String, String> defaults) {\n        if (address == null || address.length() == 0) {\n            return null;\n        }\n        String[] addresses = Constants.REGISTRY_SPLIT_PATTERN.split(address);\n        if (addresses == null || addresses.length == 0) {\n            return null; //here won't be empty\n        }\n        List<URL> registries = new ArrayList<URL>();\n        for (String addr : addresses) {\n            registries.add(parseURL(addr, defaults));\n        }\n        return registries;\n    }", "signature": "List<URL> parseURLs(String address, Map<String, String> defaults)", "full_signature": "public static List<URL> parseURLs(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURLs(String address, Map<String, String> defaults)", "testcase": false, "constructor": false, "invocations": ["length", "split", "add", "parseURL"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}