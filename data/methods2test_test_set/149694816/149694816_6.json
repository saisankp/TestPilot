{"test_class": {"identifier": "SourceTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/build/res/SourceTest.java"}, "test_case": {"identifier": "testReadImports", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadImports() throws IOException {\n    final ProjectFile projectFile = new ProjectFile();\n    final Project project = new Project(randomUUID().toString(), projectFile);\n    final Source source = new Source(project, randomUUID().toString());\n    source.setContentProvider(() -> openWithExtensionAs(\"lua\"));\n    final List<String> libraries = source.readImports();\n    assertEquals(3, libraries.size());\n  }", "signature": "void testReadImports()", "full_signature": "@Test public void testReadImports()", "class_method_signature": "SourceTest.testReadImports()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "toString", "randomUUID", "setContentProvider", "openWithExtensionAs", "readImports", "assertEquals", "size"]}, "focal_class": {"identifier": "Source", "superclass": "extends File", "interfaces": "", "fields": [{"original_string": "protected static final String IMPORT_PREFIX = \"import\";", "modifier": "protected static final", "type": "String", "declarator": "IMPORT_PREFIX = \"import\"", "var_name": "IMPORT_PREFIX"}, {"original_string": "protected static final String[] QUOTES = new String[] { \"\\\"\", \"'\" };", "modifier": "protected static final", "type": "String[]", "declarator": "QUOTES = new String[] { \"\\\"\", \"'\" }", "var_name": "QUOTES"}, {"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "extractLiteralPart", "parameters": "(final String line)", "modifiers": "protected static", "return": "Optional<String>", "signature": "Optional<String> extractLiteralPart(final String line)", "full_signature": "protected static Optional<String> extractLiteralPart(final String line)", "class_method_signature": "Source.extractLiteralPart(final String line)", "testcase": false, "constructor": false}, {"identifier": "fromImport", "parameters": "(final String line)", "modifiers": "protected static", "return": "String", "signature": "String fromImport(final String line)", "full_signature": "protected static String fromImport(final String line)", "class_method_signature": "Source.fromImport(final String line)", "testcase": false, "constructor": false}, {"identifier": "Source", "parameters": "(final Project project, final String location)", "modifiers": "public", "return": "", "signature": " Source(final Project project, final String location)", "full_signature": "public  Source(final Project project, final String location)", "class_method_signature": "Source.Source(final Project project, final String location)", "testcase": false, "constructor": true}, {"identifier": "getDependencies", "parameters": "(final ResourceManager resourceManager)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getDependencies(final ResourceManager resourceManager)", "full_signature": "@Override public List<Resource> getDependencies(final ResourceManager resourceManager)", "class_method_signature": "Source.getDependencies(final ResourceManager resourceManager)", "testcase": false, "constructor": false}, {"identifier": "readNextImports", "parameters": "(final BufferedReader bufferedReader)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> readNextImports(final BufferedReader bufferedReader)", "full_signature": "protected List<String> readNextImports(final BufferedReader bufferedReader)", "class_method_signature": "Source.readNextImports(final BufferedReader bufferedReader)", "testcase": false, "constructor": false}, {"identifier": "readImports", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> readImports()", "full_signature": "public List<String> readImports()", "class_method_signature": "Source.readImports()", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(final ResourceManager resourceManager, final String importPath)", "modifiers": "protected", "return": "Resource", "signature": "Resource bind(final ResourceManager resourceManager, final String importPath)", "full_signature": "protected Resource bind(final ResourceManager resourceManager, final String importPath)", "class_method_signature": "Source.bind(final ResourceManager resourceManager, final String importPath)", "testcase": false, "constructor": false}, {"identifier": "getBody", "parameters": "()", "modifiers": "public", "return": "Text", "signature": "Text getBody()", "full_signature": "public Text getBody()", "class_method_signature": "Source.getBody()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Source.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Source.equals(Object obj)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/res/Source.java"}, "focal_method": {"identifier": "readImports", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> readImports() throws IOException {\n    final List<String> imports = new ArrayList<>();\n    try (final BufferedReader sourceIn = open()) {\n      // Read line by line\n      return readNextImports(sourceIn);\n    } catch (final NoSuchFileException e) {\n      logger.trace(\"{} not found\", location);\n      return emptyList();\n    }\n  }", "signature": "List<String> readImports()", "full_signature": "public List<String> readImports()", "class_method_signature": "Source.readImports()", "testcase": false, "constructor": false, "invocations": ["open", "readNextImports", "trace", "emptyList"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}