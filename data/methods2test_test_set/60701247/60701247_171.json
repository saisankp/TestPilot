{"test_class": {"identifier": "StackTraceExpanderTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/logcat/StackTraceExpanderTest.java"}, "test_case": {"identifier": "testCausedByMatcher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCausedByMatcher() {\n    String[] validCauses = new String[] {\n      \"Caused by: java.lang.RuntimeException\",\n      \"    Caused by: java.io.IOException\",\n      \"\\tCaused by: java.lang.IllegalArgumentException\"\n    };\n\n    for (String cause: validCauses) {\n      assertThat(StackTraceExpander.getCauseLine(cause)).isEqualTo(cause.trim());\n    }\n\n    String[] invalidCauses = new String[] {\n      \"at com.example.t1.MainActivity.one(MainActivity.java:31)\",\n      \"... 15 more\"\n    };\n\n    for (String cause: invalidCauses) {\n      Assert.assertNull(StackTraceExpander.getCauseLine(cause));\n    }\n  }", "signature": "void testCausedByMatcher()", "full_signature": "@Test public void testCausedByMatcher()", "class_method_signature": "StackTraceExpanderTest.testCausedByMatcher()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getCauseLine", "trim", "assertNull", "getCauseLine"]}, "focal_class": {"identifier": "StackTraceExpander", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern EXCEPTION_LINE_PATTERN = Pattern.compile(\"^\\\\s*(at .*\\\\(.*\\\\))$\");", "modifier": "private static final", "type": "Pattern", "declarator": "EXCEPTION_LINE_PATTERN = Pattern.compile(\"^\\\\s*(at .*\\\\(.*\\\\))$\")", "var_name": "EXCEPTION_LINE_PATTERN"}, {"original_string": "private static final Pattern ELIDED_LINE_PATTERN = Pattern.compile(\"^\\\\s*... (\\\\d+) more$\");", "modifier": "private static final", "type": "Pattern", "declarator": "ELIDED_LINE_PATTERN = Pattern.compile(\"^\\\\s*... (\\\\d+) more$\")", "var_name": "ELIDED_LINE_PATTERN"}, {"original_string": "private static final Pattern CAUSED_BY_LINE_PATTERN = Pattern.compile(\"^\\\\s*(Caused by:.*)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "CAUSED_BY_LINE_PATTERN = Pattern.compile(\"^\\\\s*(Caused by:.*)$\")", "var_name": "CAUSED_BY_LINE_PATTERN"}, {"original_string": "private static final String EXPANDED_STACK_TRACE_MARKER = \"\\u00A0\";", "modifier": "private static final", "type": "String", "declarator": "EXPANDED_STACK_TRACE_MARKER = \"\\u00A0\"", "var_name": "EXPANDED_STACK_TRACE_MARKER"}, {"original_string": "@NotNull private final String myStackTracePrefix;", "modifier": "@NotNull private final", "type": "String", "declarator": "myStackTracePrefix", "var_name": "myStackTracePrefix"}, {"original_string": "@NotNull private final String myCauseLinePrefix;", "modifier": "@NotNull private final", "type": "String", "declarator": "myCauseLinePrefix", "var_name": "myCauseLinePrefix"}, {"original_string": "private List<String> myProcessedLines = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "myProcessedLines = new ArrayList<String>()", "var_name": "myProcessedLines"}, {"original_string": "private List<String> myCurrentStack = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "myCurrentStack = new ArrayList<String>()", "var_name": "myCurrentStack"}, {"original_string": "private List<String> myPreviousStack = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "myPreviousStack = new ArrayList<String>()", "var_name": "myPreviousStack"}, {"original_string": "private boolean myIsInTrace;", "modifier": "private", "type": "boolean", "declarator": "myIsInTrace", "var_name": "myIsInTrace"}], "methods": [{"identifier": "StackTraceExpander", "parameters": "(@NotNull String stackTraceLinePrefix, @NotNull String stackTraceCauseLinePrefix)", "modifiers": "public", "return": "", "signature": " StackTraceExpander(@NotNull String stackTraceLinePrefix, @NotNull String stackTraceCauseLinePrefix)", "full_signature": "public  StackTraceExpander(@NotNull String stackTraceLinePrefix, @NotNull String stackTraceCauseLinePrefix)", "class_method_signature": "StackTraceExpander.StackTraceExpander(@NotNull String stackTraceLinePrefix, @NotNull String stackTraceCauseLinePrefix)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "StackTraceExpander.reset()", "testcase": false, "constructor": false}, {"identifier": "wasLineExpanded", "parameters": "(@NotNull String line)", "modifiers": "public static", "return": "boolean", "signature": "boolean wasLineExpanded(@NotNull String line)", "full_signature": "public static boolean wasLineExpanded(@NotNull String line)", "class_method_signature": "StackTraceExpander.wasLineExpanded(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(@NotNull String line)", "modifiers": "@NotNull public", "return": "List<String>", "signature": "List<String> process(@NotNull String line)", "full_signature": "@NotNull public List<String> process(@NotNull String line)", "class_method_signature": "StackTraceExpander.process(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "getStackLine", "parameters": "(@NotNull String line)", "modifiers": "@VisibleForTesting @Nullable static", "return": "String", "signature": "String getStackLine(@NotNull String line)", "full_signature": "@VisibleForTesting @Nullable static String getStackLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.getStackLine(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "getCauseLine", "parameters": "(@NotNull String line)", "modifiers": "@VisibleForTesting @Nullable static", "return": "String", "signature": "String getCauseLine(@NotNull String line)", "full_signature": "@VisibleForTesting @Nullable static String getCauseLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.getCauseLine(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "getElidedFrameCount", "parameters": "(@NotNull String line)", "modifiers": "@VisibleForTesting static", "return": "int", "signature": "int getElidedFrameCount(@NotNull String line)", "full_signature": "@VisibleForTesting static int getElidedFrameCount(@NotNull String line)", "class_method_signature": "StackTraceExpander.getElidedFrameCount(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "handleNormalLine", "parameters": "(@NotNull String line)", "modifiers": "private", "return": "void", "signature": "void handleNormalLine(@NotNull String line)", "full_signature": "private void handleNormalLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.handleNormalLine(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "handleStackTraceLine", "parameters": "(@NotNull String line)", "modifiers": "private", "return": "void", "signature": "void handleStackTraceLine(@NotNull String line)", "full_signature": "private void handleStackTraceLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.handleStackTraceLine(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "handleCausedByLine", "parameters": "(@NotNull String line)", "modifiers": "private", "return": "void", "signature": "void handleCausedByLine(@NotNull String line)", "full_signature": "private void handleCausedByLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.handleCausedByLine(@NotNull String line)", "testcase": false, "constructor": false}, {"identifier": "handleElidedLine", "parameters": "(@NotNull String line, int elidedCount)", "modifiers": "private", "return": "void", "signature": "void handleElidedLine(@NotNull String line, int elidedCount)", "full_signature": "private void handleElidedLine(@NotNull String line, int elidedCount)", "class_method_signature": "StackTraceExpander.handleElidedLine(@NotNull String line, int elidedCount)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/logcat/StackTraceExpander.java"}, "focal_method": {"identifier": "getCauseLine", "parameters": "(@NotNull String line)", "modifiers": "@VisibleForTesting @Nullable static", "return": "String", "body": "@VisibleForTesting\n  @Nullable\n  static String getCauseLine(@NotNull String line) {\n    Matcher matcher = CAUSED_BY_LINE_PATTERN.matcher(line);\n    return matcher.matches() ? matcher.group(1) : null;\n  }", "signature": "String getCauseLine(@NotNull String line)", "full_signature": "@VisibleForTesting @Nullable static String getCauseLine(@NotNull String line)", "class_method_signature": "StackTraceExpander.getCauseLine(@NotNull String line)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}