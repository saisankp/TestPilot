{"test_class": {"identifier": "LocalFileReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path tempDirectory1;", "modifier": "private", "type": "Path", "declarator": "tempDirectory1", "var_name": "tempDirectory1"}, {"original_string": "private Path tempDirectory2;", "modifier": "private", "type": "Path", "declarator": "tempDirectory2", "var_name": "tempDirectory2"}, {"original_string": "private Path file1;", "modifier": "private", "type": "Path", "declarator": "file1", "var_name": "file1"}, {"original_string": "private Path file2;", "modifier": "private", "type": "Path", "declarator": "file2", "var_name": "file2"}], "file": "protostuff-parser/src/test/java/io/protostuff/compiler/parser/LocalFileReaderTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() throws Exception {\n        LocalFileReader reader = new LocalFileReader(tempDirectory1, tempDirectory2);\n        CharStream a = reader.read(\"1.proto\");\n        CharStream b = reader.read(\"2.proto\");\n        CharStream c = reader.read(\"3.proto\");\n        assertNotNull(a);\n        assertNotNull(b);\n        assertNull(c);\n        assertEquals(\"1\", a.getText(Interval.of(0, 1)));\n        assertEquals(\"2\", b.getText(Interval.of(0, 1)));\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "LocalFileReaderTest.testRead()", "testcase": true, "constructor": false, "invocations": ["read", "read", "read", "assertNotNull", "assertNotNull", "assertNull", "assertEquals", "getText", "of", "assertEquals", "getText", "of"]}, "focal_class": {"identifier": "LocalFileReader", "superclass": "", "interfaces": "implements FileReader", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LocalFileReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LocalFileReader.class)", "var_name": "LOGGER"}, {"original_string": "private final List<Path> pathList;", "modifier": "private final", "type": "List<Path>", "declarator": "pathList", "var_name": "pathList"}], "methods": [{"identifier": "LocalFileReader", "parameters": "(Path... paths)", "modifiers": "public", "return": "", "signature": " LocalFileReader(Path... paths)", "full_signature": "public  LocalFileReader(Path... paths)", "class_method_signature": "LocalFileReader.LocalFileReader(Path... paths)", "testcase": false, "constructor": true}, {"identifier": "LocalFileReader", "parameters": "(List<Path> paths)", "modifiers": "public", "return": "", "signature": " LocalFileReader(List<Path> paths)", "full_signature": "public  LocalFileReader(List<Path> paths)", "class_method_signature": "LocalFileReader.LocalFileReader(List<Path> paths)", "testcase": false, "constructor": true}, {"identifier": "checkDirectories", "parameters": "(List<Path> pathList)", "modifiers": "private", "return": "List<Path>", "signature": "List<Path> checkDirectories(List<Path> pathList)", "full_signature": "private List<Path> checkDirectories(List<Path> pathList)", "class_method_signature": "LocalFileReader.checkDirectories(List<Path> pathList)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String name)", "modifiers": "@Nullable @Override public", "return": "CharStream", "signature": "CharStream read(String name)", "full_signature": "@Nullable @Override public CharStream read(String name)", "class_method_signature": "LocalFileReader.read(String name)", "testcase": false, "constructor": false}], "file": "protostuff-parser/src/main/java/io/protostuff/compiler/parser/LocalFileReader.java"}, "focal_method": {"identifier": "read", "parameters": "(String name)", "modifiers": "@Nullable @Override public", "return": "CharStream", "body": "@Nullable\n    @Override\n    public CharStream read(String name) {\n        for (Path prefix : pathList) {\n            Path path = prefix.resolve(name);\n            if (Files.isRegularFile(path)) {\n                try {\n                    byte[] bytes = Files.readAllBytes(path);\n                    String result = new String(bytes, StandardCharsets.UTF_8);\n                    return CharStreams.fromString(result);\n                } catch (IOException e) {\n                    LOGGER.trace(\"Could not read {}\", path, e);\n                }\n            }\n        }\n        return null;\n    }", "signature": "CharStream read(String name)", "full_signature": "@Nullable @Override public CharStream read(String name)", "class_method_signature": "LocalFileReader.read(String name)", "testcase": false, "constructor": false, "invocations": ["resolve", "isRegularFile", "readAllBytes", "fromString", "trace"]}, "repository": {"repo_id": 32651977, "url": "https://github.com/protostuff/protostuff-compiler", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 30, "size": 1539, "license": "licensed"}}