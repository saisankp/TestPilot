{"test_class": {"identifier": "ConcurrentLRUCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConcurrentLRUCache<String, String> cache;", "modifier": "private", "type": "ConcurrentLRUCache<String, String>", "declarator": "cache", "var_name": "cache"}], "file": "zava/src/test/java/com/github/NoahShen/jue/util/ConcurrentLRUCacheTest.java"}, "test_case": {"identifier": "testPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPut() {\n\t\tfor (int i = 0; i < 10; ++i) {\n\t\t\tString key = i + \"\";\n\t\t\tString value = i + \"\";\n\t\t\tcache.put(key, value);\n\t\t}\n\t\tfor (int i = 0; i < 10; ++i) {\n\t\t\tString key = i + \"\";\n\t\t\tString value = i + \"\";\n\t\t\tAssert.assertEquals(value, cache.get(key));\n\t\t}\n\t\tAssert.assertEquals(10, cache.size());\n\t}", "signature": "void testPut()", "full_signature": "@Test public void testPut()", "class_method_signature": "ConcurrentLRUCacheTest.testPut()", "testcase": true, "constructor": false, "invocations": ["put", "assertEquals", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "ConcurrentLRUCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int MAX_SEGMENTS = 1 << 16;", "modifier": "static final", "type": "int", "declarator": "MAX_SEGMENTS = 1 << 16", "var_name": "MAX_SEGMENTS"}, {"original_string": "static final int MAX_CAPACITY = 1 << 16;", "modifier": "static final", "type": "int", "declarator": "MAX_CAPACITY = 1 << 16", "var_name": "MAX_CAPACITY"}, {"original_string": "public static final int DEFAULT_SEGMENTS = 16;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SEGMENTS = 16", "var_name": "DEFAULT_SEGMENTS"}, {"original_string": "public static final float DEFAULT_LOAD_FACTOR = 0.75f;", "modifier": "public static final", "type": "float", "declarator": "DEFAULT_LOAD_FACTOR = 0.75f", "var_name": "DEFAULT_LOAD_FACTOR"}, {"original_string": "private SegmentMap<K, V>[] segmentMaps;", "modifier": "private", "type": "SegmentMap<K, V>[]", "declarator": "segmentMaps", "var_name": "segmentMaps"}, {"original_string": "private int maxCapacity;", "modifier": "private", "type": "int", "declarator": "maxCapacity", "var_name": "maxCapacity"}], "methods": [{"identifier": "ConcurrentLRUCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConcurrentLRUCache()", "full_signature": "public  ConcurrentLRUCache()", "class_method_signature": "ConcurrentLRUCache.ConcurrentLRUCache()", "testcase": false, "constructor": true}, {"identifier": "ConcurrentLRUCache", "parameters": "(int maxCapacity)", "modifiers": "public", "return": "", "signature": " ConcurrentLRUCache(int maxCapacity)", "full_signature": "public  ConcurrentLRUCache(int maxCapacity)", "class_method_signature": "ConcurrentLRUCache.ConcurrentLRUCache(int maxCapacity)", "testcase": false, "constructor": true}, {"identifier": "ConcurrentLRUCache", "parameters": "(int maxCapacity, float loadFactor)", "modifiers": "public", "return": "", "signature": " ConcurrentLRUCache(int maxCapacity, float loadFactor)", "full_signature": "public  ConcurrentLRUCache(int maxCapacity, float loadFactor)", "class_method_signature": "ConcurrentLRUCache.ConcurrentLRUCache(int maxCapacity, float loadFactor)", "testcase": false, "constructor": true}, {"identifier": "ConcurrentLRUCache", "parameters": "(int maxCapacity, float loadFactor, int segments)", "modifiers": "public", "return": "", "signature": " ConcurrentLRUCache(int maxCapacity, float loadFactor, int segments)", "full_signature": "public  ConcurrentLRUCache(int maxCapacity, float loadFactor, int segments)", "class_method_signature": "ConcurrentLRUCache.ConcurrentLRUCache(int maxCapacity, float loadFactor, int segments)", "testcase": false, "constructor": true}, {"identifier": "hash", "parameters": "(int h)", "modifiers": "private", "return": "int", "signature": "int hash(int h)", "full_signature": "private int hash(int h)", "class_method_signature": "ConcurrentLRUCache.hash(int h)", "testcase": false, "constructor": false}, {"identifier": "segmentMapFor", "parameters": "(int hash)", "modifiers": "private", "return": "SegmentMap<K, V>", "signature": "SegmentMap<K, V> segmentMapFor(int hash)", "full_signature": "private SegmentMap<K, V> segmentMapFor(int hash)", "class_method_signature": "ConcurrentLRUCache.segmentMapFor(int hash)", "testcase": false, "constructor": false}, {"identifier": "newSegmentMapsArray", "parameters": "(int i)", "modifiers": "@SuppressWarnings( { \"unchecked\" }) private", "return": "SegmentMap<K, V>[]", "signature": "SegmentMap<K, V>[] newSegmentMapsArray(int i)", "full_signature": "@SuppressWarnings( { \"unchecked\" }) private SegmentMap<K, V>[] newSegmentMapsArray(int i)", "class_method_signature": "ConcurrentLRUCache.newSegmentMapsArray(int i)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ConcurrentLRUCache.clear()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "public boolean containsKey(Object key)", "class_method_signature": "ConcurrentLRUCache.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "public", "return": "V", "signature": "V get(Object key)", "full_signature": "public V get(Object key)", "class_method_signature": "ConcurrentLRUCache.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ConcurrentLRUCache.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "public V put(K key, V value)", "class_method_signature": "ConcurrentLRUCache.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "public", "return": "V", "signature": "V remove(Object key)", "full_signature": "public V remove(Object key)", "class_method_signature": "ConcurrentLRUCache.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ConcurrentLRUCache.size()", "testcase": false, "constructor": false}, {"identifier": "removeEldestEntry", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean removeEldestEntry()", "full_signature": "protected boolean removeEldestEntry()", "class_method_signature": "ConcurrentLRUCache.removeEldestEntry()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConcurrentLRUCache.toString()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/NoahShen/jue/util/ConcurrentLRUCache.java"}, "focal_method": {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "V", "body": "public V put(K key, V value) {\n\t\tint hash = hash(key.hashCode());\n\t\treturn segmentMapFor(hash).put(key, value);\n\t}", "signature": "V put(K key, V value)", "full_signature": "public V put(K key, V value)", "class_method_signature": "ConcurrentLRUCache.put(K key, V value)", "testcase": false, "constructor": false, "invocations": ["hash", "hashCode", "put", "segmentMapFor"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}