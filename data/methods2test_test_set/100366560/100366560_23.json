{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testParseNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNumber() throws Exception {\n        assertEquals(new Integer(1), NumberUtils.parseNumber(\"1\", Integer.class));\n        assertEquals(new Byte(\"1\"), NumberUtils.parseNumber(\"1\", Byte.class));\n        assertEquals(new Float(1.1), NumberUtils.parseNumber(\"1.1\", Float.class));\n        assertEquals(new Double(1.1), NumberUtils.parseNumber(\"1.1\", Double.class));\n        assertEquals(new Long(1), NumberUtils.parseNumber(\"1\", Long.class));\n        assertEquals(new Short(\"1\"), NumberUtils.parseNumber(\"1\", Short.class));\n        assertEquals(new BigInteger(\"1\"), NumberUtils.parseNumber(\"1\", BigInteger.class));\n    }", "signature": "void testParseNumber()", "full_signature": "@Test public void testParseNumber()", "class_method_signature": "NumberUtilsTest.testParseNumber()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseNumber", "assertEquals", "parseNumber", "assertEquals", "parseNumber", "assertEquals", "parseNumber", "assertEquals", "parseNumber", "assertEquals", "parseNumber", "assertEquals", "parseNumber"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigInteger LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);", "modifier": "private static final", "type": "BigInteger", "declarator": "LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE)", "var_name": "LONG_MIN"}, {"original_string": "private static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);", "modifier": "private static final", "type": "BigInteger", "declarator": "LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE)", "var_name": "LONG_MAX"}, {"original_string": "public static final Set<Class<?>> STANDARD_NUMBER_TYPES;", "modifier": "public static final", "type": "Set<Class<?>>", "declarator": "STANDARD_NUMBER_TYPES", "var_name": "STANDARD_NUMBER_TYPES"}], "methods": [{"identifier": "convertNumberToTargetClass", "parameters": "(Number number, Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convertNumberToTargetClass(Number number, Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convertNumberToTargetClass(Number number, Class<T> targetClass)", "class_method_signature": "NumberUtils.convertNumberToTargetClass(Number number, Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "checkedLongValue", "parameters": "(Number number, Class<? extends Number> targetClass)", "modifiers": "private static", "return": "long", "signature": "long checkedLongValue(Number number, Class<? extends Number> targetClass)", "full_signature": "private static long checkedLongValue(Number number, Class<? extends Number> targetClass)", "class_method_signature": "NumberUtils.checkedLongValue(Number number, Class<? extends Number> targetClass)", "testcase": false, "constructor": false}, {"identifier": "raiseOverflowException", "parameters": "(Number number, Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void raiseOverflowException(Number number, Class<?> targetClass)", "full_signature": "private static void raiseOverflowException(Number number, Class<?> targetClass)", "class_method_signature": "NumberUtils.raiseOverflowException(Number number, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parseNumber", "parameters": "(String text, Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parseNumber(String text, Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parseNumber(String text, Class<T> targetClass)", "class_method_signature": "NumberUtils.parseNumber(String text, Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "isHexNumber", "parameters": "(String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHexNumber(String value)", "full_signature": "private static boolean isHexNumber(String value)", "class_method_signature": "NumberUtils.isHexNumber(String value)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(String value)", "full_signature": "private static BigInteger decodeBigInteger(String value)", "class_method_signature": "NumberUtils.decodeBigInteger(String value)", "testcase": false, "constructor": false}, {"identifier": "trimAllWhitespace", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimAllWhitespace(String str)", "full_signature": "public static String trimAllWhitespace(String str)", "class_method_signature": "NumberUtils.trimAllWhitespace(String str)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/util/NumberUtils.java"}, "focal_method": {"identifier": "parseNumber", "parameters": "(String text, Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {\n        String trimmed = trimAllWhitespace(text);\n\n        if (Byte.class == targetClass) {\n            return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));\n        }\n        else if (Short.class == targetClass) {\n            return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));\n        }\n        else if (Integer.class == targetClass) {\n            return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));\n        }\n        else if (Long.class == targetClass) {\n            return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));\n        }\n        else if (BigInteger.class == targetClass) {\n            return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));\n        }\n        else if (Float.class == targetClass) {\n            return (T) Float.valueOf(trimmed);\n        }\n        else if (Double.class == targetClass) {\n            return (T) Double.valueOf(trimmed);\n        }\n        else if (BigDecimal.class == targetClass || Number.class == targetClass) {\n            return (T) new BigDecimal(trimmed);\n        }\n        else {\n            throw new IllegalArgumentException(\n                    \"Cannot convert String [\" + text + \"] to target class [\" + targetClass.getName() + \"]\");\n        }\n    }", "signature": "T parseNumber(String text, Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parseNumber(String text, Class<T> targetClass)", "class_method_signature": "NumberUtils.parseNumber(String text, Class<T> targetClass)", "testcase": false, "constructor": false, "invocations": ["trimAllWhitespace", "isHexNumber", "decode", "valueOf", "isHexNumber", "decode", "valueOf", "isHexNumber", "decode", "valueOf", "isHexNumber", "decode", "valueOf", "isHexNumber", "decodeBigInteger", "valueOf", "valueOf", "getName"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}