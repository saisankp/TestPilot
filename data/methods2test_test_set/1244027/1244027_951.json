{"test_class": {"identifier": "QueryParsersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryParsers parsers;", "modifier": "private", "type": "QueryParsers", "declarator": "parsers", "var_name": "parsers"}, {"original_string": "private QueryParser parser1;", "modifier": "private", "type": "QueryParser", "declarator": "parser1", "var_name": "parser1"}, {"original_string": "private QueryParser parser2;", "modifier": "private", "type": "QueryParser", "declarator": "parser2", "var_name": "parser2"}, {"original_string": "private QueryParser parser3;", "modifier": "private", "type": "QueryParser", "declarator": "parser3", "var_name": "parser3"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/parse/QueryParsersTest.java"}, "test_case": {"identifier": "shouldFailToParseUnknownLanguage", "parameters": "()", "modifiers": "@Test( expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test( expected = IllegalArgumentException.class )\n    public void shouldFailToParseUnknownLanguage() {\n        TypeSystem typeSystem = new ExecutionContext().getValueFactories().getTypeSystem();\n        parsers.parse(typeSystem, \"unknown language\", \"This is a bogus query\");\n    }", "signature": "void shouldFailToParseUnknownLanguage()", "full_signature": "@Test( expected = IllegalArgumentException.class ) public void shouldFailToParseUnknownLanguage()", "class_method_signature": "QueryParsersTest.shouldFailToParseUnknownLanguage()", "testcase": true, "constructor": false, "invocations": ["getTypeSystem", "getValueFactories", "parse"]}, "focal_class": {"identifier": "QueryParsers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<String, QueryParser> parsers = new ConcurrentHashMap<String, QueryParser>();", "modifier": "private final", "type": "ConcurrentMap<String, QueryParser>", "declarator": "parsers = new ConcurrentHashMap<String, QueryParser>()", "var_name": "parsers"}], "methods": [{"identifier": "QueryParsers", "parameters": "( QueryParser... parsers )", "modifiers": "public", "return": "", "signature": " QueryParsers( QueryParser... parsers )", "full_signature": "public  QueryParsers( QueryParser... parsers )", "class_method_signature": "QueryParsers.QueryParsers( QueryParser... parsers )", "testcase": false, "constructor": true}, {"identifier": "QueryParsers", "parameters": "( Iterable<QueryParser> parsers )", "modifiers": "public", "return": "", "signature": " QueryParsers( Iterable<QueryParser> parsers )", "full_signature": "public  QueryParsers( Iterable<QueryParser> parsers )", "class_method_signature": "QueryParsers.QueryParsers( Iterable<QueryParser> parsers )", "testcase": false, "constructor": true}, {"identifier": "addLanguage", "parameters": "( QueryParser languageParser )", "modifiers": "public", "return": "void", "signature": "void addLanguage( QueryParser languageParser )", "full_signature": "public void addLanguage( QueryParser languageParser )", "class_method_signature": "QueryParsers.addLanguage( QueryParser languageParser )", "testcase": false, "constructor": false}, {"identifier": "addLanguages", "parameters": "( QueryParser firstLanguage,\n                              QueryParser... additionalLanguages )", "modifiers": "public", "return": "void", "signature": "void addLanguages( QueryParser firstLanguage,\n                              QueryParser... additionalLanguages )", "full_signature": "public void addLanguages( QueryParser firstLanguage,\n                              QueryParser... additionalLanguages )", "class_method_signature": "QueryParsers.addLanguages( QueryParser firstLanguage,\n                              QueryParser... additionalLanguages )", "testcase": false, "constructor": false}, {"identifier": "addLanguages", "parameters": "( Iterable<QueryParser> languages )", "modifiers": "public", "return": "void", "signature": "void addLanguages( Iterable<QueryParser> languages )", "full_signature": "public void addLanguages( Iterable<QueryParser> languages )", "class_method_signature": "QueryParsers.addLanguages( Iterable<QueryParser> languages )", "testcase": false, "constructor": false}, {"identifier": "removeLanguage", "parameters": "( String language )", "modifiers": "public", "return": "QueryParser", "signature": "QueryParser removeLanguage( String language )", "full_signature": "public QueryParser removeLanguage( String language )", "class_method_signature": "QueryParsers.removeLanguage( String language )", "testcase": false, "constructor": false}, {"identifier": "removeLanguages", "parameters": "( String firstLanguage,\n                                                    String... additionalLanguages )", "modifiers": "public", "return": "Collection<QueryParser>", "signature": "Collection<QueryParser> removeLanguages( String firstLanguage,\n                                                    String... additionalLanguages )", "full_signature": "public Collection<QueryParser> removeLanguages( String firstLanguage,\n                                                    String... additionalLanguages )", "class_method_signature": "QueryParsers.removeLanguages( String firstLanguage,\n                                                    String... additionalLanguages )", "testcase": false, "constructor": false}, {"identifier": "getLanguages", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getLanguages()", "full_signature": "public Set<String> getLanguages()", "class_method_signature": "QueryParsers.getLanguages()", "testcase": false, "constructor": false}, {"identifier": "getParserFor", "parameters": "( String language )", "modifiers": "public", "return": "QueryParser", "signature": "QueryParser getParserFor( String language )", "full_signature": "public QueryParser getParserFor( String language )", "class_method_signature": "QueryParsers.getParserFor( String language )", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( TypeSystem typeSystem,\n                               String language,\n                               String query )", "modifiers": "public", "return": "QueryCommand", "signature": "QueryCommand parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "full_signature": "public QueryCommand parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "class_method_signature": "QueryParsers.parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QueryParsers.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "QueryParsers.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QueryParsers.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/parse/QueryParsers.java"}, "focal_method": {"identifier": "parse", "parameters": "( TypeSystem typeSystem,\n                               String language,\n                               String query )", "modifiers": "public", "return": "QueryCommand", "body": "public QueryCommand parse( TypeSystem typeSystem,\n                               String language,\n                               String query ) {\n        CheckArg.isNotNull(language, \"language\");\n        CheckArg.isNotNull(typeSystem, \"typeSystem\");\n        CheckArg.isNotNull(query, \"query\");\n        QueryParser parser = parsers.get(language.trim().toLowerCase());\n        if (parser == null) {\n            throw new IllegalArgumentException(GraphI18n.unknownQueryLanguage.text(language));\n        }\n        return parser.parseQuery(query, typeSystem);\n    }", "signature": "QueryCommand parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "full_signature": "public QueryCommand parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "class_method_signature": "QueryParsers.parse( TypeSystem typeSystem,\n                               String language,\n                               String query )", "testcase": false, "constructor": false, "invocations": ["isNotNull", "isNotNull", "isNotNull", "get", "toLowerCase", "trim", "text", "parseQuery"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}