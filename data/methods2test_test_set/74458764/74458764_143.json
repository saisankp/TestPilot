{"test_class": {"identifier": "TestRedisConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionConfiguration sc;", "modifier": "private", "type": "SessionConfiguration", "declarator": "sc", "var_name": "sc"}], "file": "session-replacement/src/test/java/com/amadeus/session/repository/redis/TestRedisConfiguration.java"}, "test_case": {"identifier": "testExtractSentinels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtractSentinels() {\n    RedisConfiguration configuration = new RedisConfiguration(sc);\n    Set<String> sentinels = configuration.sentinels();\n    assertEquals(1, sentinels.size());\n    assertEquals(\"localhost\", sentinels.iterator().next());\n  }", "signature": "void testExtractSentinels()", "full_signature": "@Test public void testExtractSentinels()", "class_method_signature": "TestRedisConfiguration.testExtractSentinels()", "testcase": true, "constructor": false, "invocations": ["sentinels", "assertEquals", "size", "assertEquals", "next", "iterator"]}, "focal_class": {"identifier": "RedisConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String METRIC_PREFIX = \"com.amadeus.session\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_PREFIX = \"com.amadeus.session\"", "var_name": "METRIC_PREFIX"}, {"original_string": "public static final String REDIS_USE_IPV4 = \"com.amadeus.session.redis.ipv4\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_USE_IPV4 = \"com.amadeus.session.redis.ipv4\"", "var_name": "REDIS_USE_IPV4"}, {"original_string": "public static final String REDIS_USE_IPV6 = \"com.amadeus.session.redis.ipv6\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_USE_IPV6 = \"com.amadeus.session.redis.ipv6\"", "var_name": "REDIS_USE_IPV6"}, {"original_string": "public static final String REDIS_EXPIRATION_STRATEGY = \"com.amadeus.session.redis.expiration\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_EXPIRATION_STRATEGY = \"com.amadeus.session.redis.expiration\"", "var_name": "REDIS_EXPIRATION_STRATEGY"}, {"original_string": "public static final String REDIS_TIMEOUT = \"com.amadeus.session.redis.timeout\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_TIMEOUT = \"com.amadeus.session.redis.timeout\"", "var_name": "REDIS_TIMEOUT"}, {"original_string": "public static final String DEFAULT_REDIS_TIMEOUT = \"2000\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_REDIS_TIMEOUT = \"2000\"", "var_name": "DEFAULT_REDIS_TIMEOUT"}, {"original_string": "public static final String REDIS_PORT = \"com.amadeus.session.redis.port\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_PORT = \"com.amadeus.session.redis.port\"", "var_name": "REDIS_PORT"}, {"original_string": "public static final String REDIS_HOST = \"com.amadeus.session.redis.host\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_HOST = \"com.amadeus.session.redis.host\"", "var_name": "REDIS_HOST"}, {"original_string": "public static final String REDIS_PASSWORD = \"com.amadeus.session.redis.password\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_PASSWORD = \"com.amadeus.session.redis.password\"", "var_name": "REDIS_PASSWORD"}, {"original_string": "public static final String REDIS_SSL = \"com.amadeus.session.redis.ssl\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_SSL = \"com.amadeus.session.redis.ssl\"", "var_name": "REDIS_SSL"}, {"original_string": "public static final String REDIS_TLS = \"com.amadeus.session.redis.tls\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_TLS = \"com.amadeus.session.redis.tls\"", "var_name": "REDIS_TLS"}, {"original_string": "public static final String REDIS_POOL_SIZE = \"com.amadeus.session.redis.pool\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_POOL_SIZE = \"com.amadeus.session.redis.pool\"", "var_name": "REDIS_POOL_SIZE"}, {"original_string": "public static final String DEFAULT_REDIS_POOL_SIZE = \"100\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_REDIS_POOL_SIZE = \"100\"", "var_name": "DEFAULT_REDIS_POOL_SIZE"}, {"original_string": "public static final String REDIS_CLUSTER_MODE = \"com.amadeus.session.redis.mode\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_CLUSTER_MODE = \"com.amadeus.session.redis.mode\"", "var_name": "REDIS_CLUSTER_MODE"}, {"original_string": "public static final String REDIS_MASTER_NAME = \"com.amadeus.session.redis.master\";", "modifier": "public static final", "type": "String", "declarator": "REDIS_MASTER_NAME = \"com.amadeus.session.redis.master\"", "var_name": "REDIS_MASTER_NAME"}, {"original_string": "public static final String DEFAULT_REDIS_MASTER_NAME = \"com.amadeus.session\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_REDIS_MASTER_NAME = \"com.amadeus.session\"", "var_name": "DEFAULT_REDIS_MASTER_NAME"}, {"original_string": "static final Logger logger = LoggerFactory.getLogger(RedisConfiguration.class);", "modifier": "static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RedisConfiguration.class)", "var_name": "logger"}, {"original_string": "static final String POOL_SIZE_PROPERTY = \"pool=\";", "modifier": "static final", "type": "String", "declarator": "POOL_SIZE_PROPERTY = \"pool=\"", "var_name": "POOL_SIZE_PROPERTY"}, {"original_string": "static final String CLUSTER_MODE_PROPERTY = \"mode=\";", "modifier": "static final", "type": "String", "declarator": "CLUSTER_MODE_PROPERTY = \"mode=\"", "var_name": "CLUSTER_MODE_PROPERTY"}, {"original_string": "static final String MASTER_NAME_PROPERTY = \"master=\";", "modifier": "static final", "type": "String", "declarator": "MASTER_NAME_PROPERTY = \"master=\"", "var_name": "MASTER_NAME_PROPERTY"}, {"original_string": "static final String HOST_PROPERTY = \"host=\";", "modifier": "static final", "type": "String", "declarator": "HOST_PROPERTY = \"host=\"", "var_name": "HOST_PROPERTY"}, {"original_string": "static final String PASSWORD_PROPERTY = \"password=\";", "modifier": "static final", "type": "String", "declarator": "PASSWORD_PROPERTY = \"password=\"", "var_name": "PASSWORD_PROPERTY"}, {"original_string": "static final String SSL_PROPERTY = \"ssl=\";", "modifier": "static final", "type": "String", "declarator": "SSL_PROPERTY = \"ssl=\"", "var_name": "SSL_PROPERTY"}, {"original_string": "static final String TLS_PROPERTY = \"tls=\";", "modifier": "static final", "type": "String", "declarator": "TLS_PROPERTY = \"tls=\"", "var_name": "TLS_PROPERTY"}, {"original_string": "static final String REDIS_PORT_PROPERTY = \"port=\";", "modifier": "static final", "type": "String", "declarator": "REDIS_PORT_PROPERTY = \"port=\"", "var_name": "REDIS_PORT_PROPERTY"}, {"original_string": "static final String EXPIRATION_PROPERTY = \"expiration=\";", "modifier": "static final", "type": "String", "declarator": "EXPIRATION_PROPERTY = \"expiration=\"", "var_name": "EXPIRATION_PROPERTY"}, {"original_string": "static final String TIMEOUT_PROPERTY = \"timeout=\";", "modifier": "static final", "type": "String", "declarator": "TIMEOUT_PROPERTY = \"timeout=\"", "var_name": "TIMEOUT_PROPERTY"}, {"original_string": "String clusterMode;", "modifier": "", "type": "String", "declarator": "clusterMode", "var_name": "clusterMode"}, {"original_string": "String masterName;", "modifier": "", "type": "String", "declarator": "masterName", "var_name": "masterName"}, {"original_string": "String server;", "modifier": "", "type": "String", "declarator": "server", "var_name": "server"}, {"original_string": "String port;", "modifier": "", "type": "String", "declarator": "port", "var_name": "port"}, {"original_string": "String password;", "modifier": "", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "Boolean useSSL;", "modifier": "", "type": "Boolean", "declarator": "useSSL", "var_name": "useSSL"}, {"original_string": "String tls[];", "modifier": "", "type": "String", "declarator": "tls[]", "var_name": "tls"}, {"original_string": "String poolSize;", "modifier": "", "type": "String", "declarator": "poolSize", "var_name": "poolSize"}, {"original_string": "ExpirationStrategy strategy;", "modifier": "", "type": "ExpirationStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "Boolean supportIpV6;", "modifier": "", "type": "Boolean", "declarator": "supportIpV6", "var_name": "supportIpV6"}, {"original_string": "Boolean supportIpV4;", "modifier": "", "type": "Boolean", "declarator": "supportIpV4", "var_name": "supportIpV4"}, {"original_string": "Integer timeout = null;", "modifier": "", "type": "Integer", "declarator": "timeout = null", "var_name": "timeout"}], "methods": [{"identifier": "getStrategy", "parameters": "()", "modifiers": "public", "return": "ExpirationStrategy", "signature": "ExpirationStrategy getStrategy()", "full_signature": "public ExpirationStrategy getStrategy()", "class_method_signature": "RedisConfiguration.getStrategy()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getTimeout()", "full_signature": "public Integer getTimeout()", "class_method_signature": "RedisConfiguration.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getPoolSize", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPoolSize()", "full_signature": "public String getPoolSize()", "class_method_signature": "RedisConfiguration.getPoolSize()", "testcase": false, "constructor": false}, {"identifier": "RedisConfiguration", "parameters": "(SessionConfiguration conf)", "modifiers": "public", "return": "", "signature": " RedisConfiguration(SessionConfiguration conf)", "full_signature": "public  RedisConfiguration(SessionConfiguration conf)", "class_method_signature": "RedisConfiguration.RedisConfiguration(SessionConfiguration conf)", "testcase": false, "constructor": true}, {"identifier": "serverAddress", "parameters": "(SessionConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void serverAddress(SessionConfiguration conf)", "full_signature": "private void serverAddress(SessionConfiguration conf)", "class_method_signature": "RedisConfiguration.serverAddress(SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "ipSupport", "parameters": "(SessionConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void ipSupport(SessionConfiguration conf)", "full_signature": "private void ipSupport(SessionConfiguration conf)", "class_method_signature": "RedisConfiguration.ipSupport(SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "readConfigurationString", "parameters": "(String conf)", "modifiers": "private", "return": "void", "signature": "void readConfigurationString(String conf)", "full_signature": "private void readConfigurationString(String conf)", "class_method_signature": "RedisConfiguration.readConfigurationString(String conf)", "testcase": false, "constructor": false}, {"identifier": "parseArgFromConfiguration", "parameters": "(String arg)", "modifiers": "private", "return": "void", "signature": "void parseArgFromConfiguration(String arg)", "full_signature": "private void parseArgFromConfiguration(String arg)", "class_method_signature": "RedisConfiguration.parseArgFromConfiguration(String arg)", "testcase": false, "constructor": false}, {"identifier": "hostsAndPorts", "parameters": "()", "modifiers": "public", "return": "List<HostAndPort>", "signature": "List<HostAndPort> hostsAndPorts()", "full_signature": "public List<HostAndPort> hostsAndPorts()", "class_method_signature": "RedisConfiguration.hostsAndPorts()", "testcase": false, "constructor": false}, {"identifier": "collectHosts", "parameters": "(List<HostAndPort> hostAndPort, String[] serverAndPort, int portToUse)", "modifiers": "private", "return": "void", "signature": "void collectHosts(List<HostAndPort> hostAndPort, String[] serverAndPort, int portToUse)", "full_signature": "private void collectHosts(List<HostAndPort> hostAndPort, String[] serverAndPort, int portToUse)", "class_method_signature": "RedisConfiguration.collectHosts(List<HostAndPort> hostAndPort, String[] serverAndPort, int portToUse)", "testcase": false, "constructor": false}, {"identifier": "tlsStringToArray", "parameters": "(String tlsStr)", "modifiers": "private", "return": "String[]", "signature": "String[] tlsStringToArray(String tlsStr)", "full_signature": "private String[] tlsStringToArray(String tlsStr)", "class_method_signature": "RedisConfiguration.tlsStringToArray(String tlsStr)", "testcase": false, "constructor": false}, {"identifier": "portToUse", "parameters": "(String[] serverAndPort, int defaultPort)", "modifiers": "private", "return": "int", "signature": "int portToUse(String[] serverAndPort, int defaultPort)", "full_signature": "private int portToUse(String[] serverAndPort, int defaultPort)", "class_method_signature": "RedisConfiguration.portToUse(String[] serverAndPort, int defaultPort)", "testcase": false, "constructor": false}, {"identifier": "resolveServers", "parameters": "(String serverName)", "modifiers": "private", "return": "InetAddress[]", "signature": "InetAddress[] resolveServers(String serverName)", "full_signature": "private InetAddress[] resolveServers(String serverName)", "class_method_signature": "RedisConfiguration.resolveServers(String serverName)", "testcase": false, "constructor": false}, {"identifier": "isIpSupported", "parameters": "(InetAddress host)", "modifiers": "private", "return": "boolean", "signature": "boolean isIpSupported(InetAddress host)", "full_signature": "private boolean isIpSupported(InetAddress host)", "class_method_signature": "RedisConfiguration.isIpSupported(InetAddress host)", "testcase": false, "constructor": false}, {"identifier": "sentinels", "parameters": "()", "modifiers": "", "return": "Set<String>", "signature": "Set<String> sentinels()", "full_signature": " Set<String> sentinels()", "class_method_signature": "RedisConfiguration.sentinels()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RedisConfiguration.toString()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/repository/redis/RedisConfiguration.java"}, "focal_method": {"identifier": "sentinels", "parameters": "()", "modifiers": "", "return": "Set<String>", "body": "Set<String> sentinels() {\n    return new HashSet<>(Arrays.asList(server.split(\"[/;]\")));\n  }", "signature": "Set<String> sentinels()", "full_signature": " Set<String> sentinels()", "class_method_signature": "RedisConfiguration.sentinels()", "testcase": false, "constructor": false, "invocations": ["asList", "split"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}