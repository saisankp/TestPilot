{"test_class": {"identifier": "SlicingCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Codec<String> wrapped;", "modifier": "@Mock\n    private", "type": "Codec<String>", "declarator": "wrapped", "var_name": "wrapped"}, {"original_string": "@Mock\n    private Expression<Integer, Resolver> sizeExpr;", "modifier": "@Mock\n    private", "type": "Expression<Integer, Resolver>", "declarator": "sizeExpr", "var_name": "sizeExpr"}, {"original_string": "@Mock\n    private Builder builder;", "modifier": "@Mock\n    private", "type": "Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "@Mock\n    private BitBuffer buffer;", "modifier": "@Mock\n    private", "type": "BitBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "@Mock\n    private BitBuffer slice;", "modifier": "@Mock\n    private", "type": "BitBuffer", "declarator": "slice", "var_name": "slice"}, {"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Mock\n    private BitChannel channel;", "modifier": "@Mock\n    private", "type": "BitChannel", "declarator": "channel", "var_name": "channel"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/SlicingCodecTest.java"}, "test_case": {"identifier": "testEncoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncoding() throws IOException {\n        SlicingCodec<String> codec = new SlicingCodec(wrapped, sizeExpr);\n        when(sizeExpr.eval(resolver)).thenReturn(3);\n        codec.encode(\"DONE\", channel, resolver);\n        ArgumentCaptor<BitChannel> bitChannelCaptor = ArgumentCaptor.forClass(BitChannel.class);\n        verify(wrapped).encode(eq(\"DONE\"), bitChannelCaptor.capture(), eq(resolver));\n        verify(sizeExpr).eval(resolver);\n        assertThat(bitChannelCaptor.getValue(), instanceOf(BoundedBitChannel.class));\n        verifyNoMoreInteractions(wrapped, sizeExpr, resolver);\n    }", "signature": "void testEncoding()", "full_signature": "@Test public void testEncoding()", "class_method_signature": "SlicingCodecTest.testEncoding()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "eval", "encode", "forClass", "encode", "verify", "eq", "capture", "eq", "eval", "verify", "assertThat", "getValue", "instanceOf", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SlicingCodec", "superclass": "", "interfaces": "implements Codec<T>", "fields": [{"original_string": "private final Expression<Integer, Resolver> sizeExpr;", "modifier": "private final", "type": "Expression<Integer, Resolver>", "declarator": "sizeExpr", "var_name": "sizeExpr"}, {"original_string": "private final Codec<T> wrapped;", "modifier": "private final", "type": "Codec<T>", "declarator": "wrapped", "var_name": "wrapped"}], "methods": [{"identifier": "SlicingCodec", "parameters": "(Codec<T> wrapped, Expression<Integer, Resolver> sizeExpr)", "modifiers": "public", "return": "", "signature": " SlicingCodec(Codec<T> wrapped, Expression<Integer, Resolver> sizeExpr)", "full_signature": "public  SlicingCodec(Codec<T> wrapped, Expression<Integer, Resolver> sizeExpr)", "class_method_signature": "SlicingCodec.SlicingCodec(Codec<T> wrapped, Expression<Integer, Resolver> sizeExpr)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "T", "signature": "T decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public T decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "SlicingCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(T value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(T value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(T value, BitChannel channel, Resolver resolver)", "class_method_signature": "SlicingCodec.encode(T value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "SlicingCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "SlicingCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "SlicingCodec.getType()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "SlicingCodec.getCodecDescriptor()", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/SlicingCodec.java"}, "focal_method": {"identifier": "encode", "parameters": "(T value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "body": "public void encode(T value, BitChannel channel, Resolver resolver) throws IOException {\n        wrapped.encode(value, new BoundedBitChannel(channel, sizeExpr.eval(resolver)), resolver);\n    }", "signature": "void encode(T value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(T value, BitChannel channel, Resolver resolver)", "class_method_signature": "SlicingCodec.encode(T value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false, "invocations": ["encode", "eval"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}