{"test_class": {"identifier": "AbstractDatabaseBackendTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/com/google/cloud/broker/database/backends/AbstractDatabaseBackendTest.java"}, "test_case": {"identifier": "testGetInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInstance() {\n        try(SettingsOverride override = SettingsOverride.apply(Map.of(AppSettings.DATABASE_BACKEND, \"com.example.DoesNotExist\"))) {\n            try {\n                AbstractDatabaseBackend.getInstance();\n                fail();\n            } catch (RuntimeException e) {\n                assertEquals(\"java.lang.ClassNotFoundException: com.example.DoesNotExist\", e.getMessage());\n            }\n        }\n    }", "signature": "void testGetInstance()", "full_signature": "@Test public void testGetInstance()", "class_method_signature": "AbstractDatabaseBackendTest.testGetInstance()", "testcase": true, "constructor": false, "invocations": ["apply", "of", "getInstance", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "AbstractDatabaseBackend", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AbstractDatabaseBackend instance;", "modifier": "private static", "type": "AbstractDatabaseBackend", "declarator": "instance", "var_name": "instance"}], "methods": [{"identifier": "getAll", "parameters": "(Class modelClass)", "modifiers": "public abstract", "return": "List<Model>", "signature": "List<Model> getAll(Class modelClass)", "full_signature": "public abstract List<Model> getAll(Class modelClass)", "class_method_signature": "AbstractDatabaseBackend.getAll(Class modelClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class modelClass, String objectId)", "modifiers": "public abstract", "return": "Model", "signature": "Model get(Class modelClass, String objectId)", "full_signature": "public abstract Model get(Class modelClass, String objectId)", "class_method_signature": "AbstractDatabaseBackend.get(Class modelClass, String objectId)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Model model)", "modifiers": "public abstract", "return": "void", "signature": "void save(Model model)", "full_signature": "public abstract void save(Model model)", "class_method_signature": "AbstractDatabaseBackend.save(Model model)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Model model)", "modifiers": "public abstract", "return": "void", "signature": "void delete(Model model)", "full_signature": "public abstract void delete(Model model)", "class_method_signature": "AbstractDatabaseBackend.delete(Model model)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredItems", "parameters": "(Class modelClass, String field, Long cutoffTime)", "modifiers": "public", "return": "int", "signature": "int deleteExpiredItems(Class modelClass, String field, Long cutoffTime)", "full_signature": "public int deleteExpiredItems(Class modelClass, String field, Long cutoffTime)", "class_method_signature": "AbstractDatabaseBackend.deleteExpiredItems(Class modelClass, String field, Long cutoffTime)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredItems", "parameters": "(Class modelClass, String field, Long cutoffTime, Integer numItems)", "modifiers": "public abstract", "return": "int", "signature": "int deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "full_signature": "public abstract int deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "class_method_signature": "AbstractDatabaseBackend.deleteExpiredItems(Class modelClass, String field, Long cutoffTime, Integer numItems)", "testcase": false, "constructor": false}, {"identifier": "initializeDatabase", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void initializeDatabase()", "full_signature": "public abstract void initializeDatabase()", "class_method_signature": "AbstractDatabaseBackend.initializeDatabase()", "testcase": false, "constructor": false}, {"identifier": "checkConnection", "parameters": "()", "modifiers": "public abstract", "return": "CheckResult", "signature": "CheckResult checkConnection()", "full_signature": "public abstract CheckResult checkConnection()", "class_method_signature": "AbstractDatabaseBackend.checkConnection()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "AbstractDatabaseBackend", "signature": "AbstractDatabaseBackend getInstance()", "full_signature": "public static AbstractDatabaseBackend getInstance()", "class_method_signature": "AbstractDatabaseBackend.getInstance()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/com/google/cloud/broker/database/backends/AbstractDatabaseBackend.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "AbstractDatabaseBackend", "body": "public static AbstractDatabaseBackend getInstance() {\n        String className = AppSettings.getInstance().getString(AppSettings.DATABASE_BACKEND);\n        if (instance == null || !className.equals(instance.getClass().getCanonicalName())) {\n            instance = (AbstractDatabaseBackend) InstanceUtils.invokeConstructor(className);\n        }\n        return instance;\n    }", "signature": "AbstractDatabaseBackend getInstance()", "full_signature": "public static AbstractDatabaseBackend getInstance()", "class_method_signature": "AbstractDatabaseBackend.getInstance()", "testcase": false, "constructor": false, "invocations": ["getString", "getInstance", "equals", "getCanonicalName", "getClass", "invokeConstructor"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}