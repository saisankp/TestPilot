{"test_class": {"identifier": "GenericFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GenericFilter genericFilter = new GenericFilter();", "modifier": "", "type": "GenericFilter", "declarator": "genericFilter = new GenericFilter()", "var_name": "genericFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericFilterTest.java"}, "test_case": {"identifier": "testInvokeWithMethodNamtNot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeWithMethodNamtNot$Invoke() {\n\n        Method genericInvoke = GenericService.class.getMethods()[0];\n\n        Map<String, Object> person = new HashMap<String, Object>();\n        person.put(\"name\", \"dubbo\");\n        person.put(\"age\", 10);\n\n        RpcInvocation invocation = new RpcInvocation(\"sayHi\", GenericService.class.getName(), \"\", genericInvoke.getParameterTypes()\n                , new Object[]{\"getPerson\", new String[]{Person.class.getCanonicalName()}, new Object[]{person}});\n\n        URL url = URL.valueOf(\"test://test:11/org.apache.dubbo.rpc.support.DemoService?\" +\n                \"accesslog=true&group=dubbo&version=1.1\");\n        Invoker invoker = Mockito.mock(Invoker.class);\n        when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));\n        when(invoker.getUrl()).thenReturn(url);\n        when(invoker.getInterface()).thenReturn(DemoService.class);\n\n        Result result = genericFilter.invoke(invoker, invocation);\n        Assertions.assertEquals(Person.class, result.getValue().getClass());\n        Assertions.assertEquals(10, ((Person) (result.getValue())).getAge());\n    }", "signature": "void testInvokeWithMethodNamtNot()", "full_signature": "@Test public void testInvokeWithMethodNamtNot()", "class_method_signature": "GenericFilterTest.testInvokeWithMethodNamtNot()", "testcase": true, "constructor": false, "invocations": ["getMethods", "put", "put", "getName", "getParameterTypes", "getCanonicalName", "valueOf", "mock", "thenReturn", "when", "invoke", "any", "thenReturn", "when", "getUrl", "thenReturn", "when", "getInterface", "invoke", "assertEquals", "getClass", "getValue", "assertEquals", "getAge", "getValue"]}, "focal_class": {"identifier": "GenericFilter", "superclass": "", "interfaces": "implements Filter, Filter.Listener", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "GenericFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "onResponse", "parameters": "(Result appResponse, Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "void", "signature": "void onResponse(Result appResponse, Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public void onResponse(Result appResponse, Invoker<?> invoker, Invocation inv)", "class_method_signature": "GenericFilter.onResponse(Result appResponse, Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "GenericFilter.onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\n        if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC))\n                && inv.getArguments() != null\n                && inv.getArguments().length == 3\n                && !GenericService.class.isAssignableFrom(invoker.getInterface())) {\n            String name = ((String) inv.getArguments()[0]).trim();\n            String[] types = (String[]) inv.getArguments()[1];\n            Object[] args = (Object[]) inv.getArguments()[2];\n            try {\n                Method method = ReflectUtils.findMethodByMethodSignature(invoker.getInterface(), name, types);\n                Class<?>[] params = method.getParameterTypes();\n                if (args == null) {\n                    args = new Object[params.length];\n                }\n\n                if(types == null) {\n                    types = new String[params.length];\n                }\n\n                if (args.length != types.length) {\n                    throw new RpcException(\"GenericFilter#invoke args.length != types.length, please check your \"\n                            + \"params\");\n                }\n                String generic = inv.getAttachment(GENERIC_KEY);\n\n                if (StringUtils.isBlank(generic)) {\n                    generic = RpcContext.getContext().getAttachment(GENERIC_KEY);\n                }\n\n                if (StringUtils.isEmpty(generic)\n                        || ProtocolUtils.isDefaultGenericSerialization(generic)\n                        || ProtocolUtils.isGenericReturnRawResult(generic)) {\n                    args = PojoUtils.realize(args, params, method.getGenericParameterTypes());\n                } else if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n                    for (int i = 0; i < args.length; i++) {\n                        if (byte[].class == args[i].getClass()) {\n                            try (UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[]) args[i])) {\n                                args[i] = ExtensionLoader.getExtensionLoader(Serialization.class)\n                                        .getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA)\n                                        .deserialize(null, is).readObject();\n                            } catch (Exception e) {\n                                throw new RpcException(\"Deserialize argument [\" + (i + 1) + \"] failed.\", e);\n                            }\n                        } else {\n                            throw new RpcException(\n                                    \"Generic serialization [\" +\n                                            GENERIC_SERIALIZATION_NATIVE_JAVA +\n                                            \"] only support message type \" +\n                                            byte[].class +\n                                            \" and your message type is \" +\n                                            args[i].getClass());\n                        }\n                    }\n                } else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n                    for (int i = 0; i < args.length; i++) {\n                        if (args[i] instanceof JavaBeanDescriptor) {\n                            args[i] = JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor) args[i]);\n                        } else {\n                            throw new RpcException(\n                                    \"Generic serialization [\" +\n                                            GENERIC_SERIALIZATION_BEAN +\n                                            \"] only support message type \" +\n                                            JavaBeanDescriptor.class.getName() +\n                                            \" and your message type is \" +\n                                            args[i].getClass().getName());\n                        }\n                    }\n                } else if (ProtocolUtils.isProtobufGenericSerialization(generic)) {\n                    // as proto3 only accept one protobuf parameter\n                    if (args.length == 1 && args[0] instanceof String) {\n                        try (UnsafeByteArrayInputStream is =\n                                     new UnsafeByteArrayInputStream(((String) args[0]).getBytes())) {\n                            args[0] = ExtensionLoader.getExtensionLoader(Serialization.class)\n                                    .getExtension(GENERIC_SERIALIZATION_PROTOBUF)\n                                    .deserialize(null, is).readObject(method.getParameterTypes()[0]);\n                        } catch (Exception e) {\n                            throw new RpcException(\"Deserialize argument failed.\", e);\n                        }\n                    } else {\n                        throw new RpcException(\n                                \"Generic serialization [\" +\n                                        GENERIC_SERIALIZATION_PROTOBUF +\n                                        \"] only support one \" + String.class.getName() +\n                                        \" argument and your message size is \" +\n                                        args.length + \" and type is\" +\n                                        args[0].getClass().getName());\n                    }\n                }\n\n                RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), invoker.getUrl().getProtocolServiceKey(), args, inv.getObjectAttachments(), inv.getAttributes());\n                rpcInvocation.setInvoker(inv.getInvoker());\n                rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName());\n\n                return invoker.invoke(rpcInvocation);\n            } catch (NoSuchMethodException | ClassNotFoundException e) {\n                throw new RpcException(e.getMessage(), e);\n            }\n        }\n        return invoker.invoke(inv);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "GenericFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false, "invocations": ["equals", "getMethodName", "equals", "getMethodName", "getArguments", "getArguments", "isAssignableFrom", "getInterface", "trim", "getArguments", "getArguments", "getArguments", "findMethodByMethodSignature", "getInterface", "getParameterTypes", "getAttachment", "isBlank", "getAttachment", "getContext", "isEmpty", "isDefaultGenericSerialization", "isGenericReturnRawResult", "realize", "getGenericParameterTypes", "isJavaGenericSerialization", "getClass", "readObject", "deserialize", "getExtension", "getExtensionLoader", "getClass", "isBeanGenericSerialization", "deserialize", "getName", "getName", "getClass", "isProtobufGenericSerialization", "getBytes", "readObject", "deserialize", "getExtension", "getExtensionLoader", "getParameterTypes", "getName", "getName", "getClass", "getName", "getInterface", "getProtocolServiceKey", "getUrl", "getObjectAttachments", "getAttributes", "setInvoker", "getInvoker", "setTargetServiceUniqueName", "getTargetServiceUniqueName", "invoke", "getMessage", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}