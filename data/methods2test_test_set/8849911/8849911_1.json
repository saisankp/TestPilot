{"test_class": {"identifier": "TestSyncHttpDownloadService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HttpServer server;", "modifier": "private static", "type": "HttpServer", "declarator": "server", "var_name": "server"}], "file": "webapp/src/test/java/net/flibusta/download/impl/TestSyncHttpDownloadService.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception {\n        SyncHttpDownloadService service = new SyncHttpDownloadService();\n        File file = service.fetch(new URL(\"http://127.0.0.2:8080/test/d.epub\"));\n//        File file = service.fetch(new URL(\"http://coronet2.iicm.tugraz.at/wbtmaster/kindle/zip_done/k/Kazenin_Tihie_konfliktyi_na_Severnom_Kavkaze__Adyigeya_Kabardino-Balkariya_Karachaevo-Cherkesiya_282954.epub\"));\n        assertTrue(file.exists());\n        file.delete();\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "TestSyncHttpDownloadService.test()", "testcase": true, "constructor": false, "invocations": ["fetch", "assertTrue", "exists", "delete"]}, "focal_class": {"identifier": "SyncHttpDownloadService", "superclass": "", "interfaces": "implements DownloadService", "fields": [{"original_string": "Logger logger = Logger.getLogger(SyncHttpDownloadService.class);", "modifier": "", "type": "Logger", "declarator": "logger = Logger.getLogger(SyncHttpDownloadService.class)", "var_name": "logger"}, {"original_string": "private HttpClient httpClient = null;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient = null", "var_name": "httpClient"}], "methods": [{"identifier": "fetch", "parameters": "(URL url)", "modifiers": "@Override public", "return": "File", "signature": "File fetch(URL url)", "full_signature": "@Override public File fetch(URL url)", "class_method_signature": "SyncHttpDownloadService.fetch(URL url)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String path)", "modifiers": "private", "return": "File", "signature": "File createTempFile(String path)", "full_signature": "private File createTempFile(String path)", "class_method_signature": "SyncHttpDownloadService.createTempFile(String path)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "()", "modifiers": "private", "return": "HttpClient", "signature": "HttpClient getHttpClient()", "full_signature": "private HttpClient getHttpClient()", "class_method_signature": "SyncHttpDownloadService.getHttpClient()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "SyncHttpDownloadService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "(File file)", "modifiers": "private", "return": "File", "signature": "File unzip(File file)", "full_signature": "private File unzip(File file)", "class_method_signature": "SyncHttpDownloadService.unzip(File file)", "testcase": false, "constructor": false}], "file": "webapp/src/main/java/net/flibusta/download/impl/SyncHttpDownloadService.java"}, "focal_method": {"identifier": "fetch", "parameters": "(URL url)", "modifiers": "@Override public", "return": "File", "body": "@Override\n    public File fetch(URL url) throws Exception {\n        HttpClient httpClient = getHttpClient();\n        String uri = url.toString();\n        GetMethod method = new GetMethod(uri);\n        method.getParams().setParameter(HttpMethodParams.USER_AGENT, \"Mobipocket/ePub Converter\");\n//        method.getParams().setParameter(HttpMethodParams.USER_AGENT, \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5\");\n        int retryCount = 10;\n        int code;\n        String fileName;\n        File file;\n        try {\n            try {\n\n                do {\n                    logger.debug(\"Start download \" + url + \" try=\" + (10 - retryCount));\n                    code = httpClient.executeMethod(method);\n                    if (code == 503) {\n                        Thread.sleep(500);\n                    }\n                } while (code == 503 && retryCount-- > 0);\n\n            } catch (IOException e) {\n                logger.error(\"Download from \" + uri + \" failed with exception \" + e.getMessage(), e);\n                method.releaseConnection();\n                throw new DownloadException(\"Download from \" + uri + \" failed with exception \" + e.getMessage(), e);\n            }\n            if (code != 200) {\n                method.releaseConnection();\n                throw new DownloadException(\"File download failed with code \" + code + \" from url \" + uri);\n            }\n\n            InputStream sourceStream = method.getResponseBodyAsStream();\n\n            fileName = method.getPath();\n\n            Header responseHeader = method.getResponseHeader(\"Content-Disposition\");\n            if (responseHeader != null) {\n                String value = responseHeader.getValue();\n                if (value.contains(\"attachment; filename=\\\"\")) {\n                    fileName = value.substring(\"attachment; filename=\\\"\".length(), value.length() - 1);\n                }\n            }\n\n            file = createTempFile(fileName);\n\n            OutputStream targetStream = new FileOutputStream(file);\n\n            try {\n                IOUtils.copy(sourceStream, targetStream);\n            } catch (Exception e) {\n                IOUtils.closeQuietly(targetStream);\n                FileUtils.deleteQuietly(file);\n                throw e;\n            } finally {\n                IOUtils.closeQuietly(sourceStream);\n                IOUtils.closeQuietly(targetStream);\n                method.releaseConnection();\n            }\n        } finally {\n            method.releaseConnection();\n            httpClient.getHttpConnectionManager().closeIdleConnections(0);\n        }\n\n        Header contentType = method.getResponseHeader(\"Content-Type\");\n        if ((contentType != null && \"application/zip\".equals(contentType.getValue())) || fileName.endsWith(\".zip\")) {\n            file = unzip(file);\n        }\n        logger.debug(\"Downloaded \" + file.getName());\n        return file;\n    }", "signature": "File fetch(URL url)", "full_signature": "@Override public File fetch(URL url)", "class_method_signature": "SyncHttpDownloadService.fetch(URL url)", "testcase": false, "constructor": false, "invocations": ["getHttpClient", "toString", "setParameter", "getParams", "debug", "executeMethod", "sleep", "error", "getMessage", "releaseConnection", "getMessage", "releaseConnection", "getResponseBodyAsStream", "getPath", "getResponseHeader", "getValue", "contains", "substring", "length", "length", "createTempFile", "copy", "closeQuietly", "deleteQuietly", "closeQuietly", "closeQuietly", "releaseConnection", "releaseConnection", "closeIdleConnections", "getHttpConnectionManager", "getResponseHeader", "equals", "getValue", "endsWith", "unzip", "debug", "getName"]}, "repository": {"repo_id": 8849911, "url": "https://github.com/EdvardEakins/FB2OnlineConverter", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 9, "size": 9119, "license": "licensed"}}