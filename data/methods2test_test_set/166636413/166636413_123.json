{"test_class": {"identifier": "PrefMigratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SharedPreferences prefs;", "modifier": "private", "type": "SharedPreferences", "declarator": "prefs", "var_name": "prefs"}, {"original_string": "private static final Migration[] RENAMERS = {\n        PrefMigrator.renameKey(\"colour\").toKey(\"couleur\"),\n        PrefMigrator.renameKey(\"vegetable\").toKey(\"legume\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "RENAMERS = {\n        PrefMigrator.renameKey(\"colour\").toKey(\"couleur\"),\n        PrefMigrator.renameKey(\"vegetable\").toKey(\"legume\")\n    }", "var_name": "RENAMERS"}, {"original_string": "private static final Migration[] TRANSLATORS = {\n        PrefMigrator.translateKey(\"colour\").toKey(\"couleur\")\n            .fromValue(\"red\").toValue(\"rouge\")\n            .fromValue(\"green\").toValue(\"vert\"),\n        PrefMigrator.translateKey(\"vegetable\").toKey(\"legume\")\n            .fromValue(\"tomato\").toValue(\"tomate\")\n            .fromValue(\"eggplant\").toValue(\"aubergine\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "TRANSLATORS = {\n        PrefMigrator.translateKey(\"colour\").toKey(\"couleur\")\n            .fromValue(\"red\").toValue(\"rouge\")\n            .fromValue(\"green\").toValue(\"vert\"),\n        PrefMigrator.translateKey(\"vegetable\").toKey(\"legume\")\n            .fromValue(\"tomato\").toValue(\"tomate\")\n            .fromValue(\"eggplant\").toValue(\"aubergine\")\n    }", "var_name": "TRANSLATORS"}, {"original_string": "private static final Migration[] KEY_SPLITTER = {\n        PrefMigrator.translateKey(\"fruit\").toKey(\"pear\")\n            .fromValue(\"pear_anjou\").toValue(\"anjou\")\n            .fromValue(\"pear_bartlett\").toValue(\"bartlett\"),\n        PrefMigrator.translateKey(\"fruit\").toKey(\"melon\")\n            .fromValue(\"melon_cantaloupe\").toValue(\"cantaloupe\")\n            .fromValue(\"melon_watermelon\").toValue(\"watermelon\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "KEY_SPLITTER = {\n        PrefMigrator.translateKey(\"fruit\").toKey(\"pear\")\n            .fromValue(\"pear_anjou\").toValue(\"anjou\")\n            .fromValue(\"pear_bartlett\").toValue(\"bartlett\"),\n        PrefMigrator.translateKey(\"fruit\").toKey(\"melon\")\n            .fromValue(\"melon_cantaloupe\").toValue(\"cantaloupe\")\n            .fromValue(\"melon_watermelon\").toValue(\"watermelon\")\n    }", "var_name": "KEY_SPLITTER"}, {"original_string": "private static final Migration[] KEY_MERGER = {\n        PrefMigrator.translateKey(\"pear\").toKey(\"fruit\")\n            .fromValue(\"anjou\").toValue(\"pear_anjou\")\n            .fromValue(\"bartlett\").toValue(\"pear_bartlett\"),\n        PrefMigrator.translateKey(\"melon\").toKey(\"fruit\")\n            .fromValue(\"cantaloupe\").toValue(\"melon_cantaloupe\")\n            .fromValue(\"watermelon\").toValue(\"melon_watermelon\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "KEY_MERGER = {\n        PrefMigrator.translateKey(\"pear\").toKey(\"fruit\")\n            .fromValue(\"anjou\").toValue(\"pear_anjou\")\n            .fromValue(\"bartlett\").toValue(\"pear_bartlett\"),\n        PrefMigrator.translateKey(\"melon\").toKey(\"fruit\")\n            .fromValue(\"cantaloupe\").toValue(\"melon_cantaloupe\")\n            .fromValue(\"watermelon\").toValue(\"melon_watermelon\")\n    }", "var_name": "KEY_MERGER"}, {"original_string": "private static final Migration[] COMBINER = {\n        PrefMigrator.combineKeys(\"red\", \"blue\")\n            .withValues(true, true).toPairs(\"mix\", \"purple\")\n            .withValues(true, false).toPairs(\"mix\", \"red\")\n            .withValues(true, null).toPairs(\"mix\", \"red\")\n            .withValues(false, true).toPairs(\"mix\", \"blue\")\n            .withValues(null, true).toPairs(\"mix\", \"blue\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "COMBINER = {\n        PrefMigrator.combineKeys(\"red\", \"blue\")\n            .withValues(true, true).toPairs(\"mix\", \"purple\")\n            .withValues(true, false).toPairs(\"mix\", \"red\")\n            .withValues(true, null).toPairs(\"mix\", \"red\")\n            .withValues(false, true).toPairs(\"mix\", \"blue\")\n            .withValues(null, true).toPairs(\"mix\", \"blue\")\n    }", "var_name": "COMBINER"}, {"original_string": "private static final Migration[] COMBINER_MODIFIER = {\n        PrefMigrator.combineKeys(\"vehicle\", \"fast\")\n            .withValues(\"bicycle\", true).toPairs(\"vehicle\", \"fast_bicycle\")\n            .withValues(\"car\", true).toPairs(\"vehicle\", \"fast_car\")\n    };", "modifier": "private static final", "type": "Migration[]", "declarator": "COMBINER_MODIFIER = {\n        PrefMigrator.combineKeys(\"vehicle\", \"fast\")\n            .withValues(\"bicycle\", true).toPairs(\"vehicle\", \"fast_bicycle\")\n            .withValues(\"car\", true).toPairs(\"vehicle\", \"fast_car\")\n    }", "var_name": "COMBINER_MODIFIER"}], "file": "collect_app/src/test/java/org/odk/collect/android/preferences/PrefMigratorTest.java"}, "test_case": {"identifier": "shouldMigrateMapboxMapSettings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldMigrateMapboxMapSettings() {\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_streets\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.MAPBOX_STREETS);\n\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_light\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.LIGHT);\n\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_dark\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.DARK);\n\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_satellite\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.SATELLITE);\n\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_satellite_streets\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.SATELLITE_STREETS);\n\n        initPrefs(\"map_sdk_behavior\", \"mapbox_maps\", \"map_basemap_behavior\", \"mapbox_outdoors\");\n        PrefMigrator.migrateSharedPrefs();\n        assertPrefs(\"basemap_source\", \"mapbox\", \"mapbox_map_style\", Style.OUTDOORS);\n    }", "signature": "void shouldMigrateMapboxMapSettings()", "full_signature": "@Test public void shouldMigrateMapboxMapSettings()", "class_method_signature": "PrefMigratorTest.shouldMigrateMapboxMapSettings()", "testcase": true, "constructor": false, "invocations": ["initPrefs", "migrateSharedPrefs", "assertPrefs", "initPrefs", "migrateSharedPrefs", "assertPrefs", "initPrefs", "migrateSharedPrefs", "assertPrefs", "initPrefs", "migrateSharedPrefs", "assertPrefs", "initPrefs", "migrateSharedPrefs", "assertPrefs", "initPrefs", "migrateSharedPrefs", "assertPrefs"]}, "focal_class": {"identifier": "PrefMigrator", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Migration[] MIGRATIONS = {\n        translateKey(\"map_sdk_behavior\").toKey(KEY_BASEMAP_SOURCE)\n            .fromValue(\"google_maps\").toValue(\"google\")\n            .fromValue(\"mapbox_maps\").toValue(\"mapbox\"),\n\n        // ListPreferences can only handle string values, so we use string values here.\n        // Note that unfortunately there was a hidden U+200E character in the preference\n        // value for \"terrain\" in previous versions of ODK Collect, so we need to\n        // include that character to match that value correctly.\n        translateKey(\"map_basemap_behavior\").toKey(KEY_GOOGLE_MAP_STYLE)\n            .fromValue(\"streets\").toValue(Integer.toString(GoogleMap.MAP_TYPE_NORMAL))\n            .fromValue(\"terrain\\u200e\").toValue(Integer.toString(GoogleMap.MAP_TYPE_TERRAIN))\n            .fromValue(\"terrain\").toValue(Integer.toString(GoogleMap.MAP_TYPE_TERRAIN))\n            .fromValue(\"hybrid\").toValue(Integer.toString(GoogleMap.MAP_TYPE_HYBRID))\n            .fromValue(\"satellite\").toValue(Integer.toString(GoogleMap.MAP_TYPE_SATELLITE)),\n\n        translateKey(\"map_basemap_behavior\").toKey(KEY_MAPBOX_MAP_STYLE)\n            .fromValue(\"mapbox_streets\").toValue(Style.MAPBOX_STREETS)\n            .fromValue(\"mapbox_light\").toValue(Style.LIGHT)\n            .fromValue(\"mapbox_dark\").toValue(Style.DARK)\n            .fromValue(\"mapbox_satellite\").toValue(Style.SATELLITE)\n            .fromValue(\"mapbox_satellite_streets\").toValue(Style.SATELLITE_STREETS)\n            .fromValue(\"mapbox_outdoors\").toValue(Style.OUTDOORS),\n\n        // When the map_sdk_behavior is \"osmdroid\", we have to also examine the\n        // map_basemap_behavior key to determine the new basemap source.\n        combineKeys(\"map_sdk_behavior\", \"map_basemap_behavior\")\n            .withValues(\"osmdroid\", \"openmap_streets\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_OSM)\n\n            .withValues(\"osmdroid\", \"openmap_usgs_topo\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"topographic\")\n            .withValues(\"osmdroid\", \"openmap_usgs_sat\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"hybrid\")\n            .withValues(\"osmdroid\", \"openmap_usgs_img\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"satellite\")\n\n            .withValues(\"osmdroid\", \"openmap_stamen_terrain\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_STAMEN)\n\n            .withValues(\"osmdroid\", \"openmap_carto_positron\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_CARTO, KEY_CARTO_MAP_STYLE, \"positron\")\n            .withValues(\"osmdroid\", \"openmap_carto_darkmatter\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_CARTO, KEY_CARTO_MAP_STYLE, \"dark_matter\"),\n    };", "modifier": "static final", "type": "Migration[]", "declarator": "MIGRATIONS = {\n        translateKey(\"map_sdk_behavior\").toKey(KEY_BASEMAP_SOURCE)\n            .fromValue(\"google_maps\").toValue(\"google\")\n            .fromValue(\"mapbox_maps\").toValue(\"mapbox\"),\n\n        // ListPreferences can only handle string values, so we use string values here.\n        // Note that unfortunately there was a hidden U+200E character in the preference\n        // value for \"terrain\" in previous versions of ODK Collect, so we need to\n        // include that character to match that value correctly.\n        translateKey(\"map_basemap_behavior\").toKey(KEY_GOOGLE_MAP_STYLE)\n            .fromValue(\"streets\").toValue(Integer.toString(GoogleMap.MAP_TYPE_NORMAL))\n            .fromValue(\"terrain\\u200e\").toValue(Integer.toString(GoogleMap.MAP_TYPE_TERRAIN))\n            .fromValue(\"terrain\").toValue(Integer.toString(GoogleMap.MAP_TYPE_TERRAIN))\n            .fromValue(\"hybrid\").toValue(Integer.toString(GoogleMap.MAP_TYPE_HYBRID))\n            .fromValue(\"satellite\").toValue(Integer.toString(GoogleMap.MAP_TYPE_SATELLITE)),\n\n        translateKey(\"map_basemap_behavior\").toKey(KEY_MAPBOX_MAP_STYLE)\n            .fromValue(\"mapbox_streets\").toValue(Style.MAPBOX_STREETS)\n            .fromValue(\"mapbox_light\").toValue(Style.LIGHT)\n            .fromValue(\"mapbox_dark\").toValue(Style.DARK)\n            .fromValue(\"mapbox_satellite\").toValue(Style.SATELLITE)\n            .fromValue(\"mapbox_satellite_streets\").toValue(Style.SATELLITE_STREETS)\n            .fromValue(\"mapbox_outdoors\").toValue(Style.OUTDOORS),\n\n        // When the map_sdk_behavior is \"osmdroid\", we have to also examine the\n        // map_basemap_behavior key to determine the new basemap source.\n        combineKeys(\"map_sdk_behavior\", \"map_basemap_behavior\")\n            .withValues(\"osmdroid\", \"openmap_streets\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_OSM)\n\n            .withValues(\"osmdroid\", \"openmap_usgs_topo\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"topographic\")\n            .withValues(\"osmdroid\", \"openmap_usgs_sat\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"hybrid\")\n            .withValues(\"osmdroid\", \"openmap_usgs_img\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_USGS, KEY_USGS_MAP_STYLE, \"satellite\")\n\n            .withValues(\"osmdroid\", \"openmap_stamen_terrain\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_STAMEN)\n\n            .withValues(\"osmdroid\", \"openmap_carto_positron\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_CARTO, KEY_CARTO_MAP_STYLE, \"positron\")\n            .withValues(\"osmdroid\", \"openmap_carto_darkmatter\")\n                .toPairs(KEY_BASEMAP_SOURCE, BASEMAP_SOURCE_CARTO, KEY_CARTO_MAP_STYLE, \"dark_matter\"),\n    }", "var_name": "MIGRATIONS"}, {"original_string": "static final Migration[] ADMIN_MIGRATIONS = {\n        // When either the map SDK or the basemap selection were previously\n        // hidden, we want to hide the entire Maps preference screen.\n        translateKey(\"show_map_sdk\").toKey(\"maps\")\n            .fromValue(false).toValue(false),\n        translateKey(\"show_map_basemap\").toKey(\"maps\")\n            .fromValue(false).toValue(false)\n    };", "modifier": "static final", "type": "Migration[]", "declarator": "ADMIN_MIGRATIONS = {\n        // When either the map SDK or the basemap selection were previously\n        // hidden, we want to hide the entire Maps preference screen.\n        translateKey(\"show_map_sdk\").toKey(\"maps\")\n            .fromValue(false).toValue(false),\n        translateKey(\"show_map_basemap\").toKey(\"maps\")\n            .fromValue(false).toValue(false)\n    }", "var_name": "ADMIN_MIGRATIONS"}], "methods": [{"identifier": "PrefMigrator", "parameters": "()", "modifiers": "private", "return": "", "signature": " PrefMigrator()", "full_signature": "private  PrefMigrator()", "class_method_signature": "PrefMigrator.PrefMigrator()", "testcase": false, "constructor": true}, {"identifier": "migrate", "parameters": "(SharedPreferences prefs, Migration... migrations)", "modifiers": "public static", "return": "void", "signature": "void migrate(SharedPreferences prefs, Migration... migrations)", "full_signature": "public static void migrate(SharedPreferences prefs, Migration... migrations)", "class_method_signature": "PrefMigrator.migrate(SharedPreferences prefs, Migration... migrations)", "testcase": false, "constructor": false}, {"identifier": "migrateSharedPrefs", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void migrateSharedPrefs()", "full_signature": "public static void migrateSharedPrefs()", "class_method_signature": "PrefMigrator.migrateSharedPrefs()", "testcase": false, "constructor": false}, {"identifier": "renameKey", "parameters": "(String oldKey)", "modifiers": "static", "return": "KeyRenamer", "signature": "KeyRenamer renameKey(String oldKey)", "full_signature": "static KeyRenamer renameKey(String oldKey)", "class_method_signature": "PrefMigrator.renameKey(String oldKey)", "testcase": false, "constructor": false}, {"identifier": "translateKey", "parameters": "(String oldKey)", "modifiers": "static", "return": "KeyTranslator", "signature": "KeyTranslator translateKey(String oldKey)", "full_signature": "static KeyTranslator translateKey(String oldKey)", "class_method_signature": "PrefMigrator.translateKey(String oldKey)", "testcase": false, "constructor": false}, {"identifier": "combineKeys", "parameters": "(String... oldKeys)", "modifiers": "static", "return": "KeyCombiner", "signature": "KeyCombiner combineKeys(String... oldKeys)", "full_signature": "static KeyCombiner combineKeys(String... oldKeys)", "class_method_signature": "PrefMigrator.combineKeys(String... oldKeys)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(SharedPreferences prefs, String oldKey, String newKey, Object newValue)", "modifiers": "@SuppressLint(\"ApplySharedPref\") private static", "return": "void", "signature": "void replace(SharedPreferences prefs, String oldKey, String newKey, Object newValue)", "full_signature": "@SuppressLint(\"ApplySharedPref\") private static void replace(SharedPreferences prefs, String oldKey, String newKey, Object newValue)", "class_method_signature": "PrefMigrator.replace(SharedPreferences prefs, String oldKey, String newKey, Object newValue)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(SharedPreferences prefs, String[] oldKeys, Pair... newPairs)", "modifiers": "@SuppressLint(\"ApplySharedPref\") private static", "return": "void", "signature": "void replace(SharedPreferences prefs, String[] oldKeys, Pair... newPairs)", "full_signature": "@SuppressLint(\"ApplySharedPref\") private static void replace(SharedPreferences prefs, String[] oldKeys, Pair... newPairs)", "class_method_signature": "PrefMigrator.replace(SharedPreferences prefs, String[] oldKeys, Pair... newPairs)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(SharedPreferences.Editor editor, String key, Object value)", "modifiers": "private static", "return": "void", "signature": "void put(SharedPreferences.Editor editor, String key, Object value)", "full_signature": "private static void put(SharedPreferences.Editor editor, String key, Object value)", "class_method_signature": "PrefMigrator.put(SharedPreferences.Editor editor, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "asPairs", "parameters": "(Object... args)", "modifiers": "private static", "return": "Pair[]", "signature": "Pair[] asPairs(Object... args)", "full_signature": "private static Pair[] asPairs(Object... args)", "class_method_signature": "PrefMigrator.asPairs(Object... args)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/preferences/PrefMigrator.java"}, "focal_method": {"identifier": "migrateSharedPrefs", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void migrateSharedPrefs() {\n        migrate(PrefUtils.getSharedPrefs(), MIGRATIONS);\n        migrate(PrefUtils.getAdminSharedPrefs(), ADMIN_MIGRATIONS);\n    }", "signature": "void migrateSharedPrefs()", "full_signature": "public static void migrateSharedPrefs()", "class_method_signature": "PrefMigrator.migrateSharedPrefs()", "testcase": false, "constructor": false, "invocations": ["migrate", "getSharedPrefs", "migrate", "getAdminSharedPrefs"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}