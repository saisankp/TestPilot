{"test_class": {"identifier": "ErrorTagTest", "superclass": "", "interfaces": "", "fields": [], "file": "web-framework/src/test/java/org/unidal/web/jsp/tag/ErrorTagTest.java"}, "test_case": {"identifier": "testCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testCode() {\n      ErrorTag tag = new ErrorTag();\n\n      String result = tag.processBody(\"Code is ${code}.\", new ErrorObject(\"id\"));\n      String expected = \"Code is id.\";\n\n      Assert.assertEquals(expected, result);\n   }", "signature": "void testCode()", "full_signature": "@Test public void testCode()", "class_method_signature": "ErrorTagTest.testCode()", "testcase": true, "constructor": false, "invocations": ["processBody", "assertEquals"]}, "focal_class": {"identifier": "ErrorTag", "superclass": "extends AbstractBodyTag", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private String m_code;", "modifier": "private", "type": "String", "declarator": "m_code", "var_name": "m_code"}, {"original_string": "private boolean m_enabled = true;", "modifier": "private", "type": "boolean", "declarator": "m_enabled = true", "var_name": "m_enabled"}], "methods": [{"identifier": "findError", "parameters": "(String code)", "modifiers": "private", "return": "ErrorObject", "signature": "ErrorObject findError(String code)", "full_signature": "private ErrorObject findError(String code)", "class_method_signature": "ErrorTag.findError(String code)", "testcase": false, "constructor": false}, {"identifier": "findMessagePattern", "parameters": "(String code, ErrorsTag parent)", "modifiers": "private", "return": "String", "signature": "String findMessagePattern(String code, ErrorsTag parent)", "full_signature": "private String findMessagePattern(String code, ErrorsTag parent)", "class_method_signature": "ErrorTag.findMessagePattern(String code, ErrorsTag parent)", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "()", "modifiers": "private", "return": "List<ErrorObject>", "signature": "List<ErrorObject> getErrors()", "full_signature": "private List<ErrorObject> getErrors()", "class_method_signature": "ErrorTag.getErrors()", "testcase": false, "constructor": false}, {"identifier": "handleBody", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void handleBody()", "full_signature": "@Override protected void handleBody()", "class_method_signature": "ErrorTag.handleBody()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "(String str)", "modifiers": "private", "return": "void", "signature": "void out(String str)", "full_signature": "private void out(String str)", "class_method_signature": "ErrorTag.out(String str)", "testcase": false, "constructor": false}, {"identifier": "processBody", "parameters": "(String body, ErrorObject error)", "modifiers": "", "return": "String", "signature": "String processBody(String body, ErrorObject error)", "full_signature": " String processBody(String body, ErrorObject error)", "class_method_signature": "ErrorTag.processBody(String body, ErrorObject error)", "testcase": false, "constructor": false}, {"identifier": "processPlaceholder", "parameters": "(String name, ErrorObject error)", "modifiers": "", "return": "String", "signature": "String processPlaceholder(String name, ErrorObject error)", "full_signature": " String processPlaceholder(String name, ErrorObject error)", "class_method_signature": "ErrorTag.processPlaceholder(String name, ErrorObject error)", "testcase": false, "constructor": false}, {"identifier": "setCode", "parameters": "(String code)", "modifiers": "@AttributeMeta(required = true) public", "return": "void", "signature": "void setCode(String code)", "full_signature": "@AttributeMeta(required = true) public void setCode(String code)", "class_method_signature": "ErrorTag.setCode(String code)", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean enabled)", "modifiers": "@AttributeMeta public", "return": "void", "signature": "void setEnabled(boolean enabled)", "full_signature": "@AttributeMeta public void setEnabled(boolean enabled)", "class_method_signature": "ErrorTag.setEnabled(boolean enabled)", "testcase": false, "constructor": false}], "file": "web-framework/src/main/java/org/unidal/web/jsp/tag/ErrorTag.java"}, "focal_method": {"identifier": "processBody", "parameters": "(String body, ErrorObject error)", "modifiers": "", "return": "String", "body": "String processBody(String body, ErrorObject error) {\n      StringBuilder sb = new StringBuilder(2048);\n      int len = body.length();\n      boolean dollar = false;\n      int bracketStart = -1;\n\n      for (int i = 0; i < len; i++) {\n         char ch = body.charAt(i);\n\n         switch (ch) {\n         case '$':\n            if (dollar) {\n               sb.append(ch);\n            }\n\n            dollar = true;\n            break;\n         case '{':\n            if (dollar) {\n               bracketStart = i;\n               dollar = false;\n            } else {\n               sb.append(ch);\n            }\n            break;\n         case '}':\n            if (bracketStart >= 0) {\n               String name = body.substring(bracketStart + 1, i);\n               String value = processPlaceholder(name.trim(), error);\n\n               if (value != null) {\n                  sb.append(value);\n               }\n            }\n\n            bracketStart = -1;\n            break;\n         case '\\\\':\n            if (i + 1 < len) {\n               char ch2 = body.charAt(i + 1);\n\n               if (ch2 == '\\\\' || ch2 == '$') {\n                  sb.append(ch2);\n                  i++;\n                  break;\n               }\n            }\n\n            // break through\n         default:\n            if (bracketStart < 0) {\n               if (dollar) {\n                  sb.append('$');\n               }\n\n               sb.append(ch);\n               dollar = false;\n            }\n\n            break;\n         }\n      }\n\n      return sb.toString();\n   }", "signature": "String processBody(String body, ErrorObject error)", "full_signature": " String processBody(String body, ErrorObject error)", "class_method_signature": "ErrorTag.processBody(String body, ErrorObject error)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "append", "append", "substring", "processPlaceholder", "trim", "append", "charAt", "append", "append", "append", "toString"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}