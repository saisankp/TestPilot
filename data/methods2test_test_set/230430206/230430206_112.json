{"test_class": {"identifier": "FinalRequestProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ACL> testACLs = new ArrayList<ACL>();", "modifier": "private", "type": "List<ACL>", "declarator": "testACLs = new ArrayList<ACL>()", "var_name": "testACLs"}, {"original_string": "private final Record[] responseRecord = new Record[1];", "modifier": "private final", "type": "Record[]", "declarator": "responseRecord = new Record[1]", "var_name": "responseRecord"}, {"original_string": "private final ReplyHeader[] replyHeaders = new ReplyHeader[1];", "modifier": "private final", "type": "ReplyHeader[]", "declarator": "replyHeaders = new ReplyHeader[1]", "var_name": "replyHeaders"}, {"original_string": "private ServerCnxn cnxn;", "modifier": "private", "type": "ServerCnxn", "declarator": "cnxn", "var_name": "cnxn"}, {"original_string": "private ByteBuffer bb;", "modifier": "private", "type": "ByteBuffer", "declarator": "bb", "var_name": "bb"}, {"original_string": "private FinalRequestProcessor processor;", "modifier": "private", "type": "FinalRequestProcessor", "declarator": "processor", "var_name": "processor"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java"}, "test_case": {"identifier": "testACLDigestHashHiding_UserCanRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testACLDigestHashHiding_UserCanRead() {\n        // Arrange\n        List<Id> authInfo = new ArrayList<Id>();\n        authInfo.add(new Id(\"digest\", \"otheruser:somesecrethash\"));\n\n        // Act\n        Request r = new Request(cnxn, 0, 0, ZooDefs.OpCode.getACL, bb, authInfo);\n        processor.processRequest(r);\n\n        // Assert\n        assertMasked(true);\n    }", "signature": "void testACLDigestHashHiding_UserCanRead()", "full_signature": "@Test public void testACLDigestHashHiding_UserCanRead()", "class_method_signature": "FinalRequestProcessorTest.testACLDigestHashHiding_UserCanRead()", "testcase": true, "constructor": false, "invocations": ["add", "processRequest", "assertMasked"]}, "focal_class": {"identifier": "FinalRequestProcessor", "superclass": "", "interfaces": "implements RequestProcessor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FinalRequestProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FinalRequestProcessor.class)", "var_name": "LOG"}, {"original_string": "ZooKeeperServer zks;", "modifier": "", "type": "ZooKeeperServer", "declarator": "zks", "var_name": "zks"}], "methods": [{"identifier": "FinalRequestProcessor", "parameters": "(ZooKeeperServer zks)", "modifiers": "public", "return": "", "signature": " FinalRequestProcessor(ZooKeeperServer zks)", "full_signature": "public  FinalRequestProcessor(ZooKeeperServer zks)", "class_method_signature": "FinalRequestProcessor.FinalRequestProcessor(ZooKeeperServer zks)", "testcase": false, "constructor": true}, {"identifier": "processRequest", "parameters": "(Request request)", "modifiers": "public", "return": "void", "signature": "void processRequest(Request request)", "full_signature": "public void processRequest(Request request)", "class_method_signature": "FinalRequestProcessor.processRequest(Request request)", "testcase": false, "constructor": false}, {"identifier": "closeSession", "parameters": "(ServerCnxnFactory serverCnxnFactory, long sessionId)", "modifiers": "private", "return": "boolean", "signature": "boolean closeSession(ServerCnxnFactory serverCnxnFactory, long sessionId)", "full_signature": "private boolean closeSession(ServerCnxnFactory serverCnxnFactory, long sessionId)", "class_method_signature": "FinalRequestProcessor.closeSession(ServerCnxnFactory serverCnxnFactory, long sessionId)", "testcase": false, "constructor": false}, {"identifier": "connClosedByClient", "parameters": "(Request request)", "modifiers": "private", "return": "boolean", "signature": "boolean connClosedByClient(Request request)", "full_signature": "private boolean connClosedByClient(Request request)", "class_method_signature": "FinalRequestProcessor.connClosedByClient(Request request)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "FinalRequestProcessor.shutdown()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java"}, "focal_method": {"identifier": "processRequest", "parameters": "(Request request)", "modifiers": "public", "return": "void", "body": "public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        // request.addRQRec(\">final\");\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            // Need to process local session requests\n            rc = zks.processTxn(request);\n\n            // request.hdr is set for write requests, which are the only ones\n            // that add to outstandingChanges.\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                Record txn = request.getTxn();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            // do not add non quorum packets to the queue.\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        // ZOOKEEPER-558:\n        // In some cases the server does not close the connection (e.g., closeconn buffer\n        // was not being queued \u2014 ZOOKEEPER-558) properly. This happens, for example,\n        // when the client closes the connection. The server should still close the session, though.\n        // Calling closeSession() after losing the cnxn, results in the client close session response being dropped.\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            // We need to check if we can close the session id.\n            // Sometimes the corresponding ServerCnxnFactory could be null because\n            // we are just playing diffs from the leader.\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                /*\n                 * When local session upgrading is disabled, leader will\n                 * reject the ephemeral node creation due to session expire.\n                 * However, if this is the follower that issue the request,\n                 * it will have the correct error code, so we should use that\n                 * and report to user\n                 */\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n            switch (request.type) {\n            case OpCode.ping: {\n                zks.serverStats().updateLatency(request.createTime);\n\n                lastOp = \"PING\";\n                cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp,\n                        request.createTime, Time.currentElapsedTime());\n\n                cnxn.sendResponse(new ReplyHeader(-2,\n                        zks.getZKDatabase().getDataTreeLastProcessedZxid(), 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                zks.serverStats().updateLatency(request.createTime);\n\n                lastOp = \"SESS\";\n                cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp,\n                        request.createTime, Time.currentElapsedTime());\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                // TODO we need to figure out the security requirement for this!\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                String path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                DataNode n = zks.getZKDatabase().getNode(getDataRequest.getPath());\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo);\n                Stat stat = new Stat();\n                byte b[] = zks.getZKDatabase().getData(getDataRequest.getPath(), stat,\n                        getDataRequest.getWatch() ? cnxn : null);\n                rsp = new GetDataResponse(b, stat);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                // XXX We really should NOT need this!!!!\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                DataNode n = zks.getZKDatabase().getNode(getACLRequest.getPath());\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(getACLRequest.getPath(), stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                DataNode n = zks.getZKDatabase().getNode(getChildrenRequest.getPath());\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        getChildrenRequest.getPath(), null, getChildrenRequest\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildrenResponse(children);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                DataNode n = zks.getZKDatabase().getNode(getChildren2Request.getPath());\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        getChildren2Request.getPath(), stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        checkWatches.getPath(), type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            checkWatches.getPath(), type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        removeWatches.getPath(), type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            removeWatches.getPath(), type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            // session moved is a connection level error, we need to tear\n            // down the connection otw ZOOKEEPER-710 might happen\n            // ie client on slow follower starts to renew session, fails\n            // before this completes, then tries the fast follower (leader)\n            // and is successful, however the initial renew is then\n            // successfully fwd/processed by the leader and as a result\n            // the client and leader disagree on where the client is most\n            // recently attached (and therefore invalid SESSION MOVED generated)\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            // log at error level as we are returning a marshalling\n            // error to the user\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        zks.serverStats().updateLatency(request.createTime);\n        cnxn.updateStatsForResponse(request.cxid, lastZxid, lastOp,\n                    request.createTime, Time.currentElapsedTime());\n\n        try {\n            cnxn.sendResponse(hdr, rsp, \"response\");\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }", "signature": "void processRequest(Request request)", "full_signature": "public void processRequest(Request request)", "class_method_signature": "FinalRequestProcessor.processRequest(Request request)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "isTraceEnabled", "logRequest", "processTxn", "getHdr", "getHdr", "getTxn", "getZxid", "isEmpty", "peek", "remove", "warn", "get", "remove", "isQuorum", "addCommittedProposal", "getZKDatabase", "connClosedByClient", "closeSession", "closeSession", "decInProcess", "getHdr", "getType", "getHdr", "getException", "getException", "create", "get", "getErr", "getTxn", "getException", "isDebugEnabled", "debug", "updateLatency", "serverStats", "updateStatsForResponse", "currentElapsedTime", "sendResponse", "getDataTreeLastProcessedZxid", "getZKDatabase", "updateLatency", "serverStats", "updateStatsForResponse", "currentElapsedTime", "finishSessionInit", "add", "get", "get", "get", "get", "getBytes", "toString", "getQuorumVerifier", "get", "get", "get", "byteBuffer2Record", "getPath", "get", "byteBuffer2Record", "getPath", "indexOf", "statNode", "getZKDatabase", "getWatch", "byteBuffer2Record", "getNode", "getZKDatabase", "getPath", "checkACL", "aclForNode", "getZKDatabase", "getData", "getZKDatabase", "getPath", "getWatch", "rewind", "byteBuffer2Record", "getRelativeZxid", "setWatches", "getZKDatabase", "getDataWatches", "getExistWatches", "getChildWatches", "byteBuffer2Record", "getNode", "getZKDatabase", "getPath", "checkACL", "aclForNode", "getZKDatabase", "getACL", "getZKDatabase", "getPath", "checkACL", "aclForNode", "getZKDatabase", "size", "equals", "getScheme", "getId", "getId", "getScheme", "replaceAll", "getId", "add", "getPerms", "add", "byteBuffer2Record", "getNode", "getZKDatabase", "getPath", "checkACL", "aclForNode", "getZKDatabase", "getChildren", "getZKDatabase", "getPath", "getWatch", "byteBuffer2Record", "getNode", "getZKDatabase", "getPath", "checkACL", "aclForNode", "getZKDatabase", "getChildren", "getZKDatabase", "getPath", "getWatch", "byteBuffer2Record", "fromInt", "getType", "containsWatcher", "getZKDatabase", "getPath", "format", "getPath", "byteBuffer2Record", "fromInt", "getType", "removeWatch", "getZKDatabase", "getPath", "format", "getPath", "sendCloseSession", "code", "error", "rewind", "hasRemaining", "append", "toHexString", "get", "error", "toString", "getDataTreeLastProcessedZxid", "getZKDatabase", "intValue", "updateLatency", "serverStats", "updateStatsForResponse", "currentElapsedTime", "sendResponse", "sendCloseSession", "error"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}