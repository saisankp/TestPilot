{"test_class": {"identifier": "SubRoundTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-core/src/test/java/network/elrond/chronology/SubRoundTest.java"}, "test_case": {"identifier": "printSubRound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void printSubRound(){\n        assertEquals(\n        \t\t\"SubRound{RoundState=null, round=null, timestamp=0}\", \n        \t\tnew SubRound(null, null, 0).toString());\n        \n        assertEquals(\n        \t\t\"SubRound{RoundState=SubRoundType{START_ROUND, order=0, duration:0}, round=Round{index=0, start timestamp=0}, timestamp=123}\", \n        \t\tnew SubRound(new Round(), RoundState.START_ROUND, 123).toString());\n    }", "signature": "void printSubRound()", "full_signature": "@Test public void printSubRound()", "class_method_signature": "SubRoundTest.printSubRound()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "assertEquals", "toString"]}, "focal_class": {"identifier": "SubRound", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Round round;", "modifier": "private final", "type": "Round", "declarator": "round", "var_name": "round"}, {"original_string": "private final RoundState roundState;", "modifier": "private final", "type": "RoundState", "declarator": "roundState", "var_name": "roundState"}, {"original_string": "private final long timeStamp;", "modifier": "private final", "type": "long", "declarator": "timeStamp", "var_name": "timeStamp"}], "methods": [{"identifier": "SubRound", "parameters": "(Round round, RoundState roundState, long timeStamp)", "modifiers": "public", "return": "", "signature": " SubRound(Round round, RoundState roundState, long timeStamp)", "full_signature": "public  SubRound(Round round, RoundState roundState, long timeStamp)", "class_method_signature": "SubRound.SubRound(Round round, RoundState roundState, long timeStamp)", "testcase": false, "constructor": true}, {"identifier": "getRoundState", "parameters": "()", "modifiers": "public", "return": "RoundState", "signature": "RoundState getRoundState()", "full_signature": "public RoundState getRoundState()", "class_method_signature": "SubRound.getRoundState()", "testcase": false, "constructor": false}, {"identifier": "getRound", "parameters": "()", "modifiers": "public", "return": "Round", "signature": "Round getRound()", "full_signature": "public Round getRound()", "class_method_signature": "SubRound.getRound()", "testcase": false, "constructor": false}, {"identifier": "getTimeStamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeStamp()", "full_signature": "public long getTimeStamp()", "class_method_signature": "SubRound.getTimeStamp()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubRound.toString()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/chronology/SubRound.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString(){\n        return (String.format(\"SubRound{RoundState=%s, round=%s, timestamp=%d}\",\n                roundState, round, timeStamp));\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubRound.toString()", "testcase": false, "constructor": false, "invocations": ["format"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}