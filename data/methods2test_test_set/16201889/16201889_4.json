{"test_class": {"identifier": "NameFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ParsedName pn;", "modifier": "", "type": "ParsedName", "declarator": "pn", "var_name": "pn"}], "file": "name-parser-api/src/test/java/org/gbif/nameparser/util/NameFormatterTest.java"}, "test_case": {"identifier": "testCanonicalNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCanonicalNames() throws Exception {\n    pn.setGenus(\"Abies\");\n    assertEquals(\"Abies\", pn.canonicalName());\n    \n    pn.setSpecificEpithet(\"alba\");\n    assertEquals(\"Abies alba\", pn.canonicalName());\n    \n    pn = new ParsedName();\n    pn.setGenus(\"Abies\");\n    pn.setSpecificEpithet(\"alba\");\n    pn.setRank(Rank.VARIETY);\n    pn.setCombinationAuthorship(Authorship.yearAuthors(\"1887\", \"Mill.\"));\n    pn.setBasionymAuthorship(Authorship.authors(\"Carl.\"));\n    pn.setNotho(NamePart.GENERIC);\n    pn.setInfraspecificEpithet(\"alpina\");\n    pn.setTaxonomicNote(\"D\u00f6ring\");\n    pn.setNomenclaturalNote(\"nom. illeg.\");\n    \n    assertEquals(\"Abies alba alpina\", NameFormatter.canonicalMinimal(pn));\n    assertEquals(\"\u00d7 Abies alba var. alpina\", NameFormatter.canonicalWithoutAuthorship(pn));\n    assertEquals(\"\u00d7 Abies alba var. alpina (Carl.) Mill., 1887\", NameFormatter.canonical(pn));\n    assertEquals(\"\u00d7 Abies alba var. alpina (Carl.) Mill., 1887 D\u00f6ring, nom. illeg.\", NameFormatter.canonicalComplete(pn));\n  }", "signature": "void testCanonicalNames()", "full_signature": "@Test public void testCanonicalNames()", "class_method_signature": "NameFormatterTest.testCanonicalNames()", "testcase": true, "constructor": false, "invocations": ["setGenus", "assertEquals", "canonicalName", "setSpecificEpithet", "assertEquals", "canonicalName", "setGenus", "setSpecificEpithet", "setRank", "setCombinationAuthorship", "yearAuthors", "setBasionymAuthorship", "authors", "setNotho", "setInfraspecificEpithet", "setTaxonomicNote", "setNomenclaturalNote", "assertEquals", "canonicalMinimal", "assertEquals", "anonicalWithoutAuthorship(", "assertEquals", "anonical(", "assertEquals", "nonicalComplete(p"]}, "focal_class": {"identifier": "NameFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char HYBRID_MARKER = '\u00d7';", "modifier": "public static final", "type": "char", "declarator": "HYBRID_MARKER = '\u00d7';", "var_name": "HYBRID_MARKER"}, {"original_string": "private static final String NOTHO_PREFIX = \"notho\";", "modifier": "private static final", "type": "String", "declarator": "NOTHO_PREFIX = \"notho\"", "var_name": "NOTHO_PREFIX"}, {"original_string": "private static final Joiner AUTHORSHIP_JOINER = Joiner.on(\", \").skipNulls();", "modifier": "private static final", "type": "Joiner", "declarator": "AUTHORSHIP_JOINER = Joiner.on(\", \").skipNulls()", "var_name": "AUTHORSHIP_JOINER"}, {"original_string": "private static final String ITALICS_OPEN = \"<i>\";", "modifier": "private static final", "type": "String", "declarator": "ITALICS_OPEN = \"<i>\"", "var_name": "ITALICS_OPEN"}, {"original_string": "private static final String ITALICS_CLOSE = \"</i>\";", "modifier": "private static final", "type": "String", "declarator": "ITALICS_CLOSE = \"</i>\"", "var_name": "ITALICS_CLOSE"}, {"original_string": "private static final Pattern AL = Pattern.compile(\"^al\\\\.?$\");", "modifier": "private static final", "type": "Pattern", "declarator": "AL = Pattern.compile(\"^al\\\\.?$\")", "var_name": "AL"}], "methods": [{"identifier": "NameFormatter", "parameters": "()", "modifiers": "private", "return": "", "signature": " NameFormatter()", "full_signature": "private  NameFormatter()", "class_method_signature": "NameFormatter.NameFormatter()", "testcase": false, "constructor": true}, {"identifier": "canonical", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "signature": "String canonical(ParsedName n)", "full_signature": "public static String canonical(ParsedName n)", "class_method_signature": "NameFormatter.canonical(ParsedName n)", "testcase": false, "constructor": false}, {"identifier": "canonicalWithoutAuthorship", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "signature": "String canonicalWithoutAuthorship(ParsedName n)", "full_signature": "public static String canonicalWithoutAuthorship(ParsedName n)", "class_method_signature": "NameFormatter.canonicalWithoutAuthorship(ParsedName n)", "testcase": false, "constructor": false}, {"identifier": "canonicalMinimal", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "signature": "String canonicalMinimal(ParsedName n)", "full_signature": "public static String canonicalMinimal(ParsedName n)", "class_method_signature": "NameFormatter.canonicalMinimal(ParsedName n)", "testcase": false, "constructor": false}, {"identifier": "canonicalComplete", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "signature": "String canonicalComplete(ParsedName n)", "full_signature": "public static String canonicalComplete(ParsedName n)", "class_method_signature": "NameFormatter.canonicalComplete(ParsedName n)", "testcase": false, "constructor": false}, {"identifier": "canonicalCompleteHtml", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "signature": "String canonicalCompleteHtml(ParsedName n)", "full_signature": "public static String canonicalCompleteHtml(ParsedName n)", "class_method_signature": "NameFormatter.canonicalCompleteHtml(ParsedName n)", "testcase": false, "constructor": false}, {"identifier": "authorshipComplete", "parameters": "(ParsedAuthorship n)", "modifiers": "public static", "return": "String", "signature": "String authorshipComplete(ParsedAuthorship n)", "full_signature": "public static String authorshipComplete(ParsedAuthorship n)", "class_method_signature": "NameFormatter.authorshipComplete(ParsedAuthorship n)", "testcase": false, "constructor": false}, {"identifier": "authorString", "parameters": "(Authorship authors, boolean inclYear)", "modifiers": "public static", "return": "String", "signature": "String authorString(Authorship authors, boolean inclYear)", "full_signature": "public static String authorString(Authorship authors, boolean inclYear)", "class_method_signature": "NameFormatter.authorString(Authorship authors, boolean inclYear)", "testcase": false, "constructor": false}, {"identifier": "openItalics", "parameters": "(StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void openItalics(StringBuilder sb)", "full_signature": "private static void openItalics(StringBuilder sb)", "class_method_signature": "NameFormatter.openItalics(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "closeItalics", "parameters": "(StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void closeItalics(StringBuilder sb)", "full_signature": "private static void closeItalics(StringBuilder sb)", "class_method_signature": "NameFormatter.closeItalics(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendInItalics", "parameters": "(StringBuilder sb, String x, boolean html)", "modifiers": "private static", "return": "void", "signature": "void appendInItalics(StringBuilder sb, String x, boolean html)", "full_signature": "private static void appendInItalics(StringBuilder sb, String x, boolean html)", "class_method_signature": "NameFormatter.appendInItalics(StringBuilder sb, String x, boolean html)", "testcase": false, "constructor": false}, {"identifier": "buildName", "parameters": "(ParsedName n,\n                                 boolean hybridMarker,\n                                 boolean rankMarker,\n                                 boolean authorship,\n                                 boolean genusForinfrageneric,\n                                 boolean infrageneric,\n                                 boolean decomposition,\n                                 boolean asciiOnly,\n                                 boolean showQualifier,\n                                 boolean showIndet,\n                                 boolean nomNote,\n                                 boolean showSensu,\n                                 boolean showCultivar,\n                                 boolean showStrain,\n                                 boolean html\n  )", "modifiers": "public static", "return": "String", "signature": "String buildName(ParsedName n,\n                                 boolean hybridMarker,\n                                 boolean rankMarker,\n                                 boolean authorship,\n                                 boolean genusForinfrageneric,\n                                 boolean infrageneric,\n                                 boolean decomposition,\n                                 boolean asciiOnly,\n                                 boolean showQualifier,\n                                 boolean showIndet,\n                                 boolean nomNote,\n                                 boolean showSensu,\n                                 boolean showCultivar,\n                                 boolean showStrain,\n                                 boolean html\n  )", "full_signature": "public static String buildName(ParsedName n,\n                                 boolean hybridMarker,\n                                 boolean rankMarker,\n                                 boolean authorship,\n                                 boolean genusForinfrageneric,\n                                 boolean infrageneric,\n                                 boolean decomposition,\n                                 boolean asciiOnly,\n                                 boolean showQualifier,\n                                 boolean showIndet,\n                                 boolean nomNote,\n                                 boolean showSensu,\n                                 boolean showCultivar,\n                                 boolean showStrain,\n                                 boolean html\n  )", "class_method_signature": "NameFormatter.buildName(ParsedName n,\n                                 boolean hybridMarker,\n                                 boolean rankMarker,\n                                 boolean authorship,\n                                 boolean genusForinfrageneric,\n                                 boolean infrageneric,\n                                 boolean decomposition,\n                                 boolean asciiOnly,\n                                 boolean showQualifier,\n                                 boolean showIndet,\n                                 boolean nomNote,\n                                 boolean showSensu,\n                                 boolean showCultivar,\n                                 boolean showStrain,\n                                 boolean html\n  )", "testcase": false, "constructor": false}, {"identifier": "appendInfraspecific", "parameters": "(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean rankMarker, boolean forceRankMarker, boolean html)", "modifiers": "private static", "return": "StringBuilder", "signature": "StringBuilder appendInfraspecific(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean rankMarker, boolean forceRankMarker, boolean html)", "full_signature": "private static StringBuilder appendInfraspecific(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean rankMarker, boolean forceRankMarker, boolean html)", "class_method_signature": "NameFormatter.appendInfraspecific(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean rankMarker, boolean forceRankMarker, boolean html)", "testcase": false, "constructor": false}, {"identifier": "appendIfNotEmpty", "parameters": "(StringBuilder sb, String toAppend)", "modifiers": "private static", "return": "StringBuilder", "signature": "StringBuilder appendIfNotEmpty(StringBuilder sb, String toAppend)", "full_signature": "private static StringBuilder appendIfNotEmpty(StringBuilder sb, String toAppend)", "class_method_signature": "NameFormatter.appendIfNotEmpty(StringBuilder sb, String toAppend)", "testcase": false, "constructor": false}, {"identifier": "isNotZoo", "parameters": "(NomCode code)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNotZoo(NomCode code)", "full_signature": "private static boolean isNotZoo(NomCode code)", "class_method_signature": "NameFormatter.isNotZoo(NomCode code)", "testcase": false, "constructor": false}, {"identifier": "isUnknown", "parameters": "(Rank r)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUnknown(Rank r)", "full_signature": "private static boolean isUnknown(Rank r)", "class_method_signature": "NameFormatter.isUnknown(Rank r)", "testcase": false, "constructor": false}, {"identifier": "isInfragenericMarker", "parameters": "(Rank r)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInfragenericMarker(Rank r)", "full_signature": "private static boolean isInfragenericMarker(Rank r)", "class_method_signature": "NameFormatter.isInfragenericMarker(Rank r)", "testcase": false, "constructor": false}, {"identifier": "isInfraspecificMarker", "parameters": "(Rank r)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInfraspecificMarker(Rank r)", "full_signature": "private static boolean isInfraspecificMarker(Rank r)", "class_method_signature": "NameFormatter.isInfraspecificMarker(Rank r)", "testcase": false, "constructor": false}, {"identifier": "appendRankMarker", "parameters": "(StringBuilder sb, Rank rank, boolean nothoPrefix)", "modifiers": "private static", "return": "boolean", "signature": "boolean appendRankMarker(StringBuilder sb, Rank rank, boolean nothoPrefix)", "full_signature": "private static boolean appendRankMarker(StringBuilder sb, Rank rank, boolean nothoPrefix)", "class_method_signature": "NameFormatter.appendRankMarker(StringBuilder sb, Rank rank, boolean nothoPrefix)", "testcase": false, "constructor": false}, {"identifier": "appendRankMarker", "parameters": "(StringBuilder sb, Rank rank, Predicate<Rank> ifRank, boolean nothoPrefix)", "modifiers": "private static", "return": "boolean", "signature": "boolean appendRankMarker(StringBuilder sb, Rank rank, Predicate<Rank> ifRank, boolean nothoPrefix)", "full_signature": "private static boolean appendRankMarker(StringBuilder sb, Rank rank, Predicate<Rank> ifRank, boolean nothoPrefix)", "class_method_signature": "NameFormatter.appendRankMarker(StringBuilder sb, Rank rank, Predicate<Rank> ifRank, boolean nothoPrefix)", "testcase": false, "constructor": false}, {"identifier": "appendGenus", "parameters": "(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean html)", "modifiers": "private static", "return": "StringBuilder", "signature": "StringBuilder appendGenus(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean html)", "full_signature": "private static StringBuilder appendGenus(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean html)", "class_method_signature": "NameFormatter.appendGenus(StringBuilder sb, ParsedName n, boolean hybridMarker, boolean showQualifier, boolean html)", "testcase": false, "constructor": false}, {"identifier": "joinAuthors", "parameters": "(List<String> authors, boolean abbrevWithEtAl)", "modifiers": "private static", "return": "String", "signature": "String joinAuthors(List<String> authors, boolean abbrevWithEtAl)", "full_signature": "private static String joinAuthors(List<String> authors, boolean abbrevWithEtAl)", "class_method_signature": "NameFormatter.joinAuthors(List<String> authors, boolean abbrevWithEtAl)", "testcase": false, "constructor": false}, {"identifier": "appendAuthorship", "parameters": "(StringBuilder sb, Authorship auth, boolean includeYear)", "modifiers": "public static", "return": "void", "signature": "void appendAuthorship(StringBuilder sb, Authorship auth, boolean includeYear)", "full_signature": "public static void appendAuthorship(StringBuilder sb, Authorship auth, boolean includeYear)", "class_method_signature": "NameFormatter.appendAuthorship(StringBuilder sb, Authorship auth, boolean includeYear)", "testcase": false, "constructor": false}, {"identifier": "appendAuthorship", "parameters": "(ParsedAuthorship a, StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void appendAuthorship(ParsedAuthorship a, StringBuilder sb)", "full_signature": "private static void appendAuthorship(ParsedAuthorship a, StringBuilder sb)", "class_method_signature": "NameFormatter.appendAuthorship(ParsedAuthorship a, StringBuilder sb)", "testcase": false, "constructor": false}], "file": "name-parser-api/src/main/java/org/gbif/nameparser/util/NameFormatter.java"}, "focal_method": {"identifier": "canonicalMinimal", "parameters": "(ParsedName n)", "modifiers": "public static", "return": "String", "body": "public static String canonicalMinimal(ParsedName n) {\n    return buildName(n, false, false, false, false, false, true, true, false, false, false,  false, false, false, false);\n  }", "signature": "String canonicalMinimal(ParsedName n)", "full_signature": "public static String canonicalMinimal(ParsedName n)", "class_method_signature": "NameFormatter.canonicalMinimal(ParsedName n)", "testcase": false, "constructor": false, "invocations": ["buildName"]}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}