{"test_class": {"identifier": "AbstractResourceDescriptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private Appender<ILoggingEvent> mockLogbackAppender;", "modifier": "private", "type": "Appender<ILoggingEvent>", "declarator": "mockLogbackAppender", "var_name": "mockLogbackAppender"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/resource/AbstractResourceDescriptorTest.java"}, "test_case": {"identifier": "processesConstructors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processesConstructors() {\n        ResourceDescriptor resource = new AbstractResourceDescriptor(SampleRootResource.class);\n        assertEquals(3, resource.getConstructorDescriptors().size());\n        List<ConstructorDescriptor> constructors = resource.getConstructorDescriptors();\n        assertEquals(2, constructors.get(0).getParameters().size());\n        assertEquals(1, constructors.get(1).getParameters().size());\n        assertEquals(0, constructors.get(2).getParameters().size());\n\n        ConstructorDescriptor constructorWithTheMostParameters = constructors.get(0);\n        List<Parameter> constructorParameters = constructorWithTheMostParameters.getParameters();\n        assertEquals(int.class, constructorParameters.get(0).getParameterClass());\n        assertEquals(String.class, constructorParameters.get(1).getParameterClass());\n        assertEquals(QueryParam.class, constructorParameters.get(0).getAnnotation().annotationType());\n        assertEquals(PathParam.class, constructorParameters.get(1).getAnnotation().annotationType());\n        assertEquals(\"test\", ((QueryParam)constructorParameters.get(0).getAnnotation()).value());\n        assertEquals(\"b\", ((PathParam)constructorParameters.get(1).getAnnotation()).value());\n        assertFalse(constructorParameters.get(0).isEncoded());\n        assertTrue(constructorParameters.get(1).isEncoded());\n    }", "signature": "void processesConstructors()", "full_signature": "@Test public void processesConstructors()", "class_method_signature": "AbstractResourceDescriptorTest.processesConstructors()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getConstructorDescriptors", "getConstructorDescriptors", "assertEquals", "size", "getParameters", "get", "assertEquals", "size", "getParameters", "get", "assertEquals", "size", "getParameters", "get", "get", "getParameters", "assertEquals", "getParameterClass", "get", "assertEquals", "getParameterClass", "get", "assertEquals", "annotationType", "getAnnotation", "get", "assertEquals", "annotationType", "getAnnotation", "get", "assertEquals", "value", "getAnnotation", "get", "assertEquals", "value", "getAnnotation", "get", "assertFalse", "isEncoded", "get", "assertTrue", "isEncoded", "get"]}, "focal_class": {"identifier": "AbstractResourceDescriptor", "superclass": "extends BaseObjectModel", "interfaces": "implements ResourceDescriptor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractResourceDescriptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractResourceDescriptor.class)", "var_name": "LOG"}, {"original_string": "private final PathValue path;", "modifier": "private final", "type": "PathValue", "declarator": "path", "var_name": "path"}, {"original_string": "private final UriPattern uriPattern;", "modifier": "private final", "type": "UriPattern", "declarator": "uriPattern", "var_name": "uriPattern"}, {"original_string": "private final TreeMap<UriPattern, Map<String, List<SubResourceMethodDescriptor>>> subResourceMethods;", "modifier": "private final", "type": "TreeMap<UriPattern, Map<String, List<SubResourceMethodDescriptor>>>", "declarator": "subResourceMethods", "var_name": "subResourceMethods"}, {"original_string": "private final TreeMap<UriPattern, SubResourceLocatorDescriptor> subResourceLocators;", "modifier": "private final", "type": "TreeMap<UriPattern, SubResourceLocatorDescriptor>", "declarator": "subResourceLocators", "var_name": "subResourceLocators"}, {"original_string": "private final MultivaluedMap<String, ResourceMethodDescriptor> resourceMethods;", "modifier": "private final", "type": "MultivaluedMap<String, ResourceMethodDescriptor>", "declarator": "resourceMethods", "var_name": "resourceMethods"}, {"original_string": "private final ResourceMethodComparator resourceMethodComparator = new ResourceMethodComparator();", "modifier": "private final", "type": "ResourceMethodComparator", "declarator": "resourceMethodComparator = new ResourceMethodComparator()", "var_name": "resourceMethodComparator"}], "methods": [{"identifier": "AbstractResourceDescriptor", "parameters": "(Class<?> resourceClass)", "modifiers": "public", "return": "", "signature": " AbstractResourceDescriptor(Class<?> resourceClass)", "full_signature": "public  AbstractResourceDescriptor(Class<?> resourceClass)", "class_method_signature": "AbstractResourceDescriptor.AbstractResourceDescriptor(Class<?> resourceClass)", "testcase": false, "constructor": true}, {"identifier": "AbstractResourceDescriptor", "parameters": "(String path, Class<?> resourceClass)", "modifiers": "public", "return": "", "signature": " AbstractResourceDescriptor(String path, Class<?> resourceClass)", "full_signature": "public  AbstractResourceDescriptor(String path, Class<?> resourceClass)", "class_method_signature": "AbstractResourceDescriptor.AbstractResourceDescriptor(String path, Class<?> resourceClass)", "testcase": false, "constructor": true}, {"identifier": "AbstractResourceDescriptor", "parameters": "(Object resource)", "modifiers": "public", "return": "", "signature": " AbstractResourceDescriptor(Object resource)", "full_signature": "public  AbstractResourceDescriptor(Object resource)", "class_method_signature": "AbstractResourceDescriptor.AbstractResourceDescriptor(Object resource)", "testcase": false, "constructor": true}, {"identifier": "AbstractResourceDescriptor", "parameters": "(String path, Object resource)", "modifiers": "public", "return": "", "signature": " AbstractResourceDescriptor(String path, Object resource)", "full_signature": "public  AbstractResourceDescriptor(String path, Object resource)", "class_method_signature": "AbstractResourceDescriptor.AbstractResourceDescriptor(String path, Object resource)", "testcase": false, "constructor": true}, {"identifier": "getPathValue", "parameters": "()", "modifiers": "@Override public", "return": "PathValue", "signature": "PathValue getPathValue()", "full_signature": "@Override public PathValue getPathValue()", "class_method_signature": "AbstractResourceDescriptor.getPathValue()", "testcase": false, "constructor": false}, {"identifier": "getResourceMethods", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, List<ResourceMethodDescriptor>>", "signature": "Map<String, List<ResourceMethodDescriptor>> getResourceMethods()", "full_signature": "@Override public Map<String, List<ResourceMethodDescriptor>> getResourceMethods()", "class_method_signature": "AbstractResourceDescriptor.getResourceMethods()", "testcase": false, "constructor": false}, {"identifier": "getSubResourceLocators", "parameters": "()", "modifiers": "@Override public", "return": "Map<UriPattern, SubResourceLocatorDescriptor>", "signature": "Map<UriPattern, SubResourceLocatorDescriptor> getSubResourceLocators()", "full_signature": "@Override public Map<UriPattern, SubResourceLocatorDescriptor> getSubResourceLocators()", "class_method_signature": "AbstractResourceDescriptor.getSubResourceLocators()", "testcase": false, "constructor": false}, {"identifier": "getSubResourceMethods", "parameters": "()", "modifiers": "@Override public", "return": "Map<UriPattern, Map<String, List<SubResourceMethodDescriptor>>>", "signature": "Map<UriPattern, Map<String, List<SubResourceMethodDescriptor>>> getSubResourceMethods()", "full_signature": "@Override public Map<UriPattern, Map<String, List<SubResourceMethodDescriptor>>> getSubResourceMethods()", "class_method_signature": "AbstractResourceDescriptor.getSubResourceMethods()", "testcase": false, "constructor": false}, {"identifier": "getUriPattern", "parameters": "()", "modifiers": "@Override public", "return": "UriPattern", "signature": "UriPattern getUriPattern()", "full_signature": "@Override public UriPattern getUriPattern()", "class_method_signature": "AbstractResourceDescriptor.getUriPattern()", "testcase": false, "constructor": false}, {"identifier": "isRootResource", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRootResource()", "full_signature": "@Override public boolean isRootResource()", "class_method_signature": "AbstractResourceDescriptor.isRootResource()", "testcase": false, "constructor": false}, {"identifier": "processMethods", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processMethods()", "full_signature": "private void processMethods()", "class_method_signature": "AbstractResourceDescriptor.processMethods()", "testcase": false, "constructor": false}, {"identifier": "getAllMethods", "parameters": "(Class<?> resourceClass)", "modifiers": "private", "return": "List<Method>", "signature": "List<Method> getAllMethods(Class<?> resourceClass)", "full_signature": "private List<Method> getAllMethods(Class<?> resourceClass)", "class_method_signature": "AbstractResourceDescriptor.getAllMethods(Class<?> resourceClass)", "testcase": false, "constructor": false}, {"identifier": "addResourceMethod", "parameters": "(Method method, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "modifiers": "private", "return": "void", "signature": "void addResourceMethod(Method method, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "full_signature": "private void addResourceMethod(Method method, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "class_method_signature": "AbstractResourceDescriptor.addResourceMethod(Method method, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "testcase": false, "constructor": false}, {"identifier": "addSubResourceMethod", "parameters": "(Method method, Path subPath, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "modifiers": "private", "return": "void", "signature": "void addSubResourceMethod(Method method, Path subPath, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "full_signature": "private void addSubResourceMethod(Method method, Path subPath, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "class_method_signature": "AbstractResourceDescriptor.addSubResourceMethod(Method method, Path subPath, HttpMethod httpMethod, List<Parameter> params, Annotation[] additional, List<MediaType> produces, List<MediaType> consumes)", "testcase": false, "constructor": false}, {"identifier": "validateResourceMethod", "parameters": "(ResourceMethodDescriptor resourceMethod)", "modifiers": "private", "return": "void", "signature": "void validateResourceMethod(ResourceMethodDescriptor resourceMethod)", "full_signature": "private void validateResourceMethod(ResourceMethodDescriptor resourceMethod)", "class_method_signature": "AbstractResourceDescriptor.validateResourceMethod(ResourceMethodDescriptor resourceMethod)", "testcase": false, "constructor": false}, {"identifier": "addSubResourceLocator", "parameters": "(Method method, Path subPath, List<Parameter> params, Annotation[] additional)", "modifiers": "private", "return": "void", "signature": "void addSubResourceLocator(Method method, Path subPath, List<Parameter> params, Annotation[] additional)", "full_signature": "private void addSubResourceLocator(Method method, Path subPath, List<Parameter> params, Annotation[] additional)", "class_method_signature": "AbstractResourceDescriptor.addSubResourceLocator(Method method, Path subPath, List<Parameter> params, Annotation[] additional)", "testcase": false, "constructor": false}, {"identifier": "validateSubResourceLocator", "parameters": "(SubResourceLocatorDescriptor resourceLocator)", "modifiers": "private", "return": "void", "signature": "void validateSubResourceLocator(SubResourceLocatorDescriptor resourceLocator)", "full_signature": "private void validateSubResourceLocator(SubResourceLocatorDescriptor resourceLocator)", "class_method_signature": "AbstractResourceDescriptor.validateSubResourceLocator(SubResourceLocatorDescriptor resourceLocator)", "testcase": false, "constructor": false}, {"identifier": "sortResourceMethods", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sortResourceMethods()", "full_signature": "private void sortResourceMethods()", "class_method_signature": "AbstractResourceDescriptor.sortResourceMethods()", "testcase": false, "constructor": false}, {"identifier": "getResourceMethods", "parameters": "(String httpMethod)", "modifiers": "private", "return": "List<ResourceMethodDescriptor>", "signature": "List<ResourceMethodDescriptor> getResourceMethods(String httpMethod)", "full_signature": "private List<ResourceMethodDescriptor> getResourceMethods(String httpMethod)", "class_method_signature": "AbstractResourceDescriptor.getResourceMethods(String httpMethod)", "testcase": false, "constructor": false}, {"identifier": "getSubResourceMethods", "parameters": "(UriPattern subResourceUriPattern)", "modifiers": "private", "return": "Map<String, List<SubResourceMethodDescriptor>>", "signature": "Map<String, List<SubResourceMethodDescriptor>> getSubResourceMethods(UriPattern subResourceUriPattern)", "full_signature": "private Map<String, List<SubResourceMethodDescriptor>> getSubResourceMethods(UriPattern subResourceUriPattern)", "class_method_signature": "AbstractResourceDescriptor.getSubResourceMethods(UriPattern subResourceUriPattern)", "testcase": false, "constructor": false}, {"identifier": "sortSubResourceMethods", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sortSubResourceMethods()", "full_signature": "private void sortSubResourceMethods()", "class_method_signature": "AbstractResourceDescriptor.sortSubResourceMethods()", "testcase": false, "constructor": false}, {"identifier": "createMethodParameters", "parameters": "(Class<?> resourceClass, Method method)", "modifiers": "private", "return": "List<Parameter>", "signature": "List<Parameter> createMethodParameters(Class<?> resourceClass, Method method)", "full_signature": "private List<Parameter> createMethodParameters(Class<?> resourceClass, Method method)", "class_method_signature": "AbstractResourceDescriptor.createMethodParameters(Class<?> resourceClass, Method method)", "testcase": false, "constructor": false}, {"identifier": "resolveHeadRequest", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resolveHeadRequest()", "full_signature": "private void resolveHeadRequest()", "class_method_signature": "AbstractResourceDescriptor.resolveHeadRequest()", "testcase": false, "constructor": false}, {"identifier": "resolveOptionsRequest", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resolveOptionsRequest()", "full_signature": "private void resolveOptionsRequest()", "class_method_signature": "AbstractResourceDescriptor.resolveOptionsRequest()", "testcase": false, "constructor": false}, {"identifier": "getMetaAnnotation", "parameters": "(Method method, Class<T> annotationClass)", "modifiers": "private", "return": "T", "signature": "T getMetaAnnotation(Method method, Class<T> annotationClass)", "full_signature": "private T getMetaAnnotation(Method method, Class<T> annotationClass)", "class_method_signature": "AbstractResourceDescriptor.getMetaAnnotation(Method method, Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getMethodAnnotation", "parameters": "(Method method,\n                                                         Class<?> resourceClass,\n                                                         Class<T> annotationClass,\n                                                         boolean metaAnnotation)", "modifiers": "private", "return": "T", "signature": "T getMethodAnnotation(Method method,\n                                                         Class<?> resourceClass,\n                                                         Class<T> annotationClass,\n                                                         boolean metaAnnotation)", "full_signature": "private T getMethodAnnotation(Method method,\n                                                         Class<?> resourceClass,\n                                                         Class<T> annotationClass,\n                                                         boolean metaAnnotation)", "class_method_signature": "AbstractResourceDescriptor.getMethodAnnotation(Method method,\n                                                         Class<?> resourceClass,\n                                                         Class<T> annotationClass,\n                                                         boolean metaAnnotation)", "testcase": false, "constructor": false}, {"identifier": "getClassAnnotation", "parameters": "(Class<?> resourceClass, Class<T> annotationClass)", "modifiers": "private", "return": "T", "signature": "T getClassAnnotation(Class<?> resourceClass, Class<T> annotationClass)", "full_signature": "private T getClassAnnotation(Class<?> resourceClass, Class<T> annotationClass)", "class_method_signature": "AbstractResourceDescriptor.getClassAnnotation(Class<?> resourceClass, Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "findMethodResourceMediaType", "parameters": "(List<T> resourceMethods,\n                                                                                                      List<MediaType> consumes,\n                                                                                                      List<MediaType> produces)", "modifiers": "private", "return": "ResourceMethodDescriptor", "signature": "ResourceMethodDescriptor findMethodResourceMediaType(List<T> resourceMethods,\n                                                                                                      List<MediaType> consumes,\n                                                                                                      List<MediaType> produces)", "full_signature": "private ResourceMethodDescriptor findMethodResourceMediaType(List<T> resourceMethods,\n                                                                                                      List<MediaType> consumes,\n                                                                                                      List<MediaType> produces)", "class_method_signature": "AbstractResourceDescriptor.findMethodResourceMediaType(List<T> resourceMethods,\n                                                                                                      List<MediaType> consumes,\n                                                                                                      List<MediaType> produces)", "testcase": false, "constructor": false}, {"identifier": "getSecurityAnnotation", "parameters": "(Method method, Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T getSecurityAnnotation(Method method, Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") private T getSecurityAnnotation(Method method, Class<?> clazz)", "class_method_signature": "AbstractResourceDescriptor.getSecurityAnnotation(Method method, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Class<?> clazz, Class<T>[] annotationClasses)", "modifiers": "private", "return": "T", "signature": "T getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "full_signature": "private T getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "class_method_signature": "AbstractResourceDescriptor.getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Method method, Class<T>[] annotationClasses)", "modifiers": "private", "return": "T", "signature": "T getAnnotation(Method method, Class<T>[] annotationClasses)", "full_signature": "private T getAnnotation(Method method, Class<T>[] annotationClasses)", "class_method_signature": "AbstractResourceDescriptor.getAnnotation(Method method, Class<T>[] annotationClasses)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractResourceDescriptor.toString()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/resource/AbstractResourceDescriptor.java"}, "focal_method": {"identifier": "getAnnotation", "parameters": "(Class<?> clazz, Class<T>[] annotationClasses)", "modifiers": "private", "return": "T", "body": "private <T extends Annotation> T getAnnotation(Class<?> clazz, Class<T>[] annotationClasses) {\n        T annotation = null;\n        for (int i = 0; annotation == null && i < annotationClasses.length; i++) {\n            annotation = clazz.getAnnotation(annotationClasses[i]);\n        }\n        return annotation;\n    }", "signature": "T getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "full_signature": "private T getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "class_method_signature": "AbstractResourceDescriptor.getAnnotation(Class<?> clazz, Class<T>[] annotationClasses)", "testcase": false, "constructor": false, "invocations": ["getAnnotation"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}