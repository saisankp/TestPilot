{"test_class": {"identifier": "TaskServiceImplTest", "superclass": "extends BaseServiceTestCase", "interfaces": "", "fields": [{"original_string": "private TaskService taskService;", "modifier": "private", "type": "TaskService", "declarator": "taskService", "var_name": "taskService"}, {"original_string": "private String user = \"dw_chenwu\";", "modifier": "private", "type": "String", "declarator": "user = \"dw_chenwu\"", "var_name": "user"}, {"original_string": "private Date offlineTime = null;", "modifier": "private", "type": "Date", "declarator": "offlineTime = null", "var_name": "offlineTime"}], "file": "service/src/test/java/com/duowan/meteor/service/impl/TaskServiceImplTest.java"}, "test_case": {"identifier": "testGetDefAllValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetDefAllValid() throws Exception {\n\t\tDefAllValid defAllValid = taskService.getDefAllValid();\n\t\tSystem.out.println(defAllValid);\n\t}", "signature": "void testGetDefAllValid()", "full_signature": "@Test public void testGetDefAllValid()", "class_method_signature": "TaskServiceImplTest.testGetDefAllValid()", "testcase": true, "constructor": false, "invocations": ["getDefAllValid", "println"]}, "focal_class": {"identifier": "TaskServiceImpl", "superclass": "", "interfaces": "implements TaskService", "fields": [{"original_string": "@Autowired\n\tprivate DefFileSysDao defFileSysDao;", "modifier": "@Autowired\n\tprivate", "type": "DefFileSysDao", "declarator": "defFileSysDao", "var_name": "defFileSysDao"}, {"original_string": "@Autowired\n\tprivate DefDependDao defDependDao;", "modifier": "@Autowired\n\tprivate", "type": "DefDependDao", "declarator": "defDependDao", "var_name": "defDependDao"}], "methods": [{"identifier": "addTask", "parameters": "(AbstractBase task)", "modifiers": "@Override public", "return": "AbstractBase", "signature": "AbstractBase addTask(AbstractBase task)", "full_signature": "@Override public AbstractBase addTask(AbstractBase task)", "class_method_signature": "TaskServiceImpl.addTask(AbstractBase task)", "testcase": false, "constructor": false}, {"identifier": "updateTask", "parameters": "(AbstractBase task)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateTask(AbstractBase task)", "full_signature": "@Override public boolean updateTask(AbstractBase task)", "class_method_signature": "TaskServiceImpl.updateTask(AbstractBase task)", "testcase": false, "constructor": false}, {"identifier": "getTask", "parameters": "(Integer fileId)", "modifiers": "@Override public", "return": "AbstractBase", "signature": "AbstractBase getTask(Integer fileId)", "full_signature": "@Override public AbstractBase getTask(Integer fileId)", "class_method_signature": "TaskServiceImpl.getTask(Integer fileId)", "testcase": false, "constructor": false}, {"identifier": "deleteTask", "parameters": "(Integer fileId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteTask(Integer fileId)", "full_signature": "@Override public boolean deleteTask(Integer fileId)", "class_method_signature": "TaskServiceImpl.deleteTask(Integer fileId)", "testcase": false, "constructor": false}, {"identifier": "getDefAllValid", "parameters": "()", "modifiers": "@Override public", "return": "DefAllValid", "signature": "DefAllValid getDefAllValid()", "full_signature": "@Override public DefAllValid getDefAllValid()", "class_method_signature": "TaskServiceImpl.getDefAllValid()", "testcase": false, "constructor": false}, {"identifier": "doCheck", "parameters": "(AbstractBase task)", "modifiers": "private", "return": "void", "signature": "void doCheck(AbstractBase task)", "full_signature": "private void doCheck(AbstractBase task)", "class_method_signature": "TaskServiceImpl.doCheck(AbstractBase task)", "testcase": false, "constructor": false}, {"identifier": "doDependAssert", "parameters": "(AbstractBase task)", "modifiers": "private", "return": "void", "signature": "void doDependAssert(AbstractBase task)", "full_signature": "private void doDependAssert(AbstractBase task)", "class_method_signature": "TaskServiceImpl.doDependAssert(AbstractBase task)", "testcase": false, "constructor": false}], "file": "service/src/main/java/com/duowan/meteor/service/impl/TaskServiceImpl.java"}, "focal_method": {"identifier": "getDefAllValid", "parameters": "()", "modifiers": "@Override public", "return": "DefAllValid", "body": "@Override\n\tpublic DefAllValid getDefAllValid() throws Exception {\n\t\tDefFileSysQuery defFileSysQuery = new DefFileSysQuery();\n\t\tdefFileSysQuery.setIsValid(1);\n\t\tList<DefFileSys> defFileSysList = defFileSysDao.getByDefFileSysQuery(defFileSysQuery);\n\t\tif (defFileSysList == null || defFileSysList.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tDefDependQuery defDependQuery = new DefDependQuery();\n\t\tdefDependQuery.setIsValid(1);\n\t\tList<DefDepend> defDependList = defDependDao.getByDefDependQuery(defDependQuery);\n\n\t\tDefAllValid defAllValid = new DefAllValid();\n\t\tfor (DefFileSys defFileSys : defFileSysList) {\n\t\t\tAbstractBase abstractBase = ViewDBConverters.buildView(defFileSys);\n\t\t\tif (abstractBase != null) {\n\t\t\t\tdefAllValid.getDefAllMap().put(abstractBase.getFileId(), abstractBase);\n\t\t\t\tFileType fileType = Enum.valueOf(FileType.class, abstractBase.getFileType());\n\t\t\t\tif (fileType == FileType.ImportKafka) {\n\t\t\t\t\tdefAllValid.getImportQueueSet().add(abstractBase.getFileId());\n\t\t\t\t}\n\t\t\t\tif (fileType == FileType.Cron) {\n\t\t\t\t\tdefAllValid.getCronSet().add(abstractBase.getFileId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(defDependList != null) {\n\t\t\tfor(DefDepend defDepend : defDependList) {\n\t\t\t\tAbstractTaskDepend forPredependTask = (AbstractTaskDepend) defAllValid.getDefAllMap().get(defDepend.getFileId());\n\t\t\t\tif(forPredependTask != null) {\n\t\t\t\t\tforPredependTask.getPreDependSet().add(defDepend.getPreFileId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tAbstractTaskDepend forPostdependTask = (AbstractTaskDepend) defAllValid.getDefAllMap().get(defDepend.getPreFileId());\n\t\t\t\tif(forPostdependTask != null) {\n\t\t\t\t\tforPostdependTask.getPostDependSet().add(defDepend.getFileId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn defAllValid;\n\t}", "signature": "DefAllValid getDefAllValid()", "full_signature": "@Override public DefAllValid getDefAllValid()", "class_method_signature": "TaskServiceImpl.getDefAllValid()", "testcase": false, "constructor": false, "invocations": ["setIsValid", "getByDefFileSysQuery", "isEmpty", "setIsValid", "getByDefDependQuery", "buildView", "put", "getDefAllMap", "getFileId", "valueOf", "getFileType", "add", "getImportQueueSet", "getFileId", "add", "getCronSet", "getFileId", "get", "getDefAllMap", "getFileId", "add", "getPreDependSet", "getPreFileId", "get", "getDefAllMap", "getPreFileId", "add", "getPostDependSet", "getFileId"]}, "repository": {"repo_id": 125830136, "url": "https://github.com/DonnieChan/meteor", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 8, "size": 2481, "license": "licensed"}}