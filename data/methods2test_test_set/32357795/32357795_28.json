{"test_class": {"identifier": "CanonicalXTMWriterTest", "superclass": "extends AbstractXMLTestCase", "interfaces": "", "fields": [{"original_string": "private TopicMapIF topicmap;", "modifier": "private", "type": "TopicMapIF", "declarator": "topicmap", "var_name": "topicmap"}, {"original_string": "private final static String testdataDirectory = \"cxtm\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"cxtm\"", "var_name": "testdataDirectory"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/xml/CanonicalXTMWriterTest.java"}, "test_case": {"identifier": "testOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOutputStream() throws IOException {\n    String baseline = TestFileUtils.getTestInputFile(testdataDirectory, \"baseline\", \"outputstream.cxtm\");\n    File out = TestFileUtils.getTestOutputFile(testdataDirectory, \"out\", \"outputstream.cxtm\");\n\n    FileOutputStream outs = new FileOutputStream(out);\n    new CanonicalXTMWriter(outs).write(topicmap);\n    outs.close();\n\n    Assert.assertTrue(\"OutputStream export gives incorrect output\",\n               TestFileUtils.compareFileToResource(out, baseline));\n  }", "signature": "void testOutputStream()", "full_signature": "@Test public void testOutputStream()", "class_method_signature": "CanonicalXTMWriterTest.testOutputStream()", "testcase": true, "constructor": false, "invocations": ["getTestInputFile", "getTestOutputFile", "write", "close", "assertTrue", "compareFileToResource"]}, "focal_class": {"identifier": "CanonicalXTMWriter", "superclass": "", "interfaces": "implements TopicMapWriterIF", "fields": [{"original_string": "private static final String EL_SUBJECTLOCATORS = \"subjectLocators\";", "modifier": "private static final", "type": "String", "declarator": "EL_SUBJECTLOCATORS = \"subjectLocators\"", "var_name": "EL_SUBJECTLOCATORS"}, {"original_string": "private static final String EL_SUBJECTIDENTIFIERS = \"subjectIdentifiers\";", "modifier": "private static final", "type": "String", "declarator": "EL_SUBJECTIDENTIFIERS = \"subjectIdentifiers\"", "var_name": "EL_SUBJECTIDENTIFIERS"}, {"original_string": "private static final String EL_ITEMIDENTIFIERS = \"itemIdentifiers\";", "modifier": "private static final", "type": "String", "declarator": "EL_ITEMIDENTIFIERS = \"itemIdentifiers\"", "var_name": "EL_ITEMIDENTIFIERS"}, {"original_string": "private static final String EL_SCOPE = \"scope\";", "modifier": "private static final", "type": "String", "declarator": "EL_SCOPE = \"scope\"", "var_name": "EL_SCOPE"}, {"original_string": "private static final String EL_ROLE = \"role\";", "modifier": "private static final", "type": "String", "declarator": "EL_ROLE = \"role\"", "var_name": "EL_ROLE"}, {"original_string": "private static final String EL_ASSOCIATION = \"association\";", "modifier": "private static final", "type": "String", "declarator": "EL_ASSOCIATION = \"association\"", "var_name": "EL_ASSOCIATION"}, {"original_string": "private static final String EL_OCCURRENCE = \"occurrence\";", "modifier": "private static final", "type": "String", "declarator": "EL_OCCURRENCE = \"occurrence\"", "var_name": "EL_OCCURRENCE"}, {"original_string": "private static final String EL_VARIANT = \"variant\";", "modifier": "private static final", "type": "String", "declarator": "EL_VARIANT = \"variant\"", "var_name": "EL_VARIANT"}, {"original_string": "private static final String EL_NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "EL_NAME = \"name\"", "var_name": "EL_NAME"}, {"original_string": "private static final String EL_TOPIC = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "EL_TOPIC = \"topic\"", "var_name": "EL_TOPIC"}, {"original_string": "private static final String EL_TOPICMAP = \"topicMap\";", "modifier": "private static final", "type": "String", "declarator": "EL_TOPICMAP = \"topicMap\"", "var_name": "EL_TOPICMAP"}, {"original_string": "private static final String AT_NUMBER = \"number\";", "modifier": "private static final", "type": "String", "declarator": "AT_NUMBER = \"number\"", "var_name": "AT_NUMBER"}, {"original_string": "private CanonicalPrinter out;", "modifier": "private", "type": "CanonicalPrinter", "declarator": "out", "var_name": "out"}, {"original_string": "private AttributesImpl EMPTY;", "modifier": "private", "type": "AttributesImpl", "declarator": "EMPTY", "var_name": "EMPTY"}, {"original_string": "private Map tmIndex;", "modifier": "private", "type": "Map", "declarator": "tmIndex", "var_name": "tmIndex"}, {"original_string": "private Map extraRoles;", "modifier": "private", "type": "Map", "declarator": "extraRoles", "var_name": "extraRoles"}, {"original_string": "private String base;", "modifier": "private", "type": "String", "declarator": "base", "var_name": "base"}, {"original_string": "private String strippedBase;", "modifier": "private", "type": "String", "declarator": "strippedBase", "var_name": "strippedBase"}, {"original_string": "private TopicIF typeInstance;", "modifier": "private", "type": "TopicIF", "declarator": "typeInstance", "var_name": "typeInstance"}, {"original_string": "private TopicIF instance;", "modifier": "private", "type": "TopicIF", "declarator": "instance", "var_name": "instance"}, {"original_string": "private TopicIF type;", "modifier": "private", "type": "TopicIF", "declarator": "type", "var_name": "type"}, {"original_string": "private static TopicMapIF tmForFake;", "modifier": "private static", "type": "TopicMapIF", "declarator": "tmForFake", "var_name": "tmForFake"}, {"original_string": "private final AssociationComparator associationComparator = \n          new AssociationComparator();", "modifier": "private final", "type": "AssociationComparator", "declarator": "associationComparator = \n          new AssociationComparator()", "var_name": "associationComparator"}, {"original_string": "private final AssociationRoleComparator associationRoleComparator = \n          new AssociationRoleComparator();", "modifier": "private final", "type": "AssociationRoleComparator", "declarator": "associationRoleComparator = \n          new AssociationRoleComparator()", "var_name": "associationRoleComparator"}, {"original_string": "private final NameComparator nameComparator = \n          new NameComparator();", "modifier": "private final", "type": "NameComparator", "declarator": "nameComparator = \n          new NameComparator()", "var_name": "nameComparator"}, {"original_string": "private final OccurrenceComparator occurrenceComparator = \n          new OccurrenceComparator();", "modifier": "private final", "type": "OccurrenceComparator", "declarator": "occurrenceComparator = \n          new OccurrenceComparator()", "var_name": "occurrenceComparator"}, {"original_string": "private final LocatorComparator locatorComparator = \n          new LocatorComparator();", "modifier": "private final", "type": "LocatorComparator", "declarator": "locatorComparator = \n          new LocatorComparator()", "var_name": "locatorComparator"}, {"original_string": "private final TopicComparator topicComparator = new TopicComparator();", "modifier": "private final", "type": "TopicComparator", "declarator": "topicComparator = new TopicComparator()", "var_name": "topicComparator"}, {"original_string": "private final VariantComparator variantComparator = \n          new VariantComparator();", "modifier": "private final", "type": "VariantComparator", "declarator": "variantComparator = \n          new VariantComparator()", "var_name": "variantComparator"}, {"original_string": "private Comparator indexComparator;", "modifier": "private", "type": "Comparator", "declarator": "indexComparator", "var_name": "indexComparator"}, {"original_string": "private Set startNewlineElem;", "modifier": "private", "type": "Set", "declarator": "startNewlineElem", "var_name": "startNewlineElem"}, {"original_string": "private static final char[] LINEBREAK = { (char) 0x0A };", "modifier": "private static final", "type": "char[]", "declarator": "LINEBREAK = { (char) 0x0A }", "var_name": "LINEBREAK"}], "methods": [{"identifier": "CanonicalXTMWriter", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " CanonicalXTMWriter(File file)", "full_signature": "public  CanonicalXTMWriter(File file)", "class_method_signature": "CanonicalXTMWriter.CanonicalXTMWriter(File file)", "testcase": false, "constructor": true}, {"identifier": "CanonicalXTMWriter", "parameters": "(OutputStream out)", "modifiers": "public", "return": "", "signature": " CanonicalXTMWriter(OutputStream out)", "full_signature": "public  CanonicalXTMWriter(OutputStream out)", "class_method_signature": "CanonicalXTMWriter.CanonicalXTMWriter(OutputStream out)", "testcase": false, "constructor": true}, {"identifier": "CanonicalXTMWriter", "parameters": "(Writer out)", "modifiers": "public", "return": "", "signature": " CanonicalXTMWriter(Writer out)", "full_signature": "public  CanonicalXTMWriter(Writer out)", "class_method_signature": "CanonicalXTMWriter.CanonicalXTMWriter(Writer out)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "CanonicalXTMWriter.init()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(TopicMapIF topicmap)", "modifiers": "@Override public", "return": "void", "signature": "void write(TopicMapIF topicmap)", "full_signature": "@Override public void write(TopicMapIF topicmap)", "class_method_signature": "CanonicalXTMWriter.write(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "recordIndexes", "parameters": "(Object[] topics, Object[] associations)", "modifiers": "private", "return": "void", "signature": "void recordIndexes(Object[] topics, Object[] associations)", "full_signature": "private void recordIndexes(Object[] topics, Object[] associations)", "class_method_signature": "CanonicalXTMWriter.recordIndexes(Object[] topics, Object[] associations)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(TopicIF topic)", "modifiers": "private", "return": "void", "signature": "void write(TopicIF topic)", "full_signature": "private void write(TopicIF topic)", "class_method_signature": "CanonicalXTMWriter.write(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(TopicNameIF basename, int number)", "modifiers": "private", "return": "void", "signature": "void write(TopicNameIF basename, int number)", "full_signature": "private void write(TopicNameIF basename, int number)", "class_method_signature": "CanonicalXTMWriter.write(TopicNameIF basename, int number)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(VariantNameIF variant, int number)", "modifiers": "private", "return": "void", "signature": "void write(VariantNameIF variant, int number)", "full_signature": "private void write(VariantNameIF variant, int number)", "class_method_signature": "CanonicalXTMWriter.write(VariantNameIF variant, int number)", "testcase": false, "constructor": false}, {"identifier": "makeFakes", "parameters": "(Object[] occs)", "modifiers": "private", "return": "Object[]", "signature": "Object[] makeFakes(Object[] occs)", "full_signature": "private Object[] makeFakes(Object[] occs)", "class_method_signature": "CanonicalXTMWriter.makeFakes(Object[] occs)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OccurrenceIF occurrence, int number)", "modifiers": "private", "return": "void", "signature": "void write(OccurrenceIF occurrence, int number)", "full_signature": "private void write(OccurrenceIF occurrence, int number)", "class_method_signature": "CanonicalXTMWriter.write(OccurrenceIF occurrence, int number)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(AssociationIF association, int number)", "modifiers": "private", "return": "void", "signature": "void write(AssociationIF association, int number)", "full_signature": "private void write(AssociationIF association, int number)", "class_method_signature": "CanonicalXTMWriter.write(AssociationIF association, int number)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(AssociationRoleIF role, int number)", "modifiers": "private", "return": "void", "signature": "void write(AssociationRoleIF role, int number)", "full_signature": "private void write(AssociationRoleIF role, int number)", "class_method_signature": "CanonicalXTMWriter.write(AssociationRoleIF role, int number)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Collection scope)", "modifiers": "private", "return": "void", "signature": "void write(Collection scope)", "full_signature": "private void write(Collection scope)", "class_method_signature": "CanonicalXTMWriter.write(Collection scope)", "testcase": false, "constructor": false}, {"identifier": "writeType", "parameters": "(TypedIF object)", "modifiers": "private", "return": "void", "signature": "void writeType(TypedIF object)", "full_signature": "private void writeType(TypedIF object)", "class_method_signature": "CanonicalXTMWriter.writeType(TypedIF object)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String value)", "modifiers": "private", "return": "void", "signature": "void write(String value)", "full_signature": "private void write(String value)", "class_method_signature": "CanonicalXTMWriter.write(String value)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(LocatorIF uri, String element)", "modifiers": "private", "return": "void", "signature": "void write(LocatorIF uri, String element)", "full_signature": "private void write(LocatorIF uri, String element)", "class_method_signature": "CanonicalXTMWriter.write(LocatorIF uri, String element)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(LocatorIF locator)", "modifiers": "private", "return": "void", "signature": "void write(LocatorIF locator)", "full_signature": "private void write(LocatorIF locator)", "class_method_signature": "CanonicalXTMWriter.write(LocatorIF locator)", "testcase": false, "constructor": false}, {"identifier": "writeLocators", "parameters": "(Collection locators, String elementName)", "modifiers": "private", "return": "void", "signature": "void writeLocators(Collection locators, String elementName)", "full_signature": "private void writeLocators(Collection locators, String elementName)", "class_method_signature": "CanonicalXTMWriter.writeLocators(Collection locators, String elementName)", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(String element, Attributes atts)", "modifiers": "private", "return": "void", "signature": "void startElement(String element, Attributes atts)", "full_signature": "private void startElement(String element, Attributes atts)", "class_method_signature": "CanonicalXTMWriter.startElement(String element, Attributes atts)", "testcase": false, "constructor": false}, {"identifier": "endElement", "parameters": "(String element)", "modifiers": "private", "return": "void", "signature": "void endElement(String element)", "full_signature": "private void endElement(String element)", "class_method_signature": "CanonicalXTMWriter.endElement(String element)", "testcase": false, "constructor": false}, {"identifier": "writeln", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeln()", "full_signature": "private void writeln()", "class_method_signature": "CanonicalXTMWriter.writeln()", "testcase": false, "constructor": false}, {"identifier": "reifier", "parameters": "(ReifiableIF reified)", "modifiers": "private", "return": "AttributesImpl", "signature": "AttributesImpl reifier(ReifiableIF reified)", "full_signature": "private AttributesImpl reifier(ReifiableIF reified)", "class_method_signature": "CanonicalXTMWriter.reifier(ReifiableIF reified)", "testcase": false, "constructor": false}, {"identifier": "topicRef", "parameters": "(TopicIF topic)", "modifiers": "private", "return": "Attributes", "signature": "Attributes topicRef(TopicIF topic)", "full_signature": "private Attributes topicRef(TopicIF topic)", "class_method_signature": "CanonicalXTMWriter.topicRef(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "getTopics", "parameters": "(TopicMapIF topicmap)", "modifiers": "private", "return": "Object[]", "signature": "Object[] getTopics(TopicMapIF topicmap)", "full_signature": "private Object[] getTopics(TopicMapIF topicmap)", "class_method_signature": "CanonicalXTMWriter.getTopics(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "getAssociations", "parameters": "(TopicMapIF topicmap)", "modifiers": "private", "return": "Object[]", "signature": "Object[] getAssociations(TopicMapIF topicmap)", "full_signature": "private Object[] getAssociations(TopicMapIF topicmap)", "class_method_signature": "CanonicalXTMWriter.getAssociations(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "recordRole", "parameters": "(TopicIF topic, Collection roles)", "modifiers": "private", "return": "void", "signature": "void recordRole(TopicIF topic, Collection roles)", "full_signature": "private void recordRole(TopicIF topic, Collection roles)", "class_method_signature": "CanonicalXTMWriter.recordRole(TopicIF topic, Collection roles)", "testcase": false, "constructor": false}, {"identifier": "getTopic", "parameters": "(TopicMapIF tm, LocatorIF indicator, \n                           Collection topics)", "modifiers": "private", "return": "TopicIF", "signature": "TopicIF getTopic(TopicMapIF tm, LocatorIF indicator, \n                           Collection topics)", "full_signature": "private TopicIF getTopic(TopicMapIF tm, LocatorIF indicator, \n                           Collection topics)", "class_method_signature": "CanonicalXTMWriter.getTopic(TopicMapIF tm, LocatorIF indicator, \n                           Collection topics)", "testcase": false, "constructor": false}, {"identifier": "normalizeNumber", "parameters": "(String number)", "modifiers": "private", "return": "String", "signature": "String normalizeNumber(String number)", "full_signature": "private String normalizeNumber(String number)", "class_method_signature": "CanonicalXTMWriter.normalizeNumber(String number)", "testcase": false, "constructor": false}, {"identifier": "normalizeInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "String", "signature": "String normalizeInteger(final String value)", "full_signature": "private static String normalizeInteger(final String value)", "class_method_signature": "CanonicalXTMWriter.normalizeInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "normalizeDecimal", "parameters": "(final String value)", "modifiers": "private static", "return": "String", "signature": "String normalizeDecimal(final String value)", "full_signature": "private static String normalizeDecimal(final String value)", "class_method_signature": "CanonicalXTMWriter.normalizeDecimal(final String value)", "testcase": false, "constructor": false}, {"identifier": "normaliseLocatorReference", "parameters": "(String reference)", "modifiers": "private", "return": "String", "signature": "String normaliseLocatorReference(String reference)", "full_signature": "private String normaliseLocatorReference(String reference)", "class_method_signature": "CanonicalXTMWriter.normaliseLocatorReference(String reference)", "testcase": false, "constructor": false}, {"identifier": "longestCommonPath", "parameters": "(String source1, String source2)", "modifiers": "private", "return": "String", "signature": "String longestCommonPath(String source1, String source2)", "full_signature": "private String longestCommonPath(String source1, String source2)", "class_method_signature": "CanonicalXTMWriter.longestCommonPath(String source1, String source2)", "testcase": false, "constructor": false}, {"identifier": "stripLocator", "parameters": "(String locatorString)", "modifiers": "private", "return": "String", "signature": "String stripLocator(String locatorString)", "full_signature": "private String stripLocator(String locatorString)", "class_method_signature": "CanonicalXTMWriter.stripLocator(String locatorString)", "testcase": false, "constructor": false}, {"identifier": "setAdditionalProperties", "parameters": "(Map<String, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void setAdditionalProperties(Map<String, Object> properties)", "full_signature": "@Override public void setAdditionalProperties(Map<String, Object> properties)", "class_method_signature": "CanonicalXTMWriter.setAdditionalProperties(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Collection collection, Comparator comparator)", "modifiers": "private", "return": "SortedSet", "signature": "SortedSet sort(Collection collection, Comparator comparator)", "full_signature": "private SortedSet sort(Collection collection, Comparator comparator)", "class_method_signature": "CanonicalXTMWriter.sort(Collection collection, Comparator comparator)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/xml/CanonicalXTMWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(TopicMapIF topicmap)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void write(TopicMapIF topicmap) {\n    DuplicateSuppressionUtils.removeDuplicates(topicmap);\n    tmForFake = topicmap;\n  \n    base = topicmap.getStore().getBaseAddress().getAddress();\n    strippedBase = stripLocator(base);\n\n    Object[] topics = getTopics(topicmap);\n    Object[] associations = getAssociations(topicmap);\n    recordIndexes(topics, associations);\n        \n    out.startDocument();\n    startElement(EL_TOPICMAP, reifier(topicmap));\n    writeLocators(topicmap.getItemIdentifiers(), EL_ITEMIDENTIFIERS);\n    \n    for (int ix = 0; ix < topics.length; ix++)\n      write((TopicIF) topics[ix]);\n\n    for (int ix = 0; ix < associations.length; ix++)\n      write((AssociationIF) associations[ix], ix + 1);\n\n    endElement(EL_TOPICMAP);\n    out.endDocument();\n  }", "signature": "void write(TopicMapIF topicmap)", "full_signature": "@Override public void write(TopicMapIF topicmap)", "class_method_signature": "CanonicalXTMWriter.write(TopicMapIF topicmap)", "testcase": false, "constructor": false, "invocations": ["removeDuplicates", "getAddress", "getBaseAddress", "getStore", "stripLocator", "getTopics", "getAssociations", "recordIndexes", "startDocument", "startElement", "reifier", "writeLocators", "getItemIdentifiers", "write", "write", "endElement", "endDocument"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}