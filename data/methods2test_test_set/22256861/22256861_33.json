{"test_class": {"identifier": "S2UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2UtilsTest.java"}, "test_case": {"identifier": "testGetS2TargetBandName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetS2TargetBandName() throws Exception {\n        String s2TargetBandName = S2Utils.getS2TargetBandName(RayleighCorrectionOp.BAND_CATEGORIES[0], \"B1\");\n        assertEquals(\"taur_B1\", s2TargetBandName);\n\n        s2TargetBandName = S2Utils.getS2TargetBandName(RayleighCorrectionOp.BAND_CATEGORIES[1], \"B9\");\n        assertEquals(\"rBRR_B9\", s2TargetBandName);\n\n        s2TargetBandName = S2Utils.getS2TargetBandName(RayleighCorrectionOp.BAND_CATEGORIES[2], \"B8A\");\n        assertEquals(\"rtoa_ng_B8A\", s2TargetBandName);\n\n        s2TargetBandName = S2Utils.getS2TargetBandName(RayleighCorrectionOp.BAND_CATEGORIES[3], \"B12\");\n        assertEquals(\"rtoa_B12\", s2TargetBandName);\n    }", "signature": "void testGetS2TargetBandName()", "full_signature": "@Test public void testGetS2TargetBandName()", "class_method_signature": "S2UtilsTest.testGetS2TargetBandName()", "testcase": true, "constructor": false, "invocations": ["getS2TargetBandName", "assertEquals", "getS2TargetBandName", "assertEquals", "getS2TargetBandName", "assertEquals", "getS2TargetBandName", "assertEquals"]}, "focal_class": {"identifier": "S2Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getS2SpectralBandIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "int", "signature": "int getS2SpectralBandIndex(String bandName)", "full_signature": "static int getS2SpectralBandIndex(String bandName)", "class_method_signature": "S2Utils.getS2SpectralBandIndex(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getS2TargetBandName", "parameters": "(String bandCategory, String bandName)", "modifiers": "static", "return": "String", "signature": "String getS2TargetBandName(String bandCategory, String bandName)", "full_signature": "static String getS2TargetBandName(String bandCategory, String bandName)", "class_method_signature": "S2Utils.getS2TargetBandName(String bandCategory, String bandName)", "testcase": false, "constructor": false}, {"identifier": "targetS2BandNameMatches", "parameters": "(String targetBandName, String pattern)", "modifiers": "static", "return": "boolean", "signature": "boolean targetS2BandNameMatches(String targetBandName, String pattern)", "full_signature": "static boolean targetS2BandNameMatches(String targetBandName, String pattern)", "class_method_signature": "S2Utils.targetS2BandNameMatches(String targetBandName, String pattern)", "testcase": false, "constructor": false}, {"identifier": "getNumBandsToRcCorrect", "parameters": "(String[] sourceBandNames)", "modifiers": "static", "return": "int", "signature": "int getNumBandsToRcCorrect(String[] sourceBandNames)", "full_signature": "static int getNumBandsToRcCorrect(String[] sourceBandNames)", "class_method_signature": "S2Utils.getNumBandsToRcCorrect(String[] sourceBandNames)", "testcase": false, "constructor": false}, {"identifier": "getS2TrueWavelengths", "parameters": "()", "modifiers": "static", "return": "double[]", "signature": "double[] getS2TrueWavelengths()", "full_signature": "static double[] getS2TrueWavelengths()", "class_method_signature": "S2Utils.getS2TrueWavelengths()", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2Utils.java"}, "focal_method": {"identifier": "getS2TargetBandName", "parameters": "(String bandCategory, String bandName)", "modifiers": "static", "return": "String", "body": "static String getS2TargetBandName(String bandCategory, String bandName) {\n        // bandCategory e.g. \"rBRR_%02d\"\n        final String bandCategoryPrefix = bandCategory.substring(0, bandCategory.length() - 4); // e.g. \"rBRR_\"\n\n        if (bandName.equals(\"B8A\")) {\n            return bandCategoryPrefix + \"B8A\";\n        } else {\n            final int spectralBandIndex = getS2SpectralBandIndex(bandName);\n            if (spectralBandIndex < 9) {\n                return bandCategoryPrefix + \"B\" + (spectralBandIndex + 1);\n            } else {\n                return bandCategoryPrefix + \"B\" + spectralBandIndex;\n            }\n        }\n    }", "signature": "String getS2TargetBandName(String bandCategory, String bandName)", "full_signature": "static String getS2TargetBandName(String bandCategory, String bandName)", "class_method_signature": "S2Utils.getS2TargetBandName(String bandCategory, String bandName)", "testcase": false, "constructor": false, "invocations": ["substring", "length", "equals", "getS2SpectralBandIndex"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}