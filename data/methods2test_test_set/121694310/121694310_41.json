{"test_class": {"identifier": "SpecificationTransformerTypeBasedTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendse-optimization/src/test/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBasedTest.java"}, "test_case": {"identifier": "transformTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void transformTest() {\n\n\t\tResource r1 = new Resource(\"type1\");\n\t\tResource r2 = new Resource(\"type2\");\n\n\t\tResourceTypes<Resource> types = new ResourceTypes<Resource>();\n\t\ttypes.put(\"r1\", r1);\n\t\ttypes.put(\"r2\", r2);\n\n\t\tLink l1 = new Link(\"linkType1\");\n\n\t\tLinkTypes<Link> linkTypes = new LinkTypes<Link>();\n\t\tlinkTypes.put(\"l1\", l1);\n\n\t\tTask t1 = new Task(\"t1\");\n\t\tTask t2 = new Task(\"t2\");\n\n\t\tApplication<Task, Dependency> app = new Application<Task, Dependency>();\n\t\tapp.addVertex(t1);\n\t\tapp.addVertex(t2);\n\t\tapp.addEdge(new Dependency(\"dep\"), t1, t2);\n\n\t\tMappings<Task, Resource> typeMappings = new Mappings<Task, Resource>();\n\n\t\tMapping<Task, Resource> m1 = new Mapping<Task, Resource>(\"m1\", t1, r1);\n\t\tMapping<Task, Resource> m2 = new Mapping<Task, Resource>(\"m2\", t1, r2);\n\t\tMapping<Task, Resource> m3 = new Mapping<Task, Resource>(\"m3\", t2, r1);\n\t\tm3.setAttribute(\"M1\", 0);\n\n\t\ttypeMappings.add(m1);\n\t\ttypeMappings.add(m2);\n\t\ttypeMappings.add(m3);\n\n\t\tSpecificationTypeBased specTB = new SpecificationTypeBased(app, types, typeMappings, linkTypes);\n\n\t\tSpecificationTransformerTypeBased<SpecificationTypeBased, Specification> transformer = new SpecificationTransformerTypeBased<SpecificationTypeBased, Specification>();\n\t\tSpecification spec = transformer.transform(specTB);\n\n\t\tAssert.assertNotNull(spec.getApplication());\n\t\tAssert.assertNotNull(spec.getArchitecture());\n\t\tAssert.assertNotNull(spec.getMappings());\n\t}", "signature": "void transformTest()", "full_signature": "@Test public void transformTest()", "class_method_signature": "SpecificationTransformerTypeBasedTest.transformTest()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "addVertex", "addVertex", "addEdge", "setAttribute", "add", "add", "add", "transform", "assertNotNull", "getApplication", "assertNotNull", "getArchitecture", "assertNotNull", "getMappings"]}, "focal_class": {"identifier": "SpecificationTransformerTypeBased", "superclass": "", "interfaces": "implements Transformer<T, S>", "fields": [{"original_string": "protected final String CONNECTOR = \"_\";", "modifier": "protected final", "type": "String", "declarator": "CONNECTOR = \"_\"", "var_name": "CONNECTOR"}, {"original_string": "protected Map<Resource, List<Resource>> typeMap;", "modifier": "protected", "type": "Map<Resource, List<Resource>>", "declarator": "typeMap", "var_name": "typeMap"}], "methods": [{"identifier": "transform", "parameters": "(T typeBasedSpec)", "modifiers": "@Override public", "return": "S", "signature": "S transform(T typeBasedSpec)", "full_signature": "@Override public S transform(T typeBasedSpec)", "class_method_signature": "SpecificationTransformerTypeBased.transform(T typeBasedSpec)", "testcase": false, "constructor": false}, {"identifier": "generateArchitecture", "parameters": "(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "modifiers": "protected", "return": "Architecture<Resource, Link>", "signature": "Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "full_signature": "protected Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "class_method_signature": "SpecificationTransformerTypeBased.generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "testcase": false, "constructor": false}, {"identifier": "generateMappings", "parameters": "(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "modifiers": "protected", "return": "Mappings<Task, Resource>", "signature": "Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "full_signature": "protected Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "class_method_signature": "SpecificationTransformerTypeBased.generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "testcase": false, "constructor": false}], "file": "opendse-optimization/src/main/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBased.java"}, "focal_method": {"identifier": "transform", "parameters": "(T typeBasedSpec)", "modifiers": "@Override public", "return": "S", "body": "@Override\n\tpublic S transform(T typeBasedSpec) {\n\n\t\tArchitecture<Resource, Link> architecture = generateArchitecture(typeBasedSpec.getResourceTypes(),\n\t\t\t\ttypeBasedSpec.getLinkTypes());\n\t\tMappings<Task, Resource> archMappings = generateMappings(typeBasedSpec.getMappings(), architecture);\n\n\t\treturn (S) new Specification(typeBasedSpec.getApplication(), architecture, archMappings);\n\t}", "signature": "S transform(T typeBasedSpec)", "full_signature": "@Override public S transform(T typeBasedSpec)", "class_method_signature": "SpecificationTransformerTypeBased.transform(T typeBasedSpec)", "testcase": false, "constructor": false, "invocations": ["generateArchitecture", "getResourceTypes", "getLinkTypes", "generateMappings", "getMappings", "getApplication"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}