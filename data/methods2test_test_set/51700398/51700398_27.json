{"test_class": {"identifier": "YahooCurrencyProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LATEST = readFile(\"/provider/rate/yahoo/latest_currencies.json\");", "modifier": "private static final", "type": "String", "declarator": "LATEST = readFile(\"/provider/rate/yahoo/latest_currencies.json\")", "var_name": "LATEST"}, {"original_string": "private MockRestServiceServer server;", "modifier": "private", "type": "MockRestServiceServer", "declarator": "server", "var_name": "server"}, {"original_string": "private YahooCurrencyProvider yahooCurrencyProvider = new YahooCurrencyProvider();", "modifier": "private", "type": "YahooCurrencyProvider", "declarator": "yahooCurrencyProvider = new YahooCurrencyProvider()", "var_name": "yahooCurrencyProvider"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/provider/rate/yahoo/YahooCurrencyProviderTest.java"}, "test_case": {"identifier": "testGetRates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetRates() throws Exception {\n\t\tserver.expect(anything()).andRespond(withSuccess(LATEST, MediaType.APPLICATION_JSON));\n\n\t\tQuote expectedUsdEurRate = new Quote(USD, EUR, new BigDecimal(\"0.8322\"), parse(\"2017-09-11T10:01:00+02:00\"));\n\n\t\tList<Quote> result = yahooCurrencyProvider.getRates();\n\n\t\tassertThat(result).containsOnlyOnce(expectedUsdEurRate);\n\t}", "signature": "void testGetRates()", "full_signature": "@Test public void testGetRates()", "class_method_signature": "YahooCurrencyProviderTest.testGetRates()", "testcase": true, "constructor": false, "invocations": ["andRespond", "expect", "anything", "withSuccess", "parse", "getRates", "containsOnlyOnce", "assertThat"]}, "focal_class": {"identifier": "YahooCurrencyProvider", "superclass": "", "interfaces": "implements LatestRateProvider", "fields": [{"original_string": "private static final Pattern FOREX_PATTERN = Pattern.compile(\"(\\\\w{3})(\\\\w{3})?=X\");", "modifier": "private static final", "type": "Pattern", "declarator": "FOREX_PATTERN = Pattern.compile(\"(\\\\w{3})(\\\\w{3})?=X\")", "var_name": "FOREX_PATTERN"}, {"original_string": "@Value(\"${provider.yahoo.url.latest.currencies}\")\n\tprivate String url;", "modifier": "@Value(\"${provider.yahoo.url.latest.currencies}\")\n\tprivate", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private final RestTemplate rt = new RestTemplate();", "modifier": "private final", "type": "RestTemplate", "declarator": "rt = new RestTemplate()", "var_name": "rt"}], "methods": [{"identifier": "getRates", "parameters": "()", "modifiers": "@Override public", "return": "List<Quote>", "signature": "List<Quote> getRates()", "full_signature": "@Override public List<Quote> getRates()", "class_method_signature": "YahooCurrencyProvider.getRates()", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/provider/rate/yahoo/YahooCurrencyProvider.java"}, "focal_method": {"identifier": "getRates", "parameters": "()", "modifiers": "@Override public", "return": "List<Quote>", "body": "@Override\n\tpublic List<Quote> getRates() throws IOException {\n\t\tYahooModel result = rt.getForObject(url, YahooModel.class);\n\n\t\treturn result.getQuoteResponse().getResult().stream()\n\t\t\t\t.map(yf -> {\n\t\t\t\t\tMatcher m = FOREX_PATTERN.matcher(yf.getSymbol());\n\n\t\t\t\t\tm.matches();\n\t\t\t\t\tString source = m.group(1);\n\t\t\t\t\tString target = m.group(2);\n\n\t\t\t\t\tif (target == null) {\n\t\t\t\t\t\ttarget = source;\n\t\t\t\t\t\tsource = CurrencyUtils.USD;\n\t\t\t\t\t}\n\n\t\t\t\t\tInstant inst = Instant.ofEpochSecond(yf.getRegularMarketTime());\n\t\t\t\t\t\n\t\t\t\t\treturn new Quote(source, target, BigDecimal.valueOf(yf.getRegularMarketPrice()), inst);\n\t\t\t\t})\n\t\t\t\t.collect(Collectors.toList());\n\t}", "signature": "List<Quote> getRates()", "full_signature": "@Override public List<Quote> getRates()", "class_method_signature": "YahooCurrencyProvider.getRates()", "testcase": false, "constructor": false, "invocations": ["getForObject", "collect", "map", "stream", "getResult", "getQuoteResponse", "matcher", "getSymbol", "matches", "group", "group", "ofEpochSecond", "getRegularMarketTime", "valueOf", "getRegularMarketPrice", "toList"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}