{"test_class": {"identifier": "MacroBasePipelineCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/runtime/command/MacroBasePipelineCommandTest.java"}, "test_case": {"identifier": "testPipelineRuns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPipelineRuns() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf();\n\n        conf.set(MacroBaseConf.PIPELINE_NAME, \"macrobase.runtime.command.MacroBasePipelineCommandTest\");\n        MacroBasePipelineCommand cmd1 = new MacroBasePipelineCommand();\n        cmd1.run(null, new Namespace(new HashMap<>()), conf);\n\n        assertFalse(MacroBaseMockPipeline.initialized);\n        TestCase.assertFalse(MacroBaseMockPipeline.ran);\n\n        conf.set(MacroBaseConf.PIPELINE_NAME, \"macrobase.runtime.command.MacroBaseMockPipeline\");\n\n        MacroBasePipelineCommand cmd2 = new MacroBasePipelineCommand();\n        cmd2.run(null, new Namespace(new HashMap<>()), conf);\n\n        assertTrue(MacroBaseMockPipeline.initialized);\n        assertTrue(MacroBaseMockPipeline.ran);\n\n        MacroBaseMockPipeline.initialized = false;\n        MacroBaseMockPipeline.ran = false;\n\n        MacroBasePipelineCommand cmd3 = new MacroBasePipelineCommand();\n        cmd3.run(null, new Namespace(new HashMap<>()), conf);\n\n        assertTrue(MacroBaseMockPipeline.initialized);\n        assertTrue(MacroBaseMockPipeline.ran);\n    }", "signature": "void testPipelineRuns()", "full_signature": "@Test public void testPipelineRuns()", "class_method_signature": "MacroBasePipelineCommandTest.testPipelineRuns()", "testcase": true, "constructor": false, "invocations": ["set", "run", "assertFalse", "assertFalse", "set", "run", "assertTrue", "assertTrue", "run", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "MacroBasePipelineCommand", "superclass": "extends ConfiguredCommand<MacroBaseConf>", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MacroBasePipelineCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MacroBasePipelineCommand.class)", "var_name": "log"}], "methods": [{"identifier": "MacroBasePipelineCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " MacroBasePipelineCommand()", "full_signature": "public  MacroBasePipelineCommand()", "class_method_signature": "MacroBasePipelineCommand.MacroBasePipelineCommand()", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "modifiers": "@Override protected", "return": "void", "signature": "void run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "full_signature": "@Override protected void run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "class_method_signature": "MacroBasePipelineCommand.run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/runtime/command/MacroBasePipelineCommand.java"}, "focal_method": {"identifier": "run", "parameters": "(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration) throws Exception {\n        configuration.loadSystemProperties();\n        Class c = Class.forName(configuration.getString(MacroBaseConf.PIPELINE_NAME));\n        Object ao = c.newInstance();\n\n        if (!(ao instanceof Pipeline)) {\n            log.error(\"{} is not an instance of Pipeline! Exiting...\");\n            return;\n        }\n\n        List<AnalysisResult> results = ((Pipeline) ao).initialize(configuration).run();\n\n        MacroBase.reporter.report();\n\n        log.info(\"Result: {}\", results);\n    }", "signature": "void run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "full_signature": "@Override protected void run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "class_method_signature": "MacroBasePipelineCommand.run(Bootstrap<MacroBaseConf> bootstrap,\n                       Namespace namespace,\n                       MacroBaseConf configuration)", "testcase": false, "constructor": false, "invocations": ["loadSystemProperties", "forName", "getString", "newInstance", "error", "run", "initialize", "report", "info"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}