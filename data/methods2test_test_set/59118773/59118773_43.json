{"test_class": {"identifier": "CostEffectivenessVisualsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CostEffectivenessVisualsController costEffectivenessVisualsController;", "modifier": "@Autowired\n    private", "type": "CostEffectivenessVisualsController", "declarator": "costEffectivenessVisualsController", "var_name": "costEffectivenessVisualsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsControllerTest.java"}, "test_case": {"identifier": "costEffectivenessTenderAwardAmount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void costEffectivenessTenderAwardAmount() throws Exception {\n        final ArrayList<Document> costEffectivenessTenderAwardAmount = costEffectivenessVisualsController\n                .costEffectivenessTenderAwardAmount(new GroupingFilterPagingRequest());\n\n        final Document first = costEffectivenessTenderAwardAmount.get(0);\n        int year = (int) first.get(CostEffectivenessVisualsController.Keys.YEAR);\n        BigDecimal diffTenderAwardAmount = (BigDecimal) first\n                .get(CostEffectivenessVisualsController.Keys.DIFF_TENDER_AWARD_AMOUNT);\n        Assert.assertEquals(-5400000, diffTenderAwardAmount.doubleValue(), 0);\n        Assert.assertEquals(2014, year);\n\n        final Document second = costEffectivenessTenderAwardAmount.get(1);\n        year = (int) second.get(CostEffectivenessVisualsController.Keys.YEAR);\n        diffTenderAwardAmount = (BigDecimal) second\n                .get(CostEffectivenessVisualsController.Keys.DIFF_TENDER_AWARD_AMOUNT);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(-31000, diffTenderAwardAmount.doubleValue(), 0);\n\n//        final DBObject third = costEffectivenessTenderAwardAmount.get(2);\n//        year = (int) third.get(Fields.UNDERSCORE_ID);\n//        diffTenderAwardAmount = (BigDecimal) third\n//                .get(CostEffectivenessVisualsController.Keys.DIFF_TENDER_AWARD_AMOUNT);\n//        Assert.assertEquals(2014, year);\n//        Assert.assertEquals(600000, diffTenderAwardAmount.doubleValue(), 0);\n    }", "signature": "void costEffectivenessTenderAwardAmount()", "full_signature": "@Test public void costEffectivenessTenderAwardAmount()", "class_method_signature": "CostEffectivenessVisualsControllerTest.costEffectivenessTenderAwardAmount()", "testcase": true, "constructor": false, "invocations": ["costEffectivenessTenderAwardAmount", "get", "get", "get", "assertEquals", "doubleValue", "assertEquals", "get", "get", "get", "assertEquals", "assertEquals", "doubleValue"]}, "focal_class": {"identifier": "CostEffectivenessVisualsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AsyncControllerLookupService controllerLookupService;", "modifier": "@Autowired\n    private", "type": "AsyncControllerLookupService", "declarator": "controllerLookupService", "var_name": "controllerLookupService"}], "methods": [{"identifier": "costEffectivenessAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "getYearMonthlyKey", "parameters": "(GroupingFilterPagingRequest filter, Document db)", "modifiers": "private", "return": "String", "signature": "String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "full_signature": "private String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "class_method_signature": "CostEffectivenessVisualsController.getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "ArrayList<Document>", "signature": "ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsController.java"}, "focal_method": {"identifier": "costEffectivenessTenderAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "ArrayList<Document>", "body": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \"\n            + \"/api/costEffectivenessAwardAmount.\"\n            + \"This endpoint aggregates the responses from the specified endpoints, per year. \"\n            + \"Responds to the same filters.\")\n    @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST,\n            RequestMethod.GET}, produces = \"application/json\")\n    public ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter) {\n\n        Future<List<Document>> costEffectivenessAwardAmountFuture = controllerLookupService\n                .asyncInvoke(new AsyncBeanParamControllerMethodCallable<List<Document>, GroupingFilterPagingRequest>() {\n                    @Override\n                    public List<Document> invokeControllerMethod(GroupingFilterPagingRequest filter) {\n                        return costEffectivenessAwardAmount(filter);\n                    }\n                }, filter);\n\n\n        Future<List<Document>> costEffectivenessTenderAmountFuture = controllerLookupService\n                .asyncInvoke(new AsyncBeanParamControllerMethodCallable<List<Document>, GroupingFilterPagingRequest>() {\n                    @Override\n                    public List<Document> invokeControllerMethod(GroupingFilterPagingRequest filter) {\n                        return costEffectivenessTenderAmount(filter);\n                    }\n                }, filter);\n\n\n        //this is completely unnecessary since the #get methods are blocking\n        //controllerLookupService.waitTillDone(costEffectivenessAwardAmountFuture, costEffectivenessTenderAmountFuture);\n\n\n        LinkedHashMap<Object, Document> response = new LinkedHashMap<>();\n\n        try {\n\n            costEffectivenessAwardAmountFuture.get()\n                    .forEach(dbobj -> response.put(getYearMonthlyKey(filter, dbobj), dbobj));\n            costEffectivenessTenderAmountFuture.get().forEach(dbobj -> {\n                if (response.containsKey(getYearMonthlyKey(filter, dbobj))) {\n                    HashMap<String, Object> map = new HashMap<>(dbobj);\n                    map.remove(Keys.YEAR);\n                    if (filter.getMonthly()) {\n                        map.remove(Keys.MONTH);\n                    }\n                    response.get(getYearMonthlyKey(filter, dbobj)).putAll(map);\n                } else {\n                    response.put(getYearMonthlyKey(filter, dbobj), dbobj);\n                }\n            });\n\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n\n        Collection<Document> respCollection = response.values();\n\n        respCollection.forEach(dbobj -> {\n\n            BigDecimal totalTenderAmount = BigDecimal\n                    .valueOf(dbobj.get(Keys.TOTAL_TENDER_AMOUNT) == null ? 0d\n                            : ((Number) dbobj.get(Keys.TOTAL_TENDER_AMOUNT)).doubleValue());\n\n            BigDecimal totalAwardAmount = BigDecimal\n                    .valueOf(dbobj.get(Keys.TOTAL_AWARD_AMOUNT) == null ? 0d\n                            : ((Number) dbobj.get(Keys.TOTAL_AWARD_AMOUNT)).doubleValue());\n\n            dbobj.put(\n                    Keys.DIFF_TENDER_AWARD_AMOUNT,\n                    totalTenderAmount\n                            .subtract(totalAwardAmount)\n            );\n\n            dbobj.put(\n                    Keys.PERCENTAGE_AWARD_AMOUNT,\n                    totalTenderAmount.compareTo(BigDecimal.ZERO) != 0\n                            ? (totalAwardAmount.setScale(15)\n                            .divide(totalTenderAmount, BigDecimal.ROUND_HALF_UP)\n                            .multiply(ONE_HUNDRED)) : BigDecimal.ZERO\n            );\n\n            dbobj.put(\n                    Keys.PERCENTAGE_DIFF_AMOUNT,\n                    totalTenderAmount.compareTo(BigDecimal.ZERO) != 0\n                            ? (((BigDecimal) dbobj.get(Keys.DIFF_TENDER_AWARD_AMOUNT)).setScale(15)\n                            .divide(totalTenderAmount, BigDecimal.ROUND_HALF_UP)\n                            .multiply(ONE_HUNDRED)) : BigDecimal.ZERO\n            );\n\n        });\n\n        return new ArrayList<>(respCollection);\n    }", "signature": "ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["asyncInvoke", "costEffectivenessAwardAmount", "asyncInvoke", "costEffectivenessTenderAmount", "forEach", "get", "put", "getYearMonthlyKey", "forEach", "get", "containsKey", "getYearMonthlyKey", "remove", "getMonthly", "remove", "putAll", "get", "getYearMonthlyKey", "put", "getYearMonthlyKey", "values", "forEach", "valueOf", "get", "doubleValue", "get", "valueOf", "get", "doubleValue", "get", "put", "subtract", "put", "compareTo", "multiply", "divide", "setScale", "put", "compareTo", "multiply", "divide", "setScale", "get"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}