{"test_class": {"identifier": "BranchTrippingTest", "superclass": "extends AbstractTrippingTest", "interfaces": "", "fields": [], "file": "contingency/contingency-api/src/test/java/com/powsybl/contingency/tasks/BranchTrippingTest.java"}, "test_case": {"identifier": "fictitiousSwitchTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fictitiousSwitchTest() {\n        Set<String> switchIds = Sets.newHashSet(\"BD\", \"BL\");\n\n        Network network = FictitiousSwitchFactory.create();\n        List<Boolean> expectedSwitchStates = getSwitchStates(network, switchIds);\n\n        BranchTripping tripping = new BranchTripping(\"CJ\", \"C\");\n\n        Set<Switch> switchesToOpen = new HashSet<>();\n        Set<Terminal> terminalsToDisconnect = new HashSet<>();\n        tripping.traverse(network, null, switchesToOpen, terminalsToDisconnect);\n        assertEquals(switchIds, switchesToOpen.stream().map(Switch::getId).collect(Collectors.toSet()));\n        assertEquals(Collections.emptySet(), terminalsToDisconnect);\n\n        tripping.modify(network, null);\n        assertTrue(network.getSwitch(\"BD\").isOpen());\n        assertTrue(network.getSwitch(\"BL\").isOpen());\n\n        List<Boolean> switchStates = getSwitchStates(network, switchIds);\n        assertEquals(expectedSwitchStates, switchStates);\n    }", "signature": "void fictitiousSwitchTest()", "full_signature": "@Test public void fictitiousSwitchTest()", "class_method_signature": "BranchTrippingTest.fictitiousSwitchTest()", "testcase": true, "constructor": false, "invocations": ["newHashSet", "create", "getSwitchStates", "traverse", "assertEquals", "collect", "map", "stream", "toSet", "assertEquals", "emptySet", "modify", "assertTrue", "isOpen", "getSwitch", "assertTrue", "isOpen", "getSwitch", "getSwitchStates", "assertEquals"]}, "focal_class": {"identifier": "BranchTripping", "superclass": "extends AbstractTrippingTask", "interfaces": "", "fields": [{"original_string": "private final String branchId;", "modifier": "private final", "type": "String", "declarator": "branchId", "var_name": "branchId"}, {"original_string": "private final String voltageLevelId;", "modifier": "private final", "type": "String", "declarator": "voltageLevelId", "var_name": "voltageLevelId"}], "methods": [{"identifier": "BranchTripping", "parameters": "(String branchId)", "modifiers": "public", "return": "", "signature": " BranchTripping(String branchId)", "full_signature": "public  BranchTripping(String branchId)", "class_method_signature": "BranchTripping.BranchTripping(String branchId)", "testcase": false, "constructor": true}, {"identifier": "BranchTripping", "parameters": "(String branchId, String voltageLevelId)", "modifiers": "public", "return": "", "signature": " BranchTripping(String branchId, String voltageLevelId)", "full_signature": "public  BranchTripping(String branchId, String voltageLevelId)", "class_method_signature": "BranchTripping.BranchTripping(String branchId, String voltageLevelId)", "testcase": false, "constructor": true}, {"identifier": "traverse", "parameters": "(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "modifiers": "@Override public", "return": "void", "signature": "void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "full_signature": "@Override public void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "class_method_signature": "BranchTripping.traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "testcase": false, "constructor": false}], "file": "contingency/contingency-api/src/main/java/com/powsybl/contingency/tasks/BranchTripping.java"}, "focal_method": {"identifier": "traverse", "parameters": "(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect) {\n        Objects.requireNonNull(network);\n\n        Branch branch = network.getBranch(branchId);\n        if (branch == null) {\n            throw new PowsyblException(\"Branch '\" + branchId + \"' not found\");\n        }\n        if (voltageLevelId != null) {\n            if (voltageLevelId.equals(branch.getTerminal1().getVoltageLevel().getId())) {\n                ContingencyTopologyTraverser.traverse(branch.getTerminal1(), switchesToOpen, terminalsToDisconnect);\n            } else if (voltageLevelId.equals(branch.getTerminal2().getVoltageLevel().getId())) {\n                ContingencyTopologyTraverser.traverse(branch.getTerminal2(), switchesToOpen, terminalsToDisconnect);\n            } else {\n                throw new PowsyblException(\"VoltageLevel '\" + voltageLevelId + \"' not connected to branch '\" + branchId + \"'\");\n            }\n        } else {\n            ContingencyTopologyTraverser.traverse(branch.getTerminal1(), switchesToOpen, terminalsToDisconnect);\n            ContingencyTopologyTraverser.traverse(branch.getTerminal2(), switchesToOpen, terminalsToDisconnect);\n        }\n    }", "signature": "void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "full_signature": "@Override public void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "class_method_signature": "BranchTripping.traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getBranch", "equals", "getId", "getVoltageLevel", "getTerminal1", "traverse", "getTerminal1", "equals", "getId", "getVoltageLevel", "getTerminal2", "traverse", "getTerminal2", "traverse", "getTerminal1", "traverse", "getTerminal2"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}