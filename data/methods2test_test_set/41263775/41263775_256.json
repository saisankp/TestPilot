{"test_class": {"identifier": "PartialIndexTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/support/PartialIndexTest.java"}, "test_case": {"identifier": "testSupportsQuery_Positive_RootQueryIsAnAndQueryWithFilterQueryAsChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public <O> void testSupportsQuery_Positive_RootQueryIsAnAndQueryWithFilterQueryAsChild() {\n        // A partial index on attribute Car.PRICE, which is filtered to only index Ford and Honda cars.\n        assertTrue(supportsQueryInternal(\n                backingIndexSupportsQuery(lessThan(Car.PRICE, 5000.0)),\n                in(Car.MANUFACTURER, \"Ford\", \"Honda\"),\n                and(lessThan(Car.PRICE, 5000.0), in(Car.MANUFACTURER, \"Ford\", \"Honda\")),\n                lessThan(Car.PRICE, 5000.0),\n                noQueryOptions()\n        ));\n    }", "signature": "void testSupportsQuery_Positive_RootQueryIsAnAndQueryWithFilterQueryAsChild()", "full_signature": "@Test public void testSupportsQuery_Positive_RootQueryIsAnAndQueryWithFilterQueryAsChild()", "class_method_signature": "PartialIndexTest.testSupportsQuery_Positive_RootQueryIsAnAndQueryWithFilterQueryAsChild()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "supportsQueryInternal", "backingIndexSupportsQuery", "lessThan", "in", "and", "lessThan", "in", "lessThan", "noQueryOptions"]}, "focal_class": {"identifier": "PartialIndex", "superclass": "", "interfaces": "implements AttributeIndex<A, O>", "fields": [{"original_string": "static final int INDEX_RETRIEVAL_COST_DELTA = -5;", "modifier": "static final", "type": "int", "declarator": "INDEX_RETRIEVAL_COST_DELTA = -5", "var_name": "INDEX_RETRIEVAL_COST_DELTA"}, {"original_string": "protected final Query<O> filterQuery;", "modifier": "protected final", "type": "Query<O>", "declarator": "filterQuery", "var_name": "filterQuery"}, {"original_string": "protected final Attribute<O, A> attribute;", "modifier": "protected final", "type": "Attribute<O, A>", "declarator": "attribute", "var_name": "attribute"}, {"original_string": "protected volatile I backingIndex;", "modifier": "protected volatile", "type": "I", "declarator": "backingIndex", "var_name": "backingIndex"}], "methods": [{"identifier": "PartialIndex", "parameters": "(Attribute<O, A> attribute, Query<O> filterQuery)", "modifiers": "protected", "return": "", "signature": " PartialIndex(Attribute<O, A> attribute, Query<O> filterQuery)", "full_signature": "protected  PartialIndex(Attribute<O, A> attribute, Query<O> filterQuery)", "class_method_signature": "PartialIndex.PartialIndex(Attribute<O, A> attribute, Query<O> filterQuery)", "testcase": false, "constructor": true}, {"identifier": "backingIndex", "parameters": "()", "modifiers": "protected", "return": "I", "signature": "I backingIndex()", "full_signature": "protected I backingIndex()", "class_method_signature": "PartialIndex.backingIndex()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "()", "modifiers": "public", "return": "Attribute<O, A>", "signature": "Attribute<O, A> getAttribute()", "full_signature": "public Attribute<O, A> getAttribute()", "class_method_signature": "PartialIndex.getAttribute()", "testcase": false, "constructor": false}, {"identifier": "getFilterQuery", "parameters": "()", "modifiers": "public", "return": "Query<O>", "signature": "Query<O> getFilterQuery()", "full_signature": "public Query<O> getFilterQuery()", "class_method_signature": "PartialIndex.getFilterQuery()", "testcase": false, "constructor": false}, {"identifier": "getBackingIndex", "parameters": "()", "modifiers": "public", "return": "AttributeIndex<A, O>", "signature": "AttributeIndex<A, O> getBackingIndex()", "full_signature": "public AttributeIndex<A, O> getBackingIndex()", "class_method_signature": "PartialIndex.getBackingIndex()", "testcase": false, "constructor": false}, {"identifier": "supportsQuery", "parameters": "(Query<O> query, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "full_signature": "@Override public boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.supportsQuery(Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "supportsQueryInternal", "parameters": "(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "modifiers": "static", "return": "boolean", "signature": "boolean supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "full_signature": "static boolean supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "class_method_signature": "PartialIndex.supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PartialIndex.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PartialIndex.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "PartialIndex.isMutable()", "testcase": false, "constructor": false}, {"identifier": "isQuantized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isQuantized()", "full_signature": "@Override public boolean isQuantized()", "class_method_signature": "PartialIndex.isQuantized()", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(Query<O> query, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieve(Query<O> query, QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(Query<O> query, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.retrieve(Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index<O>", "signature": "Index<O> getEffectiveIndex()", "full_signature": "@Override public Index<O> getEffectiveIndex()", "class_method_signature": "PartialIndex.getEffectiveIndex()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ObjectStore<O> objectStore, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "full_signature": "@Override public void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(QueryOptions queryOptions)", "full_signature": "@Override public void destroy(QueryOptions queryOptions)", "class_method_signature": "PartialIndex.destroy(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(ObjectSet<O> objectSet, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "full_signature": "@Override public boolean addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(ObjectSet<O> objectSet, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "full_signature": "@Override public boolean removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void clear(QueryOptions queryOptions)", "full_signature": "@Override public void clear(QueryOptions queryOptions)", "class_method_signature": "PartialIndex.clear(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(ObjectSet<O> objects, QueryOptions queryOptions)", "modifiers": "protected", "return": "Collection<O>", "signature": "Collection<O> filter(ObjectSet<O> objects, QueryOptions queryOptions)", "full_signature": "protected Collection<O> filter(ObjectSet<O> objects, QueryOptions queryOptions)", "class_method_signature": "PartialIndex.filter(ObjectSet<O> objects, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "createBackingIndex", "parameters": "()", "modifiers": "protected abstract", "return": "I", "signature": "I createBackingIndex()", "full_signature": "protected abstract I createBackingIndex()", "class_method_signature": "PartialIndex.createBackingIndex()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/support/PartialIndex.java"}, "focal_method": {"identifier": "supportsQueryInternal", "parameters": "(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "modifiers": "static", "return": "boolean", "body": "static <A, O, I extends AttributeIndex<A, O>> boolean supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions) {\n        if (!backingIndex.supportsQuery(branchQuery, queryOptions)) {\n            return false;\n        }\n\n        // Check: rootQuery equals filterQuery\n        if (filterQuery.equals(rootQuery)) {\n            return true;\n        }\n\n        if (!(rootQuery instanceof And)) {\n            return false;\n        }\n        // Check: rootQuery (r) is an And query, which has filterQuery (f) as any one of its direct children:\n        // r = and(x, y, f, z)\n        And<O> rootAndQuery = (And<O>)rootQuery;\n        if (rootAndQuery.getChildQueries().contains(filterQuery)) {\n            return true;\n        }\n\n        // Check: rootQuery (r) is an And query and filterQuery (f) is an And query,\n        // and the direct children of f are also the direct children of r:\n        // f = and(a, b), r = and(x, a, y, b)\n        if (!(filterQuery instanceof And)) {\n            return false;\n        }\n        And<O> filterAndQuery = ((And<O>) filterQuery);\n        return rootAndQuery.getChildQueries().containsAll(filterAndQuery.getChildQueries());\n    }", "signature": "boolean supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "full_signature": "static boolean supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "class_method_signature": "PartialIndex.supportsQueryInternal(I backingIndex,\n                                                                                Query<O> filterQuery,\n                                                                                Query<O> rootQuery,\n                                                                                Query<O> branchQuery,\n                                                                                QueryOptions queryOptions)", "testcase": false, "constructor": false, "invocations": ["supportsQuery", "equals", "contains", "getChildQueries", "containsAll", "getChildQueries", "getChildQueries"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}