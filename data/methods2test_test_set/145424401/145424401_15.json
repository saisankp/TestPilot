{"test_class": {"identifier": "ApplicationExporterTest", "superclass": "", "interfaces": "", "fields": [], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/component/ApplicationExporterTest.java"}, "test_case": {"identifier": "testPartition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPartition() {\n    // 1x10\n    Set<List<Integer>> parts = ApplicationExporter.partition(this.createList(10), 1);\n    int num = 0;\n    assertEquals(1, parts.size());\n    assertEquals(10, parts.iterator().next().size());\n\n    // 0\n    parts = ApplicationExporter.partition(null, 10);\n    num = 0;\n    assertEquals(0, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(false);\n    }\n    assertEquals(0, num);\n\n    // 1x0\n    parts = ApplicationExporter.partition(this.createList(0), 10);\n    num = 0;\n    assertEquals(1, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 0);\n      num += part.size();\n    }\n    assertEquals(0, num);\n\n    // 1x1\n    parts = ApplicationExporter.partition(this.createList(1), 10);\n    num = 0;\n    assertEquals(1, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 1);\n      num += part.size();\n    }\n    assertEquals(1, num);\n\n    // 1x2\n    parts = ApplicationExporter.partition(this.createList(2), 10);\n    num = 0;\n    assertEquals(1, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 2);\n      num += part.size();\n    }\n    assertEquals(2, num);\n\n    // 10x1\n    parts = ApplicationExporter.partition(this.createList(10), 10);\n    num = 0;\n    assertEquals(10, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 1);\n      num += part.size();\n    }\n    assertEquals(10, num);\n\n    // 5x2\n    parts = ApplicationExporter.partition(this.createList(10), 5);\n    num = 0;\n    assertEquals(5, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 2);\n      num += part.size();\n    }\n    assertEquals(10, num);\n\n    // 4x2 + 1x3 = 11\n    parts = ApplicationExporter.partition(this.createList(11), 5);\n    num = 0;\n    assertEquals(5, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 2 || part.size() == 3);\n      num += part.size();\n    }\n    assertEquals(11, num);\n\n    // 4x2 + 1x4\n    parts = ApplicationExporter.partition(this.createList(12), 5);\n    num = 0;\n    assertEquals(5, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 2 || part.size() == 4);\n      num += part.size();\n    }\n    assertEquals(12, num);\n\n    // 39x28 + 1x38 = 1030\n    parts = ApplicationExporter.partition(this.createList(1130), 40);\n    num = 0;\n    assertEquals(40, parts.size());\n    for (List<Integer> part : parts) {\n      assertTrue(part.size() == 28 || part.size() == 38);\n      num += part.size();\n    }\n    assertEquals(1130, num);\n  }", "signature": "void testPartition()", "full_signature": "@Test public void testPartition()", "class_method_signature": "ApplicationExporterTest.testPartition()", "testcase": true, "constructor": false, "invocations": ["partition", "createList", "assertEquals", "size", "assertEquals", "size", "next", "iterator", "partition", "assertEquals", "size", "assertTrue", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "size", "assertEquals", "partition", "createList", "assertEquals", "size", "assertTrue", "size", "size", "size", "assertEquals"]}, "focal_class": {"identifier": "ApplicationExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(ApplicationExporter.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ApplicationExporter.class)", "var_name": "log"}, {"original_string": "private static final String EXPORT_FILE_PREFIX = \"vulas_all_apps-\";", "modifier": "private static final", "type": "String", "declarator": "EXPORT_FILE_PREFIX = \"vulas_all_apps-\"", "var_name": "EXPORT_FILE_PREFIX"}, {"original_string": "private static final DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyyMMdd\");", "modifier": "private static final", "type": "DateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyyMMdd\")", "var_name": "DATE_FORMAT"}, {"original_string": "final int no_threads = ThreadUtil.getNoThreads();", "modifier": "final", "type": "int", "declarator": "no_threads = ThreadUtil.getNoThreads()", "var_name": "no_threads"}, {"original_string": "@Autowired private ApplicationContext applicationContext;", "modifier": "@Autowired private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Autowired private ApplicationRepository appRepository;", "modifier": "@Autowired private", "type": "ApplicationRepository", "declarator": "appRepository", "var_name": "appRepository"}], "methods": [{"identifier": "produceExportAsync", "parameters": "(\n      final Tenant _tenant,\n      final Space _space,\n      final String separator,\n      final String[] includeSpaceProperties,\n      final String[] includeGoalConfiguration,\n      final String[] includeGoalSystemInfo,\n      final String[] _selected_bugs,\n      final boolean _incl_all_bugs,\n      final boolean _incl_exemptions,\n      final ExportFormat _format,\n      final Message _msg)", "modifiers": "public synchronized", "return": "void", "signature": "void produceExportAsync(\n      final Tenant _tenant,\n      final Space _space,\n      final String separator,\n      final String[] includeSpaceProperties,\n      final String[] includeGoalConfiguration,\n      final String[] includeGoalSystemInfo,\n      final String[] _selected_bugs,\n      final boolean _incl_all_bugs,\n      final boolean _incl_exemptions,\n      final ExportFormat _format,\n      final Message _msg)", "full_signature": "public synchronized void produceExportAsync(\n      final Tenant _tenant,\n      final Space _space,\n      final String separator,\n      final String[] includeSpaceProperties,\n      final String[] includeGoalConfiguration,\n      final String[] includeGoalSystemInfo,\n      final String[] _selected_bugs,\n      final boolean _incl_all_bugs,\n      final boolean _incl_exemptions,\n      final ExportFormat _format,\n      final Message _msg)", "class_method_signature": "ApplicationExporter.produceExportAsync(\n      final Tenant _tenant,\n      final Space _space,\n      final String separator,\n      final String[] includeSpaceProperties,\n      final String[] includeGoalConfiguration,\n      final String[] includeGoalSystemInfo,\n      final String[] _selected_bugs,\n      final boolean _incl_all_bugs,\n      final boolean _incl_exemptions,\n      final ExportFormat _format,\n      final Message _msg)", "testcase": false, "constructor": false}, {"identifier": "produceExport", "parameters": "(\n      Tenant _tenant,\n      Space _space,\n      String separator,\n      String[] includeSpaceProperties,\n      String[] includeGoalConfiguration,\n      String[] includeGoalSystemInfo,\n      String[] _selected_bugs,\n      boolean _incl_all_bugs,\n      boolean _incl_exemptions,\n      ExportFormat _format)", "modifiers": "@Transactional public synchronized", "return": "Path", "signature": "Path produceExport(\n      Tenant _tenant,\n      Space _space,\n      String separator,\n      String[] includeSpaceProperties,\n      String[] includeGoalConfiguration,\n      String[] includeGoalSystemInfo,\n      String[] _selected_bugs,\n      boolean _incl_all_bugs,\n      boolean _incl_exemptions,\n      ExportFormat _format)", "full_signature": "@Transactional public synchronized Path produceExport(\n      Tenant _tenant,\n      Space _space,\n      String separator,\n      String[] includeSpaceProperties,\n      String[] includeGoalConfiguration,\n      String[] includeGoalSystemInfo,\n      String[] _selected_bugs,\n      boolean _incl_all_bugs,\n      boolean _incl_exemptions,\n      ExportFormat _format)", "class_method_signature": "ApplicationExporter.produceExport(\n      Tenant _tenant,\n      Space _space,\n      String separator,\n      String[] includeSpaceProperties,\n      String[] includeGoalConfiguration,\n      String[] includeGoalSystemInfo,\n      String[] _selected_bugs,\n      boolean _incl_all_bugs,\n      boolean _incl_exemptions,\n      ExportFormat _format)", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(List<T> _list, int _num)", "modifiers": "public static", "return": "Set<List<T>>", "signature": "Set<List<T>> partition(List<T> _list, int _num)", "full_signature": "public static Set<List<T>> partition(List<T> _list, int _num)", "class_method_signature": "ApplicationExporter.partition(List<T> _list, int _num)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/component/ApplicationExporter.java"}, "focal_method": {"identifier": "partition", "parameters": "(List<T> _list, int _num)", "modifiers": "public static", "return": "Set<List<T>>", "body": "public static <T> Set<List<T>> partition(List<T> _list, int _num)\n      throws IllegalArgumentException {\n    final Set<List<T>> parts = new HashSet<List<T>>();\n\n    // Number of parts must be > 0\n    if (_num < 1)\n      throw new IllegalArgumentException(\n          \"Number of partitions must be greater than 0 but is [\" + _num + \"]\");\n\n    // No list\n    else if (_list == null)\n      ;\n\n    // Return 1 part only\n    else if (_list.size() < _num) parts.add(_list);\n\n    // Create sublists\n    else {\n      final int size = (int) Math.floor((double) _list.size() / (double) _num);\n      int i, min, max;\n\n      // Create _partition_no -1 parts\n      for (i = 0; i < _num - 1; i++) {\n        min = i * size;\n        max = Math.min((i + 1) * size, _list.size());\n        if (max >= min) {\n          parts.add(_list.subList(min, max));\n        }\n      }\n\n      // Create last part with remaining elements\n      min = i * size;\n      max = Math.min((_num + 1) * size, _list.size());\n      if (max >= min) {\n        parts.add(_list.subList(min, max));\n      }\n    }\n    return parts;\n  }", "signature": "Set<List<T>> partition(List<T> _list, int _num)", "full_signature": "public static Set<List<T>> partition(List<T> _list, int _num)", "class_method_signature": "ApplicationExporter.partition(List<T> _list, int _num)", "testcase": false, "constructor": false, "invocations": ["size", "add", "floor", "size", "min", "size", "add", "subList", "min", "size", "add", "subList"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}