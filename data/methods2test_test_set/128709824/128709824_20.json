{"test_class": {"identifier": "RpcLoggerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "log-common-tools/src/test/java/com/alipay/sofa/rpc/log/factory/RpcLoggerFactoryTest.java"}, "test_case": {"identifier": "getLogger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLogger() throws Exception {\n\n        Assert.assertNull(RpcLoggerFactory.getLogger(null, \"appname1\"));\n        Logger logger1 = RpcLoggerFactory.getLogger(\"xxx\", \"appname1\");\n        Assert.assertNotNull(logger1);\n        Logger logger2 = RpcLoggerFactory.getLogger(\"xxx\", \"appname1\");\n        Assert.assertNotNull(logger1);\n        Assert.assertEquals(logger1, logger2);\n        Logger logger3 = RpcLoggerFactory.getLogger(\"xxx\", \"appname2\");\n        Assert.assertFalse(logger1.equals(logger3));\n    }", "signature": "void getLogger()", "full_signature": "@Test public void getLogger()", "class_method_signature": "RpcLoggerFactoryTest.getLogger()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getLogger", "getLogger", "assertNotNull", "getLogger", "assertNotNull", "assertEquals", "getLogger", "assertFalse", "equals"]}, "focal_class": {"identifier": "RpcLoggerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String  RPC_LOG_SPACE = \"com.alipay.sofa.rpc\";", "modifier": "public static final", "type": "String", "declarator": "RPC_LOG_SPACE = \"com.alipay.sofa.rpc\"", "var_name": "RPC_LOG_SPACE"}, {"original_string": "private static final String APPNAME       = \"appname\";", "modifier": "private static final", "type": "String", "declarator": "APPNAME       = \"appname\"", "var_name": "APPNAME"}], "methods": [{"identifier": "getLogger", "parameters": "(String name, String appname)", "modifiers": "public static", "return": "org.slf4j.Logger", "signature": "org.slf4j.Logger getLogger(String name, String appname)", "full_signature": "public static org.slf4j.Logger getLogger(String name, String appname)", "class_method_signature": "RpcLoggerFactory.getLogger(String name, String appname)", "testcase": false, "constructor": false}], "file": "log-common-tools/src/main/java/com/alipay/sofa/rpc/log/factory/RpcLoggerFactory.java"}, "focal_method": {"identifier": "getLogger", "parameters": "(String name, String appname)", "modifiers": "public static", "return": "org.slf4j.Logger", "body": "public static org.slf4j.Logger getLogger(String name, String appname) {\n        //\u4ece\"com/alipay/sofa/rpc/log\"\u4e2d\u83b7\u53d6 rpc \u7684\u65e5\u5fd7\u914d\u7f6e\u5e76\u5bfb\u627e\u5bf9\u5e94logger\u5bf9\u8c61,log \u4e3a\u9ed8\u8ba4\u6dfb\u52a0\u7684\u540e\u7f00\n        if (name == null || name.isEmpty()) {\n            return null;\n        }\n\n        Map<String, String> properties = new HashMap<String, String>();\n        properties.put(APPNAME, appname == null ? \"\" : appname);\n        SpaceId spaceId = new SpaceId(RPC_LOG_SPACE);\n        if (appname != null) {\n            spaceId.withTag(APPNAME, appname);\n        }\n        return LoggerSpaceManager.getLoggerBySpace(name, spaceId, properties);\n    }", "signature": "org.slf4j.Logger getLogger(String name, String appname)", "full_signature": "public static org.slf4j.Logger getLogger(String name, String appname)", "class_method_signature": "RpcLoggerFactory.getLogger(String name, String appname)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "put", "withTag", "getLoggerBySpace"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}