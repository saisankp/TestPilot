{"test_class": {"identifier": "BluetoothPeripheralTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BluetoothPeripheral peripheral;", "modifier": "private", "type": "BluetoothPeripheral", "declarator": "peripheral", "var_name": "peripheral"}, {"original_string": "private Handler handler;", "modifier": "private", "type": "Handler", "declarator": "handler", "var_name": "handler"}, {"original_string": "public static final UUID SERVICE_UUID = UUID.fromString(\"00001809-0000-1000-8000-00805f9b34fb\");", "modifier": "public static final", "type": "UUID", "declarator": "SERVICE_UUID = UUID.fromString(\"00001809-0000-1000-8000-00805f9b34fb\")", "var_name": "SERVICE_UUID"}, {"original_string": "@Mock\n    private BluetoothPeripheral.InternalCallback internalCallback;", "modifier": "@Mock\n    private", "type": "BluetoothPeripheral.InternalCallback", "declarator": "internalCallback", "var_name": "internalCallback"}, {"original_string": "@Mock\n    private BluetoothPeripheralCallback peripheralCallback;", "modifier": "@Mock\n    private", "type": "BluetoothPeripheralCallback", "declarator": "peripheralCallback", "var_name": "peripheralCallback"}, {"original_string": "@Mock\n    private Context context;", "modifier": "@Mock\n    private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private BluetoothDevice device;", "modifier": "@Mock\n    private", "type": "BluetoothDevice", "declarator": "device", "var_name": "device"}, {"original_string": "@Mock\n    private BluetoothGatt gatt;", "modifier": "@Mock\n    private", "type": "BluetoothGatt", "declarator": "gatt", "var_name": "gatt"}], "file": "blessed/src/test/java/com/welie/blessed/BluetoothPeripheralTest.java"}, "test_case": {"identifier": "createBondWhileConnectedTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createBondWhileConnectedTest() {\n        BluetoothGattCallback callback = connectAndGetCallback();\n        callback.onConnectionStateChange(gatt, GATT_SUCCESS, STATE_CONNECTED);\n\n        peripheral.createBond();\n\n        verify(device).createBond();\n    }", "signature": "void createBondWhileConnectedTest()", "full_signature": "@Test public void createBondWhileConnectedTest()", "class_method_signature": "BluetoothPeripheralTest.createBondWhileConnectedTest()", "testcase": true, "constructor": false, "invocations": ["connectAndGetCallback", "onConnectionStateChange", "createBond", "createBond", "verify"]}, "focal_class": {"identifier": "BluetoothPeripheral", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CCC_DESCRIPTOR_UUID = \"00002902-0000-1000-8000-00805f9b34fb\";", "modifier": "private static final", "type": "String", "declarator": "CCC_DESCRIPTOR_UUID = \"00002902-0000-1000-8000-00805f9b34fb\"", "var_name": "CCC_DESCRIPTOR_UUID"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_SUCCESS = 0;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_SUCCESS = 0", "var_name": "GATT_SUCCESS"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_L2C_FAILURE = 1;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_L2C_FAILURE = 1", "var_name": "GATT_CONN_L2C_FAILURE"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_TIMEOUT = 8;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_TIMEOUT = 8", "var_name": "GATT_CONN_TIMEOUT"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_READ_NOT_PERMITTED = 2;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_READ_NOT_PERMITTED = 2", "var_name": "GATT_READ_NOT_PERMITTED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_WRITE_NOT_PERMITTED = 3;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_WRITE_NOT_PERMITTED = 3", "var_name": "GATT_WRITE_NOT_PERMITTED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_INSUFFICIENT_AUTHENTICATION = 5;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_INSUFFICIENT_AUTHENTICATION = 5", "var_name": "GATT_INSUFFICIENT_AUTHENTICATION"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_REQUEST_NOT_SUPPORTED = 6;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_REQUEST_NOT_SUPPORTED = 6", "var_name": "GATT_REQUEST_NOT_SUPPORTED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_INSUFFICIENT_ENCRYPTION = 15;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_INSUFFICIENT_ENCRYPTION = 15", "var_name": "GATT_INSUFFICIENT_ENCRYPTION"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_TERMINATE_PEER_USER = 19;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_TERMINATE_PEER_USER = 19", "var_name": "GATT_CONN_TERMINATE_PEER_USER"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_TERMINATE_LOCAL_HOST = 22;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_TERMINATE_LOCAL_HOST = 22", "var_name": "GATT_CONN_TERMINATE_LOCAL_HOST"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_LMP_TIMEOUT = 34;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_LMP_TIMEOUT = 34", "var_name": "GATT_CONN_LMP_TIMEOUT"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE = 61;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE = 61", "var_name": "BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_FAIL_ESTABLISH = 62;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_FAIL_ESTABLISH = 62", "var_name": "GATT_CONN_FAIL_ESTABLISH"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_NO_RESOURCES = 128;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_NO_RESOURCES = 128", "var_name": "GATT_NO_RESOURCES"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_INTERNAL_ERROR = 129;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_INTERNAL_ERROR = 129", "var_name": "GATT_INTERNAL_ERROR"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_BUSY = 132;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_BUSY = 132", "var_name": "GATT_BUSY"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_ERROR = 133;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_ERROR = 133", "var_name": "GATT_ERROR"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_AUTH_FAIL = 137;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_AUTH_FAIL = 137", "var_name": "GATT_AUTH_FAIL"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int GATT_CONN_CANCEL = 256;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "GATT_CONN_CANCEL = 256", "var_name": "GATT_CONN_CANCEL"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int DEVICE_TYPE_UNKNOWN = 0;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "DEVICE_TYPE_UNKNOWN = 0", "var_name": "DEVICE_TYPE_UNKNOWN"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int DEVICE_TYPE_CLASSIC = 1;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "DEVICE_TYPE_CLASSIC = 1", "var_name": "DEVICE_TYPE_CLASSIC"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int DEVICE_TYPE_LE = 2;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "DEVICE_TYPE_LE = 2", "var_name": "DEVICE_TYPE_LE"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int DEVICE_TYPE_DUAL = 3;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "DEVICE_TYPE_DUAL = 3", "var_name": "DEVICE_TYPE_DUAL"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int BOND_NONE = 10;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "BOND_NONE = 10", "var_name": "BOND_NONE"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int BOND_BONDING = 11;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "BOND_BONDING = 11", "var_name": "BOND_BONDING"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int BOND_BONDED = 12;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "BOND_BONDED = 12", "var_name": "BOND_BONDED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int STATE_DISCONNECTED = 0;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "STATE_DISCONNECTED = 0", "var_name": "STATE_DISCONNECTED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int STATE_CONNECTING = 1;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "STATE_CONNECTING = 1", "var_name": "STATE_CONNECTING"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int STATE_CONNECTED = 2;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "STATE_CONNECTED = 2", "var_name": "STATE_CONNECTED"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final int STATE_DISCONNECTING = 3;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "int", "declarator": "STATE_DISCONNECTING = 3", "var_name": "STATE_DISCONNECTING"}, {"original_string": "private static final int MAX_TRIES = 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_TRIES = 2", "var_name": "MAX_TRIES"}, {"original_string": "private static final int DIRECT_CONNECTION_DELAY_IN_MS = 100;", "modifier": "private static final", "type": "int", "declarator": "DIRECT_CONNECTION_DELAY_IN_MS = 100", "var_name": "DIRECT_CONNECTION_DELAY_IN_MS"}, {"original_string": "private static final int CONNECTION_TIMEOUT_IN_MS = 35000;", "modifier": "private static final", "type": "int", "declarator": "CONNECTION_TIMEOUT_IN_MS = 35000", "var_name": "CONNECTION_TIMEOUT_IN_MS"}, {"original_string": "private static final int TIMEOUT_THRESHOLD_SAMSUNG = 4500;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_THRESHOLD_SAMSUNG = 4500", "var_name": "TIMEOUT_THRESHOLD_SAMSUNG"}, {"original_string": "private static final int TIMEOUT_THRESHOLD_DEFAULT = 25000;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_THRESHOLD_DEFAULT = 25000", "var_name": "TIMEOUT_THRESHOLD_DEFAULT"}, {"original_string": "private static final long DELAY_AFTER_BOND_LOST = 1000L;", "modifier": "private static final", "type": "long", "declarator": "DELAY_AFTER_BOND_LOST = 1000L", "var_name": "DELAY_AFTER_BOND_LOST"}, {"original_string": "private static final int MAX_NOTIFYING_CHARACTERISTICS = 15;", "modifier": "private static final", "type": "int", "declarator": "MAX_NOTIFYING_CHARACTERISTICS = 15", "var_name": "MAX_NOTIFYING_CHARACTERISTICS"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final Handler callbackHandler;", "modifier": "private final", "type": "Handler", "declarator": "callbackHandler", "var_name": "callbackHandler"}, {"original_string": "private @NotNull BluetoothDevice device;", "modifier": "private @NotNull", "type": "BluetoothDevice", "declarator": "device", "var_name": "device"}, {"original_string": "private final InternalCallback listener;", "modifier": "private final", "type": "InternalCallback", "declarator": "listener", "var_name": "listener"}, {"original_string": "private BluetoothPeripheralCallback peripheralCallback;", "modifier": "private", "type": "BluetoothPeripheralCallback", "declarator": "peripheralCallback", "var_name": "peripheralCallback"}, {"original_string": "private final Queue<Runnable> commandQueue = new ConcurrentLinkedQueue<>();", "modifier": "private final", "type": "Queue<Runnable>", "declarator": "commandQueue = new ConcurrentLinkedQueue<>()", "var_name": "commandQueue"}, {"original_string": "private boolean commandQueueBusy;", "modifier": "private", "type": "boolean", "declarator": "commandQueueBusy", "var_name": "commandQueueBusy"}, {"original_string": "private boolean isRetrying;", "modifier": "private", "type": "boolean", "declarator": "isRetrying", "var_name": "isRetrying"}, {"original_string": "private boolean bondLost = false;", "modifier": "private", "type": "boolean", "declarator": "bondLost = false", "var_name": "bondLost"}, {"original_string": "private boolean manuallyBonding = false;", "modifier": "private", "type": "boolean", "declarator": "manuallyBonding = false", "var_name": "manuallyBonding"}, {"original_string": "private boolean discoveryStarted = false;", "modifier": "private", "type": "boolean", "declarator": "discoveryStarted = false", "var_name": "discoveryStarted"}, {"original_string": "private volatile BluetoothGatt bluetoothGatt;", "modifier": "private volatile", "type": "BluetoothGatt", "declarator": "bluetoothGatt", "var_name": "bluetoothGatt"}, {"original_string": "private int state;", "modifier": "private", "type": "int", "declarator": "state", "var_name": "state"}, {"original_string": "private int nrTries;", "modifier": "private", "type": "int", "declarator": "nrTries", "var_name": "nrTries"}, {"original_string": "private byte[] currentWriteBytes;", "modifier": "private", "type": "byte[]", "declarator": "currentWriteBytes", "var_name": "currentWriteBytes"}, {"original_string": "private final Set<UUID> notifyingCharacteristics = new HashSet<>();", "modifier": "private final", "type": "Set<UUID>", "declarator": "notifyingCharacteristics = new HashSet<>()", "var_name": "notifyingCharacteristics"}, {"original_string": "private final Handler mainHandler = new Handler(Looper.getMainLooper());", "modifier": "private final", "type": "Handler", "declarator": "mainHandler = new Handler(Looper.getMainLooper())", "var_name": "mainHandler"}, {"original_string": "private Runnable timeoutRunnable;", "modifier": "private", "type": "Runnable", "declarator": "timeoutRunnable", "var_name": "timeoutRunnable"}, {"original_string": "private Runnable discoverServicesRunnable;", "modifier": "private", "type": "Runnable", "declarator": "discoverServicesRunnable", "var_name": "discoverServicesRunnable"}, {"original_string": "private long connectTimestamp;", "modifier": "private", "type": "long", "declarator": "connectTimestamp", "var_name": "connectTimestamp"}, {"original_string": "private String cachedName;", "modifier": "private", "type": "String", "declarator": "cachedName", "var_name": "cachedName"}, {"original_string": "private int currentMtu = 23;", "modifier": "private", "type": "int", "declarator": "currentMtu = 23", "var_name": "currentMtu"}, {"original_string": "private final BluetoothGattCallback bluetoothGattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(final BluetoothGatt gatt, final int status, final int newState) {\n            long timePassed = SystemClock.elapsedRealtime() - connectTimestamp;\n            cancelConnectionTimer();\n            final int previousState = state;\n            state = newState;\n\n            if (status == GATT_SUCCESS) {\n                switch (newState) {\n                    case BluetoothProfile.STATE_CONNECTED:\n                        successfullyConnected(device.getBondState(), timePassed);\n                        break;\n                    case BluetoothProfile.STATE_DISCONNECTED:\n                        successfullyDisconnected(previousState);\n                        break;\n                    case BluetoothProfile.STATE_DISCONNECTING:\n                        Timber.i(\"peripheral is disconnecting\");\n                        break;\n                    case BluetoothProfile.STATE_CONNECTING:\n                        Timber.i(\"peripheral is connecting\");\n                    default:\n                        Timber.e(\"unknown state received\");\n                        break;\n                }\n            } else {\n                connectionStateChangeUnsuccessful(status, previousState, newState, timePassed);\n            }\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"service discovery failed due to internal error '%s', disconnecting\", statusToString(status));\n                disconnect();\n                return;\n            }\n\n            final List<BluetoothGattService> services = gatt.getServices();\n            Timber.i(\"discovered %d services for '%s'\", services.size(), getName());\n\n            if (listener != null) {\n                listener.connected(BluetoothPeripheral.this);\n            }\n\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onServicesDiscovered(BluetoothPeripheral.this);\n                }\n            });\n        }\n\n        @Override\n        public void onDescriptorWrite(BluetoothGatt gatt, final BluetoothGattDescriptor descriptor, final int status) {\n            final BluetoothGattCharacteristic parentCharacteristic = descriptor.getCharacteristic();\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"failed to write <%s> to descriptor of characteristic: <%s> for device: '%s', \", bytes2String(currentWriteBytes), parentCharacteristic.getUuid(), getAddress());\n            }\n\n            // Check if this was the Client Configuration Descriptor\n            if (descriptor.getUuid().equals(UUID.fromString(CCC_DESCRIPTOR_UUID))) {\n                if (status == GATT_SUCCESS) {\n                    byte[] value = descriptor.getValue();\n                    if (value != null) {\n                        if (Arrays.equals(value, BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE) ||\n                                Arrays.equals(value, BluetoothGattDescriptor.ENABLE_INDICATION_VALUE)) {\n                            // Notify set to on, add it to the set of notifying characteristics\n                            notifyingCharacteristics.add(parentCharacteristic.getUuid());\n                            if (notifyingCharacteristics.size() > MAX_NOTIFYING_CHARACTERISTICS) {\n                                Timber.e(\"too many (%d) notifying characteristics. The maximum Android can handle is %d\", notifyingCharacteristics.size(), MAX_NOTIFYING_CHARACTERISTICS);\n                            }\n                        } else if (Arrays.equals(value, BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE)) {\n                            // Notify was turned off, so remove it from the set of notifying characteristics\n                            notifyingCharacteristics.remove(parentCharacteristic.getUuid());\n                        } else {\n                            Timber.e(\"unexpected CCC descriptor value\");\n                        }\n                    }\n                }\n\n                callbackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        peripheralCallback.onNotificationStateUpdate(BluetoothPeripheral.this, parentCharacteristic, status);\n                    }\n                });\n            } else {\n                callbackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        peripheralCallback.onDescriptorWrite(BluetoothPeripheral.this, currentWriteBytes, descriptor, status);\n                    }\n                });\n            }\n            completedCommand();\n        }\n\n        @Override\n        public void onDescriptorRead(BluetoothGatt gatt, final BluetoothGattDescriptor descriptor, final int status) {\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"reading descriptor <%s> failed for device '%s'\", descriptor.getUuid(), getAddress());\n            }\n\n            final byte[] value = copyOf(descriptor.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onDescriptorRead(BluetoothPeripheral.this, value, descriptor, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onCharacteristicChanged(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic) {\n            final byte[] value = copyOf(characteristic.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicUpdate(BluetoothPeripheral.this, value, characteristic, GATT_SUCCESS);\n                }\n            });\n        }\n\n        @Override\n        public void onCharacteristicRead(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic, final int status) {\n            if (status != GATT_SUCCESS) {\n                if (status == GATT_AUTH_FAIL || status == GATT_INSUFFICIENT_AUTHENTICATION) {\n                    // Characteristic encrypted and needs bonding,\n                    // So retry operation after bonding completes\n                    // This only seems to happen on Android 5/6/7\n                    Timber.w(\"read needs bonding, bonding in progress\");\n                    return;\n                } else {\n                    Timber.e(\"read failed for characteristic: %s, status %d\", characteristic.getUuid(), status);\n                    completedCommand();\n                    return;\n                }\n            }\n\n            final byte[] value = copyOf(characteristic.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicUpdate(BluetoothPeripheral.this, value, characteristic, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onCharacteristicWrite(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic, final int status) {\n            if (status != GATT_SUCCESS) {\n                if (status == GATT_AUTH_FAIL || status == GATT_INSUFFICIENT_AUTHENTICATION) {\n                    // Characteristic encrypted and needs bonding,\n                    // So retry operation after bonding completes\n                    // This only seems to happen on Android 5/6/7\n                    Timber.i(\"write needs bonding, bonding in progress\");\n                    return;\n                } else {\n                    Timber.e(\"writing <%s> to characteristic <%s> failed, status %s\", bytes2String(currentWriteBytes), characteristic.getUuid(), statusToString(status));\n                }\n            }\n\n            final byte[] value = copyOf(currentWriteBytes);\n            currentWriteBytes = null;\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicWrite(BluetoothPeripheral.this, value, characteristic, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onReadRemoteRssi(BluetoothGatt gatt, final int rssi, final int status) {\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onReadRemoteRssi(BluetoothPeripheral.this, rssi, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onMtuChanged(BluetoothGatt gatt, final int mtu, final int status) {\n            currentMtu = mtu;\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onMtuChanged(BluetoothPeripheral.this, mtu, status);\n                }\n            });\n            completedCommand();\n        }\n    };", "modifier": "private final", "type": "BluetoothGattCallback", "declarator": "bluetoothGattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(final BluetoothGatt gatt, final int status, final int newState) {\n            long timePassed = SystemClock.elapsedRealtime() - connectTimestamp;\n            cancelConnectionTimer();\n            final int previousState = state;\n            state = newState;\n\n            if (status == GATT_SUCCESS) {\n                switch (newState) {\n                    case BluetoothProfile.STATE_CONNECTED:\n                        successfullyConnected(device.getBondState(), timePassed);\n                        break;\n                    case BluetoothProfile.STATE_DISCONNECTED:\n                        successfullyDisconnected(previousState);\n                        break;\n                    case BluetoothProfile.STATE_DISCONNECTING:\n                        Timber.i(\"peripheral is disconnecting\");\n                        break;\n                    case BluetoothProfile.STATE_CONNECTING:\n                        Timber.i(\"peripheral is connecting\");\n                    default:\n                        Timber.e(\"unknown state received\");\n                        break;\n                }\n            } else {\n                connectionStateChangeUnsuccessful(status, previousState, newState, timePassed);\n            }\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"service discovery failed due to internal error '%s', disconnecting\", statusToString(status));\n                disconnect();\n                return;\n            }\n\n            final List<BluetoothGattService> services = gatt.getServices();\n            Timber.i(\"discovered %d services for '%s'\", services.size(), getName());\n\n            if (listener != null) {\n                listener.connected(BluetoothPeripheral.this);\n            }\n\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onServicesDiscovered(BluetoothPeripheral.this);\n                }\n            });\n        }\n\n        @Override\n        public void onDescriptorWrite(BluetoothGatt gatt, final BluetoothGattDescriptor descriptor, final int status) {\n            final BluetoothGattCharacteristic parentCharacteristic = descriptor.getCharacteristic();\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"failed to write <%s> to descriptor of characteristic: <%s> for device: '%s', \", bytes2String(currentWriteBytes), parentCharacteristic.getUuid(), getAddress());\n            }\n\n            // Check if this was the Client Configuration Descriptor\n            if (descriptor.getUuid().equals(UUID.fromString(CCC_DESCRIPTOR_UUID))) {\n                if (status == GATT_SUCCESS) {\n                    byte[] value = descriptor.getValue();\n                    if (value != null) {\n                        if (Arrays.equals(value, BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE) ||\n                                Arrays.equals(value, BluetoothGattDescriptor.ENABLE_INDICATION_VALUE)) {\n                            // Notify set to on, add it to the set of notifying characteristics\n                            notifyingCharacteristics.add(parentCharacteristic.getUuid());\n                            if (notifyingCharacteristics.size() > MAX_NOTIFYING_CHARACTERISTICS) {\n                                Timber.e(\"too many (%d) notifying characteristics. The maximum Android can handle is %d\", notifyingCharacteristics.size(), MAX_NOTIFYING_CHARACTERISTICS);\n                            }\n                        } else if (Arrays.equals(value, BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE)) {\n                            // Notify was turned off, so remove it from the set of notifying characteristics\n                            notifyingCharacteristics.remove(parentCharacteristic.getUuid());\n                        } else {\n                            Timber.e(\"unexpected CCC descriptor value\");\n                        }\n                    }\n                }\n\n                callbackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        peripheralCallback.onNotificationStateUpdate(BluetoothPeripheral.this, parentCharacteristic, status);\n                    }\n                });\n            } else {\n                callbackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        peripheralCallback.onDescriptorWrite(BluetoothPeripheral.this, currentWriteBytes, descriptor, status);\n                    }\n                });\n            }\n            completedCommand();\n        }\n\n        @Override\n        public void onDescriptorRead(BluetoothGatt gatt, final BluetoothGattDescriptor descriptor, final int status) {\n            if (status != GATT_SUCCESS) {\n                Timber.e(\"reading descriptor <%s> failed for device '%s'\", descriptor.getUuid(), getAddress());\n            }\n\n            final byte[] value = copyOf(descriptor.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onDescriptorRead(BluetoothPeripheral.this, value, descriptor, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onCharacteristicChanged(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic) {\n            final byte[] value = copyOf(characteristic.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicUpdate(BluetoothPeripheral.this, value, characteristic, GATT_SUCCESS);\n                }\n            });\n        }\n\n        @Override\n        public void onCharacteristicRead(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic, final int status) {\n            if (status != GATT_SUCCESS) {\n                if (status == GATT_AUTH_FAIL || status == GATT_INSUFFICIENT_AUTHENTICATION) {\n                    // Characteristic encrypted and needs bonding,\n                    // So retry operation after bonding completes\n                    // This only seems to happen on Android 5/6/7\n                    Timber.w(\"read needs bonding, bonding in progress\");\n                    return;\n                } else {\n                    Timber.e(\"read failed for characteristic: %s, status %d\", characteristic.getUuid(), status);\n                    completedCommand();\n                    return;\n                }\n            }\n\n            final byte[] value = copyOf(characteristic.getValue());\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicUpdate(BluetoothPeripheral.this, value, characteristic, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onCharacteristicWrite(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic, final int status) {\n            if (status != GATT_SUCCESS) {\n                if (status == GATT_AUTH_FAIL || status == GATT_INSUFFICIENT_AUTHENTICATION) {\n                    // Characteristic encrypted and needs bonding,\n                    // So retry operation after bonding completes\n                    // This only seems to happen on Android 5/6/7\n                    Timber.i(\"write needs bonding, bonding in progress\");\n                    return;\n                } else {\n                    Timber.e(\"writing <%s> to characteristic <%s> failed, status %s\", bytes2String(currentWriteBytes), characteristic.getUuid(), statusToString(status));\n                }\n            }\n\n            final byte[] value = copyOf(currentWriteBytes);\n            currentWriteBytes = null;\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onCharacteristicWrite(BluetoothPeripheral.this, value, characteristic, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onReadRemoteRssi(BluetoothGatt gatt, final int rssi, final int status) {\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onReadRemoteRssi(BluetoothPeripheral.this, rssi, status);\n                }\n            });\n            completedCommand();\n        }\n\n        @Override\n        public void onMtuChanged(BluetoothGatt gatt, final int mtu, final int status) {\n            currentMtu = mtu;\n            callbackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    peripheralCallback.onMtuChanged(BluetoothPeripheral.this, mtu, status);\n                }\n            });\n            completedCommand();\n        }\n    }", "var_name": "bluetoothGattCallback"}, {"original_string": "private final BroadcastReceiver bondStateReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (action == null) return;\n            final BluetoothDevice receivedDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\n            if (receivedDevice == null) return;\n\n            // Ignore updates for other devices\n            if (!receivedDevice.getAddress().equalsIgnoreCase(getAddress())) return;\n\n            if (action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) {\n                final int bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR);\n                final int previousBondState = intent.getIntExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, BluetoothDevice.ERROR);\n                handleBondStateChange(bondState, previousBondState);\n            }\n        }\n    };", "modifier": "private final", "type": "BroadcastReceiver", "declarator": "bondStateReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (action == null) return;\n            final BluetoothDevice receivedDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\n            if (receivedDevice == null) return;\n\n            // Ignore updates for other devices\n            if (!receivedDevice.getAddress().equalsIgnoreCase(getAddress())) return;\n\n            if (action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) {\n                final int bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR);\n                final int previousBondState = intent.getIntExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, BluetoothDevice.ERROR);\n                handleBondStateChange(bondState, previousBondState);\n            }\n        }\n    }", "var_name": "bondStateReceiver"}, {"original_string": "private final BroadcastReceiver pairingRequestBroadcastReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(final Context context, final Intent intent) {\n            final BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\n            if (device == null) return;\n\n            // Skip other devices\n            if (!device.getAddress().equalsIgnoreCase(getAddress())) return;\n\n            final int variant = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);\n            Timber.d(\"pairing request received \" + \", pairing variant: \" + pairingVariantToString(variant) + \" (\" + variant + \")\");\n\n            if (variant == PAIRING_VARIANT_PIN) {\n                String pin = listener.getPincode(BluetoothPeripheral.this);\n                if (pin != null) {\n                    Timber.d(\"Setting PIN code for this peripheral using '%s'\", pin);\n                    device.setPin(pin.getBytes());\n                    abortBroadcast();\n                }\n            }\n        }\n    };", "modifier": "private final", "type": "BroadcastReceiver", "declarator": "pairingRequestBroadcastReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(final Context context, final Intent intent) {\n            final BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\n            if (device == null) return;\n\n            // Skip other devices\n            if (!device.getAddress().equalsIgnoreCase(getAddress())) return;\n\n            final int variant = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);\n            Timber.d(\"pairing request received \" + \", pairing variant: \" + pairingVariantToString(variant) + \" (\" + variant + \")\");\n\n            if (variant == PAIRING_VARIANT_PIN) {\n                String pin = listener.getPincode(BluetoothPeripheral.this);\n                if (pin != null) {\n                    Timber.d(\"Setting PIN code for this peripheral using '%s'\", pin);\n                    device.setPin(pin.getBytes());\n                    abortBroadcast();\n                }\n            }\n        }\n    }", "var_name": "pairingRequestBroadcastReceiver"}, {"original_string": "private static final int PAIRING_VARIANT_PIN = 0;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_PIN = 0", "var_name": "PAIRING_VARIANT_PIN"}, {"original_string": "private static final int PAIRING_VARIANT_PASSKEY = 1;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_PASSKEY = 1", "var_name": "PAIRING_VARIANT_PASSKEY"}, {"original_string": "private static final int PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2", "var_name": "PAIRING_VARIANT_PASSKEY_CONFIRMATION"}, {"original_string": "private static final int PAIRING_VARIANT_CONSENT = 3;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_CONSENT = 3", "var_name": "PAIRING_VARIANT_CONSENT"}, {"original_string": "private static final int PAIRING_VARIANT_DISPLAY_PASSKEY = 4;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_DISPLAY_PASSKEY = 4", "var_name": "PAIRING_VARIANT_DISPLAY_PASSKEY"}, {"original_string": "private static final int PAIRING_VARIANT_DISPLAY_PIN = 5;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_DISPLAY_PIN = 5", "var_name": "PAIRING_VARIANT_DISPLAY_PIN"}, {"original_string": "private static final int PAIRING_VARIANT_OOB_CONSENT = 6;", "modifier": "private static final", "type": "int", "declarator": "PAIRING_VARIANT_OOB_CONSENT = 6", "var_name": "PAIRING_VARIANT_OOB_CONSENT"}], "methods": [{"identifier": "successfullyConnected", "parameters": "(int bondstate, long timePassed)", "modifiers": "private", "return": "void", "signature": "void successfullyConnected(int bondstate, long timePassed)", "full_signature": "private void successfullyConnected(int bondstate, long timePassed)", "class_method_signature": "BluetoothPeripheral.successfullyConnected(int bondstate, long timePassed)", "testcase": false, "constructor": false}, {"identifier": "delayedDiscoverServices", "parameters": "(final long delay)", "modifiers": "private", "return": "void", "signature": "void delayedDiscoverServices(final long delay)", "full_signature": "private void delayedDiscoverServices(final long delay)", "class_method_signature": "BluetoothPeripheral.delayedDiscoverServices(final long delay)", "testcase": false, "constructor": false}, {"identifier": "getServiceDiscoveryDelay", "parameters": "(int bondstate)", "modifiers": "private", "return": "long", "signature": "long getServiceDiscoveryDelay(int bondstate)", "full_signature": "private long getServiceDiscoveryDelay(int bondstate)", "class_method_signature": "BluetoothPeripheral.getServiceDiscoveryDelay(int bondstate)", "testcase": false, "constructor": false}, {"identifier": "successfullyDisconnected", "parameters": "(int previousState)", "modifiers": "private", "return": "void", "signature": "void successfullyDisconnected(int previousState)", "full_signature": "private void successfullyDisconnected(int previousState)", "class_method_signature": "BluetoothPeripheral.successfullyDisconnected(int previousState)", "testcase": false, "constructor": false}, {"identifier": "connectionStateChangeUnsuccessful", "parameters": "(int status, int previousState, int newState, long timePassed)", "modifiers": "private", "return": "void", "signature": "void connectionStateChangeUnsuccessful(int status, int previousState, int newState, long timePassed)", "full_signature": "private void connectionStateChangeUnsuccessful(int status, int previousState, int newState, long timePassed)", "class_method_signature": "BluetoothPeripheral.connectionStateChangeUnsuccessful(int status, int previousState, int newState, long timePassed)", "testcase": false, "constructor": false}, {"identifier": "handleBondStateChange", "parameters": "(int bondState, int previousBondState)", "modifiers": "private", "return": "void", "signature": "void handleBondStateChange(int bondState, int previousBondState)", "full_signature": "private void handleBondStateChange(int bondState, int previousBondState)", "class_method_signature": "BluetoothPeripheral.handleBondStateChange(int bondState, int previousBondState)", "testcase": false, "constructor": false}, {"identifier": "BluetoothPeripheral", "parameters": "(@NotNull Context context, @NotNull BluetoothDevice device, @NotNull InternalCallback listener, BluetoothPeripheralCallback peripheralCallback, Handler callbackHandler)", "modifiers": "", "return": "", "signature": " BluetoothPeripheral(@NotNull Context context, @NotNull BluetoothDevice device, @NotNull InternalCallback listener, BluetoothPeripheralCallback peripheralCallback, Handler callbackHandler)", "full_signature": "  BluetoothPeripheral(@NotNull Context context, @NotNull BluetoothDevice device, @NotNull InternalCallback listener, BluetoothPeripheralCallback peripheralCallback, Handler callbackHandler)", "class_method_signature": "BluetoothPeripheral.BluetoothPeripheral(@NotNull Context context, @NotNull BluetoothDevice device, @NotNull InternalCallback listener, BluetoothPeripheralCallback peripheralCallback, Handler callbackHandler)", "testcase": false, "constructor": true}, {"identifier": "setPeripheralCallback", "parameters": "(@NotNull BluetoothPeripheralCallback peripheralCallback)", "modifiers": "", "return": "void", "signature": "void setPeripheralCallback(@NotNull BluetoothPeripheralCallback peripheralCallback)", "full_signature": " void setPeripheralCallback(@NotNull BluetoothPeripheralCallback peripheralCallback)", "class_method_signature": "BluetoothPeripheral.setPeripheralCallback(@NotNull BluetoothPeripheralCallback peripheralCallback)", "testcase": false, "constructor": false}, {"identifier": "setDevice", "parameters": "(@NotNull BluetoothDevice bluetoothDevice)", "modifiers": "", "return": "void", "signature": "void setDevice(@NotNull BluetoothDevice bluetoothDevice)", "full_signature": " void setDevice(@NotNull BluetoothDevice bluetoothDevice)", "class_method_signature": "BluetoothPeripheral.setDevice(@NotNull BluetoothDevice bluetoothDevice)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "", "return": "void", "signature": "void connect()", "full_signature": " void connect()", "class_method_signature": "BluetoothPeripheral.connect()", "testcase": false, "constructor": false}, {"identifier": "autoConnect", "parameters": "()", "modifiers": "", "return": "void", "signature": "void autoConnect()", "full_signature": " void autoConnect()", "class_method_signature": "BluetoothPeripheral.autoConnect()", "testcase": false, "constructor": false}, {"identifier": "registerBondingBroadcastReceivers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerBondingBroadcastReceivers()", "full_signature": "private void registerBondingBroadcastReceivers()", "class_method_signature": "BluetoothPeripheral.registerBondingBroadcastReceivers()", "testcase": false, "constructor": false}, {"identifier": "createBond", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean createBond()", "full_signature": "public boolean createBond()", "class_method_signature": "BluetoothPeripheral.createBond()", "testcase": false, "constructor": false}, {"identifier": "requestConnectionPriority", "parameters": "(final int priority)", "modifiers": "public", "return": "boolean", "signature": "boolean requestConnectionPriority(final int priority)", "full_signature": "public boolean requestConnectionPriority(final int priority)", "class_method_signature": "BluetoothPeripheral.requestConnectionPriority(final int priority)", "testcase": false, "constructor": false}, {"identifier": "createBond", "parameters": "(int transport)", "modifiers": "private", "return": "boolean", "signature": "boolean createBond(int transport)", "full_signature": "private boolean createBond(int transport)", "class_method_signature": "BluetoothPeripheral.createBond(int transport)", "testcase": false, "constructor": false}, {"identifier": "cancelConnection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelConnection()", "full_signature": "public void cancelConnection()", "class_method_signature": "BluetoothPeripheral.cancelConnection()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disconnect()", "full_signature": "private void disconnect()", "class_method_signature": "BluetoothPeripheral.disconnect()", "testcase": false, "constructor": false}, {"identifier": "disconnectWhenBluetoothOff", "parameters": "()", "modifiers": "", "return": "void", "signature": "void disconnectWhenBluetoothOff()", "full_signature": " void disconnectWhenBluetoothOff()", "class_method_signature": "BluetoothPeripheral.disconnectWhenBluetoothOff()", "testcase": false, "constructor": false}, {"identifier": "completeDisconnect", "parameters": "(boolean notify, final int status)", "modifiers": "private", "return": "void", "signature": "void completeDisconnect(boolean notify, final int status)", "full_signature": "private void completeDisconnect(boolean notify, final int status)", "class_method_signature": "BluetoothPeripheral.completeDisconnect(boolean notify, final int status)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public @NotNull", "return": "String", "signature": "String getAddress()", "full_signature": "public @NotNull String getAddress()", "class_method_signature": "BluetoothPeripheral.getAddress()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getType()", "full_signature": "public int getType()", "class_method_signature": "BluetoothPeripheral.getType()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "BluetoothPeripheral.getName()", "testcase": false, "constructor": false}, {"identifier": "getBondState", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBondState()", "full_signature": "public int getBondState()", "class_method_signature": "BluetoothPeripheral.getBondState()", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public @NotNull", "return": "List<BluetoothGattService>", "signature": "List<BluetoothGattService> getServices()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public @NotNull List<BluetoothGattService> getServices()", "class_method_signature": "BluetoothPeripheral.getServices()", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "(@NotNull UUID serviceUUID)", "modifiers": "public @Nullable", "return": "BluetoothGattService", "signature": "BluetoothGattService getService(@NotNull UUID serviceUUID)", "full_signature": "public @Nullable BluetoothGattService getService(@NotNull UUID serviceUUID)", "class_method_signature": "BluetoothPeripheral.getService(@NotNull UUID serviceUUID)", "testcase": false, "constructor": false}, {"identifier": "getCharacteristic", "parameters": "(@NotNull UUID serviceUUID, @NotNull UUID characteristicUUID)", "modifiers": "public @Nullable", "return": "BluetoothGattCharacteristic", "signature": "BluetoothGattCharacteristic getCharacteristic(@NotNull UUID serviceUUID, @NotNull UUID characteristicUUID)", "full_signature": "public @Nullable BluetoothGattCharacteristic getCharacteristic(@NotNull UUID serviceUUID, @NotNull UUID characteristicUUID)", "class_method_signature": "BluetoothPeripheral.getCharacteristic(@NotNull UUID serviceUUID, @NotNull UUID characteristicUUID)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getState()", "full_signature": "public int getState()", "class_method_signature": "BluetoothPeripheral.getState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentMtu", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentMtu()", "full_signature": "public int getCurrentMtu()", "class_method_signature": "BluetoothPeripheral.getCurrentMtu()", "testcase": false, "constructor": false}, {"identifier": "isNotifying", "parameters": "(@NotNull BluetoothGattCharacteristic characteristic)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotifying(@NotNull BluetoothGattCharacteristic characteristic)", "full_signature": "public boolean isNotifying(@NotNull BluetoothGattCharacteristic characteristic)", "class_method_signature": "BluetoothPeripheral.isNotifying(@NotNull BluetoothGattCharacteristic characteristic)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "private boolean isConnected()", "class_method_signature": "BluetoothPeripheral.isConnected()", "testcase": false, "constructor": false}, {"identifier": "readCharacteristic", "parameters": "(@NotNull final BluetoothGattCharacteristic characteristic)", "modifiers": "public", "return": "boolean", "signature": "boolean readCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic)", "full_signature": "public boolean readCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic)", "class_method_signature": "BluetoothPeripheral.readCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic)", "testcase": false, "constructor": false}, {"identifier": "writeCharacteristic", "parameters": "(@NotNull final BluetoothGattCharacteristic characteristic, @NotNull final byte[] value, final int writeType)", "modifiers": "public", "return": "boolean", "signature": "boolean writeCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic, @NotNull final byte[] value, final int writeType)", "full_signature": "public boolean writeCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic, @NotNull final byte[] value, final int writeType)", "class_method_signature": "BluetoothPeripheral.writeCharacteristic(@NotNull final BluetoothGattCharacteristic characteristic, @NotNull final byte[] value, final int writeType)", "testcase": false, "constructor": false}, {"identifier": "readDescriptor", "parameters": "(@NotNull final BluetoothGattDescriptor descriptor)", "modifiers": "public", "return": "boolean", "signature": "boolean readDescriptor(@NotNull final BluetoothGattDescriptor descriptor)", "full_signature": "public boolean readDescriptor(@NotNull final BluetoothGattDescriptor descriptor)", "class_method_signature": "BluetoothPeripheral.readDescriptor(@NotNull final BluetoothGattDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "writeDescriptor", "parameters": "(@NotNull final BluetoothGattDescriptor descriptor, @NotNull final byte[] value)", "modifiers": "public", "return": "boolean", "signature": "boolean writeDescriptor(@NotNull final BluetoothGattDescriptor descriptor, @NotNull final byte[] value)", "full_signature": "public boolean writeDescriptor(@NotNull final BluetoothGattDescriptor descriptor, @NotNull final byte[] value)", "class_method_signature": "BluetoothPeripheral.writeDescriptor(@NotNull final BluetoothGattDescriptor descriptor, @NotNull final byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setNotify", "parameters": "(@NotNull final BluetoothGattCharacteristic characteristic, final boolean enable)", "modifiers": "public", "return": "boolean", "signature": "boolean setNotify(@NotNull final BluetoothGattCharacteristic characteristic, final boolean enable)", "full_signature": "public boolean setNotify(@NotNull final BluetoothGattCharacteristic characteristic, final boolean enable)", "class_method_signature": "BluetoothPeripheral.setNotify(@NotNull final BluetoothGattCharacteristic characteristic, final boolean enable)", "testcase": false, "constructor": false}, {"identifier": "clearServicesCache", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean clearServicesCache()", "full_signature": "public boolean clearServicesCache()", "class_method_signature": "BluetoothPeripheral.clearServicesCache()", "testcase": false, "constructor": false}, {"identifier": "readRemoteRssi", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean readRemoteRssi()", "full_signature": "public boolean readRemoteRssi()", "class_method_signature": "BluetoothPeripheral.readRemoteRssi()", "testcase": false, "constructor": false}, {"identifier": "requestMtu", "parameters": "(final int mtu)", "modifiers": "public", "return": "boolean", "signature": "boolean requestMtu(final int mtu)", "full_signature": "public boolean requestMtu(final int mtu)", "class_method_signature": "BluetoothPeripheral.requestMtu(final int mtu)", "testcase": false, "constructor": false}, {"identifier": "completedCommand", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void completedCommand()", "full_signature": "private void completedCommand()", "class_method_signature": "BluetoothPeripheral.completedCommand()", "testcase": false, "constructor": false}, {"identifier": "retryCommand", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void retryCommand()", "full_signature": "private void retryCommand()", "class_method_signature": "BluetoothPeripheral.retryCommand()", "testcase": false, "constructor": false}, {"identifier": "nextCommand", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void nextCommand()", "full_signature": "private void nextCommand()", "class_method_signature": "BluetoothPeripheral.nextCommand()", "testcase": false, "constructor": false}, {"identifier": "bondStateToString", "parameters": "(final int state)", "modifiers": "private", "return": "String", "signature": "String bondStateToString(final int state)", "full_signature": "private String bondStateToString(final int state)", "class_method_signature": "BluetoothPeripheral.bondStateToString(final int state)", "testcase": false, "constructor": false}, {"identifier": "stateToString", "parameters": "(final int state)", "modifiers": "private", "return": "String", "signature": "String stateToString(final int state)", "full_signature": "private String stateToString(final int state)", "class_method_signature": "BluetoothPeripheral.stateToString(final int state)", "testcase": false, "constructor": false}, {"identifier": "writeTypeToString", "parameters": "(final int writeType)", "modifiers": "private", "return": "String", "signature": "String writeTypeToString(final int writeType)", "full_signature": "private String writeTypeToString(final int writeType)", "class_method_signature": "BluetoothPeripheral.writeTypeToString(final int writeType)", "testcase": false, "constructor": false}, {"identifier": "statusToString", "parameters": "(final int error)", "modifiers": "private static", "return": "String", "signature": "String statusToString(final int error)", "full_signature": "private static String statusToString(final int error)", "class_method_signature": "BluetoothPeripheral.statusToString(final int error)", "testcase": false, "constructor": false}, {"identifier": "pairingVariantToString", "parameters": "(final int variant)", "modifiers": "private", "return": "String", "signature": "String pairingVariantToString(final int variant)", "full_signature": "private String pairingVariantToString(final int variant)", "class_method_signature": "BluetoothPeripheral.pairingVariantToString(final int variant)", "testcase": false, "constructor": false}, {"identifier": "bytes2String", "parameters": "(final byte[] bytes)", "modifiers": "private static", "return": "String", "signature": "String bytes2String(final byte[] bytes)", "full_signature": "private static String bytes2String(final byte[] bytes)", "class_method_signature": "BluetoothPeripheral.bytes2String(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "connectGattHelper", "parameters": "(BluetoothDevice remoteDevice, boolean autoConnect, BluetoothGattCallback bluetoothGattCallback)", "modifiers": "private", "return": "BluetoothGatt", "signature": "BluetoothGatt connectGattHelper(BluetoothDevice remoteDevice, boolean autoConnect, BluetoothGattCallback bluetoothGattCallback)", "full_signature": "private BluetoothGatt connectGattHelper(BluetoothDevice remoteDevice, boolean autoConnect, BluetoothGattCallback bluetoothGattCallback)", "class_method_signature": "BluetoothPeripheral.connectGattHelper(BluetoothDevice remoteDevice, boolean autoConnect, BluetoothGattCallback bluetoothGattCallback)", "testcase": false, "constructor": false}, {"identifier": "connectGattCompat", "parameters": "(BluetoothGattCallback bluetoothGattCallback, BluetoothDevice device, boolean autoConnect)", "modifiers": "private", "return": "BluetoothGatt", "signature": "BluetoothGatt connectGattCompat(BluetoothGattCallback bluetoothGattCallback, BluetoothDevice device, boolean autoConnect)", "full_signature": "private BluetoothGatt connectGattCompat(BluetoothGattCallback bluetoothGattCallback, BluetoothDevice device, boolean autoConnect)", "class_method_signature": "BluetoothPeripheral.connectGattCompat(BluetoothGattCallback bluetoothGattCallback, BluetoothDevice device, boolean autoConnect)", "testcase": false, "constructor": false}, {"identifier": "connectUsingReflection", "parameters": "(BluetoothDevice device, BluetoothGatt bluetoothGatt, BluetoothGattCallback bluetoothGattCallback, boolean autoConnect)", "modifiers": "@SuppressWarnings(\"SameParameterValue\") private", "return": "boolean", "signature": "boolean connectUsingReflection(BluetoothDevice device, BluetoothGatt bluetoothGatt, BluetoothGattCallback bluetoothGattCallback, boolean autoConnect)", "full_signature": "@SuppressWarnings(\"SameParameterValue\") private boolean connectUsingReflection(BluetoothDevice device, BluetoothGatt bluetoothGatt, BluetoothGattCallback bluetoothGattCallback, boolean autoConnect)", "class_method_signature": "BluetoothPeripheral.connectUsingReflection(BluetoothDevice device, BluetoothGatt bluetoothGatt, BluetoothGattCallback bluetoothGattCallback, boolean autoConnect)", "testcase": false, "constructor": false}, {"identifier": "createBluetoothGatt", "parameters": "(Object iBluetoothGatt, BluetoothDevice remoteDevice)", "modifiers": "private", "return": "BluetoothGatt", "signature": "BluetoothGatt createBluetoothGatt(Object iBluetoothGatt, BluetoothDevice remoteDevice)", "full_signature": "private BluetoothGatt createBluetoothGatt(Object iBluetoothGatt, BluetoothDevice remoteDevice)", "class_method_signature": "BluetoothPeripheral.createBluetoothGatt(Object iBluetoothGatt, BluetoothDevice remoteDevice)", "testcase": false, "constructor": false}, {"identifier": "getIBluetoothGatt", "parameters": "(Object iBluetoothManager)", "modifiers": "private", "return": "Object", "signature": "Object getIBluetoothGatt(Object iBluetoothManager)", "full_signature": "private Object getIBluetoothGatt(Object iBluetoothManager)", "class_method_signature": "BluetoothPeripheral.getIBluetoothGatt(Object iBluetoothManager)", "testcase": false, "constructor": false}, {"identifier": "getIBluetoothManager", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object getIBluetoothManager()", "full_signature": "private Object getIBluetoothManager()", "class_method_signature": "BluetoothPeripheral.getIBluetoothManager()", "testcase": false, "constructor": false}, {"identifier": "getMethodFromClass", "parameters": "(Class<?> cls, String methodName)", "modifiers": "private", "return": "Method", "signature": "Method getMethodFromClass(Class<?> cls, String methodName)", "full_signature": "private Method getMethodFromClass(Class<?> cls, String methodName)", "class_method_signature": "BluetoothPeripheral.getMethodFromClass(Class<?> cls, String methodName)", "testcase": false, "constructor": false}, {"identifier": "setAutoConnectValue", "parameters": "(BluetoothGatt bluetoothGatt, boolean autoConnect)", "modifiers": "private", "return": "void", "signature": "void setAutoConnectValue(BluetoothGatt bluetoothGatt, boolean autoConnect)", "full_signature": "private void setAutoConnectValue(BluetoothGatt bluetoothGatt, boolean autoConnect)", "class_method_signature": "BluetoothPeripheral.setAutoConnectValue(BluetoothGatt bluetoothGatt, boolean autoConnect)", "testcase": false, "constructor": false}, {"identifier": "startConnectionTimer", "parameters": "(final BluetoothPeripheral peripheral)", "modifiers": "private", "return": "void", "signature": "void startConnectionTimer(final BluetoothPeripheral peripheral)", "full_signature": "private void startConnectionTimer(final BluetoothPeripheral peripheral)", "class_method_signature": "BluetoothPeripheral.startConnectionTimer(final BluetoothPeripheral peripheral)", "testcase": false, "constructor": false}, {"identifier": "cancelConnectionTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelConnectionTimer()", "full_signature": "private void cancelConnectionTimer()", "class_method_signature": "BluetoothPeripheral.cancelConnectionTimer()", "testcase": false, "constructor": false}, {"identifier": "getTimoutThreshold", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getTimoutThreshold()", "full_signature": "private int getTimoutThreshold()", "class_method_signature": "BluetoothPeripheral.getTimoutThreshold()", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(byte[] source)", "modifiers": "private", "return": "byte[]", "signature": "byte[] copyOf(byte[] source)", "full_signature": "private byte[] copyOf(byte[] source)", "class_method_signature": "BluetoothPeripheral.copyOf(byte[] source)", "testcase": false, "constructor": false}], "file": "blessed/src/main/java/com/welie/blessed/BluetoothPeripheral.java"}, "focal_method": {"identifier": "createBond", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean createBond() {\n        // Check if we have a Gatt object\n        if (bluetoothGatt == null) {\n            // No gatt object so no connection issued, do create bond immediately\n            return device.createBond();\n        }\n\n        // Enqueue the bond command because a connection has been issued or we are already connected\n        boolean result = commandQueue.add(new Runnable() {\n            @Override\n            public void run() {\n                manuallyBonding = true;\n                if (!device.createBond()) {\n                    Timber.e(\"bonding failed for %s\", getAddress());\n                    completedCommand();\n                } else {\n                    Timber.d(\"manually bonding %s\", getAddress());\n                    nrTries++;\n                }\n            }\n        });\n\n        if (result) {\n            nextCommand();\n        } else {\n            Timber.e(\"could not enqueue bonding command\");\n        }\n        return result;\n    }", "signature": "boolean createBond()", "full_signature": "public boolean createBond()", "class_method_signature": "BluetoothPeripheral.createBond()", "testcase": false, "constructor": false, "invocations": ["createBond", "add", "createBond", "e", "getAddress", "completedCommand", "d", "getAddress", "nextCommand", "e"]}, "repository": {"repo_id": 173468970, "url": "https://github.com/weliem/blessed-android", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 92, "size": 578, "license": "licensed"}}