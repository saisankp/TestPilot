{"test_class": {"identifier": "TestMirrorStreamValidator", "superclass": "extends AbstractTestStreamValidator", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestMirrorStreamValidator.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestMirrorStreamValidator.class)", "var_name": "LOG"}, {"original_string": "List<Path> holesInMerge = new ArrayList<Path>();", "modifier": "", "type": "List<Path>", "declarator": "holesInMerge = new ArrayList<Path>()", "var_name": "holesInMerge"}, {"original_string": "List<Path> holesInMirror = new ArrayList<Path>();", "modifier": "", "type": "List<Path>", "declarator": "holesInMirror = new ArrayList<Path>()", "var_name": "holesInMirror"}], "file": "conduit-worker/src/test/java/com/inmobi/conduit/validator/TestMirrorStreamValidator.java"}, "test_case": {"identifier": "testMirrorStreamValidator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMirrorStreamValidator() throws Exception {\n    Date date = new Date();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    cal.add(Calendar.MINUTE, 1);\n    Date nextDate = cal.getTime();\n    cal.add(Calendar.MINUTE, 4);\n    Date stopDate = cal.getTime();\n    ConduitConfig config = setup(\"test-mirror-validator-conduit.xml\");\n    // clean up all root dir before generating test data\n    cleanUp(config);\n    createMergeData(config, date);\n    Set<String> streamsSet = config.getSourceStreams().keySet();\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    String auditSrcJar = FileUtil.findContainingJar(\n        com.inmobi.messaging.util.AuditUtil.class);\n    for (String streamName : streamsSet) {\n      for (Cluster cluster : config.getClusters().values()) {\n        if (cluster.getMirroredStreams().contains(streamName)) {\n          jarsPath = new Path(cluster.getTmpPath(), \"jars\");\n          auditUtilJarDestPath = new Path(jarsPath, \"messaging-client-core.jar\");\n          // Copy AuditUtil src jar to FS\n          fs.copyFromLocalFile(new Path(auditSrcJar), auditUtilJarDestPath);\n          createMirrorData(config, streamName, cluster, date);\n          //check whether given start time is valid\n          testStartTimeBeyondRetention(config,streamName, cluster.getName(),date,\n              nextDate);\n          // it tests missing paths for given a specific period\n          testMirrorValidatorVerify(config,streamName, cluster.getName(),date,\n              nextDate, false, false);\n          // verify : it tests what all are the missing paths\n          testMirrorValidatorVerify(config,streamName, cluster.getName(),date,\n              stopDate, false, true);\n          // fix : throw an exception as there are holes in source\n          testMirrorValidatorFixWithHolesInSource(config,streamName,\n              cluster.getName(), date, stopDate);\n          // fix : It copies all the missing paths to mirror cluster\n          testMirrorValidatorFix(config,streamName, cluster.getName(), date,\n              stopDate);\n          // reverify : should not contain any missing paths after fixing\n          testMirrorValidatorVerify(config,streamName, cluster.getName(),date,\n              stopDate, true, true);\n        }\n      }\n    }\n    cleanUp(config);\n  }", "signature": "void testMirrorStreamValidator()", "full_signature": "@Test public void testMirrorStreamValidator()", "class_method_signature": "TestMirrorStreamValidator.testMirrorStreamValidator()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setTime", "add", "getTime", "add", "getTime", "setup", "cleanUp", "createMergeData", "keySet", "getSourceStreams", "getLocal", "findContainingJar", "values", "getClusters", "contains", "getMirroredStreams", "getTmpPath", "copyFromLocalFile", "createMirrorData", "testStartTimeBeyondRetention", "getName", "testMirrorValidatorVerify", "getName", "testMirrorValidatorVerify", "getName", "testMirrorValidatorFixWithHolesInSource", "getName", "testMirrorValidatorFix", "getName", "testMirrorValidatorVerify", "getName", "cleanUp"]}, "focal_class": {"identifier": "MirrorStreamValidator", "superclass": "extends AbstractStreamValidator", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(MirrorStreamValidator.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(MirrorStreamValidator.class)", "var_name": "LOG"}, {"original_string": "private ConduitConfig conduitConfig = null;", "modifier": "private", "type": "ConduitConfig", "declarator": "conduitConfig = null", "var_name": "conduitConfig"}, {"original_string": "private String streamName = null;", "modifier": "private", "type": "String", "declarator": "streamName = null", "var_name": "streamName"}, {"original_string": "private boolean fix = false;", "modifier": "private", "type": "boolean", "declarator": "fix = false", "var_name": "fix"}, {"original_string": "List<Path> holesInMerge = new ArrayList<Path>();", "modifier": "", "type": "List<Path>", "declarator": "holesInMerge = new ArrayList<Path>()", "var_name": "holesInMerge"}, {"original_string": "List<Path> holesInMirror = new ArrayList<Path>();", "modifier": "", "type": "List<Path>", "declarator": "holesInMirror = new ArrayList<Path>()", "var_name": "holesInMirror"}, {"original_string": "Cluster mergedCluster = null;", "modifier": "", "type": "Cluster", "declarator": "mergedCluster = null", "var_name": "mergedCluster"}, {"original_string": "Cluster mirrorCluster = null;", "modifier": "", "type": "Cluster", "declarator": "mirrorCluster = null", "var_name": "mirrorCluster"}, {"original_string": "private Date startTime = null;", "modifier": "private", "type": "Date", "declarator": "startTime = null", "var_name": "startTime"}, {"original_string": "private Date stopTime = null;", "modifier": "private", "type": "Date", "declarator": "stopTime = null", "var_name": "stopTime"}, {"original_string": "private int numThreads;", "modifier": "private", "type": "int", "declarator": "numThreads", "var_name": "numThreads"}], "methods": [{"identifier": "MirrorStreamValidator", "parameters": "(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "modifiers": "public", "return": "", "signature": " MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "full_signature": "public  MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "class_method_signature": "MirrorStreamValidator.MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "MirrorStreamValidator.execute()", "testcase": false, "constructor": false}, {"identifier": "findMissingAndExtraPaths", "parameters": "(List<FileStatus> mergedStreamFiles,\n      List<FileStatus> mirrorStreamFiles)", "modifiers": "protected", "return": "void", "signature": "void findMissingAndExtraPaths(List<FileStatus> mergedStreamFiles,\n      List<FileStatus> mirrorStreamFiles)", "full_signature": "protected void findMissingAndExtraPaths(List<FileStatus> mergedStreamFiles,\n      List<FileStatus> mirrorStreamFiles)", "class_method_signature": "MirrorStreamValidator.findMissingAndExtraPaths(List<FileStatus> mergedStreamFiles,\n      List<FileStatus> mirrorStreamFiles)", "testcase": false, "constructor": false}, {"identifier": "prepareMapFromList", "parameters": "(List<FileStatus> streamFiles,\n      Map<String, FileStatus> srcListingMap, Cluster cluster)", "modifiers": "private", "return": "void", "signature": "void prepareMapFromList(List<FileStatus> streamFiles,\n      Map<String, FileStatus> srcListingMap, Cluster cluster)", "full_signature": "private void prepareMapFromList(List<FileStatus> streamFiles,\n      Map<String, FileStatus> srcListingMap, Cluster cluster)", "class_method_signature": "MirrorStreamValidator.prepareMapFromList(List<FileStatus> streamFiles,\n      Map<String, FileStatus> srcListingMap, Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "getEndPath", "parameters": "(Path streamPath)", "modifiers": "private", "return": "Path", "signature": "Path getEndPath(Path streamPath)", "full_signature": "private Path getEndPath(Path streamPath)", "class_method_signature": "MirrorStreamValidator.getEndPath(Path streamPath)", "testcase": false, "constructor": false}, {"identifier": "getstartPath", "parameters": "(Path streamPath)", "modifiers": "private", "return": "Path", "signature": "Path getstartPath(Path streamPath)", "full_signature": "private Path getstartPath(Path streamPath)", "class_method_signature": "MirrorStreamValidator.getstartPath(Path streamPath)", "testcase": false, "constructor": false}, {"identifier": "validateStartTime", "parameters": "(Cluster cluster)", "modifiers": "private", "return": "void", "signature": "void validateStartTime(Cluster cluster)", "full_signature": "private void validateStartTime(Cluster cluster)", "class_method_signature": "MirrorStreamValidator.validateStartTime(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "copyMissingPaths", "parameters": "()", "modifiers": "", "return": "void", "signature": "void copyMissingPaths()", "full_signature": " void copyMissingPaths()", "class_method_signature": "MirrorStreamValidator.copyMissingPaths()", "testcase": false, "constructor": false}, {"identifier": "getFinalDestinationPath", "parameters": "(FileStatus srcPath)", "modifiers": "@Override protected", "return": "String", "signature": "String getFinalDestinationPath(FileStatus srcPath)", "full_signature": "@Override protected String getFinalDestinationPath(FileStatus srcPath)", "class_method_signature": "MirrorStreamValidator.getFinalDestinationPath(FileStatus srcPath)", "testcase": false, "constructor": false}, {"identifier": "getHolesInMerge", "parameters": "()", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> getHolesInMerge()", "full_signature": "public List<Path> getHolesInMerge()", "class_method_signature": "MirrorStreamValidator.getHolesInMerge()", "testcase": false, "constructor": false}, {"identifier": "getHolesInMirror", "parameters": "()", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> getHolesInMirror()", "full_signature": "public List<Path> getHolesInMirror()", "class_method_signature": "MirrorStreamValidator.getHolesInMirror()", "testcase": false, "constructor": false}], "file": "conduit-worker/src/main/java/com/inmobi/conduit/validator/MirrorStreamValidator.java"}, "focal_method": {"identifier": "MirrorStreamValidator", "parameters": "(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "modifiers": "public", "return": "", "body": "public MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads) {\n    this.conduitConfig = conduitConfig;\n    this.streamName = streamName;\n    this.fix = fix;  \n    // get the source cluster where merge stream service is running\n    mergedCluster = conduitConfig.getPrimaryClusterForDestinationStream(streamName);\n    // get the dest cluster where mirror stream service is running\n    mirrorCluster = conduitConfig.getClusters().get(clusterName);\n    this.startTime = startTime;\n    this.stopTime = stopTime;\n    this.numThreads = numThreads;\n  }", "signature": " MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "full_signature": "public  MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "class_method_signature": "MirrorStreamValidator.MirrorStreamValidator(ConduitConfig conduitConfig,\n      String streamName, String clusterName, boolean fix, Date startTime,\n      Date stopTime, int numThreads)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}