{"test_class": {"identifier": "SuperstepKickoffLatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/iterative/concurrent/SuperstepKickoffLatchTest.java"}, "test_case": {"identifier": "testWaitIncorrectAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWaitIncorrectAsync() {\n\t\ttry {\n\t\t\tSuperstepKickoffLatch latch = new SuperstepKickoffLatch();\n\t\t\tlatch.triggerNextSuperstep();\n\t\t\tlatch.triggerNextSuperstep();\n\t\t\t\n\t\t\tWaiter w = new Waiter(latch, 2);\n\t\t\tThread waiter = new Thread(w);\n\t\t\twaiter.setDaemon(true);\n\t\t\twaiter.start();\n\t\t\t\n\t\t\tWatchDog wd = new WatchDog(waiter, 2000);\n\t\t\twd.start();\n\t\t\t\n\t\t\tThread.sleep(100);\n\t\t\t\n\t\t\twd.join();\n\t\t\tif (wd.getError() != null) {\n\t\t\t\tthrow wd.getError();\n\t\t\t}\n\t\t\t\n\t\t\tif (w.getError() != null) {\n\t\t\t\tif (!(w.getError() instanceof IllegalStateException)) {\n\t\t\t\t\tthrow new Exception(\"wrong exception type \" + w.getError());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tAssert.fail(\"should cause exception\");\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t\tAssert.fail(\"Error: \" + t.getMessage());\n\t\t}\n\t}", "signature": "void testWaitIncorrectAsync()", "full_signature": "@Test public void testWaitIncorrectAsync()", "class_method_signature": "SuperstepKickoffLatchTest.testWaitIncorrectAsync()", "testcase": true, "constructor": false, "invocations": ["triggerNextSuperstep", "triggerNextSuperstep", "setDaemon", "start", "start", "sleep", "join", "getError", "getError", "getError", "getError", "getError", "fail", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "SuperstepKickoffLatch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object monitor = new Object();", "modifier": "private final", "type": "Object", "declarator": "monitor = new Object()", "var_name": "monitor"}, {"original_string": "private int superstepNumber = 1;", "modifier": "private", "type": "int", "declarator": "superstepNumber = 1", "var_name": "superstepNumber"}, {"original_string": "private boolean terminated;", "modifier": "private", "type": "boolean", "declarator": "terminated", "var_name": "terminated"}], "methods": [{"identifier": "triggerNextSuperstep", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void triggerNextSuperstep()", "full_signature": "public void triggerNextSuperstep()", "class_method_signature": "SuperstepKickoffLatch.triggerNextSuperstep()", "testcase": false, "constructor": false}, {"identifier": "signalTermination", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void signalTermination()", "full_signature": "public void signalTermination()", "class_method_signature": "SuperstepKickoffLatch.signalTermination()", "testcase": false, "constructor": false}, {"identifier": "awaitStartOfSuperstepOrTermination", "parameters": "(int superstep)", "modifiers": "public", "return": "boolean", "signature": "boolean awaitStartOfSuperstepOrTermination(int superstep)", "full_signature": "public boolean awaitStartOfSuperstepOrTermination(int superstep)", "class_method_signature": "SuperstepKickoffLatch.awaitStartOfSuperstepOrTermination(int superstep)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/iterative/concurrent/SuperstepKickoffLatch.java"}, "focal_method": {"identifier": "triggerNextSuperstep", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void triggerNextSuperstep() {\n\t\tsynchronized (monitor) {\n\t\t\tif (terminated) {\n\t\t\t\tthrow new IllegalStateException(\"Already terminated.\");\n\t\t\t}\n\t\t\tsuperstepNumber++;\n\t\t\tmonitor.notifyAll();\n\t\t}\n\t}", "signature": "void triggerNextSuperstep()", "full_signature": "public void triggerNextSuperstep()", "class_method_signature": "SuperstepKickoffLatch.triggerNextSuperstep()", "testcase": false, "constructor": false, "invocations": ["notifyAll"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}