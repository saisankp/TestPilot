{"test_class": {"identifier": "ChainCellRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Cell CELL_1 = new Cell(\"cell1\", \"cell.1\");", "modifier": "private static final", "type": "Cell", "declarator": "CELL_1 = new Cell(\"cell1\", \"cell.1\")", "var_name": "CELL_1"}, {"original_string": "private static final Cell CELL_2 = new Cell(\"cell2\", \"cell.2\");", "modifier": "private static final", "type": "Cell", "declarator": "CELL_2 = new Cell(\"cell2\", \"cell.2\")", "var_name": "CELL_2"}], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/router/ChainCellRouterTest.java"}, "test_case": {"identifier": "testChaining", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChaining() {\n        CellRouter first = Mockito.mock(CellRouter.class);\n        CellRouter second = Mockito.mock(CellRouter.class);\n        ChainCellRouter chain = new ChainCellRouter(asList(first, second));\n\n        // Nothing matches\n        when(first.routeKey(any())).thenReturn(Optional.empty());\n        when(second.routeKey(any())).thenReturn(Optional.empty());\n        assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).isEmpty();\n\n        // First cell matches\n        when(first.routeKey(any())).thenReturn(Optional.of(CELL_1));\n        when(second.routeKey(any())).thenReturn(Optional.of(CELL_2));\n        assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).contains(CELL_1);\n\n        // Second cell matches\n        when(first.routeKey(any())).thenReturn(Optional.empty());\n        when(second.routeKey(any())).thenReturn(Optional.of(CELL_2));\n        assertThat(chain.routeKey(JobDescriptor.getDefaultInstance())).contains(CELL_2);\n    }", "signature": "void testChaining()", "full_signature": "@Test public void testChaining()", "class_method_signature": "ChainCellRouterTest.testChaining()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "asList", "thenReturn", "when", "routeKey", "any", "empty", "thenReturn", "when", "routeKey", "any", "empty", "isEmpty", "assertThat", "routeKey", "getDefaultInstance", "thenReturn", "when", "routeKey", "any", "of", "thenReturn", "when", "routeKey", "any", "of", "contains", "assertThat", "routeKey", "getDefaultInstance", "thenReturn", "when", "routeKey", "any", "empty", "thenReturn", "when", "routeKey", "any", "of", "contains", "assertThat", "routeKey", "getDefaultInstance"]}, "focal_class": {"identifier": "ChainCellRouter", "superclass": "", "interfaces": "implements CellRouter", "fields": [{"original_string": "private final List<CellRouter> cellRouters;", "modifier": "private final", "type": "List<CellRouter>", "declarator": "cellRouters", "var_name": "cellRouters"}], "methods": [{"identifier": "ChainCellRouter", "parameters": "(List<CellRouter> cellRouters)", "modifiers": "public", "return": "", "signature": " ChainCellRouter(List<CellRouter> cellRouters)", "full_signature": "public  ChainCellRouter(List<CellRouter> cellRouters)", "class_method_signature": "ChainCellRouter.ChainCellRouter(List<CellRouter> cellRouters)", "testcase": false, "constructor": true}, {"identifier": "routeKey", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Optional<Cell>", "signature": "Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "full_signature": "@Override public Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "class_method_signature": "ChainCellRouter.routeKey(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/router/ChainCellRouter.java"}, "focal_method": {"identifier": "routeKey", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@Override public", "return": "Optional<Cell>", "body": "@Override\n    public Optional<Cell> routeKey(JobDescriptor jobDescriptor) {\n        for (CellRouter cellRouter : cellRouters) {\n            Optional<Cell> result = cellRouter.routeKey(jobDescriptor);\n            if (result.isPresent()) {\n                return result;\n            }\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "full_signature": "@Override public Optional<Cell> routeKey(JobDescriptor jobDescriptor)", "class_method_signature": "ChainCellRouter.routeKey(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false, "invocations": ["routeKey", "isPresent", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}