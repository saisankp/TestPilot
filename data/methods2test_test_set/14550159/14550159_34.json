{"test_class": {"identifier": "CaselessMultivaluedMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExtMultivaluedMap<String, String> map;", "modifier": "private", "type": "ExtMultivaluedMap<String, String>", "declarator": "map", "var_name": "map"}], "file": "everrest-core/src/test/java/org/everrest/core/util/CaselessMultivaluedMapTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        map.add(\"KeY1\", \"a\");\n        assertEquals(1, map.size());\n        assertEquals(\"a\", map.getFirst(\"key1\"));\n        assertEquals(1, map.get(\"KEY1\").size());\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "CaselessMultivaluedMapTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "size", "assertEquals", "getFirst", "assertEquals", "size", "get"]}, "focal_class": {"identifier": "CaselessMultivaluedMap", "superclass": "", "interfaces": "implements ExtMultivaluedMap<String, T>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -4159372000926269780L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4159372000926269780L", "var_name": "serialVersionUID"}, {"original_string": "final ExtMultivaluedMapImpl m;", "modifier": "final", "type": "ExtMultivaluedMapImpl", "declarator": "m", "var_name": "m"}, {"original_string": "Set<String>                 keys;", "modifier": "", "type": "Set<String>", "declarator": "keys", "var_name": "keys"}, {"original_string": "Set<Entry<String, List<T>>> entries;", "modifier": "", "type": "Set<Entry<String, List<T>>>", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "CaselessMultivaluedMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " CaselessMultivaluedMap()", "full_signature": "public  CaselessMultivaluedMap()", "class_method_signature": "CaselessMultivaluedMap.CaselessMultivaluedMap()", "testcase": false, "constructor": true}, {"identifier": "CaselessMultivaluedMap", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " CaselessMultivaluedMap(int capacity)", "full_signature": "public  CaselessMultivaluedMap(int capacity)", "class_method_signature": "CaselessMultivaluedMap.CaselessMultivaluedMap(int capacity)", "testcase": false, "constructor": true}, {"identifier": "CaselessMultivaluedMap", "parameters": "(Map<String, List<T>> m)", "modifiers": "public", "return": "", "signature": " CaselessMultivaluedMap(Map<String, List<T>> m)", "full_signature": "public  CaselessMultivaluedMap(Map<String, List<T>> m)", "class_method_signature": "CaselessMultivaluedMap.CaselessMultivaluedMap(Map<String, List<T>> m)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(String key, T value)", "modifiers": "@Override public", "return": "void", "signature": "void add(String key, T value)", "full_signature": "@Override public void add(String key, T value)", "class_method_signature": "CaselessMultivaluedMap.add(String key, T value)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "CaselessMultivaluedMap.clear()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "CaselessMultivaluedMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(Object value)", "full_signature": "@Override public boolean containsValue(Object value)", "class_method_signature": "CaselessMultivaluedMap.containsValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Entry<String, List<T>>>", "signature": "Set<Entry<String, List<T>>> entrySet()", "full_signature": "@Override public Set<Entry<String, List<T>>> entrySet()", "class_method_signature": "CaselessMultivaluedMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> get(Object key)", "full_signature": "@Override public List<T> get(Object key)", "class_method_signature": "CaselessMultivaluedMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "(String key)", "modifiers": "@Override public", "return": "T", "signature": "T getFirst(String key)", "full_signature": "@Override public T getFirst(String key)", "class_method_signature": "CaselessMultivaluedMap.getFirst(String key)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(String key, T... newValues)", "modifiers": "@Override public", "return": "void", "signature": "void addAll(String key, T... newValues)", "full_signature": "@Override public void addAll(String key, T... newValues)", "class_method_signature": "CaselessMultivaluedMap.addAll(String key, T... newValues)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(String key, List<T> valueList)", "modifiers": "@Override public", "return": "void", "signature": "void addAll(String key, List<T> valueList)", "full_signature": "@Override public void addAll(String key, List<T> valueList)", "class_method_signature": "CaselessMultivaluedMap.addAll(String key, List<T> valueList)", "testcase": false, "constructor": false}, {"identifier": "addFirst", "parameters": "(String key, T value)", "modifiers": "@Override public", "return": "void", "signature": "void addFirst(String key, T value)", "full_signature": "@Override public void addFirst(String key, T value)", "class_method_signature": "CaselessMultivaluedMap.addFirst(String key, T value)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreValueOrder", "parameters": "(MultivaluedMap<String, T> otherMap)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equalsIgnoreValueOrder(MultivaluedMap<String, T> otherMap)", "full_signature": "@Override public boolean equalsIgnoreValueOrder(MultivaluedMap<String, T> otherMap)", "class_method_signature": "CaselessMultivaluedMap.equalsIgnoreValueOrder(MultivaluedMap<String, T> otherMap)", "testcase": false, "constructor": false}, {"identifier": "getList", "parameters": "(String key)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> getList(String key)", "full_signature": "@Override public List<T> getList(String key)", "class_method_signature": "CaselessMultivaluedMap.getList(String key)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "CaselessMultivaluedMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> keySet()", "full_signature": "@Override public Set<String> keySet()", "class_method_signature": "CaselessMultivaluedMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, List<T> value)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> put(String key, List<T> value)", "full_signature": "@Override public List<T> put(String key, List<T> value)", "class_method_signature": "CaselessMultivaluedMap.put(String key, List<T> value)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends String, ? extends List<T>> m)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends String, ? extends List<T>> m)", "full_signature": "@Override public void putAll(Map<? extends String, ? extends List<T>> m)", "class_method_signature": "CaselessMultivaluedMap.putAll(Map<? extends String, ? extends List<T>> m)", "testcase": false, "constructor": false}, {"identifier": "putSingle", "parameters": "(String key, T value)", "modifiers": "@Override public", "return": "void", "signature": "void putSingle(String key, T value)", "full_signature": "@Override public void putSingle(String key, T value)", "class_method_signature": "CaselessMultivaluedMap.putSingle(String key, T value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> remove(Object key)", "full_signature": "@Override public List<T> remove(Object key)", "class_method_signature": "CaselessMultivaluedMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "CaselessMultivaluedMap.size()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<List<T>>", "signature": "Collection<List<T>> values()", "full_signature": "@Override public Collection<List<T>> values()", "class_method_signature": "CaselessMultivaluedMap.values()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CaselessMultivaluedMap.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "CaselessMultivaluedMap.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CaselessMultivaluedMap.hashCode()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/util/CaselessMultivaluedMap.java"}, "focal_method": {"identifier": "add", "parameters": "(String key, T value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void add(String key, T value) {\n        m.add(new CaselessStringWrapper(key), value);\n    }", "signature": "void add(String key, T value)", "full_signature": "@Override public void add(String key, T value)", "class_method_signature": "CaselessMultivaluedMap.add(String key, T value)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}