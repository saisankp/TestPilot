{"test_class": {"identifier": "JsonGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Book junitBook;", "modifier": "private", "type": "Book", "declarator": "junitBook", "var_name": "junitBook"}, {"original_string": "private Book csharpBook;", "modifier": "private", "type": "Book", "declarator": "csharpBook", "var_name": "csharpBook"}, {"original_string": "private Book javaScriptBook;", "modifier": "private", "type": "Book", "declarator": "javaScriptBook", "var_name": "javaScriptBook"}, {"original_string": "private JsonAssertionHelper assertionHelper;", "modifier": "private", "type": "JsonAssertionHelper", "declarator": "assertionHelper", "var_name": "assertionHelper"}, {"original_string": "private GroovyClassLoader groovyClassLoader = new GroovyClassLoader();", "modifier": "private", "type": "GroovyClassLoader", "declarator": "groovyClassLoader = new GroovyClassLoader()", "var_name": "groovyClassLoader"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/json/JsonGeneratorTest.java"}, "test_case": {"identifier": "convertsMapToJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertsMapToJson() throws Exception {\n        Map<String, Book> books = ImmutableMap.of(\"0\", junitBook,\n                                                  \"1\", csharpBook,\n                                                  \"2\", javaScriptBook);\n        JsonValue jsonValue = JsonGenerator.createJsonObjectFromMap(books);\n        assertTrue(jsonValue.isObject());\n        assertionHelper.assertThatJsonHasAllItemsFromMap(books, jsonValue);\n    }", "signature": "void convertsMapToJson()", "full_signature": "@Test public void convertsMapToJson()", "class_method_signature": "JsonGeneratorTest.convertsMapToJson()", "testcase": true, "constructor": false, "invocations": ["of", "createJsonObjectFromMap", "assertTrue", "isObject", "assertThatJsonHasAllItemsFromMap"]}, "focal_class": {"identifier": "JsonGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Collection<String> SKIP_METHODS = newHashSet(\"getClass\", \"getMetaClass\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "SKIP_METHODS = newHashSet(\"getClass\", \"getMetaClass\")", "var_name": "SKIP_METHODS"}, {"original_string": "private static LoadingCache<Class<?>, JsonMethod[]> methodsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build(new CacheLoader<Class<?>, JsonMethod[]>() {\n                                                                                       @Override\n                                                                                       public JsonMethod[] load(Class<?> aClass)\n                                                                                               throws Exception {\n                                                                                           return getGetters(aClass);\n                                                                                       }\n                                                                                   });", "modifier": "private static", "type": "LoadingCache<Class<?>, JsonMethod[]>", "declarator": "methodsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build(new CacheLoader<Class<?>, JsonMethod[]>() {\n                                                                                       @Override\n                                                                                       public JsonMethod[] load(Class<?> aClass)\n                                                                                               throws Exception {\n                                                                                           return getGetters(aClass);\n                                                                                       }\n                                                                                   })", "var_name": "methodsCache"}], "methods": [{"identifier": "getGetters", "parameters": "(Class<?> aClass)", "modifiers": "private static", "return": "JsonMethod[]", "signature": "JsonMethod[] getGetters(Class<?> aClass)", "full_signature": "private static JsonMethod[] getGetters(Class<?> aClass)", "class_method_signature": "JsonGenerator.getGetters(Class<?> aClass)", "testcase": false, "constructor": false}, {"identifier": "shouldBeProcessed", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean shouldBeProcessed(Method method)", "full_signature": "private static boolean shouldBeProcessed(Method method)", "class_method_signature": "JsonGenerator.shouldBeProcessed(Method method)", "testcase": false, "constructor": false}, {"identifier": "isGetter", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean isGetter(Method method)", "full_signature": "private static boolean isGetter(Method method)", "class_method_signature": "JsonGenerator.isGetter(Method method)", "testcase": false, "constructor": false}, {"identifier": "createJsonArray", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue createJsonArray(Collection<?> collection)", "full_signature": "public static JsonValue createJsonArray(Collection<?> collection)", "class_method_signature": "JsonGenerator.createJsonArray(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "createJsonArray", "parameters": "(Object array)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue createJsonArray(Object array)", "full_signature": "public static JsonValue createJsonArray(Object array)", "class_method_signature": "JsonGenerator.createJsonArray(Object array)", "testcase": false, "constructor": false}, {"identifier": "createJsonObjectFromMap", "parameters": "(Map<String, ?> map)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue createJsonObjectFromMap(Map<String, ?> map)", "full_signature": "public static JsonValue createJsonObjectFromMap(Map<String, ?> map)", "class_method_signature": "JsonGenerator.createJsonObjectFromMap(Map<String, ?> map)", "testcase": false, "constructor": false}, {"identifier": "createJsonObject", "parameters": "(Object object)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue createJsonObject(Object object)", "full_signature": "public static JsonValue createJsonObject(Object object)", "class_method_signature": "JsonGenerator.createJsonObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "createJsonValue", "parameters": "(Object object, Types type)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private static", "return": "JsonValue", "signature": "JsonValue createJsonValue(Object object, Types type)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private static JsonValue createJsonValue(Object object, Types type)", "class_method_signature": "JsonGenerator.createJsonValue(Object object, Types type)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/json/JsonGenerator.java"}, "focal_method": {"identifier": "createJsonObjectFromMap", "parameters": "(Map<String, ?> map)", "modifiers": "public static", "return": "JsonValue", "body": "public static JsonValue createJsonObjectFromMap(Map<String, ?> map) throws JsonException {\n        if (map == null) {\n            return new NullValue();\n        }\n        return createJsonValue(map, MAP);\n    }", "signature": "JsonValue createJsonObjectFromMap(Map<String, ?> map)", "full_signature": "public static JsonValue createJsonObjectFromMap(Map<String, ?> map)", "class_method_signature": "JsonGenerator.createJsonObjectFromMap(Map<String, ?> map)", "testcase": false, "constructor": false, "invocations": ["createJsonValue"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}