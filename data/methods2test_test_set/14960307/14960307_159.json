{"test_class": {"identifier": "CountryUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CountryUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CountryUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-locale/src/test/java/com/cloudhopper/commons/locale/CountryUtilTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test(expected=IOException.class) public", "return": "void", "body": "@Test(expected=IOException.class)\n    public void parse() throws Exception {\n        Country c = Country.parse(\"\");\n    }", "signature": "void parse()", "full_signature": "@Test(expected=IOException.class) public void parse()", "class_method_signature": "CountryUtilTest.parse()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "CountryUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CountryUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CountryUtil.class)", "var_name": "logger"}, {"original_string": "private static HashMap<String,Country> byIso2;", "modifier": "private static", "type": "HashMap<String,Country>", "declarator": "byIso2", "var_name": "byIso2"}, {"original_string": "private static ArrayList<Country> byName;", "modifier": "private static", "type": "ArrayList<Country>", "declarator": "byName", "var_name": "byName"}], "methods": [{"identifier": "CountryUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " CountryUtil()", "full_signature": "private  CountryUtil()", "class_method_signature": "CountryUtil.CountryUtil()", "testcase": false, "constructor": true}, {"identifier": "lookupByIso2", "parameters": "(String iso2)", "modifiers": "public static", "return": "Country", "signature": "Country lookupByIso2(String iso2)", "full_signature": "public static Country lookupByIso2(String iso2)", "class_method_signature": "CountryUtil.lookupByIso2(String iso2)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream is)", "modifiers": "public static", "return": "ArrayList<Country>", "signature": "ArrayList<Country> parse(InputStream is)", "full_signature": "public static ArrayList<Country> parse(InputStream is)", "class_method_signature": "CountryUtil.parse(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getCountriesByName", "parameters": "()", "modifiers": "public static", "return": "List<Country>", "signature": "List<Country> getCountriesByName()", "full_signature": "public static List<Country> getCountriesByName()", "class_method_signature": "CountryUtil.getCountriesByName()", "testcase": false, "constructor": false}], "file": "ch-commons-locale/src/main/java/com/cloudhopper/commons/locale/CountryUtil.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream is)", "modifiers": "public static", "return": "ArrayList<Country>", "body": "public static ArrayList<Country> parse(InputStream is) throws IOException {\n        // convert into a buffered reader\n        BufferedReader in =  new BufferedReader(new InputStreamReader(is));\n        String line = null; //not declared within while loop\n        ArrayList<Country> c = new ArrayList<Country>();\n        /*\n         * readLine is a bit quirky :\n         * it returns the content of a line MINUS the newline.\n         * it returns null only for the END of the stream.\n         * it returns an empty String if two newlines appear in a row.\n         */\n        while ((line = in.readLine()) != null) {\n            if (!line.equals(\"\") && !line.startsWith(\"#\")) {\n                // this is a country we need to parse\n                // AF AFG 004 Afghanistan\n                c.add(Country.parse(line));\n            }\n        }\n        return c;\n    }", "signature": "ArrayList<Country> parse(InputStream is)", "full_signature": "public static ArrayList<Country> parse(InputStream is)", "class_method_signature": "CountryUtil.parse(InputStream is)", "testcase": false, "constructor": false, "invocations": ["readLine", "equals", "startsWith", "add", "parse"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}