{"test_class": {"identifier": "XMLOutputSplitterTest", "superclass": "extends WSDLTestHelper", "interfaces": "", "fields": [], "file": "taverna-wsdl-generic/src/test/java/org/apache/taverna/wsdl/xmlsplitter/XMLOutputSplitterTest.java"}, "test_case": {"identifier": "testWrappedArrayDefinedWithRestriction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrappedArrayDefinedWithRestriction() throws Exception {\n        WSDLParser parser = new WSDLParser(WSDLTestHelper.wsdlResourcePath(\"jws-online.wsdl\"));\n\t\tTypeDescriptor descriptor = parser.getOperationOutputParameters(\"getSteadyStateTable\").get(0);\n        XMLOutputSplitter splitter = new XMLOutputSplitter(descriptor, new String [] {\"model\",\"fluxNames\",\"fluxVals\"}, new String [] {\"text/plain\",\"l('text/plain')\",\"l('text/plain')\"}, new String[] {\"input\"});\n        String inputXML=getResourceAsString(\"jws-splitter-input.xml\");\n\n        Map<String,String> inputMap = new HashMap<String,String>();\n        inputMap.put(\"input\", inputXML);\n        Map<String,Object> outputMap = splitter.execute(inputMap);\n\n        assertNotNull(outputMap.get(\"model\"));\n        assertNotNull(outputMap.get(\"fluxNames\"));\n        assertNotNull(outputMap.get(\"fluxVals\"));\n\n        assertEquals(\"teusink\",outputMap.get(\"model\"));\n        List<String> array = ( List<String> )outputMap.get(\"fluxNames\");\n        assertEquals(17,array.size());\n        assert(array.contains(\"v[G3PDH]\"));\n\n        array = ( List<String> )outputMap.get(\"fluxVals\");\n        assertEquals(17,array.size());\n        assert(array.contains(\"88.15049285974906\"));\n    }", "signature": "void testWrappedArrayDefinedWithRestriction()", "full_signature": "@Test public void testWrappedArrayDefinedWithRestriction()", "class_method_signature": "XMLOutputSplitterTest.testWrappedArrayDefinedWithRestriction()", "testcase": true, "constructor": false, "invocations": ["wsdlResourcePath", "get", "getOperationOutputParameters", "getResourceAsString", "put", "execute", "assertNotNull", "get", "assertNotNull", "get", "assertNotNull", "get", "assertEquals", "get", "get", "assertEquals", "size", "contains", "get", "assertEquals", "size", "contains"]}, "focal_class": {"identifier": "XMLOutputSplitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeDescriptor typeDescriptor;", "modifier": "private", "type": "TypeDescriptor", "declarator": "typeDescriptor", "var_name": "typeDescriptor"}, {"original_string": "private String[] outputNames;", "modifier": "private", "type": "String[]", "declarator": "outputNames", "var_name": "outputNames"}, {"original_string": "private String[] inputNames;", "modifier": "private", "type": "String[]", "declarator": "inputNames", "var_name": "inputNames"}, {"original_string": "private String[] outputTypes;", "modifier": "private", "type": "String[]", "declarator": "outputTypes", "var_name": "outputTypes"}], "methods": [{"identifier": "XMLOutputSplitter", "parameters": "(TypeDescriptor typeDescriptor,\n\t\t\tString[] outputNames, String[] outputTypes,String[] inputNames)", "modifiers": "public", "return": "", "signature": " XMLOutputSplitter(TypeDescriptor typeDescriptor,\n\t\t\tString[] outputNames, String[] outputTypes,String[] inputNames)", "full_signature": "public  XMLOutputSplitter(TypeDescriptor typeDescriptor,\n\t\t\tString[] outputNames, String[] outputTypes,String[] inputNames)", "class_method_signature": "XMLOutputSplitter.XMLOutputSplitter(TypeDescriptor typeDescriptor,\n\t\t\tString[] outputNames, String[] outputTypes,String[] inputNames)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Map<String, String> inputMap)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> execute(Map<String, String> inputMap)", "full_signature": "@SuppressWarnings(\"unchecked\") public Map<String, Object> execute(Map<String, String> inputMap)", "class_method_signature": "XMLOutputSplitter.execute(Map<String, String> inputMap)", "testcase": false, "constructor": false}, {"identifier": "executeForArrayType", "parameters": "(Map<String, Object> result,\n\t\t\tList<Element> children)", "modifiers": "private", "return": "void", "signature": "void executeForArrayType(Map<String, Object> result,\n\t\t\tList<Element> children)", "full_signature": "private void executeForArrayType(Map<String, Object> result,\n\t\t\tList<Element> children)", "class_method_signature": "XMLOutputSplitter.executeForArrayType(Map<String, Object> result,\n\t\t\tList<Element> children)", "testcase": false, "constructor": false}, {"identifier": "executeForComplexType", "parameters": "(Map<String, Object> result,\n\t\t\tList<String> outputNameList, List<Element> children, List<Attribute> list)", "modifiers": "@SuppressWarnings({ \"unchecked\" }) private", "return": "void", "signature": "void executeForComplexType(Map<String, Object> result,\n\t\t\tList<String> outputNameList, List<Element> children, List<Attribute> list)", "full_signature": "@SuppressWarnings({ \"unchecked\" }) private void executeForComplexType(Map<String, Object> result,\n\t\t\tList<String> outputNameList, List<Element> children, List<Attribute> list)", "class_method_signature": "XMLOutputSplitter.executeForComplexType(Map<String, Object> result,\n\t\t\tList<String> outputNameList, List<Element> children, List<Attribute> list)", "testcase": false, "constructor": false}, {"identifier": "extractDataListFromChildList", "parameters": "(List<Element> children,\n\t\t\tboolean isXMLContent)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractDataListFromChildList(List<Element> children,\n\t\t\tboolean isXMLContent)", "full_signature": "private List<String> extractDataListFromChildList(List<Element> children,\n\t\t\tboolean isXMLContent)", "class_method_signature": "XMLOutputSplitter.extractDataListFromChildList(List<Element> children,\n\t\t\tboolean isXMLContent)", "testcase": false, "constructor": false}, {"identifier": "extractBaseTypeArrayFromChildren", "parameters": "(List<Element> children)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractBaseTypeArrayFromChildren(List<Element> children)", "full_signature": "private List<String> extractBaseTypeArrayFromChildren(List<Element> children)", "class_method_signature": "XMLOutputSplitter.extractBaseTypeArrayFromChildren(List<Element> children)", "testcase": false, "constructor": false}], "file": "taverna-wsdl-generic/src/main/java/org/apache/taverna/wsdl/xmlsplitter/XMLOutputSplitter.java"}, "focal_method": {"identifier": "execute", "parameters": "(Map<String, String> inputMap)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Map<String, Object>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic Map<String, Object> execute(Map<String, String> inputMap)\n\t\t\tthrows XMLSplitterExecutionException {\n\n\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\tList<String> outputNameList = Arrays.asList(outputNames);\n\n\t\tString xml = inputMap.get(inputNames[0]);\n\t\ttry {\n\t\t\tDocument doc = new SAXBuilder().build(new StringReader(xml));\n\t\t\tList<Element> children = doc.getRootElement().getChildren();\n\t\t\tif (typeDescriptor instanceof ArrayTypeDescriptor) {\n\t\t\t\tif (outputNames.length > 1)\n\t\t\t\t\tthrow new XMLSplitterExecutionException(\n\t\t\t\t\t\t\t\"Unexpected, multiple output names for ArrayType\");\n\t\t\t\texecuteForArrayType(result, children);\n\t\t\t} else {\n\t\t\t\texecuteForComplexType(result, outputNameList, children, doc.getRootElement().getAttributes());\n\t\t\t}\n\n\t\t\t// populate missing outputs with empty strings for basic types,\n\t\t\t// empty elements for complex/array types.\n\t\t\tfor (int i = 0; i < outputNames.length; i++) {\n\t\t\t\tif (result.get(outputNames[i]) == null) {\n\t\t\t\t\tif (outputTypes[i].equals(\"'text/xml'\")) {\n\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t.put(outputNames[i], \"<\" + outputNames[i]\n\t\t\t\t\t\t\t\t\t\t+ \" />\");\n\t\t\t\t\t} else if (outputTypes[i].startsWith(\"l('\")) {\n\t\t\t\t\t\tresult.put(outputNames[i], new ArrayList<Object>());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.put(outputNames[i], \"\");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JDOMException e) {\n\t\t\tthrow new XMLSplitterExecutionException(\"Unable to parse XML: \" + xml, e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new XMLSplitterExecutionException(\"IOException parsing XML: \" + xml,\n\t\t\t\t\te);\n\t\t}\n\n\t\treturn result;\n\t}", "signature": "Map<String, Object> execute(Map<String, String> inputMap)", "full_signature": "@SuppressWarnings(\"unchecked\") public Map<String, Object> execute(Map<String, String> inputMap)", "class_method_signature": "XMLOutputSplitter.execute(Map<String, String> inputMap)", "testcase": false, "constructor": false, "invocations": ["asList", "get", "build", "getChildren", "getRootElement", "executeForArrayType", "executeForComplexType", "getAttributes", "getRootElement", "get", "equals", "put", "startsWith", "put", "put"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}