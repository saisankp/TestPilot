{"test_class": {"identifier": "DatabaseSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatabaseSet databaseSet;", "modifier": "private", "type": "DatabaseSet", "declarator": "databaseSet", "var_name": "databaseSet"}], "file": "das-client/src/test/java/com/ppdai/das/core/DatabaseSetTest.java"}, "test_case": {"identifier": "testDeepCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeepCopy() throws Exception {\n        DatabaseSet databaseSet1 = databaseSet.deepCopy(\n                ImmutableMap.of(\"db2\", new DataBase(\"db2\", true, \"sh\", \"connectionString\")));\n        Assert.assertEquals(\"db2\", databaseSet1.getDatabases().get(\"db2\").getName());\n        databaseSet1.remove(\"db2\");\n        Assert.assertTrue(databaseSet1.getDatabases().isEmpty());\n        Assert.assertEquals(MYSQL_PROVIDER, databaseSet1.getProvider());\n    }", "signature": "void testDeepCopy()", "full_signature": "@Test public void testDeepCopy()", "class_method_signature": "DatabaseSetTest.testDeepCopy()", "testcase": true, "constructor": false, "invocations": ["deepCopy", "of", "assertEquals", "getName", "get", "getDatabases", "remove", "assertTrue", "isEmpty", "getDatabases", "assertEquals", "getProvider"]}, "focal_class": {"identifier": "DatabaseSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASS = \"class\";", "modifier": "private static final", "type": "String", "declarator": "CLASS = \"class\"", "var_name": "CLASS"}, {"original_string": "private static final String ENTRY_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "ENTRY_SEPARATOR = \";\"", "var_name": "ENTRY_SEPARATOR"}, {"original_string": "private static final String KEY_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "KEY_VALUE_SEPARATOR = \"=\"", "var_name": "KEY_VALUE_SEPARATOR"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String provider;", "modifier": "private", "type": "String", "declarator": "provider", "var_name": "provider"}, {"original_string": "private DatabaseCategory dbCategory;", "modifier": "private", "type": "DatabaseCategory", "declarator": "dbCategory", "var_name": "dbCategory"}, {"original_string": "private ShardingStrategy strategy;", "modifier": "private", "type": "ShardingStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private Map<String, DataBase> databases;", "modifier": "private", "type": "Map<String, DataBase>", "declarator": "databases", "var_name": "databases"}, {"original_string": "private Map<String, List<DataBase>> masterDbByShard = new HashMap<String, List<DataBase>>();", "modifier": "private", "type": "Map<String, List<DataBase>>", "declarator": "masterDbByShard = new HashMap<String, List<DataBase>>()", "var_name": "masterDbByShard"}, {"original_string": "private Map<String, List<DataBase>> slaveDbByShard = new HashMap<String, List<DataBase>>();", "modifier": "private", "type": "Map<String, List<DataBase>>", "declarator": "slaveDbByShard = new HashMap<String, List<DataBase>>()", "var_name": "slaveDbByShard"}, {"original_string": "private List<DataBase> masterDbs = new ArrayList<DataBase>();", "modifier": "private", "type": "List<DataBase>", "declarator": "masterDbs = new ArrayList<DataBase>()", "var_name": "masterDbs"}, {"original_string": "private List<DataBase> slaveDbs = new ArrayList<DataBase>();", "modifier": "private", "type": "List<DataBase>", "declarator": "slaveDbs = new ArrayList<DataBase>()", "var_name": "slaveDbs"}, {"original_string": "private Set<String> readOnlyAllShards;", "modifier": "private", "type": "Set<String>", "declarator": "readOnlyAllShards", "var_name": "readOnlyAllShards"}, {"original_string": "private boolean mgrEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "mgrEnabled = false", "var_name": "mgrEnabled"}, {"original_string": "private boolean mgrReadWriteSplittingEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "mgrReadWriteSplittingEnabled = false", "var_name": "mgrReadWriteSplittingEnabled"}], "methods": [{"identifier": "DatabaseSet", "parameters": "(String name, String provider, Map<String, DataBase> databases)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, Map<String, DataBase> databases)", "full_signature": "public  DatabaseSet(String name, String provider, Map<String, DataBase> databases)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, Map<String, DataBase> databases)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "(String name, String provider, Map<String, DataBase> databases,boolean mgrEnabled)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, Map<String, DataBase> databases,boolean mgrEnabled)", "full_signature": "public  DatabaseSet(String name, String provider, Map<String, DataBase> databases,boolean mgrEnabled)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, Map<String, DataBase> databases,boolean mgrEnabled)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "(String name, String provider, String shardStrategy, Map<String, DataBase> databases)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases)", "full_signature": "public  DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "(String name, String provider, String shardStrategy, Map<String, DataBase> databases, boolean mgrEnabled)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases, boolean mgrEnabled)", "full_signature": "public  DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases, boolean mgrEnabled)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, String shardStrategy, Map<String, DataBase> databases, boolean mgrEnabled)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases)", "full_signature": "public  DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases, boolean mgrEnabled)", "modifiers": "public", "return": "", "signature": " DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases, boolean mgrEnabled)", "full_signature": "public  DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases, boolean mgrEnabled)", "class_method_signature": "DatabaseSet.DatabaseSet(String name, String provider, String shardStrategy, ShardingStrategy strategy, Map<String, DataBase> databases, boolean mgrEnabled)", "testcase": false, "constructor": true}, {"identifier": "DatabaseSet", "parameters": "()", "modifiers": "private", "return": "", "signature": " DatabaseSet()", "full_signature": "private  DatabaseSet()", "class_method_signature": "DatabaseSet.DatabaseSet()", "testcase": false, "constructor": true}, {"identifier": "deepCopy", "parameters": "(Map<String, DataBase> newDBs)", "modifiers": "public", "return": "DatabaseSet", "signature": "DatabaseSet deepCopy(Map<String, DataBase> newDBs)", "full_signature": "public DatabaseSet deepCopy(Map<String, DataBase> newDBs)", "class_method_signature": "DatabaseSet.deepCopy(Map<String, DataBase> newDBs)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String dbName)", "modifiers": "public", "return": "void", "signature": "void remove(String dbName)", "full_signature": "public void remove(String dbName)", "class_method_signature": "DatabaseSet.remove(String dbName)", "testcase": false, "constructor": false}, {"identifier": "initStrategy", "parameters": "(String shardStrategy)", "modifiers": "private", "return": "void", "signature": "void initStrategy(String shardStrategy)", "full_signature": "private void initStrategy(String shardStrategy)", "class_method_signature": "DatabaseSet.initStrategy(String shardStrategy)", "testcase": false, "constructor": false}, {"identifier": "initShards", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initShards()", "full_signature": "public void initShards()", "class_method_signature": "DatabaseSet.initShards()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "DatabaseSet.getName()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProvider()", "full_signature": "public String getProvider()", "class_method_signature": "DatabaseSet.getProvider()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseCategory", "parameters": "()", "modifiers": "public", "return": "DatabaseCategory", "signature": "DatabaseCategory getDatabaseCategory()", "full_signature": "public DatabaseCategory getDatabaseCategory()", "class_method_signature": "DatabaseSet.getDatabaseCategory()", "testcase": false, "constructor": false}, {"identifier": "isShardingSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShardingSupported()", "full_signature": "public boolean isShardingSupported()", "class_method_signature": "DatabaseSet.isShardingSupported()", "testcase": false, "constructor": false}, {"identifier": "isShardByTable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShardByTable()", "full_signature": "public boolean isShardByTable()", "class_method_signature": "DatabaseSet.isShardByTable()", "testcase": false, "constructor": false}, {"identifier": "isTableShardingSupported", "parameters": "(String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean isTableShardingSupported(String tableName)", "full_signature": "public boolean isTableShardingSupported(String tableName)", "class_method_signature": "DatabaseSet.isTableShardingSupported(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getDatabases", "parameters": "()", "modifiers": "public", "return": "Map<String, DataBase>", "signature": "Map<String, DataBase> getDatabases()", "full_signature": "public Map<String, DataBase> getDatabases()", "class_method_signature": "DatabaseSet.getDatabases()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String shard)", "modifiers": "public", "return": "void", "signature": "void validate(String shard)", "full_signature": "public void validate(String shard)", "class_method_signature": "DatabaseSet.validate(String shard)", "testcase": false, "constructor": false}, {"identifier": "getAllShards", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAllShards()", "full_signature": "public Set<String> getAllShards()", "class_method_signature": "DatabaseSet.getAllShards()", "testcase": false, "constructor": false}, {"identifier": "getStrategy", "parameters": "()", "modifiers": "public", "return": "ShardingStrategy", "signature": "ShardingStrategy getStrategy()", "full_signature": "public ShardingStrategy getStrategy()", "class_method_signature": "DatabaseSet.getStrategy()", "testcase": false, "constructor": false}, {"identifier": "getMasterDbs", "parameters": "()", "modifiers": "public", "return": "List<DataBase>", "signature": "List<DataBase> getMasterDbs()", "full_signature": "public List<DataBase> getMasterDbs()", "class_method_signature": "DatabaseSet.getMasterDbs()", "testcase": false, "constructor": false}, {"identifier": "getSlaveDbs", "parameters": "()", "modifiers": "public", "return": "List<DataBase>", "signature": "List<DataBase> getSlaveDbs()", "full_signature": "public List<DataBase> getSlaveDbs()", "class_method_signature": "DatabaseSet.getSlaveDbs()", "testcase": false, "constructor": false}, {"identifier": "getMasterDbs", "parameters": "(String shard)", "modifiers": "public", "return": "List<DataBase>", "signature": "List<DataBase> getMasterDbs(String shard)", "full_signature": "public List<DataBase> getMasterDbs(String shard)", "class_method_signature": "DatabaseSet.getMasterDbs(String shard)", "testcase": false, "constructor": false}, {"identifier": "getSlaveDbs", "parameters": "(String shard)", "modifiers": "public", "return": "List<DataBase>", "signature": "List<DataBase> getSlaveDbs(String shard)", "full_signature": "public List<DataBase> getSlaveDbs(String shard)", "class_method_signature": "DatabaseSet.getSlaveDbs(String shard)", "testcase": false, "constructor": false}, {"identifier": "isMgrEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMgrEnabled()", "full_signature": "public boolean isMgrEnabled()", "class_method_signature": "DatabaseSet.isMgrEnabled()", "testcase": false, "constructor": false}, {"identifier": "isMgrReadWriteSplittingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMgrReadWriteSplittingEnabled()", "full_signature": "public boolean isMgrReadWriteSplittingEnabled()", "class_method_signature": "DatabaseSet.isMgrReadWriteSplittingEnabled()", "testcase": false, "constructor": false}, {"identifier": "setMgrReadWriteSplittingEnabled", "parameters": "(boolean mgrReadWriteSplittingEnabled)", "modifiers": "public", "return": "DatabaseSet", "signature": "DatabaseSet setMgrReadWriteSplittingEnabled(boolean mgrReadWriteSplittingEnabled)", "full_signature": "public DatabaseSet setMgrReadWriteSplittingEnabled(boolean mgrReadWriteSplittingEnabled)", "class_method_signature": "DatabaseSet.setMgrReadWriteSplittingEnabled(boolean mgrReadWriteSplittingEnabled)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DatabaseSet.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DatabaseSet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DatabaseSet.toString()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/core/DatabaseSet.java"}, "focal_method": {"identifier": "deepCopy", "parameters": "(Map<String, DataBase> newDBs)", "modifiers": "public", "return": "DatabaseSet", "body": "public DatabaseSet deepCopy(Map<String, DataBase> newDBs) throws Exception {\n\t\tDatabaseSet newDataSet = new DatabaseSet();\n\t\tnewDataSet.name = this.name;\n\t\tnewDataSet.provider = this.provider;\n\t\tnewDataSet.dbCategory = this.dbCategory;\n\t\tnewDataSet.strategy = this.strategy;\n\t\tnewDataSet.mgrEnabled = this.mgrEnabled;\n\t\tnewDataSet.mgrReadWriteSplittingEnabled = this.mgrReadWriteSplittingEnabled;\n\t\tnewDataSet.databases = new HashMap<>();\n        newDataSet.databases.putAll(newDBs);\n\n\t\tnewDataSet.initShards();\n\t\treturn newDataSet;\n\t}", "signature": "DatabaseSet deepCopy(Map<String, DataBase> newDBs)", "full_signature": "public DatabaseSet deepCopy(Map<String, DataBase> newDBs)", "class_method_signature": "DatabaseSet.deepCopy(Map<String, DataBase> newDBs)", "testcase": false, "constructor": false, "invocations": ["putAll", "initShards"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}