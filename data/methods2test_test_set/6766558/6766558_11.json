{"test_class": {"identifier": "HystrixConfigSseServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock HttpServletRequest mockReq;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "mockReq", "var_name": "mockReq"}, {"original_string": "@Mock HttpServletResponse mockResp;", "modifier": "@Mock", "type": "HttpServletResponse", "declarator": "mockResp", "var_name": "mockResp"}, {"original_string": "@Mock HystrixConfiguration mockConfig;", "modifier": "@Mock", "type": "HystrixConfiguration", "declarator": "mockConfig", "var_name": "mockConfig"}, {"original_string": "@Mock PrintWriter mockPrintWriter;", "modifier": "@Mock", "type": "PrintWriter", "declarator": "mockPrintWriter", "var_name": "mockPrintWriter"}, {"original_string": "HystrixConfigSseServlet servlet;", "modifier": "", "type": "HystrixConfigSseServlet", "declarator": "servlet", "var_name": "servlet"}, {"original_string": "private final Observable<HystrixConfiguration> streamOfOnNexts = Observable.interval(100, TimeUnit.MILLISECONDS).map(new Func1<Long, HystrixConfiguration>() {\n        @Override\n        public HystrixConfiguration call(Long timestamp) {\n            return mockConfig;\n        }\n    });", "modifier": "private final", "type": "Observable<HystrixConfiguration>", "declarator": "streamOfOnNexts = Observable.interval(100, TimeUnit.MILLISECONDS).map(new Func1<Long, HystrixConfiguration>() {\n        @Override\n        public HystrixConfiguration call(Long timestamp) {\n            return mockConfig;\n        }\n    })", "var_name": "streamOfOnNexts"}, {"original_string": "private final Observable<HystrixConfiguration> streamOfOnNextThenOnError = Observable.create(new Observable.OnSubscribe<HystrixConfiguration>() {\n        @Override\n        public void call(Subscriber<? super HystrixConfiguration> subscriber) {\n            try {\n                Thread.sleep(100);\n                subscriber.onNext(mockConfig);\n                Thread.sleep(100);\n                subscriber.onError(new RuntimeException(\"stream failure\"));\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }).subscribeOn(Schedulers.computation());", "modifier": "private final", "type": "Observable<HystrixConfiguration>", "declarator": "streamOfOnNextThenOnError = Observable.create(new Observable.OnSubscribe<HystrixConfiguration>() {\n        @Override\n        public void call(Subscriber<? super HystrixConfiguration> subscriber) {\n            try {\n                Thread.sleep(100);\n                subscriber.onNext(mockConfig);\n                Thread.sleep(100);\n                subscriber.onError(new RuntimeException(\"stream failure\"));\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }).subscribeOn(Schedulers.computation())", "var_name": "streamOfOnNextThenOnError"}, {"original_string": "private final Observable<HystrixConfiguration> streamOfOnNextThenOnCompleted = Observable.create(new Observable.OnSubscribe<HystrixConfiguration>() {\n        @Override\n        public void call(Subscriber<? super HystrixConfiguration> subscriber) {\n            try {\n                Thread.sleep(100);\n                subscriber.onNext(mockConfig);\n                Thread.sleep(100);\n                subscriber.onCompleted();\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }).subscribeOn(Schedulers.computation());", "modifier": "private final", "type": "Observable<HystrixConfiguration>", "declarator": "streamOfOnNextThenOnCompleted = Observable.create(new Observable.OnSubscribe<HystrixConfiguration>() {\n        @Override\n        public void call(Subscriber<? super HystrixConfiguration> subscriber) {\n            try {\n                Thread.sleep(100);\n                subscriber.onNext(mockConfig);\n                Thread.sleep(100);\n                subscriber.onCompleted();\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }).subscribeOn(Schedulers.computation())", "var_name": "streamOfOnNextThenOnCompleted"}], "file": "hystrix-contrib/hystrix-metrics-event-stream/src/test/java/com/netflix/hystrix/contrib/sample/stream/HystrixConfigSseServletTest.java"}, "test_case": {"identifier": "testConfigDataWithStreamOnCompleted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigDataWithStreamOnCompleted() throws IOException, InterruptedException {\n        servlet = new HystrixConfigSseServlet(streamOfOnNextThenOnCompleted, 10);\n        try {\n            servlet.init();\n        } catch (ServletException ex) {\n\n        }\n\n        final AtomicInteger writes = new AtomicInteger(0);\n\n        when(mockReq.getParameter(\"delay\")).thenReturn(\"100\");\n        when(mockResp.getWriter()).thenReturn(mockPrintWriter);\n        Mockito.doAnswer(new Answer<Void>() {\n            @Override\n            public Void answer(InvocationOnMock invocation) throws Throwable {\n                String written = (String) invocation.getArguments()[0];\n                System.out.println(\"ARG : \" + written);\n\n                if (!written.contains(\"ping\")) {\n                    writes.incrementAndGet();\n                }\n                return null;\n            }\n        }).when(mockPrintWriter).print(Mockito.anyString());\n\n        Runnable simulateClient = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    servlet.doGet(mockReq, mockResp);\n                } catch (ServletException ex) {\n                    fail(ex.getMessage());\n                } catch (IOException ex) {\n                    fail(ex.getMessage());\n                }\n            }\n        };\n\n        Thread t = new Thread(simulateClient);\n        t.start();\n\n        try {\n            Thread.sleep(1000);\n            System.out.println(System.currentTimeMillis() + \" Woke up from sleep : \" + Thread.currentThread().getName());\n        } catch (InterruptedException ex) {\n            fail(ex.getMessage());\n        }\n\n        assertEquals(1, writes.get());\n        assertEquals(0, servlet.getNumberCurrentConnections());\n    }", "signature": "void testConfigDataWithStreamOnCompleted()", "full_signature": "@Test public void testConfigDataWithStreamOnCompleted()", "class_method_signature": "HystrixConfigSseServletTest.testConfigDataWithStreamOnCompleted()", "testcase": true, "constructor": false, "invocations": ["init", "thenReturn", "when", "getParameter", "thenReturn", "when", "getWriter", "print", "when", "doAnswer", "getArguments", "println", "contains", "incrementAndGet", "anyString", "doGet", "fail", "getMessage", "fail", "getMessage", "start", "sleep", "println", "currentTimeMillis", "getName", "currentThread", "fail", "getMessage", "assertEquals", "get", "assertEquals", "getNumberCurrentConnections"]}, "focal_class": {"identifier": "HystrixConfigSseServlet", "superclass": "extends HystrixSampleSseServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3599771169762858235L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3599771169762858235L", "var_name": "serialVersionUID"}, {"original_string": "private static AtomicInteger concurrentConnections = new AtomicInteger(0);", "modifier": "private static", "type": "AtomicInteger", "declarator": "concurrentConnections = new AtomicInteger(0)", "var_name": "concurrentConnections"}, {"original_string": "private static DynamicIntProperty maxConcurrentConnections = DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.config.stream.maxConcurrentConnections\", 5);", "modifier": "private static", "type": "DynamicIntProperty", "declarator": "maxConcurrentConnections = DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.config.stream.maxConcurrentConnections\", 5)", "var_name": "maxConcurrentConnections"}], "methods": [{"identifier": "HystrixConfigSseServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " HystrixConfigSseServlet()", "full_signature": "public  HystrixConfigSseServlet()", "class_method_signature": "HystrixConfigSseServlet.HystrixConfigSseServlet()", "testcase": false, "constructor": true}, {"identifier": "HystrixConfigSseServlet", "parameters": "(Observable<HystrixConfiguration> sampleStream, int pausePollerThreadDelayInMs)", "modifiers": "", "return": "", "signature": " HystrixConfigSseServlet(Observable<HystrixConfiguration> sampleStream, int pausePollerThreadDelayInMs)", "full_signature": "  HystrixConfigSseServlet(Observable<HystrixConfiguration> sampleStream, int pausePollerThreadDelayInMs)", "class_method_signature": "HystrixConfigSseServlet.HystrixConfigSseServlet(Observable<HystrixConfiguration> sampleStream, int pausePollerThreadDelayInMs)", "testcase": false, "constructor": true}, {"identifier": "getMaxNumberConcurrentConnectionsAllowed", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getMaxNumberConcurrentConnectionsAllowed()", "full_signature": "@Override protected int getMaxNumberConcurrentConnectionsAllowed()", "class_method_signature": "HystrixConfigSseServlet.getMaxNumberConcurrentConnectionsAllowed()", "testcase": false, "constructor": false}, {"identifier": "getNumberCurrentConnections", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getNumberCurrentConnections()", "full_signature": "@Override protected int getNumberCurrentConnections()", "class_method_signature": "HystrixConfigSseServlet.getNumberCurrentConnections()", "testcase": false, "constructor": false}, {"identifier": "incrementAndGetCurrentConcurrentConnections", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int incrementAndGetCurrentConcurrentConnections()", "full_signature": "@Override protected int incrementAndGetCurrentConcurrentConnections()", "class_method_signature": "HystrixConfigSseServlet.incrementAndGetCurrentConcurrentConnections()", "testcase": false, "constructor": false}, {"identifier": "decrementCurrentConcurrentConnections", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void decrementCurrentConcurrentConnections()", "full_signature": "@Override protected void decrementCurrentConcurrentConnections()", "class_method_signature": "HystrixConfigSseServlet.decrementCurrentConcurrentConnections()", "testcase": false, "constructor": false}], "file": "hystrix-contrib/hystrix-metrics-event-stream/src/main/java/com/netflix/hystrix/contrib/sample/stream/HystrixConfigSseServlet.java"}, "focal_method": {"identifier": "getNumberCurrentConnections", "parameters": "()", "modifiers": "@Override protected", "return": "int", "body": "@Override\n    protected int getNumberCurrentConnections() {\n        return concurrentConnections.get();\n    }", "signature": "int getNumberCurrentConnections()", "full_signature": "@Override protected int getNumberCurrentConnections()", "class_method_signature": "HystrixConfigSseServlet.getNumberCurrentConnections()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}