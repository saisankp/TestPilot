{"test_class": {"identifier": "FileSizeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_FILE_CONTENT = \"FileSize UT test file\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_CONTENT = \"FileSize UT test file\"", "var_name": "TEST_FILE_CONTENT"}, {"original_string": "private static final String TEST_FILE_PATH =\n      FileSizeConstants.SYS.getPath() + File.separatorChar + \"schemaFile\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_PATH =\n      FileSizeConstants.SYS.getPath() + File.separatorChar + \"schemaFile\"", "var_name": "TEST_FILE_PATH"}], "file": "server/src/test/java/org/apache/iotdb/db/monitor/collector/FileSizeTest.java"}, "test_case": {"identifier": "testGetFileSizesInByte", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n  @Test\n  public void testGetFileSizesInByte() {\n    long dataSizeBefore;\n    long dataSizeAfter;\n    boolean isWriteSuccess = true;\n    File testFile = new File(TEST_FILE_PATH);\n    if (testFile.exists()) {\n      try {\n        Files.delete(testFile.toPath());\n      } catch (IOException e) {\n        isWriteSuccess = false;\n        e.printStackTrace();\n      }\n    }\n    try {\n      if (!testFile.createNewFile()) {\n        isWriteSuccess = false;\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    dataSizeBefore = FileSize.getInstance().getFileSizesInByte().get(FileSizeConstants.SYS);\n    byte[] contentInBytes = TEST_FILE_CONTENT.getBytes();\n    // insert something into the test file under data dir\n    try (FileOutputStream fileOutputStream = new FileOutputStream(testFile)) {\n      fileOutputStream.write(contentInBytes);\n      fileOutputStream.flush();\n    } catch (IOException e) {\n      isWriteSuccess = false;\n      e.printStackTrace();\n    }\n    // calculate the delta of data dir file size\n    dataSizeAfter = FileSize.getInstance().getFileSizesInByte().get(FileSizeConstants.SYS);\n    long deltaSize = dataSizeAfter - dataSizeBefore;\n\n    if (isWriteSuccess) {\n      //check if the the delta of data dir file size is equal to the written content size in byte\n      assertEquals(contentInBytes.length, deltaSize);\n    } else {\n      assertEquals(0, deltaSize);\n    }\n  }", "signature": "void testGetFileSizesInByte()", "full_signature": "@Ignore @Test public void testGetFileSizesInByte()", "class_method_signature": "FileSizeTest.testGetFileSizesInByte()", "testcase": true, "constructor": false, "invocations": ["exists", "delete", "toPath", "printStackTrace", "createNewFile", "printStackTrace", "get", "getFileSizesInByte", "getInstance", "getBytes", "write", "flush", "printStackTrace", "get", "getFileSizesInByte", "getInstance", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FileSize", "superclass": "", "interfaces": "implements IStatistic", "fields": [{"original_string": "private static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static", "type": "IoTDBConfig", "declarator": "config = IoTDBDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileSize.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileSize.class)", "var_name": "logger"}, {"original_string": "private static final long ABNORMAL_VALUE = -1L;", "modifier": "private static final", "type": "long", "declarator": "ABNORMAL_VALUE = -1L", "var_name": "ABNORMAL_VALUE"}, {"original_string": "private static final long INIT_VALUE_IF_FILE_NOT_EXIST = 0L;", "modifier": "private static final", "type": "long", "declarator": "INIT_VALUE_IF_FILE_NOT_EXIST = 0L", "var_name": "INIT_VALUE_IF_FILE_NOT_EXIST"}], "methods": [{"identifier": "getAllStatisticsValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, TSRecord>", "signature": "Map<String, TSRecord> getAllStatisticsValue()", "full_signature": "@Override public Map<String, TSRecord> getAllStatisticsValue()", "class_method_signature": "FileSize.getAllStatisticsValue()", "testcase": false, "constructor": false}, {"identifier": "registerStatMetadata", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void registerStatMetadata()", "full_signature": "@Override public void registerStatMetadata()", "class_method_signature": "FileSize.registerStatMetadata()", "testcase": false, "constructor": false}, {"identifier": "getAllPathForStatistic", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllPathForStatistic()", "full_signature": "@Override public List<String> getAllPathForStatistic()", "class_method_signature": "FileSize.getAllPathForStatistic()", "testcase": false, "constructor": false}, {"identifier": "getStatParamsHashMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, AtomicLong>", "signature": "Map<String, AtomicLong> getStatParamsHashMap()", "full_signature": "@Override public Map<String, AtomicLong> getStatParamsHashMap()", "class_method_signature": "FileSize.getStatParamsHashMap()", "testcase": false, "constructor": false}, {"identifier": "FileSize", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileSize()", "full_signature": "private  FileSize()", "class_method_signature": "FileSize.FileSize()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "FileSize", "signature": "FileSize getInstance()", "full_signature": "public static FileSize getInstance()", "class_method_signature": "FileSize.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getFileSizesInByte", "parameters": "()", "modifiers": "public", "return": "Map<FileSizeConstants, Long>", "signature": "Map<FileSizeConstants, Long> getFileSizesInByte()", "full_signature": "public Map<FileSizeConstants, Long> getFileSizesInByte()", "class_method_signature": "FileSize.getFileSizesInByte()", "testcase": false, "constructor": false}, {"identifier": "collectSeqFileSize", "parameters": "(EnumMap<FileSizeConstants, Long> fileSizes,\n      FileSizeConstants kinds)", "modifiers": "private", "return": "long", "signature": "long collectSeqFileSize(EnumMap<FileSizeConstants, Long> fileSizes,\n      FileSizeConstants kinds)", "full_signature": "private long collectSeqFileSize(EnumMap<FileSizeConstants, Long> fileSizes,\n      FileSizeConstants kinds)", "class_method_signature": "FileSize.collectSeqFileSize(EnumMap<FileSizeConstants, Long> fileSizes,\n      FileSizeConstants kinds)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/monitor/collector/FileSize.java"}, "focal_method": {"identifier": "getFileSizesInByte", "parameters": "()", "modifiers": "public", "return": "Map<FileSizeConstants, Long>", "body": "public Map<FileSizeConstants, Long> getFileSizesInByte() {\n    EnumMap<FileSizeConstants, Long> fileSizes = new EnumMap<>(FileSizeConstants.class);\n    for (FileSizeConstants kinds : MonitorConstants.FileSizeConstants.values()) {\n\n      if (kinds.equals(FileSizeConstants.SYS)) {\n        fileSizes.put(kinds, collectSeqFileSize(fileSizes, kinds));\n      } else {\n        File file = SystemFileFactory.INSTANCE.getFile(kinds.getPath());\n        if (file.exists()) {\n          try {\n            fileSizes.put(kinds, FileUtils.sizeOfDirectory(file));\n          } catch (Exception e) {\n            logger.error(\"Meet error while trying to get {} size with dir {} .\", kinds,\n                kinds.getPath(), e);\n            fileSizes.put(kinds, ABNORMAL_VALUE);\n          }\n        } else {\n          fileSizes.put(kinds, INIT_VALUE_IF_FILE_NOT_EXIST);\n        }\n      }\n    }\n    return fileSizes;\n  }", "signature": "Map<FileSizeConstants, Long> getFileSizesInByte()", "full_signature": "public Map<FileSizeConstants, Long> getFileSizesInByte()", "class_method_signature": "FileSize.getFileSizesInByte()", "testcase": false, "constructor": false, "invocations": ["values", "equals", "put", "collectSeqFileSize", "getFile", "getPath", "exists", "put", "sizeOfDirectory", "error", "getPath", "put", "put"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}