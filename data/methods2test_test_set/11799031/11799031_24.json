{"test_class": {"identifier": "GMLUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static File conusStates;", "modifier": "private static", "type": "File", "declarator": "conusStates", "var_name": "conusStates"}, {"original_string": "private static File arcGis;", "modifier": "private static", "type": "File", "declarator": "arcGis", "var_name": "arcGis"}], "file": "gdp-process-wps/src/test/java/gov/usgs/cida/gdp/wps/util/GMLUtilTest.java"}, "test_case": {"identifier": "testExtractCRSFromBoundedByNodeFromArcGISExampleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExtractCRSFromBoundedByNodeFromArcGISExampleFile() throws IOException {\n\t\tSystem.out.println(\"testExtractCRSAgainstArcGISExampleUsingFile\");\n\t\tFile file = arcGis;\n\t\tCoordinateReferenceSystem result = GMLUtil.determineCollectionCRS(file);\n\t\tassertNotNull(result);\n\t\tassertEquals(2, result.getCoordinateSystem().getDimension());\n\t\tassertEquals(\"World between 85\u00b0S and 85\u00b0N.\", result.getDomainOfValidity().getDescription().toString());\n\t\tassertEquals(\"EPSG:3857\", result.getIdentifiers().toArray()[0].toString());\n\t}", "signature": "void testExtractCRSFromBoundedByNodeFromArcGISExampleFile()", "full_signature": "@Test public void testExtractCRSFromBoundedByNodeFromArcGISExampleFile()", "class_method_signature": "GMLUtilTest.testExtractCRSFromBoundedByNodeFromArcGISExampleFile()", "testcase": true, "constructor": false, "invocations": ["println", "determineCollectionCRS", "assertNotNull", "assertEquals", "getDimension", "getCoordinateSystem", "assertEquals", "String()", "tDescription()", "tDomainOfValidity()", "assertEquals", "toString", "toArray", "getIdentifiers"]}, "focal_class": {"identifier": "GMLUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GMLUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GMLUtil.class)", "var_name": "LOGGER"}, {"original_string": "private static final WstxInputFactory INPUTFACTORY_XML;", "modifier": "private static final", "type": "WstxInputFactory", "declarator": "INPUTFACTORY_XML", "var_name": "INPUTFACTORY_XML"}, {"original_string": "private static final String MSG_ERR_DETERMINE_ENVELOPE = \"Error determining envelope\";", "modifier": "private static final", "type": "String", "declarator": "MSG_ERR_DETERMINE_ENVELOPE = \"Error determining envelope\"", "var_name": "MSG_ERR_DETERMINE_ENVELOPE"}, {"original_string": "private static final String MSG_ERR_DETERMINE_CRS = \"Error determining CRS\";", "modifier": "private static final", "type": "String", "declarator": "MSG_ERR_DETERMINE_CRS = \"Error determining CRS\"", "var_name": "MSG_ERR_DETERMINE_CRS"}], "methods": [{"identifier": "determineCollectionEnvelope", "parameters": "(File file)", "modifiers": "public static", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope determineCollectionEnvelope(File file)", "full_signature": "public static ReferencedEnvelope determineCollectionEnvelope(File file)", "class_method_signature": "GMLUtil.determineCollectionEnvelope(File file)", "testcase": false, "constructor": false}, {"identifier": "determineCollectionEnvelope", "parameters": "(File file, CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope determineCollectionEnvelope(File file, CoordinateReferenceSystem crs)", "full_signature": "public static ReferencedEnvelope determineCollectionEnvelope(File file, CoordinateReferenceSystem crs)", "class_method_signature": "GMLUtil.determineCollectionEnvelope(File file, CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "determineCollectionEnvelope", "parameters": "(InputStream inputStream, CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope determineCollectionEnvelope(InputStream inputStream, CoordinateReferenceSystem crs)", "full_signature": "public static ReferencedEnvelope determineCollectionEnvelope(InputStream inputStream, CoordinateReferenceSystem crs)", "class_method_signature": "GMLUtil.determineCollectionEnvelope(InputStream inputStream, CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "determineCollectionCRS", "parameters": "(File file)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem determineCollectionCRS(File file)", "full_signature": "public static CoordinateReferenceSystem determineCollectionCRS(File file)", "class_method_signature": "GMLUtil.determineCollectionCRS(File file)", "testcase": false, "constructor": false}, {"identifier": "determineCollectionCRS", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem determineCollectionCRS(InputStream inputStream)", "full_signature": "public static CoordinateReferenceSystem determineCollectionCRS(InputStream inputStream)", "class_method_signature": "GMLUtil.determineCollectionCRS(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "extractFeatureTypeSchema", "parameters": "(File file)", "modifiers": "public static", "return": "QName", "signature": "QName extractFeatureTypeSchema(File file)", "full_signature": "public static QName extractFeatureTypeSchema(File file)", "class_method_signature": "GMLUtil.extractFeatureTypeSchema(File file)", "testcase": false, "constructor": false}, {"identifier": "extractFeatureTypeSchema", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "QName", "signature": "QName extractFeatureTypeSchema(InputStream inputStream)", "full_signature": "public static QName extractFeatureTypeSchema(InputStream inputStream)", "class_method_signature": "GMLUtil.extractFeatureTypeSchema(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "generateGMLConfiguration", "parameters": "(File file)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration generateGMLConfiguration(File file)", "full_signature": "public static Configuration generateGMLConfiguration(File file)", "class_method_signature": "GMLUtil.generateGMLConfiguration(File file)", "testcase": false, "constructor": false}, {"identifier": "generateGMLConfiguration", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration generateGMLConfiguration(InputStream inputStream)", "full_signature": "public static Configuration generateGMLConfiguration(InputStream inputStream)", "class_method_signature": "GMLUtil.generateGMLConfiguration(InputStream inputStream)", "testcase": false, "constructor": false}], "file": "gdp-process-wps/src/main/java/gov/usgs/cida/gdp/wps/util/GMLUtil.java"}, "focal_method": {"identifier": "determineCollectionCRS", "parameters": "(File file)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "body": "public static CoordinateReferenceSystem determineCollectionCRS(File file) throws IOException {\n\t\tInputStream inputStream = null;\n\t\tCoordinateReferenceSystem crs = null;\n\t\ttry {\n\t\t\tinputStream = new BufferedInputStream(new FileInputStream(file));\n\t\t\tcrs = determineCollectionCRS(inputStream);\n\t\t} catch (FileNotFoundException ex) {\n\t\t\tthrow new IOException(MSG_ERR_DETERMINE_CRS, ex);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(inputStream);\n\t\t}\n\t\treturn crs;\n\t}", "signature": "CoordinateReferenceSystem determineCollectionCRS(File file)", "full_signature": "public static CoordinateReferenceSystem determineCollectionCRS(File file)", "class_method_signature": "GMLUtil.determineCollectionCRS(File file)", "testcase": false, "constructor": false, "invocations": ["determineCollectionCRS", "closeQuietly"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}