{"test_class": {"identifier": "ExtensionAdderProvidersTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java"}, "test_case": {"identifier": "testMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissing() {\n        try {\n            ExtensionAdderProviders.findCachedProvider(\"Default\",\n                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n                    new ConcurrentHashMap<>());\n            fail(\"Should throw Missing Provider exception\");\n        } catch (PowsyblException e) {\n            assertTrue(\"Should throw Missing Provider exception\",\n                    e.getMessage().contains(\"not found\"));\n        }\n    }", "signature": "void testMissing()", "full_signature": "@Test public void testMissing()", "class_method_signature": "ExtensionAdderProvidersTest.testMissing()", "testcase": true, "constructor": false, "invocations": ["findCachedProvider", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "ExtensionAdderProviders", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class)", "var_name": "LOGGER"}, {"original_string": "private static final Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>> ADDER_PROVIDERS = Suppliers\n            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get;", "modifier": "private static final", "type": "Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>>", "declarator": "ADDER_PROVIDERS = Suppliers\n            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get", "var_name": "ADDER_PROVIDERS"}, {"original_string": "private static final ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> CACHE = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider>", "declarator": "CACHE = new ConcurrentHashMap<>()", "var_name": "CACHE"}], "methods": [{"identifier": "groupProvidersByName", "parameters": "(Iterable<ExtensionAdderProvider> i)", "modifiers": "static", "return": "ConcurrentMap<String, List<ExtensionAdderProvider>>", "signature": "ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i)", "full_signature": "static ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i)", "class_method_signature": "ExtensionAdderProviders.groupProvidersByName(Iterable<ExtensionAdderProvider> i)", "testcase": false, "constructor": false}, {"identifier": "ExtensionAdderProviders", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExtensionAdderProviders()", "full_signature": "private  ExtensionAdderProviders()", "class_method_signature": "ExtensionAdderProviders.ExtensionAdderProviders()", "testcase": false, "constructor": true}, {"identifier": "findProvider", "parameters": "(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap)", "modifiers": "private static", "return": "ExtensionAdderProvider", "signature": "ExtensionAdderProvider findProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap)", "full_signature": "private static ExtensionAdderProvider findProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap)", "class_method_signature": "ExtensionAdderProviders.findProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap)", "testcase": false, "constructor": false}, {"identifier": "findCachedProvider", "parameters": "(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "modifiers": "static", "return": "ExtensionAdderProvider", "signature": "ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "full_signature": "static ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "class_method_signature": "ExtensionAdderProviders.findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "testcase": false, "constructor": false}, {"identifier": "findCachedProvider", "parameters": "(\n            String name, Class<B> type)", "modifiers": "public static", "return": "ExtensionAdderProvider", "signature": "ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type)", "full_signature": "public static ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type)", "class_method_signature": "ExtensionAdderProviders.findCachedProvider(\n            String name, Class<B> type)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java"}, "focal_method": {"identifier": "findCachedProvider", "parameters": "(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "modifiers": "static", "return": "ExtensionAdderProvider", "body": "static <O, E extends Extension<O>, B extends ExtensionAdder<O, E>> ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache) {\n        return cache.computeIfAbsent(Pair.of(name, type), k -> findProvider(name, type, providersMap));\n    }", "signature": "ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "full_signature": "static ExtensionAdderProvider findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "class_method_signature": "ExtensionAdderProviders.findCachedProvider(\n            String name, Class<B> type,\n            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap,\n            ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent", "of", "findProvider"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}