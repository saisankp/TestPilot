{"test_class": {"identifier": "TestMultiBundleCSVFilter", "superclass": "", "interfaces": "", "fields": [], "file": "csv-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/csv/TestMultiBundleCSVFilter.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() {\n        TestResourceStringData[] testDataJapanese = {\n                new TestResourceStringData(\"sushi\", \"Sushi\", 1),\n                new TestResourceStringData(\"ramen\", \"Ramen\", 2)\n        };\n        TestResourceStringData[] testDataItalian = {\n                new TestResourceStringData(\"minestrone\", \"Minestrone\", 2),\n                new TestResourceStringData(\"pizza\", \"Pizza\", 3),\n                new TestResourceStringData(\"spaghetti\", \"Spaghetti\", 1)\n        };\n\n        String[] expectedLines = {\n                \"module,key,value\",\n                \"Italian Foods,spaghetti,Spaghetti\",\n                \"Italian Foods,minestrone,Minestrone\",\n                \"Italian Foods,pizza,Pizza\",\n                \"Japanese Foods,sushi,Sushi\",\n                \"Japanese Foods,ramen,Ramen\"\n        };\n\n        Map<String, LanguageBundle> testDataMap = new LinkedHashMap<>();\n        testDataMap.put(\"Japanese Foods\", TestUtils.createLanguageBundle(testDataJapanese));\n        testDataMap.put(\"Italian Foods\", TestUtils.createLanguageBundle(testDataItalian));\n\n        MultiBundleResourceFilter filter = ResourceFilterFactory.getMultiBundleResourceFilter(MultiBundleCSVFilter.ID);\n        try (ByteArrayOutputStream outStream = new ByteArrayOutputStream()) {\n            filter.write(outStream, testDataMap, new FilterOptions(Locale.ENGLISH));\n            TestUtils.compareLines(expectedLines, outStream.toByteArray());\n        } catch (IOException e) {\n            fail(e.getMessage());\n        } catch (ResourceFilterException e) {\n            fail(e.getMessage());\n        }\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "TestMultiBundleCSVFilter.testWrite()", "testcase": true, "constructor": false, "invocations": ["put", "createLanguageBundle", "put", "createLanguageBundle", "getMultiBundleResourceFilter", "write", "compareLines", "toByteArray", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "MultiBundleCSVFilter", "superclass": "extends MultiBundleResourceFilter", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"CSV-MULTI\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"CSV-MULTI\"", "var_name": "ID"}, {"original_string": "public static final Type TYPE = Type.MULTI;", "modifier": "public static final", "type": "Type", "declarator": "TYPE = Type.MULTI", "var_name": "TYPE"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "Map<String, LanguageBundle>", "signature": "Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public Map<String, LanguageBundle> parse(InputStream inStream, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.merge(InputStream baseStream, OutputStream outStream, Map<String, LanguageBundle> languageBundles,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "csv-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/csv/MultiBundleCSVFilter.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n        CSVPrinter printer = CSVFormat.RFC4180.withHeader(\"module\", \"key\", \"value\").print(writer);\n\n        // Sort by bundle\n        TreeMap<String, LanguageBundle> sortedBundles = new TreeMap<>(languageBundles);\n\n        for (Entry<String, LanguageBundle> bundleEntry: sortedBundles.entrySet()) {\n            String module = bundleEntry.getKey();\n            LanguageBundle languageBundle = bundleEntry.getValue();\n            for (ResourceString resString : languageBundle.getSortedResourceStrings()) {\n                printer.printRecord(module, resString.getKey(), resString.getValue());\n            }\n        }\n        printer.flush();\n    }", "signature": "void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "class_method_signature": "MultiBundleCSVFilter.write(OutputStream outStream, Map<String, LanguageBundle> languageBundles, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["print", "withHeader", "entrySet", "getKey", "getValue", "getSortedResourceStrings", "printRecord", "getKey", "getValue", "flush"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}