{"test_class": {"identifier": "BlockfaceParserTest", "superclass": "extends AbstractSpecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BlockfaceParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BlockfaceParserTest.class)", "var_name": "LOGGER"}, {"original_string": "private BlockfaceParser parser;", "modifier": "private", "type": "BlockfaceParser", "declarator": "parser", "var_name": "parser"}], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/regex/BlockfaceParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse()\n    {\n        testParser(parser, LOGGER);\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "BlockfaceParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["testParser"]}, "focal_class": {"identifier": "BlockfaceParser", "superclass": "extends AbstractRegexParser", "interfaces": "", "fields": [{"original_string": "private static final Pattern BLOCKFACE = Pattern.compile(\"^(?:(ON)\\\\s+)?(.+)\\\\s+(BETWEEN|BET|BW|B/W|BTWN|BTWN\\\\.)\\\\s+(.+)\\\\s+(AND|\\\\&|\\\\&\\\\&)\\\\s+(.+)\\\\s*$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "BLOCKFACE = Pattern.compile(\"^(?:(ON)\\\\s+)?(.+)\\\\s+(BETWEEN|BET|BW|B/W|BTWN|BTWN\\\\.)\\\\s+(.+)\\\\s+(AND|\\\\&|\\\\&\\\\&)\\\\s+(.+)\\\\s*$\",Pattern.CASE_INSENSITIVE)", "var_name": "BLOCKFACE"}], "methods": [{"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "BlockfaceParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/regex/BlockfaceParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parse(ParseContext parseContext)\n    {\n        Chunk currentChunk = parseContext.getCurrent();\n        Matcher matcher = BLOCKFACE.matcher(currentChunk.getText());\n\n        if(!matcher.matches())\n        {\n            patternNotMatched(parseContext,BLOCKFACE);\n            return;\n        }\n        MatchBuilder builder = new MatchBuilder()\n        .add(matcher)\n        .add(MatchType.COMPLETE)\n        .add(parseContext)\n        .add(BLOCKFACE, 1, TokenType.ON)\n        .add(BLOCKFACE, 2, TokenType.ON_STREET)\n        .add(BLOCKFACE, 3, TokenType.BETWEEN)\n        .add(BLOCKFACE, 4, TokenType.CROSS_STREET_ONE)\n        .add(BLOCKFACE, 5, TokenType.AND)\n        .add(BLOCKFACE, 6, TokenType.CROSS_STREET_TWO);\n        handleMatch(builder.build(), ChunkType.BLOCKFACE);\n    }", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "BlockfaceParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "matcher", "getText", "matches", "patternNotMatched", "add", "add", "add", "add", "add", "add", "add", "add", "add", "handleMatch", "build"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}