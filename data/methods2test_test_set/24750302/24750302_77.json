{"test_class": {"identifier": "ReflectionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "alien4cloud-common/src/test/java/alien4cloud/utils/ReflectionUtilTest.java"}, "test_case": {"identifier": "mergeObjectTestWithUnknownField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeObjectTestWithUnknownField() throws JsonProcessingException {\n        MergedObject mergedObject = new MergedObject();\n        mergedObject.setId(\"an id\");\n        mergedObject.setText(\"text\");\n        mergedObject.setNumber(4);\n\n        MergeRequest mergeRequest = new MergeRequest();\n        mergeRequest.setText(\"another text\");\n        mergeRequest.setNumber(\"5\");\n        // this property will be ignored\n        mergeRequest.setBadField(\"bad\");\n        ReflectionUtil.mergeObject(mergeRequest, mergedObject);\n    }", "signature": "void mergeObjectTestWithUnknownField()", "full_signature": "@Test public void mergeObjectTestWithUnknownField()", "class_method_signature": "ReflectionUtilTest.mergeObjectTestWithUnknownField()", "testcase": true, "constructor": false, "invocations": ["setId", "setText", "setNumber", "setText", "setNumber", "setBadField", "mergeObject"]}, "focal_class": {"identifier": "ReflectionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReflectionUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtil()", "full_signature": "private  ReflectionUtil()", "class_method_signature": "ReflectionUtil.ReflectionUtil()", "testcase": false, "constructor": true}, {"identifier": "getGenericArgumentType", "parameters": "(Class<? extends T> implementationClass, Class<T> genericClass, int index)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericArgumentType(Class<? extends T> implementationClass, Class<T> genericClass, int index)", "full_signature": "public static Class<?> getGenericArgumentType(Class<? extends T> implementationClass, Class<T> genericClass, int index)", "class_method_signature": "ReflectionUtil.getGenericArgumentType(Class<? extends T> implementationClass, Class<T> genericClass, int index)", "testcase": false, "constructor": false}, {"identifier": "getGenericArgumentTypes", "parameters": "(Class<? extends T> currentClass, Class<T> genericClass, Type... resolvedTypes)", "modifiers": "private static", "return": "Type[]", "signature": "Type[] getGenericArgumentTypes(Class<? extends T> currentClass, Class<T> genericClass, Type... resolvedTypes)", "full_signature": "private static Type[] getGenericArgumentTypes(Class<? extends T> currentClass, Class<T> genericClass, Type... resolvedTypes)", "class_method_signature": "ReflectionUtil.getGenericArgumentTypes(Class<? extends T> currentClass, Class<T> genericClass, Type... resolvedTypes)", "testcase": false, "constructor": false}, {"identifier": "getDirectGenericInterfaces", "parameters": "(Class<?> clazz, Class<?> expectedClazz)", "modifiers": "private static", "return": "Set<Type>", "signature": "Set<Type> getDirectGenericInterfaces(Class<?> clazz, Class<?> expectedClazz)", "full_signature": "private static Set<Type> getDirectGenericInterfaces(Class<?> clazz, Class<?> expectedClazz)", "class_method_signature": "ReflectionUtil.getDirectGenericInterfaces(Class<?> clazz, Class<?> expectedClazz)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Type type, Class<?> clazz)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignableFrom(Type type, Class<?> clazz)", "full_signature": "private static boolean isAssignableFrom(Type type, Class<?> clazz)", "class_method_signature": "ReflectionUtil.isAssignableFrom(Type type, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Class<?> clazz, final Class<T> annotationClass, final PropertyDescriptor property)", "modifiers": "public static", "return": "T", "signature": "T getAnnotation(Class<?> clazz, final Class<T> annotationClass, final PropertyDescriptor property)", "full_signature": "public static T getAnnotation(Class<?> clazz, final Class<T> annotationClass, final PropertyDescriptor property)", "class_method_signature": "ReflectionUtil.getAnnotation(Class<?> clazz, final Class<T> annotationClass, final PropertyDescriptor property)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptors", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "PropertyDescriptor[]", "signature": "PropertyDescriptor[] getPropertyDescriptors(Class<?> clazz)", "full_signature": "public static PropertyDescriptor[] getPropertyDescriptors(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getPropertyDescriptors(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "mergeObject", "parameters": "(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "modifiers": "public static", "return": "void", "signature": "void mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "full_signature": "public static void mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "class_method_signature": "ReflectionUtil.mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "testcase": false, "constructor": false}, {"identifier": "mergeObject", "parameters": "(Object from, Object to, String... ignores)", "modifiers": "public static", "return": "void", "signature": "void mergeObject(Object from, Object to, String... ignores)", "full_signature": "public static void mergeObject(Object from, Object to, String... ignores)", "class_method_signature": "ReflectionUtil.mergeObject(Object from, Object to, String... ignores)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(Object object, String property)", "modifiers": "public static", "return": "Object", "signature": "Object getPropertyValue(Object object, String property)", "full_signature": "public static Object getPropertyValue(Object object, String property)", "class_method_signature": "ReflectionUtil.getPropertyValue(Object object, String property)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object object, String property, Object value)", "modifiers": "public static", "return": "void", "signature": "void setPropertyValue(Object object, String property, Object value)", "full_signature": "public static void setPropertyValue(Object object, String property, Object value)", "class_method_signature": "ReflectionUtil.setPropertyValue(Object object, String property, Object value)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getDeclaredField(Class<?> clazz, String fieldName)", "full_signature": "public static Field getDeclaredField(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtil.getDeclaredField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredField", "parameters": "(Class<?> clazz, Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Field", "signature": "Field getDeclaredField(Class<?> clazz, Class<? extends Annotation> annotationClass)", "full_signature": "public static Field getDeclaredField(Class<?> clazz, Class<? extends Annotation> annotationClass)", "class_method_signature": "ReflectionUtil.getDeclaredField(Class<?> clazz, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveOrWrapperOrString", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveOrWrapperOrString(Class<?> clazz)", "full_signature": "public static boolean isPrimitiveOrWrapperOrString(Class<?> clazz)", "class_method_signature": "ReflectionUtil.isPrimitiveOrWrapperOrString(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "alien4cloud-common/src/main/java/alien4cloud/utils/ReflectionUtil.java"}, "focal_method": {"identifier": "mergeObject", "parameters": "(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "modifiers": "public static", "return": "void", "body": "public static void mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores) {\n        try {\n            Map<String, Object> settablePropertiesMap = Maps.newHashMap();\n            PropertyDescriptor[] propertyDescriptors = getPropertyDescriptors(from.getClass());\n            for (PropertyDescriptor property : propertyDescriptors) {\n                if (property.getReadMethod() == null || property.getWriteMethod() == null) {\n                    continue;\n                }\n                Object value = property.getReadMethod().invoke(from);\n                if ((value != null || !ignoreNullValue) && !ignores.contains(property.getName())) {\n                    settablePropertiesMap.put(property.getName(), value);\n                }\n            }\n            for (Map.Entry<String, Object> settableProperty : settablePropertiesMap.entrySet()) {\n                // Set new values\n                String propertyName = settableProperty.getKey();\n                Object propertyValue = settableProperty.getValue();\n                setPropertyValue(to, propertyName, propertyValue);\n            }\n        } catch (IllegalAccessException | InvocationTargetException | BeansException e) {\n            throw new InvalidArgumentException(\"Cannot merge object\", e);\n        }\n    }", "signature": "void mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "full_signature": "public static void mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "class_method_signature": "ReflectionUtil.mergeObject(Object from, Object to, boolean ignoreNullValue, Set<String> ignores)", "testcase": false, "constructor": false, "invocations": ["newHashMap", "getPropertyDescriptors", "getClass", "getReadMethod", "getWriteMethod", "invoke", "getReadMethod", "contains", "getName", "put", "getName", "entrySet", "getKey", "getValue", "setPropertyValue"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}