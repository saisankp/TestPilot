{"test_class": {"identifier": "MetadataSchemaTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(MetadataSchemaTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(MetadataSchemaTest.class)", "var_name": "log"}, {"original_string": "private MetadataSchema ms;", "modifier": "private", "type": "MetadataSchema", "declarator": "ms", "var_name": "ms"}, {"original_string": "protected MetadataSchemaService metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService();", "modifier": "protected", "type": "MetadataSchemaService", "declarator": "metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService()", "var_name": "metadataSchemaService"}], "file": "dspace-api/src/test/java/org/dspace/content/MetadataSchemaTest.java"}, "test_case": {"identifier": "testSetNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetNamespace()\n    {\n        String oldnamespace = ms.getNamespace();\n        String namespace = \"new namespace\";\n        ms.setNamespace(namespace);\n        assertThat(\"testSetNamespace 0\",ms.getNamespace(),notNullValue());\n        assertThat(\"testSetNamespace 1\",ms.getNamespace(),not(equalTo(\"\")));\n        assertThat(\"testSetNamespace 2\",ms.getNamespace(),equalTo(namespace));\n\n        //we restore the old namespace to avoid issues in other tests\n        ms.setNamespace(oldnamespace);\n    }", "signature": "void testSetNamespace()", "full_signature": "@Test public void testSetNamespace()", "class_method_signature": "MetadataSchemaTest.testSetNamespace()", "testcase": true, "constructor": false, "invocations": ["getNamespace", "setNamespace", "assertThat", "getNamespace", "notNullValue", "assertThat", "getNamespace", "not", "equalTo", "assertThat", "getNamespace", "equalTo", "setNamespace"]}, "focal_class": {"identifier": "MetadataSchema", "superclass": "", "interfaces": "implements ReloadableEntity<Integer>", "fields": [{"original_string": "public static final String DC_SCHEMA = \"dc\";", "modifier": "public static final", "type": "String", "declarator": "DC_SCHEMA = \"dc\"", "var_name": "DC_SCHEMA"}, {"original_string": "@Id\n    @Column(name=\"metadata_schema_id\")\n    @GeneratedValue(strategy = GenerationType.SEQUENCE ,generator=\"metadataschemaregistry_seq\")\n    @SequenceGenerator(name=\"metadataschemaregistry_seq\", sequenceName=\"metadataschemaregistry_seq\", allocationSize = 1)\n    private Integer id;", "modifier": "@Id\n    @Column(name=\"metadata_schema_id\")\n    @GeneratedValue(strategy = GenerationType.SEQUENCE ,generator=\"metadataschemaregistry_seq\")\n    @SequenceGenerator(name=\"metadataschemaregistry_seq\", sequenceName=\"metadataschemaregistry_seq\", allocationSize = 1)\n    private", "type": "Integer", "declarator": "id", "var_name": "id"}, {"original_string": "@Column(name = \"namespace\", unique = true, length = 256)\n    private String namespace;", "modifier": "@Column(name = \"namespace\", unique = true, length = 256)\n    private", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "@Column(name = \"short_id\", unique = true, length = 32)\n    private String name;", "modifier": "@Column(name = \"short_id\", unique = true, length = 32)\n    private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "MetadataSchema", "parameters": "()", "modifiers": "protected", "return": "", "signature": " MetadataSchema()", "full_signature": "protected  MetadataSchema()", "class_method_signature": "MetadataSchema.MetadataSchema()", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "MetadataSchema.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MetadataSchema.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "MetadataSchema.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(String namespace)", "modifiers": "public", "return": "void", "signature": "void setNamespace(String namespace)", "full_signature": "public void setNamespace(String namespace)", "class_method_signature": "MetadataSchema.setNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "MetadataSchema.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "MetadataSchema.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getID()", "full_signature": "public Integer getID()", "class_method_signature": "MetadataSchema.getID()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/MetadataSchema.java"}, "focal_method": {"identifier": "setNamespace", "parameters": "(String namespace)", "modifiers": "public", "return": "void", "body": "public void setNamespace(String namespace)\n    {\n        this.namespace = namespace;\n    }", "signature": "void setNamespace(String namespace)", "full_signature": "public void setNamespace(String namespace)", "class_method_signature": "MetadataSchema.setNamespace(String namespace)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}