{"test_class": {"identifier": "ContinuouslyRepeatScheduleStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private ISchedulerEntry entry;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "entry", "var_name": "entry"}, {"original_string": "private IFieldName start;", "modifier": "private", "type": "IFieldName", "declarator": "start", "var_name": "start"}, {"original_string": "private IFieldName interval;", "modifier": "private", "type": "IFieldName", "declarator": "interval", "var_name": "interval"}], "file": "CoreFeatures/Scheduler/SchedulingStrategies/src/test/java/info/smart_tools/smartactors/scheduler/strategies/ContinuouslyRepeatScheduleStrategyTest.java"}, "test_case": {"identifier": "Should_cancelEntryWhenExceptionOccurs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_cancelEntryWhenExceptionOccurs()\n            throws Exception {\n        ISchedulingStrategy strategy = new ContinuouslyRepeatScheduleStrategy();\n\n        strategy.processException(entry, mock(Throwable.class));\n\n        verify(entry).cancel();\n    }", "signature": "void Should_cancelEntryWhenExceptionOccurs()", "full_signature": "@Test public void Should_cancelEntryWhenExceptionOccurs()", "class_method_signature": "ContinuouslyRepeatScheduleStrategyTest.Should_cancelEntryWhenExceptionOccurs()", "testcase": true, "constructor": false, "invocations": ["processException", "mock", "cancel", "verify"]}, "focal_class": {"identifier": "ContinuouslyRepeatScheduleStrategy", "superclass": "", "interfaces": "implements ISchedulingStrategy", "fields": [{"original_string": "private final IFieldName startFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "startFieldName", "var_name": "startFieldName"}, {"original_string": "private final IFieldName intervalFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "intervalFieldName", "var_name": "intervalFieldName"}, {"original_string": "private final IFieldName saveFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "saveFieldName", "var_name": "saveFieldName"}], "methods": [{"identifier": "nextTime", "parameters": "(final LocalDateTime startTime, final TemporalAmount period, final long now)", "modifiers": "private", "return": "long", "signature": "long nextTime(final LocalDateTime startTime, final TemporalAmount period, final long now)", "full_signature": "private long nextTime(final LocalDateTime startTime, final TemporalAmount period, final long now)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.nextTime(final LocalDateTime startTime, final TemporalAmount period, final long now)", "testcase": false, "constructor": false}, {"identifier": "datetimeToMillis", "parameters": "(final LocalDateTime localDateTime)", "modifiers": "private", "return": "long", "signature": "long datetimeToMillis(final LocalDateTime localDateTime)", "full_signature": "private long datetimeToMillis(final LocalDateTime localDateTime)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.datetimeToMillis(final LocalDateTime localDateTime)", "testcase": false, "constructor": false}, {"identifier": "millisToDatetime", "parameters": "(final long millis)", "modifiers": "private", "return": "LocalDateTime", "signature": "LocalDateTime millisToDatetime(final long millis)", "full_signature": "private LocalDateTime millisToDatetime(final long millis)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.millisToDatetime(final long millis)", "testcase": false, "constructor": false}, {"identifier": "ContinuouslyRepeatScheduleStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ContinuouslyRepeatScheduleStrategy()", "full_signature": "public  ContinuouslyRepeatScheduleStrategy()", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.ContinuouslyRepeatScheduleStrategy()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void postProcess(final ISchedulerEntry entry)", "full_signature": "@Override public void postProcess(final ISchedulerEntry entry)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.postProcess(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void restore(final ISchedulerEntry entry)", "full_signature": "@Override public void restore(final ISchedulerEntry entry)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.restore(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "processException", "parameters": "(final ISchedulerEntry entry, final Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void processException(final ISchedulerEntry entry, final Throwable e)", "full_signature": "@Override public void processException(final ISchedulerEntry entry, final Throwable e)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.processException(final ISchedulerEntry entry, final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "notifyPaused", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void notifyPaused(final ISchedulerEntry entry)", "full_signature": "@Override public void notifyPaused(final ISchedulerEntry entry)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.notifyPaused(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "notifyUnPaused", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void notifyUnPaused(final ISchedulerEntry entry)", "full_signature": "@Override public void notifyUnPaused(final ISchedulerEntry entry)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.notifyUnPaused(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "processPausedExecution", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void processPausedExecution(final ISchedulerEntry entry)", "full_signature": "@Override public void processPausedExecution(final ISchedulerEntry entry)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.processPausedExecution(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "parseInterval", "parameters": "(final String intervalString)", "modifiers": "private", "return": "TemporalAmount", "signature": "TemporalAmount parseInterval(final String intervalString)", "full_signature": "private TemporalAmount parseInterval(final String intervalString)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.parseInterval(final String intervalString)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Scheduler/SchedulingStrategies/src/main/java/info/smart_tools/smartactors/scheduler/strategies/ContinuouslyRepeatScheduleStrategy.java"}, "focal_method": {"identifier": "processException", "parameters": "(final ISchedulerEntry entry, final Throwable e)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processException(final ISchedulerEntry entry, final Throwable e) throws SchedulingStrategyExecutionException {\n        try {\n            entry.cancel();\n        } catch (EntryStorageAccessException | EntryScheduleException ee) {\n            throw new SchedulingStrategyExecutionException(\"Error occurred cancelling failed scheduler entry.\", ee);\n        }\n    }", "signature": "void processException(final ISchedulerEntry entry, final Throwable e)", "full_signature": "@Override public void processException(final ISchedulerEntry entry, final Throwable e)", "class_method_signature": "ContinuouslyRepeatScheduleStrategy.processException(final ISchedulerEntry entry, final Throwable e)", "testcase": false, "constructor": false, "invocations": ["cancel"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}