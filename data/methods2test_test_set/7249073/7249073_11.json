{"test_class": {"identifier": "TestInMemoryMapKeyValueStore", "superclass": "extends KijiClientTest", "interfaces": "", "fields": [{"original_string": "private static final int LARGE_KV_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "LARGE_KV_SIZE = 1024", "var_name": "LARGE_KV_SIZE"}], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/kvstore/lib/TestInMemoryMapKeyValueStore.java"}, "test_case": {"identifier": "testProducer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProducer() throws Exception {\n    // Create some maps for KV stores for this test.\n    // A small map whose value will be checked.\n    final Map<String, String> smallMap = new HashMap<String, String>();\n    smallMap.put(\"lorem\", \"ipsum\");\n    // A larger map to ensure that we can safely encode non-trivial amounts of data.\n    final Map<String, String> largeMap = new HashMap<String, String>(LARGE_KV_SIZE);\n    for (int i = 0; i < LARGE_KV_SIZE; i++) {\n      largeMap.put(Integer.toString(i), Integer.toString(i));\n    }\n    final KijiURI tableURI = KijiURI.newBuilder(getKiji().getURI()).withTableName(\"test\").build();\n    final KijiMapReduceJob job = KijiProduceJobBuilder.create()\n        .withConf(getConf())\n        .withProducer(TestingProducer.class)\n        .withInputTable(tableURI)\n        .withOutput(MapReduceJobOutputs.newDirectKijiTableMapReduceJobOutput(tableURI))\n        .withStore(\"small\", InMemoryMapKeyValueStore.fromMap(smallMap))\n        .withStore(\"large\", InMemoryMapKeyValueStore.fromMap(largeMap))\n        .build();\n    // Be sure the job runs successfully and to completion.\n    // If the producer finishes, the first_name of the main row will be changed to \"lorem\".\n    assertTrue(job.run());\n    final KijiTable table = getKiji().openTable(\"test\");\n    final KijiTableReader reader = table.openTableReader();\n    String value = reader\n        .get(table.getEntityId(\"Marsellus Wallace\"), KijiDataRequest.create(\"info\", \"first_name\"))\n        .getMostRecentValue(\"info\", \"first_name\").toString();\n    assertEquals(\"Expected producer output not present. Did producer run successfully?\",\n        \"lorem\", value);\n    reader.close();\n    table.release();\n  }", "signature": "void testProducer()", "full_signature": "@Test public void testProducer()", "class_method_signature": "TestInMemoryMapKeyValueStore.testProducer()", "testcase": true, "constructor": false, "invocations": ["put", "put", "toString", "toString", "build", "withTableName", "newBuilder", "getURI", "getKiji", "build", "withStore", "withStore", "withOutput", "withInputTable", "withProducer", "withConf", "create", "getConf", "newDirectKijiTableMapReduceJobOutput", "fromMap", "fromMap", "assertTrue", "run", "openTable", "getKiji", "openTableReader", "toString", "getMostRecentValue", "get", "getEntityId", "create", "assertEquals", "close", "release"]}, "focal_class": {"identifier": "InMemoryMapKeyValueStore", "superclass": "", "interfaces": "implements KeyValueStore<K, V>", "fields": [{"original_string": "private static final String CONF_MAP = \"map\";", "modifier": "private static final", "type": "String", "declarator": "CONF_MAP = \"map\"", "var_name": "CONF_MAP"}, {"original_string": "private HashMap<K, V> mMap;", "modifier": "private", "type": "HashMap<K, V>", "declarator": "mMap", "var_name": "mMap"}, {"original_string": "private boolean mOpened;", "modifier": "private", "type": "boolean", "declarator": "mOpened", "var_name": "mOpened"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "InMemoryMapKeyValueStore.builder()", "testcase": false, "constructor": false}, {"identifier": "InMemoryMapKeyValueStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " InMemoryMapKeyValueStore()", "full_signature": "public  InMemoryMapKeyValueStore()", "class_method_signature": "InMemoryMapKeyValueStore.InMemoryMapKeyValueStore()", "testcase": false, "constructor": true}, {"identifier": "InMemoryMapKeyValueStore", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " InMemoryMapKeyValueStore(Builder builder)", "full_signature": "private  InMemoryMapKeyValueStore(Builder builder)", "class_method_signature": "InMemoryMapKeyValueStore.InMemoryMapKeyValueStore(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "fromMap", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "InMemoryMapKeyValueStore<K, V>", "signature": "InMemoryMapKeyValueStore<K, V> fromMap(Map<K, V> map)", "full_signature": "public static InMemoryMapKeyValueStore<K, V> fromMap(Map<K, V> map)", "class_method_signature": "InMemoryMapKeyValueStore.fromMap(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "storeToConf", "parameters": "(KeyValueStoreConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void storeToConf(KeyValueStoreConfiguration conf)", "full_signature": "@Override public void storeToConf(KeyValueStoreConfiguration conf)", "class_method_signature": "InMemoryMapKeyValueStore.storeToConf(KeyValueStoreConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "initFromConf", "parameters": "(KeyValueStoreConfiguration conf)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void initFromConf(KeyValueStoreConfiguration conf)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void initFromConf(KeyValueStoreConfiguration conf)", "class_method_signature": "InMemoryMapKeyValueStore.initFromConf(KeyValueStoreConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "KeyValueStoreReader<K, V>", "signature": "KeyValueStoreReader<K, V> open()", "full_signature": "@Override public KeyValueStoreReader<K, V> open()", "class_method_signature": "InMemoryMapKeyValueStore.open()", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/kvstore/lib/InMemoryMapKeyValueStore.java"}, "focal_method": {"identifier": "fromMap", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "InMemoryMapKeyValueStore<K, V>", "body": "public static <K, V> InMemoryMapKeyValueStore<K, V> fromMap(Map<K, V> map) {\n    return builder().withMap(map).build();\n  }", "signature": "InMemoryMapKeyValueStore<K, V> fromMap(Map<K, V> map)", "full_signature": "public static InMemoryMapKeyValueStore<K, V> fromMap(Map<K, V> map)", "class_method_signature": "InMemoryMapKeyValueStore.fromMap(Map<K, V> map)", "testcase": false, "constructor": false, "invocations": ["build", "withMap", "builder"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}