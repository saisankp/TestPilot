{"test_class": {"identifier": "DistributedDataStoreTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private static final ClientIdentifier UNKNOWN_ID = ClientIdentifier.create(\n            FrontendIdentifier.create(MemberName.forName(\"local\"), FrontendType.forName(\"unknown\")), 0);", "modifier": "private static final", "type": "ClientIdentifier", "declarator": "UNKNOWN_ID = ClientIdentifier.create(\n            FrontendIdentifier.create(MemberName.forName(\"local\"), FrontendType.forName(\"unknown\")), 0)", "var_name": "UNKNOWN_ID"}, {"original_string": "private static SchemaContext SCHEMA_CONTEXT;", "modifier": "private static", "type": "SchemaContext", "declarator": "SCHEMA_CONTEXT", "var_name": "SCHEMA_CONTEXT"}, {"original_string": "@Mock\n    private ActorUtils actorUtils;", "modifier": "@Mock\n    private", "type": "ActorUtils", "declarator": "actorUtils", "var_name": "actorUtils"}, {"original_string": "@Mock\n    private DatastoreContext datastoreContext;", "modifier": "@Mock\n    private", "type": "DatastoreContext", "declarator": "datastoreContext", "var_name": "datastoreContext"}, {"original_string": "@Mock\n    private Timeout shardElectionTimeout;", "modifier": "@Mock\n    private", "type": "Timeout", "declarator": "shardElectionTimeout", "var_name": "shardElectionTimeout"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/DistributedDataStoreTest.java"}, "test_case": {"identifier": "testRateLimitingUsedInReadWriteTxCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRateLimitingUsedInReadWriteTxCreation() {\n        try (DistributedDataStore distributedDataStore = new DistributedDataStore(actorUtils, UNKNOWN_ID)) {\n\n            distributedDataStore.newReadWriteTransaction();\n\n            verify(actorUtils, times(1)).acquireTxCreationPermit();\n        }\n    }", "signature": "void testRateLimitingUsedInReadWriteTxCreation()", "full_signature": "@Test public void testRateLimitingUsedInReadWriteTxCreation()", "class_method_signature": "DistributedDataStoreTest.testRateLimitingUsedInReadWriteTxCreation()", "testcase": true, "constructor": false, "invocations": ["newReadWriteTransaction", "acquireTxCreationPermit", "verify", "times"]}, "focal_class": {"identifier": "DistributedDataStore", "superclass": "extends AbstractDataStore", "interfaces": "", "fields": [{"original_string": "private final TransactionContextFactory txContextFactory;", "modifier": "private final", "type": "TransactionContextFactory", "declarator": "txContextFactory", "var_name": "txContextFactory"}], "methods": [{"identifier": "DistributedDataStore", "parameters": "(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "modifiers": "public", "return": "", "signature": " DistributedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "full_signature": "public  DistributedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "class_method_signature": "DistributedDataStore.DistributedDataStore(final ActorSystem actorSystem, final ClusterWrapper cluster,\n            final Configuration configuration, final DatastoreContextFactory datastoreContextFactory,\n            final DatastoreSnapshot restoreFromSnapshot)", "testcase": false, "constructor": true}, {"identifier": "DistributedDataStore", "parameters": "(final ActorUtils actorUtils, final ClientIdentifier identifier)", "modifiers": "@VisibleForTesting", "return": "", "signature": " DistributedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier)", "full_signature": "@VisibleForTesting  DistributedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier)", "class_method_signature": "DistributedDataStore.DistributedDataStore(final ActorUtils actorUtils, final ClientIdentifier identifier)", "testcase": false, "constructor": true}, {"identifier": "createTransactionChain", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreTransactionChain", "signature": "DOMStoreTransactionChain createTransactionChain()", "full_signature": "@Override public DOMStoreTransactionChain createTransactionChain()", "class_method_signature": "DistributedDataStore.createTransactionChain()", "testcase": false, "constructor": false}, {"identifier": "newReadOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadTransaction", "signature": "DOMStoreReadTransaction newReadOnlyTransaction()", "full_signature": "@Override public DOMStoreReadTransaction newReadOnlyTransaction()", "class_method_signature": "DistributedDataStore.newReadOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "newWriteOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreWriteTransaction", "signature": "DOMStoreWriteTransaction newWriteOnlyTransaction()", "full_signature": "@Override public DOMStoreWriteTransaction newWriteOnlyTransaction()", "class_method_signature": "DistributedDataStore.newWriteOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "newReadWriteTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadWriteTransaction", "signature": "DOMStoreReadWriteTransaction newReadWriteTransaction()", "full_signature": "@Override public DOMStoreReadWriteTransaction newReadWriteTransaction()", "class_method_signature": "DistributedDataStore.newReadWriteTransaction()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DistributedDataStore.close()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DistributedDataStore.java"}, "focal_method": {"identifier": "newReadWriteTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadWriteTransaction", "body": "@Override\n    public DOMStoreReadWriteTransaction newReadWriteTransaction() {\n        getActorUtils().acquireTxCreationPermit();\n        return new TransactionProxy(txContextFactory, TransactionType.READ_WRITE);\n    }", "signature": "DOMStoreReadWriteTransaction newReadWriteTransaction()", "full_signature": "@Override public DOMStoreReadWriteTransaction newReadWriteTransaction()", "class_method_signature": "DistributedDataStore.newReadWriteTransaction()", "testcase": false, "constructor": false, "invocations": ["acquireTxCreationPermit", "getActorUtils"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}