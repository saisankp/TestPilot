{"test_class": {"identifier": "NativeLibraryLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Logger logger = LoggerFactory.getLogger(NativeLibraryLocatorTest.class);", "modifier": "final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NativeLibraryLocatorTest.class)", "var_name": "logger"}, {"original_string": "private final static String tmpDirProperty = \"java.io.tmpdir\";", "modifier": "private final static", "type": "String", "declarator": "tmpDirProperty = \"java.io.tmpdir\"", "var_name": "tmpDirProperty"}, {"original_string": "private String backup;", "modifier": "private", "type": "String", "declarator": "backup", "var_name": "backup"}, {"original_string": "private File testTmpDir;", "modifier": "private", "type": "File", "declarator": "testTmpDir", "var_name": "testTmpDir"}], "file": "geoclient-jni/src/test/java/gov/nyc/doitt/gis/geoclient/jni/util/NativeLibraryLocatorTest.java"}, "test_case": {"identifier": "testFind", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testFind() throws IOException {\n        NativeLibraryLocator locator = new NativeLibraryLocator(testTmpDir.getCanonicalPath());\n        File result = locator.find(getJniLibrary());\n        assertNotNull(result);\n        assertTrue(result.exists());\n    }", "signature": "void testFind()", "full_signature": "@Test void testFind()", "class_method_signature": "NativeLibraryLocatorTest.testFind()", "testcase": true, "constructor": false, "invocations": ["getCanonicalPath", "find", "getJniLibrary", "assertNotNull", "assertTrue", "exists"]}, "focal_class": {"identifier": "NativeLibraryLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static Logger logger = LoggerFactory.getLogger(NativeLibraryLocator.class);", "modifier": "final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NativeLibraryLocator.class)", "var_name": "logger"}, {"original_string": "private final String extractDir;", "modifier": "private final", "type": "String", "declarator": "extractDir", "var_name": "extractDir"}], "methods": [{"identifier": "NativeLibraryLocator", "parameters": "(String extractDir)", "modifiers": "public", "return": "", "signature": " NativeLibraryLocator(String extractDir)", "full_signature": "public  NativeLibraryLocator(String extractDir)", "class_method_signature": "NativeLibraryLocator.NativeLibraryLocator(String extractDir)", "testcase": false, "constructor": true}, {"identifier": "NativeLibraryLocator", "parameters": "()", "modifiers": "public", "return": "", "signature": " NativeLibraryLocator()", "full_signature": "public  NativeLibraryLocator()", "class_method_signature": "NativeLibraryLocator.NativeLibraryLocator()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(JniLibrary jniLibrary)", "modifiers": "public", "return": "File", "signature": "File find(JniLibrary jniLibrary)", "full_signature": "public File find(JniLibrary jniLibrary)", "class_method_signature": "NativeLibraryLocator.find(JniLibrary jniLibrary)", "testcase": false, "constructor": false}, {"identifier": "extractToDirectory", "parameters": "(JniLibrary jniLibrary, String destinationDir)", "modifiers": "protected", "return": "File", "signature": "File extractToDirectory(JniLibrary jniLibrary, String destinationDir)", "full_signature": "protected File extractToDirectory(JniLibrary jniLibrary, String destinationDir)", "class_method_signature": "NativeLibraryLocator.extractToDirectory(JniLibrary jniLibrary, String destinationDir)", "testcase": false, "constructor": false}, {"identifier": "extractToDefaultTempDirectory", "parameters": "(JniLibrary jniLibrary)", "modifiers": "protected", "return": "File", "signature": "File extractToDefaultTempDirectory(JniLibrary jniLibrary)", "full_signature": "protected File extractToDefaultTempDirectory(JniLibrary jniLibrary)", "class_method_signature": "NativeLibraryLocator.extractToDefaultTempDirectory(JniLibrary jniLibrary)", "testcase": false, "constructor": false}, {"identifier": "getResourceName", "parameters": "(JniLibrary jniLibrary)", "modifiers": "protected", "return": "String", "signature": "String getResourceName(JniLibrary jniLibrary)", "full_signature": "protected String getResourceName(JniLibrary jniLibrary)", "class_method_signature": "NativeLibraryLocator.getResourceName(JniLibrary jniLibrary)", "testcase": false, "constructor": false}, {"identifier": "resolveClassLoaderUrlResource", "parameters": "(String resourceName)", "modifiers": "protected", "return": "URL", "signature": "URL resolveClassLoaderUrlResource(String resourceName)", "full_signature": "protected URL resolveClassLoaderUrlResource(String resourceName)", "class_method_signature": "NativeLibraryLocator.resolveClassLoaderUrlResource(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "loadFromDirectory", "parameters": "(JniLibrary jniLibrary, File parentDir)", "modifiers": "protected", "return": "File", "signature": "File loadFromDirectory(JniLibrary jniLibrary, File parentDir)", "full_signature": "protected File loadFromDirectory(JniLibrary jniLibrary, File parentDir)", "class_method_signature": "NativeLibraryLocator.loadFromDirectory(JniLibrary jniLibrary, File parentDir)", "testcase": false, "constructor": false}, {"identifier": "getBuildDirectory", "parameters": "(JniLibrary jniLibrary)", "modifiers": "private", "return": "File", "signature": "File getBuildDirectory(JniLibrary jniLibrary)", "full_signature": "private File getBuildDirectory(JniLibrary jniLibrary)", "class_method_signature": "NativeLibraryLocator.getBuildDirectory(JniLibrary jniLibrary)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(URL source, File dest)", "modifiers": "private static", "return": "void", "signature": "void copy(URL source, File dest)", "full_signature": "private static void copy(URL source, File dest)", "class_method_signature": "NativeLibraryLocator.copy(URL source, File dest)", "testcase": false, "constructor": false}], "file": "geoclient-jni/src/main/java/gov/nyc/doitt/gis/geoclient/jni/util/NativeLibraryLocator.java"}, "focal_method": {"identifier": "find", "parameters": "(JniLibrary jniLibrary)", "modifiers": "public", "return": "File", "body": "public File find(JniLibrary jniLibrary) throws IOException {\n\n        if (this.extractDir != null) {\n            return extractToDirectory(jniLibrary, this.extractDir);\n        }\n\n        File libFile = extractToDefaultTempDirectory(jniLibrary);\n\n        if (libFile != null) {\n            return libFile;\n        }\n\n        File buildFile = getBuildDirectory(jniLibrary);\n        logger.warn(\n                \"Having panic attack and resorting to depraved hackery by searching build directory for shared library file:\");\n        logger.warn(buildFile.getCanonicalPath());\n        return loadFromDirectory(jniLibrary, buildFile);\n    }", "signature": "File find(JniLibrary jniLibrary)", "full_signature": "public File find(JniLibrary jniLibrary)", "class_method_signature": "NativeLibraryLocator.find(JniLibrary jniLibrary)", "testcase": false, "constructor": false, "invocations": ["extractToDirectory", "extractToDefaultTempDirectory", "getBuildDirectory", "warn", "warn", "getCanonicalPath", "loadFromDirectory"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}