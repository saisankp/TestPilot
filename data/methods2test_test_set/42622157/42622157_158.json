{"test_class": {"identifier": "CsarExporterTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/export/CsarExporterTest.java"}, "test_case": {"identifier": "testPutCsarInBlockchainAndImmutableStorage", "parameters": "()", "modifiers": "@Test @Disabled // todo check how to enable public", "return": "void", "body": "@Test\n    @Disabled\n    // todo check how to enable\n    public void testPutCsarInBlockchainAndImmutableStorage() throws Exception {\n        setRevisionTo(\"origin/plain\");\n        CsarExporter exporter = new CsarExporter();\n        DefinitionsChildId id = new ServiceTemplateId(\"http://plain.winery.opentosca.org/servicetemplates\", \"ServiceTemplateWithAllReqCapVariants\", false);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n        CompletableFuture<String> future = exporter.writeCsarAndSaveManifestInProvenanceLayer(RepositoryFactory.getRepository(), id, os);\n        String transactionHash = future.get();\n\n        assertNotNull(transactionHash);\n\n        try (InputStream inputStream = new ByteArrayInputStream(os.toByteArray());\n             ZipInputStream zis = new ZipInputStream(inputStream)) {\n            ManifestContents manifestContents = parseManifest(zis);\n\n            assertNotNull(manifestContents);\n\n            for (String section : manifestContents.getSectionNames()) {\n                assertNotNull(manifestContents.getAttributesForSection(section).get(TOSCAMetaFileAttributes.IMMUTABLE_ADDRESS));\n            }\n        }\n    }", "signature": "void testPutCsarInBlockchainAndImmutableStorage()", "full_signature": "@Test @Disabled // todo check how to enable public void testPutCsarInBlockchainAndImmutableStorage()", "class_method_signature": "CsarExporterTest.testPutCsarInBlockchainAndImmutableStorage()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "writeCsarAndSaveManifestInProvenanceLayer", "getRepository", "get", "assertNotNull", "toByteArray", "parseManifest", "assertNotNull", "getSectionNames", "assertNotNull", "get", "getAttributesForSection"]}, "focal_class": {"identifier": "CsarExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_TO_NAMESPACES_PROPERTIES = \"winery/Namespaces.properties\";", "modifier": "public static final", "type": "String", "declarator": "PATH_TO_NAMESPACES_PROPERTIES = \"winery/Namespaces.properties\"", "var_name": "PATH_TO_NAMESPACES_PROPERTIES"}, {"original_string": "public static final String PATH_TO_NAMESPACES_JSON = \"winery/Namespaces.json\";", "modifier": "public static final", "type": "String", "declarator": "PATH_TO_NAMESPACES_JSON = \"winery/Namespaces.json\"", "var_name": "PATH_TO_NAMESPACES_JSON"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CsarExporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CsarExporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String DEFINITONS_PATH_PREFIX = \"Definitions/\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITONS_PATH_PREFIX = \"Definitions/\"", "var_name": "DEFINITONS_PATH_PREFIX"}, {"original_string": "private static final String WINERY_TEMP_DIR_PREFIX = \"winerytmp\";", "modifier": "private static final", "type": "String", "declarator": "WINERY_TEMP_DIR_PREFIX = \"winerytmp\"", "var_name": "WINERY_TEMP_DIR_PREFIX"}], "methods": [{"identifier": "getDefinitionsName", "parameters": "(IRepository repository, DefinitionsChildId id)", "modifiers": "private static", "return": "String", "signature": "String getDefinitionsName(IRepository repository, DefinitionsChildId id)", "full_signature": "private static String getDefinitionsName(IRepository repository, DefinitionsChildId id)", "class_method_signature": "CsarExporter.getDefinitionsName(IRepository repository, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsFileName", "parameters": "(IRepository repository, DefinitionsChildId id)", "modifiers": "public static", "return": "String", "signature": "String getDefinitionsFileName(IRepository repository, DefinitionsChildId id)", "full_signature": "public static String getDefinitionsFileName(IRepository repository, DefinitionsChildId id)", "class_method_signature": "CsarExporter.getDefinitionsFileName(IRepository repository, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsPathInsideCSAR", "parameters": "(IRepository repository, DefinitionsChildId id)", "modifiers": "private static", "return": "String", "signature": "String getDefinitionsPathInsideCSAR(IRepository repository, DefinitionsChildId id)", "full_signature": "private static String getDefinitionsPathInsideCSAR(IRepository repository, DefinitionsChildId id)", "class_method_signature": "CsarExporter.getDefinitionsPathInsideCSAR(IRepository repository, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "writeCsarAndSaveManifestInProvenanceLayer", "parameters": "(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "modifiers": "public", "return": "CompletableFuture<String>", "signature": "CompletableFuture<String> writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "full_signature": "public CompletableFuture<String> writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "class_method_signature": "CsarExporter.writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeCsar", "parameters": "(IRepository repository, DefinitionsChildId entryId, OutputStream out, Map<String, Object> exportConfiguration)", "modifiers": "public", "return": "String", "signature": "String writeCsar(IRepository repository, DefinitionsChildId entryId, OutputStream out, Map<String, Object> exportConfiguration)", "full_signature": "public String writeCsar(IRepository repository, DefinitionsChildId entryId, OutputStream out, Map<String, Object> exportConfiguration)", "class_method_signature": "CsarExporter.writeCsar(IRepository repository, DefinitionsChildId entryId, OutputStream out, Map<String, Object> exportConfiguration)", "testcase": false, "constructor": false}, {"identifier": "calculateFileHashes", "parameters": "(Map<CsarContentProperties, CsarEntry> files)", "modifiers": "private", "return": "void", "signature": "void calculateFileHashes(Map<CsarContentProperties, CsarEntry> files)", "full_signature": "private void calculateFileHashes(Map<CsarContentProperties, CsarEntry> files)", "class_method_signature": "CsarExporter.calculateFileHashes(Map<CsarContentProperties, CsarEntry> files)", "testcase": false, "constructor": false}, {"identifier": "immutablyStoreRefFiles", "parameters": "(Map<CsarContentProperties, CsarEntry> filesToStore, IRepository repository)", "modifiers": "private", "return": "void", "signature": "void immutablyStoreRefFiles(Map<CsarContentProperties, CsarEntry> filesToStore, IRepository repository)", "full_signature": "private void immutablyStoreRefFiles(Map<CsarContentProperties, CsarEntry> filesToStore, IRepository repository)", "class_method_signature": "CsarExporter.immutablyStoreRefFiles(Map<CsarContentProperties, CsarEntry> filesToStore, IRepository repository)", "testcase": false, "constructor": false}, {"identifier": "addArtifactTemplateToZipFile", "parameters": "(ZipOutputStream zos, RepositoryRefBasedCsarEntry csarEntry,\n                                                CsarContentProperties fileProperties)", "modifiers": "protected", "return": "void", "signature": "void addArtifactTemplateToZipFile(ZipOutputStream zos, RepositoryRefBasedCsarEntry csarEntry,\n                                                CsarContentProperties fileProperties)", "full_signature": "protected void addArtifactTemplateToZipFile(ZipOutputStream zos, RepositoryRefBasedCsarEntry csarEntry,\n                                                CsarContentProperties fileProperties)", "class_method_signature": "CsarExporter.addArtifactTemplateToZipFile(ZipOutputStream zos, RepositoryRefBasedCsarEntry csarEntry,\n                                                CsarContentProperties fileProperties)", "testcase": false, "constructor": false}, {"identifier": "addCsarEntryToArchive", "parameters": "(ZipOutputStream zos, CsarEntry csarEntry,\n                                       CsarContentProperties csarContentProperties)", "modifiers": "private", "return": "void", "signature": "void addCsarEntryToArchive(ZipOutputStream zos, CsarEntry csarEntry,\n                                       CsarContentProperties csarContentProperties)", "full_signature": "private void addCsarEntryToArchive(ZipOutputStream zos, CsarEntry csarEntry,\n                                       CsarContentProperties csarContentProperties)", "class_method_signature": "CsarExporter.addCsarEntryToArchive(ZipOutputStream zos, CsarEntry csarEntry,\n                                       CsarContentProperties csarContentProperties)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "(Path path)", "modifiers": "private", "return": "void", "signature": "void deleteDirectory(Path path)", "full_signature": "private void deleteDirectory(Path path)", "class_method_signature": "CsarExporter.deleteDirectory(Path path)", "testcase": false, "constructor": false}, {"identifier": "addWorkingTreeToArchive", "parameters": "(ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "modifiers": "private", "return": "void", "signature": "void addWorkingTreeToArchive(ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "full_signature": "private void addWorkingTreeToArchive(ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "class_method_signature": "CsarExporter.addWorkingTreeToArchive(ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "testcase": false, "constructor": false}, {"identifier": "addWorkingTreeToArchive", "parameters": "(File file, ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "modifiers": "private", "return": "void", "signature": "void addWorkingTreeToArchive(File file, ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "full_signature": "private void addWorkingTreeToArchive(File file, ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "class_method_signature": "CsarExporter.addWorkingTreeToArchive(File file, ZipOutputStream zos, TArtifactTemplate template, Path rootDir, String archivePath)", "testcase": false, "constructor": false}, {"identifier": "addNamespacePrefixes", "parameters": "(IRepository repository, Map<CsarContentProperties, CsarEntry> refMap)", "modifiers": "private", "return": "void", "signature": "void addNamespacePrefixes(IRepository repository, Map<CsarContentProperties, CsarEntry> refMap)", "full_signature": "private void addNamespacePrefixes(IRepository repository, Map<CsarContentProperties, CsarEntry> refMap)", "class_method_signature": "CsarExporter.addNamespacePrefixes(IRepository repository, Map<CsarContentProperties, CsarEntry> refMap)", "testcase": false, "constructor": false}, {"identifier": "addSelfServiceMetaData", "parameters": "(IRepository repository, ServiceTemplateId entryId, String targetDir, Map<CsarContentProperties, CsarEntry> refMap)", "modifiers": "private", "return": "void", "signature": "void addSelfServiceMetaData(IRepository repository, ServiceTemplateId entryId, String targetDir, Map<CsarContentProperties, CsarEntry> refMap)", "full_signature": "private void addSelfServiceMetaData(IRepository repository, ServiceTemplateId entryId, String targetDir, Map<CsarContentProperties, CsarEntry> refMap)", "class_method_signature": "CsarExporter.addSelfServiceMetaData(IRepository repository, ServiceTemplateId entryId, String targetDir, Map<CsarContentProperties, CsarEntry> refMap)", "testcase": false, "constructor": false}, {"identifier": "putRefIntoRefMap", "parameters": "(String targetDir, Map<CsarContentProperties, CsarEntry> refMap, IRepository repository, GenericId id, String fileName)", "modifiers": "private", "return": "void", "signature": "void putRefIntoRefMap(String targetDir, Map<CsarContentProperties, CsarEntry> refMap, IRepository repository, GenericId id, String fileName)", "full_signature": "private void putRefIntoRefMap(String targetDir, Map<CsarContentProperties, CsarEntry> refMap, IRepository repository, GenericId id, String fileName)", "class_method_signature": "CsarExporter.putRefIntoRefMap(String targetDir, Map<CsarContentProperties, CsarEntry> refMap, IRepository repository, GenericId id, String fileName)", "testcase": false, "constructor": false}, {"identifier": "addLicenseAndReadmeFiles", "parameters": "(IRepository repository, DefinitionsChildId entryId, Map<CsarContentProperties, CsarEntry> refMap)", "modifiers": "protected", "return": "void", "signature": "void addLicenseAndReadmeFiles(IRepository repository, DefinitionsChildId entryId, Map<CsarContentProperties, CsarEntry> refMap)", "full_signature": "protected void addLicenseAndReadmeFiles(IRepository repository, DefinitionsChildId entryId, Map<CsarContentProperties, CsarEntry> refMap)", "class_method_signature": "CsarExporter.addLicenseAndReadmeFiles(IRepository repository, DefinitionsChildId entryId, Map<CsarContentProperties, CsarEntry> refMap)", "testcase": false, "constructor": false}, {"identifier": "addSelfServiceMetaData", "parameters": "(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "modifiers": "private", "return": "void", "signature": "void addSelfServiceMetaData(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "full_signature": "private void addSelfServiceMetaData(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "class_method_signature": "CsarExporter.addSelfServiceMetaData(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "testcase": false, "constructor": false}, {"identifier": "addSelfServiceFiles", "parameters": "(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "modifiers": "private", "return": "void", "signature": "void addSelfServiceFiles(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "full_signature": "private void addSelfServiceFiles(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "class_method_signature": "CsarExporter.addSelfServiceFiles(IRepository repository, ServiceTemplateId serviceTemplateId, Map<CsarContentProperties, CsarEntry> refMap)", "testcase": false, "constructor": false}, {"identifier": "addManifest", "parameters": "(IRepository repository, DefinitionsChildId id, Map<CsarContentProperties, CsarEntry> refMap,\n                               ZipOutputStream out, Map<String, Object> exportConfiguration)", "modifiers": "private", "return": "String", "signature": "String addManifest(IRepository repository, DefinitionsChildId id, Map<CsarContentProperties, CsarEntry> refMap,\n                               ZipOutputStream out, Map<String, Object> exportConfiguration)", "full_signature": "private String addManifest(IRepository repository, DefinitionsChildId id, Map<CsarContentProperties, CsarEntry> refMap,\n                               ZipOutputStream out, Map<String, Object> exportConfiguration)", "class_method_signature": "CsarExporter.addManifest(IRepository repository, DefinitionsChildId id, Map<CsarContentProperties, CsarEntry> refMap,\n                               ZipOutputStream out, Map<String, Object> exportConfiguration)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/export/CsarExporter.java"}, "focal_method": {"identifier": "writeCsarAndSaveManifestInProvenanceLayer", "parameters": "(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "modifiers": "public", "return": "CompletableFuture<String>", "body": "public CompletableFuture<String> writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)\n        throws IOException, RepositoryCorruptException, AccountabilityException, InterruptedException, ExecutionException {\n        LocalDateTime start = LocalDateTime.now();\n        AccountabilityManager accountabilityManager = AccountabilityManagerFactory.getAccountabilityManager();\n\n        Map<String, Object> exportConfiguration = new HashMap<>();\n        exportConfiguration.put(CsarExportConfiguration.INCLUDE_HASHES.name(), null);\n        exportConfiguration.put(CsarExportConfiguration.STORE_IMMUTABLY.name(), null);\n\n        String manifestString = this.writeCsar(repository, entryId, out, exportConfiguration);\n        String qNameWithComponentVersionOnly = VersionUtils.getQNameWithComponentVersionOnly(entryId);\n        LOGGER.debug(\"Preparing CSAR export (provenance) lasted {}\", Duration.between(LocalDateTime.now(), start).toString());\n\n        return accountabilityManager.storeFingerprint(qNameWithComponentVersionOnly, manifestString);\n    }", "signature": "CompletableFuture<String> writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "full_signature": "public CompletableFuture<String> writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "class_method_signature": "CsarExporter.writeCsarAndSaveManifestInProvenanceLayer(IRepository repository, DefinitionsChildId entryId, OutputStream out)", "testcase": false, "constructor": false, "invocations": ["now", "getAccountabilityManager", "put", "name", "put", "name", "writeCsar", "getQNameWithComponentVersionOnly", "debug", "toString", "between", "now", "storeFingerprint"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}