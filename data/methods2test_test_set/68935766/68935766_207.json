{"test_class": {"identifier": "PluginParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<Class<?>> environment = StubEnvironment.of(new Project(\"project_name\", \"1.0.0\", \"\", List.of(), \"\", \"\"));", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(new Project(\"project_name\", \"1.0.0\", \"\", List.of(), \"\", \"\"))", "var_name": "environment"}, {"original_string": "StubParser parser = new StubParser(environment);", "modifier": "", "type": "StubParser", "declarator": "parser = new StubParser(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/PluginParserTest.java"}, "test_case": {"identifier": "parse_errors", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void parse_errors() {\n        parser.parse(Errors.class);\n        \n        \n        verify(environment).error(Errors.class, \"\\\"a !\\\" is not a valid plugin name, should contain only alphanumeric characters and \\\"_\\\"\");\n        verify(environment).warn(Errors.class, \"\\\"1\\\" may be malformed, version should follow SemVer, https://semver.org/\");\n    }", "signature": "void parse_errors()", "full_signature": "@Test void parse_errors()", "class_method_signature": "PluginParserTest.parse_errors()", "testcase": true, "constructor": false, "invocations": ["parse", "error", "verify", "warn", "verify"]}, "focal_class": {"identifier": "PluginParser", "superclass": "extends Parser<T>", "interfaces": "", "fields": [{"original_string": "Matcher matcher;", "modifier": "", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "type", "parameters": "(Environment<Class<?>> environment)", "modifiers": "public static", "return": "PluginParser<Class<?>>", "signature": "PluginParser<Class<?>> type(Environment<Class<?>> environment)", "full_signature": "public static PluginParser<Class<?>> type(Environment<Class<?>> environment)", "class_method_signature": "PluginParser.type(Environment<Class<?>> environment)", "testcase": false, "constructor": false}, {"identifier": "element", "parameters": "(Environment<Element> environment, Elements elements, Types types)", "modifiers": "public static", "return": "PluginParser<Element>", "signature": "PluginParser<Element> element(Environment<Element> environment, Elements elements, Types types)", "full_signature": "public static PluginParser<Element> element(Environment<Element> environment, Elements elements, Types types)", "class_method_signature": "PluginParser.element(Environment<Element> environment, Elements elements, Types types)", "testcase": false, "constructor": false}, {"identifier": "PluginParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " PluginParser(Environment<T> environment)", "full_signature": "public  PluginParser(Environment<T> environment)", "class_method_signature": "PluginParser.PluginParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@Override protected", "return": "void", "signature": "void check(Set<T> types)", "full_signature": "@Override protected void check(Set<T> types)", "class_method_signature": "PluginParser.check(Set<T> types)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type)", "modifiers": "protected abstract", "return": "void", "signature": "void check(T type)", "full_signature": "protected abstract void check(T type)", "class_method_signature": "PluginParser.check(T type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "PluginParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "stringify", "parameters": "(T type)", "modifiers": "protected abstract", "return": "String", "signature": "String stringify(T type)", "full_signature": "protected abstract String stringify(T type)", "class_method_signature": "PluginParser.stringify(T type)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/PluginParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void parse(T type) {\n        var plugin = environment.resolver.any(type, Plugin.class);\n        \n        environment.mappings.put(\"main\", stringify(type));\n        \n        var name = plugin.name().isEmpty() ? environment.project.name : plugin.name();\n        if (!matcher.reset(name).matches()) {\n            environment.error(type, format(name, \"is not a valid plugin name\", \"should contain only alphanumeric characters and \\\"_\\\"\"));\n        }\n        \n        environment.mappings.put(\"name\", name);\n        \n        var version = plugin.version().isEmpty() ? environment.project.version : plugin.version();\n        if (!VERSIONING.matcher(version).matches()) {\n            environment.warn(type, format(version, \"may be malformed\", \"version should follow SemVer, https://semver.org/\"));\n        }\n        \n        environment.mappings.put(\"version\", version);\n    }", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "PluginParser.parse(T type)", "testcase": false, "constructor": false, "invocations": ["any", "put", "stringify", "isEmpty", "name", "name", "matches", "reset", "error", "format", "put", "isEmpty", "version", "version", "matches", "matcher", "warn", "format", "put"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}