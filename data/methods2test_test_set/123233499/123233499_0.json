{"test_class": {"identifier": "UserServiceTest", "superclass": "extends BaseServiceTest", "interfaces": "", "fields": [{"original_string": "private UserDao userDao;", "modifier": "private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "private UserService userService;", "modifier": "private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "chapter18/src/test/java/com/smart/service/UserServiceTest.java"}, "test_case": {"identifier": "register", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void register() throws UserExistException{\n\t\tUser user = new User();\n\t\tuser.setUserName(\"testwww\");\n\t\tuser.setPassword(\"1234\");\n\t\t\n\t\tdoAnswer(new Answer<User>() {\n\t\t\tpublic User answer(InvocationOnMock invocation) {\n\t\t\t\tObject[] args = invocation.getArguments();\n\t\t\t\tUser user = (User) args[0];\n\t\t\t\tif (user != null) {\n\t\t\t\t\tuser.setUserId(1);\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t}\n\t\t}).when(userDao).save(user);\n\t\t\t\n\t\tuserService.register(user);\n\t\tassertEquals(user.getUserId(), 1);\n\t\tverify(userDao, times(1)).save(user);\n\t}", "signature": "void register()", "full_signature": "@Test public void register()", "class_method_signature": "UserServiceTest.register()", "testcase": true, "constructor": false, "invocations": ["setUserName", "setPassword", "save", "when", "doAnswer", "getArguments", "setUserId", "register", "assertEquals", "getUserId", "save", "verify", "times"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserDao userDao;", "modifier": "private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "private LoginLogDao loginLogDao;", "modifier": "private", "type": "LoginLogDao", "declarator": "loginLogDao", "var_name": "loginLogDao"}], "methods": [{"identifier": "setUserDao", "parameters": "(UserDao userDao)", "modifiers": "@Autowired public", "return": "void", "signature": "void setUserDao(UserDao userDao)", "full_signature": "@Autowired public void setUserDao(UserDao userDao)", "class_method_signature": "UserService.setUserDao(UserDao userDao)", "testcase": false, "constructor": false}, {"identifier": "setLoginLogDao", "parameters": "(LoginLogDao loginLogDao)", "modifiers": "@Autowired public", "return": "void", "signature": "void setLoginLogDao(LoginLogDao loginLogDao)", "full_signature": "@Autowired public void setLoginLogDao(LoginLogDao loginLogDao)", "class_method_signature": "UserService.setLoginLogDao(LoginLogDao loginLogDao)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(User user)", "modifiers": "public", "return": "void", "signature": "void register(User user)", "full_signature": "public void register(User user)", "class_method_signature": "UserService.register(User user)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(User user)", "modifiers": "public", "return": "void", "signature": "void update(User user)", "full_signature": "public void update(User user)", "class_method_signature": "UserService.update(User user)", "testcase": false, "constructor": false}, {"identifier": "getUserByUserName", "parameters": "(String userName)", "modifiers": "public", "return": "User", "signature": "User getUserByUserName(String userName)", "full_signature": "public User getUserByUserName(String userName)", "class_method_signature": "UserService.getUserByUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(int userId)", "modifiers": "public", "return": "User", "signature": "User getUserById(int userId)", "full_signature": "public User getUserById(int userId)", "class_method_signature": "UserService.getUserById(int userId)", "testcase": false, "constructor": false}, {"identifier": "lockUser", "parameters": "(String userName)", "modifiers": "public", "return": "void", "signature": "void lockUser(String userName)", "full_signature": "public void lockUser(String userName)", "class_method_signature": "UserService.lockUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "unlockUser", "parameters": "(String userName)", "modifiers": "public", "return": "void", "signature": "void unlockUser(String userName)", "full_signature": "public void unlockUser(String userName)", "class_method_signature": "UserService.unlockUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "queryUserByUserName", "parameters": "(String userName)", "modifiers": "public", "return": "List<User>", "signature": "List<User> queryUserByUserName(String userName)", "full_signature": "public List<User> queryUserByUserName(String userName)", "class_method_signature": "UserService.queryUserByUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getAllUsers", "parameters": "()", "modifiers": "public", "return": "List<User>", "signature": "List<User> getAllUsers()", "full_signature": "public List<User> getAllUsers()", "class_method_signature": "UserService.getAllUsers()", "testcase": false, "constructor": false}, {"identifier": "loginSuccess", "parameters": "(User user)", "modifiers": "public", "return": "void", "signature": "void loginSuccess(User user)", "full_signature": "public void loginSuccess(User user)", "class_method_signature": "UserService.loginSuccess(User user)", "testcase": false, "constructor": false}], "file": "chapter18/src/main/java/com/smart/service/UserService.java"}, "focal_method": {"identifier": "register", "parameters": "(User user)", "modifiers": "public", "return": "void", "body": "public void register(User user) throws UserExistException{\n\t\tUser u = this.getUserByUserName(user.getUserName());\n\t\tif(u != null){\n\t\t    throw new UserExistException(\"\u7528\u6237\u540d\u5df2\u7ecf\u5b58\u5728\");\n\t\t}else{\n\t\t    user.setCredit(100);\n            user.setUserType(1);\n            userDao.save(user);\n\t\t}\n\t}", "signature": "void register(User user)", "full_signature": "public void register(User user)", "class_method_signature": "UserService.register(User user)", "testcase": false, "constructor": false, "invocations": ["getUserByUserName", "getUserName", "setCredit", "setUserType", "save"]}, "repository": {"repo_id": 123233499, "url": "https://github.com/liulei3/spring4.x", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 8951, "license": "licensed"}}