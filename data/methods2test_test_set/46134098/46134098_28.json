{"test_class": {"identifier": "AmdJsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/amdjs/input.js\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/amdjs/input.js\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/amdjs/write-output.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/amdjs/write-output.js\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-1.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-1.js\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-2.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-2.js\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File MERGE_INPUT_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-3.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-3.js\")", "var_name": "MERGE_INPUT_3_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-1.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-1.js\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-2.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-2.js\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-3.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-3.js\")", "var_name": "EXPECTED_MERGE_3_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final AmdJsResource res = new AmdJsResource();", "modifier": "private static final", "type": "AmdJsResource", "declarator": "res = new AmdJsResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/AmdJsResourceTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() throws IOException, ResourceFilterException {\n        File tempFile;\n\n        tempFile = File.createTempFile(this.getClass().getSimpleName(), \".js\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile);\n                InputStream is = new FileInputStream(MERGE_INPUT_1_FILE)) {\n            res.merge(is, os, MERGE_BUNDLE, new FilterOptions(Locale.ENGLISH));\n            os.flush();\n            assertTrue(ResourceTestUtil.compareFiles(EXPECTED_MERGE_1_FILE, tempFile));\n        }\n\n        tempFile = File.createTempFile(this.getClass().getSimpleName(), \".js\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile);\n                InputStream is = new FileInputStream(MERGE_INPUT_2_FILE)) {\n            res.merge(is, os, MERGE_BUNDLE, new FilterOptions(Locale.ENGLISH));\n            os.flush();\n            assertTrue(ResourceTestUtil.compareFiles(EXPECTED_MERGE_2_FILE, tempFile));\n        }\n\n        tempFile = File.createTempFile(this.getClass().getSimpleName(), \".js\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile);\n                InputStream is = new FileInputStream(MERGE_INPUT_3_FILE)) {\n            res.merge(is, os, MERGE_BUNDLE, new FilterOptions(Locale.JAPANESE));\n            os.flush();\n            assertTrue(ResourceTestUtil.compareFiles(EXPECTED_MERGE_3_FILE, tempFile));\n        }\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "AmdJsResourceTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "getSimpleName", "getClass", "deleteOnExit", "merge", "flush", "assertTrue", "compareFiles", "createTempFile", "getSimpleName", "getClass", "deleteOnExit", "merge", "flush", "assertTrue", "compareFiles", "createTempFile", "getSimpleName", "getClass", "deleteOnExit", "merge", "flush", "assertTrue", "compareFiles"]}, "focal_class": {"identifier": "AmdJsResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "AmdJsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AmdJsResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AmdJsResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String str, Character quoteChar)", "modifiers": "static", "return": "String", "signature": "String escapeString(String str, Character quoteChar)", "full_signature": "static String escapeString(String str, Character quoteChar)", "class_method_signature": "AmdJsResource.escapeString(String str, Character quoteChar)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/AmdJsResource.java"}, "focal_method": {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options) throws IOException, ResourceFilterException {\n\n        // Load entire base content to CharSequence\n        CharArrayWriter caw = new CharArrayWriter();\n        try (InputStreamReader reader = new InputStreamReader(new BomInputStream(baseStream), \"UTF-8\")) {\n            char[] buf = new char[1024];\n            int len;\n            while ((len = reader.read(buf)) >= 0) {\n                caw.write(buf, 0, len);\n            }\n        }\n\n        char[] baseContent = caw.toCharArray();\n        CharArrayReader car = new CharArrayReader(baseContent);\n\n        // Parse base JS and extract key-value data\n        AstRoot root = new Parser().parse(car,  null , 1);\n        KeyValueVisitor visitor = new KeyValueVisitor();\n        root.visitAll(visitor);\n        LinkedHashMap<String, ValueData> baseKVMap = visitor.elements;\n\n        // Merge translated value\n        Map<String, String> kvMap = Utils.createKeyValueMap(languageBundle.getResourceStrings());\n\n        try (OutputStreamWriter writer = new OutputStreamWriter(new BufferedOutputStream(outStream), StandardCharsets.UTF_8)) {\n            int idx = 0;    // current index in baseContent\n            for (Entry<String, ValueData> baseEntry : baseKVMap.entrySet()) {\n                String key = baseEntry.getKey();\n                ValueData valData = baseEntry.getValue();\n                int start = valData.getStart();\n                int end = valData.getEnd();\n\n                if (idx < start) {\n                    // write out text up to the start of the original key-value expression\n                    writer.write(baseContent, idx, start - idx);\n                    idx = start;\n                }\n\n                String translatedValue = kvMap.get(key);\n                if (translatedValue == null) {\n                    // use original value\n                    writer.write(baseContent, idx, end - idx);\n                } else {\n                    // use translated value\n\n                    // opening quote\n                    char quote = baseContent[idx];\n                    writer.write(quote);\n\n                    // translation value\n                    writer.write(escapeString(translatedValue, quote));\n\n                    // closing quote\n                    assert quote == baseContent[end - 1];\n                    writer.write(quote);\n                }\n                idx = end;\n            }\n            if (idx < baseContent.length) {\n                writer.write(baseContent, idx, baseContent.length - idx);\n            }\n        }\n    }", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AmdJsResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["read", "write", "toCharArray", "parse", "visitAll", "createKeyValueMap", "getResourceStrings", "entrySet", "getKey", "getValue", "getStart", "getEnd", "write", "get", "write", "write", "write", "escapeString", "write", "write"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}