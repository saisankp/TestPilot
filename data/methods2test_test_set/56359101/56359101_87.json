{"test_class": {"identifier": "XenHypervisorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XenHypervisor xenHypervisor;", "modifier": "private", "type": "XenHypervisor", "declarator": "xenHypervisor", "var_name": "xenHypervisor"}, {"original_string": "@Mock\n    private ThreadUtils threadUtils;", "modifier": "@Mock\n    private", "type": "ThreadUtils", "declarator": "threadUtils", "var_name": "threadUtils"}, {"original_string": "@Mock\n    private HostUtils hostUtils;", "modifier": "@Mock\n    private", "type": "HostUtils", "declarator": "hostUtils", "var_name": "hostUtils"}, {"original_string": "@Mock\n    private ShellCommandUtils shellCommandUtils;", "modifier": "@Mock\n    private", "type": "ShellCommandUtils", "declarator": "shellCommandUtils", "var_name": "shellCommandUtils"}, {"original_string": "@Mock\n    private HostService hostService;", "modifier": "@Mock\n    private", "type": "HostService", "declarator": "hostService", "var_name": "hostService"}, {"original_string": "private static final String EXPECTED_FIND_ARP_FOR_HOST_COMMAND = \"arp -n %s\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_FIND_ARP_FOR_HOST_COMMAND = \"arp -n %s\"", "var_name": "EXPECTED_FIND_ARP_FOR_HOST_COMMAND"}, {"original_string": "private static final String EXPECTED_REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT = \".+([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).+\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT = \".+([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).+\"", "var_name": "EXPECTED_REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT"}, {"original_string": "private Pattern expectedCompileRegexToGetArp = Pattern.compile(EXPECTED_REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT);", "modifier": "private", "type": "Pattern", "declarator": "expectedCompileRegexToGetArp = Pattern.compile(EXPECTED_REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT)", "var_name": "expectedCompileRegexToGetArp"}, {"original_string": "private Connection conn;", "modifier": "private", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private Host host;", "modifier": "private", "type": "Host", "declarator": "host", "var_name": "host"}], "file": "autonomic-administration-plugin/src/test/java/br/com/autonomiccs/autonomic/administration/plugin/hypervisors/xenserver/XenHypervisorTest.java"}, "test_case": {"identifier": "shutdownHostTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shutdownHostTest() throws Exception {\n        HostVO hostVo = setupShutdownHostTest();\n        xenHypervisor.shutdownHost(hostVo);\n        verifyShutdownHostCalledMethods();\n    }", "signature": "void shutdownHostTest()", "full_signature": "@Test public void shutdownHostTest()", "class_method_signature": "XenHypervisorTest.shutdownHostTest()", "testcase": true, "constructor": false, "invocations": ["setupShutdownHostTest", "shutdownHost", "verifyShutdownHostCalledMethods"]}, "focal_class": {"identifier": "XenHypervisor", "superclass": "", "interfaces": "implements HypervisorHost", "fields": [{"original_string": "protected static final String FIND_ARP_FOR_HOST_COMMAND = \"arp -n %s\";", "modifier": "protected static final", "type": "String", "declarator": "FIND_ARP_FOR_HOST_COMMAND = \"arp -n %s\"", "var_name": "FIND_ARP_FOR_HOST_COMMAND"}, {"original_string": "protected static final String REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT = \".+([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).+\";", "modifier": "protected static final", "type": "String", "declarator": "REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT = \".+([A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}).+\"", "var_name": "REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT"}, {"original_string": "protected XenServerConnectionPool connPool = XenServerConnectionPool.getInstance();", "modifier": "protected", "type": "XenServerConnectionPool", "declarator": "connPool = XenServerConnectionPool.getInstance()", "var_name": "connPool"}, {"original_string": "protected final Pattern compileRegexToGetArp = Pattern.compile(REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT);", "modifier": "protected final", "type": "Pattern", "declarator": "compileRegexToGetArp = Pattern.compile(REGEX_GET_ARP_FROM_ARP_COMMAND_OUTPUT)", "var_name": "compileRegexToGetArp"}, {"original_string": "@Inject\n    protected ThreadUtils threadUtils;", "modifier": "@Inject\n    protected", "type": "ThreadUtils", "declarator": "threadUtils", "var_name": "threadUtils"}, {"original_string": "@Inject\n    protected HostUtils hostUtils;", "modifier": "@Inject\n    protected", "type": "HostUtils", "declarator": "hostUtils", "var_name": "hostUtils"}, {"original_string": "@Inject\n    protected ShellCommandUtils shellCommandUtils;", "modifier": "@Inject\n    protected", "type": "ShellCommandUtils", "declarator": "shellCommandUtils", "var_name": "shellCommandUtils"}, {"original_string": "@Inject\n    protected HostService hostService;", "modifier": "@Inject\n    protected", "type": "HostService", "declarator": "hostService", "var_name": "hostService"}], "methods": [{"identifier": "shutdownHost", "parameters": "(HostVO hostVo)", "modifiers": "@Override public", "return": "void", "signature": "void shutdownHost(HostVO hostVo)", "full_signature": "@Override public void shutdownHost(HostVO hostVo)", "class_method_signature": "XenHypervisor.shutdownHost(HostVO hostVo)", "testcase": false, "constructor": false}, {"identifier": "getHostPrivateMacAddress", "parameters": "(HostVO hostVo)", "modifiers": "protected", "return": "String", "signature": "String getHostPrivateMacAddress(HostVO hostVo)", "full_signature": "protected String getHostPrivateMacAddress(HostVO hostVo)", "class_method_signature": "XenHypervisor.getHostPrivateMacAddress(HostVO hostVo)", "testcase": false, "constructor": false}, {"identifier": "disableAndShutdownHost", "parameters": "(Connection conn, Host host)", "modifiers": "protected", "return": "void", "signature": "void disableAndShutdownHost(Connection conn, Host host)", "full_signature": "protected void disableAndShutdownHost(Connection conn, Host host)", "class_method_signature": "XenHypervisor.disableAndShutdownHost(Connection conn, Host host)", "testcase": false, "constructor": false}, {"identifier": "changeMasterIfNeeded", "parameters": "(Connection conn, Host master, String hostUuid)", "modifiers": "protected", "return": "void", "signature": "void changeMasterIfNeeded(Connection conn, Host master, String hostUuid)", "full_signature": "protected void changeMasterIfNeeded(Connection conn, Host master, String hostUuid)", "class_method_signature": "XenHypervisor.changeMasterIfNeeded(Connection conn, Host master, String hostUuid)", "testcase": false, "constructor": false}, {"identifier": "isLastHostOnPool", "parameters": "(Connection conn)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLastHostOnPool(Connection conn)", "full_signature": "protected boolean isLastHostOnPool(Connection conn)", "class_method_signature": "XenHypervisor.isLastHostOnPool(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "getMasterHost", "parameters": "(Connection conn)", "modifiers": "protected", "return": "Host", "signature": "Host getMasterHost(Connection conn)", "full_signature": "protected Host getMasterHost(Connection conn)", "class_method_signature": "XenHypervisor.getMasterHost(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "changePoolMasterHost", "parameters": "(Connection conn, String hostUuid)", "modifiers": "protected", "return": "void", "signature": "void changePoolMasterHost(Connection conn, String hostUuid)", "full_signature": "protected void changePoolMasterHost(Connection conn, String hostUuid)", "class_method_signature": "XenHypervisor.changePoolMasterHost(Connection conn, String hostUuid)", "testcase": false, "constructor": false}, {"identifier": "waitChangePoolMasterHost", "parameters": "(Host master, Connection conn, String hostUuid)", "modifiers": "protected", "return": "void", "signature": "void waitChangePoolMasterHost(Host master, Connection conn, String hostUuid)", "full_signature": "protected void waitChangePoolMasterHost(Host master, Connection conn, String hostUuid)", "class_method_signature": "XenHypervisor.waitChangePoolMasterHost(Host master, Connection conn, String hostUuid)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(HostVO host)", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnection(HostVO host)", "full_signature": "protected Connection getConnection(HostVO host)", "class_method_signature": "XenHypervisor.getConnection(HostVO host)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "(Map<String, String> params)", "modifiers": "protected", "return": "String", "signature": "String getUsername(Map<String, String> params)", "full_signature": "protected String getUsername(Map<String, String> params)", "class_method_signature": "XenHypervisor.getUsername(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "(Map<String, String> params)", "modifiers": "protected", "return": "Queue<String>", "signature": "Queue<String> getPassword(Map<String, String> params)", "full_signature": "protected Queue<String> getPassword(Map<String, String> params)", "class_method_signature": "XenHypervisor.getPassword(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "supportsHypervisor", "parameters": "(HypervisorType hypervisorType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsHypervisor(HypervisorType hypervisorType)", "full_signature": "@Override public boolean supportsHypervisor(HypervisorType hypervisorType)", "class_method_signature": "XenHypervisor.supportsHypervisor(HypervisorType hypervisorType)", "testcase": false, "constructor": false}], "file": "autonomic-administration-plugin/src/main/java/br/com/autonomiccs/autonomic/administration/plugin/hypervisors/xenserver/XenHypervisor.java"}, "focal_method": {"identifier": "shutdownHost", "parameters": "(HostVO hostVo)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void shutdownHost(HostVO hostVo) {\n        String privateMacAddress = getHostPrivateMacAddress(hostVo);\n        hostService.updateHostPrivaceMacAddress(hostVo, privateMacAddress);\n\n        Connection conn = getConnection(hostVo);\n        String hostToDeactivatedUuid = hostVo.getGuid();\n\n        try {\n            Host master = getMasterHost(conn);\n            changeMasterIfNeeded(conn, master, hostToDeactivatedUuid);\n\n            Host host = Host.getByUuid(conn, hostToDeactivatedUuid);\n            String hostAddress = host.getAddress(conn);\n\n            disableAndShutdownHost(conn, host);\n\n            do {\n                threadUtils.sleepThread(3);\n            } while (hostUtils.isHostReachable(hostAddress));\n\n        } catch (Exception e) {\n            throw new CloudRuntimeException(String.format(\"Could not shut down host [uuid=%s]\", hostToDeactivatedUuid), e);\n        }\n    }", "signature": "void shutdownHost(HostVO hostVo)", "full_signature": "@Override public void shutdownHost(HostVO hostVo)", "class_method_signature": "XenHypervisor.shutdownHost(HostVO hostVo)", "testcase": false, "constructor": false, "invocations": ["getHostPrivateMacAddress", "updateHostPrivaceMacAddress", "getConnection", "getGuid", "getMasterHost", "changeMasterIfNeeded", "getByUuid", "getAddress", "disableAndShutdownHost", "sleepThread", "isHostReachable", "format"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}