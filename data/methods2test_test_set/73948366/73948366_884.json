{"test_class": {"identifier": "DynamoDBClientFetcherImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcherImplTest.java"}, "test_case": {"identifier": "testGetClientWitSpecifiedRegion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetClientWitSpecifiedRegion() {\n        System.setProperty(ZTS_PROP_DYNAMODB_REGION, \"test.region\");\n        DynamoDBClientFetcher dynamoDBClientFetcher = DynamoDBClientFetcherFactory.getDynamoDBClientFetcher();\n        PrivateKeyStore keyStore = Mockito.mock(PrivateKeyStore.class);\n        ZTSClientNotificationSender ztsClientNotificationSender = Mockito.mock(ZTSClientNotificationSender.class);\n        AmazonDynamoDB dynamoDBClient = dynamoDBClientFetcher.getDynamoDBClient(ztsClientNotificationSender, keyStore).getAmazonDynamoDB();\n        assertNotNull(dynamoDBClient);\n        System.clearProperty(ZTS_PROP_DYNAMODB_REGION);\n    }", "signature": "void testGetClientWitSpecifiedRegion()", "full_signature": "@Test public void testGetClientWitSpecifiedRegion()", "class_method_signature": "DynamoDBClientFetcherImplTest.testGetClientWitSpecifiedRegion()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getDynamoDBClientFetcher", "mock", "mock", "getAmazonDynamoDB", "getDynamoDBClient", "assertNotNull", "clearProperty"]}, "focal_class": {"identifier": "DynamoDBClientFetcherImpl", "superclass": "", "interfaces": "implements DynamoDBClientFetcher", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcherImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcherImpl.class)", "var_name": "LOGGER"}, {"original_string": "private String defaultAwsRegion;", "modifier": "private", "type": "String", "declarator": "defaultAwsRegion", "var_name": "defaultAwsRegion"}], "methods": [{"identifier": "DynamoDBClientFetcherImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " DynamoDBClientFetcherImpl()", "full_signature": "public  DynamoDBClientFetcherImpl()", "class_method_signature": "DynamoDBClientFetcherImpl.DynamoDBClientFetcherImpl()", "testcase": false, "constructor": true}, {"identifier": "DynamoDBClientFetcherImpl", "parameters": "(String defaultAwsRegion)", "modifiers": "public", "return": "", "signature": " DynamoDBClientFetcherImpl(String defaultAwsRegion)", "full_signature": "public  DynamoDBClientFetcherImpl(String defaultAwsRegion)", "class_method_signature": "DynamoDBClientFetcherImpl.DynamoDBClientFetcherImpl(String defaultAwsRegion)", "testcase": false, "constructor": true}, {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "DynamoDBClientAndCredentials", "signature": "DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": "@Override public DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBClientFetcherImpl.getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getAWSRegion", "parameters": "(final String settingRegion)", "modifiers": "", "return": "String", "signature": "String getAWSRegion(final String settingRegion)", "full_signature": " String getAWSRegion(final String settingRegion)", "class_method_signature": "DynamoDBClientFetcherImpl.getAWSRegion(final String settingRegion)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticatedDynamoDBClient", "parameters": "(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "modifiers": "private", "return": "DynamoDBClientAndCredentials", "signature": "DynamoDBClientAndCredentials getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "full_signature": "private DynamoDBClientAndCredentials getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "class_method_signature": "DynamoDBClientFetcherImpl.getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "modifiers": "private", "return": "AWSCredentialsProviderImpl", "signature": "AWSCredentialsProviderImpl getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "full_signature": "private AWSCredentialsProviderImpl getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "class_method_signature": "DynamoDBClientFetcherImpl.getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcherImpl.java"}, "focal_method": {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "DynamoDBClientAndCredentials", "body": "@Override\n    public DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore) {\n        // if we're given key/cert path settings then\n        // we'll deal with aws temporary credentials otherwise\n        // we'll assume we're running in aws thus our ec2 already\n        // has credentials to access dynamodb\n        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings(keyStore);\n\n        if (dynamoDBClientSettings.areCredentialsProvided()) {\n            LOGGER.info(\"DynamoDB Client will use temporary AWS credentials\");\n            return getAuthenticatedDynamoDBClient(dynamoDBClientSettings, ztsClientNotificationSender);\n        } else {\n            LOGGER.info(\"DynamoDB client will use existing AWS authentication\");\n            AmazonDynamoDB client = AmazonDynamoDBClientBuilder\n                    .standard()\n                    .withRegion(getAWSRegion(dynamoDBClientSettings.getRegion()))\n                    .build();\n            return new DynamoDBClientAndCredentials(client, null);\n        }\n    }", "signature": "DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": "@Override public DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBClientFetcherImpl.getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["areCredentialsProvided", "info", "getAuthenticatedDynamoDBClient", "info", "build", "withRegion", "standard", "getAWSRegion", "getRegion"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}