{"test_class": {"identifier": "QueueCircuitBreakerRulePatternToCircuitMappingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private RuleProvider ruleProvider;", "modifier": "private", "type": "RuleProvider", "declarator": "ruleProvider", "var_name": "ruleProvider"}, {"original_string": "private List<Rule> rules;", "modifier": "private", "type": "List<Rule>", "declarator": "rules", "var_name": "rules"}, {"original_string": "private List<Rule> rulesAfterUpdate;", "modifier": "private", "type": "List<Rule>", "declarator": "rulesAfterUpdate", "var_name": "rulesAfterUpdate"}, {"original_string": "private QueueCircuitBreakerRulePatternToCircuitMapping mapping;", "modifier": "private", "type": "QueueCircuitBreakerRulePatternToCircuitMapping", "declarator": "mapping", "var_name": "mapping"}, {"original_string": "private final String RULES_STORAGE_INITIAL = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/js/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "RULES_STORAGE_INITIAL = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/js/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\"", "var_name": "RULES_STORAGE_INITIAL"}, {"original_string": "private final String RULES_STORAGE_AFTER_UPDATE = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/pages/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/videos/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "RULES_STORAGE_AFTER_UPDATE = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/pages/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/videos/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\"", "var_name": "RULES_STORAGE_AFTER_UPDATE"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/util/QueueCircuitBreakerRulePatternToCircuitMappingTest.java"}, "test_case": {"identifier": "testGetCircuitFromRequestUri", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCircuitFromRequestUri(TestContext context){\n        context.assertNotNull(rules);\n        context.assertNotNull(rulesAfterUpdate);\n        context.assertEquals(3, rules.size());\n        context.assertEquals(4, rulesAfterUpdate.size());\n\n        List<PatternAndCircuitHash> patternAndCircuitHashes = mapping.updateRulePatternToCircuitMapping(rules);\n        context.assertEquals(0, patternAndCircuitHashes.size());\n\n        String circuit_1 = mapping.getCircuitFromRequestUri(\"/playground/img/test.jpg\").getCircuitHash();\n        context.assertNotNull(circuit_1);\n        String circuit_2 = mapping.getCircuitFromRequestUri(\"/playground/js/code.js\").getCircuitHash();\n        context.assertNotNull(circuit_2);\n        context.assertNotEquals(circuit_1, circuit_2);\n\n        String circuit_2a = mapping.getCircuitFromRequestUri(\"/playground/js/another.js\").getCircuitHash();\n        context.assertNotNull(circuit_2a);\n        context.assertEquals(circuit_2, circuit_2a);\n\n        PatternAndCircuitHash circuit_3 = mapping.getCircuitFromRequestUri(\"/playground/unknown/uri\");\n        context.assertNull(circuit_3);\n    }", "signature": "void testGetCircuitFromRequestUri(TestContext context)", "full_signature": "@Test public void testGetCircuitFromRequestUri(TestContext context)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMappingTest.testGetCircuitFromRequestUri(TestContext context)", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "assertEquals", "size", "assertEquals", "size", "updateRulePatternToCircuitMapping", "assertEquals", "size", "getCircuitHash", "getCircuitFromRequestUri", "assertNotNull", "getCircuitHash", "getCircuitFromRequestUri", "assertNotNull", "assertNotEquals", "getCircuitHash", "getCircuitFromRequestUri", "assertNotNull", "assertEquals", "getCircuitFromRequestUri", "assertNull"]}, "focal_class": {"identifier": "QueueCircuitBreakerRulePatternToCircuitMapping", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(QueueCircuitBreakerRulePatternToCircuitMapping.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueueCircuitBreakerRulePatternToCircuitMapping.class)", "var_name": "log"}, {"original_string": "private List<PatternAndCircuitHash> rulePatternToCircuitMapping = new ArrayList<>();", "modifier": "private", "type": "List<PatternAndCircuitHash>", "declarator": "rulePatternToCircuitMapping = new ArrayList<>()", "var_name": "rulePatternToCircuitMapping"}], "methods": [{"identifier": "updateRulePatternToCircuitMapping", "parameters": "(List<Rule> rules)", "modifiers": "public", "return": "List<PatternAndCircuitHash>", "signature": "List<PatternAndCircuitHash> updateRulePatternToCircuitMapping(List<Rule> rules)", "full_signature": "public List<PatternAndCircuitHash> updateRulePatternToCircuitMapping(List<Rule> rules)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMapping.updateRulePatternToCircuitMapping(List<Rule> rules)", "testcase": false, "constructor": false}, {"identifier": "getRemovedPatternAndCircuitHashes", "parameters": "(List<PatternAndCircuitHash> currentPatternAndCircuitHashes,\n                                                                          List<PatternAndCircuitHash> newPatternAndCircuitHashes)", "modifiers": "private", "return": "List<PatternAndCircuitHash>", "signature": "List<PatternAndCircuitHash> getRemovedPatternAndCircuitHashes(List<PatternAndCircuitHash> currentPatternAndCircuitHashes,\n                                                                          List<PatternAndCircuitHash> newPatternAndCircuitHashes)", "full_signature": "private List<PatternAndCircuitHash> getRemovedPatternAndCircuitHashes(List<PatternAndCircuitHash> currentPatternAndCircuitHashes,\n                                                                          List<PatternAndCircuitHash> newPatternAndCircuitHashes)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMapping.getRemovedPatternAndCircuitHashes(List<PatternAndCircuitHash> currentPatternAndCircuitHashes,\n                                                                          List<PatternAndCircuitHash> newPatternAndCircuitHashes)", "testcase": false, "constructor": false}, {"identifier": "getCircuitFromRequestUri", "parameters": "(String requestUri)", "modifiers": "public", "return": "PatternAndCircuitHash", "signature": "PatternAndCircuitHash getCircuitFromRequestUri(String requestUri)", "full_signature": "public PatternAndCircuitHash getCircuitFromRequestUri(String requestUri)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMapping.getCircuitFromRequestUri(String requestUri)", "testcase": false, "constructor": false}, {"identifier": "getPatternAndCircuitHashFromRule", "parameters": "(Rule rule)", "modifiers": "private", "return": "PatternAndCircuitHash", "signature": "PatternAndCircuitHash getPatternAndCircuitHashFromRule(Rule rule)", "full_signature": "private PatternAndCircuitHash getPatternAndCircuitHashFromRule(Rule rule)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMapping.getPatternAndCircuitHashFromRule(Rule rule)", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/util/QueueCircuitBreakerRulePatternToCircuitMapping.java"}, "focal_method": {"identifier": "getCircuitFromRequestUri", "parameters": "(String requestUri)", "modifiers": "public", "return": "PatternAndCircuitHash", "body": "public PatternAndCircuitHash getCircuitFromRequestUri(String requestUri){\n        for (PatternAndCircuitHash mapping : rulePatternToCircuitMapping) {\n            if(mapping.getPattern().matcher(requestUri).matches()){\n                return mapping;\n            }\n        }\n        return null;\n    }", "signature": "PatternAndCircuitHash getCircuitFromRequestUri(String requestUri)", "full_signature": "public PatternAndCircuitHash getCircuitFromRequestUri(String requestUri)", "class_method_signature": "QueueCircuitBreakerRulePatternToCircuitMapping.getCircuitFromRequestUri(String requestUri)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "getPattern"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}