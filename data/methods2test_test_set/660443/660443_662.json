{"test_class": {"identifier": "SingleMappingHandlerTest", "superclass": "extends AbstractMCSAlgorithmTest", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/single/SingleMappingHandlerTest.java"}, "test_case": {"identifier": "testGetAllMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllMapping() {\n        IAtom atomSource = new Atom(\"R\");\n        IAtom atomTarget = new Atom(\"R\");\n        IAtomContainer source = new AtomContainer();\n        source.addAtom(atomSource);\n        IAtomContainer target = new AtomContainer();\n        target.addAtom(atomTarget);\n        boolean removeHydrogen = false;\n        SingleMappingHandler instance = new SingleMappingHandler(removeHydrogen);\n        MolHandler mol1 = new MolHandler(source, true, true);\n        MolHandler mol2 = new MolHandler(target, true, true);\n        instance.set(mol1, mol2);\n        instance.searchMCS(true);\n        assertNotNull(instance.getAllMapping());\n    }", "signature": "void testGetAllMapping()", "full_signature": "@Test public void testGetAllMapping()", "class_method_signature": "SingleMappingHandlerTest.testGetAllMapping()", "testcase": true, "constructor": false, "invocations": ["addAtom", "addAtom", "set", "searchMCS", "assertNotNull", "getAllMapping"]}, "focal_class": {"identifier": "SingleMappingHandler", "superclass": "extends AbstractMCSAlgorithm", "interfaces": "implements IMCSBase", "fields": [{"original_string": "private static List<Map<IAtom, IAtom>>     allAtomMCS     = null;", "modifier": "private static", "type": "List<Map<IAtom, IAtom>>", "declarator": "allAtomMCS     = null", "var_name": "allAtomMCS"}, {"original_string": "private static Map<IAtom, IAtom>           atomsMCS       = null;", "modifier": "private static", "type": "Map<IAtom, IAtom>", "declarator": "atomsMCS       = null", "var_name": "atomsMCS"}, {"original_string": "private static Map<Integer, Integer>       firstMCS       = null;", "modifier": "private static", "type": "Map<Integer, Integer>", "declarator": "firstMCS       = null", "var_name": "firstMCS"}, {"original_string": "private static List<Map<Integer, Integer>> allMCS         = null;", "modifier": "private static", "type": "List<Map<Integer, Integer>>", "declarator": "allMCS         = null", "var_name": "allMCS"}, {"original_string": "private IAtomContainer                     source         = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "source         = null", "var_name": "source"}, {"original_string": "private IQueryAtomContainer                smartSource    = null;", "modifier": "private", "type": "IQueryAtomContainer", "declarator": "smartSource    = null", "var_name": "smartSource"}, {"original_string": "private IAtomContainer                     target         = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "target         = null", "var_name": "target"}, {"original_string": "private boolean                            removeHydrogen = false;", "modifier": "private", "type": "boolean", "declarator": "removeHydrogen = false", "var_name": "removeHydrogen"}], "methods": [{"identifier": "SingleMappingHandler", "parameters": "(boolean removeH)", "modifiers": "public", "return": "", "signature": " SingleMappingHandler(boolean removeH)", "full_signature": "public  SingleMappingHandler(boolean removeH)", "class_method_signature": "SingleMappingHandler.SingleMappingHandler(boolean removeH)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(MolHandler source, MolHandler target)", "modifiers": "@Override public", "return": "void", "signature": "void set(MolHandler source, MolHandler target)", "full_signature": "@Override public void set(MolHandler source, MolHandler target)", "class_method_signature": "SingleMappingHandler.set(MolHandler source, MolHandler target)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IQueryAtomContainer source, IAtomContainer target)", "modifiers": "@Override public", "return": "void", "signature": "void set(IQueryAtomContainer source, IAtomContainer target)", "full_signature": "@Override public void set(IQueryAtomContainer source, IAtomContainer target)", "class_method_signature": "SingleMappingHandler.set(IQueryAtomContainer source, IAtomContainer target)", "testcase": false, "constructor": false}, {"identifier": "searchMCS", "parameters": "(boolean bondTypeMatch)", "modifiers": "@Override public", "return": "void", "signature": "void searchMCS(boolean bondTypeMatch)", "full_signature": "@Override public void searchMCS(boolean bondTypeMatch)", "class_method_signature": "SingleMappingHandler.searchMCS(boolean bondTypeMatch)", "testcase": false, "constructor": false}, {"identifier": "setAllMapping", "parameters": "(List<Map<IAtom, IAtom>> mappings)", "modifiers": "private", "return": "void", "signature": "void setAllMapping(List<Map<IAtom, IAtom>> mappings)", "full_signature": "private void setAllMapping(List<Map<IAtom, IAtom>> mappings)", "class_method_signature": "SingleMappingHandler.setAllMapping(List<Map<IAtom, IAtom>> mappings)", "testcase": false, "constructor": false}, {"identifier": "setAllAtomMapping", "parameters": "(List<Map<IAtom, IAtom>> mappings)", "modifiers": "private synchronized", "return": "void", "signature": "void setAllAtomMapping(List<Map<IAtom, IAtom>> mappings)", "full_signature": "private synchronized void setAllAtomMapping(List<Map<IAtom, IAtom>> mappings)", "class_method_signature": "SingleMappingHandler.setAllAtomMapping(List<Map<IAtom, IAtom>> mappings)", "testcase": false, "constructor": false}, {"identifier": "setFirstMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setFirstMapping()", "full_signature": "private synchronized void setFirstMapping()", "class_method_signature": "SingleMappingHandler.setFirstMapping()", "testcase": false, "constructor": false}, {"identifier": "setFirstAtomMapping", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void setFirstAtomMapping()", "full_signature": "private synchronized void setFirstAtomMapping()", "class_method_signature": "SingleMappingHandler.setFirstAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getAllMapping", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> getAllMapping()", "full_signature": "@Override public List<Map<Integer, Integer>> getAllMapping()", "class_method_signature": "SingleMappingHandler.getAllMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstMapping", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> getFirstMapping()", "full_signature": "@Override public Map<Integer, Integer> getFirstMapping()", "class_method_signature": "SingleMappingHandler.getFirstMapping()", "testcase": false, "constructor": false}, {"identifier": "getAllAtomMapping", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<IAtom, IAtom>>", "signature": "List<Map<IAtom, IAtom>> getAllAtomMapping()", "full_signature": "@Override public List<Map<IAtom, IAtom>> getAllAtomMapping()", "class_method_signature": "SingleMappingHandler.getAllAtomMapping()", "testcase": false, "constructor": false}, {"identifier": "getFirstAtomMapping", "parameters": "()", "modifiers": "@Override public", "return": "Map<IAtom, IAtom>", "signature": "Map<IAtom, IAtom> getFirstAtomMapping()", "full_signature": "@Override public Map<IAtom, IAtom> getFirstAtomMapping()", "class_method_signature": "SingleMappingHandler.getFirstAtomMapping()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/single/SingleMappingHandler.java"}, "focal_method": {"identifier": "getAllMapping", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<Integer, Integer>>", "body": "@Override\n    public List<Map<Integer, Integer>> getAllMapping() {\n        return Collections.unmodifiableList(allMCS);\n    }", "signature": "List<Map<Integer, Integer>> getAllMapping()", "full_signature": "@Override public List<Map<Integer, Integer>> getAllMapping()", "class_method_signature": "SingleMappingHandler.getAllMapping()", "testcase": false, "constructor": false, "invocations": ["unmodifiableList"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}