{"test_class": {"identifier": "ProbabilisticSamplingPreExecutionInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProbabilisticSamplingPreExecutionInterceptor interceptor;", "modifier": "private", "type": "ProbabilisticSamplingPreExecutionInterceptor", "declarator": "interceptor", "var_name": "interceptor"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private PreExecutionInterceptorContext context;", "modifier": "private", "type": "PreExecutionInterceptorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private SpanContextInformation spanContext;", "modifier": "private", "type": "SpanContextInformation", "declarator": "spanContext", "var_name": "spanContext"}, {"original_string": "private ConfigurationRegistry configuration;", "modifier": "private", "type": "ConfigurationRegistry", "declarator": "configuration", "var_name": "configuration"}], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/sampling/ProbabilisticSamplingPreExecutionInterceptorTest.java"}, "test_case": {"identifier": "testNeverReportSpan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNeverReportSpan() throws Exception {\n\t\ttracingPlugin.getDefaultRateLimitSpansPercentOption().update(0d, SimpleSource.NAME);\n\n\t\tinterceptor.interceptReport(context);\n\t\tassertFalse(context.isReport());\n\t\tinterceptor.interceptReport(context);\n\t\tassertFalse(context.isReport());\n\t}", "signature": "void testNeverReportSpan()", "full_signature": "@Test public void testNeverReportSpan()", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptorTest.testNeverReportSpan()", "testcase": true, "constructor": false, "invocations": ["update", "getDefaultRateLimitSpansPercentOption", "interceptReport", "assertFalse", "isReport", "interceptReport", "assertFalse", "isReport"]}, "focal_class": {"identifier": "ProbabilisticSamplingPreExecutionInterceptor", "superclass": "extends PreExecutionSpanInterceptor", "interfaces": "", "fields": [{"original_string": "private static final int BIT_SET_SIZE = 100;", "modifier": "private static final", "type": "int", "declarator": "BIT_SET_SIZE = 100", "var_name": "BIT_SET_SIZE"}, {"original_string": "private BitSet defaultSampleDecisions;", "modifier": "private", "type": "BitSet", "declarator": "defaultSampleDecisions", "var_name": "defaultSampleDecisions"}, {"original_string": "private Map<String, BitSet> sampleDecisionsByType;", "modifier": "private", "type": "Map<String, BitSet>", "declarator": "sampleDecisionsByType", "var_name": "sampleDecisionsByType"}, {"original_string": "private AtomicInteger spanCounter = new AtomicInteger();", "modifier": "private", "type": "AtomicInteger", "declarator": "spanCounter = new AtomicInteger()", "var_name": "spanCounter"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "methods": [{"identifier": "init", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "@Override public", "return": "void", "signature": "void init(ConfigurationRegistry configuration)", "full_signature": "@Override public void init(ConfigurationRegistry configuration)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.init(ConfigurationRegistry configuration)", "testcase": false, "constructor": false}, {"identifier": "handleRuntimeConfigChanges", "parameters": "(TracingPlugin tracingPlugin)", "modifiers": "private", "return": "void", "signature": "void handleRuntimeConfigChanges(TracingPlugin tracingPlugin)", "full_signature": "private void handleRuntimeConfigChanges(TracingPlugin tracingPlugin)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.handleRuntimeConfigChanges(TracingPlugin tracingPlugin)", "testcase": false, "constructor": false}, {"identifier": "interceptReport", "parameters": "(PreExecutionInterceptorContext context)", "modifiers": "@Override public", "return": "void", "signature": "void interceptReport(PreExecutionInterceptorContext context)", "full_signature": "@Override public void interceptReport(PreExecutionInterceptorContext context)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.interceptReport(PreExecutionInterceptorContext context)", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "(SpanWrapper span)", "modifiers": "protected", "return": "boolean", "signature": "boolean isRoot(SpanWrapper span)", "full_signature": "protected boolean isRoot(SpanWrapper span)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.isRoot(SpanWrapper span)", "testcase": false, "constructor": false}, {"identifier": "isSampled", "parameters": "(BitSet sampleDecisions, AtomicInteger spanCounter)", "modifiers": "private", "return": "boolean", "signature": "boolean isSampled(BitSet sampleDecisions, AtomicInteger spanCounter)", "full_signature": "private boolean isSampled(BitSet sampleDecisions, AtomicInteger spanCounter)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.isSampled(BitSet sampleDecisions, AtomicInteger spanCounter)", "testcase": false, "constructor": false}, {"identifier": "setBitSetMap", "parameters": "(Map<String, Double> newValue)", "modifiers": "private", "return": "void", "signature": "void setBitSetMap(Map<String, Double> newValue)", "full_signature": "private void setBitSetMap(Map<String, Double> newValue)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.setBitSetMap(Map<String, Double> newValue)", "testcase": false, "constructor": false}, {"identifier": "getBitSet", "parameters": "(double probability)", "modifiers": "private", "return": "BitSet", "signature": "BitSet getBitSet(double probability)", "full_signature": "private BitSet getBitSet(double probability)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.getBitSet(double probability)", "testcase": false, "constructor": false}, {"identifier": "randomBitSet", "parameters": "(int size, int cardinality, Random rnd)", "modifiers": "private static", "return": "BitSet", "signature": "BitSet randomBitSet(int size, int cardinality, Random rnd)", "full_signature": "private static BitSet randomBitSet(int size, int cardinality, Random rnd)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.randomBitSet(int size, int cardinality, Random rnd)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/sampling/ProbabilisticSamplingPreExecutionInterceptor.java"}, "focal_method": {"identifier": "interceptReport", "parameters": "(PreExecutionInterceptorContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void interceptReport(PreExecutionInterceptorContext context) {\n\t\tfinal SpanContextInformation spanContext = context.getSpanContext();\n\t\tfinal BitSet sampleDecisions;\n\t\tfinal String operationType = spanContext.getOperationType();\n\t\tif (sampleDecisionsByType.containsKey(operationType)) {\n\t\t\tsampleDecisions = sampleDecisionsByType.get(operationType);\n\t\t} else if (isRoot(context.getSpanContext().getSpanWrapper())) {\n\t\t\tsampleDecisions = defaultSampleDecisions;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tif (sampleDecisions != null && !isSampled(sampleDecisions, spanCounter)) {\n\t\t\tcontext.shouldNotReport(getClass());\n\t\t}\n\t}", "signature": "void interceptReport(PreExecutionInterceptorContext context)", "full_signature": "@Override public void interceptReport(PreExecutionInterceptorContext context)", "class_method_signature": "ProbabilisticSamplingPreExecutionInterceptor.interceptReport(PreExecutionInterceptorContext context)", "testcase": false, "constructor": false, "invocations": ["getSpanContext", "getOperationType", "containsKey", "get", "isRoot", "getSpanWrapper", "getSpanContext", "isSampled", "shouldNotReport", "getClass"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}