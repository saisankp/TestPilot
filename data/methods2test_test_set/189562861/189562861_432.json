{"test_class": {"identifier": "AnnotatedBeanDefinitionRegistryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultListableBeanFactory registry = null;", "modifier": "private", "type": "DefaultListableBeanFactory", "declarator": "registry = null", "var_name": "registry"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/util/AnnotatedBeanDefinitionRegistryUtilsTest.java"}, "test_case": {"identifier": "testRegisterBeans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterBeans() {\n\n        AnnotatedBeanDefinitionRegistryUtils.registerBeans(registry, this.getClass());\n\n        String[] beanNames = registry.getBeanNamesForType(this.getClass());\n\n        Assert.assertEquals(1, beanNames.length);\n\n        beanNames = registry.getBeanNamesForType(AnnotatedBeanDefinitionRegistryUtils.class);\n\n        Assert.assertTrue(ObjectUtils.isEmpty(beanNames));\n\n        AnnotatedBeanDefinitionRegistryUtils.registerBeans(registry);\n\n    }", "signature": "void testRegisterBeans()", "full_signature": "@Test public void testRegisterBeans()", "class_method_signature": "AnnotatedBeanDefinitionRegistryUtilsTest.testRegisterBeans()", "testcase": true, "constructor": false, "invocations": ["registerBeans", "getClass", "getBeanNamesForType", "getClass", "assertEquals", "getBeanNamesForType", "assertTrue", "isEmpty", "registerBeans"]}, "focal_class": {"identifier": "AnnotatedBeanDefinitionRegistryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog(AnnotatedBeanDefinitionRegistryUtils.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(AnnotatedBeanDefinitionRegistryUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "registerBeans", "parameters": "(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "modifiers": "public static", "return": "void", "signature": "void registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "full_signature": "public static void registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "class_method_signature": "AnnotatedBeanDefinitionRegistryUtils.registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/util/AnnotatedBeanDefinitionRegistryUtils.java"}, "focal_method": {"identifier": "registerBeans", "parameters": "(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "modifiers": "public static", "return": "void", "body": "public static void registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses) {\n\n        if (ObjectUtils.isEmpty(annotatedClasses)) {\n            return;\n        }\n\n        boolean debugEnabled = logger.isDebugEnabled();\n\n        AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(registry);\n\n        if (debugEnabled) {\n            logger.debug(registry.getClass().getSimpleName() + \" will register annotated classes : \" + Arrays.asList(annotatedClasses) + \" .\");\n        }\n\n        reader.register(annotatedClasses);\n\n    }", "signature": "void registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "full_signature": "public static void registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "class_method_signature": "AnnotatedBeanDefinitionRegistryUtils.registerBeans(BeanDefinitionRegistry registry, Class<?>... annotatedClasses)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isDebugEnabled", "debug", "getSimpleName", "getClass", "asList", "register"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}