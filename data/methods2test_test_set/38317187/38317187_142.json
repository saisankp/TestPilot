{"test_class": {"identifier": "BlacklistValidationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestableBlacklistValidation blacklistValidation;", "modifier": "private", "type": "TestableBlacklistValidation", "declarator": "blacklistValidation", "var_name": "blacklistValidation"}], "file": "ballroom/src/test/java/org/jboss/hal/ballroom/form/BlacklistValidationTest.java"}, "test_case": {"identifier": "validateNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateNull() {\n        assertSame(ValidationResult.OK, blacklistValidation.validate(null));\n    }", "signature": "void validateNull()", "full_signature": "@Test public void validateNull()", "class_method_signature": "BlacklistValidationTest.validateNull()", "testcase": true, "constructor": false, "invocations": ["assertSame", "validate"]}, "focal_class": {"identifier": "BlacklistValidation", "superclass": "", "interfaces": "implements FormItemValidation<Object>", "fields": [{"original_string": "private static final Messages MESSAGES = GWT.create(Messages.class);", "modifier": "private static final", "type": "Messages", "declarator": "MESSAGES = GWT.create(Messages.class)", "var_name": "MESSAGES"}, {"original_string": "private final SortedSet<String> blacklist;", "modifier": "private final", "type": "SortedSet<String>", "declarator": "blacklist", "var_name": "blacklist"}], "methods": [{"identifier": "BlacklistValidation", "parameters": "(final String first, final String... rest)", "modifiers": "public", "return": "", "signature": " BlacklistValidation(final String first, final String... rest)", "full_signature": "public  BlacklistValidation(final String first, final String... rest)", "class_method_signature": "BlacklistValidation.BlacklistValidation(final String first, final String... rest)", "testcase": false, "constructor": true}, {"identifier": "BlacklistValidation", "parameters": "(Iterable<String> blacklist)", "modifiers": "public", "return": "", "signature": " BlacklistValidation(Iterable<String> blacklist)", "full_signature": "public  BlacklistValidation(Iterable<String> blacklist)", "class_method_signature": "BlacklistValidation.BlacklistValidation(Iterable<String> blacklist)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(final Object value)", "modifiers": "@Override public", "return": "ValidationResult", "signature": "ValidationResult validate(final Object value)", "full_signature": "@Override public ValidationResult validate(final Object value)", "class_method_signature": "BlacklistValidation.validate(final Object value)", "testcase": false, "constructor": false}, {"identifier": "errorMessage", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String errorMessage()", "full_signature": "protected String errorMessage()", "class_method_signature": "BlacklistValidation.errorMessage()", "testcase": false, "constructor": false}], "file": "ballroom/src/main/java/org/jboss/hal/ballroom/form/BlacklistValidation.java"}, "focal_method": {"identifier": "validate", "parameters": "(final Object value)", "modifiers": "@Override public", "return": "ValidationResult", "body": "@Override\n    public ValidationResult validate(final Object value) {\n        if (value == null || String.valueOf(value).trim().length() == 0) {\n            return ValidationResult.OK;\n        } else {\n            //noinspection SuspiciousMethodCalls\n            return blacklist.contains(value) ? ValidationResult.invalid(errorMessage()) : ValidationResult.OK;\n        }\n    }", "signature": "ValidationResult validate(final Object value)", "full_signature": "@Override public ValidationResult validate(final Object value)", "class_method_signature": "BlacklistValidation.validate(final Object value)", "testcase": false, "constructor": false, "invocations": ["length", "trim", "valueOf", "contains", "invalid", "errorMessage"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}