{"test_class": {"identifier": "DetectorMappingRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MetricRegistry metricRegistry;", "modifier": "@Mock\n    private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "@Mock\n    private LegacyElasticSearchClient legacyElasticSearchClient;", "modifier": "@Mock\n    private", "type": "LegacyElasticSearchClient", "declarator": "legacyElasticSearchClient", "var_name": "legacyElasticSearchClient"}, {"original_string": "@Mock\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Mock\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}, {"original_string": "@Mock\n    private ObjectMapperUtil objectMapperUtil;", "modifier": "@Mock\n    private", "type": "ObjectMapperUtil", "declarator": "objectMapperUtil", "var_name": "objectMapperUtil"}, {"original_string": "@Mock\n    private ElasticsearchUtil elasticsearchUtil;", "modifier": "@Mock\n    private", "type": "ElasticsearchUtil", "declarator": "elasticsearchUtil", "var_name": "elasticsearchUtil"}, {"original_string": "private DetectorMappingRepositoryImpl repoUnderTest;", "modifier": "private", "type": "DetectorMappingRepositoryImpl", "declarator": "repoUnderTest", "var_name": "repoUnderTest"}, {"original_string": "private PercolatorDetectorMapping percolatorDetectorMapping;", "modifier": "private", "type": "PercolatorDetectorMapping", "declarator": "percolatorDetectorMapping", "var_name": "percolatorDetectorMapping"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/repo/impl/DetectorMappingRepositoryImplTest.java"}, "test_case": {"identifier": "search_successful", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void search_successful() throws IOException {\n        List<DetectorMapping> tagsList = new ArrayList<>();\n        Map<String, String> tags = new HashMap<>();\n        Long LastModifiedTimeInMillis = new Long(1554828886);\n        Long CreatedTimeInMillis = new Long(1554828886);\n        val searchIndex = \"2\";\n        val lookUpTime = 100;\n        val detectorUuid = \"aeb4d849-847a-45c0-8312-dc0fcf22b639\";\n        SearchMappingsRequest searchMappingsRequest = new SearchMappingsRequest();\n        SearchResponse searchResponse = mockSearchResponse(searchIndex, lookUpTime, detectorUuid);\n        when(legacyElasticSearchClient.search(any(SearchRequest.class), eq(RequestOptions.DEFAULT))).thenReturn(searchResponse);\n        Mockito.when(elasticsearchUtil.getSourceBuilder(any(QueryBuilder.class))).thenReturn(new SearchSourceBuilder());\n\n        tagsList = repoUnderTest.search(searchMappingsRequest);\n        verify(legacyElasticSearchClient, atLeastOnce()).search(any(SearchRequest.class), eq(RequestOptions.DEFAULT));\n        assertNotNull(\"Response can't be null\", tagsList);\n        assertEquals(1, tagsList.size());\n        assertEquals(UUID.fromString(detectorUuid), tagsList.get(0).getDetector().getUuid());\n        assertEquals(\"test-user\", tagsList.get(0).getUser().getId());\n        assertEquals(LastModifiedTimeInMillis, Long.valueOf(tagsList.get(0).getLastModifiedTimeInMillis()));\n        assertEquals(CreatedTimeInMillis, Long.valueOf(tagsList.get(0).getCreatedTimeInMillis()));\n        assertTrue(tagsList.get(0).isEnabled());\n    }", "signature": "void search_successful()", "full_signature": "@Test public void search_successful()", "class_method_signature": "DetectorMappingRepositoryImplTest.search_successful()", "testcase": true, "constructor": false, "invocations": ["mockSearchResponse", "thenReturn", "when", "search", "any", "eq", "thenReturn", "when", "getSourceBuilder", "any", "search", "search", "verify", "atLeastOnce", "any", "eq", "assertNotNull", "assertEquals", "size", "assertEquals", "fromString", "getUuid", "getDetector", "get", "assertEquals", "getId", "getUser", "get", "assertEquals", "valueOf", "getLastModifiedTimeInMillis", "get", "assertEquals", "valueOf", "getCreatedTimeInMillis", "get", "assertTrue", "isEnabled", "get"]}, "focal_class": {"identifier": "DetectorMappingRepositoryImpl", "superclass": "", "interfaces": "implements DetectorMappingRepository", "fields": [{"original_string": "private static final String DEFAULT_CONSUMER_ID = \"ad-manager\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONSUMER_ID = \"ad-manager\"", "var_name": "DEFAULT_CONSUMER_ID"}, {"original_string": "@Autowired\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Autowired\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}, {"original_string": "@Autowired\n    private LegacyElasticSearchClient legacyElasticSearchClient;", "modifier": "@Autowired\n    private", "type": "LegacyElasticSearchClient", "declarator": "legacyElasticSearchClient", "var_name": "legacyElasticSearchClient"}, {"original_string": "@Autowired\n    private ElasticsearchUtil elasticsearchUtil;", "modifier": "@Autowired\n    private", "type": "ElasticsearchUtil", "declarator": "elasticsearchUtil", "var_name": "elasticsearchUtil"}, {"original_string": "@Autowired\n    private ObjectMapperUtil objectMapperUtil;", "modifier": "@Autowired\n    private", "type": "ObjectMapperUtil", "declarator": "objectMapperUtil", "var_name": "objectMapperUtil"}, {"original_string": "private final Timer delayTimer;", "modifier": "private final", "type": "Timer", "declarator": "delayTimer", "var_name": "delayTimer"}, {"original_string": "private final Counter exceptionCount;", "modifier": "private final", "type": "Counter", "declarator": "exceptionCount", "var_name": "exceptionCount"}], "methods": [{"identifier": "DetectorMappingRepositoryImpl", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "@Autowired public", "return": "", "signature": " DetectorMappingRepositoryImpl(MetricRegistry metricRegistry)", "full_signature": "@Autowired public  DetectorMappingRepositoryImpl(MetricRegistry metricRegistry)", "class_method_signature": "DetectorMappingRepositoryImpl.DetectorMappingRepositoryImpl(MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "createDetectorMapping", "parameters": "(CreateDetectorMappingRequest request)", "modifiers": "@Override public", "return": "String", "signature": "String createDetectorMapping(CreateDetectorMappingRequest request)", "full_signature": "@Override public String createDetectorMapping(CreateDetectorMappingRequest request)", "class_method_signature": "DetectorMappingRepositoryImpl.createDetectorMapping(CreateDetectorMappingRequest request)", "testcase": false, "constructor": false}, {"identifier": "findMatchingDetectorMappings", "parameters": "(List<Map<String, String>> tagsList)", "modifiers": "@Override public", "return": "MatchingDetectorsResponse", "signature": "MatchingDetectorsResponse findMatchingDetectorMappings(List<Map<String, String>> tagsList)", "full_signature": "@Override public MatchingDetectorsResponse findMatchingDetectorMappings(List<Map<String, String>> tagsList)", "class_method_signature": "DetectorMappingRepositoryImpl.findMatchingDetectorMappings(List<Map<String, String>> tagsList)", "testcase": false, "constructor": false}, {"identifier": "findDetectorMapping", "parameters": "(String id)", "modifiers": "@Override public", "return": "DetectorMapping", "signature": "DetectorMapping findDetectorMapping(String id)", "full_signature": "@Override public DetectorMapping findDetectorMapping(String id)", "class_method_signature": "DetectorMappingRepositoryImpl.findDetectorMapping(String id)", "testcase": false, "constructor": false}, {"identifier": "findLastUpdated", "parameters": "(int timeInSeconds)", "modifiers": "@Override public", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> findLastUpdated(int timeInSeconds)", "full_signature": "@Override public List<DetectorMapping> findLastUpdated(int timeInSeconds)", "class_method_signature": "DetectorMappingRepositoryImpl.findLastUpdated(int timeInSeconds)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(SearchMappingsRequest request)", "modifiers": "@Override public", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> search(SearchMappingsRequest request)", "full_signature": "@Override public List<DetectorMapping> search(SearchMappingsRequest request)", "class_method_signature": "DetectorMappingRepositoryImpl.search(SearchMappingsRequest request)", "testcase": false, "constructor": false}, {"identifier": "disableDetectorMapping", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void disableDetectorMapping(String id)", "full_signature": "@Override public void disableDetectorMapping(String id)", "class_method_signature": "DetectorMappingRepositoryImpl.disableDetectorMapping(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteDetectorMapping", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void deleteDetectorMapping(String id)", "full_signature": "@Override public void deleteDetectorMapping(String id)", "class_method_signature": "DetectorMappingRepositoryImpl.deleteDetectorMapping(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteMappingsByDetectorUUID", "parameters": "(UUID uuid)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMappingsByDetectorUUID(UUID uuid)", "full_signature": "@Override public void deleteMappingsByDetectorUUID(UUID uuid)", "class_method_signature": "DetectorMappingRepositoryImpl.deleteMappingsByDetectorUUID(UUID uuid)", "testcase": false, "constructor": false}, {"identifier": "getDetectorMappings", "parameters": "(SearchRequest searchRequest)", "modifiers": "private", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> getDetectorMappings(SearchRequest searchRequest)", "full_signature": "private List<DetectorMapping> getDetectorMappings(SearchRequest searchRequest)", "class_method_signature": "DetectorMappingRepositoryImpl.getDetectorMappings(SearchRequest searchRequest)", "testcase": false, "constructor": false}, {"identifier": "detectorIdQuery", "parameters": "(SearchMappingsRequest searchMappingsRequest)", "modifiers": "private", "return": "NestedQueryBuilder", "signature": "NestedQueryBuilder detectorIdQuery(SearchMappingsRequest searchMappingsRequest)", "full_signature": "private NestedQueryBuilder detectorIdQuery(SearchMappingsRequest searchMappingsRequest)", "class_method_signature": "DetectorMappingRepositoryImpl.detectorIdQuery(SearchMappingsRequest searchMappingsRequest)", "testcase": false, "constructor": false}, {"identifier": "userIdQuery", "parameters": "(SearchMappingsRequest searchMappingsRequest)", "modifiers": "private", "return": "NestedQueryBuilder", "signature": "NestedQueryBuilder userIdQuery(SearchMappingsRequest searchMappingsRequest)", "full_signature": "private NestedQueryBuilder userIdQuery(SearchMappingsRequest searchMappingsRequest)", "class_method_signature": "DetectorMappingRepositoryImpl.userIdQuery(SearchMappingsRequest searchMappingsRequest)", "testcase": false, "constructor": false}, {"identifier": "getDetectorMappings", "parameters": "(SearchSourceBuilder searchSourceBuilder,\n                                                          List<Map<String, String>> tagsList)", "modifiers": "private", "return": "MatchingDetectorsResponse", "signature": "MatchingDetectorsResponse getDetectorMappings(SearchSourceBuilder searchSourceBuilder,\n                                                          List<Map<String, String>> tagsList)", "full_signature": "private MatchingDetectorsResponse getDetectorMappings(SearchSourceBuilder searchSourceBuilder,\n                                                          List<Map<String, String>> tagsList)", "class_method_signature": "DetectorMappingRepositoryImpl.getDetectorMappings(SearchSourceBuilder searchSourceBuilder,\n                                                          List<Map<String, String>> tagsList)", "testcase": false, "constructor": false}, {"identifier": "getDetectorMapping", "parameters": "(String json, String id, Optional<Map<String, DocumentField>> documentFieldMap)", "modifiers": "private", "return": "DetectorMapping", "signature": "DetectorMapping getDetectorMapping(String json, String id, Optional<Map<String, DocumentField>> documentFieldMap)", "full_signature": "private DetectorMapping getDetectorMapping(String json, String id, Optional<Map<String, DocumentField>> documentFieldMap)", "class_method_signature": "DetectorMappingRepositoryImpl.getDetectorMapping(String json, String id, Optional<Map<String, DocumentField>> documentFieldMap)", "testcase": false, "constructor": false}, {"identifier": "convertToMatchingDetectorsResponse", "parameters": "(DetectorMatchResponse res)", "modifiers": "private", "return": "MatchingDetectorsResponse", "signature": "MatchingDetectorsResponse convertToMatchingDetectorsResponse(DetectorMatchResponse res)", "full_signature": "private MatchingDetectorsResponse convertToMatchingDetectorsResponse(DetectorMatchResponse res)", "class_method_signature": "DetectorMappingRepositoryImpl.convertToMatchingDetectorsResponse(DetectorMatchResponse res)", "testcase": false, "constructor": false}, {"identifier": "updateDetectorMapping", "parameters": "(String index, PercolatorDetectorMapping percolatorDetectorMapping)", "modifiers": "private", "return": "void", "signature": "void updateDetectorMapping(String index, PercolatorDetectorMapping percolatorDetectorMapping)", "full_signature": "private void updateDetectorMapping(String index, PercolatorDetectorMapping percolatorDetectorMapping)", "class_method_signature": "DetectorMappingRepositoryImpl.updateDetectorMapping(String index, PercolatorDetectorMapping percolatorDetectorMapping)", "testcase": false, "constructor": false}, {"identifier": "getConsumerId", "parameters": "(String consumerId)", "modifiers": "private", "return": "String", "signature": "String getConsumerId(String consumerId)", "full_signature": "private String getConsumerId(String consumerId)", "class_method_signature": "DetectorMappingRepositoryImpl.getConsumerId(String consumerId)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/repo/impl/DetectorMappingRepositoryImpl.java"}, "focal_method": {"identifier": "search", "parameters": "(SearchMappingsRequest request)", "modifiers": "@Override public", "return": "List<DetectorMapping>", "body": "@Override\n    public List<DetectorMapping> search(SearchMappingsRequest request) {\n        val query = QueryBuilders.boolQuery();\n        if (request.getUserId() != null) {\n            query.must(userIdQuery(request));\n        }\n        if (request.getDetectorUuid() != null) {\n            query.must(detectorIdQuery(request));\n        }\n\n        val searchSourceBuilder = elasticsearchUtil.getSourceBuilder(query);\n        //FIXME setting default result set size to 500 until we have pagination.\n        searchSourceBuilder.size(500);\n        SearchRequest searchRequest = elasticsearchUtil.getSearchRequest(searchSourceBuilder, elasticSearchProperties.getIndexName(), elasticSearchProperties.getDocType());\n        List<DetectorMapping> result = getDetectorMappings(searchRequest);\n        //FIXME - move this condition to search query.\n        return result.stream().filter(detectorMapping -> detectorMapping.isEnabled()).collect(Collectors.toList());\n    }", "signature": "List<DetectorMapping> search(SearchMappingsRequest request)", "full_signature": "@Override public List<DetectorMapping> search(SearchMappingsRequest request)", "class_method_signature": "DetectorMappingRepositoryImpl.search(SearchMappingsRequest request)", "testcase": false, "constructor": false, "invocations": ["boolQuery", "getUserId", "must", "userIdQuery", "getDetectorUuid", "must", "detectorIdQuery", "getSourceBuilder", "size", "getSearchRequest", "getIndexName", "getDocType", "getDetectorMappings", "collect", "filter", "stream", "isEnabled", "toList"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}