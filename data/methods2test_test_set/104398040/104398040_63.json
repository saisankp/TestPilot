{"test_class": {"identifier": "PropertyExistsTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/conditions/PropertyExistsTest.java"}, "test_case": {"identifier": "propertyExistsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void propertyExistsTest() {\n        PropertyExists propertyExists;\n        TUExecutionResult executionResult;\n\n        propertyExists = new PropertyExists(\"foo\").relative(\"/src/main/resources/application.properties\");\n        executionResult = propertyExists.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE);\n        Assert.assertTrue((Boolean) executionResult.getValue());\n        Assert.assertEquals(propertyExists.getPropertyName(), \"foo\");\n        Assert.assertNull(propertyExists.getPropertyNameRegex());\n        Assert.assertEquals(propertyExists.getDescription(), \"Check if property 'foo' exists in a property file\");\n\n        propertyExists = new PropertyExists().setPropertyNameRegex(\".oo\").relative(\"/src/main/resources/application.properties\");\n        executionResult = propertyExists.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE);\n        Assert.assertTrue((Boolean) executionResult.getValue());\n        Assert.assertNull(propertyExists.getPropertyName());\n        Assert.assertEquals(propertyExists.getPropertyNameRegex(), \".oo\");\n        Assert.assertEquals(propertyExists.getDescription(), \"Check if property '.oo' exists in a property file\");\n    }", "signature": "void propertyExistsTest()", "full_signature": "@Test public void propertyExistsTest()", "class_method_signature": "PropertyExistsTest.propertyExistsTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertTrue", "getValue", "assertEquals", "getPropertyName", "assertNull", "getPropertyNameRegex", "assertEquals", "getDescription", "relative", "setPropertyNameRegex", "execution", "assertEquals", "getType", "assertTrue", "getValue", "assertNull", "getPropertyName", "assertEquals", "getPropertyNameRegex", "assertEquals", "getDescription"]}, "focal_class": {"identifier": "PropertyExists", "superclass": "extends SingleCondition<PropertyExists>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Check if property '%s' exists in a property file\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Check if property '%s' exists in a property file\"", "var_name": "DESCRIPTION"}, {"original_string": "private String propertyName;", "modifier": "private", "type": "String", "declarator": "propertyName", "var_name": "propertyName"}, {"original_string": "private String propertyNameRegex;", "modifier": "private", "type": "String", "declarator": "propertyNameRegex", "var_name": "propertyNameRegex"}], "methods": [{"identifier": "PropertyExists", "parameters": "()", "modifiers": "public", "return": "", "signature": " PropertyExists()", "full_signature": "public  PropertyExists()", "class_method_signature": "PropertyExists.PropertyExists()", "testcase": false, "constructor": true}, {"identifier": "PropertyExists", "parameters": "(String propertyName)", "modifiers": "public", "return": "", "signature": " PropertyExists(String propertyName)", "full_signature": "public  PropertyExists(String propertyName)", "class_method_signature": "PropertyExists.PropertyExists(String propertyName)", "testcase": false, "constructor": true}, {"identifier": "setPropertyName", "parameters": "(String propertyName)", "modifiers": "public", "return": "PropertyExists", "signature": "PropertyExists setPropertyName(String propertyName)", "full_signature": "public PropertyExists setPropertyName(String propertyName)", "class_method_signature": "PropertyExists.setPropertyName(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "setPropertyNameRegex", "parameters": "(String propertyNameRegex)", "modifiers": "public", "return": "PropertyExists", "signature": "PropertyExists setPropertyNameRegex(String propertyNameRegex)", "full_signature": "public PropertyExists setPropertyNameRegex(String propertyNameRegex)", "class_method_signature": "PropertyExists.setPropertyNameRegex(String propertyNameRegex)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyName()", "full_signature": "public String getPropertyName()", "class_method_signature": "PropertyExists.getPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getPropertyNameRegex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyNameRegex()", "full_signature": "public String getPropertyNameRegex()", "class_method_signature": "PropertyExists.getPropertyNameRegex()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PropertyExists.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "PropertyExists.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/conditions/PropertyExists.java"}, "focal_method": {"identifier": "PropertyExists", "parameters": "()", "modifiers": "public", "return": "", "body": "public PropertyExists() {\n    }", "signature": " PropertyExists()", "full_signature": "public  PropertyExists()", "class_method_signature": "PropertyExists.PropertyExists()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}