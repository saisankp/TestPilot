{"test_class": {"identifier": "ProxyUserValidationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ALICE = \"alice@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "ALICE = \"alice@EXAMPLE.COM\"", "var_name": "ALICE"}, {"original_string": "private static final String BOB = \"bob@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "BOB = \"bob@EXAMPLE.COM\"", "var_name": "BOB"}, {"original_string": "private static final String CHARLIE = \"charlie@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "CHARLIE = \"charlie@EXAMPLE.COM\"", "var_name": "CHARLIE"}, {"original_string": "private static final String HIVE = \"hive/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "HIVE = \"hive/testhost@EXAMPLE.COM\"", "var_name": "HIVE"}, {"original_string": "private static final String PRESTO = \"presto/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "PRESTO = \"presto/testhost@EXAMPLE.COM\"", "var_name": "PRESTO"}, {"original_string": "private static final String SPARK = \"spark/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "SPARK = \"spark/testhost@EXAMPLE.COM\"", "var_name": "SPARK"}, {"original_string": "private static final String OOZIE = \"oozie/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "OOZIE = \"oozie/testhost@EXAMPLE.COM\"", "var_name": "OOZIE"}, {"original_string": "private static final String STORM = \"storm/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "STORM = \"storm/testhost@EXAMPLE.COM\"", "var_name": "STORM"}, {"original_string": "private static final String SOLR = \"solr/testhost@EXAMPLE.COM\";", "modifier": "private static final", "type": "String", "declarator": "SOLR = \"solr/testhost@EXAMPLE.COM\"", "var_name": "SOLR"}, {"original_string": "private static final String GROUP_DATASCIENCE = \"datascience\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_DATASCIENCE = \"datascience\"", "var_name": "GROUP_DATASCIENCE"}, {"original_string": "private static final String GROUP_FINANCE = \"finance\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_FINANCE = \"finance\"", "var_name": "GROUP_FINANCE"}, {"original_string": "private static final String GSUITE_DOMAIN = System.getProperty(\"gsuite-domain\");", "modifier": "private static final", "type": "String", "declarator": "GSUITE_DOMAIN = System.getProperty(\"gsuite-domain\")", "var_name": "GSUITE_DOMAIN"}, {"original_string": "private static final Object proxyUsers = ConfigFactory.parseString(\n    AppSettings.PROXY_USERS + \"=[\" +\n            \"{\" +\n                \"proxy=\\\"\" + PRESTO + \"\\\",\" +\n                \"users=[\\\"*\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + STORM + \"\\\",\" +\n                \"users=[\\\"alice@\" + GSUITE_DOMAIN + \"\\\", \\\"bob@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + OOZIE + \"\\\",\" +\n                \"groups=[\\\"*\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + HIVE + \"\\\",\" +\n                \"groups=[\\\"\" + GROUP_DATASCIENCE + \"@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + SOLR + \"\\\",\" +\n                \"groups=[\\\"\" + GROUP_FINANCE + \"@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(AppSettings.PROXY_USERS);", "modifier": "private static final", "type": "Object", "declarator": "proxyUsers = ConfigFactory.parseString(\n    AppSettings.PROXY_USERS + \"=[\" +\n            \"{\" +\n                \"proxy=\\\"\" + PRESTO + \"\\\",\" +\n                \"users=[\\\"*\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + STORM + \"\\\",\" +\n                \"users=[\\\"alice@\" + GSUITE_DOMAIN + \"\\\", \\\"bob@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + OOZIE + \"\\\",\" +\n                \"groups=[\\\"*\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + HIVE + \"\\\",\" +\n                \"groups=[\\\"\" + GROUP_DATASCIENCE + \"@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n            \"{\" +\n                \"proxy=\\\"\" + SOLR + \"\\\",\" +\n                \"groups=[\\\"\" + GROUP_FINANCE + \"@\" + GSUITE_DOMAIN + \"\\\"]\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(AppSettings.PROXY_USERS)", "var_name": "proxyUsers"}, {"original_string": "private static final Object userMappingRules = ConfigFactory.parseString(\n    \"rules=[\" +\n            \"{\" +\n                \"if: \\\"true\\\",\" +\n                \"then: \\\"primary + '@\" + GSUITE_DOMAIN + \"'\\\"\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(\"rules\");", "modifier": "private static final", "type": "Object", "declarator": "userMappingRules = ConfigFactory.parseString(\n    \"rules=[\" +\n            \"{\" +\n                \"if: \\\"true\\\",\" +\n                \"then: \\\"primary + '@\" + GSUITE_DOMAIN + \"'\\\"\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(\"rules\")", "var_name": "userMappingRules"}, {"original_string": "@ClassRule\n    public static SettingsOverride settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.PROXY_USERS, proxyUsers,\n        AppSettings.PROVIDER_BACKEND, \"com.google.cloud.broker.apps.brokerserver.accesstokens.providers.ServiceAccountProvider\",\n        AppSettings.DATABASE_BACKEND, \"com.google.cloud.broker.database.backends.DummyDatabaseBackend\",\n        AppSettings.ENCRYPTION_BACKEND, \"com.google.cloud.broker.encryption.backends.DummyEncryptionBackend\",\n        AppSettings.USER_MAPPING_RULES, userMappingRules\n    ));", "modifier": "@ClassRule\n    public static", "type": "SettingsOverride", "declarator": "settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.PROXY_USERS, proxyUsers,\n        AppSettings.PROVIDER_BACKEND, \"com.google.cloud.broker.apps.brokerserver.accesstokens.providers.ServiceAccountProvider\",\n        AppSettings.DATABASE_BACKEND, \"com.google.cloud.broker.database.backends.DummyDatabaseBackend\",\n        AppSettings.ENCRYPTION_BACKEND, \"com.google.cloud.broker.encryption.backends.DummyEncryptionBackend\",\n        AppSettings.USER_MAPPING_RULES, userMappingRules\n    ))", "var_name": "settingsOverride"}], "file": "code/broker-server/src/test/java/com/google/cloud/broker/apps/brokerserver/validation/ProxyUserValidationTest.java"}, "test_case": {"identifier": "testValidateImpersonatorByUserWhitelist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateImpersonatorByUserWhitelist() {\n        // Wildcard\n        ProxyUserValidation.validateImpersonator(PRESTO, ALICE);\n        ProxyUserValidation.validateImpersonator(PRESTO, BOB);\n        ProxyUserValidation.validateImpersonator(PRESTO, CHARLIE);\n\n        // Specific users\n        ProxyUserValidation.validateImpersonator(STORM, ALICE);\n        ProxyUserValidation.validateImpersonator(STORM, BOB);\n        try {\n            ProxyUserValidation.validateImpersonator(STORM, CHARLIE);\n            fail();\n        } catch (StatusRuntimeException e) {\n            assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode());\n            assertEquals(\"Impersonation disallowed for `storm/testhost@EXAMPLE.COM`\", e.getStatus().getDescription());\n        }\n    }", "signature": "void testValidateImpersonatorByUserWhitelist()", "full_signature": "@Test public void testValidateImpersonatorByUserWhitelist()", "class_method_signature": "ProxyUserValidationTest.testValidateImpersonatorByUserWhitelist()", "testcase": true, "constructor": false, "invocations": ["validateImpersonator", "validateImpersonator", "validateImpersonator", "validateImpersonator", "validateImpersonator", "validateImpersonator", "fail", "assertEquals", "getCode", "getCode", "getStatus", "assertEquals", "getDescription", "getStatus"]}, "focal_class": {"identifier": "ProxyUserValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String CONFIG_PROXY = \"proxy\";", "modifier": "private final static", "type": "String", "declarator": "CONFIG_PROXY = \"proxy\"", "var_name": "CONFIG_PROXY"}, {"original_string": "private final static String CONFIG_GROUPS = \"groups\";", "modifier": "private final static", "type": "String", "declarator": "CONFIG_GROUPS = \"groups\"", "var_name": "CONFIG_GROUPS"}, {"original_string": "private final static String CONFIG_USERS = \"users\";", "modifier": "private final static", "type": "String", "declarator": "CONFIG_USERS = \"users\"", "var_name": "CONFIG_USERS"}], "methods": [{"identifier": "isWhitelistedByUsername", "parameters": "(Config proxyConfig, String impersonated)", "modifiers": "private static", "return": "boolean", "signature": "boolean isWhitelistedByUsername(Config proxyConfig, String impersonated)", "full_signature": "private static boolean isWhitelistedByUsername(Config proxyConfig, String impersonated)", "class_method_signature": "ProxyUserValidation.isWhitelistedByUsername(Config proxyConfig, String impersonated)", "testcase": false, "constructor": false}, {"identifier": "isWhitelistedByGroupMembership", "parameters": "(Config proxyConfig, String impersonated)", "modifiers": "private static", "return": "boolean", "signature": "boolean isWhitelistedByGroupMembership(Config proxyConfig, String impersonated)", "full_signature": "private static boolean isWhitelistedByGroupMembership(Config proxyConfig, String impersonated)", "class_method_signature": "ProxyUserValidation.isWhitelistedByGroupMembership(Config proxyConfig, String impersonated)", "testcase": false, "constructor": false}, {"identifier": "validateImpersonator", "parameters": "(String impersonator, String impersonated)", "modifiers": "public static", "return": "void", "signature": "void validateImpersonator(String impersonator, String impersonated)", "full_signature": "public static void validateImpersonator(String impersonator, String impersonated)", "class_method_signature": "ProxyUserValidation.validateImpersonator(String impersonator, String impersonated)", "testcase": false, "constructor": false}, {"identifier": "getDirectoryService", "parameters": "()", "modifiers": "public static", "return": "Directory", "signature": "Directory getDirectoryService()", "full_signature": "public static Directory getDirectoryService()", "class_method_signature": "ProxyUserValidation.getDirectoryService()", "testcase": false, "constructor": false}], "file": "code/broker-server/src/main/java/com/google/cloud/broker/apps/brokerserver/validation/ProxyUserValidation.java"}, "focal_method": {"identifier": "validateImpersonator", "parameters": "(String impersonator, String impersonated)", "modifiers": "public static", "return": "void", "body": "public static void validateImpersonator(String impersonator, String impersonated) {\n        String mappedImpersonated = AbstractUserMapper.getInstance().map(impersonated);\n        EmailValidation.validateEmail(mappedImpersonated);\n        MDC.put(LoggingUtils.MDC_AUTH_MODE_PROXY_IMPERSONATED_USER_KEY, impersonated);\n        List<? extends Config> proxyConfigs = AppSettings.getInstance().getConfigList(AppSettings.PROXY_USERS);\n        for (Config proxyConfig : proxyConfigs) {\n            String proxy = proxyConfig.getString(CONFIG_PROXY);\n            if (impersonator.equals(proxy)) {\n                if (isWhitelistedByUsername(proxyConfig, mappedImpersonated)) {\n                    // The user is directly whitelisted by its username\n                    return;\n                }\n                else if (isWhitelistedByGroupMembership(proxyConfig, mappedImpersonated)) {\n                    // The user is whitelisted by group membership\n                    return;\n                }\n            }\n        }\n        throw Status.PERMISSION_DENIED\n            .withDescription(\"Impersonation disallowed for `\" + impersonator + \"`\")\n            .asRuntimeException();\n    }", "signature": "void validateImpersonator(String impersonator, String impersonated)", "full_signature": "public static void validateImpersonator(String impersonator, String impersonated)", "class_method_signature": "ProxyUserValidation.validateImpersonator(String impersonator, String impersonated)", "testcase": false, "constructor": false, "invocations": ["map", "getInstance", "validateEmail", "put", "getConfigList", "getInstance", "getString", "equals", "isWhitelistedByUsername", "isWhitelistedByGroupMembership", "asRuntimeException", "withDescription"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}