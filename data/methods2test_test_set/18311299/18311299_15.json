{"test_class": {"identifier": "TableMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    AbstractConnectionProvider mockedConnectionProvider;", "modifier": "@Mock", "type": "AbstractConnectionProvider", "declarator": "mockedConnectionProvider", "var_name": "mockedConnectionProvider"}, {"original_string": "@Mock\n    Connection mockedConnection;", "modifier": "@Mock", "type": "Connection", "declarator": "mockedConnection", "var_name": "mockedConnection"}, {"original_string": "@Mock\n    PreparedStatement mockedStmt;", "modifier": "@Mock", "type": "PreparedStatement", "declarator": "mockedStmt", "var_name": "mockedStmt"}, {"original_string": "@Mock\n    ResultSet mockedResultSet;", "modifier": "@Mock", "type": "ResultSet", "declarator": "mockedResultSet", "var_name": "mockedResultSet"}, {"original_string": "TableMetadata tableMetadata;", "modifier": "", "type": "TableMetadata", "declarator": "tableMetadata", "var_name": "tableMetadata"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/TableMetadataTest.java"}, "test_case": {"identifier": "testGetColumnNamesForExistingTable", "parameters": "()", "modifiers": "@Test(groups = INTEGRATION) public", "return": "void", "body": "@Test(groups = INTEGRATION)\n    public void testGetColumnNamesForExistingTable() throws SQLException {\n        tableMetadata = new TableMetadata(new MysqlConnectionProvider(URL, USERNAME, PASSWORD));\n        List<String> columnNames = tableMetadata.getColumnNames(TEST_TABLE_NAME);\n\n        assertEquals(columnNames.size(), 2);\n        assertTrue(columnNames.contains(\"ID\"));\n        assertTrue(columnNames.contains(\"TXT\"));\n    }", "signature": "void testGetColumnNamesForExistingTable()", "full_signature": "@Test(groups = INTEGRATION) public void testGetColumnNamesForExistingTable()", "class_method_signature": "TableMetadataTest.testGetColumnNamesForExistingTable()", "testcase": true, "constructor": false, "invocations": ["getColumnNames", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "TableMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String NULL_PROVIDER_MSG = \"connectionProvider cant be null\";", "modifier": "static final", "type": "String", "declarator": "NULL_PROVIDER_MSG = \"connectionProvider cant be null\"", "var_name": "NULL_PROVIDER_MSG"}, {"original_string": "static final String COLUMN_NAMES_ERROR = \"Couldn't get column names for table \";", "modifier": "static final", "type": "String", "declarator": "COLUMN_NAMES_ERROR = \"Couldn't get column names for table \"", "var_name": "COLUMN_NAMES_ERROR"}, {"original_string": "private ConnectionProvider connectionProvider;", "modifier": "private", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "static final String GET_COLUMN_NAMES_QUERY = \"SELECT COLUMN_NAME \" +\n            \"FROM INFORMATION_SCHEMA.COLUMNS \" +\n            \"WHERE TABLE_SCHEMA = DATABASE() \" +\n            \"AND TABLE_NAME = ?\";", "modifier": "static final", "type": "String", "declarator": "GET_COLUMN_NAMES_QUERY = \"SELECT COLUMN_NAME \" +\n            \"FROM INFORMATION_SCHEMA.COLUMNS \" +\n            \"WHERE TABLE_SCHEMA = DATABASE() \" +\n            \"AND TABLE_NAME = ?\"", "var_name": "GET_COLUMN_NAMES_QUERY"}], "methods": [{"identifier": "TableMetadata", "parameters": "(ConnectionProvider connectionProvider)", "modifiers": "", "return": "", "signature": " TableMetadata(ConnectionProvider connectionProvider)", "full_signature": "  TableMetadata(ConnectionProvider connectionProvider)", "class_method_signature": "TableMetadata.TableMetadata(ConnectionProvider connectionProvider)", "testcase": false, "constructor": true}, {"identifier": "getColumnNames", "parameters": "(String tableName)", "modifiers": "", "return": "List<String>", "signature": "List<String> getColumnNames(String tableName)", "full_signature": " List<String> getColumnNames(String tableName)", "class_method_signature": "TableMetadata.getColumnNames(String tableName)", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/TableMetadata.java"}, "focal_method": {"identifier": "getColumnNames", "parameters": "(String tableName)", "modifiers": "", "return": "List<String>", "body": "List<String> getColumnNames(String tableName) throws SQLException {\n        List<String> result = Lists.newArrayList();\n        try (\n                Connection connection = connectionProvider.getConnection();\n                PreparedStatement stmt = connection.prepareStatement(GET_COLUMN_NAMES_QUERY)) {\n            stmt.setString(1, tableName);\n            ResultSet rs = stmt.executeQuery();\n\n            while (rs.next()) {\n                result.add(rs.getString(1));\n            }\n\n            return result;\n        } catch (SQLException sqle) {\n            throw new DataAccessException(COLUMN_NAMES_ERROR + tableName, sqle);\n        }\n    }", "signature": "List<String> getColumnNames(String tableName)", "full_signature": " List<String> getColumnNames(String tableName)", "class_method_signature": "TableMetadata.getColumnNames(String tableName)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "getConnection", "prepareStatement", "setString", "executeQuery", "next", "add", "getString"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}