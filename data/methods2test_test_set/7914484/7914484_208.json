{"test_class": {"identifier": "PayloadRootUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/support/PayloadRootUtilsTest.java"}, "test_case": {"identifier": "testGetQNameForDomSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetQNameForDomSource() throws Exception {\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactoryUtils.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument document = builder.newDocument();\n\t\tElement element = document.createElementNS(\"namespace\", \"prefix:localname\");\n\t\tdocument.appendChild(element);\n\t\tSource source = new DOMSource(document);\n\t\tQName qName = PayloadRootUtils.getPayloadRootQName(source, TransformerFactoryUtils.newInstance());\n\t\tAssert.assertNotNull(\"getQNameForNode returns null\", qName);\n\t\tAssert.assertEquals(\"QName has invalid localname\", \"localname\", qName.getLocalPart());\n\t\tAssert.assertEquals(\"Qname has invalid namespace\", \"namespace\", qName.getNamespaceURI());\n\t\tAssert.assertEquals(\"Qname has invalid prefix\", \"prefix\", qName.getPrefix());\n\t}", "signature": "void testGetQNameForDomSource()", "full_signature": "@Test public void testGetQNameForDomSource()", "class_method_signature": "PayloadRootUtilsTest.testGetQNameForDomSource()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newDocumentBuilder", "newDocument", "createElementNS", "appendChild", "getPayloadRootQName", "newInstance", "assertNotNull", "assertEquals", "getLocalPart", "assertEquals", "getNamespaceURI", "assertEquals", "getPrefix"]}, "focal_class": {"identifier": "PayloadRootUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PayloadRootUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PayloadRootUtils()", "full_signature": "private  PayloadRootUtils()", "class_method_signature": "PayloadRootUtils.PayloadRootUtils()", "testcase": false, "constructor": true}, {"identifier": "getPayloadRootQName", "parameters": "(Source source, TransformerFactory transformerFactory)", "modifiers": "public static", "return": "QName", "signature": "QName getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "full_signature": "public static QName getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "class_method_signature": "PayloadRootUtils.getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "testcase": false, "constructor": false}, {"identifier": "getPayloadRootQName", "parameters": "(Source source, TransformerHelper transformerHelper)", "modifiers": "public static", "return": "QName", "signature": "QName getPayloadRootQName(Source source, TransformerHelper transformerHelper)", "full_signature": "public static QName getPayloadRootQName(Source source, TransformerHelper transformerHelper)", "class_method_signature": "PayloadRootUtils.getPayloadRootQName(Source source, TransformerHelper transformerHelper)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/support/PayloadRootUtils.java"}, "focal_method": {"identifier": "getPayloadRootQName", "parameters": "(Source source, TransformerFactory transformerFactory)", "modifiers": "public static", "return": "QName", "body": "public static QName getPayloadRootQName(Source source, TransformerFactory transformerFactory)\n\t\t\tthrows TransformerException {\n\t\treturn getPayloadRootQName(source, new TransformerHelper(transformerFactory));\n\t}", "signature": "QName getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "full_signature": "public static QName getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "class_method_signature": "PayloadRootUtils.getPayloadRootQName(Source source, TransformerFactory transformerFactory)", "testcase": false, "constructor": false, "invocations": ["getPayloadRootQName"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}