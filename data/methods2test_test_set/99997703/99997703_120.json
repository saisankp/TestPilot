{"test_class": {"identifier": "IdGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/id/IdGeneratorTest.java"}, "test_case": {"identifier": "getIdReturnsNewId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getIdReturnsNewId() {\n        Id<A> idA = IdGenerator.getId(A.class);\n        Id<B> idB = IdGenerator.getId(B.class);\n        Assertions.assertNotSame(idA, idB);\n        Assertions.assertSame(idA.id, idB.id);\n    }", "signature": "void getIdReturnsNewId()", "full_signature": "@Test public void getIdReturnsNewId()", "class_method_signature": "IdGeneratorTest.getIdReturnsNewId()", "testcase": true, "constructor": false, "invocations": ["getId", "getId", "assertNotSame", "assertSame"]}, "focal_class": {"identifier": "IdGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Class<?>, AtomicLong> idCounters = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<Class<?>, AtomicLong>", "declarator": "idCounters = new ConcurrentHashMap<>()", "var_name": "idCounters"}], "methods": [{"identifier": "IdGenerator", "parameters": "()", "modifiers": "private", "return": "", "signature": " IdGenerator()", "full_signature": "private  IdGenerator()", "class_method_signature": "IdGenerator.IdGenerator()", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "(Class<T> classForId)", "modifiers": "public static", "return": "Id<T>", "signature": "Id<T> getId(Class<T> classForId)", "full_signature": "public static Id<T> getId(Class<T> classForId)", "class_method_signature": "IdGenerator.getId(Class<T> classForId)", "testcase": false, "constructor": false}, {"identifier": "getCachedId", "parameters": "(Class<T> classForId)", "modifiers": "public static", "return": "Id<T>", "signature": "Id<T> getCachedId(Class<T> classForId)", "full_signature": "public static Id<T> getCachedId(Class<T> classForId)", "class_method_signature": "IdGenerator.getCachedId(Class<T> classForId)", "testcase": false, "constructor": false}, {"identifier": "getRawIdGenerator", "parameters": "(Class<?> classForId)", "modifiers": "public static", "return": "AtomicLong", "signature": "AtomicLong getRawIdGenerator(Class<?> classForId)", "full_signature": "public static AtomicLong getRawIdGenerator(Class<?> classForId)", "class_method_signature": "IdGenerator.getRawIdGenerator(Class<?> classForId)", "testcase": false, "constructor": false}, {"identifier": "initialiseIdCounter", "parameters": "(Class<?> classForId, long lastId)", "modifiers": "public static", "return": "void", "signature": "void initialiseIdCounter(Class<?> classForId, long lastId)", "full_signature": "public static void initialiseIdCounter(Class<?> classForId, long lastId)", "class_method_signature": "IdGenerator.initialiseIdCounter(Class<?> classForId, long lastId)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "IdGenerator.clear()", "testcase": false, "constructor": false}, {"identifier": "getNextId", "parameters": "(Class<?> clazz)", "modifiers": "private static", "return": "long", "signature": "long getNextId(Class<?> clazz)", "full_signature": "private static long getNextId(Class<?> clazz)", "class_method_signature": "IdGenerator.getNextId(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/id/IdGenerator.java"}, "focal_method": {"identifier": "getId", "parameters": "(Class<T> classForId)", "modifiers": "public static", "return": "Id<T>", "body": "public static <T> Id<T> getId(Class<T> classForId) {\n        return Id.create(getNextId(classForId));\n    }", "signature": "Id<T> getId(Class<T> classForId)", "full_signature": "public static Id<T> getId(Class<T> classForId)", "class_method_signature": "IdGenerator.getId(Class<T> classForId)", "testcase": false, "constructor": false, "invocations": ["create", "getNextId"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}