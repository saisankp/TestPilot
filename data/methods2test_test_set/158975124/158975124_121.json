{"test_class": {"identifier": "SyncReceiverLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ISyncReceiverLogger receiverLogger;", "modifier": "private", "type": "ISyncReceiverLogger", "declarator": "receiverLogger", "var_name": "receiverLogger"}, {"original_string": "private String dataDir;", "modifier": "private", "type": "String", "declarator": "dataDir", "var_name": "dataDir"}], "file": "server/src/test/java/org/apache/iotdb/db/sync/receiver/recover/SyncReceiverLoggerTest.java"}, "test_case": {"identifier": "testSyncReceiverLogger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSyncReceiverLogger() throws IOException {\n    receiverLogger = new SyncReceiverLogger(\n        new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME));\n    Set<String> deletedFileNames = new HashSet<>();\n    Set<String> deletedFileNamesTest = new HashSet<>();\n    receiverLogger.startSyncDeletedFilesName();\n    for (int i = 0; i < 200; i++) {\n      receiverLogger\n          .finishSyncDeletedFileName(new File(getReceiverFolderFile(), \"deleted\" + i));\n      deletedFileNames\n          .add(new File(getReceiverFolderFile(), \"deleted\" + i).getAbsolutePath());\n    }\n    Set<String> toBeSyncedFiles = new HashSet<>();\n    Set<String> toBeSyncedFilesTest = new HashSet<>();\n    receiverLogger.startSyncTsFiles();\n    for (int i = 0; i < 200; i++) {\n      receiverLogger\n          .finishSyncTsfile(new File(getReceiverFolderFile(), \"new\" + i));\n      toBeSyncedFiles\n          .add(new File(getReceiverFolderFile(), \"new\" + i).getAbsolutePath());\n    }\n    receiverLogger.close();\n    int count = 0;\n    int mode = 0;\n    try (BufferedReader br = new BufferedReader(\n        new FileReader(new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME)))) {\n      String line;\n      while ((line = br.readLine()) != null) {\n        count++;\n        if (line.equals(SyncReceiverLogger.SYNC_DELETED_FILE_NAME_START)) {\n          mode = -1;\n        } else if (line.equals(SyncReceiverLogger.SYNC_TSFILE_START)) {\n          mode = 1;\n        } else {\n          if (mode == -1) {\n            deletedFileNamesTest.add(line);\n          } else if (mode == 1) {\n            toBeSyncedFilesTest.add(line);\n          }\n        }\n      }\n    }\n    assertEquals(402, count);\n    assertEquals(deletedFileNames.size(), deletedFileNamesTest.size());\n    assertEquals(toBeSyncedFiles.size(), toBeSyncedFilesTest.size());\n    assertTrue(deletedFileNames.containsAll(deletedFileNamesTest));\n    assertTrue(toBeSyncedFiles.containsAll(toBeSyncedFilesTest));\n  }", "signature": "void testSyncReceiverLogger()", "full_signature": "@Test public void testSyncReceiverLogger()", "class_method_signature": "SyncReceiverLoggerTest.testSyncReceiverLogger()", "testcase": true, "constructor": false, "invocations": ["getReceiverFolderFile", "startSyncDeletedFilesName", "finishSyncDeletedFileName", "getReceiverFolderFile", "add", "getAbsolutePath", "getReceiverFolderFile", "startSyncTsFiles", "finishSyncTsfile", "getReceiverFolderFile", "add", "getAbsolutePath", "getReceiverFolderFile", "close", "getReceiverFolderFile", "readLine", "equals", "equals", "add", "add", "assertEquals", "assertEquals", "size", "size", "assertEquals", "size", "size", "assertTrue", "containsAll", "assertTrue", "containsAll"]}, "focal_class": {"identifier": "SyncReceiverLogger", "superclass": "", "interfaces": "implements ISyncReceiverLogger", "fields": [{"original_string": "private BufferedWriter bw;", "modifier": "private", "type": "BufferedWriter", "declarator": "bw", "var_name": "bw"}], "methods": [{"identifier": "SyncReceiverLogger", "parameters": "(File logFile)", "modifiers": "public", "return": "", "signature": " SyncReceiverLogger(File logFile)", "full_signature": "public  SyncReceiverLogger(File logFile)", "class_method_signature": "SyncReceiverLogger.SyncReceiverLogger(File logFile)", "testcase": false, "constructor": true}, {"identifier": "startSyncDeletedFilesName", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startSyncDeletedFilesName()", "full_signature": "@Override public void startSyncDeletedFilesName()", "class_method_signature": "SyncReceiverLogger.startSyncDeletedFilesName()", "testcase": false, "constructor": false}, {"identifier": "finishSyncDeletedFileName", "parameters": "(File file)", "modifiers": "@Override public", "return": "void", "signature": "void finishSyncDeletedFileName(File file)", "full_signature": "@Override public void finishSyncDeletedFileName(File file)", "class_method_signature": "SyncReceiverLogger.finishSyncDeletedFileName(File file)", "testcase": false, "constructor": false}, {"identifier": "startSyncTsFiles", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startSyncTsFiles()", "full_signature": "@Override public void startSyncTsFiles()", "class_method_signature": "SyncReceiverLogger.startSyncTsFiles()", "testcase": false, "constructor": false}, {"identifier": "finishSyncTsfile", "parameters": "(File file)", "modifiers": "@Override public", "return": "void", "signature": "void finishSyncTsfile(File file)", "full_signature": "@Override public void finishSyncTsfile(File file)", "class_method_signature": "SyncReceiverLogger.finishSyncTsfile(File file)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SyncReceiverLogger.close()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/sync/receiver/recover/SyncReceiverLogger.java"}, "focal_method": {"identifier": "SyncReceiverLogger", "parameters": "(File logFile)", "modifiers": "public", "return": "", "body": "public SyncReceiverLogger(File logFile) throws IOException {\n    if (!logFile.getParentFile().exists()) {\n      logFile.getParentFile().mkdirs();\n    }\n    bw = new BufferedWriter(new FileWriter(logFile));\n  }", "signature": " SyncReceiverLogger(File logFile)", "full_signature": "public  SyncReceiverLogger(File logFile)", "class_method_signature": "SyncReceiverLogger.SyncReceiverLogger(File logFile)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}