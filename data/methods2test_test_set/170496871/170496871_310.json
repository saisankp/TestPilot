{"test_class": {"identifier": "LinearRegressionSGDTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/regressions/linear/LinearRegressionSGDTrainerTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdate() {\n        Map<Integer, double[]> data = new HashMap<>();\n        data.put(0, new double[]{-1.0915526, 1.81983527, -0.91409478, 0.70890712, -24.55724107});\n        data.put(1, new double[]{-0.61072904, 0.37545517, 0.21705352, 0.09516495, -26.57226867});\n        data.put(2, new double[]{0.05485406, 0.88219898, -0.80584547, 0.94668307, 61.80919728});\n        data.put(3, new double[]{-0.24835094, -0.34000053, -1.69984651, -1.45902635, -161.65525991});\n        data.put(4, new double[]{0.63675392, 0.31675535, 0.38837437, -1.1221971, -14.46432611});\n        data.put(5, new double[]{0.14194017, 2.18158997, -0.28397346, -0.62090588, -3.2122197});\n        data.put(6, new double[]{-0.53487507, 1.4454797, 0.21570443, -0.54161422, -46.5469012});\n        data.put(7, new double[]{-1.58812173, -0.73216803, -2.15670676, -1.03195988, -247.23559889});\n        data.put(8, new double[]{0.20702671, 0.92864654, 0.32721202, -0.09047503, 31.61484949});\n        data.put(9, new double[]{-0.37890345, -0.04846179, -0.84122753, -1.14667474, -124.92598583});\n\n        LinearRegressionSGDTrainer<?> trainer = new LinearRegressionSGDTrainer<>(new UpdatesStrategy<>(\n            new RPropUpdateCalculator(),\n            RPropParameterUpdate.SUM_LOCAL,\n            RPropParameterUpdate.AVG\n        ), 1800, 10, 10, 123L);\n\n        LinearRegressionModel originalMdl = trainer.withSeed(0).fit(\n            data, parts,\n            new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n        );\n\n        LinearRegressionModel updatedOnSameDS = trainer.withSeed(0).update(\n            originalMdl,\n            data,\n            parts,\n            new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n        );\n\n        LinearRegressionModel updatedOnEmptyDS = trainer.withSeed(0).update(\n            originalMdl,\n            new HashMap<>(),\n            parts,\n            new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n        );\n\n        assertArrayEquals(\n            originalMdl.getWeights().getStorage().data(),\n            updatedOnSameDS.getWeights().getStorage().data(),\n            1.0\n        );\n\n        assertEquals(originalMdl.getIntercept(), updatedOnSameDS.getIntercept(), 1.0);\n\n        assertArrayEquals(\n            originalMdl.getWeights().getStorage().data(),\n            updatedOnEmptyDS.getWeights().getStorage().data(),\n            1e-1\n        );\n\n        assertEquals(originalMdl.getIntercept(), updatedOnEmptyDS.getIntercept(), 1e-1);\n    }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "LinearRegressionSGDTrainerTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "fit", "withSeed", "labeled", "update", "withSeed", "labeled", "update", "withSeed", "labeled", "assertArrayEquals", "data", "getStorage", "getWeights", "data", "getStorage", "getWeights", "assertEquals", "getIntercept", "getIntercept", "assertArrayEquals", "data", "getStorage", "getWeights", "data", "getStorage", "getWeights", "assertEquals", "getIntercept", "getIntercept"]}, "focal_class": {"identifier": "LinearRegressionSGDTrainer", "superclass": "extends SingleLabelDatasetTrainer<LinearRegressionModel>", "interfaces": "", "fields": [{"original_string": "private final UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy;", "modifier": "private final", "type": "UpdatesStrategy<? super MultilayerPerceptron, P>", "declarator": "updatesStgy", "var_name": "updatesStgy"}, {"original_string": "private int maxIterations = 1000;", "modifier": "private", "type": "int", "declarator": "maxIterations = 1000", "var_name": "maxIterations"}, {"original_string": "private int batchSize = 10;", "modifier": "private", "type": "int", "declarator": "batchSize = 10", "var_name": "batchSize"}, {"original_string": "private int locIterations = 100;", "modifier": "private", "type": "int", "declarator": "locIterations = 100", "var_name": "locIterations"}, {"original_string": "private long seed = 1234L;", "modifier": "private", "type": "long", "declarator": "seed = 1234L", "var_name": "seed"}], "methods": [{"identifier": "LinearRegressionSGDTrainer", "parameters": "(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy, int maxIterations,\n        int batchSize, int locIterations, long seed)", "modifiers": "public", "return": "", "signature": " LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy, int maxIterations,\n        int batchSize, int locIterations, long seed)", "full_signature": "public  LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy, int maxIterations,\n        int batchSize, int locIterations, long seed)", "class_method_signature": "LinearRegressionSGDTrainer.LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy, int maxIterations,\n        int batchSize, int locIterations, long seed)", "testcase": false, "constructor": true}, {"identifier": "LinearRegressionSGDTrainer", "parameters": "(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy)", "modifiers": "public", "return": "", "signature": " LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy)", "full_signature": "public  LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy)", "class_method_signature": "LinearRegressionSGDTrainer.LinearRegressionSGDTrainer(UpdatesStrategy<? super MultilayerPerceptron, P> updatesStgy)", "testcase": false, "constructor": true}, {"identifier": "fitWithInitializedDeployingContext", "parameters": "(DatasetBuilder<K, V> datasetBuilder,\n                                                      Preprocessor<K, V> extractor)", "modifiers": "@Override public", "return": "LinearRegressionModel", "signature": "LinearRegressionModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                      Preprocessor<K, V> extractor)", "full_signature": "@Override public LinearRegressionModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                      Preprocessor<K, V> extractor)", "class_method_signature": "LinearRegressionSGDTrainer.fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                      Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(LinearRegressionModel mdl,\n                                                                 DatasetBuilder<K, V> datasetBuilder,\n                                                                 Preprocessor<K, V> extractor)", "modifiers": "@Override protected", "return": "LinearRegressionModel", "signature": "LinearRegressionModel updateModel(LinearRegressionModel mdl,\n                                                                 DatasetBuilder<K, V> datasetBuilder,\n                                                                 Preprocessor<K, V> extractor)", "full_signature": "@Override protected LinearRegressionModel updateModel(LinearRegressionModel mdl,\n                                                                 DatasetBuilder<K, V> datasetBuilder,\n                                                                 Preprocessor<K, V> extractor)", "class_method_signature": "LinearRegressionSGDTrainer.updateModel(LinearRegressionModel mdl,\n                                                                 DatasetBuilder<K, V> datasetBuilder,\n                                                                 Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "restoreMLPState", "parameters": "(LinearRegressionModel mdl)", "modifiers": "@NotNull private", "return": "MultilayerPerceptron", "signature": "MultilayerPerceptron restoreMLPState(LinearRegressionModel mdl)", "full_signature": "@NotNull private MultilayerPerceptron restoreMLPState(LinearRegressionModel mdl)", "class_method_signature": "LinearRegressionSGDTrainer.restoreMLPState(LinearRegressionModel mdl)", "testcase": false, "constructor": false}, {"identifier": "isUpdateable", "parameters": "(LinearRegressionModel mdl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateable(LinearRegressionModel mdl)", "full_signature": "@Override public boolean isUpdateable(LinearRegressionModel mdl)", "class_method_signature": "LinearRegressionSGDTrainer.isUpdateable(LinearRegressionModel mdl)", "testcase": false, "constructor": false}, {"identifier": "withMaxIterations", "parameters": "(int maxIterations)", "modifiers": "public", "return": "LinearRegressionSGDTrainer<P>", "signature": "LinearRegressionSGDTrainer<P> withMaxIterations(int maxIterations)", "full_signature": "public LinearRegressionSGDTrainer<P> withMaxIterations(int maxIterations)", "class_method_signature": "LinearRegressionSGDTrainer.withMaxIterations(int maxIterations)", "testcase": false, "constructor": false}, {"identifier": "withBatchSize", "parameters": "(int batchSize)", "modifiers": "public", "return": "LinearRegressionSGDTrainer<P>", "signature": "LinearRegressionSGDTrainer<P> withBatchSize(int batchSize)", "full_signature": "public LinearRegressionSGDTrainer<P> withBatchSize(int batchSize)", "class_method_signature": "LinearRegressionSGDTrainer.withBatchSize(int batchSize)", "testcase": false, "constructor": false}, {"identifier": "withLocIterations", "parameters": "(int amountOfLocIterations)", "modifiers": "public", "return": "LinearRegressionSGDTrainer<P>", "signature": "LinearRegressionSGDTrainer<P> withLocIterations(int amountOfLocIterations)", "full_signature": "public LinearRegressionSGDTrainer<P> withLocIterations(int amountOfLocIterations)", "class_method_signature": "LinearRegressionSGDTrainer.withLocIterations(int amountOfLocIterations)", "testcase": false, "constructor": false}, {"identifier": "withSeed", "parameters": "(long seed)", "modifiers": "public", "return": "LinearRegressionSGDTrainer<P>", "signature": "LinearRegressionSGDTrainer<P> withSeed(long seed)", "full_signature": "public LinearRegressionSGDTrainer<P> withSeed(long seed)", "class_method_signature": "LinearRegressionSGDTrainer.withSeed(long seed)", "testcase": false, "constructor": false}, {"identifier": "getUpdatesStgy", "parameters": "()", "modifiers": "public", "return": "UpdatesStrategy<? super MultilayerPerceptron, P>", "signature": "UpdatesStrategy<? super MultilayerPerceptron, P> getUpdatesStgy()", "full_signature": "public UpdatesStrategy<? super MultilayerPerceptron, P> getUpdatesStgy()", "class_method_signature": "LinearRegressionSGDTrainer.getUpdatesStgy()", "testcase": false, "constructor": false}, {"identifier": "getMaxIterations", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxIterations()", "full_signature": "public int getMaxIterations()", "class_method_signature": "LinearRegressionSGDTrainer.getMaxIterations()", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBatchSize()", "full_signature": "public int getBatchSize()", "class_method_signature": "LinearRegressionSGDTrainer.getBatchSize()", "testcase": false, "constructor": false}, {"identifier": "getLocIterations", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLocIterations()", "full_signature": "public int getLocIterations()", "class_method_signature": "LinearRegressionSGDTrainer.getLocIterations()", "testcase": false, "constructor": false}, {"identifier": "getSeed", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSeed()", "full_signature": "public long getSeed()", "class_method_signature": "LinearRegressionSGDTrainer.getSeed()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/regressions/linear/LinearRegressionSGDTrainer.java"}, "focal_method": {"identifier": "withSeed", "parameters": "(long seed)", "modifiers": "public", "return": "LinearRegressionSGDTrainer<P>", "body": "public LinearRegressionSGDTrainer<P> withSeed(long seed) {\n        this.seed = seed;\n        return this;\n    }", "signature": "LinearRegressionSGDTrainer<P> withSeed(long seed)", "full_signature": "public LinearRegressionSGDTrainer<P> withSeed(long seed)", "class_method_signature": "LinearRegressionSGDTrainer.withSeed(long seed)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}