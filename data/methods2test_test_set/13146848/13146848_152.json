{"test_class": {"identifier": "ExtractPagesParametersTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/parameter/ExtractPagesParametersTest.java"}, "test_case": {"identifier": "getPages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPages() {\n        ExtractPagesParameters victim = new ExtractPagesParameters(PredefinedSetOfPages.EVEN_PAGES);\n        assertEquals(5, victim.getPages(10).size());\n        ExtractPagesParameters victim2 = new ExtractPagesParameters();\n        victim2.addPageRange(new PageRange(12));\n        assertEquals(4, victim2.getPages(15).size());\n    }", "signature": "void getPages()", "full_signature": "@Test public void getPages()", "class_method_signature": "ExtractPagesParametersTest.getPages()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getPages", "addPageRange", "assertEquals", "size", "getPages"]}, "focal_class": {"identifier": "ExtractPagesParameters", "superclass": "extends MultiplePdfSourceMultipleOutputParameters", "interfaces": "implements PageRangeSelection,\n        PagesSelection, OptimizableOutputTaskParameters, DiscardableOutlineTaskParameters", "fields": [{"original_string": "@NotNull\n    private OptimizationPolicy optimizationPolicy = OptimizationPolicy.NO;", "modifier": "@NotNull\n    private", "type": "OptimizationPolicy", "declarator": "optimizationPolicy = OptimizationPolicy.NO", "var_name": "optimizationPolicy"}, {"original_string": "private boolean discardOutline = false;", "modifier": "private", "type": "boolean", "declarator": "discardOutline = false", "var_name": "discardOutline"}, {"original_string": "@NotNull\n    @NotAllowed(disallow = { PredefinedSetOfPages.ALL_PAGES })\n    private PredefinedSetOfPages predefinedSetOfPages;", "modifier": "@NotNull\n    @NotAllowed(disallow = { PredefinedSetOfPages.ALL_PAGES })\n    private", "type": "PredefinedSetOfPages", "declarator": "predefinedSetOfPages", "var_name": "predefinedSetOfPages"}, {"original_string": "@Valid\n    private final Set<PageRange> pageSelection = new NullSafeSet<PageRange>();", "modifier": "@Valid\n    private final", "type": "Set<PageRange>", "declarator": "pageSelection = new NullSafeSet<PageRange>()", "var_name": "pageSelection"}, {"original_string": "private boolean invertSelection = false;", "modifier": "private", "type": "boolean", "declarator": "invertSelection = false", "var_name": "invertSelection"}, {"original_string": "private boolean separateFileForEachRange = false;", "modifier": "private", "type": "boolean", "declarator": "separateFileForEachRange = false", "var_name": "separateFileForEachRange"}], "methods": [{"identifier": "ExtractPagesParameters", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExtractPagesParameters()", "full_signature": "public  ExtractPagesParameters()", "class_method_signature": "ExtractPagesParameters.ExtractPagesParameters()", "testcase": false, "constructor": true}, {"identifier": "ExtractPagesParameters", "parameters": "(PredefinedSetOfPages predefinedSetOfPages)", "modifiers": "public", "return": "", "signature": " ExtractPagesParameters(PredefinedSetOfPages predefinedSetOfPages)", "full_signature": "public  ExtractPagesParameters(PredefinedSetOfPages predefinedSetOfPages)", "class_method_signature": "ExtractPagesParameters.ExtractPagesParameters(PredefinedSetOfPages predefinedSetOfPages)", "testcase": false, "constructor": true}, {"identifier": "addPageRange", "parameters": "(PageRange range)", "modifiers": "public", "return": "void", "signature": "void addPageRange(PageRange range)", "full_signature": "public void addPageRange(PageRange range)", "class_method_signature": "ExtractPagesParameters.addPageRange(PageRange range)", "testcase": false, "constructor": false}, {"identifier": "addAllPageRanges", "parameters": "(Collection<PageRange> ranges)", "modifiers": "public", "return": "void", "signature": "void addAllPageRanges(Collection<PageRange> ranges)", "full_signature": "public void addAllPageRanges(Collection<PageRange> ranges)", "class_method_signature": "ExtractPagesParameters.addAllPageRanges(Collection<PageRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "getPredefinedSetOfPages", "parameters": "()", "modifiers": "public", "return": "PredefinedSetOfPages", "signature": "PredefinedSetOfPages getPredefinedSetOfPages()", "full_signature": "public PredefinedSetOfPages getPredefinedSetOfPages()", "class_method_signature": "ExtractPagesParameters.getPredefinedSetOfPages()", "testcase": false, "constructor": false}, {"identifier": "getPageSelection", "parameters": "()", "modifiers": "@Override public", "return": "Set<PageRange>", "signature": "Set<PageRange> getPageSelection()", "full_signature": "@Override public Set<PageRange> getPageSelection()", "class_method_signature": "ExtractPagesParameters.getPageSelection()", "testcase": false, "constructor": false}, {"identifier": "getPages", "parameters": "(int upperLimit)", "modifiers": "@Override public", "return": "Set<Integer>", "signature": "Set<Integer> getPages(int upperLimit)", "full_signature": "@Override public Set<Integer> getPages(int upperLimit)", "class_method_signature": "ExtractPagesParameters.getPages(int upperLimit)", "testcase": false, "constructor": false}, {"identifier": "getPagesSets", "parameters": "(int upperLimit)", "modifiers": "public", "return": "List<Set<Integer>>", "signature": "List<Set<Integer>> getPagesSets(int upperLimit)", "full_signature": "public List<Set<Integer>> getPagesSets(int upperLimit)", "class_method_signature": "ExtractPagesParameters.getPagesSets(int upperLimit)", "testcase": false, "constructor": false}, {"identifier": "getOptimizationPolicy", "parameters": "()", "modifiers": "@Override public", "return": "OptimizationPolicy", "signature": "OptimizationPolicy getOptimizationPolicy()", "full_signature": "@Override public OptimizationPolicy getOptimizationPolicy()", "class_method_signature": "ExtractPagesParameters.getOptimizationPolicy()", "testcase": false, "constructor": false}, {"identifier": "setOptimizationPolicy", "parameters": "(OptimizationPolicy optimizationPolicy)", "modifiers": "@Override public", "return": "void", "signature": "void setOptimizationPolicy(OptimizationPolicy optimizationPolicy)", "full_signature": "@Override public void setOptimizationPolicy(OptimizationPolicy optimizationPolicy)", "class_method_signature": "ExtractPagesParameters.setOptimizationPolicy(OptimizationPolicy optimizationPolicy)", "testcase": false, "constructor": false}, {"identifier": "discardOutline", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean discardOutline()", "full_signature": "@Override public boolean discardOutline()", "class_method_signature": "ExtractPagesParameters.discardOutline()", "testcase": false, "constructor": false}, {"identifier": "discardOutline", "parameters": "(boolean discardOutline)", "modifiers": "@Override public", "return": "void", "signature": "void discardOutline(boolean discardOutline)", "full_signature": "@Override public void discardOutline(boolean discardOutline)", "class_method_signature": "ExtractPagesParameters.discardOutline(boolean discardOutline)", "testcase": false, "constructor": false}, {"identifier": "isInvertSelection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInvertSelection()", "full_signature": "public boolean isInvertSelection()", "class_method_signature": "ExtractPagesParameters.isInvertSelection()", "testcase": false, "constructor": false}, {"identifier": "setInvertSelection", "parameters": "(boolean invertSelection)", "modifiers": "public", "return": "void", "signature": "void setInvertSelection(boolean invertSelection)", "full_signature": "public void setInvertSelection(boolean invertSelection)", "class_method_signature": "ExtractPagesParameters.setInvertSelection(boolean invertSelection)", "testcase": false, "constructor": false}, {"identifier": "isSeparateFileForEachRange", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSeparateFileForEachRange()", "full_signature": "public boolean isSeparateFileForEachRange()", "class_method_signature": "ExtractPagesParameters.isSeparateFileForEachRange()", "testcase": false, "constructor": false}, {"identifier": "setSeparateFileForEachRange", "parameters": "(boolean separateFileForEachRange)", "modifiers": "public", "return": "void", "signature": "void setSeparateFileForEachRange(boolean separateFileForEachRange)", "full_signature": "public void setSeparateFileForEachRange(boolean separateFileForEachRange)", "class_method_signature": "ExtractPagesParameters.setSeparateFileForEachRange(boolean separateFileForEachRange)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ExtractPagesParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "ExtractPagesParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/ExtractPagesParameters.java"}, "focal_method": {"identifier": "getPages", "parameters": "(int upperLimit)", "modifiers": "@Override public", "return": "Set<Integer>", "body": "@Override\n    public Set<Integer> getPages(int upperLimit) {\n        Set<Integer> pages = new NullSafeSet<Integer>();\n        if (predefinedSetOfPages != PredefinedSetOfPages.NONE) {\n            pages = predefinedSetOfPages.getPages(upperLimit);\n        } else {\n            for (PageRange range : pageSelection) {\n                pages.addAll(range.getPages(upperLimit));\n            }\n        }\n\n        if (!invertSelection) {\n            return pages;\n        }\n\n        Set<Integer> invertedPages = new NullSafeSet<Integer>();\n        for (int i = 1; i <= upperLimit; i++) {\n            if (!pages.contains(i)) {\n                invertedPages.add(i);\n            }\n        }\n\n        return invertedPages;\n    }", "signature": "Set<Integer> getPages(int upperLimit)", "full_signature": "@Override public Set<Integer> getPages(int upperLimit)", "class_method_signature": "ExtractPagesParameters.getPages(int upperLimit)", "testcase": false, "constructor": false, "invocations": ["getPages", "addAll", "getPages", "contains", "add"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}