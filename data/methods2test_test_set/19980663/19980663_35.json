{"test_class": {"identifier": "FoxtrotTableManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableManager tableManager;", "modifier": "private", "type": "TableManager", "declarator": "tableManager", "var_name": "tableManager"}, {"original_string": "private QueryStore queryStore;", "modifier": "private", "type": "QueryStore", "declarator": "queryStore", "var_name": "queryStore"}, {"original_string": "private DataStore dataStore;", "modifier": "private", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private TableMetadataManager metadataManager;", "modifier": "private", "type": "TableMetadataManager", "declarator": "metadataManager", "var_name": "metadataManager"}], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/table/impl/FoxtrotTableManagerTest.java"}, "test_case": {"identifier": "saveExistingTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void saveExistingTable() throws Exception {\n        doNothing().when(metadataManager)\n                .save(any(Table.class));\n        doNothing().when(dataStore)\n                .initializeTable(any(Table.class), anyBoolean());\n        doNothing().when(queryStore)\n                .initializeTable(any(String.class));\n        doReturn(true).when(metadataManager)\n                .exists(any(String.class));\n        try {\n            Table table = new Table();\n            table.setName(\"abcd\");\n            table.setTtl(10);\n            tableManager.save(table);\n            fail();\n        } catch (FoxtrotException e) {\n            assertEquals(ErrorCode.TABLE_ALREADY_EXISTS, e.getCode());\n        }\n    }", "signature": "void saveExistingTable()", "full_signature": "@Test public void saveExistingTable()", "class_method_signature": "FoxtrotTableManagerTest.saveExistingTable()", "testcase": true, "constructor": false, "invocations": ["save", "when", "doNothing", "any", "initializeTable", "when", "doNothing", "any", "anyBoolean", "initializeTable", "when", "doNothing", "any", "exists", "when", "doReturn", "any", "setName", "setTtl", "save", "fail", "assertEquals", "getCode"]}, "focal_class": {"identifier": "FoxtrotTableManager", "superclass": "", "interfaces": "implements TableManager", "fields": [{"original_string": "private final TableMetadataManager metadataManager;", "modifier": "private final", "type": "TableMetadataManager", "declarator": "metadataManager", "var_name": "metadataManager"}, {"original_string": "private final QueryStore queryStore;", "modifier": "private final", "type": "QueryStore", "declarator": "queryStore", "var_name": "queryStore"}, {"original_string": "private final DataStore dataStore;", "modifier": "private final", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}], "methods": [{"identifier": "FoxtrotTableManager", "parameters": "(TableMetadataManager metadataManager, QueryStore queryStore, DataStore dataStore)", "modifiers": "@Inject public", "return": "", "signature": " FoxtrotTableManager(TableMetadataManager metadataManager, QueryStore queryStore, DataStore dataStore)", "full_signature": "@Inject public  FoxtrotTableManager(TableMetadataManager metadataManager, QueryStore queryStore, DataStore dataStore)", "class_method_signature": "FoxtrotTableManager.FoxtrotTableManager(TableMetadataManager metadataManager, QueryStore queryStore, DataStore dataStore)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(Table table)", "modifiers": "@Override public", "return": "void", "signature": "void save(Table table)", "full_signature": "@Override public void save(Table table)", "class_method_signature": "FoxtrotTableManager.save(Table table)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Table table, boolean forceCreateTable)", "modifiers": "@Override public", "return": "void", "signature": "void save(Table table, boolean forceCreateTable)", "full_signature": "@Override public void save(Table table, boolean forceCreateTable)", "class_method_signature": "FoxtrotTableManager.save(Table table, boolean forceCreateTable)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name)", "modifiers": "@Override public", "return": "Table", "signature": "Table get(String name)", "full_signature": "@Override public Table get(String name)", "class_method_signature": "FoxtrotTableManager.get(String name)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "List<Table>", "signature": "List<Table> getAll()", "full_signature": "@Override public List<Table> getAll()", "class_method_signature": "FoxtrotTableManager.getAll()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Table table)", "modifiers": "@Override public", "return": "void", "signature": "void update(Table table)", "full_signature": "@Override public void update(Table table)", "class_method_signature": "FoxtrotTableManager.update(Table table)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String tableName)", "full_signature": "@Override public void delete(String tableName)", "class_method_signature": "FoxtrotTableManager.delete(String tableName)", "testcase": false, "constructor": false}, {"identifier": "validateTableParams", "parameters": "(Table table)", "modifiers": "private", "return": "void", "signature": "void validateTableParams(Table table)", "full_signature": "private void validateTableParams(Table table)", "class_method_signature": "FoxtrotTableManager.validateTableParams(Table table)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/table/impl/FoxtrotTableManager.java"}, "focal_method": {"identifier": "save", "parameters": "(Table table)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(Table table) {\n        validateTableParams(table);\n        if(metadataManager.exists(table.getName())) {\n            throw FoxtrotExceptions.createTableExistsException(table.getName());\n        }\n        queryStore.initializeTable(table.getName());\n        dataStore.initializeTable(table, false);\n        metadataManager.save(table);\n    }", "signature": "void save(Table table)", "full_signature": "@Override public void save(Table table)", "class_method_signature": "FoxtrotTableManager.save(Table table)", "testcase": false, "constructor": false, "invocations": ["validateTableParams", "exists", "getName", "createTableExistsException", "getName", "initializeTable", "getName", "initializeTable", "save"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}