{"test_class": {"identifier": "TestCookieSessionTracking", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COOKIE_PATH_TEST = \"cookiePathTest/\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE_PATH_TEST = \"cookiePathTest/\"", "var_name": "COOKIE_PATH_TEST"}, {"original_string": "private CookieSessionTracking cookieSessionTracking;", "modifier": "private", "type": "CookieSessionTracking", "declarator": "cookieSessionTracking", "var_name": "cookieSessionTracking"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestCookieSessionTracking.java"}, "test_case": {"identifier": "testEncodeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEncodeUrl() {\n    SessionConfiguration sc = new SessionConfiguration();\n    sc.setSessionIdName(\"asession\");\n    cookieSessionTracking.configure(sc);\n    RequestWithSession request = mock(RequestWithSession.class,\n        withSettings().extraInterfaces(HttpServletRequest.class));\n    RepositoryBackedSession session = mock(RepositoryBackedSession.class);\n    when(request.getRepositoryBackedSession(false)).thenReturn(session);\n    when(session.isValid()).thenReturn(Boolean.FALSE);\n    String url = cookieSessionTracking.encodeUrl(request, \"http://www.example.com\");\n    assertEquals(\"http://www.example.com\", url);\n    when(session.isValid()).thenReturn(Boolean.TRUE);\n    when(session.getId()).thenReturn(\"1234\");\n    url = cookieSessionTracking.encodeUrl(request, \"http://www.example.com\");\n    assertEquals(\"Session is valid, but URL stames the same\", \"http://www.example.com\", url);\n  }", "signature": "void testEncodeUrl()", "full_signature": "@Test public void testEncodeUrl()", "class_method_signature": "TestCookieSessionTracking.testEncodeUrl()", "testcase": true, "constructor": false, "invocations": ["setSessionIdName", "configure", "mock", "extraInterfaces", "withSettings", "mock", "thenReturn", "when", "getRepositoryBackedSession", "thenReturn", "when", "isValid", "encodeUrl", "assertEquals", "thenReturn", "when", "isValid", "thenReturn", "when", "getId", "encodeUrl", "assertEquals"]}, "focal_class": {"identifier": "CookieSessionTracking", "superclass": "extends BaseSessionTracking", "interfaces": "implements SessionTracking", "fields": [{"original_string": "static final String DEFAULT_CONTEXT_PATH = \"/\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_CONTEXT_PATH = \"/\"", "var_name": "DEFAULT_CONTEXT_PATH"}, {"original_string": "static final String COOKIE_CONTEXT_PATH_PARAMETER = \"com.amadeus.session.cookie.contextPath\";", "modifier": "static final", "type": "String", "declarator": "COOKIE_CONTEXT_PATH_PARAMETER = \"com.amadeus.session.cookie.contextPath\"", "var_name": "COOKIE_CONTEXT_PATH_PARAMETER"}, {"original_string": "static final String SECURE_COOKIE_PARAMETER = \"com.amadeus.session.cookie.secure\";", "modifier": "static final", "type": "String", "declarator": "SECURE_COOKIE_PARAMETER = \"com.amadeus.session.cookie.secure\"", "var_name": "SECURE_COOKIE_PARAMETER"}, {"original_string": "static final String SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER = \"com.amadeus.session.cookie.secure.on.secured.request\";", "modifier": "static final", "type": "String", "declarator": "SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER = \"com.amadeus.session.cookie.secure.on.secured.request\"", "var_name": "SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER"}, {"original_string": "static final String COOKIE_HTTP_ONLY_PARAMETER = \"com.amadeus.session.cookie.httpOnly\";", "modifier": "static final", "type": "String", "declarator": "COOKIE_HTTP_ONLY_PARAMETER = \"com.amadeus.session.cookie.httpOnly\"", "var_name": "COOKIE_HTTP_ONLY_PARAMETER"}, {"original_string": "private boolean httpOnly = true;", "modifier": "private", "type": "boolean", "declarator": "httpOnly = true", "var_name": "httpOnly"}, {"original_string": "private String contextPath;", "modifier": "private", "type": "String", "declarator": "contextPath", "var_name": "contextPath"}, {"original_string": "private Boolean secure;", "modifier": "private", "type": "Boolean", "declarator": "secure", "var_name": "secure"}, {"original_string": "private Boolean secureOnlyOnSecuredRequest;", "modifier": "private", "type": "Boolean", "declarator": "secureOnlyOnSecuredRequest", "var_name": "secureOnlyOnSecuredRequest"}], "methods": [{"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "CookieSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "(RequestWithSession request, Object response)", "modifiers": "@Override public", "return": "void", "signature": "void propagateSession(RequestWithSession request, Object response)", "full_signature": "@Override public void propagateSession(RequestWithSession request, Object response)", "class_method_signature": "CookieSessionTracking.propagateSession(RequestWithSession request, Object response)", "testcase": false, "constructor": false}, {"identifier": "cookiePath", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String cookiePath()", "full_signature": "private String cookiePath()", "class_method_signature": "CookieSessionTracking.cookiePath()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(SessionConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void configure(SessionConfiguration conf)", "full_signature": "@Override public void configure(SessionConfiguration conf)", "class_method_signature": "CookieSessionTracking.configure(SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "isCookieTracking", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCookieTracking()", "full_signature": "@Override public boolean isCookieTracking()", "class_method_signature": "CookieSessionTracking.isCookieTracking()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/CookieSessionTracking.java"}, "focal_method": {"identifier": "configure", "parameters": "(SessionConfiguration conf)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure(SessionConfiguration conf) {\n    super.configure(conf);\n    httpOnly = Boolean.valueOf(conf.getAttribute(COOKIE_HTTP_ONLY_PARAMETER, \"true\"));\n    secure = Boolean.valueOf(conf.getAttribute(SECURE_COOKIE_PARAMETER, \"false\"));\n    secureOnlyOnSecuredRequest = Boolean.valueOf(conf.getAttribute(SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER, \"false\"));\n    contextPath = conf.getAttribute(COOKIE_CONTEXT_PATH_PARAMETER, null);\n  }", "signature": "void configure(SessionConfiguration conf)", "full_signature": "@Override public void configure(SessionConfiguration conf)", "class_method_signature": "CookieSessionTracking.configure(SessionConfiguration conf)", "testcase": false, "constructor": false, "invocations": ["configure", "valueOf", "getAttribute", "valueOf", "getAttribute", "valueOf", "getAttribute", "getAttribute"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}