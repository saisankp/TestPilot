{"test_class": {"identifier": "TakeSnapshotTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    TakeSnapshotTask task = new TakeSnapshotTask(null, null, null, from(now()));", "modifier": "@InjectMocks", "type": "TakeSnapshotTask", "declarator": "task = new TakeSnapshotTask(null, null, null, from(now()))", "var_name": "task"}, {"original_string": "@Mock\n    Scorer scorer;", "modifier": "@Mock", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "@Mock\n    Date date = new Date();", "modifier": "@Mock", "type": "Date", "declarator": "date = new Date()", "var_name": "date"}, {"original_string": "static final String ORGANIZATION_LOGIN = \"myLogin\";", "modifier": "static final", "type": "String", "declarator": "ORGANIZATION_LOGIN = \"myLogin\"", "var_name": "ORGANIZATION_LOGIN"}, {"original_string": "static final int ORGANIZATION_ID = 77;", "modifier": "static final", "type": "int", "declarator": "ORGANIZATION_ID = 77", "var_name": "ORGANIZATION_ID"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/github/TakeSnapshotTaskTest.java"}, "test_case": {"identifier": "testCollectContributors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectContributors() throws Exception {\n\n        // given\n        RepositoryWrapper repo1 = mock(RepositoryWrapper.class);\n        Contributor c1 = newContributor(11, 22, \"http://a.com\", 33);\n        when(repo1.listContributors()).thenReturn(asList(c1));\n\n        RepositoryWrapper repo2 = mock(RepositoryWrapper.class);\n        Contributor c2 = newContributor(44, 55, \"http://b.com\", 66);\n        when(repo2.listContributors()).thenReturn(asList(c2));\n\n        List<org.zalando.catwatch.backend.model.Contributor> contributors =\n                new ArrayList<>(\n                        task.collectContributors(org(asList(repo1, repo2))));\n\n        assertThat(contributors, hasSize(2));\n\n        org.zalando.catwatch.backend.model.Contributor c1_ = contributors.get(0);\n        assertThat(c1_.getId(), equalTo(11L));\n        assertThat(c1_.getOrganizationalCommitsCount(), equalTo(22));\n        assertThat(c1_.getUrl(), equalTo(\"http://a.com\"));\n\n        org.zalando.catwatch.backend.model.Contributor c2_ = contributors.get(1);\n        assertThat(c2_.getId(), equalTo(44L));\n        assertThat(c2_.getOrganizationalCommitsCount(), equalTo(55));\n        assertThat(c2_.getUrl(), equalTo(\"http://b.com\"));\n    }", "signature": "void testCollectContributors()", "full_signature": "@Test public void testCollectContributors()", "class_method_signature": "TakeSnapshotTaskTest.testCollectContributors()", "testcase": true, "constructor": false, "invocations": ["mock", "newContributor", "thenReturn", "when", "listContributors", "asList", "mock", "newContributor", "thenReturn", "when", "listContributors", "asList", "collectContributors", "org", "asList", "assertThat", "hasSize", "get", "assertThat", "getId", "equalTo", "assertThat", "getOrganizationalCommitsCount", "equalTo", "assertThat", "getUrl", "equalTo", "get", "assertThat", "getId", "equalTo", "assertThat", "getOrganizationalCommitsCount", "equalTo", "assertThat", "getUrl", "equalTo"]}, "focal_class": {"identifier": "TakeSnapshotTask", "superclass": "", "interfaces": "implements Callable<Snapshot>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TakeSnapshotTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TakeSnapshotTask.class)", "var_name": "logger"}, {"original_string": "private final GitHub gitHub;", "modifier": "private final", "type": "GitHub", "declarator": "gitHub", "var_name": "gitHub"}, {"original_string": "private final String organisationName;", "modifier": "private final", "type": "String", "declarator": "organisationName", "var_name": "organisationName"}, {"original_string": "private final Date snapshotDate;", "modifier": "private final", "type": "Date", "declarator": "snapshotDate", "var_name": "snapshotDate"}, {"original_string": "private Scorer scorer;", "modifier": "private", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}], "methods": [{"identifier": "TakeSnapshotTask", "parameters": "(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "modifiers": "public", "return": "", "signature": " TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "full_signature": "public  TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "class_method_signature": "TakeSnapshotTask.TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot call()", "full_signature": "@Override public Snapshot call()", "class_method_signature": "TakeSnapshotTask.call()", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(final OrganizationWrapper organization)", "modifiers": "", "return": "Statistics", "signature": "Statistics collectStatistics(final OrganizationWrapper organization)", "full_signature": " Statistics collectStatistics(final OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectStatistics(final OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectProjects", "parameters": "(OrganizationWrapper organization)", "modifiers": "", "return": "Collection<Project>", "signature": "Collection<Project> collectProjects(OrganizationWrapper organization)", "full_signature": " Collection<Project> collectProjects(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectProjects(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "getProjectMaintainers", "parameters": "(RepositoryWrapper repository)", "modifiers": "", "return": "List<String>", "signature": "List<String> getProjectMaintainers(RepositoryWrapper repository)", "full_signature": " List<String> getProjectMaintainers(RepositoryWrapper repository)", "class_method_signature": "TakeSnapshotTask.getProjectMaintainers(RepositoryWrapper repository)", "testcase": false, "constructor": false}, {"identifier": "readCatwatchYaml", "parameters": "(RepositoryWrapper repository, Project project)", "modifiers": "", "return": "void", "signature": "void readCatwatchYaml(RepositoryWrapper repository, Project project)", "full_signature": " void readCatwatchYaml(RepositoryWrapper repository, Project project)", "class_method_signature": "TakeSnapshotTask.readCatwatchYaml(RepositoryWrapper repository, Project project)", "testcase": false, "constructor": false}, {"identifier": "collectContributors", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Collection<Contributor>", "signature": "Collection<Contributor> collectContributors(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"unchecked\") Collection<Contributor> collectContributors(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectContributors(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectLanguages", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"rawtypes\")", "return": "Collection<Language>", "signature": "Collection<Language> collectLanguages(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"rawtypes\") Collection<Language> collectLanguages(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectLanguages(OrganizationWrapper organization)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/github/TakeSnapshotTask.java"}, "focal_method": {"identifier": "collectContributors", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Collection<Contributor>", "body": "@SuppressWarnings(\"unchecked\")\n    Collection<Contributor> collectContributors(OrganizationWrapper organization) throws IOException, URISyntaxException {\n        logger.info(\"Started collecting contributors for organization '{}'.\", organisationName);\n\n        Collection<Contributor> contributors = new ArrayList<>();\n\n        // Get a list of all contributors of all repositories\n        Collection<GHRepository.Contributor> ghContributors = organization.listRepositories().stream()\n                .map(RepositoryWrapper::listContributors)\n                .flatMap(List::stream)\n                .collect(toList());\n\n        // Get a map of <Contributor ID> - <Contributions statistics>\n        Map<Integer, IntSummaryStatistics> idStatisticsMap = ghContributors.stream()\n                .collect(groupingBy(GHObject::getId, summarizingInt(GHRepository.Contributor::getContributions)));\n\n        // Eliminate duplicates in contributors list\n        ghContributors = ghContributors.stream()\n                .collect(collectingAndThen(toCollection(() ->\n                        new TreeSet<>(Comparator.comparingInt(GHObject::getId))), ArrayList::new));\n\n        // Build a list of contributors\n        for (GHRepository.Contributor ghContributor : ghContributors) {\n            Contributor contributor = new Contributor(ghContributor.getId(), organization.getId(), snapshotDate);\n\n            contributor.setName(ghContributor.getName());\n            contributor.setUrl(ghContributor.getHtmlUrl().toURI().toString());\n            contributor.setOrganizationalCommitsCount((int) idStatisticsMap.get(ghContributor.getId()).getSum());\n            contributor.setOrganizationalProjectsCount((int) idStatisticsMap.get(ghContributor.getId()).getCount());\n            contributor.setPersonalProjectsCount(ghContributor.getPublicRepoCount());\n            contributor.setOrganizationName(organisationName);\n\n            contributors.add(contributor);\n        }\n\n        // TODO contributor.setPersonalCommitsCount()\n\n        logger.info(\"Finished collecting contributors for organization '{}'.\", organisationName);\n\n        return contributors;\n    }", "signature": "Collection<Contributor> collectContributors(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"unchecked\") Collection<Contributor> collectContributors(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectContributors(OrganizationWrapper organization)", "testcase": false, "constructor": false, "invocations": ["info", "collect", "flatMap", "map", "stream", "listRepositories", "toList", "collect", "stream", "groupingBy", "summarizingInt", "collect", "stream", "collectingAndThen", "toCollection", "comparingInt", "getId", "getId", "setName", "getName", "setUrl", "toString", "toURI", "getHtmlUrl", "setOrganizationalCommitsCount", "getSum", "get", "getId", "setOrganizationalProjectsCount", "getCount", "get", "getId", "setPersonalProjectsCount", "getPublicRepoCount", "setOrganizationName", "add", "info"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}