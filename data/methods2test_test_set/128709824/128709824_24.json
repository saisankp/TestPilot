{"test_class": {"identifier": "ZookeeperRegistryTest", "superclass": "extends BaseZkTest", "interfaces": "", "fields": [{"original_string": "private static final String      TEST_SERVICE_NAME = \"com.alipay.xxx.ZookeeperTestService\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SERVICE_NAME = \"com.alipay.xxx.ZookeeperTestService\"", "var_name": "TEST_SERVICE_NAME"}, {"original_string": "private static RegistryConfig    registryConfig;", "modifier": "private static", "type": "RegistryConfig", "declarator": "registryConfig", "var_name": "registryConfig"}, {"original_string": "private static ZookeeperRegistry registry;", "modifier": "private static", "type": "ZookeeperRegistry", "declarator": "registry", "var_name": "registry"}], "file": "registry/registry-zk/src/test/java/com/alipay/sofa/rpc/registry/zk/ZookeeperRegistryTest.java"}, "test_case": {"identifier": "testOverrideObserver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverrideObserver() throws InterruptedException {\n        ConsumerConfig<?> consumerConfig = new ConsumerConfig();\n        consumerConfig.setInterfaceId(TEST_SERVICE_NAME)\n            .setUniqueId(\"unique123Id\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setProxy(\"javassist\")\n            .setSubscribe(true)\n            .setSerialization(\"java\")\n            .setInvokeType(\"sync\")\n            .setTimeout(4444);\n\n        // \u8ba2\u9605Consumer Config\n        CountDownLatch latch = new CountDownLatch(1);\n        MockConfigListener configListener = new MockConfigListener();\n        configListener.setCountDownLatch(latch);\n        registry.subscribeOverride(consumerConfig, configListener);\n        Map<String, String> attributes = new ConcurrentHashMap<String, String>();\n        attributes.put(RpcConstants.CONFIG_KEY_TIMEOUT, \"3333\");\n        attributes.put(RpcConstants.CONFIG_KEY_APP_NAME, \"test-server\");\n        attributes.put(RpcConstants.CONFIG_KEY_SERIALIZATION, \"java\");\n        configListener.attrUpdated(attributes);\n        Map<String, String> configData = configListener.getData();\n        Assert.assertEquals(3, configData.size());\n\n        consumerConfig.setInterfaceId(TEST_SERVICE_NAME)\n            .setUniqueId(\"unique123Id\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server1\"))\n            .setProxy(\"javassist\")\n            .setSubscribe(true)\n            .setSerialization(\"java\")\n            .setInvokeType(\"sync\")\n            .setTimeout(5555);\n        configListener = new MockConfigListener();\n        configListener.setCountDownLatch(latch);\n        registry.subscribeOverride(consumerConfig, configListener);\n        attributes.put(RpcConstants.CONFIG_KEY_TIMEOUT, \"4444\");\n        attributes.put(RpcConstants.CONFIG_KEY_APP_NAME, \"test-server2\");\n        configListener.attrUpdated(attributes);\n        configData = configListener.getData();\n        Assert.assertEquals(3, configData.size());\n\n        latch.await(2000, TimeUnit.MILLISECONDS);\n        Assert.assertEquals(3, configData.size());\n    }", "signature": "void testOverrideObserver()", "full_signature": "@Test public void testOverrideObserver()", "class_method_signature": "ZookeeperRegistryTest.testOverrideObserver()", "testcase": true, "constructor": false, "invocations": ["setTimeout", "setInvokeType", "setSerialization", "setSubscribe", "setProxy", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "setCountDownLatch", "subscribeOverride", "put", "put", "put", "attrUpdated", "getData", "assertEquals", "size", "setTimeout", "setInvokeType", "setSerialization", "setSubscribe", "setProxy", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "setCountDownLatch", "subscribeOverride", "put", "put", "attrUpdated", "getData", "assertEquals", "size", "await", "assertEquals", "size"]}, "focal_class": {"identifier": "ZookeeperRegistry", "superclass": "extends Registry", "interfaces": "", "fields": [{"original_string": "public static final String  EXT_NAME = \"ZookeeperRegistry\";", "modifier": "public static final", "type": "String", "declarator": "EXT_NAME = \"ZookeeperRegistry\"", "var_name": "EXT_NAME"}, {"original_string": "private final static Logger LOGGER   = LoggerFactory.getLogger(ZookeeperRegistry.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER   = LoggerFactory.getLogger(ZookeeperRegistry.class)", "var_name": "LOGGER"}, {"original_string": "public final static String                          PARAM_PREFER_LOCAL_FILE = \"preferLocalFile\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_PREFER_LOCAL_FILE = \"preferLocalFile\"", "var_name": "PARAM_PREFER_LOCAL_FILE"}, {"original_string": "public final static String                          PARAM_CREATE_EPHEMERAL  = \"createEphemeral\";", "modifier": "public final static", "type": "String", "declarator": "PARAM_CREATE_EPHEMERAL  = \"createEphemeral\"", "var_name": "PARAM_CREATE_EPHEMERAL"}, {"original_string": "private final static byte[]                         PROVIDER_OFFLINE        = new byte[] { 0 };", "modifier": "private final static", "type": "byte[]", "declarator": "PROVIDER_OFFLINE        = new byte[] { 0 }", "var_name": "PROVIDER_OFFLINE"}, {"original_string": "private final static byte[]                         PROVIDER_ONLINE         = new byte[] { 1 };", "modifier": "private final static", "type": "byte[]", "declarator": "PROVIDER_ONLINE         = new byte[] { 1 }", "var_name": "PROVIDER_ONLINE"}, {"original_string": "private CuratorFramework                            zkClient;", "modifier": "private", "type": "CuratorFramework", "declarator": "zkClient", "var_name": "zkClient"}, {"original_string": "private String                                      rootPath;", "modifier": "private", "type": "String", "declarator": "rootPath", "var_name": "rootPath"}, {"original_string": "private boolean                                     preferLocalFile         = false;", "modifier": "private", "type": "boolean", "declarator": "preferLocalFile         = false", "var_name": "preferLocalFile"}, {"original_string": "private boolean                                     ephemeralNode           = true;", "modifier": "private", "type": "boolean", "declarator": "ephemeralNode           = true", "var_name": "ephemeralNode"}, {"original_string": "private ZookeeperConfigObserver                     configObserver;", "modifier": "private", "type": "ZookeeperConfigObserver", "declarator": "configObserver", "var_name": "configObserver"}, {"original_string": "private ZookeeperOverrideObserver                   overrideObserver;", "modifier": "private", "type": "ZookeeperOverrideObserver", "declarator": "overrideObserver", "var_name": "overrideObserver"}, {"original_string": "private ZookeeperProviderObserver                   providerObserver;", "modifier": "private", "type": "ZookeeperProviderObserver", "declarator": "providerObserver", "var_name": "providerObserver"}, {"original_string": "private ConcurrentMap<ProviderConfig, List<String>> providerUrls            = new ConcurrentHashMap<ProviderConfig, List<String>>();", "modifier": "private", "type": "ConcurrentMap<ProviderConfig, List<String>>", "declarator": "providerUrls            = new ConcurrentHashMap<ProviderConfig, List<String>>()", "var_name": "providerUrls"}, {"original_string": "private ConcurrentMap<ConsumerConfig, String>       consumerUrls            = new ConcurrentHashMap<ConsumerConfig, String>();", "modifier": "private", "type": "ConcurrentMap<ConsumerConfig, String>", "declarator": "consumerUrls            = new ConcurrentHashMap<ConsumerConfig, String>()", "var_name": "consumerUrls"}, {"original_string": "private static final ConcurrentMap<ConsumerConfig, PathChildrenCache> INTERFACE_PROVIDER_CACHE = new ConcurrentHashMap<ConsumerConfig, PathChildrenCache>();", "modifier": "private static final", "type": "ConcurrentMap<ConsumerConfig, PathChildrenCache>", "declarator": "INTERFACE_PROVIDER_CACHE = new ConcurrentHashMap<ConsumerConfig, PathChildrenCache>()", "var_name": "INTERFACE_PROVIDER_CACHE"}, {"original_string": "private static final ConcurrentMap<String, PathChildrenCache>         INTERFACE_CONFIG_CACHE   = new ConcurrentHashMap<String, PathChildrenCache>();", "modifier": "private static final", "type": "ConcurrentMap<String, PathChildrenCache>", "declarator": "INTERFACE_CONFIG_CACHE   = new ConcurrentHashMap<String, PathChildrenCache>()", "var_name": "INTERFACE_CONFIG_CACHE"}, {"original_string": "private static final ConcurrentMap<String, PathChildrenCache>         INTERFACE_OVERRIDE_CACHE = new ConcurrentHashMap<String, PathChildrenCache>();", "modifier": "private static final", "type": "ConcurrentMap<String, PathChildrenCache>", "declarator": "INTERFACE_OVERRIDE_CACHE = new ConcurrentHashMap<String, PathChildrenCache>()", "var_name": "INTERFACE_OVERRIDE_CACHE"}], "methods": [{"identifier": "ZookeeperRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "protected", "return": "", "signature": " ZookeeperRegistry(RegistryConfig registryConfig)", "full_signature": "protected  ZookeeperRegistry(RegistryConfig registryConfig)", "class_method_signature": "ZookeeperRegistry.ZookeeperRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void init()", "full_signature": "@Override public synchronized void init()", "class_method_signature": "ZookeeperRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "recoverRegistryData", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void recoverRegistryData()", "full_signature": "protected void recoverRegistryData()", "class_method_signature": "ZookeeperRegistry.recoverRegistryData()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public synchronized boolean start()", "class_method_signature": "ZookeeperRegistry.start()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ZookeeperRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(DestroyHook hook)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(DestroyHook hook)", "full_signature": "@Override public void destroy(DestroyHook hook)", "class_method_signature": "ZookeeperRegistry.destroy(DestroyHook hook)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "ZookeeperRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "registerProviderUrls", "parameters": "(ProviderConfig config)", "modifiers": "protected", "return": "void", "signature": "void registerProviderUrls(ProviderConfig config)", "full_signature": "protected void registerProviderUrls(ProviderConfig config)", "class_method_signature": "ZookeeperRegistry.registerProviderUrls(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "subscribeConfig", "parameters": "(final AbstractInterfaceConfig config, ConfigListener listener)", "modifiers": "protected", "return": "void", "signature": "void subscribeConfig(final AbstractInterfaceConfig config, ConfigListener listener)", "full_signature": "protected void subscribeConfig(final AbstractInterfaceConfig config, ConfigListener listener)", "class_method_signature": "ZookeeperRegistry.subscribeConfig(final AbstractInterfaceConfig config, ConfigListener listener)", "testcase": false, "constructor": false}, {"identifier": "subscribeOverride", "parameters": "(final ConsumerConfig config, ConfigListener listener)", "modifiers": "protected", "return": "void", "signature": "void subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "full_signature": "protected void subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "class_method_signature": "ZookeeperRegistry.subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unRegister(ProviderConfig config)", "full_signature": "@Override public void unRegister(ProviderConfig config)", "class_method_signature": "ZookeeperRegistry.unRegister(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnRegister", "parameters": "(List<ProviderConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnRegister(List<ProviderConfig> configs)", "full_signature": "@Override public void batchUnRegister(List<ProviderConfig> configs)", "class_method_signature": "ZookeeperRegistry.batchUnRegister(List<ProviderConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(final ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> subscribe(final ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(final ConsumerConfig config)", "class_method_signature": "ZookeeperRegistry.subscribe(final ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "subscribeConsumerUrls", "parameters": "(ConsumerConfig config)", "modifiers": "protected", "return": "void", "signature": "void subscribeConsumerUrls(ConsumerConfig config)", "full_signature": "protected void subscribeConsumerUrls(ConsumerConfig config)", "class_method_signature": "ZookeeperRegistry.subscribeConsumerUrls(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "unSubscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unSubscribe(ConsumerConfig config)", "full_signature": "@Override public void unSubscribe(ConsumerConfig config)", "class_method_signature": "ZookeeperRegistry.unSubscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnSubscribe", "parameters": "(List<ConsumerConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnSubscribe(List<ConsumerConfig> configs)", "full_signature": "@Override public void batchUnSubscribe(List<ConsumerConfig> configs)", "class_method_signature": "ZookeeperRegistry.batchUnSubscribe(List<ConsumerConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "getZkClient", "parameters": "()", "modifiers": "protected", "return": "CuratorFramework", "signature": "CuratorFramework getZkClient()", "full_signature": "protected CuratorFramework getZkClient()", "class_method_signature": "ZookeeperRegistry.getZkClient()", "testcase": false, "constructor": false}, {"identifier": "getAndCheckZkClient", "parameters": "()", "modifiers": "private", "return": "CuratorFramework", "signature": "CuratorFramework getAndCheckZkClient()", "full_signature": "private CuratorFramework getAndCheckZkClient()", "class_method_signature": "ZookeeperRegistry.getAndCheckZkClient()", "testcase": false, "constructor": false}, {"identifier": "getRegisterConfig", "parameters": "(ConsumerConfig config)", "modifiers": "private", "return": "AbstractInterfaceConfig", "signature": "AbstractInterfaceConfig getRegisterConfig(ConsumerConfig config)", "full_signature": "private AbstractInterfaceConfig getRegisterConfig(ConsumerConfig config)", "class_method_signature": "ZookeeperRegistry.getRegisterConfig(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "closePathChildrenCache", "parameters": "(Map<String, PathChildrenCache> map)", "modifiers": "private", "return": "void", "signature": "void closePathChildrenCache(Map<String, PathChildrenCache> map)", "full_signature": "private void closePathChildrenCache(Map<String, PathChildrenCache> map)", "class_method_signature": "ZookeeperRegistry.closePathChildrenCache(Map<String, PathChildrenCache> map)", "testcase": false, "constructor": false}, {"identifier": "getDefaultAclProvider", "parameters": "()", "modifiers": "private", "return": "ACLProvider", "signature": "ACLProvider getDefaultAclProvider()", "full_signature": "private ACLProvider getDefaultAclProvider()", "class_method_signature": "ZookeeperRegistry.getDefaultAclProvider()", "testcase": false, "constructor": false}, {"identifier": "buildAuthInfo", "parameters": "()", "modifiers": "private", "return": "List<AuthInfo>", "signature": "List<AuthInfo> buildAuthInfo()", "full_signature": "private List<AuthInfo> buildAuthInfo()", "class_method_signature": "ZookeeperRegistry.buildAuthInfo()", "testcase": false, "constructor": false}], "file": "registry/registry-zk/src/main/java/com/alipay/sofa/rpc/registry/zk/ZookeeperRegistry.java"}, "focal_method": {"identifier": "subscribeOverride", "parameters": "(final ConsumerConfig config, ConfigListener listener)", "modifiers": "protected", "return": "void", "body": "protected void subscribeOverride(final ConsumerConfig config, ConfigListener listener) {\n        try {\n            if (overrideObserver == null) { // \u521d\u59cb\u5316\n                overrideObserver = new ZookeeperOverrideObserver();\n            }\n            overrideObserver.addConfigListener(config, listener);\n            final String overridePath = buildOverridePath(rootPath, config);\n            final AbstractInterfaceConfig registerConfig = getRegisterConfig(config);\n            // \u76d1\u542c\u914d\u7f6e\u8282\u70b9\u4e0b \u5b50\u8282\u70b9\u589e\u52a0\u3001\u5b50\u8282\u70b9\u5220\u9664\u3001\u5b50\u8282\u70b9Data\u4fee\u6539\u4e8b\u4ef6\n            PathChildrenCache pathChildrenCache = new PathChildrenCache(zkClient, overridePath, true);\n            pathChildrenCache.getListenable().addListener(new PathChildrenCacheListener() {\n                @Override\n                public void childEvent(CuratorFramework client1, PathChildrenCacheEvent event) throws Exception {\n                    if (LOGGER.isDebugEnabled(config.getAppName())) {\n                        LOGGER.debug(\"Receive zookeeper event: \" + \"type=[\" + event.getType() + \"]\");\n                    }\n                    switch (event.getType()) {\n                        case CHILD_ADDED: //\u65b0\u589eIP\u7ea7\u914d\u7f6e\n                            overrideObserver.addConfig(config, overridePath, event.getData());\n                            break;\n                        case CHILD_REMOVED: //\u5220\u9664IP\u7ea7\u914d\u7f6e\n                            overrideObserver.removeConfig(config, overridePath, event.getData(), registerConfig);\n                            break;\n                        case CHILD_UPDATED:// \u66f4\u65b0IP\u7ea7\u914d\u7f6e\n                            overrideObserver.updateConfig(config, overridePath, event.getData());\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            });\n            pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n            INTERFACE_OVERRIDE_CACHE.put(overridePath, pathChildrenCache);\n            overrideObserver.updateConfigAll(config, overridePath, pathChildrenCache.getCurrentData());\n        } catch (Exception e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_SUB_PROVIDER_OVERRIDE, EXT_NAME), e);\n        }\n    }", "signature": "void subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "full_signature": "protected void subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "class_method_signature": "ZookeeperRegistry.subscribeOverride(final ConsumerConfig config, ConfigListener listener)", "testcase": false, "constructor": false, "invocations": ["addConfigListener", "buildOverridePath", "getRegisterConfig", "addListener", "getListenable", "isDebugEnabled", "getAppName", "debug", "getType", "getType", "addConfig", "getData", "removeConfig", "getData", "updateConfig", "getData", "start", "put", "updateConfigAll", "getCurrentData", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}