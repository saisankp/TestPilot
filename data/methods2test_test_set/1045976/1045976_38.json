{"test_class": {"identifier": "CallCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExampleEntryPoint entryPoint;", "modifier": "private", "type": "ExampleEntryPoint", "declarator": "entryPoint", "var_name": "entryPoint"}, {"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private CallCommand command;", "modifier": "private", "type": "CallCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}], "file": "py4j-java/src/test/java/py4j/commands/CallCommandTest.java"}, "test_case": {"identifier": "testUsingMethodReturn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUsingMethodReturn() {\n\t\tString inputCommand = target + \"\\nmethod4\\nsc\\ne\\n\";\n\t\tString inputCommand2 = target + \"\\nmethod5\\nro1\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"c\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!yro1\\n\", sWriter.toString());\n\t\t\tcommand.execute(\"c\", new BufferedReader(new StringReader(inputCommand2)), writer);\n\t\t\tassertEquals(\"!yro1\\n!yi2\\n\", sWriter.toString());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testUsingMethodReturn()", "full_signature": "@Test public void testUsingMethodReturn()", "class_method_signature": "CallCommandTest.testUsingMethodReturn()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "printStackTrace", "fail"]}, "focal_class": {"identifier": "CallCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(CallCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(CallCommand.class.getName())", "var_name": "logger"}, {"original_string": "public final static String CALL_COMMAND_NAME = \"c\";", "modifier": "public final static", "type": "String", "declarator": "CALL_COMMAND_NAME = \"c\"", "var_name": "CALL_COMMAND_NAME"}], "methods": [{"identifier": "CallCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " CallCommand()", "full_signature": "public  CallCommand()", "class_method_signature": "CallCommand.CallCommand()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "CallCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/CallCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tString targetObjectId = reader.readLine();\n\t\tString methodName = reader.readLine();\n\t\tList<Object> arguments = getArguments(reader);\n\n\t\tReturnObject returnObject = invokeMethod(methodName, targetObjectId, arguments);\n\n\t\tString returnCommand = Protocol.getOutputCommand(returnObject);\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "CallCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["readLine", "readLine", "getArguments", "invokeMethod", "getOutputCommand", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}