{"test_class": {"identifier": "PolygonDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PolygonDecoder polygonDecoder = new PolygonDecoder();", "modifier": "private", "type": "PolygonDecoder", "declarator": "polygonDecoder = new PolygonDecoder()", "var_name": "polygonDecoder"}], "file": "proto/src/test/java/openlr/proto/decoder/PolygonDecoderTest.java"}, "test_case": {"identifier": "testInvalidLocationReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidLocationReference() {\n        PolygonLocationReference polygonLocationReference = PolygonLocationReference.newBuilder()\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setPolygonLocationReference(polygonLocationReference)\n                .build();\n\n        try {\n            polygonDecoder.decode(\"1\", locationReferenceData);\n            fail();\n        } catch (PhysicalFormatException e) {\n            assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n    }", "signature": "void testInvalidLocationReference()", "full_signature": "@Test public void testInvalidLocationReference()", "class_method_signature": "PolygonDecoderTest.testInvalidLocationReference()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "build", "setPolygonLocationReference", "newBuilder", "decode", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "PolygonDecoder", "superclass": "", "interfaces": "implements LocationReferenceDecoder", "fields": [], "methods": [{"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PolygonDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/decoder/PolygonDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(String id, LocationReferenceData data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decode(String id, LocationReferenceData data) throws OpenLRProtoException {\n        if (!data.hasPolygonLocationReference()) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.MISSING_LOCATION_REFERENCE);\n        }\n\n        PolygonLocationReference polygonLocationReference = data.getPolygonLocationReference();\n\n        if (polygonLocationReference.getCoordinatesCount() == 0) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<GeoCoordinates> cornerPoints = new ArrayList<>();\n\n        for (Coordinates coordinates : polygonLocationReference.getCoordinatesList()) {\n            GeoCoordinatesProtoImpl cornerPoint = new GeoCoordinatesProtoImpl(coordinates.getLongitude(), coordinates.getLatitude());\n            cornerPoints.add(cornerPoint);\n        }\n\n        return new RawPolygonLocRef(id, cornerPoints);\n    }", "signature": "RawLocationReference decode(String id, LocationReferenceData data)", "full_signature": "@Override public RawLocationReference decode(String id, LocationReferenceData data)", "class_method_signature": "PolygonDecoder.decode(String id, LocationReferenceData data)", "testcase": false, "constructor": false, "invocations": ["hasPolygonLocationReference", "getPolygonLocationReference", "getCoordinatesCount", "getCoordinatesList", "getLongitude", "getLatitude", "add"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}