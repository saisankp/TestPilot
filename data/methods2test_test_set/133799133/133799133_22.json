{"test_class": {"identifier": "TimerValuesTest", "superclass": "", "interfaces": "", "fields": [], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/server/timer/TimerValuesTest.java"}, "test_case": {"identifier": "testInvalidTimerUnit", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testInvalidTimerUnit()\n  {\n    TimerValues timerValues = new TimerValues();\n    TimerConfigurationType timerConfigurationType = new TimerConfigurationType();\n    TimerType timerType = new TimerType();\n    timerType.setUnit(Calendar.MILLISECOND);\n    timerType.setLength(10);\n    timerConfigurationType.setCrlRenewal(timerType);\n\n    IllegalArgumentException illegalArgumentException = Assertions.assertThrows(IllegalArgumentException.class,\n                                                                                () -> timerValues.getCrlRate(timerConfigurationType));\n    Assertions.assertEquals(\"Unsupported unit of time: \" + Calendar.MILLISECOND,\n                            illegalArgumentException.getMessage());\n  }", "signature": "void testInvalidTimerUnit()", "full_signature": "@Test void testInvalidTimerUnit()", "class_method_signature": "TimerValuesTest.testInvalidTimerUnit()", "testcase": true, "constructor": false, "invocations": ["setUnit", "setLength", "setCrlRenewal", "assertThrows", "getCrlRate", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "TimerValues", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long SECOND = 1000;", "modifier": "static final", "type": "long", "declarator": "SECOND = 1000", "var_name": "SECOND"}, {"original_string": "static final long MINUTE = SECOND * 60;", "modifier": "static final", "type": "long", "declarator": "MINUTE = SECOND * 60", "var_name": "MINUTE"}, {"original_string": "static final long HOUR = MINUTE * 60;", "modifier": "static final", "type": "long", "declarator": "HOUR = MINUTE * 60", "var_name": "HOUR"}], "methods": [{"identifier": "getTimerConfiguration", "parameters": "()", "modifiers": "@Bean", "return": "TimerConfigurationType", "signature": "TimerConfigurationType getTimerConfiguration()", "full_signature": "@Bean TimerConfigurationType getTimerConfiguration()", "class_method_signature": "TimerValues.getTimerConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getUnitOfTime", "parameters": "(int unitFromXML)", "modifiers": "private static", "return": "long", "signature": "long getUnitOfTime(int unitFromXML)", "full_signature": "private static long getUnitOfTime(int unitFromXML)", "class_method_signature": "TimerValues.getUnitOfTime(int unitFromXML)", "testcase": false, "constructor": false}, {"identifier": "getFullBlacklistRate", "parameters": "()", "modifiers": "@Bean public", "return": "String", "signature": "String getFullBlacklistRate()", "full_signature": "@Bean public String getFullBlacklistRate()", "class_method_signature": "TimerValues.getFullBlacklistRate()", "testcase": false, "constructor": false}, {"identifier": "getDeltaBlacklistRate", "parameters": "(TimerConfigurationType timerConfiguration)", "modifiers": "@Bean public", "return": "String", "signature": "String getDeltaBlacklistRate(TimerConfigurationType timerConfiguration)", "full_signature": "@Bean public String getDeltaBlacklistRate(TimerConfigurationType timerConfiguration)", "class_method_signature": "TimerValues.getDeltaBlacklistRate(TimerConfigurationType timerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getCVCRate", "parameters": "(TimerConfigurationType timerConfiguration)", "modifiers": "@Bean public", "return": "String", "signature": "String getCVCRate(TimerConfigurationType timerConfiguration)", "full_signature": "@Bean public String getCVCRate(TimerConfigurationType timerConfiguration)", "class_method_signature": "TimerValues.getCVCRate(TimerConfigurationType timerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getMasterDefectRate", "parameters": "(TimerConfigurationType timerConfiguration)", "modifiers": "@Bean public", "return": "String", "signature": "String getMasterDefectRate(TimerConfigurationType timerConfiguration)", "full_signature": "@Bean public String getMasterDefectRate(TimerConfigurationType timerConfiguration)", "class_method_signature": "TimerValues.getMasterDefectRate(TimerConfigurationType timerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getCrlRate", "parameters": "(TimerConfigurationType timerConfiguration)", "modifiers": "@Bean public", "return": "String", "signature": "String getCrlRate(TimerConfigurationType timerConfiguration)", "full_signature": "@Bean public String getCrlRate(TimerConfigurationType timerConfiguration)", "class_method_signature": "TimerValues.getCrlRate(TimerConfigurationType timerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getKeyLockRate", "parameters": "()", "modifiers": "@Bean public", "return": "String", "signature": "String getKeyLockRate()", "full_signature": "@Bean public String getKeyLockRate()", "class_method_signature": "TimerValues.getKeyLockRate()", "testcase": false, "constructor": false}, {"identifier": "logRateForTimer", "parameters": "(String timerName, String rate)", "modifiers": "private", "return": "void", "signature": "void logRateForTimer(String timerName, String rate)", "full_signature": "private void logRateForTimer(String timerName, String rate)", "class_method_signature": "TimerValues.logRateForTimer(String timerName, String rate)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/server/timer/TimerValues.java"}, "focal_method": {"identifier": "getCrlRate", "parameters": "(TimerConfigurationType timerConfiguration)", "modifiers": "@Bean public", "return": "String", "body": "@Bean\n  public String getCrlRate(TimerConfigurationType timerConfiguration)\n  {\n    String timerName = \"CRL renewal\";\n\n    // Check for configuration value\n    if (timerConfiguration != null && timerConfiguration.getCrlRenewal() != null)\n    {\n      TimerType crlRenewal = timerConfiguration.getCrlRenewal();\n      if (crlRenewal.getLength() != 0 && crlRenewal.getUnit() != 0)\n      {\n        String rate = String.valueOf(getUnitOfTime(crlRenewal.getUnit()) * crlRenewal.getLength());\n        logRateForTimer(timerName, rate);\n        return rate;\n      }\n    }\n\n    // Set default value to every 2 hours\n    String rate = String.valueOf(2 * HOUR);\n    logRateForTimer(timerName, rate);\n    return rate;\n  }", "signature": "String getCrlRate(TimerConfigurationType timerConfiguration)", "full_signature": "@Bean public String getCrlRate(TimerConfigurationType timerConfiguration)", "class_method_signature": "TimerValues.getCrlRate(TimerConfigurationType timerConfiguration)", "testcase": false, "constructor": false, "invocations": ["getCrlRenewal", "getCrlRenewal", "getLength", "getUnit", "valueOf", "getUnitOfTime", "getUnit", "getLength", "logRateForTimer", "valueOf", "logRateForTimer"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}