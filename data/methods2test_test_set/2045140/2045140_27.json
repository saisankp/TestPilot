{"test_class": {"identifier": "RequireDebianCompatibleVersionRuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "jetty-build-support/src/test/java/org/eclipse/jetty/toolchain/enforcer/rules/RequireDebianCompatibleVersionRuleTest.java"}, "test_case": {"identifier": "testSkippedSnapshotDebianVersions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSkippedSnapshotDebianVersions()\n        throws EnforcerRuleException\n    {\n        RequireDebianCompatibleVersionRule rule = new RequireDebianCompatibleVersionRule();\n        rule.ensureValidDebianVersion( \"1.0.0-SNAPSHOT\" );\n        rule.ensureValidDebianVersion( \"7.0.2.SNAPSHOT\" );\n    }", "signature": "void testSkippedSnapshotDebianVersions()", "full_signature": "@Test public void testSkippedSnapshotDebianVersions()", "class_method_signature": "RequireDebianCompatibleVersionRuleTest.testSkippedSnapshotDebianVersions()", "testcase": true, "constructor": false, "invocations": ["ensureValidDebianVersion", "ensureValidDebianVersion"]}, "focal_class": {"identifier": "RequireDebianCompatibleVersionRule", "superclass": "", "interfaces": "implements EnforcerRule", "fields": [], "methods": [{"identifier": "execute", "parameters": "(EnforcerRuleHelper helper)", "modifiers": "public", "return": "void", "signature": "void execute(EnforcerRuleHelper helper)", "full_signature": "public void execute(EnforcerRuleHelper helper)", "class_method_signature": "RequireDebianCompatibleVersionRule.execute(EnforcerRuleHelper helper)", "testcase": false, "constructor": false}, {"identifier": "ensureValidDebianVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "signature": "void ensureValidDebianVersion(String version)", "full_signature": "public void ensureValidDebianVersion(String version)", "class_method_signature": "RequireDebianCompatibleVersionRule.ensureValidDebianVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getCacheId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCacheId()", "full_signature": "public String getCacheId()", "class_method_signature": "RequireDebianCompatibleVersionRule.getCacheId()", "testcase": false, "constructor": false}, {"identifier": "isCacheable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCacheable()", "full_signature": "public boolean isCacheable()", "class_method_signature": "RequireDebianCompatibleVersionRule.isCacheable()", "testcase": false, "constructor": false}, {"identifier": "isResultValid", "parameters": "(EnforcerRule rule)", "modifiers": "public", "return": "boolean", "signature": "boolean isResultValid(EnforcerRule rule)", "full_signature": "public boolean isResultValid(EnforcerRule rule)", "class_method_signature": "RequireDebianCompatibleVersionRule.isResultValid(EnforcerRule rule)", "testcase": false, "constructor": false}], "file": "jetty-build-support/src/main/java/org/eclipse/jetty/toolchain/enforcer/rules/RequireDebianCompatibleVersionRule.java"}, "focal_method": {"identifier": "ensureValidDebianVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "body": "public void ensureValidDebianVersion(String version) throws EnforcerRuleException\n    {\n        if (version.endsWith(\"SNAPSHOT\"))\n        {\n            // Skip check on SNAPSHOT versions.\n            return;\n        }\n\n        if (version.contains(\"-\"))\n        {\n            throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the Debian (linux packaging) version requirements.  \"\n                    + \"It can't have the '-' character as it has a special meaning reserved for the DEB process (package build #).\");\n        }\n\n        if (version.contains(\"_\"))\n        {\n            throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the Debian (linux packaging) version requirements.  \"\n                    + \"It can't have the '_' character as it has a special meaning reserved for the DEB process \"\n                    + \"(indicates split between package name, version, and architecture on filename).\");\n        }\n\n        // Architecture IDs \n        String reserved[] =\n        { \"all\", \"i386\", \"i486\", \"i586\", \"i686\", \"pentium\", \"athlon\", \"ia64\", \"x86_64\", \"amd64\", \"ia32\", \"alpha\", \"sparc\", \"m68k\", \"ppc\", \"hppa\", \"arm\" };\n\n        String lversion = version.toLowerCase();\n        for (String id : reserved)\n        {\n            if (lversion.contains(id))\n            {\n                throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the Debian (linux packaging) version requirements.  \"\n                        + \"It can't use the DEB reserved word \\\"\" + id + \"\\\".\");\n            }\n        }\n    }", "signature": "void ensureValidDebianVersion(String version)", "full_signature": "public void ensureValidDebianVersion(String version)", "class_method_signature": "RequireDebianCompatibleVersionRule.ensureValidDebianVersion(String version)", "testcase": false, "constructor": false, "invocations": ["endsWith", "contains", "contains", "toLowerCase", "contains"]}, "repository": {"repo_id": 2045140, "url": "https://github.com/eclipse/jetty.toolchain", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 10, "size": 2094, "license": "licensed"}}