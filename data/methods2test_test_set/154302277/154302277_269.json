{"test_class": {"identifier": "GeneralInterrogationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEVICE_IDENTIFICATION = \"DEVICE-001\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"DEVICE-001\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "@InjectMocks\n    private GeneralInterrogationService generalInterrogationService;", "modifier": "@InjectMocks\n    private", "type": "GeneralInterrogationService", "declarator": "generalInterrogationService", "var_name": "generalInterrogationService"}, {"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private LoggingService loggingService;", "modifier": "@Mock\n    private", "type": "LoggingService", "declarator": "loggingService", "var_name": "loggingService"}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/GeneralInterrogationServiceTest.java"}, "test_case": {"identifier": "testSendGeneralInterrogationShouldLogSameAsduAsUsedInInterrogation", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testSendGeneralInterrogationShouldLogSameAsduAsUsedInInterrogation() throws Exception {\n        // Arrange\n        final ConnectionParameters connectionParameters = ConnectionParameters.newBuilder()\n                .deviceIdentification(DEVICE_IDENTIFICATION)\n                .build();\n        final DeviceConnection deviceConnection = new DeviceConnection(this.connection, connectionParameters);\n        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(DEVICE_IDENTIFICATION);\n        doCallRealMethod().when(this.connection)\n                .interrogation(anyInt(), any(CauseOfTransmission.class), any(IeQualifierOfInterrogation.class));\n\n        // Act\n        this.generalInterrogationService.sendGeneralInterrogation(deviceConnection, requestMetadata);\n\n        // Assert\n        final ArgumentCaptor<ASdu> asduCaptor = ArgumentCaptor.forClass(ASdu.class);\n        final ArgumentCaptor<LogItem> logItemCaptor = ArgumentCaptor.forClass(LogItem.class);\n        verify(this.connection).send(asduCaptor.capture());\n        verify(this.loggingService).log(logItemCaptor.capture());\n        assertThat(logItemCaptor.getValue().getMessage()).isEqualTo(asduCaptor.getValue().toString());\n    }", "signature": "void testSendGeneralInterrogationShouldLogSameAsduAsUsedInInterrogation()", "full_signature": "@Test void testSendGeneralInterrogationShouldLogSameAsduAsUsedInInterrogation()", "class_method_signature": "GeneralInterrogationServiceTest.testSendGeneralInterrogationShouldLogSameAsduAsUsedInInterrogation()", "testcase": true, "constructor": false, "invocations": ["build", "deviceIdentification", "newBuilder", "forDevice", "interrogation", "when", "doCallRealMethod", "anyInt", "any", "any", "sendGeneralInterrogation", "forClass", "forClass", "send", "verify", "capture", "log", "verify", "capture", "isEqualTo", "assertThat", "getMessage", "getValue", "toString", "getValue"]}, "focal_class": {"identifier": "GeneralInterrogationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int QUALIFIER_OF_INTERROGATION_ID = QualifierOfInterrogation.INTERROGATED_BY_STATION.getId();", "modifier": "private static final", "type": "int", "declarator": "QUALIFIER_OF_INTERROGATION_ID = QualifierOfInterrogation.INTERROGATED_BY_STATION.getId()", "var_name": "QUALIFIER_OF_INTERROGATION_ID"}, {"original_string": "private static final int ORIGINATOR_ADDRESS = 0;", "modifier": "private static final", "type": "int", "declarator": "ORIGINATOR_ADDRESS = 0", "var_name": "ORIGINATOR_ADDRESS"}, {"original_string": "@Autowired\n    private LoggingService loggingService;", "modifier": "@Autowired\n    private", "type": "LoggingService", "declarator": "loggingService", "var_name": "loggingService"}], "methods": [{"identifier": "sendGeneralInterrogation", "parameters": "(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "modifiers": "public", "return": "void", "signature": "void sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "full_signature": "public void sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "class_method_signature": "GeneralInterrogationService.sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/GeneralInterrogationService.java"}, "focal_method": {"identifier": "sendGeneralInterrogation", "parameters": "(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "modifiers": "public", "return": "void", "body": "public void sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n            throws IOException {\n        final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n\n        deviceConnection.getConnection()\n                .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n                        new IeQualifierOfInterrogation(QUALIFIER_OF_INTERROGATION_ID));\n\n        // interrogation command creates this asdu internally, however we\n        // need it here as well for logging...\n        final ASdu asdu = new ASdu(ASduType.C_IC_NA_1, false, CauseOfTransmission.ACTIVATION, false, false,\n                ORIGINATOR_ADDRESS, commonAddress,\n                new InformationObject(0, new IeQualifierOfInterrogation(QUALIFIER_OF_INTERROGATION_ID)));\n\n        final LogItem logItem = new LogItem(requestMetadata.getDeviceIdentification(),\n                requestMetadata.getOrganisationIdentification(), false, asdu.toString());\n\n        this.loggingService.log(logItem);\n    }", "signature": "void sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "full_signature": "public void sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "class_method_signature": "GeneralInterrogationService.sendGeneralInterrogation(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)", "testcase": false, "constructor": false, "invocations": ["getCommonAddress", "getConnectionParameters", "interrogation", "getConnection", "getDeviceIdentification", "getOrganisationIdentification", "toString", "log"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}