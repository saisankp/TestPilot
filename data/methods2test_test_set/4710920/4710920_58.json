{"test_class": {"identifier": "ProviderAuthFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ProviderAuthFilterTest.java"}, "test_case": {"identifier": "testAuthFailedWhenParameterError", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAuthFailedWhenParameterError() {\n        String service = \"org.apache.dubbo.DemoService\";\n        String method = \"test\";\n        Object[] originalParams = new Object[]{\"dubbo1\", \"dubbo2\"};\n        long currentTimeMillis = System.currentTimeMillis();\n        URL url = URL.valueOf(\"dubbo://10.10.10.10:2181\")\n                .setServiceInterface(service)\n                .addParameter(Constants.ACCESS_KEY_ID_KEY, \"ak\")\n                .addParameter(Constants.SECRET_ACCESS_KEY_KEY, \"sk\")\n                .addParameter(CommonConstants.APPLICATION_KEY, \"test-provider\")\n                .addParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, true)\n                .addParameter(Constants.SERVICE_AUTH, true);\n\n        Invoker invoker = mock(Invoker.class);\n        Invocation invocation = mock(Invocation.class);\n        when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");\n        when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");\n        when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(currentTimeMillis);\n        when(invocation.getMethodName()).thenReturn(method);\n        Object[] fakeParams = new Object[]{\"dubbo1\", \"dubbo3\"};\n        when(invocation.getArguments()).thenReturn(fakeParams);\n        when(invoker.getUrl()).thenReturn(url);\n\n\n        String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT,\n                url.getColonSeparatedKey(), invocation.getMethodName(), \"sk\", currentTimeMillis);\n        String sign = SignatureUtils.sign(originalParams, requestString, \"sk\");\n        when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);\n\n        ProviderAuthFilter providerAuthFilter = new ProviderAuthFilter();\n        Result result = providerAuthFilter.invoke(invoker, invocation);\n        assertTrue(result.hasException());\n        assertTrue(result.getException() instanceof RpcAuthenticationException);\n    }", "signature": "void testAuthFailedWhenParameterError()", "full_signature": "@Test void testAuthFailedWhenParameterError()", "class_method_signature": "ProviderAuthFilterTest.testAuthFailedWhenParameterError()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "setServiceInterface", "valueOf", "mock", "mock", "thenReturn", "when", "getObjectAttachment", "thenReturn", "when", "getObjectAttachment", "thenReturn", "when", "getObjectAttachment", "thenReturn", "when", "getMethodName", "thenReturn", "when", "getArguments", "thenReturn", "when", "getUrl", "format", "getColonSeparatedKey", "getMethodName", "sign", "thenReturn", "when", "getObjectAttachment", "invoke", "assertTrue", "hasException", "assertTrue", "getException"]}, "focal_class": {"identifier": "ProviderAuthFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ProviderAuthFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/filter/ProviderAuthFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        URL url = invoker.getUrl();\n        boolean shouldAuth = url.getParameter(Constants.SERVICE_AUTH, false);\n        if (shouldAuth) {\n            Authenticator authenticator = ExtensionLoader.getExtensionLoader(Authenticator.class)\n                    .getExtension(url.getParameter(Constants.AUTHENTICATOR, Constants.DEFAULT_AUTHENTICATOR));\n            try {\n                authenticator.authenticate(invocation, url);\n            } catch (Exception e) {\n                return AsyncRpcResult.newDefaultAsyncResult(e, invocation);\n            }\n        }\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ProviderAuthFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getUrl", "getParameter", "getExtension", "getExtensionLoader", "getParameter", "authenticate", "newDefaultAsyncResult", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}