{"test_class": {"identifier": "GasteigerPEPEPartialChargesTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/GasteigerPEPEPartialChargesTest.java"}, "test_case": {"identifier": "testCalculateCharges_IAtomContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateCharges_IAtomContainer() throws Exception {\n        double[] testResult = {0.0, 0.0, 0.0, 0.0, 0.0};\n\n        GasteigerPEPEPartialCharges peoe = new GasteigerPEPEPartialCharges();\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addAtom(new Atom(\"F\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        peoe.calculateCharges(molecule);\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            //logger.debug(\"Charge for atom:\"+i+\" S:\"+mol.getAtomAt(i).getSymbol()+\" Charge:\"+mol.getAtomAt(i).getCharge());\n            Assert.assertEquals(testResult[i], molecule.getAtom(i).getCharge(), 0.01);\n        }\n    }", "signature": "void testCalculateCharges_IAtomContainer()", "full_signature": "@Test public void testCalculateCharges_IAtomContainer()", "class_method_signature": "GasteigerPEPEPartialChargesTest.testCalculateCharges_IAtomContainer()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "addAtom", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "calculateCharges", "getAtomCount", "assertEquals", "getCharge", "getAtom"]}, "focal_class": {"identifier": "GasteigerPEPEPartialCharges", "superclass": "", "interfaces": "implements IChargeCalculator", "fields": [{"original_string": "private int                 MX_ITERATIONS = 8;", "modifier": "private", "type": "int", "declarator": "MX_ITERATIONS = 8", "var_name": "MX_ITERATIONS"}, {"original_string": "private int                 MX_RESON      = 50;", "modifier": "private", "type": "int", "declarator": "MX_RESON      = 50", "var_name": "MX_RESON"}, {"original_string": "private int                 STEP_SIZE     = 5;", "modifier": "private", "type": "int", "declarator": "STEP_SIZE     = 5", "var_name": "STEP_SIZE"}, {"original_string": "private AtomTypeFactory     factory;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private static int          ISCHANGEDFC   = 0x1;", "modifier": "private static", "type": "int", "declarator": "ISCHANGEDFC   = 0x1", "var_name": "ISCHANGEDFC"}, {"original_string": "private double              fE            = 1.1;", "modifier": "private", "type": "double", "declarator": "fE            = 1.1", "var_name": "fE"}, {"original_string": "private double              fS            = 0.37;", "modifier": "private", "type": "double", "declarator": "fS            = 0.37", "var_name": "fS"}, {"original_string": "private static ILoggingTool logger        = LoggingToolFactory.createLoggingTool(GasteigerPEPEPartialCharges.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory.createLoggingTool(GasteigerPEPEPartialCharges.class)", "var_name": "logger"}], "methods": [{"identifier": "GasteigerPEPEPartialCharges", "parameters": "()", "modifiers": "public", "return": "", "signature": " GasteigerPEPEPartialCharges()", "full_signature": "public  GasteigerPEPEPartialCharges()", "class_method_signature": "GasteigerPEPEPartialCharges.GasteigerPEPEPartialCharges()", "testcase": false, "constructor": true}, {"identifier": "setMaxGasteigerIters", "parameters": "(int iters)", "modifiers": "public", "return": "void", "signature": "void setMaxGasteigerIters(int iters)", "full_signature": "public void setMaxGasteigerIters(int iters)", "class_method_signature": "GasteigerPEPEPartialCharges.setMaxGasteigerIters(int iters)", "testcase": false, "constructor": false}, {"identifier": "setMaxResoStruc", "parameters": "(int numbReson)", "modifiers": "public", "return": "void", "signature": "void setMaxResoStruc(int numbReson)", "full_signature": "public void setMaxResoStruc(int numbReson)", "class_method_signature": "GasteigerPEPEPartialCharges.setMaxResoStruc(int numbReson)", "testcase": false, "constructor": false}, {"identifier": "getMaxGasteigerIters", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxGasteigerIters()", "full_signature": "public int getMaxGasteigerIters()", "class_method_signature": "GasteigerPEPEPartialCharges.getMaxGasteigerIters()", "testcase": false, "constructor": false}, {"identifier": "getMaxResoStruc", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxResoStruc()", "full_signature": "public int getMaxResoStruc()", "class_method_signature": "GasteigerPEPEPartialCharges.getMaxResoStruc()", "testcase": false, "constructor": false}, {"identifier": "assignGasteigerPiPartialCharges", "parameters": "(IAtomContainer ac, boolean setCharge)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer assignGasteigerPiPartialCharges(IAtomContainer ac, boolean setCharge)", "full_signature": "public IAtomContainer assignGasteigerPiPartialCharges(IAtomContainer ac, boolean setCharge)", "class_method_signature": "GasteigerPEPEPartialCharges.assignGasteigerPiPartialCharges(IAtomContainer ac, boolean setCharge)", "testcase": false, "constructor": false}, {"identifier": "calculateCharges", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void calculateCharges(IAtomContainer container)", "full_signature": "@Override public void calculateCharges(IAtomContainer container)", "class_method_signature": "GasteigerPEPEPartialCharges.calculateCharges(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "removingFlagsAromaticity", "parameters": "(IAtomContainer ac)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer removingFlagsAromaticity(IAtomContainer ac)", "full_signature": "private IAtomContainer removingFlagsAromaticity(IAtomContainer ac)", "class_method_signature": "GasteigerPEPEPartialCharges.removingFlagsAromaticity(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(IAtomContainer container, IAtomContainer ac, boolean b)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer setFlags(IAtomContainer container, IAtomContainer ac, boolean b)", "full_signature": "private IAtomContainer setFlags(IAtomContainer container, IAtomContainer ac, boolean b)", "class_method_signature": "GasteigerPEPEPartialCharges.setFlags(IAtomContainer container, IAtomContainer ac, boolean b)", "testcase": false, "constructor": false}, {"identifier": "setAntiFlags", "parameters": "(IAtomContainer container, IAtomContainer ac, int number, boolean b)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer setAntiFlags(IAtomContainer container, IAtomContainer ac, int number, boolean b)", "full_signature": "private IAtomContainer setAntiFlags(IAtomContainer container, IAtomContainer ac, int number, boolean b)", "class_method_signature": "GasteigerPEPEPartialCharges.setAntiFlags(IAtomContainer container, IAtomContainer ac, int number, boolean b)", "testcase": false, "constructor": false}, {"identifier": "getHyperconjugationInteractions", "parameters": "(IAtomContainer ac, IAtomContainerSet iSet)", "modifiers": "private", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getHyperconjugationInteractions(IAtomContainer ac, IAtomContainerSet iSet)", "full_signature": "private IAtomContainerSet getHyperconjugationInteractions(IAtomContainer ac, IAtomContainerSet iSet)", "class_method_signature": "GasteigerPEPEPartialCharges.getHyperconjugationInteractions(IAtomContainer ac, IAtomContainerSet iSet)", "testcase": false, "constructor": false}, {"identifier": "getElectrostaticPotentialN", "parameters": "(IAtomContainer ac, int atom1, double[] ds)", "modifiers": "private", "return": "double", "signature": "double getElectrostaticPotentialN(IAtomContainer ac, int atom1, double[] ds)", "full_signature": "private double getElectrostaticPotentialN(IAtomContainer ac, int atom1, double[] ds)", "class_method_signature": "GasteigerPEPEPartialCharges.getElectrostaticPotentialN(IAtomContainer ac, int atom1, double[] ds)", "testcase": false, "constructor": false}, {"identifier": "getTopologicalFactors", "parameters": "(IAtomContainer atomContainer, IAtomContainer ac)", "modifiers": "private", "return": "double", "signature": "double getTopologicalFactors(IAtomContainer atomContainer, IAtomContainer ac)", "full_signature": "private double getTopologicalFactors(IAtomContainer atomContainer, IAtomContainer ac)", "class_method_signature": "GasteigerPEPEPartialCharges.getTopologicalFactors(IAtomContainer atomContainer, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getStepSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStepSize()", "full_signature": "public int getStepSize()", "class_method_signature": "GasteigerPEPEPartialCharges.getStepSize()", "testcase": false, "constructor": false}, {"identifier": "setStepSize", "parameters": "(int step)", "modifiers": "public", "return": "void", "signature": "void setStepSize(int step)", "full_signature": "public void setStepSize(int step)", "class_method_signature": "GasteigerPEPEPartialCharges.setStepSize(int step)", "testcase": false, "constructor": false}, {"identifier": "assignPiFactors", "parameters": "(IAtomContainerSet setAc)", "modifiers": "private", "return": "double[][]", "signature": "double[][] assignPiFactors(IAtomContainerSet setAc)", "full_signature": "private double[][] assignPiFactors(IAtomContainerSet setAc)", "class_method_signature": "GasteigerPEPEPartialCharges.assignPiFactors(IAtomContainerSet setAc)", "testcase": false, "constructor": false}, {"identifier": "assignrPiMarsilliFactors", "parameters": "(IAtomContainerSet setAc)", "modifiers": "public", "return": "double[][]", "signature": "double[][] assignrPiMarsilliFactors(IAtomContainerSet setAc)", "full_signature": "public double[][] assignrPiMarsilliFactors(IAtomContainerSet setAc)", "class_method_signature": "GasteigerPEPEPartialCharges.assignrPiMarsilliFactors(IAtomContainerSet setAc)", "testcase": false, "constructor": false}, {"identifier": "cleanFlagReactiveCenter", "parameters": "(IAtomContainer ac)", "modifiers": "private", "return": "void", "signature": "void cleanFlagReactiveCenter(IAtomContainer ac)", "full_signature": "private void cleanFlagReactiveCenter(IAtomContainer ac)", "class_method_signature": "GasteigerPEPEPartialCharges.cleanFlagReactiveCenter(IAtomContainer ac)", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/GasteigerPEPEPartialCharges.java"}, "focal_method": {"identifier": "calculateCharges", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void calculateCharges(IAtomContainer container) throws CDKException {\n        try {\n            this.assignGasteigerPiPartialCharges(container, true);\n        } catch (Exception exception) {\n            throw new CDKException(\"Could not calculate Gasteiger-Marsili PEPE charges: \" + exception.getMessage(),\n                    exception);\n        }\n    }", "signature": "void calculateCharges(IAtomContainer container)", "full_signature": "@Override public void calculateCharges(IAtomContainer container)", "class_method_signature": "GasteigerPEPEPartialCharges.calculateCharges(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["assignGasteigerPiPartialCharges", "getMessage"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}