{"test_class": {"identifier": "RegistrationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate RegistrationService registrationService;", "modifier": "@Autowired\n\tprivate", "type": "RegistrationService", "declarator": "registrationService", "var_name": "registrationService"}], "file": "user-registration-application/src/test/java/com/ewolff/user_registration/service/RegistrationServiceTest.java"}, "test_case": {"identifier": "userNotInitiallyRegistered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void userNotInitiallyRegistered() {\n\t\tassertNull(registrationService.getByEMail(\"eberhard.wolff@gmail.com\"));\n\t}", "signature": "void userNotInitiallyRegistered()", "full_signature": "@Test public void userNotInitiallyRegistered()", "class_method_signature": "RegistrationServiceTest.userNotInitiallyRegistered()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getByEMail"]}, "focal_class": {"identifier": "RegistrationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Log log = LogFactory.getLog(RegistrationService.class);", "modifier": "private", "type": "Log", "declarator": "log = LogFactory.getLog(RegistrationService.class)", "var_name": "log"}, {"original_string": "private Pattern emailPattern = Pattern.compile(\n\t\t\t\"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\",\n\t\t\tPattern.CASE_INSENSITIVE);", "modifier": "private", "type": "Pattern", "declarator": "emailPattern = Pattern.compile(\n\t\t\t\"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\",\n\t\t\tPattern.CASE_INSENSITIVE)", "var_name": "emailPattern"}, {"original_string": "@Autowired\n\tprivate JdbcTemplate jdbcTemplate;", "modifier": "@Autowired\n\tprivate", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "methods": [{"identifier": "register", "parameters": "(User user)", "modifiers": "public", "return": "boolean", "signature": "boolean register(User user)", "full_signature": "public boolean register(User user)", "class_method_signature": "RegistrationService.register(User user)", "testcase": false, "constructor": false}, {"identifier": "validEMailAdress", "parameters": "(String email)", "modifiers": "public", "return": "boolean", "signature": "boolean validEMailAdress(String email)", "full_signature": "public boolean validEMailAdress(String email)", "class_method_signature": "RegistrationService.validEMailAdress(String email)", "testcase": false, "constructor": false}, {"identifier": "getByEMail", "parameters": "(String email)", "modifiers": "public", "return": "User", "signature": "User getByEMail(String email)", "full_signature": "public User getByEMail(String email)", "class_method_signature": "RegistrationService.getByEMail(String email)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "RegistrationService.reset()", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(String email)", "modifiers": "public", "return": "void", "signature": "void unregister(String email)", "full_signature": "public void unregister(String email)", "class_method_signature": "RegistrationService.unregister(String email)", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clean()", "full_signature": "public void clean()", "class_method_signature": "RegistrationService.clean()", "testcase": false, "constructor": false}], "file": "user-registration-application/src/main/java/com/ewolff/user_registration/service/RegistrationService.java"}, "focal_method": {"identifier": "getByEMail", "parameters": "(String email)", "modifiers": "public", "return": "User", "body": "public User getByEMail(String email) {\n\t\tList<User> result = jdbcTemplate.query(\n\t\t\t\t\"SELECT firstname, name, email FROM T_USER WHERE email=?\",\n\t\t\t\tnew RowMapper<User>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic User mapRow(ResultSet rs, int rowNum)\n\t\t\t\t\t\t\tthrows SQLException {\n\t\t\t\t\t\treturn new User(rs.getString(\"firstname\"), rs\n\t\t\t\t\t\t\t\t.getString(\"name\"), rs.getString(\"email\"));\n\t\t\t\t\t}\n\t\t\t\t}, email);\n\t\tif (result.size() > 1) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"More than one user with the same email!\");\n\t\t}\n\t\tif (result.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn result.get(0);\n\t}", "signature": "User getByEMail(String email)", "full_signature": "public User getByEMail(String email)", "class_method_signature": "RegistrationService.getByEMail(String email)", "testcase": false, "constructor": false, "invocations": ["query", "getString", "getString", "getString", "size", "size", "get"]}, "repository": {"repo_id": 47017637, "url": "https://github.com/ewolff/user-registration-V2", "language": "Java", "is_fork": false, "fork_count": 31, "stargazer_count": 33, "size": 67936, "license": "licensed"}}