{"test_class": {"identifier": "SubmarineMetaStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SubmarineMetaStoreTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SubmarineMetaStoreTest.class)", "var_name": "LOG"}, {"original_string": "private static final SubmarineConfiguration submarineConf = SubmarineConfiguration.newInstance();", "modifier": "private static final", "type": "SubmarineConfiguration", "declarator": "submarineConf = SubmarineConfiguration.newInstance()", "var_name": "submarineConf"}, {"original_string": "private SubmarineMetaStore submarineMetaStore = new SubmarineMetaStore(submarineConf);", "modifier": "private", "type": "SubmarineMetaStore", "declarator": "submarineMetaStore = new SubmarineMetaStore(submarineConf)", "var_name": "submarineMetaStore"}], "file": "submarine-commons/commons-metastore/src/test/java/org/apache/submarine/commons/metastore/SubmarineMetaStoreTest.java"}, "test_case": {"identifier": "getAllDatabases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getAllDatabases() throws MetaException {\n    List<String> databases = submarineMetaStore.getAllDatabases();\n    assertEquals(true, databases.contains(\"testdb\"));\n  }", "signature": "void getAllDatabases()", "full_signature": "@Test public void getAllDatabases()", "class_method_signature": "SubmarineMetaStoreTest.getAllDatabases()", "testcase": true, "constructor": false, "invocations": ["getAllDatabases", "assertEquals", "contains"]}, "focal_class": {"identifier": "SubmarineMetaStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SubmarineMetaStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SubmarineMetaStore.class)", "var_name": "LOG"}, {"original_string": "private RawStore rs = null;", "modifier": "private", "type": "RawStore", "declarator": "rs = null", "var_name": "rs"}], "methods": [{"identifier": "SubmarineMetaStore", "parameters": "(SubmarineConfiguration submarineConf)", "modifiers": "public", "return": "", "signature": " SubmarineMetaStore(SubmarineConfiguration submarineConf)", "full_signature": "public  SubmarineMetaStore(SubmarineConfiguration submarineConf)", "class_method_signature": "SubmarineMetaStore.SubmarineMetaStore(SubmarineConfiguration submarineConf)", "testcase": false, "constructor": true}, {"identifier": "getDatabaseCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDatabaseCount()", "full_signature": "public int getDatabaseCount()", "class_method_signature": "SubmarineMetaStore.getDatabaseCount()", "testcase": false, "constructor": false}, {"identifier": "getAllDatabases", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllDatabases()", "full_signature": "public List<String> getAllDatabases()", "class_method_signature": "SubmarineMetaStore.getAllDatabases()", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "(String databaseName)", "modifiers": "public", "return": "Database", "signature": "Database getDatabase(String databaseName)", "full_signature": "public Database getDatabase(String databaseName)", "class_method_signature": "SubmarineMetaStore.getDatabase(String databaseName)", "testcase": false, "constructor": false}, {"identifier": "getTableCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTableCount()", "full_signature": "public int getTableCount()", "class_method_signature": "SubmarineMetaStore.getTableCount()", "testcase": false, "constructor": false}, {"identifier": "getAllTables", "parameters": "(String databaseName)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllTables(String databaseName)", "full_signature": "public List<String> getAllTables(String databaseName)", "class_method_signature": "SubmarineMetaStore.getAllTables(String databaseName)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "(String databaseName, String tableName)", "modifiers": "public", "return": "Table", "signature": "Table getTable(String databaseName, String tableName)", "full_signature": "public Table getTable(String databaseName, String tableName)", "class_method_signature": "SubmarineMetaStore.getTable(String databaseName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "createDatabase", "parameters": "(Database db)", "modifiers": "public", "return": "void", "signature": "void createDatabase(Database db)", "full_signature": "public void createDatabase(Database db)", "class_method_signature": "SubmarineMetaStore.createDatabase(Database db)", "testcase": false, "constructor": false}, {"identifier": "alterDatabase", "parameters": "(String dbName, Database db)", "modifiers": "public", "return": "boolean", "signature": "boolean alterDatabase(String dbName, Database db)", "full_signature": "public boolean alterDatabase(String dbName, Database db)", "class_method_signature": "SubmarineMetaStore.alterDatabase(String dbName, Database db)", "testcase": false, "constructor": false}, {"identifier": "dropDatabase", "parameters": "(String dbName)", "modifiers": "public", "return": "boolean", "signature": "boolean dropDatabase(String dbName)", "full_signature": "public boolean dropDatabase(String dbName)", "class_method_signature": "SubmarineMetaStore.dropDatabase(String dbName)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(Table table)", "modifiers": "public", "return": "void", "signature": "void createTable(Table table)", "full_signature": "public void createTable(Table table)", "class_method_signature": "SubmarineMetaStore.createTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "dropTable", "parameters": "(String dbName, String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean dropTable(String dbName, String tableName)", "full_signature": "public boolean dropTable(String dbName, String tableName)", "class_method_signature": "SubmarineMetaStore.dropTable(String dbName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getPartitionCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPartitionCount()", "full_signature": "public int getPartitionCount()", "class_method_signature": "SubmarineMetaStore.getPartitionCount()", "testcase": false, "constructor": false}, {"identifier": "getPartition", "parameters": "(String dbName, String tableName, List<String> partVals)", "modifiers": "public", "return": "Partition", "signature": "Partition getPartition(String dbName, String tableName, List<String> partVals)", "full_signature": "public Partition getPartition(String dbName, String tableName, List<String> partVals)", "class_method_signature": "SubmarineMetaStore.getPartition(String dbName, String tableName, List<String> partVals)", "testcase": false, "constructor": false}, {"identifier": "getTableMeta", "parameters": "(String dbNames, String tableNames, List<String> tableTypes)", "modifiers": "public", "return": "List<TableMeta>", "signature": "List<TableMeta> getTableMeta(String dbNames, String tableNames, List<String> tableTypes)", "full_signature": "public List<TableMeta> getTableMeta(String dbNames, String tableNames, List<String> tableTypes)", "class_method_signature": "SubmarineMetaStore.getTableMeta(String dbNames, String tableNames, List<String> tableTypes)", "testcase": false, "constructor": false}, {"identifier": "createTableWithConstraints", "parameters": "(Table tbl,\n                                         List<SQLPrimaryKey> primaryKeys,\n                                         List<SQLForeignKey> foreignKeys)", "modifiers": "public", "return": "void", "signature": "void createTableWithConstraints(Table tbl,\n                                         List<SQLPrimaryKey> primaryKeys,\n                                         List<SQLForeignKey> foreignKeys)", "full_signature": "public void createTableWithConstraints(Table tbl,\n                                         List<SQLPrimaryKey> primaryKeys,\n                                         List<SQLForeignKey> foreignKeys)", "class_method_signature": "SubmarineMetaStore.createTableWithConstraints(Table tbl,\n                                         List<SQLPrimaryKey> primaryKeys,\n                                         List<SQLForeignKey> foreignKeys)", "testcase": false, "constructor": false}, {"identifier": "addPartitions", "parameters": "(String dbName, String tblName, List<Partition> parts)", "modifiers": "public", "return": "boolean", "signature": "boolean addPartitions(String dbName, String tblName, List<Partition> parts)", "full_signature": "public boolean addPartitions(String dbName, String tblName, List<Partition> parts)", "class_method_signature": "SubmarineMetaStore.addPartitions(String dbName, String tblName, List<Partition> parts)", "testcase": false, "constructor": false}, {"identifier": "dropPartition", "parameters": "(String dbName, String tableName, List<String> partVals)", "modifiers": "public", "return": "boolean", "signature": "boolean dropPartition(String dbName, String tableName, List<String> partVals)", "full_signature": "public boolean dropPartition(String dbName, String tableName, List<String> partVals)", "class_method_signature": "SubmarineMetaStore.dropPartition(String dbName, String tableName, List<String> partVals)", "testcase": false, "constructor": false}, {"identifier": "alterTable", "parameters": "(String dbname, String tableName, Table newTable)", "modifiers": "public", "return": "void", "signature": "void alterTable(String dbname, String tableName, Table newTable)", "full_signature": "public void alterTable(String dbname, String tableName, Table newTable)", "class_method_signature": "SubmarineMetaStore.alterTable(String dbname, String tableName, Table newTable)", "testcase": false, "constructor": false}, {"identifier": "alterIndex", "parameters": "(String dbname, String baseTblName, String indexName, Index newIndex)", "modifiers": "public", "return": "void", "signature": "void alterIndex(String dbname, String baseTblName, String indexName, Index newIndex)", "full_signature": "public void alterIndex(String dbname, String baseTblName, String indexName, Index newIndex)", "class_method_signature": "SubmarineMetaStore.alterIndex(String dbname, String baseTblName, String indexName, Index newIndex)", "testcase": false, "constructor": false}, {"identifier": "alterPartition", "parameters": "(String dbname, String tableName, List<String> partVals, Partition newPart)", "modifiers": "public", "return": "void", "signature": "void alterPartition(String dbname, String tableName, List<String> partVals, Partition newPart)", "full_signature": "public void alterPartition(String dbname, String tableName, List<String> partVals, Partition newPart)", "class_method_signature": "SubmarineMetaStore.alterPartition(String dbname, String tableName, List<String> partVals, Partition newPart)", "testcase": false, "constructor": false}, {"identifier": "addPrimaryKeys", "parameters": "(List<SQLPrimaryKey> pks)", "modifiers": "public", "return": "void", "signature": "void addPrimaryKeys(List<SQLPrimaryKey> pks)", "full_signature": "public void addPrimaryKeys(List<SQLPrimaryKey> pks)", "class_method_signature": "SubmarineMetaStore.addPrimaryKeys(List<SQLPrimaryKey> pks)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(Index index)", "modifiers": "public", "return": "boolean", "signature": "boolean addIndex(Index index)", "full_signature": "public boolean addIndex(Index index)", "class_method_signature": "SubmarineMetaStore.addIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "dropIndex", "parameters": "(String dbName, String origTableName, String indexName)", "modifiers": "public", "return": "boolean", "signature": "boolean dropIndex(String dbName, String origTableName, String indexName)", "full_signature": "public boolean dropIndex(String dbName, String origTableName, String indexName)", "class_method_signature": "SubmarineMetaStore.dropIndex(String dbName, String origTableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "(String dbName, String origTableName, String indexName)", "modifiers": "public", "return": "Index", "signature": "Index getIndex(String dbName, String origTableName, String indexName)", "full_signature": "public Index getIndex(String dbName, String origTableName, String indexName)", "class_method_signature": "SubmarineMetaStore.getIndex(String dbName, String origTableName, String indexName)", "testcase": false, "constructor": false}], "file": "submarine-commons/commons-metastore/src/main/java/org/apache/submarine/commons/metastore/SubmarineMetaStore.java"}, "focal_method": {"identifier": "getAllDatabases", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getAllDatabases() throws MetaException {\n    List<String> databases = rs.getAllDatabases();\n    return databases;\n  }", "signature": "List<String> getAllDatabases()", "full_signature": "public List<String> getAllDatabases()", "class_method_signature": "SubmarineMetaStore.getAllDatabases()", "testcase": false, "constructor": false, "invocations": ["getAllDatabases"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}