{"test_class": {"identifier": "ObservableInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObservableInteractorTestClass observableInteractor;", "modifier": "private", "type": "ObservableInteractorTestClass", "declarator": "observableInteractor", "var_name": "observableInteractor"}, {"original_string": "private EmptyObservableInteractorTestClass emptyObservableInteractor;", "modifier": "private", "type": "EmptyObservableInteractorTestClass", "declarator": "emptyObservableInteractor", "var_name": "emptyObservableInteractor"}, {"original_string": "private TestDisposableObserver<Object> testDisposableObserver;", "modifier": "private", "type": "TestDisposableObserver<Object>", "declarator": "testDisposableObserver", "var_name": "testDisposableObserver"}, {"original_string": "@Mock private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "domain/src/test/java/com/remotecraft/app/domain/interactor/base/ObservableInteractorTest.java"}, "test_case": {"identifier": "shouldReturnEmptyStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnEmptyStream() throws Exception {\n    emptyObservableInteractor.execute(testDisposableObserver, null);\n\n    assertEquals(0, testDisposableObserver.valuesCount);\n  }", "signature": "void shouldReturnEmptyStream()", "full_signature": "@Test public void shouldReturnEmptyStream()", "class_method_signature": "ObservableInteractorTest.shouldReturnEmptyStream()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals"]}, "focal_class": {"identifier": "ObservableInteractor", "superclass": "", "interfaces": "implements Interactor<DisposableObserver, P>", "fields": [{"original_string": "protected final ThreadExecutor threadExecutor;", "modifier": "protected final", "type": "ThreadExecutor", "declarator": "threadExecutor", "var_name": "threadExecutor"}, {"original_string": "protected final PostExecutionThread postExecutionThread;", "modifier": "protected final", "type": "PostExecutionThread", "declarator": "postExecutionThread", "var_name": "postExecutionThread"}, {"original_string": "protected final CompositeDisposable disposables;", "modifier": "protected final", "type": "CompositeDisposable", "declarator": "disposables", "var_name": "disposables"}], "methods": [{"identifier": "ObservableInteractor", "parameters": "(ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "modifiers": "public", "return": "", "signature": " ObservableInteractor(ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "full_signature": "public  ObservableInteractor(ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "class_method_signature": "ObservableInteractor.ObservableInteractor(ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "testcase": false, "constructor": true}, {"identifier": "buildReactiveStream", "parameters": "(P params)", "modifiers": "protected abstract", "return": "Observable<T>", "signature": "Observable<T> buildReactiveStream(P params)", "full_signature": "protected abstract Observable<T> buildReactiveStream(P params)", "class_method_signature": "ObservableInteractor.buildReactiveStream(P params)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(DisposableObserver observer, P params)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void execute(DisposableObserver observer, P params)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(DisposableObserver observer, P params)", "class_method_signature": "ObservableInteractor.execute(DisposableObserver observer, P params)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ObservableInteractor.dispose()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/com/remotecraft/app/domain/interactor/base/ObservableInteractor.java"}, "focal_method": {"identifier": "execute", "parameters": "(DisposableObserver observer, P params)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public void execute(DisposableObserver observer, P params) {\n    DisposableObserver disposableObserver = buildReactiveStream(params)\n        .subscribeOn(Schedulers.from(threadExecutor))\n        .observeOn(postExecutionThread.getScheduler())\n        .subscribeWith(observer);\n    disposables.add(disposableObserver);\n  }", "signature": "void execute(DisposableObserver observer, P params)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(DisposableObserver observer, P params)", "class_method_signature": "ObservableInteractor.execute(DisposableObserver observer, P params)", "testcase": false, "constructor": false, "invocations": ["subscribeWith", "observeOn", "subscribeOn", "buildReactiveStream", "from", "getScheduler", "add"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}