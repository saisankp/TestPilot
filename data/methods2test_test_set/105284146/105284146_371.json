{"test_class": {"identifier": "UcteNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "ucte/ucte-network/src/test/java/com/powsybl/ucte/network/UcteNodeTest.java"}, "test_case": {"identifier": "testIsGenerator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsGenerator() {\n        UcteNode node = createNode();\n\n        assertFalse(node.isGenerator());\n\n        node.setTypeCode(UcteNodeTypeCode.UT);\n        assertTrue(node.isGenerator());\n        node.setTypeCode(UcteNodeTypeCode.PQ);\n        assertFalse(node.isGenerator());\n\n        node.setActivePowerGeneration(1000.0f);\n        assertTrue(node.isGenerator());\n        node.setActivePowerGeneration(Float.NaN);\n        assertFalse(node.isGenerator());\n\n        node.setReactivePowerGeneration(1000.0f);\n        assertTrue(node.isGenerator());\n        node.setReactivePowerGeneration(Float.NaN);\n        assertFalse(node.isGenerator());\n\n        node.setMinimumPermissibleActivePowerGeneration(1000.0f);\n        node.setMaximumPermissibleActivePowerGeneration(1000.0f);\n        assertFalse(node.isGenerator());\n        node.setMinimumPermissibleActivePowerGeneration(-1000.0f);\n        assertTrue(node.isGenerator());\n        node.setMinimumPermissibleActivePowerGeneration(Float.NaN);\n        node.setMaximumPermissibleActivePowerGeneration(Float.NaN);\n        assertFalse(node.isGenerator());\n\n        node.setMinimumPermissibleReactivePowerGeneration(1000.0f);\n        node.setMaximumPermissibleReactivePowerGeneration(1000.0f);\n        assertFalse(node.isGenerator());\n        node.setMinimumPermissibleReactivePowerGeneration(-1000.0f);\n        assertTrue(node.isGenerator());\n        node.setMinimumPermissibleReactivePowerGeneration(Float.NaN);\n        node.setMaximumPermissibleReactivePowerGeneration(Float.NaN);\n        assertFalse(node.isGenerator());\n    }", "signature": "void testIsGenerator()", "full_signature": "@Test public void testIsGenerator()", "class_method_signature": "UcteNodeTest.testIsGenerator()", "testcase": true, "constructor": false, "invocations": ["createNode", "assertFalse", "isGenerator", "setTypeCode", "assertTrue", "isGenerator", "setTypeCode", "assertFalse", "isGenerator", "setActivePowerGeneration", "assertTrue", "isGenerator", "setActivePowerGeneration", "assertFalse", "isGenerator", "setReactivePowerGeneration", "assertTrue", "isGenerator", "setReactivePowerGeneration", "assertFalse", "isGenerator", "setMinimumPermissibleActivePowerGeneration", "setMaximumPermissibleActivePowerGeneration", "assertFalse", "isGenerator", "setMinimumPermissibleActivePowerGeneration", "assertTrue", "isGenerator", "setMinimumPermissibleActivePowerGeneration", "setMaximumPermissibleActivePowerGeneration", "assertFalse", "isGenerator", "setMinimumPermissibleReactivePowerGeneration", "setMaximumPermissibleReactivePowerGeneration", "assertFalse", "isGenerator", "setMinimumPermissibleReactivePowerGeneration", "assertTrue", "isGenerator", "setMinimumPermissibleReactivePowerGeneration", "setMaximumPermissibleReactivePowerGeneration", "assertFalse", "isGenerator"]}, "focal_class": {"identifier": "UcteNode", "superclass": "", "interfaces": "implements UcteRecord, Comparable<UcteNode>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UcteNode.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UcteNode.class)", "var_name": "LOGGER"}, {"original_string": "private static final float DEFAULT_POWER_LIMIT = 9999;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_POWER_LIMIT = 9999", "var_name": "DEFAULT_POWER_LIMIT"}, {"original_string": "private UcteNodeCode code;", "modifier": "private", "type": "UcteNodeCode", "declarator": "code", "var_name": "code"}, {"original_string": "private String geographicalName;", "modifier": "private", "type": "String", "declarator": "geographicalName", "var_name": "geographicalName"}, {"original_string": "private UcteNodeStatus status;", "modifier": "private", "type": "UcteNodeStatus", "declarator": "status", "var_name": "status"}, {"original_string": "private UcteNodeTypeCode typeCode;", "modifier": "private", "type": "UcteNodeTypeCode", "declarator": "typeCode", "var_name": "typeCode"}, {"original_string": "private float voltageReference;", "modifier": "private", "type": "float", "declarator": "voltageReference", "var_name": "voltageReference"}, {"original_string": "private float activeLoad;", "modifier": "private", "type": "float", "declarator": "activeLoad", "var_name": "activeLoad"}, {"original_string": "private float reactiveLoad;", "modifier": "private", "type": "float", "declarator": "reactiveLoad", "var_name": "reactiveLoad"}, {"original_string": "private float activePowerGeneration;", "modifier": "private", "type": "float", "declarator": "activePowerGeneration", "var_name": "activePowerGeneration"}, {"original_string": "private float reactivePowerGeneration;", "modifier": "private", "type": "float", "declarator": "reactivePowerGeneration", "var_name": "reactivePowerGeneration"}, {"original_string": "private float minimumPermissibleActivePowerGeneration;", "modifier": "private", "type": "float", "declarator": "minimumPermissibleActivePowerGeneration", "var_name": "minimumPermissibleActivePowerGeneration"}, {"original_string": "private float maximumPermissibleActivePowerGeneration;", "modifier": "private", "type": "float", "declarator": "maximumPermissibleActivePowerGeneration", "var_name": "maximumPermissibleActivePowerGeneration"}, {"original_string": "private float minimumPermissibleReactivePowerGeneration;", "modifier": "private", "type": "float", "declarator": "minimumPermissibleReactivePowerGeneration", "var_name": "minimumPermissibleReactivePowerGeneration"}, {"original_string": "private float maximumPermissibleReactivePowerGeneration;", "modifier": "private", "type": "float", "declarator": "maximumPermissibleReactivePowerGeneration", "var_name": "maximumPermissibleReactivePowerGeneration"}, {"original_string": "private float staticOfPrimaryControl;", "modifier": "private", "type": "float", "declarator": "staticOfPrimaryControl", "var_name": "staticOfPrimaryControl"}, {"original_string": "private float nominalPowerPrimaryControl;", "modifier": "private", "type": "float", "declarator": "nominalPowerPrimaryControl", "var_name": "nominalPowerPrimaryControl"}, {"original_string": "private float threePhaseShortCircuitPower;", "modifier": "private", "type": "float", "declarator": "threePhaseShortCircuitPower", "var_name": "threePhaseShortCircuitPower"}, {"original_string": "private float xrRatio;", "modifier": "private", "type": "float", "declarator": "xrRatio", "var_name": "xrRatio"}, {"original_string": "private UctePowerPlantType powerPlantType;", "modifier": "private", "type": "UctePowerPlantType", "declarator": "powerPlantType", "var_name": "powerPlantType"}], "methods": [{"identifier": "UcteNode", "parameters": "(UcteNodeCode code, String geographicalName, UcteNodeStatus status, UcteNodeTypeCode typeCode,\n                    float voltageReference, float activeLoad, float reactiveLoad, float activePowerGeneration,\n                    float reactivePowerGeneration, float minimumPermissibleActivePowerGeneration,\n                    float maximumPermissibleActivePowerGeneration, float minimumPermissibleReactivePowerGeneration,\n                    float maximumPermissibleReactivePowerGeneration, float staticOfPrimaryControl,\n                    float nominalPowerPrimaryControl, float threePhaseShortCircuitPower, float xrRatio,\n                    UctePowerPlantType powerPlantType)", "modifiers": "public", "return": "", "signature": " UcteNode(UcteNodeCode code, String geographicalName, UcteNodeStatus status, UcteNodeTypeCode typeCode,\n                    float voltageReference, float activeLoad, float reactiveLoad, float activePowerGeneration,\n                    float reactivePowerGeneration, float minimumPermissibleActivePowerGeneration,\n                    float maximumPermissibleActivePowerGeneration, float minimumPermissibleReactivePowerGeneration,\n                    float maximumPermissibleReactivePowerGeneration, float staticOfPrimaryControl,\n                    float nominalPowerPrimaryControl, float threePhaseShortCircuitPower, float xrRatio,\n                    UctePowerPlantType powerPlantType)", "full_signature": "public  UcteNode(UcteNodeCode code, String geographicalName, UcteNodeStatus status, UcteNodeTypeCode typeCode,\n                    float voltageReference, float activeLoad, float reactiveLoad, float activePowerGeneration,\n                    float reactivePowerGeneration, float minimumPermissibleActivePowerGeneration,\n                    float maximumPermissibleActivePowerGeneration, float minimumPermissibleReactivePowerGeneration,\n                    float maximumPermissibleReactivePowerGeneration, float staticOfPrimaryControl,\n                    float nominalPowerPrimaryControl, float threePhaseShortCircuitPower, float xrRatio,\n                    UctePowerPlantType powerPlantType)", "class_method_signature": "UcteNode.UcteNode(UcteNodeCode code, String geographicalName, UcteNodeStatus status, UcteNodeTypeCode typeCode,\n                    float voltageReference, float activeLoad, float reactiveLoad, float activePowerGeneration,\n                    float reactivePowerGeneration, float minimumPermissibleActivePowerGeneration,\n                    float maximumPermissibleActivePowerGeneration, float minimumPermissibleReactivePowerGeneration,\n                    float maximumPermissibleReactivePowerGeneration, float staticOfPrimaryControl,\n                    float nominalPowerPrimaryControl, float threePhaseShortCircuitPower, float xrRatio,\n                    UctePowerPlantType powerPlantType)", "testcase": false, "constructor": true}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "UcteNodeCode", "signature": "UcteNodeCode getCode()", "full_signature": "public UcteNodeCode getCode()", "class_method_signature": "UcteNode.getCode()", "testcase": false, "constructor": false}, {"identifier": "setCode", "parameters": "(UcteNodeCode code)", "modifiers": "public", "return": "void", "signature": "void setCode(UcteNodeCode code)", "full_signature": "public void setCode(UcteNodeCode code)", "class_method_signature": "UcteNode.setCode(UcteNodeCode code)", "testcase": false, "constructor": false}, {"identifier": "getGeographicalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGeographicalName()", "full_signature": "public String getGeographicalName()", "class_method_signature": "UcteNode.getGeographicalName()", "testcase": false, "constructor": false}, {"identifier": "setGeographicalName", "parameters": "(String geographicalName)", "modifiers": "public", "return": "void", "signature": "void setGeographicalName(String geographicalName)", "full_signature": "public void setGeographicalName(String geographicalName)", "class_method_signature": "UcteNode.setGeographicalName(String geographicalName)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "UcteNodeStatus", "signature": "UcteNodeStatus getStatus()", "full_signature": "public UcteNodeStatus getStatus()", "class_method_signature": "UcteNode.getStatus()", "testcase": false, "constructor": false}, {"identifier": "setStatus", "parameters": "(UcteNodeStatus status)", "modifiers": "public", "return": "void", "signature": "void setStatus(UcteNodeStatus status)", "full_signature": "public void setStatus(UcteNodeStatus status)", "class_method_signature": "UcteNode.setStatus(UcteNodeStatus status)", "testcase": false, "constructor": false}, {"identifier": "getTypeCode", "parameters": "()", "modifiers": "public", "return": "UcteNodeTypeCode", "signature": "UcteNodeTypeCode getTypeCode()", "full_signature": "public UcteNodeTypeCode getTypeCode()", "class_method_signature": "UcteNode.getTypeCode()", "testcase": false, "constructor": false}, {"identifier": "setTypeCode", "parameters": "(UcteNodeTypeCode typeCode)", "modifiers": "public", "return": "void", "signature": "void setTypeCode(UcteNodeTypeCode typeCode)", "full_signature": "public void setTypeCode(UcteNodeTypeCode typeCode)", "class_method_signature": "UcteNode.setTypeCode(UcteNodeTypeCode typeCode)", "testcase": false, "constructor": false}, {"identifier": "getVoltageReference", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getVoltageReference()", "full_signature": "public float getVoltageReference()", "class_method_signature": "UcteNode.getVoltageReference()", "testcase": false, "constructor": false}, {"identifier": "setVoltageReference", "parameters": "(float voltageReference)", "modifiers": "public", "return": "void", "signature": "void setVoltageReference(float voltageReference)", "full_signature": "public void setVoltageReference(float voltageReference)", "class_method_signature": "UcteNode.setVoltageReference(float voltageReference)", "testcase": false, "constructor": false}, {"identifier": "getActiveLoad", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getActiveLoad()", "full_signature": "public float getActiveLoad()", "class_method_signature": "UcteNode.getActiveLoad()", "testcase": false, "constructor": false}, {"identifier": "setActiveLoad", "parameters": "(float activeLoad)", "modifiers": "public", "return": "void", "signature": "void setActiveLoad(float activeLoad)", "full_signature": "public void setActiveLoad(float activeLoad)", "class_method_signature": "UcteNode.setActiveLoad(float activeLoad)", "testcase": false, "constructor": false}, {"identifier": "getReactiveLoad", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getReactiveLoad()", "full_signature": "public float getReactiveLoad()", "class_method_signature": "UcteNode.getReactiveLoad()", "testcase": false, "constructor": false}, {"identifier": "setReactiveLoad", "parameters": "(float reactiveLoad)", "modifiers": "public", "return": "void", "signature": "void setReactiveLoad(float reactiveLoad)", "full_signature": "public void setReactiveLoad(float reactiveLoad)", "class_method_signature": "UcteNode.setReactiveLoad(float reactiveLoad)", "testcase": false, "constructor": false}, {"identifier": "getActivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getActivePowerGeneration()", "full_signature": "public float getActivePowerGeneration()", "class_method_signature": "UcteNode.getActivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setActivePowerGeneration", "parameters": "(float activePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setActivePowerGeneration(float activePowerGeneration)", "full_signature": "public void setActivePowerGeneration(float activePowerGeneration)", "class_method_signature": "UcteNode.setActivePowerGeneration(float activePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getReactivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getReactivePowerGeneration()", "full_signature": "public float getReactivePowerGeneration()", "class_method_signature": "UcteNode.getReactivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setReactivePowerGeneration", "parameters": "(float reactivePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setReactivePowerGeneration(float reactivePowerGeneration)", "full_signature": "public void setReactivePowerGeneration(float reactivePowerGeneration)", "class_method_signature": "UcteNode.setReactivePowerGeneration(float reactivePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getMinimumPermissibleActivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMinimumPermissibleActivePowerGeneration()", "full_signature": "public float getMinimumPermissibleActivePowerGeneration()", "class_method_signature": "UcteNode.getMinimumPermissibleActivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setMinimumPermissibleActivePowerGeneration", "parameters": "(float minimumPermissibleActivePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setMinimumPermissibleActivePowerGeneration(float minimumPermissibleActivePowerGeneration)", "full_signature": "public void setMinimumPermissibleActivePowerGeneration(float minimumPermissibleActivePowerGeneration)", "class_method_signature": "UcteNode.setMinimumPermissibleActivePowerGeneration(float minimumPermissibleActivePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getMaximumPermissibleActivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMaximumPermissibleActivePowerGeneration()", "full_signature": "public float getMaximumPermissibleActivePowerGeneration()", "class_method_signature": "UcteNode.getMaximumPermissibleActivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setMaximumPermissibleActivePowerGeneration", "parameters": "(float maximumPermissibleActivePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setMaximumPermissibleActivePowerGeneration(float maximumPermissibleActivePowerGeneration)", "full_signature": "public void setMaximumPermissibleActivePowerGeneration(float maximumPermissibleActivePowerGeneration)", "class_method_signature": "UcteNode.setMaximumPermissibleActivePowerGeneration(float maximumPermissibleActivePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getMinimumPermissibleReactivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMinimumPermissibleReactivePowerGeneration()", "full_signature": "public float getMinimumPermissibleReactivePowerGeneration()", "class_method_signature": "UcteNode.getMinimumPermissibleReactivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setMinimumPermissibleReactivePowerGeneration", "parameters": "(float minimumPermissibleReactivePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setMinimumPermissibleReactivePowerGeneration(float minimumPermissibleReactivePowerGeneration)", "full_signature": "public void setMinimumPermissibleReactivePowerGeneration(float minimumPermissibleReactivePowerGeneration)", "class_method_signature": "UcteNode.setMinimumPermissibleReactivePowerGeneration(float minimumPermissibleReactivePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getMaximumPermissibleReactivePowerGeneration", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMaximumPermissibleReactivePowerGeneration()", "full_signature": "public float getMaximumPermissibleReactivePowerGeneration()", "class_method_signature": "UcteNode.getMaximumPermissibleReactivePowerGeneration()", "testcase": false, "constructor": false}, {"identifier": "setMaximumPermissibleReactivePowerGeneration", "parameters": "(float maximumPermissibleReactivePowerGeneration)", "modifiers": "public", "return": "void", "signature": "void setMaximumPermissibleReactivePowerGeneration(float maximumPermissibleReactivePowerGeneration)", "full_signature": "public void setMaximumPermissibleReactivePowerGeneration(float maximumPermissibleReactivePowerGeneration)", "class_method_signature": "UcteNode.setMaximumPermissibleReactivePowerGeneration(float maximumPermissibleReactivePowerGeneration)", "testcase": false, "constructor": false}, {"identifier": "getStaticOfPrimaryControl", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getStaticOfPrimaryControl()", "full_signature": "public float getStaticOfPrimaryControl()", "class_method_signature": "UcteNode.getStaticOfPrimaryControl()", "testcase": false, "constructor": false}, {"identifier": "setStaticOfPrimaryControl", "parameters": "(float staticOfPrimaryControl)", "modifiers": "public", "return": "void", "signature": "void setStaticOfPrimaryControl(float staticOfPrimaryControl)", "full_signature": "public void setStaticOfPrimaryControl(float staticOfPrimaryControl)", "class_method_signature": "UcteNode.setStaticOfPrimaryControl(float staticOfPrimaryControl)", "testcase": false, "constructor": false}, {"identifier": "getNominalPowerPrimaryControl", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getNominalPowerPrimaryControl()", "full_signature": "public float getNominalPowerPrimaryControl()", "class_method_signature": "UcteNode.getNominalPowerPrimaryControl()", "testcase": false, "constructor": false}, {"identifier": "setNominalPowerPrimaryControl", "parameters": "(float nominalPowerPrimaryControl)", "modifiers": "public", "return": "void", "signature": "void setNominalPowerPrimaryControl(float nominalPowerPrimaryControl)", "full_signature": "public void setNominalPowerPrimaryControl(float nominalPowerPrimaryControl)", "class_method_signature": "UcteNode.setNominalPowerPrimaryControl(float nominalPowerPrimaryControl)", "testcase": false, "constructor": false}, {"identifier": "getThreePhaseShortCircuitPower", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getThreePhaseShortCircuitPower()", "full_signature": "public float getThreePhaseShortCircuitPower()", "class_method_signature": "UcteNode.getThreePhaseShortCircuitPower()", "testcase": false, "constructor": false}, {"identifier": "setThreePhaseShortCircuitPower", "parameters": "(float threePhaseShortCircuitPower)", "modifiers": "public", "return": "void", "signature": "void setThreePhaseShortCircuitPower(float threePhaseShortCircuitPower)", "full_signature": "public void setThreePhaseShortCircuitPower(float threePhaseShortCircuitPower)", "class_method_signature": "UcteNode.setThreePhaseShortCircuitPower(float threePhaseShortCircuitPower)", "testcase": false, "constructor": false}, {"identifier": "getXrRatio", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getXrRatio()", "full_signature": "public float getXrRatio()", "class_method_signature": "UcteNode.getXrRatio()", "testcase": false, "constructor": false}, {"identifier": "setXrRatio", "parameters": "(float xrRatio)", "modifiers": "public", "return": "void", "signature": "void setXrRatio(float xrRatio)", "full_signature": "public void setXrRatio(float xrRatio)", "class_method_signature": "UcteNode.setXrRatio(float xrRatio)", "testcase": false, "constructor": false}, {"identifier": "getPowerPlantType", "parameters": "()", "modifiers": "public", "return": "UctePowerPlantType", "signature": "UctePowerPlantType getPowerPlantType()", "full_signature": "public UctePowerPlantType getPowerPlantType()", "class_method_signature": "UcteNode.getPowerPlantType()", "testcase": false, "constructor": false}, {"identifier": "setPowerPlantType", "parameters": "(UctePowerPlantType powerPlantType)", "modifiers": "public", "return": "void", "signature": "void setPowerPlantType(UctePowerPlantType powerPlantType)", "full_signature": "public void setPowerPlantType(UctePowerPlantType powerPlantType)", "class_method_signature": "UcteNode.setPowerPlantType(UctePowerPlantType powerPlantType)", "testcase": false, "constructor": false}, {"identifier": "isGenerator", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGenerator()", "full_signature": "public boolean isGenerator()", "class_method_signature": "UcteNode.isGenerator()", "testcase": false, "constructor": false}, {"identifier": "isRegulatingVoltage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRegulatingVoltage()", "full_signature": "public boolean isRegulatingVoltage()", "class_method_signature": "UcteNode.isRegulatingVoltage()", "testcase": false, "constructor": false}, {"identifier": "isRegulatingFrequency", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRegulatingFrequency()", "full_signature": "public boolean isRegulatingFrequency()", "class_method_signature": "UcteNode.isRegulatingFrequency()", "testcase": false, "constructor": false}, {"identifier": "fix", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fix()", "full_signature": "@Override public void fix()", "class_method_signature": "UcteNode.fix()", "testcase": false, "constructor": false}, {"identifier": "fixActivePower", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixActivePower()", "full_signature": "private void fixActivePower()", "class_method_signature": "UcteNode.fixActivePower()", "testcase": false, "constructor": false}, {"identifier": "fixVoltage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixVoltage()", "full_signature": "private void fixVoltage()", "class_method_signature": "UcteNode.fixVoltage()", "testcase": false, "constructor": false}, {"identifier": "fixReactivePower", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixReactivePower()", "full_signature": "private void fixReactivePower()", "class_method_signature": "UcteNode.fixReactivePower()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "UcteNode.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "UcteNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UcteNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(UcteNode ucteNode)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(UcteNode ucteNode)", "full_signature": "@Override public int compareTo(UcteNode ucteNode)", "class_method_signature": "UcteNode.compareTo(UcteNode ucteNode)", "testcase": false, "constructor": false}], "file": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/UcteNode.java"}, "focal_method": {"identifier": "isGenerator", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isGenerator() {\n        // we consider there is a generator connected to the node if\n        //   - node is regulating voltage\n        //   - or active power generation is defined and non null\n        //   - or reactive power generation is defined and non null\n        //   - or active limits are both defined (min and max), one is non null and there are not equal\n        //   - or reactive limits are both defined (min and max), one is non null and there are not equal\n        return isRegulatingVoltage()\n                || (!Float.isNaN(activePowerGeneration) && activePowerGeneration != 0)\n                || (!Float.isNaN(reactivePowerGeneration) && reactivePowerGeneration != 0)\n                || (!Float.isNaN(minimumPermissibleActivePowerGeneration)\n                    && !Float.isNaN(maximumPermissibleActivePowerGeneration)\n                    && (minimumPermissibleActivePowerGeneration != 0 || maximumPermissibleActivePowerGeneration != 0)\n                    && minimumPermissibleActivePowerGeneration != maximumPermissibleActivePowerGeneration)\n                || (!Float.isNaN(minimumPermissibleReactivePowerGeneration)\n                    && !Float.isNaN(maximumPermissibleReactivePowerGeneration)\n                    && (minimumPermissibleReactivePowerGeneration != 0 || maximumPermissibleReactivePowerGeneration != 0)\n                    && minimumPermissibleReactivePowerGeneration != maximumPermissibleReactivePowerGeneration);\n    }", "signature": "boolean isGenerator()", "full_signature": "public boolean isGenerator()", "class_method_signature": "UcteNode.isGenerator()", "testcase": false, "constructor": false, "invocations": ["isRegulatingVoltage", "isNaN", "isNaN", "isNaN", "isNaN", "isNaN", "isNaN"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}