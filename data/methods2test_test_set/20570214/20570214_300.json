{"test_class": {"identifier": "Ed25519SignTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/Ed25519SignTest.java"}, "test_case": {"identifier": "testSigningOneKeyWithMultipleMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSigningOneKeyWithMultipleMessages() throws Exception {\n    Ed25519Sign.KeyPair keyPair = Ed25519Sign.KeyPair.newKeyPair();\n    Ed25519Sign signer = new Ed25519Sign(keyPair.getPrivateKey());\n    Ed25519Verify verifier = new Ed25519Verify(keyPair.getPublicKey());\n    for (int i = 0; i < 100; i++) {\n      byte[] msg = Random.randBytes(20);\n      byte[] sig = signer.sign(msg);\n      try {\n        verifier.verify(sig, msg);\n      } catch (GeneralSecurityException ex) {\n        fail(\n            String.format(\n                \"\\n\\nMessage: %s\\nSignature: %s\\nPrivateKey: %s\\nPublicKey: %s\\n\",\n                TestUtil.hexEncode(msg),\n                TestUtil.hexEncode(sig),\n                TestUtil.hexEncode(keyPair.getPrivateKey()),\n                TestUtil.hexEncode(keyPair.getPublicKey())));\n      }\n    }\n  }", "signature": "void testSigningOneKeyWithMultipleMessages()", "full_signature": "@Test public void testSigningOneKeyWithMultipleMessages()", "class_method_signature": "Ed25519SignTest.testSigningOneKeyWithMultipleMessages()", "testcase": true, "constructor": false, "invocations": ["newKeyPair", "getPrivateKey", "getPublicKey", "randBytes", "sign", "verify", "fail", "format", "hexEncode", "hexEncode", "hexEncode", "getPrivateKey", "hexEncode", "getPublicKey"]}, "focal_class": {"identifier": "Ed25519Sign", "superclass": "", "interfaces": "implements PublicKeySign", "fields": [{"original_string": "public static final int SECRET_KEY_LEN = Field25519.FIELD_LEN;", "modifier": "public static final", "type": "int", "declarator": "SECRET_KEY_LEN = Field25519.FIELD_LEN", "var_name": "SECRET_KEY_LEN"}, {"original_string": "private final byte[] hashedPrivateKey;", "modifier": "private final", "type": "byte[]", "declarator": "hashedPrivateKey", "var_name": "hashedPrivateKey"}, {"original_string": "private final byte[] publicKey;", "modifier": "private final", "type": "byte[]", "declarator": "publicKey", "var_name": "publicKey"}], "methods": [{"identifier": "Ed25519Sign", "parameters": "(final byte[] privateKey)", "modifiers": "public", "return": "", "signature": " Ed25519Sign(final byte[] privateKey)", "full_signature": "public  Ed25519Sign(final byte[] privateKey)", "class_method_signature": "Ed25519Sign.Ed25519Sign(final byte[] privateKey)", "testcase": false, "constructor": true}, {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "Ed25519Sign.sign(final byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Ed25519Sign.java"}, "focal_method": {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] sign(final byte[] data) throws GeneralSecurityException {\n    return Ed25519.sign(data, publicKey, hashedPrivateKey);\n  }", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "Ed25519Sign.sign(final byte[] data)", "testcase": false, "constructor": false, "invocations": ["sign"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}