{"test_class": {"identifier": "DSpaceServiceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DSpaceServiceManager dsm;", "modifier": "", "type": "DSpaceServiceManager", "declarator": "dsm", "var_name": "dsm"}, {"original_string": "DSpaceConfigurationService configurationService;", "modifier": "", "type": "DSpaceConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}], "file": "dspace-services/src/test/java/org/dspace/servicemanager/DSpaceServiceManagerTest.java"}, "test_case": {"identifier": "testGetServicesByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetServicesByType() {\n        dsm.startup();\n\n        int currentSize = dsm.getServicesByType(ConcreteExample.class).size();\n        assertTrue(currentSize > 0);\n\n        List<ConcreteExample> l = dsm.getServicesByType(ConcreteExample.class);\n        assertNotNull(l);\n        assertEquals(\"azeckoski\", l.get(0).getName());\n        l = null;\n\n        List<SampleAnnotationBean> l2 = dsm.getServicesByType(SampleAnnotationBean.class);\n        assertNotNull(l2);\n        assertTrue(l2.size() >= 1);\n        l2 = null;\n    }", "signature": "void testGetServicesByType()", "full_signature": "@Test public void testGetServicesByType()", "class_method_signature": "DSpaceServiceManagerTest.testGetServicesByType()", "testcase": true, "constructor": false, "invocations": ["startup", "size", "getServicesByType", "assertTrue", "getServicesByType", "assertNotNull", "assertEquals", "getName", "get", "getServicesByType", "assertNotNull", "assertTrue", "size"]}, "focal_class": {"identifier": "DSpaceServiceManager", "superclass": "", "interfaces": "implements ServiceManagerSystem", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(DSpaceServiceManager.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DSpaceServiceManager.class)", "var_name": "log"}, {"original_string": "private final DSpaceConfigurationService configurationService;", "modifier": "private final", "type": "DSpaceConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "protected boolean running = false;", "modifier": "protected", "type": "boolean", "declarator": "running = false", "var_name": "running"}, {"original_string": "private List<ServiceManagerSystem> serviceManagers = Collections.synchronizedList(new ArrayList<ServiceManagerSystem>());", "modifier": "private", "type": "List<ServiceManagerSystem>", "declarator": "serviceManagers = Collections.synchronizedList(new ArrayList<ServiceManagerSystem>())", "var_name": "serviceManagers"}, {"original_string": "private SpringServiceManager primaryServiceManager = null;", "modifier": "private", "type": "SpringServiceManager", "declarator": "primaryServiceManager = null", "var_name": "primaryServiceManager"}, {"original_string": "private List<Activator> activators = Collections.synchronizedList(new ArrayList<Activator>());", "modifier": "private", "type": "List<Activator>", "declarator": "activators = Collections.synchronizedList(new ArrayList<Activator>())", "var_name": "activators"}, {"original_string": "protected boolean developing = false;", "modifier": "protected", "type": "boolean", "declarator": "developing = false", "var_name": "developing"}, {"original_string": "protected boolean testing = false;", "modifier": "protected", "type": "boolean", "declarator": "testing = false", "var_name": "testing"}, {"original_string": "protected String[] springXmlConfigFiles = null;", "modifier": "protected", "type": "String[]", "declarator": "springXmlConfigFiles = null", "var_name": "springXmlConfigFiles"}], "methods": [{"identifier": "isRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public boolean isRunning()", "class_method_signature": "DSpaceServiceManager.isRunning()", "testcase": false, "constructor": false}, {"identifier": "checkRunning", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkRunning()", "full_signature": "private void checkRunning()", "class_method_signature": "DSpaceServiceManager.checkRunning()", "testcase": false, "constructor": false}, {"identifier": "DSpaceServiceManager", "parameters": "(DSpaceConfigurationService configurationService)", "modifiers": "public", "return": "", "signature": " DSpaceServiceManager(DSpaceConfigurationService configurationService)", "full_signature": "public  DSpaceServiceManager(DSpaceConfigurationService configurationService)", "class_method_signature": "DSpaceServiceManager.DSpaceServiceManager(DSpaceConfigurationService configurationService)", "testcase": false, "constructor": true}, {"identifier": "DSpaceServiceManager", "parameters": "(DSpaceConfigurationService configurationService, String... springXmlConfigFiles)", "modifiers": "protected", "return": "", "signature": " DSpaceServiceManager(DSpaceConfigurationService configurationService, String... springXmlConfigFiles)", "full_signature": "protected  DSpaceServiceManager(DSpaceConfigurationService configurationService, String... springXmlConfigFiles)", "class_method_signature": "DSpaceServiceManager.DSpaceServiceManager(DSpaceConfigurationService configurationService, String... springXmlConfigFiles)", "testcase": false, "constructor": true}, {"identifier": "registerActivators", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerActivators()", "full_signature": "private void registerActivators()", "class_method_signature": "DSpaceServiceManager.registerActivators()", "testcase": false, "constructor": false}, {"identifier": "unregisterActivators", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unregisterActivators()", "full_signature": "private void unregisterActivators()", "class_method_signature": "DSpaceServiceManager.unregisterActivators()", "testcase": false, "constructor": false}, {"identifier": "notifyServiceManagerReady", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void notifyServiceManagerReady()", "full_signature": "public void notifyServiceManagerReady()", "class_method_signature": "DSpaceServiceManager.notifyServiceManagerReady()", "testcase": false, "constructor": false}, {"identifier": "checkNotifyServiceChange", "parameters": "(List<Class<?>> implementedTypes,\n            ServiceChangeListener serviceChangeListener)", "modifiers": "private", "return": "boolean", "signature": "boolean checkNotifyServiceChange(List<Class<?>> implementedTypes,\n            ServiceChangeListener serviceChangeListener)", "full_signature": "private boolean checkNotifyServiceChange(List<Class<?>> implementedTypes,\n            ServiceChangeListener serviceChangeListener)", "class_method_signature": "DSpaceServiceManager.checkNotifyServiceChange(List<Class<?>> implementedTypes,\n            ServiceChangeListener serviceChangeListener)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "DSpaceServiceManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startup()", "full_signature": "@Override public void startup()", "class_method_signature": "DSpaceServiceManager.startup()", "testcase": false, "constructor": false}, {"identifier": "registerService", "parameters": "(String name, Object service)", "modifiers": "public", "return": "void", "signature": "void registerService(String name, Object service)", "full_signature": "public void registerService(String name, Object service)", "class_method_signature": "DSpaceServiceManager.registerService(String name, Object service)", "testcase": false, "constructor": false}, {"identifier": "registerServiceNoAutowire", "parameters": "(String name, Object service)", "modifiers": "@Override public", "return": "void", "signature": "void registerServiceNoAutowire(String name, Object service)", "full_signature": "@Override public void registerServiceNoAutowire(String name, Object service)", "class_method_signature": "DSpaceServiceManager.registerServiceNoAutowire(String name, Object service)", "testcase": false, "constructor": false}, {"identifier": "registerServiceClass", "parameters": "(String name, Class<T> type)", "modifiers": "public", "return": "T", "signature": "T registerServiceClass(String name, Class<T> type)", "full_signature": "public T registerServiceClass(String name, Class<T> type)", "class_method_signature": "DSpaceServiceManager.registerServiceClass(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "unregisterService", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void unregisterService(String name)", "full_signature": "public void unregisterService(String name)", "class_method_signature": "DSpaceServiceManager.unregisterService(String name)", "testcase": false, "constructor": false}, {"identifier": "getServiceByName", "parameters": "(String name, Class<T> type)", "modifiers": "public", "return": "T", "signature": "T getServiceByName(String name, Class<T> type)", "full_signature": "public T getServiceByName(String name, Class<T> type)", "class_method_signature": "DSpaceServiceManager.getServiceByName(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getServicesByType", "parameters": "(Class<T> type)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getServicesByType(Class<T> type)", "full_signature": "public List<T> getServicesByType(Class<T> type)", "class_method_signature": "DSpaceServiceManager.getServicesByType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getServicesNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getServicesNames()", "full_signature": "public List<String> getServicesNames()", "class_method_signature": "DSpaceServiceManager.getServicesNames()", "testcase": false, "constructor": false}, {"identifier": "isServiceExists", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean isServiceExists(String name)", "full_signature": "public boolean isServiceExists(String name)", "class_method_signature": "DSpaceServiceManager.isServiceExists(String name)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getServices()", "full_signature": "public Map<String, Object> getServices()", "class_method_signature": "DSpaceServiceManager.getServices()", "testcase": false, "constructor": false}, {"identifier": "pushConfig", "parameters": "(Map<String, Object> properties)", "modifiers": "public", "return": "void", "signature": "void pushConfig(Map<String, Object> properties)", "full_signature": "public void pushConfig(Map<String, Object> properties)", "class_method_signature": "DSpaceServiceManager.pushConfig(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "configureService", "parameters": "(String serviceName, Object service, ConfigurationService config)", "modifiers": "public static", "return": "void", "signature": "void configureService(String serviceName, Object service, ConfigurationService config)", "full_signature": "public static void configureService(String serviceName, Object service, ConfigurationService config)", "class_method_signature": "DSpaceServiceManager.configureService(String serviceName, Object service, ConfigurationService config)", "testcase": false, "constructor": false}, {"identifier": "initService", "parameters": "(Object service)", "modifiers": "public static", "return": "void", "signature": "void initService(Object service)", "full_signature": "public static void initService(Object service)", "class_method_signature": "DSpaceServiceManager.initService(Object service)", "testcase": false, "constructor": false}, {"identifier": "shutdownService", "parameters": "(Object service)", "modifiers": "public static", "return": "void", "signature": "void shutdownService(Object service)", "full_signature": "public static void shutdownService(Object service)", "class_method_signature": "DSpaceServiceManager.shutdownService(Object service)", "testcase": false, "constructor": false}], "file": "dspace-services/src/main/java/org/dspace/servicemanager/DSpaceServiceManager.java"}, "focal_method": {"identifier": "getServicesByType", "parameters": "(Class<T> type)", "modifiers": "public", "return": "List<T>", "body": "public <T> List<T> getServicesByType(Class<T> type) {\n        checkRunning();\n        if (type == null) {\n            throw new IllegalArgumentException(\"type cannot be null\");\n        }\n        HashSet<T> set = new HashSet<T>();\n        for (ServiceManagerSystem sms : serviceManagers) {\n            try {\n                set.addAll( sms.getServicesByType(type) );\n            } catch (Exception e) {\n                // keep going\n            }\n        }\n        // put the set into a list for easier access and sort it\n        List<T> services = new ArrayList<T>(set);\n        Collections.sort(services, new ServiceManagerUtils.ServiceComparator());\n        return services;\n    }", "signature": "List<T> getServicesByType(Class<T> type)", "full_signature": "public List<T> getServicesByType(Class<T> type)", "class_method_signature": "DSpaceServiceManager.getServicesByType(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["checkRunning", "addAll", "getServicesByType", "sort"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}