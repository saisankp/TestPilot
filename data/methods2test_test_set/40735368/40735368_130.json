{"test_class": {"identifier": "UtilitiesTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "final private static double DELTA = 1E-6;", "modifier": "final private static", "type": "double", "declarator": "DELTA = 1E-6", "var_name": "DELTA"}], "file": "modules/plugin/coverage-multidim/coverage-api/src/test/java/org/geotools/coverage/io/util/UtilitiesTest.java"}, "test_case": {"identifier": "testGetEnvelope", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEnvelope() throws FactoryException, TransformException {\n\n        // Setup an envelope in WGS84\n        GeneralEnvelope envelope = new GeneralEnvelope(DefaultGeographicCRS.WGS84);\n        envelope.setEnvelope(0, 0, 10, 10);\n        \n        GeneralEnvelope wgs84 = new GeneralEnvelope(Utilities.getEnvelopeAsWGS84(envelope, true));\n        GeneralEnvelope wgs84_2 = new GeneralEnvelope(Utilities.getEnvelopeAsWGS84(envelope, false));\n        \n        // Ensure the 2 envelope contain the initial one\n        assertFalse(wgs84.isEmpty());\n        assertTrue(wgs84.contains(envelope, true));\n        assertFalse(wgs84_2.isEmpty());\n        assertTrue(wgs84_2.contains(envelope, true));\n        \n        // Setup an envelope in EPSG:3857\n        envelope = new GeneralEnvelope(CRS.decode(\"EPSG:3857\"));\n        envelope.setEnvelope(0, 0, 10, 10);\n        \n        wgs84 = new GeneralEnvelope(Utilities.getEnvelopeAsWGS84(envelope, true));\n        wgs84_2 = new GeneralEnvelope(Utilities.getEnvelopeAsWGS84(envelope, false));\n        // Ensure the new envelopes are not empty\n        assertFalse(wgs84.isEmpty());\n        assertFalse(wgs84_2.isEmpty());\n    }", "signature": "void testGetEnvelope()", "full_signature": "@Test public void testGetEnvelope()", "class_method_signature": "UtilitiesTest.testGetEnvelope()", "testcase": true, "constructor": false, "invocations": ["setEnvelope", "getEnvelopeAsWGS84", "getEnvelopeAsWGS84", "assertFalse", "isEmpty", "assertTrue", "contains", "assertFalse", "isEmpty", "assertTrue", "contains", "decode", "setEnvelope", "getEnvelopeAsWGS84", "getEnvelopeAsWGS84", "assertFalse", "isEmpty", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "Utilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(Utilities.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(Utilities.class.toString())", "var_name": "LOGGER"}, {"original_string": "private final static OSType OSTYPE = OSInfo.getOSType();", "modifier": "private final static", "type": "OSType", "declarator": "OSTYPE = OSInfo.getOSType()", "var_name": "OSTYPE"}, {"original_string": "private final static MathTransformFactory mtFactory = new DefaultMathTransformFactory();", "modifier": "private final static", "type": "MathTransformFactory", "declarator": "mtFactory = new DefaultMathTransformFactory()", "var_name": "mtFactory"}], "methods": [{"identifier": "getIdentifiers", "parameters": "(final String nameIdentifier)", "modifiers": "public static", "return": "ReferenceIdentifier[]", "signature": "ReferenceIdentifier[] getIdentifiers(final String nameIdentifier)", "full_signature": "public static ReferenceIdentifier[] getIdentifiers(final String nameIdentifier)", "class_method_signature": "Utilities.getIdentifiers(final String nameIdentifier)", "testcase": false, "constructor": false}, {"identifier": "Utilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utilities()", "full_signature": "private  Utilities()", "class_method_signature": "Utilities.Utilities()", "testcase": false, "constructor": true}, {"identifier": "getDefaultGeodeticDatum", "parameters": "(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "modifiers": "public static", "return": "DefaultGeodeticDatum", "signature": "DefaultGeodeticDatum getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "full_signature": "public static DefaultGeodeticDatum getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "class_method_signature": "Utilities.getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "testcase": false, "constructor": false}, {"identifier": "getFileFromCustomInput", "parameters": "(Object input)", "modifiers": "public static", "return": "File", "signature": "File getFileFromCustomInput(Object input)", "full_signature": "public static File getFileFromCustomInput(Object input)", "class_method_signature": "Utilities.getFileFromCustomInput(Object input)", "testcase": false, "constructor": false}, {"identifier": "getMercator2SPProjectedCRS", "parameters": "(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "full_signature": "@SuppressWarnings(\"deprecation\") public static CoordinateReferenceSystem getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "class_method_signature": "Utilities.getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "testcase": false, "constructor": false}, {"identifier": "getBaseCRS", "parameters": "(final double equatorialRadius,\n            final double inverseFlattening)", "modifiers": "public static", "return": "GeographicCRS", "signature": "GeographicCRS getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "full_signature": "public static GeographicCRS getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "class_method_signature": "Utilities.getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(NamedNodeMap attributes, String attributeName)", "modifiers": "public static", "return": "String", "signature": "String getAttributeValue(NamedNodeMap attributes, String attributeName)", "full_signature": "public static String getAttributeValue(NamedNodeMap attributes, String attributeName)", "class_method_signature": "Utilities.getAttributeValue(NamedNodeMap attributes, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "parseUnit", "parameters": "(final String uom)", "modifiers": "public static", "return": "Unit<? extends Quantity>", "signature": "Unit<? extends Quantity> parseUnit(final String uom)", "full_signature": "public static Unit<? extends Quantity> parseUnit(final String uom)", "class_method_signature": "Utilities.parseUnit(final String uom)", "testcase": false, "constructor": false}, {"identifier": "getEnvelopeAsWGS84", "parameters": "(final Envelope envelope, boolean get2D)", "modifiers": "public static", "return": "Envelope", "signature": "Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "full_signature": "public static Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "class_method_signature": "Utilities.getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "testcase": false, "constructor": false}, {"identifier": "getRequestedEnvelope2D", "parameters": "(GeneralEnvelope requestedEnvelope)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "full_signature": "public static GeneralEnvelope getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "class_method_signature": "Utilities.getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "testcase": false, "constructor": false}, {"identifier": "getCropRegion", "parameters": "(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "modifiers": "public static", "return": "Rectangle", "signature": "Rectangle getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "full_signature": "public static Rectangle getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "class_method_signature": "Utilities.getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "testcase": false, "constructor": false}, {"identifier": "getIntersection", "parameters": "(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "full_signature": "public static GeneralEnvelope getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "class_method_signature": "Utilities.getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridToWorld", "parameters": "(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "modifiers": "public static", "return": "MathTransform", "signature": "MathTransform getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "full_signature": "public static MathTransform getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "class_method_signature": "Utilities.getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "testcase": false, "constructor": false}, {"identifier": "evaluateRequestedParams", "parameters": "(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "full_signature": "public static GeneralEnvelope evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "class_method_signature": "Utilities.evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "createCoverageFromImage", "parameters": "(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "full_signature": "public static GridCoverage createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "class_method_signature": "Utilities.createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "testcase": false, "constructor": false}, {"identifier": "setDecimationParameters", "parameters": "(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "modifiers": "public static", "return": "void", "signature": "void setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "full_signature": "public static void setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "class_method_signature": "Utilities.setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "testcase": false, "constructor": false}, {"identifier": "buildCoverageName", "parameters": "(URL input)", "modifiers": "public static", "return": "NameImpl", "signature": "NameImpl buildCoverageName(URL input)", "full_signature": "public static NameImpl buildCoverageName(URL input)", "class_method_signature": "Utilities.buildCoverageName(URL input)", "testcase": false, "constructor": false}, {"identifier": "setReadParameters", "parameters": "(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "modifiers": "public static", "return": "void", "signature": "void setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "full_signature": "public static void setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "class_method_signature": "Utilities.setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "testcase": false, "constructor": false}, {"identifier": "createCoverage", "parameters": "(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "full_signature": "public static GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "class_method_signature": "Utilities.createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "readImage", "parameters": "(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "modifiers": "public static", "return": "PlanarImage", "signature": "PlanarImage readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "full_signature": "public static PlanarImage readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "class_method_signature": "Utilities.readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "full_signature": "public static GridCoverage compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "class_method_signature": "Utilities.compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "testcase": false, "constructor": false}, {"identifier": "ensureValidString", "parameters": "(final String... strings)", "modifiers": "public final static", "return": "boolean", "signature": "boolean ensureValidString(final String... strings)", "full_signature": "public final static boolean ensureValidString(final String... strings)", "class_method_signature": "Utilities.ensureValidString(final String... strings)", "testcase": false, "constructor": false}, {"identifier": "buildIso8601Time", "parameters": "(String date, String time)", "modifiers": "public static", "return": "String", "signature": "String buildIso8601Time(String date, String time)", "full_signature": "public static String buildIso8601Time(String date, String time)", "class_method_signature": "Utilities.buildIso8601Time(String date, String time)", "testcase": false, "constructor": false}, {"identifier": "checkFileReadable", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkFileReadable(final File file)", "full_signature": "public static boolean checkFileReadable(final File file)", "class_method_signature": "Utilities.checkFileReadable(final File file)", "testcase": false, "constructor": false}, {"identifier": "getFileInfo", "parameters": "(final File file)", "modifiers": "public static", "return": "String", "signature": "String getFileInfo(final File file)", "full_signature": "public static String getFileInfo(final File file)", "class_method_signature": "Utilities.getFileInfo(final File file)", "testcase": false, "constructor": false}, {"identifier": "loadPropertiesFromURL", "parameters": "(URL propsURL)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadPropertiesFromURL(URL propsURL)", "full_signature": "public static Properties loadPropertiesFromURL(URL propsURL)", "class_method_signature": "Utilities.loadPropertiesFromURL(URL propsURL)", "testcase": false, "constructor": false}], "file": "modules/plugin/coverage-multidim/coverage-api/src/main/java/org/geotools/coverage/io/util/Utilities.java"}, "focal_method": {"identifier": "getEnvelopeAsWGS84", "parameters": "(final Envelope envelope, boolean get2D)", "modifiers": "public static", "return": "Envelope", "body": "public static Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)\n            throws FactoryException, TransformException {\n        if (envelope == null)\n            throw new IllegalArgumentException(\"Specified envelope is null\");\n        Envelope requestedWGS84;\n        final CoordinateReferenceSystem crs = envelope.getCoordinateReferenceSystem();\n\n        // do we need to transform the requested envelope?\n        if (!CRS.equalsIgnoreMetadata(crs, DefaultGeographicCRS.WGS84)) {\n            GeneralEnvelope env = CRS.transform(envelope, DefaultGeographicCRS.WGS84);\n            if (get2D) {\n                requestedWGS84 = new Envelope2D(env);\n                ((Envelope2D) requestedWGS84)\n                        .setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);\n            } else {\n                requestedWGS84 = env;\n                ((GeneralEnvelope) requestedWGS84)\n                        .setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);\n            }\n            return requestedWGS84;\n\n        } else {\n            if (get2D)\n                return new Envelope2D(envelope);\n            else\n                return new GeneralEnvelope(envelope);\n        }\n    }", "signature": "Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "full_signature": "public static Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "class_method_signature": "Utilities.getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "testcase": false, "constructor": false, "invocations": ["getCoordinateReferenceSystem", "equalsIgnoreMetadata", "transform", "setCoordinateReferenceSystem", "setCoordinateReferenceSystem"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}