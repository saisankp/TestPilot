{"test_class": {"identifier": "SendEnvelopeFailureActionTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IMessageBusHandler messageBusHandlerMock;", "modifier": "private", "type": "IMessageBusHandler", "declarator": "messageBusHandlerMock", "var_name": "messageBusHandlerMock"}, {"original_string": "private IAction<IObject> backupActionMock;", "modifier": "private", "type": "IAction<IObject>", "declarator": "backupActionMock", "var_name": "backupActionMock"}, {"original_string": "private Object targetChainId = new Object();", "modifier": "private", "type": "Object", "declarator": "targetChainId = new Object()", "var_name": "targetChainId"}, {"original_string": "private IFieldName messageFN;", "modifier": "private", "type": "IFieldName", "declarator": "messageFN", "var_name": "messageFN"}, {"original_string": "private IObject messageMock = mock(IObject.class);", "modifier": "private", "type": "IObject", "declarator": "messageMock = mock(IObject.class)", "var_name": "messageMock"}], "file": "CoreFeatures/Checkpoint/FailureAction/src/test/java/info/smart_tools/smartactors/checkpoint/failure_action/SendEnvelopeFailureActionTest.java"}, "test_case": {"identifier": "Should_sendMessageToSpecifiedChain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_sendMessageToSpecifiedChain()\n            throws Exception {\n        IAction<IObject> action = new SendEnvelopeFailureAction(targetChainId, messageFN, backupActionMock);\n\n        ArgumentCaptor<IObject> envelopeCaptor = ArgumentCaptor.forClass(IObject.class);\n\n        action.execute(messageMock);\n\n        verify(messageBusHandlerMock).handle(envelopeCaptor.capture(), same(targetChainId));\n\n        assertSame(messageMock, envelopeCaptor.getValue().getValue(messageFN));\n    }", "signature": "void Should_sendMessageToSpecifiedChain()", "full_signature": "@Test public void Should_sendMessageToSpecifiedChain()", "class_method_signature": "SendEnvelopeFailureActionTest.Should_sendMessageToSpecifiedChain()", "testcase": true, "constructor": false, "invocations": ["forClass", "execute", "handle", "verify", "capture", "same", "assertSame", "getValue", "getValue"]}, "focal_class": {"identifier": "SendEnvelopeFailureAction", "superclass": "", "interfaces": "implements IAction<IObject>", "fields": [{"original_string": "private final Object targetChainId;", "modifier": "private final", "type": "Object", "declarator": "targetChainId", "var_name": "targetChainId"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IAction<IObject> backupAction;", "modifier": "private final", "type": "IAction<IObject>", "declarator": "backupAction", "var_name": "backupAction"}], "methods": [{"identifier": "SendEnvelopeFailureAction", "parameters": "(final Object targetChainId, final IFieldName messageFieldName, final IAction<IObject> backupAction)", "modifiers": "public", "return": "", "signature": " SendEnvelopeFailureAction(final Object targetChainId, final IFieldName messageFieldName, final IAction<IObject> backupAction)", "full_signature": "public  SendEnvelopeFailureAction(final Object targetChainId, final IFieldName messageFieldName, final IAction<IObject> backupAction)", "class_method_signature": "SendEnvelopeFailureAction.SendEnvelopeFailureAction(final Object targetChainId, final IFieldName messageFieldName, final IAction<IObject> backupAction)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final IObject actingObject)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final IObject actingObject)", "full_signature": "@Override public void execute(final IObject actingObject)", "class_method_signature": "SendEnvelopeFailureAction.execute(final IObject actingObject)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Checkpoint/FailureAction/src/main/java/info/smart_tools/smartactors/checkpoint/failure_action/SendEnvelopeFailureAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(final IObject actingObject)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final IObject actingObject) throws ActionExecuteException, InvalidArgumentException {\n        try {\n            IObject envelope = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            envelope.setValue(messageFieldName, actingObject);\n            MessageBus.send(envelope, targetChainId);\n        } catch (ResolutionException | ChangeValueException | InvalidArgumentException | SendingMessageException e) {\n            try {\n                backupAction.execute(actingObject);\n            } catch (Exception e1) {\n                e.addSuppressed(e1);\n            }\n\n            throw new ActionExecuteException(\"Error occurred sending lost message.\", e);\n        }\n    }", "signature": "void execute(final IObject actingObject)", "full_signature": "@Override public void execute(final IObject actingObject)", "class_method_signature": "SendEnvelopeFailureAction.execute(final IObject actingObject)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "setValue", "send", "execute", "addSuppressed"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}