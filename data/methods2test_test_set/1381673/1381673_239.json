{"test_class": {"identifier": "MapBackedDMNContextTest", "superclass": "extends BaseDMNContextTest", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/internal/utils/MapBackedDMNContextTest.java"}, "test_case": {"identifier": "testContextWithEntriesAndMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContextWithEntriesAndMetadata() {\n        MapBackedDMNContext ctx1 = MapBackedDMNContext.of(new HashMap<>(DEFAULT_ENTRIES), new HashMap<>(DEFAULT_METADATA));\n        testCloneAndAlter(ctx1, DEFAULT_ENTRIES, DEFAULT_METADATA);\n\n        MapBackedDMNContext ctx2 = MapBackedDMNContext.of(new HashMap<>(DEFAULT_ENTRIES), new HashMap<>(DEFAULT_METADATA));\n        testPushAndPopScope(ctx2, DEFAULT_ENTRIES, DEFAULT_METADATA);\n    }", "signature": "void testContextWithEntriesAndMetadata()", "full_signature": "@Test public void testContextWithEntriesAndMetadata()", "class_method_signature": "MapBackedDMNContextTest.testContextWithEntriesAndMetadata()", "testcase": true, "constructor": false, "invocations": ["of", "testCloneAndAlter", "of", "testPushAndPopScope"]}, "focal_class": {"identifier": "MapBackedDMNContext", "superclass": "", "interfaces": "implements DMNContext", "fields": [{"original_string": "private Deque<ScopeReference> stack = new LinkedList<>();", "modifier": "private", "type": "Deque<ScopeReference>", "declarator": "stack = new LinkedList<>()", "var_name": "stack"}, {"original_string": "private Map<String, Object> ctx;", "modifier": "private", "type": "Map<String, Object>", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private DMNMetadata metadata;", "modifier": "private", "type": "DMNMetadata", "declarator": "metadata", "var_name": "metadata"}], "methods": [{"identifier": "MapBackedDMNContext", "parameters": "()", "modifiers": "private", "return": "", "signature": " MapBackedDMNContext()", "full_signature": "private  MapBackedDMNContext()", "class_method_signature": "MapBackedDMNContext.MapBackedDMNContext()", "testcase": false, "constructor": true}, {"identifier": "MapBackedDMNContext", "parameters": "(Map<String, Object> ctx)", "modifiers": "private", "return": "", "signature": " MapBackedDMNContext(Map<String, Object> ctx)", "full_signature": "private  MapBackedDMNContext(Map<String, Object> ctx)", "class_method_signature": "MapBackedDMNContext.MapBackedDMNContext(Map<String, Object> ctx)", "testcase": false, "constructor": true}, {"identifier": "MapBackedDMNContext", "parameters": "(Map<String, Object> ctx, Map<String, Object> metadata)", "modifiers": "private", "return": "", "signature": " MapBackedDMNContext(Map<String, Object> ctx, Map<String, Object> metadata)", "full_signature": "private  MapBackedDMNContext(Map<String, Object> ctx, Map<String, Object> metadata)", "class_method_signature": "MapBackedDMNContext.MapBackedDMNContext(Map<String, Object> ctx, Map<String, Object> metadata)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(Map<String, Object> ctx)", "modifiers": "public static", "return": "MapBackedDMNContext", "signature": "MapBackedDMNContext of(Map<String, Object> ctx)", "full_signature": "public static MapBackedDMNContext of(Map<String, Object> ctx)", "class_method_signature": "MapBackedDMNContext.of(Map<String, Object> ctx)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Map<String, Object> ctx, Map<String, Object> metadata)", "modifiers": "public static", "return": "MapBackedDMNContext", "signature": "MapBackedDMNContext of(Map<String, Object> ctx, Map<String, Object> metadata)", "full_signature": "public static MapBackedDMNContext of(Map<String, Object> ctx, Map<String, Object> metadata)", "class_method_signature": "MapBackedDMNContext.of(Map<String, Object> ctx, Map<String, Object> metadata)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "DMNContext", "signature": "DMNContext clone()", "full_signature": "@Override public DMNContext clone()", "class_method_signature": "MapBackedDMNContext.clone()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String name, Object value)", "modifiers": "@Override public", "return": "Object", "signature": "Object set(String name, Object value)", "full_signature": "@Override public Object set(String name, Object value)", "class_method_signature": "MapBackedDMNContext.set(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(String name)", "full_signature": "@Override public Object get(String name)", "class_method_signature": "MapBackedDMNContext.get(String name)", "testcase": false, "constructor": false}, {"identifier": "getCurrentEntries", "parameters": "()", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getCurrentEntries()", "full_signature": "private Map<String, Object> getCurrentEntries()", "class_method_signature": "MapBackedDMNContext.getCurrentEntries()", "testcase": false, "constructor": false}, {"identifier": "pushScope", "parameters": "(String name, String namespace)", "modifiers": "@Override public", "return": "void", "signature": "void pushScope(String name, String namespace)", "full_signature": "@Override public void pushScope(String name, String namespace)", "class_method_signature": "MapBackedDMNContext.pushScope(String name, String namespace)", "testcase": false, "constructor": false}, {"identifier": "popScope", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void popScope()", "full_signature": "@Override public void popScope()", "class_method_signature": "MapBackedDMNContext.popScope()", "testcase": false, "constructor": false}, {"identifier": "scopeNamespace", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> scopeNamespace()", "full_signature": "@Override public Optional<String> scopeNamespace()", "class_method_signature": "MapBackedDMNContext.scopeNamespace()", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getAll()", "full_signature": "@Override public Map<String, Object> getAll()", "class_method_signature": "MapBackedDMNContext.getAll()", "testcase": false, "constructor": false}, {"identifier": "isDefined", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDefined(String name)", "full_signature": "@Override public boolean isDefined(String name)", "class_method_signature": "MapBackedDMNContext.isDefined(String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "DMNMetadata", "signature": "DMNMetadata getMetadata()", "full_signature": "@Override public DMNMetadata getMetadata()", "class_method_signature": "MapBackedDMNContext.getMetadata()", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/internal/utils/MapBackedDMNContext.java"}, "focal_method": {"identifier": "of", "parameters": "(Map<String, Object> ctx)", "modifiers": "public static", "return": "MapBackedDMNContext", "body": "public static MapBackedDMNContext of(Map<String, Object> ctx) {\n        return new MapBackedDMNContext(ctx);\n    }", "signature": "MapBackedDMNContext of(Map<String, Object> ctx)", "full_signature": "public static MapBackedDMNContext of(Map<String, Object> ctx)", "class_method_signature": "MapBackedDMNContext.of(Map<String, Object> ctx)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}