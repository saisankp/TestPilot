{"test_class": {"identifier": "ExpiringCacheMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(2);", "modifier": "private static final", "type": "long", "declarator": "CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(2)", "var_name": "CACHE_EXPIRY"}, {"original_string": "private static final String RESPONSE_1 = \"ACTION 1\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_1 = \"ACTION 1\"", "var_name": "RESPONSE_1"}, {"original_string": "private static final String RESPONSE_2 = \"ACTION 2\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_2 = \"ACTION 2\"", "var_name": "RESPONSE_2"}, {"original_string": "private static final Supplier<String> CACHE_ACTION = () -> {\n        byte[] array = new byte[8];\n        new Random().nextBytes(array);\n        return new String(array, StandardCharsets.UTF_8);\n    };", "modifier": "private static final", "type": "Supplier<String>", "declarator": "CACHE_ACTION = () -> {\n        byte[] array = new byte[8];\n        new Random().nextBytes(array);\n        return new String(array, StandardCharsets.UTF_8);\n    }", "var_name": "CACHE_ACTION"}, {"original_string": "private static final Supplier<String> PREDICTABLE_CACHE_ACTION_1 = () -> RESPONSE_1;", "modifier": "private static final", "type": "Supplier<String>", "declarator": "PREDICTABLE_CACHE_ACTION_1 = () -> RESPONSE_1", "var_name": "PREDICTABLE_CACHE_ACTION_1"}, {"original_string": "private static final Supplier<String> PREDICTABLE_CACHE_ACTION_2 = () -> RESPONSE_2;", "modifier": "private static final", "type": "Supplier<String>", "declarator": "PREDICTABLE_CACHE_ACTION_2 = () -> RESPONSE_2", "var_name": "PREDICTABLE_CACHE_ACTION_2"}, {"original_string": "private static final String FIRST_TEST_KEY = \"FIRST_TEST_KEY\";", "modifier": "private static final", "type": "String", "declarator": "FIRST_TEST_KEY = \"FIRST_TEST_KEY\"", "var_name": "FIRST_TEST_KEY"}, {"original_string": "private static final String SECOND_TEST_KEY = \"SECOND_TEST_KEY\";", "modifier": "private static final", "type": "String", "declarator": "SECOND_TEST_KEY = \"SECOND_TEST_KEY\"", "var_name": "SECOND_TEST_KEY"}, {"original_string": "private ExpiringCacheMap<String, String> subject;", "modifier": "private", "type": "ExpiringCacheMap<String, String>", "declarator": "subject", "var_name": "subject"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/cache/ExpiringCacheMapTest.java"}, "test_case": {"identifier": "testValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValues() {\n        subject.put(FIRST_TEST_KEY, CACHE_ACTION);\n\n        // use the same key twice\n        String value1 = subject.get(FIRST_TEST_KEY);\n        assertNotNull(value1);\n        String value2 = subject.get(FIRST_TEST_KEY);\n        assertNotNull(value2);\n        assertEquals(value1, value2);\n\n        subject.put(SECOND_TEST_KEY, CACHE_ACTION);\n\n        // use a different key\n        String value3 = subject.get(SECOND_TEST_KEY);\n        assertNotNull(value3);\n        assertNotEquals(value1, value3);\n\n        // get all values\n        final Collection<String> expectedValues = new LinkedList<>();\n        expectedValues.add(value3);\n        expectedValues.add(value1);\n\n        final Collection<String> values = subject.values();\n        assertEquals(expectedValues, values);\n\n        // use another different key\n        String value4 = subject.get(\"KEY_NOT_FOUND\");\n        assertNull(value4);\n    }", "signature": "void testValues()", "full_signature": "@Test public void testValues()", "class_method_signature": "ExpiringCacheMapTest.testValues()", "testcase": true, "constructor": false, "invocations": ["put", "get", "assertNotNull", "get", "assertNotNull", "assertEquals", "put", "get", "assertNotNull", "assertNotEquals", "add", "add", "values", "assertEquals", "get", "assertNull"]}, "focal_class": {"identifier": "ExpiringCacheMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(ExpiringCacheMap.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExpiringCacheMap.class)", "var_name": "logger"}, {"original_string": "private final long expiry;", "modifier": "private final", "type": "long", "declarator": "expiry", "var_name": "expiry"}, {"original_string": "private final ConcurrentMap<K, ExpiringCache<@Nullable V>> items;", "modifier": "private final", "type": "ConcurrentMap<K, ExpiringCache<@Nullable V>>", "declarator": "items", "var_name": "items"}], "methods": [{"identifier": "ExpiringCacheMap", "parameters": "(Duration expiry)", "modifiers": "public", "return": "", "signature": " ExpiringCacheMap(Duration expiry)", "full_signature": "public  ExpiringCacheMap(Duration expiry)", "class_method_signature": "ExpiringCacheMap.ExpiringCacheMap(Duration expiry)", "testcase": false, "constructor": true}, {"identifier": "ExpiringCacheMap", "parameters": "(long expiry)", "modifiers": "public", "return": "", "signature": " ExpiringCacheMap(long expiry)", "full_signature": "public  ExpiringCacheMap(long expiry)", "class_method_signature": "ExpiringCacheMap.ExpiringCacheMap(long expiry)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(K key, Supplier<@Nullable V> action)", "modifiers": "public", "return": "void", "signature": "void put(K key, Supplier<@Nullable V> action)", "full_signature": "public void put(K key, Supplier<@Nullable V> action)", "class_method_signature": "ExpiringCacheMap.put(K key, Supplier<@Nullable V> action)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, ExpiringCache<@Nullable V> item)", "modifiers": "public", "return": "void", "signature": "void put(K key, ExpiringCache<@Nullable V> item)", "full_signature": "public void put(K key, ExpiringCache<@Nullable V> item)", "class_method_signature": "ExpiringCacheMap.put(K key, ExpiringCache<@Nullable V> item)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(K key, ExpiringCache<V> item)", "modifiers": "public", "return": "void", "signature": "void putIfAbsent(K key, ExpiringCache<V> item)", "full_signature": "public void putIfAbsent(K key, ExpiringCache<V> item)", "class_method_signature": "ExpiringCacheMap.putIfAbsent(K key, ExpiringCache<V> item)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsentAndGet", "parameters": "(K key, Supplier<V> action)", "modifiers": "public @Nullable", "return": "V", "signature": "V putIfAbsentAndGet(K key, Supplier<V> action)", "full_signature": "public @Nullable V putIfAbsentAndGet(K key, Supplier<V> action)", "class_method_signature": "ExpiringCacheMap.putIfAbsentAndGet(K key, Supplier<V> action)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsentAndGet", "parameters": "(K key, ExpiringCache<V> item)", "modifiers": "public @Nullable", "return": "V", "signature": "V putIfAbsentAndGet(K key, ExpiringCache<V> item)", "full_signature": "public @Nullable V putIfAbsentAndGet(K key, ExpiringCache<V> item)", "class_method_signature": "ExpiringCacheMap.putIfAbsentAndGet(K key, ExpiringCache<V> item)", "testcase": false, "constructor": false}, {"identifier": "putValue", "parameters": "(K key, @Nullable V value)", "modifiers": "@SuppressWarnings({ \"null\", \"unused\" }) public", "return": "void", "signature": "void putValue(K key, @Nullable V value)", "full_signature": "@SuppressWarnings({ \"null\", \"unused\" }) public void putValue(K key, @Nullable V value)", "class_method_signature": "ExpiringCacheMap.putValue(K key, @Nullable V value)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "public boolean containsKey(K key)", "class_method_signature": "ExpiringCacheMap.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(K key)", "modifiers": "public", "return": "void", "signature": "void remove(K key)", "full_signature": "public void remove(K key)", "class_method_signature": "ExpiringCacheMap.remove(K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ExpiringCacheMap.clear()", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "public synchronized", "return": "Set<K>", "signature": "Set<K> keys()", "full_signature": "public synchronized Set<K> keys()", "class_method_signature": "ExpiringCacheMap.keys()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "@SuppressWarnings({ \"null\", \"unused\" }) public @Nullable", "return": "V", "signature": "V get(K key)", "full_signature": "@SuppressWarnings({ \"null\", \"unused\" }) public @Nullable V get(K key)", "class_method_signature": "ExpiringCacheMap.get(K key)", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<@Nullable V>", "signature": "Collection<@Nullable V> values()", "full_signature": "public synchronized Collection<@Nullable V> values()", "class_method_signature": "ExpiringCacheMap.values()", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(K key)", "modifiers": "@SuppressWarnings({ \"null\", \"unused\" }) public synchronized", "return": "void", "signature": "void invalidate(K key)", "full_signature": "@SuppressWarnings({ \"null\", \"unused\" }) public synchronized void invalidate(K key)", "class_method_signature": "ExpiringCacheMap.invalidate(K key)", "testcase": false, "constructor": false}, {"identifier": "invalidateAll", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void invalidateAll()", "full_signature": "public synchronized void invalidateAll()", "class_method_signature": "ExpiringCacheMap.invalidateAll()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(K key)", "modifiers": "@SuppressWarnings({ \"null\", \"unused\" }) public synchronized @Nullable", "return": "V", "signature": "V refresh(K key)", "full_signature": "@SuppressWarnings({ \"null\", \"unused\" }) public synchronized @Nullable V refresh(K key)", "class_method_signature": "ExpiringCacheMap.refresh(K key)", "testcase": false, "constructor": false}, {"identifier": "refreshAll", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<@Nullable V>", "signature": "Collection<@Nullable V> refreshAll()", "full_signature": "public synchronized Collection<@Nullable V> refreshAll()", "class_method_signature": "ExpiringCacheMap.refreshAll()", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/cache/ExpiringCacheMap.java"}, "focal_method": {"identifier": "values", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<@Nullable V>", "body": "public synchronized Collection<@Nullable V> values() {\n        final Collection<@Nullable V> values = new LinkedList<>();\n        for (final ExpiringCache<@Nullable V> item : items.values()) {\n            values.add(item.getValue());\n        }\n        return values;\n    }", "signature": "Collection<@Nullable V> values()", "full_signature": "public synchronized Collection<@Nullable V> values()", "class_method_signature": "ExpiringCacheMap.values()", "testcase": false, "constructor": false, "invocations": ["values", "add", "getValue"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}