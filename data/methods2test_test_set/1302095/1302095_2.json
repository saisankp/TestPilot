{"test_class": {"identifier": "AbstractMetaDataDiscoveryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}], "file": "webbeans-impl/src/test/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscoveryTest.java"}, "test_case": {"identifier": "isAnonymous", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isAnonymous() throws Exception\n    {\n        final AbstractMetaDataDiscovery mock = new AbstractMetaDataDiscovery()\n        {\n            @Override\n            protected void configure()\n            {\n                // no-op\n            }\n        };\n        final Method mtd = AbstractMetaDataDiscovery.class.getDeclaredMethod(\"isAnonymous\", String.class);\n        mtd.setAccessible(true);\n        assertFalse(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName())));\n        assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + \"$1\")));\n        assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + \"$1$2\")));\n        assertTrue(Boolean.class.cast(mtd.invoke(mock, AbstractMetaDataDiscoveryTest.class.getName() + \"$15$222\")));\n    }", "signature": "void isAnonymous()", "full_signature": "@Test public void isAnonymous()", "class_method_signature": "AbstractMetaDataDiscoveryTest.isAnonymous()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "setAccessible", "assertFalse", "cast", "invoke", "getName", "assertTrue", "cast", "invoke", "getName", "assertTrue", "cast", "invoke", "getName", "assertTrue", "cast", "invoke", "getName"]}, "focal_class": {"identifier": "AbstractMetaDataDiscovery", "superclass": "", "interfaces": "implements BdaScannerService", "fields": [{"original_string": "protected static final Logger logger = WebBeansLoggerFacade.getLogger(AbstractMetaDataDiscovery.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = WebBeansLoggerFacade.getLogger(AbstractMetaDataDiscovery.class)", "var_name": "logger"}, {"original_string": "public static final String META_INF_BEANS_XML = \"META-INF/beans.xml\";", "modifier": "public static final", "type": "String", "declarator": "META_INF_BEANS_XML = \"META-INF/beans.xml\"", "var_name": "META_INF_BEANS_XML"}, {"original_string": "private BeanArchiveService beanArchiveService;", "modifier": "private", "type": "BeanArchiveService", "declarator": "beanArchiveService", "var_name": "beanArchiveService"}, {"original_string": "private final UrlSet beanArchiveLocations = new UrlSet();", "modifier": "private final", "type": "UrlSet", "declarator": "beanArchiveLocations = new UrlSet()", "var_name": "beanArchiveLocations"}, {"original_string": "private final Map<String, URL> beanDeploymentUrls = new HashMap<>();", "modifier": "private final", "type": "Map<String, URL>", "declarator": "beanDeploymentUrls = new HashMap<>()", "var_name": "beanDeploymentUrls"}, {"original_string": "private Map<BeanArchiveService.BeanArchiveInformation, Set<Class<?>>> beanClassesPerBda;", "modifier": "private", "type": "Map<BeanArchiveService.BeanArchiveInformation, Set<Class<?>>>", "declarator": "beanClassesPerBda", "var_name": "beanClassesPerBda"}, {"original_string": "protected String[] scanningExcludes;", "modifier": "protected", "type": "String[]", "declarator": "scanningExcludes", "var_name": "scanningExcludes"}, {"original_string": "protected ClassLoader loader;", "modifier": "protected", "type": "ClassLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "protected CdiArchive archive;", "modifier": "protected", "type": "CdiArchive", "declarator": "archive", "var_name": "archive"}, {"original_string": "protected OwbAnnotationFinder finder;", "modifier": "protected", "type": "OwbAnnotationFinder", "declarator": "finder", "var_name": "finder"}, {"original_string": "protected boolean isBDAScannerEnabled;", "modifier": "protected", "type": "boolean", "declarator": "isBDAScannerEnabled", "var_name": "isBDAScannerEnabled"}, {"original_string": "protected BDABeansXmlScanner bdaBeansXmlScanner;", "modifier": "protected", "type": "BDABeansXmlScanner", "declarator": "bdaBeansXmlScanner", "var_name": "bdaBeansXmlScanner"}, {"original_string": "protected WebBeansContext webBeansContext;", "modifier": "protected", "type": "WebBeansContext", "declarator": "webBeansContext", "var_name": "webBeansContext"}], "methods": [{"identifier": "initFinder", "parameters": "()", "modifiers": "protected", "return": "AnnotationFinder", "signature": "AnnotationFinder initFinder()", "full_signature": "protected AnnotationFinder initFinder()", "class_method_signature": "AbstractMetaDataDiscovery.initFinder()", "testcase": false, "constructor": false}, {"identifier": "getAdditionalArchive", "parameters": "()", "modifiers": "protected", "return": "Archive", "signature": "Archive getAdditionalArchive()", "full_signature": "protected Archive getAdditionalArchive()", "class_method_signature": "AbstractMetaDataDiscovery.getAdditionalArchive()", "testcase": false, "constructor": false}, {"identifier": "getBeanArchiveUrls", "parameters": "()", "modifiers": "protected", "return": "Iterable<URL>", "signature": "Iterable<URL> getBeanArchiveUrls()", "full_signature": "protected Iterable<URL> getBeanArchiveUrls()", "class_method_signature": "AbstractMetaDataDiscovery.getBeanArchiveUrls()", "testcase": false, "constructor": false}, {"identifier": "getBeanDeploymentUrls", "parameters": "()", "modifiers": "public", "return": "Map<String, URL>", "signature": "Map<String, URL> getBeanDeploymentUrls()", "full_signature": "public Map<String, URL> getBeanDeploymentUrls()", "class_method_signature": "AbstractMetaDataDiscovery.getBeanDeploymentUrls()", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void scan()", "full_signature": "@Override public void scan()", "class_method_signature": "AbstractMetaDataDiscovery.scan()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void configure()", "full_signature": "protected abstract void configure()", "class_method_signature": "AbstractMetaDataDiscovery.configure()", "testcase": false, "constructor": false}, {"identifier": "registerBeanArchives", "parameters": "(ClassLoader loader)", "modifiers": "protected", "return": "void", "signature": "void registerBeanArchives(ClassLoader loader)", "full_signature": "protected void registerBeanArchives(ClassLoader loader)", "class_method_signature": "AbstractMetaDataDiscovery.registerBeanArchives(ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "stripProtocol", "parameters": "(String urlPath)", "modifiers": "protected", "return": "String", "signature": "String stripProtocol(String urlPath)", "full_signature": "protected String stripProtocol(String urlPath)", "class_method_signature": "AbstractMetaDataDiscovery.stripProtocol(String urlPath)", "testcase": false, "constructor": false}, {"identifier": "filterExcludedJars", "parameters": "(Set<URL> classPathUrls)", "modifiers": "protected", "return": "void", "signature": "void filterExcludedJars(Set<URL> classPathUrls)", "full_signature": "protected void filterExcludedJars(Set<URL> classPathUrls)", "class_method_signature": "AbstractMetaDataDiscovery.filterExcludedJars(Set<URL> classPathUrls)", "testcase": false, "constructor": false}, {"identifier": "isExcludedJar", "parameters": "(String path)", "modifiers": "protected", "return": "int", "signature": "int isExcludedJar(String path)", "full_signature": "protected int isExcludedJar(String path)", "class_method_signature": "AbstractMetaDataDiscovery.isExcludedJar(String path)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "AbstractMetaDataDiscovery.release()", "testcase": false, "constructor": false}, {"identifier": "addDeploymentUrl", "parameters": "(String beansXml, URL cpUrl)", "modifiers": "protected", "return": "void", "signature": "void addDeploymentUrl(String beansXml, URL cpUrl)", "full_signature": "protected void addDeploymentUrl(String beansXml, URL cpUrl)", "class_method_signature": "AbstractMetaDataDiscovery.addDeploymentUrl(String beansXml, URL cpUrl)", "testcase": false, "constructor": false}, {"identifier": "isBdaUrlEnabled", "parameters": "(URL bdaUrl)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBdaUrlEnabled(URL bdaUrl)", "full_signature": "protected boolean isBdaUrlEnabled(URL bdaUrl)", "class_method_signature": "AbstractMetaDataDiscovery.isBdaUrlEnabled(URL bdaUrl)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Object object)", "modifiers": "@Override public", "return": "void", "signature": "void init(Object object)", "full_signature": "@Override public void init(Object object)", "class_method_signature": "AbstractMetaDataDiscovery.init(Object object)", "testcase": false, "constructor": false}, {"identifier": "initScanningExcludes", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initScanningExcludes()", "full_signature": "public void initScanningExcludes()", "class_method_signature": "AbstractMetaDataDiscovery.initScanningExcludes()", "testcase": false, "constructor": false}, {"identifier": "addWebBeansXmlLocation", "parameters": "(URL beanArchiveUrl)", "modifiers": "protected", "return": "void", "signature": "void addWebBeansXmlLocation(URL beanArchiveUrl)", "full_signature": "protected void addWebBeansXmlLocation(URL beanArchiveUrl)", "class_method_signature": "AbstractMetaDataDiscovery.addWebBeansXmlLocation(URL beanArchiveUrl)", "testcase": false, "constructor": false}, {"identifier": "doAddWebBeansXmlLocation", "parameters": "(URL beanArchiveUrl)", "modifiers": "protected", "return": "void", "signature": "void doAddWebBeansXmlLocation(URL beanArchiveUrl)", "full_signature": "protected void doAddWebBeansXmlLocation(URL beanArchiveUrl)", "class_method_signature": "AbstractMetaDataDiscovery.doAddWebBeansXmlLocation(URL beanArchiveUrl)", "testcase": false, "constructor": false}, {"identifier": "getBeanClassesPerBda", "parameters": "()", "modifiers": "public", "return": "Map<BeanArchiveService.BeanArchiveInformation, Set<Class<?>>>", "signature": "Map<BeanArchiveService.BeanArchiveInformation, Set<Class<?>>> getBeanClassesPerBda()", "full_signature": "public Map<BeanArchiveService.BeanArchiveInformation, Set<Class<?>>> getBeanClassesPerBda()", "class_method_signature": "AbstractMetaDataDiscovery.getBeanClassesPerBda()", "testcase": false, "constructor": false}, {"identifier": "isAnonymous", "parameters": "(final String className)", "modifiers": "private", "return": "boolean", "signature": "boolean isAnonymous(final String className)", "full_signature": "private boolean isAnonymous(final String className)", "class_method_signature": "AbstractMetaDataDiscovery.isAnonymous(final String className)", "testcase": false, "constructor": false}, {"identifier": "getBeanClasses", "parameters": "()", "modifiers": "@Override public", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getBeanClasses()", "full_signature": "@Override public Set<Class<?>> getBeanClasses()", "class_method_signature": "AbstractMetaDataDiscovery.getBeanClasses()", "testcase": false, "constructor": false}, {"identifier": "isBeanAnnotatedClass", "parameters": "(AnnotationFinder.ClassInfo classInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBeanAnnotatedClass(AnnotationFinder.ClassInfo classInfo)", "full_signature": "protected boolean isBeanAnnotatedClass(AnnotationFinder.ClassInfo classInfo)", "class_method_signature": "AbstractMetaDataDiscovery.isBeanAnnotatedClass(AnnotationFinder.ClassInfo classInfo)", "testcase": false, "constructor": false}, {"identifier": "isBeanAnnotation", "parameters": "(AnnotationFinder.AnnotationInfo annotationInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBeanAnnotation(AnnotationFinder.AnnotationInfo annotationInfo)", "full_signature": "protected boolean isBeanAnnotation(AnnotationFinder.AnnotationInfo annotationInfo)", "class_method_signature": "AbstractMetaDataDiscovery.isBeanAnnotation(AnnotationFinder.AnnotationInfo annotationInfo)", "testcase": false, "constructor": false}, {"identifier": "getBeanXmls", "parameters": "()", "modifiers": "@Override public", "return": "Set<URL>", "signature": "Set<URL> getBeanXmls()", "full_signature": "@Override public Set<URL> getBeanXmls()", "class_method_signature": "AbstractMetaDataDiscovery.getBeanXmls()", "testcase": false, "constructor": false}, {"identifier": "getBDABeansXmlScanner", "parameters": "()", "modifiers": "@Override public", "return": "BDABeansXmlScanner", "signature": "BDABeansXmlScanner getBDABeansXmlScanner()", "full_signature": "@Override public BDABeansXmlScanner getBDABeansXmlScanner()", "class_method_signature": "AbstractMetaDataDiscovery.getBDABeansXmlScanner()", "testcase": false, "constructor": false}, {"identifier": "isBDABeansXmlScanningEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBDABeansXmlScanningEnabled()", "full_signature": "@Override public boolean isBDABeansXmlScanningEnabled()", "class_method_signature": "AbstractMetaDataDiscovery.isBDABeansXmlScanningEnabled()", "testcase": false, "constructor": false}, {"identifier": "webBeansContext", "parameters": "()", "modifiers": "protected", "return": "WebBeansContext", "signature": "WebBeansContext webBeansContext()", "full_signature": "protected WebBeansContext webBeansContext()", "class_method_signature": "AbstractMetaDataDiscovery.webBeansContext()", "testcase": false, "constructor": false}], "file": "webbeans-impl/src/main/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscovery.java"}, "focal_method": {"identifier": "isAnonymous", "parameters": "(final String className)", "modifiers": "private", "return": "boolean", "body": "private boolean isAnonymous(final String className)\n    {\n        final int start = className.lastIndexOf('$');\n        if (start <= 0)\n        {\n            return false;\n        }\n        try\n        {\n            Integer.parseInt(className.substring(start + 1));\n            return true;\n        }\n        catch (final NumberFormatException nfe)\n        {\n            return false;\n        }\n    }", "signature": "boolean isAnonymous(final String className)", "full_signature": "private boolean isAnonymous(final String className)", "class_method_signature": "AbstractMetaDataDiscovery.isAnonymous(final String className)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "parseInt", "substring"]}, "repository": {"repo_id": 1302095, "url": "https://github.com/apache/openwebbeans", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 45, "size": 23214, "license": "licensed"}}