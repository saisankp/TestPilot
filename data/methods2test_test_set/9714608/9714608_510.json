{"test_class": {"identifier": "MapElementGridSetTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private ArrayList<MapPolyline> reference = null;", "modifier": "private", "type": "ArrayList<MapPolyline>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Rectangle2d bounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "bounds = null", "var_name": "bounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/MapElementGridSetTest.java"}, "test_case": {"identifier": "testGetNearest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetNearest() {\n\t\tgetLogger().info(\"Preparing the benchmark...\"); //$NON-NLS-1$\n\t\tassertNotNull(this.bounds);\n\t\tMapElementGridSet<MapPolyline> test = new MapElementGridSet<>(100, 100, this.bounds);\n        test.addAll(this.reference);\n        assertEquals(this.reference.size(), test.size());\n\n        getLogger().info(\"Run test...\"); //$NON-NLS-1$\n\n    \tRandom rnd = new Random();\n    \tMapPolyline nearestData;\n    \tdouble minDistance, distance, x, y;\n    \tPoint2d p;\n    \tfinal ArrayList<MapPolyline> nearest = new ArrayList<>();\n\n    \tboolean found = false;\n    \tint tries = 5;\n    \tdo {\n    \t\tnearest.clear();\n        \tx = rnd.nextDouble()*this.bounds.getWidth()+this.bounds.getMinX();\n        \ty = rnd.nextDouble()*this.bounds.getHeight()+this.bounds.getMinY();\n        \tp = new Point2d(x,y);\n\n        \tminDistance = Double.MAX_VALUE;\n        \tfor (MapPolyline line : this.reference) {\n        \t\tdistance = line.getDistance(p);\n        \t\tif (distance<minDistance) {\n        \t\t\tminDistance = distance;\n        \t\t}\n        \t}\n        \tfor (MapPolyline line : this.reference) {\n        \t\tdistance = line.getDistance(p);\n        \t\tif (isEpsilonEquals(distance, minDistance)) {\n        \t\t\tnearest.add(line);\n        \t\t}\n        \t}\n\n        \tnearestData = test.getNearest(x, y);\n        \tassertNotNull(nearestData);\n\n        \tfound = false;\n        \tfor (MapPolyline poly : nearest) {\n        \t\tif (poly == nearestData) {\n        \t\t\tfound = true;\n        \t\t\tbreak;\n        \t\t}\n        \t}\n        \t--tries;\n    \t}\n    \twhile (!found && tries > 0);\n    \tassertTrue(found, \"Polyline not found\"); //$NON-NLS-1$\n\t}", "signature": "void testGetNearest()", "full_signature": "@Test public void testGetNearest()", "class_method_signature": "MapElementGridSetTest.testGetNearest()", "testcase": true, "constructor": false, "invocations": ["info", "getLogger", "assertNotNull", "addAll", "assertEquals", "size", "size", "info", "getLogger", "clear", "nextDouble", "getWidth", "getMinX", "nextDouble", "getHeight", "getMinY", "getDistance", "getDistance", "isEpsilonEquals", "add", "getNearest", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "MapElementGridSet", "superclass": "extends AbstractGISGridSet<P>", "interfaces": "implements GISElementSet<P>", "fields": [], "methods": [{"identifier": "MapElementGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "MapElementGridSet.MapElementGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "MapElementGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "MapElementGridSet.MapElementGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "MapElementGridSet.add(P point)", "testcase": false, "constructor": false}, {"identifier": "getNearest", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearest(Point2D<?, ?> position)", "full_signature": "@Override @Pure public final P getNearest(Point2D<?, ?> position)", "class_method_signature": "MapElementGridSet.getNearest(Point2D<?, ?> position)", "testcase": false, "constructor": false}, {"identifier": "getNearest", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearest(double x, double y)", "full_signature": "@Override @Pure public final P getNearest(double x, double y)", "class_method_signature": "MapElementGridSet.getNearest(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestData", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public final", "return": "Pair<P, Double>", "signature": "Pair<P, Double> getNearestData(double x, double y)", "full_signature": "@Override @Pure public final Pair<P, Double> getNearestData(double x, double y)", "class_method_signature": "MapElementGridSet.getNearestData(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestData", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public", "return": "Pair<P, Double>", "signature": "Pair<P, Double> getNearestData(Point2D<?, ?> position)", "full_signature": "@Override @Pure public Pair<P, Double> getNearestData(Point2D<?, ?> position)", "class_method_signature": "MapElementGridSet.getNearestData(Point2D<?, ?> position)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/MapElementGridSet.java"}, "focal_method": {"identifier": "getNearest", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public final", "return": "P", "body": "@Override\n\t@Pure\n\tpublic final P getNearest(Point2D<?, ?> position) {\n\t\tfinal Pair<P, Double> pair = getNearestData(position);\n\t\tif (pair != null) {\n\t\t\treturn pair.getKey();\n\t\t}\n\t\treturn null;\n\t}", "signature": "P getNearest(Point2D<?, ?> position)", "full_signature": "@Override @Pure public final P getNearest(Point2D<?, ?> position)", "class_method_signature": "MapElementGridSet.getNearest(Point2D<?, ?> position)", "testcase": false, "constructor": false, "invocations": ["getNearestData", "getKey"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}