{"test_class": {"identifier": "CPLCUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/devnied/emvnfccard/utils/CPLCUtilsTest.java"}, "test_case": {"identifier": "testEmptyCPLC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEmptyCPLC(){\n\t\tCPLC cplc = CPLCUtils.parse(null);\t\t\n\t\tAssertions.assertThat(cplc).isNull();\n\t}", "signature": "void testEmptyCPLC()", "full_signature": "@Test public void testEmptyCPLC()", "class_method_signature": "CPLCUtilsTest.testEmptyCPLC()", "testcase": true, "constructor": false, "invocations": ["parse", "isNull", "assertThat"]}, "focal_class": {"identifier": "CPLCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CPLCUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CPLCUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final ITag CPLC_TAG = new TagImpl(\"9f7f\", TagValueTypeEnum.BINARY, \"Card Production Life Cycle Data\", \"\");", "modifier": "private static final", "type": "ITag", "declarator": "CPLC_TAG = new TagImpl(\"9f7f\", TagValueTypeEnum.BINARY, \"Card Production Life Cycle Data\", \"\")", "var_name": "CPLC_TAG"}], "methods": [{"identifier": "parse", "parameters": "(byte[] raw)", "modifiers": "public static", "return": "CPLC", "signature": "CPLC parse(byte[] raw)", "full_signature": "public static CPLC parse(byte[] raw)", "class_method_signature": "CPLCUtils.parse(byte[] raw)", "testcase": false, "constructor": false}, {"identifier": "CPLCUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CPLCUtils()", "full_signature": "private  CPLCUtils()", "class_method_signature": "CPLCUtils.CPLCUtils()", "testcase": false, "constructor": true}], "file": "library/src/main/java/com/github/devnied/emvnfccard/utils/CPLCUtils.java"}, "focal_method": {"identifier": "parse", "parameters": "(byte[] raw)", "modifiers": "public static", "return": "CPLC", "body": "public static CPLC parse(byte[] raw) {\n\t\tCPLC ret = null;\n\t\tif (raw != null) {\n\t\t\tbyte[] cplc = null;\n\t\t\t// try to interpret as raw data (not TLV)\n\t\t\tif (raw.length == CPLC.SIZE + 2) {\n\t\t\t\tcplc = raw;\n\t\t\t}\n\t\t\t// or maybe it's prepended with CPLC tag:\n\t\t\telse if (raw.length == CPLC.SIZE + 5) {\n\t\t\t\tcplc = TlvUtil.getValue(raw, CPLC_TAG);\n\t\t\t} else {\n\t\t\t\tLOGGER.error(\"CPLC data not valid\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tret = new CPLC();\n\t\t\tret.parse(cplc,null);\n\t\t}\n\t\treturn ret;\n\t}", "signature": "CPLC parse(byte[] raw)", "full_signature": "public static CPLC parse(byte[] raw)", "class_method_signature": "CPLCUtils.parse(byte[] raw)", "testcase": false, "constructor": false, "invocations": ["getValue", "error", "parse"]}, "repository": {"repo_id": 18467626, "url": "https://github.com/devnied/EMV-NFC-Paycard-Enrollment", "language": "Java", "is_fork": false, "fork_count": 425, "stargazer_count": 934, "size": 4233, "license": "licensed"}}