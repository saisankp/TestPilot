{"test_class": {"identifier": "AetherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SETTINGS_WITH_PROXY =\n            \"<settings xmlns=\\\"http://maven.apache.org/SETTINGS/1.0.0\\\"\\n\" +\n            \"      xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n            \"      xsi:schemaLocation=\\\"http://maven.apache.org/SETTINGS/1.0.0\\n\" +\n            \"                          http://maven.apache.org/xsd/settings-1.0.0.xsd\\\">\" +\n            \"  <proxies>\\n\" +\n            \"    <proxy>\\n\" +\n            \"      <id>MyProxy</id>\\n\" +\n            \"      <active>true</active>\\n\" +\n            \"      <protocol>http</protocol>\\n\" +\n            \"      <host>localhost</host>\\n\" +\n            \"      <port>8888</port>\\n\" +\n            \"    </proxy>\\n\" +\n            \"  </proxies>\" +\n            \"</settings>\\n\";", "modifier": "private final", "type": "String", "declarator": "SETTINGS_WITH_PROXY =\n            \"<settings xmlns=\\\"http://maven.apache.org/SETTINGS/1.0.0\\\"\\n\" +\n            \"      xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n            \"      xsi:schemaLocation=\\\"http://maven.apache.org/SETTINGS/1.0.0\\n\" +\n            \"                          http://maven.apache.org/xsd/settings-1.0.0.xsd\\\">\" +\n            \"  <proxies>\\n\" +\n            \"    <proxy>\\n\" +\n            \"      <id>MyProxy</id>\\n\" +\n            \"      <active>true</active>\\n\" +\n            \"      <protocol>http</protocol>\\n\" +\n            \"      <host>localhost</host>\\n\" +\n            \"      <port>8888</port>\\n\" +\n            \"    </proxy>\\n\" +\n            \"  </proxies>\" +\n            \"</settings>\\n\"", "var_name": "SETTINGS_WITH_PROXY"}], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/test/java/org/appformer/maven/integration/AetherTest.java"}, "test_case": {"identifier": "testForcedOffline", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForcedOffline() {\n        final RemoteRepository central = new RemoteRepository.Builder( \"central\", \"default\", \"http://repo1.maven.org/maven2/\" ).build();\n\n        final MavenProject mavenProject = mock(MavenProject.class);\n        when(mavenProject.getRemoteProjectRepositories()).thenReturn(Collections.singletonList(central));\n\n        final Aether aether = new Aether(mavenProject) {\n            @Override\n            boolean isForcedOffline() {\n                return true;\n            }\n        };\n        assertThat(aether.getRepositories()).doesNotContain(central);\n    }", "signature": "void testForcedOffline()", "full_signature": "@Test public void testForcedOffline()", "class_method_signature": "AetherTest.testForcedOffline()", "testcase": true, "constructor": false, "invocations": ["build", "mock", "thenReturn", "when", "getRemoteProjectRepositories", "singletonList", "doesNotContain", "assertThat", "getRepositories"]}, "focal_class": {"identifier": "Aether", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger( Aether.class );", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( Aether.class )", "var_name": "log"}, {"original_string": "private String localRepoDir;", "modifier": "private", "type": "String", "declarator": "localRepoDir", "var_name": "localRepoDir"}, {"original_string": "private final boolean offline;", "modifier": "private final", "type": "boolean", "declarator": "offline", "var_name": "offline"}, {"original_string": "public static Aether instance;", "modifier": "public static", "type": "Aether", "declarator": "instance", "var_name": "instance"}, {"original_string": "private final RepositorySystem system;", "modifier": "private final", "type": "RepositorySystem", "declarator": "system", "var_name": "system"}, {"original_string": "private RepositorySystemSession session;", "modifier": "private", "type": "RepositorySystemSession", "declarator": "session", "var_name": "session"}, {"original_string": "private final Collection<RemoteRepository> repositories;", "modifier": "private final", "type": "Collection<RemoteRepository>", "declarator": "repositories", "var_name": "repositories"}, {"original_string": "private RemoteRepository localRepository;", "modifier": "private", "type": "RemoteRepository", "declarator": "localRepository", "var_name": "localRepository"}], "methods": [{"identifier": "Aether", "parameters": "( MavenProject mavenProject )", "modifiers": "public", "return": "", "signature": " Aether( MavenProject mavenProject )", "full_signature": "public  Aether( MavenProject mavenProject )", "class_method_signature": "Aether.Aether( MavenProject mavenProject )", "testcase": false, "constructor": true}, {"identifier": "getAether", "parameters": "()", "modifiers": "public static synchronized", "return": "Aether", "signature": "Aether getAether()", "full_signature": "public static synchronized Aether getAether()", "class_method_signature": "Aether.getAether()", "testcase": false, "constructor": false}, {"identifier": "Aether", "parameters": "( Settings settings, MavenProject mavenProject )", "modifiers": "private", "return": "", "signature": " Aether( Settings settings, MavenProject mavenProject )", "full_signature": "private  Aether( Settings settings, MavenProject mavenProject )", "class_method_signature": "Aether.Aether( Settings settings, MavenProject mavenProject )", "testcase": false, "constructor": true}, {"identifier": "initRepositories", "parameters": "( MavenProject mavenProject )", "modifiers": "private", "return": "Collection<RemoteRepository>", "signature": "Collection<RemoteRepository> initRepositories( MavenProject mavenProject )", "full_signature": "private Collection<RemoteRepository> initRepositories( MavenProject mavenProject )", "class_method_signature": "Aether.initRepositories( MavenProject mavenProject )", "testcase": false, "constructor": false}, {"identifier": "isForcedOffline", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isForcedOffline()", "full_signature": " boolean isForcedOffline()", "class_method_signature": "Aether.isForcedOffline()", "testcase": false, "constructor": false}, {"identifier": "newRepositorySystem", "parameters": "()", "modifiers": "private", "return": "RepositorySystem", "signature": "RepositorySystem newRepositorySystem()", "full_signature": "private RepositorySystem newRepositorySystem()", "class_method_signature": "Aether.newRepositorySystem()", "testcase": false, "constructor": false}, {"identifier": "newRepositorySystemSession", "parameters": "( Settings settings, RepositorySystem system )", "modifiers": "private", "return": "RepositorySystemSession", "signature": "RepositorySystemSession newRepositorySystemSession( Settings settings, RepositorySystem system )", "full_signature": "private RepositorySystemSession newRepositorySystemSession( Settings settings, RepositorySystem system )", "class_method_signature": "Aether.newRepositorySystemSession( Settings settings, RepositorySystem system )", "testcase": false, "constructor": false}, {"identifier": "configureProxiesOnSession", "parameters": "( Settings settings, DefaultRepositorySystemSession session )", "modifiers": "private", "return": "void", "signature": "void configureProxiesOnSession( Settings settings, DefaultRepositorySystemSession session )", "full_signature": "private void configureProxiesOnSession( Settings settings, DefaultRepositorySystemSession session )", "class_method_signature": "Aether.configureProxiesOnSession( Settings settings, DefaultRepositorySystemSession session )", "testcase": false, "constructor": false}, {"identifier": "configureHttpHeadersOnSession", "parameters": "( Settings settings, DefaultRepositorySystemSession session )", "modifiers": "private", "return": "void", "signature": "void configureHttpHeadersOnSession( Settings settings, DefaultRepositorySystemSession session )", "full_signature": "private void configureHttpHeadersOnSession( Settings settings, DefaultRepositorySystemSession session )", "class_method_signature": "Aether.configureHttpHeadersOnSession( Settings settings, DefaultRepositorySystemSession session )", "testcase": false, "constructor": false}, {"identifier": "newCentralRepository", "parameters": "()", "modifiers": "", "return": "RemoteRepository", "signature": "RemoteRepository newCentralRepository()", "full_signature": " RemoteRepository newCentralRepository()", "class_method_signature": "Aether.newCentralRepository()", "testcase": false, "constructor": false}, {"identifier": "newLocalRepository", "parameters": "()", "modifiers": "private", "return": "RemoteRepository", "signature": "RemoteRepository newLocalRepository()", "full_signature": "private RemoteRepository newLocalRepository()", "class_method_signature": "Aether.newLocalRepository()", "testcase": false, "constructor": false}, {"identifier": "getSystem", "parameters": "()", "modifiers": "public", "return": "RepositorySystem", "signature": "RepositorySystem getSystem()", "full_signature": "public RepositorySystem getSystem()", "class_method_signature": "Aether.getSystem()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "public", "return": "RepositorySystemSession", "signature": "RepositorySystemSession getSession()", "full_signature": "public RepositorySystemSession getSession()", "class_method_signature": "Aether.getSession()", "testcase": false, "constructor": false}, {"identifier": "getRepositories", "parameters": "()", "modifiers": "public", "return": "Collection<RemoteRepository>", "signature": "Collection<RemoteRepository> getRepositories()", "full_signature": "public Collection<RemoteRepository> getRepositories()", "class_method_signature": "Aether.getRepositories()", "testcase": false, "constructor": false}, {"identifier": "getLocalRepository", "parameters": "()", "modifiers": "public", "return": "RemoteRepository", "signature": "RemoteRepository getLocalRepository()", "full_signature": "public RemoteRepository getLocalRepository()", "class_method_signature": "Aether.getLocalRepository()", "testcase": false, "constructor": false}], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/main/java/org/appformer/maven/integration/Aether.java"}, "focal_method": {"identifier": "getRepositories", "parameters": "()", "modifiers": "public", "return": "Collection<RemoteRepository>", "body": "public Collection<RemoteRepository> getRepositories() {\n        return repositories;\n    }", "signature": "Collection<RemoteRepository> getRepositories()", "full_signature": "public Collection<RemoteRepository> getRepositories()", "class_method_signature": "Aether.getRepositories()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}