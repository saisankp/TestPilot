{"test_class": {"identifier": "SpiderDetectorServiceImplTest", "superclass": "extends AbstractDSpaceTest", "interfaces": "", "fields": [{"original_string": "private static final String NOT_A_BOT_ADDRESS = \"192.168.0.1\";", "modifier": "private static final", "type": "String", "declarator": "NOT_A_BOT_ADDRESS = \"192.168.0.1\"", "var_name": "NOT_A_BOT_ADDRESS"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private SpiderDetectorService spiderDetectorService;", "modifier": "private", "type": "SpiderDetectorService", "declarator": "spiderDetectorService", "var_name": "spiderDetectorService"}], "file": "dspace-api/src/test/java/org/dspace/statistics/util/SpiderDetectorServiceImplTest.java"}, "test_case": {"identifier": "testIsSpiderStringStringStringString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSpiderStringStringStringString()\n    {\n        String candidate;\n\n        // Test IP patterns\n        candidate = \"192.168.2.1\";\n        assertTrue(candidate + \" did not match IP patterns\",\n                spiderDetectorService.isSpider(candidate, null, null, null));\n\n        candidate = NOT_A_BOT_ADDRESS;\n        assertFalse(candidate + \" matched IP patterns\",\n                spiderDetectorService.isSpider(candidate, null, null, null));\n\n        // Test DNS patterns\n        candidate = \"baiduspider-dspace-test.crawl.baidu.com\";\n        assertTrue(candidate + \" did not match DNS patterns\",\n                spiderDetectorService.isSpider(NOT_A_BOT_ADDRESS, null, candidate, null));\n\n        candidate = \"wiki.dspace.org\";\n        assertFalse(candidate + \" matched DNS patterns\",\n                spiderDetectorService.isSpider(NOT_A_BOT_ADDRESS, null, candidate, null));\n\n        // Test agent patterns\n        candidate = \"msnbot is watching you\";\n        assertTrue(\"'\" + candidate + \"' did not match agent patterns\",\n                spiderDetectorService.isSpider(NOT_A_BOT_ADDRESS, null, null, candidate));\n\n        candidate = \"Firefox\";\n        assertFalse(\"'\" + candidate + \"' matched agent patterns\",\n                spiderDetectorService.isSpider(NOT_A_BOT_ADDRESS, null, null, candidate));\n    }", "signature": "void testIsSpiderStringStringStringString()", "full_signature": "@Test public void testIsSpiderStringStringStringString()", "class_method_signature": "SpiderDetectorServiceImplTest.testIsSpiderStringStringStringString()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSpider", "assertFalse", "isSpider", "assertTrue", "isSpider", "assertFalse", "isSpider", "assertTrue", "isSpider", "assertFalse", "isSpider"]}, "focal_class": {"identifier": "SpiderDetectorServiceImpl", "superclass": "", "interfaces": "implements SpiderDetectorService", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SpiderDetectorServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SpiderDetectorServiceImpl.class)", "var_name": "log"}, {"original_string": "private Boolean useProxies;", "modifier": "private", "type": "Boolean", "declarator": "useProxies", "var_name": "useProxies"}, {"original_string": "private Boolean useCaseInsensitiveMatching;", "modifier": "private", "type": "Boolean", "declarator": "useCaseInsensitiveMatching", "var_name": "useCaseInsensitiveMatching"}, {"original_string": "private final List<Pattern> agents\n            = Collections.synchronizedList(new ArrayList<Pattern>());", "modifier": "private final", "type": "List<Pattern>", "declarator": "agents\n            = Collections.synchronizedList(new ArrayList<Pattern>())", "var_name": "agents"}, {"original_string": "private final List<Pattern> domains\n            = Collections.synchronizedList(new ArrayList<Pattern>());", "modifier": "private final", "type": "List<Pattern>", "declarator": "domains\n            = Collections.synchronizedList(new ArrayList<Pattern>())", "var_name": "domains"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private IPTable table = null;", "modifier": "private", "type": "IPTable", "declarator": "table = null", "var_name": "table"}], "methods": [{"identifier": "SpiderDetectorServiceImpl", "parameters": "(ConfigurationService configurationService)", "modifiers": "@Autowired(required = true) public", "return": "", "signature": " SpiderDetectorServiceImpl(ConfigurationService configurationService)", "full_signature": "@Autowired(required = true) public  SpiderDetectorServiceImpl(ConfigurationService configurationService)", "class_method_signature": "SpiderDetectorServiceImpl.SpiderDetectorServiceImpl(ConfigurationService configurationService)", "testcase": false, "constructor": true}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "IPTable", "signature": "IPTable getTable()", "full_signature": "public IPTable getTable()", "class_method_signature": "SpiderDetectorServiceImpl.getTable()", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(String clientIP, String proxyIPs, String hostname, String agent)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "full_signature": "public boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "testcase": false, "constructor": false}, {"identifier": "readPatterns", "parameters": "(File patternFile)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> readPatterns(File patternFile)", "full_signature": "public Set<String> readPatterns(File patternFile)", "class_method_signature": "SpiderDetectorServiceImpl.readPatterns(File patternFile)", "testcase": false, "constructor": false}, {"identifier": "loadPatterns", "parameters": "(String directory, List<Pattern> patternList)", "modifiers": "private", "return": "void", "signature": "void loadPatterns(String directory, List<Pattern> patternList)", "full_signature": "private void loadPatterns(String directory, List<Pattern> patternList)", "class_method_signature": "SpiderDetectorServiceImpl.loadPatterns(String directory, List<Pattern> patternList)", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(HttpServletRequest request)", "full_signature": "public boolean isSpider(HttpServletRequest request)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(String ip)", "full_signature": "public boolean isSpider(String ip)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(String ip)", "testcase": false, "constructor": false}, {"identifier": "loadSpiderIpAddresses", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void loadSpiderIpAddresses()", "full_signature": "public synchronized void loadSpiderIpAddresses()", "class_method_signature": "SpiderDetectorServiceImpl.loadSpiderIpAddresses()", "testcase": false, "constructor": false}, {"identifier": "isUseCaseInsensitiveMatching", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isUseCaseInsensitiveMatching()", "full_signature": "private boolean isUseCaseInsensitiveMatching()", "class_method_signature": "SpiderDetectorServiceImpl.isUseCaseInsensitiveMatching()", "testcase": false, "constructor": false}, {"identifier": "isUseProxies", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isUseProxies()", "full_signature": "private boolean isUseProxies()", "class_method_signature": "SpiderDetectorServiceImpl.isUseProxies()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/statistics/util/SpiderDetectorServiceImpl.java"}, "focal_method": {"identifier": "isSpider", "parameters": "(String clientIP, String proxyIPs, String hostname, String agent)", "modifiers": "public", "return": "boolean", "body": "public boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent) {\n        // See if any agent patterns match\n        if (null != agent)\n        {\n            synchronized(agents)\n            {\n                if (agents.isEmpty())\n                    loadPatterns(\"agents\", agents);\n            }\n\n            if(isUseCaseInsensitiveMatching()) {\n                agent = StringUtils.lowerCase(agent);\n                hostname = StringUtils.lowerCase(hostname);\n            }\n\n            for (Pattern candidate : agents) {\n\n                // prevent matcher() invocation from a null Pattern object\n                if (null != candidate && candidate.matcher(agent).find()) {\n                    return true;\n                }\n\n\n            }\n        }\n\n        // No.  See if any IP addresses match\n        if (isUseProxies() && proxyIPs != null) {\n            /* This header is a comma delimited list */\n            for (String xfip : proxyIPs.split(\",\")) {\n                if (isSpider(xfip))\n                {\n                    return true;\n                }\n            }\n        }\n\n        if (isSpider(clientIP))\n            return true;\n\n        // No.  See if any DNS names match\n        if (null != hostname)\n        {\n            synchronized(domains)\n            {\n                if (domains.isEmpty())\n                    loadPatterns(\"domains\", domains);\n            }\n            for (Pattern candidate : domains)\n            {\n                // prevent matcher() invocation from a null Pattern object\n                if (null != candidate && candidate.matcher(hostname).find())\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Not a known spider.\n        return false;\n    }", "signature": "boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "full_signature": "public boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "loadPatterns", "isUseCaseInsensitiveMatching", "lowerCase", "lowerCase", "find", "matcher", "isUseProxies", "split", "isSpider", "isSpider", "isEmpty", "loadPatterns", "find", "matcher"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}