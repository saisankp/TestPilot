{"test_class": {"identifier": "NetCDFUtilityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(NetCDFUtilityTest.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = org.slf4j.LoggerFactory.getLogger(NetCDFUtilityTest.class)", "var_name": "log"}], "file": "gdp-data-access/src/test/java/gov/usgs/cida/gdp/dataaccess/helper/NetCDFUtilityTest.java"}, "test_case": {"identifier": "testGetDatasetHandles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetDatasetHandles() throws Exception {\n\t\tURI catalogURI = NetCDFUtilityTest.class.getResource(\"multi_catalog_all.xml\").toURI();\n\t\tInvCatalogFactory factory = new InvCatalogFactory(\"default\", true);\n\t\tInvCatalog catalog = factory.readXML(catalogURI);\n\n\t\tStringBuilder errorBuilder = new StringBuilder();\n\t\tif (!catalog.check(errorBuilder)) {\n\t\t\tthrow new IOException(errorBuilder.toString());\n\t\t}\n\n\t\tList<InvAccess> handlesFromCatalog = NetCDFUtility.getDatasetHandles(catalog, ServiceType.OPENDAP);\n\t\tassertEquals(handlesFromCatalog.size(), 2);\n\t\tassertEquals(handlesFromCatalog.get(0).getDataset().getName(), \"NCEP WaveWatch III:  Atlantic (4 min grid)\");\n\t\tassertEquals(handlesFromCatalog.get(1).getDataset().getName(), \"NCEP WaveWatch III:  Atlantic (10 min grid)\");\n\n\t\tList<InvDataset> topLevelDatasets = catalog.getDatasets();\n\t\tassertEquals(topLevelDatasets.size(), 1);\n\t\tassertEquals(topLevelDatasets.get(0).getName(), \"NOAA-WW3\");\n\t\tList<InvAccess> handlesFromTopLevelDataset =\n\t\t\t\tNetCDFUtility.getDatasetHandles(topLevelDatasets.get(0), ServiceType.OPENDAP);\n\n\t\t// Assert that the handles obtained from the catalog and from the top-level dataset are the same.\n\t\tassertEquals(handlesFromCatalog, handlesFromTopLevelDataset);\n\t}", "signature": "void testGetDatasetHandles()", "full_signature": "@Test public void testGetDatasetHandles()", "class_method_signature": "NetCDFUtilityTest.testGetDatasetHandles()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "readXML", "check", "toString", "getDatasetHandles", "assertEquals", "size", "assertEquals", "getName", "getDataset", "get", "assertEquals", "getName", "getDataset", "get", "getDatasets", "assertEquals", "size", "assertEquals", "getName", "get", "getDatasetHandles", "get", "assertEquals"]}, "focal_class": {"identifier": "NetCDFUtility", "superclass": "", "interfaces": "", "fields": [{"original_string": "static org.slf4j.Logger log = LoggerFactory.getLogger(NetCDFUtility.class);", "modifier": "static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(NetCDFUtility.class)", "var_name": "log"}], "methods": [{"identifier": "NetCDFUtility", "parameters": "()", "modifiers": "private", "return": "", "signature": " NetCDFUtility()", "full_signature": "private  NetCDFUtility()", "class_method_signature": "NetCDFUtility.NetCDFUtility()", "testcase": false, "constructor": true}, {"identifier": "getDatasetHandles", "parameters": "(InvCatalog catalog, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "signature": "List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "testcase": false, "constructor": false}, {"identifier": "getDatasetHandles", "parameters": "(InvDataset dataset, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "signature": "List<InvAccess> getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "testcase": false, "constructor": false}, {"identifier": "getDataVariableNames", "parameters": "(String url)", "modifiers": "public static", "return": "List<VariableSimpleIF>", "signature": "List<VariableSimpleIF> getDataVariableNames(String url)", "full_signature": "public static List<VariableSimpleIF> getDataVariableNames(String url)", "class_method_signature": "NetCDFUtility.getDataVariableNames(String url)", "testcase": false, "constructor": false}, {"identifier": "getDataVariableNames", "parameters": "(FeatureDataset dataset)", "modifiers": "public static", "return": "List<VariableSimpleIF>", "signature": "List<VariableSimpleIF> getDataVariableNames(FeatureDataset dataset)", "full_signature": "public static List<VariableSimpleIF> getDataVariableNames(FeatureDataset dataset)", "class_method_signature": "NetCDFUtility.getDataVariableNames(FeatureDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getDataTypeCollection", "parameters": "(String datasetUrl)", "modifiers": "public static", "return": "DataTypeCollection", "signature": "DataTypeCollection getDataTypeCollection(String datasetUrl)", "full_signature": "public static DataTypeCollection getDataTypeCollection(String datasetUrl)", "class_method_signature": "NetCDFUtility.getDataTypeCollection(String datasetUrl)", "testcase": false, "constructor": false}, {"identifier": "hasTimeCoordinate", "parameters": "(String location)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTimeCoordinate(String location)", "full_signature": "public static boolean hasTimeCoordinate(String location)", "class_method_signature": "NetCDFUtility.hasTimeCoordinate(String location)", "testcase": false, "constructor": false}, {"identifier": "hasTimeCoordinate", "parameters": "(FeatureDataset featureDataset)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTimeCoordinate(FeatureDataset featureDataset)", "full_signature": "public static boolean hasTimeCoordinate(FeatureDataset featureDataset)", "class_method_signature": "NetCDFUtility.hasTimeCoordinate(FeatureDataset featureDataset)", "testcase": false, "constructor": false}, {"identifier": "getDateRange", "parameters": "(String threddsURL, String variableName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getDateRange(String threddsURL, String variableName)", "full_signature": "public static List<String> getDateRange(String threddsURL, String variableName)", "class_method_signature": "NetCDFUtility.getDateRange(String threddsURL, String variableName)", "testcase": false, "constructor": false}, {"identifier": "getTimeBean", "parameters": "(String location, String gridSelection)", "modifiers": "public static", "return": "Time", "signature": "Time getTimeBean(String location, String gridSelection)", "full_signature": "public static Time getTimeBean(String location, String gridSelection)", "class_method_signature": "NetCDFUtility.getTimeBean(String location, String gridSelection)", "testcase": false, "constructor": false}], "file": "gdp-data-access/src/main/java/gov/usgs/cida/gdp/dataaccess/helper/NetCDFUtility.java"}, "focal_method": {"identifier": "getDatasetHandles", "parameters": "(InvCatalog catalog, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "body": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType) {\n        if (catalog == null || serviceType == null) {\n            return Collections.emptyList();     // Template parameter inferred from return type.\n        }\n\n        List<InvAccess> handles = new LinkedList<InvAccess>();\n        for (InvDataset dataset : catalog.getDatasets()) {\n            handles.addAll(getDatasetHandles(dataset, serviceType));\n        }\n\n        return handles;\n    }", "signature": "List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "testcase": false, "constructor": false, "invocations": ["emptyList", "getDatasets", "addAll", "getDatasetHandles"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}