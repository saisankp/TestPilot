{"test_class": {"identifier": "DecisionTreeRegressionTrainerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int[] partsToBeTested = new int[] {1, 2, 3, 4, 5, 7};", "modifier": "private static final", "type": "int[]", "declarator": "partsToBeTested = new int[] {1, 2, 3, 4, 5, 7}", "var_name": "partsToBeTested"}, {"original_string": "@Parameterized.Parameter()\n    public int parts;", "modifier": "@Parameterized.Parameter()\n    public", "type": "int", "declarator": "parts", "var_name": "parts"}, {"original_string": "@Parameterized.Parameter(1)\n    public int useIdx;", "modifier": "@Parameterized.Parameter(1)\n    public", "type": "int", "declarator": "useIdx", "var_name": "useIdx"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/DecisionTreeRegressionTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        int size = 100;\n\n        Map<Integer, double[]> data = new HashMap<>();\n\n        Random rnd = new Random(0);\n        for (int i = 0; i < size; i++) {\n            double x = rnd.nextDouble() - 0.5;\n            data.put(i, new double[]{x, x > 0 ? 1 : 0});\n        }\n\n        DecisionTreeRegressionTrainer trainer = new DecisionTreeRegressionTrainer(1, 0)\n            .withUsingIdx(useIdx == 1);\n\n        DecisionTreeNode tree = trainer.fit(data, parts, new DoubleArrayVectorizer<Integer>().labeled(1));\n\n        assertTrue(tree instanceof DecisionTreeConditionalNode);\n\n        DecisionTreeConditionalNode node = (DecisionTreeConditionalNode) tree;\n\n        assertEquals(0, node.getThreshold(), 1e-3);\n\n        assertTrue(node.getThenNode() instanceof DecisionTreeLeafNode);\n        assertTrue(node.getElseNode() instanceof DecisionTreeLeafNode);\n\n        DecisionTreeLeafNode thenNode = (DecisionTreeLeafNode) node.getThenNode();\n        DecisionTreeLeafNode elseNode = (DecisionTreeLeafNode) node.getElseNode();\n\n        assertEquals(1, thenNode.getVal(), 1e-10);\n        assertEquals(0, elseNode.getVal(), 1e-10);\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "DecisionTreeRegressionTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "put", "withUsingIdx", "fit", "labeled", "assertTrue", "assertEquals", "getThreshold", "assertTrue", "getThenNode", "assertTrue", "getElseNode", "getThenNode", "getElseNode", "assertEquals", "getVal", "assertEquals", "getVal"]}, "focal_class": {"identifier": "DecisionTreeRegressionTrainer", "superclass": "extends DecisionTree<MSEImpurityMeasure>", "interfaces": "", "fields": [], "methods": [{"identifier": "DecisionTreeRegressionTrainer", "parameters": "(int maxDeep, double minImpurityDecrease)", "modifiers": "public", "return": "", "signature": " DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease)", "full_signature": "public  DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease)", "class_method_signature": "DecisionTreeRegressionTrainer.DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease)", "testcase": false, "constructor": true}, {"identifier": "DecisionTreeRegressionTrainer", "parameters": "(int maxDeep, double minImpurityDecrease,\n        StepFunctionCompressor<MSEImpurityMeasure> compressor)", "modifiers": "public", "return": "", "signature": " DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease,\n        StepFunctionCompressor<MSEImpurityMeasure> compressor)", "full_signature": "public  DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease,\n        StepFunctionCompressor<MSEImpurityMeasure> compressor)", "class_method_signature": "DecisionTreeRegressionTrainer.DecisionTreeRegressionTrainer(int maxDeep, double minImpurityDecrease,\n        StepFunctionCompressor<MSEImpurityMeasure> compressor)", "testcase": false, "constructor": true}, {"identifier": "withUsingIdx", "parameters": "(boolean usingIdx)", "modifiers": "public", "return": "DecisionTreeRegressionTrainer", "signature": "DecisionTreeRegressionTrainer withUsingIdx(boolean usingIdx)", "full_signature": "public DecisionTreeRegressionTrainer withUsingIdx(boolean usingIdx)", "class_method_signature": "DecisionTreeRegressionTrainer.withUsingIdx(boolean usingIdx)", "testcase": false, "constructor": false}, {"identifier": "getImpurityMeasureCalculator", "parameters": "(\n        Dataset<EmptyContext, DecisionTreeData> dataset)", "modifiers": "@Override protected", "return": "ImpurityMeasureCalculator<MSEImpurityMeasure>", "signature": "ImpurityMeasureCalculator<MSEImpurityMeasure> getImpurityMeasureCalculator(\n        Dataset<EmptyContext, DecisionTreeData> dataset)", "full_signature": "@Override protected ImpurityMeasureCalculator<MSEImpurityMeasure> getImpurityMeasureCalculator(\n        Dataset<EmptyContext, DecisionTreeData> dataset)", "class_method_signature": "DecisionTreeRegressionTrainer.getImpurityMeasureCalculator(\n        Dataset<EmptyContext, DecisionTreeData> dataset)", "testcase": false, "constructor": false}, {"identifier": "withEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder envBuilder)", "modifiers": "@Override public", "return": "DecisionTreeRegressionTrainer", "signature": "DecisionTreeRegressionTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "full_signature": "@Override public DecisionTreeRegressionTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "class_method_signature": "DecisionTreeRegressionTrainer.withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/DecisionTreeRegressionTrainer.java"}, "focal_method": {"identifier": "withUsingIdx", "parameters": "(boolean usingIdx)", "modifiers": "public", "return": "DecisionTreeRegressionTrainer", "body": "public DecisionTreeRegressionTrainer withUsingIdx(boolean usingIdx) {\n        this.usingIdx = usingIdx;\n        return this;\n    }", "signature": "DecisionTreeRegressionTrainer withUsingIdx(boolean usingIdx)", "full_signature": "public DecisionTreeRegressionTrainer withUsingIdx(boolean usingIdx)", "class_method_signature": "DecisionTreeRegressionTrainer.withUsingIdx(boolean usingIdx)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}