{"test_class": {"identifier": "WorkspaceTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/layerModel/mapcatalog/WorkspaceTest.java"}, "test_case": {"identifier": "testParseXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testParseXML() throws Exception {\n                // Unused URL\n                URL apiUrl = new URL(\"http://poulpe.heig-vd.ch/scapc2/serviceapi/index.php\");\n                ConnectionProperties cParams = new ConnectionProperties(apiUrl, null,new File(\"target/maps\"));\n\n                // Read the xml file in test resources\n                FileReader inFile = new FileReader(new File(RemoteMapCatalogTest.class.getResource(\"context.xml\").toURI()));\n                BufferedReader in = new BufferedReader(inFile);\n                XMLInputFactory factory = XMLInputFactory.newInstance();\n                \n                // Parse Data\n                XMLStreamReader parser;\n                parser = factory.createXMLStreamReader(in);\n                Workspace mapCatalog =\n                        new Workspace(cParams,\n                        \"default\");\n                List<RemoteMapContext> context = new ArrayList<RemoteMapContext>();\n                mapCatalog.parseXML(context, parser);                        \n                parser.close();\n                \n                assertEquals(context.size(), 2);\n\n                assertEquals(context.get(0).getDescription().getTitle(Locale.ENGLISH), \"My custom context\");\n                assertEquals(context.get(0).getDescription().getAbstract(Locale.ENGLISH), \"Some text here.\");\n                assertEquals(context.get(0).getDate(), Workspace.parseDate(\"2012.10.12 15:13:29 CEST\"));\n                assertEquals(context.get(0).getId(), 0);\n\n                assertEquals(context.get(1).getDescription().getDefaultTitle(), \"Repr\u00e9sentation par diagrammes\");\n                assertEquals(context.get(1).getDate(), Workspace.parseDate(\"2012.10.12 15:13:34 CEST\"));\n                assertEquals(context.get(1).getId(), 1);\n        }", "signature": "void testParseXML()", "full_signature": "@Test public void testParseXML()", "class_method_signature": "WorkspaceTest.testParseXML()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "newInstance", "createXMLStreamReader", "parseXML", "close", "assertEquals", "size", "assertEquals", "getTitle", "getDescription", "get", "assertEquals", "getAbstract", "getDescription", "get", "assertEquals", "getDate", "get", "parseDate", "assertEquals", "getId", "get", "assertEquals", "getDefaultTitle", "getDescription", "get", "assertEquals", "getDate", "get", "parseDate", "assertEquals", "getId", "get"]}, "focal_class": {"identifier": "Workspace", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final I18n I18N = I18nFactory.getI18n(Workspace.class);", "modifier": "private static final", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(Workspace.class)", "var_name": "I18N"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Workspace.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Workspace.class)", "var_name": "LOGGER"}, {"original_string": "private ConnectionProperties cParams;", "modifier": "private", "type": "ConnectionProperties", "declarator": "cParams", "var_name": "cParams"}, {"original_string": "private String workspaceName;", "modifier": "private", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private static final DateFormat FORMAT = new SimpleDateFormat(\"yyyy.MM.dd HH:mm:ss z\");", "modifier": "private static final", "type": "DateFormat", "declarator": "FORMAT = new SimpleDateFormat(\"yyyy.MM.dd HH:mm:ss z\")", "var_name": "FORMAT"}], "methods": [{"identifier": "Workspace", "parameters": "(ConnectionProperties cParams, String workspaceName)", "modifiers": "public", "return": "", "signature": " Workspace(ConnectionProperties cParams, String workspaceName)", "full_signature": "public  Workspace(ConnectionProperties cParams, String workspaceName)", "class_method_signature": "Workspace.Workspace(ConnectionProperties cParams, String workspaceName)", "testcase": false, "constructor": true}, {"identifier": "parseDate", "parameters": "(String dateStr)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String dateStr)", "full_signature": "public static Date parseDate(String dateStr)", "class_method_signature": "Workspace.parseDate(String dateStr)", "testcase": false, "constructor": false}, {"identifier": "parsePublishResponse", "parameters": "(XMLStreamReader parser)", "modifiers": "private", "return": "int", "signature": "int parsePublishResponse(XMLStreamReader parser)", "full_signature": "private int parsePublishResponse(XMLStreamReader parser)", "class_method_signature": "Workspace.parsePublishResponse(XMLStreamReader parser)", "testcase": false, "constructor": false}, {"identifier": "publishMapContext", "parameters": "(MapContext mapContext, Integer mapContextId)", "modifiers": "public", "return": "int", "signature": "int publishMapContext(MapContext mapContext, Integer mapContextId)", "full_signature": "public int publishMapContext(MapContext mapContext, Integer mapContextId)", "class_method_signature": "Workspace.publishMapContext(MapContext mapContext, Integer mapContextId)", "testcase": false, "constructor": false}, {"identifier": "parseXML", "parameters": "(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "modifiers": "public", "return": "void", "signature": "void parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "full_signature": "public void parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "class_method_signature": "Workspace.parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWorkspaceName()", "full_signature": "public String getWorkspaceName()", "class_method_signature": "Workspace.getWorkspaceName()", "testcase": false, "constructor": false}, {"identifier": "getMapContextList", "parameters": "()", "modifiers": "public", "return": "List<RemoteMapContext>", "signature": "List<RemoteMapContext> getMapContextList()", "full_signature": "public List<RemoteMapContext> getMapContextList()", "class_method_signature": "Workspace.getMapContextList()", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/layerModel/mapcatalog/Workspace.java"}, "focal_method": {"identifier": "parseXML", "parameters": "(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "modifiers": "public", "return": "void", "body": "public void parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser) throws XMLStreamException, UnsupportedEncodingException {\n                List<String> hierarchy = new ArrayList<String>();\n                RemoteMapContext curMapContext = null;\n                Locale curLocale = null;\n                StringBuilder characters = new StringBuilder();\n                for (int event = parser.next();\n                        event != XMLStreamConstants.END_DOCUMENT;\n                        event = parser.next()) {\n                        // For each XML elements\n                        switch(event) {\n                                case XMLStreamConstants.START_ELEMENT:\n                                        hierarchy.add(parser.getLocalName());\n                                        if(RemoteCommons.endsWith(hierarchy,\"contexts\",\"context\")) {\n                                                curMapContext = new RemoteOwsMapContext(cParams);\n                                                curMapContext.setWorkspaceName(workspaceName);\n                                        }\n                                        // Parse attributes\n                                        for (int attributeId = 0; attributeId < parser.getAttributeCount(); attributeId++) {\n                                                String attributeName = parser.getAttributeLocalName(attributeId);\n                                                if (attributeName.equals(\"id\")) {\n                                                        curMapContext.setId(Integer.parseInt(parser.getAttributeValue(attributeId)));\n                                                } else if (attributeName.equals(\"date\")) {\n                                                        String attributeValue = parser.getAttributeValue(attributeId);\n                                                        try {\n                                                                curMapContext.setDate(parseDate(attributeValue));\n                                                        } catch (ParseException ex) {\n                                                                LOGGER.warn(I18N.tr(\"Cannot parse the provided date {0}\",attributeValue),ex);\n                                                        }\n                                                } else if (attributeName.equals(\"lang\")) {\n                                                         curLocale=LocalizedText.forLanguageTag(parser.getAttributeValue(attributeId));\n                                                }\n                                        }\n                                        break;\n                                case XMLStreamConstants.END_ELEMENT:\n                                        if(RemoteCommons.endsWith(hierarchy,\"contexts\",\"context\")) {\n                                                mapContextList.add(curMapContext);\n                                                curMapContext = null;\n                                        } else if (RemoteCommons.endsWith(hierarchy,\"contexts\",\"context\",\"title\")) {\n                                                Locale descLocale = Locale.getDefault();\n                                                if(curLocale!=null) {\n                                                        descLocale = curLocale;\n                                                }\n                                                curMapContext.getDescription().addTitle(descLocale,StringEscapeUtils.unescapeHtml4(characters.toString().trim()));\n                                        } else if(RemoteCommons.endsWith(hierarchy,\"contexts\",\"context\",\"abstract\")) {\n                                                Locale descLocale = Locale.getDefault();\n                                                if(curLocale!=null) {\n                                                        descLocale = curLocale;\n                                                }\n                                                curMapContext.getDescription().addAbstract(descLocale, StringEscapeUtils.unescapeHtml4(characters.toString().trim()));\n                                        }\n                                        characters = new StringBuilder();\n                                        curLocale = null;\n                                        hierarchy.remove(hierarchy.size()-1);\n                                        break;\n                                case XMLStreamConstants.CHARACTERS:\n                                        characters.append(StringEscapeUtils.unescapeHtml4(parser.getText()));\n                                        break;\n                        }                               \n                }                \n        }", "signature": "void parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "full_signature": "public void parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "class_method_signature": "Workspace.parseXML(List<RemoteMapContext> mapContextList,XMLStreamReader parser)", "testcase": false, "constructor": false, "invocations": ["next", "next", "add", "getLocalName", "endsWith", "setWorkspaceName", "getAttributeCount", "getAttributeLocalName", "equals", "setId", "parseInt", "getAttributeValue", "equals", "getAttributeValue", "setDate", "parseDate", "warn", "tr", "equals", "forLanguageTag", "getAttributeValue", "endsWith", "add", "endsWith", "getDefault", "addTitle", "getDescription", "unescapeHtml4", "trim", "toString", "endsWith", "getDefault", "addAbstract", "getDescription", "unescapeHtml4", "trim", "toString", "remove", "size", "append", "unescapeHtml4", "getText"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}