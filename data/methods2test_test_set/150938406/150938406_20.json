{"test_class": {"identifier": "ApproxVectorSimilarityTopNLSHBatchOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/batch/similarity/ApproxVectorSimilarityTopNLSHBatchOpTest.java"}, "test_case": {"identifier": "testMinSimilarity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMinSimilarity() {\n\t\tint len = 200, size = 10;\n\t\tRow[] left = new Row[len];\n\t\tRandom random = new Random();\n\t\tfor(int i = 0; i < left.length; i++){\n\t\t\tleft[i] = Row.of(i, new SparseVector(size, new int[]{random.nextInt(size), random.nextInt(size)}, new double[]{random.nextDouble(), random.nextDouble()}));\n\t\t}\n\n\t\tMemSourceBatchOp leftData = new MemSourceBatchOp(Arrays.asList(left), new String[] {\"leftId\", \"leftVec\"});\n\n\t\tBatchOperator op = new ApproxVectorSimilarityTopNLSHBatchOp()\n\t\t\t.setLeftCol(\"leftVec\")\n\t\t\t.setRightCol(\"leftVec\")\n\t\t\t.setLeftIdCol(\"leftId\")\n\t\t\t.setRightIdCol(\"leftId\")\n\t\t\t.setDistanceType(\"JACCARD\")\n\t\t\t.setOutputCol(\"distance\");\n\n\t\tList<Row> res = op.linkFrom(leftData, leftData).collect();\n\t\tAssert.assertTrue(res.size() >= 200 && res.size() <= 1000);\n\t}", "signature": "void testMinSimilarity()", "full_signature": "@Test public void testMinSimilarity()", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOpTest.testMinSimilarity()", "testcase": true, "constructor": false, "invocations": ["of", "nextInt", "nextInt", "nextDouble", "nextDouble", "asList", "setOutputCol", "setDistanceType", "setRightIdCol", "setLeftIdCol", "setRightCol", "setLeftCol", "collect", "linkFrom", "assertTrue", "size", "size"]}, "focal_class": {"identifier": "ApproxVectorSimilarityTopNLSHBatchOp", "superclass": "extends BatchOperator<ApproxVectorSimilarityTopNLSHBatchOp>", "interfaces": "implements ApproxVectorTopNLSHParams<ApproxVectorSimilarityTopNLSHBatchOp>", "fields": [{"original_string": "static String DISTANCE_COL = \"distance\";", "modifier": "static", "type": "String", "declarator": "DISTANCE_COL = \"distance\"", "var_name": "DISTANCE_COL"}, {"original_string": "static String RANK_COL = \"rank\";", "modifier": "static", "type": "String", "declarator": "RANK_COL = \"rank\"", "var_name": "RANK_COL"}], "methods": [{"identifier": "ApproxVectorSimilarityTopNLSHBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApproxVectorSimilarityTopNLSHBatchOp()", "full_signature": "public  ApproxVectorSimilarityTopNLSHBatchOp()", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOp.ApproxVectorSimilarityTopNLSHBatchOp()", "testcase": false, "constructor": true}, {"identifier": "ApproxVectorSimilarityTopNLSHBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " ApproxVectorSimilarityTopNLSHBatchOp(Params params)", "full_signature": "public  ApproxVectorSimilarityTopNLSHBatchOp(Params params)", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOp.ApproxVectorSimilarityTopNLSHBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "getTopNOutputSchema", "parameters": "(BatchOperator[] inputs, String leftIdCol, String rightIdCol)", "modifiers": "public static", "return": "TableSchema", "signature": "TableSchema getTopNOutputSchema(BatchOperator[] inputs, String leftIdCol, String rightIdCol)", "full_signature": "public static TableSchema getTopNOutputSchema(BatchOperator[] inputs, String leftIdCol, String rightIdCol)", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOp.getTopNOutputSchema(BatchOperator[] inputs, String leftIdCol, String rightIdCol)", "testcase": false, "constructor": false}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "ApproxVectorSimilarityTopNLSHBatchOp", "signature": "ApproxVectorSimilarityTopNLSHBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public ApproxVectorSimilarityTopNLSHBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/similarity/ApproxVectorSimilarityTopNLSHBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "ApproxVectorSimilarityTopNLSHBatchOp", "body": "@Override\n\tpublic ApproxVectorSimilarityTopNLSHBatchOp linkFrom(BatchOperator<?>... inputs) {\n\t\tcheckOpSize(2, inputs);\n        checkOpSize(2, inputs);\n\n        String leftIdCol = this.getLeftIdCol();\n        String rightIdCol = this.getRightIdCol();\n\n        DataSet<BaseLSH> lsh = LocalitySensitiveHashApproxFunctions.buildLSH(inputs[0], inputs[1], this.getParams());\n\n        DataSet<Row> res = LocalitySensitiveHashApproxFunctions.approxNearestNeighbors(\n            inputs[1].select(new String[] {rightIdCol, getRightCol()}).getDataSet(),\n            inputs[0].select(new String[] {leftIdCol, getLeftCol()}).getDataSet(), this.getTopN(), lsh);\n\n        this.setOutput(res, getTopNOutputSchema(inputs, leftIdCol, rightIdCol));\n        return this;\n\t}", "signature": "ApproxVectorSimilarityTopNLSHBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public ApproxVectorSimilarityTopNLSHBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "ApproxVectorSimilarityTopNLSHBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkOpSize", "checkOpSize", "getLeftIdCol", "getRightIdCol", "buildLSH", "getParams", "approxNearestNeighbors", "getDataSet", "select", "getRightCol", "getDataSet", "select", "getLeftCol", "getTopN", "setOutput", "getTopNOutputSchema"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}