{"test_class": {"identifier": "BeanSerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/json/BeanSerializerTest.java"}, "test_case": {"identifier": "testDeserializeByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserializeByType() {\n        Assert.assertTrue(0 == BeanSerializer.deserializeByType(null, int.class));\n        Assert.assertTrue(0 == BeanSerializer.deserializeByType(null, long.class));\n        Assert.assertFalse(BeanSerializer.deserializeByType(null, boolean.class));\n\n        Assert.assertArrayEquals(new int[] { 123 }, BeanSerializer.deserializeByType(Arrays.asList(123), int[].class));\n        Assert.assertFalse(BeanSerializer.deserializeByType(Arrays.asList(123), String.class) instanceof String);\n        Assert.assertTrue(CommonUtils.listEquals(Arrays.asList(123),\n            BeanSerializer.deserializeByType(new int[] { 123 }, List.class)));\n        Assert.assertTrue(CommonUtils.listEquals(Arrays.asList(\"xxx\"),\n            BeanSerializer.deserializeByType(new String[] { \"xxx\" }, List.class)));\n\n        Assert.assertEquals(TestJsonBean.Status.START,\n            BeanSerializer.deserializeByType(\"START\", TestJsonBean.Status.class));\n        try {\n            BeanSerializer.deserializeByType(new TestJsonBean(), TestJsonBean.Status.class);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n\n        Date now = new Date();\n        Assert.assertEquals(now, BeanSerializer.deserializeByType(now.getTime(), Date.class));\n        Assert.assertEquals(DateUtils.dateToStr(now), DateUtils.dateToStr(\n            BeanSerializer.deserializeByType(DateUtils.dateToStr(now), Date.class)));\n        try {\n            BeanSerializer.deserializeByType(\"xxxx\", Date.class);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n        try {\n            BeanSerializer.deserializeByType(new TestJsonBean(), Date.class);\n            Assert.fail();\n        } catch (Exception e) {\n        }\n    }", "signature": "void testDeserializeByType()", "full_signature": "@Test public void testDeserializeByType()", "class_method_signature": "BeanSerializerTest.testDeserializeByType()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "deserializeByType", "assertTrue", "deserializeByType", "assertFalse", "deserializeByType", "assertArrayEquals", "deserializeByType", "asList", "assertFalse", "deserializeByType", "asList", "assertTrue", "listEquals", "asList", "deserializeByType", "assertTrue", "listEquals", "asList", "deserializeByType", "assertEquals", "deserializeByType", "deserializeByType", "fail", "assertEquals", "deserializeByType", "getTime", "assertEquals", "dateToStr", "dateToStr", "deserializeByType", "dateToStr", "deserializeByType", "fail", "deserializeByType", "fail"]}, "focal_class": {"identifier": "BeanSerializer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "serialize", "parameters": "(Object bean)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(Object bean)", "full_signature": "public static Object serialize(Object bean)", "class_method_signature": "BeanSerializer.serialize(Object bean)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object bean, boolean addType)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(Object bean, boolean addType)", "full_signature": "public static Object serialize(Object bean, boolean addType)", "class_method_signature": "BeanSerializer.serialize(Object bean, boolean addType)", "testcase": false, "constructor": false}, {"identifier": "mapToMap", "parameters": "(Map<K, V> src, Class<? extends Map> dstClazz)", "modifiers": "private static", "return": "Map<K, V>", "signature": "Map<K, V> mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "full_signature": "private static Map<K, V> mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "class_method_signature": "BeanSerializer.mapToMap(Map<K, V> src, Class<? extends Map> dstClazz)", "testcase": false, "constructor": false}, {"identifier": "mapToObject", "parameters": "(Map src, Class<T> dstClazz)", "modifiers": "private static", "return": "T", "signature": "T mapToObject(Map src, Class<T> dstClazz)", "full_signature": "private static T mapToObject(Map src, Class<T> dstClazz)", "class_method_signature": "BeanSerializer.mapToObject(Map src, Class<T> dstClazz)", "testcase": false, "constructor": false}, {"identifier": "arrayToCollection", "parameters": "(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "modifiers": "private static", "return": "Collection<T>", "signature": "Collection<T> arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "full_signature": "private static Collection<T> arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "class_method_signature": "BeanSerializer.arrayToCollection(Object src,\n                                                       Class<? extends Collection> clazz, Class<T> genericType)", "testcase": false, "constructor": false}, {"identifier": "collection2Collection", "parameters": "(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "modifiers": "private static", "return": "Collection<T>", "signature": "Collection<T> collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "full_signature": "private static Collection<T> collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "class_method_signature": "BeanSerializer.collection2Collection(Collection src,\n                                                           Class<? extends Collection> clazz, Class<T> genericType)", "testcase": false, "constructor": false}, {"identifier": "collectionToArray", "parameters": "(Collection<T> src, Class<T> componentType)", "modifiers": "private static", "return": "T[]", "signature": "T[] collectionToArray(Collection<T> src, Class<T> componentType)", "full_signature": "private static T[] collectionToArray(Collection<T> src, Class<T> componentType)", "class_method_signature": "BeanSerializer.collectionToArray(Collection<T> src, Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "array2Array", "parameters": "(Object[] src, Class<T> componentType)", "modifiers": "private static", "return": "T[]", "signature": "T[] array2Array(Object[] src, Class<T> componentType)", "full_signature": "private static T[] array2Array(Object[] src, Class<T> componentType)", "class_method_signature": "BeanSerializer.array2Array(Object[] src, Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "deserializeByType", "parameters": "(Object src, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T deserializeByType(Object src, Class<T> clazz)", "full_signature": "public static T deserializeByType(Object src, Class<T> clazz)", "class_method_signature": "BeanSerializer.deserializeByType(Object src, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(Object object)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(Object object)", "full_signature": "public static Object deserialize(Object object)", "class_method_signature": "BeanSerializer.deserialize(Object object)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/json/BeanSerializer.java"}, "focal_method": {"identifier": "deserializeByType", "parameters": "(Object src, Class<T> clazz)", "modifiers": "public static", "return": "T", "body": "public static <T> T deserializeByType(Object src, Class<T> clazz) {\n        if (src == null) {\n            return (T) ClassUtils.getDefaultPrimitiveValue(clazz);\n        } else if (src instanceof Boolean) {\n            return (T) CompatibleTypeUtils.convert(src, clazz);\n        } else if (src instanceof Number) {\n            return (T) CompatibleTypeUtils.convert(src, clazz);\n        } else if (src instanceof Map) { // map-->\u53ef\u80fd\u662fmap\u6216\u8005\u81ea\u5b9a\u4e49\u5bf9\u8c61\n            Map srcMap = (Map) src;\n            if (clazz == Object.class) { // \u9700\u8981\u81ea\u7701\n                if (srcMap.containsKey(JSON.CLASS_KEY)) {\n                    return (T) mapToObject(srcMap, Object.class); // \u81ea\u5b9a\u4e49\u5bf9\u8c61\n                } else {\n                    return (T) mapToMap(srcMap, srcMap.getClass());\n                }\n            } else {\n                if (Map.class.isAssignableFrom(clazz)) { // map\u8f6cmap\n                    return (T) mapToMap(srcMap, (Class<? extends Map>) clazz);\n                } else {\n                    return mapToObject(srcMap, clazz); // \u81ea\u5b9a\u4e49\u5bf9\u8c61\n                }\n            }\n        } else if (src instanceof Collection) {\n            Collection list = (Collection) src;\n            if (clazz == Object.class) {\n                return (T) collection2Collection(list, list.getClass(), Object.class);\n            } else if (Collection.class.isAssignableFrom(clazz)) {\n                return (T) collection2Collection(list, (Class<? extends Collection>) clazz, Object.class);\n            } else if (clazz.isArray()) {\n                if (clazz.getComponentType().isPrimitive()) {\n                    return (T) CompatibleTypeUtils.convert(list, clazz);\n                } else {\n                    return (T) collectionToArray(list, clazz.getComponentType());\n                }\n            } else {\n                return (T) list;\n            }\n        } else if (src.getClass().isArray()) {\n            Class componentType = src.getClass().getComponentType();\n            if (componentType.isPrimitive()) {\n                if (Collection.class.isAssignableFrom(clazz)) {\n                    return (T) arrayToCollection(src, (Class<? extends Collection>) clazz, Object.class);\n                } else {\n                    return (T) src;\n                }\n            } else {\n                Object[] array = (Object[]) src;\n                if (clazz == Object.class) {\n                    return (T) array2Array(array, array.getClass().getComponentType());\n                } else if (clazz.isArray()) {\n                    return (T) array2Array(array, clazz.getComponentType());\n                } else if (Collection.class.isAssignableFrom(clazz)) {\n                    return (T) arrayToCollection(src, (Class<? extends Collection>) clazz, Object.class);\n                } else {\n                    return (T) src;\n                }\n            }\n        } else if (clazz.isEnum()) { // \u679a\u4e3e \u4ece\u5b57\u7b26\u4e32\u8fdb\u884c\u8bfb\u53d6\n            if (src instanceof String) {\n                return (T) Enum.valueOf((Class<? extends Enum>) clazz, (String) src);\n            } else {\n                throw new RuntimeException(\"Enum field must set string!\");\n            }\n        } else if (Date.class.isAssignableFrom(clazz)) { // \u65e5\u671f\uff1a\u652f\u6301long\u548c\u6807\u51c6\u683c\u5f0f\u5b57\u7b26\u4e32\n            if (src instanceof Long) {\n                return (T) new Date((Long) src);\n            } else if (src instanceof String) {\n                try {\n                    return (T) DateUtils.strToDate((String) src);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Date field must set string(yyyy-MM-dd HH:mm:ss)!\");\n                }\n            } else {\n                throw new RuntimeException(\"Date field must set long or string(yyyy-MM-dd HH:mm:ss)!\");\n            }\n        } else if (src instanceof String) { // \u5b57\u7b26\u4e32\u652f\u6301\u8f6c\u6362\n            return (T) CompatibleTypeUtils.convert(src, clazz);\n        } else { // \u5176\u5b83\u8fd4\u56desrc\n            return (T) src;\n        }\n    }", "signature": "T deserializeByType(Object src, Class<T> clazz)", "full_signature": "public static T deserializeByType(Object src, Class<T> clazz)", "class_method_signature": "BeanSerializer.deserializeByType(Object src, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["getDefaultPrimitiveValue", "convert", "convert", "containsKey", "mapToObject", "mapToMap", "getClass", "isAssignableFrom", "mapToMap", "mapToObject", "collection2Collection", "getClass", "isAssignableFrom", "collection2Collection", "isArray", "isPrimitive", "getComponentType", "convert", "collectionToArray", "getComponentType", "isArray", "getClass", "getComponentType", "getClass", "isPrimitive", "isAssignableFrom", "arrayToCollection", "array2Array", "getComponentType", "getClass", "isArray", "array2Array", "getComponentType", "isAssignableFrom", "arrayToCollection", "isEnum", "valueOf", "isAssignableFrom", "strToDate", "convert"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}