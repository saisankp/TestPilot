{"test_class": {"identifier": "SpanSinkRegistryTest", "superclass": "", "interfaces": "", "fields": [], "file": "telemetry-lib/src/test/java/com/yammer/telemetry/tracing/SpanSinkRegistryTest.java"}, "test_case": {"identifier": "testRaceCondition", "parameters": "()", "modifiers": "@Test(timeout = 5000) public", "return": "void", "body": "@Test(timeout = 5000)\n    public void testRaceCondition() throws InterruptedException {\n        int parties = 2;\n\n        final AtomicInteger barrierGenerations = new AtomicInteger();\n        final CyclicBarrier barrier = new CyclicBarrier(parties, new Runnable() {\n            @Override\n            public void run() {\n                int generation = barrierGenerations.incrementAndGet();\n            }\n        });\n\n        final ArrayBlockingQueue<Throwable> caught = new ArrayBlockingQueue<>(1);\n        final AtomicBoolean running = new AtomicBoolean(true);\n\n        // We start 2 threads with a cyclic barrier repeatedly and wait a collision with at least one\n        long endBy = System.currentTimeMillis() + 5000;\n        for (int i = 0; i < parties; i++) {\n            new CyclicBarrierThread(barrier, caught, running, endBy).start();\n        }\n\n        //noinspection ThrowableResultOfMethodCallIgnored\n        assertEquals(\"Failed to add new SpanSink, concurrent add\", caught.poll(5000, TimeUnit.MILLISECONDS).getMessage());\n\n        int sinks = ImmutableList.copyOf(SpanSinkRegistry.getSpanSinks()).size();\n        int totalAdds = barrierGenerations.get() * 2;\n        assertTrue(sinks + \" < \" + totalAdds + \"?\", totalAdds > sinks);\n    }", "signature": "void testRaceCondition()", "full_signature": "@Test(timeout = 5000) public void testRaceCondition()", "class_method_signature": "SpanSinkRegistryTest.testRaceCondition()", "testcase": true, "constructor": false, "invocations": ["incrementAndGet", "currentTimeMillis", "start", "assertEquals", "getMessage", "poll", "size", "copyOf", "getSpanSinks", "get", "assertTrue"]}, "focal_class": {"identifier": "SpanSinkRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AtomicReference<ImmutableList<SpanSink>> spanSinks = new AtomicReference<>(ImmutableList.<SpanSink>of());", "modifier": "private static", "type": "AtomicReference<ImmutableList<SpanSink>>", "declarator": "spanSinks = new AtomicReference<>(ImmutableList.<SpanSink>of())", "var_name": "spanSinks"}], "methods": [{"identifier": "register", "parameters": "(SpanSink sink)", "modifiers": "public static", "return": "void", "signature": "void register(SpanSink sink)", "full_signature": "public static void register(SpanSink sink)", "class_method_signature": "SpanSinkRegistry.register(SpanSink sink)", "testcase": false, "constructor": false}, {"identifier": "getSpanSinks", "parameters": "()", "modifiers": "public static", "return": "Iterable<SpanSink>", "signature": "Iterable<SpanSink> getSpanSinks()", "full_signature": "public static Iterable<SpanSink> getSpanSinks()", "class_method_signature": "SpanSinkRegistry.getSpanSinks()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "SpanSinkRegistry.clear()", "testcase": false, "constructor": false}], "file": "telemetry-lib/src/main/java/com/yammer/telemetry/tracing/SpanSinkRegistry.java"}, "focal_method": {"identifier": "getSpanSinks", "parameters": "()", "modifiers": "public static", "return": "Iterable<SpanSink>", "body": "public static Iterable<SpanSink> getSpanSinks() {\n        return spanSinks.get();\n    }", "signature": "Iterable<SpanSink> getSpanSinks()", "full_signature": "public static Iterable<SpanSink> getSpanSinks()", "class_method_signature": "SpanSinkRegistry.getSpanSinks()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 11585818, "url": "https://github.com/yammer/telemetry", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 20, "size": 990, "license": "licensed"}}