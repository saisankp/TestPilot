{"test_class": {"identifier": "DatabaseUpgradeSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EXPANSION = \"expansion\";", "modifier": "public static final", "type": "String", "declarator": "EXPANSION = \"expansion\"", "var_name": "EXPANSION"}, {"original_string": "public static final String CONTRACTION = \"contraction\";", "modifier": "public static final", "type": "String", "declarator": "CONTRACTION = \"contraction\"", "var_name": "CONTRACTION"}, {"original_string": "private DatabaseUpgradeSupport databaseUpgradeSupport;", "modifier": "private", "type": "DatabaseUpgradeSupport", "declarator": "databaseUpgradeSupport", "var_name": "databaseUpgradeSupport"}, {"original_string": "@Mock\n    private Liquibase liquibase;", "modifier": "@Mock\n    private", "type": "Liquibase", "declarator": "liquibase", "var_name": "liquibase"}, {"original_string": "@Mock\n    private ChangeSet changeSet1;", "modifier": "@Mock\n    private", "type": "ChangeSet", "declarator": "changeSet1", "var_name": "changeSet1"}, {"original_string": "@Mock\n    private ChangeSet changeSet2;", "modifier": "@Mock\n    private", "type": "ChangeSet", "declarator": "changeSet2", "var_name": "changeSet2"}, {"original_string": "@Mock\n    private Database database;", "modifier": "@Mock\n    private", "type": "Database", "declarator": "database", "var_name": "database"}], "file": "db/src/test/java/org/mifos/db/upgrade/DatabaseUpgradeSupportTest.java"}, "test_case": {"identifier": "shouldRetrieveAllRanUpgrades", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRetrieveAllRanUpgrades() throws Exception {\n        RanChangeSet ranChangeSet1 = new RanChangeSet(changeSet1);\n        RanChangeSet ranChangeSet2 = new RanChangeSet(changeSet2);\n        when(database.getRanChangeSetList()).thenReturn(Arrays.asList(ranChangeSet1, ranChangeSet2));\n        List<ChangeSetInfo> changeSets = databaseUpgradeSupport.listRanUpgrades();\n        assertThat(changeSets, is(not(nullValue())));\n        assertThat(changeSets.size(), is(2));\n        verify(database).getRanChangeSetList();\n    }", "signature": "void shouldRetrieveAllRanUpgrades()", "full_signature": "@Test public void shouldRetrieveAllRanUpgrades()", "class_method_signature": "DatabaseUpgradeSupportTest.shouldRetrieveAllRanUpgrades()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRanChangeSetList", "asList", "listRanUpgrades", "assertThat", "is", "not", "nullValue", "assertThat", "size", "is", "getRanChangeSetList", "verify"]}, "focal_class": {"identifier": "DatabaseUpgradeSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EXPANSION = \"expansion\";", "modifier": "public static final", "type": "String", "declarator": "EXPANSION = \"expansion\"", "var_name": "EXPANSION"}, {"original_string": "public static final String CONTRACTION = \"contraction\";", "modifier": "public static final", "type": "String", "declarator": "CONTRACTION = \"contraction\"", "var_name": "CONTRACTION"}, {"original_string": "public static final String BEAN_NAME = \"databaseUpgradeSupport\";", "modifier": "public static final", "type": "String", "declarator": "BEAN_NAME = \"databaseUpgradeSupport\"", "var_name": "BEAN_NAME"}, {"original_string": "private Liquibase liquibase;", "modifier": "private", "type": "Liquibase", "declarator": "liquibase", "var_name": "liquibase"}, {"original_string": "private Database database;", "modifier": "private", "type": "Database", "declarator": "database", "var_name": "database"}], "methods": [{"identifier": "DatabaseUpgradeSupport", "parameters": "(DataSource dataSource, ResourceOpener resourceOpener)", "modifiers": "public", "return": "", "signature": " DatabaseUpgradeSupport(DataSource dataSource, ResourceOpener resourceOpener)", "full_signature": "public  DatabaseUpgradeSupport(DataSource dataSource, ResourceOpener resourceOpener)", "class_method_signature": "DatabaseUpgradeSupport.DatabaseUpgradeSupport(DataSource dataSource, ResourceOpener resourceOpener)", "testcase": false, "constructor": true}, {"identifier": "DatabaseUpgradeSupport", "parameters": "(Database database, Liquibase liquibase)", "modifiers": "public", "return": "", "signature": " DatabaseUpgradeSupport(Database database, Liquibase liquibase)", "full_signature": "public  DatabaseUpgradeSupport(Database database, Liquibase liquibase)", "class_method_signature": "DatabaseUpgradeSupport.DatabaseUpgradeSupport(Database database, Liquibase liquibase)", "testcase": false, "constructor": true}, {"identifier": "initDatabase", "parameters": "(DataSource dataSource)", "modifiers": "private", "return": "Database", "signature": "Database initDatabase(DataSource dataSource)", "full_signature": "private Database initDatabase(DataSource dataSource)", "class_method_signature": "DatabaseUpgradeSupport.initDatabase(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "initLiquibase", "parameters": "(ResourceOpener resourceOpener)", "modifiers": "private", "return": "Liquibase", "signature": "Liquibase initLiquibase(ResourceOpener resourceOpener)", "full_signature": "private Liquibase initLiquibase(ResourceOpener resourceOpener)", "class_method_signature": "DatabaseUpgradeSupport.initLiquibase(ResourceOpener resourceOpener)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "DbUpgradeValidationResult", "signature": "DbUpgradeValidationResult validate()", "full_signature": "public DbUpgradeValidationResult validate()", "class_method_signature": "DatabaseUpgradeSupport.validate()", "testcase": false, "constructor": false}, {"identifier": "expansion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void expansion()", "full_signature": "public void expansion()", "class_method_signature": "DatabaseUpgradeSupport.expansion()", "testcase": false, "constructor": false}, {"identifier": "contraction", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void contraction()", "full_signature": "public void contraction()", "class_method_signature": "DatabaseUpgradeSupport.contraction()", "testcase": false, "constructor": false}, {"identifier": "listRanUpgrades", "parameters": "()", "modifiers": "public", "return": "List<ChangeSetInfo>", "signature": "List<ChangeSetInfo> listRanUpgrades()", "full_signature": "public List<ChangeSetInfo> listRanUpgrades()", "class_method_signature": "DatabaseUpgradeSupport.listRanUpgrades()", "testcase": false, "constructor": false}, {"identifier": "listUnRunChangeSets", "parameters": "()", "modifiers": "public", "return": "List<UnRunChangeSetInfo>", "signature": "List<UnRunChangeSetInfo> listUnRunChangeSets()", "full_signature": "public List<UnRunChangeSetInfo> listUnRunChangeSets()", "class_method_signature": "DatabaseUpgradeSupport.listUnRunChangeSets()", "testcase": false, "constructor": false}], "file": "db/src/main/java/org/mifos/db/upgrade/DatabaseUpgradeSupport.java"}, "focal_method": {"identifier": "listRanUpgrades", "parameters": "()", "modifiers": "public", "return": "List<ChangeSetInfo>", "body": "public List<ChangeSetInfo> listRanUpgrades() {\n        try {\n            return CollectionUtils.collect(database.getRanChangeSetList(), new Transformer<RanChangeSet, ChangeSetInfo>() {\n                @Override\n                public ChangeSetInfo transform(RanChangeSet ranChangeSet) {\n                    return new ChangeSetInfo(ranChangeSet);\n                }\n            });\n        } catch (DatabaseException e) {\n            throw new MifosRuntimeException(e);\n        }\n    }", "signature": "List<ChangeSetInfo> listRanUpgrades()", "full_signature": "public List<ChangeSetInfo> listRanUpgrades()", "class_method_signature": "DatabaseUpgradeSupport.listRanUpgrades()", "testcase": false, "constructor": false, "invocations": ["collect", "getRanChangeSetList"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}