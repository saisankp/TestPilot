{"test_class": {"identifier": "AccountTemplateTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final ContextStorage<Context> contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance());", "modifier": "protected final", "type": "ContextStorage<Context>", "declarator": "contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance())", "var_name": "contextStorage"}], "file": "core/transport/src/test/java/hera/client/AccountTemplateTest.java"}, "test_case": {"identifier": "testCreateNameTx", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateNameTx() throws Exception {\n    // given\n    final AccountTemplate accountTemplate = new AccountTemplate(contextStorage);\n    final Requester mockRequester = mock(Requester.class);\n    final TxHash expected = TxHash.of(BytesValue.EMPTY);\n    when(mockRequester.request(ArgumentMatchers.<Invocation<?>>any()))\n        .thenReturn(expected);\n    accountTemplate.requester = mockRequester;\n\n    // then\n    final Account deprecatedOne = new AccountFactory().create(new AergoKeyGenerator().create());\n    assertEquals(expected,\n        accountTemplate.createName(deprecatedOne, randomUUID().toString(), anyNonce));\n    assertEquals(expected,\n        accountTemplate.createName(anySigner, randomUUID().toString(), anyNonce));\n    assertEquals(expected, accountTemplate.createNameTx(anySigner, anyName, anyNonce));\n  }", "signature": "void testCreateNameTx()", "full_signature": "@Test public void testCreateNameTx()", "class_method_signature": "AccountTemplateTest.testCreateNameTx()", "testcase": true, "constructor": false, "invocations": ["mock", "of", "thenReturn", "when", "request", "any", "create", "create", "assertEquals", "createName", "toString", "randomUUID", "assertEquals", "createName", "toString", "randomUUID", "assertEquals", "createNameTx"]}, "focal_class": {"identifier": "AccountTemplate", "superclass": "extends AbstractTemplate", "interfaces": "implements AccountOperation", "fields": [{"original_string": "protected final AccountMethods accountMethods = new AccountMethods();", "modifier": "protected final", "type": "AccountMethods", "declarator": "accountMethods = new AccountMethods()", "var_name": "accountMethods"}], "methods": [{"identifier": "AccountTemplate", "parameters": "(final ContextStorage<Context> contextStorage)", "modifiers": "", "return": "", "signature": " AccountTemplate(final ContextStorage<Context> contextStorage)", "full_signature": "  AccountTemplate(final ContextStorage<Context> contextStorage)", "class_method_signature": "AccountTemplate.AccountTemplate(final ContextStorage<Context> contextStorage)", "testcase": false, "constructor": true}, {"identifier": "getState", "parameters": "(final Account account)", "modifiers": "@Override public", "return": "AccountState", "signature": "AccountState getState(final Account account)", "full_signature": "@Override public AccountState getState(final Account account)", "class_method_signature": "AccountTemplate.getState(final Account account)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(final AccountAddress address)", "modifiers": "@Override public", "return": "AccountState", "signature": "AccountState getState(final AccountAddress address)", "full_signature": "@Override public AccountState getState(final AccountAddress address)", "class_method_signature": "AccountTemplate.getState(final AccountAddress address)", "testcase": false, "constructor": false}, {"identifier": "createName", "parameters": "(final Account account, final String name, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash createName(final Account account, final String name, final long nonce)", "full_signature": "@Override public TxHash createName(final Account account, final String name, final long nonce)", "class_method_signature": "AccountTemplate.createName(final Account account, final String name, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "createName", "parameters": "(final Signer signer, final String name, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash createName(final Signer signer, final String name, final long nonce)", "full_signature": "@Override public TxHash createName(final Signer signer, final String name, final long nonce)", "class_method_signature": "AccountTemplate.createName(final Signer signer, final String name, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "createNameTx", "parameters": "(final Signer signer, final Name name, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash createNameTx(final Signer signer, final Name name, final long nonce)", "full_signature": "@Override public TxHash createNameTx(final Signer signer, final Name name, final long nonce)", "class_method_signature": "AccountTemplate.createNameTx(final Signer signer, final Name name, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "updateName", "parameters": "(final Account owner, final String name, final AccountAddress newOwner,\n      final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash updateName(final Account owner, final String name, final AccountAddress newOwner,\n      final long nonce)", "full_signature": "@Override public TxHash updateName(final Account owner, final String name, final AccountAddress newOwner,\n      final long nonce)", "class_method_signature": "AccountTemplate.updateName(final Account owner, final String name, final AccountAddress newOwner,\n      final long nonce)", "testcase": false, "constructor": false}, {"identifier": "updateName", "parameters": "(final Signer signer, final String name, final AccountAddress newOwner,\n      final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash updateName(final Signer signer, final String name, final AccountAddress newOwner,\n      final long nonce)", "full_signature": "@Override public TxHash updateName(final Signer signer, final String name, final AccountAddress newOwner,\n      final long nonce)", "class_method_signature": "AccountTemplate.updateName(final Signer signer, final String name, final AccountAddress newOwner,\n      final long nonce)", "testcase": false, "constructor": false}, {"identifier": "updateNameTx", "parameters": "(final Signer signer, final Name name, final AccountAddress newOwner,\n      final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash updateNameTx(final Signer signer, final Name name, final AccountAddress newOwner,\n      final long nonce)", "full_signature": "@Override public TxHash updateNameTx(final Signer signer, final Name name, final AccountAddress newOwner,\n      final long nonce)", "class_method_signature": "AccountTemplate.updateNameTx(final Signer signer, final Name name, final AccountAddress newOwner,\n      final long nonce)", "testcase": false, "constructor": false}, {"identifier": "getNameOwner", "parameters": "(final String name)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getNameOwner(final String name)", "full_signature": "@Override public AccountAddress getNameOwner(final String name)", "class_method_signature": "AccountTemplate.getNameOwner(final String name)", "testcase": false, "constructor": false}, {"identifier": "getNameOwner", "parameters": "(final Name name)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getNameOwner(final Name name)", "full_signature": "@Override public AccountAddress getNameOwner(final Name name)", "class_method_signature": "AccountTemplate.getNameOwner(final Name name)", "testcase": false, "constructor": false}, {"identifier": "getNameOwner", "parameters": "(final String name, final long blockNumber)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getNameOwner(final String name, final long blockNumber)", "full_signature": "@Override public AccountAddress getNameOwner(final String name, final long blockNumber)", "class_method_signature": "AccountTemplate.getNameOwner(final String name, final long blockNumber)", "testcase": false, "constructor": false}, {"identifier": "getNameOwner", "parameters": "(final Name name, long blockNumber)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getNameOwner(final Name name, long blockNumber)", "full_signature": "@Override public AccountAddress getNameOwner(final Name name, long blockNumber)", "class_method_signature": "AccountTemplate.getNameOwner(final Name name, long blockNumber)", "testcase": false, "constructor": false}, {"identifier": "stake", "parameters": "(final Account account, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash stake(final Account account, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash stake(final Account account, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.stake(final Account account, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "stake", "parameters": "(final Signer signer, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash stake(final Signer signer, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash stake(final Signer signer, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.stake(final Signer signer, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "stakeTx", "parameters": "(final Signer signer, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash stakeTx(final Signer signer, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash stakeTx(final Signer signer, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.stakeTx(final Signer signer, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "unstake", "parameters": "(final Account account, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash unstake(final Account account, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash unstake(final Account account, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.unstake(final Account account, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "unstake", "parameters": "(final Signer signer, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash unstake(final Signer signer, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash unstake(final Signer signer, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.unstake(final Signer signer, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "unstakeTx", "parameters": "(final Signer signer, final Aer amount, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash unstakeTx(final Signer signer, final Aer amount, final long nonce)", "full_signature": "@Override public TxHash unstakeTx(final Signer signer, final Aer amount, final long nonce)", "class_method_signature": "AccountTemplate.unstakeTx(final Signer signer, final Aer amount, final long nonce)", "testcase": false, "constructor": false}, {"identifier": "getStakingInfo", "parameters": "(final AccountAddress accountAddress)", "modifiers": "@Override public", "return": "StakeInfo", "signature": "StakeInfo getStakingInfo(final AccountAddress accountAddress)", "full_signature": "@Override public StakeInfo getStakingInfo(final AccountAddress accountAddress)", "class_method_signature": "AccountTemplate.getStakingInfo(final AccountAddress accountAddress)", "testcase": false, "constructor": false}, {"identifier": "getStakeInfo", "parameters": "(AccountAddress accountAddress)", "modifiers": "@Override public", "return": "StakeInfo", "signature": "StakeInfo getStakeInfo(AccountAddress accountAddress)", "full_signature": "@Override public StakeInfo getStakeInfo(AccountAddress accountAddress)", "class_method_signature": "AccountTemplate.getStakeInfo(AccountAddress accountAddress)", "testcase": false, "constructor": false}, {"identifier": "vote", "parameters": "(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash vote(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "full_signature": "@Override public TxHash vote(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "class_method_signature": "AccountTemplate.vote(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "testcase": false, "constructor": false}, {"identifier": "voteTx", "parameters": "(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash voteTx(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "full_signature": "@Override public TxHash voteTx(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "class_method_signature": "AccountTemplate.voteTx(final Signer signer, final String voteId, final List<String> candidates,\n      final long nonce)", "testcase": false, "constructor": false}, {"identifier": "getVotesOf", "parameters": "(final AccountAddress accountAddress)", "modifiers": "@Override public", "return": "AccountTotalVote", "signature": "AccountTotalVote getVotesOf(final AccountAddress accountAddress)", "full_signature": "@Override public AccountTotalVote getVotesOf(final AccountAddress accountAddress)", "class_method_signature": "AccountTemplate.getVotesOf(final AccountAddress accountAddress)", "testcase": false, "constructor": false}, {"identifier": "listElected", "parameters": "(final String voteId, final int showCount)", "modifiers": "@Override public", "return": "List<ElectedCandidate>", "signature": "List<ElectedCandidate> listElected(final String voteId, final int showCount)", "full_signature": "@Override public List<ElectedCandidate> listElected(final String voteId, final int showCount)", "class_method_signature": "AccountTemplate.listElected(final String voteId, final int showCount)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final Account account, final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction sign(final Account account, final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final Account account, final RawTransaction rawTransaction)", "class_method_signature": "AccountTemplate.sign(final Account account, final RawTransaction rawTransaction)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(final Account account, final Transaction transaction)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verify(final Account account, final Transaction transaction)", "full_signature": "@Override public boolean verify(final Account account, final Transaction transaction)", "class_method_signature": "AccountTemplate.verify(final Account account, final Transaction transaction)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/AccountTemplate.java"}, "focal_method": {"identifier": "createNameTx", "parameters": "(final Signer signer, final Name name, final long nonce)", "modifiers": "@Override public", "return": "TxHash", "body": "@Override\n  public TxHash createNameTx(final Signer signer, final Name name, final long nonce) {\n    return request(accountMethods.getCreateNameTx(), Arrays.asList(signer, name, nonce));\n  }", "signature": "TxHash createNameTx(final Signer signer, final Name name, final long nonce)", "full_signature": "@Override public TxHash createNameTx(final Signer signer, final Name name, final long nonce)", "class_method_signature": "AccountTemplate.createNameTx(final Signer signer, final Name name, final long nonce)", "testcase": false, "constructor": false, "invocations": ["request", "getCreateNameTx", "asList"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}