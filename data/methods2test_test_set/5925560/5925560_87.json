{"test_class": {"identifier": "DexDataWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random random;", "modifier": "private", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "private NakedByteArrayOutputStream output = new NakedByteArrayOutputStream();", "modifier": "private", "type": "NakedByteArrayOutputStream", "declarator": "output = new NakedByteArrayOutputStream()", "var_name": "output"}, {"original_string": "private int startPosition;", "modifier": "private", "type": "int", "declarator": "startPosition", "var_name": "startPosition"}, {"original_string": "private DexDataWriter writer;", "modifier": "private", "type": "DexDataWriter", "declarator": "writer", "var_name": "writer"}], "file": "dexlib2/src/test/java/org/jf/dexlib2/writer/DexDataWriterTest.java"}, "test_case": {"identifier": "testWriteEncodedLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteEncodedLong() throws IOException {\n        testWriteEncodedLongHelper(0x00L, 0x00);\n        testWriteEncodedLongHelper(0x40L, 0x40);\n        testWriteEncodedLongHelper(0x7fL, 0x7f);\n        testWriteEncodedLongHelper(0xffL, 0xff, 0x00);\n        testWriteEncodedLongHelper(0xffffffffffffff80L, 0x80);\n        testWriteEncodedLongHelper(0xffffffffffffffffL, 0xff);\n\n        testWriteEncodedLongHelper(0x100L, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x7fffL, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x8000L, 0x00, 0x80, 0x00);\n        testWriteEncodedLongHelper(0xffffffffffff8000L, 0x00, 0x80);\n\n        testWriteEncodedLongHelper(0x10000L, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x10203L, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x810203L, 0x03, 0x02, 0x81, 0x00);\n        testWriteEncodedLongHelper(0xffffffffff810203L, 0x03, 0x02, 0x81);\n\n        testWriteEncodedLongHelper(0x1000000L, 0x00, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x1020304L, 0x04, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x7fffffffL, 0xff, 0xff, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x80000000L, 0x00, 0x00, 0x00, 0x80, 0x00);\n        testWriteEncodedLongHelper(0xffffffff80000000L, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0xffffffff80000001L, 0x01, 0x00, 0x00, 0x80);\n\n        testWriteEncodedLongHelper(0x100000000L, 0x00, 0x00, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x102030405L, 0x05, 0x04, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x7fffffffffL, 0xff, 0xff, 0xff, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x8000000000L, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00);\n        testWriteEncodedLongHelper(0xffffff8000000000L, 0x00, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0xffffff8000000001L, 0x01, 0x00, 0x00, 0x00, 0x80);\n\n        testWriteEncodedLongHelper(0x10000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x10203040506L, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x7fffffffffffL, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x800000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00);\n        testWriteEncodedLongHelper(0xffff800000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0xffff800000000001L, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80);\n\n        testWriteEncodedLongHelper(0x1000000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x1020304050607L, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x7fffffffffffffL, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x80000000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00);\n        testWriteEncodedLongHelper(0xff80000000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0xff80000000000001L, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80);\n\n        testWriteEncodedLongHelper(0x100000000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01);\n        testWriteEncodedLongHelper(0x102030405060708L, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01);\n        testWriteEncodedLongHelper(0x7fffffffffffffffL, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f);\n        testWriteEncodedLongHelper(0x8000000000000000L, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0x8000000000000001L, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80);\n        testWriteEncodedLongHelper(0xfeffffffffffffffL, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe);\n\n        testWriteEncodedLongHelper(0x123456789ABCDEF0L, 0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12);\n    }", "signature": "void testWriteEncodedLong()", "full_signature": "@Test public void testWriteEncodedLong()", "class_method_signature": "DexDataWriterTest.testWriteEncodedLong()", "testcase": true, "constructor": false, "invocations": ["testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper", "testWriteEncodedLongHelper"]}, "focal_class": {"identifier": "DexDataWriter", "superclass": "extends BufferedOutputStream", "interfaces": "", "fields": [{"original_string": "private int filePosition;", "modifier": "private", "type": "int", "declarator": "filePosition", "var_name": "filePosition"}, {"original_string": "private byte[] tempBuf = new byte[8];", "modifier": "private", "type": "byte[]", "declarator": "tempBuf = new byte[8]", "var_name": "tempBuf"}, {"original_string": "private byte[] zeroBuf = new byte[3];", "modifier": "private", "type": "byte[]", "declarator": "zeroBuf = new byte[3]", "var_name": "zeroBuf"}], "methods": [{"identifier": "DexDataWriter", "parameters": "(@Nonnull OutputStream output, int filePosition)", "modifiers": "public", "return": "", "signature": " DexDataWriter(@Nonnull OutputStream output, int filePosition)", "full_signature": "public  DexDataWriter(@Nonnull OutputStream output, int filePosition)", "class_method_signature": "DexDataWriter.DexDataWriter(@Nonnull OutputStream output, int filePosition)", "testcase": false, "constructor": true}, {"identifier": "DexDataWriter", "parameters": "(@Nonnull OutputStream output, int filePosition, int bufferSize)", "modifiers": "public", "return": "", "signature": " DexDataWriter(@Nonnull OutputStream output, int filePosition, int bufferSize)", "full_signature": "public  DexDataWriter(@Nonnull OutputStream output, int filePosition, int bufferSize)", "class_method_signature": "DexDataWriter.DexDataWriter(@Nonnull OutputStream output, int filePosition, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "DexDataWriter.write(int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] b)", "full_signature": "@Override public void write(byte[] b)", "class_method_signature": "DexDataWriter.write(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] b, int off, int len)", "full_signature": "@Override public void write(byte[] b, int off, int len)", "class_method_signature": "DexDataWriter.write(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "writeLong", "parameters": "(long value)", "modifiers": "public", "return": "void", "signature": "void writeLong(long value)", "full_signature": "public void writeLong(long value)", "class_method_signature": "DexDataWriter.writeLong(long value)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(OutputStream out, int value)", "modifiers": "public static", "return": "void", "signature": "void writeInt(OutputStream out, int value)", "full_signature": "public static void writeInt(OutputStream out, int value)", "class_method_signature": "DexDataWriter.writeInt(OutputStream out, int value)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeInt(int value)", "full_signature": "public void writeInt(int value)", "class_method_signature": "DexDataWriter.writeInt(int value)", "testcase": false, "constructor": false}, {"identifier": "writeShort", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeShort(int value)", "full_signature": "public void writeShort(int value)", "class_method_signature": "DexDataWriter.writeShort(int value)", "testcase": false, "constructor": false}, {"identifier": "writeUshort", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeUshort(int value)", "full_signature": "public void writeUshort(int value)", "class_method_signature": "DexDataWriter.writeUshort(int value)", "testcase": false, "constructor": false}, {"identifier": "writeUbyte", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeUbyte(int value)", "full_signature": "public void writeUbyte(int value)", "class_method_signature": "DexDataWriter.writeUbyte(int value)", "testcase": false, "constructor": false}, {"identifier": "writeUleb128", "parameters": "(OutputStream out, int value)", "modifiers": "public static", "return": "void", "signature": "void writeUleb128(OutputStream out, int value)", "full_signature": "public static void writeUleb128(OutputStream out, int value)", "class_method_signature": "DexDataWriter.writeUleb128(OutputStream out, int value)", "testcase": false, "constructor": false}, {"identifier": "writeUleb128", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeUleb128(int value)", "full_signature": "public void writeUleb128(int value)", "class_method_signature": "DexDataWriter.writeUleb128(int value)", "testcase": false, "constructor": false}, {"identifier": "writeSleb128", "parameters": "(OutputStream out, int value)", "modifiers": "public static", "return": "void", "signature": "void writeSleb128(OutputStream out, int value)", "full_signature": "public static void writeSleb128(OutputStream out, int value)", "class_method_signature": "DexDataWriter.writeSleb128(OutputStream out, int value)", "testcase": false, "constructor": false}, {"identifier": "writeSleb128", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void writeSleb128(int value)", "full_signature": "public void writeSleb128(int value)", "class_method_signature": "DexDataWriter.writeSleb128(int value)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedValueHeader", "parameters": "(int valueType, int valueArg)", "modifiers": "public", "return": "void", "signature": "void writeEncodedValueHeader(int valueType, int valueArg)", "full_signature": "public void writeEncodedValueHeader(int valueType, int valueArg)", "class_method_signature": "DexDataWriter.writeEncodedValueHeader(int valueType, int valueArg)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedInt", "parameters": "(int valueType, int value)", "modifiers": "public", "return": "void", "signature": "void writeEncodedInt(int valueType, int value)", "full_signature": "public void writeEncodedInt(int valueType, int value)", "class_method_signature": "DexDataWriter.writeEncodedInt(int valueType, int value)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedLong", "parameters": "(int valueType, long value)", "modifiers": "public", "return": "void", "signature": "void writeEncodedLong(int valueType, long value)", "full_signature": "public void writeEncodedLong(int valueType, long value)", "class_method_signature": "DexDataWriter.writeEncodedLong(int valueType, long value)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedUint", "parameters": "(int valueType, int value)", "modifiers": "public", "return": "void", "signature": "void writeEncodedUint(int valueType, int value)", "full_signature": "public void writeEncodedUint(int valueType, int value)", "class_method_signature": "DexDataWriter.writeEncodedUint(int valueType, int value)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedFloat", "parameters": "(int valueType, float value)", "modifiers": "public", "return": "void", "signature": "void writeEncodedFloat(int valueType, float value)", "full_signature": "public void writeEncodedFloat(int valueType, float value)", "class_method_signature": "DexDataWriter.writeEncodedFloat(int valueType, float value)", "testcase": false, "constructor": false}, {"identifier": "writeRightZeroExtendedInt", "parameters": "(int valueType, int value)", "modifiers": "protected", "return": "void", "signature": "void writeRightZeroExtendedInt(int valueType, int value)", "full_signature": "protected void writeRightZeroExtendedInt(int valueType, int value)", "class_method_signature": "DexDataWriter.writeRightZeroExtendedInt(int valueType, int value)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedDouble", "parameters": "(int valueType, double value)", "modifiers": "public", "return": "void", "signature": "void writeEncodedDouble(int valueType, double value)", "full_signature": "public void writeEncodedDouble(int valueType, double value)", "class_method_signature": "DexDataWriter.writeEncodedDouble(int valueType, double value)", "testcase": false, "constructor": false}, {"identifier": "writeRightZeroExtendedLong", "parameters": "(int valueType, long value)", "modifiers": "protected", "return": "void", "signature": "void writeRightZeroExtendedLong(int valueType, long value)", "full_signature": "protected void writeRightZeroExtendedLong(int valueType, long value)", "class_method_signature": "DexDataWriter.writeRightZeroExtendedLong(int valueType, long value)", "testcase": false, "constructor": false}, {"identifier": "writeString", "parameters": "(String string)", "modifiers": "public", "return": "void", "signature": "void writeString(String string)", "full_signature": "public void writeString(String string)", "class_method_signature": "DexDataWriter.writeString(String string)", "testcase": false, "constructor": false}, {"identifier": "align", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void align()", "full_signature": "public void align()", "class_method_signature": "DexDataWriter.align()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPosition()", "full_signature": "public int getPosition()", "class_method_signature": "DexDataWriter.getPosition()", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/dexlib2/writer/DexDataWriter.java"}, "focal_method": {"identifier": "writeEncodedLong", "parameters": "(int valueType, long value)", "modifiers": "public", "return": "void", "body": "public void writeEncodedLong(int valueType, long value) throws IOException {\n        int index = 0;\n        if (value >= 0) {\n            while (value > 0x7f) {\n                tempBuf[index++] = (byte)value;\n                value >>= 8;\n            }\n        } else {\n            while (value < -0x80) {\n                tempBuf[index++] = (byte)value;\n                value >>= 8;\n            }\n        }\n        tempBuf[index++] = (byte)value;\n        writeEncodedValueHeader(valueType, index-1);\n        write(tempBuf, 0, index);\n    }", "signature": "void writeEncodedLong(int valueType, long value)", "full_signature": "public void writeEncodedLong(int valueType, long value)", "class_method_signature": "DexDataWriter.writeEncodedLong(int valueType, long value)", "testcase": false, "constructor": false, "invocations": ["writeEncodedValueHeader", "write"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}