{"test_class": {"identifier": "SOLTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/benchmarks/SOLTest.java"}, "test_case": {"identifier": "componentParallelismCouldBeSetThroughConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void componentParallelismCouldBeSetThroughConfig() {\n    StormBenchmark benchmark = new SOL();\n    Config config = new Config();\n    config.put(SOL.SPOUT_NUM, 4);\n    config.put(SOL.BOLT_NUM, 3);\n    config.put(SOL.TOPOLOGY_LEVEL, 3);\n    StormTopology topology = benchmark.getTopology(config);\n    assertThat(topology).isNotNull();\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, SOL.SPOUT_ID), 4);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, SOL.BOLT_ID + \"1\"), 3);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, SOL.BOLT_ID + \"2\"), 3);\n  }", "signature": "void componentParallelismCouldBeSetThroughConfig()", "full_signature": "@Test public void componentParallelismCouldBeSetThroughConfig()", "class_method_signature": "SOLTest.componentParallelismCouldBeSetThroughConfig()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getTopology", "isNotNull", "assertThat", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon"]}, "focal_class": {"identifier": "SOL", "superclass": "extends StormBenchmark", "interfaces": "", "fields": [{"original_string": "public static final String TOPOLOGY_LEVEL = \"topology.level\";", "modifier": "public static final", "type": "String", "declarator": "TOPOLOGY_LEVEL = \"topology.level\"", "var_name": "TOPOLOGY_LEVEL"}, {"original_string": "public static final String SPOUT_ID = \"spout\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_ID = \"spout\"", "var_name": "SPOUT_ID"}, {"original_string": "public static final String SPOUT_NUM = \"component.spout_num\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_NUM = \"component.spout_num\"", "var_name": "SPOUT_NUM"}, {"original_string": "public static final String BOLT_ID = \"bolt\";", "modifier": "public static final", "type": "String", "declarator": "BOLT_ID = \"bolt\"", "var_name": "BOLT_ID"}, {"original_string": "public static final String BOLT_NUM = \"component.bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "BOLT_NUM = \"component.bolt_num\"", "var_name": "BOLT_NUM"}, {"original_string": "public static final int DEFAULT_NUM_LEVELS = 2;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_NUM_LEVELS = 2", "var_name": "DEFAULT_NUM_LEVELS"}, {"original_string": "public static final int DEFAULT_SPOUT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SPOUT_NUM = 4", "var_name": "DEFAULT_SPOUT_NUM"}, {"original_string": "public static final int DEFAULT_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BOLT_NUM = 4", "var_name": "DEFAULT_BOLT_NUM"}, {"original_string": "private IRichSpout spout;", "modifier": "private", "type": "IRichSpout", "declarator": "spout", "var_name": "spout"}], "methods": [{"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "SOL.getTopology(Config config)", "testcase": false, "constructor": false}, {"identifier": "getMetricsCollector", "parameters": "(Config config, StormTopology topology)", "modifiers": "@Override public", "return": "IMetricsCollector", "signature": "IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "full_signature": "@Override public IMetricsCollector getMetricsCollector(Config config, StormTopology topology)", "class_method_signature": "SOL.getMetricsCollector(Config config, StormTopology topology)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/benchmarks/SOL.java"}, "focal_method": {"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n  public StormTopology getTopology(Config config) {\n    final int numLevels = BenchmarkUtils.getInt(config, TOPOLOGY_LEVEL, DEFAULT_NUM_LEVELS);\n    final int msgSize = BenchmarkUtils.getInt(config, RandomMessageSpout.MESSAGE_SIZE,\n            RandomMessageSpout.DEFAULT_MESSAGE_SIZE);\n    final int spoutNum = BenchmarkUtils.getInt(config, SPOUT_NUM, DEFAULT_SPOUT_NUM);\n    final int boltNum = BenchmarkUtils.getInt(config, BOLT_NUM, DEFAULT_BOLT_NUM);\n\n    spout = new RandomMessageSpout(msgSize, BenchmarkUtils.ifAckEnabled(config));\n\n    TopologyBuilder builder = new TopologyBuilder();\n\n    builder.setSpout(SPOUT_ID, spout, spoutNum);\n    builder.setBolt(BOLT_ID + 1, new ConstBolt(), boltNum)\n        .shuffleGrouping(SPOUT_ID);\n    for (int levelNum = 2; levelNum <= numLevels - 1; levelNum++) {\n      builder.setBolt(BOLT_ID + levelNum, new ConstBolt(), boltNum)\n        .shuffleGrouping(BOLT_ID + (levelNum - 1));\n    }\n   return builder.createTopology();\n  }", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "SOL.getTopology(Config config)", "testcase": false, "constructor": false, "invocations": ["getInt", "getInt", "getInt", "getInt", "ifAckEnabled", "setSpout", "shuffleGrouping", "setBolt", "shuffleGrouping", "setBolt", "createTopology"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}