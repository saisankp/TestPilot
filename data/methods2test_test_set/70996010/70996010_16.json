{"test_class": {"identifier": "RuleDatabaseTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseTest.java"}, "test_case": {"identifier": "testParseLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseLine() throws Exception {\n        // Standard format lines\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"0.0.0.0 example.com\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1 example.com\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"::1 example.com\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"example.com\"));\n        // Comments\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"example.com # foo\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"0.0.0.0 example.com # foo\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"::1 example.com # foo\"));\n        // Check lower casing\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"example.cOm\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1 example.cOm\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"::1 example.cOm\"));\n        // Space trimming\n        assertNull(RuleDatabase.parseLine(\" 127.0.0.1 example.com\"));\n        assertEquals(\"127.0.0.1.example.com\", RuleDatabase.parseLine(\"127.0.0.1.example.com \"));\n        assertEquals(\"::1.example.com\", RuleDatabase.parseLine(\"::1.example.com \"));\n        assertEquals(\"0.0.0.0.example.com\", RuleDatabase.parseLine(\"0.0.0.0.example.com \"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1 example.com \"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1 example.com\\t\"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1   example.com \"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"127.0.0.1\\t example.com \"));\n        assertEquals(\"example.com\", RuleDatabase.parseLine(\"::1\\t example.com \"));\n        // Space between values\n        // Invalid lines\n        assertNull(RuleDatabase.parseLine(\"127.0.0.1 \"));\n        assertNull(RuleDatabase.parseLine(\"127.0.0.1\"));\n        assertNull(RuleDatabase.parseLine(\"0.0.0.0\"));\n        assertNull(RuleDatabase.parseLine(\"0.0.0.0 \"));\n        assertNull(RuleDatabase.parseLine(\"::1 \"));\n        assertNull(RuleDatabase.parseLine(\"::1\"));\n        assertNull(RuleDatabase.parseLine(\"invalid example.com\"));\n        assertNull(RuleDatabase.parseLine(\"invalid\\texample.com\"));\n        assertNull(RuleDatabase.parseLine(\"invalid long line\"));\n        assertNull(RuleDatabase.parseLine(\"# comment line\"));\n        assertNull(RuleDatabase.parseLine(\"\"));\n        assertNull(RuleDatabase.parseLine(\"\\t\"));\n        assertNull(RuleDatabase.parseLine(\" \"));\n    }", "signature": "void testParseLine()", "full_signature": "@Test public void testParseLine()", "class_method_signature": "RuleDatabaseTest.testParseLine()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertNull", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertEquals", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine", "assertNull", "parseLine"]}, "focal_class": {"identifier": "RuleDatabase", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"RuleDatabase\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDatabase\"", "var_name": "TAG"}, {"original_string": "private static final RuleDatabase instance = new RuleDatabase();", "modifier": "private static final", "type": "RuleDatabase", "declarator": "instance = new RuleDatabase()", "var_name": "instance"}, {"original_string": "final AtomicReference<HashSet<String>> blockedHosts = new AtomicReference<>(new HashSet<String>());", "modifier": "final", "type": "AtomicReference<HashSet<String>>", "declarator": "blockedHosts = new AtomicReference<>(new HashSet<String>())", "var_name": "blockedHosts"}, {"original_string": "HashSet<String> nextBlockedHosts = null;", "modifier": "", "type": "HashSet<String>", "declarator": "nextBlockedHosts = null", "var_name": "nextBlockedHosts"}], "methods": [{"identifier": "RuleDatabase", "parameters": "()", "modifiers": "", "return": "", "signature": " RuleDatabase()", "full_signature": "  RuleDatabase()", "class_method_signature": "RuleDatabase.RuleDatabase()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "RuleDatabase", "signature": "RuleDatabase getInstance()", "full_signature": "public static RuleDatabase getInstance()", "class_method_signature": "RuleDatabase.getInstance()", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String line)", "modifiers": "@Nullable static", "return": "String", "signature": "String parseLine(String line)", "full_signature": "@Nullable static String parseLine(String line)", "class_method_signature": "RuleDatabase.parseLine(String line)", "testcase": false, "constructor": false}, {"identifier": "isBlocked", "parameters": "(String host)", "modifiers": "public", "return": "boolean", "signature": "boolean isBlocked(String host)", "full_signature": "public boolean isBlocked(String host)", "class_method_signature": "RuleDatabase.isBlocked(String host)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "RuleDatabase.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Context context)", "modifiers": "public synchronized", "return": "void", "signature": "void initialize(Context context)", "full_signature": "public synchronized void initialize(Context context)", "class_method_signature": "RuleDatabase.initialize(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadItem", "parameters": "(Context context, Configuration.Item item)", "modifiers": "private", "return": "void", "signature": "void loadItem(Context context, Configuration.Item item)", "full_signature": "private void loadItem(Context context, Configuration.Item item)", "class_method_signature": "RuleDatabase.loadItem(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "addHost", "parameters": "(Configuration.Item item, String host)", "modifiers": "private", "return": "void", "signature": "void addHost(Configuration.Item item, String host)", "full_signature": "private void addHost(Configuration.Item item, String host)", "class_method_signature": "RuleDatabase.addHost(Configuration.Item item, String host)", "testcase": false, "constructor": false}, {"identifier": "loadReader", "parameters": "(Configuration.Item item, Reader reader)", "modifiers": "", "return": "boolean", "signature": "boolean loadReader(Configuration.Item item, Reader reader)", "full_signature": " boolean loadReader(Configuration.Item item, Reader reader)", "class_method_signature": "RuleDatabase.loadReader(Configuration.Item item, Reader reader)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabase.java"}, "focal_method": {"identifier": "parseLine", "parameters": "(String line)", "modifiers": "@Nullable static", "return": "String", "body": "@Nullable\n    static String parseLine(String line) {\n        int endOfLine = line.indexOf('#');\n\n        if (endOfLine == -1)\n            endOfLine = line.length();\n\n        // Trim spaces\n        while (endOfLine > 0 && Character.isWhitespace(line.charAt(endOfLine - 1)))\n            endOfLine--;\n\n        // The line is empty.\n        if (endOfLine <= 0)\n            return null;\n\n        // Find beginning of host field\n        int startOfHost = 0;\n\n        if (line.regionMatches(0, \"127.0.0.1\", 0, 9) && (endOfLine <= 9 || Character.isWhitespace(line.charAt(9))))\n            startOfHost += 10;\n        else if (line.regionMatches(0, \"::1\", 0, 3) && (endOfLine <= 3 || Character.isWhitespace(line.charAt(3))))\n            startOfHost += 4;\n        else if (line.regionMatches(0, \"0.0.0.0\", 0, 7) && (endOfLine <= 7 || Character.isWhitespace(line.charAt(7))))\n            startOfHost += 8;\n\n        // Trim of space at the beginning of the host.\n        while (startOfHost < endOfLine && Character.isWhitespace(line.charAt(startOfHost)))\n            startOfHost++;\n\n        // Reject lines containing a space\n        for (int i = startOfHost; i < endOfLine; i++) {\n            if (Character.isWhitespace(line.charAt(i)))\n                return null;\n        }\n\n        if (startOfHost >= endOfLine)\n            return null;\n\n        return line.substring(startOfHost, endOfLine).toLowerCase(Locale.ENGLISH);\n    }", "signature": "String parseLine(String line)", "full_signature": "@Nullable static String parseLine(String line)", "class_method_signature": "RuleDatabase.parseLine(String line)", "testcase": false, "constructor": false, "invocations": ["indexOf", "length", "isWhitespace", "charAt", "regionMatches", "isWhitespace", "charAt", "regionMatches", "isWhitespace", "charAt", "regionMatches", "isWhitespace", "charAt", "isWhitespace", "charAt", "isWhitespace", "charAt", "toLowerCase", "substring"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}