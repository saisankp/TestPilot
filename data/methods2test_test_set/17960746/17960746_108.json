{"test_class": {"identifier": "Vector3fTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "jme3-core/src/test/java/com/jme3/math/Vector3fTest.java"}, "test_case": {"identifier": "testMultLocal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultLocal() {\n        final Vector3f target = new Vector3f(1.26f, 4.95f, 5.90f);\n        final Vector3f retval = target.multLocal(1.3f, 3.5f, 2.2f);\n\n        assertEquals(target, retval);\n\n        assertNotNull(retval);\n        assertEquals(1.6379999f, retval.x, 0.01f);\n        assertEquals(17.324999f, retval.y, 0.01f);\n        assertEquals(12.9800005f, retval.z, 0.01f);\n    }", "signature": "void testMultLocal()", "full_signature": "@Test public void testMultLocal()", "class_method_signature": "Vector3fTest.testMultLocal()", "testcase": true, "constructor": false, "invocations": ["multLocal", "assertEquals", "assertNotNull", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Vector3f", "superclass": "", "interfaces": "implements Savable, Cloneable, java.io.Serializable", "fields": [{"original_string": "static final long serialVersionUID = 1;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = 1", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger logger = Logger.getLogger(Vector3f.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(Vector3f.class.getName())", "var_name": "logger"}, {"original_string": "public final static Vector3f ZERO = new Vector3f(0, 0, 0);", "modifier": "public final static", "type": "Vector3f", "declarator": "ZERO = new Vector3f(0, 0, 0)", "var_name": "ZERO"}, {"original_string": "public final static Vector3f NAN = new Vector3f(Float.NaN, Float.NaN, Float.NaN);", "modifier": "public final static", "type": "Vector3f", "declarator": "NAN = new Vector3f(Float.NaN, Float.NaN, Float.NaN)", "var_name": "NAN"}, {"original_string": "public final static Vector3f UNIT_X = new Vector3f(1, 0, 0);", "modifier": "public final static", "type": "Vector3f", "declarator": "UNIT_X = new Vector3f(1, 0, 0)", "var_name": "UNIT_X"}, {"original_string": "public final static Vector3f UNIT_Y = new Vector3f(0, 1, 0);", "modifier": "public final static", "type": "Vector3f", "declarator": "UNIT_Y = new Vector3f(0, 1, 0)", "var_name": "UNIT_Y"}, {"original_string": "public final static Vector3f UNIT_Z = new Vector3f(0, 0, 1);", "modifier": "public final static", "type": "Vector3f", "declarator": "UNIT_Z = new Vector3f(0, 0, 1)", "var_name": "UNIT_Z"}, {"original_string": "public final static Vector3f UNIT_XYZ = new Vector3f(1, 1, 1);", "modifier": "public final static", "type": "Vector3f", "declarator": "UNIT_XYZ = new Vector3f(1, 1, 1)", "var_name": "UNIT_XYZ"}, {"original_string": "public final static Vector3f POSITIVE_INFINITY = new Vector3f(\n            Float.POSITIVE_INFINITY,\n            Float.POSITIVE_INFINITY,\n            Float.POSITIVE_INFINITY);", "modifier": "public final static", "type": "Vector3f", "declarator": "POSITIVE_INFINITY = new Vector3f(\n            Float.POSITIVE_INFINITY,\n            Float.POSITIVE_INFINITY,\n            Float.POSITIVE_INFINITY)", "var_name": "POSITIVE_INFINITY"}, {"original_string": "public final static Vector3f NEGATIVE_INFINITY = new Vector3f(\n            Float.NEGATIVE_INFINITY,\n            Float.NEGATIVE_INFINITY,\n            Float.NEGATIVE_INFINITY);", "modifier": "public final static", "type": "Vector3f", "declarator": "NEGATIVE_INFINITY = new Vector3f(\n            Float.NEGATIVE_INFINITY,\n            Float.NEGATIVE_INFINITY,\n            Float.NEGATIVE_INFINITY)", "var_name": "NEGATIVE_INFINITY"}, {"original_string": "public float x;", "modifier": "public", "type": "float", "declarator": "x", "var_name": "x"}, {"original_string": "public float y;", "modifier": "public", "type": "float", "declarator": "y", "var_name": "y"}, {"original_string": "public float z;", "modifier": "public", "type": "float", "declarator": "z", "var_name": "z"}], "methods": [{"identifier": "Vector3f", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector3f()", "full_signature": "public  Vector3f()", "class_method_signature": "Vector3f.Vector3f()", "testcase": false, "constructor": true}, {"identifier": "Vector3f", "parameters": "(float x, float y, float z)", "modifiers": "public", "return": "", "signature": " Vector3f(float x, float y, float z)", "full_signature": "public  Vector3f(float x, float y, float z)", "class_method_signature": "Vector3f.Vector3f(float x, float y, float z)", "testcase": false, "constructor": true}, {"identifier": "Vector3f", "parameters": "(Vector3f copy)", "modifiers": "public", "return": "", "signature": " Vector3f(Vector3f copy)", "full_signature": "public  Vector3f(Vector3f copy)", "class_method_signature": "Vector3f.Vector3f(Vector3f copy)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(float x, float y, float z)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f set(float x, float y, float z)", "full_signature": "public Vector3f set(float x, float y, float z)", "class_method_signature": "Vector3f.set(float x, float y, float z)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Vector3f vect)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f set(Vector3f vect)", "full_signature": "public Vector3f set(Vector3f vect)", "class_method_signature": "Vector3f.set(Vector3f vect)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f add(Vector3f vec)", "full_signature": "public Vector3f add(Vector3f vec)", "class_method_signature": "Vector3f.add(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Vector3f vec, Vector3f result)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f add(Vector3f vec, Vector3f result)", "full_signature": "public Vector3f add(Vector3f vec, Vector3f result)", "class_method_signature": "Vector3f.add(Vector3f vec, Vector3f result)", "testcase": false, "constructor": false}, {"identifier": "addLocal", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f addLocal(Vector3f vec)", "full_signature": "public Vector3f addLocal(Vector3f vec)", "class_method_signature": "Vector3f.addLocal(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(float addX, float addY, float addZ)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f add(float addX, float addY, float addZ)", "full_signature": "public Vector3f add(float addX, float addY, float addZ)", "class_method_signature": "Vector3f.add(float addX, float addY, float addZ)", "testcase": false, "constructor": false}, {"identifier": "addLocal", "parameters": "(float addX, float addY, float addZ)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f addLocal(float addX, float addY, float addZ)", "full_signature": "public Vector3f addLocal(float addX, float addY, float addZ)", "class_method_signature": "Vector3f.addLocal(float addX, float addY, float addZ)", "testcase": false, "constructor": false}, {"identifier": "scaleAdd", "parameters": "(float scalar, Vector3f add)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f scaleAdd(float scalar, Vector3f add)", "full_signature": "public Vector3f scaleAdd(float scalar, Vector3f add)", "class_method_signature": "Vector3f.scaleAdd(float scalar, Vector3f add)", "testcase": false, "constructor": false}, {"identifier": "scaleAdd", "parameters": "(float scalar, Vector3f mult, Vector3f add)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f scaleAdd(float scalar, Vector3f mult, Vector3f add)", "full_signature": "public Vector3f scaleAdd(float scalar, Vector3f mult, Vector3f add)", "class_method_signature": "Vector3f.scaleAdd(float scalar, Vector3f mult, Vector3f add)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "float", "signature": "float dot(Vector3f vec)", "full_signature": "public float dot(Vector3f vec)", "class_method_signature": "Vector3f.dot(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(Vector3f v)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f cross(Vector3f v)", "full_signature": "public Vector3f cross(Vector3f v)", "class_method_signature": "Vector3f.cross(Vector3f v)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(Vector3f v, Vector3f result)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f cross(Vector3f v, Vector3f result)", "full_signature": "public Vector3f cross(Vector3f v, Vector3f result)", "class_method_signature": "Vector3f.cross(Vector3f v, Vector3f result)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(float otherX, float otherY, float otherZ, Vector3f result)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f cross(float otherX, float otherY, float otherZ, Vector3f result)", "full_signature": "public Vector3f cross(float otherX, float otherY, float otherZ, Vector3f result)", "class_method_signature": "Vector3f.cross(float otherX, float otherY, float otherZ, Vector3f result)", "testcase": false, "constructor": false}, {"identifier": "crossLocal", "parameters": "(Vector3f v)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f crossLocal(Vector3f v)", "full_signature": "public Vector3f crossLocal(Vector3f v)", "class_method_signature": "Vector3f.crossLocal(Vector3f v)", "testcase": false, "constructor": false}, {"identifier": "crossLocal", "parameters": "(float otherX, float otherY, float otherZ)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f crossLocal(float otherX, float otherY, float otherZ)", "full_signature": "public Vector3f crossLocal(float otherX, float otherY, float otherZ)", "class_method_signature": "Vector3f.crossLocal(float otherX, float otherY, float otherZ)", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(Vector3f other)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f project(Vector3f other)", "full_signature": "public Vector3f project(Vector3f other)", "class_method_signature": "Vector3f.project(Vector3f other)", "testcase": false, "constructor": false}, {"identifier": "projectLocal", "parameters": "(Vector3f other)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f projectLocal(Vector3f other)", "full_signature": "public Vector3f projectLocal(Vector3f other)", "class_method_signature": "Vector3f.projectLocal(Vector3f other)", "testcase": false, "constructor": false}, {"identifier": "isUnitVector", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnitVector()", "full_signature": "public boolean isUnitVector()", "class_method_signature": "Vector3f.isUnitVector()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float length()", "full_signature": "public float length()", "class_method_signature": "Vector3f.length()", "testcase": false, "constructor": false}, {"identifier": "lengthSquared", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float lengthSquared()", "full_signature": "public float lengthSquared()", "class_method_signature": "Vector3f.lengthSquared()", "testcase": false, "constructor": false}, {"identifier": "distanceSquared", "parameters": "(Vector3f v)", "modifiers": "public", "return": "float", "signature": "float distanceSquared(Vector3f v)", "full_signature": "public float distanceSquared(Vector3f v)", "class_method_signature": "Vector3f.distanceSquared(Vector3f v)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Vector3f v)", "modifiers": "public", "return": "float", "signature": "float distance(Vector3f v)", "full_signature": "public float distance(Vector3f v)", "class_method_signature": "Vector3f.distance(Vector3f v)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(float scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f mult(float scalar)", "full_signature": "public Vector3f mult(float scalar)", "class_method_signature": "Vector3f.mult(float scalar)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(float scalar, Vector3f product)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f mult(float scalar, Vector3f product)", "full_signature": "public Vector3f mult(float scalar, Vector3f product)", "class_method_signature": "Vector3f.mult(float scalar, Vector3f product)", "testcase": false, "constructor": false}, {"identifier": "multLocal", "parameters": "(float scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f multLocal(float scalar)", "full_signature": "public Vector3f multLocal(float scalar)", "class_method_signature": "Vector3f.multLocal(float scalar)", "testcase": false, "constructor": false}, {"identifier": "multLocal", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f multLocal(Vector3f vec)", "full_signature": "public Vector3f multLocal(Vector3f vec)", "class_method_signature": "Vector3f.multLocal(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "multLocal", "parameters": "(float x, float y, float z)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f multLocal(float x, float y, float z)", "full_signature": "public Vector3f multLocal(float x, float y, float z)", "class_method_signature": "Vector3f.multLocal(float x, float y, float z)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f mult(Vector3f vec)", "full_signature": "public Vector3f mult(Vector3f vec)", "class_method_signature": "Vector3f.mult(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "mult", "parameters": "(Vector3f vec, Vector3f store)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f mult(Vector3f vec, Vector3f store)", "full_signature": "public Vector3f mult(Vector3f vec, Vector3f store)", "class_method_signature": "Vector3f.mult(Vector3f vec, Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(float scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f divide(float scalar)", "full_signature": "public Vector3f divide(float scalar)", "class_method_signature": "Vector3f.divide(float scalar)", "testcase": false, "constructor": false}, {"identifier": "divideLocal", "parameters": "(float scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f divideLocal(float scalar)", "full_signature": "public Vector3f divideLocal(float scalar)", "class_method_signature": "Vector3f.divideLocal(float scalar)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Vector3f scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f divide(Vector3f scalar)", "full_signature": "public Vector3f divide(Vector3f scalar)", "class_method_signature": "Vector3f.divide(Vector3f scalar)", "testcase": false, "constructor": false}, {"identifier": "divideLocal", "parameters": "(Vector3f scalar)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f divideLocal(Vector3f scalar)", "full_signature": "public Vector3f divideLocal(Vector3f scalar)", "class_method_signature": "Vector3f.divideLocal(Vector3f scalar)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f negate()", "full_signature": "public Vector3f negate()", "class_method_signature": "Vector3f.negate()", "testcase": false, "constructor": false}, {"identifier": "negateLocal", "parameters": "()", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f negateLocal()", "full_signature": "public Vector3f negateLocal()", "class_method_signature": "Vector3f.negateLocal()", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f subtract(Vector3f vec)", "full_signature": "public Vector3f subtract(Vector3f vec)", "class_method_signature": "Vector3f.subtract(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "subtractLocal", "parameters": "(Vector3f vec)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f subtractLocal(Vector3f vec)", "full_signature": "public Vector3f subtractLocal(Vector3f vec)", "class_method_signature": "Vector3f.subtractLocal(Vector3f vec)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Vector3f vec, Vector3f result)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f subtract(Vector3f vec, Vector3f result)", "full_signature": "public Vector3f subtract(Vector3f vec, Vector3f result)", "class_method_signature": "Vector3f.subtract(Vector3f vec, Vector3f result)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(float subtractX, float subtractY, float subtractZ)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f subtract(float subtractX, float subtractY, float subtractZ)", "full_signature": "public Vector3f subtract(float subtractX, float subtractY, float subtractZ)", "class_method_signature": "Vector3f.subtract(float subtractX, float subtractY, float subtractZ)", "testcase": false, "constructor": false}, {"identifier": "subtractLocal", "parameters": "(float subtractX, float subtractY, float subtractZ)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f subtractLocal(float subtractX, float subtractY, float subtractZ)", "full_signature": "public Vector3f subtractLocal(float subtractX, float subtractY, float subtractZ)", "class_method_signature": "Vector3f.subtractLocal(float subtractX, float subtractY, float subtractZ)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f normalize()", "full_signature": "public Vector3f normalize()", "class_method_signature": "Vector3f.normalize()", "testcase": false, "constructor": false}, {"identifier": "normalizeLocal", "parameters": "()", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f normalizeLocal()", "full_signature": "public Vector3f normalizeLocal()", "class_method_signature": "Vector3f.normalizeLocal()", "testcase": false, "constructor": false}, {"identifier": "maxLocal", "parameters": "(Vector3f other)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f maxLocal(Vector3f other)", "full_signature": "public Vector3f maxLocal(Vector3f other)", "class_method_signature": "Vector3f.maxLocal(Vector3f other)", "testcase": false, "constructor": false}, {"identifier": "minLocal", "parameters": "(Vector3f other)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f minLocal(Vector3f other)", "full_signature": "public Vector3f minLocal(Vector3f other)", "class_method_signature": "Vector3f.minLocal(Vector3f other)", "testcase": false, "constructor": false}, {"identifier": "zero", "parameters": "()", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f zero()", "full_signature": "public Vector3f zero()", "class_method_signature": "Vector3f.zero()", "testcase": false, "constructor": false}, {"identifier": "angleBetween", "parameters": "(Vector3f otherVector)", "modifiers": "public", "return": "float", "signature": "float angleBetween(Vector3f otherVector)", "full_signature": "public float angleBetween(Vector3f otherVector)", "class_method_signature": "Vector3f.angleBetween(Vector3f otherVector)", "testcase": false, "constructor": false}, {"identifier": "interpolateLocal", "parameters": "(Vector3f finalVec, float changeAmnt)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f interpolateLocal(Vector3f finalVec, float changeAmnt)", "full_signature": "public Vector3f interpolateLocal(Vector3f finalVec, float changeAmnt)", "class_method_signature": "Vector3f.interpolateLocal(Vector3f finalVec, float changeAmnt)", "testcase": false, "constructor": false}, {"identifier": "interpolateLocal", "parameters": "(Vector3f beginVec, Vector3f finalVec, float changeAmnt)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f interpolateLocal(Vector3f beginVec, Vector3f finalVec, float changeAmnt)", "full_signature": "public Vector3f interpolateLocal(Vector3f beginVec, Vector3f finalVec, float changeAmnt)", "class_method_signature": "Vector3f.interpolateLocal(Vector3f beginVec, Vector3f finalVec, float changeAmnt)", "testcase": false, "constructor": false}, {"identifier": "isValidVector", "parameters": "(Vector3f vector)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidVector(Vector3f vector)", "full_signature": "public static boolean isValidVector(Vector3f vector)", "class_method_signature": "Vector3f.isValidVector(Vector3f vector)", "testcase": false, "constructor": false}, {"identifier": "generateOrthonormalBasis", "parameters": "(Vector3f u, Vector3f v, Vector3f w)", "modifiers": "public static", "return": "void", "signature": "void generateOrthonormalBasis(Vector3f u, Vector3f v, Vector3f w)", "full_signature": "public static void generateOrthonormalBasis(Vector3f u, Vector3f v, Vector3f w)", "class_method_signature": "Vector3f.generateOrthonormalBasis(Vector3f u, Vector3f v, Vector3f w)", "testcase": false, "constructor": false}, {"identifier": "generateComplementBasis", "parameters": "(Vector3f u, Vector3f v,\n            Vector3f w)", "modifiers": "public static", "return": "void", "signature": "void generateComplementBasis(Vector3f u, Vector3f v,\n            Vector3f w)", "full_signature": "public static void generateComplementBasis(Vector3f u, Vector3f v,\n            Vector3f w)", "class_method_signature": "Vector3f.generateComplementBasis(Vector3f u, Vector3f v,\n            Vector3f w)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Vector3f", "signature": "Vector3f clone()", "full_signature": "@Override public Vector3f clone()", "class_method_signature": "Vector3f.clone()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(float[] floats)", "modifiers": "public", "return": "float[]", "signature": "float[] toArray(float[] floats)", "full_signature": "public float[] toArray(float[] floats)", "class_method_signature": "Vector3f.toArray(float[] floats)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Vector3f.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isSimilar", "parameters": "(Vector3f other, float epsilon)", "modifiers": "public", "return": "boolean", "signature": "boolean isSimilar(Vector3f other, float epsilon)", "full_signature": "public boolean isSimilar(Vector3f other, float epsilon)", "class_method_signature": "Vector3f.isSimilar(Vector3f other, float epsilon)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Vector3f.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vector3f.toString()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(JmeExporter e)", "modifiers": "@Override public", "return": "void", "signature": "void write(JmeExporter e)", "full_signature": "@Override public void write(JmeExporter e)", "class_method_signature": "Vector3f.write(JmeExporter e)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(JmeImporter e)", "modifiers": "@Override public", "return": "void", "signature": "void read(JmeImporter e)", "full_signature": "@Override public void read(JmeImporter e)", "class_method_signature": "Vector3f.read(JmeImporter e)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getX()", "full_signature": "public float getX()", "class_method_signature": "Vector3f.getX()", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(float x)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f setX(float x)", "full_signature": "public Vector3f setX(float x)", "class_method_signature": "Vector3f.setX(float x)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getY()", "full_signature": "public float getY()", "class_method_signature": "Vector3f.getY()", "testcase": false, "constructor": false}, {"identifier": "setY", "parameters": "(float y)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f setY(float y)", "full_signature": "public Vector3f setY(float y)", "class_method_signature": "Vector3f.setY(float y)", "testcase": false, "constructor": false}, {"identifier": "getZ", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getZ()", "full_signature": "public float getZ()", "class_method_signature": "Vector3f.getZ()", "testcase": false, "constructor": false}, {"identifier": "setZ", "parameters": "(float z)", "modifiers": "public", "return": "Vector3f", "signature": "Vector3f setZ(float z)", "full_signature": "public Vector3f setZ(float z)", "class_method_signature": "Vector3f.setZ(float z)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "float", "signature": "float get(int index)", "full_signature": "public float get(int index)", "class_method_signature": "Vector3f.get(int index)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, float value)", "modifiers": "public", "return": "void", "signature": "void set(int index, float value)", "full_signature": "public void set(int index, float value)", "class_method_signature": "Vector3f.set(int index, float value)", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/math/Vector3f.java"}, "focal_method": {"identifier": "multLocal", "parameters": "(float scalar)", "modifiers": "public", "return": "Vector3f", "body": "public Vector3f multLocal(float scalar) {\n        x *= scalar;\n        y *= scalar;\n        z *= scalar;\n        return this;\n    }", "signature": "Vector3f multLocal(float scalar)", "full_signature": "public Vector3f multLocal(float scalar)", "class_method_signature": "Vector3f.multLocal(float scalar)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}