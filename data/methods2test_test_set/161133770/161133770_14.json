{"test_class": {"identifier": "StoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Subscription> allSubscriptions;", "modifier": "private", "type": "List<Subscription>", "declarator": "allSubscriptions", "var_name": "allSubscriptions"}], "file": "common/src/test/java/feast/common/models/StoreTest.java"}, "test_case": {"identifier": "shouldSubscribeToFeatureSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSubscribeToFeatureSet() {\n    allSubscriptions = allSubscriptions.subList(2, 4);\n    // Case: excluded flag = true\n    boolean actual1 = Store.isSubscribedToFeatureSet(allSubscriptions, \"project1\", \"fs_1\");\n    boolean expected1 = false;\n\n    // Case: excluded flag = false\n    boolean actual2 = Store.isSubscribedToFeatureSet(allSubscriptions, \"project1\", \"fs_2\");\n    boolean expected2 = true;\n\n    // Case: featureset does not exist\n    boolean actual3 =\n        Store.isSubscribedToFeatureSet(allSubscriptions, \"project1\", \"fs_nonexistent\");\n    boolean expected3 = false;\n\n    assertThat(actual1, equalTo(expected1));\n    assertThat(actual2, equalTo(expected2));\n    assertThat(actual3, equalTo(expected3));\n  }", "signature": "void shouldSubscribeToFeatureSet()", "full_signature": "@Test public void shouldSubscribeToFeatureSet()", "class_method_signature": "StoreTest.shouldSubscribeToFeatureSet()", "testcase": true, "constructor": false, "invocations": ["subList", "isSubscribedToFeatureSet", "isSubscribedToFeatureSet", "isSubscribedToFeatureSet", "assertThat", "equalTo", "assertThat", "equalTo", "assertThat", "equalTo"]}, "focal_class": {"identifier": "Store", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseSubFromStr", "parameters": "(String subscriptions)", "modifiers": "public static", "return": "List<Subscription>", "signature": "List<Subscription> parseSubFromStr(String subscriptions)", "full_signature": "public static List<Subscription> parseSubFromStr(String subscriptions)", "class_method_signature": "Store.parseSubFromStr(String subscriptions)", "testcase": false, "constructor": false}, {"identifier": "parseSubFromStrWithoutExclusions", "parameters": "(String subscriptions)", "modifiers": "public static", "return": "List<Subscription>", "signature": "List<Subscription> parseSubFromStrWithoutExclusions(String subscriptions)", "full_signature": "public static List<Subscription> parseSubFromStrWithoutExclusions(String subscriptions)", "class_method_signature": "Store.parseSubFromStrWithoutExclusions(String subscriptions)", "testcase": false, "constructor": false}, {"identifier": "parseSubscriptionFrom", "parameters": "(Subscription subscription)", "modifiers": "public static", "return": "String", "signature": "String parseSubscriptionFrom(Subscription subscription)", "full_signature": "public static String parseSubscriptionFrom(Subscription subscription)", "class_method_signature": "Store.parseSubscriptionFrom(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "convertStringToSubscription", "parameters": "(String subscription)", "modifiers": "public static", "return": "Subscription", "signature": "Subscription convertStringToSubscription(String subscription)", "full_signature": "public static Subscription convertStringToSubscription(String subscription)", "class_method_signature": "Store.convertStringToSubscription(String subscription)", "testcase": false, "constructor": false}, {"identifier": "isSubscribedToFeatureSet", "parameters": "(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "full_signature": "public static boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "class_method_signature": "Store.isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "testcase": false, "constructor": false}, {"identifier": "getProjectPattern", "parameters": "(Subscription subscription)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern getProjectPattern(Subscription subscription)", "full_signature": "private static Pattern getProjectPattern(Subscription subscription)", "class_method_signature": "Store.getProjectPattern(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "getNamePattern", "parameters": "(Subscription subscription)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern getNamePattern(Subscription subscription)", "full_signature": "private static Pattern getNamePattern(Subscription subscription)", "class_method_signature": "Store.getNamePattern(Subscription subscription)", "testcase": false, "constructor": false}], "file": "common/src/main/java/feast/common/models/Store.java"}, "focal_method": {"identifier": "isSubscribedToFeatureSet", "parameters": "(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName) {\n    // Case 1: Highest priority check, to exclude all matching subscriptions with excluded flag =\n    // true\n    for (Subscription sub : subscriptions) {\n      // If configuration missing, fail\n      if (sub.getProject().isEmpty() || sub.getName().isEmpty()) {\n        throw new IllegalArgumentException(\n            String.format(\"Subscription is missing arguments: %s\", sub.toString()));\n      }\n      // Match feature set name to pattern\n      Pattern patternName = getNamePattern(sub);\n      Pattern patternProject = getProjectPattern(sub);\n      // SubCase: Project name and feature set name matches and excluded flag is true\n      if (patternProject.matcher(projectName).matches()\n          && patternName.matcher(featureSetName).matches()\n          && sub.getExclude()) {\n        return false;\n      }\n    }\n    // Case 2: Featureset is not excluded, check if it is included in the current subscriptions\n    // filteredSubscriptions only contain subscriptions with excluded flag = false\n    List<Subscription> filteredSubscriptions =\n        subscriptions.stream().filter(sub -> !sub.getExclude()).collect(Collectors.toList());\n\n    for (Subscription filteredSub : filteredSubscriptions) {\n      // Match feature set name to pattern\n      Pattern patternName = getNamePattern(filteredSub);\n      Pattern patternProject = getProjectPattern(filteredSub);\n      // SubCase: Project name and feature set name matches\n      if (patternProject.matcher(projectName).matches()\n          && patternName.matcher(featureSetName).matches()) {\n        return true;\n      }\n    }\n    return false;\n  }", "signature": "boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "full_signature": "public static boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "class_method_signature": "Store.isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getProject", "isEmpty", "getName", "format", "toString", "getNamePattern", "getProjectPattern", "matches", "matcher", "matches", "matcher", "getExclude", "collect", "filter", "stream", "getExclude", "toList", "getNamePattern", "getProjectPattern", "matches", "matcher", "matches", "matcher"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}