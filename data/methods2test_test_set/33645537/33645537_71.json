{"test_class": {"identifier": "IsRotationUsingIsSubstringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IsRotationUsingIsSubstring isRotation;", "modifier": "private", "type": "IsRotationUsingIsSubstring", "declarator": "isRotation", "var_name": "isRotation"}], "file": "algs/src/test/java/com/github/pedrovgs/problem56/IsRotationUsingIsSubstringTest.java"}, "test_case": {"identifier": "shouldReturnTrueIfS2IsNotRotationOfS1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnTrueIfS2IsNotRotationOfS1() {\n    String s1 = \"waterbottle\";\n    String s2 = \"erbottlewat\";\n\n    boolean result = isRotation.check(s1, s2);\n\n    assertTrue(result);\n  }", "signature": "void shouldReturnTrueIfS2IsNotRotationOfS1()", "full_signature": "@Test public void shouldReturnTrueIfS2IsNotRotationOfS1()", "class_method_signature": "IsRotationUsingIsSubstringTest.shouldReturnTrueIfS2IsNotRotationOfS1()", "testcase": true, "constructor": false, "invocations": ["check", "assertTrue"]}, "focal_class": {"identifier": "IsRotationUsingIsSubstring", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "check", "parameters": "(String s1, String s2)", "modifiers": "public", "return": "boolean", "signature": "boolean check(String s1, String s2)", "full_signature": "public boolean check(String s1, String s2)", "class_method_signature": "IsRotationUsingIsSubstring.check(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "isSubstring", "parameters": "(String s1s2, String s2)", "modifiers": "private", "return": "boolean", "signature": "boolean isSubstring(String s1s2, String s2)", "full_signature": "private boolean isSubstring(String s1s2, String s2)", "class_method_signature": "IsRotationUsingIsSubstring.isSubstring(String s1s2, String s2)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(String s1, String s2)", "modifiers": "private", "return": "void", "signature": "void validateInput(String s1, String s2)", "full_signature": "private void validateInput(String s1, String s2)", "class_method_signature": "IsRotationUsingIsSubstring.validateInput(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "haveSameLength", "parameters": "(String s1, String s2)", "modifiers": "private", "return": "boolean", "signature": "boolean haveSameLength(String s1, String s2)", "full_signature": "private boolean haveSameLength(String s1, String s2)", "class_method_signature": "IsRotationUsingIsSubstring.haveSameLength(String s1, String s2)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem56/IsRotationUsingIsSubstring.java"}, "focal_method": {"identifier": "check", "parameters": "(String s1, String s2)", "modifiers": "public", "return": "boolean", "body": "public boolean check(String s1, String s2) {\n    validateInput(s1, s2);\n\n    if (haveSameLength(s1, s2)) {\n      String s1s1 = s1 + s1;\n      return isSubstring(s1s1, s2);\n    }\n    return false;\n  }", "signature": "boolean check(String s1, String s2)", "full_signature": "public boolean check(String s1, String s2)", "class_method_signature": "IsRotationUsingIsSubstring.check(String s1, String s2)", "testcase": false, "constructor": false, "invocations": ["validateInput", "haveSameLength", "isSubstring"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}