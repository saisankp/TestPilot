{"test_class": {"identifier": "TensorFlowServiceSpecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ComponentTestCommons testCommons = \n      new ComponentTestCommons(TensorFlowRole.PRIMARY_WORKER);", "modifier": "private", "type": "ComponentTestCommons", "declarator": "testCommons = \n      new ComponentTestCommons(TensorFlowRole.PRIMARY_WORKER)", "var_name": "testCommons"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/TensorFlowServiceSpecTest.java"}, "test_case": {"identifier": "testTensorFlowhServiceSpec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTensorFlowhServiceSpec() throws IOException {\n    testCommons = new ComponentTestCommons(TensorFlowRole.PRIMARY_WORKER);\n    testCommons.setupTensorFlow();\n    \n    TensorFlowRunJobParameters parameters = new TensorFlowRunJobParameters();\n    parameters.setWorkerResource(testCommons.resource);\n    parameters.setName(\"testJobName\");\n    parameters.setNumWorkers(1);\n    parameters.setWorkerLaunchCmd(\"testWorkerLaunchCommand\");\n\n    MockClientContext mockClientContext = new MockClientContext(DEFAULT_JOB_NAME);\n    FileSystemOperations fsOperations = new FileSystemOperations(mockClientContext);\n\n    HadoopEnvironmentSetup hadoopEnv = new HadoopEnvironmentSetup(mockClientContext, fsOperations);\n\n    TensorFlowLaunchCommandFactory launchCommandFactory = \n        new TensorFlowLaunchCommandFactory(hadoopEnv, parameters, new Configuration());\n\n    Localizer localizer = \n        new Localizer(fsOperations, mockClientContext.getRemoteDirectoryManager(), parameters);\n\n    TensorFlowServiceSpec tensorFlowhServiceSpec = \n        new TensorFlowServiceSpec(parameters, mockClientContext, fsOperations, \n            launchCommandFactory, localizer);\n\n    ServiceWrapper serviceWrapper = tensorFlowhServiceSpec.create();\n    Service service = serviceWrapper.getService();\n\n    assertNotNull(\"Service must not be null!\", service);\n    List<Component> components = service.getComponents();\n    assertEquals(\"Number of components is not correct!\", 1, components.size());\n    \n    Component component = components.get(0);\n    assertEquals(1L, (long) component.getNumberOfContainers());\n    assertEquals(\"./run-PRIMARY_WORKER.sh\", component.getLaunchCommand());\n  }", "signature": "void testTensorFlowhServiceSpec()", "full_signature": "@Test public void testTensorFlowhServiceSpec()", "class_method_signature": "TensorFlowServiceSpecTest.testTensorFlowhServiceSpec()", "testcase": true, "constructor": false, "invocations": ["setupTensorFlow", "setWorkerResource", "setName", "setNumWorkers", "setWorkerLaunchCmd", "getRemoteDirectoryManager", "create", "getService", "assertNotNull", "getComponents", "assertEquals", "size", "get", "assertEquals", "getNumberOfContainers", "assertEquals", "getLaunchCommand"]}, "focal_class": {"identifier": "TensorFlowServiceSpec", "superclass": "extends AbstractServiceSpec", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(TensorFlowServiceSpec.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(TensorFlowServiceSpec.class)", "var_name": "LOG"}, {"original_string": "private final TensorFlowRunJobParameters tensorFlowParameters;", "modifier": "private final", "type": "TensorFlowRunJobParameters", "declarator": "tensorFlowParameters", "var_name": "tensorFlowParameters"}], "methods": [{"identifier": "TensorFlowServiceSpec", "parameters": "(TensorFlowRunJobParameters parameters,\n      ClientContext clientContext, FileSystemOperations fsOperations,\n      TensorFlowLaunchCommandFactory launchCommandFactory,\n      Localizer localizer)", "modifiers": "public", "return": "", "signature": " TensorFlowServiceSpec(TensorFlowRunJobParameters parameters,\n      ClientContext clientContext, FileSystemOperations fsOperations,\n      TensorFlowLaunchCommandFactory launchCommandFactory,\n      Localizer localizer)", "full_signature": "public  TensorFlowServiceSpec(TensorFlowRunJobParameters parameters,\n      ClientContext clientContext, FileSystemOperations fsOperations,\n      TensorFlowLaunchCommandFactory launchCommandFactory,\n      Localizer localizer)", "class_method_signature": "TensorFlowServiceSpec.TensorFlowServiceSpec(TensorFlowRunJobParameters parameters,\n      ClientContext clientContext, FileSystemOperations fsOperations,\n      TensorFlowLaunchCommandFactory launchCommandFactory,\n      Localizer localizer)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "ServiceWrapper", "signature": "ServiceWrapper create()", "full_signature": "@Override public ServiceWrapper create()", "class_method_signature": "TensorFlowServiceSpec.create()", "testcase": false, "constructor": false}, {"identifier": "createTensorBoardComponent", "parameters": "(ServiceWrapper serviceWrapper)", "modifiers": "private", "return": "void", "signature": "void createTensorBoardComponent(ServiceWrapper serviceWrapper)", "full_signature": "private void createTensorBoardComponent(ServiceWrapper serviceWrapper)", "class_method_signature": "TensorFlowServiceSpec.createTensorBoardComponent(ServiceWrapper serviceWrapper)", "testcase": false, "constructor": false}, {"identifier": "addPsComponent", "parameters": "(ServiceWrapper serviceWrapper)", "modifiers": "private", "return": "void", "signature": "void addPsComponent(ServiceWrapper serviceWrapper)", "full_signature": "private void addPsComponent(ServiceWrapper serviceWrapper)", "class_method_signature": "TensorFlowServiceSpec.addPsComponent(ServiceWrapper serviceWrapper)", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/TensorFlowServiceSpec.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "ServiceWrapper", "body": "@Override\n  public ServiceWrapper create() throws IOException {\n    LOG.info(\"Creating TensorFlow service spec\");\n    ServiceWrapper serviceWrapper = createServiceSpecWrapper();\n\n    if (tensorFlowParameters.getNumWorkers() > 0) {\n      addWorkerComponents(serviceWrapper, Framework.TENSORFLOW);\n    }\n\n    if (tensorFlowParameters.getNumPS() > 0) {\n      addPsComponent(serviceWrapper);\n    }\n\n    if (tensorFlowParameters.isTensorboardEnabled()) {\n      createTensorBoardComponent(serviceWrapper);\n    }\n\n    // After all components added, handle quicklinks\n    handleQuicklinks(serviceWrapper.getService());\n\n    return serviceWrapper;\n  }", "signature": "ServiceWrapper create()", "full_signature": "@Override public ServiceWrapper create()", "class_method_signature": "TensorFlowServiceSpec.create()", "testcase": false, "constructor": false, "invocations": ["info", "createServiceSpecWrapper", "getNumWorkers", "addWorkerComponents", "getNumPS", "addPsComponent", "isTensorboardEnabled", "createTensorBoardComponent", "handleQuicklinks", "getService"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}