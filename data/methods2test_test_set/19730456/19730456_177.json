{"test_class": {"identifier": "AccountStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/core/AccountStateTest.java"}, "test_case": {"identifier": "testGetEncoded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEncoded() {\n        String expected = \"f85e809\"\n                + \"a0100000000000000000000000000000000000000000000000000\"\n                + \"a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"\n                + \"a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n        AccountState acct = new AccountState(BigInteger.ZERO, BigInteger.valueOf(2).pow(200));\n        assertEquals(expected, Hex.toHexString(acct.getEncoded()));\n    }", "signature": "void testGetEncoded()", "full_signature": "@Test public void testGetEncoded()", "class_method_signature": "AccountStateTest.testGetEncoded()", "testcase": true, "constructor": false, "invocations": ["pow", "valueOf", "assertEquals", "toHexString", "getEncoded"]}, "focal_class": {"identifier": "AccountState", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] rlpEncoded;", "modifier": "private", "type": "byte[]", "declarator": "rlpEncoded", "var_name": "rlpEncoded"}, {"original_string": "private final BigInteger nonce;", "modifier": "private final", "type": "BigInteger", "declarator": "nonce", "var_name": "nonce"}, {"original_string": "private final BigInteger balance;", "modifier": "private final", "type": "BigInteger", "declarator": "balance", "var_name": "balance"}, {"original_string": "private final byte[] stateRoot;", "modifier": "private final", "type": "byte[]", "declarator": "stateRoot", "var_name": "stateRoot"}, {"original_string": "private final byte[] codeHash;", "modifier": "private final", "type": "byte[]", "declarator": "codeHash", "var_name": "codeHash"}], "methods": [{"identifier": "AccountState", "parameters": "(SystemProperties config)", "modifiers": "public", "return": "", "signature": " AccountState(SystemProperties config)", "full_signature": "public  AccountState(SystemProperties config)", "class_method_signature": "AccountState.AccountState(SystemProperties config)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(BigInteger nonce, BigInteger balance)", "modifiers": "public", "return": "", "signature": " AccountState(BigInteger nonce, BigInteger balance)", "full_signature": "public  AccountState(BigInteger nonce, BigInteger balance)", "class_method_signature": "AccountState.AccountState(BigInteger nonce, BigInteger balance)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(BigInteger nonce, BigInteger balance, byte[] stateRoot, byte[] codeHash)", "modifiers": "public", "return": "", "signature": " AccountState(BigInteger nonce, BigInteger balance, byte[] stateRoot, byte[] codeHash)", "full_signature": "public  AccountState(BigInteger nonce, BigInteger balance, byte[] stateRoot, byte[] codeHash)", "class_method_signature": "AccountState.AccountState(BigInteger nonce, BigInteger balance, byte[] stateRoot, byte[] codeHash)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(byte[] rlpData)", "modifiers": "public", "return": "", "signature": " AccountState(byte[] rlpData)", "full_signature": "public  AccountState(byte[] rlpData)", "class_method_signature": "AccountState.AccountState(byte[] rlpData)", "testcase": false, "constructor": true}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getNonce()", "full_signature": "public BigInteger getNonce()", "class_method_signature": "AccountState.getNonce()", "testcase": false, "constructor": false}, {"identifier": "withNonce", "parameters": "(BigInteger nonce)", "modifiers": "public", "return": "AccountState", "signature": "AccountState withNonce(BigInteger nonce)", "full_signature": "public AccountState withNonce(BigInteger nonce)", "class_method_signature": "AccountState.withNonce(BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "getStateRoot", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getStateRoot()", "full_signature": "public byte[] getStateRoot()", "class_method_signature": "AccountState.getStateRoot()", "testcase": false, "constructor": false}, {"identifier": "withStateRoot", "parameters": "(byte[] stateRoot)", "modifiers": "public", "return": "AccountState", "signature": "AccountState withStateRoot(byte[] stateRoot)", "full_signature": "public AccountState withStateRoot(byte[] stateRoot)", "class_method_signature": "AccountState.withStateRoot(byte[] stateRoot)", "testcase": false, "constructor": false}, {"identifier": "withIncrementedNonce", "parameters": "()", "modifiers": "public", "return": "AccountState", "signature": "AccountState withIncrementedNonce()", "full_signature": "public AccountState withIncrementedNonce()", "class_method_signature": "AccountState.withIncrementedNonce()", "testcase": false, "constructor": false}, {"identifier": "getCodeHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getCodeHash()", "full_signature": "public byte[] getCodeHash()", "class_method_signature": "AccountState.getCodeHash()", "testcase": false, "constructor": false}, {"identifier": "withCodeHash", "parameters": "(byte[] codeHash)", "modifiers": "public", "return": "AccountState", "signature": "AccountState withCodeHash(byte[] codeHash)", "full_signature": "public AccountState withCodeHash(byte[] codeHash)", "class_method_signature": "AccountState.withCodeHash(byte[] codeHash)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance()", "full_signature": "public BigInteger getBalance()", "class_method_signature": "AccountState.getBalance()", "testcase": false, "constructor": false}, {"identifier": "withBalanceIncrement", "parameters": "(BigInteger value)", "modifiers": "public", "return": "AccountState", "signature": "AccountState withBalanceIncrement(BigInteger value)", "full_signature": "public AccountState withBalanceIncrement(BigInteger value)", "class_method_signature": "AccountState.withBalanceIncrement(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncoded()", "full_signature": "public byte[] getEncoded()", "class_method_signature": "AccountState.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "isContractExist", "parameters": "(BlockchainConfig blockchainConfig)", "modifiers": "public", "return": "boolean", "signature": "boolean isContractExist(BlockchainConfig blockchainConfig)", "full_signature": "public boolean isContractExist(BlockchainConfig blockchainConfig)", "class_method_signature": "AccountState.isContractExist(BlockchainConfig blockchainConfig)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "AccountState.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "AccountState.toString()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/AccountState.java"}, "focal_method": {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] getEncoded() {\n        if (rlpEncoded == null) {\n            byte[] nonce = RLP.encodeBigInteger(this.nonce);\n            byte[] balance = RLP.encodeBigInteger(this.balance);\n            byte[] stateRoot = RLP.encodeElement(this.stateRoot);\n            byte[] codeHash = RLP.encodeElement(this.codeHash);\n            this.rlpEncoded = RLP.encodeList(nonce, balance, stateRoot, codeHash);\n        }\n        return rlpEncoded;\n    }", "signature": "byte[] getEncoded()", "full_signature": "public byte[] getEncoded()", "class_method_signature": "AccountState.getEncoded()", "testcase": false, "constructor": false, "invocations": ["encodeBigInteger", "encodeBigInteger", "encodeElement", "encodeElement", "encodeList"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}