{"test_class": {"identifier": "ComparisonTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/ComparisonTest.java"}, "test_case": {"identifier": "ks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ks() {\n        Random r = new Random();\n        double mean = 0;\n        double s2 = 0;\n        for (int i = 0; i < 10; i++) {\n            MergingDigest d1 = new MergingDigest(100);\n            MergingDigest d2 = new MergingDigest(100);\n            MergingDigest d3 = new MergingDigest(100);\n            for (int j = 0; j < 1000000; j++) {\n                d1.add(r.nextGaussian());\n                d2.add(r.nextGaussian() + 1);\n                d3.add(r.nextGaussian());\n            }\n            double ks = Comparison.ks(d1, d2);\n            // this value is slightly lower than it should be (by about 0.9)\n            assertEquals(269.5, ks, 3);\n            double newMean = mean + (ks - mean) / (i + 1);\n            s2 += (ks - mean) * (ks - newMean);\n            mean = newMean;\n\n            assertEquals(0, Comparison.ks(d1, d3), 3.5);\n        }\n\n        System.out.printf(\"%.5f %.5f\\n\", mean, Math.sqrt(s2 / 10));\n    }", "signature": "void ks()", "full_signature": "@Test public void ks()", "class_method_signature": "ComparisonTest.ks()", "testcase": true, "constructor": false, "invocations": ["add", "nextGaussian", "add", "nextGaussian", "add", "nextGaussian", "ks", "assertEquals", "assertEquals", "ks", "printf", "sqrt"]}, "focal_class": {"identifier": "Comparison", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareChi2", "parameters": "(TDigest dist1, TDigest dist2, double[] qCuts)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "class_method_signature": "Comparison.compareChi2(TDigest dist1, TDigest dist2, double[] qCuts)", "testcase": false, "constructor": false}, {"identifier": "compareChi2", "parameters": "(Histogram dist1, Histogram dist2)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double compareChi2(Histogram dist1, Histogram dist2)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double compareChi2(Histogram dist1, Histogram dist2)", "class_method_signature": "Comparison.compareChi2(Histogram dist1, Histogram dist2)", "testcase": false, "constructor": false}, {"identifier": "llr", "parameters": "(double[][] count)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double llr(double[][] count)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double llr(double[][] count)", "class_method_signature": "Comparison.llr(double[][] count)", "testcase": false, "constructor": false}, {"identifier": "ks", "parameters": "(TDigest d1, TDigest d2)", "modifiers": "public static", "return": "double", "signature": "double ks(TDigest d1, TDigest d2)", "full_signature": "public static double ks(TDigest d1, TDigest d2)", "class_method_signature": "Comparison.ks(TDigest d1, TDigest d2)", "testcase": false, "constructor": false}, {"identifier": "maxDiff", "parameters": "(TDigest d1, TDigest d2, double diff, double x1)", "modifiers": "private static", "return": "double", "signature": "double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "full_signature": "private static double maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "class_method_signature": "Comparison.maxDiff(TDigest d1, TDigest d2, double diff, double x1)", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(TDigest d, Iterator<Centroid> ix, double x)", "modifiers": "private static", "return": "double", "signature": "double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "full_signature": "private static double nextValue(TDigest d, Iterator<Centroid> ix, double x)", "class_method_signature": "Comparison.nextValue(TDigest d, Iterator<Centroid> ix, double x)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/Comparison.java"}, "focal_method": {"identifier": "ks", "parameters": "(TDigest d1, TDigest d2)", "modifiers": "public static", "return": "double", "body": "public static double ks(TDigest d1, TDigest d2) {\n        Iterator<Centroid> ix1 = d1.centroids().iterator();\n        Iterator<Centroid> ix2 = d2.centroids().iterator();\n\n        double diff = 0;\n\n        double x1 = d1.getMin();\n        double x2 = d2.getMin();\n\n        while (x1 <= d1.getMax() && x2 <= d2.getMax()) {\n            if (x1 < x2) {\n                diff = maxDiff(d1, d2, diff, x1);\n                x1 = nextValue(d1, ix1, x1);\n            } else if (x1 > x2) {\n                diff = maxDiff(d1, d2, diff, x2);\n                x2 = nextValue(d2, ix2, x2);\n            } else if (x1 == x2) {\n                diff = maxDiff(d1, d2, diff, x1);\n\n                double q1 = d1.cdf(x1);\n                double q2 = d2.cdf(x2);\n                if (q1 < q2) {\n                    x1 = nextValue(d1, ix1, x1);\n                } else if (q1 > q2) {\n                    x2 = nextValue(d2, ix2, x2);\n                } else {\n                    x1 = nextValue(d1, ix1, x1);\n                    x2 = nextValue(d2, ix2, x2);\n                }\n            }\n        }\n        while (x1 <= d1.getMax()) {\n            diff = maxDiff(d1, d2, diff, x1);\n            x1 = nextValue(d1, ix1, x1);\n        }\n\n        while (x2 <= d2.getMax()) {\n            diff = maxDiff(d2, d2, diff, x2);\n            x2 = nextValue(d2, ix2, x2);\n        }\n\n        long n1 = d1.size();\n        long n2 = d2.size();\n        return diff * Math.sqrt((double) n1 * n2 / (n1 + n2));\n    }", "signature": "double ks(TDigest d1, TDigest d2)", "full_signature": "public static double ks(TDigest d1, TDigest d2)", "class_method_signature": "Comparison.ks(TDigest d1, TDigest d2)", "testcase": false, "constructor": false, "invocations": ["iterator", "centroids", "iterator", "centroids", "getMin", "getMin", "getMax", "getMax", "maxDiff", "nextValue", "maxDiff", "nextValue", "maxDiff", "cdf", "cdf", "nextValue", "nextValue", "nextValue", "nextValue", "getMax", "maxDiff", "nextValue", "getMax", "maxDiff", "nextValue", "size", "size", "sqrt"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}