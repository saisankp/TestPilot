{"test_class": {"identifier": "InstanceConnectionInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/instance/InstanceConnectionInfoTest.java"}, "test_case": {"identifier": "testGetHostname1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetHostname1() {\n\t\ttry {\n\t\t\tInetAddress address = mock(InetAddress.class);\n\t\t\twhen(address.getCanonicalHostName()).thenReturn(\"worker10\");\n\t\t\twhen(address.getHostName()).thenReturn(\"worker10\");\n\t\t\twhen(address.getHostAddress()).thenReturn(\"127.0.0.1\");\n\n\t\t\tInstanceConnectionInfo info = new InstanceConnectionInfo(address, 19871);\n\t\t\tAssert.assertEquals(\"worker10\", info.getHostname());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testGetHostname1()", "full_signature": "@Test public void testGetHostname1()", "class_method_signature": "InstanceConnectionInfoTest.testGetHostname1()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCanonicalHostName", "thenReturn", "when", "getHostName", "thenReturn", "when", "getHostAddress", "assertEquals", "getHostname", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "InstanceConnectionInfo", "superclass": "", "interfaces": "implements IOReadableWritable, Comparable<InstanceConnectionInfo>, java.io.Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -8254407801276350716L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8254407801276350716L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InstanceConnectionInfo.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InstanceConnectionInfo.class)", "var_name": "LOG"}, {"original_string": "private InetAddress inetAddress;", "modifier": "private", "type": "InetAddress", "declarator": "inetAddress", "var_name": "inetAddress"}, {"original_string": "private int dataPort;", "modifier": "private", "type": "int", "declarator": "dataPort", "var_name": "dataPort"}, {"original_string": "private String fqdnHostName;", "modifier": "private", "type": "String", "declarator": "fqdnHostName", "var_name": "fqdnHostName"}, {"original_string": "private String hostName;", "modifier": "private", "type": "String", "declarator": "hostName", "var_name": "hostName"}], "methods": [{"identifier": "InstanceConnectionInfo", "parameters": "(InetAddress inetAddress, int dataPort)", "modifiers": "public", "return": "", "signature": " InstanceConnectionInfo(InetAddress inetAddress, int dataPort)", "full_signature": "public  InstanceConnectionInfo(InetAddress inetAddress, int dataPort)", "class_method_signature": "InstanceConnectionInfo.InstanceConnectionInfo(InetAddress inetAddress, int dataPort)", "testcase": false, "constructor": true}, {"identifier": "InstanceConnectionInfo", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstanceConnectionInfo()", "full_signature": "public  InstanceConnectionInfo()", "class_method_signature": "InstanceConnectionInfo.InstanceConnectionInfo()", "testcase": false, "constructor": true}, {"identifier": "dataPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int dataPort()", "full_signature": "public int dataPort()", "class_method_signature": "InstanceConnectionInfo.dataPort()", "testcase": false, "constructor": false}, {"identifier": "address", "parameters": "()", "modifiers": "public", "return": "InetAddress", "signature": "InetAddress address()", "full_signature": "public InetAddress address()", "class_method_signature": "InstanceConnectionInfo.address()", "testcase": false, "constructor": false}, {"identifier": "getFQDNHostname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFQDNHostname()", "full_signature": "public String getFQDNHostname()", "class_method_signature": "InstanceConnectionInfo.getFQDNHostname()", "testcase": false, "constructor": false}, {"identifier": "getHostname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHostname()", "full_signature": "public String getHostname()", "class_method_signature": "InstanceConnectionInfo.getHostname()", "testcase": false, "constructor": false}, {"identifier": "getInetAdress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInetAdress()", "full_signature": "public String getInetAdress()", "class_method_signature": "InstanceConnectionInfo.getInetAdress()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInputView in)", "modifiers": "@Override public", "return": "void", "signature": "void read(DataInputView in)", "full_signature": "@Override public void read(DataInputView in)", "class_method_signature": "InstanceConnectionInfo.read(DataInputView in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final DataOutputView out)", "modifiers": "@Override public", "return": "void", "signature": "void write(final DataOutputView out)", "full_signature": "@Override public void write(final DataOutputView out)", "class_method_signature": "InstanceConnectionInfo.write(final DataOutputView out)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "InstanceConnectionInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "InstanceConnectionInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "InstanceConnectionInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(InstanceConnectionInfo o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(InstanceConnectionInfo o)", "full_signature": "@Override public int compareTo(InstanceConnectionInfo o)", "class_method_signature": "InstanceConnectionInfo.compareTo(InstanceConnectionInfo o)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java"}, "focal_method": {"identifier": "getHostname", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getHostname() {\n\t\treturn hostName;\n\t}", "signature": "String getHostname()", "full_signature": "public String getHostname()", "class_method_signature": "InstanceConnectionInfo.getHostname()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}