{"test_class": {"identifier": "CourseProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CourseProcessor courseProcessor;", "modifier": "private", "type": "CourseProcessor", "declarator": "courseProcessor", "var_name": "courseProcessor"}, {"original_string": "private Course course;", "modifier": "private", "type": "Course", "declarator": "course", "var_name": "course"}, {"original_string": "private DaoManager daoManagerMock;", "modifier": "private", "type": "DaoManager", "declarator": "daoManagerMock", "var_name": "daoManagerMock"}], "file": "olat7.8/src/test/java/org/olat/connectors/campus/CourseProcessorTest.java"}, "test_case": {"identifier": "process_semesterIsNotNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void process_semesterIsNotNull() throws Exception {\n        course.setId(200L);\n        course.setTitle(\"Title\");\n        course.setSemester(\"Herbstsemester 2012\");\n        course = courseProcessor.process(course);\n        assertEquals(course.getTitle(), \"12HS Title\");\n\n        course.setId(300L);\n        course.setTitle(\"Title\");\n        course.setSemester(\"Fr\u00fchjahrssemester 2013\");\n        course = courseProcessor.process(course);\n        assertEquals(course.getTitle(), \"13FS Title\");\n    }", "signature": "void process_semesterIsNotNull()", "full_signature": "@Test public void process_semesterIsNotNull()", "class_method_signature": "CourseProcessorTest.process_semesterIsNotNull()", "testcase": true, "constructor": false, "invocations": ["setId", "setTitle", "setSemester", "process", "assertEquals", "getTitle", "setId", "setTitle", "setSemester", "process", "assertEquals", "getTitle"]}, "focal_class": {"identifier": "CourseProcessor", "superclass": "", "interfaces": "implements ItemProcessor<Course, Course>", "fields": [{"original_string": "private static final Logger LOG = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerHelper.getLogger()", "var_name": "LOG"}, {"original_string": "@Autowired\n    DaoManager daoManager;", "modifier": "@Autowired", "type": "DaoManager", "declarator": "daoManager", "var_name": "daoManager"}, {"original_string": "private Set<Long> processedIdsSet;", "modifier": "private", "type": "Set<Long>", "declarator": "processedIdsSet", "var_name": "processedIdsSet"}, {"original_string": "private List<Long> enabledOrgs;", "modifier": "private", "type": "List<Long>", "declarator": "enabledOrgs", "var_name": "enabledOrgs"}, {"original_string": "private Map<String, String> semesterMap = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "semesterMap = new HashMap<String, String>()", "var_name": "semesterMap"}, {"original_string": "private static final String WHITESPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "WHITESPACE = \" \"", "var_name": "WHITESPACE"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "CourseProcessor.init()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void cleanUp()", "full_signature": "@PreDestroy public void cleanUp()", "class_method_signature": "CourseProcessor.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "setSemesterMap", "parameters": "(Map<String, String> semesterMap)", "modifiers": "public", "return": "void", "signature": "void setSemesterMap(Map<String, String> semesterMap)", "full_signature": "public void setSemesterMap(Map<String, String> semesterMap)", "class_method_signature": "CourseProcessor.setSemesterMap(Map<String, String> semesterMap)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Course course)", "modifiers": "public", "return": "Course", "signature": "Course process(Course course)", "full_signature": "public Course process(Course course)", "class_method_signature": "CourseProcessor.process(Course course)", "testcase": false, "constructor": false}, {"identifier": "buildShortSemester", "parameters": "(String semester)", "modifiers": "private", "return": "String", "signature": "String buildShortSemester(String semester)", "full_signature": "private String buildShortSemester(String semester)", "class_method_signature": "CourseProcessor.buildShortSemester(String semester)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/connectors/campus/CourseProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(Course course)", "modifiers": "public", "return": "Course", "body": "public Course process(Course course) throws Exception {\n\n        // JUST IGNORE THE DUPLICATES\n        if (!CampusUtils.addIfNotAlreadyProcessed(processedIdsSet, course.getId())) {\n            LOG.debug(\"This is a duplicate of this course [\" + course.getId() + \"]\");\n            return null;\n        }\n\n        course.setModifiedDate(new Date());\n\n        if (course.getTitle().contains(CampusUtils.SEMICOLON_REPLACEMENT)) {\n            course.setTitle(StringUtils.replace(course.getTitle(), CampusUtils.SEMICOLON_REPLACEMENT, CampusUtils.SEMICOLON));\n        }\n\n        String shortSemester = buildShortSemester(course.getSemester());\n        if (shortSemester != null) {\n            course.setShortSemester(shortSemester);\n            course.setTitle(shortSemester.concat(WHITESPACE).concat(course.getTitle()));\n        }\n\n        if (enabledOrgs.isEmpty()) {\n            if (course.getIpz().equalsIgnoreCase(\"X\")) {\n                course.setEnabled(\"1\");\n            }\n        } else if (enabledOrgs.contains(course.getOrg1()) || enabledOrgs.contains(course.getOrg2()) || enabledOrgs.contains(course.getOrg3())\n                || enabledOrgs.contains(course.getOrg4()) || enabledOrgs.contains(course.getOrg5())) {\n            course.setEnabled(\"1\");\n        }\n\n        return course;\n    }", "signature": "Course process(Course course)", "full_signature": "public Course process(Course course)", "class_method_signature": "CourseProcessor.process(Course course)", "testcase": false, "constructor": false, "invocations": ["addIfNotAlreadyProcessed", "getId", "debug", "getId", "setModifiedDate", "contains", "getTitle", "setTitle", "replace", "getTitle", "buildShortSemester", "getSemester", "setShortSemester", "setTitle", "concat", "concat", "getTitle", "isEmpty", "equalsIgnoreCase", "getIpz", "setEnabled", "contains", "getOrg1", "contains", "getOrg2", "contains", "getOrg3", "contains", "getOrg4", "contains", "getOrg5", "setEnabled"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}