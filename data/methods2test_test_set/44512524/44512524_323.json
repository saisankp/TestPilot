{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARENT = \"./test/\";", "modifier": "private static final", "type": "String", "declarator": "PARENT = \"./test/\"", "var_name": "PARENT"}, {"original_string": "private static final String PATH = PARENT + \"file.txt\";", "modifier": "private static final", "type": "String", "declarator": "PATH = PARENT + \"file.txt\"", "var_name": "PATH"}, {"original_string": "private static File dir;", "modifier": "private static", "type": "File", "declarator": "dir", "var_name": "dir"}, {"original_string": "private static File file;", "modifier": "private static", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private static PrintWriter writer;", "modifier": "private static", "type": "PrintWriter", "declarator": "writer", "var_name": "writer"}], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/util/FileUtilsTest.java"}, "test_case": {"identifier": "testFileCreateWhenParentDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFileCreateWhenParentDoesNotExist() {\n    writer = FileUtils.createFileWriter(PARENT, PATH);\n    assertThat(writer).isNotNull();\n    assertThat(dir).exists();\n    assertThat(file).exists();\n  }", "signature": "void testFileCreateWhenParentDoesNotExist()", "full_signature": "@Test public void testFileCreateWhenParentDoesNotExist()", "class_method_signature": "FileUtilsTest.testFileCreateWhenParentDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["createFileWriter", "isNotNull", "assertThat", "exists", "assertThat", "exists", "assertThat"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}, {"identifier": "readLines", "parameters": "(InputStream input)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readLines(InputStream input)", "full_signature": "public static List<String> readLines(InputStream input)", "class_method_signature": "FileUtils.readLines(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "createFileWriter", "parameters": "(String parent, String name)", "modifiers": "public static", "return": "PrintWriter", "signature": "PrintWriter createFileWriter(String parent, String name)", "full_signature": "public static PrintWriter createFileWriter(String parent, String name)", "class_method_signature": "FileUtils.createFileWriter(String parent, String name)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/util/FileUtils.java"}, "focal_method": {"identifier": "createFileWriter", "parameters": "(String parent, String name)", "modifiers": "public static", "return": "PrintWriter", "body": "public static PrintWriter createFileWriter(String parent, String name) {\n    try {\n      final File dir = new File(parent);\n      if (dir.exists() || dir.mkdirs()) {\n        final File file = new File(name);\n        file.createNewFile();\n        final PrintWriter writer = new PrintWriter(new OutputStreamWriter(\n        new FileOutputStream(file, true)));\n        return writer;\n      } else {\n        throw new RuntimeException(\"fail to create parent directory \" + parent);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"No such file or directory \" + name, e);\n    }\n  }", "signature": "PrintWriter createFileWriter(String parent, String name)", "full_signature": "public static PrintWriter createFileWriter(String parent, String name)", "class_method_signature": "FileUtils.createFileWriter(String parent, String name)", "testcase": false, "constructor": false, "invocations": ["exists", "mkdirs", "createNewFile"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}