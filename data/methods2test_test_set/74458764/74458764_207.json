{"test_class": {"identifier": "TestCookieSessionTracking", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COOKIE_PATH_TEST = \"cookiePathTest/\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE_PATH_TEST = \"cookiePathTest/\"", "var_name": "COOKIE_PATH_TEST"}, {"original_string": "private CookieSessionTracking cookieSessionTracking;", "modifier": "private", "type": "CookieSessionTracking", "declarator": "cookieSessionTracking", "var_name": "cookieSessionTracking"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestCookieSessionTracking.java"}, "test_case": {"identifier": "testRetrieveId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRetrieveId() {\n    SessionConfiguration sc = new SessionConfiguration();\n    sc.setSessionIdName(\"somesession\");\n    sc.setAttribute(\"com.amadeus.session.id\", \"uuid\");\n    cookieSessionTracking.configure(sc);\n    RequestWithSession request = mock(RequestWithSession.class,\n        withSettings().extraInterfaces(HttpServletRequest.class));\n    HttpServletRequest hsr = (HttpServletRequest)request;\n    UUID uuid = UUID.randomUUID();\n    UUID uuidUrl = UUID.randomUUID();\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\" + uuidUrl);\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", uuid.toString()) });\n    assertEquals(uuid.toString(), cookieSessionTracking.retrieveId(request).id);\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"notused\", uuid.toString()) });\n    assertNull(cookieSessionTracking.retrieveId(request));\n    when(hsr.getCookies()).thenReturn(new Cookie[] {\n        new Cookie(\"othercookie\", \"ABC\"),\n        new Cookie(\"somesession\", uuid.toString())\n        });\n    assertEquals(uuid.toString(), cookieSessionTracking.retrieveId(request).id);\n\n    String sessionIdWithTimestamp = uuid.toString() + BaseSessionTracking.SESSION_ID_TIMESTAMP_SEPARATOR + System.currentTimeMillis();\n    String invalidSessionIdWithTimestamp = uuid.toString() + \"-abcdefgh\" + BaseSessionTracking.SESSION_ID_TIMESTAMP_SEPARATOR + System.currentTimeMillis();\n    String sessionIdWithoutTimestamp = uuid.toString();\n\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", sessionIdWithTimestamp)});\n    assertNull(cookieSessionTracking.retrieveId(request));\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", sessionIdWithoutTimestamp)});\n    assertEquals(sessionIdWithoutTimestamp, cookieSessionTracking.retrieveId(request).id);\n\n    sc.setTimestampSufix(true);\n    cookieSessionTracking.configure(sc);\n\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", sessionIdWithTimestamp)});\n    assertEquals(sessionIdWithTimestamp, cookieSessionTracking.retrieveId(request).id);\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", sessionIdWithoutTimestamp)});\n    assertEquals(sessionIdWithoutTimestamp, cookieSessionTracking.retrieveId(request).id);\n    when(hsr.getCookies()).thenReturn(new Cookie[] { new Cookie(\"somesession\", invalidSessionIdWithTimestamp)});\n    assertNull(cookieSessionTracking.retrieveId(request));\n  }", "signature": "void testRetrieveId()", "full_signature": "@Test public void testRetrieveId()", "class_method_signature": "TestCookieSessionTracking.testRetrieveId()", "testcase": true, "constructor": false, "invocations": ["setSessionIdName", "setAttribute", "configure", "mock", "extraInterfaces", "withSettings", "randomUUID", "randomUUID", "thenReturn", "when", "getRequestURI", "thenReturn", "when", "getCookies", "toString", "assertEquals", "toString", "retrieveId", "thenReturn", "when", "getCookies", "toString", "assertNull", "retrieveId", "thenReturn", "when", "getCookies", "toString", "assertEquals", "toString", "retrieveId", "toString", "currentTimeMillis", "toString", "currentTimeMillis", "toString", "thenReturn", "when", "getCookies", "assertNull", "retrieveId", "thenReturn", "when", "getCookies", "assertEquals", "retrieveId", "setTimestampSufix", "configure", "thenReturn", "when", "getCookies", "assertEquals", "retrieveId", "thenReturn", "when", "getCookies", "assertEquals", "retrieveId", "thenReturn", "when", "getCookies", "assertNull", "retrieveId"]}, "focal_class": {"identifier": "CookieSessionTracking", "superclass": "extends BaseSessionTracking", "interfaces": "implements SessionTracking", "fields": [{"original_string": "static final String DEFAULT_CONTEXT_PATH = \"/\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_CONTEXT_PATH = \"/\"", "var_name": "DEFAULT_CONTEXT_PATH"}, {"original_string": "static final String COOKIE_CONTEXT_PATH_PARAMETER = \"com.amadeus.session.cookie.contextPath\";", "modifier": "static final", "type": "String", "declarator": "COOKIE_CONTEXT_PATH_PARAMETER = \"com.amadeus.session.cookie.contextPath\"", "var_name": "COOKIE_CONTEXT_PATH_PARAMETER"}, {"original_string": "static final String SECURE_COOKIE_PARAMETER = \"com.amadeus.session.cookie.secure\";", "modifier": "static final", "type": "String", "declarator": "SECURE_COOKIE_PARAMETER = \"com.amadeus.session.cookie.secure\"", "var_name": "SECURE_COOKIE_PARAMETER"}, {"original_string": "static final String SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER = \"com.amadeus.session.cookie.secure.on.secured.request\";", "modifier": "static final", "type": "String", "declarator": "SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER = \"com.amadeus.session.cookie.secure.on.secured.request\"", "var_name": "SECURE_COOKIE_ON_SECURED_REQUEST_PARAMETER"}, {"original_string": "static final String COOKIE_HTTP_ONLY_PARAMETER = \"com.amadeus.session.cookie.httpOnly\";", "modifier": "static final", "type": "String", "declarator": "COOKIE_HTTP_ONLY_PARAMETER = \"com.amadeus.session.cookie.httpOnly\"", "var_name": "COOKIE_HTTP_ONLY_PARAMETER"}, {"original_string": "private boolean httpOnly = true;", "modifier": "private", "type": "boolean", "declarator": "httpOnly = true", "var_name": "httpOnly"}, {"original_string": "private String contextPath;", "modifier": "private", "type": "String", "declarator": "contextPath", "var_name": "contextPath"}, {"original_string": "private Boolean secure;", "modifier": "private", "type": "Boolean", "declarator": "secure", "var_name": "secure"}, {"original_string": "private Boolean secureOnlyOnSecuredRequest;", "modifier": "private", "type": "Boolean", "declarator": "secureOnlyOnSecuredRequest", "var_name": "secureOnlyOnSecuredRequest"}], "methods": [{"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "CookieSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "(RequestWithSession request, Object response)", "modifiers": "@Override public", "return": "void", "signature": "void propagateSession(RequestWithSession request, Object response)", "full_signature": "@Override public void propagateSession(RequestWithSession request, Object response)", "class_method_signature": "CookieSessionTracking.propagateSession(RequestWithSession request, Object response)", "testcase": false, "constructor": false}, {"identifier": "cookiePath", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String cookiePath()", "full_signature": "private String cookiePath()", "class_method_signature": "CookieSessionTracking.cookiePath()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(SessionConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void configure(SessionConfiguration conf)", "full_signature": "@Override public void configure(SessionConfiguration conf)", "class_method_signature": "CookieSessionTracking.configure(SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "isCookieTracking", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCookieTracking()", "full_signature": "@Override public boolean isCookieTracking()", "class_method_signature": "CookieSessionTracking.isCookieTracking()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/CookieSessionTracking.java"}, "focal_method": {"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "body": "@Override\n  public IdAndSource retrieveId(RequestWithSession request) {\n    Cookie[] cookies = ((HttpServletRequest)request).getCookies();\n    if (cookies != null) {\n      for (Cookie cookie : cookies) {\n        if (idName.equals(cookie.getName())) {\n          String id = clean(cookie.getValue());\n          if (id != null) {\n            return new IdAndSource(id, isCookieTracking());\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n    if (this.nextSessionTracking != null) {\n      return this.nextSessionTracking.retrieveId(request);\n    }\n    return null;\n  }", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "CookieSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false, "invocations": ["getCookies", "equals", "getName", "clean", "getValue", "isCookieTracking", "retrieveId"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}