{"test_class": {"identifier": "ImportListBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImportListBuilder underTest;", "modifier": "private", "type": "ImportListBuilder", "declarator": "underTest", "var_name": "underTest"}], "file": "core-parent/core/src/test/java/fr/javatronic/damapping/processor/sourcegenerator/imports/ImportListBuilderTest.java"}, "test_case": {"identifier": "getImports_returns_empty_list_when_builder_is_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getImports_returns_empty_list_when_builder_is_empty() throws Exception {\n    assertThat(new ImportListBuilder().getImports(\"com.acme\")).isEmpty();\n    assertThat(new ImportListBuilder().getImports(\"\")).isEmpty();\n    assertThat(new ImportListBuilder().getImports(\"acme\")).isEmpty();\n  }", "signature": "void getImports_returns_empty_list_when_builder_is_empty()", "full_signature": "@Test public void getImports_returns_empty_list_when_builder_is_empty()", "class_method_signature": "ImportListBuilderTest.getImports_returns_empty_list_when_builder_is_empty()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "getImports", "isEmpty", "assertThat", "getImports", "isEmpty", "assertThat", "getImports"]}, "focal_class": {"identifier": "ImportListBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Predicate<DAImport> FILTER_OUT_MAPPER_DEPENDENCY_ANNOTATION_IMPORT = Predicates.not(\n      Predicates.equalTo(DAMappingConstants.MAPPER_DEPENDENCY_DAIMPORT)\n  );", "modifier": "private static final", "type": "Predicate<DAImport>", "declarator": "FILTER_OUT_MAPPER_DEPENDENCY_ANNOTATION_IMPORT = Predicates.not(\n      Predicates.equalTo(DAMappingConstants.MAPPER_DEPENDENCY_DAIMPORT)\n  )", "var_name": "FILTER_OUT_MAPPER_DEPENDENCY_ANNOTATION_IMPORT"}, {"original_string": "private final Set<DAImport> imports = Sets.of();", "modifier": "private final", "type": "Set<DAImport>", "declarator": "imports = Sets.of()", "var_name": "imports"}], "methods": [{"identifier": "addImports", "parameters": "(@Nullable DAType daType)", "modifiers": "protected", "return": "void", "signature": "void addImports(@Nullable DAType daType)", "full_signature": "protected void addImports(@Nullable DAType daType)", "class_method_signature": "ImportListBuilder.addImports(@Nullable DAType daType)", "testcase": false, "constructor": false}, {"identifier": "addImports", "parameters": "(@Nullable DAMethod daMethod, @Nonnull DAMaethodImportFilters importFilters)", "modifiers": "protected", "return": "void", "signature": "void addImports(@Nullable DAMethod daMethod, @Nonnull DAMaethodImportFilters importFilters)", "full_signature": "protected void addImports(@Nullable DAMethod daMethod, @Nonnull DAMaethodImportFilters importFilters)", "class_method_signature": "ImportListBuilder.addImports(@Nullable DAMethod daMethod, @Nonnull DAMaethodImportFilters importFilters)", "testcase": false, "constructor": false}, {"identifier": "addImports", "parameters": "(@Nullable DAMethod daMethod)", "modifiers": "protected", "return": "void", "signature": "void addImports(@Nullable DAMethod daMethod)", "full_signature": "protected void addImports(@Nullable DAMethod daMethod)", "class_method_signature": "ImportListBuilder.addImports(@Nullable DAMethod daMethod)", "testcase": false, "constructor": false}, {"identifier": "addImports", "parameters": "(@Nonnull Iterable<DAAnnotation> annotations)", "modifiers": "protected", "return": "void", "signature": "void addImports(@Nonnull Iterable<DAAnnotation> annotations)", "full_signature": "protected void addImports(@Nonnull Iterable<DAAnnotation> annotations)", "class_method_signature": "ImportListBuilder.addImports(@Nonnull Iterable<DAAnnotation> annotations)", "testcase": false, "constructor": false}, {"identifier": "getImports", "parameters": "(@Nonnull final String currentPackage)", "modifiers": "@Nonnull public", "return": "List<DAImport>", "signature": "List<DAImport> getImports(@Nonnull final String currentPackage)", "full_signature": "@Nonnull public List<DAImport> getImports(@Nonnull final String currentPackage)", "class_method_signature": "ImportListBuilder.getImports(@Nonnull final String currentPackage)", "testcase": false, "constructor": false}, {"identifier": "indexImportsBySimpleName", "parameters": "(Set<DAImport> imports)", "modifiers": "private static", "return": "Map<DAName, List<DAImport>>", "signature": "Map<DAName, List<DAImport>> indexImportsBySimpleName(Set<DAImport> imports)", "full_signature": "private static Map<DAName, List<DAImport>> indexImportsBySimpleName(Set<DAImport> imports)", "class_method_signature": "ImportListBuilder.indexImportsBySimpleName(Set<DAImport> imports)", "testcase": false, "constructor": false}], "file": "core-parent/core/src/main/java/fr/javatronic/damapping/processor/sourcegenerator/imports/ImportListBuilder.java"}, "focal_method": {"identifier": "getImports", "parameters": "(@Nonnull final String currentPackage)", "modifiers": "@Nonnull public", "return": "List<DAImport>", "body": "@Nonnull\n  public List<DAImport> getImports(@Nonnull final String currentPackage) {\n    checkNotNull(currentPackage, \"currentPackage can not be null. Use the empty string for the default package\");\n\n    if (imports.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    Map<DAName, List<DAImport>> indexBySimpleName = indexImportsBySimpleName(imports);\n    return from(indexBySimpleName.values())\n        .transform(new ImportSelector(currentPackage))\n        .filter(Predicates.notNull())\n        // MapperDependency must not appear in any generated class/interface\n        .filter(FILTER_OUT_MAPPER_DEPENDENCY_ANNOTATION_IMPORT)\n        .toList();\n  }", "signature": "List<DAImport> getImports(@Nonnull final String currentPackage)", "full_signature": "@Nonnull public List<DAImport> getImports(@Nonnull final String currentPackage)", "class_method_signature": "ImportListBuilder.getImports(@Nonnull final String currentPackage)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "isEmpty", "emptyList", "indexImportsBySimpleName", "toList", "filter", "filter", "transform", "from", "values", "notNull"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}