{"test_class": {"identifier": "ImmutableExpressionResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String THING_NAME = \"foobar199\";", "modifier": "private static final", "type": "String", "declarator": "THING_NAME = \"foobar199\"", "var_name": "THING_NAME"}, {"original_string": "private static final String THING_NAMESPACE = \"org.eclipse.ditto\";", "modifier": "private static final", "type": "String", "declarator": "THING_NAMESPACE = \"org.eclipse.ditto\"", "var_name": "THING_NAMESPACE"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(THING_NAMESPACE, THING_NAME);", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(THING_NAMESPACE, THING_NAME)", "var_name": "THING_ID"}, {"original_string": "private static final String KNOWN_TOPIC = \"org.eclipse.ditto/\" + THING_NAME + \"/things/twin/commands/modify\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_TOPIC = \"org.eclipse.ditto/\" + THING_NAME + \"/things/twin/commands/modify\"", "var_name": "KNOWN_TOPIC"}, {"original_string": "private static final Map<String, String> KNOWN_HEADERS =\n            DittoHeaders.newBuilder().putHeader(\"one\", \"1\").putHeader(\"two\", \"2\").build();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "KNOWN_HEADERS =\n            DittoHeaders.newBuilder().putHeader(\"one\", \"1\").putHeader(\"two\", \"2\").build()", "var_name": "KNOWN_HEADERS"}, {"original_string": "private static final String UNKNOWN_HEADER_EXPRESSION = \"{{ header:missing }}\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_HEADER_EXPRESSION = \"{{ header:missing }}\"", "var_name": "UNKNOWN_HEADER_EXPRESSION"}, {"original_string": "private static final String UNKNOWN_THING_EXPRESSION = \"{{ thing:missing }}\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_THING_EXPRESSION = \"{{ thing:missing }}\"", "var_name": "UNKNOWN_THING_EXPRESSION"}, {"original_string": "private static final String UNKNOWN_TOPIC_EXPRESSION = \"{{ topic:missing }}\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_TOPIC_EXPRESSION = \"{{ topic:missing }}\"", "var_name": "UNKNOWN_TOPIC_EXPRESSION"}, {"original_string": "private static ImmutableExpressionResolver underTest;", "modifier": "private static", "type": "ImmutableExpressionResolver", "declarator": "underTest", "var_name": "underTest"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutableExpressionResolverTest.java"}, "test_case": {"identifier": "testUnsuccessfulSinglePlaceholderResolution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsuccessfulSinglePlaceholderResolution() {\n        assertThat(underTest.resolveAsPipelineElement(\"header:unknown\"))\n                .isEmpty();\n        assertThat(underTest.resolveAsPipelineElement(\"fn:substring-before('')\"))\n                .isEmpty();\n    }", "signature": "void testUnsuccessfulSinglePlaceholderResolution()", "full_signature": "@Test public void testUnsuccessfulSinglePlaceholderResolution()", "class_method_signature": "ImmutableExpressionResolverTest.testUnsuccessfulSinglePlaceholderResolution()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "resolveAsPipelineElement", "isEmpty", "assertThat", "resolveAsPipelineElement"]}, "focal_class": {"identifier": "ImmutableExpressionResolver", "superclass": "", "interfaces": "implements ExpressionResolver", "fields": [{"original_string": "private static final int MAX_COUNT_PIPELINE_FUNCTIONS = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_COUNT_PIPELINE_FUNCTIONS = 10", "var_name": "MAX_COUNT_PIPELINE_FUNCTIONS"}, {"original_string": "private static final String OR = \"|\";", "modifier": "private static final", "type": "String", "declarator": "OR = \"|\"", "var_name": "OR"}, {"original_string": "private static final String NO_QUOTE = \"[^|'\\\"]++\";", "modifier": "private static final", "type": "String", "declarator": "NO_QUOTE = \"[^|'\\\"]++\"", "var_name": "NO_QUOTE"}, {"original_string": "private static final String SINGLE_QUOTED_STRING =\n            String.format(\"'%s'\", PipelineFunction.SINGLE_QUOTED_STRING_CONTENT);", "modifier": "private static final", "type": "String", "declarator": "SINGLE_QUOTED_STRING =\n            String.format(\"'%s'\", PipelineFunction.SINGLE_QUOTED_STRING_CONTENT)", "var_name": "SINGLE_QUOTED_STRING"}, {"original_string": "private static final String DOUBLE_QUOTED_STRING =\n            String.format(\"\\\"%s\\\"\", PipelineFunction.DOUBLE_QUOTED_STRING_CONTENT);", "modifier": "private static final", "type": "String", "declarator": "DOUBLE_QUOTED_STRING =\n            String.format(\"\\\"%s\\\"\", PipelineFunction.DOUBLE_QUOTED_STRING_CONTENT)", "var_name": "DOUBLE_QUOTED_STRING"}, {"original_string": "private static final String PIPE_STAGE =\n            \"(?:\" + NO_QUOTE + OR + SINGLE_QUOTED_STRING + OR + DOUBLE_QUOTED_STRING + \")++\";", "modifier": "private static final", "type": "String", "declarator": "PIPE_STAGE =\n            \"(?:\" + NO_QUOTE + OR + SINGLE_QUOTED_STRING + OR + DOUBLE_QUOTED_STRING + \")++\"", "var_name": "PIPE_STAGE"}, {"original_string": "private static final Pattern PIPE_STAGE_PATTERN = Pattern.compile(PIPE_STAGE);", "modifier": "private static final", "type": "Pattern", "declarator": "PIPE_STAGE_PATTERN = Pattern.compile(PIPE_STAGE)", "var_name": "PIPE_STAGE_PATTERN"}, {"original_string": "private static final String PIPE_PATTERN_STR = PIPE_STAGE + \"(?:\\\\|\" + PIPE_STAGE + \")*+\";", "modifier": "private static final", "type": "String", "declarator": "PIPE_PATTERN_STR = PIPE_STAGE + \"(?:\\\\|\" + PIPE_STAGE + \")*+\"", "var_name": "PIPE_PATTERN_STR"}, {"original_string": "private static final Pattern PIPE_PATTERN = Pattern.compile(PIPE_PATTERN_STR);", "modifier": "private static final", "type": "Pattern", "declarator": "PIPE_PATTERN = Pattern.compile(PIPE_PATTERN_STR)", "var_name": "PIPE_PATTERN"}, {"original_string": "private static final Function<String, DittoRuntimeException> UNRESOLVED_INPUT_HANDLER = unresolvedInput ->\n            UnresolvedPlaceholderException.newBuilder(unresolvedInput).build();", "modifier": "private static final", "type": "Function<String, DittoRuntimeException>", "declarator": "UNRESOLVED_INPUT_HANDLER = unresolvedInput ->\n            UnresolvedPlaceholderException.newBuilder(unresolvedInput).build()", "var_name": "UNRESOLVED_INPUT_HANDLER"}, {"original_string": "@Nullable private final String placeholderReplacementInValidation;", "modifier": "@Nullable private final", "type": "String", "declarator": "placeholderReplacementInValidation", "var_name": "placeholderReplacementInValidation"}, {"original_string": "private final Map<String, PlaceholderResolver<?>> placeholderResolvers;", "modifier": "private final", "type": "Map<String, PlaceholderResolver<?>>", "declarator": "placeholderResolvers", "var_name": "placeholderResolvers"}], "methods": [{"identifier": "ImmutableExpressionResolver", "parameters": "(final List<PlaceholderResolver<?>> placeholderResolvers)", "modifiers": "", "return": "", "signature": " ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers)", "full_signature": "  ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers)", "class_method_signature": "ImmutableExpressionResolver.ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers)", "testcase": false, "constructor": true}, {"identifier": "ImmutableExpressionResolver", "parameters": "(final List<PlaceholderResolver<?>> placeholderResolvers,\n            @Nullable final String stringUsedInPlaceholderValidation)", "modifiers": "", "return": "", "signature": " ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers,\n            @Nullable final String stringUsedInPlaceholderValidation)", "full_signature": "  ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers,\n            @Nullable final String stringUsedInPlaceholderValidation)", "class_method_signature": "ImmutableExpressionResolver.ImmutableExpressionResolver(final List<PlaceholderResolver<?>> placeholderResolvers,\n            @Nullable final String stringUsedInPlaceholderValidation)", "testcase": false, "constructor": true}, {"identifier": "resolveAsPipelineElement", "parameters": "(final String placeholderExpression)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement resolveAsPipelineElement(final String placeholderExpression)", "full_signature": "@Override public PipelineElement resolveAsPipelineElement(final String placeholderExpression)", "class_method_signature": "ImmutableExpressionResolver.resolveAsPipelineElement(final String placeholderExpression)", "testcase": false, "constructor": false}, {"identifier": "findPlaceholderResolver", "parameters": "(\n            final String placeholderInPipeline)", "modifiers": "private", "return": "Optional<Map.Entry<PlaceholderResolver<?>, String>>", "signature": "Optional<Map.Entry<PlaceholderResolver<?>, String>> findPlaceholderResolver(\n            final String placeholderInPipeline)", "full_signature": "private Optional<Map.Entry<PlaceholderResolver<?>, String>> findPlaceholderResolver(\n            final String placeholderInPipeline)", "class_method_signature": "ImmutableExpressionResolver.findPlaceholderResolver(\n            final String placeholderInPipeline)", "testcase": false, "constructor": false}, {"identifier": "resolveSinglePlaceholder", "parameters": "(final String placeholderInPipeline)", "modifiers": "private", "return": "PipelineElement", "signature": "PipelineElement resolveSinglePlaceholder(final String placeholderInPipeline)", "full_signature": "private PipelineElement resolveSinglePlaceholder(final String placeholderInPipeline)", "class_method_signature": "ImmutableExpressionResolver.resolveSinglePlaceholder(final String placeholderInPipeline)", "testcase": false, "constructor": false}, {"identifier": "getPipelineStagesExpressions", "parameters": "(final String template)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getPipelineStagesExpressions(final String template)", "full_signature": "private List<String> getPipelineStagesExpressions(final String template)", "class_method_signature": "ImmutableExpressionResolver.getPipelineStagesExpressions(final String template)", "testcase": false, "constructor": false}, {"identifier": "getFirstExpressionInPipe", "parameters": "(final List<String> pipelineStagesExpressions)", "modifiers": "private", "return": "String", "signature": "String getFirstExpressionInPipe(final List<String> pipelineStagesExpressions)", "full_signature": "private String getFirstExpressionInPipe(final List<String> pipelineStagesExpressions)", "class_method_signature": "ImmutableExpressionResolver.getFirstExpressionInPipe(final List<String> pipelineStagesExpressions)", "testcase": false, "constructor": false}, {"identifier": "getPipelineFromExpressions", "parameters": "(final List<String> pipelineStagesExpressions, final int skip)", "modifiers": "private", "return": "Pipeline", "signature": "Pipeline getPipelineFromExpressions(final List<String> pipelineStagesExpressions, final int skip)", "full_signature": "private Pipeline getPipelineFromExpressions(final List<String> pipelineStagesExpressions, final int skip)", "class_method_signature": "ImmutableExpressionResolver.getPipelineFromExpressions(final List<String> pipelineStagesExpressions, final int skip)", "testcase": false, "constructor": false}, {"identifier": "getPlaceholderPrefix", "parameters": "(final String placeholder)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getPlaceholderPrefix(final String placeholder)", "full_signature": "private Optional<String> getPlaceholderPrefix(final String placeholder)", "class_method_signature": "ImmutableExpressionResolver.getPlaceholderPrefix(final String placeholder)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "ImmutableExpressionResolver.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableExpressionResolver.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableExpressionResolver.toString()", "testcase": false, "constructor": false}, {"identifier": "isFirstPlaceholderFunction", "parameters": "(final String firstPlaceholderInPipeline)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFirstPlaceholderFunction(final String firstPlaceholderInPipeline)", "full_signature": "private static boolean isFirstPlaceholderFunction(final String firstPlaceholderInPipeline)", "class_method_signature": "ImmutableExpressionResolver.isFirstPlaceholderFunction(final String firstPlaceholderInPipeline)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutableExpressionResolver.java"}, "focal_method": {"identifier": "resolveAsPipelineElement", "parameters": "(final String placeholderExpression)", "modifiers": "@Override public", "return": "PipelineElement", "body": "@Override\n    public PipelineElement resolveAsPipelineElement(final String placeholderExpression) {\n        final List<String> pipelineStagesExpressions = getPipelineStagesExpressions(placeholderExpression);\n        final String firstPlaceholderInPipe = getFirstExpressionInPipe(pipelineStagesExpressions);\n        if (isFirstPlaceholderFunction(firstPlaceholderInPipe)) {\n            return getPipelineFromExpressions(pipelineStagesExpressions, 0).execute(PipelineElement.unresolved(), this);\n        } else {\n            final PipelineElement pipelineInput = resolveSinglePlaceholder(firstPlaceholderInPipe);\n            return getPipelineFromExpressions(pipelineStagesExpressions, 1).execute(pipelineInput, this);\n        }\n    }", "signature": "PipelineElement resolveAsPipelineElement(final String placeholderExpression)", "full_signature": "@Override public PipelineElement resolveAsPipelineElement(final String placeholderExpression)", "class_method_signature": "ImmutableExpressionResolver.resolveAsPipelineElement(final String placeholderExpression)", "testcase": false, "constructor": false, "invocations": ["getPipelineStagesExpressions", "getFirstExpressionInPipe", "isFirstPlaceholderFunction", "execute", "getPipelineFromExpressions", "unresolved", "resolveSinglePlaceholder", "execute", "getPipelineFromExpressions"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}