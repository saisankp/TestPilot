{"test_class": {"identifier": "HaikuReviewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HaikuReview haikuReview;", "modifier": "private", "type": "HaikuReview", "declarator": "haikuReview", "var_name": "haikuReview"}], "file": "haikuReview/20161219-paul-niamh/src/test/java/HaikuReviewTest.java"}, "test_case": {"identifier": "testAllow200Characters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllow200Characters() throws Exception {\n        String haiku = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" +\n                \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" +\n                \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" +\n                \"aaaaaaaaaaaaaaatwohundred\";\n        boolean valid = haikuReview.validateHaikuCharacters(haiku);\n        assertThat(valid).isTrue();\n    }", "signature": "void testAllow200Characters()", "full_signature": "@Test public void testAllow200Characters()", "class_method_signature": "HaikuReviewTest.testAllow200Characters()", "testcase": true, "constructor": false, "invocations": ["validateHaikuCharacters", "isTrue", "assertThat"]}, "focal_class": {"identifier": "HaikuReview", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitHaiku", "parameters": "(String haiku)", "modifiers": "public", "return": "String[]", "signature": "String[] splitHaiku(String haiku)", "full_signature": "public String[] splitHaiku(String haiku)", "class_method_signature": "HaikuReview.splitHaiku(String haiku)", "testcase": false, "constructor": false}, {"identifier": "validateHaikuCharacters", "parameters": "(String haiku)", "modifiers": "public", "return": "boolean", "signature": "boolean validateHaikuCharacters(String haiku)", "full_signature": "public boolean validateHaikuCharacters(String haiku)", "class_method_signature": "HaikuReview.validateHaikuCharacters(String haiku)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfSyllables", "parameters": "(String line)", "modifiers": "public", "return": "int", "signature": "int getNumberOfSyllables(String line)", "full_signature": "public int getNumberOfSyllables(String line)", "class_method_signature": "HaikuReview.getNumberOfSyllables(String line)", "testcase": false, "constructor": false}, {"identifier": "isAConstantant", "parameters": "(char character)", "modifiers": "public", "return": "boolean", "signature": "boolean isAConstantant(char character)", "full_signature": "public boolean isAConstantant(char character)", "class_method_signature": "HaikuReview.isAConstantant(char character)", "testcase": false, "constructor": false}], "file": "haikuReview/20161219-paul-niamh/src/main/java/HaikuReview.java"}, "focal_method": {"identifier": "validateHaikuCharacters", "parameters": "(String haiku)", "modifiers": "public", "return": "boolean", "body": "public boolean validateHaikuCharacters(String haiku) {\n        String haikuWithoutSlashes = haiku.replace(\"/\", \"\");\n        if (haikuWithoutSlashes.length() > 200) {\n            return false;\n        }\n\n        return haiku.matches(\"[a-z// ]*\");\n    }", "signature": "boolean validateHaikuCharacters(String haiku)", "full_signature": "public boolean validateHaikuCharacters(String haiku)", "class_method_signature": "HaikuReview.validateHaikuCharacters(String haiku)", "testcase": false, "constructor": false, "invocations": ["replace", "length", "matches"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}