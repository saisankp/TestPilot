{"test_class": {"identifier": "EncryptionKeyCanaryMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private EncryptionKeyCanaryMapper subject;", "modifier": "private", "type": "EncryptionKeyCanaryMapper", "declarator": "subject", "var_name": "subject"}, {"original_string": "private EncryptionKeyCanaryDataService encryptionKeyCanaryDataService;", "modifier": "private", "type": "EncryptionKeyCanaryDataService", "declarator": "encryptionKeyCanaryDataService", "var_name": "encryptionKeyCanaryDataService"}, {"original_string": "private EncryptionKeySet keySet;", "modifier": "private", "type": "EncryptionKeySet", "declarator": "keySet", "var_name": "keySet"}, {"original_string": "private InternalEncryptionService encryptionService;", "modifier": "private", "type": "InternalEncryptionService", "declarator": "encryptionService", "var_name": "encryptionService"}, {"original_string": "private UUID activeCanaryUuid;", "modifier": "private", "type": "UUID", "declarator": "activeCanaryUuid", "var_name": "activeCanaryUuid"}, {"original_string": "private UUID existingCanaryUuid1;", "modifier": "private", "type": "UUID", "declarator": "existingCanaryUuid1", "var_name": "existingCanaryUuid1"}, {"original_string": "private UUID existingCanaryUuid2;", "modifier": "private", "type": "UUID", "declarator": "existingCanaryUuid2", "var_name": "existingCanaryUuid2"}, {"original_string": "private UUID unknownCanaryUuid;", "modifier": "private", "type": "UUID", "declarator": "unknownCanaryUuid", "var_name": "unknownCanaryUuid"}, {"original_string": "private Key activeKey;", "modifier": "private", "type": "Key", "declarator": "activeKey", "var_name": "activeKey"}, {"original_string": "private Key existingKey1;", "modifier": "private", "type": "Key", "declarator": "existingKey1", "var_name": "existingKey1"}, {"original_string": "private Key existingKey2;", "modifier": "private", "type": "Key", "declarator": "existingKey2", "var_name": "existingKey2"}, {"original_string": "private Key unknownKey;", "modifier": "private", "type": "Key", "declarator": "unknownKey", "var_name": "unknownKey"}, {"original_string": "private KeyProxy activeKeyProxy;", "modifier": "private", "type": "KeyProxy", "declarator": "activeKeyProxy", "var_name": "activeKeyProxy"}, {"original_string": "private KeyProxy existingKey1Proxy;", "modifier": "private", "type": "KeyProxy", "declarator": "existingKey1Proxy", "var_name": "existingKey1Proxy"}, {"original_string": "private KeyProxy existingKey2Proxy;", "modifier": "private", "type": "KeyProxy", "declarator": "existingKey2Proxy", "var_name": "existingKey2Proxy"}, {"original_string": "private EncryptionKeyMetadata activeKeyData;", "modifier": "private", "type": "EncryptionKeyMetadata", "declarator": "activeKeyData", "var_name": "activeKeyData"}, {"original_string": "private EncryptionKeyProvider activeProvider;", "modifier": "private", "type": "EncryptionKeyProvider", "declarator": "activeProvider", "var_name": "activeProvider"}, {"original_string": "private EncryptionKeyMetadata existingKey1Data;", "modifier": "private", "type": "EncryptionKeyMetadata", "declarator": "existingKey1Data", "var_name": "existingKey1Data"}, {"original_string": "private EncryptionKeyMetadata existingKey2Data;", "modifier": "private", "type": "EncryptionKeyMetadata", "declarator": "existingKey2Data", "var_name": "existingKey2Data"}, {"original_string": "private EncryptionKeyCanary activeKeyCanary;", "modifier": "private", "type": "EncryptionKeyCanary", "declarator": "activeKeyCanary", "var_name": "activeKeyCanary"}, {"original_string": "private EncryptionKeyCanary existingKeyCanary1;", "modifier": "private", "type": "EncryptionKeyCanary", "declarator": "existingKeyCanary1", "var_name": "existingKeyCanary1"}, {"original_string": "private EncryptionKeyCanary existingKeyCanary2;", "modifier": "private", "type": "EncryptionKeyCanary", "declarator": "existingKeyCanary2", "var_name": "existingKeyCanary2"}, {"original_string": "private EncryptionKeyCanary unknownCanary;", "modifier": "private", "type": "EncryptionKeyCanary", "declarator": "unknownCanary", "var_name": "unknownCanary"}, {"original_string": "private TimedRetry timedRetry;", "modifier": "private", "type": "TimedRetry", "declarator": "timedRetry", "var_name": "timedRetry"}, {"original_string": "private EncryptionKeysConfiguration encryptionKeysConfiguration;", "modifier": "private", "type": "EncryptionKeysConfiguration", "declarator": "encryptionKeysConfiguration", "var_name": "encryptionKeysConfiguration"}, {"original_string": "private EncryptionProviderFactory providerFactory;", "modifier": "private", "type": "EncryptionProviderFactory", "declarator": "providerFactory", "var_name": "providerFactory"}], "file": "components/encryption/src/test/java/org/cloudfoundry/credhub/services/EncryptionKeyCanaryMapperTest.java"}, "test_case": {"identifier": "mapUuidsToKeys_whenKeyCreationIsDisabled_AndNoKeyIsEverCreated_ThrowsAnException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void mapUuidsToKeys_whenKeyCreationIsDisabled_AndNoKeyIsEverCreated_ThrowsAnException() throws Exception {\n    when(encryptionKeysConfiguration.isKeyCreationEnabled()).thenReturn(false);\n    when(encryptionKeysConfiguration.getProviders().get(0).getKeys()).thenReturn(asList(activeKeyData));\n    when(encryptionKeysConfiguration.getProviders()).thenReturn(asList(activeProvider));\n    when(encryptionKeyCanaryDataService.findAll()).thenReturn(newArrayList());\n    subject = new EncryptionKeyCanaryMapper(encryptionKeyCanaryDataService,\n      encryptionKeysConfiguration, timedRetry, providerFactory);\n\n    exception.expectMessage(\"Timed out waiting for active key canary to be created\");\n    subject.mapUuidsToKeys(keySet);\n  }", "signature": "void mapUuidsToKeys_whenKeyCreationIsDisabled_AndNoKeyIsEverCreated_ThrowsAnException()", "full_signature": "@Test public void mapUuidsToKeys_whenKeyCreationIsDisabled_AndNoKeyIsEverCreated_ThrowsAnException()", "class_method_signature": "EncryptionKeyCanaryMapperTest.mapUuidsToKeys_whenKeyCreationIsDisabled_AndNoKeyIsEverCreated_ThrowsAnException()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isKeyCreationEnabled", "thenReturn", "when", "getKeys", "get", "getProviders", "asList", "thenReturn", "when", "getProviders", "asList", "thenReturn", "when", "findAll", "newArrayList", "expectMessage", "mapUuidsToKeys"]}, "focal_class": {"identifier": "EncryptionKeyCanaryMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Charset CHARSET = Charset.defaultCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET = Charset.defaultCharset()", "var_name": "CHARSET"}, {"original_string": "public static final String CANARY_VALUE = new String(new byte[128], CHARSET);", "modifier": "public static final", "type": "String", "declarator": "CANARY_VALUE = new String(new byte[128], CHARSET)", "var_name": "CANARY_VALUE"}, {"original_string": "public static final String DEPRECATED_CANARY_VALUE = new String(new byte[64], CHARSET);", "modifier": "public static final", "type": "String", "declarator": "DEPRECATED_CANARY_VALUE = new String(new byte[64], CHARSET)", "var_name": "DEPRECATED_CANARY_VALUE"}, {"original_string": "public static final int CANARY_POPULATION_WAIT_SEC = 60 * 10;", "modifier": "public static final", "type": "int", "declarator": "CANARY_POPULATION_WAIT_SEC = 60 * 10", "var_name": "CANARY_POPULATION_WAIT_SEC"}, {"original_string": "private static final Logger LOGGER = LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private final EncryptionKeyCanaryDataService encryptionKeyCanaryDataService;", "modifier": "private final", "type": "EncryptionKeyCanaryDataService", "declarator": "encryptionKeyCanaryDataService", "var_name": "encryptionKeyCanaryDataService"}, {"original_string": "private final EncryptionKeysConfiguration encryptionKeysConfiguration;", "modifier": "private final", "type": "EncryptionKeysConfiguration", "declarator": "encryptionKeysConfiguration", "var_name": "encryptionKeysConfiguration"}, {"original_string": "private final TimedRetry timedRetry;", "modifier": "private final", "type": "TimedRetry", "declarator": "timedRetry", "var_name": "timedRetry"}, {"original_string": "private final EncryptionProviderFactory providerFactory;", "modifier": "private final", "type": "EncryptionProviderFactory", "declarator": "providerFactory", "var_name": "providerFactory"}], "methods": [{"identifier": "EncryptionKeyCanaryMapper", "parameters": "(\n    final EncryptionKeyCanaryDataService encryptionKeyCanaryDataService,\n    final EncryptionKeysConfiguration encryptionKeysConfiguration,\n    final TimedRetry timedRetry,\n    final EncryptionProviderFactory providerFactory\n  )", "modifiers": "@Autowired public", "return": "", "signature": " EncryptionKeyCanaryMapper(\n    final EncryptionKeyCanaryDataService encryptionKeyCanaryDataService,\n    final EncryptionKeysConfiguration encryptionKeysConfiguration,\n    final TimedRetry timedRetry,\n    final EncryptionProviderFactory providerFactory\n  )", "full_signature": "@Autowired public  EncryptionKeyCanaryMapper(\n    final EncryptionKeyCanaryDataService encryptionKeyCanaryDataService,\n    final EncryptionKeysConfiguration encryptionKeysConfiguration,\n    final TimedRetry timedRetry,\n    final EncryptionProviderFactory providerFactory\n  )", "class_method_signature": "EncryptionKeyCanaryMapper.EncryptionKeyCanaryMapper(\n    final EncryptionKeyCanaryDataService encryptionKeyCanaryDataService,\n    final EncryptionKeysConfiguration encryptionKeysConfiguration,\n    final TimedRetry timedRetry,\n    final EncryptionProviderFactory providerFactory\n  )", "testcase": false, "constructor": true}, {"identifier": "mapUuidsToKeys", "parameters": "(final EncryptionKeySet keySet)", "modifiers": "public", "return": "void", "signature": "void mapUuidsToKeys(final EncryptionKeySet keySet)", "full_signature": "public void mapUuidsToKeys(final EncryptionKeySet keySet)", "class_method_signature": "EncryptionKeyCanaryMapper.mapUuidsToKeys(final EncryptionKeySet keySet)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final List<UUID> uuids)", "modifiers": "public", "return": "void", "signature": "void delete(final List<UUID> uuids)", "full_signature": "public void delete(final List<UUID> uuids)", "class_method_signature": "EncryptionKeyCanaryMapper.delete(final List<UUID> uuids)", "testcase": false, "constructor": false}, {"identifier": "createCanary", "parameters": "(\n    final KeyProxy keyProxy, final EncryptionProvider encryptionProvider, final EncryptionKey encryptionKey)", "modifiers": "private", "return": "EncryptionKeyCanary", "signature": "EncryptionKeyCanary createCanary(\n    final KeyProxy keyProxy, final EncryptionProvider encryptionProvider, final EncryptionKey encryptionKey)", "full_signature": "private EncryptionKeyCanary createCanary(\n    final KeyProxy keyProxy, final EncryptionProvider encryptionProvider, final EncryptionKey encryptionKey)", "class_method_signature": "EncryptionKeyCanaryMapper.createCanary(\n    final KeyProxy keyProxy, final EncryptionProvider encryptionProvider, final EncryptionKey encryptionKey)", "testcase": false, "constructor": false}], "file": "components/encryption/src/main/java/org/cloudfoundry/credhub/services/EncryptionKeyCanaryMapper.java"}, "focal_method": {"identifier": "mapUuidsToKeys", "parameters": "(final EncryptionKeySet keySet)", "modifiers": "public", "return": "void", "body": "public void mapUuidsToKeys(final EncryptionKeySet keySet) throws Exception {\n    final List<EncryptionKeyCanary> encryptionKeyCanaries = encryptionKeyCanaryDataService.findAll();\n    for (final EncryptionKeyProvider provider : encryptionKeysConfiguration.getProviders()) {\n      final EncryptionProvider encryptionService = providerFactory.getEncryptionService(provider);\n      for (final EncryptionKeyMetadata keyMetadata : provider.getKeys()) {\n        final KeyProxy keyProxy = encryptionService.createKeyProxy(keyMetadata);\n        EncryptionKeyCanary matchingCanary = null;\n\n        for (final EncryptionKeyCanary canary : encryptionKeyCanaries) {\n          if (keyProxy.matchesCanary(canary)) {\n            matchingCanary = canary;\n            break;\n          }\n        }\n\n        final EncryptionKey encryptionKey = new EncryptionKey(encryptionService, null, keyProxy.getKey(), keyMetadata.getEncryptionKeyName());\n\n        if (matchingCanary == null) {\n          if (keyMetadata.isActive()) {\n            matchingCanary = createCanary(keyProxy, encryptionService, encryptionKey);\n          } else {\n            continue;\n          }\n        }\n        if (keyMetadata.isActive()) {\n          keySet.setActive(matchingCanary.getUuid());\n        }\n\n        try {\n          encryptionKey.setUuid(matchingCanary.getUuid());\n          keySet.add(encryptionKey);\n        } catch (final Exception e) {\n          throw new RuntimeException(\"Failed to connect to encryption provider\", e);\n        }\n      }\n    }\n    if (keySet.getActive() == null) {\n      throw new RuntimeException(\"No active key was found\");\n    }\n  }", "signature": "void mapUuidsToKeys(final EncryptionKeySet keySet)", "full_signature": "public void mapUuidsToKeys(final EncryptionKeySet keySet)", "class_method_signature": "EncryptionKeyCanaryMapper.mapUuidsToKeys(final EncryptionKeySet keySet)", "testcase": false, "constructor": false, "invocations": ["findAll", "getProviders", "getEncryptionService", "getKeys", "createKeyProxy", "matchesCanary", "getKey", "getEncryptionKeyName", "isActive", "createCanary", "isActive", "setActive", "getUuid", "setUuid", "getUuid", "add", "getActive"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}