{"test_class": {"identifier": "NovaLauncherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> ports = new HashSet<>();", "modifier": "private static final", "type": "Set<String>", "declarator": "ports = new HashSet<>()", "var_name": "ports"}, {"original_string": "private NovaContext novaContext;", "modifier": "private", "type": "NovaContext", "declarator": "novaContext", "var_name": "novaContext"}, {"original_string": "private SshKeyPair sshKeyPair;", "modifier": "private", "type": "SshKeyPair", "declarator": "sshKeyPair", "var_name": "sshKeyPair"}, {"original_string": "private NovaCredentials novaCredentials;", "modifier": "private", "type": "NovaCredentials", "declarator": "novaCredentials", "var_name": "novaCredentials"}, {"original_string": "private ContextBuilder builder;", "modifier": "private", "type": "ContextBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private ComputeServiceContext serviceContext;", "modifier": "private", "type": "ComputeServiceContext", "declarator": "serviceContext", "var_name": "serviceContext"}, {"original_string": "private ComputeService novaComputeService;", "modifier": "private", "type": "ComputeService", "declarator": "novaComputeService", "var_name": "novaComputeService"}, {"original_string": "private NovaApi novaApi;", "modifier": "private", "type": "NovaApi", "declarator": "novaApi", "var_name": "novaApi"}, {"original_string": "private SecurityGroupApi securityGroupApi;", "modifier": "private", "type": "SecurityGroupApi", "declarator": "securityGroupApi", "var_name": "securityGroupApi"}, {"original_string": "private KeyPairApi keyPairApi;", "modifier": "private", "type": "KeyPairApi", "declarator": "keyPairApi", "var_name": "keyPairApi"}, {"original_string": "private Optional securityGroupApiOptional;", "modifier": "private", "type": "Optional", "declarator": "securityGroupApiOptional", "var_name": "securityGroupApiOptional"}, {"original_string": "private Optional keyPairApiOptional;", "modifier": "private", "type": "Optional", "declarator": "keyPairApiOptional", "var_name": "keyPairApiOptional"}, {"original_string": "private SecurityGroup securityGroupCreated;", "modifier": "private", "type": "SecurityGroup", "declarator": "securityGroupCreated", "var_name": "securityGroupCreated"}, {"original_string": "private String clusterName;", "modifier": "private", "type": "String", "declarator": "clusterName", "var_name": "clusterName"}, {"original_string": "private String groupName;", "modifier": "private", "type": "String", "declarator": "groupName", "var_name": "groupName"}, {"original_string": "private Nova nova;", "modifier": "private", "type": "Nova", "declarator": "nova", "var_name": "nova"}], "file": "karamel-core/src/test/java/se/kth/karamel/backend/launcher/nova/NovaLauncherTest.java"}, "test_case": {"identifier": "uploadSSHPublicKeyAndRecreateOld", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void uploadSSHPublicKeyAndRecreateOld() throws KaramelException {\n    String keypairName = \"pepeKeyPair\";\n    KeyPair pair = mock(KeyPair.class);\n\n    List<KeyPair> keyPairList = new ArrayList<>();\n    keyPairList.add(pair);\n    FluentIterable<KeyPair> keys = FluentIterable.from(keyPairList);\n\n    when(keyPairApi.list()).thenReturn(keys);\n    when(keyPairApi.delete(keypairName)).thenReturn(true);\n    when(keyPairApi.createWithPublicKey(keypairName, sshKeyPair.getPublicKey())).thenReturn(pair);\n\n    NovaLauncher novaLauncher = new NovaLauncher(novaContext, sshKeyPair);\n    boolean uploadSuccessful = novaLauncher.uploadSshPublicKey(keypairName, nova, true);\n    assertTrue(uploadSuccessful);\n  }", "signature": "void uploadSSHPublicKeyAndRecreateOld()", "full_signature": "@Test public void uploadSSHPublicKeyAndRecreateOld()", "class_method_signature": "NovaLauncherTest.uploadSSHPublicKeyAndRecreateOld()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "from", "thenReturn", "when", "list", "thenReturn", "when", "delete", "thenReturn", "when", "createWithPublicKey", "getPublicKey", "uploadSshPublicKey", "assertTrue"]}, "focal_class": {"identifier": "NovaLauncher", "superclass": "extends Launcher", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(NovaLauncher.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(NovaLauncher.class)", "var_name": "logger"}, {"original_string": "private static boolean TESTING = true;", "modifier": "private static", "type": "boolean", "declarator": "TESTING = true", "var_name": "TESTING"}, {"original_string": "private final NovaContext novaContext;", "modifier": "private final", "type": "NovaContext", "declarator": "novaContext", "var_name": "novaContext"}, {"original_string": "private final SshKeyPair sshKeyPair;", "modifier": "private final", "type": "SshKeyPair", "declarator": "sshKeyPair", "var_name": "sshKeyPair"}, {"original_string": "private Set<String> keys = new HashSet<>();", "modifier": "private", "type": "Set<String>", "declarator": "keys = new HashSet<>()", "var_name": "keys"}], "methods": [{"identifier": "NovaLauncher", "parameters": "(NovaContext novaContext, SshKeyPair sshKeyPair)", "modifiers": "public", "return": "", "signature": " NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "full_signature": "public  NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "class_method_signature": "NovaLauncher.NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "testcase": false, "constructor": true}, {"identifier": "validateCredentials", "parameters": "(NovaCredentials novaCredentials, ContextBuilder builder)", "modifiers": "public static", "return": "NovaContext", "signature": "NovaContext validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "full_signature": "public static NovaContext validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "class_method_signature": "NovaLauncher.validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "readCredentials", "parameters": "(Confs confs)", "modifiers": "public static", "return": "NovaCredentials", "signature": "NovaCredentials readCredentials(Confs confs)", "full_signature": "public static NovaCredentials readCredentials(Confs confs)", "class_method_signature": "NovaLauncher.readCredentials(Confs confs)", "testcase": false, "constructor": false}, {"identifier": "createSecurityGroup", "parameters": "(String clusterName, String groupName, Nova nova, Set<String> ports)", "modifiers": "public", "return": "String", "signature": "String createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "full_signature": "public String createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "class_method_signature": "NovaLauncher.createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "testcase": false, "constructor": false}, {"identifier": "uploadSshPublicKey", "parameters": "(String keyPairName, Nova nova, boolean removeOld)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "full_signature": "public boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "class_method_signature": "NovaLauncher.uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "testcase": false, "constructor": false}, {"identifier": "cleanupFailedNodes", "parameters": "(Map<NodeMetadata, Throwable> failedNodes)", "modifiers": "public", "return": "boolean", "signature": "boolean cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "full_signature": "public boolean cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "class_method_signature": "NovaLauncher.cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(JsonCluster definition, ClusterRuntime runtime)", "modifiers": "@Override public", "return": "void", "signature": "void cleanup(JsonCluster definition, ClusterRuntime runtime)", "full_signature": "@Override public void cleanup(JsonCluster definition, ClusterRuntime runtime)", "class_method_signature": "NovaLauncher.cleanup(JsonCluster definition, ClusterRuntime runtime)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "modifiers": "public", "return": "void", "signature": "void cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "full_signature": "public void cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "class_method_signature": "NovaLauncher.cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "testcase": false, "constructor": false}, {"identifier": "forkGroup", "parameters": "(JsonCluster definition, ClusterRuntime runtime, String name)", "modifiers": "@Override public", "return": "String", "signature": "String forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "full_signature": "@Override public String forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "class_method_signature": "NovaLauncher.forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "testcase": false, "constructor": false}, {"identifier": "forkMachines", "parameters": "(JsonCluster definition, ClusterRuntime runtime, String name)", "modifiers": "@Override public", "return": "List<MachineRuntime>", "signature": "List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "full_signature": "@Override public List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "class_method_signature": "NovaLauncher.forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "testcase": false, "constructor": false}, {"identifier": "requestNodes", "parameters": "(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "modifiers": "private", "return": "List<MachineRuntime>", "signature": "List<MachineRuntime> requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "full_signature": "private List<MachineRuntime> requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "class_method_signature": "NovaLauncher.requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "testcase": false, "constructor": false}, {"identifier": "addSuccessAndLostNodes", "parameters": "(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "modifiers": "private", "return": "void", "signature": "void addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "full_signature": "private void addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "class_method_signature": "NovaLauncher.addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "testcase": false, "constructor": false}, {"identifier": "findLeftVmNames", "parameters": "(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "modifiers": "private", "return": "List<String>", "signature": "List<String> findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "full_signature": "private List<String> findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "class_method_signature": "NovaLauncher.findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "testcase": false, "constructor": false}, {"identifier": "withPredicate", "parameters": "(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "modifiers": "public static", "return": "Predicate<NodeMetadata>", "signature": "Predicate<NodeMetadata> withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "full_signature": "public static Predicate<NodeMetadata> withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "class_method_signature": "NovaLauncher.withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/launcher/nova/NovaLauncher.java"}, "focal_method": {"identifier": "uploadSshPublicKey", "parameters": "(String keyPairName, Nova nova, boolean removeOld)", "modifiers": "public", "return": "boolean", "body": "public boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld) {\n    boolean uploadSuccesful;\n    FluentIterable<KeyPair> keyPairs = novaContext.getKeyPairApi().list();\n    if (keyPairs.isEmpty()) {\n      logger.info(String.format(\"New keypair '%s' is being uploaded to Nova OpenStack\", keyPairName));\n      novaContext.getKeyPairApi().createWithPublicKey(keyPairName, sshKeyPair.getPublicKey());\n      uploadSuccesful = true;\n    } else if (removeOld) {\n      logger.info(String.format(\"Removing the old keypair '%s' and uploading the new one ...\", keyPairName));\n      boolean deleteSuccesful = novaContext.getKeyPairApi().delete(keyPairName);\n      KeyPair pair = novaContext.getKeyPairApi().createWithPublicKey(keyPairName, sshKeyPair.getPublicKey());\n      uploadSuccesful = deleteSuccesful && pair != null;\n    } else {\n      uploadSuccesful = false;\n    }\n    return uploadSuccesful;\n  }", "signature": "boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "full_signature": "public boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "class_method_signature": "NovaLauncher.uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "testcase": false, "constructor": false, "invocations": ["list", "getKeyPairApi", "isEmpty", "info", "format", "createWithPublicKey", "getKeyPairApi", "getPublicKey", "info", "format", "delete", "getKeyPairApi", "createWithPublicKey", "getKeyPairApi", "getPublicKey"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}