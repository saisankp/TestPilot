{"test_class": {"identifier": "PatternSameSizeSupportWeightFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private APIUsagePattern pattern;", "modifier": "private", "type": "APIUsagePattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "private Overlap violation;", "modifier": "private", "type": "Overlap", "declarator": "violation", "var_name": "violation"}], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/PatternSameSizeSupportWeightFunctionTest.java"}, "test_case": {"identifier": "calculatesPatternSupportWeight_equallySizedPatternWithSmallerSupport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculatesPatternSupportWeight_equallySizedPatternWithSmallerSupport() {\n        APIUsagePattern pattern2 = somePattern(pattern, 1);\n        model = () -> asSet(pattern, pattern2);\n        ViolationWeightFunction weightFunction = new PatternSameSizeSupportWeightFunction();\n\n        double weight = weightFunction.getWeight(violation, null, model);\n\n        assertThat(weight, is(1.0));\n    }", "signature": "void calculatesPatternSupportWeight_equallySizedPatternWithSmallerSupport()", "full_signature": "@Test public void calculatesPatternSupportWeight_equallySizedPatternWithSmallerSupport()", "class_method_signature": "PatternSameSizeSupportWeightFunctionTest.calculatesPatternSupportWeight_equallySizedPatternWithSmallerSupport()", "testcase": true, "constructor": false, "invocations": ["somePattern", "asSet", "getWeight", "assertThat", "is"]}, "focal_class": {"identifier": "PatternSameSizeSupportWeightFunction", "superclass": "", "interfaces": "implements ViolationWeightFunction", "fields": [], "methods": [{"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSameSizeSupportWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "String", "signature": "String getFormula(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public String getFormula(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSameSizeSupportWeightFunction.getFormula(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "PatternSameSizeSupportWeightFunction.getId()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/PatternSameSizeSupportWeightFunction.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getWeight(Overlap violation, Overlaps overlaps, Model model) {\n        APIUsagePattern pattern = violation.getPattern();\n        return pattern.getSupport() / (double) model.getMaxPatternSupport(pattern.getNodeSize());\n    }", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSameSizeSupportWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["getPattern", "getSupport", "getMaxPatternSupport", "getNodeSize"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}