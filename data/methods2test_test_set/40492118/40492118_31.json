{"test_class": {"identifier": "PreLollipopNetworkObservingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Spy private PreLollipopNetworkObservingStrategy strategy =\n      new PreLollipopNetworkObservingStrategy();", "modifier": "@Spy private", "type": "PreLollipopNetworkObservingStrategy", "declarator": "strategy =\n      new PreLollipopNetworkObservingStrategy()", "var_name": "strategy"}, {"original_string": "@Mock private BroadcastReceiver broadcastReceiver;", "modifier": "@Mock private", "type": "BroadcastReceiver", "declarator": "broadcastReceiver", "var_name": "broadcastReceiver"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/PreLollipopNetworkObservingStrategyTest.java"}, "test_case": {"identifier": "shouldTryToUnregisterReceiver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldTryToUnregisterReceiver() {\n    // given\n    final PreLollipopNetworkObservingStrategy strategy = new PreLollipopNetworkObservingStrategy();\n    final Application context = spy(RuntimeEnvironment.application);\n\n    // when\n    strategy.tryToUnregisterReceiver(context, broadcastReceiver);\n\n    // then\n    verify(context).unregisterReceiver(broadcastReceiver);\n  }", "signature": "void shouldTryToUnregisterReceiver()", "full_signature": "@Test public void shouldTryToUnregisterReceiver()", "class_method_signature": "PreLollipopNetworkObservingStrategyTest.shouldTryToUnregisterReceiver()", "testcase": true, "constructor": false, "invocations": ["spy", "tryToUnregisterReceiver", "unregisterReceiver", "verify"]}, "focal_class": {"identifier": "PreLollipopNetworkObservingStrategy", "superclass": "", "interfaces": "implements NetworkObservingStrategy", "fields": [], "methods": [{"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "Observable<Connectivity>", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@Override public Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "PreLollipopNetworkObservingStrategy.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false}, {"identifier": "tryToUnregisterReceiver", "parameters": "(final Context context, final BroadcastReceiver receiver)", "modifiers": "protected", "return": "void", "signature": "void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "full_signature": "protected void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "class_method_signature": "PreLollipopNetworkObservingStrategy.tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final String message, final Exception exception)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final String message, final Exception exception)", "full_signature": "@Override public void onError(final String message, final Exception exception)", "class_method_signature": "PreLollipopNetworkObservingStrategy.onError(final String message, final Exception exception)", "testcase": false, "constructor": false}, {"identifier": "disposeInUiThread", "parameters": "(final Action action)", "modifiers": "private", "return": "Disposable", "signature": "Disposable disposeInUiThread(final Action action)", "full_signature": "private Disposable disposeInUiThread(final Action action)", "class_method_signature": "PreLollipopNetworkObservingStrategy.disposeInUiThread(final Action action)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/PreLollipopNetworkObservingStrategy.java"}, "focal_method": {"identifier": "tryToUnregisterReceiver", "parameters": "(final Context context, final BroadcastReceiver receiver)", "modifiers": "protected", "return": "void", "body": "protected void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver) {\n    try {\n      context.unregisterReceiver(receiver);\n    } catch (Exception exception) {\n      onError(\"receiver was already unregistered\", exception);\n    }\n  }", "signature": "void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "full_signature": "protected void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "class_method_signature": "PreLollipopNetworkObservingStrategy.tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "testcase": false, "constructor": false, "invocations": ["unregisterReceiver", "onError"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}