{"test_class": {"identifier": "JMSAppenderTest", "superclass": "extends CamelTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String EVENTS_TOPIC = \"Events\";", "modifier": "private static final", "type": "String", "declarator": "EVENTS_TOPIC = \"Events\"", "var_name": "EVENTS_TOPIC"}, {"original_string": "private JMSAppender appender;", "modifier": "private", "type": "JMSAppender", "declarator": "appender", "var_name": "appender"}, {"original_string": "private static BrokerService broker;", "modifier": "private static", "type": "BrokerService", "declarator": "broker", "var_name": "broker"}], "file": "logging/jms-appender/src/test/java/org/apache/servicemix/logging/jms/JMSAppenderTest.java"}, "test_case": {"identifier": "testLogstashAppender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogstashAppender() throws InterruptedException {\n        MockEndpoint events = getMockEndpoint(\"mock:events\");\n        events.expectedMessageCount(1);\n\n        appender.doAppend(MockEvents.createInfoEvent());\n\n        assertMockEndpointsSatisfied();\n    }", "signature": "void testLogstashAppender()", "full_signature": "@Test public void testLogstashAppender()", "class_method_signature": "JMSAppenderTest.testLogstashAppender()", "testcase": true, "constructor": false, "invocations": ["getMockEndpoint", "expectedMessageCount", "doAppend", "createInfoEvent", "assertMockEndpointsSatisfied"]}, "focal_class": {"identifier": "JMSAppender", "superclass": "", "interfaces": "implements PaxAppender", "fields": [{"original_string": "private static final String PACKAGE = JMSAppender.class.getPackage().getName();", "modifier": "private static final", "type": "String", "declarator": "PACKAGE = JMSAppender.class.getPackage().getName()", "var_name": "PACKAGE"}, {"original_string": "private static final transient Logger LOG = LoggerFactory.getLogger(JMSAppender.class);", "modifier": "private static final transient", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JMSAppender.class)", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_EVENT_FORMAT = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EVENT_FORMAT = \"default\"", "var_name": "DEFAULT_EVENT_FORMAT"}, {"original_string": "private static final String LOGSTASH_EVENT_FORMAT = \"logstash\";", "modifier": "private static final", "type": "String", "declarator": "LOGSTASH_EVENT_FORMAT = \"logstash\"", "var_name": "LOGSTASH_EVENT_FORMAT"}, {"original_string": "private ConnectionFactory jmsConnectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "jmsConnectionFactory", "var_name": "jmsConnectionFactory"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private MessageProducer producer;", "modifier": "private", "type": "MessageProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "private String destinationName;", "modifier": "private", "type": "String", "declarator": "destinationName", "var_name": "destinationName"}, {"original_string": "private LoggingEventFormat format = new DefaultLoggingEventFormat();", "modifier": "private", "type": "LoggingEventFormat", "declarator": "format = new DefaultLoggingEventFormat()", "var_name": "format"}, {"original_string": "private  ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}], "methods": [{"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "JMSAppender.close()", "testcase": false, "constructor": false}, {"identifier": "onBind", "parameters": "(ConnectionFactory service)", "modifiers": "public", "return": "void", "signature": "void onBind(ConnectionFactory service)", "full_signature": "public void onBind(ConnectionFactory service)", "class_method_signature": "JMSAppender.onBind(ConnectionFactory service)", "testcase": false, "constructor": false}, {"identifier": "onUnbind", "parameters": "(ConnectionFactory service)", "modifiers": "public", "return": "void", "signature": "void onUnbind(ConnectionFactory service)", "full_signature": "public void onUnbind(ConnectionFactory service)", "class_method_signature": "JMSAppender.onUnbind(ConnectionFactory service)", "testcase": false, "constructor": false}, {"identifier": "doAppend", "parameters": "(final PaxLoggingEvent paxLoggingEvent)", "modifiers": "public", "return": "void", "signature": "void doAppend(final PaxLoggingEvent paxLoggingEvent)", "full_signature": "public void doAppend(final PaxLoggingEvent paxLoggingEvent)", "class_method_signature": "JMSAppender.doAppend(final PaxLoggingEvent paxLoggingEvent)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(PaxLoggingEvent event)", "modifiers": "private static", "return": "boolean", "signature": "boolean exclude(PaxLoggingEvent event)", "full_signature": "private static boolean exclude(PaxLoggingEvent event)", "class_method_signature": "JMSAppender.exclude(PaxLoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(String string, String start)", "modifiers": "private static", "return": "boolean", "signature": "boolean startsWith(String string, String start)", "full_signature": "private static boolean startsWith(String string, String start)", "class_method_signature": "JMSAppender.startsWith(String string, String start)", "testcase": false, "constructor": false}, {"identifier": "setJmsConnectionFactory", "parameters": "(ConnectionFactory jmsConnectionFactory)", "modifiers": "public", "return": "void", "signature": "void setJmsConnectionFactory(ConnectionFactory jmsConnectionFactory)", "full_signature": "public void setJmsConnectionFactory(ConnectionFactory jmsConnectionFactory)", "class_method_signature": "JMSAppender.setJmsConnectionFactory(ConnectionFactory jmsConnectionFactory)", "testcase": false, "constructor": false}, {"identifier": "setDestinationName", "parameters": "(String destinationName)", "modifiers": "public", "return": "void", "signature": "void setDestinationName(String destinationName)", "full_signature": "public void setDestinationName(String destinationName)", "class_method_signature": "JMSAppender.setDestinationName(String destinationName)", "testcase": false, "constructor": false}, {"identifier": "setFormat", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setFormat(String name)", "full_signature": "public void setFormat(String name)", "class_method_signature": "JMSAppender.setFormat(String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateConnection", "parameters": "()", "modifiers": "protected", "return": "Connection", "signature": "Connection getOrCreateConnection()", "full_signature": "protected Connection getOrCreateConnection()", "class_method_signature": "JMSAppender.getOrCreateConnection()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateSession", "parameters": "()", "modifiers": "protected", "return": "Session", "signature": "Session getOrCreateSession()", "full_signature": "protected Session getOrCreateSession()", "class_method_signature": "JMSAppender.getOrCreateSession()", "testcase": false, "constructor": false}, {"identifier": "getOrCreatePublisher", "parameters": "()", "modifiers": "protected", "return": "MessageProducer", "signature": "MessageProducer getOrCreatePublisher()", "full_signature": "protected MessageProducer getOrCreatePublisher()", "class_method_signature": "JMSAppender.getOrCreatePublisher()", "testcase": false, "constructor": false}, {"identifier": "closeJMSResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeJMSResources()", "full_signature": "private void closeJMSResources()", "class_method_signature": "JMSAppender.closeJMSResources()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Object obj)", "modifiers": "private static", "return": "void", "signature": "void close(Object obj)", "full_signature": "private static void close(Object obj)", "class_method_signature": "JMSAppender.close(Object obj)", "testcase": false, "constructor": false}], "file": "logging/jms-appender/src/main/java/org/apache/servicemix/logging/jms/JMSAppender.java"}, "focal_method": {"identifier": "doAppend", "parameters": "(final PaxLoggingEvent paxLoggingEvent)", "modifiers": "public", "return": "void", "body": "public void doAppend(final PaxLoggingEvent paxLoggingEvent) {\n        if (exclude(paxLoggingEvent) || jmsConnectionFactory == null) {\n            return;\n        }\n        Runnable worker = new Runnable() {\n            public void run() {\n                try {\n                    // Send message to the destination\n                    TextMessage message = getOrCreateSession().createTextMessage();\n                    message.setText(format.toString(paxLoggingEvent));\n                    MessageProducer producer = getOrCreatePublisher();\n                    producer.send(message);\n                } catch (JMSException e) {\n                    LOG.warn(\"Exception caught while sending log event - reinitializing JMS resources to recover\",e);\n                    closeJMSResources();\n                }\n            }\n        };\n        executor.execute(worker);\n    }", "signature": "void doAppend(final PaxLoggingEvent paxLoggingEvent)", "full_signature": "public void doAppend(final PaxLoggingEvent paxLoggingEvent)", "class_method_signature": "JMSAppender.doAppend(final PaxLoggingEvent paxLoggingEvent)", "testcase": false, "constructor": false, "invocations": ["exclude", "createTextMessage", "getOrCreateSession", "setText", "toString", "getOrCreatePublisher", "send", "warn", "closeJMSResources", "execute"]}, "repository": {"repo_id": 18203743, "url": "https://github.com/apache/servicemix", "language": "Java", "is_fork": false, "fork_count": 149, "stargazer_count": 124, "size": 4543, "license": "licensed"}}