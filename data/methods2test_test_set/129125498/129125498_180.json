{"test_class": {"identifier": "ConstantThresholdDetectorFactoryProviderTest", "superclass": "extends AbstractDetectorFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/constant/ConstantThresholdDetectorFactoryProviderTest.java"}, "test_case": {"identifier": "testBuildDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildDetector() {\n        val factoryUnderTest = new ConstantThresholdDetectorFactoryProvider();\n        val document = readDocument(\"constant-threshold\");\n        val detector = factoryUnderTest.buildDetector(document);\n        val params = detector.getParams();\n        val thresholds = params.getThresholds();\n\n        assertNotNull(detector);\n        assertSame(ConstantThresholdDetector.class, detector.getClass());\n        assertEquals(\"e2e290a0-d1c1-471e-9d72-79d43282cfbd\", detector.getUuid().toString());\n        assertEquals(AnomalyType.RIGHT_TAILED, params.getType());\n        assertEquals(16666.0, thresholds.getUpperStrong(), TOLERANCE);\n        assertEquals(2161.0, thresholds.getUpperWeak(), TOLERANCE);\n    }", "signature": "void testBuildDetector()", "full_signature": "@Test public void testBuildDetector()", "class_method_signature": "ConstantThresholdDetectorFactoryProviderTest.testBuildDetector()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector", "getParams", "getThresholds", "assertNotNull", "assertSame", "getClass", "assertEquals", "toString", "getUuid", "assertEquals", "getType", "assertEquals", "getUpperStrong", "assertEquals", "getUpperWeak"]}, "focal_class": {"identifier": "ConstantThresholdDetectorFactoryProvider", "superclass": "", "interfaces": "implements DetectorFactoryProvider<ConstantThresholdDetector>", "fields": [{"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "methods": [{"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ConstantThresholdDetector", "signature": "ConstantThresholdDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ConstantThresholdDetector buildDetector(DetectorDocument document)", "class_method_signature": "ConstantThresholdDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "parseParams", "parameters": "(DetectorDocument document)", "modifiers": "private", "return": "ConstantThresholdDetectorParams", "signature": "ConstantThresholdDetectorParams parseParams(DetectorDocument document)", "full_signature": "private ConstantThresholdDetectorParams parseParams(DetectorDocument document)", "class_method_signature": "ConstantThresholdDetectorFactoryProvider.parseParams(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/constant/ConstantThresholdDetectorFactoryProvider.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ConstantThresholdDetector", "body": "@Override\n    public ConstantThresholdDetector buildDetector(DetectorDocument document) {\n        notNull(document, \"document can't be null\");\n        val params = parseParams(document);\n        return new ConstantThresholdDetector(document.getUuid(), params, document.isTrusted());\n    }", "signature": "ConstantThresholdDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ConstantThresholdDetector buildDetector(DetectorDocument document)", "class_method_signature": "ConstantThresholdDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["notNull", "parseParams", "getUuid", "isTrusted"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}