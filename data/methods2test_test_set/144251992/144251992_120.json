{"test_class": {"identifier": "MailSenderAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MessageRepository messageRepositoryMock;", "modifier": "@Mock\n    private", "type": "MessageRepository", "declarator": "messageRepositoryMock", "var_name": "messageRepositoryMock"}, {"original_string": "@Mock\n    private JavaMailSenderImpl javaMailSenderMock;", "modifier": "@Mock\n    private", "type": "JavaMailSenderImpl", "declarator": "javaMailSenderMock", "var_name": "javaMailSenderMock"}, {"original_string": "@Mock\n    private UserService userServiceMock;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "userServiceMock", "var_name": "userServiceMock"}, {"original_string": "@Mock\n    private MailConfigurationProperties mailPropertiesMock;", "modifier": "@Mock\n    private", "type": "MailConfigurationProperties", "declarator": "mailPropertiesMock", "var_name": "mailPropertiesMock"}, {"original_string": "@Mock\n    private TemplateMessage templateMessageMock;", "modifier": "@Mock\n    private", "type": "TemplateMessage", "declarator": "templateMessageMock", "var_name": "templateMessageMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private UserData userDataMock;", "modifier": "@Mock\n    private", "type": "UserData", "declarator": "userDataMock", "var_name": "userDataMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private MailSenderAdapter mailSenderAdapter;", "modifier": "private", "type": "MailSenderAdapter", "declarator": "mailSenderAdapter", "var_name": "mailSenderAdapter"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/adapter/mail/MailSenderAdapterTest.java"}, "test_case": {"identifier": "sendMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sendMessage() {\n        // given\n        var expectedFrom = \"sender@test.com\";\n        var expectedTo = \"mail@googlemail.com\";\n        var expectedSubject = \"This is a subject :-)\";\n        var expectedText = \"This is a cool text and very long too!\";\n\n        var expectedSimpleMessage = new SimpleMailMessage();\n        expectedSimpleMessage.setFrom(expectedFrom);\n        expectedSimpleMessage.setTo(expectedTo);\n        expectedSimpleMessage.setSubject(expectedSubject);\n        expectedSimpleMessage.setText(expectedText);\n\n        given(templateMessageMock.getSubject()).willReturn(expectedSubject);\n        given(templateMessageMock.getText()).willReturn(expectedText);\n        given(templateMessageMock.getAddressee()).willReturn(userMock);\n\n        given(userServiceMock.getUserData(userMock)).willReturn(userDataMock);\n        given(userDataMock.getEmail()).willReturn(expectedTo);\n\n        given(mailPropertiesMock.getFromMail()).willReturn(expectedFrom);\n\n        // when\n        mailSenderAdapter.sendMessage(templateMessageMock);\n\n        // then\n        verify(javaMailSenderMock).send(expectedSimpleMessage);\n    }", "signature": "void sendMessage()", "full_signature": "@Test public void sendMessage()", "class_method_signature": "MailSenderAdapterTest.sendMessage()", "testcase": true, "constructor": false, "invocations": ["setFrom", "setTo", "setSubject", "setText", "willReturn", "given", "getSubject", "willReturn", "given", "getText", "willReturn", "given", "getAddressee", "willReturn", "given", "getUserData", "willReturn", "given", "getEmail", "willReturn", "given", "getFromMail", "sendMessage", "send", "verify"]}, "focal_class": {"identifier": "MailSenderAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MessageRepository messageRepository;", "modifier": "private final", "type": "MessageRepository", "declarator": "messageRepository", "var_name": "messageRepository"}, {"original_string": "private final JavaMailSender mailSender;", "modifier": "private final", "type": "JavaMailSender", "declarator": "mailSender", "var_name": "mailSender"}, {"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final MailConfigurationProperties properties;", "modifier": "private final", "type": "MailConfigurationProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "MailSenderAdapter", "parameters": "(MessageRepository messageRepository,\n                             JavaMailSender mailSender,\n                             UserService userService,\n                             MailConfigurationProperties properties,\n                             Clock clock)", "modifiers": "public", "return": "", "signature": " MailSenderAdapter(MessageRepository messageRepository,\n                             JavaMailSender mailSender,\n                             UserService userService,\n                             MailConfigurationProperties properties,\n                             Clock clock)", "full_signature": "public  MailSenderAdapter(MessageRepository messageRepository,\n                             JavaMailSender mailSender,\n                             UserService userService,\n                             MailConfigurationProperties properties,\n                             Clock clock)", "class_method_signature": "MailSenderAdapter.MailSenderAdapter(MessageRepository messageRepository,\n                             JavaMailSender mailSender,\n                             UserService userService,\n                             MailConfigurationProperties properties,\n                             Clock clock)", "testcase": false, "constructor": true}, {"identifier": "sendPendingMessages", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 10000L) @Transactional public", "return": "void", "signature": "void sendPendingMessages()", "full_signature": "@Scheduled(fixedDelay = 10000L) @Transactional public void sendPendingMessages()", "class_method_signature": "MailSenderAdapter.sendPendingMessages()", "testcase": false, "constructor": false}, {"identifier": "queueMessage", "parameters": "(T message)", "modifiers": "@Transactional public", "return": "T", "signature": "T queueMessage(T message)", "full_signature": "@Transactional public T queueMessage(T message)", "class_method_signature": "MailSenderAdapter.queueMessage(T message)", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(TemplateMessage message)", "modifiers": "", "return": "void", "signature": "void sendMessage(TemplateMessage message)", "full_signature": " void sendMessage(TemplateMessage message)", "class_method_signature": "MailSenderAdapter.sendMessage(TemplateMessage message)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/adapter/mail/MailSenderAdapter.java"}, "focal_method": {"identifier": "sendMessage", "parameters": "(TemplateMessage message)", "modifiers": "", "return": "void", "body": "void sendMessage(TemplateMessage message) {\n        var addressee = message.getAddressee();\n        var addresseeMail = userService.getUserData(addressee).getEmail();\n\n        // create a new mail message, set the subject, text, addressee and send it\n        var mailMessage = new SimpleMailMessage();\n        mailMessage.setSubject(message.getSubject());\n        mailMessage.setText(message.getText());\n        mailMessage.setFrom(properties.getFromMail());\n        mailMessage.setTo(addresseeMail);\n\n        mailSender.send(mailMessage);\n\n        log.info(String.format(\"Mail sent to %s!\", addresseeMail));\n    }", "signature": "void sendMessage(TemplateMessage message)", "full_signature": " void sendMessage(TemplateMessage message)", "class_method_signature": "MailSenderAdapter.sendMessage(TemplateMessage message)", "testcase": false, "constructor": false, "invocations": ["getAddressee", "getEmail", "getUserData", "setSubject", "getSubject", "setText", "getText", "setFrom", "getFromMail", "setTo", "send", "info", "format"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}