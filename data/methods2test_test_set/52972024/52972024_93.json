{"test_class": {"identifier": "PluginLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/FeatureLoadingSystem/PluginLoaderFormJar/src/test/java/info/smart_tools/smartactors/feature_loading_system/plugin_loader_from_jar/PluginLoaderTest.java"}, "test_case": {"identifier": "checkPluginLoaderException", "parameters": "()", "modifiers": "@Test (expected = PluginLoaderException.class) public", "return": "void", "body": "@Test (expected = PluginLoaderException.class)\n    public void checkPluginLoaderException()\n            throws Exception {\n        ExpansibleURLClassLoader cl = new ExpansibleURLClassLoader(new URL[]{});\n        IPluginLoaderVisitor<String> visitor = mock(IPluginLoaderVisitor.class);\n        IPluginLoader<Collection<IPath>> pl = new PluginLoader(\n                cl,\n                (t) -> {\n                    throw new RuntimeException(\"Could not create instance of IPlugin\");\n                },\n                visitor);\n        pl.loadPlugin(null);\n        fail();\n    }", "signature": "void checkPluginLoaderException()", "full_signature": "@Test (expected = PluginLoaderException.class) public void checkPluginLoaderException()", "class_method_signature": "PluginLoaderTest.checkPluginLoaderException()", "testcase": true, "constructor": false, "invocations": ["mock", "loadPlugin", "fail"]}, "focal_class": {"identifier": "PluginLoader", "superclass": "", "interfaces": "implements IPluginLoader<Collection<IPath>>", "fields": [{"original_string": "private static final String CLASS_EXTENSION = \".class\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_EXTENSION = \".class\"", "var_name": "CLASS_EXTENSION"}, {"original_string": "private ExpansibleURLClassLoader classLoader;", "modifier": "private", "type": "ExpansibleURLClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private IAction<Class> creator;", "modifier": "private", "type": "IAction<Class>", "declarator": "creator", "var_name": "creator"}, {"original_string": "private IPluginLoaderVisitor<String> visitor;", "modifier": "private", "type": "IPluginLoaderVisitor<String>", "declarator": "visitor", "var_name": "visitor"}], "methods": [{"identifier": "PluginLoader", "parameters": "(final ClassLoader classLoader, final IAction<Class> action, final IPluginLoaderVisitor<String> visitor)", "modifiers": "public", "return": "", "signature": " PluginLoader(final ClassLoader classLoader, final IAction<Class> action, final IPluginLoaderVisitor<String> visitor)", "full_signature": "public  PluginLoader(final ClassLoader classLoader, final IAction<Class> action, final IPluginLoaderVisitor<String> visitor)", "class_method_signature": "PluginLoader.PluginLoader(final ClassLoader classLoader, final IAction<Class> action, final IPluginLoaderVisitor<String> visitor)", "testcase": false, "constructor": true}, {"identifier": "loadPlugin", "parameters": "(final Collection<IPath> files)", "modifiers": "@Override public", "return": "void", "signature": "void loadPlugin(final Collection<IPath> files)", "full_signature": "@Override public void loadPlugin(final Collection<IPath> files)", "class_method_signature": "PluginLoader.loadPlugin(final Collection<IPath> files)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/PluginLoaderFormJar/src/main/java/info/smart_tools/smartactors/feature_loading_system/plugin_loader_from_jar/PluginLoader.java"}, "focal_method": {"identifier": "loadPlugin", "parameters": "(final Collection<IPath> files)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void loadPlugin(final Collection<IPath> files)\n            throws PluginLoaderException {\n        try {\n            for (IPath file : files) {\n                URL url = new URL(\"jar:file:\" + file.getPath() + \"!/\");\n                this.classLoader.addUrl(url);\n            }\n        } catch (Throwable e) {\n            throw new PluginLoaderException(\"Malformed file name.\", e);\n        }\n\n        JarFile jarFile = null;\n        String pathToJar = null;\n        for (IPath file : files) {\n            try {\n                pathToJar = file.getPath();\n                jarFile = new JarFile(pathToJar);\n                Enumeration<JarEntry> iterator = jarFile.entries();\n                while (iterator.hasMoreElements()) {\n                    JarEntry je = iterator.nextElement();\n                    if (je.isDirectory() || !je.getName().endsWith(CLASS_EXTENSION)) {\n                        continue;\n                    }\n                    String className = je.getName().substring(0, je.getName().length() - CLASS_EXTENSION.length());\n                    className = className.replace('/', '.');\n                    Class clazz;\n                    try {\n                        clazz = classLoader.loadClass(className);\n                    } catch (Throwable e) {\n                        // ignoring, because the plugin which class cannot be loaded cannot be loaded\n                        continue;\n                    }\n\n                    if (IPlugin.class.isAssignableFrom(clazz) && clazz != IPlugin.class) {\n                        creator.execute(clazz);\n                    }\n                }\n            } catch (Throwable e) {\n                visitor.pluginLoadingFail(pathToJar, e);\n                throw new PluginLoaderException(\"Plugin loading failed: \" + pathToJar, e);\n            } finally {\n                if (null != jarFile) {\n                    try {\n                        jarFile.close();\n                    } catch (IOException e) {\n                        //TODO: replace throw by other logic\n                        throw new PluginLoaderException(\"Error on close instance of JarFile .\", e);\n                    }\n                }\n            }\n        }\n    }", "signature": "void loadPlugin(final Collection<IPath> files)", "full_signature": "@Override public void loadPlugin(final Collection<IPath> files)", "class_method_signature": "PluginLoader.loadPlugin(final Collection<IPath> files)", "testcase": false, "constructor": false, "invocations": ["getPath", "addUrl", "getPath", "entries", "hasMoreElements", "nextElement", "isDirectory", "endsWith", "getName", "substring", "getName", "length", "getName", "length", "replace", "loadClass", "isAssignableFrom", "execute", "pluginLoadingFail", "close"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}