{"test_class": {"identifier": "WorldTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static World quoted = when(mock(World.class).getName()).thenReturn(\"world name\").getMock();", "modifier": "static", "type": "World", "declarator": "quoted = when(mock(World.class).getName()).thenReturn(\"world name\").getMock()", "var_name": "quoted"}, {"original_string": "static World unquoted = when(mock(World.class).getName()).thenReturn(\"world_name\").getMock();", "modifier": "static", "type": "World", "declarator": "unquoted = when(mock(World.class).getName()).thenReturn(\"world_name\").getMock()", "var_name": "unquoted"}, {"original_string": "WorldType type = new WorldType();", "modifier": "", "type": "WorldType", "declarator": "type = new WorldType()", "var_name": "type"}], "file": "commons/src/test/java/com/karuslabs/commons/command/types/WorldTypeTest.java"}, "test_case": {"identifier": "getExamples", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getExamples() {\n        assertEquals(List.of(\"my_fancy_world\", \"\\\"Yet another world\\\"\"), type.getExamples());\n    }", "signature": "void getExamples()", "full_signature": "@Test void getExamples()", "class_method_signature": "WorldTypeTest.getExamples()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "getExamples"]}, "focal_class": {"identifier": "WorldType", "superclass": "", "interfaces": "implements StringType<World>", "fields": [{"original_string": "private static final DynamicCommandExceptionType WORLD = new DynamicCommandExceptionType(world -> new LiteralMessage(\"Unknown world: \\\"\" + world + \"\\\"\"));", "modifier": "private static final", "type": "DynamicCommandExceptionType", "declarator": "WORLD = new DynamicCommandExceptionType(world -> new LiteralMessage(\"Unknown world: \\\"\" + world + \"\\\"\"))", "var_name": "WORLD"}, {"original_string": "private static final List<String> EXAMPLES = List.of(\"my_fancy_world\", \"\\\"Yet another world\\\"\");", "modifier": "private static final", "type": "List<String>", "declarator": "EXAMPLES = List.of(\"my_fancy_world\", \"\\\"Yet another world\\\"\")", "var_name": "EXAMPLES"}], "methods": [{"identifier": "parse", "parameters": "(StringReader reader)", "modifiers": "@Override public", "return": "World", "signature": "World parse(StringReader reader)", "full_signature": "@Override public World parse(StringReader reader)", "class_method_signature": "WorldType.parse(StringReader reader)", "testcase": false, "constructor": false}, {"identifier": "listSuggestions", "parameters": "(CommandContext<S> context, SuggestionsBuilder builder)", "modifiers": "@Override public", "return": "CompletableFuture<Suggestions>", "signature": "CompletableFuture<Suggestions> listSuggestions(CommandContext<S> context, SuggestionsBuilder builder)", "full_signature": "@Override public CompletableFuture<Suggestions> listSuggestions(CommandContext<S> context, SuggestionsBuilder builder)", "class_method_signature": "WorldType.listSuggestions(CommandContext<S> context, SuggestionsBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getExamples", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getExamples()", "full_signature": "@Override public List<String> getExamples()", "class_method_signature": "WorldType.getExamples()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/types/WorldType.java"}, "focal_method": {"identifier": "getExamples", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "body": "@Override\n    public List<String> getExamples() {\n        return EXAMPLES;\n    }", "signature": "List<String> getExamples()", "full_signature": "@Override public List<String> getExamples()", "class_method_signature": "WorldType.getExamples()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}