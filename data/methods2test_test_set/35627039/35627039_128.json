{"test_class": {"identifier": "SecurityCatalogServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/authorizer/src/test/java/com/hortonworks/streamline/streams/security/service/SecurityCatalogServiceTest.java"}, "test_case": {"identifier": "checkUserPermissions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkUserPermissions() throws Exception {\n        SecurityCatalogService catalogService = new SecurityCatalogService(null);\n        AclEntry userAclEntry = new AclEntry();\n        userAclEntry.setSidType(AclEntry.SidType.USER);\n        userAclEntry.setSidId(1L);\n        userAclEntry.setObjectId(1L);\n        userAclEntry.setObjectNamespace(\"topology\");\n        userAclEntry.setPermissions(EnumSet.of(Permission.WRITE));\n\n        AclEntry roleAclEntry = new AclEntry();\n        roleAclEntry.setSidType(AclEntry.SidType.ROLE);\n        roleAclEntry.setSidId(1L);\n        roleAclEntry.setObjectId(1L);\n        roleAclEntry.setObjectNamespace(\"topology\");\n        roleAclEntry.setPermissions(EnumSet.of(Permission.READ));\n\n        Role role = new Role();\n        role.setId(1L);\n        role.setName(\"ROLE_FOO\");\n        List<QueryParam> qps1 = QueryParam.params(\n                AclEntry.OBJECT_NAMESPACE, \"topology\",\n                AclEntry.OBJECT_ID, \"1\",\n                AclEntry.SID_TYPE, USER.toString(),\n                AclEntry.SID_ID, \"1\");\n\n        List<QueryParam> qps2 = QueryParam.params(\n                AclEntry.OBJECT_NAMESPACE, \"topology\",\n                AclEntry.OBJECT_ID, \"1\",\n                AclEntry.SID_TYPE, AclEntry.SidType.ROLE.toString());\n\n        User user = new User();\n        user.setRoles(Sets.newHashSet(\"ROLE_FOO\"));\n\n        new Expectations(catalogService) {{\n            catalogService.getUser(anyLong);\n            result = user;\n            catalogService.listAcls(qps1);\n            result = Arrays.asList(userAclEntry);\n            catalogService.getAllUserRoles(user);\n            result = Sets.newHashSet(role);\n            catalogService.listAcls(qps2);\n            result = Arrays.asList(roleAclEntry);\n            catalogService.getRole(1L);\n            result = role;\n        }};\n\n        assertTrue(catalogService.checkUserPermissions(\"topology\", 1L, 1L, EnumSet.of(Permission.READ)));\n        assertTrue(catalogService.checkUserPermissions(\"topology\", 1L, 1L, EnumSet.of(Permission.WRITE)));\n        assertTrue(catalogService.checkUserPermissions(\"topology\", 1L, 1L, EnumSet.of(Permission.WRITE, Permission.READ)));\n        assertFalse(catalogService.checkUserPermissions(\"topology\", 1L, 1L, EnumSet.of(Permission.WRITE, Permission.DELETE)));\n    }", "signature": "void checkUserPermissions()", "full_signature": "@Test public void checkUserPermissions()", "class_method_signature": "SecurityCatalogServiceTest.checkUserPermissions()", "testcase": true, "constructor": false, "invocations": ["setSidType", "setSidId", "setObjectId", "setObjectNamespace", "setPermissions", "of", "setSidType", "setSidId", "setObjectId", "setObjectNamespace", "setPermissions", "of", "setId", "setName", "params", "toString", "params", "toString", "setRoles", "newHashSet", "getUser", "listAcls", "asList", "getAllUserRoles", "newHashSet", "listAcls", "asList", "getRole", "assertTrue", "checkUserPermissions", "of", "assertTrue", "checkUserPermissions", "of", "assertTrue", "checkUserPermissions", "of", "assertFalse", "checkUserPermissions", "of"]}, "focal_class": {"identifier": "SecurityCatalogService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SecurityCatalogService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SecurityCatalogService.class)", "var_name": "LOG"}, {"original_string": "private final StorageManager dao;", "modifier": "private final", "type": "StorageManager", "declarator": "dao", "var_name": "dao"}], "methods": [{"identifier": "SecurityCatalogService", "parameters": "(StorageManager storageManager)", "modifiers": "public", "return": "", "signature": " SecurityCatalogService(StorageManager storageManager)", "full_signature": "public  SecurityCatalogService(StorageManager storageManager)", "class_method_signature": "SecurityCatalogService.SecurityCatalogService(StorageManager storageManager)", "testcase": false, "constructor": true}, {"identifier": "listRoles", "parameters": "()", "modifiers": "public", "return": "Collection<Role>", "signature": "Collection<Role> listRoles()", "full_signature": "public Collection<Role> listRoles()", "class_method_signature": "SecurityCatalogService.listRoles()", "testcase": false, "constructor": false}, {"identifier": "listRoles", "parameters": "(List<QueryParam> params)", "modifiers": "public", "return": "Collection<Role>", "signature": "Collection<Role> listRoles(List<QueryParam> params)", "full_signature": "public Collection<Role> listRoles(List<QueryParam> params)", "class_method_signature": "SecurityCatalogService.listRoles(List<QueryParam> params)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(String roleName)", "modifiers": "public", "return": "Optional<Role>", "signature": "Optional<Role> getRole(String roleName)", "full_signature": "public Optional<Role> getRole(String roleName)", "class_method_signature": "SecurityCatalogService.getRole(String roleName)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(Long roleId)", "modifiers": "public", "return": "Role", "signature": "Role getRole(Long roleId)", "full_signature": "public Role getRole(Long roleId)", "class_method_signature": "SecurityCatalogService.getRole(Long roleId)", "testcase": false, "constructor": false}, {"identifier": "addRole", "parameters": "(Role role)", "modifiers": "public", "return": "Role", "signature": "Role addRole(Role role)", "full_signature": "public Role addRole(Role role)", "class_method_signature": "SecurityCatalogService.addRole(Role role)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateRole", "parameters": "(Long id, Role role)", "modifiers": "public", "return": "Role", "signature": "Role addOrUpdateRole(Long id, Role role)", "full_signature": "public Role addOrUpdateRole(Long id, Role role)", "class_method_signature": "SecurityCatalogService.addOrUpdateRole(Long id, Role role)", "testcase": false, "constructor": false}, {"identifier": "removeRole", "parameters": "(Long roleId)", "modifiers": "public", "return": "Role", "signature": "Role removeRole(Long roleId)", "full_signature": "public Role removeRole(Long roleId)", "class_method_signature": "SecurityCatalogService.removeRole(Long roleId)", "testcase": false, "constructor": false}, {"identifier": "listUsers", "parameters": "()", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> listUsers()", "full_signature": "public Collection<User> listUsers()", "class_method_signature": "SecurityCatalogService.listUsers()", "testcase": false, "constructor": false}, {"identifier": "listUsers", "parameters": "(List<QueryParam> params)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> listUsers(List<QueryParam> params)", "full_signature": "public Collection<User> listUsers(List<QueryParam> params)", "class_method_signature": "SecurityCatalogService.listUsers(List<QueryParam> params)", "testcase": false, "constructor": false}, {"identifier": "listUsers", "parameters": "(Role role)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> listUsers(Role role)", "full_signature": "public Collection<User> listUsers(Role role)", "class_method_signature": "SecurityCatalogService.listUsers(Role role)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String name)", "modifiers": "public", "return": "User", "signature": "User getUser(String name)", "full_signature": "public User getUser(String name)", "class_method_signature": "SecurityCatalogService.getUser(String name)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(Long userId)", "modifiers": "public", "return": "User", "signature": "User getUser(Long userId)", "full_signature": "public User getUser(Long userId)", "class_method_signature": "SecurityCatalogService.getUser(Long userId)", "testcase": false, "constructor": false}, {"identifier": "addUser", "parameters": "(User user)", "modifiers": "public", "return": "User", "signature": "User addUser(User user)", "full_signature": "public User addUser(User user)", "class_method_signature": "SecurityCatalogService.addUser(User user)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateUser", "parameters": "(Long id, User user)", "modifiers": "public", "return": "User", "signature": "User addOrUpdateUser(Long id, User user)", "full_signature": "public User addOrUpdateUser(Long id, User user)", "class_method_signature": "SecurityCatalogService.addOrUpdateUser(Long id, User user)", "testcase": false, "constructor": false}, {"identifier": "removeUser", "parameters": "(Long userId)", "modifiers": "public", "return": "User", "signature": "User removeUser(Long userId)", "full_signature": "public User removeUser(Long userId)", "class_method_signature": "SecurityCatalogService.removeUser(Long userId)", "testcase": false, "constructor": false}, {"identifier": "getParentRoles", "parameters": "(Long childRoleId)", "modifiers": "private", "return": "Set<Role>", "signature": "Set<Role> getParentRoles(Long childRoleId)", "full_signature": "private Set<Role> getParentRoles(Long childRoleId)", "class_method_signature": "SecurityCatalogService.getParentRoles(Long childRoleId)", "testcase": false, "constructor": false}, {"identifier": "getChildRoles", "parameters": "(Long parentRoleId)", "modifiers": "public", "return": "Set<Role>", "signature": "Set<Role> getChildRoles(Long parentRoleId)", "full_signature": "public Set<Role> getChildRoles(Long parentRoleId)", "class_method_signature": "SecurityCatalogService.getChildRoles(Long parentRoleId)", "testcase": false, "constructor": false}, {"identifier": "addChildRole", "parameters": "(Long parentRoleId, Long childRoleId)", "modifiers": "public", "return": "RoleHierarchy", "signature": "RoleHierarchy addChildRole(Long parentRoleId, Long childRoleId)", "full_signature": "public RoleHierarchy addChildRole(Long parentRoleId, Long childRoleId)", "class_method_signature": "SecurityCatalogService.addChildRole(Long parentRoleId, Long childRoleId)", "testcase": false, "constructor": false}, {"identifier": "removeChildRole", "parameters": "(Long parentRoleId, Long childRoleId)", "modifiers": "public", "return": "RoleHierarchy", "signature": "RoleHierarchy removeChildRole(Long parentRoleId, Long childRoleId)", "full_signature": "public RoleHierarchy removeChildRole(Long parentRoleId, Long childRoleId)", "class_method_signature": "SecurityCatalogService.removeChildRole(Long parentRoleId, Long childRoleId)", "testcase": false, "constructor": false}, {"identifier": "listUserRoles", "parameters": "(List<QueryParam> qps)", "modifiers": "public", "return": "Collection<UserRole>", "signature": "Collection<UserRole> listUserRoles(List<QueryParam> qps)", "full_signature": "public Collection<UserRole> listUserRoles(List<QueryParam> qps)", "class_method_signature": "SecurityCatalogService.listUserRoles(List<QueryParam> qps)", "testcase": false, "constructor": false}, {"identifier": "addUserRole", "parameters": "(Long userId, Long roleId)", "modifiers": "public", "return": "UserRole", "signature": "UserRole addUserRole(Long userId, Long roleId)", "full_signature": "public UserRole addUserRole(Long userId, Long roleId)", "class_method_signature": "SecurityCatalogService.addUserRole(Long userId, Long roleId)", "testcase": false, "constructor": false}, {"identifier": "removeUserRole", "parameters": "(Long userId, Long roleId)", "modifiers": "public", "return": "UserRole", "signature": "UserRole removeUserRole(Long userId, Long roleId)", "full_signature": "public UserRole removeUserRole(Long userId, Long roleId)", "class_method_signature": "SecurityCatalogService.removeUserRole(Long userId, Long roleId)", "testcase": false, "constructor": false}, {"identifier": "listAcls", "parameters": "()", "modifiers": "public", "return": "Collection<AclEntry>", "signature": "Collection<AclEntry> listAcls()", "full_signature": "public Collection<AclEntry> listAcls()", "class_method_signature": "SecurityCatalogService.listAcls()", "testcase": false, "constructor": false}, {"identifier": "listAcls", "parameters": "(List<QueryParam> params)", "modifiers": "public", "return": "Collection<AclEntry>", "signature": "Collection<AclEntry> listAcls(List<QueryParam> params)", "full_signature": "public Collection<AclEntry> listAcls(List<QueryParam> params)", "class_method_signature": "SecurityCatalogService.listAcls(List<QueryParam> params)", "testcase": false, "constructor": false}, {"identifier": "listUserAcls", "parameters": "(Long userId, String targetEntityNamespace, Long targetEntityId)", "modifiers": "public", "return": "Collection<AclEntry>", "signature": "Collection<AclEntry> listUserAcls(Long userId, String targetEntityNamespace, Long targetEntityId)", "full_signature": "public Collection<AclEntry> listUserAcls(Long userId, String targetEntityNamespace, Long targetEntityId)", "class_method_signature": "SecurityCatalogService.listUserAcls(Long userId, String targetEntityNamespace, Long targetEntityId)", "testcase": false, "constructor": false}, {"identifier": "listRoleAcls", "parameters": "(Long roleId, String targetEntityNamespace, Long targetEntityId)", "modifiers": "public", "return": "Collection<AclEntry>", "signature": "Collection<AclEntry> listRoleAcls(Long roleId, String targetEntityNamespace, Long targetEntityId)", "full_signature": "public Collection<AclEntry> listRoleAcls(Long roleId, String targetEntityNamespace, Long targetEntityId)", "class_method_signature": "SecurityCatalogService.listRoleAcls(Long roleId, String targetEntityNamespace, Long targetEntityId)", "testcase": false, "constructor": false}, {"identifier": "getAcl", "parameters": "(Long aclEntryId)", "modifiers": "public", "return": "AclEntry", "signature": "AclEntry getAcl(Long aclEntryId)", "full_signature": "public AclEntry getAcl(Long aclEntryId)", "class_method_signature": "SecurityCatalogService.getAcl(Long aclEntryId)", "testcase": false, "constructor": false}, {"identifier": "addAcl", "parameters": "(AclEntry aclEntry)", "modifiers": "public", "return": "AclEntry", "signature": "AclEntry addAcl(AclEntry aclEntry)", "full_signature": "public AclEntry addAcl(AclEntry aclEntry)", "class_method_signature": "SecurityCatalogService.addAcl(AclEntry aclEntry)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateAcl", "parameters": "(Long id, AclEntry aclEntry)", "modifiers": "public", "return": "AclEntry", "signature": "AclEntry addOrUpdateAcl(Long id, AclEntry aclEntry)", "full_signature": "public AclEntry addOrUpdateAcl(Long id, AclEntry aclEntry)", "class_method_signature": "SecurityCatalogService.addOrUpdateAcl(Long id, AclEntry aclEntry)", "testcase": false, "constructor": false}, {"identifier": "removeAcl", "parameters": "(Long id)", "modifiers": "public", "return": "AclEntry", "signature": "AclEntry removeAcl(Long id)", "full_signature": "public AclEntry removeAcl(Long id)", "class_method_signature": "SecurityCatalogService.removeAcl(Long id)", "testcase": false, "constructor": false}, {"identifier": "checkUserPermissions", "parameters": "(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "modifiers": "public", "return": "boolean", "signature": "boolean checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "full_signature": "public boolean checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "class_method_signature": "SecurityCatalogService.checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "testcase": false, "constructor": false}, {"identifier": "getAllUserRoles", "parameters": "(User user)", "modifiers": "", "return": "Set<Role>", "signature": "Set<Role> getAllUserRoles(User user)", "full_signature": " Set<Role> getAllUserRoles(User user)", "class_method_signature": "SecurityCatalogService.getAllUserRoles(User user)", "testcase": false, "constructor": false}, {"identifier": "validateAcl", "parameters": "(AclEntry aclEntry)", "modifiers": "private", "return": "void", "signature": "void validateAcl(AclEntry aclEntry)", "full_signature": "private void validateAcl(AclEntry aclEntry)", "class_method_signature": "SecurityCatalogService.validateAcl(AclEntry aclEntry)", "testcase": false, "constructor": false}, {"identifier": "fillRoles", "parameters": "(Collection<User> users)", "modifiers": "private", "return": "Collection<User>", "signature": "Collection<User> fillRoles(Collection<User> users)", "full_signature": "private Collection<User> fillRoles(Collection<User> users)", "class_method_signature": "SecurityCatalogService.fillRoles(Collection<User> users)", "testcase": false, "constructor": false}, {"identifier": "fillRoles", "parameters": "(User user)", "modifiers": "private", "return": "User", "signature": "User fillRoles(User user)", "full_signature": "private User fillRoles(User user)", "class_method_signature": "SecurityCatalogService.fillRoles(User user)", "testcase": false, "constructor": false}, {"identifier": "validateRole", "parameters": "(Role role)", "modifiers": "private", "return": "void", "signature": "void validateRole(Role role)", "full_signature": "private void validateRole(Role role)", "class_method_signature": "SecurityCatalogService.validateRole(Role role)", "testcase": false, "constructor": false}, {"identifier": "validateUser", "parameters": "(User user)", "modifiers": "private", "return": "void", "signature": "void validateUser(User user)", "full_signature": "private void validateUser(User user)", "class_method_signature": "SecurityCatalogService.validateUser(User user)", "testcase": false, "constructor": false}, {"identifier": "validateRoleIds", "parameters": "(Long... ids)", "modifiers": "private", "return": "void", "signature": "void validateRoleIds(Long... ids)", "full_signature": "private void validateRoleIds(Long... ids)", "class_method_signature": "SecurityCatalogService.validateRoleIds(Long... ids)", "testcase": false, "constructor": false}, {"identifier": "doGetChildRoles", "parameters": "(Long parentRoleId, Map<Long, State> state)", "modifiers": "private", "return": "Set<Role>", "signature": "Set<Role> doGetChildRoles(Long parentRoleId, Map<Long, State> state)", "full_signature": "private Set<Role> doGetChildRoles(Long parentRoleId, Map<Long, State> state)", "class_method_signature": "SecurityCatalogService.doGetChildRoles(Long parentRoleId, Map<Long, State> state)", "testcase": false, "constructor": false}], "file": "streams/authorizer/src/main/java/com/hortonworks/streamline/streams/security/service/SecurityCatalogService.java"}, "focal_method": {"identifier": "checkUserPermissions", "parameters": "(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "modifiers": "public", "return": "boolean", "body": "public boolean checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required) {\n        User user = getUser(userId);\n        if (user == null) {\n            return false;\n        }\n        EnumSet<Permission> remaining = EnumSet.copyOf(required);\n        // try direct user acl entry first\n        List<QueryParam> qps = QueryParam.params(\n                AclEntry.OBJECT_NAMESPACE, objectNamespace,\n                AclEntry.OBJECT_ID, String.valueOf(objectId),\n                AclEntry.SID_TYPE, USER.toString(),\n                AclEntry.SID_ID, String.valueOf(userId));\n        Collection<AclEntry> acls = listAcls(qps);\n        if (acls.size() > 1) {\n            throw new IllegalStateException(\"More than one ACL entry for \" + qps);\n        } else if (acls.size() == 1) {\n            AclEntry aclEntry = acls.iterator().next();\n            remaining.removeAll(aclEntry.getPermissions());\n        }\n        // try role based permissions next\n        if (!remaining.isEmpty() && user.getRoles() != null) {\n            qps = QueryParam.params(\n                    AclEntry.OBJECT_NAMESPACE, objectNamespace,\n                    AclEntry.OBJECT_ID, String.valueOf(objectId),\n                    AclEntry.SID_TYPE, AclEntry.SidType.ROLE.toString());\n            acls = listAcls(qps);\n            Set<Role> userRoles = getAllUserRoles(user);\n            Iterator<AclEntry> it = acls.iterator();\n            while (!remaining.isEmpty() && it.hasNext()) {\n                AclEntry roleEntry = it.next();\n                if (userRoles.contains(getRole(roleEntry.getSidId()))) {\n                    remaining.removeAll(roleEntry.getPermissions());\n                }\n            }\n        }\n        return remaining.isEmpty();\n    }", "signature": "boolean checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "full_signature": "public boolean checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "class_method_signature": "SecurityCatalogService.checkUserPermissions(String objectNamespace, Long objectId, Long userId, EnumSet<Permission> required)", "testcase": false, "constructor": false, "invocations": ["getUser", "copyOf", "params", "valueOf", "toString", "valueOf", "listAcls", "size", "size", "next", "iterator", "removeAll", "getPermissions", "isEmpty", "getRoles", "params", "valueOf", "toString", "listAcls", "getAllUserRoles", "iterator", "isEmpty", "hasNext", "next", "contains", "getRole", "getSidId", "removeAll", "getPermissions", "isEmpty"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}