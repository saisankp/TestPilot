{"test_class": {"identifier": "LocalVariableTableParameterNameDiscovererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger                                    LOGGER     = LoggerFactory\n                                                                                  .getLogger(LocalVariableTableParameterNameDiscoverer.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER     = LoggerFactory\n                                                                                  .getLogger(LocalVariableTableParameterNameDiscoverer.class)", "var_name": "LOGGER"}, {"original_string": "private final static LocalVariableTableParameterNameDiscoverer DISCOVERER = new LocalVariableTableParameterNameDiscoverer();", "modifier": "private final static", "type": "LocalVariableTableParameterNameDiscoverer", "declarator": "DISCOVERER = new LocalVariableTableParameterNameDiscoverer()", "var_name": "DISCOVERER"}, {"original_string": "private static Method                                          CLASS_NO_PARAM_METHOD;", "modifier": "private static", "type": "Method", "declarator": "CLASS_NO_PARAM_METHOD", "var_name": "CLASS_NO_PARAM_METHOD"}, {"original_string": "private static Method                                          CLASS_ONE_PARAM_METHOD;", "modifier": "private static", "type": "Method", "declarator": "CLASS_ONE_PARAM_METHOD", "var_name": "CLASS_ONE_PARAM_METHOD"}, {"original_string": "private static Method                                          CLASS_MULTI_PARAM_METHOD;", "modifier": "private static", "type": "Method", "declarator": "CLASS_MULTI_PARAM_METHOD", "var_name": "CLASS_MULTI_PARAM_METHOD"}], "file": "doc-swagger/src/test/java/com/alipay/sofa/rpc/doc/swagger/utils/LocalVariableTableParameterNameDiscovererTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        String[] parameterNames;\n\n        parameterNames = DISCOVERER.getParameterNames(CLASS_NO_PARAM_METHOD);\n        Assert.assertTrue(CommonUtils.isEmpty(parameterNames));\n\n        parameterNames = DISCOVERER.getParameterNames(CLASS_ONE_PARAM_METHOD);\n        Assert.assertEquals(\"a\", parameterNames[0]);\n\n        parameterNames = DISCOVERER.getParameterNames(CLASS_MULTI_PARAM_METHOD);\n        Assert.assertEquals(\"a\", parameterNames[0]);\n        Assert.assertEquals(\"b\", parameterNames[1]);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "LocalVariableTableParameterNameDiscovererTest.test()", "testcase": true, "constructor": false, "invocations": ["getParameterNames", "assertTrue", "isEmpty", "getParameterNames", "assertEquals", "getParameterNames", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "LocalVariableTableParameterNameDiscoverer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger                        LOGGER              = LoggerFactory\n                                                                               .getLogger(LocalVariableTableParameterNameDiscoverer.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER              = LoggerFactory\n                                                                               .getLogger(LocalVariableTableParameterNameDiscoverer.class)", "var_name": "LOGGER"}, {"original_string": "private static final char                          PACKAGE_SEPARATOR   = '.';", "modifier": "private static final", "type": "char", "declarator": "PACKAGE_SEPARATOR   = '.'", "var_name": "PACKAGE_SEPARATOR"}, {"original_string": "public static final String                         CLASS_FILE_SUFFIX   = \".class\";", "modifier": "public static final", "type": "String", "declarator": "CLASS_FILE_SUFFIX   = \".class\"", "var_name": "CLASS_FILE_SUFFIX"}, {"original_string": "private static final Map<Member, String[]>         NO_DEBUG_INFO_MAP   = Collections.emptyMap();", "modifier": "private static final", "type": "Map<Member, String[]>", "declarator": "NO_DEBUG_INFO_MAP   = Collections.emptyMap()", "var_name": "NO_DEBUG_INFO_MAP"}, {"original_string": "private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache =\n                                                                                   new ConcurrentHashMap<Class<?>, Map<Member, String[]>>(\n                                                                                       32);", "modifier": "private final", "type": "Map<Class<?>, Map<Member, String[]>>", "declarator": "parameterNamesCache =\n                                                                                   new ConcurrentHashMap<Class<?>, Map<Member, String[]>>(\n                                                                                       32)", "var_name": "parameterNamesCache"}], "methods": [{"identifier": "getParameterNames", "parameters": "(Method originalMethod)", "modifiers": "public", "return": "String[]", "signature": "String[] getParameterNames(Method originalMethod)", "full_signature": "public String[] getParameterNames(Method originalMethod)", "class_method_signature": "LocalVariableTableParameterNameDiscoverer.getParameterNames(Method originalMethod)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "(Constructor<?> ctor)", "modifiers": "public", "return": "String[]", "signature": "String[] getParameterNames(Constructor<?> ctor)", "full_signature": "public String[] getParameterNames(Constructor<?> ctor)", "class_method_signature": "LocalVariableTableParameterNameDiscoverer.getParameterNames(Constructor<?> ctor)", "testcase": false, "constructor": false}, {"identifier": "inspectClass", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "Map<Member, String[]>", "signature": "Map<Member, String[]> inspectClass(Class<?> clazz)", "full_signature": "private Map<Member, String[]> inspectClass(Class<?> clazz)", "class_method_signature": "LocalVariableTableParameterNameDiscoverer.inspectClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getClassFileName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getClassFileName(Class<?> clazz)", "full_signature": "public static String getClassFileName(Class<?> clazz)", "class_method_signature": "LocalVariableTableParameterNameDiscoverer.getClassFileName(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "doc-swagger/src/main/java/com/alipay/sofa/rpc/doc/swagger/utils/LocalVariableTableParameterNameDiscoverer.java"}, "focal_method": {"identifier": "getParameterNames", "parameters": "(Method originalMethod)", "modifiers": "public", "return": "String[]", "body": "public String[] getParameterNames(Method originalMethod) {\n        Class<?> declaringClass = originalMethod.getDeclaringClass();\n        Map<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n        if (map == null) {\n            map = inspectClass(declaringClass);\n            this.parameterNamesCache.put(declaringClass, map);\n        }\n        if (map != NO_DEBUG_INFO_MAP) {\n            return map.get(originalMethod);\n        }\n        return null;\n    }", "signature": "String[] getParameterNames(Method originalMethod)", "full_signature": "public String[] getParameterNames(Method originalMethod)", "class_method_signature": "LocalVariableTableParameterNameDiscoverer.getParameterNames(Method originalMethod)", "testcase": false, "constructor": false, "invocations": ["getDeclaringClass", "get", "inspectClass", "put", "get"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}