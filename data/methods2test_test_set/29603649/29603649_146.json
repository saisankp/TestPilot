{"test_class": {"identifier": "ResultFileDownloadControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private FileZipper fileZipper;", "modifier": "@Mock\n    private", "type": "FileZipper", "declarator": "fileZipper", "var_name": "fileZipper"}, {"original_string": "@Mock\n    private HttpSession session;", "modifier": "@Mock\n    private", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private ServletOutputStream outputStream;", "modifier": "@Mock\n    private", "type": "ServletOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@InjectMocks\n    private ResultFileDownloadController underTest;", "modifier": "@InjectMocks\n    private", "type": "ResultFileDownloadController", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/controller/ResultFileDownloadControllerTest.java"}, "test_case": {"identifier": "testDownloadFileWhenTheFileNotExistsOnThePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDownloadFileWhenTheFileNotExistsOnThePath() throws IOException {\n        //GIVEN\n        given(response.getOutputStream()).willReturn(outputStream);\n        //WHEN\n        underTest.downloadFile(\"src/test/resources/testreq.txt\", response);\n        //THEN\n        verify(response).setHeader(Mockito.anyString(), Mockito.anyString());\n        verify(response).setContentType(Mockito.anyString());\n    }", "signature": "void testDownloadFileWhenTheFileNotExistsOnThePath()", "full_signature": "@Test public void testDownloadFileWhenTheFileNotExistsOnThePath()", "class_method_signature": "ResultFileDownloadControllerTest.testDownloadFileWhenTheFileNotExistsOnThePath()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getOutputStream", "downloadFile", "setHeader", "verify", "anyString", "anyString", "setContentType", "verify", "anyString"]}, "focal_class": {"identifier": "ResultFileDownloadController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_ERROR_MESSAGE = \"The selected file have been cleaned up in the meanwhile. Please initiate a new search to identify still existing files.\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ERROR_MESSAGE = \"The selected file have been cleaned up in the meanwhile. Please initiate a new search to identify still existing files.\"", "var_name": "DEFAULT_ERROR_MESSAGE"}, {"original_string": "private static final String TEXT_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_PLAIN = \"text/plain\"", "var_name": "TEXT_PLAIN"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ResultFileDownloadController.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ResultFileDownloadController.class)", "var_name": "logger"}], "methods": [{"identifier": "downloadFile", "parameters": "(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/downloadFile\", method = RequestMethod.GET) public", "return": "void", "signature": "void downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/downloadFile\", method = RequestMethod.GET) public void downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "class_method_signature": "ResultFileDownloadController.downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "openFile", "parameters": "(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/openFile\", method = RequestMethod.GET) public", "return": "void", "signature": "void openFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/openFile\", method = RequestMethod.GET) public void openFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "class_method_signature": "ResultFileDownloadController.openFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "addFileToResponse", "parameters": "(final String filePath, final HttpServletResponse response, final boolean asAttachment)", "modifiers": "private", "return": "void", "signature": "void addFileToResponse(final String filePath, final HttpServletResponse response, final boolean asAttachment)", "full_signature": "private void addFileToResponse(final String filePath, final HttpServletResponse response, final boolean asAttachment)", "class_method_signature": "ResultFileDownloadController.addFileToResponse(final String filePath, final HttpServletResponse response, final boolean asAttachment)", "testcase": false, "constructor": false}, {"identifier": "writeFileToResponse", "parameters": "(final String filePath, final HttpServletResponse response)", "modifiers": "private", "return": "void", "signature": "void writeFileToResponse(final String filePath, final HttpServletResponse response)", "full_signature": "private void writeFileToResponse(final String filePath, final HttpServletResponse response)", "class_method_signature": "ResultFileDownloadController.writeFileToResponse(final String filePath, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "sendError", "parameters": "(final IOException ex, final HttpServletResponse response)", "modifiers": "private", "return": "void", "signature": "void sendError(final IOException ex, final HttpServletResponse response)", "full_signature": "private void sendError(final IOException ex, final HttpServletResponse response)", "class_method_signature": "ResultFileDownloadController.sendError(final IOException ex, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "setHeaders", "parameters": "(final HttpServletResponse resp, final String filePath, final boolean asAttachment)", "modifiers": "private", "return": "void", "signature": "void setHeaders(final HttpServletResponse resp, final String filePath, final boolean asAttachment)", "full_signature": "private void setHeaders(final HttpServletResponse resp, final String filePath, final boolean asAttachment)", "class_method_signature": "ResultFileDownloadController.setHeaders(final HttpServletResponse resp, final String filePath, final boolean asAttachment)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(final String filePath)", "modifiers": "private", "return": "String", "signature": "String getFileName(final String filePath)", "full_signature": "private String getFileName(final String filePath)", "class_method_signature": "ResultFileDownloadController.getFileName(final String filePath)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/controller/ResultFileDownloadController.java"}, "focal_method": {"identifier": "downloadFile", "parameters": "(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/downloadFile\", method = RequestMethod.GET) public", "return": "void", "body": "@RequestMapping(value = \"/downloadFile\", method = RequestMethod.GET)\n    public void downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response) {\n        addFileToResponse(filePath, response, true);\n    }", "signature": "void downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/downloadFile\", method = RequestMethod.GET) public void downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "class_method_signature": "ResultFileDownloadController.downloadFile(@RequestParam(value = \"filePath\") final String filePath, final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["addFileToResponse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}