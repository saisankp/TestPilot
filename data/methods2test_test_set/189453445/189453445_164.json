{"test_class": {"identifier": "InstanceFailureStepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private InstanceFailureStepDefinitions instanceFailureStepDefinitions;", "modifier": "@Autowired\n    private", "type": "InstanceFailureStepDefinitions", "declarator": "instanceFailureStepDefinitions", "var_name": "instanceFailureStepDefinitions"}, {"original_string": "@Autowired\n    private EC2RaiderImpl ec2Raider;", "modifier": "@Autowired\n    private", "type": "EC2RaiderImpl", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/InstanceFailureStepDefinitionsTest.java"}, "test_case": {"identifier": "testTerminateProcessOnHealthyInstances", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTerminateProcessOnHealthyInstances() throws Exception\n    {\n        PowerMockito.when(ec2Raider.getInstancesByName(\"test\")).thenReturn(createInstances());\n        instanceFailureStepDefinitions.givenEC2InstanceName(\"test\");\n        Assert.assertEquals(executionStateCache.getEc2Tag(), \"test\");\n        Assert.assertTrue(executionStateCache.getInstances().size()>0);\n\n        instanceFailureStepDefinitions.terminateProcessOnHealthyInstances(\"nginx\",1);\n        Assert.assertTrue(executionStateCache.getProcessNames().contains(\"nginx\"));\n\n\n    }", "signature": "void testTerminateProcessOnHealthyInstances()", "full_signature": "@Test public void testTerminateProcessOnHealthyInstances()", "class_method_signature": "InstanceFailureStepDefinitionsTest.testTerminateProcessOnHealthyInstances()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getInstancesByName", "createInstances", "givenEC2InstanceName", "assertEquals", "getEc2Tag", "assertTrue", "size", "getInstances", "terminateProcessOnHealthyInstances", "assertTrue", "contains", "getProcessNames"]}, "focal_class": {"identifier": "InstanceFailureStepDefinitions", "superclass": "", "interfaces": "implements EC2StepFunctions", "fields": [{"original_string": "@Autowired\n    @Qualifier(\"scriptExecutor\")\n    private ScriptExecutor scriptExecutor;", "modifier": "@Autowired\n    @Qualifier(\"scriptExecutor\")\n    private", "type": "ScriptExecutor", "declarator": "scriptExecutor", "var_name": "scriptExecutor"}, {"original_string": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private EC2Raider ec2Raider;", "modifier": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private", "type": "EC2Raider", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private static final String MULTIPLE_DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "MULTIPLE_DELIMITER = \",\"", "var_name": "MULTIPLE_DELIMITER"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "methods": [{"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "InstanceFailureStepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "InstanceFailureStepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "InstanceFailureStepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstanceFailureStepDefinitions()", "full_signature": "public  InstanceFailureStepDefinitions()", "class_method_signature": "InstanceFailureStepDefinitions.InstanceFailureStepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "givenEC2InstanceName", "parameters": "(String name)", "modifiers": "@Given(\"^EC2 \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions givenEC2InstanceName(String name)", "full_signature": "@Given(\"^EC2 \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions givenEC2InstanceName(String name)", "class_method_signature": "InstanceFailureStepDefinitions.givenEC2InstanceName(String name)", "testcase": false, "constructor": false}, {"identifier": "givenEC2InstanceTags", "parameters": "(String tag)", "modifiers": "@Given(\"^EC2 with a tag \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions givenEC2InstanceTags(String tag)", "full_signature": "@Given(\"^EC2 with a tag \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions givenEC2InstanceTags(String tag)", "class_method_signature": "InstanceFailureStepDefinitions.givenEC2InstanceTags(String tag)", "testcase": false, "constructor": false}, {"identifier": "givenFilteredEC2", "parameters": "(String filters)", "modifiers": "@Given(\"^EC2 instances filtered by \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions givenFilteredEC2(String filters)", "full_signature": "@Given(\"^EC2 instances filtered by \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions givenFilteredEC2(String filters)", "class_method_signature": "InstanceFailureStepDefinitions.givenFilteredEC2(String filters)", "testcase": false, "constructor": false}, {"identifier": "givenEC2InstanceTags", "parameters": "(String... tags)", "modifiers": "@Given(\"^EC2 with a tags \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions givenEC2InstanceTags(String... tags)", "full_signature": "@Given(\"^EC2 with a tags \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions givenEC2InstanceTags(String... tags)", "class_method_signature": "InstanceFailureStepDefinitions.givenEC2InstanceTags(String... tags)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessGivenInstance", "parameters": "(String processName, String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "full_signature": "public void terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessOnAllHealthyInstances", "parameters": "(String processName)", "modifiers": "@When(\"^terminate process \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateProcessOnAllHealthyInstances(String processName)", "full_signature": "@When(\"^terminate process \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions terminateProcessOnAllHealthyInstances(String processName)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessOnAllHealthyInstances(String processName)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessGivenInstanceCucumber", "parameters": "(String processName, String instanceID, String instanceIP)", "modifiers": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateProcessGivenInstanceCucumber(String processName, String instanceID, String instanceIP)", "full_signature": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions terminateProcessGivenInstanceCucumber(String processName, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessGivenInstanceCucumber(String processName, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessOnHealthyInstances", "parameters": "(String processName, int numHosts)", "modifiers": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateProcessOnHealthyInstances(String processName, int numHosts)", "full_signature": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public InstanceFailureStepDefinitions terminateProcessOnHealthyInstances(String processName, int numHosts)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessOnHealthyInstances(String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessInAvailabilityZone", "parameters": "(String processName, int numHosts, String zoneId)", "modifiers": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance in zone \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "full_signature": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance in zone \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUGivenInstance", "parameters": "(int cores, String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "full_signature": "public void spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUGivenInstanceCucumber", "parameters": "(int cores, String instanceID, String instanceIP)", "modifiers": "@When(\"^CPU spike for (\\\\d+) cores on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions spikeCPUGivenInstanceCucumber(int cores, String instanceID, String instanceIP)", "full_signature": "@When(\"^CPU spike for (\\\\d+) cores on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions spikeCPUGivenInstanceCucumber(int cores, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.spikeCPUGivenInstanceCucumber(int cores, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUHelper", "parameters": "(int cores, String instanceID, String instanceIP)", "modifiers": "private", "return": "void", "signature": "void spikeCPUHelper(int cores, String instanceID, String instanceIP)", "full_signature": "private void spikeCPUHelper(int cores, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.spikeCPUHelper(int cores, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUOnHealthyInstances", "parameters": "(int numHosts, int cores)", "modifiers": "@When(\"^CPU spike on (\\\\d+) instances for (\\\\d+) cores$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions spikeCPUOnHealthyInstances(int numHosts, int cores)", "full_signature": "@When(\"^CPU spike on (\\\\d+) instances for (\\\\d+) cores$\") public InstanceFailureStepDefinitions spikeCPUOnHealthyInstances(int numHosts, int cores)", "class_method_signature": "InstanceFailureStepDefinitions.spikeCPUOnHealthyInstances(int numHosts, int cores)", "testcase": false, "constructor": false}, {"identifier": "terminateAllInstances", "parameters": "()", "modifiers": "@When(\"^terminate all instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateAllInstances()", "full_signature": "@When(\"^terminate all instances$\") public InstanceFailureStepDefinitions terminateAllInstances()", "class_method_signature": "InstanceFailureStepDefinitions.terminateAllInstances()", "testcase": false, "constructor": false}, {"identifier": "terminateGivenInstance", "parameters": "(String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void terminateGivenInstance(String instanceID, String instanceIP)", "full_signature": "public void terminateGivenInstance(String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.terminateGivenInstance(String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminationHelper", "parameters": "(String instanceID, String instanceIP)", "modifiers": "private", "return": "void", "signature": "void terminationHelper(String instanceID, String instanceIP)", "full_signature": "private void terminationHelper(String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.terminationHelper(String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminateGivenInstanceCucumber", "parameters": "(String instanceID, String instanceIP)", "modifiers": "@When(\"^terminate instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateGivenInstanceCucumber(String instanceID, String instanceIP)", "full_signature": "@When(\"^terminate instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions terminateGivenInstanceCucumber(String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.terminateGivenInstanceCucumber(String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminateInstanceOnNumInstances", "parameters": "(int numInstances)", "modifiers": "@When(\"^terminate (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateInstanceOnNumInstances(int numInstances)", "full_signature": "@When(\"^terminate (\\\\d+) instance$\") public InstanceFailureStepDefinitions terminateInstanceOnNumInstances(int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.terminateInstanceOnNumInstances(int numInstances)", "testcase": false, "constructor": false}, {"identifier": "terminateInstanceOnNumInstancesWithTags", "parameters": "(int numInstances, String compulsoryTagsString)", "modifiers": "@When(\"^terminate (\\\\d+) instance with tags \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "full_signature": "@When(\"^terminate (\\\\d+) instance with tags \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "class_method_signature": "InstanceFailureStepDefinitions.terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "testcase": false, "constructor": false}, {"identifier": "stopInstanceOnNumInstances", "parameters": "(int numInstances )", "modifiers": "@When(\"^stop (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions stopInstanceOnNumInstances(int numInstances )", "full_signature": "@When(\"^stop (\\\\d+) instance$\") public InstanceFailureStepDefinitions stopInstanceOnNumInstances(int numInstances )", "class_method_signature": "InstanceFailureStepDefinitions.stopInstanceOnNumInstances(int numInstances )", "testcase": false, "constructor": false}, {"identifier": "startInstanceOnNumInstances", "parameters": "(int numInstances )", "modifiers": "@Then(\"^start (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions startInstanceOnNumInstances(int numInstances )", "full_signature": "@Then(\"^start (\\\\d+) instance$\") public InstanceFailureStepDefinitions startInstanceOnNumInstances(int numInstances )", "class_method_signature": "InstanceFailureStepDefinitions.startInstanceOnNumInstances(int numInstances )", "testcase": false, "constructor": false}, {"identifier": "diskFullGivenInstance", "parameters": "(String volumeType, int size, String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "full_signature": "public void diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "diskFullGivenInstanceCucumber", "parameters": "(String volumeType, int size, String instanceID, String instanceIP)", "modifiers": "@When(\"^\\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions diskFullGivenInstanceCucumber(String volumeType, int size, String instanceID, String instanceIP)", "full_signature": "@When(\"^\\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions diskFullGivenInstanceCucumber(String volumeType, int size, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.diskFullGivenInstanceCucumber(String volumeType, int size, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "diskFullHelper", "parameters": "(String volumeType, int size, String instanceID, String instanceIP)", "modifiers": "private", "return": "void", "signature": "void diskFullHelper(String volumeType, int size, String instanceID, String instanceIP)", "full_signature": "private void diskFullHelper(String volumeType, int size, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.diskFullHelper(String volumeType, int size, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "diskFullOnInstance", "parameters": "(String volumeType, int size, int instanceCount)", "modifiers": "@When(\"^\\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions diskFullOnInstance(String volumeType, int size, int instanceCount)", "full_signature": "@When(\"^\\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on (\\\\d+) instance$\") public InstanceFailureStepDefinitions diskFullOnInstance(String volumeType, int size, int instanceCount)", "class_method_signature": "InstanceFailureStepDefinitions.diskFullOnInstance(String volumeType, int size, int instanceCount)", "testcase": false, "constructor": false}, {"identifier": "blockDomain", "parameters": "(String domainName, int numInstances)", "modifiers": "@When(\"^block domain \\\"([^\\\"]*)\\\" on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions blockDomain(String domainName, int numInstances)", "full_signature": "@When(\"^block domain \\\"([^\\\"]*)\\\" on (\\\\d+) instances$\") public InstanceFailureStepDefinitions blockDomain(String domainName, int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.blockDomain(String domainName, int numInstances)", "testcase": false, "constructor": false}, {"identifier": "blockPortGivenInstance", "parameters": "(int portNum, String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "full_signature": "public void blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "blockPortGivenInstanceCucumber", "parameters": "(int portNum, String instanceID, String instanceIP)", "modifiers": "@When(\"^block port (\\\\d+) on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions blockPortGivenInstanceCucumber(int portNum, String instanceID, String instanceIP)", "full_signature": "@When(\"^block port (\\\\d+) on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions blockPortGivenInstanceCucumber(int portNum, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.blockPortGivenInstanceCucumber(int portNum, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "blockPortHelper", "parameters": "(int portNum, String instanceID, String instanceIP)", "modifiers": "private", "return": "void", "signature": "void blockPortHelper(int portNum, String instanceID, String instanceIP)", "full_signature": "private void blockPortHelper(int portNum, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.blockPortHelper(int portNum, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "blockPort", "parameters": "(int portNum, int numInstances)", "modifiers": "@When(\"^block port (\\\\d+) on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions blockPort(int portNum, int numInstances)", "full_signature": "@When(\"^block port (\\\\d+) on (\\\\d+) instances$\") public InstanceFailureStepDefinitions blockPort(int portNum, int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.blockPort(int portNum, int numInstances)", "testcase": false, "constructor": false}, {"identifier": "blockDynamoDb", "parameters": "(int numInstances)", "modifiers": "@When(\"^block DynamoDB on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions blockDynamoDb(int numInstances)", "full_signature": "@When(\"^block DynamoDB on (\\\\d+) instances$\") public InstanceFailureStepDefinitions blockDynamoDb(int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.blockDynamoDb(int numInstances)", "testcase": false, "constructor": false}, {"identifier": "blockS3", "parameters": "(int numInstances)", "modifiers": "@When(\"^block S3 on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions blockS3(int numInstances)", "full_signature": "@When(\"^block S3 on (\\\\d+) instances$\") public InstanceFailureStepDefinitions blockS3(int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.blockS3(int numInstances)", "testcase": false, "constructor": false}, {"identifier": "stopProcessOnHealthyInstances", "parameters": "(String serviceOrProcessType, String processName, int numHosts)", "modifiers": "@When(\"^stop (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "full_signature": "@When(\"^stop (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public InstanceFailureStepDefinitions stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "class_method_signature": "InstanceFailureStepDefinitions.stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "startProcessOnHealthyInstances", "parameters": "(String serviceOrProcessType, String processName, int numHosts)", "modifiers": "@When(\"^start (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "full_signature": "@When(\"^start (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public InstanceFailureStepDefinitions startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "class_method_signature": "InstanceFailureStepDefinitions.startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatencyGivenInstance", "parameters": "(int lowerBound, int upperBound, String instanceID, String instanceIP)", "modifiers": "public", "return": "void", "signature": "void injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "full_signature": "public void injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatencyGivenInstanceCucumber", "parameters": "(int lowerBound, int upperBound, String instanceID, String instanceIP)", "modifiers": "@When(\"^inject network latency (\\\\d+) ms to (\\\\d+) ms on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions injectNetworkLatencyGivenInstanceCucumber(int lowerBound, int upperBound, String instanceID, String instanceIP)", "full_signature": "@When(\"^inject network latency (\\\\d+) ms to (\\\\d+) ms on instance with id \\\"([^\\\"]*)\\\" and ip \\\"([^\\\"]*)\\\"$\") public InstanceFailureStepDefinitions injectNetworkLatencyGivenInstanceCucumber(int lowerBound, int upperBound, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.injectNetworkLatencyGivenInstanceCucumber(int lowerBound, int upperBound, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatencyHelper", "parameters": "(int lowerBound, int upperBound, String instanceID, String instanceIP)", "modifiers": "private", "return": "void", "signature": "void injectNetworkLatencyHelper(int lowerBound, int upperBound, String instanceID, String instanceIP)", "full_signature": "private void injectNetworkLatencyHelper(int lowerBound, int upperBound, String instanceID, String instanceIP)", "class_method_signature": "InstanceFailureStepDefinitions.injectNetworkLatencyHelper(int lowerBound, int upperBound, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatency", "parameters": "(int lowerBound, int upperBound, int numInstances)", "modifiers": "@When(\"^inject network latency (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions injectNetworkLatency(int lowerBound, int upperBound, int numInstances)", "full_signature": "@When(\"^inject network latency (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public InstanceFailureStepDefinitions injectNetworkLatency(int lowerBound, int upperBound, int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.injectNetworkLatency(int lowerBound, int upperBound, int numInstances)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatency", "parameters": "(String domainName, int lowerBound, int upperBound, int numInstances)", "modifiers": "@When(\"^inject domain network latency \\\"([^\\\"]*)\\\" for (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public", "return": "InstanceFailureStepDefinitions", "signature": "InstanceFailureStepDefinitions injectNetworkLatency(String domainName, int lowerBound, int upperBound, int numInstances)", "full_signature": "@When(\"^inject domain network latency \\\"([^\\\"]*)\\\" for (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public InstanceFailureStepDefinitions injectNetworkLatency(String domainName, int lowerBound, int upperBound, int numInstances)", "class_method_signature": "InstanceFailureStepDefinitions.injectNetworkLatency(String domainName, int lowerBound, int upperBound, int numInstances)", "testcase": false, "constructor": false}, {"identifier": "terminateProcess", "parameters": "(String processName, int numHosts, List<EC2InstanceTO> instances)", "modifiers": "private", "return": "void", "signature": "void terminateProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "full_signature": "private void terminateProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "stopProcess", "parameters": "(String processName, int numHosts, List<EC2InstanceTO> instances)", "modifiers": "private", "return": "void", "signature": "void stopProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "full_signature": "private void stopProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "class_method_signature": "InstanceFailureStepDefinitions.stopProcess(String processName, int numHosts, List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "findInstancesByName", "parameters": "(String name)", "modifiers": "public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> findInstancesByName(String name)", "full_signature": "public List<EC2InstanceTO> findInstancesByName(String name)", "class_method_signature": "InstanceFailureStepDefinitions.findInstancesByName(String name)", "testcase": false, "constructor": false}, {"identifier": "findAllInstancesByTag", "parameters": "(String tagString)", "modifiers": "public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> findAllInstancesByTag(String tagString)", "full_signature": "public List<EC2InstanceTO> findAllInstancesByTag(String tagString)", "class_method_signature": "InstanceFailureStepDefinitions.findAllInstancesByTag(String tagString)", "testcase": false, "constructor": false}, {"identifier": "getInstanceFromID", "parameters": "(String id)", "modifiers": "public", "return": "EC2InstanceTO", "signature": "EC2InstanceTO getInstanceFromID(String id)", "full_signature": "public EC2InstanceTO getInstanceFromID(String id)", "class_method_signature": "InstanceFailureStepDefinitions.getInstanceFromID(String id)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/InstanceFailureStepDefinitions.java"}, "focal_method": {"identifier": "terminateProcessOnHealthyInstances", "parameters": "(String processName, int numHosts)", "modifiers": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "InstanceFailureStepDefinitions", "body": "@When(\"^terminate process  \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\")\n    public InstanceFailureStepDefinitions terminateProcessOnHealthyInstances(String processName, int numHosts) {\n        List<EC2InstanceTO> instances = executionStateCache.getInstances();\n\n        if (instances == null || instances.isEmpty()) {\n            throw new RuntimeException(\"No Instances are available\");\n        }\n\n        executionStateCache.addProcessName(processName);\n\n        if (numHosts > instances.size()) {\n            numHosts = instances.size();\n        }\n\n        terminateProcess(processName, numHosts, instances);\n\n        return this;\n    }", "signature": "InstanceFailureStepDefinitions terminateProcessOnHealthyInstances(String processName, int numHosts)", "full_signature": "@When(\"^terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public InstanceFailureStepDefinitions terminateProcessOnHealthyInstances(String processName, int numHosts)", "class_method_signature": "InstanceFailureStepDefinitions.terminateProcessOnHealthyInstances(String processName, int numHosts)", "testcase": false, "constructor": false, "invocations": ["getInstances", "isEmpty", "addProcessName", "size", "size", "terminateProcess"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}