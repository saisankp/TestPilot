{"test_class": {"identifier": "SshUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SshUtilTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SshUtilTest.class )", "var_name": "logger"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/utils/SshUtilTest.java"}, "test_case": {"identifier": "testGetSessionObjectWithInvalidPortNumber", "parameters": "()", "modifiers": "@Test( expected = JSchException.class ) public", "return": "void", "body": "@Test( expected = JSchException.class )\n    public void testGetSessionObjectWithInvalidPortNumber()\n        throws JSchException\n    {\n        logger.info( \"getSessionObject\" );\n        String username = \"ADMIN\";\n        String password = \"ADMIN\";\n        String hostname = \"45.89.97.09\";\n        int port = 66636;\n        Properties sessionConfig = new java.util.Properties();\n        sessionConfig.put( \"StrictHostKeyChecking\", \"no\" );\n        Session result = null;\n\n        result = SshUtil.getSessionObject( username, password, hostname, port, sessionConfig );\n\n        boolean isResultNull = false;\n        if ( result == null )\n        {\n            isResultNull = true;\n        }\n        else\n        {\n            isResultNull = false;\n        }\n        logger.info( \"[TS] : Expected result : Will throw an error when we will try to connect\" );\n\n        result.connect( 1000 );\n\n    }", "signature": "void testGetSessionObjectWithInvalidPortNumber()", "full_signature": "@Test( expected = JSchException.class ) public void testGetSessionObjectWithInvalidPortNumber()", "class_method_signature": "SshUtilTest.testGetSessionObjectWithInvalidPortNumber()", "testcase": true, "constructor": false, "invocations": ["info", "put", "getSessionObject", "info", "connect"]}, "focal_class": {"identifier": "SshUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SshUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SshUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "SshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( Session sessionObj, String command )", "modifiers": "public static", "return": "String", "signature": "String executeCommand( Session sessionObj, String command )", "full_signature": "public static String executeCommand( Session sessionObj, String command )", "class_method_signature": "SshUtil.executeCommand( Session sessionObj, String command )", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "( Session session, InputStream localInputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void upload( Session session, InputStream localInputStream, String remoteFile )", "full_signature": "public static void upload( Session session, InputStream localInputStream, String remoteFile )", "class_method_signature": "SshUtil.upload( Session session, InputStream localInputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "( Session session, OutputStream localOutputStream, String remoteFile )", "modifiers": "public static", "return": "void", "signature": "void download( Session session, OutputStream localOutputStream, String remoteFile )", "full_signature": "public static void download( Session session, OutputStream localOutputStream, String remoteFile )", "class_method_signature": "SshUtil.download( Session session, OutputStream localOutputStream, String remoteFile )", "testcase": false, "constructor": false}, {"identifier": "lstat", "parameters": "( Session session, String remoteFile )", "modifiers": "public static", "return": "SftpATTRS", "signature": "SftpATTRS lstat( Session session, String remoteFile )", "full_signature": "public static SftpATTRS lstat( Session session, String remoteFile )", "class_method_signature": "SshUtil.lstat( Session session, String remoteFile )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/utils/SshUtil.java"}, "focal_method": {"identifier": "getSessionObject", "parameters": "( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "modifiers": "public static", "return": "Session", "body": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )\n    {\n\n        Session session = null;\n\n        // logger.debug(\"In getSessionObject\");\n        if ( userName != null && !\"\".equals( userName ) && password != null && hostName != null\n            && !\"\".equals( hostName ) )\n        {\n            JSch jsch = new JSch();\n            try\n            {\n                session = jsch.getSession( userName, hostName, port );\n                session.setPassword( password );\n\n                if ( sessionConfig != null )\n                {\n                    session.setConfig( sessionConfig );\n                }\n\n                // logger.debug(\"COnfig set\");\n            }\n            catch ( Exception e )\n            {\n                logger.error( \"Creating SSH session failed\", e );\n            }\n            return session;\n        }\n        // logger.debug(\"Before returning Session object\");\n        return null;\n    }", "signature": "Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "full_signature": "public static Session getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "class_method_signature": "SshUtil.getSessionObject( String userName, String password, String hostName, int port,\n                                            Properties sessionConfig )", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getSession", "setPassword", "setConfig", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}