{"test_class": {"identifier": "ReferencesTest", "superclass": "", "interfaces": "", "fields": [], "file": "propoid-db/src/test/java/propoid/db/ReferencesTest.java"}, "test_case": {"identifier": "testFrom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFrom() {\n\t\tList<Foo> foos = new ArrayList<>();\n\t\tfoos.add(new Foo());\n\n\t\ttry {\n\t\t\tReferences.from(foos);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException expected) {\n\t\t}\n\n\t\tRow.setID(foos.get(0), 1l);\n\n\t\tReferences<Foo> references = References.from(foos);\n\n\t\tassertEquals(1, references.size());\n\n\t\tReference<Foo> foo = references.iterator().next();\n\t}", "signature": "void testFrom()", "full_signature": "@Test public void testFrom()", "class_method_signature": "ReferencesTest.testFrom()", "testcase": true, "constructor": false, "invocations": ["add", "from", "fail", "setID", "get", "from", "assertEquals", "size", "next", "iterator"]}, "focal_class": {"identifier": "References", "superclass": "", "interfaces": "implements Parcelable, Iterable<Reference<T>>", "fields": [{"original_string": "private Class<? extends T> type;", "modifier": "private", "type": "Class<? extends T>", "declarator": "type", "var_name": "type"}, {"original_string": "private long[] ids;", "modifier": "private", "type": "long[]", "declarator": "ids", "var_name": "ids"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final Parcelable.Creator<References> CREATOR = new Parcelable.Creator<References>() {\n\t\tpublic References createFromParcel(Parcel in) {\n\t\t\treturn read(in);\n\t\t}\n\n\t\tpublic References[] newArray(int size) {\n\t\t\treturn new References[size];\n\t\t}\n\t};", "modifier": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final", "type": "Parcelable.Creator<References>", "declarator": "CREATOR = new Parcelable.Creator<References>() {\n\t\tpublic References createFromParcel(Parcel in) {\n\t\t\treturn read(in);\n\t\t}\n\n\t\tpublic References[] newArray(int size) {\n\t\t\treturn new References[size];\n\t\t}\n\t}", "var_name": "CREATOR"}], "methods": [{"identifier": "References", "parameters": "()", "modifiers": "public", "return": "", "signature": " References()", "full_signature": "public  References()", "class_method_signature": "References.References()", "testcase": false, "constructor": true}, {"identifier": "References", "parameters": "(Class<? extends T> type, long[] ids)", "modifiers": "public", "return": "", "signature": " References(Class<? extends T> type, long[] ids)", "full_signature": "public  References(Class<? extends T> type, long[] ids)", "class_method_signature": "References.References(Class<? extends T> type, long[] ids)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "References.size()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "References.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "References.hashCode()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Reference<T>>", "signature": "Iterator<Reference<T>> iterator()", "full_signature": "@Override public Iterator<Reference<T>> iterator()", "class_method_signature": "References.iterator()", "testcase": false, "constructor": false}, {"identifier": "describeContents", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int describeContents()", "full_signature": "@Override public int describeContents()", "class_method_signature": "References.describeContents()", "testcase": false, "constructor": false}, {"identifier": "writeToParcel", "parameters": "(Parcel parcel, int flags)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void writeToParcel(Parcel parcel, int flags)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void writeToParcel(Parcel parcel, int flags)", "class_method_signature": "References.writeToParcel(Parcel parcel, int flags)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Parcel parcel)", "modifiers": "private static", "return": "References<Propoid>", "signature": "References<Propoid> read(Parcel parcel)", "full_signature": "private static References<Propoid> read(Parcel parcel)", "class_method_signature": "References.read(Parcel parcel)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(List<S> propoids)", "modifiers": "public static", "return": "References<S>", "signature": "References<S> from(List<S> propoids)", "full_signature": "public static References<S> from(List<S> propoids)", "class_method_signature": "References.from(List<S> propoids)", "testcase": false, "constructor": false}], "file": "propoid-db/src/main/java/propoid/db/References.java"}, "focal_method": {"identifier": "from", "parameters": "(List<S> propoids)", "modifiers": "public static", "return": "References<S>", "body": "public static <S extends Propoid> References<S> from(List<S> propoids) {\n\n\t\tClass<? extends Propoid> type = null;\n\n\t\tlong[] ids = new long[propoids.size()];\n\t\tfor (int i = 0; i < ids.length; i++) {\n\t\t\tS propoid = propoids.get(i);\n\n\t\t\tids[i] = Row.getID(propoid);\n\t\t\tif (ids[i] == Row.TRANSIENT) {\n\t\t\t\tthrow new IllegalArgumentException(\"cannot reference transient propoid\");\n\t\t\t}\n\t\t\ttype = propoid.getClass();\n\t\t}\n\n\t\tif (type == null) {\n\t\t\treturn new References();\n\t\t} else {\n\t\t\treturn new References<S>((Class<? extends S>) type, ids);\n\t\t}\n\t}", "signature": "References<S> from(List<S> propoids)", "full_signature": "public static References<S> from(List<S> propoids)", "class_method_signature": "References.from(List<S> propoids)", "testcase": false, "constructor": false, "invocations": ["size", "get", "getID", "getClass"]}, "repository": {"repo_id": 2916228, "url": "https://github.com/svenmeier/propoid", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 475, "license": "licensed"}}