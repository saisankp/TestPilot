{"test_class": {"identifier": "CsvParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/io/csv/CsvParserTest.java"}, "test_case": {"identifier": "testParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParser() throws Exception {\n        CsvParser parser = new CsvParser(new TypeInformation[]{Types.STRING}, \",\", '\"');\n        Assert.assertEquals(parser.parse(\"\\\"hello, world\\\"\").f1.getField(0), \"hello, world\");\n        Assert.assertEquals(parser.parse(\"\").f1.getField(0), null);\n        Assert.assertEquals(parser.parse(\"\\\"\\\"\").f1.getField(0), \"\");\n        Assert.assertEquals(parser.parse(\"\\\"\\\"\\\"\\\"\\\"\\\"\").f1.getField(0), \"\\\"\\\"\");\n    }", "signature": "void testParser()", "full_signature": "@Test public void testParser()", "class_method_signature": "CsvParserTest.testParser()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getField", "parse", "assertEquals", "getField", "parse", "assertEquals", "getField", "parse", "assertEquals", "getField", "parse"]}, "focal_class": {"identifier": "CsvParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String fieldDelim;", "modifier": "private final", "type": "String", "declarator": "fieldDelim", "var_name": "fieldDelim"}, {"original_string": "private final int lenFieldDelim;", "modifier": "private final", "type": "int", "declarator": "lenFieldDelim", "var_name": "lenFieldDelim"}, {"original_string": "private Character quoteChar;", "modifier": "private", "type": "Character", "declarator": "quoteChar", "var_name": "quoteChar"}, {"original_string": "private String quoteString;", "modifier": "private", "type": "String", "declarator": "quoteString", "var_name": "quoteString"}, {"original_string": "private String escapedQuote;", "modifier": "private", "type": "String", "declarator": "escapedQuote", "var_name": "escapedQuote"}, {"original_string": "private boolean enableQuote;", "modifier": "private", "type": "boolean", "declarator": "enableQuote", "var_name": "enableQuote"}, {"original_string": "private FieldParser<?>[] parsers;", "modifier": "private", "type": "FieldParser<?>[]", "declarator": "parsers", "var_name": "parsers"}, {"original_string": "private boolean[] isString;", "modifier": "private", "type": "boolean[]", "declarator": "isString", "var_name": "isString"}], "methods": [{"identifier": "CsvParser", "parameters": "(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "modifiers": "public", "return": "", "signature": " CsvParser(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "full_signature": "public  CsvParser(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "class_method_signature": "CsvParser.CsvParser(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String line)", "modifiers": "public", "return": "Tuple2<Boolean, Row>", "signature": "Tuple2<Boolean, Row> parse(String line)", "full_signature": "public Tuple2<Boolean, Row> parse(String line)", "class_method_signature": "CsvParser.parse(String line)", "testcase": false, "constructor": false}, {"identifier": "findNextDelimPos", "parameters": "(String line, int startPos, int limit, boolean isStringCol)", "modifiers": "private", "return": "int", "signature": "int findNextDelimPos(String line, int startPos, int limit, boolean isStringCol)", "full_signature": "private int findNextDelimPos(String line, int startPos, int limit, boolean isStringCol)", "class_method_signature": "CsvParser.findNextDelimPos(String line, int startPos, int limit, boolean isStringCol)", "testcase": false, "constructor": false}, {"identifier": "parseField", "parameters": "(FieldParser<?> parser, String token, boolean isStringField)", "modifiers": "private", "return": "Tuple2<Boolean, Object>", "signature": "Tuple2<Boolean, Object> parseField(FieldParser<?> parser, String token, boolean isStringField)", "full_signature": "private Tuple2<Boolean, Object> parseField(FieldParser<?> parser, String token, boolean isStringField)", "class_method_signature": "CsvParser.parseField(FieldParser<?> parser, String token, boolean isStringField)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/io/csv/CsvParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String line)", "modifiers": "public", "return": "Tuple2<Boolean, Row>", "body": "public Tuple2<Boolean, Row> parse(String line) {\n        Row output = new Row(this.parsers.length);\n        for (int i = 0; i < output.getArity(); i++) {\n            output.setField(i, null);\n        }\n        if (line == null || line.isEmpty()) {\n            return Tuple2.of(false, output);\n        }\n        int startPos = 0;\n        boolean succ = true;\n        final int limit = line.length();\n        for (int i = 0; i < output.getArity(); i++) {\n            if (startPos > limit) {\n                succ = false;\n                break;\n            }\n            boolean isStringCol = isString[i];\n            int delimPos = findNextDelimPos(line, startPos, limit, isStringCol);\n            if (delimPos < 0) {\n                delimPos = limit;\n            }\n            String token = line.substring(startPos, delimPos);\n            if (!token.isEmpty()) {\n                Tuple2<Boolean, Object> parsed = parseField(parsers[i], token, isStringCol);\n                if (!parsed.f0) {\n                    succ = false;\n                }\n                output.setField(i, parsed.f1);\n            }\n            startPos = delimPos + this.lenFieldDelim;\n        }\n        return Tuple2.of(succ, output);\n    }", "signature": "Tuple2<Boolean, Row> parse(String line)", "full_signature": "public Tuple2<Boolean, Row> parse(String line)", "class_method_signature": "CsvParser.parse(String line)", "testcase": false, "constructor": false, "invocations": ["getArity", "setField", "isEmpty", "of", "length", "getArity", "findNextDelimPos", "substring", "isEmpty", "parseField", "setField", "of"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}