{"test_class": {"identifier": "DataSetMarshallerTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/demo/dataset/DataSetMarshallerTest.java"}, "test_case": {"identifier": "unmarshal_data_set", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void unmarshal_data_set() throws IOException {\n        DataSet dataSet;\n        try (InputStream inputStream = DataSetMarshallerTest.class.getResourceAsStream(\"test-belgium.yaml\")) {\n            dataSet = new DataSetMarshaller().unmarshalToDataSet(\n                    new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n        }\n        assertThat(dataSet).isNotNull();\n\n        assertThat(dataSet.getName()).isEqualTo(\"Belgium test\");\n        assertThat(dataSet.getDepot()).isNotNull();\n        assertThat(dataSet.getDepot().getLabel()).isEqualTo(\"Brussels\");\n        assertThat(dataSet.getDepot().getLatitude()).isEqualTo(50.85);\n        assertThat(dataSet.getDepot().getLongitude()).isEqualTo(4.35);\n        assertThat(dataSet.getVisits())\n                .extracting(\"label\")\n                .containsExactlyInAnyOrder(\"Aalst\", \"Ch\u00e2telet\", \"La Louvi\u00e8re\", \"Sint-Niklaas\", \"Ypres\");\n        assertThat(dataSet.getVehicles())\n                .extracting(dataSetVehicle -> dataSetVehicle.name, dataSetVehicle -> dataSetVehicle.capacity)\n                .containsExactlyInAnyOrder(\n                        tuple(\"vehicle 1\", 10),\n                        tuple(\"vehicle 2\", 12),\n                        tuple(\"vehicle 3\", 1_000_000));\n    }", "signature": "void unmarshal_data_set()", "full_signature": "@Test void unmarshal_data_set()", "class_method_signature": "DataSetMarshallerTest.unmarshal_data_set()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "unmarshalToDataSet", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName", "isNotNull", "assertThat", "getDepot", "isEqualTo", "assertThat", "getLabel", "getDepot", "isEqualTo", "assertThat", "getLatitude", "getDepot", "isEqualTo", "assertThat", "getLongitude", "getDepot", "containsExactlyInAnyOrder", "extracting", "assertThat", "getVisits", "containsExactlyInAnyOrder", "extracting", "assertThat", "getVehicles", "tuple", "tuple", "tuple"]}, "focal_class": {"identifier": "DataSetMarshaller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "DataSetMarshaller", "parameters": "()", "modifiers": "", "return": "", "signature": " DataSetMarshaller()", "full_signature": "  DataSetMarshaller()", "class_method_signature": "DataSetMarshaller.DataSetMarshaller()", "testcase": false, "constructor": true}, {"identifier": "DataSetMarshaller", "parameters": "(ObjectMapper mapper)", "modifiers": "", "return": "", "signature": " DataSetMarshaller(ObjectMapper mapper)", "full_signature": "  DataSetMarshaller(ObjectMapper mapper)", "class_method_signature": "DataSetMarshaller.DataSetMarshaller(ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "unmarshal", "parameters": "(Reader reader)", "modifiers": "public", "return": "RoutingProblem", "signature": "RoutingProblem unmarshal(Reader reader)", "full_signature": "public RoutingProblem unmarshal(Reader reader)", "class_method_signature": "DataSetMarshaller.unmarshal(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(RoutingProblem routingProblem)", "modifiers": "public", "return": "String", "signature": "String marshal(RoutingProblem routingProblem)", "full_signature": "public String marshal(RoutingProblem routingProblem)", "class_method_signature": "DataSetMarshaller.marshal(RoutingProblem routingProblem)", "testcase": false, "constructor": false}, {"identifier": "unmarshalToDataSet", "parameters": "(Reader reader)", "modifiers": "", "return": "DataSet", "signature": "DataSet unmarshalToDataSet(Reader reader)", "full_signature": " DataSet unmarshalToDataSet(Reader reader)", "class_method_signature": "DataSetMarshaller.unmarshalToDataSet(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(DataSet dataSet)", "modifiers": "", "return": "String", "signature": "String marshal(DataSet dataSet)", "full_signature": " String marshal(DataSet dataSet)", "class_method_signature": "DataSetMarshaller.marshal(DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "toDataSet", "parameters": "(RoutingProblem routingProblem)", "modifiers": "static", "return": "DataSet", "signature": "DataSet toDataSet(RoutingProblem routingProblem)", "full_signature": "static DataSet toDataSet(RoutingProblem routingProblem)", "class_method_signature": "DataSetMarshaller.toDataSet(RoutingProblem routingProblem)", "testcase": false, "constructor": false}, {"identifier": "toDataSet", "parameters": "(LocationData locationData)", "modifiers": "static", "return": "DataSetLocation", "signature": "DataSetLocation toDataSet(LocationData locationData)", "full_signature": "static DataSetLocation toDataSet(LocationData locationData)", "class_method_signature": "DataSetMarshaller.toDataSet(LocationData locationData)", "testcase": false, "constructor": false}, {"identifier": "toDataSet", "parameters": "(VehicleData vehicleData)", "modifiers": "static", "return": "DataSetVehicle", "signature": "DataSetVehicle toDataSet(VehicleData vehicleData)", "full_signature": "static DataSetVehicle toDataSet(VehicleData vehicleData)", "class_method_signature": "DataSetMarshaller.toDataSet(VehicleData vehicleData)", "testcase": false, "constructor": false}, {"identifier": "toDomain", "parameters": "(DataSet dataSet)", "modifiers": "static", "return": "RoutingProblem", "signature": "RoutingProblem toDomain(DataSet dataSet)", "full_signature": "static RoutingProblem toDomain(DataSet dataSet)", "class_method_signature": "DataSetMarshaller.toDomain(DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "toDomain", "parameters": "(DataSetLocation dataSetLocation)", "modifiers": "static", "return": "LocationData", "signature": "LocationData toDomain(DataSetLocation dataSetLocation)", "full_signature": "static LocationData toDomain(DataSetLocation dataSetLocation)", "class_method_signature": "DataSetMarshaller.toDomain(DataSetLocation dataSetLocation)", "testcase": false, "constructor": false}, {"identifier": "toDomain", "parameters": "(DataSetVehicle dataSetVehicle)", "modifiers": "static", "return": "VehicleData", "signature": "VehicleData toDomain(DataSetVehicle dataSetVehicle)", "full_signature": "static VehicleData toDomain(DataSetVehicle dataSetVehicle)", "class_method_signature": "DataSetMarshaller.toDomain(DataSetVehicle dataSetVehicle)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/demo/dataset/DataSetMarshaller.java"}, "focal_method": {"identifier": "unmarshalToDataSet", "parameters": "(Reader reader)", "modifiers": "", "return": "DataSet", "body": "DataSet unmarshalToDataSet(Reader reader) {\n        try {\n            return mapper.readValue(reader, DataSet.class);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Can't read demo data set\", e);\n        }\n    }", "signature": "DataSet unmarshalToDataSet(Reader reader)", "full_signature": " DataSet unmarshalToDataSet(Reader reader)", "class_method_signature": "DataSetMarshaller.unmarshalToDataSet(Reader reader)", "testcase": false, "constructor": false, "invocations": ["readValue"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}