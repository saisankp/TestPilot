{"test_class": {"identifier": "DepartmentUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<SysDept> sysDeptList = new ArrayList<>();", "modifier": "private static", "type": "List<SysDept>", "declarator": "sysDeptList = new ArrayList<>()", "var_name": "sysDeptList"}, {"original_string": "private static List<SysDeptSelect> sysDeptSelects = new ArrayList<>();", "modifier": "private static", "type": "List<SysDeptSelect>", "declarator": "sysDeptSelects = new ArrayList<>()", "var_name": "sysDeptSelects"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/utils/DepartmentUtilTest.java"}, "test_case": {"identifier": "wrapDeptListToTreeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void wrapDeptListToTreeTest() {\n    List<SysDeptTree> sysDeptTreeList = DepartmentUtil.wrapDeptListToTree(sysDeptList, sysDeptSelects);\n    assertEquals(sysDeptTreeList.size(), 1);\n    assertEquals(sysDeptTreeList.get(0).getChildren().size(), 2);\n    assertEquals(sysDeptTreeList.get(0).getChildren().get(0).getChildren().size(), 1);\n    assertEquals(sysDeptTreeList.get(0).getChildren().get(1).getChildren().size(), 1);\n\n    assertEquals(sysDeptSelects.size(), 1);\n    assertEquals(sysDeptSelects.get(0).getChildren().size(), 2);\n    assertEquals(sysDeptSelects.get(0).getChildren().get(0).getChildren().size(), 1);\n    assertEquals(sysDeptSelects.get(0).getChildren().get(1).getChildren().size(), 1);\n  }", "signature": "void wrapDeptListToTreeTest()", "full_signature": "@Test public void wrapDeptListToTreeTest()", "class_method_signature": "DepartmentUtilTest.wrapDeptListToTreeTest()", "testcase": true, "constructor": false, "invocations": ["wrapDeptListToTree", "assertEquals", "size", "assertEquals", "size", "getChildren", "get", "assertEquals", "size", "getChildren", "get", "getChildren", "get", "assertEquals", "size", "getChildren", "get", "getChildren", "get", "assertEquals", "size", "assertEquals", "size", "getChildren", "get", "assertEquals", "size", "getChildren", "get", "getChildren", "get", "assertEquals", "size", "getChildren", "get", "getChildren", "get"]}, "focal_class": {"identifier": "DepartmentUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "disableTargetDeptCode", "parameters": "(List<SysDeptSelect> sysDeptSelects,\n                                          String deptCode)", "modifiers": "public static", "return": "void", "signature": "void disableTargetDeptCode(List<SysDeptSelect> sysDeptSelects,\n                                          String deptCode)", "full_signature": "public static void disableTargetDeptCode(List<SysDeptSelect> sysDeptSelects,\n                                          String deptCode)", "class_method_signature": "DepartmentUtil.disableTargetDeptCode(List<SysDeptSelect> sysDeptSelects,\n                                          String deptCode)", "testcase": false, "constructor": false}, {"identifier": "wrapDeptListToTree", "parameters": "(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "modifiers": "public static", "return": "List<SysDeptTree>", "signature": "List<SysDeptTree> wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "full_signature": "public static List<SysDeptTree> wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "class_method_signature": "DepartmentUtil.wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "testcase": false, "constructor": false}, {"identifier": "getDeptTreeSize", "parameters": "(List<SysDeptTree> sysDeptTreeList)", "modifiers": "public static", "return": "long", "signature": "long getDeptTreeSize(List<SysDeptTree> sysDeptTreeList)", "full_signature": "public static long getDeptTreeSize(List<SysDeptTree> sysDeptTreeList)", "class_method_signature": "DepartmentUtil.getDeptTreeSize(List<SysDeptTree> sysDeptTreeList)", "testcase": false, "constructor": false}, {"identifier": "findChildren", "parameters": "(List<SysDeptTree> sysDeptList,\n                                                List<SysDeptSelect> sysDeptSelects)", "modifiers": "private static", "return": "List<SysDeptTree>", "signature": "List<SysDeptTree> findChildren(List<SysDeptTree> sysDeptList,\n                                                List<SysDeptSelect> sysDeptSelects)", "full_signature": "private static List<SysDeptTree> findChildren(List<SysDeptTree> sysDeptList,\n                                                List<SysDeptSelect> sysDeptSelects)", "class_method_signature": "DepartmentUtil.findChildren(List<SysDeptTree> sysDeptList,\n                                                List<SysDeptSelect> sysDeptSelects)", "testcase": false, "constructor": false}, {"identifier": "getGrandChildren", "parameters": "(List<SysDeptTree> treeList,\n                                       List<SysDeptTree> recordList,\n                                       List<SysDeptSelect> sysDeptSelects)", "modifiers": "private static", "return": "void", "signature": "void getGrandChildren(List<SysDeptTree> treeList,\n                                       List<SysDeptTree> recordList,\n                                       List<SysDeptSelect> sysDeptSelects)", "full_signature": "private static void getGrandChildren(List<SysDeptTree> treeList,\n                                       List<SysDeptTree> recordList,\n                                       List<SysDeptSelect> sysDeptSelects)", "class_method_signature": "DepartmentUtil.getGrandChildren(List<SysDeptTree> treeList,\n                                       List<SysDeptTree> recordList,\n                                       List<SysDeptSelect> sysDeptSelects)", "testcase": false, "constructor": false}, {"identifier": "setEmptyChildrenAsNull", "parameters": "(List<SysDeptTree> treeList)", "modifiers": "private static", "return": "void", "signature": "void setEmptyChildrenAsNull(List<SysDeptTree> treeList)", "full_signature": "private static void setEmptyChildrenAsNull(List<SysDeptTree> treeList)", "class_method_signature": "DepartmentUtil.setEmptyChildrenAsNull(List<SysDeptTree> treeList)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object object)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(Object object)", "full_signature": "private static boolean isEmpty(Object object)", "class_method_signature": "DepartmentUtil.isEmpty(Object object)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/utils/DepartmentUtil.java"}, "focal_method": {"identifier": "wrapDeptListToTree", "parameters": "(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "modifiers": "public static", "return": "List<SysDeptTree>", "body": "public static List<SysDeptTree> wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects) {\n    sysDeptSelects.clear();\n    List<SysDeptTree> records = new ArrayList<>();\n    for (int i = 0; i < sysDeptList.size(); i++) {\n      SysDept dept = sysDeptList.get(i);\n      records.add(new SysDeptTree(dept));\n    }\n    List<SysDeptTree> sysOrgTreeList = findChildren(records, sysDeptSelects);\n    setEmptyChildrenAsNull(sysOrgTreeList);\n\n    return sysOrgTreeList;\n  }", "signature": "List<SysDeptTree> wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "full_signature": "public static List<SysDeptTree> wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "class_method_signature": "DepartmentUtil.wrapDeptListToTree(List<SysDept> sysDeptList,\n                                                     List<SysDeptSelect> sysDeptSelects)", "testcase": false, "constructor": false, "invocations": ["clear", "size", "get", "add", "findChildren", "setEmptyChildrenAsNull"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}