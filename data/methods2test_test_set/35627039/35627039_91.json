{"test_class": {"identifier": "StormSqlExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StormSqlExpression stormSqlExpression;", "modifier": "", "type": "StormSqlExpression", "declarator": "stormSqlExpression", "var_name": "stormSqlExpression"}], "file": "streams/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/rule/condition/expression/StormSqlExpressionTest.java"}, "test_case": {"identifier": "testCreateFunctionDuplicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFunctionDuplicate() throws Exception {\n        Condition condition = new Condition();\n        Expression f1 = new FunctionExpression(\"FLOOR\", \"com.hortonworks.streamline.Floor\", ImmutableList.of(new Literal(\"100.5\")));\n        Expression f2 = new FunctionExpression(\"FLOOR\", \"com.hortonworks.streamline.Floor\", ImmutableList.of(new Literal(\"2.5\")));\n        Expression expression1 = new BinaryExpression(Operator.GREATER_THAN,\n                                                      new FieldExpression(Schema.Field.of(\"x\", Schema.Type.INTEGER)), f1);\n        Expression expression2 = new BinaryExpression(Operator.GREATER_THAN,\n                                                      new FieldExpression(Schema.Field.of(\"x\", Schema.Type.INTEGER)), f2);\n        Expression expression = new BinaryExpression(Operator.AND, expression1, expression2);\n        condition.setExpression(expression);\n        stormSqlExpression = new StormSqlExpression(condition);\n        assertEquals(Arrays.asList(\"CREATE FUNCTION FLOOR AS 'com.hortonworks.streamline.Floor'\"),\n                     stormSqlExpression.createFunctions());\n\n    }", "signature": "void testCreateFunctionDuplicate()", "full_signature": "@Test public void testCreateFunctionDuplicate()", "class_method_signature": "StormSqlExpressionTest.testCreateFunctionDuplicate()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "setExpression", "assertEquals", "asList", "createFunctions"]}, "focal_class": {"identifier": "StormSqlExpression", "superclass": "extends ExpressionRuntime", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(StormSqlExpression.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(StormSqlExpression.class)", "var_name": "LOG"}, {"original_string": "public static final String RULE_SCHEMA = \"RULESCHEMA\";", "modifier": "public static final", "type": "String", "declarator": "RULE_SCHEMA = \"RULESCHEMA\"", "var_name": "RULE_SCHEMA"}, {"original_string": "private static final String RULE_TABLE = \"RULETABLE\";", "modifier": "private static final", "type": "String", "declarator": "RULE_TABLE = \"RULETABLE\"", "var_name": "RULE_TABLE"}, {"original_string": "private static final String CREATE_EXTERNAL_TABLE = \"CREATE EXTERNAL TABLE \";", "modifier": "private static final", "type": "String", "declarator": "CREATE_EXTERNAL_TABLE = \"CREATE EXTERNAL TABLE \"", "var_name": "CREATE_EXTERNAL_TABLE"}, {"original_string": "private static final String CREATE_FUNCTION = \"CREATE FUNCTION \";", "modifier": "private static final", "type": "String", "declarator": "CREATE_FUNCTION = \"CREATE FUNCTION \"", "var_name": "CREATE_FUNCTION"}, {"original_string": "private static final String SELECT_STREAM = \"SELECT STREAM \";", "modifier": "private static final", "type": "String", "declarator": "SELECT_STREAM = \"SELECT STREAM \"", "var_name": "SELECT_STREAM"}, {"original_string": "private static final String FROM = \"FROM \";", "modifier": "private static final", "type": "String", "declarator": "FROM = \"FROM \"", "var_name": "FROM"}, {"original_string": "private static final String WHERE = \"WHERE \";", "modifier": "private static final", "type": "String", "declarator": "WHERE = \"WHERE \"", "var_name": "WHERE"}, {"original_string": "private static final String GROUP_BY = \"GROUP BY \";", "modifier": "private static final", "type": "String", "declarator": "GROUP_BY = \"GROUP BY \"", "var_name": "GROUP_BY"}, {"original_string": "private static final String HAVING = \"HAVING \";", "modifier": "private static final", "type": "String", "declarator": "HAVING = \"HAVING \"", "var_name": "HAVING"}, {"original_string": "private static final String LOCATION = \"LOCATION\";", "modifier": "private static final", "type": "String", "declarator": "LOCATION = \"LOCATION\"", "var_name": "LOCATION"}, {"original_string": "private static final String AS = \"AS\";", "modifier": "private static final", "type": "String", "declarator": "AS = \"AS\"", "var_name": "AS"}, {"original_string": "private static final String QUOTE = \"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "QUOTE = \"\\\"\"", "var_name": "QUOTE"}, {"original_string": "private final LinkedHashSet<Schema.Field> stormSqlFields = new LinkedHashSet<>();", "modifier": "private final", "type": "LinkedHashSet<Schema.Field>", "declarator": "stormSqlFields = new LinkedHashSet<>()", "var_name": "stormSqlFields"}, {"original_string": "private final List<Schema.Field> groupByFields = new ArrayList<>();", "modifier": "private final", "type": "List<Schema.Field>", "declarator": "groupByFields = new ArrayList<>()", "var_name": "groupByFields"}, {"original_string": "private final LinkedHashSet<FunctionExpression.Function> functions = new LinkedHashSet<>();", "modifier": "private final", "type": "LinkedHashSet<FunctionExpression.Function>", "declarator": "functions = new LinkedHashSet<>()", "var_name": "functions"}, {"original_string": "private final LinkedHashSet<FunctionExpression.Function> aggregateFunctions = new LinkedHashSet<>();", "modifier": "private final", "type": "LinkedHashSet<FunctionExpression.Function>", "declarator": "aggregateFunctions = new LinkedHashSet<>()", "var_name": "aggregateFunctions"}, {"original_string": "private final List<String> projectedFields = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "projectedFields = new ArrayList<>()", "var_name": "projectedFields"}, {"original_string": "private final List<String> outputFields = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "outputFields = new ArrayList<>()", "var_name": "outputFields"}], "methods": [{"identifier": "StormSqlExpression", "parameters": "(Condition condition)", "modifiers": "public", "return": "", "signature": " StormSqlExpression(Condition condition)", "full_signature": "public  StormSqlExpression(Condition condition)", "class_method_signature": "StormSqlExpression.StormSqlExpression(Condition condition)", "testcase": false, "constructor": true}, {"identifier": "StormSqlExpression", "parameters": "(Condition condition, Projection projection)", "modifiers": "public", "return": "", "signature": " StormSqlExpression(Condition condition, Projection projection)", "full_signature": "public  StormSqlExpression(Condition condition, Projection projection)", "class_method_signature": "StormSqlExpression.StormSqlExpression(Condition condition, Projection projection)", "testcase": false, "constructor": true}, {"identifier": "StormSqlExpression", "parameters": "(Condition condition, Projection projection, GroupBy groupBy, Having having)", "modifiers": "public", "return": "", "signature": " StormSqlExpression(Condition condition, Projection projection, GroupBy groupBy, Having having)", "full_signature": "public  StormSqlExpression(Condition condition, Projection projection, GroupBy groupBy, Having having)", "class_method_signature": "StormSqlExpression.StormSqlExpression(Condition condition, Projection projection, GroupBy groupBy, Having having)", "testcase": false, "constructor": true}, {"identifier": "handleProjection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleProjection()", "full_signature": "private void handleProjection()", "class_method_signature": "StormSqlExpression.handleProjection()", "testcase": false, "constructor": false}, {"identifier": "handleFilter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleFilter()", "full_signature": "private void handleFilter()", "class_method_signature": "StormSqlExpression.handleFilter()", "testcase": false, "constructor": false}, {"identifier": "handleGroupByHaving", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleGroupByHaving()", "full_signature": "private void handleGroupByHaving()", "class_method_signature": "StormSqlExpression.handleGroupByHaving()", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String asString()", "full_signature": "@Override public String asString()", "class_method_signature": "StormSqlExpression.asString()", "testcase": false, "constructor": false}, {"identifier": "createFunctions", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> createFunctions()", "full_signature": "public List<String> createFunctions()", "class_method_signature": "StormSqlExpression.createFunctions()", "testcase": false, "constructor": false}, {"identifier": "doCreateFunctions", "parameters": "(Set<FunctionExpression.Function> functions)", "modifiers": "private", "return": "List<String>", "signature": "List<String> doCreateFunctions(Set<FunctionExpression.Function> functions)", "full_signature": "private List<String> doCreateFunctions(Set<FunctionExpression.Function> functions)", "class_method_signature": "StormSqlExpression.doCreateFunctions(Set<FunctionExpression.Function> functions)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(String schemaName)", "modifiers": "public", "return": "String", "signature": "String createTable(String schemaName)", "full_signature": "public String createTable(String schemaName)", "class_method_signature": "StormSqlExpression.createTable(String schemaName)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String select()", "full_signature": "public String select()", "class_method_signature": "StormSqlExpression.select()", "testcase": false, "constructor": false}, {"identifier": "buildCreateDefinition", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildCreateDefinition()", "full_signature": "private String buildCreateDefinition()", "class_method_signature": "StormSqlExpression.buildCreateDefinition()", "testcase": false, "constructor": false}, {"identifier": "buildSelectExpression", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildSelectExpression()", "full_signature": "private String buildSelectExpression()", "class_method_signature": "StormSqlExpression.buildSelectExpression()", "testcase": false, "constructor": false}, {"identifier": "getStormSqlFields", "parameters": "()", "modifiers": "public", "return": "List<Schema.Field>", "signature": "List<Schema.Field> getStormSqlFields()", "full_signature": "public List<Schema.Field> getStormSqlFields()", "class_method_signature": "StormSqlExpression.getStormSqlFields()", "testcase": false, "constructor": false}, {"identifier": "addStormSqlField", "parameters": "(Schema.Field field)", "modifiers": "public", "return": "void", "signature": "void addStormSqlField(Schema.Field field)", "full_signature": "public void addStormSqlField(Schema.Field field)", "class_method_signature": "StormSqlExpression.addStormSqlField(Schema.Field field)", "testcase": false, "constructor": false}, {"identifier": "getProjectedFields", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getProjectedFields()", "full_signature": "public List<String> getProjectedFields()", "class_method_signature": "StormSqlExpression.getProjectedFields()", "testcase": false, "constructor": false}, {"identifier": "getOutputFields", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getOutputFields()", "full_signature": "public List<String> getOutputFields()", "class_method_signature": "StormSqlExpression.getOutputFields()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(Schema.Field field)", "modifiers": "@Override protected", "return": "String", "signature": "String getType(Schema.Field field)", "full_signature": "@Override protected String getType(Schema.Field field)", "class_method_signature": "StormSqlExpression.getType(Schema.Field field)", "testcase": false, "constructor": false}], "file": "streams/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/rule/condition/expression/StormSqlExpression.java"}, "focal_method": {"identifier": "createFunctions", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> createFunctions() {\n        List<String> result = new ArrayList<>();\n        result.addAll(doCreateFunctions(functions));\n        result.addAll(doCreateFunctions(aggregateFunctions));\n        return result;\n    }", "signature": "List<String> createFunctions()", "full_signature": "public List<String> createFunctions()", "class_method_signature": "StormSqlExpression.createFunctions()", "testcase": false, "constructor": false, "invocations": ["addAll", "doCreateFunctions", "addAll", "doCreateFunctions"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}