{"test_class": {"identifier": "CmdWsCallerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String reqSoap = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:test=\\\"http://ws2restful.PING.csb/\\\">\\n\"\n            + \"<soapenv:Header/>\\n\" + \"<soapenv:Body>\\n\" + \"   <test:ws2restful>\\n\" + \"      <name>abc</name>\\n\"\n            + \"   </test:ws2restful>\\n\" + \"</soapenv:Body>\\n\" + \"</soapenv:Envelope>\\n\";", "modifier": "private static final", "type": "String", "declarator": "reqSoap = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:test=\\\"http://ws2restful.PING.csb/\\\">\\n\"\n            + \"<soapenv:Header/>\\n\" + \"<soapenv:Body>\\n\" + \"   <test:ws2restful>\\n\" + \"      <name>abc</name>\\n\"\n            + \"   </test:ws2restful>\\n\" + \"</soapenv:Body>\\n\" + \"</soapenv:Envelope>\\n\"", "var_name": "reqSoap"}, {"original_string": "private static final String reqSoap2 = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:ns=\\\"http://webservices.amazon.com/AWSECommerceService/2011-08-01\\\">\\n\" +\n            \"   <soapenv:Header/>\\n\" +\n            \"   <soapenv:Body>\\n\" +\n            \"      <ns:CartAdd>\\n\" +\n            \"         <ns:MarketplaceDomain>a</ns:MarketplaceDomain>\\n\" +\n            \"      </ns:CartAdd>\\n\" +\n            \"   </soapenv:Body>\\n\" +\n            \"</soapenv:Envelope>\";", "modifier": "private static final", "type": "String", "declarator": "reqSoap2 = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:ns=\\\"http://webservices.amazon.com/AWSECommerceService/2011-08-01\\\">\\n\" +\n            \"   <soapenv:Header/>\\n\" +\n            \"   <soapenv:Body>\\n\" +\n            \"      <ns:CartAdd>\\n\" +\n            \"         <ns:MarketplaceDomain>a</ns:MarketplaceDomain>\\n\" +\n            \"      </ns:CartAdd>\\n\" +\n            \"   </soapenv:Body>\\n\" +\n            \"</soapenv:Envelope>\"", "var_name": "reqSoap2"}], "file": "ws-client/src/test/java/com/alibaba/csb/ws/sdk/CmdWsCallerTest.java"}, "test_case": {"identifier": "testCmdWsCaller2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCmdWsCaller2() {\n        String[] args = {\n                \"-ak\", \"ak\",\n                \"-sk\", \"sk\",\n                \"-api\", \"PING\",\n                \"-version\", \"vcsb\",\n                \"-ea\", \"http://localhost:9081/PING/vcsb/ws2restful\",\n                \"-ns\", \"http://webservices.amazon.com/AWSECommerceService/2011-08-01\",\n                \"-sname\", \"AWSECommerceService\",\n                \"-pname\", \"AWSECommerceServicePortType\",\n                \"-action\", \"http://soap.amazon.com/CartAdd\",\n                \"-d\",\n                \"-rd\", reqSoap2\n\n        };\n        CmdWsCaller.main(args);\n    }", "signature": "void testCmdWsCaller2()", "full_signature": "@Test public void testCmdWsCaller2()", "class_method_signature": "CmdWsCallerTest.testCmdWsCaller2()", "testcase": true, "constructor": false, "invocations": ["main"]}, "focal_class": {"identifier": "CmdWsCaller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SDK_VERSION = \"1.1.5.8\";", "modifier": "private static final", "type": "String", "declarator": "SDK_VERSION = \"1.1.5.8\"", "var_name": "SDK_VERSION"}], "methods": [{"identifier": "usage", "parameters": "(Options opt)", "modifiers": "private static", "return": "void", "signature": "void usage(Options opt)", "full_signature": "private static void usage(Options opt)", "class_method_signature": "CmdWsCaller.usage(Options opt)", "testcase": false, "constructor": false}, {"identifier": "isEmpty1", "parameters": "(String str, String msg)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty1(String str, String msg)", "full_signature": "private static boolean isEmpty1(String str, String msg)", "class_method_signature": "CmdWsCaller.isEmpty1(String str, String msg)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String str)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(String str)", "full_signature": "private static boolean isEmpty(String str)", "class_method_signature": "CmdWsCaller.isEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(boolean debug, String format, Object args)", "modifiers": "private static", "return": "void", "signature": "void print(boolean debug, String format, Object args)", "full_signature": "private static void print(boolean debug, String format, Object args)", "class_method_signature": "CmdWsCaller.print(boolean debug, String format, Object args)", "testcase": false, "constructor": false}, {"identifier": "invokeWithDispath", "parameters": "(WSParams params, String ns, String sname,\n                                          String pname, String soapActionUri, boolean isSoap12, String ea, String reqSoap, Map<String, String> requestHeaders)", "modifiers": "private static", "return": "void", "signature": "void invokeWithDispath(WSParams params, String ns, String sname,\n                                          String pname, String soapActionUri, boolean isSoap12, String ea, String reqSoap, Map<String, String> requestHeaders)", "full_signature": "private static void invokeWithDispath(WSParams params, String ns, String sname,\n                                          String pname, String soapActionUri, boolean isSoap12, String ea, String reqSoap, Map<String, String> requestHeaders)", "class_method_signature": "CmdWsCaller.invokeWithDispath(WSParams params, String ns, String sname,\n                                          String pname, String soapActionUri, boolean isSoap12, String ea, String reqSoap, Map<String, String> requestHeaders)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "CmdWsCaller.main(String[] args)", "testcase": false, "constructor": false}], "file": "ws-client/src/main/java/com/alibaba/csb/ws/sdk/CmdWsCaller.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n        Options opt = new Options();\n        opt.addOption(\"ak\", true, \"accessKey, \u53ef\u9009\");\n        opt.addOption(\"sk\", true, \"secretKey, \u53ef\u9009\");\n        opt.addOption(\"api\", true, \"\u670d\u52a1\u540d, \u53ef\u9009\");\n        opt.addOption(\"version\", true, \"\u670d\u52a1\u7248\u672c, \u53ef\u9009\");\n\t\topt.addOption(\"wa\", true, \"wsdl\u5730\u5740\uff0ce.g: http://broker-ip:9081/api/version/method?wsdl\");\n        opt.addOption(\"ea\", true, \"endpoint\u5730\u5740\uff0ce.g: http://broker-ip:9081/api/version/method\");\n        opt.addOption(\"ns\", true, \"\u5728wsdl\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u7684target namespace\");\n        opt.addOption(\"sname\", \"serviceName\", true, \"\u5728wsdl\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u540d\");\n        opt.addOption(\"pname\", \"portName\", true, \"\u5728wsdl\u4e2d\u5b9a\u4e49\u7684\u7aef\u53e3\u540d\");\n        opt.addOption(\"action\", \"SOAPAction\", true, \"SOAPAction\u503c\");\n        opt.addOption(\"soap12\", false, \"-soap12 \u4e3asoap12\u8c03\u7528, \u4e0d\u5b9a\u4e49\u4e3asoap11\");\n        opt.addOption(\"nonce\", false, \"-nonce \u662f\u5426\u505anonce\u9632\u91cd\u653e\u5904\u7406\uff0c\u4e0d\u5b9a\u4e49\u4e3a\u4e0d\u505anonce\u91cd\u653e\u5904\u7406\");\n        opt.addOption(\"skipTimestamp\", false, \"-skipTimestamp \u4e0d\u8bbe\u7f6e\u65f6\u95f4\u6233\uff0c\u9ed8\u8ba4\u662f\u8bbe\u7f6e\");\n        opt.addOption(\"fingerStr\", true, \"\u7b7e\u540d\u6307\u7eb9\u4e32, \u53ef\u9009\");\n        opt.addOption(\"H\", true, \"http header, \u683c\u5f0f: -H \\\"key:value\\\"\");\n        opt.addOption(\"h\", \"help\", false, \"\u6253\u5370\u5e2e\u52a9\u4fe1\u606f\");\n        opt.addOption(\"d\", \"debug\", false, \"\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\");\n        opt.addOption(\"rf\", true, \"soap\u8bf7\u6c42\u6587\u4ef6\uff0c\u6587\u4ef6\u91cc\u5b58\u50a8soap\u8bf7\u6c42\u7684Message\u683c\u5f0f\u5185\u5bb9\");\n        opt.addOption(\"rd\", true, \"soap\u8bf7\u6c42\u5185\u5bb9(Message)\uff0c\u5982\u679c\u8bbe\u7f6e\u8be5\u9009\u9879\u65f6\uff0c-rf\u9009\u9879\u88ab\u5ffd\u7565\");\n        opt.addOption(\"sdkv\", \"sdk-version\", false, \"sdk\u7248\u672c\");\n        opt.addOption(\"bizIdKey\", true, \"\u4e1a\u52a1id Key\");\n        opt.addOption(\"bizId\", true, \"\u4e1a\u52a1id\");\n\n        CommandLineParser parser = new DefaultParser();\n\n        Boolean isDebug = false;\n        try {\n            CommandLine commandline = parser.parse(opt, args);\n            if (commandline.hasOption(\"h\") || commandline.getOptions().length == 0) {\n                usage(opt);\n                return;\n            }\n\n            String ak = commandline.getOptionValue(\"ak\");\n            String sk = commandline.getOptionValue(\"sk\");\n            String api = commandline.getOptionValue(\"api\");\n            String version = commandline.getOptionValue(\"version\");\n            Boolean sdkv = commandline.hasOption(\"sdkv\");\n            String ea = commandline.getOptionValue(\"ea\");\n            String ns = commandline.getOptionValue(\"ns\");\n            String sname = commandline.getOptionValue(\"sname\");\n            String pname = commandline.getOptionValue(\"pname\");\n            String action = commandline.getOptionValue(\"action\");\n            String rf = commandline.getOptionValue(\"rf\");\n            String rd = commandline.getOptionValue(\"rd\");\n            String fingerStr = commandline.getOptionValue(\"fingerStr\");\n            String[] headers = commandline.getOptionValues(\"H\");\n            boolean isSoap12 = commandline.hasOption(\"soap12\");\n            boolean nonce = commandline.hasOption(\"nonce\");\n            boolean skipTimestamp = commandline.hasOption(\"skipTimestamp\");\n            isDebug = commandline.hasOption(\"d\");\n            String bizIdKey = commandline.getOptionValue(\"bizIdKey\");\n            String bizId = commandline.getOptionValue(\"bizId\");\n\n            if (sdkv) {\n                Version.version();\n                return;\n            }\n\n            if (isDebug) {\n                // printParams();\n                System.out.println(\"ak=\" + ak);\n                System.out.println(\"sk=\" + sk);\n                System.out.println(\"api=\" + api);\n                System.out.println(\"version=\" + version);\n                System.out.println(\"bizIdKey=\" + bizIdKey);\n                System.out.println(\"bizId=\" + bizId);\n                System.out.println(\"isSoap12=\" + isSoap12);\n                System.out.println(\"nonce=\" + nonce);\n                System.out.println(\"ea=\" + ea);\n                System.out.println(\"ns=\" + ns);\n                System.out.println(\"sname=\" + sname);\n                System.out.println(\"pname=\" + pname);\n                System.out.println(\"action=\" + action);\n                System.out.println(\"headers=\" + Arrays.toString(headers));\n                System.out.println(\"rd=\" + rd);\n                if (isEmpty(rd)) {\n                    System.out.println(\"rf=\" + rf);\n                }\n                System.out.println(\"nonce=\" + nonce);\n                System.out.println(\"skipTimestamp=\" + skipTimestamp);\n                System.out.println(\"fingerStr=\" + fingerStr);\n            }\n\n            if (isEmpty1(ea, \"-ea endpoint\u5730\u5740\")) {\n                usage(opt);\n                return;\n            }\n\n            if (isEmpty1(ea, \"-ns namespace\")) {\n                usage(opt);\n                return;\n            }\n\n            if (isEmpty1(ea, \"-sname serviceName\")) {\n                usage(opt);\n                return;\n            }\n\n            if (isEmpty1(pname, \"-pname portName\")) {\n                usage(opt);\n                return;\n            }\n\n            if (isEmpty1(pname, \"-action SOAPAction\")) {\n                usage(opt);\n                return;\n            }\n\n            if (isEmpty(rf) && isEmpty(rd)) {\n                System.out.println(\"-rf \u6216 -rd \u53c2\u6570\u6ca1\u6709\u5b9a\u4e49\");\n                usage(opt);\n                return;\n            }\n\n            String reqData = (isEmpty(rd)) ? FileUtils.readFileToString(new File(rf)) : rd;\n            print(isDebug, \"-- \u8bf7\u6c42\u62a5\u6587: \\n%s\\n\", reqData);\n            if (isEmpty(reqData)) {\n                print(true, \"-- \u64cd\u4f5c\u5931\u8d25\uff1a\u6587\u4ef6%s\u8bf7\u6c42\u62a5\u6587\u4e3a\u7a7a\", rf);\n                return;\n            }\n            if (bizIdKey != null && !bizIdKey.trim().equals(\"\")) {\n                WSClientSDK.bizIdKey(bizIdKey);\n            }\n            WSParams params = WSParams.create().accessKey(ak).secretKey(sk).fingerPrinter(fingerStr)\n                    .api(api).bizId(bizId).version(version).nonce(nonce).timestamp(!skipTimestamp).debug(isDebug);\n\n            Map<String, String> httpHeaders = new HashMap<String, String>();\n\n            if (headers != null) {\n                for (String header : headers) {\n                    String[] kv = header.split(\":\", 2);\n                    if (kv == null || kv.length != 2) {\n                        System.out.println(\"\u9519\u8bef\u7684HTTP\u5934\u5b9a\u4e49 \u6b63\u786e\u683c\u5f0f: -H \\\"key:value\\\" !!\" + header);\n                        return;\n                    }\n                    httpHeaders.put(kv[0], kv[1]);\n                }\n            }\n\n            invokeWithDispath(params, ns, sname, pname, action, isSoap12, ea, reqData, httpHeaders);\n        } catch (Exception e) {\n            System.out.println(\"-- \u64cd\u4f5c\u5931\u8d25\uff1a\" + e.getMessage());\n            if (isDebug)\n                e.printStackTrace(System.out);\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "CmdWsCaller.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "parse", "hasOption", "getOptions", "usage", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "hasOption", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValues", "hasOption", "hasOption", "hasOption", "hasOption", "getOptionValue", "getOptionValue", "version", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "toString", "println", "isEmpty", "println", "println", "println", "println", "isEmpty1", "usage", "isEmpty1", "usage", "isEmpty1", "usage", "isEmpty1", "usage", "isEmpty1", "usage", "isEmpty", "isEmpty", "println", "usage", "isEmpty", "readFileToString", "print", "isEmpty", "print", "equals", "trim", "bizIdKey", "debug", "timestamp", "nonce", "version", "bizId", "api", "fingerPrinter", "secretKey", "accessKey", "create", "split", "println", "put", "invokeWithDispath", "println", "());", "printStackTrace"]}, "repository": {"repo_id": 94076429, "url": "https://github.com/aliyun/csb-sdk", "stars": 27, "created": "6/12/2017 9:04:20 AM +00:00", "updates": "2020-01-22T02:25:09+00:00", "fork": "False", "license": "licensed"}}