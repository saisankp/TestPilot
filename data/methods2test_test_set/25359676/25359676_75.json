{"test_class": {"identifier": "PojoPropertyUtilsBeanTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-middleware/kns/src/test/java/org/kuali/rice/kns/web/struts/form/pojo/PojoPropertyUtilsBeanTest.java"}, "test_case": {"identifier": "testNestedPropertyIsWriteable", "parameters": "()", "modifiers": "@Test /** * This test checks to ensure that the PropertyUtils method which delegates * to the PojoPropertyUtilsBean in the KNS properly handles checking if a * nested property is writeable. */ public", "return": "void", "body": "@Test\n    /**\n     * This test checks to ensure that the PropertyUtils method which delegates\n     * to the PojoPropertyUtilsBean in the KNS properly handles checking if a\n     * nested property is writeable.\n     */\n    public void testNestedPropertyIsWriteable() {\n        ReadonlyBean testBean = new ReadonlyBean();\n        ReadonlyWrappingBean readonlyBean = new ReadonlyWrappingBean(testBean);\n        WriteableWrappingBean writeableBean = new WriteableWrappingBean(testBean);\n\n        assertFalse(PropertyUtils.isWriteable(readonlyBean, \"bean.value\"));\n        assertFalse(PropertyUtils.isWriteable(writeableBean, \"bean.value\"));\n    }", "signature": "void testNestedPropertyIsWriteable()", "full_signature": "@Test /** * This test checks to ensure that the PropertyUtils method which delegates * to the PojoPropertyUtilsBean in the KNS properly handles checking if a * nested property is writeable. */ public void testNestedPropertyIsWriteable()", "class_method_signature": "PojoPropertyUtilsBeanTest.testNestedPropertyIsWriteable()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isWriteable", "assertFalse", "isWriteable"]}, "focal_class": {"identifier": "PojoPropertyUtilsBean", "superclass": "extends PropertyUtilsBean", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(PojoPropertyUtilsBean.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(PojoPropertyUtilsBean.class.getName())", "var_name": "LOG"}, {"original_string": "protected static CollectionItemClassProvider collectionItemClassProvider = new LegacyDataAdapterProvider();", "modifier": "protected static", "type": "CollectionItemClassProvider", "declarator": "collectionItemClassProvider = new LegacyDataAdapterProvider()", "var_name": "collectionItemClassProvider"}, {"original_string": "private Map<String,List<Method>> cache = new HashMap<String, List<Method>>();", "modifier": "private", "type": "Map<String,List<Method>>", "declarator": "cache = new HashMap<String, List<Method>>()", "var_name": "cache"}, {"original_string": "private static Map<String,Method> readMethodCache = new HashMap<String, Method>();", "modifier": "private static", "type": "Map<String,Method>", "declarator": "readMethodCache = new HashMap<String, Method>()", "var_name": "readMethodCache"}, {"original_string": "private IntrospectionException introspectionException = new IntrospectionException( \"\" );", "modifier": "private", "type": "IntrospectionException", "declarator": "introspectionException = new IntrospectionException( \"\" )", "var_name": "introspectionException"}], "methods": [{"identifier": "PojoPropertyUtilsBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " PojoPropertyUtilsBean()", "full_signature": "public  PojoPropertyUtilsBean()", "class_method_signature": "PojoPropertyUtilsBean.PojoPropertyUtilsBean()", "testcase": false, "constructor": true}, {"identifier": "getProperty", "parameters": "(Object bean, String key)", "modifiers": "public", "return": "Object", "signature": "Object getProperty(Object bean, String key)", "full_signature": "public Object getProperty(Object bean, String key)", "class_method_signature": "PojoPropertyUtilsBean.getProperty(Object bean, String key)", "testcase": false, "constructor": false}, {"identifier": "fastGetNestedProperty", "parameters": "(Object obj, String propertyName)", "modifiers": "public", "return": "Object", "signature": "Object fastGetNestedProperty(Object obj, String propertyName)", "full_signature": "public Object fastGetNestedProperty(Object obj, String propertyName)", "class_method_signature": "PojoPropertyUtilsBean.fastGetNestedProperty(Object obj, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Object bean, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Object bean, String name)", "full_signature": "@Override public boolean isWriteable(Object bean, String name)", "class_method_signature": "PojoPropertyUtilsBean.isWriteable(Object bean, String name)", "testcase": false, "constructor": false}, {"identifier": "getNestedProperty", "parameters": "(Object arg0, String arg1)", "modifiers": "public", "return": "Object", "signature": "Object getNestedProperty(Object arg0, String arg1)", "full_signature": "public Object getNestedProperty(Object arg0, String arg1)", "class_method_signature": "PojoPropertyUtilsBean.getNestedProperty(Object arg0, String arg1)", "testcase": false, "constructor": false}, {"identifier": "getIndexedProperty", "parameters": "(Object bean, String name, int index)", "modifiers": "public", "return": "Object", "signature": "Object getIndexedProperty(Object bean, String name, int index)", "full_signature": "public Object getIndexedProperty(Object bean, String name, int index)", "class_method_signature": "PojoPropertyUtilsBean.getIndexedProperty(Object bean, String name, int index)", "testcase": false, "constructor": false}, {"identifier": "generateIndexedProperty", "parameters": "(Object nestedBean, String property, int index,\n            IndexOutOfBoundsException ioobe)", "modifiers": "protected", "return": "Object", "signature": "Object generateIndexedProperty(Object nestedBean, String property, int index,\n            IndexOutOfBoundsException ioobe)", "full_signature": "protected Object generateIndexedProperty(Object nestedBean, String property, int index,\n            IndexOutOfBoundsException ioobe)", "class_method_signature": "PojoPropertyUtilsBean.generateIndexedProperty(Object nestedBean, String property, int index,\n            IndexOutOfBoundsException ioobe)", "testcase": false, "constructor": false}, {"identifier": "getUnreachableNestedProperty", "parameters": "(Object arg0, String arg1)", "modifiers": "private", "return": "Object", "signature": "Object getUnreachableNestedProperty(Object arg0, String arg1)", "full_signature": "private Object getUnreachableNestedProperty(Object arg0, String arg1)", "class_method_signature": "PojoPropertyUtilsBean.getUnreachableNestedProperty(Object arg0, String arg1)", "testcase": false, "constructor": false}, {"identifier": "setNestedProperty", "parameters": "(Object bean, String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setNestedProperty(Object bean, String name, Object value)", "full_signature": "public void setNestedProperty(Object bean, String name, Object value)", "class_method_signature": "PojoPropertyUtilsBean.setNestedProperty(Object bean, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptor", "parameters": "(Object bean, String name)", "modifiers": "public", "return": "PropertyDescriptor", "signature": "PropertyDescriptor getPropertyDescriptor(Object bean, String name)", "full_signature": "public PropertyDescriptor getPropertyDescriptor(Object bean, String name)", "class_method_signature": "PojoPropertyUtilsBean.getPropertyDescriptor(Object bean, String name)", "testcase": false, "constructor": false}, {"identifier": "findNextNestedIndex", "parameters": "(String expression)", "modifiers": "private", "return": "int", "signature": "int findNextNestedIndex(String expression)", "full_signature": "private int findNextNestedIndex(String expression)", "class_method_signature": "PojoPropertyUtilsBean.findNextNestedIndex(String expression)", "testcase": false, "constructor": false}, {"identifier": "setSimpleProperty", "parameters": "(Object bean,\n                                         String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setSimpleProperty(Object bean,\n                                         String name, Object value)", "full_signature": "public void setSimpleProperty(Object bean,\n                                         String name, Object value)", "class_method_signature": "PojoPropertyUtilsBean.setSimpleProperty(Object bean,\n                                         String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(\n                        Method method,\n                        Object bean,\n                        Object[] values)", "modifiers": "private", "return": "Object", "signature": "Object invokeMethod(\n                        Method method,\n                        Object bean,\n                        Object[] values)", "full_signature": "private Object invokeMethod(\n                        Method method,\n                        Object bean,\n                        Object[] values)", "class_method_signature": "PojoPropertyUtilsBean.invokeMethod(\n                        Method method,\n                        Object bean,\n                        Object[] values)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Object bean, String name)", "modifiers": "public", "return": "Class", "signature": "Class getPropertyType(Object bean, String name)", "full_signature": "public Class getPropertyType(Object bean, String name)", "class_method_signature": "PojoPropertyUtilsBean.getPropertyType(Object bean, String name)", "testcase": false, "constructor": false}], "file": "rice-middleware/kns/src/main/java/org/kuali/rice/kns/web/struts/form/pojo/PojoPropertyUtilsBean.java"}, "focal_method": {"identifier": "isWriteable", "parameters": "(Object bean, String name)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isWriteable(Object bean, String name) {\n        // Validate method parameters\n        if (bean == null) {\n            throw new IllegalArgumentException(\"No bean specified\");\n        }\n        if (name == null) {\n            throw new IllegalArgumentException(\"No name specified for bean class '\" +\n                    bean.getClass() + \"'\");\n        }\n\n       // Begin Kuali foundation modification\n\n        Resolver nestedResolver = getResolver();\n\n        // Resolve nested references\n        while (nestedResolver.hasNested(name)) {\n            String next = nestedResolver.next(name);\n            Object nestedBean = null;\n\n            try {\n                nestedBean = getProperty(bean, next);\n\n                // If an object on which we're trying to set a value is null,\n                // 1: get its type\n                // 2: if it's not an interface, create an instance of it and set the property\n                // 2a: if it is an interface, we can't instantiate it, so the property shouldn't be writeable.\n                if (nestedBean == null) {\n\n                    Class propertyType = getPropertyType(bean, next);\n                    if (propertyType != null && !propertyType.isInterface()) {\n                        Object newInstance = ObjectUtils.createNewObjectFromClass(propertyType);\n                        setSimpleProperty(bean, next, newInstance);\n                        nestedBean = getSimpleProperty(bean, next);\n                    } else {\n                        return false;\n                    }\n                }\n            } catch (IllegalAccessException e) {\n                return false;\n            } catch (InvocationTargetException e) {\n                return false;\n            } catch (NoSuchMethodException e) {\n                return false;\n            }\n\n            bean = nestedBean;\n            name = nestedResolver.remove(name);\n        }\n\n        // End Kuali foundation modification\n\n        // Remove any subscript from the final name value\n        name = getResolver().getProperty(name);\n\n        // Treat WrapDynaBean as special case - may be a read-only property\n        // (see Jira issue# BEANUTILS-61)\n        if (bean instanceof WrapDynaBean) {\n            bean = ((WrapDynaBean)bean).getInstance();\n        }\n\n        // Return the requested result\n        if (bean instanceof DynaBean) {\n            // All DynaBean properties are writeable\n            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);\n        } else {\n            try {\n                PropertyDescriptor desc =\n                        getPropertyDescriptor(bean, name);\n                if (desc != null) {\n                    Method writeMethod = desc.getWriteMethod();\n                    if (writeMethod == null) {\n                        if (desc instanceof IndexedPropertyDescriptor) {\n                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();\n                        } else if (desc instanceof MappedPropertyDescriptor) {\n                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();\n                        }\n                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);\n                    }\n                    return (writeMethod != null);\n                } else {\n                    return (false);\n                }\n            } catch (IllegalAccessException e) {\n                return (false);\n            } catch (InvocationTargetException e) {\n                return (false);\n            } catch (NoSuchMethodException e) {\n                return (false);\n            }\n        }\n\n    }", "signature": "boolean isWriteable(Object bean, String name)", "full_signature": "@Override public boolean isWriteable(Object bean, String name)", "class_method_signature": "PojoPropertyUtilsBean.isWriteable(Object bean, String name)", "testcase": false, "constructor": false, "invocations": ["getClass", "getResolver", "hasNested", "next", "getProperty", "getPropertyType", "isInterface", "createNewObjectFromClass", "setSimpleProperty", "getSimpleProperty", "remove", "getProperty", "getResolver", "getInstance", "getDynaProperty", "getDynaClass", "getPropertyDescriptor", "getWriteMethod", "getIndexedWriteMethod", "getMappedWriteMethod", "getAccessibleMethod", "getClass"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}