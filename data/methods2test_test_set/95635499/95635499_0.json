{"test_class": {"identifier": "ProcessUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-processes/src/test/java/ai/libs/jaicore/processes/ProcessUtilTest.java"}, "test_case": {"identifier": "testGetPID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPID() throws ProcessIDNotRetrievableException, IOException {\n\t\tProcess p = new ProcessBuilder(\"ping\", \"127.0.0.1\", \"-n 3\").start();\n\t\tint pid = ProcessUtil.getPID(p);\n\t\tassertTrue(\"Invalid process ID obtained\", pid > 1);\n\t\tp.destroyForcibly();\n\t}", "signature": "void testGetPID()", "full_signature": "@Test public void testGetPID()", "class_method_signature": "ProcessUtilTest.testGetPID()", "testcase": true, "constructor": false, "invocations": ["start", "getPID", "assertTrue", "destroyForcibly"]}, "focal_class": {"identifier": "ProcessUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ProcessUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProcessUtil.class)", "var_name": "logger"}], "methods": [{"identifier": "ProcessUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ProcessUtil()", "full_signature": "private  ProcessUtil()", "class_method_signature": "ProcessUtil.ProcessUtil()", "testcase": false, "constructor": true}, {"identifier": "getOS", "parameters": "()", "modifiers": "public static", "return": "EOperatingSystem", "signature": "EOperatingSystem getOS()", "full_signature": "public static EOperatingSystem getOS()", "class_method_signature": "ProcessUtil.getOS()", "testcase": false, "constructor": false}, {"identifier": "getProcessListProcess", "parameters": "()", "modifiers": "public static", "return": "Process", "signature": "Process getProcessListProcess()", "full_signature": "public static Process getProcessListProcess()", "class_method_signature": "ProcessUtil.getProcessListProcess()", "testcase": false, "constructor": false}, {"identifier": "getRunningJavaProcesses", "parameters": "()", "modifiers": "public static", "return": "Collection<ProcessInfo>", "signature": "Collection<ProcessInfo> getRunningJavaProcesses()", "full_signature": "public static Collection<ProcessInfo> getRunningJavaProcesses()", "class_method_signature": "ProcessUtil.getRunningJavaProcesses()", "testcase": false, "constructor": false}, {"identifier": "getPID", "parameters": "(final Process process)", "modifiers": "public static", "return": "int", "signature": "int getPID(final Process process)", "full_signature": "public static int getPID(final Process process)", "class_method_signature": "ProcessUtil.getPID(final Process process)", "testcase": false, "constructor": false}, {"identifier": "killProcess", "parameters": "(final int pid)", "modifiers": "public static", "return": "void", "signature": "void killProcess(final int pid)", "full_signature": "public static void killProcess(final int pid)", "class_method_signature": "ProcessUtil.killProcess(final int pid)", "testcase": false, "constructor": false}, {"identifier": "killProcess", "parameters": "(final Process process)", "modifiers": "public static", "return": "void", "signature": "void killProcess(final Process process)", "full_signature": "public static void killProcess(final Process process)", "class_method_signature": "ProcessUtil.killProcess(final Process process)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-processes/src/main/java/ai/libs/jaicore/processes/ProcessUtil.java"}, "focal_method": {"identifier": "getPID", "parameters": "(final Process process)", "modifiers": "public static", "return": "int", "body": "public static int getPID(final Process process) throws ProcessIDNotRetrievableException {\n\t\tInteger pid;\n\t\ttry {\n\t\t\tif (getOS() == EOperatingSystem.LINUX || getOS() == EOperatingSystem.MAC) {\n\t\t\t\t/* get the PID on unix/linux systems */\n\t\t\t\tField f = process.getClass().getDeclaredField(\"pid\");\n\t\t\t\tf.setAccessible(true);\n\t\t\t\tpid = f.getInt(process);\n\t\t\t\treturn pid;\n\n\t\t\t} else if (getOS() == EOperatingSystem.WIN) {/* determine the pid on windows plattforms */\n\t\t\t\treturn WinUtils.getWindowsProcessId(process).intValue();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new ProcessIDNotRetrievableException(\"Could not retrieve process ID\", e);\n\t\t}\n\t\tthrow new UnsupportedOperationException();\n\t}", "signature": "int getPID(final Process process)", "full_signature": "public static int getPID(final Process process)", "class_method_signature": "ProcessUtil.getPID(final Process process)", "testcase": false, "constructor": false, "invocations": ["getOS", "getOS", "getDeclaredField", "getClass", "setAccessible", "getInt", "getOS", "intValue", "getWindowsProcessId"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}