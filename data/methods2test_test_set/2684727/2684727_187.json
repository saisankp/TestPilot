{"test_class": {"identifier": "TripDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 15;", "modifier": "private static final", "type": "int", "declarator": "ID = 15", "var_name": "ID"}, {"original_string": "private static final UUID TRIP_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "TRIP_UUID = UUID.randomUUID()", "var_name": "TRIP_UUID"}, {"original_string": "private static final String NAME = \"Trip\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"Trip\"", "var_name": "NAME"}, {"original_string": "private static final long START_DATE = 1409703721000L;", "modifier": "private static final", "type": "long", "declarator": "START_DATE = 1409703721000L", "var_name": "START_DATE"}, {"original_string": "private static final long END_DATE = 1409703794000L;", "modifier": "private static final", "type": "long", "declarator": "END_DATE = 1409703794000L", "var_name": "END_DATE"}, {"original_string": "private static final String START_TIMEZONE = TimeZone.getAvailableIDs()[0];", "modifier": "private static final", "type": "String", "declarator": "START_TIMEZONE = TimeZone.getAvailableIDs()[0]", "var_name": "START_TIMEZONE"}, {"original_string": "private static final String END_TIMEZONE = TimeZone.getAvailableIDs()[1];", "modifier": "private static final", "type": "String", "declarator": "END_TIMEZONE = TimeZone.getAvailableIDs()[1]", "var_name": "END_TIMEZONE"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final String COST_CENTER = \"Cost Center\";", "modifier": "private static final", "type": "String", "declarator": "COST_CENTER = \"Cost Center\"", "var_name": "COST_CENTER"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "private static final String USER_PREFERENCES_CURRENCY_CODE = \"EUR\";", "modifier": "private static final", "type": "String", "declarator": "USER_PREFERENCES_CURRENCY_CODE = \"EUR\"", "var_name": "USER_PREFERENCES_CURRENCY_CODE"}, {"original_string": "private static final boolean NAME_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "NAME_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "NAME_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "TripDatabaseAdapter mTripDatabaseAdapter;", "modifier": "", "type": "TripDatabaseAdapter", "declarator": "mTripDatabaseAdapter", "var_name": "mTripDatabaseAdapter"}, {"original_string": "@Mock\n    Trip mTrip;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip", "var_name": "mTrip"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    UserPreferenceManager mPreferences;", "modifier": "@Mock", "type": "UserPreferenceManager", "declarator": "mPreferences", "var_name": "mPreferences"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}, {"original_string": "@Mock\n    AutoCompleteMetadata mAutoCompleteMetadata;", "modifier": "@Mock", "type": "AutoCompleteMetadata", "declarator": "mAutoCompleteMetadata", "var_name": "mAutoCompleteMetadata"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/TripDatabaseAdapterTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void build() throws Exception {\n        final Trip trip = new TripBuilderFactory()\n                .setId(ID)\n                .setUuid(TRIP_UUID)\n                .setDirectory(mStorageManager.getFile(NAME))\n                .setStartDate(START_DATE)\n                .setEndDate(END_DATE)\n                .setStartTimeZone(START_TIMEZONE)\n                .setEndTimeZone(END_TIMEZONE)\n                .setComment(COMMENT)\n                .setCostCenter(COST_CENTER)\n                .setDefaultCurrency(CURRENCY_CODE, mPreferences.get(UserPreference.General.DefaultCurrency))\n                .setSyncState(mGetSyncState)\n                .setNameHiddenFromAutoComplete(NAME_HIDDEN_FROM_AUTO_COMPLETE)\n                .setCommentHiddenFromAutoComplete(COMMENT_HIDDEN_FROM_AUTO_COMPLETE)\n                .setCostCenterHiddenFromAutoComplete(COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE)\n                .build();\n        assertEquals(trip, mTripDatabaseAdapter.build(mTrip, ID, TRIP_UUID, mock(DatabaseOperationMetadata.class)));\n        assertEquals(trip.getSyncState(), mTripDatabaseAdapter.build(mTrip, ID, TRIP_UUID, mock(DatabaseOperationMetadata.class)).getSyncState());\n    }", "signature": "void build()", "full_signature": "@Test public void build()", "class_method_signature": "TripDatabaseAdapterTest.build()", "testcase": true, "constructor": false, "invocations": ["build", "setCostCenterHiddenFromAutoComplete", "setCommentHiddenFromAutoComplete", "setNameHiddenFromAutoComplete", "setSyncState", "setDefaultCurrency", "setCostCenter", "setComment", "setEndTimeZone", "setStartTimeZone", "setEndDate", "setStartDate", "setDirectory", "setUuid", "setId", "getFile", "get", "assertEquals", "build", "mock", "assertEquals", "getSyncState", "getSyncState", "build", "mock"]}, "focal_class": {"identifier": "TripDatabaseAdapter", "superclass": "", "interfaces": "implements DatabaseAdapter<Trip>", "fields": [{"original_string": "private final StorageManager storageManager;", "modifier": "private final", "type": "StorageManager", "declarator": "storageManager", "var_name": "storageManager"}, {"original_string": "private final UserPreferenceManager preferences;", "modifier": "private final", "type": "UserPreferenceManager", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private final SyncStateAdapter syncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "syncStateAdapter", "var_name": "syncStateAdapter"}], "methods": [{"identifier": "TripDatabaseAdapter", "parameters": "(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "TripDatabaseAdapter.TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@Override @NonNull public", "return": "Trip", "signature": "Trip read(@NonNull Cursor cursor)", "full_signature": "@Override @NonNull public Trip read(@NonNull Cursor cursor)", "class_method_signature": "TripDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "ContentValues", "signature": "ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "Trip", "signature": "Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/TripDatabaseAdapter.java"}, "focal_method": {"identifier": "build", "parameters": "(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "Trip", "body": "@Override\n    @NonNull\n    public Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        return new TripBuilderFactory(trip)\n                .setId(primaryKey)\n                .setUuid(uuid)\n                .setDirectory(storageManager.getFile(trip.getName()))\n                .setSyncState(syncStateAdapter.get(trip.getSyncState(), databaseOperationMetadata))\n                .build();\n    }", "signature": "Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["build", "setSyncState", "setDirectory", "setUuid", "setId", "getFile", "getName", "get", "getSyncState"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}