{"test_class": {"identifier": "InjvmProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "private List<Exporter<?>> exporters = new ArrayList<Exporter<?>>();", "modifier": "private", "type": "List<Exporter<?>>", "declarator": "exporters = new ArrayList<Exporter<?>>()", "var_name": "exporters"}], "file": "dubbo-rpc/dubbo-rpc-injvm/src/test/java/com/alibaba/dubbo/rpc/protocol/injvm/InjvmProtocolTest.java"}, "test_case": {"identifier": "testIsInjvmRefer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsInjvmRefer() throws Exception {\n        DemoService service = new DemoServiceImpl();\n        URL url = URL.valueOf(\"injvm://127.0.0.1/TestService\")\n                .addParameter(Constants.INTERFACE_KEY, DemoService.class.getName());\n        Exporter<?> exporter = protocol.export(proxy.getInvoker(service, DemoService.class, url));\n        exporters.add(exporter);\n\n        url = url.setProtocol(\"dubbo\");\n        assertTrue(InjvmProtocol.getInjvmProtocol().isInjvmRefer(url));\n\n        url = url.addParameter(Constants.GROUP_KEY, \"*\")\n                .addParameter(Constants.VERSION_KEY, \"*\");\n        assertTrue(InjvmProtocol.getInjvmProtocol().isInjvmRefer(url));\n    }", "signature": "void testIsInjvmRefer()", "full_signature": "@Test public void testIsInjvmRefer()", "class_method_signature": "InjvmProtocolTest.testIsInjvmRefer()", "testcase": true, "constructor": false, "invocations": ["addParameter", "valueOf", "getName", "export", "getInvoker", "add", "setProtocol", "assertTrue", "isInjvmRefer", "getInjvmProtocol", "addParameter", "addParameter", "assertTrue", "isInjvmRefer", "getInjvmProtocol"]}, "focal_class": {"identifier": "InjvmProtocol", "superclass": "extends AbstractProtocol", "interfaces": "implements Protocol", "fields": [{"original_string": "public static final String NAME = Constants.LOCAL_PROTOCOL;", "modifier": "public static final", "type": "String", "declarator": "NAME = Constants.LOCAL_PROTOCOL", "var_name": "NAME"}, {"original_string": "public static final int DEFAULT_PORT = 0;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 0", "var_name": "DEFAULT_PORT"}, {"original_string": "private static InjvmProtocol INSTANCE;", "modifier": "private static", "type": "InjvmProtocol", "declarator": "INSTANCE", "var_name": "INSTANCE"}], "methods": [{"identifier": "InjvmProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " InjvmProtocol()", "full_signature": "public  InjvmProtocol()", "class_method_signature": "InjvmProtocol.InjvmProtocol()", "testcase": false, "constructor": true}, {"identifier": "getInjvmProtocol", "parameters": "()", "modifiers": "public static", "return": "InjvmProtocol", "signature": "InjvmProtocol getInjvmProtocol()", "full_signature": "public static InjvmProtocol getInjvmProtocol()", "class_method_signature": "InjvmProtocol.getInjvmProtocol()", "testcase": false, "constructor": false}, {"identifier": "getExporter", "parameters": "(Map<String, Exporter<?>> map, URL key)", "modifiers": "static", "return": "Exporter<?>", "signature": "Exporter<?> getExporter(Map<String, Exporter<?>> map, URL key)", "full_signature": "static Exporter<?> getExporter(Map<String, Exporter<?>> map, URL key)", "class_method_signature": "InjvmProtocol.getExporter(Map<String, Exporter<?>> map, URL key)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "InjvmProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "signature": "Exporter<T> export(Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(Invoker<T> invoker)", "class_method_signature": "InjvmProtocol.export(Invoker<T> invoker)", "testcase": false, "constructor": false}, {"identifier": "refer", "parameters": "(Class<T> serviceType, URL url)", "modifiers": "@Override public", "return": "Invoker<T>", "signature": "Invoker<T> refer(Class<T> serviceType, URL url)", "full_signature": "@Override public Invoker<T> refer(Class<T> serviceType, URL url)", "class_method_signature": "InjvmProtocol.refer(Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "isInjvmRefer", "parameters": "(URL url)", "modifiers": "public", "return": "boolean", "signature": "boolean isInjvmRefer(URL url)", "full_signature": "public boolean isInjvmRefer(URL url)", "class_method_signature": "InjvmProtocol.isInjvmRefer(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-injvm/src/main/java/com/alibaba/dubbo/rpc/protocol/injvm/InjvmProtocol.java"}, "focal_method": {"identifier": "isInjvmRefer", "parameters": "(URL url)", "modifiers": "public", "return": "boolean", "body": "public boolean isInjvmRefer(URL url) {\n        final boolean isJvmRefer;\n        String scope = url.getParameter(Constants.SCOPE_KEY);\n        // Since injvm protocol is configured explicitly, we don't need to set any extra flag, use normal refer process.\n        if (Constants.LOCAL_PROTOCOL.toString().equals(url.getProtocol())) {\n            isJvmRefer = false;\n        } else if (Constants.SCOPE_LOCAL.equals(scope) || (url.getParameter(\"injvm\", false))) {\n            // if it's declared as local reference\n            // 'scope=local' is equivalent to 'injvm=true', injvm will be deprecated in the future release\n            isJvmRefer = true;\n        } else if (Constants.SCOPE_REMOTE.equals(scope)) {\n            // it's declared as remote reference\n            isJvmRefer = false;\n        } else if (url.getParameter(Constants.GENERIC_KEY, false)) {\n            // generic invocation is not local reference\n            isJvmRefer = false;\n        } else if (getExporter(exporterMap, url) != null) {\n            // by default, go through local reference if there's the service exposed locally\n            isJvmRefer = true;\n        } else {\n            isJvmRefer = false;\n        }\n        return isJvmRefer;\n    }", "signature": "boolean isInjvmRefer(URL url)", "full_signature": "public boolean isInjvmRefer(URL url)", "class_method_signature": "InjvmProtocol.isInjvmRefer(URL url)", "testcase": false, "constructor": false, "invocations": ["getParameter", "equals", "toString", "getProtocol", "equals", "getParameter", "equals", "getParameter", "getExporter"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}