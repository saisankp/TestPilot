{"test_class": {"identifier": "IndexFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int HASH_SLOT_NUM = 100;", "modifier": "private final", "type": "int", "declarator": "HASH_SLOT_NUM = 100", "var_name": "HASH_SLOT_NUM"}, {"original_string": "private final int INDEX_NUM = 400;", "modifier": "private final", "type": "int", "declarator": "INDEX_NUM = 400", "var_name": "INDEX_NUM"}], "file": "store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java"}, "test_case": {"identifier": "testPutKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPutKey() throws Exception {\n        IndexFile indexFile = new IndexFile(\"100\", HASH_SLOT_NUM, INDEX_NUM, 0, 0);\n        for (long i = 0; i < (INDEX_NUM - 1); i++) {\n            boolean putResult = indexFile.putKey(Long.toString(i), i, System.currentTimeMillis());\n            assertThat(putResult).isTrue();\n        }\n\n        // put over index file capacity.\n        boolean putResult = indexFile.putKey(Long.toString(400), 400, System.currentTimeMillis());\n        assertThat(putResult).isFalse();\n        indexFile.destroy(0);\n        File file = new File(\"100\");\n        UtilAll.deleteFile(file);\n    }", "signature": "void testPutKey()", "full_signature": "@Test public void testPutKey()", "class_method_signature": "IndexFileTest.testPutKey()", "testcase": true, "constructor": false, "invocations": ["putKey", "toString", "currentTimeMillis", "isTrue", "assertThat", "putKey", "toString", "currentTimeMillis", "isFalse", "assertThat", "destroy", "deleteFile"]}, "focal_class": {"identifier": "IndexFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME)", "var_name": "log"}, {"original_string": "private static int hashSlotSize = 4;", "modifier": "private static", "type": "int", "declarator": "hashSlotSize = 4", "var_name": "hashSlotSize"}, {"original_string": "private static int indexSize = 20;", "modifier": "private static", "type": "int", "declarator": "indexSize = 20", "var_name": "indexSize"}, {"original_string": "private static int invalidIndex = 0;", "modifier": "private static", "type": "int", "declarator": "invalidIndex = 0", "var_name": "invalidIndex"}, {"original_string": "private final int hashSlotNum;", "modifier": "private final", "type": "int", "declarator": "hashSlotNum", "var_name": "hashSlotNum"}, {"original_string": "private final int indexNum;", "modifier": "private final", "type": "int", "declarator": "indexNum", "var_name": "indexNum"}, {"original_string": "private final MappedFile mappedFile;", "modifier": "private final", "type": "MappedFile", "declarator": "mappedFile", "var_name": "mappedFile"}, {"original_string": "private final FileChannel fileChannel;", "modifier": "private final", "type": "FileChannel", "declarator": "fileChannel", "var_name": "fileChannel"}, {"original_string": "private final MappedByteBuffer mappedByteBuffer;", "modifier": "private final", "type": "MappedByteBuffer", "declarator": "mappedByteBuffer", "var_name": "mappedByteBuffer"}, {"original_string": "private final IndexHeader indexHeader;", "modifier": "private final", "type": "IndexHeader", "declarator": "indexHeader", "var_name": "indexHeader"}], "methods": [{"identifier": "IndexFile", "parameters": "(final String fileName, final int hashSlotNum, final int indexNum,\n        final long endPhyOffset, final long endTimestamp)", "modifiers": "public", "return": "", "signature": " IndexFile(final String fileName, final int hashSlotNum, final int indexNum,\n        final long endPhyOffset, final long endTimestamp)", "full_signature": "public  IndexFile(final String fileName, final int hashSlotNum, final int indexNum,\n        final long endPhyOffset, final long endTimestamp)", "class_method_signature": "IndexFile.IndexFile(final String fileName, final int hashSlotNum, final int indexNum,\n        final long endPhyOffset, final long endTimestamp)", "testcase": false, "constructor": true}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "IndexFile.getFileName()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void load()", "full_signature": "public void load()", "class_method_signature": "IndexFile.load()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "IndexFile.flush()", "testcase": false, "constructor": false}, {"identifier": "isWriteFull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWriteFull()", "full_signature": "public boolean isWriteFull()", "class_method_signature": "IndexFile.isWriteFull()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(final long intervalForcibly)", "modifiers": "public", "return": "boolean", "signature": "boolean destroy(final long intervalForcibly)", "full_signature": "public boolean destroy(final long intervalForcibly)", "class_method_signature": "IndexFile.destroy(final long intervalForcibly)", "testcase": false, "constructor": false}, {"identifier": "putKey", "parameters": "(final String key, final long phyOffset, final long storeTimestamp)", "modifiers": "public", "return": "boolean", "signature": "boolean putKey(final String key, final long phyOffset, final long storeTimestamp)", "full_signature": "public boolean putKey(final String key, final long phyOffset, final long storeTimestamp)", "class_method_signature": "IndexFile.putKey(final String key, final long phyOffset, final long storeTimestamp)", "testcase": false, "constructor": false}, {"identifier": "indexKeyHashMethod", "parameters": "(final String key)", "modifiers": "public", "return": "int", "signature": "int indexKeyHashMethod(final String key)", "full_signature": "public int indexKeyHashMethod(final String key)", "class_method_signature": "IndexFile.indexKeyHashMethod(final String key)", "testcase": false, "constructor": false}, {"identifier": "getBeginTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getBeginTimestamp()", "full_signature": "public long getBeginTimestamp()", "class_method_signature": "IndexFile.getBeginTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getEndTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEndTimestamp()", "full_signature": "public long getEndTimestamp()", "class_method_signature": "IndexFile.getEndTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getEndPhyOffset", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEndPhyOffset()", "full_signature": "public long getEndPhyOffset()", "class_method_signature": "IndexFile.getEndPhyOffset()", "testcase": false, "constructor": false}, {"identifier": "isTimeMatched", "parameters": "(final long begin, final long end)", "modifiers": "public", "return": "boolean", "signature": "boolean isTimeMatched(final long begin, final long end)", "full_signature": "public boolean isTimeMatched(final long begin, final long end)", "class_method_signature": "IndexFile.isTimeMatched(final long begin, final long end)", "testcase": false, "constructor": false}, {"identifier": "selectPhyOffset", "parameters": "(final List<Long> phyOffsets, final String key, final int maxNum,\n        final long begin, final long end, boolean lock)", "modifiers": "public", "return": "void", "signature": "void selectPhyOffset(final List<Long> phyOffsets, final String key, final int maxNum,\n        final long begin, final long end, boolean lock)", "full_signature": "public void selectPhyOffset(final List<Long> phyOffsets, final String key, final int maxNum,\n        final long begin, final long end, boolean lock)", "class_method_signature": "IndexFile.selectPhyOffset(final List<Long> phyOffsets, final String key, final int maxNum,\n        final long begin, final long end, boolean lock)", "testcase": false, "constructor": false}], "file": "store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java"}, "focal_method": {"identifier": "putKey", "parameters": "(final String key, final long phyOffset, final long storeTimestamp)", "modifiers": "public", "return": "boolean", "body": "public boolean putKey(final String key, final long phyOffset, final long storeTimestamp) {\n        if (this.indexHeader.getIndexCount() < this.indexNum) {\n            int keyHash = indexKeyHashMethod(key);\n            int slotPos = keyHash % this.hashSlotNum;\n            int absSlotPos = IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;\n\n            FileLock fileLock = null;\n\n            try {\n\n                // fileLock = this.fileChannel.lock(absSlotPos, hashSlotSize,\n                // false);\n                int slotValue = this.mappedByteBuffer.getInt(absSlotPos);\n                if (slotValue <= invalidIndex || slotValue > this.indexHeader.getIndexCount()) {\n                    slotValue = invalidIndex;\n                }\n\n                long timeDiff = storeTimestamp - this.indexHeader.getBeginTimestamp();\n\n                timeDiff = timeDiff / 1000;\n\n                if (this.indexHeader.getBeginTimestamp() <= 0) {\n                    timeDiff = 0;\n                } else if (timeDiff > Integer.MAX_VALUE) {\n                    timeDiff = Integer.MAX_VALUE;\n                } else if (timeDiff < 0) {\n                    timeDiff = 0;\n                }\n\n                int absIndexPos =\n                    IndexHeader.INDEX_HEADER_SIZE + this.hashSlotNum * hashSlotSize\n                        + this.indexHeader.getIndexCount() * indexSize;\n\n                this.mappedByteBuffer.putInt(absIndexPos, keyHash);\n                this.mappedByteBuffer.putLong(absIndexPos + 4, phyOffset);\n                this.mappedByteBuffer.putInt(absIndexPos + 4 + 8, (int) timeDiff);\n                this.mappedByteBuffer.putInt(absIndexPos + 4 + 8 + 4, slotValue);\n\n                this.mappedByteBuffer.putInt(absSlotPos, this.indexHeader.getIndexCount());\n\n                if (this.indexHeader.getIndexCount() <= 1) {\n                    this.indexHeader.setBeginPhyOffset(phyOffset);\n                    this.indexHeader.setBeginTimestamp(storeTimestamp);\n                }\n\n                this.indexHeader.incHashSlotCount();\n                this.indexHeader.incIndexCount();\n                this.indexHeader.setEndPhyOffset(phyOffset);\n                this.indexHeader.setEndTimestamp(storeTimestamp);\n\n                return true;\n            } catch (Exception e) {\n                log.error(\"putKey exception, Key: \" + key + \" KeyHashCode: \" + key.hashCode(), e);\n            } finally {\n                if (fileLock != null) {\n                    try {\n                        fileLock.release();\n                    } catch (IOException e) {\n                        log.error(\"Failed to release the lock\", e);\n                    }\n                }\n            }\n        } else {\n            log.warn(\"Over index file capacity: index count = \" + this.indexHeader.getIndexCount()\n                + \"; index max num = \" + this.indexNum);\n        }\n\n        return false;\n    }", "signature": "boolean putKey(final String key, final long phyOffset, final long storeTimestamp)", "full_signature": "public boolean putKey(final String key, final long phyOffset, final long storeTimestamp)", "class_method_signature": "IndexFile.putKey(final String key, final long phyOffset, final long storeTimestamp)", "testcase": false, "constructor": false, "invocations": ["getIndexCount", "indexKeyHashMethod", "getInt", "getIndexCount", "getBeginTimestamp", "getBeginTimestamp", "getIndexCount", "putInt", "putLong", "putInt", "putInt", "putInt", "getIndexCount", "getIndexCount", "setBeginPhyOffset", "setBeginTimestamp", "incHashSlotCount", "incIndexCount", "setEndPhyOffset", "setEndTimestamp", "error", "hashCode", "release", "error", "warn", "getIndexCount"]}, "repository": {"repo_id": 141891951, "url": "https://github.com/longlong524/store", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 9, "size": 122, "license": "licensed"}}