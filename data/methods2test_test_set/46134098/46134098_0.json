{"test_class": {"identifier": "RegexMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "gp-maven-plugin/src/test/java/com/ibm/g11n/pipeline/maven/RegexMapperTest.java"}, "test_case": {"identifier": "testMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMap() {\n        final String[][] TESTS = {\n                {\"com/ibm/g11n/Test.java\", \"(.+)\\\\.java\", \"$1\", \"com/ibm/g11n/Test\"},\n                {\"com/ibm/g11n/Test\", \"/\", \"\\\\.\", \"com.ibm.g11n.Test\"},\n                {\"abc-123\", \"def\", \"xyz\", \"abc-123\"},   // no matches\n        };\n\n        for (String[] test : TESTS) {\n            RegexMapper mapper = new RegexMapper(test[1], test[2]);\n            String result = mapper.map(test[0]);\n            Assert.assertEquals(result, test[3]);\n        }\n    }", "signature": "void testMap()", "full_signature": "@Test public void testMap()", "class_method_signature": "RegexMapperTest.testMap()", "testcase": true, "constructor": false, "invocations": ["map", "assertEquals"]}, "focal_class": {"identifier": "RegexMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameter(required = true)\n    private String pattern;", "modifier": "@Parameter(required = true)\n    private", "type": "String", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "@Parameter(required = true)\n    private String replacement;", "modifier": "@Parameter(required = true)\n    private", "type": "String", "declarator": "replacement", "var_name": "replacement"}], "methods": [{"identifier": "RegexMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " RegexMapper()", "full_signature": "public  RegexMapper()", "class_method_signature": "RegexMapper.RegexMapper()", "testcase": false, "constructor": true}, {"identifier": "RegexMapper", "parameters": "(String pattern, String replacement)", "modifiers": "public", "return": "", "signature": " RegexMapper(String pattern, String replacement)", "full_signature": "public  RegexMapper(String pattern, String replacement)", "class_method_signature": "RegexMapper.RegexMapper(String pattern, String replacement)", "testcase": false, "constructor": true}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPattern()", "full_signature": "public String getPattern()", "class_method_signature": "RegexMapper.getPattern()", "testcase": false, "constructor": false}, {"identifier": "setPattern", "parameters": "(String pattern)", "modifiers": "public", "return": "void", "signature": "void setPattern(String pattern)", "full_signature": "public void setPattern(String pattern)", "class_method_signature": "RegexMapper.setPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getReplacement", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReplacement()", "full_signature": "public String getReplacement()", "class_method_signature": "RegexMapper.getReplacement()", "testcase": false, "constructor": false}, {"identifier": "setReplacement", "parameters": "(String replacement)", "modifiers": "public", "return": "void", "signature": "void setReplacement(String replacement)", "full_signature": "public void setReplacement(String replacement)", "class_method_signature": "RegexMapper.setReplacement(String replacement)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(String s)", "modifiers": "public", "return": "String", "signature": "String map(String s)", "full_signature": "public String map(String s)", "class_method_signature": "RegexMapper.map(String s)", "testcase": false, "constructor": false}], "file": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/RegexMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(String s)", "modifiers": "public", "return": "String", "body": "public String map(String s) {\n        assert pattern != null;\n        assert replacement != null;\n\n        return Pattern.compile(pattern).matcher(s).replaceAll(replacement);\n    }", "signature": "String map(String s)", "full_signature": "public String map(String s)", "class_method_signature": "RegexMapper.map(String s)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "matcher", "compile"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}