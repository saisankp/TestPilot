{"test_class": {"identifier": "PackageUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "tddl-optimizer/src/test/java/com/taobao/tddl/optimizer/utils/PackageUtilsTest.java"}, "test_case": {"identifier": "testJar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJar() {\n        List<Class> classes = PackageUtils.findClassesInPackage(\"com.google.common.annotations\", null);\n        for (Class clazz : classes) {\n            System.out.println(clazz);\n        }\n    }", "signature": "void testJar()", "full_signature": "@Test public void testJar()", "class_method_signature": "PackageUtilsTest.testJar()", "testcase": true, "constructor": false, "invocations": ["findClassesInPackage", "println"]}, "focal_class": {"identifier": "PackageUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findClassesInPackage", "parameters": "(String packageName, ClassFilter filter)", "modifiers": "public static", "return": "List<Class>", "signature": "List<Class> findClassesInPackage(String packageName, ClassFilter filter)", "full_signature": "public static List<Class> findClassesInPackage(String packageName, ClassFilter filter)", "class_method_signature": "PackageUtils.findClassesInPackage(String packageName, ClassFilter filter)", "testcase": false, "constructor": false}, {"identifier": "findClassesInDirPackage", "parameters": "(String packageName, String packagePath, List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void findClassesInDirPackage(String packageName, String packagePath, List<String> classes)", "full_signature": "private static void findClassesInDirPackage(String packageName, String packagePath, List<String> classes)", "class_method_signature": "PackageUtils.findClassesInDirPackage(String packageName, String packagePath, List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "makeFullClassName", "parameters": "(String pkg, String cls)", "modifiers": "private static", "return": "String", "signature": "String makeFullClassName(String pkg, String cls)", "full_signature": "private static String makeFullClassName(String pkg, String cls)", "class_method_signature": "PackageUtils.makeFullClassName(String pkg, String cls)", "testcase": false, "constructor": false}], "file": "tddl-optimizer/src/main/java/com/taobao/tddl/optimizer/utils/PackageUtils.java"}, "focal_method": {"identifier": "findClassesInPackage", "parameters": "(String packageName, ClassFilter filter)", "modifiers": "public static", "return": "List<Class>", "body": "public static List<Class> findClassesInPackage(String packageName, ClassFilter filter) {\n        try {\n            List<String> classes = Lists.newArrayList();\n            String packageDirName = packageName.replace('.', '/');\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\n            Enumeration<URL> dirEnumeration = classLoader.getResources(packageDirName);\n            List<URL> dirs = Lists.newArrayList();\n            while (dirEnumeration.hasMoreElements()) {\n                URL dir = dirEnumeration.nextElement();\n                dirs.add(dir);\n            }\n\n            Iterator<URL> dirIterator = dirs.iterator();\n            while (dirIterator.hasNext()) {\n                URL url = dirIterator.next();\n                String protocol = url.getProtocol();\n                if (\"file\".equals(protocol)) {\n                    findClassesInDirPackage(packageName, URLDecoder.decode(url.getFile(), \"UTF-8\"), classes);\n                } else if (\"jar\".equals(protocol)) {\n                    JarFile jar = ((JarURLConnection) url.openConnection()).getJarFile();\n                    Enumeration<JarEntry> entries = jar.entries();\n                    while (entries.hasMoreElements()) {\n                        JarEntry entry = entries.nextElement();\n                        String name = entry.getName();\n                        String pName = packageName;\n                        if (name.charAt(0) == '/') {\n                            name = name.substring(1);\n                        }\n                        if (name.startsWith(packageDirName)) {\n                            int idx = name.lastIndexOf('/');\n                            if (idx != -1) {\n                                pName = name.substring(0, idx).replace('/', '.');\n                            }\n\n                            if (idx != -1) {\n                                // it's not inside a deeper dir\n                                if (name.endsWith(\".class\") && !entry.isDirectory()) {\n                                    String className = name.substring(pName.length() + 1, name.length() - 6);\n                                    classes.add(makeFullClassName(pName, className));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            List<Class> result = Lists.newArrayList();\n            for (String clazz : classes) {\n                if (filter == null || filter.preFilter(clazz)) {\n                    Class<?> cls = null;\n                    try {\n                        cls = Class.forName(clazz);\n                    } catch (Throwable e) {\n                        // ignore\n                    }\n\n                    if (cls != null && (filter == null || filter.filter(cls))) {\n                        result.add(cls);\n                    }\n                }\n            }\n\n            return result;\n        } catch (IOException e) {\n            throw new FunctionException(\"findClassesInPackage : \" + packageName + \" is failed. \", e);\n        }\n\n    }", "signature": "List<Class> findClassesInPackage(String packageName, ClassFilter filter)", "full_signature": "public static List<Class> findClassesInPackage(String packageName, ClassFilter filter)", "class_method_signature": "PackageUtils.findClassesInPackage(String packageName, ClassFilter filter)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "replace", "getContextClassLoader", "currentThread", "getResources", "newArrayList", "hasMoreElements", "nextElement", "add", "iterator", "hasNext", "next", "getProtocol", "equals", "findClassesInDirPackage", "decode", "getFile", "equals", "getJarFile", "openConnection", "entries", "hasMoreElements", "nextElement", "getName", "charAt", "substring", "startsWith", "lastIndexOf", "replace", "substring", "endsWith", "isDirectory", "substring", "length", "length", "add", "makeFullClassName", "newArrayList", "preFilter", "forName", "filter", "add"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}