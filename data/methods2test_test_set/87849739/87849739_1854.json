{"test_class": {"identifier": "PolicyErrorResponseAdapterTest", "superclass": "", "interfaces": "implements ProtocolAdapterTest", "fields": [{"original_string": "private PolicyErrorResponseAdapter underTest;", "modifier": "private", "type": "PolicyErrorResponseAdapter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private DittoRuntimeException dittoRuntimeException;", "modifier": "private", "type": "DittoRuntimeException", "declarator": "dittoRuntimeException", "var_name": "dittoRuntimeException"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/policies/PolicyErrorResponseAdapterTest.java"}, "test_case": {"identifier": "testFromAdaptable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromAdaptable() {\n\n        final PolicyErrorResponse expected =\n                PolicyErrorResponse.of(TestConstants.Policies.POLICY_ID, dittoRuntimeException);\n\n        final TopicPath topicPath =\n                TopicPath.newBuilder(TestConstants.Policies.POLICY_ID).policies().none().errors().build();\n        final JsonPointer path = JsonPointer.empty();\n\n        final Adaptable adaptable = Adaptable.newBuilder(topicPath)\n                .withPayload(Payload.newBuilder(path)\n                        .withValue(dittoRuntimeException.toJson(FieldType.regularOrSpecial()))\n                        .build())\n                .withHeaders(TestConstants.HEADERS_V_2)\n                .build();\n        final PolicyErrorResponse actual = underTest.fromAdaptable(adaptable);\n        assertWithExternalHeadersThat(actual).isEqualTo(expected);\n    }", "signature": "void testFromAdaptable()", "full_signature": "@Test public void testFromAdaptable()", "class_method_signature": "PolicyErrorResponseAdapterTest.testFromAdaptable()", "testcase": true, "constructor": false, "invocations": ["of", "build", "errors", "none", "policies", "newBuilder", "empty", "build", "withHeaders", "withPayload", "newBuilder", "build", "withValue", "newBuilder", "toJson", "regularOrSpecial", "fromAdaptable", "isEqualTo", "assertWithExternalHeadersThat"]}, "focal_class": {"identifier": "PolicyErrorResponseAdapter", "superclass": "extends AbstractErrorResponseAdapter<PolicyErrorResponse>", "interfaces": "implements PolicyAdapter<PolicyErrorResponse>", "fields": [], "methods": [{"identifier": "PolicyErrorResponseAdapter", "parameters": "(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "modifiers": "private", "return": "", "signature": " PolicyErrorResponseAdapter(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "full_signature": "private  PolicyErrorResponseAdapter(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "class_method_signature": "PolicyErrorResponseAdapter.PolicyErrorResponseAdapter(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "modifiers": "public static", "return": "PolicyErrorResponseAdapter", "signature": "PolicyErrorResponseAdapter of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "full_signature": "public static PolicyErrorResponseAdapter of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "class_method_signature": "PolicyErrorResponseAdapter.of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "testcase": false, "constructor": false}, {"identifier": "getTopicPathBuilder", "parameters": "(final PolicyErrorResponse errorResponse)", "modifiers": "@Override public", "return": "TopicPathBuilder", "signature": "TopicPathBuilder getTopicPathBuilder(final PolicyErrorResponse errorResponse)", "full_signature": "@Override public TopicPathBuilder getTopicPathBuilder(final PolicyErrorResponse errorResponse)", "class_method_signature": "PolicyErrorResponseAdapter.getTopicPathBuilder(final PolicyErrorResponse errorResponse)", "testcase": false, "constructor": false}, {"identifier": "buildErrorResponse", "parameters": "(final TopicPath topicPath, final DittoRuntimeException exception,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "PolicyErrorResponse", "signature": "PolicyErrorResponse buildErrorResponse(final TopicPath topicPath, final DittoRuntimeException exception,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Override public PolicyErrorResponse buildErrorResponse(final TopicPath topicPath, final DittoRuntimeException exception,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyErrorResponseAdapter.buildErrorResponse(final TopicPath topicPath, final DittoRuntimeException exception,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/policies/PolicyErrorResponseAdapter.java"}, "focal_method": {"identifier": "of", "parameters": "(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "modifiers": "public static", "return": "PolicyErrorResponseAdapter", "body": "public static PolicyErrorResponseAdapter of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry) {\n        return new PolicyErrorResponseAdapter(requireNonNull(headerTranslator), errorRegistry);\n    }", "signature": "PolicyErrorResponseAdapter of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "full_signature": "public static PolicyErrorResponseAdapter of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "class_method_signature": "PolicyErrorResponseAdapter.of(final HeaderTranslator headerTranslator,\n            final ErrorRegistry<DittoRuntimeException> errorRegistry)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}