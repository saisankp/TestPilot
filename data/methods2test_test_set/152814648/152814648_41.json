{"test_class": {"identifier": "AffectedFilesResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FilePath BUILD_ROOT = new FilePath(new File(\"builds\"));", "modifier": "private static final", "type": "FilePath", "declarator": "BUILD_ROOT = new FilePath(new File(\"builds\"))", "var_name": "BUILD_ROOT"}, {"original_string": "private static final String FILE_NAME = \"file.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"file.txt\"", "var_name": "FILE_NAME"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/util/AffectedFilesResolverTest.java"}, "test_case": {"identifier": "shouldCopyFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCopyFile() throws InterruptedException {\n        AffectedFilesResolver resolver = new AffectedFilesResolver();\n\n        Report report = new Report();\n        Issue issue = new IssueBuilder().setFileName(FILE_NAME).build();\n        report.add(issue);\n\n        RemoteFacade remoteFacade = mock(RemoteFacade.class);\n        when(remoteFacade.exists(FILE_NAME)).thenReturn(true);\n        when(remoteFacade.isInWorkspace(FILE_NAME)).thenReturn(true);\n\n        resolver.copyAffectedFilesToBuildFolder(report, remoteFacade);\n\n        assertThat(report.getErrorMessages()).isEmpty();\n        assertThat(report.getInfoMessages()).hasSize(1);\n        String message = report.getInfoMessages().get(0);\n        assertThat(message).contains(\"1 copied\");\n        assertThat(message).contains(\"0 not in workspace\");\n        assertThat(message).contains(\"0 not-found\");\n        assertThat(message).contains(\"0 with I/O error\");\n    }", "signature": "void shouldCopyFile()", "full_signature": "@Test void shouldCopyFile()", "class_method_signature": "AffectedFilesResolverTest.shouldCopyFile()", "testcase": true, "constructor": false, "invocations": ["build", "setFileName", "add", "mock", "thenReturn", "when", "exists", "thenReturn", "when", "isInWorkspace", "copyAffectedFilesToBuildFolder", "isEmpty", "assertThat", "getErrorMessages", "hasSize", "assertThat", "getInfoMessages", "get", "getInfoMessages", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat"]}, "focal_class": {"identifier": "AffectedFilesResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String AFFECTED_FILES_FOLDER_NAME = \"files-with-issues\";", "modifier": "public static final", "type": "String", "declarator": "AFFECTED_FILES_FOLDER_NAME = \"files-with-issues\"", "var_name": "AFFECTED_FILES_FOLDER_NAME"}], "methods": [{"identifier": "hasAffectedFile", "parameters": "(final Run<?, ?> run, final Issue issue)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAffectedFile(final Run<?, ?> run, final Issue issue)", "full_signature": "public static boolean hasAffectedFile(final Run<?, ?> run, final Issue issue)", "class_method_signature": "AffectedFilesResolver.hasAffectedFile(final Run<?, ?> run, final Issue issue)", "testcase": false, "constructor": false}, {"identifier": "canAccess", "parameters": "(final Path file)", "modifiers": "private static", "return": "boolean", "signature": "boolean canAccess(final Path file)", "full_signature": "private static boolean canAccess(final Path file)", "class_method_signature": "AffectedFilesResolver.canAccess(final Path file)", "testcase": false, "constructor": false}, {"identifier": "asStream", "parameters": "(final Run<?, ?> build, final String fileName)", "modifiers": "static", "return": "InputStream", "signature": "InputStream asStream(final Run<?, ?> build, final String fileName)", "full_signature": "static InputStream asStream(final Run<?, ?> build, final String fileName)", "class_method_signature": "AffectedFilesResolver.asStream(final Run<?, ?> build, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(final Run<?, ?> run, final String fileName)", "modifiers": "public static", "return": "Path", "signature": "Path getFile(final Run<?, ?> run, final String fileName)", "full_signature": "public static Path getFile(final Run<?, ?> run, final String fileName)", "class_method_signature": "AffectedFilesResolver.getFile(final Run<?, ?> run, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getTempName", "parameters": "(final String fileName)", "modifiers": "private static", "return": "String", "signature": "String getTempName(final String fileName)", "full_signature": "private static String getTempName(final String fileName)", "class_method_signature": "AffectedFilesResolver.getTempName(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "copyAffectedFilesToBuildFolder", "parameters": "(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "modifiers": "public", "return": "void", "signature": "void copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "full_signature": "public void copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "class_method_signature": "AffectedFilesResolver.copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "testcase": false, "constructor": false}, {"identifier": "copyAffectedFilesToBuildFolder", "parameters": "(final Report report, final RemoteFacade remoteFacade)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void copyAffectedFilesToBuildFolder(final Report report, final RemoteFacade remoteFacade)", "full_signature": "@VisibleForTesting void copyAffectedFilesToBuildFolder(final Report report, final RemoteFacade remoteFacade)", "class_method_signature": "AffectedFilesResolver.copyAffectedFilesToBuildFolder(final Report report, final RemoteFacade remoteFacade)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/util/AffectedFilesResolver.java"}, "focal_method": {"identifier": "copyAffectedFilesToBuildFolder", "parameters": "(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "modifiers": "public", "return": "void", "body": "public void copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder) throws InterruptedException {\n        copyAffectedFilesToBuildFolder(report, new RemoteFacade(buildFolder, affectedFilesFolder));\n    }", "signature": "void copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "full_signature": "public void copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "class_method_signature": "AffectedFilesResolver.copyAffectedFilesToBuildFolder(final Report report, final FilePath buildFolder,\n            final FilePath affectedFilesFolder)", "testcase": false, "constructor": false, "invocations": ["copyAffectedFilesToBuildFolder"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}