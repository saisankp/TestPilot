{"test_class": {"identifier": "SimpleSegmentPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimplePredicate predicate;", "modifier": "private", "type": "SimplePredicate", "declarator": "predicate", "var_name": "predicate"}, {"original_string": "private SimplePredicate stringPred;", "modifier": "private", "type": "SimplePredicate", "declarator": "stringPred", "var_name": "stringPred"}, {"original_string": "private static final String BAD_OP = \"invalidOp\";", "modifier": "private static final", "type": "String", "declarator": "BAD_OP = \"invalidOp\"", "var_name": "BAD_OP"}], "file": "kie-pmml/src/test/java/org/kie/pmml/pmml_4_2/model/mining/SimpleSegmentPredicateTest.java"}, "test_case": {"identifier": "testLessThan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLessThan() {\n        predicate.setOperator(SimpleSegmentPredicate.LESSER);\n        SimpleSegmentPredicate ssp = new SimpleSegmentPredicate(predicate);\n        String text = ssp.getPredicateRule();\n        assertNotNull(text);\n        assertEquals(\"( mTF2 == false ) && ( vTF2 < 123 )\",text);\n    }", "signature": "void testLessThan()", "full_signature": "@Test public void testLessThan()", "class_method_signature": "SimpleSegmentPredicateTest.testLessThan()", "testcase": true, "constructor": false, "invocations": ["setOperator", "getPredicateRule", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "SimpleSegmentPredicate", "superclass": "", "interfaces": "implements PredicateRuleProducer", "fields": [{"original_string": "public static final String EQUAL = \"equal\";", "modifier": "public static final", "type": "String", "declarator": "EQUAL = \"equal\"", "var_name": "EQUAL"}, {"original_string": "public static final String NOT_EQUAL = \"notEqual\";", "modifier": "public static final", "type": "String", "declarator": "NOT_EQUAL = \"notEqual\"", "var_name": "NOT_EQUAL"}, {"original_string": "public static final String GREATER = \"greaterThan\";", "modifier": "public static final", "type": "String", "declarator": "GREATER = \"greaterThan\"", "var_name": "GREATER"}, {"original_string": "public static final String GREATER_EQUAL = \"greaterOrEqual\";", "modifier": "public static final", "type": "String", "declarator": "GREATER_EQUAL = \"greaterOrEqual\"", "var_name": "GREATER_EQUAL"}, {"original_string": "public static final String LESSER = \"lessThan\";", "modifier": "public static final", "type": "String", "declarator": "LESSER = \"lessThan\"", "var_name": "LESSER"}, {"original_string": "public static final String LESSER_EQUAL = \"lessOrEqual\";", "modifier": "public static final", "type": "String", "declarator": "LESSER_EQUAL = \"lessOrEqual\"", "var_name": "LESSER_EQUAL"}, {"original_string": "public static final String MISSING = \"isMissing\";", "modifier": "public static final", "type": "String", "declarator": "MISSING = \"isMissing\"", "var_name": "MISSING"}, {"original_string": "public static final String NOT_MISSING = \"isNotMissing\";", "modifier": "public static final", "type": "String", "declarator": "NOT_MISSING = \"isNotMissing\"", "var_name": "NOT_MISSING"}, {"original_string": "private String baseFieldName;", "modifier": "private", "type": "String", "declarator": "baseFieldName", "var_name": "baseFieldName"}, {"original_string": "private String operator;", "modifier": "private", "type": "String", "declarator": "operator", "var_name": "operator"}, {"original_string": "private String value;", "modifier": "private", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private boolean stringLiteralValue;", "modifier": "private", "type": "boolean", "declarator": "stringLiteralValue", "var_name": "stringLiteralValue"}, {"original_string": "private static PMML4Helper helper = new PMML4Helper();", "modifier": "private static", "type": "PMML4Helper", "declarator": "helper = new PMML4Helper()", "var_name": "helper"}], "methods": [{"identifier": "SimpleSegmentPredicate", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleSegmentPredicate()", "full_signature": "public  SimpleSegmentPredicate()", "class_method_signature": "SimpleSegmentPredicate.SimpleSegmentPredicate()", "testcase": false, "constructor": true}, {"identifier": "SimpleSegmentPredicate", "parameters": "(SimplePredicate predicate)", "modifiers": "public", "return": "", "signature": " SimpleSegmentPredicate(SimplePredicate predicate)", "full_signature": "public  SimpleSegmentPredicate(SimplePredicate predicate)", "class_method_signature": "SimpleSegmentPredicate.SimpleSegmentPredicate(SimplePredicate predicate)", "testcase": false, "constructor": true}, {"identifier": "getBaseFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseFieldName()", "full_signature": "public String getBaseFieldName()", "class_method_signature": "SimpleSegmentPredicate.getBaseFieldName()", "testcase": false, "constructor": false}, {"identifier": "getCapitalizedFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCapitalizedFieldName()", "full_signature": "public String getCapitalizedFieldName()", "class_method_signature": "SimpleSegmentPredicate.getCapitalizedFieldName()", "testcase": false, "constructor": false}, {"identifier": "getValueFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValueFieldName()", "full_signature": "public String getValueFieldName()", "class_method_signature": "SimpleSegmentPredicate.getValueFieldName()", "testcase": false, "constructor": false}, {"identifier": "getMissingFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMissingFieldName()", "full_signature": "public String getMissingFieldName()", "class_method_signature": "SimpleSegmentPredicate.getMissingFieldName()", "testcase": false, "constructor": false}, {"identifier": "getPredicateRule", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPredicateRule()", "full_signature": "@Override public String getPredicateRule()", "class_method_signature": "SimpleSegmentPredicate.getPredicateRule()", "testcase": false, "constructor": false}, {"identifier": "checkValueForStringLiteral", "parameters": "(String value)", "modifiers": "private", "return": "boolean", "signature": "boolean checkValueForStringLiteral(String value)", "full_signature": "private boolean checkValueForStringLiteral(String value)", "class_method_signature": "SimpleSegmentPredicate.checkValueForStringLiteral(String value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getValue()", "full_signature": "private String getValue()", "class_method_signature": "SimpleSegmentPredicate.getValue()", "testcase": false, "constructor": false}, {"identifier": "isStringLiteralValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStringLiteralValue()", "full_signature": "public boolean isStringLiteralValue()", "class_method_signature": "SimpleSegmentPredicate.isStringLiteralValue()", "testcase": false, "constructor": false}, {"identifier": "setStringLiteralValue", "parameters": "(boolean stringLiteralValue)", "modifiers": "public", "return": "void", "signature": "void setStringLiteralValue(boolean stringLiteralValue)", "full_signature": "public void setStringLiteralValue(boolean stringLiteralValue)", "class_method_signature": "SimpleSegmentPredicate.setStringLiteralValue(boolean stringLiteralValue)", "testcase": false, "constructor": false}, {"identifier": "getPredicateFieldNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPredicateFieldNames()", "full_signature": "@Override public List<String> getPredicateFieldNames()", "class_method_signature": "SimpleSegmentPredicate.getPredicateFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getFieldMissingFieldNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getFieldMissingFieldNames()", "full_signature": "@Override public List<String> getFieldMissingFieldNames()", "class_method_signature": "SimpleSegmentPredicate.getFieldMissingFieldNames()", "testcase": false, "constructor": false}, {"identifier": "isAlwaysTrue", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAlwaysTrue()", "full_signature": "@Override public boolean isAlwaysTrue()", "class_method_signature": "SimpleSegmentPredicate.isAlwaysTrue()", "testcase": false, "constructor": false}, {"identifier": "isAlwaysFalse", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAlwaysFalse()", "full_signature": "@Override public boolean isAlwaysFalse()", "class_method_signature": "SimpleSegmentPredicate.isAlwaysFalse()", "testcase": false, "constructor": false}], "file": "kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/SimpleSegmentPredicate.java"}, "focal_method": {"identifier": "getPredicateRule", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getPredicateRule() {\n\t\tStringBuilder bldr = new StringBuilder();\n\t\tbldr.append(\"( \").append(this.getMissingFieldName()).append(\" == false )\")\n\t\t    .append(\" && ( \").append(this.getValueFieldName());\n\t\tif (operator.equalsIgnoreCase(GREATER)) {\n\t\t\tbldr.append(\" > \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t} else if (operator.equalsIgnoreCase(LESSER)) {\n\t\t\tbldr.append(\" < \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t} else if (operator.equalsIgnoreCase(EQUAL)) {\n\t\t\tbldr.append(\" == \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t} else if (operator.equalsIgnoreCase(NOT_EQUAL)) {\n\t\t\tbldr.append(\" != \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t} else if (operator.equalsIgnoreCase(MISSING)) {\n\t\t\treturn this.getMissingFieldName()+\" == true\";\n\t\t} else if (operator.equalsIgnoreCase(NOT_MISSING)) {\n\t\t\treturn this.getMissingFieldName()+\" == false\";\n\t\t} else if (operator.equalsIgnoreCase(GREATER_EQUAL)) {\n\t\t\tbldr.append(\" >= \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t} else if (operator.equalsIgnoreCase(LESSER_EQUAL)) {\n\t\t\tbldr.append(\" <= \").append(getValue()).append(\" )\");\n\t\t\treturn bldr.toString();\n\t\t}\n\t\tthrow new IllegalStateException(\"PMML - SimplePredicate: Unknown operator (\"+operator+\")\");\n\t}", "signature": "String getPredicateRule()", "full_signature": "@Override public String getPredicateRule()", "class_method_signature": "SimpleSegmentPredicate.getPredicateRule()", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "getMissingFieldName", "getValueFieldName", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString", "equalsIgnoreCase", "getMissingFieldName", "equalsIgnoreCase", "getMissingFieldName", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString", "equalsIgnoreCase", "append", "append", "append", "getValue", "toString"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}