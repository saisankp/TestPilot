{"test_class": {"identifier": "DefaultShardStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardstrategy/DefaultShardStrategyTest.java"}, "test_case": {"identifier": "testFindShard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindShard() {\n        String shard = DefaultShardStrategy.getInstance().findShard(TestModel.TEST_PATH);\n        Assert.assertEquals(DefaultShardStrategy.DEFAULT_SHARD, shard);\n    }", "signature": "void testFindShard()", "full_signature": "@Test public void testFindShard()", "class_method_signature": "DefaultShardStrategyTest.testFindShard()", "testcase": true, "constructor": false, "invocations": ["findShard", "getInstance", "assertEquals"]}, "focal_class": {"identifier": "DefaultShardStrategy", "superclass": "", "interfaces": "implements ShardStrategy", "fields": [{"original_string": "public static final String NAME = \"default\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"default\"", "var_name": "NAME"}, {"original_string": "public static final String DEFAULT_SHARD = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SHARD = \"default\"", "var_name": "DEFAULT_SHARD"}, {"original_string": "private static final DefaultShardStrategy INSTANCE = new DefaultShardStrategy();", "modifier": "private static final", "type": "DefaultShardStrategy", "declarator": "INSTANCE = new DefaultShardStrategy()", "var_name": "INSTANCE"}], "methods": [{"identifier": "DefaultShardStrategy", "parameters": "()", "modifiers": "private", "return": "", "signature": " DefaultShardStrategy()", "full_signature": "private  DefaultShardStrategy()", "class_method_signature": "DefaultShardStrategy.DefaultShardStrategy()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "DefaultShardStrategy", "signature": "DefaultShardStrategy getInstance()", "full_signature": "public static DefaultShardStrategy getInstance()", "class_method_signature": "DefaultShardStrategy.getInstance()", "testcase": false, "constructor": false}, {"identifier": "findShard", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "String", "signature": "String findShard(YangInstanceIdentifier path)", "full_signature": "@Override public String findShard(YangInstanceIdentifier path)", "class_method_signature": "DefaultShardStrategy.findShard(YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "getPrefixForPath", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "YangInstanceIdentifier", "signature": "YangInstanceIdentifier getPrefixForPath(YangInstanceIdentifier path)", "full_signature": "@Override public YangInstanceIdentifier getPrefixForPath(YangInstanceIdentifier path)", "class_method_signature": "DefaultShardStrategy.getPrefixForPath(YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardstrategy/DefaultShardStrategy.java"}, "focal_method": {"identifier": "findShard", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String findShard(YangInstanceIdentifier path) {\n        return DEFAULT_SHARD;\n    }", "signature": "String findShard(YangInstanceIdentifier path)", "full_signature": "@Override public String findShard(YangInstanceIdentifier path)", "class_method_signature": "DefaultShardStrategy.findShard(YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}