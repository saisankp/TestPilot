{"test_class": {"identifier": "SimpleCycleBasisTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static SimpleGraph      g;", "modifier": "private static", "type": "SimpleGraph", "declarator": "g", "var_name": "g"}, {"original_string": "private static SimpleCycleBasis basis;", "modifier": "private static", "type": "SimpleCycleBasis", "declarator": "basis", "var_name": "basis"}], "file": "legacy/src/test/java/org/openscience/cdk/ringsearch/cyclebasis/SimpleCycleBasisTest.java"}, "test_case": {"identifier": "testSimpleCycleBasis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleCycleBasis() {\n        Assert.assertTrue(basis.cycles().size() == g.edgeSet().size() - g.vertexSet().size() + 1);\n    }", "signature": "void testSimpleCycleBasis()", "full_signature": "@Test public void testSimpleCycleBasis()", "class_method_signature": "SimpleCycleBasisTest.testSimpleCycleBasis()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "size", "cycles", "size", "edgeSet", "size", "vertexSet"]}, "focal_class": {"identifier": "SimpleCycleBasis", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List              edgeList;", "modifier": "private", "type": "List", "declarator": "edgeList", "var_name": "edgeList"}, {"original_string": "private List<SimpleCycle> cycles;", "modifier": "private", "type": "List<SimpleCycle>", "declarator": "cycles", "var_name": "cycles"}, {"original_string": "private UndirectedGraph   graph;", "modifier": "private", "type": "UndirectedGraph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private boolean           isMinimized = false;", "modifier": "private", "type": "boolean", "declarator": "isMinimized = false", "var_name": "isMinimized"}, {"original_string": "private HashMap           edgeIndexMap;", "modifier": "private", "type": "HashMap", "declarator": "edgeIndexMap", "var_name": "edgeIndexMap"}], "methods": [{"identifier": "SimpleCycleBasis", "parameters": "(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "modifiers": "public", "return": "", "signature": " SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "full_signature": "public  SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "class_method_signature": "SimpleCycleBasis.SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "testcase": false, "constructor": true}, {"identifier": "SimpleCycleBasis", "parameters": "(UndirectedGraph graph)", "modifiers": "public", "return": "", "signature": " SimpleCycleBasis(UndirectedGraph graph)", "full_signature": "public  SimpleCycleBasis(UndirectedGraph graph)", "class_method_signature": "SimpleCycleBasis.SimpleCycleBasis(UndirectedGraph graph)", "testcase": false, "constructor": true}, {"identifier": "createMinimumCycleBasis", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createMinimumCycleBasis()", "full_signature": "private void createMinimumCycleBasis()", "class_method_signature": "SimpleCycleBasis.createMinimumCycleBasis()", "testcase": false, "constructor": false}, {"identifier": "getCycleEdgeIncidenceMatrix", "parameters": "()", "modifiers": "", "return": "boolean[][]", "signature": "boolean[][] getCycleEdgeIncidenceMatrix()", "full_signature": " boolean[][] getCycleEdgeIncidenceMatrix()", "class_method_signature": "SimpleCycleBasis.getCycleEdgeIncidenceMatrix()", "testcase": false, "constructor": false}, {"identifier": "getCycleEdgeIncidenceMatrix", "parameters": "(Object[] cycleArray)", "modifiers": "", "return": "boolean[][]", "signature": "boolean[][] getCycleEdgeIncidenceMatrix(Object[] cycleArray)", "full_signature": " boolean[][] getCycleEdgeIncidenceMatrix(Object[] cycleArray)", "class_method_signature": "SimpleCycleBasis.getCycleEdgeIncidenceMatrix(Object[] cycleArray)", "testcase": false, "constructor": false}, {"identifier": "minimize", "parameters": "(int startIndex)", "modifiers": "private", "return": "void", "signature": "void minimize(int startIndex)", "full_signature": "private void minimize(int startIndex)", "class_method_signature": "SimpleCycleBasis.minimize(int startIndex)", "testcase": false, "constructor": false}, {"identifier": "constructKernelVector", "parameters": "(int size, boolean[][] a, int i)", "modifiers": "static", "return": "boolean[]", "signature": "boolean[] constructKernelVector(int size, boolean[][] a, int i)", "full_signature": "static boolean[] constructKernelVector(int size, boolean[][] a, int i)", "class_method_signature": "SimpleCycleBasis.constructKernelVector(int size, boolean[][] a, int i)", "testcase": false, "constructor": false}, {"identifier": "weightVector", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] weightVector()", "full_signature": "public int[] weightVector()", "class_method_signature": "SimpleCycleBasis.weightVector()", "testcase": false, "constructor": false}, {"identifier": "edges", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List edges()", "full_signature": "public List edges()", "class_method_signature": "SimpleCycleBasis.edges()", "testcase": false, "constructor": false}, {"identifier": "cycles", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List cycles()", "full_signature": "public List cycles()", "class_method_signature": "SimpleCycleBasis.cycles()", "testcase": false, "constructor": false}, {"identifier": "inverseBinaryMatrix", "parameters": "(boolean[][] m, int n)", "modifiers": "static", "return": "boolean[][]", "signature": "boolean[][] inverseBinaryMatrix(boolean[][] m, int n)", "full_signature": "static boolean[][] inverseBinaryMatrix(boolean[][] m, int n)", "class_method_signature": "SimpleCycleBasis.inverseBinaryMatrix(boolean[][] m, int n)", "testcase": false, "constructor": false}, {"identifier": "essentialCycles", "parameters": "()", "modifiers": "public", "return": "Collection", "signature": "Collection essentialCycles()", "full_signature": "public Collection essentialCycles()", "class_method_signature": "SimpleCycleBasis.essentialCycles()", "testcase": false, "constructor": false}, {"identifier": "relevantCycles", "parameters": "()", "modifiers": "public", "return": "Map", "signature": "Map relevantCycles()", "full_signature": "public Map relevantCycles()", "class_method_signature": "SimpleCycleBasis.relevantCycles()", "testcase": false, "constructor": false}, {"identifier": "equivalenceClasses", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List equivalenceClasses()", "full_signature": "public List equivalenceClasses()", "class_method_signature": "SimpleCycleBasis.equivalenceClasses()", "testcase": false, "constructor": false}, {"identifier": "createEdgeIndexMap", "parameters": "(List edgeList)", "modifiers": "private", "return": "HashMap", "signature": "HashMap createEdgeIndexMap(List edgeList)", "full_signature": "private HashMap createEdgeIndexMap(List edgeList)", "class_method_signature": "SimpleCycleBasis.createEdgeIndexMap(List edgeList)", "testcase": false, "constructor": false}, {"identifier": "getEdgeIndex", "parameters": "(Edge edge)", "modifiers": "private", "return": "int", "signature": "int getEdgeIndex(Edge edge)", "full_signature": "private int getEdgeIndex(Edge edge)", "class_method_signature": "SimpleCycleBasis.getEdgeIndex(Edge edge)", "testcase": false, "constructor": false}, {"identifier": "printIncidenceMatrix", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void printIncidenceMatrix()", "full_signature": "public void printIncidenceMatrix()", "class_method_signature": "SimpleCycleBasis.printIncidenceMatrix()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/ringsearch/cyclebasis/SimpleCycleBasis.java"}, "focal_method": {"identifier": "SimpleCycleBasis", "parameters": "(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "modifiers": "public", "return": "", "body": "public SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph) {\n        this.edgeList = edgeList;\n        this.cycles = cycles;\n        this.graph = graph;\n\n        edgeIndexMap = createEdgeIndexMap(edgeList);\n    }", "signature": " SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "full_signature": "public  SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "class_method_signature": "SimpleCycleBasis.SimpleCycleBasis(List<SimpleCycle> cycles, List edgeList, UndirectedGraph graph)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}