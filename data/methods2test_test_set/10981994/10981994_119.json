{"test_class": {"identifier": "BeanQueryMapEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private final QueryMapEncoder encoder = new BeanQueryMapEncoder();", "modifier": "private final", "type": "QueryMapEncoder", "declarator": "encoder = new BeanQueryMapEncoder()", "var_name": "encoder"}], "file": "core/src/test/java/feign/querymap/BeanQueryMapEncoderTest.java"}, "test_case": {"identifier": "testDefaultEncoder_normalClassWithOutValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDefaultEncoder_normalClassWithOutValues() {\n    NormalObject normalObject = new NormalObject(null, null);\n\n    Map<String, Object> encodedMap = encoder.encode(normalObject);\n\n    assertTrue(\"Non-empty map generated from null getter: \" + encodedMap, encodedMap.isEmpty());\n  }", "signature": "void testDefaultEncoder_normalClassWithOutValues()", "full_signature": "@Test public void testDefaultEncoder_normalClassWithOutValues()", "class_method_signature": "BeanQueryMapEncoderTest.testDefaultEncoder_normalClassWithOutValues()", "testcase": true, "constructor": false, "invocations": ["encode", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "BeanQueryMapEncoder", "superclass": "", "interfaces": "implements QueryMapEncoder", "fields": [{"original_string": "private final Map<Class<?>, ObjectParamMetadata> classToMetadata =\n      new HashMap<Class<?>, ObjectParamMetadata>();", "modifier": "private final", "type": "Map<Class<?>, ObjectParamMetadata>", "declarator": "classToMetadata =\n      new HashMap<Class<?>, ObjectParamMetadata>()", "var_name": "classToMetadata"}], "methods": [{"identifier": "encode", "parameters": "(Object object)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> encode(Object object)", "full_signature": "@Override public Map<String, Object> encode(Object object)", "class_method_signature": "BeanQueryMapEncoder.encode(Object object)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(Class<?> objectType)", "modifiers": "private", "return": "ObjectParamMetadata", "signature": "ObjectParamMetadata getMetadata(Class<?> objectType)", "full_signature": "private ObjectParamMetadata getMetadata(Class<?> objectType)", "class_method_signature": "BeanQueryMapEncoder.getMetadata(Class<?> objectType)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feign/querymap/BeanQueryMapEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(Object object)", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n  public Map<String, Object> encode(Object object) throws EncodeException {\n    try {\n      ObjectParamMetadata metadata = getMetadata(object.getClass());\n      Map<String, Object> propertyNameToValue = new HashMap<String, Object>();\n      for (PropertyDescriptor pd : metadata.objectProperties) {\n        Method method = pd.getReadMethod();\n        Object value = method.invoke(object);\n        if (value != null && value != object) {\n          Param alias = method.getAnnotation(Param.class);\n          String name = alias != null ? alias.value() : pd.getName();\n          propertyNameToValue.put(name, value);\n        }\n      }\n      return propertyNameToValue;\n    } catch (IllegalAccessException | IntrospectionException | InvocationTargetException e) {\n      throw new EncodeException(\"Failure encoding object into query map\", e);\n    }\n  }", "signature": "Map<String, Object> encode(Object object)", "full_signature": "@Override public Map<String, Object> encode(Object object)", "class_method_signature": "BeanQueryMapEncoder.encode(Object object)", "testcase": false, "constructor": false, "invocations": ["getMetadata", "getClass", "getReadMethod", "invoke", "getAnnotation", "value", "getName", "put"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}