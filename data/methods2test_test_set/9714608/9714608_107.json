{"test_class": {"identifier": "IntegerListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IntegerList list;", "modifier": "private", "type": "IntegerList", "declarator": "list", "var_name": "list"}], "file": "core/util/src/test/java/org/arakhne/afc/util/IntegerListTest.java"}, "test_case": {"identifier": "containsAllCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void containsAllCollection() {\n\t\tassertFalse(this.list.containsAll(Collections.singleton(0)));\n\t\tassertTrue(this.list.containsAll(Arrays.asList(1, 2, 3)));\n\t\tassertFalse(this.list.containsAll(Arrays.asList(4, 5, 6, 7, 8, 9)));\n\t\tassertFalse(this.list.containsAll(Arrays.asList(10, 11, 12, 13, 14, 15)));\n\t}", "signature": "void containsAllCollection()", "full_signature": "@Test public void containsAllCollection()", "class_method_signature": "IntegerListTest.containsAllCollection()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "containsAll", "singleton", "assertTrue", "containsAll", "asList", "assertFalse", "containsAll", "asList", "assertFalse", "containsAll", "asList"]}, "focal_class": {"identifier": "IntegerList", "superclass": "", "interfaces": "implements SortedSet<Integer>, List<Integer>", "fields": [{"original_string": "private int[] values;", "modifier": "private", "type": "int[]", "declarator": "values", "var_name": "values"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "IntegerList", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntegerList()", "full_signature": "public  IntegerList()", "class_method_signature": "IntegerList.IntegerList()", "testcase": false, "constructor": true}, {"identifier": "IntegerList", "parameters": "(int value)", "modifiers": "public", "return": "", "signature": " IntegerList(int value)", "full_signature": "public  IntegerList(int value)", "class_method_signature": "IntegerList.IntegerList(int value)", "testcase": false, "constructor": true}, {"identifier": "IntegerList", "parameters": "(int start, int end)", "modifiers": "public", "return": "", "signature": " IntegerList(int start, int end)", "full_signature": "public  IntegerList(int start, int end)", "class_method_signature": "IntegerList.IntegerList(int start, int end)", "testcase": false, "constructor": true}, {"identifier": "IntegerList", "parameters": "(Collection<? extends Integer> collection)", "modifiers": "public", "return": "", "signature": " IntegerList(Collection<? extends Integer> collection)", "full_signature": "public  IntegerList(Collection<? extends Integer> collection)", "class_method_signature": "IntegerList.IntegerList(Collection<? extends Integer> collection)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Pure @Override public", "return": "String", "signature": "String toString()", "full_signature": "@Pure @Override public String toString()", "class_method_signature": "IntegerList.toString()", "testcase": false, "constructor": false}, {"identifier": "comparator", "parameters": "()", "modifiers": "@Pure @Inline(value = \"null\", constantExpression = true) @Override public", "return": "Comparator<? super Integer>", "signature": "Comparator<? super Integer> comparator()", "full_signature": "@Pure @Inline(value = \"null\", constantExpression = true) @Override public Comparator<? super Integer> comparator()", "class_method_signature": "IntegerList.comparator()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Integer", "signature": "Integer first()", "full_signature": "@Pure @Override public Integer first()", "class_method_signature": "IntegerList.first()", "testcase": false, "constructor": false}, {"identifier": "headSet", "parameters": "(Integer toElement)", "modifiers": "@Pure @Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> headSet(Integer toElement)", "full_signature": "@Pure @Override public SortedSet<Integer> headSet(Integer toElement)", "class_method_signature": "IntegerList.headSet(Integer toElement)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Integer", "signature": "Integer last()", "full_signature": "@Pure @Override public Integer last()", "class_method_signature": "IntegerList.last()", "testcase": false, "constructor": false}, {"identifier": "subSet", "parameters": "(Integer fromElement, Integer toElement)", "modifiers": "@Pure @Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> subSet(Integer fromElement, Integer toElement)", "full_signature": "@Pure @Override public SortedSet<Integer> subSet(Integer fromElement, Integer toElement)", "class_method_signature": "IntegerList.subSet(Integer fromElement, Integer toElement)", "testcase": false, "constructor": false}, {"identifier": "tailSet", "parameters": "(Integer fromElement)", "modifiers": "@Pure @Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> tailSet(Integer fromElement)", "full_signature": "@Pure @Override public SortedSet<Integer> tailSet(Integer fromElement)", "class_method_signature": "IntegerList.tailSet(Integer fromElement)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, Integer element)", "modifiers": "@Override public final", "return": "void", "signature": "void add(int index, Integer element)", "full_signature": "@Override public final void add(int index, Integer element)", "class_method_signature": "IntegerList.add(int index, Integer element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Integer value)", "full_signature": "@Override public boolean add(Integer value)", "class_method_signature": "IntegerList.add(Integer value)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int index, Collection<? extends Integer> collection)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean addAll(int index, Collection<? extends Integer> collection)", "full_signature": "@Override public final boolean addAll(int index, Collection<? extends Integer> collection)", "class_method_signature": "IntegerList.addAll(int index, Collection<? extends Integer> collection)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends Integer> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends Integer> collection)", "full_signature": "@Override public boolean addAll(Collection<? extends Integer> collection)", "class_method_signature": "IntegerList.addAll(Collection<? extends Integer> collection)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "IntegerList.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean contains(Object obj)", "full_signature": "@Pure @Override public boolean contains(Object obj)", "class_method_signature": "IntegerList.contains(Object obj)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> collection)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> collection)", "full_signature": "@Pure @Override public boolean containsAll(Collection<?> collection)", "class_method_signature": "IntegerList.containsAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Pure @Override public boolean isEmpty()", "class_method_signature": "IntegerList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@Pure @Override public Iterator<Integer> iterator()", "class_method_signature": "IntegerList.iterator()", "testcase": false, "constructor": false}, {"identifier": "segmentIterator", "parameters": "()", "modifiers": "@Pure public", "return": "Iterator<IntegerSegment>", "signature": "Iterator<IntegerSegment> segmentIterator()", "full_signature": "@Pure public Iterator<IntegerSegment> segmentIterator()", "class_method_signature": "IntegerList.segmentIterator()", "testcase": false, "constructor": false}, {"identifier": "toSegmentIterable", "parameters": "()", "modifiers": "@Pure public", "return": "Iterable<IntegerSegment>", "signature": "Iterable<IntegerSegment> toSegmentIterable()", "full_signature": "@Pure public Iterable<IntegerSegment> toSegmentIterable()", "class_method_signature": "IntegerList.toSegmentIterable()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object obj)", "full_signature": "@Override public boolean remove(Object obj)", "class_method_signature": "IntegerList.remove(Object obj)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer remove(int index)", "full_signature": "@Override public Integer remove(int index)", "class_method_signature": "IntegerList.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "removeElementInSegment", "parameters": "(int segmentIndex, int element)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeElementInSegment(int segmentIndex, int element)", "full_signature": "protected boolean removeElementInSegment(int segmentIndex, int element)", "class_method_signature": "IntegerList.removeElementInSegment(int segmentIndex, int element)", "testcase": false, "constructor": false}, {"identifier": "removeSegment", "parameters": "(int segmentIndex)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeSegment(int segmentIndex)", "full_signature": "protected boolean removeSegment(int segmentIndex)", "class_method_signature": "IntegerList.removeSegment(int segmentIndex)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> collection)", "full_signature": "@Override public boolean removeAll(Collection<?> collection)", "class_method_signature": "IntegerList.removeAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> collection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> collection)", "full_signature": "@Override public boolean retainAll(Collection<?> collection)", "class_method_signature": "IntegerList.retainAll(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, Integer element)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer set(int index, Integer element)", "full_signature": "@Override public Integer set(int index, Integer element)", "class_method_signature": "IntegerList.set(int index, Integer element)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(SortedSet<? extends Number> collection)", "modifiers": "public", "return": "void", "signature": "void set(SortedSet<? extends Number> collection)", "full_signature": "public void set(SortedSet<? extends Number> collection)", "class_method_signature": "IntegerList.set(SortedSet<? extends Number> collection)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int size()", "full_signature": "@Pure @Override public int size()", "class_method_signature": "IntegerList.size()", "testcase": false, "constructor": false}, {"identifier": "getSegmentCount", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getSegmentCount()", "full_signature": "protected int getSegmentCount()", "class_method_signature": "IntegerList.getSegmentCount()", "testcase": false, "constructor": false}, {"identifier": "getLastValueOnSegment", "parameters": "(int idxSegment)", "modifiers": "protected", "return": "int", "signature": "int getLastValueOnSegment(int idxSegment)", "full_signature": "protected int getLastValueOnSegment(int idxSegment)", "class_method_signature": "IntegerList.getLastValueOnSegment(int idxSegment)", "testcase": false, "constructor": false}, {"identifier": "getFirstValueOnSegment", "parameters": "(int idxSegment)", "modifiers": "protected", "return": "int", "signature": "int getFirstValueOnSegment(int idxSegment)", "full_signature": "protected int getFirstValueOnSegment(int idxSegment)", "class_method_signature": "IntegerList.getFirstValueOnSegment(int idxSegment)", "testcase": false, "constructor": false}, {"identifier": "getSegmentIndexFor", "parameters": "(int value)", "modifiers": "protected", "return": "int", "signature": "int getSegmentIndexFor(int value)", "full_signature": "protected int getSegmentIndexFor(int value)", "class_method_signature": "IntegerList.getSegmentIndexFor(int value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override @Pure public", "return": "Integer", "signature": "Integer get(int index)", "full_signature": "@Override @Pure public Integer get(int index)", "class_method_signature": "IntegerList.get(int index)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int offset, int[] tofill)", "modifiers": "protected", "return": "boolean", "signature": "boolean get(int offset, int[] tofill)", "full_signature": "protected boolean get(int offset, int[] tofill)", "class_method_signature": "IntegerList.get(int offset, int[] tofill)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override @Pure public Object[] toArray()", "class_method_signature": "IntegerList.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] array)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T[]", "signature": "T[] toArray(T[] array)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T[] toArray(T[] array)", "class_method_signature": "IntegerList.toArray(T[] array)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "()", "modifiers": "@Pure public", "return": "int[]", "signature": "int[] toIntArray()", "full_signature": "@Pure public int[] toIntArray()", "class_method_signature": "IntegerList.toIntArray()", "testcase": false, "constructor": false}, {"identifier": "toSortedSet", "parameters": "()", "modifiers": "@Pure public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> toSortedSet()", "full_signature": "@Pure public SortedSet<Integer> toSortedSet()", "class_method_signature": "IntegerList.toSortedSet()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int indexOf(Object obj)", "full_signature": "@Pure @Override public int indexOf(Object obj)", "class_method_signature": "IntegerList.indexOf(Object obj)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int lastIndexOf(Object obj)", "full_signature": "@Pure @Override public int lastIndexOf(Object obj)", "class_method_signature": "IntegerList.lastIndexOf(Object obj)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ListIterator<Integer>", "signature": "ListIterator<Integer> listIterator()", "full_signature": "@Pure @Override public ListIterator<Integer> listIterator()", "class_method_signature": "IntegerList.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int index)", "modifiers": "@Pure @Override public", "return": "ListIterator<Integer>", "signature": "ListIterator<Integer> listIterator(int index)", "full_signature": "@Pure @Override public ListIterator<Integer> listIterator(int index)", "class_method_signature": "IntegerList.listIterator(int index)", "testcase": false, "constructor": false}, {"identifier": "subList", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@Pure @Override public", "return": "List<Integer>", "signature": "List<Integer> subList(int fromIndex, int toIndex)", "full_signature": "@Pure @Override public List<Integer> subList(int fromIndex, int toIndex)", "class_method_signature": "IntegerList.subList(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "spliterator", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Spliterator<Integer>", "signature": "Spliterator<Integer> spliterator()", "full_signature": "@Pure @Override public Spliterator<Integer> spliterator()", "class_method_signature": "IntegerList.spliterator()", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/org/arakhne/afc/util/IntegerList.java"}, "focal_method": {"identifier": "containsAll", "parameters": "(Collection<?> collection)", "modifiers": "@Pure @Override public", "return": "boolean", "body": "@Pure\n\t@Override\n\tpublic boolean containsAll(Collection<?> collection) {\n\t\tif (this.values == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfinal SortedSet<Integer> elements = new TreeSet<>();\n\t\tfor (final Object o : collection) {\n\t\t\tif (o instanceof Number) {\n\t\t\t\telements.add(((Number) o).intValue());\n\t\t\t}\n\t\t}\n\n\t\tint idxStart = 0;\n\n\t\tfor (final Integer e : elements) {\n\t\t\tfor (; idxStart < this.values.length - 1; idxStart += 2) {\n\t\t\t\tif (e < this.values[idxStart]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ((e >= this.values[idxStart]) && (e <= this.values[idxStart + 1])) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}", "signature": "boolean containsAll(Collection<?> collection)", "full_signature": "@Pure @Override public boolean containsAll(Collection<?> collection)", "class_method_signature": "IntegerList.containsAll(Collection<?> collection)", "testcase": false, "constructor": false, "invocations": ["add", "intValue"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}