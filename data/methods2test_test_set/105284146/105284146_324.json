{"test_class": {"identifier": "CalculatedTimeSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exceptions = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptions = ExpectedException.none()", "var_name": "exceptions"}, {"original_string": "private CalculatedTimeSeries timeSeries;", "modifier": "private", "type": "CalculatedTimeSeries", "declarator": "timeSeries", "var_name": "timeSeries"}], "file": "time-series/time-series-api/src/test/java/com/powsybl/timeseries/CalculatedTimeSeriesTest.java"}, "test_case": {"identifier": "errorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void errorTest() {\n        exceptions.expect(TimeSeriesException.class);\n        exceptions.expectMessage(\"Impossible to fill buffer because calculated time series has not been synchronized on a finite time index\");\n        timeSeries.toArray();\n    }", "signature": "void errorTest()", "full_signature": "@Test public void errorTest()", "class_method_signature": "CalculatedTimeSeriesTest.errorTest()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "toArray"]}, "focal_class": {"identifier": "CalculatedTimeSeries", "superclass": "", "interfaces": "implements DoubleTimeSeries", "fields": [{"original_string": "public static final TimeSeriesNameResolver EMPTY_RESOLVER = new TimeSeriesNameResolver() {\n\n        @Override\n        public List<TimeSeriesMetadata> getTimeSeriesMetadata(Set<String> timeSeriesNames) {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public Set<Integer> getTimeSeriesDataVersions(String timeSeriesName) {\n            return Collections.emptySet();\n        }\n\n        @Override\n        public List<DoubleTimeSeries> getDoubleTimeSeries(Set<String> timeSeriesNames) {\n            return Collections.emptyList();\n        }\n    };", "modifier": "public static final", "type": "TimeSeriesNameResolver", "declarator": "EMPTY_RESOLVER = new TimeSeriesNameResolver() {\n\n        @Override\n        public List<TimeSeriesMetadata> getTimeSeriesMetadata(Set<String> timeSeriesNames) {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public Set<Integer> getTimeSeriesDataVersions(String timeSeriesName) {\n            return Collections.emptySet();\n        }\n\n        @Override\n        public List<DoubleTimeSeries> getDoubleTimeSeries(Set<String> timeSeriesNames) {\n            return Collections.emptyList();\n        }\n    }", "var_name": "EMPTY_RESOLVER"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final NodeCalc nodeCalc;", "modifier": "private final", "type": "NodeCalc", "declarator": "nodeCalc", "var_name": "nodeCalc"}, {"original_string": "private TimeSeriesNameResolver resolver;", "modifier": "private", "type": "TimeSeriesNameResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final TimeSeriesMetadata metadata;", "modifier": "private final", "type": "TimeSeriesMetadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private TimeSeriesIndex index;", "modifier": "private", "type": "TimeSeriesIndex", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "CalculatedTimeSeries", "parameters": "(String name, NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "modifiers": "public", "return": "", "signature": " CalculatedTimeSeries(String name, NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "full_signature": "public  CalculatedTimeSeries(String name, NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "class_method_signature": "CalculatedTimeSeries.CalculatedTimeSeries(String name, NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "testcase": false, "constructor": true}, {"identifier": "CalculatedTimeSeries", "parameters": "(String name, NodeCalc nodeCalc)", "modifiers": "public", "return": "", "signature": " CalculatedTimeSeries(String name, NodeCalc nodeCalc)", "full_signature": "public  CalculatedTimeSeries(String name, NodeCalc nodeCalc)", "class_method_signature": "CalculatedTimeSeries.CalculatedTimeSeries(String name, NodeCalc nodeCalc)", "testcase": false, "constructor": true}, {"identifier": "setTimeSeriesNameResolver", "parameters": "(TimeSeriesNameResolver resolver)", "modifiers": "@Override public", "return": "void", "signature": "void setTimeSeriesNameResolver(TimeSeriesNameResolver resolver)", "full_signature": "@Override public void setTimeSeriesNameResolver(TimeSeriesNameResolver resolver)", "class_method_signature": "CalculatedTimeSeries.setTimeSeriesNameResolver(TimeSeriesNameResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "loadData", "parameters": "()", "modifiers": "private", "return": "List<DoubleTimeSeries>", "signature": "List<DoubleTimeSeries> loadData()", "full_signature": "private List<DoubleTimeSeries> loadData()", "class_method_signature": "CalculatedTimeSeries.loadData()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(List<DoubleTimeSeries> timeSeriesList)", "modifiers": "private", "return": "NodeCalc", "signature": "NodeCalc resolve(List<DoubleTimeSeries> timeSeriesList)", "full_signature": "private NodeCalc resolve(List<DoubleTimeSeries> timeSeriesList)", "class_method_signature": "CalculatedTimeSeries.resolve(List<DoubleTimeSeries> timeSeriesList)", "testcase": false, "constructor": false}, {"identifier": "computeIndex", "parameters": "(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "modifiers": "public static", "return": "TimeSeriesIndex", "signature": "TimeSeriesIndex computeIndex(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "full_signature": "public static TimeSeriesIndex computeIndex(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "class_method_signature": "CalculatedTimeSeries.computeIndex(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "computeVersions", "parameters": "(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "modifiers": "public static", "return": "Set<Integer>", "signature": "Set<Integer> computeVersions(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "full_signature": "public static Set<Integer> computeVersions(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "class_method_signature": "CalculatedTimeSeries.computeVersions(NodeCalc nodeCalc, TimeSeriesNameResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getVersions", "parameters": "()", "modifiers": "public", "return": "Set<Integer>", "signature": "Set<Integer> getVersions()", "full_signature": "public Set<Integer> getVersions()", "class_method_signature": "CalculatedTimeSeries.getVersions()", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "(TimeSeriesIndex newIndex)", "modifiers": "@Override public", "return": "void", "signature": "void synchronize(TimeSeriesIndex newIndex)", "full_signature": "@Override public void synchronize(TimeSeriesIndex newIndex)", "class_method_signature": "CalculatedTimeSeries.synchronize(TimeSeriesIndex newIndex)", "testcase": false, "constructor": false}, {"identifier": "forEachMaterializedValueIndex", "parameters": "(DoubleIntConsumer consumer)", "modifiers": "private", "return": "void", "signature": "void forEachMaterializedValueIndex(DoubleIntConsumer consumer)", "full_signature": "private void forEachMaterializedValueIndex(DoubleIntConsumer consumer)", "class_method_signature": "CalculatedTimeSeries.forEachMaterializedValueIndex(DoubleIntConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(DoubleBuffer buffer, int timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "class_method_signature": "CalculatedTimeSeries.fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(BigDoubleBuffer buffer, long timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "class_method_signature": "CalculatedTimeSeries.fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "CalculatedTimeSeries.toArray()", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "TimeSeriesMetadata", "signature": "TimeSeriesMetadata getMetadata()", "full_signature": "@Override public TimeSeriesMetadata getMetadata()", "class_method_signature": "CalculatedTimeSeries.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "public", "return": "TimeSeriesIndex", "signature": "TimeSeriesIndex getIndex()", "full_signature": "public TimeSeriesIndex getIndex()", "class_method_signature": "CalculatedTimeSeries.getIndex()", "testcase": false, "constructor": false}, {"identifier": "evaluateMultiPoint", "parameters": "(NodeCalc resolvedNodeCalc, DoubleMultiPoint multiPoint)", "modifiers": "private static", "return": "DoublePoint", "signature": "DoublePoint evaluateMultiPoint(NodeCalc resolvedNodeCalc, DoubleMultiPoint multiPoint)", "full_signature": "private static DoublePoint evaluateMultiPoint(NodeCalc resolvedNodeCalc, DoubleMultiPoint multiPoint)", "class_method_signature": "CalculatedTimeSeries.evaluateMultiPoint(NodeCalc resolvedNodeCalc, DoubleMultiPoint multiPoint)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(NodeCalc resolvedNodeCalc)", "modifiers": "private static", "return": "DoublePoint", "signature": "DoublePoint evaluate(NodeCalc resolvedNodeCalc)", "full_signature": "private static DoublePoint evaluate(NodeCalc resolvedNodeCalc)", "class_method_signature": "CalculatedTimeSeries.evaluate(NodeCalc resolvedNodeCalc)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<DoublePoint>", "signature": "Stream<DoublePoint> stream()", "full_signature": "@Override public Stream<DoublePoint> stream()", "class_method_signature": "CalculatedTimeSeries.stream()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<DoublePoint>", "signature": "Iterator<DoublePoint> iterator()", "full_signature": "@Override public Iterator<DoublePoint> iterator()", "class_method_signature": "CalculatedTimeSeries.iterator()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(int newChunkSize)", "modifiers": "@Override public", "return": "List<DoubleTimeSeries>", "signature": "List<DoubleTimeSeries> split(int newChunkSize)", "full_signature": "@Override public List<DoubleTimeSeries> split(int newChunkSize)", "class_method_signature": "CalculatedTimeSeries.split(int newChunkSize)", "testcase": false, "constructor": false}, {"identifier": "writeJson", "parameters": "(JsonGenerator generator)", "modifiers": "@Override public", "return": "void", "signature": "void writeJson(JsonGenerator generator)", "full_signature": "@Override public void writeJson(JsonGenerator generator)", "class_method_signature": "CalculatedTimeSeries.writeJson(JsonGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toJson()", "full_signature": "@Override public String toJson()", "class_method_signature": "CalculatedTimeSeries.toJson()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CalculatedTimeSeries.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "CalculatedTimeSeries.equals(Object obj)", "testcase": false, "constructor": false}], "file": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/CalculatedTimeSeries.java"}, "focal_method": {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] toArray() {\n        DoubleBuffer buffer = DoubleBuffer.allocate(metadata.getIndex().getPointCount());\n        fillBuffer(buffer, 0);\n        return buffer.array();\n    }", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "CalculatedTimeSeries.toArray()", "testcase": false, "constructor": false, "invocations": ["allocate", "getPointCount", "getIndex", "fillBuffer", "array"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}