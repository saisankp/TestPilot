{"test_class": {"identifier": "SamboxOutlineLevelsHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/SamboxOutlineLevelsHandlerTest.java"}, "test_case": {"identifier": "newLinesInBookmarks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newLinesInBookmarks() throws IOException {\n        try (PDDocument document = fromResource(\"pdf/new_line_in_bookmarks.pdf\")) {\n            org.sejda.model.outline.OutlineLevelsHandler victim = new SamboxOutlineLevelsHandler(document, null);\n            assertEquals(3, victim.getPageDestinationsForLevel(1).getPages().size());\n        }\n    }", "signature": "void newLinesInBookmarks()", "full_signature": "@Test public void newLinesInBookmarks()", "class_method_signature": "SamboxOutlineLevelsHandlerTest.newLinesInBookmarks()", "testcase": true, "constructor": false, "invocations": ["fromResource", "assertEquals", "size", "getPages", "getPageDestinationsForLevel"]}, "focal_class": {"identifier": "SamboxOutlineLevelsHandler", "superclass": "", "interfaces": "implements org.sejda.model.outline.OutlineLevelsHandler", "fields": [{"original_string": "private Pattern titleMatchingPattern = Pattern.compile(\".+\", Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "titleMatchingPattern = Pattern.compile(\".+\", Pattern.DOTALL)", "var_name": "titleMatchingPattern"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}], "methods": [{"identifier": "SamboxOutlineLevelsHandler", "parameters": "(PDDocument document, String matchingTitleRegEx)", "modifiers": "public", "return": "", "signature": " SamboxOutlineLevelsHandler(PDDocument document, String matchingTitleRegEx)", "full_signature": "public  SamboxOutlineLevelsHandler(PDDocument document, String matchingTitleRegEx)", "class_method_signature": "SamboxOutlineLevelsHandler.SamboxOutlineLevelsHandler(PDDocument document, String matchingTitleRegEx)", "testcase": false, "constructor": true}, {"identifier": "getPageDestinationsForLevel", "parameters": "(int level)", "modifiers": "@Override public", "return": "OutlinePageDestinations", "signature": "OutlinePageDestinations getPageDestinationsForLevel(int level)", "full_signature": "@Override public OutlinePageDestinations getPageDestinationsForLevel(int level)", "class_method_signature": "SamboxOutlineLevelsHandler.getPageDestinationsForLevel(int level)", "testcase": false, "constructor": false}, {"identifier": "getExtractPageDestinations", "parameters": "(int level, boolean includePageAfter)", "modifiers": "@Override public", "return": "OutlineExtractPageDestinations", "signature": "OutlineExtractPageDestinations getExtractPageDestinations(int level, boolean includePageAfter)", "full_signature": "@Override public OutlineExtractPageDestinations getExtractPageDestinations(int level, boolean includePageAfter)", "class_method_signature": "SamboxOutlineLevelsHandler.getExtractPageDestinations(int level, boolean includePageAfter)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/SamboxOutlineLevelsHandler.java"}, "focal_method": {"identifier": "getPageDestinationsForLevel", "parameters": "(int level)", "modifiers": "@Override public", "return": "OutlinePageDestinations", "body": "@Override\n    public OutlinePageDestinations getPageDestinationsForLevel(int level) {\n        OutlinePageDestinations destinations = new OutlinePageDestinations();\n        OutlineUtils.getFlatOutline(document).stream().filter(i -> i.level == level).filter(i -> isNotBlank(i.title))\n                .filter(i -> titleMatchingPattern.matcher(i.title).matches())\n                .forEach(i -> destinations.addPage(i.page, i.title));\n        return destinations;\n    }", "signature": "OutlinePageDestinations getPageDestinationsForLevel(int level)", "full_signature": "@Override public OutlinePageDestinations getPageDestinationsForLevel(int level)", "class_method_signature": "SamboxOutlineLevelsHandler.getPageDestinationsForLevel(int level)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "filter", "filter", "stream", "getFlatOutline", "isNotBlank", "matches", "matcher", "addPage"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}