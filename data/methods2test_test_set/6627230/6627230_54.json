{"test_class": {"identifier": "ValuesTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/ValuesTokenResolverTest.java"}, "test_case": {"identifier": "testInsert1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testInsert1() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.INSERT, \"<values/>\");\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, null);\n\n      user.setUserName(\"test\");\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"?,NOW(),NOW(),password(?)\", ctx.getSqlStatement());\n      Assert.assertEquals(\"[${user-name}, ${password}]\", ctx.getParameters().toString());\n   }", "signature": "void testInsert1()", "full_signature": "@Test public void testInsert1()", "class_method_signature": "ValuesTokenResolverTest.testInsert1()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "setUserName", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "toString", "getParameters"]}, "focal_class": {"identifier": "ValuesTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private ExpressionResolver m_expressionResolver;", "modifier": "@Inject\n   private", "type": "ExpressionResolver", "declarator": "m_expressionResolver", "var_name": "m_expressionResolver"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ValuesTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/ValuesTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.VALUES) {\n         throw new DalRuntimeException(\"Internal error: only VALUES token is supported by \" + getClass());\n      }\n\n      EntityInfo entityInfo = ctx.getEntityInfo();\n      StringBuilder sb = new StringBuilder(1024);\n\n      switch (ctx.getQuery().getType()) {\n      case SELECT:\n         throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n      case INSERT:\n         DataObject proto = ctx.getProto();\n         \n         for (DataField field : entityInfo.getAttributeFields()) {\n            Attribute attribute = entityInfo.getAttribute(field);\n\n            if (attribute != null) {\n               if (attribute.field().length() > 0 && !(attribute.autoIncrement() && !proto.isFieldUsed(field))) {\n                  if (sb.length() > 0) {\n                     sb.append(',');\n                  }\n\n                  if (!proto.isFieldUsed(field) && attribute.insertExpr().length() > 0) {\n                     sb.append(m_expressionResolver.resolve(ctx, attribute.insertExpr()));\n                  } else {\n                     sb.append('?');\n                     ctx.addParameter(new Parameter(field));\n                  }\n               }\n            } else {\n               throw new DalRuntimeException(\"Internal error: No Attribute annotation defined for field: \" + field);\n            }\n         }\n\n         break;\n      case UPDATE:\n         throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n      case DELETE:\n         throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n      default:\n         throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n      }\n\n      return sb.toString();\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ValuesTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getEntityInfo", "getType", "getQuery", "getType", "getQuery", "getProto", "getAttributeFields", "getAttribute", "length", "field", "autoIncrement", "isFieldUsed", "length", "append", "isFieldUsed", "length", "insertExpr", "append", "resolve", "insertExpr", "append", "addParameter", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery", "toString"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}