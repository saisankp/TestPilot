{"test_class": {"identifier": "PdfContentStreamProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DebugRenderListener _renderListener;", "modifier": "private", "type": "DebugRenderListener", "declarator": "_renderListener", "var_name": "_renderListener"}], "file": "itext/src/test/java/com/itextpdf/text/pdf/parser/PdfContentStreamProcessorTest.java"}, "test_case": {"identifier": "testInlineImageWithUnsupportedDecodeFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInlineImageWithUnsupportedDecodeFilter() throws IOException {\n        PdfReader reader= TestResourceUtils.getResourceAsPdfReader(this, \"inlineImages01.pdf\");\n        PdfReaderContentParser parser = new PdfReaderContentParser(reader);\n        Integer page =  reader.getNumberOfPages();\n        LocationTextExtractionStrategy strategy = parser.processContent(page, new LocationTextExtractionStrategy());\n    }", "signature": "void testInlineImageWithUnsupportedDecodeFilter()", "full_signature": "@Test public void testInlineImageWithUnsupportedDecodeFilter()", "class_method_signature": "PdfContentStreamProcessorTest.testInlineImageWithUnsupportedDecodeFilter()", "testcase": true, "constructor": false, "invocations": ["getResourceAsPdfReader", "getNumberOfPages", "processContent"]}, "focal_class": {"identifier": "PdfContentStreamProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULTOPERATOR = \"DefaultOperator\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULTOPERATOR = \"DefaultOperator\"", "var_name": "DEFAULTOPERATOR"}, {"original_string": "final private Map<String, ContentOperator> operators;", "modifier": "final private", "type": "Map<String, ContentOperator>", "declarator": "operators", "var_name": "operators"}, {"original_string": "private ResourceDictionary resources;", "modifier": "private", "type": "ResourceDictionary", "declarator": "resources", "var_name": "resources"}, {"original_string": "private final Stack<GraphicsState> gsStack = new Stack<GraphicsState>();", "modifier": "private final", "type": "Stack<GraphicsState>", "declarator": "gsStack = new Stack<GraphicsState>()", "var_name": "gsStack"}, {"original_string": "private Matrix textMatrix;", "modifier": "private", "type": "Matrix", "declarator": "textMatrix", "var_name": "textMatrix"}, {"original_string": "private Matrix textLineMatrix;", "modifier": "private", "type": "Matrix", "declarator": "textLineMatrix", "var_name": "textLineMatrix"}, {"original_string": "final private RenderListener renderListener;", "modifier": "final private", "type": "RenderListener", "declarator": "renderListener", "var_name": "renderListener"}, {"original_string": "final private Map<PdfName, XObjectDoHandler> xobjectDoHandlers;", "modifier": "final private", "type": "Map<PdfName, XObjectDoHandler>", "declarator": "xobjectDoHandlers", "var_name": "xobjectDoHandlers"}, {"original_string": "final private Map<Integer,WeakReference<CMapAwareDocumentFont>> cachedFonts = new HashMap<Integer, WeakReference<CMapAwareDocumentFont>>();", "modifier": "final private", "type": "Map<Integer,WeakReference<CMapAwareDocumentFont>>", "declarator": "cachedFonts = new HashMap<Integer, WeakReference<CMapAwareDocumentFont>>()", "var_name": "cachedFonts"}, {"original_string": "private final Stack<MarkedContentInfo> markedContentStack = new Stack<MarkedContentInfo>();", "modifier": "private final", "type": "Stack<MarkedContentInfo>", "declarator": "markedContentStack = new Stack<MarkedContentInfo>()", "var_name": "markedContentStack"}], "methods": [{"identifier": "PdfContentStreamProcessor", "parameters": "(RenderListener renderListener)", "modifiers": "public", "return": "", "signature": " PdfContentStreamProcessor(RenderListener renderListener)", "full_signature": "public  PdfContentStreamProcessor(RenderListener renderListener)", "class_method_signature": "PdfContentStreamProcessor.PdfContentStreamProcessor(RenderListener renderListener)", "testcase": false, "constructor": true}, {"identifier": "populateXObjectDoHandlers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateXObjectDoHandlers()", "full_signature": "private void populateXObjectDoHandlers()", "class_method_signature": "PdfContentStreamProcessor.populateXObjectDoHandlers()", "testcase": false, "constructor": false}, {"identifier": "registerXObjectDoHandler", "parameters": "(PdfName xobjectSubType, XObjectDoHandler handler)", "modifiers": "public", "return": "XObjectDoHandler", "signature": "XObjectDoHandler registerXObjectDoHandler(PdfName xobjectSubType, XObjectDoHandler handler)", "full_signature": "public XObjectDoHandler registerXObjectDoHandler(PdfName xobjectSubType, XObjectDoHandler handler)", "class_method_signature": "PdfContentStreamProcessor.registerXObjectDoHandler(PdfName xobjectSubType, XObjectDoHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getFont", "parameters": "(PRIndirectReference ind)", "modifiers": "private", "return": "CMapAwareDocumentFont", "signature": "CMapAwareDocumentFont getFont(PRIndirectReference ind)", "full_signature": "private CMapAwareDocumentFont getFont(PRIndirectReference ind)", "class_method_signature": "PdfContentStreamProcessor.getFont(PRIndirectReference ind)", "testcase": false, "constructor": false}, {"identifier": "getFont", "parameters": "(PdfDictionary fontResource)", "modifiers": "private", "return": "CMapAwareDocumentFont", "signature": "CMapAwareDocumentFont getFont(PdfDictionary fontResource)", "full_signature": "private CMapAwareDocumentFont getFont(PdfDictionary fontResource)", "class_method_signature": "PdfContentStreamProcessor.getFont(PdfDictionary fontResource)", "testcase": false, "constructor": false}, {"identifier": "populateOperators", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateOperators()", "full_signature": "private void populateOperators()", "class_method_signature": "PdfContentStreamProcessor.populateOperators()", "testcase": false, "constructor": false}, {"identifier": "registerContentOperator", "parameters": "(String operatorString, ContentOperator operator)", "modifiers": "public", "return": "ContentOperator", "signature": "ContentOperator registerContentOperator(String operatorString, ContentOperator operator)", "full_signature": "public ContentOperator registerContentOperator(String operatorString, ContentOperator operator)", "class_method_signature": "PdfContentStreamProcessor.registerContentOperator(String operatorString, ContentOperator operator)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredOperatorStrings", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getRegisteredOperatorStrings()", "full_signature": "public Collection<String> getRegisteredOperatorStrings()", "class_method_signature": "PdfContentStreamProcessor.getRegisteredOperatorStrings()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "PdfContentStreamProcessor.reset()", "testcase": false, "constructor": false}, {"identifier": "gs", "parameters": "()", "modifiers": "public", "return": "GraphicsState", "signature": "GraphicsState gs()", "full_signature": "public GraphicsState gs()", "class_method_signature": "PdfContentStreamProcessor.gs()", "testcase": false, "constructor": false}, {"identifier": "invokeOperator", "parameters": "(PdfLiteral operator, ArrayList<PdfObject> operands)", "modifiers": "private", "return": "void", "signature": "void invokeOperator(PdfLiteral operator, ArrayList<PdfObject> operands)", "full_signature": "private void invokeOperator(PdfLiteral operator, ArrayList<PdfObject> operands)", "class_method_signature": "PdfContentStreamProcessor.invokeOperator(PdfLiteral operator, ArrayList<PdfObject> operands)", "testcase": false, "constructor": false}, {"identifier": "beginMarkedContent", "parameters": "(PdfName tag, PdfDictionary dict)", "modifiers": "private", "return": "void", "signature": "void beginMarkedContent(PdfName tag, PdfDictionary dict)", "full_signature": "private void beginMarkedContent(PdfName tag, PdfDictionary dict)", "class_method_signature": "PdfContentStreamProcessor.beginMarkedContent(PdfName tag, PdfDictionary dict)", "testcase": false, "constructor": false}, {"identifier": "endMarkedContent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endMarkedContent()", "full_signature": "private void endMarkedContent()", "class_method_signature": "PdfContentStreamProcessor.endMarkedContent()", "testcase": false, "constructor": false}, {"identifier": "beginText", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void beginText()", "full_signature": "private void beginText()", "class_method_signature": "PdfContentStreamProcessor.beginText()", "testcase": false, "constructor": false}, {"identifier": "endText", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endText()", "full_signature": "private void endText()", "class_method_signature": "PdfContentStreamProcessor.endText()", "testcase": false, "constructor": false}, {"identifier": "displayPdfString", "parameters": "(PdfString string)", "modifiers": "private", "return": "void", "signature": "void displayPdfString(PdfString string)", "full_signature": "private void displayPdfString(PdfString string)", "class_method_signature": "PdfContentStreamProcessor.displayPdfString(PdfString string)", "testcase": false, "constructor": false}, {"identifier": "displayXObject", "parameters": "(PdfName xobjectName)", "modifiers": "private", "return": "void", "signature": "void displayXObject(PdfName xobjectName)", "full_signature": "private void displayXObject(PdfName xobjectName)", "class_method_signature": "PdfContentStreamProcessor.displayXObject(PdfName xobjectName)", "testcase": false, "constructor": false}, {"identifier": "paintPath", "parameters": "(int operation, int rule, boolean close)", "modifiers": "private", "return": "void", "signature": "void paintPath(int operation, int rule, boolean close)", "full_signature": "private void paintPath(int operation, int rule, boolean close)", "class_method_signature": "PdfContentStreamProcessor.paintPath(int operation, int rule, boolean close)", "testcase": false, "constructor": false}, {"identifier": "modifyPath", "parameters": "(int operation, List<Float> segmentData)", "modifiers": "private", "return": "void", "signature": "void modifyPath(int operation, List<Float> segmentData)", "full_signature": "private void modifyPath(int operation, List<Float> segmentData)", "class_method_signature": "PdfContentStreamProcessor.modifyPath(int operation, List<Float> segmentData)", "testcase": false, "constructor": false}, {"identifier": "clipPath", "parameters": "(int rule)", "modifiers": "private", "return": "void", "signature": "void clipPath(int rule)", "full_signature": "private void clipPath(int rule)", "class_method_signature": "PdfContentStreamProcessor.clipPath(int rule)", "testcase": false, "constructor": false}, {"identifier": "applyTextAdjust", "parameters": "(float tj)", "modifiers": "private", "return": "void", "signature": "void applyTextAdjust(float tj)", "full_signature": "private void applyTextAdjust(float tj)", "class_method_signature": "PdfContentStreamProcessor.applyTextAdjust(float tj)", "testcase": false, "constructor": false}, {"identifier": "processContent", "parameters": "(byte[] contentBytes, PdfDictionary resources)", "modifiers": "public", "return": "void", "signature": "void processContent(byte[] contentBytes, PdfDictionary resources)", "full_signature": "public void processContent(byte[] contentBytes, PdfDictionary resources)", "class_method_signature": "PdfContentStreamProcessor.processContent(byte[] contentBytes, PdfDictionary resources)", "testcase": false, "constructor": false}, {"identifier": "handleInlineImage", "parameters": "(InlineImageInfo info, PdfDictionary colorSpaceDic)", "modifiers": "protected", "return": "void", "signature": "void handleInlineImage(InlineImageInfo info, PdfDictionary colorSpaceDic)", "full_signature": "protected void handleInlineImage(InlineImageInfo info, PdfDictionary colorSpaceDic)", "class_method_signature": "PdfContentStreamProcessor.handleInlineImage(InlineImageInfo info, PdfDictionary colorSpaceDic)", "testcase": false, "constructor": false}, {"identifier": "getRenderListener", "parameters": "()", "modifiers": "public", "return": "RenderListener", "signature": "RenderListener getRenderListener()", "full_signature": "public RenderListener getRenderListener()", "class_method_signature": "PdfContentStreamProcessor.getRenderListener()", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "(PdfName colorSpace, List<PdfObject> operands)", "modifiers": "private static", "return": "BaseColor", "signature": "BaseColor getColor(PdfName colorSpace, List<PdfObject> operands)", "full_signature": "private static BaseColor getColor(PdfName colorSpace, List<PdfObject> operands)", "class_method_signature": "PdfContentStreamProcessor.getColor(PdfName colorSpace, List<PdfObject> operands)", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "(int nOperands, List<PdfObject> operands)", "modifiers": "private static", "return": "BaseColor", "signature": "BaseColor getColor(int nOperands, List<PdfObject> operands)", "full_signature": "private static BaseColor getColor(int nOperands, List<PdfObject> operands)", "class_method_signature": "PdfContentStreamProcessor.getColor(int nOperands, List<PdfObject> operands)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/parser/PdfContentStreamProcessor.java"}, "focal_method": {"identifier": "processContent", "parameters": "(byte[] contentBytes, PdfDictionary resources)", "modifiers": "public", "return": "void", "body": "public void processContent(byte[] contentBytes, PdfDictionary resources){\n        this.resources.push(resources);\n        try {\n            PRTokeniser tokeniser = new PRTokeniser(new RandomAccessFileOrArray(new RandomAccessSourceFactory().createSource(contentBytes)));\n            PdfContentParser ps = new PdfContentParser(tokeniser);\n            ArrayList<PdfObject> operands = new ArrayList<PdfObject>();\n            while (ps.parse(operands).size() > 0){\n                PdfLiteral operator = (PdfLiteral)operands.get(operands.size()-1);\n                if (\"BI\".equals(operator.toString())){\n                    // we don't call invokeOperator for embedded images - this is one area of the PDF spec that is particularly nasty and inconsistent\n                    PdfDictionary colorSpaceDic = resources != null ? resources.getAsDict(PdfName.COLORSPACE) : null;\n                    handleInlineImage(InlineImageUtils.parseInlineImage(ps, colorSpaceDic), colorSpaceDic);\n                } else {\n                    invokeOperator(operator, operands);\n                }\n            }\n\n        }\n        catch (Exception e) {\n            throw new ExceptionConverter(e);\n        }\n        this.resources.pop();\n\n    }", "signature": "void processContent(byte[] contentBytes, PdfDictionary resources)", "full_signature": "public void processContent(byte[] contentBytes, PdfDictionary resources)", "class_method_signature": "PdfContentStreamProcessor.processContent(byte[] contentBytes, PdfDictionary resources)", "testcase": false, "constructor": false, "invocations": ["push", "createSource", "size", "parse", "get", "size", "equals", "toString", "getAsDict", "handleInlineImage", "parseInlineImage", "invokeOperator", "pop"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}