{"test_class": {"identifier": "TrustAnchorLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String RIPE_NCC_PUBLIC_KEY = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0URYSGqUz2myBsOzeW1j\" +\n            \"Q6NsxNvlLMyhWknvnl8NiBCs/T/S2XuNKQNZ+wBZxIgPPV2pFBFeQAvoH/WK83Hw\" +\n            \"A26V2siwm/MY2nKZ+Olw+wlpzlZ1p3Ipj2eNcKrmit8BwBC8xImzuCGaV0jkRB0G\" +\n            \"Z0hoH6Ml03umLprRsn6v0xOP0+l6Qc1ZHMFVFb385IQ7FQQTcVIxrdeMsoyJq9eM\" +\n            \"kE6DoclHhF/NlSllXubASQ9KUWqJ0+Ot3QCXr4LXECMfkpkVR2TZT+v5v658bHVs\" +\n            \"6ZxRD1b6Uk1uQKAyHUbn/tXvP8lrjAibGzVsXDT2L0x4Edx+QdixPgOji3gBMyL2\" +\n            \"VwIDAQAB\";", "modifier": "public static final", "type": "String", "declarator": "RIPE_NCC_PUBLIC_KEY = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0URYSGqUz2myBsOzeW1j\" +\n            \"Q6NsxNvlLMyhWknvnl8NiBCs/T/S2XuNKQNZ+wBZxIgPPV2pFBFeQAvoH/WK83Hw\" +\n            \"A26V2siwm/MY2nKZ+Olw+wlpzlZ1p3Ipj2eNcKrmit8BwBC8xImzuCGaV0jkRB0G\" +\n            \"Z0hoH6Ml03umLprRsn6v0xOP0+l6Qc1ZHMFVFb385IQ7FQQTcVIxrdeMsoyJq9eM\" +\n            \"kE6DoclHhF/NlSllXubASQ9KUWqJ0+Ot3QCXr4LXECMfkpkVR2TZT+v5v658bHVs\" +\n            \"6ZxRD1b6Uk1uQKAyHUbn/tXvP8lrjAibGzVsXDT2L0x4Edx+QdixPgOji3gBMyL2\" +\n            \"VwIDAQAB\"", "var_name": "RIPE_NCC_PUBLIC_KEY"}, {"original_string": "public static final String AFRINIC_PUBLIC_KEY = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxsAqAhWIO+ON2Ef9oRDM\" +\n            \"pKxv+AfmSLIdLWJtjrvUyDxJPBjgR+kVrOHUeTaujygFUp49tuN5H2C1rUuQavTH\" +\n            \"vve6xNF5fU3OkTcqEzMOZy+ctkbde2SRMVdvbO22+TH9gNhKDc9l7Vu01qU4LeJH\" +\n            \"k3X0f5uu5346YrGAOSv6AaYBXVgXxa0s9ZvgqFpim50pReQe/WI3QwFKNgpPzfQL\" +\n            \"6Y7fDPYdYaVOXPXSKtx7P4s4KLA/ZWmRL/bobw/i2fFviAGhDrjqqqum+/9w1hEl\" +\n            \"L/vqihVnV18saKTnLvkItA/Bf5i11Yhw2K7qv573YWxyuqCknO/iYLTR1DToBZcZ\" +\n            \"UQIDAQAB\";", "modifier": "public static final", "type": "String", "declarator": "AFRINIC_PUBLIC_KEY = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxsAqAhWIO+ON2Ef9oRDM\" +\n            \"pKxv+AfmSLIdLWJtjrvUyDxJPBjgR+kVrOHUeTaujygFUp49tuN5H2C1rUuQavTH\" +\n            \"vve6xNF5fU3OkTcqEzMOZy+ctkbde2SRMVdvbO22+TH9gNhKDc9l7Vu01qU4LeJH\" +\n            \"k3X0f5uu5346YrGAOSv6AaYBXVgXxa0s9ZvgqFpim50pReQe/WI3QwFKNgpPzfQL\" +\n            \"6Y7fDPYdYaVOXPXSKtx7P4s4KLA/ZWmRL/bobw/i2fFviAGhDrjqqqum+/9w1hEl\" +\n            \"L/vqihVnV18saKTnLvkItA/Bf5i11Yhw2K7qv573YWxyuqCknO/iYLTR1DToBZcZ\" +\n            \"UQIDAQAB\"", "var_name": "AFRINIC_PUBLIC_KEY"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/util/TrustAnchorLocatorTest.java"}, "test_case": {"identifier": "readStandardTrustAnchor_with_http_location_rejected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readStandardTrustAnchor_with_http_location_rejected() throws Exception {\n        File talFile = new ClassPathResource(\"tals/rfc8630/example-tal-with-http-and-rsync.tal\").getFile();\n\n        assertThrows(TrustAnchorExtractorException.class, () -> TrustAnchorLocator.fromFile(talFile));\n    }", "signature": "void readStandardTrustAnchor_with_http_location_rejected()", "full_signature": "@Test public void readStandardTrustAnchor_with_http_location_rejected()", "class_method_signature": "TrustAnchorLocatorTest.readStandardTrustAnchor_with_http_location_rejected()", "testcase": true, "constructor": false, "invocations": ["getFile", "assertThrows", "fromFile"]}, "focal_class": {"identifier": "TrustAnchorLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String caName;", "modifier": "private final", "type": "String", "declarator": "caName", "var_name": "caName"}, {"original_string": "private final List<URI> certificateLocations;", "modifier": "private final", "type": "List<URI>", "declarator": "certificateLocations", "var_name": "certificateLocations"}, {"original_string": "private final String publicKeyInfo;", "modifier": "private final", "type": "String", "declarator": "publicKeyInfo", "var_name": "publicKeyInfo"}, {"original_string": "private final List<URI> prefetchUris;", "modifier": "private final", "type": "List<URI>", "declarator": "prefetchUris", "var_name": "prefetchUris"}, {"original_string": "private URI fetchedCertificateUri;", "modifier": "private", "type": "URI", "declarator": "fetchedCertificateUri", "var_name": "fetchedCertificateUri"}], "methods": [{"identifier": "fromMultipartFile", "parameters": "(MultipartFile file)", "modifiers": "public static", "return": "TrustAnchorLocator", "signature": "TrustAnchorLocator fromMultipartFile(MultipartFile file)", "full_signature": "public static TrustAnchorLocator fromMultipartFile(MultipartFile file)", "class_method_signature": "TrustAnchorLocator.fromMultipartFile(MultipartFile file)", "testcase": false, "constructor": false}, {"identifier": "fromFile", "parameters": "(File file)", "modifiers": "public static", "return": "TrustAnchorLocator", "signature": "TrustAnchorLocator fromFile(File file)", "full_signature": "public static TrustAnchorLocator fromFile(File file)", "class_method_signature": "TrustAnchorLocator.fromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "readStandardTrustAnchorLocator", "parameters": "(String fileName, String contents)", "modifiers": "private static", "return": "TrustAnchorLocator", "signature": "TrustAnchorLocator readStandardTrustAnchorLocator(String fileName, String contents)", "full_signature": "private static TrustAnchorLocator readStandardTrustAnchorLocator(String fileName, String contents)", "class_method_signature": "TrustAnchorLocator.readStandardTrustAnchorLocator(String fileName, String contents)", "testcase": false, "constructor": false}, {"identifier": "looksLikeUri", "parameters": "(String string)", "modifiers": "private static", "return": "boolean", "signature": "boolean looksLikeUri(String string)", "full_signature": "private static boolean looksLikeUri(String string)", "class_method_signature": "TrustAnchorLocator.looksLikeUri(String string)", "testcase": false, "constructor": false}, {"identifier": "createCertificateUri", "parameters": "(String rawUri)", "modifiers": "private static", "return": "URI", "signature": "URI createCertificateUri(String rawUri)", "full_signature": "private static URI createCertificateUri(String rawUri)", "class_method_signature": "TrustAnchorLocator.createCertificateUri(String rawUri)", "testcase": false, "constructor": false}, {"identifier": "readExtendedTrustAnchorLocator", "parameters": "(String contents)", "modifiers": "private static", "return": "TrustAnchorLocator", "signature": "TrustAnchorLocator readExtendedTrustAnchorLocator(String contents)", "full_signature": "private static TrustAnchorLocator readExtendedTrustAnchorLocator(String contents)", "class_method_signature": "TrustAnchorLocator.readExtendedTrustAnchorLocator(String contents)", "testcase": false, "constructor": false}, {"identifier": "TrustAnchorLocator", "parameters": "(String caName, List<URI> location, String publicKeyInfo, List<URI> prefetchUris)", "modifiers": "public", "return": "", "signature": " TrustAnchorLocator(String caName, List<URI> location, String publicKeyInfo, List<URI> prefetchUris)", "full_signature": "public  TrustAnchorLocator(String caName, List<URI> location, String publicKeyInfo, List<URI> prefetchUris)", "class_method_signature": "TrustAnchorLocator.TrustAnchorLocator(String caName, List<URI> location, String publicKeyInfo, List<URI> prefetchUris)", "testcase": false, "constructor": true}, {"identifier": "getCaName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCaName()", "full_signature": "public String getCaName()", "class_method_signature": "TrustAnchorLocator.getCaName()", "testcase": false, "constructor": false}, {"identifier": "getCertificateLocations", "parameters": "()", "modifiers": "public", "return": "List<URI>", "signature": "List<URI> getCertificateLocations()", "full_signature": "public List<URI> getCertificateLocations()", "class_method_signature": "TrustAnchorLocator.getCertificateLocations()", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyInfo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPublicKeyInfo()", "full_signature": "public String getPublicKeyInfo()", "class_method_signature": "TrustAnchorLocator.getPublicKeyInfo()", "testcase": false, "constructor": false}, {"identifier": "getPrefetchUris", "parameters": "()", "modifiers": "public", "return": "List<URI>", "signature": "List<URI> getPrefetchUris()", "full_signature": "public List<URI> getPrefetchUris()", "class_method_signature": "TrustAnchorLocator.getPrefetchUris()", "testcase": false, "constructor": false}, {"identifier": "getFetchedCertificateUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getFetchedCertificateUri()", "full_signature": "public URI getFetchedCertificateUri()", "class_method_signature": "TrustAnchorLocator.getFetchedCertificateUri()", "testcase": false, "constructor": false}, {"identifier": "setFetchedCertificateUri", "parameters": "(URI fetchedCertificateUri)", "modifiers": "public", "return": "void", "signature": "void setFetchedCertificateUri(URI fetchedCertificateUri)", "full_signature": "public void setFetchedCertificateUri(URI fetchedCertificateUri)", "class_method_signature": "TrustAnchorLocator.setFetchedCertificateUri(URI fetchedCertificateUri)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/util/TrustAnchorLocator.java"}, "focal_method": {"identifier": "fromFile", "parameters": "(File file)", "modifiers": "public static", "return": "TrustAnchorLocator", "body": "public static TrustAnchorLocator fromFile(File file) throws TrustAnchorExtractorException {\n        try {\n            String contents = Files.toString(file, Charsets.UTF_8);\n            String trimmed = contents.trim();\n            if (looksLikeUri(trimmed)) {\n                return readStandardTrustAnchorLocator(file.getName(), trimmed);\n            } else {\n                return readExtendedTrustAnchorLocator(trimmed);\n            }\n        } catch (IllegalArgumentException | URISyntaxException | IOException e) {\n            throw new TrustAnchorExtractorException(\"failed to load trust anchor locator \" + file + \": \" + e.getMessage(), e);\n        }\n    }", "signature": "TrustAnchorLocator fromFile(File file)", "full_signature": "public static TrustAnchorLocator fromFile(File file)", "class_method_signature": "TrustAnchorLocator.fromFile(File file)", "testcase": false, "constructor": false, "invocations": ["toString", "trim", "looksLikeUri", "readStandardTrustAnchorLocator", "getName", "readExtendedTrustAnchorLocator", "getMessage"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}