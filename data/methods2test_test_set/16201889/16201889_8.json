{"test_class": {"identifier": "RankUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "name-parser-api/src/test/java/org/gbif/nameparser/util/RankUtilsTest.java"}, "test_case": {"identifier": "testInferRank2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInferRank2() {\n    for (Rank r : Rank.values()) {\n      if (r.getMarker() != null) {\n        assertEquals(r.getMarker(), r, RankUtils.inferRank(r.getMarker()));\n      }\n    }\n  }", "signature": "void testInferRank2()", "full_signature": "@Test public void testInferRank2()", "class_method_signature": "RankUtilsTest.testInferRank2()", "testcase": true, "constructor": false, "invocations": ["values", "getMarker", "assertEquals", "getMarker", "inferRank", "getMarker"]}, "focal_class": {"identifier": "RankUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern NORMALIZE_RANK_MARKER = Pattern.compile(\"(?:[._ -]+|\\\\bnotho)\");", "modifier": "private static final", "type": "Pattern", "declarator": "NORMALIZE_RANK_MARKER = Pattern.compile(\"(?:[._ -]+|\\\\bnotho)\")", "var_name": "NORMALIZE_RANK_MARKER"}, {"original_string": "public static final List<Rank> INFRASUBSPECIFIC_MICROBIAL_RANKS;", "modifier": "public static final", "type": "List<Rank>", "declarator": "INFRASUBSPECIFIC_MICROBIAL_RANKS", "var_name": "INFRASUBSPECIFIC_MICROBIAL_RANKS"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP_FAMILY_GROUP = buildRankMarkerMap(\n      Arrays.stream(Rank.values())\n          .filter(Rank::isFamilyGroup)\n  );", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP_FAMILY_GROUP = buildRankMarkerMap(\n      Arrays.stream(Rank.values())\n          .filter(Rank::isFamilyGroup)\n  )", "var_name": "RANK_MARKER_MAP_FAMILY_GROUP"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP_SUPRAGENERIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(Rank::isSuprageneric),\n      Maps.immutableEntry(\"ib\", SUPRAGENERIC_NAME),\n      Maps.immutableEntry(\"supersubtrib\", SUPRAGENERIC_NAME),\n      Maps.immutableEntry(\"trib\", TRIBE)\n  );", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP_SUPRAGENERIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(Rank::isSuprageneric),\n      Maps.immutableEntry(\"ib\", SUPRAGENERIC_NAME),\n      Maps.immutableEntry(\"supersubtrib\", SUPRAGENERIC_NAME),\n      Maps.immutableEntry(\"trib\", TRIBE)\n  )", "var_name": "RANK_MARKER_MAP_SUPRAGENERIC"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP_INFRAGENERIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(r -> r.isGenusGroup() && r != GENUS),\n      \n      Maps.immutableEntry(\"suprasect\", SUPERSECTION),\n      Maps.immutableEntry(\"supraser\", SUPERSERIES),\n      Maps.immutableEntry(\"sect\", SECTION),\n      Maps.immutableEntry(\"section\", SECTION),\n      Maps.immutableEntry(\"ser\", SERIES),\n      Maps.immutableEntry(\"series\", SERIES),\n      Maps.immutableEntry(\"subg\", SUBGENUS),\n      Maps.immutableEntry(\"subgen\", SUBGENUS),\n      Maps.immutableEntry(\"subgenus\", SUBGENUS),\n      Maps.immutableEntry(\"subsect\", SUBSECTION),\n      Maps.immutableEntry(\"subsection\", SUBSECTION),\n      Maps.immutableEntry(\"subser\", SUBSERIES),\n      Maps.immutableEntry(\"subseries\", SUBSERIES)\n  );", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP_INFRAGENERIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(r -> r.isGenusGroup() && r != GENUS),\n      \n      Maps.immutableEntry(\"suprasect\", SUPERSECTION),\n      Maps.immutableEntry(\"supraser\", SUPERSERIES),\n      Maps.immutableEntry(\"sect\", SECTION),\n      Maps.immutableEntry(\"section\", SECTION),\n      Maps.immutableEntry(\"ser\", SERIES),\n      Maps.immutableEntry(\"series\", SERIES),\n      Maps.immutableEntry(\"subg\", SUBGENUS),\n      Maps.immutableEntry(\"subgen\", SUBGENUS),\n      Maps.immutableEntry(\"subgenus\", SUBGENUS),\n      Maps.immutableEntry(\"subsect\", SUBSECTION),\n      Maps.immutableEntry(\"subsection\", SUBSECTION),\n      Maps.immutableEntry(\"subser\", SUBSERIES),\n      Maps.immutableEntry(\"subseries\", SUBSERIES)\n  )", "var_name": "RANK_MARKER_MAP_INFRAGENERIC"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP_SPECIFIC = ImmutableMap.<String, Rank>builder()\n      .put(\"sl\", SPECIES_AGGREGATE) // sensu lat\n      .put(\"agg\", SPECIES_AGGREGATE)\n      .put(\"aggr\", SPECIES_AGGREGATE)\n      .put(\"group\", SPECIES_AGGREGATE)\n      .put(\"sp\", SPECIES)\n      .put(\"spec\", SPECIES)\n      .put(\"species\", SPECIES)\n      .put(\"spp\", SPECIES)\n      .build();", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP_SPECIFIC = ImmutableMap.<String, Rank>builder()\n      .put(\"sl\", SPECIES_AGGREGATE) // sensu lat\n      .put(\"agg\", SPECIES_AGGREGATE)\n      .put(\"aggr\", SPECIES_AGGREGATE)\n      .put(\"group\", SPECIES_AGGREGATE)\n      .put(\"sp\", SPECIES)\n      .put(\"spec\", SPECIES)\n      .put(\"species\", SPECIES)\n      .put(\"spp\", SPECIES)\n      .build()", "var_name": "RANK_MARKER_MAP_SPECIFIC"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP_INFRASPECIFIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(Rank::isInfraspecific),\n      \n      Maps.immutableEntry(\"aberration\", ABERRATION),\n      Maps.immutableEntry(\"bv\", BIOVAR),\n      Maps.immutableEntry(\"conv\", CONVARIETY),\n      Maps.immutableEntry(\"ct\", CHEMOFORM),\n      Maps.immutableEntry(\"cv\", CULTIVAR),\n      Maps.immutableEntry(\"f\", FORM),\n      Maps.immutableEntry(\"fo\", FORM),\n      Maps.immutableEntry(\"form\", FORM),\n      Maps.immutableEntry(\"forma\", FORM),\n      Maps.immutableEntry(\"fsp\", FORMA_SPECIALIS),\n      Maps.immutableEntry(\"fspec\", FORMA_SPECIALIS),\n      Maps.immutableEntry(\"gx\", GREX),\n      Maps.immutableEntry(\"hort\", CULTIVAR),\n      Maps.immutableEntry(\"m\", MORPH),\n      Maps.immutableEntry(\"morpha\", MORPH),\n      Maps.immutableEntry(\"nat\", NATIO),\n      Maps.immutableEntry(\"proles\", PROLES),\n      Maps.immutableEntry(\"pv\", PATHOVAR),\n      Maps.immutableEntry(\"sf\", SUBFORM),\n      Maps.immutableEntry(\"ssp\", SUBSPECIES),\n      Maps.immutableEntry(\"st\", STRAIN),\n      Maps.immutableEntry(\"subf\", SUBFORM),\n      Maps.immutableEntry(\"subform\", SUBFORM),\n      Maps.immutableEntry(\"subsp\", SUBSPECIES),\n      Maps.immutableEntry(\"subv\", SUBVARIETY),\n      Maps.immutableEntry(\"subvar\", SUBVARIETY),\n      Maps.immutableEntry(\"sv\", SUBVARIETY),\n      Maps.immutableEntry(\"v\", VARIETY),\n      Maps.immutableEntry(\"var\", VARIETY),\n      Maps.immutableEntry(\"\\\\*+\", INFRASPECIFIC_NAME)\n  );", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP_INFRASPECIFIC = buildRankMarkerMap(\n      Arrays.stream(Rank.values()).filter(Rank::isInfraspecific),\n      \n      Maps.immutableEntry(\"aberration\", ABERRATION),\n      Maps.immutableEntry(\"bv\", BIOVAR),\n      Maps.immutableEntry(\"conv\", CONVARIETY),\n      Maps.immutableEntry(\"ct\", CHEMOFORM),\n      Maps.immutableEntry(\"cv\", CULTIVAR),\n      Maps.immutableEntry(\"f\", FORM),\n      Maps.immutableEntry(\"fo\", FORM),\n      Maps.immutableEntry(\"form\", FORM),\n      Maps.immutableEntry(\"forma\", FORM),\n      Maps.immutableEntry(\"fsp\", FORMA_SPECIALIS),\n      Maps.immutableEntry(\"fspec\", FORMA_SPECIALIS),\n      Maps.immutableEntry(\"gx\", GREX),\n      Maps.immutableEntry(\"hort\", CULTIVAR),\n      Maps.immutableEntry(\"m\", MORPH),\n      Maps.immutableEntry(\"morpha\", MORPH),\n      Maps.immutableEntry(\"nat\", NATIO),\n      Maps.immutableEntry(\"proles\", PROLES),\n      Maps.immutableEntry(\"pv\", PATHOVAR),\n      Maps.immutableEntry(\"sf\", SUBFORM),\n      Maps.immutableEntry(\"ssp\", SUBSPECIES),\n      Maps.immutableEntry(\"st\", STRAIN),\n      Maps.immutableEntry(\"subf\", SUBFORM),\n      Maps.immutableEntry(\"subform\", SUBFORM),\n      Maps.immutableEntry(\"subsp\", SUBSPECIES),\n      Maps.immutableEntry(\"subv\", SUBVARIETY),\n      Maps.immutableEntry(\"subvar\", SUBVARIETY),\n      Maps.immutableEntry(\"sv\", SUBVARIETY),\n      Maps.immutableEntry(\"v\", VARIETY),\n      Maps.immutableEntry(\"var\", VARIETY),\n      Maps.immutableEntry(\"\\\\*+\", INFRASPECIFIC_NAME)\n  )", "var_name": "RANK_MARKER_MAP_INFRASPECIFIC"}, {"original_string": "public static final Map<String, Rank> RANK_MARKER_MAP = ImmutableMap.copyOf(\n      new FluentHashMap<String, Rank>()\n          .with(buildRankMarkerMap(Arrays.stream(Rank.values()), Maps.immutableEntry(\"subser\", SUBSERIES)))\n          .with(RANK_MARKER_MAP_SUPRAGENERIC)\n          .with(RANK_MARKER_MAP_INFRAGENERIC)\n          .with(RANK_MARKER_MAP_SPECIFIC)\n          .with(RANK_MARKER_MAP_INFRASPECIFIC)\n  );", "modifier": "public static final", "type": "Map<String, Rank>", "declarator": "RANK_MARKER_MAP = ImmutableMap.copyOf(\n      new FluentHashMap<String, Rank>()\n          .with(buildRankMarkerMap(Arrays.stream(Rank.values()), Maps.immutableEntry(\"subser\", SUBSERIES)))\n          .with(RANK_MARKER_MAP_SUPRAGENERIC)\n          .with(RANK_MARKER_MAP_INFRAGENERIC)\n          .with(RANK_MARKER_MAP_SPECIFIC)\n          .with(RANK_MARKER_MAP_INFRASPECIFIC)\n  )", "var_name": "RANK_MARKER_MAP"}, {"original_string": "public static final Map<NomCode, Map<String, Rank>> SUFFICES_RANK_MAP =\n      // ImmutableMap keeps insertion order\n      ImmutableMap.of(\n          NomCode.BACTERIAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"oideae\", SUBFAMILY)\n              .put(\"aceae\", FAMILY)\n              .put(\"ineae\", SUBORDER)\n              .put(\"ales\", ORDER)\n              .put(\"idae\", SUBCLASS)\n              .put(\"inae\", SUBTRIBE)\n              .put(\"eae\", TRIBE)\n              .put(\"ia\", CLASS)\n              .build(),\n          NomCode.BOTANICAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"mycetidae\", SUBCLASS)\n              .put(\"phycidae\", SUBCLASS)\n              .put(\"mycotina\", SUBPHYLUM)\n              .put(\"phytina\", SUBPHYLUM)\n              .put(\"mycetes\", CLASS)\n              .put(\"phyceae\", CLASS)\n              .put(\"mycota\", PHYLUM)\n              .put(\"opsida\", CLASS)\n              .put(\"oideae\", SUBFAMILY)\n              .put(\"phyta\", PHYLUM)\n              .put(\"ineae\", SUBORDER)\n              .put(\"aceae\", FAMILY)\n              .put(\"idae\", SUBCLASS)\n              .put(\"anae\", SUPERORDER)\n              .put(\"acea\", SUPERFAMILY)\n              .put(\"aria\", INFRAORDER)\n              .put(\"ales\", ORDER)\n              .put(\"inae\", SUBTRIBE)\n              .put(\"eae\", TRIBE)\n              .build(),\n          NomCode.ZOOLOGICAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"oidea\", SUPERFAMILY)\n              .put(\"oidae\", EPIFAMILY)\n              .put(\"idae\", FAMILY)\n              .put(\"inae\", SUBFAMILY)\n              .put(\"ini\", TRIBE)\n              .put(\"ina\", SUBTRIBE)\n              .build(),\n          NomCode.VIRUS, new ImmutableMap.Builder<String, Rank>()\n              .put(\"viria\", REALM)\n              .put(\"vira\", SUBREALM)\n              .put(\"viriae\", KINGDOM)\n              .put(\"virites\", SUBKINGDOM)\n              .put(\"viricota\", PHYLUM)\n              .put(\"viricotina\", SUBPHYLUM)\n              .put(\"viricetes\", CLASS)\n              .put(\"viricetidae\", SUBCLASS)\n              .put(\"virales\", ORDER)\n              .put(\"virineae\", SUBORDER)\n              .put(\"viridae\", FAMILY)\n              .put(\"virinae\", SUBFAMILY)\n              .build()\n      );", "modifier": "public static final", "type": "Map<NomCode, Map<String, Rank>>", "declarator": "SUFFICES_RANK_MAP =\n      // ImmutableMap keeps insertion order\n      ImmutableMap.of(\n          NomCode.BACTERIAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"oideae\", SUBFAMILY)\n              .put(\"aceae\", FAMILY)\n              .put(\"ineae\", SUBORDER)\n              .put(\"ales\", ORDER)\n              .put(\"idae\", SUBCLASS)\n              .put(\"inae\", SUBTRIBE)\n              .put(\"eae\", TRIBE)\n              .put(\"ia\", CLASS)\n              .build(),\n          NomCode.BOTANICAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"mycetidae\", SUBCLASS)\n              .put(\"phycidae\", SUBCLASS)\n              .put(\"mycotina\", SUBPHYLUM)\n              .put(\"phytina\", SUBPHYLUM)\n              .put(\"mycetes\", CLASS)\n              .put(\"phyceae\", CLASS)\n              .put(\"mycota\", PHYLUM)\n              .put(\"opsida\", CLASS)\n              .put(\"oideae\", SUBFAMILY)\n              .put(\"phyta\", PHYLUM)\n              .put(\"ineae\", SUBORDER)\n              .put(\"aceae\", FAMILY)\n              .put(\"idae\", SUBCLASS)\n              .put(\"anae\", SUPERORDER)\n              .put(\"acea\", SUPERFAMILY)\n              .put(\"aria\", INFRAORDER)\n              .put(\"ales\", ORDER)\n              .put(\"inae\", SUBTRIBE)\n              .put(\"eae\", TRIBE)\n              .build(),\n          NomCode.ZOOLOGICAL, new ImmutableMap.Builder<String, Rank>()\n              .put(\"oidea\", SUPERFAMILY)\n              .put(\"oidae\", EPIFAMILY)\n              .put(\"idae\", FAMILY)\n              .put(\"inae\", SUBFAMILY)\n              .put(\"ini\", TRIBE)\n              .put(\"ina\", SUBTRIBE)\n              .build(),\n          NomCode.VIRUS, new ImmutableMap.Builder<String, Rank>()\n              .put(\"viria\", REALM)\n              .put(\"vira\", SUBREALM)\n              .put(\"viriae\", KINGDOM)\n              .put(\"virites\", SUBKINGDOM)\n              .put(\"viricota\", PHYLUM)\n              .put(\"viricotina\", SUBPHYLUM)\n              .put(\"viricetes\", CLASS)\n              .put(\"viricetidae\", SUBCLASS)\n              .put(\"virales\", ORDER)\n              .put(\"virineae\", SUBORDER)\n              .put(\"viridae\", FAMILY)\n              .put(\"virinae\", SUBFAMILY)\n              .build()\n      )", "var_name": "SUFFICES_RANK_MAP"}, {"original_string": "private static final Map<String, Rank> GLOBAL_SUFFICES_RANK_MAP;", "modifier": "private static final", "type": "Map<String, Rank>", "declarator": "GLOBAL_SUFFICES_RANK_MAP", "var_name": "GLOBAL_SUFFICES_RANK_MAP"}], "methods": [{"identifier": "buildRankMarkerMap", "parameters": "(Stream<Rank> ranks, Map.Entry<String, Rank>... additions)", "modifiers": "private static", "return": "Map<String, Rank>", "signature": "Map<String, Rank> buildRankMarkerMap(Stream<Rank> ranks, Map.Entry<String, Rank>... additions)", "full_signature": "private static Map<String, Rank> buildRankMarkerMap(Stream<Rank> ranks, Map.Entry<String, Rank>... additions)", "class_method_signature": "RankUtils.buildRankMarkerMap(Stream<Rank> ranks, Map.Entry<String, Rank>... additions)", "testcase": false, "constructor": false}, {"identifier": "inferRank", "parameters": "(String rankMarker)", "modifiers": "public static", "return": "Rank", "signature": "Rank inferRank(String rankMarker)", "full_signature": "public static Rank inferRank(String rankMarker)", "class_method_signature": "RankUtils.inferRank(String rankMarker)", "testcase": false, "constructor": false}, {"identifier": "inferRank", "parameters": "(LinneanName pn)", "modifiers": "public static", "return": "Rank", "signature": "Rank inferRank(LinneanName pn)", "full_signature": "public static Rank inferRank(LinneanName pn)", "class_method_signature": "RankUtils.inferRank(LinneanName pn)", "testcase": false, "constructor": false}], "file": "name-parser-api/src/main/java/org/gbif/nameparser/util/RankUtils.java"}, "focal_method": {"identifier": "inferRank", "parameters": "(String rankMarker)", "modifiers": "public static", "return": "Rank", "body": "public static Rank inferRank(String rankMarker) {\n    if (rankMarker != null) {\n      return RANK_MARKER_MAP.get(NORMALIZE_RANK_MARKER.matcher(rankMarker.toLowerCase()).replaceAll(\"\"));\n    }\n    return null;\n  }", "signature": "Rank inferRank(String rankMarker)", "full_signature": "public static Rank inferRank(String rankMarker)", "class_method_signature": "RankUtils.inferRank(String rankMarker)", "testcase": false, "constructor": false, "invocations": ["get", "replaceAll", "matcher", "toLowerCase"]}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}