{"test_class": {"identifier": "TeradataDatePeriodParseDelegateTest", "superclass": "", "interfaces": "", "fields": [], "file": "dbfit-java/teradata/src/test/java/dbfit/environment/TeradataDatePeriodParseDelegateTest.java"}, "test_case": {"identifier": "parseTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseTest() {\n\n        String fromStr = \"2012-11-11\";\n        String toStr = \"2014-06-02\";\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date fromDate = null;\n        Date toDate = null;\n\n        try {\n            fromDate = dateFormat.parse(fromStr);\n            toDate = dateFormat.parse(toStr);\n        }\n        catch (ParseException e) {\n            throw new Error(\"TeradataDatePeriodTest: toStringTest: error parsing test input\");\n        }\n\n        Date[] range = {fromDate, toDate};\n        TeradataDatePeriod tp = new TeradataDatePeriod(range);\n\n        TeradataDatePeriod tp2 = null;\n        try {\n            tp2 = (TeradataDatePeriod) TeradataDatePeriodParseDelegate.parse(fromStr + \",\" + toStr);\n        }\n        catch (Exception e) {\n            throw new Error(\"During TeradataDatePeriodParseDelegate.parse(\" + fromStr + \",\" + toStr + \")\");\n        }\n\n        assertTrue(\"Date period parse does not produce expected object\", tp.equals(tp2));\n    }", "signature": "void parseTest()", "full_signature": "@Test public void parseTest()", "class_method_signature": "TeradataDatePeriodParseDelegateTest.parseTest()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "parse", "assertTrue", "equals"]}, "focal_class": {"identifier": "TeradataDatePeriodParseDelegate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DateFormat df = DateFormat.getDateInstance();", "modifier": "private static", "type": "DateFormat", "declarator": "df = DateFormat.getDateInstance()", "var_name": "df"}], "methods": [{"identifier": "parse", "parameters": "(String s)", "modifiers": "public static", "return": "Object", "signature": "Object parse(String s)", "full_signature": "public static Object parse(String s)", "class_method_signature": "TeradataDatePeriodParseDelegate.parse(String s)", "testcase": false, "constructor": false}], "file": "dbfit-java/teradata/src/main/java/dbfit/environment/TeradataDatePeriodParseDelegate.java"}, "focal_method": {"identifier": "parse", "parameters": "(String s)", "modifiers": "public static", "return": "Object", "body": "public static Object parse(String s) throws Exception {\n        System.out.println(\"TeradataDatePeriodParseDelegate: parse: s: \" + s);\n        String[] periodParts = s.split(\",\");\n        java.sql.Date F;\n        java.sql.Date T;\n        java.util.Date ParsedFrom;\n        java.util.Date ParsedTo;\n\n        try {\n            //ParsedFrom = java.sql.Date.valueOf(periodParts[0]);\n            F = java.sql.Date.valueOf(periodParts[0]);\n        } catch (IllegalArgumentException iex) {\n            java.util.Date ud = df.parse(periodParts[0]);\n            //ParsedFrom = new java.sql.Date(ud.getTime());\n            F = new java.sql.Date(ud.getTime());\n        }\n\n        try {\n            //ParsedTo = java.sql.Date.valueOf(periodParts[1]);\n            T = java.sql.Date.valueOf(periodParts[1]);\n        } catch (IllegalArgumentException iex) {\n            java.util.Date ud = df.parse(periodParts[1]);\n            //ParsedTo = new java.sql.Date(ud.getTime());\n            T = new java.sql.Date(ud.getTime());\n        }\n\n        Object[] data = { F, T };\n\n        //return new TeradataDatePeriod(ParsedFrom, ParsedTo);\n        return new TeradataDatePeriod(data);\n    }", "signature": "Object parse(String s)", "full_signature": "public static Object parse(String s)", "class_method_signature": "TeradataDatePeriodParseDelegate.parse(String s)", "testcase": false, "constructor": false, "invocations": ["println", "split", "valueOf", "parse", "getTime", "valueOf", "parse", "getTime"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}