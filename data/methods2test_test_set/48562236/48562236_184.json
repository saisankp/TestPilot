{"test_class": {"identifier": "ScelParserTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/text/scel/ScelParserTest.java"}, "test_case": {"identifier": "testIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsNull() {\n        ScelExpr expr = ScelParser.parse(\"a is null\");\n        assertEquals(\"a is null\", expr.toString());\n\n        expr = ScelParser.parse(\"a is not null\");\n        assertEquals(\"a is not null\", expr.toString());\n\n        expr = ScelParser.parse(\"a is null and b is not null\");\n        assertEquals(\"a is null and b is not null\", expr.toString());\n\n        expr = ScelParser.parse(\"(a is null) and (b is not null)\");\n        assertEquals(\"( a is null ) and ( b is not null )\", expr.toString());\n    }", "signature": "void testIsNull()", "full_signature": "@Test public void testIsNull()", "class_method_signature": "ScelParserTest.testIsNull()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "toString", "parse", "assertEquals", "toString", "parse", "assertEquals", "toString", "parse", "assertEquals", "toString"]}, "focal_class": {"identifier": "ScelParser", "superclass": "extends AbstractStringParser", "interfaces": "", "fields": [{"original_string": "private static final Map<String, ScelToken> OPS    = new HashMap<>();", "modifier": "private static final", "type": "Map<String, ScelToken>", "declarator": "OPS    = new HashMap<>()", "var_name": "OPS"}, {"original_string": "private static final ScelNode               LPAREN = new ScelNode(ScelToken.LPAREN, \"(\");", "modifier": "private static final", "type": "ScelNode", "declarator": "LPAREN = new ScelNode(ScelToken.LPAREN, \"(\")", "var_name": "LPAREN"}, {"original_string": "private static final ScelNode               RPAREN = new ScelNode(ScelToken.RPAREN, \")\");", "modifier": "private static final", "type": "ScelNode", "declarator": "RPAREN = new ScelNode(ScelToken.RPAREN, \")\")", "var_name": "RPAREN"}, {"original_string": "private static final ScelNode               AND    = new ScelNode(ScelToken.AND, \",\");", "modifier": "private static final", "type": "ScelNode", "declarator": "AND    = new ScelNode(ScelToken.AND, \",\")", "var_name": "AND"}, {"original_string": "private static final ScelNode               EQ     = new ScelNode(ScelToken.EQ, \":\");", "modifier": "private static final", "type": "ScelNode", "declarator": "EQ     = new ScelNode(ScelToken.EQ, \":\")", "var_name": "EQ"}, {"original_string": "private boolean allowSingleExpr = false;", "modifier": "private", "type": "boolean", "declarator": "allowSingleExpr = false", "var_name": "allowSingleExpr"}, {"original_string": "private final List<ScelNode> nodes = new ArrayList<>();", "modifier": "private final", "type": "List<ScelNode>", "declarator": "nodes = new ArrayList<>()", "var_name": "nodes"}], "methods": [{"identifier": "op", "parameters": "(ScelToken token)", "modifiers": "private static final", "return": "void", "signature": "void op(ScelToken token)", "full_signature": "private static final void op(ScelToken token)", "class_method_signature": "ScelParser.op(ScelToken token)", "testcase": false, "constructor": false}, {"identifier": "op", "parameters": "(ScelToken token, String s)", "modifiers": "private static final", "return": "void", "signature": "void op(ScelToken token, String s)", "full_signature": "private static final void op(ScelToken token, String s)", "class_method_signature": "ScelParser.op(ScelToken token, String s)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String expr)", "modifiers": "public static", "return": "ScelExpr", "signature": "ScelExpr parse(String expr)", "full_signature": "public static ScelExpr parse(String expr)", "class_method_signature": "ScelParser.parse(String expr)", "testcase": false, "constructor": false}, {"identifier": "ScelParser", "parameters": "(String expr)", "modifiers": "public", "return": "", "signature": " ScelParser(String expr)", "full_signature": "public  ScelParser(String expr)", "class_method_signature": "ScelParser.ScelParser(String expr)", "testcase": false, "constructor": true}, {"identifier": "expr", "parameters": "()", "modifiers": "public", "return": "ScelExpr", "signature": "ScelExpr expr()", "full_signature": "public ScelExpr expr()", "class_method_signature": "ScelParser.expr()", "testcase": false, "constructor": false}, {"identifier": "scanName", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean scanName()", "full_signature": "private boolean scanName()", "class_method_signature": "ScelParser.scanName()", "testcase": false, "constructor": false}, {"identifier": "scanOperator", "parameters": "()", "modifiers": "private", "return": "Boolean", "signature": "Boolean scanOperator()", "full_signature": "private Boolean scanOperator()", "class_method_signature": "ScelParser.scanOperator()", "testcase": false, "constructor": false}, {"identifier": "preProcessOp", "parameters": "(String op)", "modifiers": "protected", "return": "boolean", "signature": "boolean preProcessOp(String op)", "full_signature": "protected boolean preProcessOp(String op)", "class_method_signature": "ScelParser.preProcessOp(String op)", "testcase": false, "constructor": false}, {"identifier": "processOperator", "parameters": "(ScelToken token, String op)", "modifiers": "private", "return": "boolean", "signature": "boolean processOperator(ScelToken token, String op)", "full_signature": "private boolean processOperator(ScelToken token, String op)", "class_method_signature": "ScelParser.processOperator(ScelToken token, String op)", "testcase": false, "constructor": false}, {"identifier": "scanInValues", "parameters": "(List<ScelNode> values)", "modifiers": "private", "return": "String", "signature": "String scanInValues(List<ScelNode> values)", "full_signature": "private String scanInValues(List<ScelNode> values)", "class_method_signature": "ScelParser.scanInValues(List<ScelNode> values)", "testcase": false, "constructor": false}, {"identifier": "scanInValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanInValue()", "full_signature": "private void scanInValue()", "class_method_signature": "ScelParser.scanInValue()", "testcase": false, "constructor": false}, {"identifier": "scanInValues", "parameters": "(List<ScelNode> values, boolean close)", "modifiers": "private", "return": "void", "signature": "void scanInValues(List<ScelNode> values, boolean close)", "full_signature": "private void scanInValues(List<ScelNode> values, boolean close)", "class_method_signature": "ScelParser.scanInValues(List<ScelNode> values, boolean close)", "testcase": false, "constructor": false}, {"identifier": "scanInValueNode", "parameters": "(boolean close)", "modifiers": "private", "return": "ScelNode", "signature": "ScelNode scanInValueNode(boolean close)", "full_signature": "private ScelNode scanInValueNode(boolean close)", "class_method_signature": "ScelParser.scanInValueNode(boolean close)", "testcase": false, "constructor": false}, {"identifier": "scanValueOnly", "parameters": "()", "modifiers": "private", "return": "ScelNode", "signature": "ScelNode scanValueOnly()", "full_signature": "private ScelNode scanValueOnly()", "class_method_signature": "ScelParser.scanValueOnly()", "testcase": false, "constructor": false}, {"identifier": "scanValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanValue()", "full_signature": "private void scanValue()", "class_method_signature": "ScelParser.scanValue()", "testcase": false, "constructor": false}, {"identifier": "scanAndOr", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanAndOr()", "full_signature": "private void scanAndOr()", "class_method_signature": "ScelParser.scanAndOr()", "testcase": false, "constructor": false}, {"identifier": "scanIdentifier", "parameters": "(boolean dot)", "modifiers": "private", "return": "String", "signature": "String scanIdentifier(boolean dot)", "full_signature": "private String scanIdentifier(boolean dot)", "class_method_signature": "ScelParser.scanIdentifier(boolean dot)", "testcase": false, "constructor": false}, {"identifier": "nextLiteral", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String nextLiteral()", "full_signature": "private String nextLiteral()", "class_method_signature": "ScelParser.nextLiteral()", "testcase": false, "constructor": false}, {"identifier": "setAllowSingleExpr", "parameters": "(boolean allowSingleExpr)", "modifiers": "public", "return": "void", "signature": "void setAllowSingleExpr(boolean allowSingleExpr)", "full_signature": "public void setAllowSingleExpr(boolean allowSingleExpr)", "class_method_signature": "ScelParser.setAllowSingleExpr(boolean allowSingleExpr)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/text/scel/ScelParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String expr)", "modifiers": "public static", "return": "ScelExpr", "body": "public static ScelExpr parse(String expr) {\n        return new ScelParser(expr).expr();\n    }", "signature": "ScelExpr parse(String expr)", "full_signature": "public static ScelExpr parse(String expr)", "class_method_signature": "ScelParser.parse(String expr)", "testcase": false, "constructor": false, "invocations": ["expr"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}