{"test_class": {"identifier": "CustomMatchersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "InBrowser browser;", "modifier": "", "type": "InBrowser", "declarator": "browser", "var_name": "browser"}], "file": "jdollarx/src/test/java/com/github/loyada/jdollarx/CustomMatchers/CustomMatchersTest.java"}, "test_case": {"identifier": "hasElementFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasElementFailed() {\n        when(browser.find(any())).thenThrow(new NoSuchElementException(\"\"));\n        try {\n            assertThat(browser, CustomMatchers.hasElement(div));\n            fail(\"should fail\");\n        } catch (AssertionError e) {\n            assertThat(e.getMessage(), is(equalTo(\"\\nExpected: browser page contains div\\n     but: div is absent\")));\n        }\n    }", "signature": "void hasElementFailed()", "full_signature": "@Test public void hasElementFailed()", "class_method_signature": "CustomMatchersTest.hasElementFailed()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "find", "any", "assertThat", "hasElement", "fail", "assertThat", "getMessage", "is", "equalTo"]}, "focal_class": {"identifier": "CustomMatchers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getWaiter", "parameters": "(InBrowser browser)", "modifiers": "private static", "return": "Wait<WebDriver>", "signature": "Wait<WebDriver> getWaiter(InBrowser browser)", "full_signature": "private static Wait<WebDriver> getWaiter(InBrowser browser)", "class_method_signature": "CustomMatchers.getWaiter(InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(final Path el)", "modifiers": "public static", "return": "Matcher<InBrowser>", "signature": "Matcher<InBrowser> hasElement(final Path el)", "full_signature": "public static Matcher<InBrowser> hasElement(final Path el)", "class_method_signature": "CustomMatchers.hasElement(final Path el)", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "(int nTimes)", "modifiers": "public static", "return": "IsPresentNTimes", "signature": "IsPresentNTimes isPresent(int nTimes)", "full_signature": "public static IsPresentNTimes isPresent(int nTimes)", "class_method_signature": "CustomMatchers.isPresent(int nTimes)", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "()", "modifiers": "public static", "return": "IsPresent", "signature": "IsPresent isPresent()", "full_signature": "public static IsPresent isPresent()", "class_method_signature": "CustomMatchers.isPresent()", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "(String text)", "modifiers": "public static", "return": "HasText", "signature": "HasText hasText(String text)", "full_signature": "public static HasText hasText(String text)", "class_method_signature": "CustomMatchers.hasText(String text)", "testcase": false, "constructor": false}, {"identifier": "hasElements", "parameters": "(Path path)", "modifiers": "public static", "return": "HasElements", "signature": "HasElements hasElements(Path path)", "full_signature": "public static HasElements hasElements(Path path)", "class_method_signature": "CustomMatchers.hasElements(Path path)", "testcase": false, "constructor": false}, {"identifier": "isPresentIn", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isPresentIn(final InBrowser browser)", "full_signature": "public static Matcher<Path> isPresentIn(final InBrowser browser)", "class_method_signature": "CustomMatchers.isPresentIn(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "isPresentIn", "parameters": "(final Document document)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isPresentIn(final Document document)", "full_signature": "public static Matcher<Path> isPresentIn(final Document document)", "class_method_signature": "CustomMatchers.isPresentIn(final Document document)", "testcase": false, "constructor": false}, {"identifier": "isDisplayedIn", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isDisplayedIn(final InBrowser browser)", "full_signature": "public static Matcher<Path> isDisplayedIn(final InBrowser browser)", "class_method_signature": "CustomMatchers.isDisplayedIn(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "isNotDisplayedIn", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isNotDisplayedIn(final InBrowser browser)", "full_signature": "public static Matcher<Path> isNotDisplayedIn(final InBrowser browser)", "class_method_signature": "CustomMatchers.isNotDisplayedIn(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "isSelectedIn", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isSelectedIn(final InBrowser browser)", "full_signature": "public static Matcher<Path> isSelectedIn(final InBrowser browser)", "class_method_signature": "CustomMatchers.isSelectedIn(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "isEnabledIn", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isEnabledIn(final InBrowser browser)", "full_signature": "public static Matcher<Path> isEnabledIn(final InBrowser browser)", "class_method_signature": "CustomMatchers.isEnabledIn(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "hasNoElement", "parameters": "(final Path el)", "modifiers": "public static", "return": "Matcher<InBrowser>", "signature": "Matcher<InBrowser> hasNoElement(final Path el)", "full_signature": "public static Matcher<InBrowser> hasNoElement(final Path el)", "class_method_signature": "CustomMatchers.hasNoElement(final Path el)", "testcase": false, "constructor": false}, {"identifier": "isAbsentFrom", "parameters": "(final InBrowser browser)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isAbsentFrom(final InBrowser browser)", "full_signature": "public static Matcher<Path> isAbsentFrom(final InBrowser browser)", "class_method_signature": "CustomMatchers.isAbsentFrom(final InBrowser browser)", "testcase": false, "constructor": false}, {"identifier": "isAbsentFrom", "parameters": "(final Document document)", "modifiers": "public static", "return": "Matcher<Path>", "signature": "Matcher<Path> isAbsentFrom(final Document document)", "full_signature": "public static Matcher<Path> isAbsentFrom(final Document document)", "class_method_signature": "CustomMatchers.isAbsentFrom(final Document document)", "testcase": false, "constructor": false}, {"identifier": "pathExistsInDocument", "parameters": "(Document document, Path el)", "modifiers": "private static", "return": "boolean", "signature": "boolean pathExistsInDocument(Document document, Path el)", "full_signature": "private static boolean pathExistsInDocument(Document document, Path el)", "class_method_signature": "CustomMatchers.pathExistsInDocument(Document document, Path el)", "testcase": false, "constructor": false}], "file": "jdollarx/src/main/java/com/github/loyada/jdollarx/custommatchers/CustomMatchers.java"}, "focal_method": {"identifier": "hasElement", "parameters": "(final Path el)", "modifiers": "public static", "return": "Matcher<InBrowser>", "body": "public static Matcher<InBrowser> hasElement(final Path el) {\n        return new TypeSafeMatcher<InBrowser>() {\n            @Override\n            public void describeTo(final Description description) {\n                description.appendText(\"browser page contains \" + el);\n            }\n\n            @Override\n            protected void describeMismatchSafely(final InBrowser browser, final\n            Description mismatchDescription) {\n                mismatchDescription.appendText(CustomMatchersUtil.wrap(el) + \" is absent\");\n            }\n\n            @Override\n            protected boolean matchesSafely(final InBrowser browser) {\n                return browser.isPresent(el);\n            }\n        };\n    }", "signature": "Matcher<InBrowser> hasElement(final Path el)", "full_signature": "public static Matcher<InBrowser> hasElement(final Path el)", "class_method_signature": "CustomMatchers.hasElement(final Path el)", "testcase": false, "constructor": false, "invocations": ["appendText", "appendText", "wrap", "isPresent"]}, "repository": {"repo_id": 37208641, "url": "https://github.com/loyada/dollarx", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 19585, "license": "licensed"}}