{"test_class": {"identifier": "FlatMapCompletionStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final FlatMapCompletionStageFactory factory = new FlatMapCompletionStageFactory();", "modifier": "private final", "type": "FlatMapCompletionStageFactory", "declarator": "factory = new FlatMapCompletionStageFactory()", "var_name": "factory"}, {"original_string": "private final ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private final", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/FlatMapCompletionStageFactoryTest.java"}, "test_case": {"identifier": "create", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void create() throws ExecutionException, InterruptedException {\n        Flowable<Integer> flowable = Flowable.fromArray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n                .subscribeOn(Schedulers.computation());\n\n        List<String> list = ReactiveStreams.fromPublisher(flowable)\n                .filter(i -> i < 4)\n                .flatMapCompletionStage(this::square)\n                .flatMapCompletionStage(this::asString)\n                .toList()\n                .run().toCompletableFuture().get();\n\n        assertThat(list).containsExactly(\"1\", \"4\", \"9\");\n    }", "signature": "void create()", "full_signature": "@Test public void create()", "class_method_signature": "FlatMapCompletionStageFactoryTest.create()", "testcase": true, "constructor": false, "invocations": ["subscribeOn", "fromArray", "computation", "get", "toCompletableFuture", "run", "toList", "flatMapCompletionStage", "flatMapCompletionStage", "filter", "fromPublisher", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "FlatMapCompletionStageFactory", "superclass": "", "interfaces": "implements ProcessingStageFactory<Stage.FlatMapCompletionStage>", "fields": [], "methods": [{"identifier": "create", "parameters": "(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "modifiers": "@Override public", "return": "ProcessingStage<I, O>", "signature": "ProcessingStage<I, O> create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "full_signature": "@Override public ProcessingStage<I, O> create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "class_method_signature": "FlatMapCompletionStageFactory.create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/FlatMapCompletionStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "modifiers": "@Override public", "return": "ProcessingStage<I, O>", "body": "@Override\n    public <I, O> ProcessingStage<I, O> create(Engine engine,\n            Stage.FlatMapCompletionStage stage) {\n        Function<I, CompletionStage<O>> mapper = Casts.cast(\n                Objects.requireNonNull(stage).getMapper());\n        return new FlatMapCompletionStage<>(mapper);\n    }", "signature": "ProcessingStage<I, O> create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "full_signature": "@Override public ProcessingStage<I, O> create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "class_method_signature": "FlatMapCompletionStageFactory.create(Engine engine,\n            Stage.FlatMapCompletionStage stage)", "testcase": false, "constructor": false, "invocations": ["cast", "getMapper", "requireNonNull"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}