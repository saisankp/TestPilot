{"test_class": {"identifier": "XmlUtilsTest", "superclass": "extends FunctionalTransformerPoolTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/util/XmlUtilsTest.java"}, "test_case": {"identifier": "testAddRootNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddRootNamespace() throws SAXException, TransformerException, IOException, ConfigurationException {\n\t\tString lineSeparator=System.getProperty(\"line.separator\");\n\t\ttestAddRootNamespace(\"xyz\",\"<root><a>a</a><b></b><c/></root>\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><root xmlns=\\\"xyz\\\"><a>a</a><b/><c/></root>\",false,false);\n\t\ttestAddRootNamespace(\"xyz\",\"<root><a>a</a><b></b><c/></root>\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><root xmlns=\\\"xyz\\\">\"+lineSeparator+\"<a>a</a>\"+lineSeparator+\"<b/>\"+lineSeparator+\"<c/>\"+lineSeparator+\"</root>\",false,true);\n\t\ttestAddRootNamespace(\"xyz\",\"<root><a>a</a><b></b><c/></root>\",\"<root xmlns=\\\"xyz\\\"><a>a</a><b/><c/></root>\",true,false);\n\t\ttestAddRootNamespace(\"xyz\",\"<root><a>a</a><b></b><c/></root>\",\"<root xmlns=\\\"xyz\\\">\"+lineSeparator+\"<a>a</a>\"+lineSeparator+\"<b/>\"+lineSeparator+\"<c/>\"+lineSeparator+\"</root>\",true,true);\n\t}", "signature": "void testAddRootNamespace()", "full_signature": "@Test public void testAddRootNamespace()", "class_method_signature": "XmlUtilsTest.testAddRootNamespace()", "testcase": true, "constructor": false, "invocations": ["getProperty", "testAddRootNamespace", "testAddRootNamespace", "testAddRootNamespace", "testAddRootNamespace"]}, "focal_class": {"identifier": "XmlUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger log = LogUtil.getLogger(XmlUtils.class);", "modifier": "static", "type": "Logger", "declarator": "log = LogUtil.getLogger(XmlUtils.class)", "var_name": "log"}, {"original_string": "public static final int DEFAULT_XSLT_VERSION = 2;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_XSLT_VERSION = 2", "var_name": "DEFAULT_XSLT_VERSION"}, {"original_string": "static final String W3C_XML_SCHEMA =       \"http://www.w3.org/2001/XMLSchema\";", "modifier": "static final", "type": "String", "declarator": "W3C_XML_SCHEMA =       \"http://www.w3.org/2001/XMLSchema\"", "var_name": "W3C_XML_SCHEMA"}, {"original_string": "static final String JAXP_SCHEMA_LANGUAGE = \"http://java.sun.com/xml/jaxp/properties/schemaLanguage\";", "modifier": "static final", "type": "String", "declarator": "JAXP_SCHEMA_LANGUAGE = \"http://java.sun.com/xml/jaxp/properties/schemaLanguage\"", "var_name": "JAXP_SCHEMA_LANGUAGE"}, {"original_string": "static final String JAXP_SCHEMA_SOURCE =   \"http://java.sun.com/xml/jaxp/properties/schemaSource\";", "modifier": "static final", "type": "String", "declarator": "JAXP_SCHEMA_SOURCE =   \"http://java.sun.com/xml/jaxp/properties/schemaSource\"", "var_name": "JAXP_SCHEMA_SOURCE"}, {"original_string": "public static final String NAMESPACE_AWARE_BY_DEFAULT_KEY = \"xml.namespaceAware.default\";", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_AWARE_BY_DEFAULT_KEY = \"xml.namespaceAware.default\"", "var_name": "NAMESPACE_AWARE_BY_DEFAULT_KEY"}, {"original_string": "public static final String XSLT_STREAMING_BY_DEFAULT_KEY = \"xslt.streaming.default\";", "modifier": "public static final", "type": "String", "declarator": "XSLT_STREAMING_BY_DEFAULT_KEY = \"xslt.streaming.default\"", "var_name": "XSLT_STREAMING_BY_DEFAULT_KEY"}, {"original_string": "public static final String AUTO_RELOAD_KEY = \"xslt.auto.reload\";", "modifier": "public static final", "type": "String", "declarator": "AUTO_RELOAD_KEY = \"xslt.auto.reload\"", "var_name": "AUTO_RELOAD_KEY"}, {"original_string": "public static final String XSLT_BUFFERSIZE_KEY = \"xslt.bufsize\";", "modifier": "public static final", "type": "String", "declarator": "XSLT_BUFFERSIZE_KEY = \"xslt.bufsize\"", "var_name": "XSLT_BUFFERSIZE_KEY"}, {"original_string": "public static final int XSLT_BUFFERSIZE_DEFAULT=4096;", "modifier": "public static final", "type": "int", "declarator": "XSLT_BUFFERSIZE_DEFAULT=4096", "var_name": "XSLT_BUFFERSIZE_DEFAULT"}, {"original_string": "public static final String INCLUDE_FIELD_DEFINITION_BY_DEFAULT_KEY = \"query.includeFieldDefinition.default\";", "modifier": "public static final", "type": "String", "declarator": "INCLUDE_FIELD_DEFINITION_BY_DEFAULT_KEY = \"query.includeFieldDefinition.default\"", "var_name": "INCLUDE_FIELD_DEFINITION_BY_DEFAULT_KEY"}, {"original_string": "public static final String OPEN_FROM_FILE = \"file\";", "modifier": "public static final", "type": "String", "declarator": "OPEN_FROM_FILE = \"file\"", "var_name": "OPEN_FROM_FILE"}, {"original_string": "public static final String OPEN_FROM_URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "OPEN_FROM_URL = \"url\"", "var_name": "OPEN_FROM_URL"}, {"original_string": "public static final String OPEN_FROM_RESOURCE = \"resource\";", "modifier": "public static final", "type": "String", "declarator": "OPEN_FROM_RESOURCE = \"resource\"", "var_name": "OPEN_FROM_RESOURCE"}, {"original_string": "public static final String OPEN_FROM_XML = \"xml\";", "modifier": "public static final", "type": "String", "declarator": "OPEN_FROM_XML = \"xml\"", "var_name": "OPEN_FROM_XML"}, {"original_string": "private static Boolean namespaceAwareByDefault = null;", "modifier": "private static", "type": "Boolean", "declarator": "namespaceAwareByDefault = null", "var_name": "namespaceAwareByDefault"}, {"original_string": "private static Boolean xsltStreamingByDefault = null;", "modifier": "private static", "type": "Boolean", "declarator": "xsltStreamingByDefault = null", "var_name": "xsltStreamingByDefault"}, {"original_string": "private static Boolean includeFieldDefinitionByDefault = null;", "modifier": "private static", "type": "Boolean", "declarator": "includeFieldDefinitionByDefault = null", "var_name": "includeFieldDefinitionByDefault"}, {"original_string": "private static Boolean autoReload = null;", "modifier": "private static", "type": "Boolean", "declarator": "autoReload = null", "var_name": "autoReload"}, {"original_string": "private static Integer buffersize=null;", "modifier": "private static", "type": "Integer", "declarator": "buffersize=null", "var_name": "buffersize"}, {"original_string": "private static ConcurrentHashMap<String,TransformerPool> utilityTPs = new ConcurrentHashMap<String,TransformerPool>();", "modifier": "private static", "type": "ConcurrentHashMap<String,TransformerPool>", "declarator": "utilityTPs = new ConcurrentHashMap<String,TransformerPool>()", "var_name": "utilityTPs"}, {"original_string": "public static final char REPLACE_NON_XML_CHAR = 0x00BF;", "modifier": "public static final", "type": "char", "declarator": "REPLACE_NON_XML_CHAR = 0x00BF", "var_name": "REPLACE_NON_XML_CHAR"}, {"original_string": "public static final String XPATH_GETROOTNODENAME = \"name(/node()[position()=last()])\";", "modifier": "public static final", "type": "String", "declarator": "XPATH_GETROOTNODENAME = \"name(/node()[position()=last()])\"", "var_name": "XPATH_GETROOTNODENAME"}, {"original_string": "public static final String IDENTITY_TRANSFORM =\n\t\t\"<?xml version=\\\"1.0\\\"?><xsl:stylesheet xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\" version=\\\"1.0\\\">\"\n\t\t\t+ \"<xsl:template match=\\\"@*|*|processing-instruction()|comment()\\\">\"\n\t\t\t+ \"<xsl:copy><xsl:apply-templates select=\\\"*|@*|text()|processing-instruction()|comment()\\\" />\"\n\t\t\t+ \"</xsl:copy></xsl:template></xsl:stylesheet>\";", "modifier": "public static final", "type": "String", "declarator": "IDENTITY_TRANSFORM =\n\t\t\"<?xml version=\\\"1.0\\\"?><xsl:stylesheet xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\" version=\\\"1.0\\\">\"\n\t\t\t+ \"<xsl:template match=\\\"@*|*|processing-instruction()|comment()\\\">\"\n\t\t\t+ \"<xsl:copy><xsl:apply-templates select=\\\"*|@*|text()|processing-instruction()|comment()\\\" />\"\n\t\t\t+ \"</xsl:copy></xsl:template></xsl:stylesheet>\"", "var_name": "IDENTITY_TRANSFORM"}, {"original_string": "private static final String ADAPTERSITE_XSLT = \"/xml/xsl/web/adapterSite.xsl\";", "modifier": "private static final", "type": "String", "declarator": "ADAPTERSITE_XSLT = \"/xml/xsl/web/adapterSite.xsl\"", "var_name": "ADAPTERSITE_XSLT"}, {"original_string": "public static final XMLEventFactory EVENT_FACTORY;", "modifier": "public static final", "type": "XMLEventFactory", "declarator": "EVENT_FACTORY", "var_name": "EVENT_FACTORY"}, {"original_string": "public static final XMLInputFactory INPUT_FACTORY;", "modifier": "public static final", "type": "XMLInputFactory", "declarator": "INPUT_FACTORY", "var_name": "INPUT_FACTORY"}, {"original_string": "public static final XMLOutputFactory OUTPUT_FACTORY;", "modifier": "public static final", "type": "XMLOutputFactory", "declarator": "OUTPUT_FACTORY", "var_name": "OUTPUT_FACTORY"}, {"original_string": "public static final XMLOutputFactory REPAIR_NAMESPACES_OUTPUT_FACTORY;", "modifier": "public static final", "type": "XMLOutputFactory", "declarator": "REPAIR_NAMESPACES_OUTPUT_FACTORY", "var_name": "REPAIR_NAMESPACES_OUTPUT_FACTORY"}, {"original_string": "public static final String STREAM_FACTORY_ENCODING  = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "STREAM_FACTORY_ENCODING  = \"UTF-8\"", "var_name": "STREAM_FACTORY_ENCODING"}], "methods": [{"identifier": "XmlUtils", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlUtils()", "full_signature": "public  XmlUtils()", "class_method_signature": "XmlUtils.XmlUtils()", "testcase": false, "constructor": true}, {"identifier": "getUtilityTransformerPool", "parameters": "(String xslt, String key, boolean omitXmlDeclaration, boolean indent)", "modifiers": "private static", "return": "TransformerPool", "signature": "TransformerPool getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent)", "full_signature": "private static TransformerPool getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getUtilityTransformerPool", "parameters": "(String xslt, String key, boolean omitXmlDeclaration, boolean indent, int xsltVersion)", "modifiers": "private static", "return": "TransformerPool", "signature": "TransformerPool getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent, int xsltVersion)", "full_signature": "private static TransformerPool getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent, int xsltVersion)", "class_method_signature": "XmlUtils.getUtilityTransformerPool(String xslt, String key, boolean omitXmlDeclaration, boolean indent, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "makeDetectXsltVersionXslt", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String makeDetectXsltVersionXslt()", "full_signature": "protected static String makeDetectXsltVersionXslt()", "class_method_signature": "XmlUtils.makeDetectXsltVersionXslt()", "testcase": false, "constructor": false}, {"identifier": "getDetectXsltVersionTransformerPool", "parameters": "()", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getDetectXsltVersionTransformerPool()", "full_signature": "public static TransformerPool getDetectXsltVersionTransformerPool()", "class_method_signature": "XmlUtils.getDetectXsltVersionTransformerPool()", "testcase": false, "constructor": false}, {"identifier": "makeGetXsltConfigXslt", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String makeGetXsltConfigXslt()", "full_signature": "protected static String makeGetXsltConfigXslt()", "class_method_signature": "XmlUtils.makeGetXsltConfigXslt()", "testcase": false, "constructor": false}, {"identifier": "getGetXsltConfigTransformerPool", "parameters": "()", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getGetXsltConfigTransformerPool()", "full_signature": "public static TransformerPool getGetXsltConfigTransformerPool()", "class_method_signature": "XmlUtils.getGetXsltConfigTransformerPool()", "testcase": false, "constructor": false}, {"identifier": "getXsltConfig", "parameters": "(Resource source)", "modifiers": "public static", "return": "Map<String,String>", "signature": "Map<String,String> getXsltConfig(Resource source)", "full_signature": "public static Map<String,String> getXsltConfig(Resource source)", "class_method_signature": "XmlUtils.getXsltConfig(Resource source)", "testcase": false, "constructor": false}, {"identifier": "getXsltConfig", "parameters": "(Source source)", "modifiers": "public static", "return": "Map<String,String>", "signature": "Map<String,String> getXsltConfig(Source source)", "full_signature": "public static Map<String,String> getXsltConfig(Source source)", "class_method_signature": "XmlUtils.getXsltConfig(Source source)", "testcase": false, "constructor": false}, {"identifier": "makeRemoveNamespacesXsltTemplates", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String makeRemoveNamespacesXsltTemplates()", "full_signature": "protected static String makeRemoveNamespacesXsltTemplates()", "class_method_signature": "XmlUtils.makeRemoveNamespacesXsltTemplates()", "testcase": false, "constructor": false}, {"identifier": "makeRemoveNamespacesXslt", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeRemoveNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeRemoveNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeRemoveNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getRemoveNamespacesTransformerPool", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getRemoveNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getRemoveNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getRemoveNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "makeGetIbisContextXslt", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String makeGetIbisContextXslt()", "full_signature": "protected static String makeGetIbisContextXslt()", "class_method_signature": "XmlUtils.makeGetIbisContextXslt()", "testcase": false, "constructor": false}, {"identifier": "getGetIbisContextTransformerPool", "parameters": "()", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getGetIbisContextTransformerPool()", "full_signature": "public static TransformerPool getGetIbisContextTransformerPool()", "class_method_signature": "XmlUtils.getGetIbisContextTransformerPool()", "testcase": false, "constructor": false}, {"identifier": "makeGetRootNamespaceXslt", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String makeGetRootNamespaceXslt()", "full_signature": "protected static String makeGetRootNamespaceXslt()", "class_method_signature": "XmlUtils.makeGetRootNamespaceXslt()", "testcase": false, "constructor": false}, {"identifier": "getGetRootNamespaceTransformerPool", "parameters": "()", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getGetRootNamespaceTransformerPool()", "full_signature": "public static TransformerPool getGetRootNamespaceTransformerPool()", "class_method_signature": "XmlUtils.getGetRootNamespaceTransformerPool()", "testcase": false, "constructor": false}, {"identifier": "makeAddRootNamespaceXslt", "parameters": "(String namespace, boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeAddRootNamespaceXslt(String namespace, boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeAddRootNamespaceXslt(String namespace, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeAddRootNamespaceXslt(String namespace, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getAddRootNamespaceTransformerPool", "parameters": "(String namespace, boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getAddRootNamespaceTransformerPool(String namespace, boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getAddRootNamespaceTransformerPool(String namespace, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getAddRootNamespaceTransformerPool(String namespace, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "makeChangeRootXslt", "parameters": "(String root, boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeChangeRootXslt(String root, boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeChangeRootXslt(String root, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeChangeRootXslt(String root, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getChangeRootTransformerPool", "parameters": "(String root, boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getChangeRootTransformerPool(String root, boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getChangeRootTransformerPool(String root, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getChangeRootTransformerPool(String root, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "makeRemoveUnusedNamespacesXslt", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeRemoveUnusedNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeRemoveUnusedNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeRemoveUnusedNamespacesXslt(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getRemoveUnusedNamespacesTransformerPool", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getRemoveUnusedNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getRemoveUnusedNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getRemoveUnusedNamespacesTransformerPool(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "makeRemoveUnusedNamespacesXslt2", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeRemoveUnusedNamespacesXslt2(boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeRemoveUnusedNamespacesXslt2(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeRemoveUnusedNamespacesXslt2(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getRemoveUnusedNamespacesXslt2TransformerPool", "parameters": "(boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getRemoveUnusedNamespacesXslt2TransformerPool(boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getRemoveUnusedNamespacesXslt2TransformerPool(boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getRemoveUnusedNamespacesXslt2TransformerPool(boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "makeCopyOfSelectXslt", "parameters": "(String xpath, boolean omitXmlDeclaration, boolean indent)", "modifiers": "protected static", "return": "String", "signature": "String makeCopyOfSelectXslt(String xpath, boolean omitXmlDeclaration, boolean indent)", "full_signature": "protected static String makeCopyOfSelectXslt(String xpath, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.makeCopyOfSelectXslt(String xpath, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getCopyOfSelectTransformerPool", "parameters": "(String xpath, boolean omitXmlDeclaration, boolean indent)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getCopyOfSelectTransformerPool(String xpath, boolean omitXmlDeclaration, boolean indent)", "full_signature": "public static TransformerPool getCopyOfSelectTransformerPool(String xpath, boolean omitXmlDeclaration, boolean indent)", "class_method_signature": "XmlUtils.getCopyOfSelectTransformerPool(String xpath, boolean omitXmlDeclaration, boolean indent)", "testcase": false, "constructor": false}, {"identifier": "getIdentityTransformerPool", "parameters": "()", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getIdentityTransformerPool()", "full_signature": "public static TransformerPool getIdentityTransformerPool()", "class_method_signature": "XmlUtils.getIdentityTransformerPool()", "testcase": false, "constructor": false}, {"identifier": "isNamespaceAwareByDefault", "parameters": "()", "modifiers": "public static synchronized", "return": "boolean", "signature": "boolean isNamespaceAwareByDefault()", "full_signature": "public static synchronized boolean isNamespaceAwareByDefault()", "class_method_signature": "XmlUtils.isNamespaceAwareByDefault()", "testcase": false, "constructor": false}, {"identifier": "isXsltStreamingByDefault", "parameters": "()", "modifiers": "public static synchronized", "return": "boolean", "signature": "boolean isXsltStreamingByDefault()", "full_signature": "public static synchronized boolean isXsltStreamingByDefault()", "class_method_signature": "XmlUtils.isXsltStreamingByDefault()", "testcase": false, "constructor": false}, {"identifier": "isIncludeFieldDefinitionByDefault", "parameters": "()", "modifiers": "public static synchronized", "return": "boolean", "signature": "boolean isIncludeFieldDefinitionByDefault()", "full_signature": "public static synchronized boolean isIncludeFieldDefinitionByDefault()", "class_method_signature": "XmlUtils.isIncludeFieldDefinitionByDefault()", "testcase": false, "constructor": false}, {"identifier": "isAutoReload", "parameters": "()", "modifiers": "public static synchronized", "return": "boolean", "signature": "boolean isAutoReload()", "full_signature": "public static synchronized boolean isAutoReload()", "class_method_signature": "XmlUtils.isAutoReload()", "testcase": false, "constructor": false}, {"identifier": "getBufSize", "parameters": "()", "modifiers": "public static synchronized", "return": "int", "signature": "int getBufSize()", "full_signature": "public static synchronized int getBufSize()", "class_method_signature": "XmlUtils.getBufSize()", "testcase": false, "constructor": false}, {"identifier": "parseXml", "parameters": "(Resource resource, ContentHandler handler)", "modifiers": "public static", "return": "void", "signature": "void parseXml(Resource resource, ContentHandler handler)", "full_signature": "public static void parseXml(Resource resource, ContentHandler handler)", "class_method_signature": "XmlUtils.parseXml(Resource resource, ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "parseXml", "parameters": "(String source, ContentHandler handler)", "modifiers": "public static", "return": "void", "signature": "void parseXml(String source, ContentHandler handler)", "full_signature": "public static void parseXml(String source, ContentHandler handler)", "class_method_signature": "XmlUtils.parseXml(String source, ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "parseXml", "parameters": "(InputSource inputSource, ContentHandler handler)", "modifiers": "public static", "return": "void", "signature": "void parseXml(InputSource inputSource, ContentHandler handler)", "full_signature": "public static void parseXml(InputSource inputSource, ContentHandler handler)", "class_method_signature": "XmlUtils.parseXml(InputSource inputSource, ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "parseXml", "parameters": "(InputSource inputSource, ContentHandler handler, ErrorHandler errorHandler)", "modifiers": "public static", "return": "void", "signature": "void parseXml(InputSource inputSource, ContentHandler handler, ErrorHandler errorHandler)", "full_signature": "public static void parseXml(InputSource inputSource, ContentHandler handler, ErrorHandler errorHandler)", "class_method_signature": "XmlUtils.parseXml(InputSource inputSource, ContentHandler handler, ErrorHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "getXMLReader", "parameters": "(ContentHandler handler)", "modifiers": "public static", "return": "XMLReader", "signature": "XMLReader getXMLReader(ContentHandler handler)", "full_signature": "public static XMLReader getXMLReader(ContentHandler handler)", "class_method_signature": "XmlUtils.getXMLReader(ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getXMLReader", "parameters": "(Configuration classLoaderProvider)", "modifiers": "public static", "return": "XMLReader", "signature": "XMLReader getXMLReader(Configuration classLoaderProvider)", "full_signature": "public static XMLReader getXMLReader(Configuration classLoaderProvider)", "class_method_signature": "XmlUtils.getXMLReader(Configuration classLoaderProvider)", "testcase": false, "constructor": false}, {"identifier": "getXMLReader", "parameters": "(Resource classloaderProvider, ContentHandler handler)", "modifiers": "private static", "return": "XMLReader", "signature": "XMLReader getXMLReader(Resource classloaderProvider, ContentHandler handler)", "full_signature": "private static XMLReader getXMLReader(Resource classloaderProvider, ContentHandler handler)", "class_method_signature": "XmlUtils.getXMLReader(Resource classloaderProvider, ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getXMLReader", "parameters": "(boolean namespaceAware, Resource classLoaderProvider)", "modifiers": "private static", "return": "XMLReader", "signature": "XMLReader getXMLReader(boolean namespaceAware, Resource classLoaderProvider)", "full_signature": "private static XMLReader getXMLReader(boolean namespaceAware, Resource classLoaderProvider)", "class_method_signature": "XmlUtils.getXMLReader(boolean namespaceAware, Resource classLoaderProvider)", "testcase": false, "constructor": false}, {"identifier": "getXMLReader", "parameters": "(boolean namespaceAware, ClassLoader classLoader)", "modifiers": "private static", "return": "XMLReader", "signature": "XMLReader getXMLReader(boolean namespaceAware, ClassLoader classLoader)", "full_signature": "private static XMLReader getXMLReader(boolean namespaceAware, ClassLoader classLoader)", "class_method_signature": "XmlUtils.getXMLReader(boolean namespaceAware, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(Reader in)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(Reader in)", "full_signature": "public static Document buildDomDocument(Reader in)", "class_method_signature": "XmlUtils.buildDomDocument(Reader in)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(Reader in, boolean namespaceAware)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(Reader in, boolean namespaceAware)", "full_signature": "public static Document buildDomDocument(Reader in, boolean namespaceAware)", "class_method_signature": "XmlUtils.buildDomDocument(Reader in, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(Reader in, boolean namespaceAware, boolean resolveExternalEntities)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(Reader in, boolean namespaceAware, boolean resolveExternalEntities)", "full_signature": "public static Document buildDomDocument(Reader in, boolean namespaceAware, boolean resolveExternalEntities)", "class_method_signature": "XmlUtils.buildDomDocument(Reader in, boolean namespaceAware, boolean resolveExternalEntities)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(String s)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(String s)", "full_signature": "public static Document buildDomDocument(String s)", "class_method_signature": "XmlUtils.buildDomDocument(String s)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(String s, boolean namespaceAware)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(String s, boolean namespaceAware)", "full_signature": "public static Document buildDomDocument(String s, boolean namespaceAware)", "class_method_signature": "XmlUtils.buildDomDocument(String s, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(String s, boolean namespaceAware, boolean resolveExternalEntities)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(String s, boolean namespaceAware, boolean resolveExternalEntities)", "full_signature": "public static Document buildDomDocument(String s, boolean namespaceAware, boolean resolveExternalEntities)", "class_method_signature": "XmlUtils.buildDomDocument(String s, boolean namespaceAware, boolean resolveExternalEntities)", "testcase": false, "constructor": false}, {"identifier": "buildDomDocument", "parameters": "(URL url)", "modifiers": "public static", "return": "Document", "signature": "Document buildDomDocument(URL url)", "full_signature": "public static Document buildDomDocument(URL url)", "class_method_signature": "XmlUtils.buildDomDocument(URL url)", "testcase": false, "constructor": false}, {"identifier": "buildElement", "parameters": "(String s, boolean namespaceAware)", "modifiers": "public static", "return": "org.w3c.dom.Element", "signature": "org.w3c.dom.Element buildElement(String s, boolean namespaceAware)", "full_signature": "public static org.w3c.dom.Element buildElement(String s, boolean namespaceAware)", "class_method_signature": "XmlUtils.buildElement(String s, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "buildNode", "parameters": "(String s, boolean namespaceAware)", "modifiers": "public static", "return": "Node", "signature": "Node buildNode(String s, boolean namespaceAware)", "full_signature": "public static Node buildNode(String s, boolean namespaceAware)", "class_method_signature": "XmlUtils.buildNode(String s, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "buildNode", "parameters": "(String s)", "modifiers": "public static", "return": "Node", "signature": "Node buildNode(String s)", "full_signature": "public static Node buildNode(String s)", "class_method_signature": "XmlUtils.buildNode(String s)", "testcase": false, "constructor": false}, {"identifier": "buildElement", "parameters": "(String s)", "modifiers": "public static", "return": "Element", "signature": "Element buildElement(String s)", "full_signature": "public static Element buildElement(String s)", "class_method_signature": "XmlUtils.buildElement(String s)", "testcase": false, "constructor": false}, {"identifier": "buildElement", "parameters": "(Message s)", "modifiers": "public static", "return": "Element", "signature": "Element buildElement(Message s)", "full_signature": "public static Element buildElement(Message s)", "class_method_signature": "XmlUtils.buildElement(Message s)", "testcase": false, "constructor": false}, {"identifier": "skipXmlDeclaration", "parameters": "(String xmlString)", "modifiers": "public static", "return": "String", "signature": "String skipXmlDeclaration(String xmlString)", "full_signature": "public static String skipXmlDeclaration(String xmlString)", "class_method_signature": "XmlUtils.skipXmlDeclaration(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "skipDocTypeDeclaration", "parameters": "(String xmlString)", "modifiers": "public static", "return": "String", "signature": "String skipDocTypeDeclaration(String xmlString)", "full_signature": "public static String skipDocTypeDeclaration(String xmlString)", "class_method_signature": "XmlUtils.skipDocTypeDeclaration(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "readXml", "parameters": "(byte[] source, String defaultEncoding, boolean skipDeclaration)", "modifiers": "public static", "return": "String", "signature": "String readXml(byte[] source, String defaultEncoding, boolean skipDeclaration)", "full_signature": "public static String readXml(byte[] source, String defaultEncoding, boolean skipDeclaration)", "class_method_signature": "XmlUtils.readXml(byte[] source, String defaultEncoding, boolean skipDeclaration)", "testcase": false, "constructor": false}, {"identifier": "readXml", "parameters": "(byte[] source, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "modifiers": "public static", "return": "String", "signature": "String readXml(byte[] source, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "full_signature": "public static String readXml(byte[] source, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "class_method_signature": "XmlUtils.readXml(byte[] source, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "testcase": false, "constructor": false}, {"identifier": "readXml", "parameters": "(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration)", "modifiers": "public static", "return": "String", "signature": "String readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration)", "full_signature": "public static String readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration)", "class_method_signature": "XmlUtils.readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration)", "testcase": false, "constructor": false}, {"identifier": "readXml", "parameters": "(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "modifiers": "public static", "return": "String", "signature": "String readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "full_signature": "public static String readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "class_method_signature": "XmlUtils.readXml(byte[] source, int offset, int length, String defaultEncoding, boolean skipDeclaration, boolean useDeclarationEncoding)", "testcase": false, "constructor": false}, {"identifier": "getXPathTransformerPool", "parameters": "(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params)", "full_signature": "public static TransformerPool getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params)", "class_method_signature": "XmlUtils.getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params)", "testcase": false, "constructor": false}, {"identifier": "getXPathTransformerPool", "parameters": "(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params, int xsltVersion)", "modifiers": "public static", "return": "TransformerPool", "signature": "TransformerPool getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params, int xsltVersion)", "full_signature": "public static TransformerPool getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params, int xsltVersion)", "class_method_signature": "XmlUtils.getXPathTransformerPool(String namespaceDefs, String xPathExpression, String outputType, boolean includeXmlDeclaration, ParameterList params, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String XPathExpression)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String XPathExpression)", "full_signature": "public static String createXPathEvaluatorSource(String XPathExpression)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String XPathExpression)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration)", "full_signature": "public static String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames)", "full_signature": "public static String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace)", "full_signature": "public static String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceClause", "parameters": "(String namespaceDefs)", "modifiers": "public static", "return": "String", "signature": "String getNamespaceClause(String namespaceDefs)", "full_signature": "public static String getNamespaceClause(String namespaceDefs)", "class_method_signature": "XmlUtils.getNamespaceClause(String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceMap", "parameters": "(String namespaceDefs)", "modifiers": "public static", "return": "Map<String,String>", "signature": "Map<String,String> getNamespaceMap(String namespaceDefs)", "full_signature": "public static Map<String,String> getNamespaceMap(String namespaceDefs)", "class_method_signature": "XmlUtils.getNamespaceMap(String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace, boolean ignoreNamespaces, String separator, int xsltVersion)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace, boolean ignoreNamespaces, String separator, int xsltVersion)", "full_signature": "public static String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace, boolean ignoreNamespaces, String separator, int xsltVersion)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod, boolean includeXmlDeclaration, List<String> paramNames, boolean stripSpace, boolean ignoreNamespaces, String separator, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod)", "full_signature": "public static String createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String namespaceDefs, String XPathExpression, String outputMethod)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluatorSource", "parameters": "(String XPathExpression, String outputMethod)", "modifiers": "public static", "return": "String", "signature": "String createXPathEvaluatorSource(String XPathExpression, String outputMethod)", "full_signature": "public static String createXPathEvaluatorSource(String XPathExpression, String outputMethod)", "class_method_signature": "XmlUtils.createXPathEvaluatorSource(String XPathExpression, String outputMethod)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluator", "parameters": "(String XPathExpression)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createXPathEvaluator(String XPathExpression)", "full_signature": "public static Transformer createXPathEvaluator(String XPathExpression)", "class_method_signature": "XmlUtils.createXPathEvaluator(String XPathExpression)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluator", "parameters": "(String namespaceDefs, String XPathExpression, String outputMethod)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createXPathEvaluator(String namespaceDefs, String XPathExpression, String outputMethod)", "full_signature": "public static Transformer createXPathEvaluator(String namespaceDefs, String XPathExpression, String outputMethod)", "class_method_signature": "XmlUtils.createXPathEvaluator(String namespaceDefs, String XPathExpression, String outputMethod)", "testcase": false, "constructor": false}, {"identifier": "createXPathEvaluator", "parameters": "(String XPathExpression, String outputMethod)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createXPathEvaluator(String XPathExpression, String outputMethod)", "full_signature": "public static Transformer createXPathEvaluator(String XPathExpression, String outputMethod)", "class_method_signature": "XmlUtils.createXPathEvaluator(String XPathExpression, String outputMethod)", "testcase": false, "constructor": false}, {"identifier": "stringToSource", "parameters": "(String xmlString, boolean namespaceAware)", "modifiers": "public static", "return": "Source", "signature": "Source stringToSource(String xmlString, boolean namespaceAware)", "full_signature": "public static Source stringToSource(String xmlString, boolean namespaceAware)", "class_method_signature": "XmlUtils.stringToSource(String xmlString, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "stringToSource", "parameters": "(String xmlString)", "modifiers": "public static", "return": "Source", "signature": "Source stringToSource(String xmlString)", "full_signature": "public static Source stringToSource(String xmlString)", "class_method_signature": "XmlUtils.stringToSource(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "stringToSourceForSingleUse", "parameters": "(String xmlString)", "modifiers": "public static", "return": "Source", "signature": "Source stringToSourceForSingleUse(String xmlString)", "full_signature": "public static Source stringToSourceForSingleUse(String xmlString)", "class_method_signature": "XmlUtils.stringToSourceForSingleUse(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "stringToSourceForSingleUse", "parameters": "(String xmlString, boolean namespaceAware)", "modifiers": "public static", "return": "Source", "signature": "Source stringToSourceForSingleUse(String xmlString, boolean namespaceAware)", "full_signature": "public static Source stringToSourceForSingleUse(String xmlString, boolean namespaceAware)", "class_method_signature": "XmlUtils.stringToSourceForSingleUse(String xmlString, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "inputSourceToSAXSource", "parameters": "(Resource resource)", "modifiers": "public static", "return": "SAXSource", "signature": "SAXSource inputSourceToSAXSource(Resource resource)", "full_signature": "public static SAXSource inputSourceToSAXSource(Resource resource)", "class_method_signature": "XmlUtils.inputSourceToSAXSource(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "inputSourceToSAXSource", "parameters": "(InputSource is)", "modifiers": "public static", "return": "SAXSource", "signature": "SAXSource inputSourceToSAXSource(InputSource is)", "full_signature": "public static SAXSource inputSourceToSAXSource(InputSource is)", "class_method_signature": "XmlUtils.inputSourceToSAXSource(InputSource is)", "testcase": false, "constructor": false}, {"identifier": "inputSourceToSAXSource", "parameters": "(InputSource is, boolean namespaceAware, Resource classloaderProvider)", "modifiers": "private static", "return": "SAXSource", "signature": "SAXSource inputSourceToSAXSource(InputSource is, boolean namespaceAware, Resource classloaderProvider)", "full_signature": "private static SAXSource inputSourceToSAXSource(InputSource is, boolean namespaceAware, Resource classloaderProvider)", "class_method_signature": "XmlUtils.inputSourceToSAXSource(InputSource is, boolean namespaceAware, Resource classloaderProvider)", "testcase": false, "constructor": false}, {"identifier": "interpretXsltVersion", "parameters": "(String xsltVersion)", "modifiers": "public static", "return": "int", "signature": "int interpretXsltVersion(String xsltVersion)", "full_signature": "public static int interpretXsltVersion(String xsltVersion)", "class_method_signature": "XmlUtils.interpretXsltVersion(String xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "detectXsltVersion", "parameters": "(String xsltString)", "modifiers": "public static", "return": "int", "signature": "int detectXsltVersion(String xsltString)", "full_signature": "public static int detectXsltVersion(String xsltString)", "class_method_signature": "XmlUtils.detectXsltVersion(String xsltString)", "testcase": false, "constructor": false}, {"identifier": "detectXsltVersion", "parameters": "(URL xsltUrl)", "modifiers": "public static", "return": "int", "signature": "int detectXsltVersion(URL xsltUrl)", "full_signature": "public static int detectXsltVersion(URL xsltUrl)", "class_method_signature": "XmlUtils.detectXsltVersion(URL xsltUrl)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(String xsltString)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(String xsltString)", "full_signature": "public static Transformer createTransformer(String xsltString)", "class_method_signature": "XmlUtils.createTransformer(String xsltString)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(String xsltString, int xsltVersion)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(String xsltString, int xsltVersion)", "full_signature": "public static Transformer createTransformer(String xsltString, int xsltVersion)", "class_method_signature": "XmlUtils.createTransformer(String xsltString, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(URL url)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(URL url)", "full_signature": "public static Transformer createTransformer(URL url)", "class_method_signature": "XmlUtils.createTransformer(URL url)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(URL url, int xsltVersion)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(URL url, int xsltVersion)", "full_signature": "public static Transformer createTransformer(URL url, int xsltVersion)", "class_method_signature": "XmlUtils.createTransformer(URL url, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(Source source)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(Source source)", "full_signature": "public static Transformer createTransformer(Source source)", "class_method_signature": "XmlUtils.createTransformer(Source source)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(Source source, int xsltVersion)", "modifiers": "public static", "return": "Transformer", "signature": "Transformer createTransformer(Source source, int xsltVersion)", "full_signature": "public static Transformer createTransformer(Source source, int xsltVersion)", "class_method_signature": "XmlUtils.createTransformer(Source source, int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "getTransformerFactory", "parameters": "()", "modifiers": "public static", "return": "TransformerFactory", "signature": "TransformerFactory getTransformerFactory()", "full_signature": "public static TransformerFactory getTransformerFactory()", "class_method_signature": "XmlUtils.getTransformerFactory()", "testcase": false, "constructor": false}, {"identifier": "getTransformerFactory", "parameters": "(int xsltVersion)", "modifiers": "public static", "return": "TransformerFactory", "signature": "TransformerFactory getTransformerFactory(int xsltVersion)", "full_signature": "public static TransformerFactory getTransformerFactory(int xsltVersion)", "class_method_signature": "XmlUtils.getTransformerFactory(int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "getDocumentBuilderFactory", "parameters": "()", "modifiers": "public static synchronized", "return": "DocumentBuilderFactory", "signature": "DocumentBuilderFactory getDocumentBuilderFactory()", "full_signature": "public static synchronized DocumentBuilderFactory getDocumentBuilderFactory()", "class_method_signature": "XmlUtils.getDocumentBuilderFactory()", "testcase": false, "constructor": false}, {"identifier": "getDocumentBuilderFactory", "parameters": "(boolean namespaceAware)", "modifiers": "public static synchronized", "return": "DocumentBuilderFactory", "signature": "DocumentBuilderFactory getDocumentBuilderFactory(boolean namespaceAware)", "full_signature": "public static synchronized DocumentBuilderFactory getDocumentBuilderFactory(boolean namespaceAware)", "class_method_signature": "XmlUtils.getDocumentBuilderFactory(boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "getSAXParserFactory", "parameters": "()", "modifiers": "public static", "return": "SAXParserFactory", "signature": "SAXParserFactory getSAXParserFactory()", "full_signature": "public static SAXParserFactory getSAXParserFactory()", "class_method_signature": "XmlUtils.getSAXParserFactory()", "testcase": false, "constructor": false}, {"identifier": "getSAXParserFactory", "parameters": "(boolean namespaceAware)", "modifiers": "public static", "return": "SAXParserFactory", "signature": "SAXParserFactory getSAXParserFactory(boolean namespaceAware)", "full_signature": "public static SAXParserFactory getSAXParserFactory(boolean namespaceAware)", "class_method_signature": "XmlUtils.getSAXParserFactory(boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "encodeChars", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String encodeChars(String string)", "full_signature": "public static String encodeChars(String string)", "class_method_signature": "XmlUtils.encodeChars(String string)", "testcase": false, "constructor": false}, {"identifier": "encodeCharsAndReplaceNonValidXmlCharacters", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String encodeCharsAndReplaceNonValidXmlCharacters(String string)", "full_signature": "public static String encodeCharsAndReplaceNonValidXmlCharacters(String string)", "class_method_signature": "XmlUtils.encodeCharsAndReplaceNonValidXmlCharacters(String string)", "testcase": false, "constructor": false}, {"identifier": "encodeChars", "parameters": "(char[] chars, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String encodeChars(char[] chars, int offset, int length)", "full_signature": "public static String encodeChars(char[] chars, int offset, int length)", "class_method_signature": "XmlUtils.encodeChars(char[] chars, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "decodeChars", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String decodeChars(String string)", "full_signature": "public static String decodeChars(String string)", "class_method_signature": "XmlUtils.decodeChars(String string)", "testcase": false, "constructor": false}, {"identifier": "escapeChar", "parameters": "(char c)", "modifiers": "private static", "return": "String", "signature": "String escapeChar(char c)", "full_signature": "private static String escapeChar(char c)", "class_method_signature": "XmlUtils.escapeChar(char c)", "testcase": false, "constructor": false}, {"identifier": "unEscapeString", "parameters": "(String str)", "modifiers": "private static", "return": "char", "signature": "char unEscapeString(String str)", "full_signature": "private static char unEscapeString(String str)", "class_method_signature": "XmlUtils.unEscapeString(String str)", "testcase": false, "constructor": false}, {"identifier": "encodeURL", "parameters": "(String url)", "modifiers": "static public", "return": "String", "signature": "String encodeURL(String url)", "full_signature": "static public String encodeURL(String url)", "class_method_signature": "XmlUtils.encodeURL(String url)", "testcase": false, "constructor": false}, {"identifier": "toHexChar", "parameters": "(int digitValue)", "modifiers": "static private", "return": "char", "signature": "char toHexChar(int digitValue)", "full_signature": "static private char toHexChar(int digitValue)", "class_method_signature": "XmlUtils.toHexChar(int digitValue)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsBoolean", "parameters": "(Element el, String tag)", "modifiers": "static public", "return": "boolean", "signature": "boolean getChildTagAsBoolean(Element el, String tag)", "full_signature": "static public boolean getChildTagAsBoolean(Element el, String tag)", "class_method_signature": "XmlUtils.getChildTagAsBoolean(Element el, String tag)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsBoolean", "parameters": "(\n\t\tElement el,\n\t\tString tag,\n\t\tboolean defaultValue)", "modifiers": "static public", "return": "boolean", "signature": "boolean getChildTagAsBoolean(\n\t\tElement el,\n\t\tString tag,\n\t\tboolean defaultValue)", "full_signature": "static public boolean getChildTagAsBoolean(\n\t\tElement el,\n\t\tString tag,\n\t\tboolean defaultValue)", "class_method_signature": "XmlUtils.getChildTagAsBoolean(\n\t\tElement el,\n\t\tString tag,\n\t\tboolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsLong", "parameters": "(Element el, String tag)", "modifiers": "static public", "return": "long", "signature": "long getChildTagAsLong(Element el, String tag)", "full_signature": "static public long getChildTagAsLong(Element el, String tag)", "class_method_signature": "XmlUtils.getChildTagAsLong(Element el, String tag)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsLong", "parameters": "(\n\t\tElement el,\n\t\tString tag,\n\t\tlong defaultValue)", "modifiers": "static public", "return": "long", "signature": "long getChildTagAsLong(\n\t\tElement el,\n\t\tString tag,\n\t\tlong defaultValue)", "full_signature": "static public long getChildTagAsLong(\n\t\tElement el,\n\t\tString tag,\n\t\tlong defaultValue)", "class_method_signature": "XmlUtils.getChildTagAsLong(\n\t\tElement el,\n\t\tString tag,\n\t\tlong defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsString", "parameters": "(Element el, String tag)", "modifiers": "static public", "return": "String", "signature": "String getChildTagAsString(Element el, String tag)", "full_signature": "static public String getChildTagAsString(Element el, String tag)", "class_method_signature": "XmlUtils.getChildTagAsString(Element el, String tag)", "testcase": false, "constructor": false}, {"identifier": "getChildTagAsString", "parameters": "(\n\t\tElement el,\n\t\tString tag,\n\t\tString defaultValue)", "modifiers": "static public", "return": "String", "signature": "String getChildTagAsString(\n\t\tElement el,\n\t\tString tag,\n\t\tString defaultValue)", "full_signature": "static public String getChildTagAsString(\n\t\tElement el,\n\t\tString tag,\n\t\tString defaultValue)", "class_method_signature": "XmlUtils.getChildTagAsString(\n\t\tElement el,\n\t\tString tag,\n\t\tString defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getChildTags", "parameters": "(Element el, String tag)", "modifiers": "public static", "return": "Collection<Node>", "signature": "Collection<Node> getChildTags(Element el, String tag)", "full_signature": "public static Collection<Node> getChildTags(Element el, String tag)", "class_method_signature": "XmlUtils.getChildTags(Element el, String tag)", "testcase": false, "constructor": false}, {"identifier": "getFirstChildTag", "parameters": "(Element el, String tag)", "modifiers": "static public", "return": "Element", "signature": "Element getFirstChildTag(Element el, String tag)", "full_signature": "static public Element getFirstChildTag(Element el, String tag)", "class_method_signature": "XmlUtils.getFirstChildTag(Element el, String tag)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Element el)", "modifiers": "static public", "return": "String", "signature": "String getStringValue(Element el)", "full_signature": "static public String getStringValue(Element el)", "class_method_signature": "XmlUtils.getStringValue(Element el)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Element el, boolean trimWhitespace)", "modifiers": "static public", "return": "String", "signature": "String getStringValue(Element el, boolean trimWhitespace)", "full_signature": "static public String getStringValue(Element el, boolean trimWhitespace)", "class_method_signature": "XmlUtils.getStringValue(Element el, boolean trimWhitespace)", "testcase": false, "constructor": false}, {"identifier": "encodeCdataString", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String encodeCdataString(String string)", "full_signature": "public static String encodeCdataString(String string)", "class_method_signature": "XmlUtils.encodeCdataString(String string)", "testcase": false, "constructor": false}, {"identifier": "replaceNonValidXmlCharacters", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String replaceNonValidXmlCharacters(String string)", "full_signature": "public static String replaceNonValidXmlCharacters(String string)", "class_method_signature": "XmlUtils.replaceNonValidXmlCharacters(String string)", "testcase": false, "constructor": false}, {"identifier": "replaceNonValidXmlCharacters", "parameters": "(String string, char to,\n\t\t\tboolean appendCharNum,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "modifiers": "public static", "return": "String", "signature": "String replaceNonValidXmlCharacters(String string, char to,\n\t\t\tboolean appendCharNum,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "full_signature": "public static String replaceNonValidXmlCharacters(String string, char to,\n\t\t\tboolean appendCharNum,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "class_method_signature": "XmlUtils.replaceNonValidXmlCharacters(String string, char to,\n\t\t\tboolean appendCharNum,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "testcase": false, "constructor": false}, {"identifier": "stripNonValidXmlCharacters", "parameters": "(String string,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "modifiers": "public static", "return": "String", "signature": "String stripNonValidXmlCharacters(String string,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "full_signature": "public static String stripNonValidXmlCharacters(String string,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "class_method_signature": "XmlUtils.stripNonValidXmlCharacters(String string,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "testcase": false, "constructor": false}, {"identifier": "isPrintableUnicodeChar", "parameters": "(int c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrintableUnicodeChar(int c)", "full_signature": "public static boolean isPrintableUnicodeChar(int c)", "class_method_signature": "XmlUtils.isPrintableUnicodeChar(int c)", "testcase": false, "constructor": false}, {"identifier": "isPrintableUnicodeChar", "parameters": "(int c,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrintableUnicodeChar(int c,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "full_signature": "public static boolean isPrintableUnicodeChar(int c,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "class_method_signature": "XmlUtils.isPrintableUnicodeChar(int c,\n\t\t\tboolean allowUnicodeSupplementaryCharacters)", "testcase": false, "constructor": false}, {"identifier": "setTransformerParameters", "parameters": "(Transformer t, Map<String,Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void setTransformerParameters(Transformer t, Map<String,Object> parameters)", "full_signature": "public static void setTransformerParameters(Transformer t, Map<String,Object> parameters)", "class_method_signature": "XmlUtils.setTransformerParameters(Transformer t, Map<String,Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, Document d)", "modifiers": "public static", "return": "String", "signature": "String transformXml(Transformer t, Document d)", "full_signature": "public static String transformXml(Transformer t, Document d)", "class_method_signature": "XmlUtils.transformXml(Transformer t, Document d)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, String s)", "modifiers": "public static", "return": "String", "signature": "String transformXml(Transformer t, String s)", "full_signature": "public static String transformXml(Transformer t, String s)", "class_method_signature": "XmlUtils.transformXml(Transformer t, String s)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, String s, boolean namespaceAware)", "modifiers": "public static", "return": "String", "signature": "String transformXml(Transformer t, String s, boolean namespaceAware)", "full_signature": "public static String transformXml(Transformer t, String s, boolean namespaceAware)", "class_method_signature": "XmlUtils.transformXml(Transformer t, String s, boolean namespaceAware)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, String s, Result result)", "modifiers": "public static", "return": "void", "signature": "void transformXml(Transformer t, String s, Result result)", "full_signature": "public static void transformXml(Transformer t, String s, Result result)", "class_method_signature": "XmlUtils.transformXml(Transformer t, String s, Result result)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, Source s)", "modifiers": "public static", "return": "String", "signature": "String transformXml(Transformer t, Source s)", "full_signature": "public static String transformXml(Transformer t, Source s)", "class_method_signature": "XmlUtils.transformXml(Transformer t, Source s)", "testcase": false, "constructor": false}, {"identifier": "transformXml", "parameters": "(Transformer t, Source s, Writer out)", "modifiers": "public static", "return": "void", "signature": "void transformXml(Transformer t, Source s, Writer out)", "full_signature": "public static void transformXml(Transformer t, Source s, Writer out)", "class_method_signature": "XmlUtils.transformXml(Transformer t, Source s, Writer out)", "testcase": false, "constructor": false}, {"identifier": "isWellFormed", "parameters": "(String input)", "modifiers": "static public", "return": "boolean", "signature": "boolean isWellFormed(String input)", "full_signature": "static public boolean isWellFormed(String input)", "class_method_signature": "XmlUtils.isWellFormed(String input)", "testcase": false, "constructor": false}, {"identifier": "isWellFormed", "parameters": "(String input, String root)", "modifiers": "static public", "return": "boolean", "signature": "boolean isWellFormed(String input, String root)", "full_signature": "static public boolean isWellFormed(String input, String root)", "class_method_signature": "XmlUtils.isWellFormed(String input, String root)", "testcase": false, "constructor": false}, {"identifier": "identityTransform", "parameters": "(Resource resource)", "modifiers": "static public", "return": "String", "signature": "String identityTransform(Resource resource)", "full_signature": "static public String identityTransform(Resource resource)", "class_method_signature": "XmlUtils.identityTransform(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "getVersionInfo", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getVersionInfo()", "full_signature": "public static String getVersionInfo()", "class_method_signature": "XmlUtils.getVersionInfo()", "testcase": false, "constructor": false}, {"identifier": "source2String", "parameters": "(Source source, boolean removeNamespaces)", "modifiers": "public static", "return": "String", "signature": "String source2String(Source source, boolean removeNamespaces)", "full_signature": "public static String source2String(Source source, boolean removeNamespaces)", "class_method_signature": "XmlUtils.source2String(Source source, boolean removeNamespaces)", "testcase": false, "constructor": false}, {"identifier": "removeNamespaces", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String removeNamespaces(String input)", "full_signature": "public static String removeNamespaces(String input)", "class_method_signature": "XmlUtils.removeNamespaces(String input)", "testcase": false, "constructor": false}, {"identifier": "getRootNamespace", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String getRootNamespace(String input)", "full_signature": "public static String getRootNamespace(String input)", "class_method_signature": "XmlUtils.getRootNamespace(String input)", "testcase": false, "constructor": false}, {"identifier": "addRootNamespace", "parameters": "(String input, String namespace)", "modifiers": "public static", "return": "String", "signature": "String addRootNamespace(String input, String namespace)", "full_signature": "public static String addRootNamespace(String input, String namespace)", "class_method_signature": "XmlUtils.addRootNamespace(String input, String namespace)", "testcase": false, "constructor": false}, {"identifier": "removeUnusedNamespaces", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String removeUnusedNamespaces(String input)", "full_signature": "public static String removeUnusedNamespaces(String input)", "class_method_signature": "XmlUtils.removeUnusedNamespaces(String input)", "testcase": false, "constructor": false}, {"identifier": "copyOfSelect", "parameters": "(String input, String xpath)", "modifiers": "public static", "return": "String", "signature": "String copyOfSelect(String input, String xpath)", "full_signature": "public static String copyOfSelect(String input, String xpath)", "class_method_signature": "XmlUtils.copyOfSelect(String input, String xpath)", "testcase": false, "constructor": false}, {"identifier": "getIbisContext", "parameters": "(String input)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getIbisContext(String input)", "full_signature": "public static Map<String, String> getIbisContext(String input)", "class_method_signature": "XmlUtils.getIbisContext(String input)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String canonicalize(String input)", "full_signature": "public static String canonicalize(String input)", "class_method_signature": "XmlUtils.canonicalize(String input)", "testcase": false, "constructor": false}, {"identifier": "nodeToString", "parameters": "(Node node)", "modifiers": "public static", "return": "String", "signature": "String nodeToString(Node node)", "full_signature": "public static String nodeToString(Node node)", "class_method_signature": "XmlUtils.nodeToString(Node node)", "testcase": false, "constructor": false}, {"identifier": "nodeToString", "parameters": "(Node node, boolean omitXmlDeclaration)", "modifiers": "public static", "return": "String", "signature": "String nodeToString(Node node, boolean omitXmlDeclaration)", "full_signature": "public static String nodeToString(Node node, boolean omitXmlDeclaration)", "class_method_signature": "XmlUtils.nodeToString(Node node, boolean omitXmlDeclaration)", "testcase": false, "constructor": false}, {"identifier": "cdataToText", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String cdataToText(String input)", "full_signature": "public static String cdataToText(String input)", "class_method_signature": "XmlUtils.cdataToText(String input)", "testcase": false, "constructor": false}, {"identifier": "mergeAttributes", "parameters": "(StartElement tag, Iterator<? extends Attribute> attrs, Iterator<? extends Namespace> nsps, XMLEventFactory factory)", "modifiers": "public static", "return": "StartElement", "signature": "StartElement mergeAttributes(StartElement tag, Iterator<? extends Attribute> attrs, Iterator<? extends Namespace> nsps, XMLEventFactory factory)", "full_signature": "public static StartElement mergeAttributes(StartElement tag, Iterator<? extends Attribute> attrs, Iterator<? extends Namespace> nsps, XMLEventFactory factory)", "class_method_signature": "XmlUtils.mergeAttributes(StartElement tag, Iterator<? extends Attribute> attrs, Iterator<? extends Namespace> nsps, XMLEventFactory factory)", "testcase": false, "constructor": false}, {"identifier": "attributesEqual", "parameters": "(Attribute attribute1, Attribute attribute2)", "modifiers": "public static", "return": "boolean", "signature": "boolean attributesEqual(Attribute attribute1, Attribute attribute2)", "full_signature": "public static boolean attributesEqual(Attribute attribute1, Attribute attribute2)", "class_method_signature": "XmlUtils.attributesEqual(Attribute attribute1, Attribute attribute2)", "testcase": false, "constructor": false}, {"identifier": "getAdapterSite", "parameters": "(Object document)", "modifiers": "public static", "return": "String", "signature": "String getAdapterSite(Object document)", "full_signature": "public static String getAdapterSite(Object document)", "class_method_signature": "XmlUtils.getAdapterSite(Object document)", "testcase": false, "constructor": false}, {"identifier": "getAdapterSite", "parameters": "(String input, Map parameters)", "modifiers": "public static", "return": "String", "signature": "String getAdapterSite(String input, Map parameters)", "full_signature": "public static String getAdapterSite(String input, Map parameters)", "class_method_signature": "XmlUtils.getAdapterSite(String input, Map parameters)", "testcase": false, "constructor": false}, {"identifier": "evaluateXPathNodeSet", "parameters": "(String input, String xpathExpr)", "modifiers": "public static", "return": "Collection<String>", "signature": "Collection<String> evaluateXPathNodeSet(String input, String xpathExpr)", "full_signature": "public static Collection<String> evaluateXPathNodeSet(String input, String xpathExpr)", "class_method_signature": "XmlUtils.evaluateXPathNodeSet(String input, String xpathExpr)", "testcase": false, "constructor": false}, {"identifier": "evaluateXPathNodeSetFirstElement", "parameters": "(String input, String xpathExpr)", "modifiers": "public static", "return": "String", "signature": "String evaluateXPathNodeSetFirstElement(String input, String xpathExpr)", "full_signature": "public static String evaluateXPathNodeSetFirstElement(String input, String xpathExpr)", "class_method_signature": "XmlUtils.evaluateXPathNodeSetFirstElement(String input, String xpathExpr)", "testcase": false, "constructor": false}, {"identifier": "evaluateXPathNumber", "parameters": "(String input, String xpathExpr)", "modifiers": "public static", "return": "Double", "signature": "Double evaluateXPathNumber(String input, String xpathExpr)", "full_signature": "public static Double evaluateXPathNumber(String input, String xpathExpr)", "class_method_signature": "XmlUtils.evaluateXPathNumber(String input, String xpathExpr)", "testcase": false, "constructor": false}, {"identifier": "evaluateXPathNodeSet", "parameters": "(String input, String xpathExpr, String keyElement, String valueElement)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> evaluateXPathNodeSet(String input, String xpathExpr, String keyElement, String valueElement)", "full_signature": "public static Map<String, String> evaluateXPathNodeSet(String input, String xpathExpr, String keyElement, String valueElement)", "class_method_signature": "XmlUtils.evaluateXPathNodeSet(String input, String xpathExpr, String keyElement, String valueElement)", "testcase": false, "constructor": false}, {"identifier": "evaluateXPathNodeSet", "parameters": "(String input, String xpathExpr, String xpathExpr2)", "modifiers": "public static", "return": "Collection<String>", "signature": "Collection<String> evaluateXPathNodeSet(String input, String xpathExpr, String xpathExpr2)", "full_signature": "public static Collection<String> evaluateXPathNodeSet(String input, String xpathExpr, String xpathExpr2)", "class_method_signature": "XmlUtils.evaluateXPathNodeSet(String input, String xpathExpr, String xpathExpr2)", "testcase": false, "constructor": false}, {"identifier": "toXhtml", "parameters": "(String htmlString)", "modifiers": "public static", "return": "String", "signature": "String toXhtml(String htmlString)", "full_signature": "public static String toXhtml(String htmlString)", "class_method_signature": "XmlUtils.toXhtml(String htmlString)", "testcase": false, "constructor": false}, {"identifier": "getXPathFactory", "parameters": "()", "modifiers": "public static", "return": "XPathFactory", "signature": "XPathFactory getXPathFactory()", "full_signature": "public static XPathFactory getXPathFactory()", "class_method_signature": "XmlUtils.getXPathFactory()", "testcase": false, "constructor": false}, {"identifier": "getXPathFactory", "parameters": "(int xsltVersion)", "modifiers": "public static synchronized", "return": "XPathFactory", "signature": "XPathFactory getXPathFactory(int xsltVersion)", "full_signature": "public static synchronized XPathFactory getXPathFactory(int xsltVersion)", "class_method_signature": "XmlUtils.getXPathFactory(int xsltVersion)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/util/XmlUtils.java"}, "focal_method": {"identifier": "addRootNamespace", "parameters": "(String input, String namespace)", "modifiers": "public static", "return": "String", "body": "public static String addRootNamespace(String input, String namespace) {\n\t\ttry {\n\t\t\tTransformerPool tp = getAddRootNamespaceTransformerPool(namespace,true,false);\n\t\t\treturn tp.transform(input,null);\n\t\t} catch (Exception e) {\n\t\t\tlog.warn(e);\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "String addRootNamespace(String input, String namespace)", "full_signature": "public static String addRootNamespace(String input, String namespace)", "class_method_signature": "XmlUtils.addRootNamespace(String input, String namespace)", "testcase": false, "constructor": false, "invocations": ["getAddRootNamespaceTransformerPool", "transform", "warn"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}