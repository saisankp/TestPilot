{"test_class": {"identifier": "SearchLatencyListenerTest", "superclass": "extends RandomizedTest", "interfaces": "", "fields": [], "file": "extra/src/test/java/org/wikimedia/search/extra/latency/SearchLatencyListenerTest.java"}, "test_case": {"identifier": "rotate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rotate() {\n        final Set<Double> latencies = Collections.singleton(95D);\n        SearchLatencyListener listener = newListener();\n        long tookInNanos = 12345678;\n        listener.onQueryPhase(mockSearchContext(Collections.singletonList(\"foo\")), tookInNanos);\n\n        assertEquals(1, listener.getLatencyStats(latencies).size());\n        SearchLatencyProbe.LatencyStat stat = listener.getLatencyStats(latencies).get(0);\n        assertNotNull(stat);\n        assertEquals(\"foo\", stat.getBucket());\n        assertEquals(95D, stat.getPercentile(), Math.ulp(95D));\n        // Without rotation this must still be 0\n        assertEquals(0D, stat.getLatency().nanos(), Math.ulp(0D));\n\n        listener.rotate();\n        assertEquals(1, listener.getLatencyStats(latencies).size());\n        stat = listener.getLatencyStats(latencies).get(0);\n        assertNotNull(stat);\n        assertEquals(\"foo\", stat.getBucket());\n        assertEquals(95D, stat.getPercentile(), Math.ulp(95D));\n        assertEquals(tookInNanos, stat.getLatency().nanos(), delta(tookInNanos));\n\n        listener.rotate();\n        assertEquals(1, listener.getLatencyStats(latencies).size());\n        stat = listener.getLatencyStats(latencies).get(0);\n        assertNotNull(stat);\n        assertEquals(\"foo\", stat.getBucket());\n        assertEquals(95D, stat.getPercentile(), Math.ulp(95D));\n        // rotating without any data should not change the latency\n        assertEquals(tookInNanos, stat.getLatency().nanos(), delta(tookInNanos));\n    }", "signature": "void rotate()", "full_signature": "@Test public void rotate()", "class_method_signature": "SearchLatencyListenerTest.rotate()", "testcase": true, "constructor": false, "invocations": ["singleton", "newListener", "onQueryPhase", "mockSearchContext", "singletonList", "assertEquals", "size", "getLatencyStats", "get", "getLatencyStats", "assertNotNull", "assertEquals", "getBucket", "assertEquals", "getPercentile", "ulp", "assertEquals", "nanos", "getLatency", "ulp", "rotate", "assertEquals", "size", "getLatencyStats", "get", "getLatencyStats", "assertNotNull", "assertEquals", "getBucket", "assertEquals", "getPercentile", "ulp", "assertEquals", "nanos", "getLatency", "delta", "rotate", "assertEquals", "size", "getLatencyStats", "get", "getLatencyStats", "assertNotNull", "assertEquals", "getBucket", "assertEquals", "getPercentile", "ulp", "assertEquals", "nanos", "getLatency", "delta"]}, "focal_class": {"identifier": "SearchLatencyListener", "superclass": "extends AbstractLifecycleComponent", "interfaces": "implements SearchOperationListener, SearchLatencyProbe", "fields": [{"original_string": "private static final TimeValue ROTATION_DELAY = TimeValue.timeValueSeconds(5);", "modifier": "private static final", "type": "TimeValue", "declarator": "ROTATION_DELAY = TimeValue.timeValueSeconds(5)", "var_name": "ROTATION_DELAY"}, {"original_string": "@VisibleForTesting\n    static final int NUM_ROLLING_HISTOGRAMS = (int) (TimeValue.timeValueMinutes(1).millis() / ROTATION_DELAY.millis());", "modifier": "@VisibleForTesting\n    static final", "type": "int", "declarator": "NUM_ROLLING_HISTOGRAMS = (int) (TimeValue.timeValueMinutes(1).millis() / ROTATION_DELAY.millis())", "var_name": "NUM_ROLLING_HISTOGRAMS"}, {"original_string": "private static final TimeValue HIGHEST_TRACKABLE_VALUE = TimeValue.timeValueMinutes(5);", "modifier": "private static final", "type": "TimeValue", "declarator": "HIGHEST_TRACKABLE_VALUE = TimeValue.timeValueMinutes(5)", "var_name": "HIGHEST_TRACKABLE_VALUE"}, {"original_string": "private static final TimeValue LOWEST_DISCERNABLE_VALUE = TimeValue.timeValueMillis(1);", "modifier": "private static final", "type": "TimeValue", "declarator": "LOWEST_DISCERNABLE_VALUE = TimeValue.timeValueMillis(1)", "var_name": "LOWEST_DISCERNABLE_VALUE"}, {"original_string": "static final int SIGNIFICANT_DIGITS = 2;", "modifier": "static final", "type": "int", "declarator": "SIGNIFICANT_DIGITS = 2", "var_name": "SIGNIFICANT_DIGITS"}, {"original_string": "private final ConcurrentMap<String, RollingHistogram> statBuckets;", "modifier": "private final", "type": "ConcurrentMap<String, RollingHistogram>", "declarator": "statBuckets", "var_name": "statBuckets"}, {"original_string": "private final Supplier<ThreadPool> threadPoolSupplier;", "modifier": "private final", "type": "Supplier<ThreadPool>", "declarator": "threadPoolSupplier", "var_name": "threadPoolSupplier"}, {"original_string": "@Nullable private ThreadPool.Cancellable cancelRotation;", "modifier": "@Nullable private", "type": "ThreadPool.Cancellable", "declarator": "cancelRotation", "var_name": "cancelRotation"}], "methods": [{"identifier": "SearchLatencyListener", "parameters": "(Settings settings, Supplier<ThreadPool> threadPoolSupplier)", "modifiers": "public", "return": "", "signature": " SearchLatencyListener(Settings settings, Supplier<ThreadPool> threadPoolSupplier)", "full_signature": "public  SearchLatencyListener(Settings settings, Supplier<ThreadPool> threadPoolSupplier)", "class_method_signature": "SearchLatencyListener.SearchLatencyListener(Settings settings, Supplier<ThreadPool> threadPoolSupplier)", "testcase": false, "constructor": true}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "SearchLatencyListener.doStart()", "testcase": false, "constructor": false}, {"identifier": "doStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStop()", "full_signature": "@Override protected void doStop()", "class_method_signature": "SearchLatencyListener.doStop()", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doClose()", "full_signature": "@Override protected void doClose()", "class_method_signature": "SearchLatencyListener.doClose()", "testcase": false, "constructor": false}, {"identifier": "getBucket", "parameters": "(String name)", "modifiers": "private", "return": "Optional<RollingHistogram>", "signature": "Optional<RollingHistogram> getBucket(String name)", "full_signature": "private Optional<RollingHistogram> getBucket(String name)", "class_method_signature": "SearchLatencyListener.getBucket(String name)", "testcase": false, "constructor": false}, {"identifier": "getOrAddBucket", "parameters": "(String name)", "modifiers": "private", "return": "RollingHistogram", "signature": "RollingHistogram getOrAddBucket(String name)", "full_signature": "private RollingHistogram getOrAddBucket(String name)", "class_method_signature": "SearchLatencyListener.getOrAddBucket(String name)", "testcase": false, "constructor": false}, {"identifier": "getMillisAtPercentile", "parameters": "(String bucket, double percentile)", "modifiers": "public", "return": "long", "signature": "long getMillisAtPercentile(String bucket, double percentile)", "full_signature": "public long getMillisAtPercentile(String bucket, double percentile)", "class_method_signature": "SearchLatencyListener.getMillisAtPercentile(String bucket, double percentile)", "testcase": false, "constructor": false}, {"identifier": "getLatencyStats", "parameters": "(Set<Double> percentiles)", "modifiers": "public", "return": "List<LatencyStat>", "signature": "List<LatencyStat> getLatencyStats(Set<Double> percentiles)", "full_signature": "public List<LatencyStat> getLatencyStats(Set<Double> percentiles)", "class_method_signature": "SearchLatencyListener.getLatencyStats(Set<Double> percentiles)", "testcase": false, "constructor": false}, {"identifier": "onQueryPhase", "parameters": "(SearchContext searchContext, long tookInNanos)", "modifiers": "@SuppressFBWarnings(\"PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS\") @Override public", "return": "void", "signature": "void onQueryPhase(SearchContext searchContext, long tookInNanos)", "full_signature": "@SuppressFBWarnings(\"PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS\") @Override public void onQueryPhase(SearchContext searchContext, long tookInNanos)", "class_method_signature": "SearchLatencyListener.onQueryPhase(SearchContext searchContext, long tookInNanos)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void rotate()", "full_signature": "@VisibleForTesting void rotate()", "class_method_signature": "SearchLatencyListener.rotate()", "testcase": false, "constructor": false}], "file": "extra/src/main/java/org/wikimedia/search/extra/latency/SearchLatencyListener.java"}, "focal_method": {"identifier": "rotate", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    void rotate() {\n        Iterator<RollingHistogram> iter = statBuckets.values().iterator();\n        while (iter.hasNext()) {\n            RollingHistogram hist = iter.next();\n            hist.rotate();\n            if (hist.isEmpty()) {\n                iter.remove();\n            }\n        }\n    }", "signature": "void rotate()", "full_signature": "@VisibleForTesting void rotate()", "class_method_signature": "SearchLatencyListener.rotate()", "testcase": false, "constructor": false, "invocations": ["iterator", "values", "hasNext", "next", "rotate", "isEmpty", "remove"]}, "repository": {"repo_id": 24474053, "url": "https://github.com/wikimedia/search-extra", "stars": 37, "created": "9/25/2014 8:26:03 PM +00:00", "updates": "2019-12-06T15:10:34+00:00", "fork": "False", "license": "licensed"}}