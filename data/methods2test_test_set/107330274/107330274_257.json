{"test_class": {"identifier": "ClusterAgentAutoScalerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(testScheduler);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(testScheduler)", "var_name": "titusRuntime"}, {"original_string": "private final ClusterOperationsConfiguration configuration = mock(ClusterOperationsConfiguration.class);", "modifier": "private final", "type": "ClusterOperationsConfiguration", "declarator": "configuration = mock(ClusterOperationsConfiguration.class)", "var_name": "configuration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final V3JobOperations v3JobOperations = mock(V3JobOperations.class);", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations = mock(V3JobOperations.class)", "var_name": "v3JobOperations"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private final SchedulingService<StubTaskRequest> schedulingService = mock(SchedulingService.class);", "modifier": "@SuppressWarnings(\"unchecked\")\n    private final", "type": "SchedulingService<StubTaskRequest>", "declarator": "schedulingService = mock(SchedulingService.class)", "var_name": "schedulingService"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/clusteroperations/ClusterAgentAutoScalerTest.java"}, "test_case": {"identifier": "testScaleUpForTasksPastSlo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScaleUpForTasksPastSlo() {\n        when(configuration.getFlexMinIdle()).thenReturn(0);\n        when(configuration.getFlexScaleUpCoolDownMs()).thenReturn(72000000L);\n        when(configuration.getFlexTaskSloMs()).thenReturn(3600000L);\n\n        AgentInstanceGroup instanceGroup = createPartition(\"instanceGroup1\", InstanceGroupLifecycleState.Active, \"r4.16xlarge\", 0, 0, 10);\n        when(agentManagementService.getInstanceGroups()).thenReturn(singletonList(instanceGroup));\n\n        when(agentManagementService.getAgentInstances(\"instanceGroup1\")).thenReturn(Collections.emptyList());\n        when(agentManagementService.scaleUp(eq(\"instanceGroup1\"), anyInt())).thenReturn(Completable.complete());\n\n        testScheduler.advanceTimeBy(6, TimeUnit.MINUTES);\n\n        ClusterAgentAutoScaler clusterAgentAutoScaler = new ClusterAgentAutoScaler(titusRuntime, configuration,\n                agentManagementService, v3JobOperations, schedulingService, testScheduler);\n\n        clusterAgentAutoScaler.doAgentScaling().await();\n\n        Job job = createJob();\n        when(v3JobOperations.getJobs()).thenReturn(Collections.singletonList(job));\n\n        List<Task> tasks = createTasks(10, \"jobId\");\n        when(v3JobOperations.getTasks()).thenReturn(tasks);\n\n        Map<FailureKind, Map<StubTaskRequest, List<TaskPlacementFailure>>> taskPlacementFailures = createTaskPlacementFailures(ImmutableMap.of(\n                AllAgentsFull, 10\n        ), Tier.Flex);\n        doReturn(taskPlacementFailures).when(schedulingService).getLastTaskPlacementFailures();\n\n        when(agentManagementService.getInstanceGroups()).thenReturn(singletonList(instanceGroup));\n\n        when(agentManagementService.getAgentInstances(\"instanceGroup1\")).thenReturn(Collections.emptyList());\n        when(agentManagementService.scaleUp(eq(\"instanceGroup1\"), anyInt())).thenReturn(Completable.complete());\n\n        testScheduler.advanceTimeBy(1, TimeUnit.HOURS);\n\n        clusterAgentAutoScaler.doAgentScaling().await();\n\n        verify(agentManagementService).scaleUp(\"instanceGroup1\", 10);\n    }", "signature": "void testScaleUpForTasksPastSlo()", "full_signature": "@Test public void testScaleUpForTasksPastSlo()", "class_method_signature": "ClusterAgentAutoScalerTest.testScaleUpForTasksPastSlo()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getFlexMinIdle", "thenReturn", "when", "getFlexScaleUpCoolDownMs", "thenReturn", "when", "getFlexTaskSloMs", "createPartition", "thenReturn", "when", "getInstanceGroups", "singletonList", "thenReturn", "when", "getAgentInstances", "emptyList", "thenReturn", "when", "scaleUp", "eq", "anyInt", "complete", "advanceTimeBy", "await", "doAgentScaling", "createJob", "thenReturn", "when", "getJobs", "singletonList", "createTasks", "thenReturn", "when", "getTasks", "createTaskPlacementFailures", "of", "getLastTaskPlacementFailures", "when", "doReturn", "thenReturn", "when", "getInstanceGroups", "singletonList", "thenReturn", "when", "getAgentInstances", "emptyList", "thenReturn", "when", "scaleUp", "eq", "anyInt", "complete", "advanceTimeBy", "await", "doAgentScaling", "scaleUp", "verify"]}, "focal_class": {"identifier": "ClusterAgentAutoScaler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClusterAgentAutoScaler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClusterAgentAutoScaler.class)", "var_name": "logger"}, {"original_string": "private static final String METRIC_ROOT = METRIC_CLUSTER_OPERATIONS + \"clusterAgentAutoScaler.\";", "modifier": "private static final", "type": "String", "declarator": "METRIC_ROOT = METRIC_CLUSTER_OPERATIONS + \"clusterAgentAutoScaler.\"", "var_name": "METRIC_ROOT"}, {"original_string": "private static final long TIME_TO_WAIT_AFTER_ACTIVATION = 300_000;", "modifier": "private static final", "type": "long", "declarator": "TIME_TO_WAIT_AFTER_ACTIVATION = 300_000", "var_name": "TIME_TO_WAIT_AFTER_ACTIVATION"}, {"original_string": "private static final long AUTO_SCALER_ITERATION_INTERVAL_MS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "AUTO_SCALER_ITERATION_INTERVAL_MS = 30_000", "var_name": "AUTO_SCALER_ITERATION_INTERVAL_MS"}, {"original_string": "private static final long CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS = 300_000;", "modifier": "private static final", "type": "long", "declarator": "CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS = 300_000", "var_name": "CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS"}, {"original_string": "private static final long TASK_IDS_PREVIOUSLY_SCALED_TTL_MS = 600_000;", "modifier": "private static final", "type": "long", "declarator": "TASK_IDS_PREVIOUSLY_SCALED_TTL_MS = 600_000", "var_name": "TASK_IDS_PREVIOUSLY_SCALED_TTL_MS"}, {"original_string": "private static final long SCALE_UP_TOKEN_BUCKET_CAPACITY = 50;", "modifier": "private static final", "type": "long", "declarator": "SCALE_UP_TOKEN_BUCKET_CAPACITY = 50", "var_name": "SCALE_UP_TOKEN_BUCKET_CAPACITY"}, {"original_string": "private static final long SCALE_UP_TOKEN_BUCKET_REFILL_AMOUNT = 2;", "modifier": "private static final", "type": "long", "declarator": "SCALE_UP_TOKEN_BUCKET_REFILL_AMOUNT = 2", "var_name": "SCALE_UP_TOKEN_BUCKET_REFILL_AMOUNT"}, {"original_string": "private static final long SCALE_UP_TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000;", "modifier": "private static final", "type": "long", "declarator": "SCALE_UP_TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000", "var_name": "SCALE_UP_TOKEN_BUCKET_REFILL_INTERVAL_MS"}, {"original_string": "private static final long SCALE_DOWN_TOKEN_BUCKET_CAPACITY = 50;", "modifier": "private static final", "type": "long", "declarator": "SCALE_DOWN_TOKEN_BUCKET_CAPACITY = 50", "var_name": "SCALE_DOWN_TOKEN_BUCKET_CAPACITY"}, {"original_string": "private static final long SCALE_DOWN_TOKEN_BUCKET_REFILL_AMOUNT = 2;", "modifier": "private static final", "type": "long", "declarator": "SCALE_DOWN_TOKEN_BUCKET_REFILL_AMOUNT = 2", "var_name": "SCALE_DOWN_TOKEN_BUCKET_REFILL_AMOUNT"}, {"original_string": "private static final long SCALE_DOWN_TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000;", "modifier": "private static final", "type": "long", "declarator": "SCALE_DOWN_TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000", "var_name": "SCALE_DOWN_TOKEN_BUCKET_REFILL_INTERVAL_MS"}, {"original_string": "private static final Comparator<AgentInstanceGroup> PREFER_ACTIVE_INSTANCE_GROUP_COMPARATOR = Comparator.comparing(ig -> ig.getLifecycleStatus().getState());", "modifier": "private static final", "type": "Comparator<AgentInstanceGroup>", "declarator": "PREFER_ACTIVE_INSTANCE_GROUP_COMPARATOR = Comparator.comparing(ig -> ig.getLifecycleStatus().getState())", "var_name": "PREFER_ACTIVE_INSTANCE_GROUP_COMPARATOR"}, {"original_string": "private static final Comparator<AgentInstanceGroup> PREFER_PHASED_OUT_INSTANCE_GROUP_COMPARATOR = PREFER_ACTIVE_INSTANCE_GROUP_COMPARATOR.reversed();", "modifier": "private static final", "type": "Comparator<AgentInstanceGroup>", "declarator": "PREFER_PHASED_OUT_INSTANCE_GROUP_COMPARATOR = PREFER_ACTIVE_INSTANCE_GROUP_COMPARATOR.reversed()", "var_name": "PREFER_PHASED_OUT_INSTANCE_GROUP_COMPARATOR"}, {"original_string": "private static final Set<String> IGNORED_HARD_CONSTRAINT_NAMES = asSet(MACHINE_ID, MACHINE_GROUP, MACHINE_TYPE, TOLERATION);", "modifier": "private static final", "type": "Set<String>", "declarator": "IGNORED_HARD_CONSTRAINT_NAMES = asSet(MACHINE_ID, MACHINE_GROUP, MACHINE_TYPE, TOLERATION)", "var_name": "IGNORED_HARD_CONSTRAINT_NAMES"}, {"original_string": "private static final Set<FailureKind> IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD = ImmutableSet.<FailureKind>builder()\n            .addAll(FailureKind.NEVER_TRIGGER_AUTOSCALING)\n            .add(FailureKind.LaunchGuard)\n            .build();", "modifier": "private static final", "type": "Set<FailureKind>", "declarator": "IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD = ImmutableSet.<FailureKind>builder()\n            .addAll(FailureKind.NEVER_TRIGGER_AUTOSCALING)\n            .add(FailureKind.LaunchGuard)\n            .build()", "var_name": "IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final ClusterOperationsConfiguration configuration;", "modifier": "private final", "type": "ClusterOperationsConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final V3JobOperations v3JobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}, {"original_string": "private final SchedulingService<? extends TaskRequest> schedulingService;", "modifier": "private final", "type": "SchedulingService<? extends TaskRequest>", "declarator": "schedulingService", "var_name": "schedulingService"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Cache<String, String> taskIdsForPreviousScaleUps;", "modifier": "private final", "type": "Cache<String, String>", "declarator": "taskIdsForPreviousScaleUps", "var_name": "taskIdsForPreviousScaleUps"}, {"original_string": "private final Map<Tier, TierAutoScalerExecution> tierTierAutoScalerExecutions;", "modifier": "private final", "type": "Map<Tier, TierAutoScalerExecution>", "declarator": "tierTierAutoScalerExecutions", "var_name": "tierTierAutoScalerExecutions"}, {"original_string": "private Subscription agentAutoScalerSubscription;", "modifier": "private", "type": "Subscription", "declarator": "agentAutoScalerSubscription", "var_name": "agentAutoScalerSubscription"}], "methods": [{"identifier": "ClusterAgentAutoScaler", "parameters": "(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService)", "modifiers": "@Inject public", "return": "", "signature": " ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService)", "full_signature": "@Inject public  ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService)", "class_method_signature": "ClusterAgentAutoScaler.ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService)", "testcase": false, "constructor": true}, {"identifier": "ClusterAgentAutoScaler", "parameters": "(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService,\n                                  Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService,\n                                  Scheduler scheduler)", "full_signature": "public  ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService,\n                                  Scheduler scheduler)", "class_method_signature": "ClusterAgentAutoScaler.ClusterAgentAutoScaler(TitusRuntime titusRuntime,\n                                  ClusterOperationsConfiguration configuration,\n                                  AgentManagementService agentManagementService,\n                                  V3JobOperations v3JobOperations,\n                                  SchedulingService<? extends TaskRequest> schedulingService,\n                                  Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void enterActiveMode()", "full_signature": "@Activator public void enterActiveMode()", "class_method_signature": "ClusterAgentAutoScaler.enterActiveMode()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "ClusterAgentAutoScaler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "doAgentScaling", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Completable", "signature": "Completable doAgentScaling()", "full_signature": "@VisibleForTesting Completable doAgentScaling()", "class_method_signature": "ClusterAgentAutoScaler.doAgentScaling()", "testcase": false, "constructor": false}, {"identifier": "getActiveInstanceGroups", "parameters": "()", "modifiers": "private", "return": "List<AgentInstanceGroup>", "signature": "List<AgentInstanceGroup> getActiveInstanceGroups()", "full_signature": "private List<AgentInstanceGroup> getActiveInstanceGroups()", "class_method_signature": "ClusterAgentAutoScaler.getActiveInstanceGroups()", "testcase": false, "constructor": false}, {"identifier": "getInstancesForInstanceGroups", "parameters": "(List<AgentInstanceGroup> instanceGroups)", "modifiers": "private", "return": "Map<AgentInstanceGroup, List<AgentInstance>>", "signature": "Map<AgentInstanceGroup, List<AgentInstance>> getInstancesForInstanceGroups(List<AgentInstanceGroup> instanceGroups)", "full_signature": "private Map<AgentInstanceGroup, List<AgentInstance>> getInstancesForInstanceGroups(List<AgentInstanceGroup> instanceGroups)", "class_method_signature": "ClusterAgentAutoScaler.getInstancesForInstanceGroups(List<AgentInstanceGroup> instanceGroups)", "testcase": false, "constructor": false}, {"identifier": "getRemovableInstancesPastElapsedTime", "parameters": "(Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                                     long finish,\n                                                                     long elapsed)", "modifiers": "private", "return": "List<AgentInstance>", "signature": "List<AgentInstance> getRemovableInstancesPastElapsedTime(Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                                     long finish,\n                                                                     long elapsed)", "full_signature": "private List<AgentInstance> getRemovableInstancesPastElapsedTime(Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                                     long finish,\n                                                                     long elapsed)", "class_method_signature": "ClusterAgentAutoScaler.getRemovableInstancesPastElapsedTime(Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                                     long finish,\n                                                                     long elapsed)", "testcase": false, "constructor": false}, {"identifier": "getIdleInstancesForTier", "parameters": "(Tier tier,\n                                                        String primaryInstanceType,\n                                                        Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                        Map<String, Long> numberOfTasksOnAgent,\n                                                        long finished,\n                                                        long elapsed)", "modifiers": "private", "return": "List<AgentInstance>", "signature": "List<AgentInstance> getIdleInstancesForTier(Tier tier,\n                                                        String primaryInstanceType,\n                                                        Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                        Map<String, Long> numberOfTasksOnAgent,\n                                                        long finished,\n                                                        long elapsed)", "full_signature": "private List<AgentInstance> getIdleInstancesForTier(Tier tier,\n                                                        String primaryInstanceType,\n                                                        Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                        Map<String, Long> numberOfTasksOnAgent,\n                                                        long finished,\n                                                        long elapsed)", "class_method_signature": "ClusterAgentAutoScaler.getIdleInstancesForTier(Tier tier,\n                                                        String primaryInstanceType,\n                                                        Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups,\n                                                        Map<String, Long> numberOfTasksOnAgent,\n                                                        long finished,\n                                                        long elapsed)", "testcase": false, "constructor": false}, {"identifier": "createScaleUpCompletable", "parameters": "(List<AgentInstanceGroup> scalableInstanceGroups, int scaleUpCount)", "modifiers": "private", "return": "Pair<Integer, Completable>", "signature": "Pair<Integer, Completable> createScaleUpCompletable(List<AgentInstanceGroup> scalableInstanceGroups, int scaleUpCount)", "full_signature": "private Pair<Integer, Completable> createScaleUpCompletable(List<AgentInstanceGroup> scalableInstanceGroups, int scaleUpCount)", "class_method_signature": "ClusterAgentAutoScaler.createScaleUpCompletable(List<AgentInstanceGroup> scalableInstanceGroups, int scaleUpCount)", "testcase": false, "constructor": false}, {"identifier": "createSetRemovableOverrideStatusesCompletable", "parameters": "(List<AgentInstance> idleInstances,\n                                                                                     List<AgentInstanceGroup> scalableInstanceGroups,\n                                                                                     Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById,\n                                                                                     int scaleDownCount)", "modifiers": "private", "return": "Pair<Integer, Completable>", "signature": "Pair<Integer, Completable> createSetRemovableOverrideStatusesCompletable(List<AgentInstance> idleInstances,\n                                                                                     List<AgentInstanceGroup> scalableInstanceGroups,\n                                                                                     Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById,\n                                                                                     int scaleDownCount)", "full_signature": "private Pair<Integer, Completable> createSetRemovableOverrideStatusesCompletable(List<AgentInstance> idleInstances,\n                                                                                     List<AgentInstanceGroup> scalableInstanceGroups,\n                                                                                     Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById,\n                                                                                     int scaleDownCount)", "class_method_signature": "ClusterAgentAutoScaler.createSetRemovableOverrideStatusesCompletable(List<AgentInstance> idleInstances,\n                                                                                     List<AgentInstanceGroup> scalableInstanceGroups,\n                                                                                     Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById,\n                                                                                     int scaleDownCount)", "testcase": false, "constructor": false}, {"identifier": "createResetOverrideStatusesCompletable", "parameters": "(List<AgentInstance> removableInstances)", "modifiers": "private", "return": "Completable", "signature": "Completable createResetOverrideStatusesCompletable(List<AgentInstance> removableInstances)", "full_signature": "private Completable createResetOverrideStatusesCompletable(List<AgentInstance> removableInstances)", "class_method_signature": "ClusterAgentAutoScaler.createResetOverrideStatusesCompletable(List<AgentInstance> removableInstances)", "testcase": false, "constructor": false}, {"identifier": "getAllJobs", "parameters": "()", "modifiers": "private", "return": "Map<String, Job>", "signature": "Map<String, Job> getAllJobs()", "full_signature": "private Map<String, Job> getAllJobs()", "class_method_signature": "ClusterAgentAutoScaler.getAllJobs()", "testcase": false, "constructor": false}, {"identifier": "getAllTasks", "parameters": "()", "modifiers": "private", "return": "Map<String, Task>", "signature": "Map<String, Task> getAllTasks()", "full_signature": "private Map<String, Task> getAllTasks()", "class_method_signature": "ClusterAgentAutoScaler.getAllTasks()", "testcase": false, "constructor": false}, {"identifier": "getFailedTaskIdsByTier", "parameters": "(Map<FailureKind, Map<T, List<TaskPlacementFailure>>> taskPlacementFailures,\n                                                              Set<FailureKind> ignoring)", "modifiers": "private", "return": "Map<Tier, Set<String>>", "signature": "Map<Tier, Set<String>> getFailedTaskIdsByTier(Map<FailureKind, Map<T, List<TaskPlacementFailure>>> taskPlacementFailures,\n                                                              Set<FailureKind> ignoring)", "full_signature": "private Map<Tier, Set<String>> getFailedTaskIdsByTier(Map<FailureKind, Map<T, List<TaskPlacementFailure>>> taskPlacementFailures,\n                                                              Set<FailureKind> ignoring)", "class_method_signature": "ClusterAgentAutoScaler.getFailedTaskIdsByTier(Map<FailureKind, Map<T, List<TaskPlacementFailure>>> taskPlacementFailures,\n                                                              Set<FailureKind> ignoring)", "testcase": false, "constructor": false}, {"identifier": "getTasksPastSlo", "parameters": "(Set<String> failedTaskIds, Map<String, Task> allTasks, long finish, long elapsed)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getTasksPastSlo(Set<String> failedTaskIds, Map<String, Task> allTasks, long finish, long elapsed)", "full_signature": "private Set<String> getTasksPastSlo(Set<String> failedTaskIds, Map<String, Task> allTasks, long finish, long elapsed)", "class_method_signature": "ClusterAgentAutoScaler.getTasksPastSlo(Set<String> failedTaskIds, Map<String, Task> allTasks, long finish, long elapsed)", "testcase": false, "constructor": false}, {"identifier": "filterOutTaskIdsForScaling", "parameters": "(Set<String> taskIds,\n                                                   Map<String, Job> allJobs,\n                                                   Map<String, Task> allTasks,\n                                                   ResourceDimension resourceDimension)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> filterOutTaskIdsForScaling(Set<String> taskIds,\n                                                   Map<String, Job> allJobs,\n                                                   Map<String, Task> allTasks,\n                                                   ResourceDimension resourceDimension)", "full_signature": "private Set<String> filterOutTaskIdsForScaling(Set<String> taskIds,\n                                                   Map<String, Job> allJobs,\n                                                   Map<String, Task> allTasks,\n                                                   ResourceDimension resourceDimension)", "class_method_signature": "ClusterAgentAutoScaler.filterOutTaskIdsForScaling(Set<String> taskIds,\n                                                   Map<String, Job> allJobs,\n                                                   Map<String, Task> allTasks,\n                                                   ResourceDimension resourceDimension)", "testcase": false, "constructor": false}, {"identifier": "calculateAgentScaleUpCountByDominantResource", "parameters": "(Set<String> taskIds,\n                                                             Map<String, Job> allJobs,\n                                                             Map<String, Task> allTasks,\n                                                             ResourceDimension resourceDimension)", "modifiers": "private", "return": "int", "signature": "int calculateAgentScaleUpCountByDominantResource(Set<String> taskIds,\n                                                             Map<String, Job> allJobs,\n                                                             Map<String, Task> allTasks,\n                                                             ResourceDimension resourceDimension)", "full_signature": "private int calculateAgentScaleUpCountByDominantResource(Set<String> taskIds,\n                                                             Map<String, Job> allJobs,\n                                                             Map<String, Task> allTasks,\n                                                             ResourceDimension resourceDimension)", "class_method_signature": "ClusterAgentAutoScaler.calculateAgentScaleUpCountByDominantResource(Set<String> taskIds,\n                                                             Map<String, Job> allJobs,\n                                                             Map<String, Task> allTasks,\n                                                             ResourceDimension resourceDimension)", "testcase": false, "constructor": false}, {"identifier": "getJobTaskPair", "parameters": "(String taskId, Map<String, Job> allJobs, Map<String, Task> allTasks)", "modifiers": "private", "return": "Pair<Job, Task>", "signature": "Pair<Job, Task> getJobTaskPair(String taskId, Map<String, Job> allJobs, Map<String, Task> allTasks)", "full_signature": "private Pair<Job, Task> getJobTaskPair(String taskId, Map<String, Job> allJobs, Map<String, Task> allTasks)", "class_method_signature": "ClusterAgentAutoScaler.getJobTaskPair(String taskId, Map<String, Job> allJobs, Map<String, Task> allTasks)", "testcase": false, "constructor": false}, {"identifier": "hasIgnoredHardConstraint", "parameters": "(Job job)", "modifiers": "private", "return": "boolean", "signature": "boolean hasIgnoredHardConstraint(Job job)", "full_signature": "private boolean hasIgnoredHardConstraint(Job job)", "class_method_signature": "ClusterAgentAutoScaler.hasIgnoredHardConstraint(Job job)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/clusteroperations/ClusterAgentAutoScaler.java"}, "focal_method": {"identifier": "doAgentScaling", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Completable", "body": "@VisibleForTesting\n    Completable doAgentScaling() {\n        return Completable.defer(() -> {\n            if (!configuration.isAutoScalingAgentsEnabled()) {\n                logger.debug(\"Auto scaling agents is not enabled\");\n                return Completable.complete();\n            }\n\n            List<Completable> actions = new ArrayList<>();\n\n            Map<String, Job> allJobs = getAllJobs();\n            Map<String, Task> allTasks = getAllTasks();\n            List<AgentInstanceGroup> activeInstanceGroups = getActiveInstanceGroups();\n            Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups = getInstancesForInstanceGroups(activeInstanceGroups);\n            Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById = instancesForActiveInstanceGroups.entrySet().stream()\n                    .collect(Collectors.toMap(e -> e.getKey().getId(), Map.Entry::getValue));\n            Map<String, Long> numberOfTasksOnAgents = getNumberOfTasksOnAgents(allTasks.values());\n            Map<Tier, Set<String>> failedTaskIdsByTier = getFailedTaskIdsByTier(\n                    schedulingService.getLastTaskPlacementFailures(), FailureKind.NEVER_TRIGGER_AUTOSCALING\n            );\n\n            long now = clock.wallTime();\n\n            for (Tier tier : Tier.values()) {\n                logger.info(\"Starting scaling actions for tier: {}\", tier);\n                TierAutoScalingConfiguration tierConfiguration = ClusterOperationFunctions.getTierConfiguration(tier, configuration);\n                TierAutoScalerExecution tierAutoScalerExecution = tierTierAutoScalerExecutions.computeIfAbsent(\n                        tier, k -> new TierAutoScalerExecution(tier, titusRuntime.getRegistry())\n                );\n\n                String primaryInstanceType = tierConfiguration.getPrimaryInstanceType();\n                // This will throw an exception if not properly configured\n                ResourceDimension tierResourceDimension = agentManagementService.getResourceLimits(primaryInstanceType);\n\n                List<AgentInstanceGroup> activeScalableInstanceGroupsForTier = activeInstanceGroups.stream()\n                        .filter(ig -> ig.getTier() == tier && ig.getInstanceType().equals(primaryInstanceType))\n                        .collect(Collectors.toList());\n                logger.info(\"{} active instance groups({}): {}\", tier, activeScalableInstanceGroupsForTier.size(), activeScalableInstanceGroupsForTier);\n\n                List<AgentInstance> idleInstancesForTier = getIdleInstancesForTier(tier, primaryInstanceType,\n                        instancesForActiveInstanceGroups, numberOfTasksOnAgents, now, tierConfiguration.getIdleInstanceGracePeriodMs());\n                tierAutoScalerExecution.getTotalIdleInstancesGauge().set(idleInstancesForTier.size());\n                logger.info(\"{} idle instances({}): {}\", tier, idleInstancesForTier.size(), idleInstancesForTier);\n\n                Set<String> failedTaskIds = failedTaskIdsByTier.getOrDefault(tier, Collections.emptySet());\n                tierAutoScalerExecution.getTotalFailedTasksGauge().set(failedTaskIds.size());\n                logger.info(\"{} failed tasks({}): {}\", tier, failedTaskIds.size(), failedTaskIds);\n\n                int agentCountToScaleUp = 0;\n                Set<String> potentialTaskIdsForScaleUp = new HashSet<>();\n\n                boolean usedScaleUpCooldown = false;\n                if (hasTimeElapsed(tierAutoScalerExecution.getLastScaleUp().get(), now, tierConfiguration.getScaleUpCoolDownMs())) {\n                    int minIdleForTier = tierConfiguration.getMinIdle();\n                    if (idleInstancesForTier.size() < minIdleForTier) {\n                        int instancesNeededForMinIdle = minIdleForTier - idleInstancesForTier.size();\n                        logger.info(\"{} needs {} instances to satisfy min idle {}\", tier, instancesNeededForMinIdle, minIdleForTier);\n                        agentCountToScaleUp += instancesNeededForMinIdle;\n                    }\n\n                    Set<String> placementFailureTaskIds = getFailedTaskIdsByTier(\n                            schedulingService.getLastTaskPlacementFailures(), IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD\n                    ).getOrDefault(tier, Collections.emptySet());\n                    logger.info(\"{} had the placement excluding launch guard failures({}): {}\", tier, placementFailureTaskIds.size(), placementFailureTaskIds);\n\n                    Set<String> scalablePlacementFailureTaskIds = filterOutTaskIdsForScaling(placementFailureTaskIds, allJobs, allTasks, tierResourceDimension);\n                    logger.info(\"{} had the scalable placement failures({}): {}\", tier, scalablePlacementFailureTaskIds.size(), scalablePlacementFailureTaskIds);\n                    potentialTaskIdsForScaleUp.addAll(scalablePlacementFailureTaskIds);\n\n                    if (agentCountToScaleUp > 0 || !scalablePlacementFailureTaskIds.isEmpty()) {\n                        usedScaleUpCooldown = true;\n                    }\n                }\n\n                Set<String> tasksPastSlo = getTasksPastSlo(failedTaskIds, allTasks, now, tierConfiguration.getTaskSloMs());\n                Set<String> scalableTasksPastSlo = filterOutTaskIdsForScaling(tasksPastSlo, allJobs, allTasks, tierResourceDimension);\n                tierAutoScalerExecution.getTotalTasksPastSloGauge().set(scalableTasksPastSlo.size());\n                logger.info(\"{} had tasks past slo({}): {}\", tier, scalableTasksPastSlo.size(), scalableTasksPastSlo);\n                potentialTaskIdsForScaleUp.addAll(scalableTasksPastSlo);\n\n                Set<String> taskIdsForScaleUp = new HashSet<>();\n                for (String taskId : potentialTaskIdsForScaleUp) {\n                    boolean previouslyScaledFor = taskIdsForPreviousScaleUps.getIfPresent(taskId) != null;\n                    if (!previouslyScaledFor) {\n                        taskIdsForScaleUp.add(taskId);\n                        taskIdsForPreviousScaleUps.put(taskId, taskId);\n                    }\n                }\n\n                tierAutoScalerExecution.getTotalTasksForScaleUpGauge().set(taskIdsForScaleUp.size());\n                logger.info(\"{} had tasks to scale up({}): {}\", tier, taskIdsForScaleUp.size(), taskIdsForScaleUp);\n\n                int agentScaleUpCountByDominantResource = calculateAgentScaleUpCountByDominantResource(taskIdsForScaleUp, allJobs, allTasks, tierResourceDimension);\n                logger.info(\"{} needs {} instances based on dominant resource\", tier, agentScaleUpCountByDominantResource);\n\n                agentCountToScaleUp += agentScaleUpCountByDominantResource;\n                logger.info(\"{} needs {} instances\", tier, agentCountToScaleUp);\n                tierAutoScalerExecution.getTotalAgentsToScaleUpGauge().set(agentCountToScaleUp);\n                boolean scalingUp = false;\n\n                if (agentCountToScaleUp > 0) {\n                    long maxTokensToTake = Math.min(SCALE_UP_TOKEN_BUCKET_CAPACITY, agentCountToScaleUp);\n                    Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleUpTokenBucket().tryTake(1, maxTokensToTake);\n                    if (takeOpt.isPresent()) {\n                        Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get();\n                        tierAutoScalerExecution.setLastScaleUpTokenBucket(takePair.getRight());\n                        long tokensAvailable = takePair.getLeft();\n                        Pair<Integer, Completable> scaleUpPair = createScaleUpCompletable(activeScalableInstanceGroupsForTier, (int) tokensAvailable);\n                        Integer agentCountBeingScaled = scaleUpPair.getLeft();\n                        tierAutoScalerExecution.getTotalAgentsBeingScaledUpGauge().set(agentCountBeingScaled);\n                        if (agentCountBeingScaled > 0) {\n                            actions.add(scaleUpPair.getRight());\n                            logger.info(\"Attempting to scale up {} tier by {} agent instances\", tier, agentCountBeingScaled);\n                            scalingUp = true;\n                            if (usedScaleUpCooldown) {\n                                tierAutoScalerExecution.getLastScaleUp().set(clock.wallTime());\n                            }\n                        }\n                    }\n                }\n\n                if (!scalingUp && hasTimeElapsed(tierAutoScalerExecution.getLastScaleDown().get(), now, tierConfiguration.getScaleDownCoolDownMs())) {\n                    int agentCountToScaleDown = 0;\n                    int maxIdleForTier = tierConfiguration.getMaxIdle();\n                    if (idleInstancesForTier.size() > maxIdleForTier) {\n                        int instancesNotNeededForMaxIdle = idleInstancesForTier.size() - maxIdleForTier;\n                        logger.info(\"{} can remove {} instances to satisfy max idle {}\", tier, instancesNotNeededForMaxIdle, maxIdleForTier);\n                        agentCountToScaleDown += instancesNotNeededForMaxIdle;\n                    }\n\n                    tierAutoScalerExecution.getTotalAgentsToScaleDownGauge().set(agentCountToScaleDown);\n\n                    if (agentCountToScaleDown > 0) {\n                        long maxTokensToTake = Math.min(SCALE_DOWN_TOKEN_BUCKET_CAPACITY, agentCountToScaleDown);\n                        Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleDownTokenBucket().tryTake(1, maxTokensToTake);\n                        if (takeOpt.isPresent()) {\n                            Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get();\n                            tierAutoScalerExecution.setLastScaleDownTokenBucket(takePair.getRight());\n                            long tokensAvailable = takePair.getLeft();\n                            Pair<Integer, Completable> scaleDownPair = createSetRemovableOverrideStatusesCompletable(idleInstancesForTier,\n                                    activeScalableInstanceGroupsForTier, instancesForActiveInstanceGroupsById, (int) tokensAvailable);\n                            Integer agentCountBeingScaledDown = scaleDownPair.getLeft();\n                            tierAutoScalerExecution.getTotalAgentsBeingScaledDownGauge().set(agentCountBeingScaledDown);\n                            if (agentCountBeingScaledDown > 0) {\n                                actions.add(scaleDownPair.getRight());\n                                logger.info(\"Attempting to scale down {} tier by {} agent instances\", tier, agentCountBeingScaledDown);\n                                tierAutoScalerExecution.getLastScaleDown().set(clock.wallTime());\n                            }\n                        }\n                    }\n                }\n                logger.info(\"Finishing scaling actions for tier: {}\", tier);\n            }\n\n            List<AgentInstance> removableInstancesPastElapsedTime = getRemovableInstancesPastElapsedTime(instancesForActiveInstanceGroups,\n                    now, configuration.getAgentInstanceRemovableTimeoutMs());\n            logger.info(\"Removable instances past elapsed time({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime);\n\n            if (!removableInstancesPastElapsedTime.isEmpty()) {\n                actions.add(createResetOverrideStatusesCompletable(removableInstancesPastElapsedTime));\n                logger.info(\"Resetting agent instances({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime);\n            }\n\n            return actions.isEmpty() ? Completable.complete() : Completable.concat(actions);\n        }).doOnCompleted(() -> logger.debug(\"Completed scaling agents\"))\n                .timeout(CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    }", "signature": "Completable doAgentScaling()", "full_signature": "@VisibleForTesting Completable doAgentScaling()", "class_method_signature": "ClusterAgentAutoScaler.doAgentScaling()", "testcase": false, "constructor": false, "invocations": ["timeout", "doOnCompleted", "defer", "isAutoScalingAgentsEnabled", "debug", "complete", "getAllJobs", "getAllTasks", "getActiveInstanceGroups", "getInstancesForInstanceGroups", "collect", "stream", "entrySet", "toMap", "getId", "getKey", "getNumberOfTasksOnAgents", "values", "getFailedTaskIdsByTier", "getLastTaskPlacementFailures", "wallTime", "values", "info", "getTierConfiguration", "computeIfAbsent", "getRegistry", "getPrimaryInstanceType", "getResourceLimits", "collect", "filter", "stream", "getTier", "equals", "getInstanceType", "toList", "info", "size", "getIdleInstancesForTier", "getIdleInstanceGracePeriodMs", "set", "getTotalIdleInstancesGauge", "size", "info", "size", "getOrDefault", "emptySet", "set", "getTotalFailedTasksGauge", "size", "info", "size", "hasTimeElapsed", "get", "getLastScaleUp", "getScaleUpCoolDownMs", "getMinIdle", "size", "size", "info", "getOrDefault", "getFailedTaskIdsByTier", "getLastTaskPlacementFailures", "emptySet", "info", "size", "filterOutTaskIdsForScaling", "info", "size", "addAll", "isEmpty", "getTasksPastSlo", "getTaskSloMs", "filterOutTaskIdsForScaling", "set", "getTotalTasksPastSloGauge", "size", "info", "size", "addAll", "getIfPresent", "add", "put", "set", "getTotalTasksForScaleUpGauge", "size", "info", "size", "calculateAgentScaleUpCountByDominantResource", "info", "info", "set", "getTotalAgentsToScaleUpGauge", "min", "tryTake", "getLastScaleUpTokenBucket", "isPresent", "get", "setLastScaleUpTokenBucket", "getRight", "getLeft", "createScaleUpCompletable", "getLeft", "set", "getTotalAgentsBeingScaledUpGauge", "add", "getRight", "info", "set", "getLastScaleUp", "wallTime", "hasTimeElapsed", "get", "getLastScaleDown", "getScaleDownCoolDownMs", "getMaxIdle", "size", "size", "info", "set", "getTotalAgentsToScaleDownGauge", "min", "tryTake", "getLastScaleDownTokenBucket", "isPresent", "get", "setLastScaleDownTokenBucket", "getRight", "getLeft", "createSetRemovableOverrideStatusesCompletable", "getLeft", "set", "getTotalAgentsBeingScaledDownGauge", "add", "getRight", "info", "set", "getLastScaleDown", "wallTime", "info", "getRemovableInstancesPastElapsedTime", "getAgentInstanceRemovableTimeoutMs", "info", "size", "isEmpty", "add", "createResetOverrideStatusesCompletable", "info", "size", "isEmpty", "complete", "concat", "debug"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}