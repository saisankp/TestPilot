{"test_class": {"identifier": "JmsQueueMonitorTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private JmsQueueMonitorTask underTest;", "modifier": "@InjectMocks\n    private", "type": "JmsQueueMonitorTask", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private JmxConnectionBuilder jmxConnectionBuilder;", "modifier": "@Mock\n    private", "type": "JmxConnectionBuilder", "declarator": "jmxConnectionBuilder", "var_name": "jmxConnectionBuilder"}, {"original_string": "@Mock\n    private JmxObjectNameProvider jmxObjectNameProvider;", "modifier": "@Mock\n    private", "type": "JmxObjectNameProvider", "declarator": "jmxObjectNameProvider", "var_name": "jmxObjectNameProvider"}, {"original_string": "@Mock\n    private MBeanServerConnection mBeanServerConnection;", "modifier": "@Mock\n    private", "type": "MBeanServerConnection", "declarator": "mBeanServerConnection", "var_name": "mBeanServerConnection"}, {"original_string": "@Mock\n    private ObjectName responseQueue;", "modifier": "@Mock\n    private", "type": "ObjectName", "declarator": "responseQueue", "var_name": "responseQueue"}, {"original_string": "@Mock\n    private ObjectName loggerQueue;", "modifier": "@Mock\n    private", "type": "ObjectName", "declarator": "loggerQueue", "var_name": "loggerQueue"}, {"original_string": "@Mock\n    private ObjectName dlqQueue;", "modifier": "@Mock\n    private", "type": "ObjectName", "declarator": "dlqQueue", "var_name": "dlqQueue"}, {"original_string": "@Mock\n    private ObjectName amqObject;", "modifier": "@Mock\n    private", "type": "ObjectName", "declarator": "amqObject", "var_name": "amqObject"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private SafeguardController safeguardController;", "modifier": "@Mock\n    private", "type": "SafeguardController", "declarator": "safeguardController", "var_name": "safeguardController"}, {"original_string": "@Mock\n    private SafeguardConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "SafeguardConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDTO propertyDTO;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "propertyDTO", "var_name": "propertyDTO"}, {"original_string": "@Mock\n    private QueueSizeProvider queueSizeProvider;", "modifier": "@Mock\n    private", "type": "QueueSizeProvider", "declarator": "queueSizeProvider", "var_name": "queueSizeProvider"}], "file": "wilma-application/modules/wilma-safeguard/src/test/java/com/epam/wilma/safeguard/monitor/JmsQueueMonitorTaskTest.java"}, "test_case": {"identifier": "testRunShouldSwitchMWAndFIOnWhenQueueSizeDroppedBelowFILimit", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testRunShouldSwitchMWAndFIOnWhenQueueSizeDroppedBelowFILimit() throws Exception {\n        // GIVEN\n        Whitebox.setInternalState(underTest, \"fIDecompressionEnabled\", false);\n        Whitebox.setInternalState(underTest, \"messageWritingEnabled\", false);\n        given(mBeanServerConnection.getAttribute(responseQueue, \"QueueSize\")).willReturn(new Long(2));\n        given(mBeanServerConnection.getAttribute(loggerQueue, \"QueueSize\")).willReturn(new Long(3));\n        given(mBeanServerConnection.getAttribute(dlqQueue, \"QueueSize\")).willReturn(new Long(0));\n        given(mBeanServerConnection.getAttribute(amqObject, \"MemoryPercentUsage\")).willReturn(new Integer(0));\n        // WHEN\n        underTest.run();\n        // THEN\n        verify(logger, never()).info(\"Due to High load, FI decompression is turned OFF.\");\n        verify(logger, never()).info(\"Due to High load, Message Logging is turned OFF.\");\n        verify(logger).info(\"Due to Normal load, Message Logging is restored.\");\n        verify(logger).info(\"Due to Normal load, FI decompression is restored.\");\n    }", "signature": "void testRunShouldSwitchMWAndFIOnWhenQueueSizeDroppedBelowFILimit()", "full_signature": "@Test public final void testRunShouldSwitchMWAndFIOnWhenQueueSizeDroppedBelowFILimit()", "class_method_signature": "JmsQueueMonitorTaskTest.testRunShouldSwitchMWAndFIOnWhenQueueSizeDroppedBelowFILimit()", "testcase": true, "constructor": false, "invocations": ["setInternalState", "setInternalState", "willReturn", "given", "getAttribute", "willReturn", "given", "getAttribute", "willReturn", "given", "getAttribute", "willReturn", "given", "getAttribute", "run", "info", "verify", "never", "info", "verify", "never", "info", "verify", "info", "verify"]}, "focal_class": {"identifier": "JmsQueueMonitorTask", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "static final String JMX_SERVICE_PRE_URL = \"service:jmx:rmi:///jndi/rmi://localhost:\";", "modifier": "static final", "type": "String", "declarator": "JMX_SERVICE_PRE_URL = \"service:jmx:rmi:///jndi/rmi://localhost:\"", "var_name": "JMX_SERVICE_PRE_URL"}, {"original_string": "static final String JMX_SERVICE_POST_URL = \"/jmxrmi\";", "modifier": "static final", "type": "String", "declarator": "JMX_SERVICE_POST_URL = \"/jmxrmi\"", "var_name": "JMX_SERVICE_POST_URL"}, {"original_string": "static final String RESPONSE_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=responseQueue\";", "modifier": "static final", "type": "String", "declarator": "RESPONSE_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=responseQueue\"", "var_name": "RESPONSE_QUEUE_OBJECT_NAME"}, {"original_string": "static final String LOGGER_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=loggerQueue\";", "modifier": "static final", "type": "String", "declarator": "LOGGER_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=loggerQueue\"", "var_name": "LOGGER_QUEUE_OBJECT_NAME"}, {"original_string": "static final String DLQ_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=ActiveMQ.DLQ\";", "modifier": "static final", "type": "String", "declarator": "DLQ_QUEUE_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=ActiveMQ.DLQ\"", "var_name": "DLQ_QUEUE_OBJECT_NAME"}, {"original_string": "static final String AMQ_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost\";", "modifier": "static final", "type": "String", "declarator": "AMQ_OBJECT_NAME = \"org.apache.activemq:type=Broker,brokerName=localhost\"", "var_name": "AMQ_OBJECT_NAME"}, {"original_string": "static final String QUEUE_SIZE_TEXT = \"QueueSize\";", "modifier": "static final", "type": "String", "declarator": "QUEUE_SIZE_TEXT = \"QueueSize\"", "var_name": "QUEUE_SIZE_TEXT"}, {"original_string": "static final Integer MAX_AMQ_MEMORY_USAGE = Integer.valueOf(95);", "modifier": "static final", "type": "Integer", "declarator": "MAX_AMQ_MEMORY_USAGE = Integer.valueOf(95)", "var_name": "MAX_AMQ_MEMORY_USAGE"}, {"original_string": "static final Long MAX_MULTIPLIER_OF_MESSAGE_OFF_LIMIT = Long.valueOf(4);", "modifier": "static final", "type": "Long", "declarator": "MAX_MULTIPLIER_OF_MESSAGE_OFF_LIMIT = Long.valueOf(4)", "var_name": "MAX_MULTIPLIER_OF_MESSAGE_OFF_LIMIT"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(JmsQueueMonitorTask.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JmsQueueMonitorTask.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private JmxConnectionBuilder jmxConnectionBuilder;", "modifier": "@Autowired\n    private", "type": "JmxConnectionBuilder", "declarator": "jmxConnectionBuilder", "var_name": "jmxConnectionBuilder"}, {"original_string": "@Autowired\n    private JmxObjectNameProvider jmxObjectNameProvider;", "modifier": "@Autowired\n    private", "type": "JmxObjectNameProvider", "declarator": "jmxObjectNameProvider", "var_name": "jmxObjectNameProvider"}, {"original_string": "@Autowired\n    private SafeguardController safeguardController;", "modifier": "@Autowired\n    private", "type": "SafeguardController", "declarator": "safeguardController", "var_name": "safeguardController"}, {"original_string": "@Autowired\n    private SafeguardConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "SafeguardConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Autowired\n    private QueueSizeProvider queueSizeProvider;", "modifier": "@Autowired\n    private", "type": "QueueSizeProvider", "declarator": "queueSizeProvider", "var_name": "queueSizeProvider"}, {"original_string": "private SafeguardLimits safeguardLimits;", "modifier": "private", "type": "SafeguardLimits", "declarator": "safeguardLimits", "var_name": "safeguardLimits"}, {"original_string": "private MBeanServerConnection mBeanServerConnection;", "modifier": "private", "type": "MBeanServerConnection", "declarator": "mBeanServerConnection", "var_name": "mBeanServerConnection"}, {"original_string": "private ObjectName responseQueue;", "modifier": "private", "type": "ObjectName", "declarator": "responseQueue", "var_name": "responseQueue"}, {"original_string": "private ObjectName loggerQueue;", "modifier": "private", "type": "ObjectName", "declarator": "loggerQueue", "var_name": "loggerQueue"}, {"original_string": "private ObjectName dlqQueue;", "modifier": "private", "type": "ObjectName", "declarator": "dlqQueue", "var_name": "dlqQueue"}, {"original_string": "private ObjectName amqObject;", "modifier": "private", "type": "ObjectName", "declarator": "amqObject", "var_name": "amqObject"}, {"original_string": "private boolean fIDecompressionEnabled = true;", "modifier": "private", "type": "boolean", "declarator": "fIDecompressionEnabled = true", "var_name": "fIDecompressionEnabled"}, {"original_string": "private boolean messageWritingEnabled = true;", "modifier": "private", "type": "boolean", "declarator": "messageWritingEnabled = true", "var_name": "messageWritingEnabled"}], "methods": [{"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "JmsQueueMonitorTask.run()", "testcase": false, "constructor": false}, {"identifier": "resetDlqAsNecessary", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetDlqAsNecessary()", "full_signature": "private void resetDlqAsNecessary()", "class_method_signature": "JmsQueueMonitorTask.resetDlqAsNecessary()", "testcase": false, "constructor": false}, {"identifier": "resetAMQueueAsNecessary", "parameters": "(final Long totalQueueSize)", "modifiers": "private", "return": "void", "signature": "void resetAMQueueAsNecessary(final Long totalQueueSize)", "full_signature": "private void resetAMQueueAsNecessary(final Long totalQueueSize)", "class_method_signature": "JmsQueueMonitorTask.resetAMQueueAsNecessary(final Long totalQueueSize)", "testcase": false, "constructor": false}, {"identifier": "getSafeguardLimits", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getSafeguardLimits()", "full_signature": "private void getSafeguardLimits()", "class_method_signature": "JmsQueueMonitorTask.getSafeguardLimits()", "testcase": false, "constructor": false}, {"identifier": "setSafeguardFlags", "parameters": "(final Long totalQueueSize)", "modifiers": "private", "return": "void", "signature": "void setSafeguardFlags(final Long totalQueueSize)", "full_signature": "private void setSafeguardFlags(final Long totalQueueSize)", "class_method_signature": "JmsQueueMonitorTask.setSafeguardFlags(final Long totalQueueSize)", "testcase": false, "constructor": false}, {"identifier": "retrieveQuerySize", "parameters": "()", "modifiers": "private", "return": "Long", "signature": "Long retrieveQuerySize()", "full_signature": "private Long retrieveQuerySize()", "class_method_signature": "JmsQueueMonitorTask.retrieveQuerySize()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-safeguard/src/main/java/com/epam/wilma/safeguard/monitor/JmsQueueMonitorTask.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        getSafeguardLimits();\n\n        String jmxServiceUrl = JMX_SERVICE_PRE_URL + safeguardLimits.getJmxPort() + JMX_SERVICE_POST_URL;\n\n        if (mBeanServerConnection == null || responseQueue == null || loggerQueue == null || dlqQueue == null || amqObject == null) {\n            mBeanServerConnection = jmxConnectionBuilder.buildMBeanServerConnection(jmxServiceUrl);\n            responseQueue = jmxObjectNameProvider.getObjectName(RESPONSE_QUEUE_OBJECT_NAME);\n            loggerQueue = jmxObjectNameProvider.getObjectName(LOGGER_QUEUE_OBJECT_NAME);\n            dlqQueue = jmxObjectNameProvider.getObjectName(DLQ_QUEUE_OBJECT_NAME);\n            amqObject = jmxObjectNameProvider.getObjectName(AMQ_OBJECT_NAME);\n        }\n\n        Long totalQueueSize = retrieveQuerySize();\n\n        setSafeguardFlags(totalQueueSize);\n\n        resetDlqAsNecessary();\n        resetAMQueueAsNecessary(totalQueueSize);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "JmsQueueMonitorTask.run()", "testcase": false, "constructor": false, "invocations": ["getSafeguardLimits", "getJmxPort", "buildMBeanServerConnection", "getObjectName", "getObjectName", "getObjectName", "getObjectName", "retrieveQuerySize", "setSafeguardFlags", "resetDlqAsNecessary", "resetAMQueueAsNecessary"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}