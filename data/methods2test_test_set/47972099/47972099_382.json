{"test_class": {"identifier": "JobGraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/jobgraph/JobGraphTest.java"}, "test_case": {"identifier": "testTopologicalSort1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTopologicalSort1() {\n\t\ttry {\n\t\t\tJobVertex source1 = new JobVertex(\"source1\");\n\t\t\tJobVertex source2 = new JobVertex(\"source2\");\n\t\t\tJobVertex target1 = new JobVertex(\"target1\");\n\t\t\tJobVertex target2 = new JobVertex(\"target2\");\n\t\t\tJobVertex intermediate1 = new JobVertex(\"intermediate1\");\n\t\t\tJobVertex intermediate2 = new JobVertex(\"intermediate2\");\n\t\t\t\n\t\t\ttarget1.connectNewDataSetAsInput(source1, DistributionPattern.POINTWISE);\n\t\t\ttarget2.connectNewDataSetAsInput(source1, DistributionPattern.POINTWISE);\n\t\t\ttarget2.connectNewDataSetAsInput(intermediate2, DistributionPattern.POINTWISE);\n\t\t\tintermediate2.connectNewDataSetAsInput(intermediate1, DistributionPattern.POINTWISE);\n\t\t\tintermediate1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE);\n\t\t\t\n\t\t\tJobGraph graph = new JobGraph(\"TestGraph\", source1, source2, intermediate1, intermediate2, target1, target2);\n\t\t\tList<JobVertex> sorted = graph.getVerticesSortedTopologicallyFromSources();\n\t\t\t\n\t\t\tassertEquals(6, sorted.size());\n\t\t\t\n\t\t\tassertBefore(source1, target1, sorted);\n\t\t\tassertBefore(source1, target2, sorted);\n\t\t\tassertBefore(source2, target2, sorted);\n\t\t\tassertBefore(source2, intermediate1, sorted);\n\t\t\tassertBefore(source2, intermediate2, sorted);\n\t\t\tassertBefore(intermediate1, target2, sorted);\n\t\t\tassertBefore(intermediate2, target2, sorted);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testTopologicalSort1()", "full_signature": "@Test public void testTopologicalSort1()", "class_method_signature": "JobGraphTest.testTopologicalSort1()", "testcase": true, "constructor": false, "invocations": ["connectNewDataSetAsInput", "connectNewDataSetAsInput", "connectNewDataSetAsInput", "connectNewDataSetAsInput", "connectNewDataSetAsInput", "getVerticesSortedTopologicallyFromSources", "assertEquals", "size", "assertBefore", "assertBefore", "assertBefore", "assertBefore", "assertBefore", "assertBefore", "assertBefore", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "JobGraph", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Map<JobVertexID, JobVertex> taskVertices = new LinkedHashMap<JobVertexID, JobVertex>();", "modifier": "private final", "type": "Map<JobVertexID, JobVertex>", "declarator": "taskVertices = new LinkedHashMap<JobVertexID, JobVertex>()", "var_name": "taskVertices"}, {"original_string": "private final Configuration jobConfiguration = new Configuration();", "modifier": "private final", "type": "Configuration", "declarator": "jobConfiguration = new Configuration()", "var_name": "jobConfiguration"}, {"original_string": "private final List<Path> userJars = new ArrayList<Path>();", "modifier": "private final", "type": "List<Path>", "declarator": "userJars = new ArrayList<Path>()", "var_name": "userJars"}, {"original_string": "private final List<BlobKey> userJarBlobKeys = new ArrayList<BlobKey>();", "modifier": "private final", "type": "List<BlobKey>", "declarator": "userJarBlobKeys = new ArrayList<BlobKey>()", "var_name": "userJarBlobKeys"}, {"original_string": "private final JobID jobID;", "modifier": "private final", "type": "JobID", "declarator": "jobID", "var_name": "jobID"}, {"original_string": "private final String jobName;", "modifier": "private final", "type": "String", "declarator": "jobName", "var_name": "jobName"}, {"original_string": "private RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration;", "modifier": "private", "type": "RestartStrategies.RestartStrategyConfiguration", "declarator": "restartStrategyConfiguration", "var_name": "restartStrategyConfiguration"}, {"original_string": "private long sessionTimeout = 0;", "modifier": "private", "type": "long", "declarator": "sessionTimeout = 0", "var_name": "sessionTimeout"}, {"original_string": "private boolean allowQueuedScheduling;", "modifier": "private", "type": "boolean", "declarator": "allowQueuedScheduling", "var_name": "allowQueuedScheduling"}, {"original_string": "private ScheduleMode scheduleMode = ScheduleMode.FROM_SOURCES;", "modifier": "private", "type": "ScheduleMode", "declarator": "scheduleMode = ScheduleMode.FROM_SOURCES", "var_name": "scheduleMode"}, {"original_string": "private JobSnapshottingSettings snapshotSettings;", "modifier": "private", "type": "JobSnapshottingSettings", "declarator": "snapshotSettings", "var_name": "snapshotSettings"}, {"original_string": "private List<URL> classpaths = Collections.<URL>emptyList();", "modifier": "private", "type": "List<URL>", "declarator": "classpaths = Collections.<URL>emptyList()", "var_name": "classpaths"}], "methods": [{"identifier": "JobGraph", "parameters": "()", "modifiers": "public", "return": "", "signature": " JobGraph()", "full_signature": "public  JobGraph()", "class_method_signature": "JobGraph.JobGraph()", "testcase": false, "constructor": true}, {"identifier": "JobGraph", "parameters": "(String jobName)", "modifiers": "public", "return": "", "signature": " JobGraph(String jobName)", "full_signature": "public  JobGraph(String jobName)", "class_method_signature": "JobGraph.JobGraph(String jobName)", "testcase": false, "constructor": true}, {"identifier": "JobGraph", "parameters": "(JobID jobId, String jobName)", "modifiers": "public", "return": "", "signature": " JobGraph(JobID jobId, String jobName)", "full_signature": "public  JobGraph(JobID jobId, String jobName)", "class_method_signature": "JobGraph.JobGraph(JobID jobId, String jobName)", "testcase": false, "constructor": true}, {"identifier": "JobGraph", "parameters": "(JobVertex... vertices)", "modifiers": "public", "return": "", "signature": " JobGraph(JobVertex... vertices)", "full_signature": "public  JobGraph(JobVertex... vertices)", "class_method_signature": "JobGraph.JobGraph(JobVertex... vertices)", "testcase": false, "constructor": true}, {"identifier": "JobGraph", "parameters": "(String jobName, JobVertex... vertices)", "modifiers": "public", "return": "", "signature": " JobGraph(String jobName, JobVertex... vertices)", "full_signature": "public  JobGraph(String jobName, JobVertex... vertices)", "class_method_signature": "JobGraph.JobGraph(String jobName, JobVertex... vertices)", "testcase": false, "constructor": true}, {"identifier": "JobGraph", "parameters": "(JobID jobId, String jobName, JobVertex... vertices)", "modifiers": "public", "return": "", "signature": " JobGraph(JobID jobId, String jobName, JobVertex... vertices)", "full_signature": "public  JobGraph(JobID jobId, String jobName, JobVertex... vertices)", "class_method_signature": "JobGraph.JobGraph(JobID jobId, String jobName, JobVertex... vertices)", "testcase": false, "constructor": true}, {"identifier": "getJobID", "parameters": "()", "modifiers": "public", "return": "JobID", "signature": "JobID getJobID()", "full_signature": "public JobID getJobID()", "class_method_signature": "JobGraph.getJobID()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "JobGraph.getName()", "testcase": false, "constructor": false}, {"identifier": "getJobConfiguration", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getJobConfiguration()", "full_signature": "public Configuration getJobConfiguration()", "class_method_signature": "JobGraph.getJobConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setRestartStrategyConfiguration", "parameters": "(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration)", "modifiers": "public", "return": "void", "signature": "void setRestartStrategyConfiguration(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration)", "full_signature": "public void setRestartStrategyConfiguration(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration)", "class_method_signature": "JobGraph.setRestartStrategyConfiguration(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getRestartStrategyConfiguration", "parameters": "()", "modifiers": "public", "return": "RestartStrategies.RestartStrategyConfiguration", "signature": "RestartStrategies.RestartStrategyConfiguration getRestartStrategyConfiguration()", "full_signature": "public RestartStrategies.RestartStrategyConfiguration getRestartStrategyConfiguration()", "class_method_signature": "JobGraph.getRestartStrategyConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getSessionTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSessionTimeout()", "full_signature": "public long getSessionTimeout()", "class_method_signature": "JobGraph.getSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "setSessionTimeout", "parameters": "(long sessionTimeout)", "modifiers": "public", "return": "void", "signature": "void setSessionTimeout(long sessionTimeout)", "full_signature": "public void setSessionTimeout(long sessionTimeout)", "class_method_signature": "JobGraph.setSessionTimeout(long sessionTimeout)", "testcase": false, "constructor": false}, {"identifier": "setAllowQueuedScheduling", "parameters": "(boolean allowQueuedScheduling)", "modifiers": "public", "return": "void", "signature": "void setAllowQueuedScheduling(boolean allowQueuedScheduling)", "full_signature": "public void setAllowQueuedScheduling(boolean allowQueuedScheduling)", "class_method_signature": "JobGraph.setAllowQueuedScheduling(boolean allowQueuedScheduling)", "testcase": false, "constructor": false}, {"identifier": "getAllowQueuedScheduling", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAllowQueuedScheduling()", "full_signature": "public boolean getAllowQueuedScheduling()", "class_method_signature": "JobGraph.getAllowQueuedScheduling()", "testcase": false, "constructor": false}, {"identifier": "setScheduleMode", "parameters": "(ScheduleMode scheduleMode)", "modifiers": "public", "return": "void", "signature": "void setScheduleMode(ScheduleMode scheduleMode)", "full_signature": "public void setScheduleMode(ScheduleMode scheduleMode)", "class_method_signature": "JobGraph.setScheduleMode(ScheduleMode scheduleMode)", "testcase": false, "constructor": false}, {"identifier": "getScheduleMode", "parameters": "()", "modifiers": "public", "return": "ScheduleMode", "signature": "ScheduleMode getScheduleMode()", "full_signature": "public ScheduleMode getScheduleMode()", "class_method_signature": "JobGraph.getScheduleMode()", "testcase": false, "constructor": false}, {"identifier": "addVertex", "parameters": "(JobVertex vertex)", "modifiers": "public", "return": "void", "signature": "void addVertex(JobVertex vertex)", "full_signature": "public void addVertex(JobVertex vertex)", "class_method_signature": "JobGraph.addVertex(JobVertex vertex)", "testcase": false, "constructor": false}, {"identifier": "getVertices", "parameters": "()", "modifiers": "public", "return": "Iterable<JobVertex>", "signature": "Iterable<JobVertex> getVertices()", "full_signature": "public Iterable<JobVertex> getVertices()", "class_method_signature": "JobGraph.getVertices()", "testcase": false, "constructor": false}, {"identifier": "getVerticesAsArray", "parameters": "()", "modifiers": "public", "return": "JobVertex[]", "signature": "JobVertex[] getVerticesAsArray()", "full_signature": "public JobVertex[] getVerticesAsArray()", "class_method_signature": "JobGraph.getVerticesAsArray()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfVertices", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfVertices()", "full_signature": "public int getNumberOfVertices()", "class_method_signature": "JobGraph.getNumberOfVertices()", "testcase": false, "constructor": false}, {"identifier": "setSnapshotSettings", "parameters": "(JobSnapshottingSettings settings)", "modifiers": "public", "return": "void", "signature": "void setSnapshotSettings(JobSnapshottingSettings settings)", "full_signature": "public void setSnapshotSettings(JobSnapshottingSettings settings)", "class_method_signature": "JobGraph.setSnapshotSettings(JobSnapshottingSettings settings)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSettings", "parameters": "()", "modifiers": "public", "return": "JobSnapshottingSettings", "signature": "JobSnapshottingSettings getSnapshotSettings()", "full_signature": "public JobSnapshottingSettings getSnapshotSettings()", "class_method_signature": "JobGraph.getSnapshotSettings()", "testcase": false, "constructor": false}, {"identifier": "findVertexByID", "parameters": "(JobVertexID id)", "modifiers": "public", "return": "JobVertex", "signature": "JobVertex findVertexByID(JobVertexID id)", "full_signature": "public JobVertex findVertexByID(JobVertexID id)", "class_method_signature": "JobGraph.findVertexByID(JobVertexID id)", "testcase": false, "constructor": false}, {"identifier": "setClasspaths", "parameters": "(List<URL> paths)", "modifiers": "public", "return": "void", "signature": "void setClasspaths(List<URL> paths)", "full_signature": "public void setClasspaths(List<URL> paths)", "class_method_signature": "JobGraph.setClasspaths(List<URL> paths)", "testcase": false, "constructor": false}, {"identifier": "getClasspaths", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getClasspaths()", "full_signature": "public List<URL> getClasspaths()", "class_method_signature": "JobGraph.getClasspaths()", "testcase": false, "constructor": false}, {"identifier": "setSavepointPath", "parameters": "(String savepointPath)", "modifiers": "public", "return": "void", "signature": "void setSavepointPath(String savepointPath)", "full_signature": "public void setSavepointPath(String savepointPath)", "class_method_signature": "JobGraph.setSavepointPath(String savepointPath)", "testcase": false, "constructor": false}, {"identifier": "getVerticesSortedTopologicallyFromSources", "parameters": "()", "modifiers": "public", "return": "List<JobVertex>", "signature": "List<JobVertex> getVerticesSortedTopologicallyFromSources()", "full_signature": "public List<JobVertex> getVerticesSortedTopologicallyFromSources()", "class_method_signature": "JobGraph.getVerticesSortedTopologicallyFromSources()", "testcase": false, "constructor": false}, {"identifier": "addNodesThatHaveNoNewPredecessors", "parameters": "(JobVertex start, List<JobVertex> target, Set<JobVertex> remaining)", "modifiers": "private", "return": "void", "signature": "void addNodesThatHaveNoNewPredecessors(JobVertex start, List<JobVertex> target, Set<JobVertex> remaining)", "full_signature": "private void addNodesThatHaveNoNewPredecessors(JobVertex start, List<JobVertex> target, Set<JobVertex> remaining)", "class_method_signature": "JobGraph.addNodesThatHaveNoNewPredecessors(JobVertex start, List<JobVertex> target, Set<JobVertex> remaining)", "testcase": false, "constructor": false}, {"identifier": "addJar", "parameters": "(Path jar)", "modifiers": "public", "return": "void", "signature": "void addJar(Path jar)", "full_signature": "public void addJar(Path jar)", "class_method_signature": "JobGraph.addJar(Path jar)", "testcase": false, "constructor": false}, {"identifier": "addBlob", "parameters": "(BlobKey key)", "modifiers": "public", "return": "void", "signature": "void addBlob(BlobKey key)", "full_signature": "public void addBlob(BlobKey key)", "class_method_signature": "JobGraph.addBlob(BlobKey key)", "testcase": false, "constructor": false}, {"identifier": "hasUsercodeJarFiles", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasUsercodeJarFiles()", "full_signature": "public boolean hasUsercodeJarFiles()", "class_method_signature": "JobGraph.hasUsercodeJarFiles()", "testcase": false, "constructor": false}, {"identifier": "getUserJarBlobKeys", "parameters": "()", "modifiers": "public", "return": "List<BlobKey>", "signature": "List<BlobKey> getUserJarBlobKeys()", "full_signature": "public List<BlobKey> getUserJarBlobKeys()", "class_method_signature": "JobGraph.getUserJarBlobKeys()", "testcase": false, "constructor": false}, {"identifier": "uploadRequiredJarFiles", "parameters": "(InetSocketAddress serverAddress)", "modifiers": "public", "return": "void", "signature": "void uploadRequiredJarFiles(InetSocketAddress serverAddress)", "full_signature": "public void uploadRequiredJarFiles(InetSocketAddress serverAddress)", "class_method_signature": "JobGraph.uploadRequiredJarFiles(InetSocketAddress serverAddress)", "testcase": false, "constructor": false}, {"identifier": "getMaximumParallelism", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximumParallelism()", "full_signature": "public int getMaximumParallelism()", "class_method_signature": "JobGraph.getMaximumParallelism()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JobGraph.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobGraph.java"}, "focal_method": {"identifier": "getVerticesSortedTopologicallyFromSources", "parameters": "()", "modifiers": "public", "return": "List<JobVertex>", "body": "public List<JobVertex> getVerticesSortedTopologicallyFromSources() throws InvalidProgramException {\n\t\t// early out on empty lists\n\t\tif (this.taskVertices.isEmpty()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tList<JobVertex> sorted = new ArrayList<JobVertex>(this.taskVertices.size());\n\t\tSet<JobVertex> remaining = new LinkedHashSet<JobVertex>(this.taskVertices.values());\n\n\t\t// start by finding the vertices with no input edges\n\t\t// and the ones with disconnected inputs (that refer to some standalone data set)\n\t\t{\n\t\t\tIterator<JobVertex> iter = remaining.iterator();\n\t\t\twhile (iter.hasNext()) {\n\t\t\t\tJobVertex vertex = iter.next();\n\n\t\t\t\tif (vertex.hasNoConnectedInputs()) {\n\t\t\t\t\tsorted.add(vertex);\n\t\t\t\t\titer.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint startNodePos = 0;\n\n\t\t// traverse from the nodes that were added until we found all elements\n\t\twhile (!remaining.isEmpty()) {\n\n\t\t\t// first check if we have more candidates to start traversing from. if not, then the\n\t\t\t// graph is cyclic, which is not permitted\n\t\t\tif (startNodePos >= sorted.size()) {\n\t\t\t\tthrow new InvalidProgramException(\"The job graph is cyclic.\");\n\t\t\t}\n\n\t\t\tJobVertex current = sorted.get(startNodePos++);\n\t\t\taddNodesThatHaveNoNewPredecessors(current, sorted, remaining);\n\t\t}\n\n\t\treturn sorted;\n\t}", "signature": "List<JobVertex> getVerticesSortedTopologicallyFromSources()", "full_signature": "public List<JobVertex> getVerticesSortedTopologicallyFromSources()", "class_method_signature": "JobGraph.getVerticesSortedTopologicallyFromSources()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptyList", "size", "values", "iterator", "hasNext", "next", "hasNoConnectedInputs", "add", "remove", "isEmpty", "size", "get", "addNodesThatHaveNoNewPredecessors"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}