{"test_class": {"identifier": "ResourceBundleContentHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "kilt-core/src/test/java/de/poiu/kilt/bundlecontent/ResourceBundleContentHelperTest.java"}, "test_case": {"identifier": "testGetBundlePrefix_inWrongBasePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetBundlePrefix_inWrongBasePath() {\n    final Path ignorableBasePath= Paths.get(\"/some/path/src/main/resources\");\n    final Path otherBasePath= Paths.get(\"/some/other/path\");\n    final ResourceBundleContentHelper helper= new ResourceBundleContentHelper(ignorableBasePath);\n    assertThatIllegalArgumentException().isThrownBy(() -> {\n      helper.getBundlePrefix(otherBasePath.resolve(\"i18n/messages_de.properties\"));\n    }).withMessage(\"All files should live below the ignorable base path /some/path/src/main/resources. Given path is /some/other/path/i18n/messages_de.properties\");\n  }", "signature": "void testGetBundlePrefix_inWrongBasePath()", "full_signature": "@Test public void testGetBundlePrefix_inWrongBasePath()", "class_method_signature": "ResourceBundleContentHelperTest.testGetBundlePrefix_inWrongBasePath()", "testcase": true, "constructor": false, "invocations": ["get", "get", "withMessage", "isThrownBy", "assertThatIllegalArgumentException", "getBundlePrefix", "resolve"]}, "focal_class": {"identifier": "ResourceBundleContentHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "protected static final Pattern PATTERN_RESOURCE_BUNDLE_FILE_NAME= Pattern.compile(\n        \"(?<BUNDLE>[a-zA-Z0-9\\\\-]+)\"                                      //the bundle basename (mandatory)\n      + \"(?:_\"                                                            //ignore the underscore of the optional LANG\n      +   \"(?<LOCALE>\"                                                    //a group capturing all locale parts (LANG, SCRIPT, COUNTRY and VARIANT)\n      +     \"(?<LANG>[a-zA-Z]{2,8})\"                                        //the optional LANG\n      +     \"(?:_\"                                                          //ignore the underscore of the optional SCRIPT\n      +       \"(?<SCRIPT>[a-zA-Z]{4})\"                                      //the optional SCRIPT\n      +     \")?\"\n      +     \"(?:_\"                                                          //ignore the underscore of the optional COUNTRY\n      +       \"(?<COUNTRY>[a-zA-Z]{2}|[0-9]{3})\"                            //the optional COUNTRY\n      +     \")?\"\n      +     \"(?:_\"                                                          //ignore the underscore of the optional VARIANT\n      +       \"(?<VARIANT>[0-9a-zA-Z-]+.)\"                                  //the optional VARIANT\n      +     \")?\"\n      +   \")\"\n      + \")?\"\n      + \"\\\\.properties\"                                                   // the file must always have the suffix .properties\n    , Pattern.UNICODE_CHARACTER_CLASS);", "modifier": "protected static final", "type": "Pattern", "declarator": "PATTERN_RESOURCE_BUNDLE_FILE_NAME= Pattern.compile(\n        \"(?<BUNDLE>[a-zA-Z0-9\\\\-]+)\"                                      //the bundle basename (mandatory)\n      + \"(?:_\"                                                            //ignore the underscore of the optional LANG\n      +   \"(?<LOCALE>\"                                                    //a group capturing all locale parts (LANG, SCRIPT, COUNTRY and VARIANT)\n      +     \"(?<LANG>[a-zA-Z]{2,8})\"                                        //the optional LANG\n      +     \"(?:_\"                                                          //ignore the underscore of the optional SCRIPT\n      +       \"(?<SCRIPT>[a-zA-Z]{4})\"                                      //the optional SCRIPT\n      +     \")?\"\n      +     \"(?:_\"                                                          //ignore the underscore of the optional COUNTRY\n      +       \"(?<COUNTRY>[a-zA-Z]{2}|[0-9]{3})\"                            //the optional COUNTRY\n      +     \")?\"\n      +     \"(?:_\"                                                          //ignore the underscore of the optional VARIANT\n      +       \"(?<VARIANT>[0-9a-zA-Z-]+.)\"                                  //the optional VARIANT\n      +     \")?\"\n      +   \")\"\n      + \")?\"\n      + \"\\\\.properties\"                                                   // the file must always have the suffix .properties\n    , Pattern.UNICODE_CHARACTER_CLASS)", "var_name": "PATTERN_RESOURCE_BUNDLE_FILE_NAME"}, {"original_string": "private Path ignorableBasePath= Paths.get(\"\");", "modifier": "private", "type": "Path", "declarator": "ignorableBasePath= Paths.get(\"\")", "var_name": "ignorableBasePath"}], "methods": [{"identifier": "ResourceBundleContentHelper", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResourceBundleContentHelper()", "full_signature": "public  ResourceBundleContentHelper()", "class_method_signature": "ResourceBundleContentHelper.ResourceBundleContentHelper()", "testcase": false, "constructor": true}, {"identifier": "ResourceBundleContentHelper", "parameters": "(final File ignorableBasePath)", "modifiers": "public", "return": "", "signature": " ResourceBundleContentHelper(final File ignorableBasePath)", "full_signature": "public  ResourceBundleContentHelper(final File ignorableBasePath)", "class_method_signature": "ResourceBundleContentHelper.ResourceBundleContentHelper(final File ignorableBasePath)", "testcase": false, "constructor": true}, {"identifier": "ResourceBundleContentHelper", "parameters": "(final Path ignorableBasePath)", "modifiers": "public", "return": "", "signature": " ResourceBundleContentHelper(final Path ignorableBasePath)", "full_signature": "public  ResourceBundleContentHelper(final Path ignorableBasePath)", "class_method_signature": "ResourceBundleContentHelper.ResourceBundleContentHelper(final Path ignorableBasePath)", "testcase": false, "constructor": true}, {"identifier": "toBundleNameToFilesMap", "parameters": "(final Collection<File> propertyFiles)", "modifiers": "public", "return": "Map<String, Map<Language, File>>", "signature": "Map<String, Map<Language, File>> toBundleNameToFilesMap(final Collection<File> propertyFiles)", "full_signature": "public Map<String, Map<Language, File>> toBundleNameToFilesMap(final Collection<File> propertyFiles)", "class_method_signature": "ResourceBundleContentHelper.toBundleNameToFilesMap(final Collection<File> propertyFiles)", "testcase": false, "constructor": false}, {"identifier": "getBundlePrefix", "parameters": "(final Path path)", "modifiers": "protected", "return": "String", "signature": "String getBundlePrefix(final Path path)", "full_signature": "protected String getBundlePrefix(final Path path)", "class_method_signature": "ResourceBundleContentHelper.getBundlePrefix(final Path path)", "testcase": false, "constructor": false}, {"identifier": "getBundlePrefix", "parameters": "(final File file)", "modifiers": "protected", "return": "String", "signature": "String getBundlePrefix(final File file)", "full_signature": "protected String getBundlePrefix(final File file)", "class_method_signature": "ResourceBundleContentHelper.getBundlePrefix(final File file)", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/bundlecontent/ResourceBundleContentHelper.java"}, "focal_method": {"identifier": "getBundlePrefix", "parameters": "(final Path path)", "modifiers": "protected", "return": "String", "body": "protected String getBundlePrefix(final Path path) {\n    LOGGER.traceEntry(\"getBundlePrefix for path: {}\", path);\n\n    Require.nonNull(path);\n    if (!path.toAbsolutePath().startsWith(this.ignorableBasePath.toAbsolutePath())) {\n      throw new IllegalArgumentException(\"All files should live below the ignorable base path \"+this.ignorableBasePath.toAbsolutePath().toString()+\". Given path is \"+path.toAbsolutePath().toString());\n    }\n\n    final Path prefixPath= this.ignorableBasePath.toAbsolutePath().relativize(path.toAbsolutePath().getParent());\n    final String bundlePrefix= prefixPath.toString()\n      .replaceFirst(\"^/+\", \"\")         //never start with a slash\n      .replaceFirst(\"$/+\", \"\")         //never end with a slash\n      .replaceAll(\"\\\\/+\", \"/\")       //reduce multiple slashes to only one\n      ;\n\n\n\n    return LOGGER.traceExit(bundlePrefix);\n  }", "signature": "String getBundlePrefix(final Path path)", "full_signature": "protected String getBundlePrefix(final Path path)", "class_method_signature": "ResourceBundleContentHelper.getBundlePrefix(final Path path)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "nonNull", "startsWith", "toAbsolutePath", "toAbsolutePath", "toString", "toAbsolutePath", "toString", "toAbsolutePath", "relativize", "toAbsolutePath", "getParent", "toAbsolutePath", "replaceAll", "replaceFirst", "replaceFirst", "toString", "traceExit"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}