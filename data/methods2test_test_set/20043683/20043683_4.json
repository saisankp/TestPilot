{"test_class": {"identifier": "MetaMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "metamap-tagger/src/test/java/org/t3as/metamap/MetaMapTest.java"}, "test_case": {"identifier": "testDecomposeToAscii", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecomposeToAscii() throws Exception {\n        assertEquals(MetaMap.decomposeToAscii(\"xy\u00e2\u00e5\u00e4\u00f6\u1ed1\u1edfxy\"), \"xyaaaoooxy\");\n        assertEquals(MetaMap.decomposeToAscii(\"a \u00b5 b\"), \"a  b\");\n        assertEquals(MetaMap.decomposeToAscii(\"1234567890abcdefghijklmnopqrstuvwxyz\\\"!@#$%^&*()?\"),\n                     \"1234567890abcdefghijklmnopqrstuvwxyz\\\"!@#$%^&*()?\");\n        assertEquals(MetaMap.decomposeToAscii(\"\u01a2\"), \"\");\n        assertEquals(MetaMap.decomposeToAscii(\"\u01fd\"), \"ae\");\n        assertEquals(MetaMap.decomposeToAscii(\"\u01fe\"), \"O\");\n        assertEquals(MetaMap.decomposeToAscii(\"\u0236\"), \"t\");\n    }", "signature": "void testDecomposeToAscii()", "full_signature": "@Test public void testDecomposeToAscii()", "class_method_signature": "MetaMapTest.testDecomposeToAscii()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii", "assertEquals", "decomposeToAscii"]}, "focal_class": {"identifier": "MetaMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File publicMm;", "modifier": "private final", "type": "File", "declarator": "publicMm", "var_name": "publicMm"}, {"original_string": "private final Collection<Option> opts;", "modifier": "private final", "type": "Collection<Option>", "declarator": "opts", "var_name": "opts"}], "methods": [{"identifier": "MetaMap", "parameters": "(final File publicMm, final Collection<Option> opts)", "modifiers": "public", "return": "", "signature": " MetaMap(final File publicMm, final Collection<Option> opts)", "full_signature": "public  MetaMap(final File publicMm, final Collection<Option> opts)", "class_method_signature": "MetaMap.MetaMap(final File publicMm, final Collection<Option> opts)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final File input, final File output)", "modifiers": "public", "return": "boolean", "signature": "boolean process(final File input, final File output)", "full_signature": "public boolean process(final File input, final File output)", "class_method_signature": "MetaMap.process(final File input, final File output)", "testcase": false, "constructor": false}, {"identifier": "decomposeToAscii", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "signature": "String decomposeToAscii(final String s)", "full_signature": "public static String decomposeToAscii(final String s)", "class_method_signature": "MetaMap.decomposeToAscii(final String s)", "testcase": false, "constructor": false}], "file": "metamap-tagger/src/main/java/org/t3as/metamap/MetaMap.java"}, "focal_method": {"identifier": "decomposeToAscii", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "body": "public static String decomposeToAscii(final String s) {\n        /* pure java version, doesn't work all the time:\n        String normalized = Normalizer.normalize(s, Normalizer.Form.NFD);\n        return normalized.replaceAll(\"\\\\p{InCombiningDiacriticalMarks}+\", \"\");\n        */\n\n        // this works on more cases\n        final char[] input = new char[s.length()];\n        s.getChars(0, s.length(), input, 0);\n        final char[] output = new char[input.length * 4];\n        final int numChars = ASCIIFoldingFilter.foldToASCII(input, 0, output, 0, input.length);\n\n        // now remove anything not in the printable US-ASCII range, but keep newlines\n        final StringBuilder sb = new StringBuilder(numChars);\n        for (int i = 0; i < numChars; i++) {\n            final char c = output[i];\n            // printable US-ASCII is from 32 to 126\n            if ((32 <= c && c <= 126) || '\\n' == c) sb.append(c);\n        }\n\n        return sb.toString();\n    }", "signature": "String decomposeToAscii(final String s)", "full_signature": "public static String decomposeToAscii(final String s)", "class_method_signature": "MetaMap.decomposeToAscii(final String s)", "testcase": false, "constructor": false, "invocations": ["length", "getChars", "length", "foldToASCII", "append", "toString"]}, "repository": {"repo_id": 20043683, "url": "https://github.com/NICTA/t3as-snomedct-service", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 1240, "license": "licensed"}}