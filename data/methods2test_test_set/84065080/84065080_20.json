{"test_class": {"identifier": "DefaultPluginContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Object> registry = new HashMap<>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "registry = new HashMap<>()", "var_name": "registry"}, {"original_string": "private DefaultPluginContext context;", "modifier": "private", "type": "DefaultPluginContext", "declarator": "context", "var_name": "context"}, {"original_string": "private TestPlugin plugin = new TestPlugin();", "modifier": "private", "type": "TestPlugin", "declarator": "plugin = new TestPlugin()", "var_name": "plugin"}, {"original_string": "private OptionalPlugin optionalPlugin = new OptionalPlugin();", "modifier": "private", "type": "OptionalPlugin", "declarator": "optionalPlugin = new OptionalPlugin()", "var_name": "optionalPlugin"}], "file": "plugface-core/src/test/java/org/plugface/core/impl/DefaultPluginContextTest.java"}, "test_case": {"identifier": "shouldRetrievePluginFromName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRetrievePluginFromName() {\n        registry.put(\"test\", plugin);\n        final TestPlugin test = context.getPlugin(\"test\");\n        assertTrue(registry.containsKey(\"test\"));\n        assertEquals(plugin, test);\n    }", "signature": "void shouldRetrievePluginFromName()", "full_signature": "@Test public void shouldRetrievePluginFromName()", "class_method_signature": "DefaultPluginContextTest.shouldRetrievePluginFromName()", "testcase": true, "constructor": false, "invocations": ["put", "getPlugin", "assertTrue", "containsKey", "assertEquals"]}, "focal_class": {"identifier": "DefaultPluginContext", "superclass": "", "interfaces": "implements PluginContext", "fields": [{"original_string": "private final Map<String, Object> registry;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "DefaultPluginContext", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultPluginContext()", "full_signature": "public  DefaultPluginContext()", "class_method_signature": "DefaultPluginContext.DefaultPluginContext()", "testcase": false, "constructor": true}, {"identifier": "DefaultPluginContext", "parameters": "(Map<String, Object> registry)", "modifiers": "public", "return": "", "signature": " DefaultPluginContext(Map<String, Object> registry)", "full_signature": "public  DefaultPluginContext(Map<String, Object> registry)", "class_method_signature": "DefaultPluginContext.DefaultPluginContext(Map<String, Object> registry)", "testcase": false, "constructor": true}, {"identifier": "getPlugin", "parameters": "(String pluginName)", "modifiers": "@Override @Nullable public", "return": "T", "signature": "T getPlugin(String pluginName)", "full_signature": "@Override @Nullable public T getPlugin(String pluginName)", "class_method_signature": "DefaultPluginContext.getPlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(Class<T> pluginClass)", "modifiers": "@Override @Nullable public", "return": "T", "signature": "T getPlugin(Class<T> pluginClass)", "full_signature": "@Override @Nullable public T getPlugin(Class<T> pluginClass)", "class_method_signature": "DefaultPluginContext.getPlugin(Class<T> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getAllPlugins", "parameters": "()", "modifiers": "@Override public", "return": "Collection<PluginRef>", "signature": "Collection<PluginRef> getAllPlugins()", "full_signature": "@Override public Collection<PluginRef> getAllPlugins()", "class_method_signature": "DefaultPluginContext.getAllPlugins()", "testcase": false, "constructor": false}, {"identifier": "addPlugin", "parameters": "(T plugin)", "modifiers": "@Override public", "return": "void", "signature": "void addPlugin(T plugin)", "full_signature": "@Override public void addPlugin(T plugin)", "class_method_signature": "DefaultPluginContext.addPlugin(T plugin)", "testcase": false, "constructor": false}, {"identifier": "addPlugin", "parameters": "(String name, T plugin)", "modifiers": "@Override public", "return": "void", "signature": "void addPlugin(String name, T plugin)", "full_signature": "@Override public void addPlugin(String name, T plugin)", "class_method_signature": "DefaultPluginContext.addPlugin(String name, T plugin)", "testcase": false, "constructor": false}, {"identifier": "removePlugin", "parameters": "(T plugin)", "modifiers": "@Override @Nullable public", "return": "T", "signature": "T removePlugin(T plugin)", "full_signature": "@Override @Nullable public T removePlugin(T plugin)", "class_method_signature": "DefaultPluginContext.removePlugin(T plugin)", "testcase": false, "constructor": false}, {"identifier": "removePlugin", "parameters": "(String pluginName)", "modifiers": "@Override @Nullable public", "return": "T", "signature": "T removePlugin(String pluginName)", "full_signature": "@Override @Nullable public T removePlugin(String pluginName)", "class_method_signature": "DefaultPluginContext.removePlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "hasPlugin", "parameters": "(String pluginName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPlugin(String pluginName)", "full_signature": "@Override public boolean hasPlugin(String pluginName)", "class_method_signature": "DefaultPluginContext.hasPlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "hasPlugin", "parameters": "(Class<T> pluginClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPlugin(Class<T> pluginClass)", "full_signature": "@Override public boolean hasPlugin(Class<T> pluginClass)", "class_method_signature": "DefaultPluginContext.hasPlugin(Class<T> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "isImplementingInterface", "parameters": "(Class<?> clazz, Class<?> wanted)", "modifiers": "private", "return": "boolean", "signature": "boolean isImplementingInterface(Class<?> clazz, Class<?> wanted)", "full_signature": "private boolean isImplementingInterface(Class<?> clazz, Class<?> wanted)", "class_method_signature": "DefaultPluginContext.isImplementingInterface(Class<?> clazz, Class<?> wanted)", "testcase": false, "constructor": false}], "file": "plugface-core/src/main/java/org/plugface/core/impl/DefaultPluginContext.java"}, "focal_method": {"identifier": "getPlugin", "parameters": "(String pluginName)", "modifiers": "@Override @Nullable public", "return": "T", "body": "@Override\n    @Nullable\n    public <T> T getPlugin(String pluginName) {\n        Objects.requireNonNull(pluginName, \"Plugin name to lookup cannot be null\");\n        if (registry.containsKey(pluginName)) {\n            return (T) registry.get(pluginName);\n        }\n        return null;\n    }", "signature": "T getPlugin(String pluginName)", "full_signature": "@Override @Nullable public T getPlugin(String pluginName)", "class_method_signature": "DefaultPluginContext.getPlugin(String pluginName)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "containsKey", "get"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}