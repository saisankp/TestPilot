{"test_class": {"identifier": "FunctionFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static org.opengis.filter.FilterFactory ff;", "modifier": "static", "type": "org.opengis.filter.FilterFactory", "declarator": "ff", "var_name": "ff"}, {"original_string": "FunctionFinder finder;", "modifier": "", "type": "FunctionFinder", "declarator": "finder", "var_name": "finder"}, {"original_string": "Function function;", "modifier": "", "type": "Function", "declarator": "function", "var_name": "function"}, {"original_string": "private FunctionName name;", "modifier": "private", "type": "FunctionName", "declarator": "name", "var_name": "name"}], "file": "modules/library/main/src/test/java/org/geotools/filter/FunctionFinderTest.java"}, "test_case": {"identifier": "testAllFunctionDescriptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllFunctionDescriptions() throws Exception {\n        List<FunctionName> all = finder.getAllFunctionDescriptions();\n        assertTrue(all.size() > 0);\n        boolean found = false;\n        for (FunctionName name : all) {\n            if (name.getName().equals(\"Interpolate\")) {\n                found = true;\n                break;\n            }\n        }\n        assertTrue(\"Found Interpolate\", found );\n    }", "signature": "void testAllFunctionDescriptions()", "full_signature": "@Test public void testAllFunctionDescriptions()", "class_method_signature": "FunctionFinderTest.testAllFunctionDescriptions()", "testcase": true, "constructor": false, "invocations": ["getAllFunctionDescriptions", "assertTrue", "size", "equals", "getName", "assertTrue"]}, "focal_class": {"identifier": "FunctionFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.filter\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.filter\")", "var_name": "LOGGER"}, {"original_string": "private volatile Map<Name,FunctionFactory> functionFactoryCache;", "modifier": "private volatile", "type": "Map<Name,FunctionFactory>", "declarator": "functionFactoryCache", "var_name": "functionFactoryCache"}], "methods": [{"identifier": "FunctionFinder", "parameters": "()", "modifiers": "public", "return": "", "signature": " FunctionFinder()", "full_signature": "public  FunctionFinder()", "class_method_signature": "FunctionFinder.FunctionFinder()", "testcase": false, "constructor": true}, {"identifier": "getAllFunctionDescriptions", "parameters": "()", "modifiers": "public", "return": "List<FunctionName>", "signature": "List<FunctionName> getAllFunctionDescriptions()", "full_signature": "public List<FunctionName> getAllFunctionDescriptions()", "class_method_signature": "FunctionFinder.getAllFunctionDescriptions()", "testcase": false, "constructor": false}, {"identifier": "findFunctionDescription", "parameters": "(String name )", "modifiers": "public", "return": "FunctionName", "signature": "FunctionName findFunctionDescription(String name )", "full_signature": "public FunctionName findFunctionDescription(String name )", "class_method_signature": "FunctionFinder.findFunctionDescription(String name )", "testcase": false, "constructor": false}, {"identifier": "findFunctionDescription", "parameters": "(Name name )", "modifiers": "public", "return": "FunctionName", "signature": "FunctionName findFunctionDescription(Name name )", "full_signature": "public FunctionName findFunctionDescription(Name name )", "class_method_signature": "FunctionFinder.findFunctionDescription(Name name )", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(String name)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(String name)", "full_signature": "public Function findFunction(String name)", "class_method_signature": "FunctionFinder.findFunction(String name)", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(Name name)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(Name name)", "full_signature": "public Function findFunction(Name name)", "class_method_signature": "FunctionFinder.findFunction(Name name)", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(String name, List<org.opengis.filter.expression.Expression> parameters)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(String name, List<org.opengis.filter.expression.Expression> parameters)", "full_signature": "public Function findFunction(String name, List<org.opengis.filter.expression.Expression> parameters)", "class_method_signature": "FunctionFinder.findFunction(String name, List<org.opengis.filter.expression.Expression> parameters)", "testcase": false, "constructor": false}, {"identifier": "toName", "parameters": "(String name)", "modifiers": "", "return": "Name", "signature": "Name toName(String name)", "full_signature": " Name toName(String name)", "class_method_signature": "FunctionFinder.toName(String name)", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(Name name, List<org.opengis.filter.expression.Expression> parameters)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(Name name, List<org.opengis.filter.expression.Expression> parameters)", "full_signature": "public Function findFunction(Name name, List<org.opengis.filter.expression.Expression> parameters)", "class_method_signature": "FunctionFinder.findFunction(Name name, List<org.opengis.filter.expression.Expression> parameters)", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(String name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(String name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "full_signature": "public Function findFunction(String name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "class_method_signature": "FunctionFinder.findFunction(String name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "testcase": false, "constructor": false}, {"identifier": "findFunction", "parameters": "(Name name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "modifiers": "public", "return": "Function", "signature": "Function findFunction(Name name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "full_signature": "public Function findFunction(Name name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "class_method_signature": "FunctionFinder.findFunction(Name name, List<org.opengis.filter.expression.Expression>  parameters, Literal fallback)", "testcase": false, "constructor": false}, {"identifier": "findFunctionInternal", "parameters": "(Name name, List parameters, Literal fallback)", "modifiers": "", "return": "Function", "signature": "Function findFunctionInternal(Name name, List parameters, Literal fallback)", "full_signature": " Function findFunctionInternal(Name name, List parameters, Literal fallback)", "class_method_signature": "FunctionFinder.findFunctionInternal(Name name, List parameters, Literal fallback)", "testcase": false, "constructor": false}, {"identifier": "lookupFunctions", "parameters": "()", "modifiers": "private", "return": "HashMap<Name,FunctionFactory>", "signature": "HashMap<Name,FunctionFactory> lookupFunctions()", "full_signature": "private HashMap<Name,FunctionFactory> lookupFunctions()", "class_method_signature": "FunctionFinder.lookupFunctions()", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/FunctionFinder.java"}, "focal_method": {"identifier": "getAllFunctionDescriptions", "parameters": "()", "modifiers": "public", "return": "List<FunctionName>", "body": "public List<FunctionName> getAllFunctionDescriptions(){\n        Set<FunctionFactory> functionFactories = CommonFactoryFinder.getFunctionFactories(null);\n        List<FunctionName> allFunctionDescriptions = new ArrayList<FunctionName>();\n        \n        for (FunctionFactory factory : functionFactories) {\n            List<FunctionName> functionNames = factory.getFunctionNames();\n            allFunctionDescriptions.addAll( functionNames );\n        }\n        Collections.sort( allFunctionDescriptions, new Comparator<FunctionName>() {\n            public int compare(FunctionName o1, FunctionName o2) {\n                if( o1 == null && o2 == null ) return 0;\n                if( o1 == null && o2 != null ) return 1;\n                if( o1 != null && o2 == null ) return -1;\n                \n                return o1.getName().compareTo( o2.getName() );\n            }\n        } );\n        return Collections.unmodifiableList(allFunctionDescriptions);\n    }", "signature": "List<FunctionName> getAllFunctionDescriptions()", "full_signature": "public List<FunctionName> getAllFunctionDescriptions()", "class_method_signature": "FunctionFinder.getAllFunctionDescriptions()", "testcase": false, "constructor": false, "invocations": ["getFunctionFactories", "getFunctionNames", "addAll", "sort", "compareTo", "getName", "getName", "unmodifiableList"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}