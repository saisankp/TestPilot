{"test_class": {"identifier": "SimpleProgressCheckTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/net/adamcin/oakpal/api/SimpleProgressCheckTest.java"}, "test_case": {"identifier": "testSetResourceBundle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetResourceBundle() {\n        final SimpleProgressCheck check = new SimpleProgressCheck();\n\n        ResourceBundle originalBundle = check.getResourceBundle();\n        assertSame(\"same object returned twice\", originalBundle, check.getResourceBundle());\n        ResourceBundle newBundle = ResourceBundle.getBundle(check.getResourceBundleBaseName(),\n                Locale.getDefault(), new URLClassLoader(new URL[0], getClass().getClassLoader()));\n        assertNotSame(\"not same object as created externally\", newBundle, check.getResourceBundle());\n        check.setResourceBundle(newBundle);\n        assertSame(\"same object as set\", newBundle, check.getResourceBundle());\n        assertSame(\"same object as set, again\", newBundle, check.getResourceBundle());\n    }", "signature": "void testSetResourceBundle()", "full_signature": "@Test public void testSetResourceBundle()", "class_method_signature": "SimpleProgressCheckTest.testSetResourceBundle()", "testcase": true, "constructor": false, "invocations": ["getResourceBundle", "assertSame", "getResourceBundle", "getBundle", "getResourceBundleBaseName", "getDefault", "getClassLoader", "getClass", "assertNotSame", "getResourceBundle", "setResourceBundle", "assertSame", "getResourceBundle", "assertSame", "getResourceBundle"]}, "focal_class": {"identifier": "SimpleProgressCheck", "superclass": "", "interfaces": "implements ProgressCheck", "fields": [{"original_string": "protected final ReportCollector collector = new ReportCollector();", "modifier": "protected final", "type": "ReportCollector", "declarator": "collector = new ReportCollector()", "var_name": "collector"}, {"original_string": "private ResourceBundle resourceBundle;", "modifier": "private", "type": "ResourceBundle", "declarator": "resourceBundle", "var_name": "resourceBundle"}], "methods": [{"identifier": "setResourceBundle", "parameters": "(final ResourceBundle resourceBundle)", "modifiers": "@Override public", "return": "void", "signature": "void setResourceBundle(final ResourceBundle resourceBundle)", "full_signature": "@Override public void setResourceBundle(final ResourceBundle resourceBundle)", "class_method_signature": "SimpleProgressCheck.setResourceBundle(final ResourceBundle resourceBundle)", "testcase": false, "constructor": false}, {"identifier": "getResourceBundle", "parameters": "()", "modifiers": "@Nullable protected", "return": "ResourceBundle", "signature": "ResourceBundle getResourceBundle()", "full_signature": "@Nullable protected ResourceBundle getResourceBundle()", "class_method_signature": "SimpleProgressCheck.getResourceBundle()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(@NotNull final String key)", "modifiers": "@NotNull protected", "return": "String", "signature": "String getString(@NotNull final String key)", "full_signature": "@NotNull protected String getString(@NotNull final String key)", "class_method_signature": "SimpleProgressCheck.getString(@NotNull final String key)", "testcase": false, "constructor": false}, {"identifier": "reportViolation", "parameters": "(final Violation violation)", "modifiers": "protected", "return": "void", "signature": "void reportViolation(final Violation violation)", "full_signature": "protected void reportViolation(final Violation violation)", "class_method_signature": "SimpleProgressCheck.reportViolation(final Violation violation)", "testcase": false, "constructor": false}, {"identifier": "reporting", "parameters": "(@NotNull final Consumer<SimpleViolation.Builder> customizer)", "modifiers": "protected final", "return": "void", "signature": "void reporting(@NotNull final Consumer<SimpleViolation.Builder> customizer)", "full_signature": "protected final void reporting(@NotNull final Consumer<SimpleViolation.Builder> customizer)", "class_method_signature": "SimpleProgressCheck.reporting(@NotNull final Consumer<SimpleViolation.Builder> customizer)", "testcase": false, "constructor": false}, {"identifier": "reportViolation", "parameters": "(final Severity severity,\n                                         final String description,\n                                         final PackageId... packages)", "modifiers": "protected final", "return": "void", "signature": "void reportViolation(final Severity severity,\n                                         final String description,\n                                         final PackageId... packages)", "full_signature": "protected final void reportViolation(final Severity severity,\n                                         final String description,\n                                         final PackageId... packages)", "class_method_signature": "SimpleProgressCheck.reportViolation(final Severity severity,\n                                         final String description,\n                                         final PackageId... packages)", "testcase": false, "constructor": false}, {"identifier": "minorViolation", "parameters": "(final String description, final PackageId... packages)", "modifiers": "protected final", "return": "void", "signature": "void minorViolation(final String description, final PackageId... packages)", "full_signature": "protected final void minorViolation(final String description, final PackageId... packages)", "class_method_signature": "SimpleProgressCheck.minorViolation(final String description, final PackageId... packages)", "testcase": false, "constructor": false}, {"identifier": "majorViolation", "parameters": "(final String description, final PackageId... packages)", "modifiers": "protected final", "return": "void", "signature": "void majorViolation(final String description, final PackageId... packages)", "full_signature": "protected final void majorViolation(final String description, final PackageId... packages)", "class_method_signature": "SimpleProgressCheck.majorViolation(final String description, final PackageId... packages)", "testcase": false, "constructor": false}, {"identifier": "severeViolation", "parameters": "(final String description, final PackageId... packages)", "modifiers": "protected final", "return": "void", "signature": "void severeViolation(final String description, final PackageId... packages)", "full_signature": "protected final void severeViolation(final String description, final PackageId... packages)", "class_method_signature": "SimpleProgressCheck.severeViolation(final String description, final PackageId... packages)", "testcase": false, "constructor": false}, {"identifier": "startedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startedScan()", "full_signature": "@Override public void startedScan()", "class_method_signature": "SimpleProgressCheck.startedScan()", "testcase": false, "constructor": false}, {"identifier": "getReportedViolations", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Violation>", "signature": "Collection<Violation> getReportedViolations()", "full_signature": "@Override public Collection<Violation> getReportedViolations()", "class_method_signature": "SimpleProgressCheck.getReportedViolations()", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/SimpleProgressCheck.java"}, "focal_method": {"identifier": "setResourceBundle", "parameters": "(final ResourceBundle resourceBundle)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setResourceBundle(final ResourceBundle resourceBundle) {\n        this.resourceBundle = resourceBundle;\n    }", "signature": "void setResourceBundle(final ResourceBundle resourceBundle)", "full_signature": "@Override public void setResourceBundle(final ResourceBundle resourceBundle)", "class_method_signature": "SimpleProgressCheck.setResourceBundle(final ResourceBundle resourceBundle)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}