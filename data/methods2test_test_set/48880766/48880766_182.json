{"test_class": {"identifier": "TableSliceGroupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static NumericAggregateFunction exaggerate =\n      new NumericAggregateFunction(\"exageration\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> data) {\n          return StatUtils.max(data.asDoubleArray()) + 1000;\n        }\n      };", "modifier": "private static", "type": "NumericAggregateFunction", "declarator": "exaggerate =\n      new NumericAggregateFunction(\"exageration\") {\n\n        @Override\n        public Double summarize(NumericColumn<?> data) {\n          return StatUtils.max(data.asDoubleArray()) + 1000;\n        }\n      }", "var_name": "exaggerate"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}], "file": "core/src/test/java/tech/tablesaw/table/TableSliceGroupTest.java"}, "test_case": {"identifier": "testViewTwoColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testViewTwoColumn() {\n    TableSliceGroup group =\n        StandardTableSliceGroup.create(\n            table, table.categoricalColumn(\"who\"), table.categoricalColumn(\"approval\"));\n    List<TableSlice> viewList = group.getSlices();\n\n    int count = 0;\n    for (TableSlice view : viewList) {\n      count += view.rowCount();\n    }\n    assertEquals(table.rowCount(), count);\n  }", "signature": "void testViewTwoColumn()", "full_signature": "@Test public void testViewTwoColumn()", "class_method_signature": "TableSliceGroupTest.testViewTwoColumn()", "testcase": true, "constructor": false, "invocations": ["create", "categoricalColumn", "categoricalColumn", "getSlices", "rowCount", "assertEquals", "rowCount"]}, "focal_class": {"identifier": "TableSliceGroup", "superclass": "", "interfaces": "implements Iterable<TableSlice>", "fields": [{"original_string": "protected static final String SPLIT_STRING = \"~~~\";", "modifier": "protected static final", "type": "String", "declarator": "SPLIT_STRING = \"~~~\"", "var_name": "SPLIT_STRING"}, {"original_string": "private static final Splitter SPLITTER = Splitter.on(SPLIT_STRING);", "modifier": "private static final", "type": "Splitter", "declarator": "SPLITTER = Splitter.on(SPLIT_STRING)", "var_name": "SPLITTER"}, {"original_string": "private final List<TableSlice> subTables = new ArrayList<>();", "modifier": "private final", "type": "List<TableSlice>", "declarator": "subTables = new ArrayList<>()", "var_name": "subTables"}, {"original_string": "private final String[] splitColumnNames;", "modifier": "private final", "type": "String[]", "declarator": "splitColumnNames", "var_name": "splitColumnNames"}, {"original_string": "private Table sourceTable;", "modifier": "private", "type": "Table", "declarator": "sourceTable", "var_name": "sourceTable"}], "methods": [{"identifier": "TableSliceGroup", "parameters": "(Table original)", "modifiers": "protected", "return": "", "signature": " TableSliceGroup(Table original)", "full_signature": "protected  TableSliceGroup(Table original)", "class_method_signature": "TableSliceGroup.TableSliceGroup(Table original)", "testcase": false, "constructor": true}, {"identifier": "containsAnyTextColumns", "parameters": "(Table original)", "modifiers": "private", "return": "boolean", "signature": "boolean containsAnyTextColumns(Table original)", "full_signature": "private boolean containsAnyTextColumns(Table original)", "class_method_signature": "TableSliceGroup.containsAnyTextColumns(Table original)", "testcase": false, "constructor": false}, {"identifier": "replaceTextColumnsWithStringColumns", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void replaceTextColumnsWithStringColumns()", "full_signature": "private void replaceTextColumnsWithStringColumns()", "class_method_signature": "TableSliceGroup.replaceTextColumnsWithStringColumns()", "testcase": false, "constructor": false}, {"identifier": "TableSliceGroup", "parameters": "(Table sourceTable, String[] groupColumnNames)", "modifiers": "protected", "return": "", "signature": " TableSliceGroup(Table sourceTable, String[] groupColumnNames)", "full_signature": "protected  TableSliceGroup(Table sourceTable, String[] groupColumnNames)", "class_method_signature": "TableSliceGroup.TableSliceGroup(Table sourceTable, String[] groupColumnNames)", "testcase": false, "constructor": true}, {"identifier": "getSplitColumnNames", "parameters": "()", "modifiers": "protected", "return": "String[]", "signature": "String[] getSplitColumnNames()", "full_signature": "protected String[] getSplitColumnNames()", "class_method_signature": "TableSliceGroup.getSplitColumnNames()", "testcase": false, "constructor": false}, {"identifier": "getByteSize", "parameters": "(List<Column<?>> columns)", "modifiers": "protected", "return": "int", "signature": "int getByteSize(List<Column<?>> columns)", "full_signature": "protected int getByteSize(List<Column<?>> columns)", "class_method_signature": "TableSliceGroup.getByteSize(List<Column<?>> columns)", "testcase": false, "constructor": false}, {"identifier": "addSlice", "parameters": "(TableSlice slice)", "modifiers": "protected", "return": "void", "signature": "void addSlice(TableSlice slice)", "full_signature": "protected void addSlice(TableSlice slice)", "class_method_signature": "TableSliceGroup.addSlice(TableSlice slice)", "testcase": false, "constructor": false}, {"identifier": "getSlices", "parameters": "()", "modifiers": "public", "return": "List<TableSlice>", "signature": "List<TableSlice> getSlices()", "full_signature": "public List<TableSlice> getSlices()", "class_method_signature": "TableSliceGroup.getSlices()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "public", "return": "TableSlice", "signature": "TableSlice get(int i)", "full_signature": "public TableSlice get(int i)", "class_method_signature": "TableSliceGroup.get(int i)", "testcase": false, "constructor": false}, {"identifier": "getSourceTable", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table getSourceTable()", "full_signature": "public Table getSourceTable()", "class_method_signature": "TableSliceGroup.getSourceTable()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "TableSliceGroup.size()", "testcase": false, "constructor": false}, {"identifier": "splitGroupingColumn", "parameters": "(Table groupTable)", "modifiers": "private", "return": "Table", "signature": "Table splitGroupingColumn(Table groupTable)", "full_signature": "private Table splitGroupingColumn(Table groupTable)", "class_method_signature": "TableSliceGroup.splitGroupingColumn(Table groupTable)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(String colName1, AggregateFunction<?, ?>... functions)", "modifiers": "public", "return": "Table", "signature": "Table aggregate(String colName1, AggregateFunction<?, ?>... functions)", "full_signature": "public Table aggregate(String colName1, AggregateFunction<?, ?>... functions)", "class_method_signature": "TableSliceGroup.aggregate(String colName1, AggregateFunction<?, ?>... functions)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(ListMultimap<String, AggregateFunction<?, ?>> functions)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "Table", "signature": "Table aggregate(ListMultimap<String, AggregateFunction<?, ?>> functions)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public Table aggregate(ListMultimap<String, AggregateFunction<?, ?>> functions)", "class_method_signature": "TableSliceGroup.aggregate(ListMultimap<String, AggregateFunction<?, ?>> functions)", "testcase": false, "constructor": false}, {"identifier": "summaryTableName", "parameters": "(Table source)", "modifiers": "public static", "return": "Table", "signature": "Table summaryTableName(Table source)", "full_signature": "public static Table summaryTableName(Table source)", "class_method_signature": "TableSliceGroup.summaryTableName(Table source)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<TableSlice>", "signature": "Iterator<TableSlice> iterator()", "full_signature": "@Override public Iterator<TableSlice> iterator()", "class_method_signature": "TableSliceGroup.iterator()", "testcase": false, "constructor": false}, {"identifier": "aggregateColumnName", "parameters": "(String columnName, String functionName)", "modifiers": "public static", "return": "String", "signature": "String aggregateColumnName(String columnName, String functionName)", "full_signature": "public static String aggregateColumnName(String columnName, String functionName)", "class_method_signature": "TableSliceGroup.aggregateColumnName(String columnName, String functionName)", "testcase": false, "constructor": false}, {"identifier": "asTableList", "parameters": "()", "modifiers": "public", "return": "List<Table>", "signature": "List<Table> asTableList()", "full_signature": "public List<Table> asTableList()", "class_method_signature": "TableSliceGroup.asTableList()", "testcase": false, "constructor": false}, {"identifier": "setSourceTable", "parameters": "(Table sourceTable)", "modifiers": "protected", "return": "void", "signature": "void setSourceTable(Table sourceTable)", "full_signature": "protected void setSourceTable(Table sourceTable)", "class_method_signature": "TableSliceGroup.setSourceTable(Table sourceTable)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/table/TableSliceGroup.java"}, "focal_method": {"identifier": "getSlices", "parameters": "()", "modifiers": "public", "return": "List<TableSlice>", "body": "public List<TableSlice> getSlices() {\n    return subTables;\n  }", "signature": "List<TableSlice> getSlices()", "full_signature": "public List<TableSlice> getSlices()", "class_method_signature": "TableSliceGroup.getSlices()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}