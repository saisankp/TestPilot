{"test_class": {"identifier": "JcrNodeTypeManagerTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String MIXIN1 = \"mix:lockable\";", "modifier": "private static final", "type": "String", "declarator": "MIXIN1 = \"mix:lockable\"", "var_name": "MIXIN1"}, {"original_string": "private static final String MIXIN2 = \"mix:referenceable\";", "modifier": "private static final", "type": "String", "declarator": "MIXIN2 = \"mix:referenceable\"", "var_name": "MIXIN2"}, {"original_string": "private static final String[] MIXINS = new String[] { MIXIN1, MIXIN2 };", "modifier": "private static final", "type": "String[]", "declarator": "MIXINS = new String[] { MIXIN1, MIXIN2 }", "var_name": "MIXINS"}, {"original_string": "private static final String HIERARCHY_NODE_TYPE = \"nt:hierarchyNode\";", "modifier": "private static final", "type": "String", "declarator": "HIERARCHY_NODE_TYPE = \"nt:hierarchyNode\"", "var_name": "HIERARCHY_NODE_TYPE"}, {"original_string": "private static final String NT_FILE_NODE_TYPE = \"nt:file\";", "modifier": "private static final", "type": "String", "declarator": "NT_FILE_NODE_TYPE = \"nt:file\"", "var_name": "NT_FILE_NODE_TYPE"}, {"original_string": "private static final String NT_FOLDER_NODE_TYPE = \"nt:folder\";", "modifier": "private static final", "type": "String", "declarator": "NT_FOLDER_NODE_TYPE = \"nt:folder\"", "var_name": "NT_FOLDER_NODE_TYPE"}, {"original_string": "private static final String SUBTYPE1 = NT_FILE_NODE_TYPE;", "modifier": "private static final", "type": "String", "declarator": "SUBTYPE1 = NT_FILE_NODE_TYPE", "var_name": "SUBTYPE1"}, {"original_string": "private static final String SUBTYPE2 = NT_FOLDER_NODE_TYPE;", "modifier": "private static final", "type": "String", "declarator": "SUBTYPE2 = NT_FOLDER_NODE_TYPE", "var_name": "SUBTYPE2"}, {"original_string": "private static final String[] SUBTYPES = new String[] { SUBTYPE1, SUBTYPE2 };", "modifier": "private static final", "type": "String[]", "declarator": "SUBTYPES = new String[] { SUBTYPE1, SUBTYPE2 }", "var_name": "SUBTYPES"}, {"original_string": "private static final String NO_MATCH_TYPE = \"nt:query\";", "modifier": "private static final", "type": "String", "declarator": "NO_MATCH_TYPE = \"nt:query\"", "var_name": "NO_MATCH_TYPE"}, {"original_string": "private static final String[] SUBTYPES_MIXINS;", "modifier": "private static final", "type": "String[]", "declarator": "SUBTYPES_MIXINS", "var_name": "SUBTYPES_MIXINS"}, {"original_string": "private JcrNodeTypeManager nodeTypeMgr;", "modifier": "private", "type": "JcrNodeTypeManager", "declarator": "nodeTypeMgr", "var_name": "nodeTypeMgr"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTypeManagerTest.java"}, "test_case": {"identifier": "shouldReturnFalseForHasNodeTypeWithNonexistantNodeTypeName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnFalseForHasNodeTypeWithNonexistantNodeTypeName() throws Exception {\n        assertFalse(nodeTypeMgr.hasNodeType(\"someArgleBargle\"));\n        assertFalse(nodeTypeMgr.hasNodeType(HIERARCHY_NODE_TYPE + \"x\"));\n    }", "signature": "void shouldReturnFalseForHasNodeTypeWithNonexistantNodeTypeName()", "full_signature": "@Test public void shouldReturnFalseForHasNodeTypeWithNonexistantNodeTypeName()", "class_method_signature": "JcrNodeTypeManagerTest.shouldReturnFalseForHasNodeTypeWithNonexistantNodeTypeName()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "hasNodeType", "assertFalse", "hasNodeType"]}, "focal_class": {"identifier": "JcrNodeTypeManager", "superclass": "", "interfaces": "implements NodeTypeManager", "fields": [{"original_string": "private final JcrSession session;", "modifier": "private final", "type": "JcrSession", "declarator": "session", "var_name": "session"}, {"original_string": "private final RepositoryNodeTypeManager repositoryTypeManager;", "modifier": "private final", "type": "RepositoryNodeTypeManager", "declarator": "repositoryTypeManager", "var_name": "repositoryTypeManager"}, {"original_string": "private Schemata schemata;", "modifier": "private", "type": "Schemata", "declarator": "schemata", "var_name": "schemata"}], "methods": [{"identifier": "JcrNodeTypeManager", "parameters": "( JcrSession session,\n                        RepositoryNodeTypeManager repositoryTypeManager )", "modifiers": "", "return": "", "signature": " JcrNodeTypeManager( JcrSession session,\n                        RepositoryNodeTypeManager repositoryTypeManager )", "full_signature": "  JcrNodeTypeManager( JcrSession session,\n                        RepositoryNodeTypeManager repositoryTypeManager )", "class_method_signature": "JcrNodeTypeManager.JcrNodeTypeManager( JcrSession session,\n                        RepositoryNodeTypeManager repositoryTypeManager )", "testcase": false, "constructor": true}, {"identifier": "context", "parameters": "()", "modifiers": "private final", "return": "ExecutionContext", "signature": "ExecutionContext context()", "full_signature": "private final ExecutionContext context()", "class_method_signature": "JcrNodeTypeManager.context()", "testcase": false, "constructor": false}, {"identifier": "schemata", "parameters": "()", "modifiers": "", "return": "Schemata", "signature": "Schemata schemata()", "full_signature": " Schemata schemata()", "class_method_signature": "JcrNodeTypeManager.schemata()", "testcase": false, "constructor": false}, {"identifier": "signalNamespaceChanges", "parameters": "()", "modifiers": "", "return": "void", "signature": "void signalNamespaceChanges()", "full_signature": " void signalNamespaceChanges()", "class_method_signature": "JcrNodeTypeManager.signalNamespaceChanges()", "testcase": false, "constructor": false}, {"identifier": "nodeTypes", "parameters": "()", "modifiers": "final", "return": "NodeTypes", "signature": "NodeTypes nodeTypes()", "full_signature": "final NodeTypes nodeTypes()", "class_method_signature": "JcrNodeTypeManager.nodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getAllNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getAllNodeTypes()", "full_signature": "@Override public NodeTypeIterator getAllNodeTypes()", "class_method_signature": "JcrNodeTypeManager.getAllNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getMixinNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getMixinNodeTypes()", "full_signature": "@Override public NodeTypeIterator getMixinNodeTypes()", "class_method_signature": "JcrNodeTypeManager.getMixinNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getNodeType", "parameters": "( String nodeTypeName )", "modifiers": "@Override public", "return": "JcrNodeType", "signature": "JcrNodeType getNodeType( String nodeTypeName )", "full_signature": "@Override public JcrNodeType getNodeType( String nodeTypeName )", "class_method_signature": "JcrNodeTypeManager.getNodeType( String nodeTypeName )", "testcase": false, "constructor": false}, {"identifier": "getNodeType", "parameters": "( Name nodeTypeName )", "modifiers": "", "return": "JcrNodeType", "signature": "JcrNodeType getNodeType( Name nodeTypeName )", "full_signature": " JcrNodeType getNodeType( Name nodeTypeName )", "class_method_signature": "JcrNodeTypeManager.getNodeType( Name nodeTypeName )", "testcase": false, "constructor": false}, {"identifier": "hasNodeType", "parameters": "( String nodeTypeName )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNodeType( String nodeTypeName )", "full_signature": "@Override public boolean hasNodeType( String nodeTypeName )", "class_method_signature": "JcrNodeTypeManager.hasNodeType( String nodeTypeName )", "testcase": false, "constructor": false}, {"identifier": "getPrimaryNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getPrimaryNodeTypes()", "full_signature": "@Override public NodeTypeIterator getPrimaryNodeTypes()", "class_method_signature": "JcrNodeTypeManager.getPrimaryNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getRootNodeDefinition", "parameters": "()", "modifiers": "", "return": "JcrNodeDefinition", "signature": "JcrNodeDefinition getRootNodeDefinition()", "full_signature": " JcrNodeDefinition getRootNodeDefinition()", "class_method_signature": "JcrNodeTypeManager.getRootNodeDefinition()", "testcase": false, "constructor": false}, {"identifier": "getNodeDefinition", "parameters": "( NodeDefinitionId definitionId )", "modifiers": "", "return": "JcrNodeDefinition", "signature": "JcrNodeDefinition getNodeDefinition( NodeDefinitionId definitionId )", "full_signature": " JcrNodeDefinition getNodeDefinition( NodeDefinitionId definitionId )", "class_method_signature": "JcrNodeTypeManager.getNodeDefinition( NodeDefinitionId definitionId )", "testcase": false, "constructor": false}, {"identifier": "getPropertyDefinition", "parameters": "( PropertyDefinitionId definitionId )", "modifiers": "", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition getPropertyDefinition( PropertyDefinitionId definitionId )", "full_signature": " JcrPropertyDefinition getPropertyDefinition( PropertyDefinitionId definitionId )", "class_method_signature": "JcrNodeTypeManager.getPropertyDefinition( PropertyDefinitionId definitionId )", "testcase": false, "constructor": false}, {"identifier": "findPropertyDefinition", "parameters": "( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected )", "modifiers": "final", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected )", "full_signature": "final JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected )", "class_method_signature": "JcrNodeTypeManager.findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected )", "testcase": false, "constructor": false}, {"identifier": "findPropertyDefinition", "parameters": "( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected,\n                                                        boolean checkTypesAndConstraints )", "modifiers": "final", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected,\n                                                        boolean checkTypesAndConstraints )", "full_signature": "final JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected,\n                                                        boolean checkTypesAndConstraints )", "class_method_signature": "JcrNodeTypeManager.findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value value,\n                                                        boolean checkMultiValuedDefinitions,\n                                                        boolean skipProtected,\n                                                        boolean checkTypesAndConstraints )", "testcase": false, "constructor": false}, {"identifier": "findPropertyDefinition", "parameters": "( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected )", "modifiers": "final", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected )", "full_signature": "final JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected )", "class_method_signature": "JcrNodeTypeManager.findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected )", "testcase": false, "constructor": false}, {"identifier": "findPropertyDefinition", "parameters": "( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected,\n                                                        boolean checkTypeAndConstraints )", "modifiers": "final", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected,\n                                                        boolean checkTypeAndConstraints )", "full_signature": "final JcrPropertyDefinition findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected,\n                                                        boolean checkTypeAndConstraints )", "class_method_signature": "JcrNodeTypeManager.findPropertyDefinition( Name primaryTypeName,\n                                                        Collection<Name> mixinTypeNames,\n                                                        Name propertyName,\n                                                        Value[] values,\n                                                        boolean skipProtected,\n                                                        boolean checkTypeAndConstraints )", "testcase": false, "constructor": false}, {"identifier": "canRemoveProperty", "parameters": "( Name primaryTypeNameOfParent,\n                               List<Name> mixinTypeNamesOfParent,\n                               Name propertyName,\n                               boolean skipProtected )", "modifiers": "", "return": "boolean", "signature": "boolean canRemoveProperty( Name primaryTypeNameOfParent,\n                               List<Name> mixinTypeNamesOfParent,\n                               Name propertyName,\n                               boolean skipProtected )", "full_signature": " boolean canRemoveProperty( Name primaryTypeNameOfParent,\n                               List<Name> mixinTypeNamesOfParent,\n                               Name propertyName,\n                               boolean skipProtected )", "class_method_signature": "JcrNodeTypeManager.canRemoveProperty( Name primaryTypeNameOfParent,\n                               List<Name> mixinTypeNamesOfParent,\n                               Name propertyName,\n                               boolean skipProtected )", "testcase": false, "constructor": false}, {"identifier": "canRemoveAllChildren", "parameters": "( Name primaryTypeNameOfParent,\n                                        Collection<Name> mixinTypeNamesOfParent,\n                                        Name childName,\n                                        boolean skipProtected )", "modifiers": "final", "return": "boolean", "signature": "boolean canRemoveAllChildren( Name primaryTypeNameOfParent,\n                                        Collection<Name> mixinTypeNamesOfParent,\n                                        Name childName,\n                                        boolean skipProtected )", "full_signature": "final boolean canRemoveAllChildren( Name primaryTypeNameOfParent,\n                                        Collection<Name> mixinTypeNamesOfParent,\n                                        Name childName,\n                                        boolean skipProtected )", "class_method_signature": "JcrNodeTypeManager.canRemoveAllChildren( Name primaryTypeNameOfParent,\n                                        Collection<Name> mixinTypeNamesOfParent,\n                                        Name childName,\n                                        boolean skipProtected )", "testcase": false, "constructor": false}, {"identifier": "registerNodeType", "parameters": "( NodeTypeDefinition template,\n                                      boolean allowUpdate )", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType registerNodeType( NodeTypeDefinition template,\n                                      boolean allowUpdate )", "full_signature": "@Override public NodeType registerNodeType( NodeTypeDefinition template,\n                                      boolean allowUpdate )", "class_method_signature": "JcrNodeTypeManager.registerNodeType( NodeTypeDefinition template,\n                                      boolean allowUpdate )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( Collection<NodeTypeDefinition> templates,\n                                               boolean allowUpdates )", "modifiers": "public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( Collection<NodeTypeDefinition> templates,\n                                               boolean allowUpdates )", "full_signature": "public NodeTypeIterator registerNodeTypes( Collection<NodeTypeDefinition> templates,\n                                               boolean allowUpdates )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( Collection<NodeTypeDefinition> templates,\n                                               boolean allowUpdates )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( Iterable<NodeTypeDefinition> nodeTypes )", "modifiers": "public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypes )", "full_signature": "public NodeTypeIterator registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypes )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypes )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( NodeTypeDefinition[] ntds,\n                                               boolean allowUpdate )", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( NodeTypeDefinition[] ntds,\n                                               boolean allowUpdate )", "full_signature": "@Override public NodeTypeIterator registerNodeTypes( NodeTypeDefinition[] ntds,\n                                               boolean allowUpdate )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( NodeTypeDefinition[] ntds,\n                                               boolean allowUpdate )", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeType", "parameters": "( String nodeTypeName )", "modifiers": "@Override public", "return": "void", "signature": "void unregisterNodeType( String nodeTypeName )", "full_signature": "@Override public void unregisterNodeType( String nodeTypeName )", "class_method_signature": "JcrNodeTypeManager.unregisterNodeType( String nodeTypeName )", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeTypes", "parameters": "( Collection<String> nodeTypeNames )", "modifiers": "public", "return": "void", "signature": "void unregisterNodeTypes( Collection<String> nodeTypeNames )", "full_signature": "public void unregisterNodeTypes( Collection<String> nodeTypeNames )", "class_method_signature": "JcrNodeTypeManager.unregisterNodeTypes( Collection<String> nodeTypeNames )", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeTypes", "parameters": "( String[] names )", "modifiers": "@Override public", "return": "void", "signature": "void unregisterNodeTypes( String[] names )", "full_signature": "@Override public void unregisterNodeTypes( String[] names )", "class_method_signature": "JcrNodeTypeManager.unregisterNodeTypes( String[] names )", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeTemplate", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeTemplate", "signature": "NodeTypeTemplate createNodeTypeTemplate()", "full_signature": "@Override public NodeTypeTemplate createNodeTypeTemplate()", "class_method_signature": "JcrNodeTypeManager.createNodeTypeTemplate()", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeTemplate", "parameters": "( NodeTypeDefinition ntd )", "modifiers": "@Override @SuppressWarnings( \"unchecked\" ) public", "return": "NodeTypeTemplate", "signature": "NodeTypeTemplate createNodeTypeTemplate( NodeTypeDefinition ntd )", "full_signature": "@Override @SuppressWarnings( \"unchecked\" ) public NodeTypeTemplate createNodeTypeTemplate( NodeTypeDefinition ntd )", "class_method_signature": "JcrNodeTypeManager.createNodeTypeTemplate( NodeTypeDefinition ntd )", "testcase": false, "constructor": false}, {"identifier": "createNodeDefinitionTemplate", "parameters": "()", "modifiers": "@Override public", "return": "NodeDefinitionTemplate", "signature": "NodeDefinitionTemplate createNodeDefinitionTemplate()", "full_signature": "@Override public NodeDefinitionTemplate createNodeDefinitionTemplate()", "class_method_signature": "JcrNodeTypeManager.createNodeDefinitionTemplate()", "testcase": false, "constructor": false}, {"identifier": "createPropertyDefinitionTemplate", "parameters": "()", "modifiers": "@Override public", "return": "PropertyDefinitionTemplate", "signature": "PropertyDefinitionTemplate createPropertyDefinitionTemplate()", "full_signature": "@Override public PropertyDefinitionTemplate createPropertyDefinitionTemplate()", "class_method_signature": "JcrNodeTypeManager.createPropertyDefinitionTemplate()", "testcase": false, "constructor": false}, {"identifier": "isDerivedFrom", "parameters": "( String[] testTypeNames,\n                                  String primaryTypeName,\n                                  String[] mixinNames )", "modifiers": "public", "return": "boolean", "signature": "boolean isDerivedFrom( String[] testTypeNames,\n                                  String primaryTypeName,\n                                  String[] mixinNames )", "full_signature": "public boolean isDerivedFrom( String[] testTypeNames,\n                                  String primaryTypeName,\n                                  String[] mixinNames )", "class_method_signature": "JcrNodeTypeManager.isDerivedFrom( String[] testTypeNames,\n                                  String primaryTypeName,\n                                  String[] mixinNames )", "testcase": false, "constructor": false}, {"identifier": "messageFrom", "parameters": "( Problems problems )", "modifiers": "protected", "return": "String", "signature": "String messageFrom( Problems problems )", "full_signature": "protected String messageFrom( Problems problems )", "class_method_signature": "JcrNodeTypeManager.messageFrom( Problems problems )", "testcase": false, "constructor": false}, {"identifier": "importFromXml", "parameters": "( InputSource source )", "modifiers": "protected", "return": "List<NodeTypeDefinition>", "signature": "List<NodeTypeDefinition> importFromXml( InputSource source )", "full_signature": "protected List<NodeTypeDefinition> importFromXml( InputSource source )", "class_method_signature": "JcrNodeTypeManager.importFromXml( InputSource source )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( File file,\n                                               boolean allowUpdate )", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( File file,\n                                               boolean allowUpdate )", "full_signature": "@Override public NodeTypeIterator registerNodeTypes( File file,\n                                               boolean allowUpdate )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( File file,\n                                               boolean allowUpdate )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( InputStream stream,\n                                               boolean allowUpdate )", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( InputStream stream,\n                                               boolean allowUpdate )", "full_signature": "@Override public NodeTypeIterator registerNodeTypes( InputStream stream,\n                                               boolean allowUpdate )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( InputStream stream,\n                                               boolean allowUpdate )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( URL url,\n                                               boolean allowUpdate )", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes( URL url,\n                                               boolean allowUpdate )", "full_signature": "@Override public NodeTypeIterator registerNodeTypes( URL url,\n                                               boolean allowUpdate )", "class_method_signature": "JcrNodeTypeManager.registerNodeTypes( URL url,\n                                               boolean allowUpdate )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrNodeTypeManager.java"}, "focal_method": {"identifier": "hasNodeType", "parameters": "( String nodeTypeName )", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean hasNodeType( String nodeTypeName ) {\n        Name ntName = context().getValueFactories().getNameFactory().create(nodeTypeName);\n        return nodeTypes().hasNodeType(ntName);\n    }", "signature": "boolean hasNodeType( String nodeTypeName )", "full_signature": "@Override public boolean hasNodeType( String nodeTypeName )", "class_method_signature": "JcrNodeTypeManager.hasNodeType( String nodeTypeName )", "testcase": false, "constructor": false, "invocations": ["create", "getNameFactory", "getValueFactories", "context", "hasNodeType", "nodeTypes"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}