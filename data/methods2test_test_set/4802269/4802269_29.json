{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindDataObjectsQuerySerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataObjectsQuerySerialization() throws IOException {\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"scope\\\": {\\\"project\\\":\\\"project-000000000000000000000000\\\"}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .inProject(DXProject.getInstance(\"project-000000000000000000000000\"))\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"scope\\\": {\\\"project\\\":\\\"project-000000000000000000000000\\\", \\\"folder\\\": \\\"/my/subfolder\\\", \\\"recurse\\\": false}}\"),\n                mapper.valueToTree(DXSearch\n                        .findDataObjects()\n                        .inFolder(DXProject.getInstance(\"project-000000000000000000000000\"),\n                                \"/my/subfolder\").buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"scope\\\": {\\\"project\\\": \\\"project-000000000000000000000000\\\"}, \\\"name\\\": \\\"dnanexus\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .inProject(DXProject.getInstance(\"project-000000000000000000000000\"))\n                        .nameMatchesExactly(\"dnanexus\").buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": \\\"dnanexus\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().nameMatchesExactly(\"dnanexus\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"(DNA|dna)nexus\\\"}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().nameMatchesRegexp(\"(DNA|dna)nexus\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"[dr]nanexus\\\"}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .nameMatchesRegexp(\"[dr]nanexus\", false).buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"regexp\\\": \\\"[dr]nanexus\\\", \\\"flags\\\": \\\"i\\\"}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .nameMatchesRegexp(\"[dr]nanexus\", true).buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"name\\\": {\\\"glob\\\": \\\"*nexus\\\"}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().nameMatchesGlob(\"*nexus\")\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"visibility\\\": \\\"hidden\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .withVisibility(DXSearch.VisibilityQuery.HIDDEN).buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"level\\\": \\\"ADMINISTER\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .withMinimumAccessLevel(AccessLevel.ADMINISTER).buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"describe\\\": true}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().includeDescribeOutput()\n                        .buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"describe\\\": {\\\"properties\\\": true}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects()\n                        .includeDescribeOutput(DXDataObject.DescribeOptions.get().withProperties())\n                        .buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"tags\\\": \\\"a\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().withTag(\"a\").buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"tags\\\": {\\\"$or\\\": [{\\\"$and\\\": [\\\"a\\\", \\\"b\\\"]}, \\\"c\\\"]}}\"), mapper\n                .valueToTree(DXSearch\n                        .findDataObjects()\n                        .withTags(\n                                DXSearch.TagsQuery.anyOf(DXSearch.TagsQuery.allOf(\"a\", \"b\"),\n                                        DXSearch.TagsQuery.of(\"c\"))).buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"type\\\": \\\"a\\\"}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().withType(\"a\").buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"type\\\": {\\\"$or\\\": [{\\\"$and\\\": [\\\"a\\\", \\\"b\\\"]}, \\\"c\\\"]}}\"), mapper\n                .valueToTree(DXSearch\n                        .findDataObjects()\n                        .withTypes(\n                                DXSearch.TypeQuery.anyOf(DXSearch.TypeQuery.allOf(\"a\", \"b\"),\n                                        DXSearch.TypeQuery.of(\"c\"))).buildRequestHash()));\n\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"properties\\\": {\\\"foo\\\": true}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().withProperty(\"foo\")\n                        .buildRequestHash()));\n        Assert.assertEquals(DXJSON\n                .parseJson(\"{\\\"properties\\\": {\\\"$and\\\": [{\\\"foo\\\": true}, {\\\"bar\\\": \\\"a\\\"}]}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().withProperty(\"foo\")\n                        .withProperty(\"bar\", \"a\").buildRequestHash()));\n        Assert.assertEquals(\n                DXJSON.parseJson(\"{\\\"properties\\\": {\\\"$and\\\": [{\\\"foo\\\": true}, {\\\"bar\\\": \\\"a\\\"}, {\\\"baz\\\": \\\"b\\\"}]}}\"),\n                mapper.valueToTree(DXSearch.findDataObjects().withProperty(\"foo\")\n                        .withProperty(\"bar\", \"a\")\n                        .withProperties(PropertiesQuery.withKeyAndValue(\"baz\", \"b\"))\n                        .buildRequestHash()));\n\n        Assert.assertEquals(DXJSON.parseJson(\"{\\\"id\\\": [\\\"record-111100000000000000000000\\\"]}\"),\n                mapper.valueToTree(DXSearch\n                        .findDataObjects()\n                        .withIdsIn(\n                                ImmutableList.of(DXRecord\n                                        .getInstance(\"record-111100000000000000000000\")))\n                        .buildRequestHash()));\n\n        try {\n            DXSearch.findDataObjects()\n                    .inProject(DXProject.getInstance(\"project-000000000000000000000000\"))\n                    .inProject(DXProject.getInstance(\"project-111100000000000000000000\"));\n            Assert.fail(\"Expected double setting of inProject to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findDataObjects()\n                    .inFolder(DXProject.getInstance(\"project-000000000000000000000000\"), \"/1\")\n                    .inFolder(DXProject.getInstance(\"project-000000000000000000000000\"), \"/2\");\n            Assert.fail(\"Expected double setting of inFolder to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findDataObjects().nameMatchesExactly(\"ab\").nameMatchesGlob(\"*b\");\n            Assert.fail(\"Expected double setting of name parameters to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n\n        try {\n            DXSearch.findDataObjects().withMinimumAccessLevel(AccessLevel.NONE);\n            Assert.fail(\"Expected minimumAccessLevel=NONE to fail\");\n        } catch (IllegalArgumentException e) {\n            // Expected\n        }\n\n        try {\n            DXSearch.findDataObjects().withClassApplet().withClassFile();\n            Assert.fail(\"Expected setting multiple class constraints to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            DXSearch.findDataObjects().withIdsIn(ImmutableList.<DXDataObject>of())\n                    .withIdsIn(ImmutableList.<DXDataObject>of());\n            Assert.fail(\"Expected double setting of withIdsIn to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n    }", "signature": "void testFindDataObjectsQuerySerialization()", "full_signature": "@Test public void testFindDataObjectsQuerySerialization()", "class_method_signature": "DXSearchTest.testFindDataObjectsQuerySerialization()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseJson", "valueToTree", "buildRequestHash", "inProject", "findDataObjects", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "inFolder", "findDataObjects", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesExactly", "inProject", "findDataObjects", "getInstance", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesExactly", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesRegexp", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "nameMatchesGlob", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withVisibility", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withMinimumAccessLevel", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "includeDescribeOutput", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "includeDescribeOutput", "findDataObjects", "withProperties", "get", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withTag", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withTags", "findDataObjects", "anyOf", "allOf", "of", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withType", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withTypes", "findDataObjects", "anyOf", "allOf", "of", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperty", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperty", "withProperty", "findDataObjects", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withProperties", "withProperty", "withProperty", "findDataObjects", "withKeyAndValue", "assertEquals", "parseJson", "valueToTree", "buildRequestHash", "withIdsIn", "findDataObjects", "of", "getInstance", "inProject", "inProject", "findDataObjects", "getInstance", "getInstance", "fail", "inFolder", "inFolder", "findDataObjects", "getInstance", "getInstance", "fail", "nameMatchesGlob", "nameMatchesExactly", "findDataObjects", "fail", "withMinimumAccessLevel", "findDataObjects", "fail", "withClassFile", "withClassApplet", "findDataObjects", "fail", "withIdsIn", "withIdsIn", "findDataObjects", "of", "of", "fail"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "body": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects() {\n        return new FindDataObjectsRequestBuilder<DXDataObject>();\n    }", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}