{"test_class": {"identifier": "EntitiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Entities entities;", "modifier": "private", "type": "Entities", "declarator": "entities", "var_name": "entities"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/internal/EntitiesTest.java"}, "test_case": {"identifier": "addEntities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addEntities() throws Exception {\n        String[][] array = { { \"foo\", \"100\" }, { \"bar\", \"101\" } };\n\n        Entities e = new Entities();\n\n        e.addEntities(array);\n\n        assertEquals(\"foo\", e.getEntityName(100));\n        assertEquals(\"bar\", e.getEntityName(101));\n\n        assertEquals(100, e.getEntityValue(\"foo\"));\n        assertEquals(101, e.getEntityValue(\"bar\"));\n    }", "signature": "void addEntities()", "full_signature": "@Test public void addEntities()", "class_method_signature": "EntitiesTest.addEntities()", "testcase": true, "constructor": false, "invocations": ["addEntities", "assertEquals", "getEntityName", "assertEquals", "getEntityName", "assertEquals", "getEntityValue", "assertEquals", "getEntityValue"]}, "focal_class": {"identifier": "Entities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[][] BASIC_SET = { { \"quot\", \"34\" }, // \" -\n                                                                    // double-quote\n            { \"amp\", \"38\" }, // & - ampersand\n            { \"lt\", \"60\" }, // < - less-than\n            { \"gt\", \"62\" }, // > - greater-than\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "BASIC_SET = { { \"quot\", \"34\" }, // \" -\n                                                                    // double-quote\n            { \"amp\", \"38\" }, // & - ampersand\n            { \"lt\", \"60\" }, // < - less-than\n            { \"gt\", \"62\" }, // > - greater-than\n    }", "var_name": "BASIC_SET"}, {"original_string": "private static final String[][] APOS_SET = { { \"apos\", \"39\" }, // XML\n                                                                   // apostrophe\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "APOS_SET = { { \"apos\", \"39\" }, // XML\n                                                                   // apostrophe\n    }", "var_name": "APOS_SET"}, {"original_string": "private static final String[][] ISO_8859_1_SET = { { \"nbsp\", \"160\" }, // non-breaking\n                                                                          // space\n            { \"iexcl\", \"161\" }, // inverted exclamation mark\n            { \"cent\", \"162\" }, // cent sign\n            { \"pound\", \"163\" }, // pound sign\n            { \"curren\", \"164\" }, // currency sign\n            { \"yen\", \"165\" }, // yen sign = yuan sign\n            { \"brvbar\", \"166\" }, // broken bar = broken vertical bar\n            { \"sect\", \"167\" }, // section sign\n            { \"uml\", \"168\" }, // diaeresis = spacing diaeresis\n            { \"copy\", \"169\" }, // ? - copyright sign\n            { \"ordf\", \"170\" }, // feminine ordinal indicator\n            { \"laquo\", \"171\" }, // left-pointing double angle quotation mark =\n                                // left pointing guillemet\n            { \"not\", \"172\" }, // not sign\n            { \"shy\", \"173\" }, // soft hyphen = discretionary hyphen\n            { \"reg\", \"174\" }, // ? - registered trademark sign\n            { \"macr\", \"175\" }, // macron = spacing macron = overline = APL\n                               // overbar\n            { \"deg\", \"176\" }, // degree sign\n            { \"plusmn\", \"177\" }, // plus-minus sign = plus-or-minus sign\n            { \"sup2\", \"178\" }, // superscript two = superscript digit two =\n                               // squared\n            { \"sup3\", \"179\" }, // superscript three = superscript digit three =\n                               // cubed\n            { \"acute\", \"180\" }, // acute accent = spacing acute\n            { \"micro\", \"181\" }, // micro sign\n            { \"para\", \"182\" }, // pilcrow sign = paragraph sign\n            { \"middot\", \"183\" }, // middle dot = Georgian comma = Greek middle\n                                 // dot\n            { \"cedil\", \"184\" }, // cedilla = spacing cedilla\n            { \"sup1\", \"185\" }, // superscript one = superscript digit one\n            { \"ordm\", \"186\" }, // masculine ordinal indicator\n            { \"raquo\", \"187\" }, // right-pointing double angle quotation mark =\n                                // right pointing guillemet\n            { \"frac14\", \"188\" }, // vulgar fraction one quarter = fraction one\n                                 // quarter\n            { \"frac12\", \"189\" }, // vulgar fraction one half = fraction one half\n            { \"frac34\", \"190\" }, // vulgar fraction three quarters = fraction\n                                 // three quarters\n            { \"iquest\", \"191\" }, // inverted question mark = turned question\n                                 // mark\n            { \"Agrave\", \"192\" }, // ? - uppercase A, grave accent\n            { \"Aacute\", \"193\" }, // ? - uppercase A, acute accent\n            { \"Acirc\", \"194\" }, // ? - uppercase A, circumflex accent\n            { \"Atilde\", \"195\" }, // ? - uppercase A, tilde\n            { \"Auml\", \"196\" }, // ? - uppercase A, umlaut\n            { \"Aring\", \"197\" }, // ? - uppercase A, ring\n            { \"AElig\", \"198\" }, // ? - uppercase AE\n            { \"Ccedil\", \"199\" }, // ? - uppercase C, cedilla\n            { \"Egrave\", \"200\" }, // ? - uppercase E, grave accent\n            { \"Eacute\", \"201\" }, // ? - uppercase E, acute accent\n            { \"Ecirc\", \"202\" }, // ? - uppercase E, circumflex accent\n            { \"Euml\", \"203\" }, // ? - uppercase E, umlaut\n            { \"Igrave\", \"204\" }, // ? - uppercase I, grave accent\n            { \"Iacute\", \"205\" }, // ? - uppercase I, acute accent\n            { \"Icirc\", \"206\" }, // ? - uppercase I, circumflex accent\n            { \"Iuml\", \"207\" }, // ? - uppercase I, umlaut\n            { \"ETH\", \"208\" }, // ? - uppercase Eth, Icelandic\n            { \"Ntilde\", \"209\" }, // ? - uppercase N, tilde\n            { \"Ograve\", \"210\" }, // ? - uppercase O, grave accent\n            { \"Oacute\", \"211\" }, // ? - uppercase O, acute accent\n            { \"Ocirc\", \"212\" }, // ? - uppercase O, circumflex accent\n            { \"Otilde\", \"213\" }, // ? - uppercase O, tilde\n            { \"Ouml\", \"214\" }, // ? - uppercase O, umlaut\n            { \"times\", \"215\" }, // multiplication sign\n            { \"Oslash\", \"216\" }, // ? - uppercase O, slash\n            { \"Ugrave\", \"217\" }, // ? - uppercase U, grave accent\n            { \"Uacute\", \"218\" }, // ? - uppercase U, acute accent\n            { \"Ucirc\", \"219\" }, // ? - uppercase U, circumflex accent\n            { \"Uuml\", \"220\" }, // ? - uppercase U, umlaut\n            { \"Yacute\", \"221\" }, // ? - uppercase Y, acute accent\n            { \"THORN\", \"222\" }, // ? - uppercase THORN, Icelandic\n            { \"szlig\", \"223\" }, // ? - lowercase sharps, German\n            { \"agrave\", \"224\" }, // ? - lowercase a, grave accent\n            { \"aacute\", \"225\" }, // ? - lowercase a, acute accent\n            { \"acirc\", \"226\" }, // ? - lowercase a, circumflex accent\n            { \"atilde\", \"227\" }, // ? - lowercase a, tilde\n            { \"auml\", \"228\" }, // ? - lowercase a, umlaut\n            { \"aring\", \"229\" }, // ? - lowercase a, ring\n            { \"aelig\", \"230\" }, // ? - lowercase ae\n            { \"ccedil\", \"231\" }, // ? - lowercase c, cedilla\n            { \"egrave\", \"232\" }, // ? - lowercase e, grave accent\n            { \"eacute\", \"233\" }, // ? - lowercase e, acute accent\n            { \"ecirc\", \"234\" }, // ? - lowercase e, circumflex accent\n            { \"euml\", \"235\" }, // ? - lowercase e, umlaut\n            { \"igrave\", \"236\" }, // ? - lowercase i, grave accent\n            { \"iacute\", \"237\" }, // ? - lowercase i, acute accent\n            { \"icirc\", \"238\" }, // ? - lowercase i, circumflex accent\n            { \"iuml\", \"239\" }, // ? - lowercase i, umlaut\n            { \"eth\", \"240\" }, // ? - lowercase eth, Icelandic\n            { \"ntilde\", \"241\" }, // ? - lowercase n, tilde\n            { \"ograve\", \"242\" }, // ? - lowercase o, grave accent\n            { \"oacute\", \"243\" }, // ? - lowercase o, acute accent\n            { \"ocirc\", \"244\" }, // ? - lowercase o, circumflex accent\n            { \"otilde\", \"245\" }, // ? - lowercase o, tilde\n            { \"ouml\", \"246\" }, // ? - lowercase o, umlaut\n            { \"divide\", \"247\" }, // division sign\n            { \"oslash\", \"248\" }, // ? - lowercase o, slash\n            { \"ugrave\", \"249\" }, // ? - lowercase u, grave accent\n            { \"uacute\", \"250\" }, // ? - lowercase u, acute accent\n            { \"ucirc\", \"251\" }, // ? - lowercase u, circumflex accent\n            { \"uuml\", \"252\" }, // ? - lowercase u, umlaut\n            { \"yacute\", \"253\" }, // ? - lowercase y, acute accent\n            { \"thorn\", \"254\" }, // ? - lowercase thorn, Icelandic\n            { \"yuml\", \"255\" }, // ? - lowercase y, umlaut\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "ISO_8859_1_SET = { { \"nbsp\", \"160\" }, // non-breaking\n                                                                          // space\n            { \"iexcl\", \"161\" }, // inverted exclamation mark\n            { \"cent\", \"162\" }, // cent sign\n            { \"pound\", \"163\" }, // pound sign\n            { \"curren\", \"164\" }, // currency sign\n            { \"yen\", \"165\" }, // yen sign = yuan sign\n            { \"brvbar\", \"166\" }, // broken bar = broken vertical bar\n            { \"sect\", \"167\" }, // section sign\n            { \"uml\", \"168\" }, // diaeresis = spacing diaeresis\n            { \"copy\", \"169\" }, // ? - copyright sign\n            { \"ordf\", \"170\" }, // feminine ordinal indicator\n            { \"laquo\", \"171\" }, // left-pointing double angle quotation mark =\n                                // left pointing guillemet\n            { \"not\", \"172\" }, // not sign\n            { \"shy\", \"173\" }, // soft hyphen = discretionary hyphen\n            { \"reg\", \"174\" }, // ? - registered trademark sign\n            { \"macr\", \"175\" }, // macron = spacing macron = overline = APL\n                               // overbar\n            { \"deg\", \"176\" }, // degree sign\n            { \"plusmn\", \"177\" }, // plus-minus sign = plus-or-minus sign\n            { \"sup2\", \"178\" }, // superscript two = superscript digit two =\n                               // squared\n            { \"sup3\", \"179\" }, // superscript three = superscript digit three =\n                               // cubed\n            { \"acute\", \"180\" }, // acute accent = spacing acute\n            { \"micro\", \"181\" }, // micro sign\n            { \"para\", \"182\" }, // pilcrow sign = paragraph sign\n            { \"middot\", \"183\" }, // middle dot = Georgian comma = Greek middle\n                                 // dot\n            { \"cedil\", \"184\" }, // cedilla = spacing cedilla\n            { \"sup1\", \"185\" }, // superscript one = superscript digit one\n            { \"ordm\", \"186\" }, // masculine ordinal indicator\n            { \"raquo\", \"187\" }, // right-pointing double angle quotation mark =\n                                // right pointing guillemet\n            { \"frac14\", \"188\" }, // vulgar fraction one quarter = fraction one\n                                 // quarter\n            { \"frac12\", \"189\" }, // vulgar fraction one half = fraction one half\n            { \"frac34\", \"190\" }, // vulgar fraction three quarters = fraction\n                                 // three quarters\n            { \"iquest\", \"191\" }, // inverted question mark = turned question\n                                 // mark\n            { \"Agrave\", \"192\" }, // ? - uppercase A, grave accent\n            { \"Aacute\", \"193\" }, // ? - uppercase A, acute accent\n            { \"Acirc\", \"194\" }, // ? - uppercase A, circumflex accent\n            { \"Atilde\", \"195\" }, // ? - uppercase A, tilde\n            { \"Auml\", \"196\" }, // ? - uppercase A, umlaut\n            { \"Aring\", \"197\" }, // ? - uppercase A, ring\n            { \"AElig\", \"198\" }, // ? - uppercase AE\n            { \"Ccedil\", \"199\" }, // ? - uppercase C, cedilla\n            { \"Egrave\", \"200\" }, // ? - uppercase E, grave accent\n            { \"Eacute\", \"201\" }, // ? - uppercase E, acute accent\n            { \"Ecirc\", \"202\" }, // ? - uppercase E, circumflex accent\n            { \"Euml\", \"203\" }, // ? - uppercase E, umlaut\n            { \"Igrave\", \"204\" }, // ? - uppercase I, grave accent\n            { \"Iacute\", \"205\" }, // ? - uppercase I, acute accent\n            { \"Icirc\", \"206\" }, // ? - uppercase I, circumflex accent\n            { \"Iuml\", \"207\" }, // ? - uppercase I, umlaut\n            { \"ETH\", \"208\" }, // ? - uppercase Eth, Icelandic\n            { \"Ntilde\", \"209\" }, // ? - uppercase N, tilde\n            { \"Ograve\", \"210\" }, // ? - uppercase O, grave accent\n            { \"Oacute\", \"211\" }, // ? - uppercase O, acute accent\n            { \"Ocirc\", \"212\" }, // ? - uppercase O, circumflex accent\n            { \"Otilde\", \"213\" }, // ? - uppercase O, tilde\n            { \"Ouml\", \"214\" }, // ? - uppercase O, umlaut\n            { \"times\", \"215\" }, // multiplication sign\n            { \"Oslash\", \"216\" }, // ? - uppercase O, slash\n            { \"Ugrave\", \"217\" }, // ? - uppercase U, grave accent\n            { \"Uacute\", \"218\" }, // ? - uppercase U, acute accent\n            { \"Ucirc\", \"219\" }, // ? - uppercase U, circumflex accent\n            { \"Uuml\", \"220\" }, // ? - uppercase U, umlaut\n            { \"Yacute\", \"221\" }, // ? - uppercase Y, acute accent\n            { \"THORN\", \"222\" }, // ? - uppercase THORN, Icelandic\n            { \"szlig\", \"223\" }, // ? - lowercase sharps, German\n            { \"agrave\", \"224\" }, // ? - lowercase a, grave accent\n            { \"aacute\", \"225\" }, // ? - lowercase a, acute accent\n            { \"acirc\", \"226\" }, // ? - lowercase a, circumflex accent\n            { \"atilde\", \"227\" }, // ? - lowercase a, tilde\n            { \"auml\", \"228\" }, // ? - lowercase a, umlaut\n            { \"aring\", \"229\" }, // ? - lowercase a, ring\n            { \"aelig\", \"230\" }, // ? - lowercase ae\n            { \"ccedil\", \"231\" }, // ? - lowercase c, cedilla\n            { \"egrave\", \"232\" }, // ? - lowercase e, grave accent\n            { \"eacute\", \"233\" }, // ? - lowercase e, acute accent\n            { \"ecirc\", \"234\" }, // ? - lowercase e, circumflex accent\n            { \"euml\", \"235\" }, // ? - lowercase e, umlaut\n            { \"igrave\", \"236\" }, // ? - lowercase i, grave accent\n            { \"iacute\", \"237\" }, // ? - lowercase i, acute accent\n            { \"icirc\", \"238\" }, // ? - lowercase i, circumflex accent\n            { \"iuml\", \"239\" }, // ? - lowercase i, umlaut\n            { \"eth\", \"240\" }, // ? - lowercase eth, Icelandic\n            { \"ntilde\", \"241\" }, // ? - lowercase n, tilde\n            { \"ograve\", \"242\" }, // ? - lowercase o, grave accent\n            { \"oacute\", \"243\" }, // ? - lowercase o, acute accent\n            { \"ocirc\", \"244\" }, // ? - lowercase o, circumflex accent\n            { \"otilde\", \"245\" }, // ? - lowercase o, tilde\n            { \"ouml\", \"246\" }, // ? - lowercase o, umlaut\n            { \"divide\", \"247\" }, // division sign\n            { \"oslash\", \"248\" }, // ? - lowercase o, slash\n            { \"ugrave\", \"249\" }, // ? - lowercase u, grave accent\n            { \"uacute\", \"250\" }, // ? - lowercase u, acute accent\n            { \"ucirc\", \"251\" }, // ? - lowercase u, circumflex accent\n            { \"uuml\", \"252\" }, // ? - lowercase u, umlaut\n            { \"yacute\", \"253\" }, // ? - lowercase y, acute accent\n            { \"thorn\", \"254\" }, // ? - lowercase thorn, Icelandic\n            { \"yuml\", \"255\" }, // ? - lowercase y, umlaut\n    }", "var_name": "ISO_8859_1_SET"}, {"original_string": "private static final String[][] HTML40_SET = { { \"fnof\", \"402\" }, // latin\n                                                                      // small\n                                                                      // f\n                                                                      // with\n                                                                      // hook\n                                                                      // =\n                                                                      // function=\n                                                                      // florin,\n                                                                      // U+0192\n                                                                      // ISOtech\n            { \"Alpha\", \"913\" }, // greek capital letter alpha, U+0391\n            { \"Beta\", \"914\" }, // greek capital letter beta, U+0392\n            { \"Gamma\", \"915\" }, // greek capital letter gamma,U+0393 ISOgrk3\n            { \"Delta\", \"916\" }, // greek capital letter delta,U+0394 ISOgrk3\n            { \"Epsilon\", \"917\" }, // greek capital letter epsilon, U+0395\n            { \"Zeta\", \"918\" }, // greek capital letter zeta, U+0396\n            { \"Eta\", \"919\" }, // greek capital letter eta, U+0397\n            { \"Theta\", \"920\" }, // greek capital letter theta,U+0398 ISOgrk3\n            { \"Iota\", \"921\" }, // greek capital letter iota, U+0399\n            { \"Kappa\", \"922\" }, // greek capital letter kappa, U+039A\n            { \"Lambda\", \"923\" }, // greek capital letter lambda,U+039B ISOgrk3\n            { \"Mu\", \"924\" }, // greek capital letter mu, U+039C\n            { \"Nu\", \"925\" }, // greek capital letter nu, U+039D\n            { \"Xi\", \"926\" }, // greek capital letter xi, U+039E ISOgrk3\n            { \"Omicron\", \"927\" }, // greek capital letter omicron, U+039F\n            { \"Pi\", \"928\" }, // greek capital letter pi, U+03A0 ISOgrk3\n            { \"Rho\", \"929\" }, // greek capital letter rho, U+03A1\n            { \"Sigma\", \"931\" }, // greek capital letter sigma,U+03A3 ISOgrk3\n            { \"Tau\", \"932\" }, // greek capital letter tau, U+03A4\n            { \"Upsilon\", \"933\" }, // greek capital letter upsilon,U+03A5 ISOgrk3\n            { \"Phi\", \"934\" }, // greek capital letter phi,U+03A6 ISOgrk3\n            { \"Chi\", \"935\" }, // greek capital letter chi, U+03A7\n            { \"Psi\", \"936\" }, // greek capital letter psi,U+03A8 ISOgrk3\n            { \"Omega\", \"937\" }, // greek capital letter omega,U+03A9 ISOgrk3\n            { \"alpha\", \"945\" }, // greek small letter alpha,U+03B1 ISOgrk3\n            { \"beta\", \"946\" }, // greek small letter beta, U+03B2 ISOgrk3\n            { \"gamma\", \"947\" }, // greek small letter gamma,U+03B3 ISOgrk3\n            { \"delta\", \"948\" }, // greek small letter delta,U+03B4 ISOgrk3\n            { \"epsilon\", \"949\" }, // greek small letter epsilon,U+03B5 ISOgrk3\n            { \"zeta\", \"950\" }, // greek small letter zeta, U+03B6 ISOgrk3\n            { \"eta\", \"951\" }, // greek small letter eta, U+03B7 ISOgrk3\n            { \"theta\", \"952\" }, // greek small letter theta,U+03B8 ISOgrk3\n            { \"iota\", \"953\" }, // greek small letter iota, U+03B9 ISOgrk3\n            { \"kappa\", \"954\" }, // greek small letter kappa,U+03BA ISOgrk3\n            { \"lambda\", \"955\" }, // greek small letter lambda,U+03BB ISOgrk3\n            { \"mu\", \"956\" }, // greek small letter mu, U+03BC ISOgrk3\n            { \"nu\", \"957\" }, // greek small letter nu, U+03BD ISOgrk3\n            { \"xi\", \"958\" }, // greek small letter xi, U+03BE ISOgrk3\n            { \"omicron\", \"959\" }, // greek small letter omicron, U+03BF NEW\n            { \"pi\", \"960\" }, // greek small letter pi, U+03C0 ISOgrk3\n            { \"rho\", \"961\" }, // greek small letter rho, U+03C1 ISOgrk3\n            { \"sigmaf\", \"962\" }, // greek small letter final sigma,U+03C2\n                                 // ISOgrk3\n            { \"sigma\", \"963\" }, // greek small letter sigma,U+03C3 ISOgrk3\n            { \"tau\", \"964\" }, // greek small letter tau, U+03C4 ISOgrk3\n            { \"upsilon\", \"965\" }, // greek small letter upsilon,U+03C5 ISOgrk3\n            { \"phi\", \"966\" }, // greek small letter phi, U+03C6 ISOgrk3\n            { \"chi\", \"967\" }, // greek small letter chi, U+03C7 ISOgrk3\n            { \"psi\", \"968\" }, // greek small letter psi, U+03C8 ISOgrk3\n            { \"omega\", \"969\" }, // greek small letter omega,U+03C9 ISOgrk3\n            { \"thetasym\", \"977\" }, // greek small letter theta symbol,U+03D1 NEW\n            { \"upsih\", \"978\" }, // greek upsilon with hook symbol,U+03D2 NEW\n            { \"piv\", \"982\" }, // greek pi symbol, U+03D6 ISOgrk3\n            { \"bull\", \"8226\" }, // bullet = black small circle,U+2022 ISOpub\n            { \"hellip\", \"8230\" }, // horizontal ellipsis = three dot\n                                  // leader,U+2026 ISOpub\n            { \"prime\", \"8242\" }, // prime = minutes = feet, U+2032 ISOtech\n            { \"Prime\", \"8243\" }, // double prime = seconds = inches,U+2033\n                                 // ISOtech\n            { \"oline\", \"8254\" }, // overline = spacing overscore,U+203E NEW\n            { \"frasl\", \"8260\" }, // fraction slash, U+2044 NEW\n            { \"weierp\", \"8472\" }, // script capital P = power set= Weierstrass\n                                  // p, U+2118 ISOamso\n            { \"image\", \"8465\" }, // blackletter capital I = imaginary\n                                 // part,U+2111 ISOamso\n            { \"real\", \"8476\" }, // blackletter capital R = real part\n                                // symbol,U+211C ISOamso\n            { \"trade\", \"8482\" }, // trade mark sign, U+2122 ISOnum\n            { \"alefsym\", \"8501\" }, // alef symbol = first transfinite\n                                   // cardinal,U+2135 NEW\n            { \"larr\", \"8592\" }, // leftwards arrow, U+2190 ISOnum\n            { \"uarr\", \"8593\" }, // upwards arrow, U+2191 ISOnum\n            { \"rarr\", \"8594\" }, // rightwards arrow, U+2192 ISOnum\n            { \"darr\", \"8595\" }, // downwards arrow, U+2193 ISOnum\n            { \"harr\", \"8596\" }, // left right arrow, U+2194 ISOamsa\n            { \"crarr\", \"8629\" }, // downwards arrow with corner leftwards=\n                                 // carriage return, U+21B5 NEW\n            { \"lArr\", \"8656\" }, // leftwards double arrow, U+21D0 ISOtech\n            { \"uArr\", \"8657\" }, // upwards double arrow, U+21D1 ISOamsa\n            { \"rArr\", \"8658\" }, // rightwards double arrow,U+21D2 ISOtech\n            { \"dArr\", \"8659\" }, // downwards double arrow, U+21D3 ISOamsa\n            { \"hArr\", \"8660\" }, // left right double arrow,U+21D4 ISOamsa\n            { \"forall\", \"8704\" }, // for all, U+2200 ISOtech\n            { \"part\", \"8706\" }, // partial differential, U+2202 ISOtech\n            { \"exist\", \"8707\" }, // there exists, U+2203 ISOtech\n            { \"empty\", \"8709\" }, // empty set = null set = diameter,U+2205\n                                 // ISOamso\n            { \"nabla\", \"8711\" }, // nabla = backward difference,U+2207 ISOtech\n            { \"isin\", \"8712\" }, // element of, U+2208 ISOtech\n            { \"notin\", \"8713\" }, // not an element of, U+2209 ISOtech\n            { \"ni\", \"8715\" }, // contains as member, U+220B ISOtech\n            { \"prod\", \"8719\" }, // n-ary product = product sign,U+220F ISOamsb\n            { \"sum\", \"8721\" }, // n-ary sumation, U+2211 ISOamsb\n            { \"minus\", \"8722\" }, // minus sign, U+2212 ISOtech\n            { \"lowast\", \"8727\" }, // asterisk operator, U+2217 ISOtech\n            { \"radic\", \"8730\" }, // square root = radical sign,U+221A ISOtech\n            { \"prop\", \"8733\" }, // proportional to, U+221D ISOtech\n            { \"infin\", \"8734\" }, // infinity, U+221E ISOtech\n            { \"ang\", \"8736\" }, // angle, U+2220 ISOamso\n            { \"and\", \"8743\" }, // logical and = wedge, U+2227 ISOtech\n            { \"or\", \"8744\" }, // logical or = vee, U+2228 ISOtech\n            { \"cap\", \"8745\" }, // intersection = cap, U+2229 ISOtech\n            { \"cup\", \"8746\" }, // union = cup, U+222A ISOtech\n            { \"int\", \"8747\" }, // integral, U+222B ISOtech\n            { \"there4\", \"8756\" }, // therefore, U+2234 ISOtech\n            { \"sim\", \"8764\" }, // tilde operator = varies with = similar\n                               // to,U+223C ISOtech\n            { \"cong\", \"8773\" }, // approximately equal to, U+2245 ISOtech\n            { \"asymp\", \"8776\" }, // almost equal to = asymptotic to,U+2248\n                                 // ISOamsr\n            { \"ne\", \"8800\" }, // not equal to, U+2260 ISOtech\n            { \"equiv\", \"8801\" }, // identical to, U+2261 ISOtech\n            { \"le\", \"8804\" }, // less-than or equal to, U+2264 ISOtech\n            { \"ge\", \"8805\" }, // greater-than or equal to,U+2265 ISOtech\n            { \"sub\", \"8834\" }, // subset of, U+2282 ISOtech\n            { \"sup\", \"8835\" }, // superset of, U+2283 ISOtech\n            { \"sube\", \"8838\" }, // subset of or equal to, U+2286 ISOtech\n            { \"supe\", \"8839\" }, // superset of or equal to,U+2287 ISOtech\n            { \"oplus\", \"8853\" }, // circled plus = direct sum,U+2295 ISOamsb\n            { \"otimes\", \"8855\" }, // circled times = vector product,U+2297\n                                  // ISOamsb\n            { \"perp\", \"8869\" }, // up tack = orthogonal to =\n                                // perpendicular,U+22A5 ISOtech\n            { \"sdot\", \"8901\" }, // dot operator, U+22C5 ISOamsb\n            { \"lceil\", \"8968\" }, // left ceiling = apl upstile,U+2308 ISOamsc\n            { \"rceil\", \"8969\" }, // right ceiling, U+2309 ISOamsc\n            { \"lfloor\", \"8970\" }, // left floor = apl downstile,U+230A ISOamsc\n            { \"rfloor\", \"8971\" }, // right floor, U+230B ISOamsc\n            { \"lang\", \"9001\" }, // left-pointing angle bracket = bra,U+2329\n                                // ISOtech\n            { \"rang\", \"9002\" }, // right-pointing angle bracket = ket,U+232A\n                                // ISOtech\n            { \"loz\", \"9674\" }, // lozenge, U+25CA ISOpub\n            { \"spades\", \"9824\" }, // black spade suit, U+2660 ISOpub\n            { \"clubs\", \"9827\" }, // black club suit = shamrock,U+2663 ISOpub\n            { \"hearts\", \"9829\" }, // black heart suit = valentine,U+2665 ISOpub\n            { \"diams\", \"9830\" }, // black diamond suit, U+2666 ISOpub\n            { \"OElig\", \"338\" }, // latin capital ligature OE,U+0152 ISOlat2\n            { \"oelig\", \"339\" }, // latin small ligature oe, U+0153 ISOlat2\n            { \"Scaron\", \"352\" }, // latin capital letter S with caron,U+0160\n                                 // ISOlat2\n            { \"scaron\", \"353\" }, // latin small letter s with caron,U+0161\n                                 // ISOlat2\n            { \"Yuml\", \"376\" }, // latin capital letter Y with diaeresis,U+0178\n                               // ISOlat2\n            { \"circ\", \"710\" }, // modifier letter circumflex accent,U+02C6\n                               // ISOpub\n            { \"tilde\", \"732\" }, // small tilde, U+02DC ISOdia\n            { \"ensp\", \"8194\" }, // en space, U+2002 ISOpub\n            { \"emsp\", \"8195\" }, // em space, U+2003 ISOpub\n            { \"thinsp\", \"8201\" }, // thin space, U+2009 ISOpub\n            { \"zwnj\", \"8204\" }, // zero width non-joiner,U+200C NEW RFC 2070\n            { \"zwj\", \"8205\" }, // zero width joiner, U+200D NEW RFC 2070\n            { \"lrm\", \"8206\" }, // left-to-right mark, U+200E NEW RFC 2070\n            { \"rlm\", \"8207\" }, // right-to-left mark, U+200F NEW RFC 2070\n            { \"ndash\", \"8211\" }, // en dash, U+2013 ISOpub\n            { \"mdash\", \"8212\" }, // em dash, U+2014 ISOpub\n            { \"lsquo\", \"8216\" }, // left single quotation mark,U+2018 ISOnum\n            { \"rsquo\", \"8217\" }, // right single quotation mark,U+2019 ISOnum\n            { \"sbquo\", \"8218\" }, // single low-9 quotation mark, U+201A NEW\n            { \"ldquo\", \"8220\" }, // left double quotation mark,U+201C ISOnum\n            { \"rdquo\", \"8221\" }, // right double quotation mark,U+201D ISOnum\n            { \"bdquo\", \"8222\" }, // double low-9 quotation mark, U+201E NEW\n            { \"dagger\", \"8224\" }, // dagger, U+2020 ISOpub\n            { \"Dagger\", \"8225\" }, // double dagger, U+2021 ISOpub\n            { \"permil\", \"8240\" }, // per mille sign, U+2030 ISOtech\n            { \"lsaquo\", \"8249\" }, // single left-pointing angle quotation\n                                  // mark,U+2039 ISO proposed\n            { \"rsaquo\", \"8250\" }, // single right-pointing angle quotation\n                                  // mark,U+203A ISO proposed\n            { \"euro\", \"8364\" }, // euro sign, U+20AC NEW\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "HTML40_SET = { { \"fnof\", \"402\" }, // latin\n                                                                      // small\n                                                                      // f\n                                                                      // with\n                                                                      // hook\n                                                                      // =\n                                                                      // function=\n                                                                      // florin,\n                                                                      // U+0192\n                                                                      // ISOtech\n            { \"Alpha\", \"913\" }, // greek capital letter alpha, U+0391\n            { \"Beta\", \"914\" }, // greek capital letter beta, U+0392\n            { \"Gamma\", \"915\" }, // greek capital letter gamma,U+0393 ISOgrk3\n            { \"Delta\", \"916\" }, // greek capital letter delta,U+0394 ISOgrk3\n            { \"Epsilon\", \"917\" }, // greek capital letter epsilon, U+0395\n            { \"Zeta\", \"918\" }, // greek capital letter zeta, U+0396\n            { \"Eta\", \"919\" }, // greek capital letter eta, U+0397\n            { \"Theta\", \"920\" }, // greek capital letter theta,U+0398 ISOgrk3\n            { \"Iota\", \"921\" }, // greek capital letter iota, U+0399\n            { \"Kappa\", \"922\" }, // greek capital letter kappa, U+039A\n            { \"Lambda\", \"923\" }, // greek capital letter lambda,U+039B ISOgrk3\n            { \"Mu\", \"924\" }, // greek capital letter mu, U+039C\n            { \"Nu\", \"925\" }, // greek capital letter nu, U+039D\n            { \"Xi\", \"926\" }, // greek capital letter xi, U+039E ISOgrk3\n            { \"Omicron\", \"927\" }, // greek capital letter omicron, U+039F\n            { \"Pi\", \"928\" }, // greek capital letter pi, U+03A0 ISOgrk3\n            { \"Rho\", \"929\" }, // greek capital letter rho, U+03A1\n            { \"Sigma\", \"931\" }, // greek capital letter sigma,U+03A3 ISOgrk3\n            { \"Tau\", \"932\" }, // greek capital letter tau, U+03A4\n            { \"Upsilon\", \"933\" }, // greek capital letter upsilon,U+03A5 ISOgrk3\n            { \"Phi\", \"934\" }, // greek capital letter phi,U+03A6 ISOgrk3\n            { \"Chi\", \"935\" }, // greek capital letter chi, U+03A7\n            { \"Psi\", \"936\" }, // greek capital letter psi,U+03A8 ISOgrk3\n            { \"Omega\", \"937\" }, // greek capital letter omega,U+03A9 ISOgrk3\n            { \"alpha\", \"945\" }, // greek small letter alpha,U+03B1 ISOgrk3\n            { \"beta\", \"946\" }, // greek small letter beta, U+03B2 ISOgrk3\n            { \"gamma\", \"947\" }, // greek small letter gamma,U+03B3 ISOgrk3\n            { \"delta\", \"948\" }, // greek small letter delta,U+03B4 ISOgrk3\n            { \"epsilon\", \"949\" }, // greek small letter epsilon,U+03B5 ISOgrk3\n            { \"zeta\", \"950\" }, // greek small letter zeta, U+03B6 ISOgrk3\n            { \"eta\", \"951\" }, // greek small letter eta, U+03B7 ISOgrk3\n            { \"theta\", \"952\" }, // greek small letter theta,U+03B8 ISOgrk3\n            { \"iota\", \"953\" }, // greek small letter iota, U+03B9 ISOgrk3\n            { \"kappa\", \"954\" }, // greek small letter kappa,U+03BA ISOgrk3\n            { \"lambda\", \"955\" }, // greek small letter lambda,U+03BB ISOgrk3\n            { \"mu\", \"956\" }, // greek small letter mu, U+03BC ISOgrk3\n            { \"nu\", \"957\" }, // greek small letter nu, U+03BD ISOgrk3\n            { \"xi\", \"958\" }, // greek small letter xi, U+03BE ISOgrk3\n            { \"omicron\", \"959\" }, // greek small letter omicron, U+03BF NEW\n            { \"pi\", \"960\" }, // greek small letter pi, U+03C0 ISOgrk3\n            { \"rho\", \"961\" }, // greek small letter rho, U+03C1 ISOgrk3\n            { \"sigmaf\", \"962\" }, // greek small letter final sigma,U+03C2\n                                 // ISOgrk3\n            { \"sigma\", \"963\" }, // greek small letter sigma,U+03C3 ISOgrk3\n            { \"tau\", \"964\" }, // greek small letter tau, U+03C4 ISOgrk3\n            { \"upsilon\", \"965\" }, // greek small letter upsilon,U+03C5 ISOgrk3\n            { \"phi\", \"966\" }, // greek small letter phi, U+03C6 ISOgrk3\n            { \"chi\", \"967\" }, // greek small letter chi, U+03C7 ISOgrk3\n            { \"psi\", \"968\" }, // greek small letter psi, U+03C8 ISOgrk3\n            { \"omega\", \"969\" }, // greek small letter omega,U+03C9 ISOgrk3\n            { \"thetasym\", \"977\" }, // greek small letter theta symbol,U+03D1 NEW\n            { \"upsih\", \"978\" }, // greek upsilon with hook symbol,U+03D2 NEW\n            { \"piv\", \"982\" }, // greek pi symbol, U+03D6 ISOgrk3\n            { \"bull\", \"8226\" }, // bullet = black small circle,U+2022 ISOpub\n            { \"hellip\", \"8230\" }, // horizontal ellipsis = three dot\n                                  // leader,U+2026 ISOpub\n            { \"prime\", \"8242\" }, // prime = minutes = feet, U+2032 ISOtech\n            { \"Prime\", \"8243\" }, // double prime = seconds = inches,U+2033\n                                 // ISOtech\n            { \"oline\", \"8254\" }, // overline = spacing overscore,U+203E NEW\n            { \"frasl\", \"8260\" }, // fraction slash, U+2044 NEW\n            { \"weierp\", \"8472\" }, // script capital P = power set= Weierstrass\n                                  // p, U+2118 ISOamso\n            { \"image\", \"8465\" }, // blackletter capital I = imaginary\n                                 // part,U+2111 ISOamso\n            { \"real\", \"8476\" }, // blackletter capital R = real part\n                                // symbol,U+211C ISOamso\n            { \"trade\", \"8482\" }, // trade mark sign, U+2122 ISOnum\n            { \"alefsym\", \"8501\" }, // alef symbol = first transfinite\n                                   // cardinal,U+2135 NEW\n            { \"larr\", \"8592\" }, // leftwards arrow, U+2190 ISOnum\n            { \"uarr\", \"8593\" }, // upwards arrow, U+2191 ISOnum\n            { \"rarr\", \"8594\" }, // rightwards arrow, U+2192 ISOnum\n            { \"darr\", \"8595\" }, // downwards arrow, U+2193 ISOnum\n            { \"harr\", \"8596\" }, // left right arrow, U+2194 ISOamsa\n            { \"crarr\", \"8629\" }, // downwards arrow with corner leftwards=\n                                 // carriage return, U+21B5 NEW\n            { \"lArr\", \"8656\" }, // leftwards double arrow, U+21D0 ISOtech\n            { \"uArr\", \"8657\" }, // upwards double arrow, U+21D1 ISOamsa\n            { \"rArr\", \"8658\" }, // rightwards double arrow,U+21D2 ISOtech\n            { \"dArr\", \"8659\" }, // downwards double arrow, U+21D3 ISOamsa\n            { \"hArr\", \"8660\" }, // left right double arrow,U+21D4 ISOamsa\n            { \"forall\", \"8704\" }, // for all, U+2200 ISOtech\n            { \"part\", \"8706\" }, // partial differential, U+2202 ISOtech\n            { \"exist\", \"8707\" }, // there exists, U+2203 ISOtech\n            { \"empty\", \"8709\" }, // empty set = null set = diameter,U+2205\n                                 // ISOamso\n            { \"nabla\", \"8711\" }, // nabla = backward difference,U+2207 ISOtech\n            { \"isin\", \"8712\" }, // element of, U+2208 ISOtech\n            { \"notin\", \"8713\" }, // not an element of, U+2209 ISOtech\n            { \"ni\", \"8715\" }, // contains as member, U+220B ISOtech\n            { \"prod\", \"8719\" }, // n-ary product = product sign,U+220F ISOamsb\n            { \"sum\", \"8721\" }, // n-ary sumation, U+2211 ISOamsb\n            { \"minus\", \"8722\" }, // minus sign, U+2212 ISOtech\n            { \"lowast\", \"8727\" }, // asterisk operator, U+2217 ISOtech\n            { \"radic\", \"8730\" }, // square root = radical sign,U+221A ISOtech\n            { \"prop\", \"8733\" }, // proportional to, U+221D ISOtech\n            { \"infin\", \"8734\" }, // infinity, U+221E ISOtech\n            { \"ang\", \"8736\" }, // angle, U+2220 ISOamso\n            { \"and\", \"8743\" }, // logical and = wedge, U+2227 ISOtech\n            { \"or\", \"8744\" }, // logical or = vee, U+2228 ISOtech\n            { \"cap\", \"8745\" }, // intersection = cap, U+2229 ISOtech\n            { \"cup\", \"8746\" }, // union = cup, U+222A ISOtech\n            { \"int\", \"8747\" }, // integral, U+222B ISOtech\n            { \"there4\", \"8756\" }, // therefore, U+2234 ISOtech\n            { \"sim\", \"8764\" }, // tilde operator = varies with = similar\n                               // to,U+223C ISOtech\n            { \"cong\", \"8773\" }, // approximately equal to, U+2245 ISOtech\n            { \"asymp\", \"8776\" }, // almost equal to = asymptotic to,U+2248\n                                 // ISOamsr\n            { \"ne\", \"8800\" }, // not equal to, U+2260 ISOtech\n            { \"equiv\", \"8801\" }, // identical to, U+2261 ISOtech\n            { \"le\", \"8804\" }, // less-than or equal to, U+2264 ISOtech\n            { \"ge\", \"8805\" }, // greater-than or equal to,U+2265 ISOtech\n            { \"sub\", \"8834\" }, // subset of, U+2282 ISOtech\n            { \"sup\", \"8835\" }, // superset of, U+2283 ISOtech\n            { \"sube\", \"8838\" }, // subset of or equal to, U+2286 ISOtech\n            { \"supe\", \"8839\" }, // superset of or equal to,U+2287 ISOtech\n            { \"oplus\", \"8853\" }, // circled plus = direct sum,U+2295 ISOamsb\n            { \"otimes\", \"8855\" }, // circled times = vector product,U+2297\n                                  // ISOamsb\n            { \"perp\", \"8869\" }, // up tack = orthogonal to =\n                                // perpendicular,U+22A5 ISOtech\n            { \"sdot\", \"8901\" }, // dot operator, U+22C5 ISOamsb\n            { \"lceil\", \"8968\" }, // left ceiling = apl upstile,U+2308 ISOamsc\n            { \"rceil\", \"8969\" }, // right ceiling, U+2309 ISOamsc\n            { \"lfloor\", \"8970\" }, // left floor = apl downstile,U+230A ISOamsc\n            { \"rfloor\", \"8971\" }, // right floor, U+230B ISOamsc\n            { \"lang\", \"9001\" }, // left-pointing angle bracket = bra,U+2329\n                                // ISOtech\n            { \"rang\", \"9002\" }, // right-pointing angle bracket = ket,U+232A\n                                // ISOtech\n            { \"loz\", \"9674\" }, // lozenge, U+25CA ISOpub\n            { \"spades\", \"9824\" }, // black spade suit, U+2660 ISOpub\n            { \"clubs\", \"9827\" }, // black club suit = shamrock,U+2663 ISOpub\n            { \"hearts\", \"9829\" }, // black heart suit = valentine,U+2665 ISOpub\n            { \"diams\", \"9830\" }, // black diamond suit, U+2666 ISOpub\n            { \"OElig\", \"338\" }, // latin capital ligature OE,U+0152 ISOlat2\n            { \"oelig\", \"339\" }, // latin small ligature oe, U+0153 ISOlat2\n            { \"Scaron\", \"352\" }, // latin capital letter S with caron,U+0160\n                                 // ISOlat2\n            { \"scaron\", \"353\" }, // latin small letter s with caron,U+0161\n                                 // ISOlat2\n            { \"Yuml\", \"376\" }, // latin capital letter Y with diaeresis,U+0178\n                               // ISOlat2\n            { \"circ\", \"710\" }, // modifier letter circumflex accent,U+02C6\n                               // ISOpub\n            { \"tilde\", \"732\" }, // small tilde, U+02DC ISOdia\n            { \"ensp\", \"8194\" }, // en space, U+2002 ISOpub\n            { \"emsp\", \"8195\" }, // em space, U+2003 ISOpub\n            { \"thinsp\", \"8201\" }, // thin space, U+2009 ISOpub\n            { \"zwnj\", \"8204\" }, // zero width non-joiner,U+200C NEW RFC 2070\n            { \"zwj\", \"8205\" }, // zero width joiner, U+200D NEW RFC 2070\n            { \"lrm\", \"8206\" }, // left-to-right mark, U+200E NEW RFC 2070\n            { \"rlm\", \"8207\" }, // right-to-left mark, U+200F NEW RFC 2070\n            { \"ndash\", \"8211\" }, // en dash, U+2013 ISOpub\n            { \"mdash\", \"8212\" }, // em dash, U+2014 ISOpub\n            { \"lsquo\", \"8216\" }, // left single quotation mark,U+2018 ISOnum\n            { \"rsquo\", \"8217\" }, // right single quotation mark,U+2019 ISOnum\n            { \"sbquo\", \"8218\" }, // single low-9 quotation mark, U+201A NEW\n            { \"ldquo\", \"8220\" }, // left double quotation mark,U+201C ISOnum\n            { \"rdquo\", \"8221\" }, // right double quotation mark,U+201D ISOnum\n            { \"bdquo\", \"8222\" }, // double low-9 quotation mark, U+201E NEW\n            { \"dagger\", \"8224\" }, // dagger, U+2020 ISOpub\n            { \"Dagger\", \"8225\" }, // double dagger, U+2021 ISOpub\n            { \"permil\", \"8240\" }, // per mille sign, U+2030 ISOtech\n            { \"lsaquo\", \"8249\" }, // single left-pointing angle quotation\n                                  // mark,U+2039 ISO proposed\n            { \"rsaquo\", \"8250\" }, // single right-pointing angle quotation\n                                  // mark,U+203A ISO proposed\n            { \"euro\", \"8364\" }, // euro sign, U+20AC NEW\n    }", "var_name": "HTML40_SET"}, {"original_string": "public static final Entities XML;", "modifier": "public static final", "type": "Entities", "declarator": "XML", "var_name": "XML"}, {"original_string": "public static final Entities HTML32;", "modifier": "public static final", "type": "Entities", "declarator": "HTML32", "var_name": "HTML32"}, {"original_string": "public static final Entities HTML40;", "modifier": "public static final", "type": "Entities", "declarator": "HTML40", "var_name": "HTML40"}, {"original_string": "public static final Entities HTML40_MODIFIED;", "modifier": "public static final", "type": "Entities", "declarator": "HTML40_MODIFIED", "var_name": "HTML40_MODIFIED"}, {"original_string": "private static final int LOOKUP_TABLE_SIZE = 256;", "modifier": "private static final", "type": "int", "declarator": "LOOKUP_TABLE_SIZE = 256", "var_name": "LOOKUP_TABLE_SIZE"}, {"original_string": "private Map<String, Integer> entityNameToValue = CollectionUtil.createHashMap();", "modifier": "private", "type": "Map<String, Integer>", "declarator": "entityNameToValue = CollectionUtil.createHashMap()", "var_name": "entityNameToValue"}, {"original_string": "private IntHashMap<String> entityValueToName = new IntHashMap<String>();", "modifier": "private", "type": "IntHashMap<String>", "declarator": "entityValueToName = new IntHashMap<String>()", "var_name": "entityValueToName"}, {"original_string": "private String[] lookupTable;", "modifier": "private", "type": "String[]", "declarator": "lookupTable", "var_name": "lookupTable"}], "methods": [{"identifier": "Entities", "parameters": "()", "modifiers": "public", "return": "", "signature": " Entities()", "full_signature": "public  Entities()", "class_method_signature": "Entities.Entities()", "testcase": false, "constructor": true}, {"identifier": "Entities", "parameters": "(Entities entities)", "modifiers": "public", "return": "", "signature": " Entities(Entities entities)", "full_signature": "public  Entities(Entities entities)", "class_method_signature": "Entities.Entities(Entities entities)", "testcase": false, "constructor": true}, {"identifier": "addEntities", "parameters": "(String[][] entitySet)", "modifiers": "public", "return": "void", "signature": "void addEntities(String[][] entitySet)", "full_signature": "public void addEntities(String[][] entitySet)", "class_method_signature": "Entities.addEntities(String[][] entitySet)", "testcase": false, "constructor": false}, {"identifier": "addEntity", "parameters": "(String name, int value)", "modifiers": "public", "return": "void", "signature": "void addEntity(String name, int value)", "full_signature": "public void addEntity(String name, int value)", "class_method_signature": "Entities.addEntity(String name, int value)", "testcase": false, "constructor": false}, {"identifier": "getEntityName", "parameters": "(int value)", "modifiers": "public", "return": "String", "signature": "String getEntityName(int value)", "full_signature": "public String getEntityName(int value)", "class_method_signature": "Entities.getEntityName(int value)", "testcase": false, "constructor": false}, {"identifier": "getEntityValue", "parameters": "(String name)", "modifiers": "public", "return": "int", "signature": "int getEntityValue(String name)", "full_signature": "public int getEntityValue(String name)", "class_method_signature": "Entities.getEntityValue(String name)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/internal/Entities.java"}, "focal_method": {"identifier": "addEntities", "parameters": "(String[][] entitySet)", "modifiers": "public", "return": "void", "body": "public void addEntities(String[][] entitySet) {\n        for (int i = 0; i < entitySet.length; ++i) {\n            addEntity(entitySet[i][0], Integer.parseInt(entitySet[i][1]));\n        }\n    }", "signature": "void addEntities(String[][] entitySet)", "full_signature": "public void addEntities(String[][] entitySet)", "class_method_signature": "Entities.addEntities(String[][] entitySet)", "testcase": false, "constructor": false, "invocations": ["addEntity", "parseInt"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}