{"test_class": {"identifier": "RuleDatabaseTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseTest.java"}, "test_case": {"identifier": "testLoadReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadReader() throws Exception {\n        RuleDatabase db = new RuleDatabase();\n        db.nextBlockedHosts = db.blockedHosts.get();\n\n        Configuration.Item item = new Configuration.Item();\n\n        item.location = \"<some random file>\";\n        item.state = Configuration.Item.STATE_IGNORE;\n\n        // Ignore. Does nothing\n        assertTrue(db.loadReader(item, new StringReader(\"example.com\")));\n        assertTrue(db.isEmpty());\n        assertFalse(db.isBlocked(\"example.com\"));\n\n        // Deny, the host should be blocked now.\n        item.state = Configuration.Item.STATE_DENY;\n        assertTrue(db.loadReader(item, new StringReader(\"example.com\")));\n        assertFalse(db.isEmpty());\n        assertTrue(db.isBlocked(\"example.com\"));\n\n        // Reallow again, the entry should disappear.\n        item.state = Configuration.Item.STATE_ALLOW;\n        assertTrue(db.loadReader(item, new StringReader(\"example.com\")));\n        assertTrue(db.isEmpty());\n        assertFalse(db.isBlocked(\"example.com\"));\n\n        // Check multiple lines\n        item.state = Configuration.Item.STATE_DENY;\n        assertFalse(db.isBlocked(\"example.com\"));\n        assertFalse(db.isBlocked(\"foo.com\"));\n        assertTrue(db.loadReader(item, new StringReader(\"example.com\\n127.0.0.1 foo.com\")));\n        assertFalse(db.isEmpty());\n        assertTrue(db.isBlocked(\"example.com\"));\n        assertTrue(db.isBlocked(\"foo.com\"));\n\n        // Interrupted test\n        Thread.currentThread().interrupt();\n        try {\n            db.loadReader(item, new StringReader(\"example.com\"));\n            fail(\"Interrupted thread did not cause reader to be interrupted\");\n        } catch (InterruptedException e) {\n\n        }\n\n        // Test with an invalid line before a valid one.\n        item.state = Configuration.Item.STATE_DENY;\n        assertTrue(db.loadReader(item, new StringReader(\"invalid line\\notherhost.com\")));\n        assertTrue(db.isBlocked(\"otherhost.com\"));\n\n        // Allow again\n        item.state = Configuration.Item.STATE_ALLOW;\n        assertTrue(db.loadReader(item, new StringReader(\"invalid line\\notherhost.com\")));\n        assertFalse(db.isBlocked(\"otherhost.com\"));\n\n        // Reader can't read, we are aborting.\n        Reader reader = Mockito.mock(Reader.class);\n        doThrow(new IOException()).when(reader).read((char[]) any());\n        doThrow(new IOException()).when(reader).read((char[]) any(), anyInt(), anyInt());\n        doThrow(new IOException()).when(reader).read(any(CharBuffer.class));\n\n        assertFalse(db.loadReader(item, reader));\n    }", "signature": "void testLoadReader()", "full_signature": "@Test public void testLoadReader()", "class_method_signature": "RuleDatabaseTest.testLoadReader()", "testcase": true, "constructor": false, "invocations": ["get", "assertTrue", "loadReader", "assertTrue", "isEmpty", "assertFalse", "isBlocked", "assertTrue", "loadReader", "assertFalse", "isEmpty", "assertTrue", "isBlocked", "assertTrue", "loadReader", "assertTrue", "isEmpty", "assertFalse", "isBlocked", "assertFalse", "isBlocked", "assertFalse", "isBlocked", "assertTrue", "loadReader", "assertFalse", "isEmpty", "assertTrue", "isBlocked", "assertTrue", "isBlocked", "interrupt", "currentThread", "loadReader", "fail", "assertTrue", "loadReader", "assertTrue", "isBlocked", "assertTrue", "loadReader", "assertFalse", "isBlocked", "mock", "read", "when", "doThrow", "any", "read", "when", "doThrow", "any", "anyInt", "anyInt", "read", "when", "doThrow", "any", "assertFalse", "loadReader"]}, "focal_class": {"identifier": "RuleDatabase", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"RuleDatabase\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDatabase\"", "var_name": "TAG"}, {"original_string": "private static final RuleDatabase instance = new RuleDatabase();", "modifier": "private static final", "type": "RuleDatabase", "declarator": "instance = new RuleDatabase()", "var_name": "instance"}, {"original_string": "final AtomicReference<HashSet<String>> blockedHosts = new AtomicReference<>(new HashSet<String>());", "modifier": "final", "type": "AtomicReference<HashSet<String>>", "declarator": "blockedHosts = new AtomicReference<>(new HashSet<String>())", "var_name": "blockedHosts"}, {"original_string": "HashSet<String> nextBlockedHosts = null;", "modifier": "", "type": "HashSet<String>", "declarator": "nextBlockedHosts = null", "var_name": "nextBlockedHosts"}], "methods": [{"identifier": "RuleDatabase", "parameters": "()", "modifiers": "", "return": "", "signature": " RuleDatabase()", "full_signature": "  RuleDatabase()", "class_method_signature": "RuleDatabase.RuleDatabase()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "RuleDatabase", "signature": "RuleDatabase getInstance()", "full_signature": "public static RuleDatabase getInstance()", "class_method_signature": "RuleDatabase.getInstance()", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String line)", "modifiers": "@Nullable static", "return": "String", "signature": "String parseLine(String line)", "full_signature": "@Nullable static String parseLine(String line)", "class_method_signature": "RuleDatabase.parseLine(String line)", "testcase": false, "constructor": false}, {"identifier": "isBlocked", "parameters": "(String host)", "modifiers": "public", "return": "boolean", "signature": "boolean isBlocked(String host)", "full_signature": "public boolean isBlocked(String host)", "class_method_signature": "RuleDatabase.isBlocked(String host)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "RuleDatabase.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Context context)", "modifiers": "public synchronized", "return": "void", "signature": "void initialize(Context context)", "full_signature": "public synchronized void initialize(Context context)", "class_method_signature": "RuleDatabase.initialize(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadItem", "parameters": "(Context context, Configuration.Item item)", "modifiers": "private", "return": "void", "signature": "void loadItem(Context context, Configuration.Item item)", "full_signature": "private void loadItem(Context context, Configuration.Item item)", "class_method_signature": "RuleDatabase.loadItem(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "addHost", "parameters": "(Configuration.Item item, String host)", "modifiers": "private", "return": "void", "signature": "void addHost(Configuration.Item item, String host)", "full_signature": "private void addHost(Configuration.Item item, String host)", "class_method_signature": "RuleDatabase.addHost(Configuration.Item item, String host)", "testcase": false, "constructor": false}, {"identifier": "loadReader", "parameters": "(Configuration.Item item, Reader reader)", "modifiers": "", "return": "boolean", "signature": "boolean loadReader(Configuration.Item item, Reader reader)", "full_signature": " boolean loadReader(Configuration.Item item, Reader reader)", "class_method_signature": "RuleDatabase.loadReader(Configuration.Item item, Reader reader)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabase.java"}, "focal_method": {"identifier": "loadReader", "parameters": "(Configuration.Item item, Reader reader)", "modifiers": "", "return": "boolean", "body": "boolean loadReader(Configuration.Item item, Reader reader) throws InterruptedException {\n        int count = 0;\n        try {\n            Log.d(TAG, \"loadBlockedHosts: Reading: \" + item.location);\n            try (BufferedReader br = new BufferedReader(reader)) {\n                String line;\n                while ((line = br.readLine()) != null) {\n                    if (Thread.interrupted())\n                        throw new InterruptedException(\"Interrupted\");\n                    String host = parseLine(line);\n                    if (host != null) {\n                        count += 1;\n                        addHost(item, host);\n                    }\n                }\n            }\n            Log.d(TAG, \"loadBlockedHosts: Loaded \" + count + \" hosts from \" + item.location);\n            return true;\n        } catch (IOException e) {\n            Log.e(TAG, \"loadBlockedHosts: Error while reading \" + item.location + \" after \" + count + \" items\", e);\n            return false;\n        } finally {\n            FileHelper.closeOrWarn(reader, TAG, \"loadBlockedHosts: Error closing \" + item.location);\n        }\n    }", "signature": "boolean loadReader(Configuration.Item item, Reader reader)", "full_signature": " boolean loadReader(Configuration.Item item, Reader reader)", "class_method_signature": "RuleDatabase.loadReader(Configuration.Item item, Reader reader)", "testcase": false, "constructor": false, "invocations": ["d", "readLine", "interrupted", "parseLine", "addHost", "d", "e", "closeOrWarn"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}