{"test_class": {"identifier": "DefaultAccUniformPasswordServiceTest", "superclass": "extends AbstractPasswordFilterIntegrationTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate AccUniformPasswordService uniformPasswordService;", "modifier": "@Autowired\n\tprivate", "type": "AccUniformPasswordService", "declarator": "uniformPasswordService", "var_name": "uniformPasswordService"}, {"original_string": "@Autowired\n\tprivate AccUniformPasswordSystemService uniformPasswordSystemService;", "modifier": "@Autowired\n\tprivate", "type": "AccUniformPasswordSystemService", "declarator": "uniformPasswordSystemService", "var_name": "uniformPasswordSystemService"}], "file": "Realization/backend/acc/src/test/java/eu/bcvsolutions/idm/acc/service/impl/DefaultAccUniformPasswordServiceTest.java"}, "test_case": {"identifier": "testFindOptionsSystemSameUniformDefinition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindOptionsSystemSameUniformDefinition() {\n\t\tSysSystemDto system = createSystem(false);\n\t\tSysSystemDto systemTwo = createSystem(false);\n\t\tSysSystemDto systemThree = createSystem(false);\n\t\tIdmIdentityDto identity = createIdentity(system);\n\n\t\tassignSystem(identity, systemTwo);\n\t\tassignSystem(identity, systemThree);\n\t\t\n\t\tassignSystem(createUniformDefinition(true), system, systemTwo, systemThree);\n\t\tassignSystem(createUniformDefinition(true), systemTwo);\n\t\tassignSystem(createUniformDefinition(true), system);\n\n\t\tList<AccPasswordChangeOptionDto> options = uniformPasswordService.findOptionsForPasswordChange(identity);\n\t\tassertEquals(3, options.size());\n\t}", "signature": "void testFindOptionsSystemSameUniformDefinition()", "full_signature": "@Test public void testFindOptionsSystemSameUniformDefinition()", "class_method_signature": "DefaultAccUniformPasswordServiceTest.testFindOptionsSystemSameUniformDefinition()", "testcase": true, "constructor": false, "invocations": ["createSystem", "createSystem", "createSystem", "createIdentity", "assignSystem", "assignSystem", "assignSystem", "createUniformDefinition", "assignSystem", "createUniformDefinition", "assignSystem", "createUniformDefinition", "findOptionsForPasswordChange", "assertEquals", "size"]}, "focal_class": {"identifier": "DefaultAccUniformPasswordService", "superclass": "extends AbstractEventableDtoService<AccUniformPasswordDto, AccUniformPassword, AccUniformPasswordFilter>", "interfaces": "implements AccUniformPasswordService", "fields": [{"original_string": "private final AccUniformPasswordRepository repository;", "modifier": "private final", "type": "AccUniformPasswordRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n\tprivate AccAccountService accountService;", "modifier": "@Autowired\n\tprivate", "type": "AccAccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@Autowired\n\tprivate AccUniformPasswordSystemService uniformPasswordSystemService;", "modifier": "@Autowired\n\tprivate", "type": "AccUniformPasswordSystemService", "declarator": "uniformPasswordSystemService", "var_name": "uniformPasswordSystemService"}], "methods": [{"identifier": "DefaultAccUniformPasswordService", "parameters": "(AccUniformPasswordRepository repository,\n\t\t\tEntityEventManager entityEventManager)", "modifiers": "@Autowired public", "return": "", "signature": " DefaultAccUniformPasswordService(AccUniformPasswordRepository repository,\n\t\t\tEntityEventManager entityEventManager)", "full_signature": "@Autowired public  DefaultAccUniformPasswordService(AccUniformPasswordRepository repository,\n\t\t\tEntityEventManager entityEventManager)", "class_method_signature": "DefaultAccUniformPasswordService.DefaultAccUniformPasswordService(AccUniformPasswordRepository repository,\n\t\t\tEntityEventManager entityEventManager)", "testcase": false, "constructor": true}, {"identifier": "getAuthorizableType", "parameters": "()", "modifiers": "@Override public", "return": "AuthorizableType", "signature": "AuthorizableType getAuthorizableType()", "full_signature": "@Override public AuthorizableType getAuthorizableType()", "class_method_signature": "DefaultAccUniformPasswordService.getAuthorizableType()", "testcase": false, "constructor": false}, {"identifier": "getByCode", "parameters": "(String code)", "modifiers": "@Override public", "return": "AccUniformPasswordDto", "signature": "AccUniformPasswordDto getByCode(String code)", "full_signature": "@Override public AccUniformPasswordDto getByCode(String code)", "class_method_signature": "DefaultAccUniformPasswordService.getByCode(String code)", "testcase": false, "constructor": false}, {"identifier": "findOptionsForPasswordChange", "parameters": "(IdmIdentityDto identity, BasePermission ...permissions)", "modifiers": "@Override public", "return": "List<AccPasswordChangeOptionDto>", "signature": "List<AccPasswordChangeOptionDto> findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "full_signature": "@Override public List<AccPasswordChangeOptionDto> findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "class_method_signature": "DefaultAccUniformPasswordService.findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "testcase": false, "constructor": false}, {"identifier": "getNiceLabelForOption", "parameters": "(AccAccountDto account)", "modifiers": "private", "return": "String", "signature": "String getNiceLabelForOption(AccAccountDto account)", "full_signature": "private String getNiceLabelForOption(AccAccountDto account)", "class_method_signature": "DefaultAccUniformPasswordService.getNiceLabelForOption(AccAccountDto account)", "testcase": false, "constructor": false}, {"identifier": "getNiceLabelForOption", "parameters": "(AccUniformPasswordDto uniformPassword)", "modifiers": "private", "return": "String", "signature": "String getNiceLabelForOption(AccUniformPasswordDto uniformPassword)", "full_signature": "private String getNiceLabelForOption(AccUniformPasswordDto uniformPassword)", "class_method_signature": "DefaultAccUniformPasswordService.getNiceLabelForOption(AccUniformPasswordDto uniformPassword)", "testcase": false, "constructor": false}], "file": "Realization/backend/acc/src/main/java/eu/bcvsolutions/idm/acc/service/impl/DefaultAccUniformPasswordService.java"}, "focal_method": {"identifier": "findOptionsForPasswordChange", "parameters": "(IdmIdentityDto identity, BasePermission ...permissions)", "modifiers": "@Override public", "return": "List<AccPasswordChangeOptionDto>", "body": "@Override\n\tpublic List<AccPasswordChangeOptionDto> findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions) {\n\t\tList<AccPasswordChangeOptionDto> result = Lists.newArrayList();\n\t\t\n\t\tAccUniformPasswordSystemFilter filter = new AccUniformPasswordSystemFilter();\n\t\tfilter.setIdentityId(identity.getId());\n\t\tfilter.setUniformPasswordDisabled(Boolean.FALSE);\n\t\tList<AccUniformPasswordSystemDto> uniformPasswordSystems = this.uniformPasswordSystemService.find(filter, null).getContent();\n\n\t\t// Group uniform password system by uniform password definition\n\t\tMap<AccUniformPasswordDto, List<AccAccountDto>> accountsForUniformPassword = Maps.newHashMap();\n\n\t\t// Same behavior as previous versions\n\t\tAccAccountFilter accountFilter = new AccAccountFilter();\n\t\taccountFilter.setOwnership(Boolean.TRUE);\n\t\taccountFilter.setSupportChangePassword(Boolean.TRUE);\n\t\taccountFilter.setIdentityId(identity.getId());\n\t\taccountFilter.setInProtection(Boolean.FALSE);\n\n\t\t// Include given permissions\n\t\tList<AccAccountDto> accounts = accountService.find(accountFilter, null, permissions).getContent();\n\t\tfor (AccAccountDto account : accounts) {\n\n\t\t\t// One system can be place more than one in uniform password systems\n\t\t\tList<AccUniformPasswordSystemDto> uniformBySystem = uniformPasswordSystems.stream().filter(pfs -> {\n\t\t\t\treturn pfs.getSystem().equals(account.getSystem());\n\t\t\t}).collect(Collectors.toList());\n\n\t\t\tif (CollectionUtils.isEmpty(uniformBySystem)) {\n\t\t\t\t// Simple account as option\n\t\t\t\tAccPasswordChangeOptionDto optionDto = new AccPasswordChangeOptionDto(account);\n\t\t\t\toptionDto.setNiceLabel(getNiceLabelForOption(account));\n\t\t\t\tresult.add(optionDto);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (AccUniformPasswordSystemDto uniformPasswordSystemDto : uniformBySystem) {\n\t\t\t\tAccUniformPasswordDto definition = DtoUtils.getEmbedded(uniformPasswordSystemDto, AccUniformPasswordSystem_.uniformPassword, AccUniformPasswordDto.class, null);\n\t\t\t\tif (accountsForUniformPassword.containsKey(definition)) {\n\t\t\t\t\taccountsForUniformPassword.get(definition).add(account);\n\t\t\t\t} else {\n\t\t\t\t\taccountsForUniformPassword.put(definition, Lists.newArrayList(account));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t// Check if exists account for uniform password and process options for them\n\t\tif (!accountsForUniformPassword.isEmpty()) {\n\t\t\tfor (Entry<AccUniformPasswordDto, List<AccAccountDto>> entry : accountsForUniformPassword.entrySet()) {\n\t\t\t\t// There is also needed \n\t\t\t\tAccUniformPasswordDto uniformPasswordDto = entry.getKey();\n\t\t\t\tAccPasswordChangeOptionDto optionDto = new AccPasswordChangeOptionDto(uniformPasswordDto, entry.getValue());\n\t\t\t\toptionDto.setNiceLabel(getNiceLabelForOption(uniformPasswordDto));\n\t\t\t\toptionDto.setChangeInIdm(uniformPasswordDto.isChangeInIdm());\n\t\t\t\t\n\t\t\t\tresult.add(optionDto);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}", "signature": "List<AccPasswordChangeOptionDto> findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "full_signature": "@Override public List<AccPasswordChangeOptionDto> findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "class_method_signature": "DefaultAccUniformPasswordService.findOptionsForPasswordChange(IdmIdentityDto identity, BasePermission ...permissions)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "setIdentityId", "getId", "setUniformPasswordDisabled", "getContent", "find", "newHashMap", "setOwnership", "setSupportChangePassword", "setIdentityId", "getId", "setInProtection", "getContent", "find", "collect", "filter", "stream", "equals", "getSystem", "getSystem", "toList", "isEmpty", "setNiceLabel", "getNiceLabelForOption", "add", "getEmbedded", "containsKey", "add", "get", "put", "newArrayList", "isEmpty", "entrySet", "getKey", "getValue", "setNiceLabel", "getNiceLabelForOption", "setChangeInIdm", "isChangeInIdm", "add"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}