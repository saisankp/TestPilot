{"test_class": {"identifier": "GrabberGrabberTest", "superclass": "extends AbstractGrabberTest", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/utils/GrabberGrabberTest.java"}, "test_case": {"identifier": "testGrabberGrabber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGrabberGrabber() {\n    LowerCaseGrabber grbLow = new LowerCaseGrabber();\n    UpperCaseGrabber grbUp = new UpperCaseGrabber();\n    SubstringGrabber grbSub1 = new SubstringGrabber(4, 15);\n    SubstringGrabber grbSub2 = new SubstringGrabber(2,7);\n\n    GrabberGrabber grbGrb1 = new GrabberGrabber(grbLow, grbUp);\n    GrabberGrabber grbGrb2 = new GrabberGrabber(grbLow, grbUp);\n    GrabberGrabber grbGrb3 = new GrabberGrabber(grbUp, grbLow);\n    testGrabber(grbGrb1.getGrabbers(), grbGrb2.getGrabbers(), grbGrb3.getGrabbers()); \n    GrabberGrabber grbGrb4 = new GrabberGrabber(grbSub1, grbSub2, grbUp); \n    GrabberGrabber grbGrb5 = new GrabberGrabber(grbSub1, grbSub2, grbUp); \n    GrabberGrabber grbGrb6 = new GrabberGrabber(grbSub1, grbSub2, grbLow); \n    testGrabber(grbGrb4.getGrabbers(), grbGrb5.getGrabbers(), grbGrb6.getGrabbers()); \n    GrabberGrabber grbGrb7 = new GrabberGrabber(grbSub1, grbSub2, grbUp, grbLow); \n    GrabberGrabber grbGrb8 = new GrabberGrabber(grbSub1, grbSub2, grbUp, grbLow); \n    GrabberGrabber grbGrb9 = new GrabberGrabber(grbSub1, grbSub2, grbLow, grbUp);\n    testGrabber(grbGrb7.getGrabbers(), grbGrb8.getGrabbers(), grbGrb9.getGrabbers()); \n\n    grbGrb1.addGrabber(grbSub1);\n    grbGrb2.addGrabber(grbSub1);\n    grbGrb3.addGrabber(grbSub1);\n    \n    grbGrb4.setGrabbers(grbGrb7.getGrabbers());\n    grbGrb6.setGrabbers(grbGrb9.getGrabbers());\n    testGrabber(grbGrb4.getGrabbers(), grbGrb7.getGrabbers(), grbGrb6.getGrabbers()); \n\n    String str = \"JaZz Is NoT dEaD, iT jUsT sMeLlS fUnNy!\";\n    testGrabber(grbGrb4.grab(str), grbGrb7.grab(str), grbGrb6.grab(str));\n  }", "signature": "void testGrabberGrabber()", "full_signature": "@Test public void testGrabberGrabber()", "class_method_signature": "GrabberGrabberTest.testGrabberGrabber()", "testcase": true, "constructor": false, "invocations": ["testGrabber", "getGrabbers", "getGrabbers", "getGrabbers", "testGrabber", "getGrabbers", "getGrabbers", "getGrabbers", "testGrabber", "getGrabbers", "getGrabbers", "getGrabbers", "addGrabber", "addGrabber", "addGrabber", "setGrabbers", "getGrabbers", "setGrabbers", "getGrabbers", "testGrabber", "getGrabbers", "getGrabbers", "getGrabbers", "testGrabber", "grab", "grab", "grab"]}, "focal_class": {"identifier": "GrabberGrabber", "superclass": "", "interfaces": "implements GrabberIF<O, G>", "fields": [{"original_string": "protected GrabberIF<O, ?> firstGrabber;", "modifier": "protected", "type": "GrabberIF<O, ?>", "declarator": "firstGrabber", "var_name": "firstGrabber"}, {"original_string": "protected List<GrabberIF> additionalGrabbers = new ArrayList<GrabberIF>();", "modifier": "protected", "type": "List<GrabberIF>", "declarator": "additionalGrabbers = new ArrayList<GrabberIF>()", "var_name": "additionalGrabbers"}], "methods": [{"identifier": "GrabberGrabber", "parameters": "(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "modifiers": "public", "return": "", "signature": " GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "full_signature": "public  GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "class_method_signature": "GrabberGrabber.GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "testcase": false, "constructor": true}, {"identifier": "getGrabbers", "parameters": "()", "modifiers": "public", "return": "List<GrabberIF>", "signature": "List<GrabberIF> getGrabbers()", "full_signature": "public List<GrabberIF> getGrabbers()", "class_method_signature": "GrabberGrabber.getGrabbers()", "testcase": false, "constructor": false}, {"identifier": "setGrabbers", "parameters": "(List<GrabberIF> grabbers)", "modifiers": "public", "return": "void", "signature": "void setGrabbers(List<GrabberIF> grabbers)", "full_signature": "public void setGrabbers(List<GrabberIF> grabbers)", "class_method_signature": "GrabberGrabber.setGrabbers(List<GrabberIF> grabbers)", "testcase": false, "constructor": false}, {"identifier": "addGrabber", "parameters": "(GrabberIF grabber)", "modifiers": "public", "return": "void", "signature": "void addGrabber(GrabberIF grabber)", "full_signature": "public void addGrabber(GrabberIF grabber)", "class_method_signature": "GrabberGrabber.addGrabber(GrabberIF grabber)", "testcase": false, "constructor": false}, {"identifier": "grab", "parameters": "(O object)", "modifiers": "@Override public", "return": "G", "signature": "G grab(O object)", "full_signature": "@Override public G grab(O object)", "class_method_signature": "GrabberGrabber.grab(O object)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/GrabberGrabber.java"}, "focal_method": {"identifier": "GrabberGrabber", "parameters": "(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "modifiers": "public", "return": "", "body": "public GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers) {\n    this.firstGrabber = firstGrabber;\n    this.additionalGrabbers = new ArrayList<GrabberIF>(Arrays.asList(additionalGrabbers));\n  }", "signature": " GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "full_signature": "public  GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "class_method_signature": "GrabberGrabber.GrabberGrabber(GrabberIF<O, ?> firstGrabber, GrabberIF... additionalGrabbers)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}