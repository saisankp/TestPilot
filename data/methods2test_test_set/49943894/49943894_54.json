{"test_class": {"identifier": "GenericDaoBaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    ResultSet resultSet;", "modifier": "@Mock", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}], "file": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java"}, "test_case": {"identifier": "getObjectDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getObjectDouble() throws SQLException {\n        Mockito.when(resultSet.getObject(1)).thenReturn(0.1d);\n        Mockito.when(resultSet.getDouble(1)).thenReturn(0.1d);\n        Assert.assertEquals(0.1d,\n                GenericDaoBase.getObject(Double.class, resultSet, 1), 0.1);\n        Mockito.verify(resultSet).getDouble(1);\n    }", "signature": "void getObjectDouble()", "full_signature": "@Test public void getObjectDouble()", "class_method_signature": "GenericDaoBaseTest.getObjectDouble()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getObject", "thenReturn", "when", "getDouble", "assertEquals", "getObject", "getDouble", "verify"]}, "focal_class": {"identifier": "GenericDaoBase", "superclass": "extends ComponentLifecycleBase", "interfaces": "implements GenericDao<T, ID>, ComponentMethodInterceptable", "fields": [{"original_string": "private final static Logger s_logger = LoggerFactory.getLogger(GenericDaoBase.class);", "modifier": "private final static", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GenericDaoBase.class)", "var_name": "s_logger"}, {"original_string": "protected final static TimeZone s_gmtTimeZone = TimeZone.getTimeZone(\"GMT\");", "modifier": "protected final static", "type": "TimeZone", "declarator": "s_gmtTimeZone = TimeZone.getTimeZone(\"GMT\")", "var_name": "s_gmtTimeZone"}, {"original_string": "protected final static Map<Class<?>, GenericDao<?, ? extends Serializable>> s_daoMaps = new ConcurrentHashMap<Class<?>, GenericDao<?, ? extends Serializable>>(71);", "modifier": "protected final static", "type": "Map<Class<?>, GenericDao<?, ? extends Serializable>>", "declarator": "s_daoMaps = new ConcurrentHashMap<Class<?>, GenericDao<?, ? extends Serializable>>(71)", "var_name": "s_daoMaps"}, {"original_string": "protected Class<T> _entityBeanType;", "modifier": "protected", "type": "Class<T>", "declarator": "_entityBeanType", "var_name": "_entityBeanType"}, {"original_string": "protected String _table;", "modifier": "protected", "type": "String", "declarator": "_table", "var_name": "_table"}, {"original_string": "protected String _tables;", "modifier": "protected", "type": "String", "declarator": "_tables", "var_name": "_tables"}, {"original_string": "protected Field[] _embeddedFields;", "modifier": "protected", "type": "Field[]", "declarator": "_embeddedFields", "var_name": "_embeddedFields"}, {"original_string": "private final Pair<StringBuilder, Attribute[]> _partialSelectSql;", "modifier": "private final", "type": "Pair<StringBuilder, Attribute[]>", "declarator": "_partialSelectSql", "var_name": "_partialSelectSql"}, {"original_string": "private final Pair<StringBuilder, Attribute[]> _partialQueryCacheSelectSql;", "modifier": "private final", "type": "Pair<StringBuilder, Attribute[]>", "declarator": "_partialQueryCacheSelectSql", "var_name": "_partialQueryCacheSelectSql"}, {"original_string": "protected StringBuilder _discriminatorClause;", "modifier": "protected", "type": "StringBuilder", "declarator": "_discriminatorClause", "var_name": "_discriminatorClause"}, {"original_string": "protected Map<String, Object> _discriminatorValues;", "modifier": "protected", "type": "Map<String, Object>", "declarator": "_discriminatorValues", "var_name": "_discriminatorValues"}, {"original_string": "protected String _selectByIdSql;", "modifier": "protected", "type": "String", "declarator": "_selectByIdSql", "var_name": "_selectByIdSql"}, {"original_string": "protected String _count;", "modifier": "protected", "type": "String", "declarator": "_count", "var_name": "_count"}, {"original_string": "protected String _distinctIdSql;", "modifier": "protected", "type": "String", "declarator": "_distinctIdSql", "var_name": "_distinctIdSql"}, {"original_string": "protected Field _idField;", "modifier": "protected", "type": "Field", "declarator": "_idField", "var_name": "_idField"}, {"original_string": "protected List<Pair<String, Attribute[]>> _insertSqls;", "modifier": "protected", "type": "List<Pair<String, Attribute[]>>", "declarator": "_insertSqls", "var_name": "_insertSqls"}, {"original_string": "protected Pair<String, Attribute> _removed;", "modifier": "protected", "type": "Pair<String, Attribute>", "declarator": "_removed", "var_name": "_removed"}, {"original_string": "protected Pair<String, Attribute[]> _removeSql;", "modifier": "protected", "type": "Pair<String, Attribute[]>", "declarator": "_removeSql", "var_name": "_removeSql"}, {"original_string": "protected List<Pair<String, Attribute[]>> _deleteSqls;", "modifier": "protected", "type": "List<Pair<String, Attribute[]>>", "declarator": "_deleteSqls", "var_name": "_deleteSqls"}, {"original_string": "protected Map<String, Attribute[]> _idAttributes;", "modifier": "protected", "type": "Map<String, Attribute[]>", "declarator": "_idAttributes", "var_name": "_idAttributes"}, {"original_string": "protected Map<String, TableGenerator> _tgs;", "modifier": "protected", "type": "Map<String, TableGenerator>", "declarator": "_tgs", "var_name": "_tgs"}, {"original_string": "protected Map<String, Attribute> _allAttributes;", "modifier": "protected", "type": "Map<String, Attribute>", "declarator": "_allAttributes", "var_name": "_allAttributes"}, {"original_string": "protected List<Attribute> _ecAttributes;", "modifier": "protected", "type": "List<Attribute>", "declarator": "_ecAttributes", "var_name": "_ecAttributes"}, {"original_string": "protected Map<Pair<String, String>, Attribute> _allColumns;", "modifier": "protected", "type": "Map<Pair<String, String>, Attribute>", "declarator": "_allColumns", "var_name": "_allColumns"}, {"original_string": "protected Enhancer _enhancer;", "modifier": "protected", "type": "Enhancer", "declarator": "_enhancer", "var_name": "_enhancer"}, {"original_string": "protected Factory _factory;", "modifier": "protected", "type": "Factory", "declarator": "_factory", "var_name": "_factory"}, {"original_string": "protected Enhancer _searchEnhancer;", "modifier": "protected", "type": "Enhancer", "declarator": "_searchEnhancer", "var_name": "_searchEnhancer"}, {"original_string": "protected int _timeoutSeconds;", "modifier": "protected", "type": "int", "declarator": "_timeoutSeconds", "var_name": "_timeoutSeconds"}, {"original_string": "protected final static CallbackFilter s_callbackFilter = new UpdateFilter();", "modifier": "protected final static", "type": "CallbackFilter", "declarator": "s_callbackFilter = new UpdateFilter()", "var_name": "s_callbackFilter"}, {"original_string": "protected static final String FOR_UPDATE_CLAUSE = \" FOR UPDATE \";", "modifier": "protected static final", "type": "String", "declarator": "FOR_UPDATE_CLAUSE = \" FOR UPDATE \"", "var_name": "FOR_UPDATE_CLAUSE"}, {"original_string": "protected static final String SHARE_MODE_CLAUSE = \" LOCK IN SHARE MODE\";", "modifier": "protected static final", "type": "String", "declarator": "SHARE_MODE_CLAUSE = \" LOCK IN SHARE MODE\"", "var_name": "SHARE_MODE_CLAUSE"}, {"original_string": "protected static final String SELECT_LAST_INSERT_ID_SQL = \"SELECT LAST_INSERT_ID()\";", "modifier": "protected static final", "type": "String", "declarator": "SELECT_LAST_INSERT_ID_SQL = \"SELECT LAST_INSERT_ID()\"", "var_name": "SELECT_LAST_INSERT_ID_SQL"}, {"original_string": "protected static final SequenceFetcher s_seqFetcher = SequenceFetcher.getInstance();", "modifier": "protected static final", "type": "SequenceFetcher", "declarator": "s_seqFetcher = SequenceFetcher.getInstance()", "var_name": "s_seqFetcher"}, {"original_string": "protected Cache _cache;", "modifier": "protected", "type": "Cache", "declarator": "_cache", "var_name": "_cache"}], "methods": [{"identifier": "getDao", "parameters": "(Class<J> entityType)", "modifiers": "public static", "return": "GenericDao<? extends J, ? extends Serializable>", "signature": "GenericDao<? extends J, ? extends Serializable> getDao(Class<J> entityType)", "full_signature": "public static GenericDao<? extends J, ? extends Serializable> getDao(Class<J> entityType)", "class_method_signature": "GenericDaoBase.getDao(Class<J> entityType)", "testcase": false, "constructor": false}, {"identifier": "createSearchBuilder", "parameters": "(Class<J> resultType)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") @DB() public", "return": "GenericSearchBuilder<T, J>", "signature": "GenericSearchBuilder<T, J> createSearchBuilder(Class<J> resultType)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") @DB() public GenericSearchBuilder<T, J> createSearchBuilder(Class<J> resultType)", "class_method_signature": "GenericDaoBase.createSearchBuilder(Class<J> resultType)", "testcase": false, "constructor": false}, {"identifier": "getAllAttributes", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Attribute>", "signature": "Map<String, Attribute> getAllAttributes()", "full_signature": "@Override public Map<String, Attribute> getAllAttributes()", "class_method_signature": "GenericDaoBase.getAllAttributes()", "testcase": false, "constructor": false}, {"identifier": "createSearchEntity", "parameters": "(MethodInterceptor interceptor)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T createSearchEntity(MethodInterceptor interceptor)", "full_signature": "@SuppressWarnings(\"unchecked\") public T createSearchEntity(MethodInterceptor interceptor)", "class_method_signature": "GenericDaoBase.createSearchEntity(MethodInterceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "GenericDaoBase", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "", "signature": " GenericDaoBase()", "full_signature": "@SuppressWarnings(\"unchecked\") protected  GenericDaoBase()", "class_method_signature": "GenericDaoBase.GenericDaoBase()", "testcase": false, "constructor": true}, {"identifier": "createForUpdate", "parameters": "(final ID id)", "modifiers": "@Override @DB() @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T createForUpdate(final ID id)", "full_signature": "@Override @DB() @SuppressWarnings(\"unchecked\") public T createForUpdate(final ID id)", "class_method_signature": "GenericDaoBase.createForUpdate(final ID id)", "testcase": false, "constructor": false}, {"identifier": "createForUpdate", "parameters": "()", "modifiers": "@Override @DB() public", "return": "T", "signature": "T createForUpdate()", "full_signature": "@Override @DB() public T createForUpdate()", "class_method_signature": "GenericDaoBase.createForUpdate()", "testcase": false, "constructor": false}, {"identifier": "getNextInSequence", "parameters": "(final Class<K> clazz, final String name)", "modifiers": "@Override @DB() public", "return": "K", "signature": "K getNextInSequence(final Class<K> clazz, final String name)", "full_signature": "@Override @DB() public K getNextInSequence(final Class<K> clazz, final String name)", "class_method_signature": "GenericDaoBase.getNextInSequence(final Class<K> clazz, final String name)", "testcase": false, "constructor": false}, {"identifier": "getRandomlyIncreasingNextInSequence", "parameters": "(final Class<K> clazz, final String name)", "modifiers": "@Override @DB() public", "return": "K", "signature": "K getRandomlyIncreasingNextInSequence(final Class<K> clazz, final String name)", "full_signature": "@Override @DB() public K getRandomlyIncreasingNextInSequence(final Class<K> clazz, final String name)", "class_method_signature": "GenericDaoBase.getRandomlyIncreasingNextInSequence(final Class<K> clazz, final String name)", "testcase": false, "constructor": false}, {"identifier": "lockRows", "parameters": "(final SearchCriteria<T> sc, final Filter filter, final boolean exclusive)", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> lockRows(final SearchCriteria<T> sc, final Filter filter, final boolean exclusive)", "full_signature": "@Override @DB() public List<T> lockRows(final SearchCriteria<T> sc, final Filter filter, final boolean exclusive)", "class_method_signature": "GenericDaoBase.lockRows(final SearchCriteria<T> sc, final Filter filter, final boolean exclusive)", "testcase": false, "constructor": false}, {"identifier": "lockOneRandomRow", "parameters": "(final SearchCriteria<T> sc, final boolean exclusive)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T lockOneRandomRow(final SearchCriteria<T> sc, final boolean exclusive)", "full_signature": "@Override @DB() public T lockOneRandomRow(final SearchCriteria<T> sc, final boolean exclusive)", "class_method_signature": "GenericDaoBase.lockOneRandomRow(final SearchCriteria<T> sc, final boolean exclusive)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "full_signature": "@DB() protected List<T> search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "class_method_signature": "GenericDaoBase.search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "full_signature": "@DB() protected List<T> search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.search(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "searchIncludingRemoved", "parameters": "(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "full_signature": "@Override public List<T> searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "class_method_signature": "GenericDaoBase.searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache)", "testcase": false, "constructor": false}, {"identifier": "searchIncludingRemoved", "parameters": "(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "full_signature": "@Override public List<T> searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.searchIncludingRemoved(SearchCriteria<T> sc, final Filter filter, final Boolean lock, final boolean cache, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "customSearchIncludingRemoved", "parameters": "(SearchCriteria<M> sc, final Filter filter)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<M>", "signature": "List<M> customSearchIncludingRemoved(SearchCriteria<M> sc, final Filter filter)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<M> customSearchIncludingRemoved(SearchCriteria<M> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.customSearchIncludingRemoved(SearchCriteria<M> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "customSearch", "parameters": "(SearchCriteria<M> sc, final Filter filter)", "modifiers": "@Override @DB() public", "return": "List<M>", "signature": "List<M> customSearch(SearchCriteria<M> sc, final Filter filter)", "full_signature": "@Override @DB() public List<M> customSearch(SearchCriteria<M> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.customSearch(SearchCriteria<M> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object entity, Field field, ResultSet rs, int index)", "modifiers": "@DB() protected", "return": "void", "signature": "void setField(Object entity, Field field, ResultSet rs, int index)", "full_signature": "@DB() protected void setField(Object entity, Field field, ResultSet rs, int index)", "class_method_signature": "GenericDaoBase.setField(Object entity, Field field, ResultSet rs, int index)", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "(Class<M> type, ResultSet rs, int index)", "modifiers": "@DB() @SuppressWarnings(\"unchecked\") protected static", "return": "M", "signature": "M getObject(Class<M> type, ResultSet rs, int index)", "full_signature": "@DB() @SuppressWarnings(\"unchecked\") protected static M getObject(Class<M> type, ResultSet rs, int index)", "class_method_signature": "GenericDaoBase.getObject(Class<M> type, ResultSet rs, int index)", "testcase": false, "constructor": false}, {"identifier": "addJoinAttributes", "parameters": "(int count, PreparedStatement pstmt, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "modifiers": "@DB() protected", "return": "int", "signature": "int addJoinAttributes(int count, PreparedStatement pstmt, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "full_signature": "@DB() protected int addJoinAttributes(int count, PreparedStatement pstmt, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "class_method_signature": "GenericDaoBase.addJoinAttributes(int count, PreparedStatement pstmt, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ID id, UpdateBuilder ub, T entity)", "modifiers": "protected", "return": "int", "signature": "int update(ID id, UpdateBuilder ub, T entity)", "full_signature": "protected int update(ID id, UpdateBuilder ub, T entity)", "class_method_signature": "GenericDaoBase.update(ID id, UpdateBuilder ub, T entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows)", "modifiers": "public", "return": "int", "signature": "int update(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows)", "full_signature": "public int update(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows)", "class_method_signature": "GenericDaoBase.update(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows)", "testcase": false, "constructor": false}, {"identifier": "findAttributeByFieldName", "parameters": "(String name)", "modifiers": "@DB() protected", "return": "Attribute", "signature": "Attribute findAttributeByFieldName(String name)", "full_signature": "@DB() protected Attribute findAttributeByFieldName(String name)", "class_method_signature": "GenericDaoBase.findAttributeByFieldName(String name)", "testcase": false, "constructor": false}, {"identifier": "buildSelectByIdSql", "parameters": "(final StringBuilder sql)", "modifiers": "@DB() protected", "return": "String", "signature": "String buildSelectByIdSql(final StringBuilder sql)", "full_signature": "@DB() protected String buildSelectByIdSql(final StringBuilder sql)", "class_method_signature": "GenericDaoBase.buildSelectByIdSql(final StringBuilder sql)", "testcase": false, "constructor": false}, {"identifier": "getEntityBeanType", "parameters": "()", "modifiers": "@DB() @Override public", "return": "Class<T>", "signature": "Class<T> getEntityBeanType()", "full_signature": "@DB() @Override public Class<T> getEntityBeanType()", "class_method_signature": "GenericDaoBase.getEntityBeanType()", "testcase": false, "constructor": false}, {"identifier": "findOneIncludingRemovedBy", "parameters": "(final SearchCriteria<T> sc)", "modifiers": "@DB() protected", "return": "T", "signature": "T findOneIncludingRemovedBy(final SearchCriteria<T> sc)", "full_signature": "@DB() protected T findOneIncludingRemovedBy(final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.findOneIncludingRemovedBy(final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "findOneBy", "parameters": "(final SearchCriteria<T> sc)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T findOneBy(final SearchCriteria<T> sc)", "full_signature": "@Override @DB() public T findOneBy(final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.findOneBy(final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "listBy", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listBy(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@DB() protected List<T> listBy(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.listBy(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "listBy", "parameters": "(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "full_signature": "@DB() protected List<T> listBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.listBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "listBy", "parameters": "(final SearchCriteria<T> sc)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listBy(final SearchCriteria<T> sc)", "full_signature": "@DB() protected List<T> listBy(final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.listBy(final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "listIncludingRemovedBy", "parameters": "(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "full_signature": "@DB() protected List<T> listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "listIncludingRemovedBy", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@DB() protected List<T> listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.listIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "listIncludingRemovedBy", "parameters": "(final SearchCriteria<T> sc)", "modifiers": "@DB() protected", "return": "List<T>", "signature": "List<T> listIncludingRemovedBy(final SearchCriteria<T> sc)", "full_signature": "@DB() protected List<T> listIncludingRemovedBy(final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.listIncludingRemovedBy(final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(final ID id)", "modifiers": "@Override @DB() @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T findById(final ID id)", "full_signature": "@Override @DB() @SuppressWarnings(\"unchecked\") public T findById(final ID id)", "class_method_signature": "GenericDaoBase.findById(final ID id)", "testcase": false, "constructor": false}, {"identifier": "findByUuid", "parameters": "(final String uuid)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T findByUuid(final String uuid)", "full_signature": "@Override @DB() public T findByUuid(final String uuid)", "class_method_signature": "GenericDaoBase.findByUuid(final String uuid)", "testcase": false, "constructor": false}, {"identifier": "findByUuidIncludingRemoved", "parameters": "(final String uuid)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T findByUuidIncludingRemoved(final String uuid)", "full_signature": "@Override @DB() public T findByUuidIncludingRemoved(final String uuid)", "class_method_signature": "GenericDaoBase.findByUuidIncludingRemoved(final String uuid)", "testcase": false, "constructor": false}, {"identifier": "findByIdIncludingRemoved", "parameters": "(final ID id)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T findByIdIncludingRemoved(final ID id)", "full_signature": "@Override @DB() public T findByIdIncludingRemoved(final ID id)", "class_method_signature": "GenericDaoBase.findByIdIncludingRemoved(final ID id)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(final ID id, boolean fresh)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T findById(final ID id, boolean fresh)", "full_signature": "@Override @DB() public T findById(final ID id, boolean fresh)", "class_method_signature": "GenericDaoBase.findById(final ID id, boolean fresh)", "testcase": false, "constructor": false}, {"identifier": "lockRow", "parameters": "(ID id, Boolean lock)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T lockRow(ID id, Boolean lock)", "full_signature": "@Override @DB() public T lockRow(ID id, Boolean lock)", "class_method_signature": "GenericDaoBase.lockRow(ID id, Boolean lock)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(ID id, boolean removed, Boolean lock)", "modifiers": "protected", "return": "T", "signature": "T findById(ID id, boolean removed, Boolean lock)", "full_signature": "protected T findById(ID id, boolean removed, Boolean lock)", "class_method_signature": "GenericDaoBase.findById(ID id, boolean removed, Boolean lock)", "testcase": false, "constructor": false}, {"identifier": "acquireInLockTable", "parameters": "(ID id)", "modifiers": "@Override @DB() public", "return": "T", "signature": "T acquireInLockTable(ID id)", "full_signature": "@Override @DB() public T acquireInLockTable(ID id)", "class_method_signature": "GenericDaoBase.acquireInLockTable(ID id)", "testcase": false, "constructor": false}, {"identifier": "acquireInLockTable", "parameters": "(final ID id, int seconds)", "modifiers": "@Override public", "return": "T", "signature": "T acquireInLockTable(final ID id, int seconds)", "full_signature": "@Override public T acquireInLockTable(final ID id, int seconds)", "class_method_signature": "GenericDaoBase.acquireInLockTable(final ID id, int seconds)", "testcase": false, "constructor": false}, {"identifier": "releaseFromLockTable", "parameters": "(final ID id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean releaseFromLockTable(final ID id)", "full_signature": "@Override public boolean releaseFromLockTable(final ID id)", "class_method_signature": "GenericDaoBase.releaseFromLockTable(final ID id)", "testcase": false, "constructor": false}, {"identifier": "lockInLockTable", "parameters": "(final String id)", "modifiers": "@Override @DB() public", "return": "boolean", "signature": "boolean lockInLockTable(final String id)", "full_signature": "@Override @DB() public boolean lockInLockTable(final String id)", "class_method_signature": "GenericDaoBase.lockInLockTable(final String id)", "testcase": false, "constructor": false}, {"identifier": "lockInLockTable", "parameters": "(final String id, int seconds)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean lockInLockTable(final String id, int seconds)", "full_signature": "@Override public boolean lockInLockTable(final String id, int seconds)", "class_method_signature": "GenericDaoBase.lockInLockTable(final String id, int seconds)", "testcase": false, "constructor": false}, {"identifier": "unlockFromLockTable", "parameters": "(final String id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unlockFromLockTable(final String id)", "full_signature": "@Override public boolean unlockFromLockTable(final String id)", "class_method_signature": "GenericDaoBase.unlockFromLockTable(final String id)", "testcase": false, "constructor": false}, {"identifier": "listAllIncludingRemoved", "parameters": "()", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> listAllIncludingRemoved()", "full_signature": "@Override @DB() public List<T> listAllIncludingRemoved()", "class_method_signature": "GenericDaoBase.listAllIncludingRemoved()", "testcase": false, "constructor": false}, {"identifier": "addGroupBy", "parameters": "(final StringBuilder sql, SearchCriteria<?> sc)", "modifiers": "@DB() protected", "return": "List<Object>", "signature": "List<Object> addGroupBy(final StringBuilder sql, SearchCriteria<?> sc)", "full_signature": "@DB() protected List<Object> addGroupBy(final StringBuilder sql, SearchCriteria<?> sc)", "class_method_signature": "GenericDaoBase.addGroupBy(final StringBuilder sql, SearchCriteria<?> sc)", "testcase": false, "constructor": false}, {"identifier": "addFilter", "parameters": "(final StringBuilder sql, final Filter filter)", "modifiers": "@DB() protected", "return": "void", "signature": "void addFilter(final StringBuilder sql, final Filter filter)", "full_signature": "@DB() protected void addFilter(final StringBuilder sql, final Filter filter)", "class_method_signature": "GenericDaoBase.addFilter(final StringBuilder sql, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "listAllIncludingRemoved", "parameters": "(final Filter filter)", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> listAllIncludingRemoved(final Filter filter)", "full_signature": "@Override @DB() public List<T> listAllIncludingRemoved(final Filter filter)", "class_method_signature": "GenericDaoBase.listAllIncludingRemoved(final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "executeList", "parameters": "(final String sql, final Object... params)", "modifiers": "protected", "return": "List<T>", "signature": "List<T> executeList(final String sql, final Object... params)", "full_signature": "protected List<T> executeList(final String sql, final Object... params)", "class_method_signature": "GenericDaoBase.executeList(final String sql, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "()", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> listAll()", "full_signature": "@Override @DB() public List<T> listAll()", "class_method_signature": "GenericDaoBase.listAll()", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "(final Filter filter)", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> listAll(final Filter filter)", "full_signature": "@Override @DB() public List<T> listAll(final Filter filter)", "class_method_signature": "GenericDaoBase.listAll(final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "expunge", "parameters": "(final ID id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean expunge(final ID id)", "full_signature": "@Override public boolean expunge(final ID id)", "class_method_signature": "GenericDaoBase.expunge(final ID id)", "testcase": false, "constructor": false}, {"identifier": "expunge", "parameters": "(final SearchCriteria<T> sc)", "modifiers": "@Override public", "return": "int", "signature": "int expunge(final SearchCriteria<T> sc)", "full_signature": "@Override public int expunge(final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.expunge(final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "createPartialSelectSql", "parameters": "(SearchCriteria<?> sc, final boolean whereClause, final boolean enableQueryCache)", "modifiers": "@DB() protected", "return": "StringBuilder", "signature": "StringBuilder createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause, final boolean enableQueryCache)", "full_signature": "@DB() protected StringBuilder createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "createPartialSelectSql", "parameters": "(SearchCriteria<?> sc, final boolean whereClause)", "modifiers": "@DB() protected", "return": "StringBuilder", "signature": "StringBuilder createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause)", "full_signature": "@DB() protected StringBuilder createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause)", "class_method_signature": "GenericDaoBase.createPartialSelectSql(SearchCriteria<?> sc, final boolean whereClause)", "testcase": false, "constructor": false}, {"identifier": "addJoins", "parameters": "(StringBuilder str, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "modifiers": "@DB() protected", "return": "void", "signature": "void addJoins(StringBuilder str, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "full_signature": "@DB() protected void addJoins(StringBuilder str, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "class_method_signature": "GenericDaoBase.addJoins(StringBuilder str, Collection<JoinBuilder<SearchCriteria<?>>> joins)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> search(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@Override @DB() public List<T> search(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.search(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "searchAndCount", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@Override @DB() public", "return": "Pair<List<T>, Integer>", "signature": "Pair<List<T>, Integer> searchAndCount(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@Override @DB() public Pair<List<T>, Integer> searchAndCount(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.searchAndCount(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "searchAndDistinctCount", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@Override @DB() public", "return": "Pair<List<T>, Integer>", "signature": "Pair<List<T>, Integer> searchAndDistinctCount(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@Override @DB() public Pair<List<T>, Integer> searchAndDistinctCount(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.searchAndDistinctCount(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "modifiers": "@Override @DB() public", "return": "List<T>", "signature": "List<T> search(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "full_signature": "@Override @DB() public List<T> search(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "class_method_signature": "GenericDaoBase.search(final SearchCriteria<T> sc, final Filter filter, final boolean enableQueryCache)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ID id, T entity)", "modifiers": "@Override @DB() public", "return": "boolean", "signature": "boolean update(ID id, T entity)", "full_signature": "@Override @DB() public boolean update(ID id, T entity)", "class_method_signature": "GenericDaoBase.update(ID id, T entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final T entity, final SearchCriteria<T> sc, Integer rows)", "modifiers": "@DB() public", "return": "int", "signature": "int update(final T entity, final SearchCriteria<T> sc, Integer rows)", "full_signature": "@DB() public int update(final T entity, final SearchCriteria<T> sc, Integer rows)", "class_method_signature": "GenericDaoBase.update(final T entity, final SearchCriteria<T> sc, Integer rows)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final T entity, final SearchCriteria<T> sc)", "modifiers": "@Override @DB() public", "return": "int", "signature": "int update(final T entity, final SearchCriteria<T> sc)", "full_signature": "@Override @DB() public int update(final T entity, final SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.update(final T entity, final SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(final T entity)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T persist(final T entity)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T persist(final T entity)", "class_method_signature": "GenericDaoBase.persist(final T entity)", "testcase": false, "constructor": false}, {"identifier": "insertElementCollection", "parameters": "(T entity, Attribute idAttribute, ID id, Map<Attribute, Object> ecAttributes)", "modifiers": "protected", "return": "void", "signature": "void insertElementCollection(T entity, Attribute idAttribute, ID id, Map<Attribute, Object> ecAttributes)", "full_signature": "protected void insertElementCollection(T entity, Attribute idAttribute, ID id, Map<Attribute, Object> ecAttributes)", "class_method_signature": "GenericDaoBase.insertElementCollection(T entity, Attribute idAttribute, ID id, Map<Attribute, Object> ecAttributes)", "testcase": false, "constructor": false}, {"identifier": "generateValue", "parameters": "(final Attribute attr)", "modifiers": "@DB() protected", "return": "Object", "signature": "Object generateValue(final Attribute attr)", "full_signature": "@DB() protected Object generateValue(final Attribute attr)", "class_method_signature": "GenericDaoBase.generateValue(final Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "prepareAttribute", "parameters": "(final int j, final PreparedStatement pstmt, final Attribute attr, Object value)", "modifiers": "@DB() protected", "return": "void", "signature": "void prepareAttribute(final int j, final PreparedStatement pstmt, final Attribute attr, Object value)", "full_signature": "@DB() protected void prepareAttribute(final int j, final PreparedStatement pstmt, final Attribute attr, Object value)", "class_method_signature": "GenericDaoBase.prepareAttribute(final int j, final PreparedStatement pstmt, final Attribute attr, Object value)", "testcase": false, "constructor": false}, {"identifier": "prepareAttributes", "parameters": "(final PreparedStatement pstmt, final Object entity, final Attribute[] attrs, final int index)", "modifiers": "@DB() protected", "return": "int", "signature": "int prepareAttributes(final PreparedStatement pstmt, final Object entity, final Attribute[] attrs, final int index)", "full_signature": "@DB() protected int prepareAttributes(final PreparedStatement pstmt, final Object entity, final Attribute[] attrs, final int index)", "class_method_signature": "GenericDaoBase.prepareAttributes(final PreparedStatement pstmt, final Object entity, final Attribute[] attrs, final int index)", "testcase": false, "constructor": false}, {"identifier": "toEntityBean", "parameters": "(final ResultSet result, final boolean cache)", "modifiers": "@SuppressWarnings(\"unchecked\") @DB() protected", "return": "T", "signature": "T toEntityBean(final ResultSet result, final boolean cache)", "full_signature": "@SuppressWarnings(\"unchecked\") @DB() protected T toEntityBean(final ResultSet result, final boolean cache)", "class_method_signature": "GenericDaoBase.toEntityBean(final ResultSet result, final boolean cache)", "testcase": false, "constructor": false}, {"identifier": "toVO", "parameters": "(ResultSet result, boolean cache)", "modifiers": "@DB() protected", "return": "T", "signature": "T toVO(ResultSet result, boolean cache)", "full_signature": "@DB() protected T toVO(ResultSet result, boolean cache)", "class_method_signature": "GenericDaoBase.toVO(ResultSet result, boolean cache)", "testcase": false, "constructor": false}, {"identifier": "toEntityBean", "parameters": "(final ResultSet result, final T entity)", "modifiers": "@DB() protected", "return": "void", "signature": "void toEntityBean(final ResultSet result, final T entity)", "full_signature": "@DB() protected void toEntityBean(final ResultSet result, final T entity)", "class_method_signature": "GenericDaoBase.toEntityBean(final ResultSet result, final T entity)", "testcase": false, "constructor": false}, {"identifier": "loadCollection", "parameters": "(T entity, Attribute attr)", "modifiers": "@DB() @SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void loadCollection(T entity, Attribute attr)", "full_signature": "@DB() @SuppressWarnings(\"unchecked\") protected void loadCollection(T entity, Attribute attr)", "class_method_signature": "GenericDaoBase.loadCollection(T entity, Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "expunge", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void expunge()", "full_signature": "@Override public void expunge()", "class_method_signature": "GenericDaoBase.expunge()", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index)", "modifiers": "@DB() protected", "return": "void", "signature": "void setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index)", "full_signature": "@DB() protected void setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index)", "class_method_signature": "GenericDaoBase.setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final ID id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(final ID id)", "full_signature": "@Override public boolean remove(final ID id)", "class_method_signature": "GenericDaoBase.remove(final ID id)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SearchCriteria<T> sc)", "modifiers": "@Override public", "return": "int", "signature": "int remove(SearchCriteria<T> sc)", "full_signature": "@Override public int remove(SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.remove(SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "createCache", "parameters": "(final Map<String, ? extends Object> params)", "modifiers": "@DB() protected", "return": "void", "signature": "void createCache(final Map<String, ? extends Object> params)", "full_signature": "@DB() protected void createCache(final Map<String, ? extends Object> params)", "class_method_signature": "GenericDaoBase.createCache(final Map<String, ? extends Object> params)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override @DB() public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override @DB() public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "GenericDaoBase.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "getUpdateBuilder", "parameters": "(final T entityObject)", "modifiers": "@DB() public static", "return": "UpdateBuilder", "signature": "UpdateBuilder getUpdateBuilder(final T entityObject)", "full_signature": "@DB() public static UpdateBuilder getUpdateBuilder(final T entityObject)", "class_method_signature": "GenericDaoBase.getUpdateBuilder(final T entityObject)", "testcase": false, "constructor": false}, {"identifier": "createSearchBuilder", "parameters": "()", "modifiers": "@Override @DB() public", "return": "SearchBuilder<T>", "signature": "SearchBuilder<T> createSearchBuilder()", "full_signature": "@Override @DB() public SearchBuilder<T> createSearchBuilder()", "class_method_signature": "GenericDaoBase.createSearchBuilder()", "testcase": false, "constructor": false}, {"identifier": "createSearchCriteria", "parameters": "()", "modifiers": "@Override @DB() public", "return": "SearchCriteria<T>", "signature": "SearchCriteria<T> createSearchCriteria()", "full_signature": "@Override @DB() public SearchCriteria<T> createSearchCriteria()", "class_method_signature": "GenericDaoBase.createSearchCriteria()", "testcase": false, "constructor": false}, {"identifier": "getDistinctCount", "parameters": "(SearchCriteria<T> sc)", "modifiers": "public", "return": "Integer", "signature": "Integer getDistinctCount(SearchCriteria<T> sc)", "full_signature": "public Integer getDistinctCount(SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.getDistinctCount(SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(SearchCriteria<T> sc)", "modifiers": "public", "return": "Integer", "signature": "Integer getCount(SearchCriteria<T> sc)", "full_signature": "public Integer getCount(SearchCriteria<T> sc)", "class_method_signature": "GenericDaoBase.getCount(SearchCriteria<T> sc)", "testcase": false, "constructor": false}, {"identifier": "createCountSelect", "parameters": "(SearchCriteria<?> sc, final boolean whereClause)", "modifiers": "@DB() protected", "return": "StringBuilder", "signature": "StringBuilder createCountSelect(SearchCriteria<?> sc, final boolean whereClause)", "full_signature": "@DB() protected StringBuilder createCountSelect(SearchCriteria<?> sc, final boolean whereClause)", "class_method_signature": "GenericDaoBase.createCountSelect(SearchCriteria<?> sc, final boolean whereClause)", "testcase": false, "constructor": false}, {"identifier": "createDistinctIdSelect", "parameters": "(SearchCriteria<?> sc, final boolean whereClause)", "modifiers": "@DB() protected", "return": "StringBuilder", "signature": "StringBuilder createDistinctIdSelect(SearchCriteria<?> sc, final boolean whereClause)", "full_signature": "@DB() protected StringBuilder createDistinctIdSelect(SearchCriteria<?> sc, final boolean whereClause)", "class_method_signature": "GenericDaoBase.createDistinctIdSelect(SearchCriteria<?> sc, final boolean whereClause)", "testcase": false, "constructor": false}, {"identifier": "listAndCountIncludingRemovedBy", "parameters": "(final SearchCriteria<T> sc, final Filter filter)", "modifiers": "@DB() protected", "return": "Pair<List<T>, Integer>", "signature": "Pair<List<T>, Integer> listAndCountIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "full_signature": "@DB() protected Pair<List<T>, Integer> listAndCountIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "class_method_signature": "GenericDaoBase.listAndCountIncludingRemovedBy(final SearchCriteria<T> sc, final Filter filter)", "testcase": false, "constructor": false}], "file": "framework/db/src/main/java/com/cloud/utils/db/GenericDaoBase.java"}, "focal_method": {"identifier": "getObject", "parameters": "(Class<M> type, ResultSet rs, int index)", "modifiers": "@DB() @SuppressWarnings(\"unchecked\") protected static", "return": "M", "body": "@DB()\n    @SuppressWarnings(\"unchecked\")\n    protected static <M> M getObject(Class<M> type, ResultSet rs, int index) throws SQLException {\n        if (type == String.class) {\n            byte[] bytes = rs.getBytes(index);\n            if (bytes != null) {\n                try {\n                    return (M)new String(bytes, \"UTF-8\");\n                } catch (UnsupportedEncodingException e) {\n                    throw new CloudRuntimeException(\"UnsupportedEncodingException exception while converting UTF-8 data\");\n                }\n            } else {\n                return null;\n            }\n        } else if (type == int.class) {\n            return (M) (Integer) rs.getInt(index);\n        } else if (type == Integer.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Integer) rs.getInt(index);\n            }\n        } else if (type == long.class) {\n            return (M) (Long) rs.getLong(index);\n        } else if (type == Long.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Long) rs.getLong(index);\n            }\n        } else if (type == Date.class) {\n            final Object data = rs.getDate(index);\n            if (data == null) {\n                return null;\n            } else {\n                return (M)DateUtil.parseDateString(s_gmtTimeZone, rs.getString(index));\n            }\n        } else if (type == short.class) {\n            return (M) (Short) rs.getShort(index);\n        } else if (type == Short.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Short) rs.getShort(index);\n            }\n        } else if (type == boolean.class) {\n            return (M) (Boolean) rs.getBoolean(index);\n        } else if (type == Boolean.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Boolean) rs.getBoolean(index);\n            }\n        } else if (type == float.class) {\n            return (M) (Float) rs.getFloat(index);\n        } else if (type == Float.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Float) rs.getFloat(index);\n            }\n        } else if (type == double.class) {\n            return (M) (Double) rs.getDouble(index);\n        } else if (type == Double.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Double) rs.getDouble(index);\n            }\n        } else if (type == byte.class) {\n            return (M) (Byte) rs.getByte(index);\n        } else if (type == Byte.class) {\n            if (rs.getObject(index) == null) {\n                return null;\n            } else {\n                return (M) (Byte) rs.getByte(index);\n            }\n        } else if (type == Calendar.class) {\n            final Object data = rs.getDate(index);\n            if (data == null) {\n                return null;\n            } else {\n                final Calendar cal = Calendar.getInstance();\n                cal.setTime(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(index)));\n                return (M)cal;\n            }\n        } else if (type == byte[].class) {\n            return (M)rs.getBytes(index);\n        } else {\n            return (M)rs.getObject(index);\n        }\n    }", "signature": "M getObject(Class<M> type, ResultSet rs, int index)", "full_signature": "@DB() @SuppressWarnings(\"unchecked\") protected static M getObject(Class<M> type, ResultSet rs, int index)", "class_method_signature": "GenericDaoBase.getObject(Class<M> type, ResultSet rs, int index)", "testcase": false, "constructor": false, "invocations": ["getBytes", "getInt", "getObject", "getInt", "getLong", "getObject", "getLong", "getDate", "parseDateString", "getString", "getShort", "getObject", "getShort", "getBoolean", "getObject", "getBoolean", "getFloat", "getObject", "getFloat", "getDouble", "getObject", "getDouble", "getByte", "getObject", "getByte", "getDate", "getInstance", "setTime", "parseDateString", "getString", "getBytes", "getObject"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}