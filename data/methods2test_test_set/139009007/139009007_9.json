{"test_class": {"identifier": "WrappedSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "implementation/src/test/java/io/smallrye/reactive/streams/utils/WrappedSubscriberTest.java"}, "test_case": {"identifier": "checkThatOnSubscribeCanOnlyBeCallOnce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkThatOnSubscribeCanOnlyBeCallOnce() {\n        AtomicReference<Subscription> subscriptionReference = new AtomicReference<>();\n        WrappedSubscriber<Integer> subscriber = new WrappedSubscriber<>(new Subscriber<Integer>() {\n            @Override\n            public void onSubscribe(Subscription s) {\n                subscriptionReference.set(s);\n            }\n\n            @Override\n            public void onNext(Integer integer) {\n\n            }\n\n            @Override\n            public void onError(Throwable t) {\n\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n\n        AtomicBoolean cancellationReference1 = new AtomicBoolean();\n        subscriber.onSubscribe(new Subscription() {\n            @Override\n            public void request(long n) {\n\n            }\n\n            @Override\n            public void cancel() {\n                cancellationReference1.set(true);\n            }\n        });\n\n        assertThat(cancellationReference1.get()).isFalse();\n        assertThat(subscriptionReference.get()).isNotNull();\n\n        AtomicBoolean cancellationReference2 = new AtomicBoolean();\n        subscriber.onSubscribe(new Subscription() {\n            @Override\n            public void request(long n) {\n\n            }\n\n            @Override\n            public void cancel() {\n                cancellationReference2.set(true);\n            }\n        });\n\n        assertThat(cancellationReference1.get()).isFalse();\n        assertThat(cancellationReference2.get()).isTrue();\n        assertThat(subscriptionReference.get()).isNotNull();\n\n    }", "signature": "void checkThatOnSubscribeCanOnlyBeCallOnce()", "full_signature": "@Test public void checkThatOnSubscribeCanOnlyBeCallOnce()", "class_method_signature": "WrappedSubscriberTest.checkThatOnSubscribeCanOnlyBeCallOnce()", "testcase": true, "constructor": false, "invocations": ["set", "onSubscribe", "set", "isFalse", "assertThat", "get", "isNotNull", "assertThat", "get", "onSubscribe", "set", "isFalse", "assertThat", "get", "isTrue", "assertThat", "get", "isNotNull", "assertThat", "get"]}, "focal_class": {"identifier": "WrappedSubscriber", "superclass": "", "interfaces": "implements Subscriber<T>", "fields": [{"original_string": "private final CompletableFuture<Void> future = new CompletableFuture<>();", "modifier": "private final", "type": "CompletableFuture<Void>", "declarator": "future = new CompletableFuture<>()", "var_name": "future"}, {"original_string": "private final Subscriber<T> source;", "modifier": "private final", "type": "Subscriber<T>", "declarator": "source", "var_name": "source"}, {"original_string": "private final AtomicBoolean subscribed = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "subscribed = new AtomicBoolean(false)", "var_name": "subscribed"}], "methods": [{"identifier": "WrappedSubscriber", "parameters": "(Subscriber<T> delegate)", "modifiers": "public", "return": "", "signature": " WrappedSubscriber(Subscriber<T> delegate)", "full_signature": "public  WrappedSubscriber(Subscriber<T> delegate)", "class_method_signature": "WrappedSubscriber.WrappedSubscriber(Subscriber<T> delegate)", "testcase": false, "constructor": true}, {"identifier": "future", "parameters": "()", "modifiers": "public", "return": "CompletionStage<Void>", "signature": "CompletionStage<Void> future()", "full_signature": "public CompletionStage<Void> future()", "class_method_signature": "WrappedSubscriber.future()", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription subscription)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription subscription)", "full_signature": "@Override public void onSubscribe(Subscription subscription)", "class_method_signature": "WrappedSubscriber.onSubscribe(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T item)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T item)", "full_signature": "@Override public void onNext(T item)", "class_method_signature": "WrappedSubscriber.onNext(T item)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable throwable)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable throwable)", "full_signature": "@Override public void onError(Throwable throwable)", "class_method_signature": "WrappedSubscriber.onError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "WrappedSubscriber.onComplete()", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/utils/WrappedSubscriber.java"}, "focal_method": {"identifier": "onSubscribe", "parameters": "(Subscription subscription)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onSubscribe(Subscription subscription) {\n        Objects.requireNonNull(subscription);\n        if (subscribed.compareAndSet(false, true)) {\n            source.onSubscribe(\n                    new WrappedSubscription(subscription, () -> future.completeExceptionally(new CancellationException())));\n        } else {\n            subscription.cancel();\n        }\n    }", "signature": "void onSubscribe(Subscription subscription)", "full_signature": "@Override public void onSubscribe(Subscription subscription)", "class_method_signature": "WrappedSubscriber.onSubscribe(Subscription subscription)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "compareAndSet", "onSubscribe", "completeExceptionally", "cancel"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}