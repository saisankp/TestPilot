{"test_class": {"identifier": "HeaderFunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/http/HeaderFunctionsTest.java"}, "test_case": {"identifier": "testJsonConfigParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJsonConfigParser() {\n        String json = \"[\" +\n                \" { 'header': 'xxx'    , 'value': '111'                                },\" + // set always\n                \" { 'header': 'yyy'    , 'value': '222'                                },\" + // set always\n                \" { 'header': 'yyy'    , 'value': '333'           , 'mode': 'complete' },\" + // not set as already there\n                \" { 'header': 'zzz'    , 'value': '444'           , 'mode': 'override' },\" + // not set as not (yet) there\n                \" { 'header': 'oli'    , 'value': '{xxx}-{yyy}'                        },\" + // use variable replacement\n                \" { 'header': 'xxx'    , 'value': null                                 },\" + // remove\n                \" { 'header': 'preSuff', 'value': 'pre-{yyy}-suff'                     },\" + // test constant prefix and suffix\n                \" { 'header': 'aaa'    , 'value': 'yes'                                },\" +\n                \" { 'header': 'aaa'    , 'value': ''                                   } \" + // test that value = empty string also deletes the header\n                \"]\";\n        json = json.replace('\\'', '\"');\n        JsonArray config = new JsonArray(json);\n        HeaderFunction chain = HeaderFunctions.parseFromJson(config);\n\n        MultiMap headers = new CaseInsensitiveHeaders();\n        final EvalScope evalScope = chain.apply(headers);\n\n        Assert.assertFalse(headers.contains(\"xxx\")); // explicit removed\n        Assert.assertFalse(headers.contains(\"zzz\")); // never added\n        Assert.assertEquals(\"222\"         , headers.get(\"yyy\"    ));\n        Assert.assertEquals(\"111-222\"     , headers.get(\"oli\"    ));\n        Assert.assertEquals(\"pre-222-suff\", headers.get(\"preSuff\"));\n        Assert.assertNull(\"no eval error occured\", evalScope.getErrorMessage());\n        Assert.assertFalse(headers.contains(\"aaa\"));\n    }", "signature": "void testJsonConfigParser()", "full_signature": "@Test public void testJsonConfigParser()", "class_method_signature": "HeaderFunctionsTest.testJsonConfigParser()", "testcase": true, "constructor": false, "invocations": ["replace", "parseFromJson", "apply", "assertFalse", "contains", "assertFalse", "contains", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "getErrorMessage", "assertFalse", "contains"]}, "focal_class": {"identifier": "HeaderFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HeaderFunctions.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HeaderFunctions.class)", "var_name": "LOG"}, {"original_string": "private static final EvalScope NO_ERROR_SCOPE = new EvalScope(null);", "modifier": "private static final", "type": "EvalScope", "declarator": "NO_ERROR_SCOPE = new EvalScope(null)", "var_name": "NO_ERROR_SCOPE"}, {"original_string": "public static final HeaderFunction DO_NOTHING = (headers) -> NO_ERROR_SCOPE;", "modifier": "public static final", "type": "HeaderFunction", "declarator": "DO_NOTHING = (headers) -> NO_ERROR_SCOPE", "var_name": "DO_NOTHING"}, {"original_string": "private static final Pattern VARIABLE_PATTERN = Pattern.compile(\"[{](.+?)[}]\");", "modifier": "private static final", "type": "Pattern", "declarator": "VARIABLE_PATTERN = Pattern.compile(\"[{](.+?)[}]\")", "var_name": "VARIABLE_PATTERN"}], "methods": [{"identifier": "parseFromJson", "parameters": "(JsonArray config)", "modifiers": "public static", "return": "HeaderFunction", "signature": "HeaderFunction parseFromJson(JsonArray config)", "full_signature": "public static HeaderFunction parseFromJson(JsonArray config)", "class_method_signature": "HeaderFunctions.parseFromJson(JsonArray config)", "testcase": false, "constructor": false}, {"identifier": "parseStaticHeadersFromJson", "parameters": "(JsonObject staticHeaders)", "modifiers": "@Deprecated public static", "return": "HeaderFunction", "signature": "HeaderFunction parseStaticHeadersFromJson(JsonObject staticHeaders)", "full_signature": "@Deprecated public static HeaderFunction parseStaticHeadersFromJson(JsonObject staticHeaders)", "class_method_signature": "HeaderFunctions.parseStaticHeadersFromJson(JsonObject staticHeaders)", "testcase": false, "constructor": false}, {"identifier": "wrapConsumerChain", "parameters": "(Consumer<EvalScope> chain)", "modifiers": "private static", "return": "HeaderFunction", "signature": "HeaderFunction wrapConsumerChain(Consumer<EvalScope> chain)", "full_signature": "private static HeaderFunction wrapConsumerChain(Consumer<EvalScope> chain)", "class_method_signature": "HeaderFunctions.wrapConsumerChain(Consumer<EvalScope> chain)", "testcase": false, "constructor": false}, {"identifier": "parseOneFromJason", "parameters": "(JsonArray config, JsonObject rule)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> parseOneFromJason(JsonArray config, JsonObject rule)", "full_signature": "private static Consumer<EvalScope> parseOneFromJason(JsonArray config, JsonObject rule)", "class_method_signature": "HeaderFunctions.parseOneFromJason(JsonArray config, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String headerName)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> remove(String headerName)", "full_signature": "public static Consumer<EvalScope> remove(String headerName)", "class_method_signature": "HeaderFunctions.remove(String headerName)", "testcase": false, "constructor": false}, {"identifier": "setAlways", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setAlways(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setAlways(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setAlways(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "setIfAbsent", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setIfAbsent(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setIfAbsent(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setIfAbsent(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "setIfPresent", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setIfPresent(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setIfPresent(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setIfPresent(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "newExpressionEvaluator", "parameters": "(String expression)", "modifiers": "private static", "return": "Function<EvalScope, String>", "signature": "Function<EvalScope, String> newExpressionEvaluator(String expression)", "full_signature": "private static Function<EvalScope, String> newExpressionEvaluator(String expression)", "class_method_signature": "HeaderFunctions.newExpressionEvaluator(String expression)", "testcase": false, "constructor": false}, {"identifier": "andThenFix", "parameters": "(Consumer<EvalScope> c, String fix)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> andThenFix(Consumer<EvalScope> c, String fix)", "full_signature": "private static Consumer<EvalScope> andThenFix(Consumer<EvalScope> c, String fix)", "class_method_signature": "HeaderFunctions.andThenFix(Consumer<EvalScope> c, String fix)", "testcase": false, "constructor": false}, {"identifier": "andThenVar", "parameters": "(Consumer<EvalScope> c, String varName, String expression)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> andThenVar(Consumer<EvalScope> c, String varName, String expression)", "full_signature": "private static Consumer<EvalScope> andThenVar(Consumer<EvalScope> c, String varName, String expression)", "class_method_signature": "HeaderFunctions.andThenVar(Consumer<EvalScope> c, String varName, String expression)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/http/HeaderFunctions.java"}, "focal_method": {"identifier": "parseFromJson", "parameters": "(JsonArray config)", "modifiers": "public static", "return": "HeaderFunction", "body": "public static HeaderFunction parseFromJson(JsonArray config) throws IllegalArgumentException {\n        LOG.debug(\"creating header function chain from \" + config);\n\n        Consumer<EvalScope> chain = null;\n        for (int pos = 0; pos < config.size(); pos++) {\n            JsonObject rule = config.getJsonObject(pos);\n            Consumer<EvalScope> c = parseOneFromJason(config, rule);\n            chain = (chain == null) ? c : chain.andThen(c);\n        }\n        return wrapConsumerChain(chain);\n    }", "signature": "HeaderFunction parseFromJson(JsonArray config)", "full_signature": "public static HeaderFunction parseFromJson(JsonArray config)", "class_method_signature": "HeaderFunctions.parseFromJson(JsonArray config)", "testcase": false, "constructor": false, "invocations": ["debug", "size", "getJsonObject", "parseOneFromJason", "andThen", "wrapConsumerChain"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}