{"test_class": {"identifier": "LearnerSnapshotThrottlerTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n            LoggerFactory.getLogger(LearnerSnapshotThrottlerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n            LoggerFactory.getLogger(LearnerSnapshotThrottlerTest.class)", "var_name": "LOG"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerSnapshotThrottlerTest.java"}, "test_case": {"identifier": "testPositiveTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPositiveTimeout() throws Exception {\n        final LearnerSnapshotThrottler throttler = new LearnerSnapshotThrottler(1, 200);\n        ExecutorService threadPool = Executors.newFixedThreadPool(1);\n\n        LearnerSnapshot first = throttler.beginSnapshot(false);\n        final CountDownLatch snapshotProgressLatch = new CountDownLatch(1);\n\n        Future<Boolean> result = threadPool.submit(new Callable<Boolean>() {\n            @Override\n            public Boolean call() {\n                try {\n                    snapshotProgressLatch.countDown();\n                    LearnerSnapshot second = throttler.beginSnapshot(false);\n                    second.close();\n                }\n                catch (Exception e) {\n                    return false;\n                }\n\n                return true;\n            }\n        });\n\n        snapshotProgressLatch.await();\n\n        first.close();\n\n        Assert.assertTrue(result.get());\n    }", "signature": "void testPositiveTimeout()", "full_signature": "@Test public void testPositiveTimeout()", "class_method_signature": "LearnerSnapshotThrottlerTest.testPositiveTimeout()", "testcase": true, "constructor": false, "invocations": ["newFixedThreadPool", "beginSnapshot", "submit", "countDown", "beginSnapshot", "close", "await", "close", "assertTrue", "get"]}, "focal_class": {"identifier": "LearnerSnapshotThrottler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n            LoggerFactory.getLogger(LearnerSnapshotThrottler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n            LoggerFactory.getLogger(LearnerSnapshotThrottler.class)", "var_name": "LOG"}, {"original_string": "private final Object snapCountSyncObject = new Object();", "modifier": "private final", "type": "Object", "declarator": "snapCountSyncObject = new Object()", "var_name": "snapCountSyncObject"}, {"original_string": "private int snapsInProgress;", "modifier": "private", "type": "int", "declarator": "snapsInProgress", "var_name": "snapsInProgress"}, {"original_string": "private final int maxConcurrentSnapshots;", "modifier": "private final", "type": "int", "declarator": "maxConcurrentSnapshots", "var_name": "maxConcurrentSnapshots"}, {"original_string": "private final long timeoutMillis;", "modifier": "private final", "type": "long", "declarator": "timeoutMillis", "var_name": "timeoutMillis"}], "methods": [{"identifier": "LearnerSnapshotThrottler", "parameters": "(int maxConcurrentSnapshots,\n                                    long timeoutMillis)", "modifiers": "public", "return": "", "signature": " LearnerSnapshotThrottler(int maxConcurrentSnapshots,\n                                    long timeoutMillis)", "full_signature": "public  LearnerSnapshotThrottler(int maxConcurrentSnapshots,\n                                    long timeoutMillis)", "class_method_signature": "LearnerSnapshotThrottler.LearnerSnapshotThrottler(int maxConcurrentSnapshots,\n                                    long timeoutMillis)", "testcase": false, "constructor": true}, {"identifier": "LearnerSnapshotThrottler", "parameters": "(int maxConcurrentSnapshots)", "modifiers": "public", "return": "", "signature": " LearnerSnapshotThrottler(int maxConcurrentSnapshots)", "full_signature": "public  LearnerSnapshotThrottler(int maxConcurrentSnapshots)", "class_method_signature": "LearnerSnapshotThrottler.LearnerSnapshotThrottler(int maxConcurrentSnapshots)", "testcase": false, "constructor": true}, {"identifier": "beginSnapshot", "parameters": "(boolean essential)", "modifiers": "public", "return": "LearnerSnapshot", "signature": "LearnerSnapshot beginSnapshot(boolean essential)", "full_signature": "public LearnerSnapshot beginSnapshot(boolean essential)", "class_method_signature": "LearnerSnapshotThrottler.beginSnapshot(boolean essential)", "testcase": false, "constructor": false}, {"identifier": "endSnapshot", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endSnapshot()", "full_signature": "public void endSnapshot()", "class_method_signature": "LearnerSnapshotThrottler.endSnapshot()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSnapshotThrottler.java"}, "focal_method": {"identifier": "beginSnapshot", "parameters": "(boolean essential)", "modifiers": "public", "return": "LearnerSnapshot", "body": "public LearnerSnapshot beginSnapshot(boolean essential)\n            throws SnapshotThrottleException, InterruptedException {\n        int snapshotNumber;\n\n        synchronized (snapCountSyncObject) {\n            if (!essential\n                && timeoutMillis > 0\n                && snapsInProgress >= maxConcurrentSnapshots) {\n                long timestamp = Time.currentElapsedTime();\n                do {\n                    snapCountSyncObject.wait(timeoutMillis);\n                } while (snapsInProgress >= maxConcurrentSnapshots\n                         && timestamp + timeoutMillis < Time.currentElapsedTime());\n            }\n\n            if (essential || snapsInProgress < maxConcurrentSnapshots) {\n                snapsInProgress++;\n                snapshotNumber = snapsInProgress;\n            } else {\n                throw new SnapshotThrottleException(snapsInProgress + 1,\n                                                    maxConcurrentSnapshots);\n            }\n        }\n\n        return new LearnerSnapshot(this, snapshotNumber, essential);\n    }", "signature": "LearnerSnapshot beginSnapshot(boolean essential)", "full_signature": "public LearnerSnapshot beginSnapshot(boolean essential)", "class_method_signature": "LearnerSnapshotThrottler.beginSnapshot(boolean essential)", "testcase": false, "constructor": false, "invocations": ["currentElapsedTime", "wait", "currentElapsedTime"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}