{"test_class": {"identifier": "KwpTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/KwpTest.java"}, "test_case": {"identifier": "testInvalidWrappingSizes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInvalidWrappingSizes() throws Exception {\n    byte[] wrapKey = Random.randBytes(16);\n    KeyWrap wrapper = new Kwp(wrapKey);\n    for (int wrappedSize = 0; wrappedSize < 16; wrappedSize++) {\n      try {\n        wrapper.wrap(new byte[wrappedSize]);\n        fail(\"Should not wrap short keys\");\n      } catch (GeneralSecurityException ex) {\n        // expected\n      }\n    }\n  }", "signature": "void testInvalidWrappingSizes()", "full_signature": "@Test public void testInvalidWrappingSizes()", "class_method_signature": "KwpTest.testInvalidWrappingSizes()", "testcase": true, "constructor": false, "invocations": ["randBytes", "wrap", "fail"]}, "focal_class": {"identifier": "Kwp", "superclass": "", "interfaces": "implements KeyWrap", "fields": [{"original_string": "private final SecretKey aesKey;", "modifier": "private final", "type": "SecretKey", "declarator": "aesKey", "var_name": "aesKey"}, {"original_string": "static final int MIN_WRAP_KEY_SIZE = 16;", "modifier": "static final", "type": "int", "declarator": "MIN_WRAP_KEY_SIZE = 16", "var_name": "MIN_WRAP_KEY_SIZE"}, {"original_string": "static final int MAX_WRAP_KEY_SIZE = 4096;", "modifier": "static final", "type": "int", "declarator": "MAX_WRAP_KEY_SIZE = 4096", "var_name": "MAX_WRAP_KEY_SIZE"}, {"original_string": "static final int ROUNDS = 6;", "modifier": "static final", "type": "int", "declarator": "ROUNDS = 6", "var_name": "ROUNDS"}, {"original_string": "static final byte[] PREFIX = new byte[]{(byte) 0xa6, (byte) 0x59, (byte) 0x59, (byte) 0xa6};", "modifier": "static final", "type": "byte[]", "declarator": "PREFIX = new byte[]{(byte) 0xa6, (byte) 0x59, (byte) 0x59, (byte) 0xa6}", "var_name": "PREFIX"}], "methods": [{"identifier": "Kwp", "parameters": "(final byte[] key)", "modifiers": "public", "return": "", "signature": " Kwp(final byte[] key)", "full_signature": "public  Kwp(final byte[] key)", "class_method_signature": "Kwp.Kwp(final byte[] key)", "testcase": false, "constructor": true}, {"identifier": "wrappingSize", "parameters": "(int inputSize)", "modifiers": "private", "return": "int", "signature": "int wrappingSize(int inputSize)", "full_signature": "private int wrappingSize(int inputSize)", "class_method_signature": "Kwp.wrappingSize(int inputSize)", "testcase": false, "constructor": false}, {"identifier": "computeW", "parameters": "(final byte[] iv, final byte[] key)", "modifiers": "private", "return": "byte[]", "signature": "byte[] computeW(final byte[] iv, final byte[] key)", "full_signature": "private byte[] computeW(final byte[] iv, final byte[] key)", "class_method_signature": "Kwp.computeW(final byte[] iv, final byte[] key)", "testcase": false, "constructor": false}, {"identifier": "invertW", "parameters": "(final byte[] wrapped)", "modifiers": "private", "return": "byte[]", "signature": "byte[] invertW(final byte[] wrapped)", "full_signature": "private byte[] invertW(final byte[] wrapped)", "class_method_signature": "Kwp.invertW(final byte[] wrapped)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] wrap(final byte[] data)", "full_signature": "@Override public byte[] wrap(final byte[] data)", "class_method_signature": "Kwp.wrap(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] unwrap(final byte[] data)", "full_signature": "@Override public byte[] unwrap(final byte[] data)", "class_method_signature": "Kwp.unwrap(final byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Kwp.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] wrap(final byte[] data) throws GeneralSecurityException {\n    if (data.length < MIN_WRAP_KEY_SIZE) {\n      throw new GeneralSecurityException(\"Key size of key to wrap too small\");\n    }\n    if (data.length > MAX_WRAP_KEY_SIZE) {\n      throw new GeneralSecurityException(\"Key size of key to wrap too large\");\n    }\n    byte[] iv = new byte[8];\n    System.arraycopy(PREFIX, 0, iv, 0, PREFIX.length);\n    for (int i = 0; i < 4; i++) {\n      iv[4 + i] = (byte) ((data.length >> (8 * (3 - i))) & 0xff);\n    }\n    return computeW(iv, data);\n  }", "signature": "byte[] wrap(final byte[] data)", "full_signature": "@Override public byte[] wrap(final byte[] data)", "class_method_signature": "Kwp.wrap(final byte[] data)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "computeW"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}