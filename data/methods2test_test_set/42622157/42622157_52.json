{"test_class": {"identifier": "IpSecAlgorithmTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.model.adaptation/src/test/java/org/eclipse/winery/model/adaptation/problemsolving/algorithms/IpSecAlgorithmTest.java"}, "test_case": {"identifier": "applySolutionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void applySolutionTest() throws Exception {\n        this.setRevisionTo(\"a23f1c89c77fcde4de9fe7822532dc04e31731a0\");\n        IpSecAlgorithm ipSecAlgorithm = new IpSecAlgorithm();\n\n        TTopologyTemplate topologyTemplate = RepositoryFactory.getRepository().getElement(\n            new ServiceTemplateId(QName.valueOf(\"{http://plain.winery.opentosca.org/servicetemplates}ServiceTemplateWithIpSecProblem_w1-wip1\"))\n        ).getTopologyTemplate();\n\n        ArrayList<ComponentFinding> componentFindings = new ArrayList<>();\n        componentFindings.add(new ComponentFinding(null, \"NodeTypeWithImplementation_1.0-w1-wip1\"));\n        componentFindings.add(new ComponentFinding(null, \"NodeTypeWithXmlElementProperty\"));\n        SolutionInputData inputData = new SolutionInputData();\n        inputData.setFindings(componentFindings);\n\n        ipSecAlgorithm.applySolution(topologyTemplate, inputData);\n\n        assertEquals(4, topologyTemplate.getNodeTemplates().size());\n        assertEquals(QName.valueOf(\"{http://plain.winery.opentosca.org/secure/nodetypes}ubuntu_18-secure-w1-wip1\"), topologyTemplate.getNodeTemplate(\"replaceableNode_1\").getType());\n        assertEquals(QName.valueOf(\"{http://plain.winery.opentosca.org/secure/nodetypes}ubuntu_18-secure-w1-wip1\"), topologyTemplate.getNodeTemplate(\"replaceableNode_2\").getType());\n        assertEquals(5, topologyTemplate.getRelationshipTemplates().size());\n        TRelationshipTemplate forward = topologyTemplate.getRelationshipTemplate(\"replaceableNode_2-securely_connectsTo-replaceableNode_1\");\n        assertNotNull(forward);\n        assertEquals(\"replaceableNode_2\", forward.getSourceElement().getRef().getId());\n        assertEquals(\"replaceableNode_1\", forward.getTargetElement().getRef().getId());\n        TRelationshipTemplate backward = topologyTemplate.getRelationshipTemplate(\"replaceableNode_1-securely_connectsTo-replaceableNode_2\");\n        assertNotNull(backward);\n        assertEquals(\"replaceableNode_1\", backward.getSourceElement().getRef().getId());\n        assertEquals(\"replaceableNode_2\", backward.getTargetElement().getRef().getId());\n    }", "signature": "void applySolutionTest()", "full_signature": "@Test public void applySolutionTest()", "class_method_signature": "IpSecAlgorithmTest.applySolutionTest()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "getRepository", "valueOf", "add", "add", "setFindings", "applySolution", "assertEquals", "size", "getNodeTemplates", "assertEquals", "valueOf", "getType", "getNodeTemplate", "assertEquals", "valueOf", "getType", "getNodeTemplate", "assertEquals", "size", "getRelationshipTemplates", "getRelationshipTemplate", "assertNotNull", "assertEquals", "getId", "getRef", "getSourceElement", "assertEquals", "getId", "getRef", "getTargetElement", "getRelationshipTemplate", "assertNotNull", "assertEquals", "getId", "getRef", "getSourceElement", "assertEquals", "getId", "getRef", "getTargetElement"]}, "focal_class": {"identifier": "IpSecAlgorithm", "superclass": "", "interfaces": "implements SolutionStrategy", "fields": [], "methods": [{"identifier": "applySolution", "parameters": "(TTopologyTemplate topology, SolutionInputData inputData)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "full_signature": "@Override public boolean applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "class_method_signature": "IpSecAlgorithm.applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "testcase": false, "constructor": false}, {"identifier": "getVmHost", "parameters": "(TTopologyTemplate topology, String nodeTemplateId)", "modifiers": "private", "return": "TNodeTemplate", "signature": "TNodeTemplate getVmHost(TTopologyTemplate topology, String nodeTemplateId)", "full_signature": "private TNodeTemplate getVmHost(TTopologyTemplate topology, String nodeTemplateId)", "class_method_signature": "IpSecAlgorithm.getVmHost(TTopologyTemplate topology, String nodeTemplateId)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.model.adaptation/src/main/java/org/eclipse/winery/model/adaptation/problemsolving/algorithms/IpSecAlgorithm.java"}, "focal_method": {"identifier": "applySolution", "parameters": "(TTopologyTemplate topology, SolutionInputData inputData)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean applySolution(TTopologyTemplate topology, SolutionInputData inputData) {\n        IRepository repository = RepositoryFactory.getRepository();\n        NamespaceManager namespaceManager = repository.getNamespaceManager();\n\n        Map<QName, TNodeType> nodeTypes = repository.getQNameToElementMapping(NodeTypeId.class);\n\n        TNodeTemplate[] elements = new TNodeTemplate[2];\n\n        for (int index = 0; index < 2; index++) {\n            ComponentFinding componentFinding = inputData.getFindings().get(index);\n            elements[index] = getVmHost(topology, componentFinding.getComponentId());\n\n            if (Objects.isNull(elements[index])) {\n                elements[index] = topology.getNodeTemplate(componentFinding.getComponentId());\n            }\n\n            Map<QName, TNodeType> children = ModelUtilities.getChildrenOf(elements[index].getType(), nodeTypes);\n\n            // simply use the first element\n            Optional<Map.Entry<QName, TNodeType>> firstSecure = children.entrySet()\n                .stream()\n                .filter(\n                    entry -> namespaceManager.isSecureCollection(entry.getKey().getNamespaceURI())\n                ).findFirst();\n\n            if (firstSecure.isPresent()) {\n                ModelUtilities.updateNodeTemplate(\n                    topology,\n                    elements[index].getId(),\n                    firstSecure.get().getKey(),\n                    firstSecure.get().getValue()\n                );\n            } else {\n                return false;\n            }\n        }\n\n        // forward connection\n        ModelUtilities.createRelationshipTemplateAndAddToTopology(elements[1], elements[0],\n            ToscaBaseTypes.connectsToRelationshipType, \"securely_connectsTo\", topology);\n        // backward connection\n        ModelUtilities.createRelationshipTemplateAndAddToTopology(elements[0], elements[1],\n            ToscaBaseTypes.connectsToRelationshipType, \"securely_connectsTo\", topology);\n\n        return true;\n    }", "signature": "boolean applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "full_signature": "@Override public boolean applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "class_method_signature": "IpSecAlgorithm.applySolution(TTopologyTemplate topology, SolutionInputData inputData)", "testcase": false, "constructor": false, "invocations": ["getRepository", "getNamespaceManager", "getQNameToElementMapping", "get", "getFindings", "getVmHost", "getComponentId", "isNull", "getNodeTemplate", "getComponentId", "getChildrenOf", "getType", "findFirst", "filter", "stream", "entrySet", "isSecureCollection", "getNamespaceURI", "getKey", "isPresent", "updateNodeTemplate", "getId", "getKey", "get", "getValue", "get", "createRelationshipTemplateAndAddToTopology", "createRelationshipTemplateAndAddToTopology"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}