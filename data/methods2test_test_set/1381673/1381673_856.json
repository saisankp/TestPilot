{"test_class": {"identifier": "BayesProjectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-beliefs/src/test/java/org/drools/beliefs/bayes/BayesProjectionTest.java"}, "test_case": {"identifier": "testProjection2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProjection2() {\n        // Projects from node1 into sep. A, B and C are in node1. A and B are in the sep.\n        // this tests a non separator var, after the vars\n        BayesVariable a = new BayesVariable<String>( \"A\", 0, new String[] {\"A1\", \"A2\"},  new double[][] {{0.1, 0.2}});\n        BayesVariable b = new BayesVariable<String>( \"B\", 1, new String[] {\"B1\", \"B2\"},  new double[][] {{0.1, 0.2}});\n        BayesVariable c = new BayesVariable<String>( \"C\", 2, new String[] {\"C1\", \"C2\"},  new double[][] {{0.1, 0.2}});\n\n\n        Graph<BayesVariable> graph = new BayesNetwork();\n        GraphNode x0 = addNode(graph);\n        GraphNode x1 = addNode(graph);\n        GraphNode x2 = addNode(graph);\n\n        x0.setContent( a );\n        x1.setContent( b );\n        x2.setContent( c );\n\n        JunctionTreeClique node1 = new JunctionTreeClique(0, graph, bitSet(\"0111\") );\n        JunctionTreeClique node2 = new JunctionTreeClique(1, graph, bitSet(\"0011\")  );\n        SeparatorState sep = new JunctionTreeSeparator(0, node1, node2, bitSet(\"0011\"), graph).createState();\n\n        double v = 0.1;\n        for ( int i = 0; i < node1.getPotentials().length; i++ ) {\n            node1.getPotentials()[i] = v;\n            v = scaleDouble(3, v + 0.1 );\n        }\n\n        BayesVariable[] vars = new BayesVariable[] {a, b, c};\n\n        BayesVariable[] sepVars = new BayesVariable[] { a, b };\n        int[] sepVarPos = PotentialMultiplier.createSubsetVarPos(vars, sepVars);\n\n        int sepVarNumberOfStates = PotentialMultiplier.createNumberOfStates(sepVars);\n        int[] sepVarMultipliers = PotentialMultiplier.createIndexMultipliers(sepVars, sepVarNumberOfStates);\n\n        double[] projectedSepPotentials = new double[ sep.getPotentials().length];\n        BayesProjection p = new BayesProjection(vars, node1.getPotentials(), sepVarPos, sepVarMultipliers, projectedSepPotentials);\n        p.project();\n\n        // remember it's been normalized, from 0.3, 0.7, 1.1, 1.5\n        assertArray(new double[]{0.083, 0.194, 0.306, 0.417}, scaleDouble(3, projectedSepPotentials));\n    }", "signature": "void testProjection2()", "full_signature": "@Test public void testProjection2()", "class_method_signature": "BayesProjectionTest.testProjection2()", "testcase": true, "constructor": false, "invocations": ["addNode", "addNode", "addNode", "setContent", "setContent", "setContent", "bitSet", "bitSet", "createState", "bitSet", "getPotentials", "getPotentials", "scaleDouble", "createSubsetVarPos", "createNumberOfStates", "createIndexMultipliers", "getPotentials", "getPotentials", "project", "assertArray", "scaleDouble"]}, "focal_class": {"identifier": "BayesProjection", "superclass": "", "interfaces": "", "fields": [{"original_string": "int[]    trgVarPos;", "modifier": "", "type": "int[]", "declarator": "trgVarPos", "var_name": "trgVarPos"}, {"original_string": "int[]    trgVarPosMultipliers;", "modifier": "", "type": "int[]", "declarator": "trgVarPosMultipliers", "var_name": "trgVarPosMultipliers"}, {"original_string": "double[] trgPotentials;", "modifier": "", "type": "double[]", "declarator": "trgPotentials", "var_name": "trgPotentials"}, {"original_string": "int      trgPotentialIndex;", "modifier": "", "type": "int", "declarator": "trgPotentialIndex", "var_name": "trgPotentialIndex"}, {"original_string": "BayesVariable[] srcVars;", "modifier": "", "type": "BayesVariable[]", "declarator": "srcVars", "var_name": "srcVars"}, {"original_string": "double[]        srcPotentials;", "modifier": "", "type": "double[]", "declarator": "srcPotentials", "var_name": "srcPotentials"}, {"original_string": "int             srcPotentialIndex;", "modifier": "", "type": "int", "declarator": "srcPotentialIndex", "var_name": "srcPotentialIndex"}, {"original_string": "int[]           path;", "modifier": "", "type": "int[]", "declarator": "path", "var_name": "path"}], "methods": [{"identifier": "BayesProjection", "parameters": "(BayesVariable[] srcVars, double[] srcPotentials, int[] trgVarPos, int[] trgVarPosMultipliers, double[] trgPotentials)", "modifiers": "public", "return": "", "signature": " BayesProjection(BayesVariable[] srcVars, double[] srcPotentials, int[] trgVarPos, int[] trgVarPosMultipliers, double[] trgPotentials)", "full_signature": "public  BayesProjection(BayesVariable[] srcVars, double[] srcPotentials, int[] trgVarPos, int[] trgVarPosMultipliers, double[] trgPotentials)", "class_method_signature": "BayesProjection.BayesProjection(BayesVariable[] srcVars, double[] srcPotentials, int[] trgVarPos, int[] trgVarPosMultipliers, double[] trgPotentials)", "testcase": false, "constructor": true}, {"identifier": "project", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void project()", "full_signature": "public void project()", "class_method_signature": "BayesProjection.project()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(double[] darray, double sum)", "modifiers": "public static", "return": "void", "signature": "void normalize(double[] darray, double sum)", "full_signature": "public static void normalize(double[] darray, double sum)", "class_method_signature": "BayesProjection.normalize(double[] darray, double sum)", "testcase": false, "constructor": false}, {"identifier": "recurse", "parameters": "(int currentVar, int targetVarPos)", "modifiers": "public", "return": "void", "signature": "void recurse(int currentVar, int targetVarPos)", "full_signature": "public void recurse(int currentVar, int targetVarPos)", "class_method_signature": "BayesProjection.recurse(int currentVar, int targetVarPos)", "testcase": false, "constructor": false}], "file": "drools-beliefs/src/main/java/org/drools/beliefs/bayes/BayesProjection.java"}, "focal_method": {"identifier": "project", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void project() {\n        srcPotentialIndex = 0;\n        trgPotentialIndex = 0;\n        recurse(0, 0);\n        BayesAbsorption.normalize(trgPotentials);\n\n    }", "signature": "void project()", "full_signature": "public void project()", "class_method_signature": "BayesProjection.project()", "testcase": false, "constructor": false, "invocations": ["recurse", "normalize"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}