{"test_class": {"identifier": "AnalyticsResourceTest", "superclass": "extends FoxtrotResourceTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ResourceTestRule resources;", "modifier": "@Rule\n    public", "type": "ResourceTestRule", "declarator": "resources", "var_name": "resources"}], "file": "foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/AnalyticsResourceTest.java"}, "test_case": {"identifier": "testRunSyncAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunSyncAsync() throws Exception {\n        GroupRequest groupRequest = new GroupRequest();\n        groupRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        groupRequest.setNesting(Arrays.asList(\"os\", \"device\", \"version\"));\n\n        Map<String, Object> expectedResponse = new LinkedHashMap<String, Object>();\n\n        final Map<String, Object> nexusResponse = new LinkedHashMap<String, Object>() {{\n            put(\"1\", 2);\n            put(\"2\", 2);\n            put(\"3\", 1);\n        }};\n        final Map<String, Object> galaxyResponse = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 1);\n            put(\"3\", 1);\n        }};\n        expectedResponse.put(\"android\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse);\n            put(\"galaxy\", galaxyResponse);\n        }});\n\n        final Map<String, Object> nexusResponse2 = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 1);\n        }};\n        final Map<String, Object> iPadResponse = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 2);\n        }};\n        final Map<String, Object> iPhoneResponse = new LinkedHashMap<String, Object>() {{\n            put(\"1\", 1);\n        }};\n        expectedResponse.put(\"ios\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse2);\n            put(\"ipad\", iPadResponse);\n            put(\"iphone\", iPhoneResponse);\n        }});\n        Entity<GroupRequest> serviceUserEntity = Entity.json(groupRequest);\n        AsyncDataToken response = resources.client()\n                .target(\"/v1/analytics/async\")\n                .request()\n                .post(serviceUserEntity, AsyncDataToken.class);\n        await().pollDelay(2000, TimeUnit.MILLISECONDS).until(() -> true);\n        GroupResponse actualResponse = GroupResponse.class.cast(getCacheManager().getCacheFor(response.getAction())\n                                                                        .get(response.getKey()));\n        assertEquals(expectedResponse, actualResponse.getResult());\n    }", "signature": "void testRunSyncAsync()", "full_signature": "@Test public void testRunSyncAsync()", "class_method_signature": "AnalyticsResourceTest.testRunSyncAsync()", "testcase": true, "constructor": false, "invocations": ["setTable", "setNesting", "asList", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "json", "post", "request", "target", "client", "until", "pollDelay", "await", "cast", "get", "getCacheFor", "getCacheManager", "getAction", "getKey", "assertEquals", "getResult"]}, "focal_class": {"identifier": "AnalyticsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final QueryExecutor queryExecutor;", "modifier": "private final", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "AnalyticsResource", "parameters": "(final QueryExecutor queryExecutor, final ObjectMapper objectMapper)", "modifiers": "@Inject public", "return": "", "signature": " AnalyticsResource(final QueryExecutor queryExecutor, final ObjectMapper objectMapper)", "full_signature": "@Inject public  AnalyticsResource(final QueryExecutor queryExecutor, final ObjectMapper objectMapper)", "class_method_signature": "AnalyticsResource.AnalyticsResource(final QueryExecutor queryExecutor, final ObjectMapper objectMapper)", "testcase": false, "constructor": true}, {"identifier": "runSync", "parameters": "(@Valid final ActionRequest request)", "modifiers": "@POST @Timed @ApiOperation(\"runSync\") public", "return": "ActionResponse", "signature": "ActionResponse runSync(@Valid final ActionRequest request)", "full_signature": "@POST @Timed @ApiOperation(\"runSync\") public ActionResponse runSync(@Valid final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSync(@Valid final ActionRequest request)", "testcase": false, "constructor": false}, {"identifier": "runSyncAsync", "parameters": "(@Valid final ActionRequest request)", "modifiers": "@POST @Path(\"/async\") @Timed @ApiOperation(\"runSyncAsync\") public", "return": "AsyncDataToken", "signature": "AsyncDataToken runSyncAsync(@Valid final ActionRequest request)", "full_signature": "@POST @Path(\"/async\") @Timed @ApiOperation(\"runSyncAsync\") public AsyncDataToken runSyncAsync(@Valid final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSyncAsync(@Valid final ActionRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateQuery", "parameters": "(@Valid final ActionRequest request)", "modifiers": "@POST @Path(\"/validate\") @Timed @ApiOperation(\"validateQuery\") public", "return": "ActionValidationResponse", "signature": "ActionValidationResponse validateQuery(@Valid final ActionRequest request)", "full_signature": "@POST @Path(\"/validate\") @Timed @ApiOperation(\"validateQuery\") public ActionValidationResponse validateQuery(@Valid final ActionRequest request)", "class_method_signature": "AnalyticsResource.validateQuery(@Valid final ActionRequest request)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(@Valid final ActionRequest actionRequest)", "modifiers": "@POST @Produces(FoxtrotExtraMediaType.TEXT_CSV) @Path(\"/download\") @Timed @ApiOperation(\"downloadAnalytics\") public", "return": "StreamingOutput", "signature": "StreamingOutput download(@Valid final ActionRequest actionRequest)", "full_signature": "@POST @Produces(FoxtrotExtraMediaType.TEXT_CSV) @Path(\"/download\") @Timed @ApiOperation(\"downloadAnalytics\") public StreamingOutput download(@Valid final ActionRequest actionRequest)", "class_method_signature": "AnalyticsResource.download(@Valid final ActionRequest actionRequest)", "testcase": false, "constructor": false}], "file": "foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/AnalyticsResource.java"}, "focal_method": {"identifier": "runSyncAsync", "parameters": "(@Valid final ActionRequest request)", "modifiers": "@POST @Path(\"/async\") @Timed @ApiOperation(\"runSyncAsync\") public", "return": "AsyncDataToken", "body": "@POST\n    @Path(\"/async\")\n    @Timed\n    @ApiOperation(\"runSyncAsync\")\n    public AsyncDataToken runSyncAsync(@Valid final ActionRequest request) {\n        return queryExecutor.executeAsync(request);\n    }", "signature": "AsyncDataToken runSyncAsync(@Valid final ActionRequest request)", "full_signature": "@POST @Path(\"/async\") @Timed @ApiOperation(\"runSyncAsync\") public AsyncDataToken runSyncAsync(@Valid final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSyncAsync(@Valid final ActionRequest request)", "testcase": false, "constructor": false, "invocations": ["executeAsync"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}