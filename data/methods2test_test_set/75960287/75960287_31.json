{"test_class": {"identifier": "ConfigWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path tempFolder;", "modifier": "private", "type": "Path", "declarator": "tempFolder", "var_name": "tempFolder"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/settings/config/ConfigWriterTest.java"}, "test_case": {"identifier": "listIndentSecondLevel", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void listIndentSecondLevel() throws IOException {\n        ConfigNode root = new ConfigNode(null, null, null);\n        root.addNode(\"Test\").addNode(\"List\").set(Arrays.asList(\"First\", \"Second\", \"Third\"));\n\n        Path out = tempFolder.resolve(\"listIndent.yml\");\n        new ConfigWriter(out).write(root);\n\n        List<String> writtenLines = FileResource.lines(out.toFile());\n        List<String> expected = Arrays.asList(\n                \"Test:\",\n                \"    List:\",\n                \"      - First\",\n                \"      - Second\",\n                \"      - Third\"\n        );\n        assertEquals(expected, writtenLines);\n    }", "signature": "void listIndentSecondLevel()", "full_signature": "@Test void listIndentSecondLevel()", "class_method_signature": "ConfigWriterTest.listIndentSecondLevel()", "testcase": true, "constructor": false, "invocations": ["set", "addNode", "addNode", "asList", "resolve", "write", "lines", "toFile", "asList", "assertEquals"]}, "focal_class": {"identifier": "ConfigWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path outputPath;", "modifier": "private", "type": "Path", "declarator": "outputPath", "var_name": "outputPath"}, {"original_string": "private int indent;", "modifier": "private", "type": "int", "declarator": "indent", "var_name": "indent"}], "methods": [{"identifier": "ConfigWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConfigWriter()", "full_signature": "public  ConfigWriter()", "class_method_signature": "ConfigWriter.ConfigWriter()", "testcase": false, "constructor": true}, {"identifier": "ConfigWriter", "parameters": "(Path outputPath)", "modifiers": "public", "return": "", "signature": " ConfigWriter(Path outputPath)", "full_signature": "public  ConfigWriter(Path outputPath)", "class_method_signature": "ConfigWriter.ConfigWriter(Path outputPath)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(ConfigNode writing)", "modifiers": "public", "return": "void", "signature": "void write(ConfigNode writing)", "full_signature": "public void write(ConfigNode writing)", "class_method_signature": "ConfigWriter.write(ConfigNode writing)", "testcase": false, "constructor": false}, {"identifier": "createLines", "parameters": "(ConfigNode writing)", "modifiers": "public", "return": "List<String>", "signature": "List<String> createLines(ConfigNode writing)", "full_signature": "public List<String> createLines(ConfigNode writing)", "class_method_signature": "ConfigWriter.createLines(ConfigNode writing)", "testcase": false, "constructor": false}, {"identifier": "dfsTreeTraverseLineResolve", "parameters": "(ConfigNode writing, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void dfsTreeTraverseLineResolve(ConfigNode writing, Collection<String> lines)", "full_signature": "private void dfsTreeTraverseLineResolve(ConfigNode writing, Collection<String> lines)", "class_method_signature": "ConfigWriter.dfsTreeTraverseLineResolve(ConfigNode writing, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addValue", "parameters": "(ConfigNode node, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addValue(ConfigNode node, Collection<String> lines)", "full_signature": "private void addValue(ConfigNode node, Collection<String> lines)", "class_method_signature": "ConfigWriter.addValue(ConfigNode node, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addKey", "parameters": "(String key, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addKey(String key, Collection<String> lines)", "full_signature": "private void addKey(String key, Collection<String> lines)", "class_method_signature": "ConfigWriter.addKey(String key, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addNormalValue", "parameters": "(String key, String value, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addNormalValue(String key, String value, Collection<String> lines)", "full_signature": "private void addNormalValue(String key, String value, Collection<String> lines)", "class_method_signature": "ConfigWriter.addNormalValue(String key, String value, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addListValue", "parameters": "(String key, String[] listItems, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addListValue(String key, String[] listItems, Collection<String> lines)", "full_signature": "private void addListValue(String key, String[] listItems, Collection<String> lines)", "class_method_signature": "ConfigWriter.addListValue(String key, String[] listItems, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addListItem", "parameters": "(String listItem, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addListItem(String listItem, Collection<String> lines)", "full_signature": "private void addListItem(String listItem, Collection<String> lines)", "class_method_signature": "ConfigWriter.addListItem(String listItem, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "addComment", "parameters": "(Iterable<String> comments, Collection<String> lines)", "modifiers": "private", "return": "void", "signature": "void addComment(Iterable<String> comments, Collection<String> lines)", "full_signature": "private void addComment(Iterable<String> comments, Collection<String> lines)", "class_method_signature": "ConfigWriter.addComment(Iterable<String> comments, Collection<String> lines)", "testcase": false, "constructor": false}, {"identifier": "indentedBuilder", "parameters": "()", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder indentedBuilder()", "full_signature": "private StringBuilder indentedBuilder()", "class_method_signature": "ConfigWriter.indentedBuilder()", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(int indent, StringBuilder lineBuilder)", "modifiers": "private", "return": "void", "signature": "void indent(int indent, StringBuilder lineBuilder)", "full_signature": "private void indent(int indent, StringBuilder lineBuilder)", "class_method_signature": "ConfigWriter.indent(int indent, StringBuilder lineBuilder)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/settings/config/ConfigWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(ConfigNode writing)", "modifiers": "public", "return": "void", "body": "public void write(ConfigNode writing) throws IOException {\n        Verify.nullCheck(outputPath, () -> new IllegalStateException(\"Output path was null.\"));\n\n        ConfigNode storedParent = writing.parent;\n        writing.updateParent(null);\n\n        Path directory = outputPath.getParent();\n        if (!directory.toRealPath().toFile().isDirectory()) {\n            Files.createDirectories(directory);\n        }\n        Files.write(outputPath, createLines(writing), StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);\n\n        writing.updateParent(storedParent);\n    }", "signature": "void write(ConfigNode writing)", "full_signature": "public void write(ConfigNode writing)", "class_method_signature": "ConfigWriter.write(ConfigNode writing)", "testcase": false, "constructor": false, "invocations": ["nullCheck", "updateParent", "getParent", "isDirectory", "toFile", "toRealPath", "createDirectories", "write", "createLines", "updateParent"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}