{"test_class": {"identifier": "SlotValueArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SlotValueArgumentResolver resolver = new SlotValueArgumentResolver();", "modifier": "private", "type": "SlotValueArgumentResolver", "declarator": "resolver = new SlotValueArgumentResolver()", "var_name": "resolver"}, {"original_string": "@Mock\n    SkillContext mockSkillContext;", "modifier": "@Mock", "type": "SkillContext", "declarator": "mockSkillContext", "var_name": "mockSkillContext"}], "file": "ask-sdk-mvc/src/test/java/com/amazon/ask/mvc/argument/SlotValueArgumentResolverTest.java"}, "test_case": {"identifier": "testSupportAndResolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupportAndResolve() throws NoSuchMethodException {\n        Method method = MappingsController.class.getMethod(\"handleSlotValue\", new Class[]{String.class});\n        MethodParameter methodParameter = new MethodParameter(\n                method,\n                0,\n                String.class,\n                method.getParameterAnnotations()[0]\n        );\n\n        RequestEnvelope envelope = Utils.buildSimpleEnvelope(\"intent\");\n        ArgumentResolverContext input = new ArgumentResolverContext(mockSkillContext, methodParameter, HandlerInput.builder().withRequestEnvelope(envelope).build());\n\n        assertEquals(\"hola\", resolver.resolve(input).get());\n    }", "signature": "void testSupportAndResolve()", "full_signature": "@Test public void testSupportAndResolve()", "class_method_signature": "SlotValueArgumentResolverTest.testSupportAndResolve()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getParameterAnnotations", "buildSimpleEnvelope", "build", "withRequestEnvelope", "builder", "assertEquals", "get", "resolve"]}, "focal_class": {"identifier": "SlotValueArgumentResolver", "superclass": "", "interfaces": "implements ArgumentResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotValueArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false}], "file": "ask-sdk-mvc/src/main/java/com/amazon/ask/mvc/argument/SlotValueArgumentResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> resolve(ArgumentResolverContext input) {\n        if (input.requestTypeEquals(IntentRequest.class)\n            && input.parameterTypeEquals(String.class)\n            && input.getMethodParameter().findAnnotation(Slot.class).isPresent()) {\n\n            String slotName = input.getMethodParameter().findAnnotation(Slot.class).get().value();\n            IntentRequest request = (IntentRequest) input.unwrapRequest();\n            return Optional.of(request.getIntent().getSlots().get(slotName).getValue());\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotValueArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false, "invocations": ["requestTypeEquals", "parameterTypeEquals", "isPresent", "findAnnotation", "getMethodParameter", "value", "get", "findAnnotation", "getMethodParameter", "unwrapRequest", "of", "getValue", "get", "getSlots", "getIntent", "empty"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}