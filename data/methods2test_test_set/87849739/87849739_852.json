{"test_class": {"identifier": "ImmutablePipelineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> STAGES = Arrays.asList(\n            \"thing:name\",\n            \"fn:substring-before(':')\",\n            \"fn:default(thing:id)\"\n    );", "modifier": "private static final", "type": "List<String>", "declarator": "STAGES = Arrays.asList(\n            \"thing:name\",\n            \"fn:substring-before(':')\",\n            \"fn:default(thing:id)\"\n    )", "var_name": "STAGES"}, {"original_string": "private static final List<String> INVALID_STAGES = Arrays.asList(\n            \"thing:name\",\n            \"fn:substring-before(':')\",\n            \"fn:unknown('foo')\"\n    );", "modifier": "private static final", "type": "List<String>", "declarator": "INVALID_STAGES = Arrays.asList(\n            \"thing:name\",\n            \"fn:substring-before(':')\",\n            \"fn:unknown('foo')\"\n    )", "var_name": "INVALID_STAGES"}, {"original_string": "private static final PipelineElement PIPELINE_INPUT = PipelineElement.resolved(\"my-gateway:my-thing\");", "modifier": "private static final", "type": "PipelineElement", "declarator": "PIPELINE_INPUT = PipelineElement.resolved(\"my-gateway:my-thing\")", "var_name": "PIPELINE_INPUT"}, {"original_string": "private static final List<PipelineElement> RESPONSES = Arrays.asList(\n            PipelineElement.resolved(\"my-gateway\"),\n            PipelineElement.resolved(\"my-gateway\")\n    );", "modifier": "private static final", "type": "List<PipelineElement>", "declarator": "RESPONSES = Arrays.asList(\n            PipelineElement.resolved(\"my-gateway\"),\n            PipelineElement.resolved(\"my-gateway\")\n    )", "var_name": "RESPONSES"}, {"original_string": "@Mock\n    private FunctionExpression functionExpression;", "modifier": "@Mock\n    private", "type": "FunctionExpression", "declarator": "functionExpression", "var_name": "functionExpression"}, {"original_string": "@Mock\n    private ExpressionResolver expressionResolver;", "modifier": "@Mock\n    private", "type": "ExpressionResolver", "declarator": "expressionResolver", "var_name": "expressionResolver"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutablePipelineTest.java"}, "test_case": {"identifier": "validate", "parameters": "()", "modifiers": "@Test(expected = PlaceholderFunctionUnknownException.class) public", "return": "void", "body": "@Test(expected = PlaceholderFunctionUnknownException.class)\n    public void validate() {\n        prepareFunctionExpressionResponses();\n\n        final ImmutablePipeline pipeline = new ImmutablePipeline(functionExpression, INVALID_STAGES);\n        pipeline.validate();\n    }", "signature": "void validate()", "full_signature": "@Test(expected = PlaceholderFunctionUnknownException.class) public void validate()", "class_method_signature": "ImmutablePipelineTest.validate()", "testcase": true, "constructor": false, "invocations": ["prepareFunctionExpressionResponses", "validate"]}, "focal_class": {"identifier": "ImmutablePipeline", "superclass": "", "interfaces": "implements Pipeline", "fields": [{"original_string": "private final FunctionExpression functionExpression;", "modifier": "private final", "type": "FunctionExpression", "declarator": "functionExpression", "var_name": "functionExpression"}, {"original_string": "private final List<String> stageExpressions;", "modifier": "private final", "type": "List<String>", "declarator": "stageExpressions", "var_name": "stageExpressions"}], "methods": [{"identifier": "ImmutablePipeline", "parameters": "(final FunctionExpression functionExpression, final List<String> stageExpressions)", "modifiers": "", "return": "", "signature": " ImmutablePipeline(final FunctionExpression functionExpression, final List<String> stageExpressions)", "full_signature": "  ImmutablePipeline(final FunctionExpression functionExpression, final List<String> stageExpressions)", "class_method_signature": "ImmutablePipeline.ImmutablePipeline(final FunctionExpression functionExpression, final List<String> stageExpressions)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final PipelineElement pipelineInput, final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement execute(final PipelineElement pipelineInput, final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement execute(final PipelineElement pipelineInput, final ExpressionResolver expressionResolver)", "class_method_signature": "ImmutablePipeline.execute(final PipelineElement pipelineInput, final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void validate()", "full_signature": "@Override public void validate()", "class_method_signature": "ImmutablePipeline.validate()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutablePipeline.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutablePipeline.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutablePipeline.toString()", "testcase": false, "constructor": false}, {"identifier": "combineElements", "parameters": "(final PipelineElement self, final PipelineElement other)", "modifiers": "private static", "return": "PipelineElement", "signature": "PipelineElement combineElements(final PipelineElement self, final PipelineElement other)", "full_signature": "private static PipelineElement combineElements(final PipelineElement self, final PipelineElement other)", "class_method_signature": "ImmutablePipeline.combineElements(final PipelineElement self, final PipelineElement other)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutablePipeline.java"}, "focal_method": {"identifier": "validate", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate() {\n        stageExpressions.stream()\n                .map(expression -> expression.replaceFirst(\n                        functionExpression.getPrefix() + FunctionExpression.SEPARATOR, \"\"))\n                .forEach(expression -> {\n                    if (!functionExpression.supports(expression)) {\n                        throw PlaceholderFunctionUnknownException.newBuilder(expression).build();\n                    }\n                });\n    }", "signature": "void validate()", "full_signature": "@Override public void validate()", "class_method_signature": "ImmutablePipeline.validate()", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "stream", "replaceFirst", "getPrefix", "supports", "build", "newBuilder"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}