{"test_class": {"identifier": "ConfigurationImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MemberName MEMBER_1 = MemberName.forName(\"member-1\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_1 = MemberName.forName(\"member-1\")", "var_name": "MEMBER_1"}, {"original_string": "private static final MemberName MEMBER_2 = MemberName.forName(\"member-2\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_2 = MemberName.forName(\"member-2\")", "var_name": "MEMBER_2"}, {"original_string": "private static final MemberName MEMBER_3 = MemberName.forName(\"member-3\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_3 = MemberName.forName(\"member-3\")", "var_name": "MEMBER_3"}, {"original_string": "private static final MemberName MEMBER_4 = MemberName.forName(\"member-4\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_4 = MemberName.forName(\"member-4\")", "var_name": "MEMBER_4"}, {"original_string": "private static final MemberName MEMBER_5 = MemberName.forName(\"member-5\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_5 = MemberName.forName(\"member-5\")", "var_name": "MEMBER_5"}, {"original_string": "private static final MemberName MEMBER_100 = MemberName.forName(\"member-100\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_100 = MemberName.forName(\"member-100\")", "var_name": "MEMBER_100"}, {"original_string": "private ConfigurationImpl configuration;", "modifier": "private", "type": "ConfigurationImpl", "declarator": "configuration", "var_name": "configuration"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/config/ConfigurationImplTest.java"}, "test_case": {"identifier": "testGetUniqueMemberNamesForAllShards", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUniqueMemberNamesForAllShards() {\n        assertEquals(\"getUniqueMemberNamesForAllShards\", Sets.newHashSet(MEMBER_1, MEMBER_2, MEMBER_3),\n                configuration.getUniqueMemberNamesForAllShards());\n    }", "signature": "void testGetUniqueMemberNamesForAllShards()", "full_signature": "@Test public void testGetUniqueMemberNamesForAllShards()", "class_method_signature": "ConfigurationImplTest.testGetUniqueMemberNamesForAllShards()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "newHashSet", "getUniqueMemberNamesForAllShards"]}, "focal_class": {"identifier": "ConfigurationImpl", "superclass": "", "interfaces": "implements Configuration", "fields": [{"original_string": "private volatile Map<String, ModuleConfig> moduleConfigMap;", "modifier": "private volatile", "type": "Map<String, ModuleConfig>", "declarator": "moduleConfigMap", "var_name": "moduleConfigMap"}, {"original_string": "private volatile Map<DOMDataTreeIdentifier, PrefixShardConfiguration> prefixConfigMap = Collections.emptyMap();", "modifier": "private volatile", "type": "Map<DOMDataTreeIdentifier, PrefixShardConfiguration>", "declarator": "prefixConfigMap = Collections.emptyMap()", "var_name": "prefixConfigMap"}, {"original_string": "private volatile Map<String, String> namespaceToModuleName;", "modifier": "private volatile", "type": "Map<String, String>", "declarator": "namespaceToModuleName", "var_name": "namespaceToModuleName"}, {"original_string": "private volatile Set<String> allShardNames;", "modifier": "private volatile", "type": "Set<String>", "declarator": "allShardNames", "var_name": "allShardNames"}], "methods": [{"identifier": "ConfigurationImpl", "parameters": "(final String moduleShardsConfigPath, final String modulesConfigPath)", "modifiers": "public", "return": "", "signature": " ConfigurationImpl(final String moduleShardsConfigPath, final String modulesConfigPath)", "full_signature": "public  ConfigurationImpl(final String moduleShardsConfigPath, final String modulesConfigPath)", "class_method_signature": "ConfigurationImpl.ConfigurationImpl(final String moduleShardsConfigPath, final String modulesConfigPath)", "testcase": false, "constructor": true}, {"identifier": "ConfigurationImpl", "parameters": "(final ModuleShardConfigProvider provider)", "modifiers": "public", "return": "", "signature": " ConfigurationImpl(final ModuleShardConfigProvider provider)", "full_signature": "public  ConfigurationImpl(final ModuleShardConfigProvider provider)", "class_method_signature": "ConfigurationImpl.ConfigurationImpl(final ModuleShardConfigProvider provider)", "testcase": false, "constructor": true}, {"identifier": "createAllShardNames", "parameters": "(final Iterable<ModuleConfig> moduleConfigs)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> createAllShardNames(final Iterable<ModuleConfig> moduleConfigs)", "full_signature": "private static Set<String> createAllShardNames(final Iterable<ModuleConfig> moduleConfigs)", "class_method_signature": "ConfigurationImpl.createAllShardNames(final Iterable<ModuleConfig> moduleConfigs)", "testcase": false, "constructor": false}, {"identifier": "createNamespaceToModuleName", "parameters": "(final Iterable<ModuleConfig> moduleConfigs)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> createNamespaceToModuleName(final Iterable<ModuleConfig> moduleConfigs)", "full_signature": "private static Map<String, String> createNamespaceToModuleName(final Iterable<ModuleConfig> moduleConfigs)", "class_method_signature": "ConfigurationImpl.createNamespaceToModuleName(final Iterable<ModuleConfig> moduleConfigs)", "testcase": false, "constructor": false}, {"identifier": "getMemberShardNames", "parameters": "(final MemberName memberName)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getMemberShardNames(final MemberName memberName)", "full_signature": "@Override public Collection<String> getMemberShardNames(final MemberName memberName)", "class_method_signature": "ConfigurationImpl.getMemberShardNames(final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "getModuleNameFromNameSpace", "parameters": "(final String nameSpace)", "modifiers": "@Override public", "return": "String", "signature": "String getModuleNameFromNameSpace(final String nameSpace)", "full_signature": "@Override public String getModuleNameFromNameSpace(final String nameSpace)", "class_method_signature": "ConfigurationImpl.getModuleNameFromNameSpace(final String nameSpace)", "testcase": false, "constructor": false}, {"identifier": "getStrategyForModule", "parameters": "(final String moduleName)", "modifiers": "@Override public", "return": "ShardStrategy", "signature": "ShardStrategy getStrategyForModule(final String moduleName)", "full_signature": "@Override public ShardStrategy getStrategyForModule(final String moduleName)", "class_method_signature": "ConfigurationImpl.getStrategyForModule(final String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getShardNameForModule", "parameters": "(final String moduleName)", "modifiers": "@Override public", "return": "String", "signature": "String getShardNameForModule(final String moduleName)", "full_signature": "@Override public String getShardNameForModule(final String moduleName)", "class_method_signature": "ConfigurationImpl.getShardNameForModule(final String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getModuleConfig", "parameters": "(final String moduleName)", "modifiers": "private", "return": "ModuleConfig", "signature": "ModuleConfig getModuleConfig(final String moduleName)", "full_signature": "private ModuleConfig getModuleConfig(final String moduleName)", "class_method_signature": "ConfigurationImpl.getModuleConfig(final String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getShardNameForPrefix", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "@Override public", "return": "String", "signature": "String getShardNameForPrefix(final DOMDataTreeIdentifier prefix)", "full_signature": "@Override public String getShardNameForPrefix(final DOMDataTreeIdentifier prefix)", "class_method_signature": "ConfigurationImpl.getShardNameForPrefix(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "getMembersFromShardName", "parameters": "(final String shardName)", "modifiers": "@Override public", "return": "Collection<MemberName>", "signature": "Collection<MemberName> getMembersFromShardName(final String shardName)", "full_signature": "@Override public Collection<MemberName> getMembersFromShardName(final String shardName)", "class_method_signature": "ConfigurationImpl.getMembersFromShardName(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "checkNotNullShardName", "parameters": "(final String shardName)", "modifiers": "private static", "return": "void", "signature": "void checkNotNullShardName(final String shardName)", "full_signature": "private static void checkNotNullShardName(final String shardName)", "class_method_signature": "ConfigurationImpl.checkNotNullShardName(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "getAllShardNames", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllShardNames()", "full_signature": "@Override public Set<String> getAllShardNames()", "class_method_signature": "ConfigurationImpl.getAllShardNames()", "testcase": false, "constructor": false}, {"identifier": "getUniqueMemberNamesForAllShards", "parameters": "()", "modifiers": "@Override public", "return": "Collection<MemberName>", "signature": "Collection<MemberName> getUniqueMemberNamesForAllShards()", "full_signature": "@Override public Collection<MemberName> getUniqueMemberNamesForAllShards()", "class_method_signature": "ConfigurationImpl.getUniqueMemberNamesForAllShards()", "testcase": false, "constructor": false}, {"identifier": "addModuleShardConfiguration", "parameters": "(final ModuleShardConfiguration config)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addModuleShardConfiguration(final ModuleShardConfiguration config)", "full_signature": "@Override public synchronized void addModuleShardConfiguration(final ModuleShardConfiguration config)", "class_method_signature": "ConfigurationImpl.addModuleShardConfiguration(final ModuleShardConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "addPrefixShardConfiguration", "parameters": "(final PrefixShardConfiguration config)", "modifiers": "@Override public", "return": "void", "signature": "void addPrefixShardConfiguration(final PrefixShardConfiguration config)", "full_signature": "@Override public void addPrefixShardConfiguration(final PrefixShardConfiguration config)", "class_method_signature": "ConfigurationImpl.addPrefixShardConfiguration(final PrefixShardConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "removePrefixShardConfiguration", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "@Override public", "return": "void", "signature": "void removePrefixShardConfiguration(final DOMDataTreeIdentifier prefix)", "full_signature": "@Override public void removePrefixShardConfiguration(final DOMDataTreeIdentifier prefix)", "class_method_signature": "ConfigurationImpl.removePrefixShardConfiguration(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "getAllPrefixShardConfigurations", "parameters": "()", "modifiers": "@Override public", "return": "Map<DOMDataTreeIdentifier, PrefixShardConfiguration>", "signature": "Map<DOMDataTreeIdentifier, PrefixShardConfiguration> getAllPrefixShardConfigurations()", "full_signature": "@Override public Map<DOMDataTreeIdentifier, PrefixShardConfiguration> getAllPrefixShardConfigurations()", "class_method_signature": "ConfigurationImpl.getAllPrefixShardConfigurations()", "testcase": false, "constructor": false}, {"identifier": "addPrefixConfig", "parameters": "(final PrefixShardConfiguration config)", "modifiers": "private", "return": "void", "signature": "void addPrefixConfig(final PrefixShardConfiguration config)", "full_signature": "private void addPrefixConfig(final PrefixShardConfiguration config)", "class_method_signature": "ConfigurationImpl.addPrefixConfig(final PrefixShardConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "removePrefixConfig", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "private", "return": "void", "signature": "void removePrefixConfig(final DOMDataTreeIdentifier prefix)", "full_signature": "private void removePrefixConfig(final DOMDataTreeIdentifier prefix)", "class_method_signature": "ConfigurationImpl.removePrefixConfig(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "createShardStrategy", "parameters": "(final String moduleName, final String shardStrategyName)", "modifiers": "private", "return": "ShardStrategy", "signature": "ShardStrategy createShardStrategy(final String moduleName, final String shardStrategyName)", "full_signature": "private ShardStrategy createShardStrategy(final String moduleName, final String shardStrategyName)", "class_method_signature": "ConfigurationImpl.createShardStrategy(final String moduleName, final String shardStrategyName)", "testcase": false, "constructor": false}, {"identifier": "isShardConfigured", "parameters": "(final String shardName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isShardConfigured(final String shardName)", "full_signature": "@Override public boolean isShardConfigured(final String shardName)", "class_method_signature": "ConfigurationImpl.isShardConfigured(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "addMemberReplicaForShard", "parameters": "(final String shardName, final MemberName newMemberName)", "modifiers": "@Override public", "return": "void", "signature": "void addMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "full_signature": "@Override public void addMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "class_method_signature": "ConfigurationImpl.addMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "testcase": false, "constructor": false}, {"identifier": "removeMemberReplicaForShard", "parameters": "(final String shardName, final MemberName newMemberName)", "modifiers": "@Override public", "return": "void", "signature": "void removeMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "full_signature": "@Override public void removeMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "class_method_signature": "ConfigurationImpl.removeMemberReplicaForShard(final String shardName, final MemberName newMemberName)", "testcase": false, "constructor": false}, {"identifier": "getStrategyForPrefix", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "@Override public", "return": "ShardStrategy", "signature": "ShardStrategy getStrategyForPrefix(final DOMDataTreeIdentifier prefix)", "full_signature": "@Override public ShardStrategy getStrategyForPrefix(final DOMDataTreeIdentifier prefix)", "class_method_signature": "ConfigurationImpl.getStrategyForPrefix(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "updateModuleConfigMap", "parameters": "(final ModuleConfig moduleConfig)", "modifiers": "private", "return": "void", "signature": "void updateModuleConfigMap(final ModuleConfig moduleConfig)", "full_signature": "private void updateModuleConfigMap(final ModuleConfig moduleConfig)", "class_method_signature": "ConfigurationImpl.updateModuleConfigMap(final ModuleConfig moduleConfig)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/config/ConfigurationImpl.java"}, "focal_method": {"identifier": "getUniqueMemberNamesForAllShards", "parameters": "()", "modifiers": "@Override public", "return": "Collection<MemberName>", "body": "@Override\n    public Collection<MemberName> getUniqueMemberNamesForAllShards() {\n        Set<MemberName> allNames = new HashSet<>();\n        for (String shardName: getAllShardNames()) {\n            allNames.addAll(getMembersFromShardName(shardName));\n        }\n\n        return allNames;\n    }", "signature": "Collection<MemberName> getUniqueMemberNamesForAllShards()", "full_signature": "@Override public Collection<MemberName> getUniqueMemberNamesForAllShards()", "class_method_signature": "ConfigurationImpl.getUniqueMemberNamesForAllShards()", "testcase": false, "constructor": false, "invocations": ["getAllShardNames", "addAll", "getMembersFromShardName"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}