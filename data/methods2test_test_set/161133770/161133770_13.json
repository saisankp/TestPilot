{"test_class": {"identifier": "StoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Subscription> allSubscriptions;", "modifier": "private", "type": "List<Subscription>", "declarator": "allSubscriptions", "var_name": "allSubscriptions"}], "file": "common/src/test/java/feast/common/models/StoreTest.java"}, "test_case": {"identifier": "shouldReturnStringBasedOnSubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnStringBasedOnSubscription() {\n    // Case: default exclude should be false\n    String actual1 = Store.parseSubscriptionFrom(allSubscriptions.get(2));\n    Subscription sub1 = allSubscriptions.get(2);\n    String expected1 = sub1.getProject() + \":\" + sub1.getName() + \":\" + sub1.getExclude();\n\n    // Case: explicit setting of exclude to true\n    String actual2 = Store.parseSubscriptionFrom(allSubscriptions.get(3));\n    Subscription sub2 = allSubscriptions.get(3);\n    String expected2 = sub2.getProject() + \":\" + sub2.getName() + \":\" + sub2.getExclude();\n\n    assertThat(actual1, equalTo(expected1));\n    assertThat(actual2, equalTo(expected2));\n  }", "signature": "void shouldReturnStringBasedOnSubscription()", "full_signature": "@Test public void shouldReturnStringBasedOnSubscription()", "class_method_signature": "StoreTest.shouldReturnStringBasedOnSubscription()", "testcase": true, "constructor": false, "invocations": ["parseSubscriptionFrom", "get", "get", "getProject", "getName", "getExclude", "parseSubscriptionFrom", "get", "get", "getProject", "getName", "getExclude", "assertThat", "equalTo", "assertThat", "equalTo"]}, "focal_class": {"identifier": "Store", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseSubFromStr", "parameters": "(String subscriptions)", "modifiers": "public static", "return": "List<Subscription>", "signature": "List<Subscription> parseSubFromStr(String subscriptions)", "full_signature": "public static List<Subscription> parseSubFromStr(String subscriptions)", "class_method_signature": "Store.parseSubFromStr(String subscriptions)", "testcase": false, "constructor": false}, {"identifier": "parseSubFromStrWithoutExclusions", "parameters": "(String subscriptions)", "modifiers": "public static", "return": "List<Subscription>", "signature": "List<Subscription> parseSubFromStrWithoutExclusions(String subscriptions)", "full_signature": "public static List<Subscription> parseSubFromStrWithoutExclusions(String subscriptions)", "class_method_signature": "Store.parseSubFromStrWithoutExclusions(String subscriptions)", "testcase": false, "constructor": false}, {"identifier": "parseSubscriptionFrom", "parameters": "(Subscription subscription)", "modifiers": "public static", "return": "String", "signature": "String parseSubscriptionFrom(Subscription subscription)", "full_signature": "public static String parseSubscriptionFrom(Subscription subscription)", "class_method_signature": "Store.parseSubscriptionFrom(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "convertStringToSubscription", "parameters": "(String subscription)", "modifiers": "public static", "return": "Subscription", "signature": "Subscription convertStringToSubscription(String subscription)", "full_signature": "public static Subscription convertStringToSubscription(String subscription)", "class_method_signature": "Store.convertStringToSubscription(String subscription)", "testcase": false, "constructor": false}, {"identifier": "isSubscribedToFeatureSet", "parameters": "(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "full_signature": "public static boolean isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "class_method_signature": "Store.isSubscribedToFeatureSet(\n      List<Subscription> subscriptions, String projectName, String featureSetName)", "testcase": false, "constructor": false}, {"identifier": "getProjectPattern", "parameters": "(Subscription subscription)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern getProjectPattern(Subscription subscription)", "full_signature": "private static Pattern getProjectPattern(Subscription subscription)", "class_method_signature": "Store.getProjectPattern(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "getNamePattern", "parameters": "(Subscription subscription)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern getNamePattern(Subscription subscription)", "full_signature": "private static Pattern getNamePattern(Subscription subscription)", "class_method_signature": "Store.getNamePattern(Subscription subscription)", "testcase": false, "constructor": false}], "file": "common/src/main/java/feast/common/models/Store.java"}, "focal_method": {"identifier": "parseSubscriptionFrom", "parameters": "(Subscription subscription)", "modifiers": "public static", "return": "String", "body": "public static String parseSubscriptionFrom(Subscription subscription) {\n    if (subscription.getName().isEmpty() || subscription.getProject().isEmpty()) {\n      throw new IllegalArgumentException(\n          String.format(\"Missing arguments in subscription string: %s\", subscription.toString()));\n    }\n\n    return String.format(\n        \"%s:%s:%s\", subscription.getProject(), subscription.getName(), subscription.getExclude());\n  }", "signature": "String parseSubscriptionFrom(Subscription subscription)", "full_signature": "public static String parseSubscriptionFrom(Subscription subscription)", "class_method_signature": "Store.parseSubscriptionFrom(Subscription subscription)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getName", "isEmpty", "getProject", "format", "toString", "format", "getProject", "getName", "getExclude"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}