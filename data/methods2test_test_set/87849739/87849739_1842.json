{"test_class": {"identifier": "ThingEventAdapterTest", "superclass": "extends LiveTwinTest", "interfaces": "implements ProtocolAdapterTest", "fields": [{"original_string": "private ThingEventAdapter underTest;", "modifier": "private", "type": "ThingEventAdapter", "declarator": "underTest", "var_name": "underTest"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/things/ThingEventAdapterTest.java"}, "test_case": {"identifier": "policyIdModifiedFromAdaptable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void policyIdModifiedFromAdaptable() {\n        final PolicyIdModified expected =\n                PolicyIdModified.of(TestConstants.THING_ID, TestConstants.Policies.POLICY_ID,\n                        TestConstants.REVISION, setChannelHeader(TestConstants.DITTO_HEADERS_V_2));\n\n        final JsonPointer path = JsonPointer.of(\"/policyId\");\n\n        final Adaptable adaptable = Adaptable.newBuilder(topicPathModified())\n                .withPayload(Payload.newBuilder(path)\n                        .withValue(JsonValue.of(TestConstants.Policies.POLICY_ID))\n                        .withRevision(TestConstants.REVISION)\n                        .build())\n                .withHeaders(TestConstants.HEADERS_V_2)\n                .build();\n        final ThingEvent<?> actual = underTest.fromAdaptable(adaptable);\n\n        assertWithExternalHeadersThat(actual).isEqualTo(expected);\n    }", "signature": "void policyIdModifiedFromAdaptable()", "full_signature": "@Test public void policyIdModifiedFromAdaptable()", "class_method_signature": "ThingEventAdapterTest.policyIdModifiedFromAdaptable()", "testcase": true, "constructor": false, "invocations": ["of", "setChannelHeader", "of", "build", "withHeaders", "withPayload", "newBuilder", "topicPathModified", "build", "withRevision", "withValue", "newBuilder", "of", "fromAdaptable", "isEqualTo", "assertWithExternalHeadersThat"]}, "focal_class": {"identifier": "ThingEventAdapter", "superclass": "extends AbstractThingAdapter<ThingEvent<?>>", "interfaces": "implements EventAdapter<ThingEvent<?>>", "fields": [], "methods": [{"identifier": "ThingEventAdapter", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "private", "return": "", "signature": " ThingEventAdapter(final HeaderTranslator headerTranslator)", "full_signature": "private  ThingEventAdapter(final HeaderTranslator headerTranslator)", "class_method_signature": "ThingEventAdapter.ThingEventAdapter(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "public static", "return": "ThingEventAdapter", "signature": "ThingEventAdapter of(final HeaderTranslator headerTranslator)", "full_signature": "public static ThingEventAdapter of(final HeaderTranslator headerTranslator)", "class_method_signature": "ThingEventAdapter.of(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": false}, {"identifier": "getActionNameWithFirstLetterUpperCase", "parameters": "(final TopicPath topicPath)", "modifiers": "private static", "return": "String", "signature": "String getActionNameWithFirstLetterUpperCase(final TopicPath topicPath)", "full_signature": "private static String getActionNameWithFirstLetterUpperCase(final TopicPath topicPath)", "class_method_signature": "ThingEventAdapter.getActionNameWithFirstLetterUpperCase(final TopicPath topicPath)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override protected", "return": "String", "signature": "String getType(final Adaptable adaptable)", "full_signature": "@Override protected String getType(final Adaptable adaptable)", "class_method_signature": "ThingEventAdapter.getType(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "mapSignalToAdaptable", "parameters": "(final ThingEvent<?> event, final TopicPath.Channel channel)", "modifiers": "@Override public", "return": "Adaptable", "signature": "Adaptable mapSignalToAdaptable(final ThingEvent<?> event, final TopicPath.Channel channel)", "full_signature": "@Override public Adaptable mapSignalToAdaptable(final ThingEvent<?> event, final TopicPath.Channel channel)", "class_method_signature": "ThingEventAdapter.mapSignalToAdaptable(final ThingEvent<?> event, final TopicPath.Channel channel)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/things/ThingEventAdapter.java"}, "focal_method": {"identifier": "of", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "public static", "return": "ThingEventAdapter", "body": "public static ThingEventAdapter of(final HeaderTranslator headerTranslator) {\n        return new ThingEventAdapter(requireNonNull(headerTranslator));\n    }", "signature": "ThingEventAdapter of(final HeaderTranslator headerTranslator)", "full_signature": "public static ThingEventAdapter of(final HeaderTranslator headerTranslator)", "class_method_signature": "ThingEventAdapter.of(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}