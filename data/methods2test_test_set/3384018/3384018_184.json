{"test_class": {"identifier": "TestRFC2617Scheme", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/auth/TestRFC2617Scheme.java"}, "test_case": {"identifier": "testProcessChallenge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessChallenge() throws Exception {\n        TestAuthScheme authscheme = new TestAuthScheme();\n        Header header = new BasicHeader(\n                AUTH.WWW_AUTH,\n                \"Test realm=\\\"realm1\\\", test, test1 =  stuff, test2 =  \\\"stuff, stuff\\\", test3=\\\"crap\");\n\n        authscheme.processChallenge(header);\n\n        Assert.assertEquals(\"test\", authscheme.getSchemeName());\n        Assert.assertEquals(\"realm1\", authscheme.getParameter(\"realm\"));\n        Assert.assertEquals(null, authscheme.getParameter(\"test\"));\n        Assert.assertEquals(\"stuff\", authscheme.getParameter(\"test1\"));\n        Assert.assertEquals(\"stuff, stuff\", authscheme.getParameter(\"test2\"));\n        Assert.assertEquals(\"\\\"crap\", authscheme.getParameter(\"test3\"));\n    }", "signature": "void testProcessChallenge()", "full_signature": "@Test public void testProcessChallenge()", "class_method_signature": "TestRFC2617Scheme.testProcessChallenge()", "testcase": true, "constructor": false, "invocations": ["processChallenge", "assertEquals", "getSchemeName", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter"]}, "focal_class": {"identifier": "RFC2617Scheme", "superclass": "extends AuthSchemeBase", "interfaces": "", "fields": [{"original_string": "private Map<String, String> params;", "modifier": "private", "type": "Map<String, String>", "declarator": "params", "var_name": "params"}], "methods": [{"identifier": "RFC2617Scheme", "parameters": "()", "modifiers": "public", "return": "", "signature": " RFC2617Scheme()", "full_signature": "public  RFC2617Scheme()", "class_method_signature": "RFC2617Scheme.RFC2617Scheme()", "testcase": false, "constructor": true}, {"identifier": "parseChallenge", "parameters": "(\n            final CharArrayBuffer buffer, int pos, int len)", "modifiers": "@Override protected", "return": "void", "signature": "void parseChallenge(\n            final CharArrayBuffer buffer, int pos, int len)", "full_signature": "@Override protected void parseChallenge(\n            final CharArrayBuffer buffer, int pos, int len)", "class_method_signature": "RFC2617Scheme.parseChallenge(\n            final CharArrayBuffer buffer, int pos, int len)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getParameters()", "full_signature": "protected Map<String, String> getParameters()", "class_method_signature": "RFC2617Scheme.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(final String name)", "modifiers": "public", "return": "String", "signature": "String getParameter(final String name)", "full_signature": "public String getParameter(final String name)", "class_method_signature": "RFC2617Scheme.getParameter(final String name)", "testcase": false, "constructor": false}, {"identifier": "getRealm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRealm()", "full_signature": "public String getRealm()", "class_method_signature": "RFC2617Scheme.getRealm()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/auth/RFC2617Scheme.java"}, "focal_method": {"identifier": "getParameter", "parameters": "(final String name)", "modifiers": "public", "return": "String", "body": "public String getParameter(final String name) {\n        if (name == null) {\n            throw new IllegalArgumentException(\"Parameter name may not be null\");\n        }\n        if (this.params == null) {\n            return null;\n        }\n        return this.params.get(name.toLowerCase(Locale.ENGLISH));\n    }", "signature": "String getParameter(final String name)", "full_signature": "public String getParameter(final String name)", "class_method_signature": "RFC2617Scheme.getParameter(final String name)", "testcase": false, "constructor": false, "invocations": ["get", "toLowerCase"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}