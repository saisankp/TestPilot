{"test_class": {"identifier": "InputStreamEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] testContent;", "modifier": "private", "type": "byte[]", "declarator": "testContent", "var_name": "testContent"}, {"original_string": "private InputStreamEntityProvider inputStreamEntityProvider = new InputStreamEntityProvider();", "modifier": "private", "type": "InputStreamEntityProvider", "declarator": "inputStreamEntityProvider = new InputStreamEntityProvider()", "var_name": "inputStreamEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/InputStreamEntityProviderTest.java"}, "test_case": {"identifier": "readsContentOfEntityStreamAsInputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readsContentOfEntityStreamAsInputStream() throws Exception {\n        InputStream in = new ByteArrayInputStream(testContent);\n        InputStream result = inputStreamEntityProvider.readFrom(InputStream.class, null, null, null, null, in);\n        assertArrayEquals(testContent, ByteStreams.toByteArray(result));\n    }", "signature": "void readsContentOfEntityStreamAsInputStream()", "full_signature": "@Test public void readsContentOfEntityStreamAsInputStream()", "class_method_signature": "InputStreamEntityProviderTest.readsContentOfEntityStreamAsInputStream()", "testcase": true, "constructor": false, "invocations": ["readFrom", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "InputStreamEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<InputStream>", "fields": [], "methods": [{"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "InputStreamEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "full_signature": "@Override public InputStream readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "class_method_signature": "InputStreamEntityProvider.readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(InputStream t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(InputStream t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(InputStream t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "InputStreamEntityProvider.getSize(InputStream t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "InputStreamEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(InputStream in,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(InputStream in,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(InputStream in,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "InputStreamEntityProvider.writeTo(InputStream in,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/InputStreamEntityProvider.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream) throws IOException {\n        ApplicationContext context = ApplicationContext.getCurrent();\n        if (context.isAsynchronous()) {\n            int bufferSize = context.getEverrestConfiguration().getMaxBufferSize();\n            return IOHelper.bufferStream(entityStream, bufferSize);\n        }\n        return entityStream;\n    }", "signature": "InputStream readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "full_signature": "@Override public InputStream readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "class_method_signature": "InputStreamEntityProvider.readFrom(Class<InputStream> type,\n                                Type genericType,\n                                Annotation[] annotations,\n                                MediaType mediaType,\n                                MultivaluedMap<String, String> httpHeaders,\n                                InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "isAsynchronous", "getMaxBufferSize", "getEverrestConfiguration", "bufferStream"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}