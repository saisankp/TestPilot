{"test_class": {"identifier": "VertxJobsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CALLBACK_URL = \"http://localhost\";", "modifier": "public static final", "type": "String", "declarator": "CALLBACK_URL = \"http://localhost\"", "var_name": "CALLBACK_URL"}, {"original_string": "public static final String JOB_SERVICE_URL = \"http://localhost:8085\";", "modifier": "public static final", "type": "String", "declarator": "JOB_SERVICE_URL = \"http://localhost:8085\"", "var_name": "JOB_SERVICE_URL"}, {"original_string": "private VertxJobsService tested;", "modifier": "private", "type": "VertxJobsService", "declarator": "tested", "var_name": "tested"}, {"original_string": "private ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}, {"original_string": "@Mock\n    private Vertx vertx;", "modifier": "@Mock\n    private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "@Mock\n    private WebClient webClient;", "modifier": "@Mock\n    private", "type": "WebClient", "declarator": "webClient", "var_name": "webClient"}, {"original_string": "@Mock\n    private Instance instance;", "modifier": "@Mock\n    private", "type": "Instance", "declarator": "instance", "var_name": "instance"}], "file": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java"}, "test_case": {"identifier": "testScheduleProcessInstanceJob", "parameters": "(@Mock HttpRequest<Buffer> request)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testScheduleProcessInstanceJob(@Mock HttpRequest<Buffer> request) {\n        when(webClient.post(anyString())).thenReturn(request);\n\n        ProcessInstanceJobDescription processInstanceJobDescription = ProcessInstanceJobDescription.of(123,\n                                                                                                       ExactExpirationTime.now(),\n                                                                                                       \"processInstanceId\",\n                                                                                                       \"processId\");\n        tested.scheduleProcessInstanceJob(processInstanceJobDescription);\n        verify(webClient).post(\"/jobs\");\n        ArgumentCaptor<Job> jobArgumentCaptor = forClass(Job.class);\n        verify(request).sendJson(jobArgumentCaptor.capture(), any(Handler.class));\n        Job job = jobArgumentCaptor.getValue();\n        assertThat(job.getId()).isEqualTo(processInstanceJobDescription.id());\n        assertThat(job.getExpirationTime()).isEqualTo(processInstanceJobDescription.expirationTime().get());\n        assertThat(job.getProcessInstanceId()).isEqualTo(processInstanceJobDescription.processInstanceId());\n        assertThat(job.getProcessId()).isEqualTo(processInstanceJobDescription.processId());\n    }", "signature": "void testScheduleProcessInstanceJob(@Mock HttpRequest<Buffer> request)", "full_signature": "@Test void testScheduleProcessInstanceJob(@Mock HttpRequest<Buffer> request)", "class_method_signature": "VertxJobsServiceTest.testScheduleProcessInstanceJob(@Mock HttpRequest<Buffer> request)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "post", "anyString", "of", "now", "scheduleProcessInstanceJob", "post", "verify", "forClass", "sendJson", "verify", "capture", "any", "getValue", "isEqualTo", "assertThat", "getId", "id", "isEqualTo", "assertThat", "getExpirationTime", "get", "expirationTime", "isEqualTo", "assertThat", "getProcessInstanceId", "processInstanceId", "isEqualTo", "assertThat", "getProcessId", "processId"]}, "focal_class": {"identifier": "VertxJobsService", "superclass": "extends RestJobsService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VertxJobsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VertxJobsService.class)", "var_name": "LOGGER"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private Instance<WebClient> providedWebClient;", "modifier": "private", "type": "Instance<WebClient>", "declarator": "providedWebClient", "var_name": "providedWebClient"}, {"original_string": "private WebClient client;", "modifier": "private", "type": "WebClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "VertxJobsService", "parameters": "(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "modifiers": "@Inject public", "return": "", "signature": " VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "full_signature": "@Inject public  VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "class_method_signature": "VertxJobsService.VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "testcase": false, "constructor": true}, {"identifier": "VertxJobsService", "parameters": "()", "modifiers": "", "return": "", "signature": " VertxJobsService()", "full_signature": "  VertxJobsService()", "class_method_signature": "VertxJobsService.VertxJobsService()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void initialize()", "full_signature": "@PostConstruct void initialize()", "class_method_signature": "VertxJobsService.initialize()", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessJob", "parameters": "(ProcessJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessJob(ProcessJobDescription description)", "full_signature": "@Override public String scheduleProcessJob(ProcessJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessJob(ProcessJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessInstanceJob", "parameters": "(ProcessInstanceJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "full_signature": "@Override public String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "cancelJob", "parameters": "(String id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancelJob(String id)", "full_signature": "@Override public boolean cancelJob(String id)", "class_method_signature": "VertxJobsService.cancelJob(String id)", "testcase": false, "constructor": false}, {"identifier": "getScheduledTime", "parameters": "(String id)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime getScheduledTime(String id)", "full_signature": "@Override public ZonedDateTime getScheduledTime(String id)", "class_method_signature": "VertxJobsService.getScheduledTime(String id)", "testcase": false, "constructor": false}], "file": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java"}, "focal_method": {"identifier": "scheduleProcessInstanceJob", "parameters": "(ProcessInstanceJobDescription description)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String scheduleProcessInstanceJob(ProcessInstanceJobDescription description) {\n        String callback = getCallbackEndpoint(description);\n        LOGGER.debug(\"Job to be scheduled {} with callback URL {}\", description, callback);\n        final Job job = JobBuilder.builder()\n                .id(description.id())\n                .expirationTime(description.expirationTime().get())\n                .repeatInterval(description.expirationTime().repeatInterval())\n                .repeatLimit(description.expirationTime().repeatLimit())\n                .priority(0)\n                .callbackEndpoint(callback)\n                .processId(description.processId())\n                .processInstanceId(description.processInstanceId())\n                .rootProcessId(description.rootProcessId())\n                .rootProcessInstanceId(description.rootProcessInstanceId())\n                .build();\n\n        client.post(JOBS_PATH).sendJson(job, res -> {\n            \n            if (res.succeeded() && res.result().statusCode() == 200) {\n                LOGGER.debug(\"Creating of the job {} done with status code {} \", job, res.result().statusCode());\n            } else {\n                LOGGER.error(\"Scheduling of job {} failed with response code {}\", job, res.result().statusCode(), res.cause());\n            }\n        });\n        \n        return job.getId();\n    }", "signature": "String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "full_signature": "@Override public String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "testcase": false, "constructor": false, "invocations": ["getCallbackEndpoint", "debug", "build", "rootProcessInstanceId", "rootProcessId", "processInstanceId", "processId", "callbackEndpoint", "priority", "repeatLimit", "repeatInterval", "expirationTime", "id", "builder", "id", "get", "expirationTime", "repeatInterval", "expirationTime", "repeatLimit", "expirationTime", "processId", "processInstanceId", "rootProcessId", "rootProcessInstanceId", "sendJson", "post", "succeeded", "statusCode", "result", "debug", "statusCode", "result", "error", "statusCode", "result", "cause", "getId"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}