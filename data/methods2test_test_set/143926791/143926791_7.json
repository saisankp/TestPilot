{"test_class": {"identifier": "QuoteV1ControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n    QuoteV1Controller controller;", "modifier": "@InjectMocks", "type": "QuoteV1Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n    QuoteService service;", "modifier": "@Mock", "type": "QuoteService", "declarator": "service", "var_name": "service"}], "file": "quotes-service/src/test/java/io/pivotal/quotes/controller/QuoteV1ControllerTest.java"}, "test_case": {"identifier": "getQuotes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getQuotes() throws Exception {\n        when(service.getQuotes(TestConfiguration.QUOTE_SYMBOLS)).thenReturn(\n                TestConfiguration.quotes());\n        mockMvc.perform(\n                get(\"/v1/quotes?q=\" + TestConfiguration.QUOTE_SYMBOLS).contentType(\n                        MediaType.APPLICATION_JSON)).andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(2)))\n                .andDo(print());\n    }", "signature": "void getQuotes()", "full_signature": "@Test public void getQuotes()", "class_method_signature": "QuoteV1ControllerTest.getQuotes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getQuotes", "quotes", "andDo", "andExpect", "andExpect", "perform", "contentType", "get", "isOk", "status", "jsonPath", "hasSize", "print"]}, "focal_class": {"identifier": "QuoteV1Controller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(QuoteV1Controller.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QuoteV1Controller.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate QuoteService service;", "modifier": "@Autowired\n\tprivate", "type": "QuoteService", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "getQuotes", "parameters": "(@RequestParam(value=\"q\", required=false) String query)", "modifiers": "@RequestMapping(value = \"/quotes\", method = RequestMethod.GET) public", "return": "ResponseEntity<List<Quote>>", "signature": "ResponseEntity<List<Quote>> getQuotes(@RequestParam(value=\"q\", required=false) String query)", "full_signature": "@RequestMapping(value = \"/quotes\", method = RequestMethod.GET) public ResponseEntity<List<Quote>> getQuotes(@RequestParam(value=\"q\", required=false) String query)", "class_method_signature": "QuoteV1Controller.getQuotes(@RequestParam(value=\"q\", required=false) String query)", "testcase": false, "constructor": false}, {"identifier": "getCompanies", "parameters": "(@PathVariable(\"name\") final String name)", "modifiers": "@RequestMapping(value = \"/company/{name}\", method = RequestMethod.GET) public", "return": "ResponseEntity<List<CompanyInfo>>", "signature": "ResponseEntity<List<CompanyInfo>> getCompanies(@PathVariable(\"name\") final String name)", "full_signature": "@RequestMapping(value = \"/company/{name}\", method = RequestMethod.GET) public ResponseEntity<List<CompanyInfo>> getCompanies(@PathVariable(\"name\") final String name)", "class_method_signature": "QuoteV1Controller.getCompanies(@PathVariable(\"name\") final String name)", "testcase": false, "constructor": false}, {"identifier": "getNoCacheHeaders", "parameters": "()", "modifiers": "private", "return": "HttpHeaders", "signature": "HttpHeaders getNoCacheHeaders()", "full_signature": "private HttpHeaders getNoCacheHeaders()", "class_method_signature": "QuoteV1Controller.getNoCacheHeaders()", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(Exception e, HttpServletResponse response)", "modifiers": "@ExceptionHandler({ Exception.class }) public", "return": "void", "signature": "void handleException(Exception e, HttpServletResponse response)", "full_signature": "@ExceptionHandler({ Exception.class }) public void handleException(Exception e, HttpServletResponse response)", "class_method_signature": "QuoteV1Controller.handleException(Exception e, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "quotes-service/src/main/java/io/pivotal/quotes/controller/QuoteV1Controller.java"}, "focal_method": {"identifier": "getQuotes", "parameters": "(@RequestParam(value=\"q\", required=false) String query)", "modifiers": "@RequestMapping(value = \"/quotes\", method = RequestMethod.GET) public", "return": "ResponseEntity<List<Quote>>", "body": "@RequestMapping(value = \"/quotes\", method = RequestMethod.GET)\n\tpublic ResponseEntity<List<Quote>> getQuotes(@RequestParam(value=\"q\", required=false) String query) throws SymbolNotFoundException{\n\t\tlogger.debug(\"received Quote query for: \"+ query);\n\t\tif (query == null) {\n\t\t\t//return empty list.\n\t\t\treturn new ResponseEntity<List<Quote>>(new ArrayList<Quote>(), getNoCacheHeaders(), HttpStatus.OK);\n\t\t}\n\t\tList<Quote> quotes;\n\t\tString[] splitQuery = query.split(\",\");\n\t\tif (splitQuery.length > 1) {\n\t\t\tquotes = service.getQuotes(query);\n\t\t} else {\n\t\t\tquotes = new ArrayList<>();\n\t\t\tquotes.add(service.getQuote(splitQuery[0]));\n\t\t}\n\t\tlogger.info(String.format(\"Retrieved symbols: %s with quotes {}\", query, quotes));\n\t\treturn new ResponseEntity<List<Quote>>(quotes, getNoCacheHeaders(), HttpStatus.OK);\n\t}", "signature": "ResponseEntity<List<Quote>> getQuotes(@RequestParam(value=\"q\", required=false) String query)", "full_signature": "@RequestMapping(value = \"/quotes\", method = RequestMethod.GET) public ResponseEntity<List<Quote>> getQuotes(@RequestParam(value=\"q\", required=false) String query)", "class_method_signature": "QuoteV1Controller.getQuotes(@RequestParam(value=\"q\", required=false) String query)", "testcase": false, "constructor": false, "invocations": ["debug", "getNoCacheHeaders", "split", "getQuotes", "add", "getQuote", "info", "format", "getNoCacheHeaders"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}