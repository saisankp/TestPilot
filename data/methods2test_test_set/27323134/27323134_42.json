{"test_class": {"identifier": "GetMediaItemListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetMediaItemDetails getMediaItemDetails;", "modifier": "private", "type": "GetMediaItemDetails", "declarator": "getMediaItemDetails", "var_name": "getMediaItemDetails"}, {"original_string": "@Mock\n    private MediaItemRepository mockMediaItemRepository;", "modifier": "@Mock\n    private", "type": "MediaItemRepository", "declarator": "mockMediaItemRepository", "var_name": "mockMediaItemRepository"}, {"original_string": "@Mock private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "mythtv-player/src/test/java/org/mythtv/android/domain/interactor/GetMediaItemListTest.java"}, "test_case": {"identifier": "testGetMediaItemForVideoDetailsUseCaseObservableHappyCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMediaItemForVideoDetailsUseCaseObservableHappyCase() {\n\n        Media fakeMedia = Media.PROGRAM;\n        int FAKE_ID = 999;\n\n        getMediaItemDetails = new GetMediaItemDetails( fakeMedia, FAKE_ID, mockMediaItemRepository, mockThreadExecutor, mockPostExecutionThread );\n        getMediaItemDetails.buildUseCaseObservable();\n\n        verify( mockMediaItemRepository ).mediaItem( fakeMedia, FAKE_ID );\n        verifyZeroInteractions( mockPostExecutionThread );\n        verifyZeroInteractions( mockThreadExecutor );\n\n    }", "signature": "void testGetMediaItemForVideoDetailsUseCaseObservableHappyCase()", "full_signature": "@Test public void testGetMediaItemForVideoDetailsUseCaseObservableHappyCase()", "class_method_signature": "GetMediaItemListTest.testGetMediaItemForVideoDetailsUseCaseObservableHappyCase()", "testcase": true, "constructor": false, "invocations": ["buildUseCaseObservable", "mediaItem", "verify", "verifyZeroInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "GetMediaItemList", "superclass": "extends DynamicUseCase", "interfaces": "", "fields": [{"original_string": "public static final String MEDIA_KEY = \"media\";", "modifier": "public static final", "type": "String", "declarator": "MEDIA_KEY = \"media\"", "var_name": "MEDIA_KEY"}, {"original_string": "public static final String TITLE_REGEX_KEY = \"title_regex\";", "modifier": "public static final", "type": "String", "declarator": "TITLE_REGEX_KEY = \"title_regex\"", "var_name": "TITLE_REGEX_KEY"}, {"original_string": "public static final String TV_KEY = \"tv\";", "modifier": "public static final", "type": "String", "declarator": "TV_KEY = \"tv\"", "var_name": "TV_KEY"}, {"original_string": "private final MediaItemRepository mediaItemRepository;", "modifier": "private final", "type": "MediaItemRepository", "declarator": "mediaItemRepository", "var_name": "mediaItemRepository"}], "methods": [{"identifier": "GetMediaItemList", "parameters": "( final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "modifiers": "public", "return": "", "signature": " GetMediaItemList( final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "full_signature": "public  GetMediaItemList( final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "class_method_signature": "GetMediaItemList.GetMediaItemList( final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "testcase": false, "constructor": true}, {"identifier": "buildUseCaseObservable", "parameters": "( Map parameters )", "modifiers": "@Override protected", "return": "Observable", "signature": "Observable buildUseCaseObservable( Map parameters )", "full_signature": "@Override protected Observable buildUseCaseObservable( Map parameters )", "class_method_signature": "GetMediaItemList.buildUseCaseObservable( Map parameters )", "testcase": false, "constructor": false}, {"identifier": "getRecordedPrograms", "parameters": "( final Media media, final Map parameters )", "modifiers": "private", "return": "Observable", "signature": "Observable getRecordedPrograms( final Media media, final Map parameters )", "full_signature": "private Observable getRecordedPrograms( final Media media, final Map parameters )", "class_method_signature": "GetMediaItemList.getRecordedPrograms( final Media media, final Map parameters )", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/domain/interactor/GetMediaItemList.java"}, "focal_method": {"identifier": "buildUseCaseObservable", "parameters": "( Map parameters )", "modifiers": "@Override protected", "return": "Observable", "body": "@Override\n    protected Observable buildUseCaseObservable( Map parameters ) {\n\n        if (!parameters.containsKey( MEDIA_KEY ) ) {\n\n            throw new IllegalArgumentException( \"Key [\" + MEDIA_KEY + \"] is required!\" );\n        }\n\n        Media media = (Media) parameters.get( MEDIA_KEY );\n        switch( media ) {\n\n            case PROGRAM:\n\n                return getRecordedPrograms( media, parameters );\n\n            case RECENT:\n\n                return this.mediaItemRepository.mediaItems( media, null );\n\n            case UPCOMING:\n\n                return this.mediaItemRepository.mediaItems( media, null );\n\n            case VIDEO:\n\n                return this.mediaItemRepository.mediaItems( media, null );\n\n            case MOVIE:\n            case HOMEVIDEO:\n            case MUSICVIDEO:\n            case ADULT:\n\n                return this.mediaItemRepository.mediaItems( media, null );\n\n            case TELEVISION:\n\n                if( parameters.containsKey( TV_KEY ) ) {\n\n                    return this.mediaItemRepository.mediaItems( media, null );\n\n                } else {\n\n                    return this.mediaItemRepository.series( media );\n                }\n\n            default :\n                throw new IllegalArgumentException( \"Key [\" + media.name() + \"] not found\" );\n        }\n\n    }", "signature": "Observable buildUseCaseObservable( Map parameters )", "full_signature": "@Override protected Observable buildUseCaseObservable( Map parameters )", "class_method_signature": "GetMediaItemList.buildUseCaseObservable( Map parameters )", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "getRecordedPrograms", "mediaItems", "mediaItems", "mediaItems", "mediaItems", "containsKey", "mediaItems", "series", "name"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}