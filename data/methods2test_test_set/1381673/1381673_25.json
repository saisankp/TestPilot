{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/util/JsonUtilsTest.java"}, "test_case": {"identifier": "convertFromStringToJSONNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertFromStringToJSONNode() {\n        assertFalse(JsonUtils.convertFromStringToJSONNode(null).isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"Not json\").isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"\\\"Not json\").isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"key : notJson\\\"\").isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"[key : 100]\").isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"{\\\"key\\\" : 100{\").isPresent());\n        assertFalse(JsonUtils.convertFromStringToJSONNode(\"{key : 100}\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"\\\"Json\\\"\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"\\\"key : Json\\\"\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"{ \\\"id\\\": 2, \\\"username\\\": \\\"user\\\", \\\"num\\\": 12, \\\"name\\\": \\\"Mr Yellow\\\"\\n }\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"{ \\\"users\\\": [\\n\" +\n                                                                 \"\\t\\t{ \\\"id\\\": 3, \\\"username\\\": \\\"user45\\\", \\\"num\\\": 24, \\\"name\\\": \\\"Mr White\\\" },\\n\" +\n                                                                 \"\\t\\t{ \\\"id\\\": 4, \\\"username\\\": \\\"user65\\\", \\\"num\\\": 32, \\\"name\\\": \\\"Mr Red\\\" }\\n\" +\n                                                                 \"\\t]}\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"[{\\\"name\\\": \\\"\\\\\\\"John\\\\\\\"\\\"}, \" +\n                                                                 \"{\\\"name\\\": \\\"\\\\\\\"John\\\\\\\"\\\", \\\"names\\\" : [{\\\"value\\\": \\\"\\\\\\\"Anna\\\\\\\"\\\"}, {\\\"value\\\": \\\"\\\\\\\"Mario\\\\\\\"\\\"}]}]\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"[1,2,3]\").isPresent());\n        assertTrue(JsonUtils.convertFromStringToJSONNode(\"{\\\"id\\\": 23, \\\"num\\\": 34, \\\"time\\\" : 56}\").isPresent());\n        assertTrue(\"Combine three data types in object\",\n                   JsonUtils.convertFromStringToJSONNode(\"{\\\"married\\\":true, \\\"num\\\":34, \\\"name\\\": \\\"john\\\"}\").isPresent());\n        assertTrue(\"Combine three data types in array\",\n                   JsonUtils.convertFromStringToJSONNode(\"[{\\\"married\\\":true,\\\"num\\\":34,\\\"name\\\":\\\"john\\\"},\" +\n                                                                 \"{\\\"married\\\":false,\\\"num\\\":43,\\\"name\\\":\\\"jane\\\"}]\").isPresent());\n        assertTrue(\"Whitespaces\",\n                   JsonUtils.convertFromStringToJSONNode(\"{\\\"is married\\\":\\\"yes, is\\\"}\").isPresent());\n    }", "signature": "void convertFromStringToJSONNode()", "full_signature": "@Test public void convertFromStringToJSONNode()", "class_method_signature": "JsonUtilsTest.convertFromStringToJSONNode()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertFalse", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode", "assertTrue", "isPresent", "convertFromStringToJSONNode"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "JsonUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtils()", "full_signature": "private  JsonUtils()", "class_method_signature": "JsonUtils.JsonUtils()", "testcase": false, "constructor": true}, {"identifier": "convertFromStringToJSONNode", "parameters": "(String json)", "modifiers": "public static", "return": "Optional<JsonNode>", "signature": "Optional<JsonNode> convertFromStringToJSONNode(String json)", "full_signature": "public static Optional<JsonNode> convertFromStringToJSONNode(String json)", "class_method_signature": "JsonUtils.convertFromStringToJSONNode(String json)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/JsonUtils.java"}, "focal_method": {"identifier": "convertFromStringToJSONNode", "parameters": "(String json)", "modifiers": "public static", "return": "Optional<JsonNode>", "body": "public static Optional<JsonNode> convertFromStringToJSONNode(String json) {\n        if (json == null || json.isEmpty()) {\n           return Optional.empty();\n        }\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            JsonNode jsonNode = objectMapper.readTree(json);\n            return Optional.of(jsonNode);\n        } catch (JsonParseException e) {\n            return Optional.empty();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Generic error during json parsing: \" + json, e);\n        }\n    }", "signature": "Optional<JsonNode> convertFromStringToJSONNode(String json)", "full_signature": "public static Optional<JsonNode> convertFromStringToJSONNode(String json)", "class_method_signature": "JsonUtils.convertFromStringToJSONNode(String json)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "empty", "readTree", "of", "empty"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}