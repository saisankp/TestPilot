{"test_class": {"identifier": "ModeShapeDateTimeValueFactoryTest", "superclass": "extends BaseValueFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final DateTime TODAY = new ModeShapeDateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "TODAY = new ModeShapeDateTime()", "var_name": "TODAY"}, {"original_string": "private static final DateTime LAST_YEAR = TODAY.minus(Duration.ofDays(365));", "modifier": "private static final", "type": "DateTime", "declarator": "LAST_YEAR = TODAY.minus(Duration.ofDays(365))", "var_name": "LAST_YEAR"}, {"original_string": "private ModeShapeDateTimeValueFactory factory;", "modifier": "private", "type": "ModeShapeDateTimeValueFactory", "declarator": "factory", "var_name": "factory"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/ModeShapeDateTimeValueFactoryTest.java"}, "test_case": {"identifier": "shouldCreateDateFromDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateDateFromDate() {\n        Calendar value = Calendar.getInstance();\n        assertThat(factory.create(value.getTime()), is(new ModeShapeDateTime(value.getTime())));\n    }", "signature": "void shouldCreateDateFromDate()", "full_signature": "@Test public void shouldCreateDateFromDate()", "class_method_signature": "ModeShapeDateTimeValueFactoryTest.shouldCreateDateFromDate()", "testcase": true, "constructor": false, "invocations": ["getInstance", "assertThat", "create", "getTime", "is", "getTime"]}, "focal_class": {"identifier": "ModeShapeDateTimeValueFactory", "superclass": "extends AbstractValueFactory<DateTime>", "interfaces": "implements DateTimeFactory", "fields": [], "methods": [{"identifier": "ModeShapeDateTimeValueFactory", "parameters": "( TextDecoder decoder,\n                                          ValueFactories factories )", "modifiers": "public", "return": "", "signature": " ModeShapeDateTimeValueFactory( TextDecoder decoder,\n                                          ValueFactories factories )", "full_signature": "public  ModeShapeDateTimeValueFactory( TextDecoder decoder,\n                                          ValueFactories factories )", "class_method_signature": "ModeShapeDateTimeValueFactory.ModeShapeDateTimeValueFactory( TextDecoder decoder,\n                                          ValueFactories factories )", "testcase": false, "constructor": true}, {"identifier": "with", "parameters": "( ValueFactories valueFactories )", "modifiers": "@Override public", "return": "DateTimeFactory", "signature": "DateTimeFactory with( ValueFactories valueFactories )", "full_signature": "@Override public DateTimeFactory with( ValueFactories valueFactories )", "class_method_signature": "ModeShapeDateTimeValueFactory.with( ValueFactories valueFactories )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( String value )", "full_signature": "@Override public DateTime create( String value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( String value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String value,\n                            TextDecoder decoder )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( String value,\n                            TextDecoder decoder )", "full_signature": "@Override public DateTime create( String value,\n                            TextDecoder decoder )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( String value,\n                            TextDecoder decoder )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( int value )", "full_signature": "@Override public DateTime create( int value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( long value )", "full_signature": "@Override public DateTime create( long value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( boolean value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( boolean value )", "full_signature": "@Override public DateTime create( boolean value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( boolean value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( float value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( float value )", "full_signature": "@Override public DateTime create( float value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( float value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( double value )", "full_signature": "@Override public DateTime create( double value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( double value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( BigDecimal value )", "full_signature": "@Override public DateTime create( BigDecimal value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Calendar value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Calendar value )", "full_signature": "@Override public DateTime create( Calendar value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Calendar value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Date value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Date value )", "full_signature": "@Override public DateTime create( Date value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Date value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( DateTime value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( DateTime value )", "full_signature": "@Override public DateTime create( DateTime value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( DateTime value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Name value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Name value )", "full_signature": "@Override public DateTime create( Name value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Name value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Path value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Path value )", "full_signature": "@Override public DateTime create( Path value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Path value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Path.Segment value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Path.Segment value )", "full_signature": "@Override public DateTime create( Path.Segment value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Path.Segment value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Reference value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( Reference value )", "full_signature": "@Override public DateTime create( Reference value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( Reference value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( URI value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( URI value )", "full_signature": "@Override public DateTime create( URI value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( URI value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( UUID value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( UUID value )", "full_signature": "@Override public DateTime create( UUID value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( UUID value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( NodeKey value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( NodeKey value )", "full_signature": "@Override public DateTime create( NodeKey value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( NodeKey value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( byte[] value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( byte[] value )", "full_signature": "@Override public DateTime create( byte[] value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( byte[] value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BinaryValue value )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( BinaryValue value )", "full_signature": "@Override public DateTime create( BinaryValue value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( BinaryValue value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( InputStream stream )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( InputStream stream )", "full_signature": "@Override public DateTime create( InputStream stream )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( InputStream stream )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create()", "full_signature": "@Override public DateTime create()", "class_method_signature": "ModeShapeDateTimeValueFactory.create()", "testcase": false, "constructor": false}, {"identifier": "createUtc", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime createUtc()", "full_signature": "@Override public DateTime createUtc()", "class_method_signature": "ModeShapeDateTimeValueFactory.createUtc()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int year,\n                            int monthOfYear,\n                            int dayOfMonth,\n                            int hourOfDay,\n                            int minuteOfHour,\n                            int secondOfMinute,\n                            int millisecondsOfSecond )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( int year,\n                            int monthOfYear,\n                            int dayOfMonth,\n                            int hourOfDay,\n                            int minuteOfHour,\n                            int secondOfMinute,\n                            int millisecondsOfSecond )", "full_signature": "@Override public DateTime create( int year,\n                            int monthOfYear,\n                            int dayOfMonth,\n                            int hourOfDay,\n                            int minuteOfHour,\n                            int secondOfMinute,\n                            int millisecondsOfSecond )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( int year,\n                            int monthOfYear,\n                            int dayOfMonth,\n                            int hourOfDay,\n                            int minuteOfHour,\n                            int secondOfMinute,\n                            int millisecondsOfSecond )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( DateTime original,\n                            long offsetInMillis )", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime create( DateTime original,\n                            long offsetInMillis )", "full_signature": "@Override public DateTime create( DateTime original,\n                            long offsetInMillis )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( DateTime original,\n                            long offsetInMillis )", "testcase": false, "constructor": false}, {"identifier": "createEmptyArray", "parameters": "( int length )", "modifiers": "@Override public", "return": "DateTime[]", "signature": "DateTime[] createEmptyArray( int length )", "full_signature": "@Override public DateTime[] createEmptyArray( int length )", "class_method_signature": "ModeShapeDateTimeValueFactory.createEmptyArray( int length )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/ModeShapeDateTimeValueFactory.java"}, "focal_method": {"identifier": "create", "parameters": "( String value )", "modifiers": "@Override public", "return": "DateTime", "body": "@Override\n    public DateTime create( String value ) {\n        if (value == null) return null;\n        try {\n            return new ModeShapeDateTime(value.trim());\n        } catch (java.time.format.DateTimeParseException err) {\n            // See if this string represents a LONG value ...\n            try {\n                Long longValue = Long.parseLong(value);\n                return new ModeShapeDateTime(longValue);\n            } catch (NumberFormatException e) {\n                // Guess it wasn't a long value ...\n                throw new ValueFormatException(value, getPropertyType(),\n                                               GraphI18n.errorConvertingType.text(String.class.getSimpleName(),\n                                                                                  org.modeshape.jcr.api.value.DateTime.class.getSimpleName(),\n                                                                                  value), err);\n            }\n        }\n    }", "signature": "DateTime create( String value )", "full_signature": "@Override public DateTime create( String value )", "class_method_signature": "ModeShapeDateTimeValueFactory.create( String value )", "testcase": false, "constructor": false, "invocations": ["trim", "parseLong", "getPropertyType", "text", "getSimpleName", "getSimpleName"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}