{"test_class": {"identifier": "RpcHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(10L).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(10L).build()", "var_name": "context"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "@Mock SpanCustomizer spanCustomizer;", "modifier": "@Mock", "type": "SpanCustomizer", "declarator": "spanCustomizer", "var_name": "spanCustomizer"}, {"original_string": "@Mock RpcRequest request;", "modifier": "@Mock", "type": "RpcRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock RpcResponse response;", "modifier": "@Mock", "type": "RpcResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock RpcRequestParser requestParser;", "modifier": "@Mock", "type": "RpcRequestParser", "declarator": "requestParser", "var_name": "requestParser"}, {"original_string": "@Mock RpcResponseParser responseParser;", "modifier": "@Mock", "type": "RpcResponseParser", "declarator": "responseParser", "var_name": "responseParser"}, {"original_string": "RpcHandler handler;", "modifier": "", "type": "RpcHandler", "declarator": "handler", "var_name": "handler"}], "file": "instrumentation/rpc/src/test/java/brave/rpc/RpcHandlerTest.java"}, "test_case": {"identifier": "handleFinish_errorRecordedInSpan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void handleFinish_errorRecordedInSpan() {\n    RuntimeException error = new RuntimeException(\"foo\");\n    when(response.error()).thenReturn(error);\n\n    handler.handleFinish(response, span);\n\n    verify(span).error(error);\n  }", "signature": "void handleFinish_errorRecordedInSpan()", "full_signature": "@Test public void handleFinish_errorRecordedInSpan()", "class_method_signature": "RpcHandlerTest.handleFinish_errorRecordedInSpan()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "error", "handleFinish", "error", "verify"]}, "focal_class": {"identifier": "RpcHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "final RpcRequestParser requestParser;", "modifier": "final", "type": "RpcRequestParser", "declarator": "requestParser", "var_name": "requestParser"}, {"original_string": "final RpcResponseParser responseParser;", "modifier": "final", "type": "RpcResponseParser", "declarator": "responseParser", "var_name": "responseParser"}], "methods": [{"identifier": "RpcHandler", "parameters": "(RpcRequestParser requestParser, RpcResponseParser responseParser)", "modifiers": "", "return": "", "signature": " RpcHandler(RpcRequestParser requestParser, RpcResponseParser responseParser)", "full_signature": "  RpcHandler(RpcRequestParser requestParser, RpcResponseParser responseParser)", "class_method_signature": "RpcHandler.RpcHandler(RpcRequestParser requestParser, RpcResponseParser responseParser)", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(Req request, Span span)", "modifiers": "", "return": "Span", "signature": "Span handleStart(Req request, Span span)", "full_signature": " Span handleStart(Req request, Span span)", "class_method_signature": "RpcHandler.handleStart(Req request, Span span)", "testcase": false, "constructor": false}, {"identifier": "parseRequest", "parameters": "(Req request, Span span)", "modifiers": "", "return": "void", "signature": "void parseRequest(Req request, Span span)", "full_signature": " void parseRequest(Req request, Span span)", "class_method_signature": "RpcHandler.parseRequest(Req request, Span span)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(Resp response, Span span)", "modifiers": "", "return": "void", "signature": "void parseResponse(Resp response, Span span)", "full_signature": " void parseResponse(Resp response, Span span)", "class_method_signature": "RpcHandler.parseResponse(Resp response, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleFinish", "parameters": "(Resp response, Span span)", "modifiers": "", "return": "void", "signature": "void handleFinish(Resp response, Span span)", "full_signature": " void handleFinish(Resp response, Span span)", "class_method_signature": "RpcHandler.handleFinish(Resp response, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/rpc/src/main/java/brave/rpc/RpcHandler.java"}, "focal_method": {"identifier": "handleFinish", "parameters": "(Resp response, Span span)", "modifiers": "", "return": "void", "body": "void handleFinish(Resp response, Span span) {\n    if (response == null) throw new NullPointerException(\"response == null\");\n    if (span.isNoop()) return;\n\n    if (response.error() != null) {\n      span.error(response.error()); // Ensures MutableSpan.error() for SpanHandler\n    }\n\n    try {\n      parseResponse(response, span);\n    } catch (Throwable t) {\n      propagateIfFatal(t);\n      Platform.get().log(\"error parsing response {0}\", response, t);\n    } finally {\n      long finishTimestamp = response.finishTimestamp();\n      if (finishTimestamp == 0L) {\n        span.finish();\n      } else {\n        span.finish(finishTimestamp);\n      }\n    }\n  }", "signature": "void handleFinish(Resp response, Span span)", "full_signature": " void handleFinish(Resp response, Span span)", "class_method_signature": "RpcHandler.handleFinish(Resp response, Span span)", "testcase": false, "constructor": false, "invocations": ["isNoop", "error", "error", "error", "parseResponse", "propagateIfFatal", "log", "get", "finishTimestamp", "finish", "finish"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}