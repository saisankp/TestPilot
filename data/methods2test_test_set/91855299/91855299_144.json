{"test_class": {"identifier": "CameraUrlGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/cameraserver/src/test/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraUrlGeneratorTest.java"}, "test_case": {"identifier": "testGenerateHttpParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateHttpParams() {\n    Map<String, String> commands = new HashMap<>();\n    String baseUrl = \"http://myCode:1111\";\n    String params = CameraUrlGenerator.addHttpParams(baseUrl, commands);\n    assertEquals(baseUrl, params);\n\n    commands.put(\"foo\", \"bar\");\n    params = CameraUrlGenerator.addHttpParams(baseUrl, commands);\n    assertEquals(baseUrl + \"?foo=bar\", params);\n\n    commands.put(\"baz\", \"buq\");\n    params = CameraUrlGenerator.addHttpParams(baseUrl, commands);\n    assertEquals(baseUrl + \"?foo=bar&baz=buq\", params);\n  }", "signature": "void testGenerateHttpParams()", "full_signature": "@Test public void testGenerateHttpParams()", "class_method_signature": "CameraUrlGeneratorTest.testGenerateHttpParams()", "testcase": true, "constructor": false, "invocations": ["addHttpParams", "assertEquals", "put", "addHttpParams", "assertEquals", "put", "addHttpParams", "assertEquals"]}, "focal_class": {"identifier": "CameraUrlGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CameraServerSource source;", "modifier": "private final", "type": "CameraServerSource", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "CameraUrlGenerator", "parameters": "(CameraServerSource source)", "modifiers": "public", "return": "", "signature": " CameraUrlGenerator(CameraServerSource source)", "full_signature": "public  CameraUrlGenerator(CameraServerSource source)", "class_method_signature": "CameraUrlGenerator.CameraUrlGenerator(CameraServerSource source)", "testcase": false, "constructor": true}, {"identifier": "generateUrls", "parameters": "(String[] baseUrls)", "modifiers": "public", "return": "String[]", "signature": "String[] generateUrls(String[] baseUrls)", "full_signature": "public String[] generateUrls(String[] baseUrls)", "class_method_signature": "CameraUrlGenerator.generateUrls(String[] baseUrls)", "testcase": false, "constructor": false}, {"identifier": "generateUrls", "parameters": "(Map<String, String> commands, String[] baseUrls)", "modifiers": "@VisibleForTesting static", "return": "String[]", "signature": "String[] generateUrls(Map<String, String> commands, String[] baseUrls)", "full_signature": "@VisibleForTesting static String[] generateUrls(Map<String, String> commands, String[] baseUrls)", "class_method_signature": "CameraUrlGenerator.generateUrls(Map<String, String> commands, String[] baseUrls)", "testcase": false, "constructor": false}, {"identifier": "addHttpParams", "parameters": "(String input, Map<String, String> commands)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String addHttpParams(String input, Map<String, String> commands)", "full_signature": "@VisibleForTesting static String addHttpParams(String input, Map<String, String> commands)", "class_method_signature": "CameraUrlGenerator.addHttpParams(String input, Map<String, String> commands)", "testcase": false, "constructor": false}, {"identifier": "encodeUri", "parameters": "(URI uri, String queryStr)", "modifiers": "private static", "return": "String", "signature": "String encodeUri(URI uri, String queryStr)", "full_signature": "private static String encodeUri(URI uri, String queryStr)", "class_method_signature": "CameraUrlGenerator.encodeUri(URI uri, String queryStr)", "testcase": false, "constructor": false}, {"identifier": "httpUrlEncode", "parameters": "(Map.Entry<String, String> rawCommand)", "modifiers": "private static", "return": "String", "signature": "String httpUrlEncode(Map.Entry<String, String> rawCommand)", "full_signature": "private static String httpUrlEncode(Map.Entry<String, String> rawCommand)", "class_method_signature": "CameraUrlGenerator.httpUrlEncode(Map.Entry<String, String> rawCommand)", "testcase": false, "constructor": false}], "file": "plugins/cameraserver/src/main/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraUrlGenerator.java"}, "focal_method": {"identifier": "addHttpParams", "parameters": "(String input, Map<String, String> commands)", "modifiers": "@VisibleForTesting static", "return": "String", "body": "@VisibleForTesting\n  static String addHttpParams(String input, Map<String, String> commands) {\n    if (commands.isEmpty()) {\n      return input;\n    }\n    // Parse the URI\n    URI uri;\n    try {\n      uri = new URI(input);\n    } catch (URISyntaxException ex) {\n      return input;\n    }\n\n    String query = uri.getQuery();\n\n    if (query != null) {\n      // Handle the NI special case\n      String niName = commands.get(\"name\");\n\n      String[] existingCommands = query.split(\"&\");\n      for (String command : existingCommands) {\n        String[] commandSplit = command.split(\"=\");\n        if (commandSplit.length != 2) {\n          continue;\n        }\n        commands.put(URLDecoder.decode(commandSplit[0], StandardCharsets.UTF_8),\n                     URLDecoder.decode(commandSplit[1], StandardCharsets.UTF_8));\n      }\n      if (niName != null) {\n        commands.put(\"name\", niName);\n      }\n    }\n\n    var queryStr = commands.entrySet().stream()\n        .map(CameraUrlGenerator::httpUrlEncode)\n        .collect(Collectors.joining(\"&\"));\n    return encodeUri(uri, queryStr);\n\n  }", "signature": "String addHttpParams(String input, Map<String, String> commands)", "full_signature": "@VisibleForTesting static String addHttpParams(String input, Map<String, String> commands)", "class_method_signature": "CameraUrlGenerator.addHttpParams(String input, Map<String, String> commands)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getQuery", "get", "split", "split", "put", "decode", "decode", "put", "collect", "map", "stream", "entrySet", "joining", "encodeUri"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}