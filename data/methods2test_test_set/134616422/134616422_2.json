{"test_class": {"identifier": "CaseConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "conjure-generator-common/src/test/java/com/palantir/conjure/CaseConverterTest.java"}, "test_case": {"identifier": "convertFromSnakeCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertFromSnakeCase() {\n        assertThat(CaseConverter.toCase(\"foo_bar_baz\", CaseConverter.Case.KEBAB_CASE))\n                .isEqualTo(\"foo-bar-baz\");\n        assertThat(CaseConverter.toCase(\"foo_bar_baz\", CaseConverter.Case.LOWER_CAMEL_CASE))\n                .isEqualTo(\"fooBarBaz\");\n    }", "signature": "void convertFromSnakeCase()", "full_signature": "@Test public void convertFromSnakeCase()", "class_method_signature": "CaseConverterTest.convertFromSnakeCase()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "toCase", "isEqualTo", "assertThat", "toCase"]}, "focal_class": {"identifier": "CaseConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Pattern CAMEL_CASE_PATTERN = Pattern.compile(\"^[a-z]([A-Z]{1,2}[a-z0-9]|[a-z0-9])*[A-Z]?$\");", "modifier": "public static final", "type": "Pattern", "declarator": "CAMEL_CASE_PATTERN = Pattern.compile(\"^[a-z]([A-Z]{1,2}[a-z0-9]|[a-z0-9])*[A-Z]?$\")", "var_name": "CAMEL_CASE_PATTERN"}, {"original_string": "public static final Pattern KEBAB_CASE_PATTERN =\n            Pattern.compile(\"^[a-z]((-[a-z]){1,2}[a-z0-9]|[a-z0-9])*(-[a-z])?$\");", "modifier": "public static final", "type": "Pattern", "declarator": "KEBAB_CASE_PATTERN =\n            Pattern.compile(\"^[a-z]((-[a-z]){1,2}[a-z0-9]|[a-z0-9])*(-[a-z])?$\")", "var_name": "KEBAB_CASE_PATTERN"}, {"original_string": "public static final Pattern SNAKE_CASE_PATTERN =\n            Pattern.compile(\"^[a-z]((_[a-z]){1,2}[a-z0-9]|[a-z0-9])*(_[a-z])?$\");", "modifier": "public static final", "type": "Pattern", "declarator": "SNAKE_CASE_PATTERN =\n            Pattern.compile(\"^[a-z]((_[a-z]){1,2}[a-z0-9]|[a-z0-9])*(_[a-z])?$\")", "var_name": "SNAKE_CASE_PATTERN"}], "methods": [{"identifier": "CaseConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " CaseConverter()", "full_signature": "private  CaseConverter()", "class_method_signature": "CaseConverter.CaseConverter()", "testcase": false, "constructor": true}, {"identifier": "toCase", "parameters": "(String name, Case targetCase)", "modifiers": "public static", "return": "String", "signature": "String toCase(String name, Case targetCase)", "full_signature": "public static String toCase(String name, Case targetCase)", "class_method_signature": "CaseConverter.toCase(String name, Case targetCase)", "testcase": false, "constructor": false}, {"identifier": "nameCase", "parameters": "(String name)", "modifiers": "private static", "return": "Case", "signature": "Case nameCase(String name)", "full_signature": "private static Case nameCase(String name)", "class_method_signature": "CaseConverter.nameCase(String name)", "testcase": false, "constructor": false}], "file": "conjure-generator-common/src/main/java/com/palantir/conjure/CaseConverter.java"}, "focal_method": {"identifier": "toCase", "parameters": "(String name, Case targetCase)", "modifiers": "public static", "return": "String", "body": "public static String toCase(String name, Case targetCase) {\n        return nameCase(name).convertTo(name, targetCase);\n    }", "signature": "String toCase(String name, Case targetCase)", "full_signature": "public static String toCase(String name, Case targetCase)", "class_method_signature": "CaseConverter.toCase(String name, Case targetCase)", "testcase": false, "constructor": false, "invocations": ["convertTo", "nameCase"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}