{"test_class": {"identifier": "AccessTokenResponseCacheEntryTest", "superclass": "", "interfaces": "", "fields": [], "file": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/AccessTokenResponseCacheEntryTest.java"}, "test_case": {"identifier": "testAccessTokenResponseCacheEntryIsExpired", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccessTokenResponseCacheEntryIsExpired() throws InterruptedException {\n\n        AccessTokenResponse tokenResponse = new AccessTokenResponse();\n        tokenResponse.setExpires_in(100);\n\n        AccessTokenResponseCacheEntry entry = new AccessTokenResponseCacheEntry(tokenResponse);\n        assertFalse(entry.isExpired(100));\n        assertFalse(entry.isExpired(200));\n        assertFalse(entry.isExpired(-1));\n        assertFalse(entry.isExpired(0));\n        assertTrue(entry.isExpired(500));\n\n        AccessTokenResponse tokenResponse2 = new AccessTokenResponse();\n        tokenResponse2.setExpires_in(1);\n\n        AccessTokenResponseCacheEntry entry2 = new AccessTokenResponseCacheEntry(tokenResponse2);\n        Thread.sleep(2000);\n\n        assertTrue(entry2.isExpired(100));\n        assertTrue(entry2.isExpired(200));\n        assertTrue(entry2.isExpired(-1));\n        assertTrue(entry2.isExpired(500));\n        assertTrue(entry2.isExpired(0));\n\n        AccessTokenResponse tokenResponse3 = new AccessTokenResponse();\n        tokenResponse3.setExpires_in(4);\n\n        AccessTokenResponseCacheEntry entry3 = new AccessTokenResponseCacheEntry(tokenResponse3);\n        Thread.sleep(2000);\n\n        assertFalse(entry3.isExpired(4));\n        assertFalse(entry3.isExpired(0));\n\n        Thread.sleep(2000);\n\n        assertTrue(entry3.isExpired(4));\n        assertTrue(entry3.isExpired(0));\n    }", "signature": "void testAccessTokenResponseCacheEntryIsExpired()", "full_signature": "@Test public void testAccessTokenResponseCacheEntryIsExpired()", "class_method_signature": "AccessTokenResponseCacheEntryTest.testAccessTokenResponseCacheEntryIsExpired()", "testcase": true, "constructor": false, "invocations": ["setExpires_in", "assertFalse", "isExpired", "assertFalse", "isExpired", "assertFalse", "isExpired", "assertFalse", "isExpired", "assertTrue", "isExpired", "setExpires_in", "sleep", "assertTrue", "isExpired", "assertTrue", "isExpired", "assertTrue", "isExpired", "assertTrue", "isExpired", "assertTrue", "isExpired", "setExpires_in", "sleep", "assertFalse", "isExpired", "assertFalse", "isExpired", "sleep", "assertTrue", "isExpired", "assertTrue", "isExpired"]}, "focal_class": {"identifier": "AccessTokenResponseCacheEntry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AccessTokenResponse accessTokenResponse;", "modifier": "private", "type": "AccessTokenResponse", "declarator": "accessTokenResponse", "var_name": "accessTokenResponse"}, {"original_string": "long expiryTime;", "modifier": "", "type": "long", "declarator": "expiryTime", "var_name": "expiryTime"}, {"original_string": "long serverExpirySecs;", "modifier": "", "type": "long", "declarator": "serverExpirySecs", "var_name": "serverExpirySecs"}], "methods": [{"identifier": "AccessTokenResponseCacheEntry", "parameters": "(AccessTokenResponse accessTokenResponse)", "modifiers": "", "return": "", "signature": " AccessTokenResponseCacheEntry(AccessTokenResponse accessTokenResponse)", "full_signature": "  AccessTokenResponseCacheEntry(AccessTokenResponse accessTokenResponse)", "class_method_signature": "AccessTokenResponseCacheEntry.AccessTokenResponseCacheEntry(AccessTokenResponse accessTokenResponse)", "testcase": false, "constructor": true}, {"identifier": "isExpired", "parameters": "(long expirySeconds)", "modifiers": "public", "return": "boolean", "signature": "boolean isExpired(long expirySeconds)", "full_signature": "public boolean isExpired(long expirySeconds)", "class_method_signature": "AccessTokenResponseCacheEntry.isExpired(long expirySeconds)", "testcase": false, "constructor": false}, {"identifier": "accessTokenResponse", "parameters": "()", "modifiers": "public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse accessTokenResponse()", "full_signature": "public AccessTokenResponse accessTokenResponse()", "class_method_signature": "AccessTokenResponseCacheEntry.accessTokenResponse()", "testcase": false, "constructor": false}], "file": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AccessTokenResponseCacheEntry.java"}, "focal_method": {"identifier": "isExpired", "parameters": "(long expirySeconds)", "modifiers": "public", "return": "boolean", "body": "public boolean isExpired(long expirySeconds) {\n\n        // before returning our cache hit we need to make sure it\n        // it was at least 1/4th time left before the token expires\n        // if the expiryTime is -1 then we return the token as\n        // long as its not expired\n\n        long now = System.currentTimeMillis() / 1000;\n        if (expirySeconds == -1) {\n            return expiryTime <= now;\n        }\n\n        // if we have no expiry seconds specified, then we're going\n        // to use the original server expiry seconds specified in\n        // the token response object\n\n        if (expirySeconds == 0) {\n            expirySeconds = serverExpirySecs;\n        }\n        return (expiryTime < System.currentTimeMillis() / 1000 + expirySeconds / 4);\n    }", "signature": "boolean isExpired(long expirySeconds)", "full_signature": "public boolean isExpired(long expirySeconds)", "class_method_signature": "AccessTokenResponseCacheEntry.isExpired(long expirySeconds)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "currentTimeMillis"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}