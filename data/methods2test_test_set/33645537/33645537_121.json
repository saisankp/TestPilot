{"test_class": {"identifier": "PartitionListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PartitionList partitionList;", "modifier": "private", "type": "PartitionList", "declarator": "partitionList", "var_name": "partitionList"}], "file": "algs/src/test/java/com/github/pedrovgs/problem60/PartitionListTest.java"}, "test_case": {"identifier": "shouldSplitListUsingX", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldSplitListUsingX() {\n    ListNode<Integer> list = createList(new int[] { 3, 1, 2 });\n\n    ListNode<Integer> result = partitionList.split(list, 2);\n\n    assertListContainsElements(new Integer[] { 1, 2, 3 }, result);\n  }", "signature": "void shouldSplitListUsingX()", "full_signature": "@Test public void shouldSplitListUsingX()", "class_method_signature": "PartitionListTest.shouldSplitListUsingX()", "testcase": true, "constructor": false, "invocations": ["createList", "split", "assertListContainsElements"]}, "focal_class": {"identifier": "PartitionList", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "split", "parameters": "(ListNode<Integer> list, int x)", "modifiers": "public", "return": "ListNode<Integer>", "signature": "ListNode<Integer> split(ListNode<Integer> list, int x)", "full_signature": "public ListNode<Integer> split(ListNode<Integer> list, int x)", "class_method_signature": "PartitionList.split(ListNode<Integer> list, int x)", "testcase": false, "constructor": false}, {"identifier": "mergeLists", "parameters": "(ListNode<Integer> before, ListNode<Integer> after)", "modifiers": "private", "return": "ListNode<Integer>", "signature": "ListNode<Integer> mergeLists(ListNode<Integer> before, ListNode<Integer> after)", "full_signature": "private ListNode<Integer> mergeLists(ListNode<Integer> before, ListNode<Integer> after)", "class_method_signature": "PartitionList.mergeLists(ListNode<Integer> before, ListNode<Integer> after)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(ListNode<Integer> list)", "modifiers": "private", "return": "void", "signature": "void validateInput(ListNode<Integer> list)", "full_signature": "private void validateInput(ListNode<Integer> list)", "class_method_signature": "PartitionList.validateInput(ListNode<Integer> list)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem60/PartitionList.java"}, "focal_method": {"identifier": "split", "parameters": "(ListNode<Integer> list, int x)", "modifiers": "public", "return": "ListNode<Integer>", "body": "public ListNode<Integer> split(ListNode<Integer> list, int x) {\n    validateInput(list);\n\n    ListNode<Integer> before = null;\n    ListNode<Integer> after = null;\n\n    while (list != null) {\n      ListNode<Integer> next = list.getNext();\n      if (list.getData() < x) {\n        list.setNext(before);\n        before = list;\n      } else {\n        list.setNext(after);\n        after = list;\n      }\n      list = next;\n    }\n\n    if (before == null) {\n      return after;\n    }\n\n    ListNode<Integer> result = mergeLists(before, after);\n\n    return result;\n  }", "signature": "ListNode<Integer> split(ListNode<Integer> list, int x)", "full_signature": "public ListNode<Integer> split(ListNode<Integer> list, int x)", "class_method_signature": "PartitionList.split(ListNode<Integer> list, int x)", "testcase": false, "constructor": false, "invocations": ["validateInput", "getNext", "getData", "setNext", "setNext", "mergeLists"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}