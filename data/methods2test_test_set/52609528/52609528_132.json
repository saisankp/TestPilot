{"test_class": {"identifier": "KafkaTopicExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KafkaTopicExtractor extractor;", "modifier": "private", "type": "KafkaTopicExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private final String PREFIX = \"/playground/server/streaming/\";", "modifier": "private final", "type": "String", "declarator": "PREFIX = \"/playground/server/streaming/\"", "var_name": "PREFIX"}], "file": "gateleen-kafka/src/test/java/org/swisspush/gateleen/kafka/KafkaTopicExtractorTest.java"}, "test_case": {"identifier": "validTopic", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validTopic(TestContext context) {\n        TopicRequest request = new TopicRequest(PREFIX + \"my.topic.x\");\n        final Optional<String> optTopic = extractor.extractTopic(request);\n        context.assertTrue(optTopic.isPresent());\n        context.assertEquals(\"my.topic.x\", optTopic.get());\n\n        TopicRequest request2 = new TopicRequest(PREFIX + \"abc/def/ghi/123\");\n        final Optional<String> optTopic2 = extractor.extractTopic(request2);\n        context.assertTrue(optTopic2.isPresent());\n        context.assertEquals(\"abc/def/ghi/123\", optTopic2.get());\n    }", "signature": "void validTopic(TestContext context)", "full_signature": "@Test public void validTopic(TestContext context)", "class_method_signature": "KafkaTopicExtractorTest.validTopic(TestContext context)", "testcase": true, "constructor": false, "invocations": ["extractTopic", "assertTrue", "isPresent", "assertEquals", "get", "extractTopic", "assertTrue", "isPresent", "assertEquals", "get"]}, "focal_class": {"identifier": "KafkaTopicExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String streamingPath;", "modifier": "private final", "type": "String", "declarator": "streamingPath", "var_name": "streamingPath"}], "methods": [{"identifier": "KafkaTopicExtractor", "parameters": "(String streamingPath)", "modifiers": "", "return": "", "signature": " KafkaTopicExtractor(String streamingPath)", "full_signature": "  KafkaTopicExtractor(String streamingPath)", "class_method_signature": "KafkaTopicExtractor.KafkaTopicExtractor(String streamingPath)", "testcase": false, "constructor": true}, {"identifier": "extractTopic", "parameters": "(HttpServerRequest request)", "modifiers": "", "return": "Optional<String>", "signature": "Optional<String> extractTopic(HttpServerRequest request)", "full_signature": " Optional<String> extractTopic(HttpServerRequest request)", "class_method_signature": "KafkaTopicExtractor.extractTopic(HttpServerRequest request)", "testcase": false, "constructor": false}], "file": "gateleen-kafka/src/main/java/org/swisspush/gateleen/kafka/KafkaTopicExtractor.java"}, "focal_method": {"identifier": "extractTopic", "parameters": "(HttpServerRequest request)", "modifiers": "", "return": "Optional<String>", "body": "Optional<String> extractTopic(HttpServerRequest request) {\n        final Logger requestLog = RequestLoggerFactory.getLogger(KafkaTopicExtractor.class, request);\n        String topic = org.apache.commons.lang3.StringUtils.removeStart(request.uri(), streamingPath);\n        if (StringUtils.isNotEmptyTrimmed(topic)) {\n            return Optional.of(topic);\n        }\n        requestLog.warn(\"Extracted an empty string as topic from uri \" + request.uri());\n        return Optional.empty();\n    }", "signature": "Optional<String> extractTopic(HttpServerRequest request)", "full_signature": " Optional<String> extractTopic(HttpServerRequest request)", "class_method_signature": "KafkaTopicExtractor.extractTopic(HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["getLogger", "removeStart", "uri", "isNotEmptyTrimmed", "of", "warn", "uri", "empty"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}