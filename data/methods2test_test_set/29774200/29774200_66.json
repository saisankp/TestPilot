{"test_class": {"identifier": "TeamCityConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TeamCityConnection teamCityConnection;", "modifier": "", "type": "TeamCityConnection", "declarator": "teamCityConnection", "var_name": "teamCityConnection"}, {"original_string": "@Mock\n    TeamCity teamCity;", "modifier": "@Mock", "type": "TeamCity", "declarator": "teamCity", "var_name": "teamCity"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/teamcity/TeamCityConnectionTest.java"}, "test_case": {"identifier": "should_fail_when_passing_empty_string", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void should_fail_when_passing_empty_string() {\n        teamCityConnection.connect(\"\", \"\", \"\");\n    }", "signature": "void should_fail_when_passing_empty_string()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void should_fail_when_passing_empty_string()", "class_method_signature": "TeamCityConnectionTest.should_fail_when_passing_empty_string()", "testcase": true, "constructor": false, "invocations": ["connect"]}, "focal_class": {"identifier": "TeamCityConnection", "superclass": "", "interfaces": "implements BuildCapability, TestCapability, ViewCapability", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TeamCityConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TeamCityConnection.class)", "var_name": "LOG"}, {"original_string": "private boolean connected;", "modifier": "private", "type": "boolean", "declarator": "connected", "var_name": "connected"}, {"original_string": "@VisibleForTesting\n    TeamCity teamCity;", "modifier": "@VisibleForTesting", "type": "TeamCity", "declarator": "teamCity", "var_name": "teamCity"}], "methods": [{"identifier": "connect", "parameters": "(String url, String login, String password)", "modifiers": "@Override public", "return": "void", "signature": "void connect(String url, String login, String password)", "full_signature": "@Override public void connect(String url, String login, String password)", "class_method_signature": "TeamCityConnection.connect(String url, String login, String password)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TeamCityConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getDescription(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.getDescription(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(ProjectKey projectKey)", "modifiers": "@Override public", "return": "SoftwareProjectId", "signature": "SoftwareProjectId identify(ProjectKey projectKey)", "full_signature": "@Override public SoftwareProjectId identify(ProjectKey projectKey)", "class_method_signature": "TeamCityConnection.identify(ProjectKey projectKey)", "testcase": false, "constructor": false}, {"identifier": "getBuildIds", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.getBuildIds(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "listSoftwareProjectIds", "parameters": "()", "modifiers": "@Override public", "return": "Map<SoftwareProjectId, String>", "signature": "Map<SoftwareProjectId, String> listSoftwareProjectIds()", "full_signature": "@Override public Map<SoftwareProjectId, String> listSoftwareProjectIds()", "class_method_signature": "TeamCityConnection.listSoftwareProjectIds()", "testcase": false, "constructor": false}, {"identifier": "getBuildState", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "BuildState", "signature": "BuildState getBuildState(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public BuildState getBuildState(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "TeamCityConnection.getBuildState(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedFinishTime", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "Date", "signature": "Date getEstimatedFinishTime(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public Date getEstimatedFinishTime(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "TeamCityConnection.getEstimatedFinishTime(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "isBuilding", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public boolean isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "TeamCityConnection.isBuilding(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getLastBuildId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getLastBuildId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getLastBuildId(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.getLastBuildId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getMavenId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getMavenId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getMavenId(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.getMavenId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getName(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getName(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.getName(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "TeamCityConnection.isClosed()", "testcase": false, "constructor": false}, {"identifier": "getBuildTime", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "BuildTime", "signature": "BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "TeamCityConnection.getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "isProjectDisabled", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.isProjectDisabled(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildCommiters", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "List<Commiter>", "signature": "List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "TeamCityConnection.getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "analyzeUnitTests", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeUnitTests(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public TestResult analyzeUnitTests(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.analyzeUnitTests(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeIntegrationTests", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeIntegrationTests(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public TestResult analyzeIntegrationTests(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.analyzeIntegrationTests(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "addBuildIds", "parameters": "(Set<String> numbers, TeamCityBuildType buildType)", "modifiers": "private", "return": "void", "signature": "void addBuildIds(Set<String> numbers, TeamCityBuildType buildType)", "full_signature": "private void addBuildIds(Set<String> numbers, TeamCityBuildType buildType)", "class_method_signature": "TeamCityConnection.addBuildIds(Set<String> numbers, TeamCityBuildType buildType)", "testcase": false, "constructor": false}, {"identifier": "checkBuildId", "parameters": "(String buildId)", "modifiers": "private", "return": "void", "signature": "void checkBuildId(String buildId)", "full_signature": "private void checkBuildId(String buildId)", "class_method_signature": "TeamCityConnection.checkBuildId(String buildId)", "testcase": false, "constructor": false}, {"identifier": "checkConnected", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkConnected()", "full_signature": "private void checkConnected()", "class_method_signature": "TeamCityConnection.checkConnected()", "testcase": false, "constructor": false}, {"identifier": "checkSoftwareProjectId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "private", "return": "void", "signature": "void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "full_signature": "private void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "class_method_signature": "TeamCityConnection.checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "findSoftwareProjectIdsByViews", "parameters": "(List<String> views)", "modifiers": "@Override public", "return": "List<SoftwareProjectId>", "signature": "List<SoftwareProjectId> findSoftwareProjectIdsByViews(List<String> views)", "full_signature": "@Override public List<SoftwareProjectId> findSoftwareProjectIdsByViews(List<String> views)", "class_method_signature": "TeamCityConnection.findSoftwareProjectIdsByViews(List<String> views)", "testcase": false, "constructor": false}, {"identifier": "findViews", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> findViews()", "full_signature": "@Override public List<String> findViews()", "class_method_signature": "TeamCityConnection.findViews()", "testcase": false, "constructor": false}, {"identifier": "findProjectNamesByView", "parameters": "(String viewName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> findProjectNamesByView(String viewName)", "full_signature": "@Override public List<String> findProjectNamesByView(String viewName)", "class_method_signature": "TeamCityConnection.findProjectNamesByView(String viewName)", "testcase": false, "constructor": false}, {"identifier": "checkViewName", "parameters": "(String viewName)", "modifiers": "private", "return": "void", "signature": "void checkViewName(String viewName)", "full_signature": "private void checkViewName(String viewName)", "class_method_signature": "TeamCityConnection.checkViewName(String viewName)", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/teamcity/TeamCityConnection.java"}, "focal_method": {"identifier": "connect", "parameters": "(String url, String login, String password)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect(String url, String login, String password) {\n        checkNotNull(url, \"url is mandatory\");\n        if (isBlank(url)) {\n            throw new IllegalArgumentException(\"url can't be null.\");\n        }\n        if (isBlank(login)) {\n            LOG.info(\"Login is blank, new value is 'guest'\");\n            login = \"guest\";\n            password = \"\";\n        }\n        teamCity = new TeamCity(url, login, password);\n        connected = true;\n    }", "signature": "void connect(String url, String login, String password)", "full_signature": "@Override public void connect(String url, String login, String password)", "class_method_signature": "TeamCityConnection.connect(String url, String login, String password)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "isBlank", "isBlank", "info"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}