{"test_class": {"identifier": "GenericDocFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdmxprovider/src/test/java/ec/tss/tsproviders/sdmx/engine/GenericDocFactoryTest.java"}, "test_case": {"identifier": "testIsValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsValid() throws Exception {\n        GenericDocFactory factory = new GenericDocFactory();\n        assertTrue(factory.isValid(load(\"/sdmx-generic-sample.xml\")));\n        assertFalse(factory.isValid(load(\"/sdmx-compact-sample.xml\")));\n    }", "signature": "void testIsValid()", "full_signature": "@Test public void testIsValid()", "class_method_signature": "GenericDocFactoryTest.testIsValid()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isValid", "load", "assertFalse", "isValid", "load"]}, "focal_class": {"identifier": "GenericDocFactory", "superclass": "extends AbstractDocumentFactory", "interfaces": "", "fields": [{"original_string": "private static final String CONCEPT_ATTRIBUTE = \"concept\";", "modifier": "private static final", "type": "String", "declarator": "CONCEPT_ATTRIBUTE = \"concept\"", "var_name": "CONCEPT_ATTRIBUTE"}, {"original_string": "private static final String VALUE_ATTRIBUTE = \"value\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_ATTRIBUTE = \"value\"", "var_name": "VALUE_ATTRIBUTE"}, {"original_string": "private static final DataFormat DEFAULT_DATA_FORMAT = DataFormat.ROOT;", "modifier": "private static final", "type": "DataFormat", "declarator": "DEFAULT_DATA_FORMAT = DataFormat.ROOT", "var_name": "DEFAULT_DATA_FORMAT"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "GenericDocFactory.getName()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(Document doc)", "full_signature": "@Override public boolean isValid(Document doc)", "class_method_signature": "GenericDocFactory.isValid(Document doc)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "SdmxSource", "signature": "SdmxSource create(Document doc)", "full_signature": "@Override public SdmxSource create(Document doc)", "class_method_signature": "GenericDocFactory.create(Document doc)", "testcase": false, "constructor": false}, {"identifier": "hasKeyFamilyRef", "parameters": "(Node dataSetNode)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasKeyFamilyRef(Node dataSetNode)", "full_signature": "private static boolean hasKeyFamilyRef(Node dataSetNode)", "class_method_signature": "GenericDocFactory.hasKeyFamilyRef(Node dataSetNode)", "testcase": false, "constructor": false}, {"identifier": "getSdmxItems", "parameters": "(Node dataSetNode, Calendar cal)", "modifiers": "private static", "return": "ImmutableList<SdmxItem>", "signature": "ImmutableList<SdmxItem> getSdmxItems(Node dataSetNode, Calendar cal)", "full_signature": "private static ImmutableList<SdmxItem> getSdmxItems(Node dataSetNode, Calendar cal)", "class_method_signature": "GenericDocFactory.getSdmxItems(Node dataSetNode, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getSdmxGroup", "parameters": "(Node groupNode, Calendar cal)", "modifiers": "private static", "return": "SdmxGroup", "signature": "SdmxGroup getSdmxGroup(Node groupNode, Calendar cal)", "full_signature": "private static SdmxGroup getSdmxGroup(Node groupNode, Calendar cal)", "class_method_signature": "GenericDocFactory.getSdmxGroup(Node groupNode, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getGroupKeyNode", "parameters": "(Node node)", "modifiers": "private static", "return": "Optional<Node>", "signature": "Optional<Node> getGroupKeyNode(Node node)", "full_signature": "private static Optional<Node> getGroupKeyNode(Node node)", "class_method_signature": "GenericDocFactory.getGroupKeyNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNode", "parameters": "(Node node)", "modifiers": "private static", "return": "Optional<Node>", "signature": "Optional<Node> getAttributeNode(Node node)", "full_signature": "private static Optional<Node> getAttributeNode(Node node)", "class_method_signature": "GenericDocFactory.getAttributeNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getSdmxSeries", "parameters": "(Node seriesNode, Predicate<Concept> keyFilter, Calendar cal)", "modifiers": "private static", "return": "SdmxSeries", "signature": "SdmxSeries getSdmxSeries(Node seriesNode, Predicate<Concept> keyFilter, Calendar cal)", "full_signature": "private static SdmxSeries getSdmxSeries(Node seriesNode, Predicate<Concept> keyFilter, Calendar cal)", "class_method_signature": "GenericDocFactory.getSdmxSeries(Node seriesNode, Predicate<Concept> keyFilter, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getSeriesKeyNode", "parameters": "(Node node)", "modifiers": "private static", "return": "Optional<Node>", "signature": "Optional<Node> getSeriesKeyNode(Node node)", "full_signature": "private static Optional<Node> getSeriesKeyNode(Node node)", "class_method_signature": "GenericDocFactory.getSeriesKeyNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "modifiers": "private static", "return": "OptionalTsData", "signature": "OptionalTsData getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "full_signature": "private static OptionalTsData getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "class_method_signature": "GenericDocFactory.getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getPeriod", "parameters": "(Node obs)", "modifiers": "private static", "return": "String", "signature": "String getPeriod(Node obs)", "full_signature": "private static String getPeriod(Node obs)", "class_method_signature": "GenericDocFactory.getPeriod(Node obs)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Node obs)", "modifiers": "private static", "return": "String", "signature": "String getValue(Node obs)", "full_signature": "private static String getValue(Node obs)", "class_method_signature": "GenericDocFactory.getValue(Node obs)", "testcase": false, "constructor": false}, {"identifier": "getTimeFormat", "parameters": "(Node series)", "modifiers": "private static", "return": "TimeFormat", "signature": "TimeFormat getTimeFormat(Node series)", "full_signature": "private static TimeFormat getTimeFormat(Node series)", "class_method_signature": "GenericDocFactory.getTimeFormat(Node series)", "testcase": false, "constructor": false}, {"identifier": "lookupDataSetNode", "parameters": "(Document doc)", "modifiers": "private static", "return": "Optional<Node>", "signature": "Optional<Node> lookupDataSetNode(Document doc)", "full_signature": "private static Optional<Node> lookupDataSetNode(Document doc)", "class_method_signature": "GenericDocFactory.lookupDataSetNode(Document doc)", "testcase": false, "constructor": false}, {"identifier": "lookupObservations", "parameters": "(Node seriesNode)", "modifiers": "private static", "return": "Stream<Node>", "signature": "Stream<Node> lookupObservations(Node seriesNode)", "full_signature": "private static Stream<Node> lookupObservations(Node seriesNode)", "class_method_signature": "GenericDocFactory.lookupObservations(Node seriesNode)", "testcase": false, "constructor": false}, {"identifier": "lookupConcepts", "parameters": "(Node node)", "modifiers": "private static", "return": "Stream<Concept>", "signature": "Stream<Concept> lookupConcepts(Node node)", "full_signature": "private static Stream<Concept> lookupConcepts(Node node)", "class_method_signature": "GenericDocFactory.lookupConcepts(Node node)", "testcase": false, "constructor": false}, {"identifier": "toConcept", "parameters": "(Node node)", "modifiers": "private static", "return": "Concept", "signature": "Concept toConcept(Node node)", "full_signature": "private static Concept toConcept(Node node)", "class_method_signature": "GenericDocFactory.toConcept(Node node)", "testcase": false, "constructor": false}], "file": "sdmxprovider/src/main/java/ec/tss/tsproviders/sdmx/engine/GenericDocFactory.java"}, "focal_method": {"identifier": "isValid", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(Document doc) {\n        Optional<Node> dataSetNode = lookupDataSetNode(doc);\n        return dataSetNode.isPresent() && hasKeyFamilyRef(dataSetNode.get());\n    }", "signature": "boolean isValid(Document doc)", "full_signature": "@Override public boolean isValid(Document doc)", "class_method_signature": "GenericDocFactory.isValid(Document doc)", "testcase": false, "constructor": false, "invocations": ["lookupDataSetNode", "isPresent", "hasKeyFamilyRef", "get"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}