{"test_class": {"identifier": "AppGroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private AppGroupDao appGroupDao;", "modifier": "@MockBean\n    private", "type": "AppGroupDao", "declarator": "appGroupDao", "var_name": "appGroupDao"}, {"original_string": "@MockBean\n    private AppGroupService appGroupService;", "modifier": "@MockBean\n    private", "type": "AppGroupService", "declarator": "appGroupService", "var_name": "appGroupService"}, {"original_string": "private MockMvc mvc;", "modifier": "private", "type": "MockMvc", "declarator": "mvc", "var_name": "mvc"}, {"original_string": "private MockHttpSession session;", "modifier": "private", "type": "MockHttpSession", "declarator": "session", "var_name": "session"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/AppGroupControllerTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void check() throws Exception {\n        mvc.perform(MockMvcRequestBuilders.post(\"/appGroup/data\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void check()", "full_signature": "@Test public void check()", "class_method_signature": "AppGroupControllerTest.check()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "AppGroupController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AppGroupDao appGroupDao;", "modifier": "@Autowired\n    private", "type": "AppGroupDao", "declarator": "appGroupDao", "var_name": "appGroupDao"}, {"original_string": "@Autowired\n    private AppGroupService appGroupService;", "modifier": "@Autowired\n    private", "type": "AppGroupService", "declarator": "appGroupService", "var_name": "appGroupService"}], "methods": [{"identifier": "getGroupUsers", "parameters": "(@RequestBody Paging<AppGroup> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<AppGroupView>>", "signature": "ServiceResult<ListResult<AppGroupView>> getGroupUsers(@RequestBody Paging<AppGroup> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<AppGroupView>> getGroupUsers(@RequestBody Paging<AppGroup> paging)", "class_method_signature": "AppGroupController.getGroupUsers(@RequestBody Paging<AppGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "AppGroupController.add(@Validated(AddAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "AppGroupController.update(@Validated(UpdateAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "AppGroupController.delete(@Validated(DeleteAppGroup.class) @RequestBody AppGroup appGroup, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "AppGroupController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@RequestParam(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult<ConfigCheckItem>", "signature": "ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id)", "class_method_signature": "AppGroupController.check(@RequestParam(\"id\") Long id)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/AppGroupController.java"}, "focal_method": {"identifier": "check", "parameters": "(@RequestParam(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult<ConfigCheckItem>", "body": "@RequestMapping(value = \"/check\")\n    public ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id) throws Exception {\n        AppGroup appGroup = appGroupDao.getAppGroupById(id);\n        return ConfigCkeckResult.success();\n       /* TODO ConfigCheckResponse configCheckResponse = apolloAppGroup.getApolloCheckResponse(appGroup);\n        return ConfigCheckBase.checkData(configCheckResponse);*/\n    }", "signature": "ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult<ConfigCheckItem> check(@RequestParam(\"id\") Long id)", "class_method_signature": "AppGroupController.check(@RequestParam(\"id\") Long id)", "testcase": false, "constructor": false, "invocations": ["getAppGroupById", "success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}