{"test_class": {"identifier": "ReflectionSetterInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReflectionSetterInvoker reflectionSetterInvoker;", "modifier": "private", "type": "ReflectionSetterInvoker", "declarator": "reflectionSetterInvoker", "var_name": "reflectionSetterInvoker"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/util/reflection/ReflectionSetterInvokerTest.java"}, "test_case": {"identifier": "shouldInvokePrivateSetter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldInvokePrivateSetter() {\n        // given\n        ReflectionSetterInvokerTestObject testObject = new ReflectionSetterInvokerTestObject();\n\n        // when\n        boolean invoked = reflectionSetterInvoker.invokeSetter(testObject, Integer.valueOf(1));\n\n        // then\n        assertThat(invoked).isTrue();\n        assertThat(testObject.privateSetterArg).isEqualTo(1);\n    }", "signature": "void shouldInvokePrivateSetter()", "full_signature": "@Test public void shouldInvokePrivateSetter()", "class_method_signature": "ReflectionSetterInvokerTest.shouldInvokePrivateSetter()", "testcase": true, "constructor": false, "invocations": ["invokeSetter", "valueOf", "isTrue", "assertThat", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ReflectionSetterInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Class<?>, Map<Class<?>, Setter>> setterCache = new ConcurrentHashMap<Class<?>, Map<Class<?>, Setter>>();", "modifier": "private final", "type": "Map<Class<?>, Map<Class<?>, Setter>>", "declarator": "setterCache = new ConcurrentHashMap<Class<?>, Map<Class<?>, Setter>>()", "var_name": "setterCache"}], "methods": [{"identifier": "invokeSetter", "parameters": "(Object setterHostObject, Object forArg)", "modifiers": "public", "return": "boolean", "signature": "boolean invokeSetter(Object setterHostObject, Object forArg)", "full_signature": "public boolean invokeSetter(Object setterHostObject, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.invokeSetter(Object setterHostObject, Object forArg)", "testcase": false, "constructor": false}, {"identifier": "invokerSetter", "parameters": "(Method setter, Object setterHostObject, Object argument)", "modifiers": "public static", "return": "void", "signature": "void invokerSetter(Method setter, Object setterHostObject, Object argument)", "full_signature": "public static void invokerSetter(Method setter, Object setterHostObject, Object argument)", "class_method_signature": "ReflectionSetterInvoker.invokerSetter(Method setter, Object setterHostObject, Object argument)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionForSetterInvocation", "parameters": "(Exception exception, Method setter, Object setterHostObject, Object argument)", "modifiers": "private static", "return": "void", "signature": "void throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "full_signature": "private static void throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "class_method_signature": "ReflectionSetterInvoker.throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "testcase": false, "constructor": false}, {"identifier": "findSetter", "parameters": "(Class<?> setterHostClass, Object forArg)", "modifiers": "public", "return": "Method", "signature": "Method findSetter(Class<?> setterHostClass, Object forArg)", "full_signature": "public Method findSetter(Class<?> setterHostClass, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.findSetter(Class<?> setterHostClass, Object forArg)", "testcase": false, "constructor": false}, {"identifier": "lookupSetter", "parameters": "(Class<?> setterHostClass, Class<?> propertyClass)", "modifiers": "private", "return": "Method", "signature": "Method lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "full_signature": "private Method lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "class_method_signature": "ReflectionSetterInvoker.lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(Method method, Class<?> propertyClass)", "modifiers": "private", "return": "boolean", "signature": "boolean isSetter(Method method, Class<?> propertyClass)", "full_signature": "private boolean isSetter(Method method, Class<?> propertyClass)", "class_method_signature": "ReflectionSetterInvoker.isSetter(Method method, Class<?> propertyClass)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/util/reflection/ReflectionSetterInvoker.java"}, "focal_method": {"identifier": "invokeSetter", "parameters": "(Object setterHostObject, Object forArg)", "modifiers": "public", "return": "boolean", "body": "public boolean invokeSetter(Object setterHostObject, Object forArg) {\n        Method setter = findSetter(setterHostObject.getClass(), forArg);\n        if(setter == null) {\n            return false;\n        }\n        invokerSetter(setter, setterHostObject, forArg);\n        return true;\n    }", "signature": "boolean invokeSetter(Object setterHostObject, Object forArg)", "full_signature": "public boolean invokeSetter(Object setterHostObject, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.invokeSetter(Object setterHostObject, Object forArg)", "testcase": false, "constructor": false, "invocations": ["findSetter", "getClass", "invokerSetter"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}