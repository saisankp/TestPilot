{"test_class": {"identifier": "LegendTest", "superclass": "extends XMLTestCase", "interfaces": "", "fields": [], "file": "geoxygene-semio/src/test/java/fr/ign/cogit/geoxygene/semio/legend/legendContent/LegendTest.java"}, "test_case": {"identifier": "testMarshall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testMarshall() {\n      try {\n\t      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t      DocumentBuilder db;\n\t      db = dbf.newDocumentBuilder();\n\t      \n\t      Legend legend = new Legend();\n\t      legend.setName(\"Legend\");\n\t      \n\t      LegendLeaf leaf = new LegendLeaf();\n\t      leaf.setName(\"Vegetation\");\n\t      \n\t      LegendComposite root = new LegendComposite();\n\t      root.setName(\"LegendRoot\");\n\t      root.addComponent(leaf);\n\t      \n\t      legend.setLegendRoot(root);\n\t      // legend.marshall(\"target/test-classes/LegendUltraSimple2.xml\");\n\t      \n\t      /*File xml1 = new File(\"target/test-classes/LegendUltraSimple2.xml\");\n\t      Document doc1 = db.parse(xml1);\n\t      assertEquals(doc1.getDocumentElement().getChildNodes().getLength(), 3);\n\t      \n\t      File xml2 = new File(\"target/test-classes/LegendUltraSimple.xml\");\n\t      Document doc2 = db.parse(xml2);\n\t      assertEquals(doc2.getDocumentElement().getChildNodes().getLength(), 5);*/\n\t      \n\t      // assertXMLEqual(doc1, doc2);\n      \n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      \n    }", "signature": "void testMarshall()", "full_signature": "@Test public void testMarshall()", "class_method_signature": "LegendTest.testMarshall()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newDocumentBuilder", "setName", "setName", "setName", "addComponent", "setLegendRoot", "printStackTrace"]}, "focal_class": {"identifier": "Legend", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = Logger.getLogger(Legend.class.getName());", "modifier": "static", "type": "Logger", "declarator": "logger = Logger.getLogger(Legend.class.getName())", "var_name": "logger"}, {"original_string": "@XmlElement(name = \"Name\")\n\tprivate String name;", "modifier": "@XmlElement(name = \"Name\")\n\tprivate", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@XmlElement(name = \"legendRoot\")\n\tprivate LegendComponent legendRoot;", "modifier": "@XmlElement(name = \"legendRoot\")\n\tprivate", "type": "LegendComponent", "declarator": "legendRoot", "var_name": "legendRoot"}, {"original_string": "@XmlTransient\n\tprivate List<Map> maps = new ArrayList<Map>();", "modifier": "@XmlTransient\n\tprivate", "type": "List<Map>", "declarator": "maps = new ArrayList<Map>()", "var_name": "maps"}, {"original_string": "@XmlTransient\n\tprivate SemanticRelationDescriptor srd;", "modifier": "@XmlTransient\n\tprivate", "type": "SemanticRelationDescriptor", "declarator": "srd", "var_name": "srd"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Legend.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Legend.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getLegendRoot", "parameters": "()", "modifiers": "public", "return": "LegendComponent", "signature": "LegendComponent getLegendRoot()", "full_signature": "public LegendComponent getLegendRoot()", "class_method_signature": "Legend.getLegendRoot()", "testcase": false, "constructor": false}, {"identifier": "setLegendRoot", "parameters": "(LegendComponent root)", "modifiers": "public", "return": "void", "signature": "void setLegendRoot(LegendComponent root)", "full_signature": "public void setLegendRoot(LegendComponent root)", "class_method_signature": "Legend.setLegendRoot(LegendComponent root)", "testcase": false, "constructor": false}, {"identifier": "getMaps", "parameters": "()", "modifiers": "public", "return": "List<Map>", "signature": "List<Map> getMaps()", "full_signature": "public List<Map> getMaps()", "class_method_signature": "Legend.getMaps()", "testcase": false, "constructor": false}, {"identifier": "setMaps", "parameters": "(List<Map> L)", "modifiers": "public", "return": "void", "signature": "void setMaps(List<Map> L)", "full_signature": "public void setMaps(List<Map> L)", "class_method_signature": "Legend.setMaps(List<Map> L)", "testcase": false, "constructor": false}, {"identifier": "addMap", "parameters": "(Map O)", "modifiers": "public", "return": "void", "signature": "void addMap(Map O)", "full_signature": "public void addMap(Map O)", "class_method_signature": "Legend.addMap(Map O)", "testcase": false, "constructor": false}, {"identifier": "removeMap", "parameters": "(Map O)", "modifiers": "public", "return": "void", "signature": "void removeMap(Map O)", "full_signature": "public void removeMap(Map O)", "class_method_signature": "Legend.removeMap(Map O)", "testcase": false, "constructor": false}, {"identifier": "getSRD", "parameters": "()", "modifiers": "public", "return": "SemanticRelationDescriptor", "signature": "SemanticRelationDescriptor getSRD()", "full_signature": "public SemanticRelationDescriptor getSRD()", "class_method_signature": "Legend.getSRD()", "testcase": false, "constructor": false}, {"identifier": "setSRD", "parameters": "(SemanticRelationDescriptor srd)", "modifiers": "public", "return": "void", "signature": "void setSRD(SemanticRelationDescriptor srd)", "full_signature": "public void setSRD(SemanticRelationDescriptor srd)", "class_method_signature": "Legend.setSRD(SemanticRelationDescriptor srd)", "testcase": false, "constructor": false}, {"identifier": "getLeaf", "parameters": "(String name)", "modifiers": "public", "return": "LegendLeaf", "signature": "LegendLeaf getLeaf(String name)", "full_signature": "public LegendLeaf getLeaf(String name)", "class_method_signature": "Legend.getLeaf(String name)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "(String name)", "modifiers": "public", "return": "LegendComponent", "signature": "LegendComponent getComponent(String name)", "full_signature": "public LegendComponent getComponent(String name)", "class_method_signature": "Legend.getComponent(String name)", "testcase": false, "constructor": false}, {"identifier": "getTheme", "parameters": "(String name)", "modifiers": "public", "return": "LegendComposite", "signature": "LegendComposite getTheme(String name)", "full_signature": "public LegendComposite getTheme(String name)", "class_method_signature": "Legend.getTheme(String name)", "testcase": false, "constructor": false}, {"identifier": "buildLegend", "parameters": "(LegendComposite container, LegendComponent legendComponent)", "modifiers": "public static", "return": "void", "signature": "void buildLegend(LegendComposite container, LegendComponent legendComponent)", "full_signature": "public static void buildLegend(LegendComposite container, LegendComponent legendComponent)", "class_method_signature": "Legend.buildLegend(LegendComposite container, LegendComponent legendComponent)", "testcase": false, "constructor": false}, {"identifier": "unmarshall", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "Legend", "signature": "Legend unmarshall(InputStream stream)", "full_signature": "public static Legend unmarshall(InputStream stream)", "class_method_signature": "Legend.unmarshall(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "unmarshall", "parameters": "(String fileName)", "modifiers": "public static", "return": "Legend", "signature": "Legend unmarshall(String fileName)", "full_signature": "public static Legend unmarshall(String fileName)", "class_method_signature": "Legend.unmarshall(String fileName)", "testcase": false, "constructor": false}, {"identifier": "unmarshall", "parameters": "(File file)", "modifiers": "public static", "return": "Legend", "signature": "Legend unmarshall(File file)", "full_signature": "public static Legend unmarshall(File file)", "class_method_signature": "Legend.unmarshall(File file)", "testcase": false, "constructor": false}, {"identifier": "unmarshall", "parameters": "(StringReader reader)", "modifiers": "public static", "return": "Legend", "signature": "Legend unmarshall(StringReader reader)", "full_signature": "public static Legend unmarshall(StringReader reader)", "class_method_signature": "Legend.unmarshall(StringReader reader)", "testcase": false, "constructor": false}, {"identifier": "marshall", "parameters": "(Writer writer)", "modifiers": "public", "return": "void", "signature": "void marshall(Writer writer)", "full_signature": "public void marshall(Writer writer)", "class_method_signature": "Legend.marshall(Writer writer)", "testcase": false, "constructor": false}, {"identifier": "marshall", "parameters": "(OutputStream stream)", "modifiers": "public", "return": "void", "signature": "void marshall(OutputStream stream)", "full_signature": "public void marshall(OutputStream stream)", "class_method_signature": "Legend.marshall(OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "marshall", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "signature": "void marshall(String fileName)", "full_signature": "public void marshall(String fileName)", "class_method_signature": "Legend.marshall(String fileName)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Legend.toString()", "testcase": false, "constructor": false}, {"identifier": "getThemes", "parameters": "()", "modifiers": "public", "return": "List<LegendComposite>", "signature": "List<LegendComposite> getThemes()", "full_signature": "public List<LegendComposite> getThemes()", "class_method_signature": "Legend.getThemes()", "testcase": false, "constructor": false}, {"identifier": "getLeaves", "parameters": "()", "modifiers": "public", "return": "List<LegendLeaf>", "signature": "List<LegendLeaf> getLeaves()", "full_signature": "public List<LegendLeaf> getLeaves()", "class_method_signature": "Legend.getLeaves()", "testcase": false, "constructor": false}], "file": "geoxygene-semio/src/main/java/fr/ign/cogit/geoxygene/semio/legend/legendContent/Legend.java"}, "focal_method": {"identifier": "marshall", "parameters": "(Writer writer)", "modifiers": "public", "return": "void", "body": "public void marshall(Writer writer) {\n        try {\n            JAXBContext context = JAXBContext.newInstance(\n            \t\tLegend.class);\n            Marshaller m = context.createMarshaller();\n            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            m.marshal(this, writer);\n        } catch (JAXBException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void marshall(Writer writer)", "full_signature": "public void marshall(Writer writer)", "class_method_signature": "Legend.marshall(Writer writer)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createMarshaller", "setProperty", "marshal", "printStackTrace"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}