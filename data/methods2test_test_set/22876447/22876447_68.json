{"test_class": {"identifier": "PathMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PathMapper mapper;", "modifier": "private", "type": "PathMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "link-move/src/test/java/com/nhl/link/move/mapper/PathMapperTest.java"}, "test_case": {"identifier": "testExpressionForKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpressionForKey() {\n        assertEquals(\"abc = \\\"a\\\"\", mapper.expressionForKey(\"a\").toString());\n    }", "signature": "void testExpressionForKey()", "full_signature": "@Test public void testExpressionForKey()", "class_method_signature": "PathMapperTest.testExpressionForKey()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "expressionForKey"]}, "focal_class": {"identifier": "PathMapper", "superclass": "", "interfaces": "implements Mapper", "fields": [{"original_string": "private final String dbPath;", "modifier": "private final", "type": "String", "declarator": "dbPath", "var_name": "dbPath"}, {"original_string": "private Expression pathExpression;", "modifier": "private", "type": "Expression", "declarator": "pathExpression", "var_name": "pathExpression"}, {"original_string": "private Expression keyValueExpression;", "modifier": "private", "type": "Expression", "declarator": "keyValueExpression", "var_name": "keyValueExpression"}], "methods": [{"identifier": "PathMapper", "parameters": "(String dbPath)", "modifiers": "public", "return": "", "signature": " PathMapper(String dbPath)", "full_signature": "public  PathMapper(String dbPath)", "class_method_signature": "PathMapper.PathMapper(String dbPath)", "testcase": false, "constructor": true}, {"identifier": "getOrCreatePathExpression", "parameters": "()", "modifiers": "private", "return": "Expression", "signature": "Expression getOrCreatePathExpression()", "full_signature": "private Expression getOrCreatePathExpression()", "class_method_signature": "PathMapper.getOrCreatePathExpression()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateKeyValueExpression", "parameters": "()", "modifiers": "private", "return": "Expression", "signature": "Expression getOrCreateKeyValueExpression()", "full_signature": "private Expression getOrCreateKeyValueExpression()", "class_method_signature": "PathMapper.getOrCreateKeyValueExpression()", "testcase": false, "constructor": false}, {"identifier": "expressionForKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Expression", "signature": "Expression expressionForKey(Object key)", "full_signature": "@Override public Expression expressionForKey(Object key)", "class_method_signature": "PathMapper.expressionForKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "keyForSource", "parameters": "(RowProxy source)", "modifiers": "@Override public", "return": "Object", "signature": "Object keyForSource(RowProxy source)", "full_signature": "@Override public Object keyForSource(RowProxy source)", "class_method_signature": "PathMapper.keyForSource(RowProxy source)", "testcase": false, "constructor": false}, {"identifier": "keyForTarget", "parameters": "(DataObject target)", "modifiers": "@Override public", "return": "Object", "signature": "Object keyForTarget(DataObject target)", "full_signature": "@Override public Object keyForTarget(DataObject target)", "class_method_signature": "PathMapper.keyForTarget(DataObject target)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PathMapper.toString()", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/mapper/PathMapper.java"}, "focal_method": {"identifier": "expressionForKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Expression", "body": "@Override\n    public Expression expressionForKey(Object key) {\n        return getOrCreateKeyValueExpression().paramsArray(key);\n    }", "signature": "Expression expressionForKey(Object key)", "full_signature": "@Override public Expression expressionForKey(Object key)", "class_method_signature": "PathMapper.expressionForKey(Object key)", "testcase": false, "constructor": false, "invocations": ["paramsArray", "getOrCreateKeyValueExpression"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}