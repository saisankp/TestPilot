{"test_class": {"identifier": "MemoryClassSetViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MOCK_CLASS_ID = 1;", "modifier": "private static final", "type": "long", "declarator": "MOCK_CLASS_ID = 1", "var_name": "MOCK_CLASS_ID"}, {"original_string": "private static final String MOCK_CLASS_NAME = \"MockClass\";", "modifier": "private static final", "type": "String", "declarator": "MOCK_CLASS_NAME = \"MockClass\"", "var_name": "MOCK_CLASS_NAME"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@NotNull private final FakeMemoryService myMemoryService = new FakeMemoryService();", "modifier": "@NotNull private final", "type": "FakeMemoryService", "declarator": "myMemoryService = new FakeMemoryService()", "var_name": "myMemoryService"}, {"original_string": "@NotNull private final FakeIdeProfilerComponents myFakeIdeProfilerComponents = new FakeIdeProfilerComponents();", "modifier": "@NotNull private final", "type": "FakeIdeProfilerComponents", "declarator": "myFakeIdeProfilerComponents = new FakeIdeProfilerComponents()", "var_name": "myFakeIdeProfilerComponents"}, {"original_string": "@Rule public final FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryInstanceViewTestGrpc\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer), myMemoryService);", "modifier": "@Rule public final", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryInstanceViewTestGrpc\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer), myMemoryService)", "var_name": "myGrpcChannel"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "private MemoryClassSetView myClassSetView;", "modifier": "private", "type": "MemoryClassSetView", "declarator": "myClassSetView", "var_name": "myClassSetView"}, {"original_string": "private JTree myClassSetTree;", "modifier": "private", "type": "JTree", "declarator": "myClassSetTree", "var_name": "myClassSetTree"}, {"original_string": "private FakeCaptureObject myCaptureObject;", "modifier": "private", "type": "FakeCaptureObject", "declarator": "myCaptureObject", "var_name": "myCaptureObject"}, {"original_string": "private List<InstanceObject> myInstanceObjects;", "modifier": "private", "type": "List<InstanceObject>", "declarator": "myInstanceObjects", "var_name": "myInstanceObjects"}, {"original_string": "private MemoryObjectTreeNode<HeapSet> myClassifierSetHeapNode;", "modifier": "private", "type": "MemoryObjectTreeNode<HeapSet>", "declarator": "myClassifierSetHeapNode", "var_name": "myClassifierSetHeapNode"}, {"original_string": "private MemoryObjectTreeNode<MemoryObject> myClassSetRootNode;", "modifier": "private", "type": "MemoryObjectTreeNode<MemoryObject>", "declarator": "myClassSetRootNode", "var_name": "myClassSetRootNode"}, {"original_string": "private MemoryProfilerStageView myStageView;", "modifier": "private", "type": "MemoryProfilerStageView", "declarator": "myStageView", "var_name": "myStageView"}, {"original_string": "private JTree myClassifierSetTree;", "modifier": "private", "type": "JTree", "declarator": "myClassifierSetTree", "var_name": "myClassifierSetTree"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/memory/MemoryClassSetViewTest.java"}, "test_case": {"identifier": "testLazyPopulateSiblings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLazyPopulateSiblings() {\n    myCaptureObject = new FakeCaptureObject.Builder().build();\n    // create a mock class containing 209 instances\n    List<InstanceObject> fakeInstances = new ArrayList<>();\n    for (int i = 0; i < 209; i++) {\n      String name = Integer.toString(i);\n      fakeInstances.add(\n        new FakeInstanceObject.Builder(myCaptureObject, MOCK_CLASS_ID, MOCK_CLASS_NAME).setName(name).setShallowSize(i).setDepth(i)\n          .setRetainedSize(i).build());\n    }\n    myCaptureObject.addInstanceObjects(new HashSet<>(fakeInstances));\n    myStage.selectCaptureDuration(\n      new CaptureDurationData<>(1, false, false, new CaptureEntry<CaptureObject>(new Object(), () -> myCaptureObject)),\n      null);\n    myStage.selectHeapSet(myCaptureObject.getHeapSet(FakeCaptureObject.DEFAULT_HEAP_ID));\n\n    myClassifierSetTree = myStageView.getClassifierView().getTree();\n    assertThat(myClassifierSetTree).isNotNull();\n    Object classifierRoot = myClassifierSetTree.getModel().getRoot();\n    assertThat(classifierRoot).isInstanceOf(MemoryObjectTreeNode.class);\n    assertThat(((MemoryObjectTreeNode)classifierRoot).getAdapter()).isInstanceOf(HeapSet.class);\n    //noinspection unchecked\n    myClassifierSetHeapNode = (MemoryObjectTreeNode<HeapSet>)classifierRoot;\n\n    ClassifierSet classifierSet = myClassifierSetHeapNode.getAdapter().findContainingClassifierSet(fakeInstances.get(0));\n    assertThat(classifierSet).isInstanceOf(ClassSet.class);\n    myStage.selectClassSet((ClassSet)classifierSet);\n\n    myClassSetTree = myClassSetView.getTree();\n    assertThat(myClassSetTree).isNotNull();\n    Object classSetRoot = myClassSetTree.getModel().getRoot();\n    assertThat(classSetRoot).isInstanceOf(MemoryObjectTreeNode.class);\n    assertThat(((MemoryObjectTreeNode)classSetRoot).getAdapter()).isInstanceOf(ClassSet.class);\n    //noinspection unchecked\n    myClassSetRootNode = (MemoryObjectTreeNode<MemoryObject>)classSetRoot;\n\n    // View would display only the first 100 object, plus an extra node for sibling expansion.\n    assertThat(myClassSetRootNode.getChildCount()).isEqualTo(101);\n\n    // Selecting a regular node would do nothing\n    myClassSetTree.addSelectionPath(new TreePath(new Object[]{myClassSetRootNode, myClassSetRootNode.getChildAt(0)}));\n    assertThat(myClassSetRootNode.getChildCount()).isEqualTo(101);\n\n    // Selecting the last node would expand the next 100\n    myClassSetTree.addSelectionPath(new TreePath(new Object[]{myClassSetRootNode, myClassSetRootNode.getChildAt(100)}));\n    assertThat(myClassSetRootNode.getChildCount()).isEqualTo(201);\n\n    // Selecting the last node again would expand the remaining 9\n    myClassSetTree.addSelectionPath(new TreePath(new Object[]{myClassSetRootNode, myClassSetRootNode.getChildAt(200)}));\n    assertThat(myClassSetRootNode.getChildCount()).isEqualTo(209);\n  }", "signature": "void testLazyPopulateSiblings()", "full_signature": "@Test public void testLazyPopulateSiblings()", "class_method_signature": "MemoryClassSetViewTest.testLazyPopulateSiblings()", "testcase": true, "constructor": false, "invocations": ["build", "toString", "add", "build", "setRetainedSize", "setDepth", "setShallowSize", "setName", "addInstanceObjects", "selectCaptureDuration", "selectHeapSet", "getHeapSet", "getTree", "getClassifierView", "isNotNull", "assertThat", "getRoot", "getModel", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "getAdapter", "findContainingClassifierSet", "getAdapter", "get", "isInstanceOf", "assertThat", "selectClassSet", "getTree", "isNotNull", "assertThat", "getRoot", "getModel", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "getAdapter", "isEqualTo", "assertThat", "getChildCount", "addSelectionPath", "getChildAt", "isEqualTo", "assertThat", "getChildCount", "addSelectionPath", "getChildAt", "isEqualTo", "assertThat", "getChildCount", "addSelectionPath", "getChildAt", "isEqualTo", "assertThat", "getChildCount"]}, "focal_class": {"identifier": "MemoryClassSetView", "superclass": "extends AspectObserver", "interfaces": "", "fields": [{"original_string": "private static final int LABEL_COLUMN_WIDTH = 500;", "modifier": "private static final", "type": "int", "declarator": "LABEL_COLUMN_WIDTH = 500", "var_name": "LABEL_COLUMN_WIDTH"}, {"original_string": "private static final int DEFAULT_COLUMN_WIDTH = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_COLUMN_WIDTH = 80", "var_name": "DEFAULT_COLUMN_WIDTH"}, {"original_string": "@NotNull private final MemoryProfilerStage myStage;", "modifier": "@NotNull private final", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "@NotNull private final StreamingTimeline myTimeline;", "modifier": "@NotNull private final", "type": "StreamingTimeline", "declarator": "myTimeline", "var_name": "myTimeline"}, {"original_string": "@NotNull private final ContextMenuInstaller myContextMenuInstaller;", "modifier": "@NotNull private final", "type": "ContextMenuInstaller", "declarator": "myContextMenuInstaller", "var_name": "myContextMenuInstaller"}, {"original_string": "@NotNull private final Map<InstanceAttribute, AttributeColumn<MemoryObject>> myAttributeColumns = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<InstanceAttribute, AttributeColumn<MemoryObject>>", "declarator": "myAttributeColumns = new HashMap<>()", "var_name": "myAttributeColumns"}, {"original_string": "@NotNull private final JPanel myInstancesPanel = new JPanel(new BorderLayout());", "modifier": "@NotNull private final", "type": "JPanel", "declarator": "myInstancesPanel = new JPanel(new BorderLayout())", "var_name": "myInstancesPanel"}, {"original_string": "@Nullable private JComponent myColumnTree;", "modifier": "@Nullable private", "type": "JComponent", "declarator": "myColumnTree", "var_name": "myColumnTree"}, {"original_string": "@Nullable private JTree myTree;", "modifier": "@Nullable private", "type": "JTree", "declarator": "myTree", "var_name": "myTree"}, {"original_string": "@Nullable private DefaultTreeModel myTreeModel;", "modifier": "@Nullable private", "type": "DefaultTreeModel", "declarator": "myTreeModel", "var_name": "myTreeModel"}, {"original_string": "@Nullable private LazyMemoryObjectTreeNode<MemoryObject> myTreeRoot;", "modifier": "@Nullable private", "type": "LazyMemoryObjectTreeNode<MemoryObject>", "declarator": "myTreeRoot", "var_name": "myTreeRoot"}, {"original_string": "@Nullable private Comparator<MemoryObjectTreeNode<MemoryObject>> myInitialComparator;", "modifier": "@Nullable private", "type": "Comparator<MemoryObjectTreeNode<MemoryObject>>", "declarator": "myInitialComparator", "var_name": "myInitialComparator"}, {"original_string": "@Nullable private CaptureObject myCaptureObject;", "modifier": "@Nullable private", "type": "CaptureObject", "declarator": "myCaptureObject", "var_name": "myCaptureObject"}, {"original_string": "@Nullable private ClassSet myClassSet;", "modifier": "@Nullable private", "type": "ClassSet", "declarator": "myClassSet", "var_name": "myClassSet"}, {"original_string": "@Nullable private InstanceObject myInstanceObject;", "modifier": "@Nullable private", "type": "InstanceObject", "declarator": "myInstanceObject", "var_name": "myInstanceObject"}, {"original_string": "@Nullable private List<FieldObject> myFieldObjectPath;", "modifier": "@Nullable private", "type": "List<FieldObject>", "declarator": "myFieldObjectPath", "var_name": "myFieldObjectPath"}], "methods": [{"identifier": "MemoryClassSetView", "parameters": "(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "modifiers": "", "return": "", "signature": " MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "full_signature": "  MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "class_method_signature": "MemoryClassSetView.MemoryClassSetView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MemoryClassSetView.reset()", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "MemoryClassSetView.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassSetView.getTree()", "testcase": false, "constructor": false}, {"identifier": "getColumnTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JComponent", "signature": "JComponent getColumnTree()", "full_signature": "@VisibleForTesting @Nullable JComponent getColumnTree()", "class_method_signature": "MemoryClassSetView.getColumnTree()", "testcase": false, "constructor": false}, {"identifier": "initializeTree", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeTree()", "full_signature": "private void initializeTree()", "class_method_signature": "MemoryClassSetView.initializeTree()", "testcase": false, "constructor": false}, {"identifier": "installTreeContextMenus", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void installTreeContextMenus()", "full_signature": "private void installTreeContextMenus()", "class_method_signature": "MemoryClassSetView.installTreeContextMenus()", "testcase": false, "constructor": false}, {"identifier": "populateTreeContents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateTreeContents()", "full_signature": "private void populateTreeContents()", "class_method_signature": "MemoryClassSetView.populateTreeContents()", "testcase": false, "constructor": false}, {"identifier": "refreshCaptureObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshCaptureObject()", "full_signature": "private void refreshCaptureObject()", "class_method_signature": "MemoryClassSetView.refreshCaptureObject()", "testcase": false, "constructor": false}, {"identifier": "refreshClassSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshClassSet()", "full_signature": "private void refreshClassSet()", "class_method_signature": "MemoryClassSetView.refreshClassSet()", "testcase": false, "constructor": false}, {"identifier": "refreshSelectedInstance", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshSelectedInstance()", "full_signature": "private void refreshSelectedInstance()", "class_method_signature": "MemoryClassSetView.refreshSelectedInstance()", "testcase": false, "constructor": false}, {"identifier": "refreshAllInstances", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshAllInstances()", "full_signature": "private void refreshAllInstances()", "class_method_signature": "MemoryClassSetView.refreshAllInstances()", "testcase": false, "constructor": false}, {"identifier": "refreshFieldPath", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshFieldPath()", "full_signature": "private void refreshFieldPath()", "class_method_signature": "MemoryClassSetView.refreshFieldPath()", "testcase": false, "constructor": false}, {"identifier": "findSelectedInstanceNode", "parameters": "()", "modifiers": "@Nullable private", "return": "MemoryObjectTreeNode<MemoryObject>", "signature": "MemoryObjectTreeNode<MemoryObject> findSelectedInstanceNode()", "full_signature": "@Nullable private MemoryObjectTreeNode<MemoryObject> findSelectedInstanceNode()", "class_method_signature": "MemoryClassSetView.findSelectedInstanceNode()", "testcase": false, "constructor": false}, {"identifier": "selectPath", "parameters": "(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "modifiers": "private", "return": "void", "signature": "void selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "full_signature": "private void selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "class_method_signature": "MemoryClassSetView.selectPath(@NotNull MemoryObjectTreeNode<MemoryObject> targetNode)", "testcase": false, "constructor": false}, {"identifier": "findLeafNodesForFieldPath", "parameters": "(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "modifiers": "@NotNull private static", "return": "List<MemoryObjectTreeNode<MemoryObject>>", "signature": "List<MemoryObjectTreeNode<MemoryObject>> findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "full_signature": "@NotNull private static List<MemoryObjectTreeNode<MemoryObject>> findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "class_method_signature": "MemoryClassSetView.findLeafNodesForFieldPath(@NotNull MemoryObjectTreeNode<MemoryObject> parentNode,\n                                                                                    @NotNull List<FieldObject> fieldPath)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/memory/MemoryClassSetView.java"}, "focal_method": {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "body": "@VisibleForTesting\n  @Nullable\n  JTree getTree() {\n    return myTree;\n  }", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassSetView.getTree()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}