{"test_class": {"identifier": "DisjunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private Disjunction disjunction;", "modifier": "private", "type": "Disjunction", "declarator": "disjunction", "var_name": "disjunction"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}], "file": "src/edu/lclark/orego/feature/DisjunctionTest.java"}, "test_case": {"identifier": "testAt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAt() {\n\t\tString[] before = {\n\t\t\t\t\"......#\",\n\t\t\t\t\".....#.\",\n\t\t\t\t\"..#...#\",\n\t\t\t\t\".#.#...\",\n\t\t\t\t\"..#....\",\n\t\t\t\t\".......\",\n\t\t\t\t\".......\",\n\t\t};\n\t\tboard.setUpProblem(before, BLACK);\n\t\tassertFalse(disjunction.at(at(\"g6\")));\n\t\tassertTrue(disjunction.at(at(\"c4\")));\n\t\tassertTrue(disjunction.at(at(\"a2\")));\n\t\tassertTrue(disjunction.at(at(\"d3\")));\n\t}", "signature": "void testAt()", "full_signature": "@Test public void testAt()", "class_method_signature": "DisjunctionTest.testAt()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "assertFalse", "at", "at", "assertTrue", "at", "at", "assertTrue", "at", "at", "assertTrue", "at", "at"]}, "focal_class": {"identifier": "Disjunction", "superclass": "", "interfaces": "implements Predicate", "fields": [{"original_string": "private final Predicate a;", "modifier": "private final", "type": "Predicate", "declarator": "a", "var_name": "a"}, {"original_string": "private final Predicate b;", "modifier": "private final", "type": "Predicate", "declarator": "b", "var_name": "b"}], "methods": [{"identifier": "Disjunction", "parameters": "(Predicate a, Predicate b)", "modifiers": "public", "return": "", "signature": " Disjunction(Predicate a, Predicate b)", "full_signature": "public  Disjunction(Predicate a, Predicate b)", "class_method_signature": "Disjunction.Disjunction(Predicate a, Predicate b)", "testcase": false, "constructor": true}, {"identifier": "at", "parameters": "(short p)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean at(short p)", "full_signature": "@Override public boolean at(short p)", "class_method_signature": "Disjunction.at(short p)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/Disjunction.java"}, "focal_method": {"identifier": "at", "parameters": "(short p)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean at(short p) {\n\t\treturn a.at(p) || b.at(p);\n\t}", "signature": "boolean at(short p)", "full_signature": "@Override public boolean at(short p)", "class_method_signature": "Disjunction.at(short p)", "testcase": false, "constructor": false, "invocations": ["at", "at"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}