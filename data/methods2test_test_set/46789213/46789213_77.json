{"test_class": {"identifier": "DummyBooleanBuilderFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DummyBooleanOpenProtocol result;", "modifier": "private", "type": "DummyBooleanOpenProtocol", "declarator": "result", "var_name": "result"}], "file": "core/src/test/java/dk/alexandra/fresco/suite/dummy/bool/DummyBooleanBuilderFactoryTest.java"}, "test_case": {"identifier": "createBinary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createBinary() {\n    ProtocolBuilderBinary builder = mock(ProtocolBuilderBinary.class);\n    DRes<SBool> closed = mock(DRes.class);\n    DummyBooleanSBool closedOut = mock(DummyBooleanSBool.class);\n\n    when(closed.out()).thenReturn(closedOut);\n    when(closedOut.getValue()).thenReturn(true);\n    when(builder.append(any(DummyBooleanOpenProtocol.class)))\n        .then(\n            invocationOnMock -> {\n              result = invocationOnMock.getArgument(0);\n              return null;\n            });\n\n    Binary binary = new DummyBooleanBuilderFactory().createBinary(builder);\n    binary.open(closed, 2);\n\n    ResourcePool resourcePool = mock(ResourcePool.class);\n    when(resourcePool.getMyId()).thenReturn(2);\n\n    Assert.assertNotNull(result);\n    Assert.assertNull(result.out());\n    Assert.assertEquals(\n        result.evaluate(1, resourcePool, mock((Network.class))), EvaluationStatus.IS_DONE);\n    Assert.assertTrue(result.out());\n  }", "signature": "void createBinary()", "full_signature": "@Test public void createBinary()", "class_method_signature": "DummyBooleanBuilderFactoryTest.createBinary()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "out", "thenReturn", "when", "getValue", "then", "when", "append", "any", "getArgument", "createBinary", "open", "mock", "thenReturn", "when", "getMyId", "assertNotNull", "assertNull", "out", "assertEquals", "evaluate", "mock", "assertTrue", "out"]}, "focal_class": {"identifier": "DummyBooleanBuilderFactory", "superclass": "", "interfaces": "implements BuilderFactoryBinary", "fields": [{"original_string": "private final Random rand;", "modifier": "private final", "type": "Random", "declarator": "rand", "var_name": "rand"}], "methods": [{"identifier": "DummyBooleanBuilderFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " DummyBooleanBuilderFactory()", "full_signature": "public  DummyBooleanBuilderFactory()", "class_method_signature": "DummyBooleanBuilderFactory.DummyBooleanBuilderFactory()", "testcase": false, "constructor": true}, {"identifier": "createBinary", "parameters": "(ProtocolBuilderBinary builder)", "modifiers": "@Override public", "return": "Binary", "signature": "Binary createBinary(ProtocolBuilderBinary builder)", "full_signature": "@Override public Binary createBinary(ProtocolBuilderBinary builder)", "class_method_signature": "DummyBooleanBuilderFactory.createBinary(ProtocolBuilderBinary builder)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/suite/dummy/bool/DummyBooleanBuilderFactory.java"}, "focal_method": {"identifier": "createBinary", "parameters": "(ProtocolBuilderBinary builder)", "modifiers": "@Override public", "return": "Binary", "body": "@Override\n  public Binary createBinary(ProtocolBuilderBinary builder) {\n    return new Binary() {\n\n      @Override\n      public DRes<SBool> known(boolean value) {\n        return () -> new DummyBooleanSBool(value);\n      }\n\n      @Override\n      public DRes<SBool> input(boolean value, int inputParty) {\n        DummyBooleanCloseProtocol c = new DummyBooleanCloseProtocol(inputParty, () -> value);\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<SBool> randomBit() {\n        DummyBooleanNativeProtocol<SBool> c = new DummyBooleanNativeProtocol<SBool>() {\n\n          DummyBooleanSBool bit;\n\n          @Override\n          public EvaluationStatus evaluate(int round, ResourcePool resourcePool,\n              Network network) {\n            bit = new DummyBooleanSBool(rand.nextBoolean());\n            return EvaluationStatus.IS_DONE;\n          }\n\n          @Override\n          public SBool out() {\n            return bit;\n          }\n        };\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<Boolean> open(DRes<SBool> secretShare) {\n        DummyBooleanOpenProtocol c = new DummyBooleanOpenProtocol(secretShare);\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<Boolean> open(DRes<SBool> secretShare, int outputParty) {\n        DummyBooleanOpenProtocol c = new DummyBooleanOpenProtocol(secretShare, outputParty);\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<SBool> and(DRes<SBool> a, DRes<SBool> b) {\n        DummyBooleanAndProtocol c = new DummyBooleanAndProtocol(a, b);\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<SBool> xor(DRes<SBool> a, DRes<SBool> b) {\n        DummyBooleanXorProtocol c = new DummyBooleanXorProtocol(a, b);\n        builder.append(c);\n        return c;\n      }\n\n      @Override\n      public DRes<SBool> not(DRes<SBool> a) {\n        DummyBooleanNotProtocol c = new DummyBooleanNotProtocol(a);\n        builder.append(c);\n        return c;\n      }\n    };\n  }", "signature": "Binary createBinary(ProtocolBuilderBinary builder)", "full_signature": "@Override public Binary createBinary(ProtocolBuilderBinary builder)", "class_method_signature": "DummyBooleanBuilderFactory.createBinary(ProtocolBuilderBinary builder)", "testcase": false, "constructor": false, "invocations": ["append", "nextBoolean", "append", "append", "append", "append", "append", "append"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}