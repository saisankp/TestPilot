{"test_class": {"identifier": "DataSourceStatusCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataSourceStatusChecker dataSourceStatusChecker;", "modifier": "private", "type": "DataSourceStatusChecker", "declarator": "dataSourceStatusChecker", "var_name": "dataSourceStatusChecker"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java"}, "test_case": {"identifier": "testWithoutApplicationContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutApplicationContext() {\n        Status status = dataSourceStatusChecker.check();\n\n        assertThat(status.getLevel(), is(Status.Level.UNKNOWN));\n    }", "signature": "void testWithoutApplicationContext()", "full_signature": "@Test public void testWithoutApplicationContext()", "class_method_signature": "DataSourceStatusCheckerTest.testWithoutApplicationContext()", "testcase": true, "constructor": false, "invocations": ["check", "assertThat", "getLevel", "is"]}, "focal_class": {"identifier": "DataSourceStatusChecker", "superclass": "", "interfaces": "implements StatusChecker", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataSourceStatusChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataSourceStatusChecker.class)", "var_name": "logger"}], "methods": [{"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "Status", "signature": "Status check()", "full_signature": "@Override public Status check()", "class_method_signature": "DataSourceStatusChecker.check()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/DataSourceStatusChecker.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "Status", "body": "@Override\n    public Status check() {\n        Optional<ApplicationContext> context =\n                SpringExtensionFactory.getContexts().stream().filter(Objects::nonNull).findFirst();\n\n        if (!context.isPresent()) {\n            return new Status(Status.Level.UNKNOWN);\n        }\n\n        Map<String, DataSource> dataSources =\n                context.get().getBeansOfType(DataSource.class, false, false);\n        if (CollectionUtils.isEmptyMap(dataSources)) {\n            return new Status(Status.Level.UNKNOWN);\n        }\n        Status.Level level = Status.Level.OK;\n        StringBuilder buf = new StringBuilder();\n        for (Map.Entry<String, DataSource> entry : dataSources.entrySet()) {\n            DataSource dataSource = entry.getValue();\n            if (buf.length() > 0) {\n                buf.append(\", \");\n            }\n            buf.append(entry.getKey());\n\n            try (Connection connection = dataSource.getConnection()) {\n                DatabaseMetaData metaData = connection.getMetaData();\n                try (ResultSet resultSet = metaData.getTypeInfo()) {\n                    if (!resultSet.next()) {\n                        level = Status.Level.ERROR;\n                    }\n                }\n                buf.append(metaData.getURL());\n                buf.append(\"(\");\n                buf.append(metaData.getDatabaseProductName());\n                buf.append(\"-\");\n                buf.append(metaData.getDatabaseProductVersion());\n                buf.append(\")\");\n            } catch (Throwable e) {\n                logger.warn(e.getMessage(), e);\n                return new Status(level, e.getMessage());\n            }\n        }\n        return new Status(level, buf.toString());\n    }", "signature": "Status check()", "full_signature": "@Override public Status check()", "class_method_signature": "DataSourceStatusChecker.check()", "testcase": false, "constructor": false, "invocations": ["findFirst", "filter", "stream", "getContexts", "isPresent", "getBeansOfType", "get", "isEmptyMap", "entrySet", "getValue", "length", "append", "append", "getKey", "getConnection", "getMetaData", "getTypeInfo", "next", "append", "getURL", "append", "append", "getDatabaseProductName", "append", "append", "getDatabaseProductVersion", "append", "warn", "getMessage", "getMessage", "toString"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}