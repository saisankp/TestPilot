{"test_class": {"identifier": "SerializedSubscriberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Subscriber<String> observer;", "modifier": "", "type": "Subscriber<String>", "declarator": "observer", "var_name": "observer"}], "file": "rxjava/src/test/java/io/reactivex/subscribers/SerializedSubscriberTest.java"}, "test_case": {"identifier": "testSerializeNull", "parameters": "()", "modifiers": "@Test @Ignore(\"Null values not permitted\") public", "return": "void", "body": "@Test\n    @Ignore(\"Null values not permitted\")\n    public void testSerializeNull() {\n        final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (t != null && t == 0) {\n                    serial.get().onNext(null);\n                }\n                super.onNext(t);\n            }\n        };\n\n        SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n        serial.set(sobs);\n\n        sobs.onNext(0);\n\n        ts.assertValues(0, null);\n    }", "signature": "void testSerializeNull()", "full_signature": "@Test @Ignore(\"Null values not permitted\") public void testSerializeNull()", "class_method_signature": "SerializedSubscriberTest.testSerializeNull()", "testcase": true, "constructor": false, "invocations": ["onNext", "get", "onNext", "set", "onNext", "assertValues"]}, "focal_class": {"identifier": "SerializedSubscriber", "superclass": "", "interfaces": "implements FlowableSubscriber<T>, Subscription", "fields": [{"original_string": "final Subscriber<? super T> actual;", "modifier": "final", "type": "Subscriber<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "final boolean delayError;", "modifier": "final", "type": "boolean", "declarator": "delayError", "var_name": "delayError"}, {"original_string": "static final int QUEUE_LINK_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "QUEUE_LINK_SIZE = 4", "var_name": "QUEUE_LINK_SIZE"}, {"original_string": "Subscription subscription;", "modifier": "", "type": "Subscription", "declarator": "subscription", "var_name": "subscription"}, {"original_string": "boolean emitting;", "modifier": "", "type": "boolean", "declarator": "emitting", "var_name": "emitting"}, {"original_string": "AppendOnlyLinkedArrayList<Object> queue;", "modifier": "", "type": "AppendOnlyLinkedArrayList<Object>", "declarator": "queue", "var_name": "queue"}, {"original_string": "volatile boolean done;", "modifier": "volatile", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "SerializedSubscriber", "parameters": "(Subscriber<? super T> actual)", "modifiers": "public", "return": "", "signature": " SerializedSubscriber(Subscriber<? super T> actual)", "full_signature": "public  SerializedSubscriber(Subscriber<? super T> actual)", "class_method_signature": "SerializedSubscriber.SerializedSubscriber(Subscriber<? super T> actual)", "testcase": false, "constructor": true}, {"identifier": "SerializedSubscriber", "parameters": "(Subscriber<? super T> actual, boolean delayError)", "modifiers": "public", "return": "", "signature": " SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "full_signature": "public  SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "class_method_signature": "SerializedSubscriber.SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "SerializedSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "SerializedSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "SerializedSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "emitLoop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void emitLoop()", "full_signature": " void emitLoop()", "class_method_signature": "SerializedSubscriber.emitLoop()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "SerializedSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "SerializedSubscriber.cancel()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java"}, "focal_method": {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onNext(T t) {\n        if (done) {\n            return;\n        }\n        if (t == null) {\n            subscription.cancel();\n            onError(new NullPointerException(\"onNext called with null. Null values are generally not allowed in 2.x operators and sources.\"));\n            return;\n        }\n        synchronized (this) {\n            if (done) {\n                return;\n            }\n            if (emitting) {\n                AppendOnlyLinkedArrayList<Object> q = queue;\n                if (q == null) {\n                    q = new AppendOnlyLinkedArrayList<Object>(QUEUE_LINK_SIZE);\n                    queue = q;\n                }\n                q.add(NotificationLite.next(t));\n                return;\n            }\n            emitting = true;\n        }\n\n        actual.onNext(t);\n\n        emitLoop();\n    }", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedSubscriber.onNext(T t)", "testcase": false, "constructor": false, "invocations": ["cancel", "onError", "add", "next", "onNext", "emitLoop"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}