{"test_class": {"identifier": "ActorsProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RoundEnvironment mEnvironment;", "modifier": "@Mock\n    private", "type": "RoundEnvironment", "declarator": "mEnvironment", "var_name": "mEnvironment"}, {"original_string": "@Mock\n    private ModelFactory mFactory;", "modifier": "@Mock\n    private", "type": "ModelFactory", "declarator": "mFactory", "var_name": "mFactory"}, {"original_string": "@Mock\n    private ProcessingEnvironment mProcessingEnvironment;", "modifier": "@Mock\n    private", "type": "ProcessingEnvironment", "declarator": "mProcessingEnvironment", "var_name": "mProcessingEnvironment"}, {"original_string": "@Mock\n    private Filer mFiler;", "modifier": "@Mock\n    private", "type": "Filer", "declarator": "mFiler", "var_name": "mFiler"}], "file": "generator/src/test/java/com/truecaller/androidactors/ActorsProcessorTest.java"}, "test_case": {"identifier": "parseModel_interfacesList_notEmptyActorsInterfaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseModel_interfacesList_notEmptyActorsInterfaces() {\n        ActorInterfaceDescription interface1 = Mockito.mock(ActorInterfaceDescription.class);\n        ActorInterfaceDescription interface2 = Mockito.mock(ActorInterfaceDescription.class);\n        ActorInterfaceDescription interface3 = Mockito.mock(ActorInterfaceDescription.class);\n        Mockito.doReturn(interface1).doReturn(interface2).doReturn(interface3).when(mFactory).createInterfaceDescription(Mockito.<Element>any());\n\n        HashSet<Element> elements = new HashSet<>();\n        elements.add(Mockito.mock(Element.class));\n        elements.add(Mockito.mock(Element.class));\n        elements.add(Mockito.mock(Element.class));\n        Mockito.doReturn(elements).when(mEnvironment).getElementsAnnotatedWith(ActorInterface.class);\n\n        ActorParsedModel model = new ActorParsedModel();\n        model.collectInterfaces = true;\n\n        ActorsProcessor processor = new ActorsProcessor(mFactory);\n        processor.parseModel(model, mEnvironment);\n\n        for (Element element : elements) {\n            Mockito.verify(mFactory).createInterfaceDescription(element);\n        }\n        Mockito.verifyNoMoreInteractions(mFactory);\n\n        Assert.assertSame(interface1, model.interfaces.get(0));\n        Assert.assertSame(interface2, model.interfaces.get(1));\n        Assert.assertSame(interface3, model.interfaces.get(2));\n    }", "signature": "void parseModel_interfacesList_notEmptyActorsInterfaces()", "full_signature": "@Test public void parseModel_interfacesList_notEmptyActorsInterfaces()", "class_method_signature": "ActorsProcessorTest.parseModel_interfacesList_notEmptyActorsInterfaces()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "createInterfaceDescription", "when", "doReturn", "doReturn", "doReturn", "any", "add", "mock", "add", "mock", "add", "mock", "getElementsAnnotatedWith", "when", "doReturn", "parseModel", "createInterfaceDescription", "verify", "verifyNoMoreInteractions", "assertSame", "get", "assertSame", "get", "assertSame", "get"]}, "focal_class": {"identifier": "ActorsProcessor", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private final ModelFactory mModelFactory;", "modifier": "private final", "type": "ModelFactory", "declarator": "mModelFactory", "var_name": "mModelFactory"}, {"original_string": "private ActorParsedModel mParsedModel;", "modifier": "private", "type": "ActorParsedModel", "declarator": "mParsedModel", "var_name": "mParsedModel"}, {"original_string": "private ActorGeneratedModel mGeneratedModel;", "modifier": "private", "type": "ActorGeneratedModel", "declarator": "mGeneratedModel", "var_name": "mGeneratedModel"}], "methods": [{"identifier": "ActorsProcessor", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "", "signature": " ActorsProcessor()", "full_signature": "@SuppressWarnings(\"unused\") public  ActorsProcessor()", "class_method_signature": "ActorsProcessor.ActorsProcessor()", "testcase": false, "constructor": true}, {"identifier": "ActorsProcessor", "parameters": "(@NotNull ModelFactory modelFactory)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ActorsProcessor(@NotNull ModelFactory modelFactory)", "full_signature": "@VisibleForTesting  ActorsProcessor(@NotNull ModelFactory modelFactory)", "class_method_signature": "ActorsProcessor.ActorsProcessor(@NotNull ModelFactory modelFactory)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ProcessingEnvironment processingEnv)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void init(ProcessingEnvironment processingEnv)", "full_signature": "@Override public synchronized void init(ProcessingEnvironment processingEnv)", "class_method_signature": "ActorsProcessor.init(ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false}, {"identifier": "getSupportedSourceVersion", "parameters": "()", "modifiers": "@Override public", "return": "SourceVersion", "signature": "SourceVersion getSupportedSourceVersion()", "full_signature": "@Override public SourceVersion getSupportedSourceVersion()", "class_method_signature": "ActorsProcessor.getSupportedSourceVersion()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "class_method_signature": "ActorsProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "testcase": false, "constructor": false}, {"identifier": "configureModel", "parameters": "(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "modifiers": "private", "return": "void", "signature": "void configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "full_signature": "private void configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "class_method_signature": "ActorsProcessor.configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "testcase": false, "constructor": false}, {"identifier": "parseModel", "parameters": "(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "full_signature": "@VisibleForTesting void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "class_method_signature": "ActorsProcessor.parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "testcase": false, "constructor": false}, {"identifier": "validateModel", "parameters": "(@NotNull ActorParsedModel model)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean validateModel(@NotNull ActorParsedModel model)", "full_signature": "@VisibleForTesting boolean validateModel(@NotNull ActorParsedModel model)", "class_method_signature": "ActorsProcessor.validateModel(@NotNull ActorParsedModel model)", "testcase": false, "constructor": false}, {"identifier": "generateFromModel", "parameters": "(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "full_signature": "@VisibleForTesting void generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "class_method_signature": "ActorsProcessor.generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "testcase": false, "constructor": false}, {"identifier": "writeModel", "parameters": "(@NotNull ActorGeneratedModel model)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean writeModel(@NotNull ActorGeneratedModel model)", "full_signature": "@VisibleForTesting boolean writeModel(@NotNull ActorGeneratedModel model)", "class_method_signature": "ActorsProcessor.writeModel(@NotNull ActorGeneratedModel model)", "testcase": false, "constructor": false}, {"identifier": "containsAnnotation", "parameters": "(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "modifiers": "private", "return": "boolean", "signature": "boolean containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "full_signature": "private boolean containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "class_method_signature": "ActorsProcessor.containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "testcase": false, "constructor": false}], "file": "generator/src/main/java/com/truecaller/androidactors/ActorsProcessor.java"}, "focal_method": {"identifier": "parseModel", "parameters": "(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    /* package */ void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment) {\n        if (model.collectInterfaces) {\n            final Set<? extends Element> elements = environment.getElementsAnnotatedWith(ActorInterface.class);\n            for (Element element : elements) {\n                model.interfaces.add(mModelFactory.createInterfaceDescription(element));\n            }\n        }\n\n        if (model.collectPackages) {\n            Set<? extends Element> packages = environment.getElementsAnnotatedWith(ActorsPackage.class);\n            for (Element _package : packages) {\n                model.packages.add(mModelFactory.createPackageDescription(_package));\n            }\n        }\n    }", "signature": "void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "full_signature": "@VisibleForTesting void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "class_method_signature": "ActorsProcessor.parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "testcase": false, "constructor": false, "invocations": ["getElementsAnnotatedWith", "add", "createInterfaceDescription", "getElementsAnnotatedWith", "add", "createPackageDescription"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}