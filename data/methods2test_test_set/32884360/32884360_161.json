{"test_class": {"identifier": "SessionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/service/session/SessionTest.java"}, "test_case": {"identifier": "removeFromMapBeforeGetting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeFromMapBeforeGetting() {\n        Session.MapKey<Integer,String> key = Session.MapKey.mapNamed(\"foo\");\n        assertEquals(\"removal value for 1\", null, session.remove(key, 1));\n    }", "signature": "void removeFromMapBeforeGetting()", "full_signature": "@Test public void removeFromMapBeforeGetting()", "class_method_signature": "SessionTest.removeFromMapBeforeGetting()", "testcase": true, "constructor": false, "invocations": ["mapNamed", "assertEquals", "remove"]}, "focal_class": {"identifier": "Session", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final static long UNSET_NANOS = -1;", "modifier": "private final static", "type": "long", "declarator": "UNSET_NANOS = -1", "var_name": "UNSET_NANOS"}, {"original_string": "private final static AtomicLong idGenerator = new AtomicLong(0);", "modifier": "private final static", "type": "AtomicLong", "declarator": "idGenerator = new AtomicLong(0)", "var_name": "idGenerator"}, {"original_string": "private final Map<Key<?>,Object> map = new HashMap<>();", "modifier": "private final", "type": "Map<Key<?>,Object>", "declarator": "map = new HashMap<>()", "var_name": "map"}, {"original_string": "private final SessionEventListener listener;", "modifier": "private final", "type": "SessionEventListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private final long sessionId = idGenerator.getAndIncrement();", "modifier": "private final", "type": "long", "declarator": "sessionId = idGenerator.getAndIncrement()", "var_name": "sessionId"}, {"original_string": "private volatile boolean cancelCurrentQuery = false;", "modifier": "private volatile", "type": "boolean", "declarator": "cancelCurrentQuery = false", "var_name": "cancelCurrentQuery"}, {"original_string": "private long startMarkerNanos =  UNSET_NANOS;", "modifier": "private", "type": "long", "declarator": "startMarkerNanos =  UNSET_NANOS", "var_name": "startMarkerNanos"}, {"original_string": "private long timeoutAfterNanos = UNSET_NANOS;", "modifier": "private", "type": "long", "declarator": "timeoutAfterNanos = UNSET_NANOS", "var_name": "timeoutAfterNanos"}], "methods": [{"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Session.toString()", "testcase": false, "constructor": false}, {"identifier": "Session", "parameters": "(SessionEventListener listener)", "modifiers": "", "return": "", "signature": " Session(SessionEventListener listener)", "full_signature": "  Session(SessionEventListener listener)", "class_method_signature": "Session.Session(SessionEventListener listener)", "testcase": false, "constructor": true}, {"identifier": "sessionId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long sessionId()", "full_signature": "public long sessionId()", "class_method_signature": "Session.sessionId()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Session.Key<T> key)", "modifiers": "public", "return": "T", "signature": "T get(Session.Key<T> key)", "full_signature": "public T get(Session.Key<T> key)", "class_method_signature": "Session.get(Session.Key<T> key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Session.Key<T> key, T item)", "modifiers": "public", "return": "T", "signature": "T put(Session.Key<T> key, T item)", "full_signature": "public T put(Session.Key<T> key, T item)", "class_method_signature": "Session.put(Session.Key<T> key, T item)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Key<T> key)", "modifiers": "public", "return": "T", "signature": "T remove(Key<T> key)", "full_signature": "public T remove(Key<T> key)", "class_method_signature": "Session.remove(Key<T> key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(MapKey<K,V> mapKey, K key)", "modifiers": "public", "return": "V", "signature": "V get(MapKey<K,V> mapKey, K key)", "full_signature": "public V get(MapKey<K,V> mapKey, K key)", "class_method_signature": "Session.get(MapKey<K,V> mapKey, K key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(MapKey<K,V> mapKey, K key, V value)", "modifiers": "public", "return": "V", "signature": "V put(MapKey<K,V> mapKey, K key, V value)", "full_signature": "public V put(MapKey<K,V> mapKey, K key, V value)", "class_method_signature": "Session.put(MapKey<K,V> mapKey, K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(MapKey<K,V> mapKey, K key)", "modifiers": "public", "return": "V", "signature": "V remove(MapKey<K,V> mapKey, K key)", "full_signature": "public V remove(MapKey<K,V> mapKey, K key)", "class_method_signature": "Session.remove(MapKey<K,V> mapKey, K key)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(StackKey<T> key, T item)", "modifiers": "public", "return": "void", "signature": "void push(StackKey<T> key, T item)", "full_signature": "public void push(StackKey<T> key, T item)", "class_method_signature": "Session.push(StackKey<T> key, T item)", "testcase": false, "constructor": false}, {"identifier": "pop", "parameters": "(StackKey<T> key)", "modifiers": "public", "return": "T", "signature": "T pop(StackKey<T> key)", "full_signature": "public T pop(StackKey<T> key)", "class_method_signature": "Session.pop(StackKey<T> key)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(StackKey<?> key)", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty(StackKey<?> key)", "full_signature": "public boolean isEmpty(StackKey<?> key)", "class_method_signature": "Session.isEmpty(StackKey<?> key)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Key<T> key, Object o)", "modifiers": "@SuppressWarnings({\"unused\", \"unchecked\"}) private static", "return": "T", "signature": "T cast(Key<T> key, Object o)", "full_signature": "@SuppressWarnings({\"unused\", \"unchecked\"}) private static T cast(Key<T> key, Object o)", "class_method_signature": "Session.cast(Key<T> key, Object o)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Session.close()", "testcase": false, "constructor": false}, {"identifier": "cancelCurrentQuery", "parameters": "(boolean cancel)", "modifiers": "public", "return": "void", "signature": "void cancelCurrentQuery(boolean cancel)", "full_signature": "public void cancelCurrentQuery(boolean cancel)", "class_method_signature": "Session.cancelCurrentQuery(boolean cancel)", "testcase": false, "constructor": false}, {"identifier": "isCurrentQueryCanceled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCurrentQueryCanceled()", "full_signature": "public boolean isCurrentQueryCanceled()", "class_method_signature": "Session.isCurrentQueryCanceled()", "testcase": false, "constructor": false}, {"identifier": "requireTimeoutAfterSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void requireTimeoutAfterSet()", "full_signature": "private void requireTimeoutAfterSet()", "class_method_signature": "Session.requireTimeoutAfterSet()", "testcase": false, "constructor": false}, {"identifier": "hasTimeoutAfterNanos", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasTimeoutAfterNanos()", "full_signature": "public boolean hasTimeoutAfterNanos()", "class_method_signature": "Session.hasTimeoutAfterNanos()", "testcase": false, "constructor": false}, {"identifier": "getElapsedMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getElapsedMillis()", "full_signature": "public long getElapsedMillis()", "class_method_signature": "Session.getElapsedMillis()", "testcase": false, "constructor": false}, {"identifier": "getRemainingNanosBeforeTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRemainingNanosBeforeTimeout()", "full_signature": "public long getRemainingNanosBeforeTimeout()", "class_method_signature": "Session.getRemainingNanosBeforeTimeout()", "testcase": false, "constructor": false}, {"identifier": "setTimeoutAfterMillis", "parameters": "(long millis)", "modifiers": "public", "return": "void", "signature": "void setTimeoutAfterMillis(long millis)", "full_signature": "public void setTimeoutAfterMillis(long millis)", "class_method_signature": "Session.setTimeoutAfterMillis(long millis)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/service/session/Session.java"}, "focal_method": {"identifier": "remove", "parameters": "(Key<T> key)", "modifiers": "public", "return": "T", "body": "public <T> T remove(Key<T> key) {\n        return cast(key, map.remove(key));\n    }", "signature": "T remove(Key<T> key)", "full_signature": "public T remove(Key<T> key)", "class_method_signature": "Session.remove(Key<T> key)", "testcase": false, "constructor": false, "invocations": ["cast", "remove"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}