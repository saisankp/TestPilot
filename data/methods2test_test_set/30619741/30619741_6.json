{"test_class": {"identifier": "HystrixMethodHandlerTest", "superclass": "extends HystrixTestBase", "interfaces": "", "fields": [{"original_string": "private static final String SERVICE_NAME = \"TestingMicroservice\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_NAME = \"TestingMicroservice\"", "var_name": "SERVICE_NAME"}, {"original_string": "private static final String BEAN_NAME = \"TestingBean\";", "modifier": "private static final", "type": "String", "declarator": "BEAN_NAME = \"TestingBean\"", "var_name": "BEAN_NAME"}, {"original_string": "private static final String FIELD_NAME = \"testingField\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"testingField\"", "var_name": "FIELD_NAME"}, {"original_string": "private MicroserviceProxyBean microserviceProxyBean;", "modifier": "private", "type": "MicroserviceProxyBean", "declarator": "microserviceProxyBean", "var_name": "microserviceProxyBean"}, {"original_string": "private MicroserviceMethodHandler parentMethodHandler;", "modifier": "private", "type": "MicroserviceMethodHandler", "declarator": "parentMethodHandler", "var_name": "parentMethodHandler"}], "file": "hystrix-microservice-provider/src/test/java/io/silverware/microservices/providers/hystrix/execution/HystrixMethodHandlerTest.java"}, "test_case": {"identifier": "testInvokeTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testInvokeTimeout() throws Exception {\n      MethodConfig methodConfig = MethodConfig.createBuilder(SERVICE_NAME, BEAN_NAME + \":\" + FIELD_NAME)\n                                              .hystrixActive(true)\n                                              .commandProperty(CommandProperties.EXECUTION_TIMEOUT_ENABLED, Boolean.TRUE.toString())\n                                              .build();\n      ServiceConfig serviceConfig = new ServiceConfig(methodConfig);\n      HystrixMethodHandler hystrixMethodHandler = new HystrixMethodHandler(parentMethodHandler, serviceConfig);\n\n      Method method = UnstableMicroservice.class.getMethod(\"timeout\");\n      Mockito.when(parentMethodHandler.invoke(method)).thenAnswer(a -> method.invoke(UnstableMicroservice.class));\n\n      assertThatThrownBy(() -> hystrixMethodHandler.invoke(method))\n            .isInstanceOf(HystrixRuntimeException.class)\n            .hasMessageContaining(\"timed-out\");\n   }", "signature": "void testInvokeTimeout()", "full_signature": "@Test public void testInvokeTimeout()", "class_method_signature": "HystrixMethodHandlerTest.testInvokeTimeout()", "testcase": true, "constructor": false, "invocations": ["build", "commandProperty", "hystrixActive", "createBuilder", "toString", "getMethod", "thenAnswer", "when", "invoke", "invoke", "hasMessageContaining", "isInstanceOf", "assertThatThrownBy", "invoke"]}, "focal_class": {"identifier": "HystrixMethodHandler", "superclass": "extends MicroserviceMethodHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(HystrixMethodHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(HystrixMethodHandler.class)", "var_name": "log"}, {"original_string": "private final MicroserviceMethodHandler methodHandler;", "modifier": "private final", "type": "MicroserviceMethodHandler", "declarator": "methodHandler", "var_name": "methodHandler"}, {"original_string": "private final ServiceConfig serviceConfig;", "modifier": "private final", "type": "ServiceConfig", "declarator": "serviceConfig", "var_name": "serviceConfig"}, {"original_string": "private final Object fallbackService;", "modifier": "private final", "type": "Object", "declarator": "fallbackService", "var_name": "fallbackService"}], "methods": [{"identifier": "HystrixMethodHandler", "parameters": "(final MicroserviceMethodHandler methodHandler)", "modifiers": "public", "return": "", "signature": " HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "full_signature": "public  HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "class_method_signature": "HystrixMethodHandler.HystrixMethodHandler(final MicroserviceMethodHandler methodHandler)", "testcase": false, "constructor": true}, {"identifier": "HystrixMethodHandler", "parameters": "(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "modifiers": "", "return": "", "signature": " HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "full_signature": "  HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "class_method_signature": "HystrixMethodHandler.HystrixMethodHandler(final MicroserviceMethodHandler methodHandler, final ServiceConfig serviceConfig)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(final Method method, final Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(final Method method, final Object... args)", "full_signature": "@Override public Object invoke(final Method method, final Object... args)", "class_method_signature": "HystrixMethodHandler.invoke(final Method method, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "getProxyBean", "parameters": "()", "modifiers": "@Override public", "return": "MicroserviceProxyBean", "signature": "MicroserviceProxyBean getProxyBean()", "full_signature": "@Override public MicroserviceProxyBean getProxyBean()", "class_method_signature": "HystrixMethodHandler.getProxyBean()", "testcase": false, "constructor": false}, {"identifier": "getInjectionPoint", "parameters": "()", "modifiers": "@Override public", "return": "InjectionPoint", "signature": "InjectionPoint getInjectionPoint()", "full_signature": "@Override public InjectionPoint getInjectionPoint()", "class_method_signature": "HystrixMethodHandler.getInjectionPoint()", "testcase": false, "constructor": false}, {"identifier": "createCacheKey", "parameters": "(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "modifiers": "private static", "return": "String", "signature": "String createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "full_signature": "private static String createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "class_method_signature": "HystrixMethodHandler.createCacheKey(final String serviceName, final String methodName, final MethodConfig methodConfig, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "lookUpFallbackService", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object lookUpFallbackService()", "full_signature": "private Object lookUpFallbackService()", "class_method_signature": "HystrixMethodHandler.lookUpFallbackService()", "testcase": false, "constructor": false}, {"identifier": "unwrapException", "parameters": "(HystrixBadRequestException hystrixException)", "modifiers": "private", "return": "Exception", "signature": "Exception unwrapException(HystrixBadRequestException hystrixException)", "full_signature": "private Exception unwrapException(HystrixBadRequestException hystrixException)", "class_method_signature": "HystrixMethodHandler.unwrapException(HystrixBadRequestException hystrixException)", "testcase": false, "constructor": false}], "file": "hystrix-microservice-provider/src/main/java/io/silverware/microservices/providers/hystrix/execution/HystrixMethodHandler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(final Method method, final Object... args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n   public Object invoke(final Method method, final Object... args) throws Exception {\n      String serviceName = getProxyBean().getMicroserviceName();\n      String methodName = method.getName();\n\n      MethodConfig methodConfig = serviceConfig.getMethodConfig(method);\n      if (methodConfig == null) {\n         methodConfig = serviceConfig.getDefaultConfig();\n      }\n\n      // call the method without using Hystrix if it is not microservice method or no Hystrix annotation has been found\n      if (method.getDeclaringClass() == Object.class || methodConfig == null || !methodConfig.isHystrixActive()) {\n         return methodHandler.invoke(method, args);\n      }\n\n      Setter setter = methodConfig.getHystrixCommandSetter();\n\n      String cacheKey = createCacheKey(serviceName, methodName, methodConfig, args);\n\n      Callable<Object> fallback = fallbackService != null ? () -> method.invoke(fallbackService, args) : null;\n\n      HystrixCommand<Object> hystrixCommand = new Builder<>(setter, () -> methodHandler.invoke(method, args))\n            .cacheKey(cacheKey)\n            .fallback(fallback)\n            .ignoredExceptions(methodConfig.getIgnoredExceptions())\n            .build();\n\n      try {\n         return hystrixCommand.execute();\n      } catch (HystrixBadRequestException ex) {\n         throw unwrapException(ex);\n      }\n   }", "signature": "Object invoke(final Method method, final Object... args)", "full_signature": "@Override public Object invoke(final Method method, final Object... args)", "class_method_signature": "HystrixMethodHandler.invoke(final Method method, final Object... args)", "testcase": false, "constructor": false, "invocations": ["getMicroserviceName", "getProxyBean", "getName", "getMethodConfig", "getDefaultConfig", "getDeclaringClass", "isHystrixActive", "invoke", "getHystrixCommandSetter", "createCacheKey", "invoke", "build", "ignoredExceptions", "fallback", "cacheKey", "invoke", "getIgnoredExceptions", "execute", "unwrapException"]}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}