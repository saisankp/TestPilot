{"test_class": {"identifier": "ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest", "superclass": "extends ScoredClustersAllocationAlgorithm", "interfaces": "", "fields": [{"original_string": "private ScoredClustersAllocationAlgorithmPreferenceForSmallHosts spyAlgorithm;", "modifier": "private", "type": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts", "declarator": "spyAlgorithm", "var_name": "spyAlgorithm"}], "file": "autonomic-allocation-algorithms/src/test/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest.java"}, "test_case": {"identifier": "setEachHostScoreTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setEachHostScoreTest() {\n        List<HostResources> hosts = new ArrayList<HostResources>();\n        HostResources spyHost = Mockito.spy(new HostResources());\n        hosts.add(spyHost);\n\n        Mockito.doReturn(0d).when(spyAlgorithm).calculateHostScore(Mockito.any(HostResources.class));\n        Mockito.doNothing().when(spyHost).setScore(Mockito.anyDouble());\n\n        spyAlgorithm.setEachHostScore(hosts);\n\n        InOrder inOrder = Mockito.inOrder(spyAlgorithm, spyHost);\n        inOrder.verify(spyAlgorithm, Mockito.times(hosts.size())).calculateHostScore(Mockito.any(HostResources.class));\n        inOrder.verify(spyHost, Mockito.times(hosts.size())).setScore(Mockito.anyDouble());\n    }", "signature": "void setEachHostScoreTest()", "full_signature": "@Test public void setEachHostScoreTest()", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest.setEachHostScoreTest()", "testcase": true, "constructor": false, "invocations": ["spy", "add", "calculateHostScore", "when", "doReturn", "any", "setScore", "when", "doNothing", "anyDouble", "setEachHostScore", "inOrder", "calculateHostScore", "verify", "times", "size", "any", "setScore", "verify", "times", "size", "anyDouble"]}, "focal_class": {"identifier": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts", "superclass": "extends AllocationAlgorithmBase", "interfaces": "", "fields": [{"original_string": "private ClusterUpwardComparator clusterUpwardScoreComparator = new ClusterUpwardComparator();", "modifier": "private", "type": "ClusterUpwardComparator", "declarator": "clusterUpwardScoreComparator = new ClusterUpwardComparator()", "var_name": "clusterUpwardScoreComparator"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private Comparator<ClusterResources> reversedComparator = ComparatorUtils.reversedComparator(clusterUpwardScoreComparator);", "modifier": "@SuppressWarnings(\"unchecked\")\n    private", "type": "Comparator<ClusterResources>", "declarator": "reversedComparator = ComparatorUtils.reversedComparator(clusterUpwardScoreComparator)", "var_name": "reversedComparator"}, {"original_string": "protected HostUpwardComparator hostUpwardScoreComparator = new HostUpwardComparator();", "modifier": "protected", "type": "HostUpwardComparator", "declarator": "hostUpwardScoreComparator = new HostUpwardComparator()", "var_name": "hostUpwardScoreComparator"}], "methods": [{"identifier": "rankClustersToAllocation", "parameters": "(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "modifiers": "@Override public", "return": "List<ClusterResourcesAvailableToStart>", "signature": "List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "full_signature": "@Override public List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "testcase": false, "constructor": false}, {"identifier": "setClustersScore", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "protected", "return": "void", "signature": "void setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "protected void setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "calculateClusterScore", "parameters": "(ClusterResources cluster)", "modifiers": "protected", "return": "long", "signature": "long calculateClusterScore(ClusterResources cluster)", "full_signature": "protected long calculateClusterScore(ClusterResources cluster)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.calculateClusterScore(ClusterResources cluster)", "testcase": false, "constructor": false}, {"identifier": "sortClustersDownwardScore", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "protected", "return": "void", "signature": "void sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "protected void sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "rankHostsToStart", "parameters": "(List<HostResources> hostsResources)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "full_signature": "@Override public List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.rankHostsToStart(List<HostResources> hostsResources)", "testcase": false, "constructor": false}, {"identifier": "sortHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHosts(List<HostResources> hosts)", "full_signature": "protected void sortHosts(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortHosts(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "setEachHostScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "List<HostResources>", "signature": "List<HostResources> setEachHostScore(List<HostResources> hosts)", "full_signature": "protected List<HostResources> setEachHostScore(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.setEachHostScore(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "calculateHostScore", "parameters": "(HostResources hostToStart)", "modifiers": "protected", "return": "double", "signature": "double calculateHostScore(HostResources hostToStart)", "full_signature": "protected double calculateHostScore(HostResources hostToStart)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.calculateHostScore(HostResources hostToStart)", "testcase": false, "constructor": false}, {"identifier": "sortHostsUpwardScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHostsUpwardScore(List<HostResources> hosts)", "full_signature": "protected void sortHostsUpwardScore(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortHostsUpwardScore(List<HostResources> hosts)", "testcase": false, "constructor": false}], "file": "autonomic-allocation-algorithms/src/main/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.java"}, "focal_method": {"identifier": "setEachHostScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "List<HostResources>", "body": "protected List<HostResources> setEachHostScore(List<HostResources> hosts) {\n        for (HostResources hostToStart : hosts) {\n            double hostScore = calculateHostScore(hostToStart);\n            hostToStart.setScore(hostScore);\n        }\n        return hosts;\n    }", "signature": "List<HostResources> setEachHostScore(List<HostResources> hosts)", "full_signature": "protected List<HostResources> setEachHostScore(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.setEachHostScore(List<HostResources> hosts)", "testcase": false, "constructor": false, "invocations": ["calculateHostScore", "setScore"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}