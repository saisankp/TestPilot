{"test_class": {"identifier": "ThingsFieldExpressionFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}, {"original_string": "private static final String KNOWN_STRING = \"KNOWN_STRING\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_STRING = \"KNOWN_STRING\"", "var_name": "KNOWN_STRING"}, {"original_string": "private static final String KNOWN_FEATURE_ID = \"feature1\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FEATURE_ID = \"feature1\"", "var_name": "KNOWN_FEATURE_ID"}, {"original_string": "private static final String KNOWN_FEATURE = \"features/\" + KNOWN_FEATURE_ID;", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FEATURE = \"features/\" + KNOWN_FEATURE_ID", "var_name": "KNOWN_FEATURE"}, {"original_string": "private static final String KNOWN_FEATURE_PROPERTY_WITH_ID =\n            \"features/\" + KNOWN_FEATURE_ID + \"/properties/\" + KNOWN_STRING;", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FEATURE_PROPERTY_WITH_ID =\n            \"features/\" + KNOWN_FEATURE_ID + \"/properties/\" + KNOWN_STRING", "var_name": "KNOWN_FEATURE_PROPERTY_WITH_ID"}, {"original_string": "private static final String KNOWN_THING_DEFINITION = \"definition/example:test:definition\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_THING_DEFINITION = \"definition/example:test:definition\"", "var_name": "KNOWN_THING_DEFINITION"}, {"original_string": "private final ThingsFieldExpressionFactory ef = new ThingsFieldExpressionFactoryImpl();", "modifier": "private final", "type": "ThingsFieldExpressionFactory", "declarator": "ef = new ThingsFieldExpressionFactoryImpl()", "var_name": "ef"}], "file": "model/query/src/test/java/org/eclipse/ditto/model/query/expression/ThingsFieldExpressionFactoryImplTest.java"}, "test_case": {"identifier": "existsByWithFeature", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void existsByWithFeature() {\n        final FieldExpression fieldExpression = ef.existsBy(KNOWN_FEATURE);\n\n        final ExistsFieldExpression expected = new FeatureExpressionImpl(KNOWN_FEATURE_ID);\n        assertThat(fieldExpression).isEqualTo(expected);\n    }", "signature": "void existsByWithFeature()", "full_signature": "@Test public void existsByWithFeature()", "class_method_signature": "ThingsFieldExpressionFactoryImplTest.existsByWithFeature()", "testcase": true, "constructor": false, "invocations": ["existsBy", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ThingsFieldExpressionFactoryImpl", "superclass": "", "interfaces": "implements ThingsFieldExpressionFactory", "fields": [{"original_string": "private static final Map<String, String> mongoSimpleFieldMappings = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "mongoSimpleFieldMappings = new HashMap<>()", "var_name": "mongoSimpleFieldMappings"}, {"original_string": "private final Map<String, String> simpleFieldMappings;", "modifier": "private final", "type": "Map<String, String>", "declarator": "simpleFieldMappings", "var_name": "simpleFieldMappings"}], "methods": [{"identifier": "ThingsFieldExpressionFactoryImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThingsFieldExpressionFactoryImpl()", "full_signature": "public  ThingsFieldExpressionFactoryImpl()", "class_method_signature": "ThingsFieldExpressionFactoryImpl.ThingsFieldExpressionFactoryImpl()", "testcase": false, "constructor": true}, {"identifier": "ThingsFieldExpressionFactoryImpl", "parameters": "(final Map<String, String> simpleFieldMappings)", "modifiers": "public", "return": "", "signature": " ThingsFieldExpressionFactoryImpl(final Map<String, String> simpleFieldMappings)", "full_signature": "public  ThingsFieldExpressionFactoryImpl(final Map<String, String> simpleFieldMappings)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.ThingsFieldExpressionFactoryImpl(final Map<String, String> simpleFieldMappings)", "testcase": false, "constructor": true}, {"identifier": "filterBy", "parameters": "(final String propertyNameWithOptionalLeadingSlash)", "modifiers": "@Override public", "return": "FilterFieldExpression", "signature": "FilterFieldExpression filterBy(final String propertyNameWithOptionalLeadingSlash)", "full_signature": "@Override public FilterFieldExpression filterBy(final String propertyNameWithOptionalLeadingSlash)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.filterBy(final String propertyNameWithOptionalLeadingSlash)", "testcase": false, "constructor": false}, {"identifier": "existsBy", "parameters": "(final String propertyNameWithOptionalLeadingSlash)", "modifiers": "@Override public", "return": "ExistsFieldExpression", "signature": "ExistsFieldExpression existsBy(final String propertyNameWithOptionalLeadingSlash)", "full_signature": "@Override public ExistsFieldExpression existsBy(final String propertyNameWithOptionalLeadingSlash)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.existsBy(final String propertyNameWithOptionalLeadingSlash)", "testcase": false, "constructor": false}, {"identifier": "sortBy", "parameters": "(final String propertyNameWithOptionalLeadingSlash)", "modifiers": "@Override public", "return": "SortFieldExpression", "signature": "SortFieldExpression sortBy(final String propertyNameWithOptionalLeadingSlash)", "full_signature": "@Override public SortFieldExpression sortBy(final String propertyNameWithOptionalLeadingSlash)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.sortBy(final String propertyNameWithOptionalLeadingSlash)", "testcase": false, "constructor": false}, {"identifier": "stripLeadingSlash", "parameters": "(final String propertyName)", "modifiers": "private static", "return": "String", "signature": "String stripLeadingSlash(final String propertyName)", "full_signature": "private static String stripLeadingSlash(final String propertyName)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.stripLeadingSlash(final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "common", "parameters": "(final String propertyName)", "modifiers": "private", "return": "FieldExpression", "signature": "FieldExpression common(final String propertyName)", "full_signature": "private FieldExpression common(final String propertyName)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.common(final String propertyName)", "testcase": false, "constructor": false}], "file": "model/query/src/main/java/org/eclipse/ditto/model/query/expression/ThingsFieldExpressionFactoryImpl.java"}, "focal_method": {"identifier": "existsBy", "parameters": "(final String propertyNameWithOptionalLeadingSlash)", "modifiers": "@Override public", "return": "ExistsFieldExpression", "body": "@Override\n    public ExistsFieldExpression existsBy(final String propertyNameWithOptionalLeadingSlash) {\n\n        requireNonNull(propertyNameWithOptionalLeadingSlash);\n        final String propertyName = stripLeadingSlash(propertyNameWithOptionalLeadingSlash);\n\n        return FieldExpressionUtil.parseFeatureField(requireNonNull(propertyName))\n                .flatMap(f -> f.getFeatureId()\n                        .map(id -> f.getProperty()\n                                .<ExistsFieldExpression>map(property ->\n                                        new FeatureIdPropertyExpressionImpl(id, property))\n                                // we have a feature id but no property path\n                                .orElseGet(() -> new FeatureExpressionImpl(id))\n                        )\n                )\n                // we have no feature at all, continue with the other possibilities\n                .orElseGet(() -> (ExistsFieldExpression) common(propertyName));\n    }", "signature": "ExistsFieldExpression existsBy(final String propertyNameWithOptionalLeadingSlash)", "full_signature": "@Override public ExistsFieldExpression existsBy(final String propertyNameWithOptionalLeadingSlash)", "class_method_signature": "ThingsFieldExpressionFactoryImpl.existsBy(final String propertyNameWithOptionalLeadingSlash)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "stripLeadingSlash", "orElseGet", "flatMap", "parseFeatureField", "requireNonNull", "map", "getFeatureId", "orElseGet", "map", "getProperty", "common"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}