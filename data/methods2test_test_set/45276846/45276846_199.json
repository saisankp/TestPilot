{"test_class": {"identifier": "TestFactoryService", "superclass": "extends BasicReusableHostTestCase", "interfaces": "", "fields": [{"original_string": "public static final String FAC_PATH = \"/subpath/fff\";", "modifier": "public static final", "type": "String", "declarator": "FAC_PATH = \"/subpath/fff\"", "var_name": "FAC_PATH"}, {"original_string": "public int hostRestartCount = 10;", "modifier": "public", "type": "int", "declarator": "hostRestartCount = 10", "var_name": "hostRestartCount"}, {"original_string": "public long iterationCount = 10;", "modifier": "public", "type": "long", "declarator": "iterationCount = 10", "var_name": "iterationCount"}, {"original_string": "private URI factoryUri;", "modifier": "private", "type": "URI", "declarator": "factoryUri", "var_name": "factoryUri"}, {"original_string": "private SynchTestFactoryService factoryService;", "modifier": "private", "type": "SynchTestFactoryService", "declarator": "factoryService", "var_name": "factoryService"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestFactoryService.java"}, "test_case": {"identifier": "duplicateFactoryPostWithInitialFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void duplicateFactoryPostWithInitialFailure() throws Throwable {\n\n        MinimalFactoryTestService factory = (MinimalFactoryTestService) this.host\n                .startServiceAndWait(\n                        MinimalFactoryTestService.class, UUID.randomUUID().toString());\n\n        URI factoryUri = factory.getUri();\n\n        // issue a request that should fail in handleStart()\n        String selfLink = UUID.randomUUID().toString();\n        this.host.testStart(1);\n        MinimalTestServiceState initialState = (MinimalTestServiceState) this.host\n                .buildMinimalTestState();\n        initialState.id = null;\n        initialState.documentSelfLink = selfLink;\n\n        Operation post = Operation\n                .createPost(factoryUri)\n                .setBody(initialState)\n                .setCompletion(this.host.getExpectedFailureCompletion());\n        this.host.send(post);\n        this.host.testWait();\n\n        // verify GET to the service fails\n        this.host.testStart(1);\n        this.host.send(Operation.createGet(UriUtils.extendUri(factoryUri, selfLink)).setCompletion(\n                this.host.getExpectedFailureCompletion()));\n        this.host.testWait();\n\n        // now post again, this time, it should succeed\n        this.host.testStart(1);\n        initialState = (MinimalTestServiceState) this.host.buildMinimalTestState();\n        initialState.documentSelfLink = selfLink;\n\n        post.setBody(initialState).setCompletion(this.host.getCompletion());\n        this.host.send(post);\n        this.host.testWait();\n    }", "signature": "void duplicateFactoryPostWithInitialFailure()", "full_signature": "@Test public void duplicateFactoryPostWithInitialFailure()", "class_method_signature": "TestFactoryService.duplicateFactoryPostWithInitialFailure()", "testcase": true, "constructor": false, "invocations": ["startServiceAndWait", "toString", "randomUUID", "getUri", "toString", "randomUUID", "testStart", "buildMinimalTestState", "setCompletion", "setBody", "createPost", "getExpectedFailureCompletion", "send", "testWait", "testStart", "send", "setCompletion", "createGet", "extendUri", "getExpectedFailureCompletion", "testWait", "testStart", "buildMinimalTestState", "setCompletion", "setBody", "getCompletion", "send", "testWait"]}, "focal_class": {"identifier": "FactoryService", "superclass": "extends StatelessService", "interfaces": "", "fields": [{"original_string": "private static final int MIN_SYNCH_QUERY_RESULT_LIMIT = 200;", "modifier": "private static final", "type": "int", "declarator": "MIN_SYNCH_QUERY_RESULT_LIMIT = 200", "var_name": "MIN_SYNCH_QUERY_RESULT_LIMIT"}, {"original_string": "public static final int MAX_SYNCH_RETRY_COUNT = XenonConfiguration.integer(\n            FactoryService.class,\n            \"MAX_SYNCH_RETRY_COUNT\",\n            10\n    );", "modifier": "public static final", "type": "int", "declarator": "MAX_SYNCH_RETRY_COUNT = XenonConfiguration.integer(\n            FactoryService.class,\n            \"MAX_SYNCH_RETRY_COUNT\",\n            10\n    )", "var_name": "MAX_SYNCH_RETRY_COUNT"}, {"original_string": "public static final Integer SELF_QUERY_RESULT_LIMIT = XenonConfiguration.integer(\n            FactoryService.class,\n            \"SELF_QUERY_RESULT_LIMIT\",\n            1000\n    );", "modifier": "public static final", "type": "Integer", "declarator": "SELF_QUERY_RESULT_LIMIT = XenonConfiguration.integer(\n            FactoryService.class,\n            \"SELF_QUERY_RESULT_LIMIT\",\n            1000\n    )", "var_name": "SELF_QUERY_RESULT_LIMIT"}, {"original_string": "private boolean useBodyForSelfLink = false;", "modifier": "private", "type": "boolean", "declarator": "useBodyForSelfLink = false", "var_name": "useBodyForSelfLink"}, {"original_string": "private EnumSet<ServiceOption> childOptions;", "modifier": "private", "type": "EnumSet<ServiceOption>", "declarator": "childOptions", "var_name": "childOptions"}, {"original_string": "private String nodeSelectorLink = ServiceUriPaths.DEFAULT_NODE_SELECTOR;", "modifier": "private", "type": "String", "declarator": "nodeSelectorLink = ServiceUriPaths.DEFAULT_NODE_SELECTOR", "var_name": "nodeSelectorLink"}, {"original_string": "private String documentIndexLink = ServiceUriPaths.CORE_DOCUMENT_INDEX;", "modifier": "private", "type": "String", "declarator": "documentIndexLink = ServiceUriPaths.CORE_DOCUMENT_INDEX", "var_name": "documentIndexLink"}, {"original_string": "private int selfQueryResultLimit = SELF_QUERY_RESULT_LIMIT;", "modifier": "private", "type": "int", "declarator": "selfQueryResultLimit = SELF_QUERY_RESULT_LIMIT", "var_name": "selfQueryResultLimit"}, {"original_string": "private ServiceDocument childTemplate;", "modifier": "private", "type": "ServiceDocument", "declarator": "childTemplate", "var_name": "childTemplate"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "create", "parameters": "(Class<? extends Service> childServiceType,\n            ServiceOption... options)", "modifiers": "public static", "return": "FactoryService", "signature": "FactoryService create(Class<? extends Service> childServiceType,\n            ServiceOption... options)", "full_signature": "public static FactoryService create(Class<? extends Service> childServiceType,\n            ServiceOption... options)", "class_method_signature": "FactoryService.create(Class<? extends Service> childServiceType,\n            ServiceOption... options)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType, ServiceOption... options)", "modifiers": "public static", "return": "FactoryService", "signature": "FactoryService create(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType, ServiceOption... options)", "full_signature": "public static FactoryService create(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType, ServiceOption... options)", "class_method_signature": "FactoryService.create(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType, ServiceOption... options)", "testcase": false, "constructor": false}, {"identifier": "createIdempotent", "parameters": "(Class<? extends Service> childServiceType)", "modifiers": "public static", "return": "FactoryService", "signature": "FactoryService createIdempotent(Class<? extends Service> childServiceType)", "full_signature": "public static FactoryService createIdempotent(Class<? extends Service> childServiceType)", "class_method_signature": "FactoryService.createIdempotent(Class<? extends Service> childServiceType)", "testcase": false, "constructor": false}, {"identifier": "createIdempotent", "parameters": "(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType)", "modifiers": "public static", "return": "FactoryService", "signature": "FactoryService createIdempotent(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType)", "full_signature": "public static FactoryService createIdempotent(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType)", "class_method_signature": "FactoryService.createIdempotent(Class<? extends Service> childServiceType,\n            Class<? extends ServiceDocument> childServiceDocumentType)", "testcase": false, "constructor": false}, {"identifier": "FactoryService", "parameters": "(Class<? extends ServiceDocument> childServiceDocumentType)", "modifiers": "public", "return": "", "signature": " FactoryService(Class<? extends ServiceDocument> childServiceDocumentType)", "full_signature": "public  FactoryService(Class<? extends ServiceDocument> childServiceDocumentType)", "class_method_signature": "FactoryService.FactoryService(Class<? extends ServiceDocument> childServiceDocumentType)", "testcase": false, "constructor": true}, {"identifier": "setSelfQueryResultLimit", "parameters": "(int limit)", "modifiers": "public", "return": "void", "signature": "void setSelfQueryResultLimit(int limit)", "full_signature": "public void setSelfQueryResultLimit(int limit)", "class_method_signature": "FactoryService.setSelfQueryResultLimit(int limit)", "testcase": false, "constructor": false}, {"identifier": "getSelfQueryResultLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSelfQueryResultLimit()", "full_signature": "public int getSelfQueryResultLimit()", "class_method_signature": "FactoryService.getSelfQueryResultLimit()", "testcase": false, "constructor": false}, {"identifier": "setUseBodyForSelfLink", "parameters": "(boolean useBody)", "modifiers": "public", "return": "void", "signature": "void setUseBodyForSelfLink(boolean useBody)", "full_signature": "public void setUseBodyForSelfLink(boolean useBody)", "class_method_signature": "FactoryService.setUseBodyForSelfLink(boolean useBody)", "testcase": false, "constructor": false}, {"identifier": "hasChildOption", "parameters": "(ServiceOption option)", "modifiers": "public", "return": "boolean", "signature": "boolean hasChildOption(ServiceOption option)", "full_signature": "public boolean hasChildOption(ServiceOption option)", "class_method_signature": "FactoryService.hasChildOption(ServiceOption option)", "testcase": false, "constructor": false}, {"identifier": "handleStart", "parameters": "(Operation startPost)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation startPost)", "full_signature": "@Override public void handleStart(Operation startPost)", "class_method_signature": "FactoryService.handleStart(Operation startPost)", "testcase": false, "constructor": false}, {"identifier": "authorizeRequest", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void authorizeRequest(Operation op)", "full_signature": "@Override public void authorizeRequest(Operation op)", "class_method_signature": "FactoryService.authorizeRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handleRequest(Operation op)", "full_signature": "@Override public void handleRequest(Operation op)", "class_method_signature": "FactoryService.handleRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(Operation op, OperationProcessingStage opProcessingStage)", "modifiers": "@Override public", "return": "void", "signature": "void handleRequest(Operation op, OperationProcessingStage opProcessingStage)", "full_signature": "@Override public void handleRequest(Operation op, OperationProcessingStage opProcessingStage)", "class_method_signature": "FactoryService.handleRequest(Operation op, OperationProcessingStage opProcessingStage)", "testcase": false, "constructor": false}, {"identifier": "handlePostCompletion", "parameters": "(Operation o)", "modifiers": "private", "return": "void", "signature": "void handlePostCompletion(Operation o)", "full_signature": "private void handlePostCompletion(Operation o)", "class_method_signature": "FactoryService.handlePostCompletion(Operation o)", "testcase": false, "constructor": false}, {"identifier": "buildDefaultChildSelfLink", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String buildDefaultChildSelfLink()", "full_signature": "protected String buildDefaultChildSelfLink()", "class_method_signature": "FactoryService.buildDefaultChildSelfLink()", "testcase": false, "constructor": false}, {"identifier": "buildDefaultChildSelfLink", "parameters": "(ServiceDocument document)", "modifiers": "protected", "return": "String", "signature": "String buildDefaultChildSelfLink(ServiceDocument document)", "full_signature": "protected String buildDefaultChildSelfLink(ServiceDocument document)", "class_method_signature": "FactoryService.buildDefaultChildSelfLink(ServiceDocument document)", "testcase": false, "constructor": false}, {"identifier": "handleStop", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handleStop(Operation op)", "full_signature": "@Override public void handleStop(Operation op)", "class_method_signature": "FactoryService.handleStop(Operation op)", "testcase": false, "constructor": false}, {"identifier": "completePostRequest", "parameters": "(Operation o, Service childService)", "modifiers": "private", "return": "void", "signature": "void completePostRequest(Operation o, Service childService)", "full_signature": "private void completePostRequest(Operation o, Service childService)", "class_method_signature": "FactoryService.completePostRequest(Operation o, Service childService)", "testcase": false, "constructor": false}, {"identifier": "startChildService", "parameters": "(Operation o, Service childService)", "modifiers": "private", "return": "void", "signature": "void startChildService(Operation o, Service childService)", "full_signature": "private void startChildService(Operation o, Service childService)", "class_method_signature": "FactoryService.startChildService(Operation o, Service childService)", "testcase": false, "constructor": false}, {"identifier": "forwardRequest", "parameters": "(Operation o, Service childService)", "modifiers": "private", "return": "void", "signature": "void forwardRequest(Operation o, Service childService)", "full_signature": "private void forwardRequest(Operation o, Service childService)", "class_method_signature": "FactoryService.forwardRequest(Operation o, Service childService)", "testcase": false, "constructor": false}, {"identifier": "handleGet", "parameters": "(Operation get)", "modifiers": "@Override public", "return": "void", "signature": "void handleGet(Operation get)", "full_signature": "@Override public void handleGet(Operation get)", "class_method_signature": "FactoryService.handleGet(Operation get)", "testcase": false, "constructor": false}, {"identifier": "handleGetCompletion", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void handleGetCompletion(Operation op)", "full_signature": "private void handleGetCompletion(Operation op)", "class_method_signature": "FactoryService.handleGetCompletion(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handleGetOdataCompletion", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void handleGetOdataCompletion(Operation op)", "full_signature": "private void handleGetOdataCompletion(Operation op)", "class_method_signature": "FactoryService.handleGetOdataCompletion(Operation op)", "testcase": false, "constructor": false}, {"identifier": "failODataRequest", "parameters": "(Operation originalOp, Operation o, Throwable e)", "modifiers": "private", "return": "void", "signature": "void failODataRequest(Operation originalOp, Operation o, Throwable e)", "full_signature": "private void failODataRequest(Operation originalOp, Operation o, Throwable e)", "class_method_signature": "FactoryService.failODataRequest(Operation originalOp, Operation o, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "handleNavigationRequest", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void handleNavigationRequest(Operation op)", "full_signature": "private void handleNavigationRequest(Operation op)", "class_method_signature": "FactoryService.handleNavigationRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handleODataLimitRequest", "parameters": "(Operation op, QueryTask task)", "modifiers": "private", "return": "void", "signature": "void handleODataLimitRequest(Operation op, QueryTask task)", "full_signature": "private void handleODataLimitRequest(Operation op, QueryTask task)", "class_method_signature": "FactoryService.handleODataLimitRequest(Operation op, QueryTask task)", "testcase": false, "constructor": false}, {"identifier": "sendNextRequest", "parameters": "(Operation op, String nextPageLink, Long totalCount)", "modifiers": "private", "return": "void", "signature": "void sendNextRequest(Operation op, String nextPageLink, Long totalCount)", "full_signature": "private void sendNextRequest(Operation op, String nextPageLink, Long totalCount)", "class_method_signature": "FactoryService.sendNextRequest(Operation op, String nextPageLink, Long totalCount)", "testcase": false, "constructor": false}, {"identifier": "prepareNavigationResult", "parameters": "(ServiceDocumentQueryResult result)", "modifiers": "private", "return": "void", "signature": "void prepareNavigationResult(ServiceDocumentQueryResult result)", "full_signature": "private void prepareNavigationResult(ServiceDocumentQueryResult result)", "class_method_signature": "FactoryService.prepareNavigationResult(ServiceDocumentQueryResult result)", "testcase": false, "constructor": false}, {"identifier": "convertNavigationLink", "parameters": "(String navigationLink)", "modifiers": "private", "return": "String", "signature": "String convertNavigationLink(String navigationLink)", "full_signature": "private String convertNavigationLink(String navigationLink)", "class_method_signature": "FactoryService.convertNavigationLink(String navigationLink)", "testcase": false, "constructor": false}, {"identifier": "completeGetWithQuery", "parameters": "(Operation op, EnumSet<ServiceOption> caps)", "modifiers": "public", "return": "void", "signature": "void completeGetWithQuery(Operation op, EnumSet<ServiceOption> caps)", "full_signature": "public void completeGetWithQuery(Operation op, EnumSet<ServiceOption> caps)", "class_method_signature": "FactoryService.completeGetWithQuery(Operation op, EnumSet<ServiceOption> caps)", "testcase": false, "constructor": false}, {"identifier": "handleOptions", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handleOptions(Operation op)", "full_signature": "@Override public void handleOptions(Operation op)", "class_method_signature": "FactoryService.handleOptions(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handlePost", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handlePost(Operation op)", "full_signature": "@Override public void handlePost(Operation op)", "class_method_signature": "FactoryService.handlePost(Operation op)", "testcase": false, "constructor": false}, {"identifier": "createChildService", "parameters": "()", "modifiers": "private", "return": "Service", "signature": "Service createChildService()", "full_signature": "private Service createChildService()", "class_method_signature": "FactoryService.createChildService()", "testcase": false, "constructor": false}, {"identifier": "createChildServiceSafe", "parameters": "()", "modifiers": "private", "return": "Service", "signature": "Service createChildServiceSafe()", "full_signature": "private Service createChildServiceSafe()", "class_method_signature": "FactoryService.createChildServiceSafe()", "testcase": false, "constructor": false}, {"identifier": "toggleOption", "parameters": "(ServiceOption option, boolean enable)", "modifiers": "@Override public", "return": "void", "signature": "void toggleOption(ServiceOption option, boolean enable)", "full_signature": "@Override public void toggleOption(ServiceOption option, boolean enable)", "class_method_signature": "FactoryService.toggleOption(ServiceOption option, boolean enable)", "testcase": false, "constructor": false}, {"identifier": "getPeerNodeSelectorPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPeerNodeSelectorPath()", "full_signature": "@Override public String getPeerNodeSelectorPath()", "class_method_signature": "FactoryService.getPeerNodeSelectorPath()", "testcase": false, "constructor": false}, {"identifier": "setPeerNodeSelectorPath", "parameters": "(String link)", "modifiers": "@Override public", "return": "void", "signature": "void setPeerNodeSelectorPath(String link)", "full_signature": "@Override public void setPeerNodeSelectorPath(String link)", "class_method_signature": "FactoryService.setPeerNodeSelectorPath(String link)", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "FactoryService.getUri()", "testcase": false, "constructor": false}, {"identifier": "getDocumentTemplate", "parameters": "()", "modifiers": "@Override public", "return": "ServiceDocument", "signature": "ServiceDocument getDocumentTemplate()", "full_signature": "@Override public ServiceDocument getDocumentTemplate()", "class_method_signature": "FactoryService.getDocumentTemplate()", "testcase": false, "constructor": false}, {"identifier": "logTaskFailureWarning", "parameters": "(String fmt, Object... args)", "modifiers": "private", "return": "void", "signature": "void logTaskFailureWarning(String fmt, Object... args)", "full_signature": "private void logTaskFailureWarning(String fmt, Object... args)", "class_method_signature": "FactoryService.logTaskFailureWarning(String fmt, Object... args)", "testcase": false, "constructor": false}, {"identifier": "getChildTemplate", "parameters": "(String childLink)", "modifiers": "private", "return": "ServiceDocument", "signature": "ServiceDocument getChildTemplate(String childLink)", "full_signature": "private ServiceDocument getChildTemplate(String childLink)", "class_method_signature": "FactoryService.getChildTemplate(String childLink)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationRequest", "parameters": "(Operation request)", "modifiers": "@Override public", "return": "void", "signature": "void handleConfigurationRequest(Operation request)", "full_signature": "@Override public void handleConfigurationRequest(Operation request)", "class_method_signature": "FactoryService.handleConfigurationRequest(Operation request)", "testcase": false, "constructor": false}, {"identifier": "handleNodeGroupMaintenance", "parameters": "(Operation maintOp)", "modifiers": "@Override public", "return": "void", "signature": "void handleNodeGroupMaintenance(Operation maintOp)", "full_signature": "@Override public void handleNodeGroupMaintenance(Operation maintOp)", "class_method_signature": "FactoryService.handleNodeGroupMaintenance(Operation maintOp)", "testcase": false, "constructor": false}, {"identifier": "synchronizeChildServicesIfOwner", "parameters": "(Operation maintOp)", "modifiers": "", "return": "void", "signature": "void synchronizeChildServicesIfOwner(Operation maintOp)", "full_signature": " void synchronizeChildServicesIfOwner(Operation maintOp)", "class_method_signature": "FactoryService.synchronizeChildServicesIfOwner(Operation maintOp)", "testcase": false, "constructor": false}, {"identifier": "synchronizeChildServicesAsOwner", "parameters": "(Operation maintOp, long membershipUpdateTimeMicros)", "modifiers": "private", "return": "void", "signature": "void synchronizeChildServicesAsOwner(Operation maintOp, long membershipUpdateTimeMicros)", "full_signature": "private void synchronizeChildServicesAsOwner(Operation maintOp, long membershipUpdateTimeMicros)", "class_method_signature": "FactoryService.synchronizeChildServicesAsOwner(Operation maintOp, long membershipUpdateTimeMicros)", "testcase": false, "constructor": false}, {"identifier": "startFactorySynchronizationTask", "parameters": "(Operation parentOp, Long membershipUpdateTimeMicros)", "modifiers": "private", "return": "void", "signature": "void startFactorySynchronizationTask(Operation parentOp, Long membershipUpdateTimeMicros)", "full_signature": "private void startFactorySynchronizationTask(Operation parentOp, Long membershipUpdateTimeMicros)", "class_method_signature": "FactoryService.startFactorySynchronizationTask(Operation parentOp, Long membershipUpdateTimeMicros)", "testcase": false, "constructor": false}, {"identifier": "scheduleSynchronizationRetry", "parameters": "(Operation parentOp)", "modifiers": "private", "return": "void", "signature": "void scheduleSynchronizationRetry(Operation parentOp)", "full_signature": "private void scheduleSynchronizationRetry(Operation parentOp)", "class_method_signature": "FactoryService.scheduleSynchronizationRetry(Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "getExponentialDelay", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getExponentialDelay()", "full_signature": "private long getExponentialDelay()", "class_method_signature": "FactoryService.getExponentialDelay()", "testcase": false, "constructor": false}, {"identifier": "createSynchronizationTaskState", "parameters": "(\n            Long membershipUpdateTimeMicros)", "modifiers": "", "return": "SynchronizationTaskService.State", "signature": "SynchronizationTaskService.State createSynchronizationTaskState(\n            Long membershipUpdateTimeMicros)", "full_signature": " SynchronizationTaskService.State createSynchronizationTaskState(\n            Long membershipUpdateTimeMicros)", "class_method_signature": "FactoryService.createSynchronizationTaskState(\n            Long membershipUpdateTimeMicros)", "testcase": false, "constructor": false}, {"identifier": "verifyFactoryOwnership", "parameters": "(Operation maintOp, SelectOwnerResponse ownerResponse)", "modifiers": "private", "return": "void", "signature": "void verifyFactoryOwnership(Operation maintOp, SelectOwnerResponse ownerResponse)", "full_signature": "private void verifyFactoryOwnership(Operation maintOp, SelectOwnerResponse ownerResponse)", "class_method_signature": "FactoryService.verifyFactoryOwnership(Operation maintOp, SelectOwnerResponse ownerResponse)", "testcase": false, "constructor": false}, {"identifier": "createServiceInstance", "parameters": "()", "modifiers": "public abstract", "return": "Service", "signature": "Service createServiceInstance()", "full_signature": "public abstract Service createServiceInstance()", "class_method_signature": "FactoryService.createServiceInstance()", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/FactoryService.java"}, "focal_method": {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "body": "@Override\n    public URI getUri() {\n        if (this.uri == null) {\n            this.uri = super.getUri();\n        }\n        return this.uri;\n    }", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "FactoryService.getUri()", "testcase": false, "constructor": false, "invocations": ["getUri"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}