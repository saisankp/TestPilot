{"test_class": {"identifier": "RrdpParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/rrdp/RrdpParserTest.java"}, "test_case": {"identifier": "should_parse_delta", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_parse_delta() throws Exception {\n        Map<String, DeltaElement> delta = new HashMap<>();\n        new RrdpParser().parseDelta(\n                fileIS(\"rrdp/delta1.xml\"),\n                (deltaHeader) -> {\n                    assertEquals(\"9df4b597-af9e-4dca-bdda-719cce2c4e28\", deltaHeader.getSessionId());\n                    assertEquals(BigInteger.valueOf(2), deltaHeader.getSerial());\n                },\n                (deltaElement) -> delta.put(deltaElement.getUri(), deltaElement)\n        );\n\n        final String uri1 = \"rsync://bandito.ripe.net/repo/3a87a4b1-6e22-4a63-ad0f-06f83ad3ca16/default/671570f06499fbd2d6ab76c4f22566fe49d5de60.mft\";\n        DeltaElement e1 = delta.get(uri1);\n        assertEquals(uri1, ((DeltaPublish)e1).uri);\n        assertEquals(\"226AB8CD3C887A6EBDDDF317F2FAFC9CF3EFC5D43A86347AC0FEFFE4DC0F607E\", Hex.format(((DeltaPublish)e1).getHash().get()));\n\n        final String uri2 = \"rsync://bandito.ripe.net/repo/3a87a4b1-6e22-4a63-ad0f-06f83ad3ca16/default/671570f06499fbd2d6ab76c4f22566fe49d5de60.crl\";\n        DeltaElement e2 = delta.get(uri2);\n        assertEquals(uri2, ((DeltaPublish)e2).uri);\n        assertEquals(\"2B551A6C10CCA04C174B0CEB3B64652A5534D1385BEAA40A55A68CB06055E6BB\", Hex.format(((DeltaPublish)e2).getHash().get()));\n\n        final String uri3 = \"rsync://bandito.ripe.net/repo/3a87a4b1-6e22-4a63-ad0f-06f83ad3ca16/default/example.roa\";\n        DeltaElement e3 = delta.get(uri3);\n        assertEquals(uri3, ((DeltaWithdraw)e3).uri);\n        assertEquals(\"2B551A6C10CCA04C174B0CEB3B64652A5534D1385BEAA40A55A68CB06055E6BB\", Hex.format(((DeltaWithdraw) e3).getHash()));\n    }", "signature": "void should_parse_delta()", "full_signature": "@Test public void should_parse_delta()", "class_method_signature": "RrdpParserTest.should_parse_delta()", "testcase": true, "constructor": false, "invocations": ["parseDelta", "fileIS", "assertEquals", "getSessionId", "assertEquals", "valueOf", "getSerial", "put", "getUri", "get", "assertEquals", "assertEquals", "format", "get", "getHash", "get", "assertEquals", "assertEquals", "format", "get", "getHash", "get", "assertEquals", "assertEquals", "format", "getHash"]}, "focal_class": {"identifier": "RrdpParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseSnapshot", "parameters": "(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "modifiers": "public", "return": "void", "signature": "void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "full_signature": "public void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "class_method_signature": "RrdpParser.parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "testcase": false, "constructor": false}, {"identifier": "parseDelta", "parameters": "(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "modifiers": "public", "return": "void", "signature": "void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "full_signature": "public void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "class_method_signature": "RrdpParser.parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "testcase": false, "constructor": false}, {"identifier": "notification", "parameters": "(final InputStream inputStream)", "modifiers": "public", "return": "Notification", "signature": "Notification notification(final InputStream inputStream)", "full_signature": "public Notification notification(final InputStream inputStream)", "class_method_signature": "RrdpParser.notification(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName, final String noAttrMessage)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/rrdp/RrdpParser.java"}, "focal_method": {"identifier": "parseDelta", "parameters": "(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "modifiers": "public", "return": "void", "body": "public void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement) {\n        try {\n            final XMLInputFactory factory = XMLInputFactory.newInstance();\n            final XMLEventReader eventReader = factory.createXMLEventReader(inputStream);\n\n            String sessionId = null;\n            BigInteger serial = null;\n            String uri = null;\n            String hash = null;\n            StringBuilder base64 = new StringBuilder();\n            boolean inPublishElement = false;\n            boolean deltaHeaderProcessed = false;\n\n            final Base64.Decoder decoder = Base64.getDecoder();\n\n            while (eventReader.hasNext()) {\n                final XMLEvent event = eventReader.nextEvent();\n\n                switch (event.getEventType()) {\n                    case XMLStreamConstants.START_ELEMENT:\n                        final StartElement startElement = event.asStartElement();\n                        final String qName = startElement.getName().getLocalPart();\n\n                        switch (qName) {\n                            case \"publish\":\n                                if (!deltaHeaderProcessed) {\n                                    throw new RrdpException(ErrorCodes.RRDP_PARSE_ERROR, \"delta header not present before elements\");\n                                }\n                                uri = getAttr(startElement, \"uri\", \"Uri is not present in 'publish' element\");\n                                hash = getAttr(startElement, \"hash\");\n                                inPublishElement = true;\n                                break;\n                            case \"withdraw\":\n                                if (!deltaHeaderProcessed) {\n                                    throw new RrdpException(ErrorCodes.RRDP_PARSE_ERROR, \"delta header not present before elements\");\n                                }\n                                uri = getAttr(startElement, \"uri\", \"Uri is not present in 'publish' element\");\n                                hash = getAttr(startElement, \"hash\", \"Hash is not present in 'withdraw' element\");\n                                break;\n                            case \"delta\":\n                                serial = new BigInteger(getAttr(startElement, \"serial\", \"Notification serial is not present\"));\n                                sessionId = getAttr(startElement, \"session_id\", \"Session id is not present\");\n                                processDeltaHeader.accept(new DeltaHeader(sessionId, serial));\n                                deltaHeaderProcessed = true;\n                                break;\n                        }\n                        break;\n\n                    case XMLStreamConstants.CHARACTERS:\n                        final Characters characters = event.asCharacters();\n                        if (inPublishElement) {\n                            final String thisBase64 = characters.getData();\n                            base64.append(thisBase64.replaceAll(\"\\\\s\", \"\"));\n                        }\n                        break;\n\n                    case XMLStreamConstants.END_ELEMENT:\n                        final EndElement endElement = event.asEndElement();\n                        final String qqName = endElement.getName().getLocalPart();\n\n                        switch (qqName) {\n                            case \"publish\":\n                                final byte[] decoded = decoder.decode(base64.toString());\n                                base64 = new StringBuilder();\n                                processDeltaElement.accept(new DeltaPublish(decoded, uri, Hex.parse(hash)));\n                                break;\n                            case \"withdraw\":\n                                processDeltaElement.accept(new DeltaWithdraw(uri, Hex.parse(hash)));\n                                break;\n                        }\n                        break;\n                }\n            }\n        } catch (XMLStreamException e) {\n            throw new RrdpException(\"Couldn't parse delta: \", e);\n        }\n    }", "signature": "void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "full_signature": "public void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "class_method_signature": "RrdpParser.parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createXMLEventReader", "getDecoder", "hasNext", "nextEvent", "getEventType", "asStartElement", "getLocalPart", "getName", "getAttr", "getAttr", "getAttr", "getAttr", "getAttr", "getAttr", "accept", "asCharacters", "getData", "append", "replaceAll", "asEndElement", "getLocalPart", "getName", "decode", "toString", "accept", "parse", "accept", "parse"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}