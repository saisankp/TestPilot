{"test_class": {"identifier": "TupleCombinationGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/compound/support/TupleCombinationGeneratorTest.java"}, "test_case": {"identifier": "testGenerateCombinations_DescendingListSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateCombinations_DescendingListSize() {\n        List<List<Object>> inputLists = new ArrayList<List<Object>>() {{\n            add(Arrays.<Object>asList(1, 2, 3));\n            add(Arrays.<Object>asList(\"bar\", \"baz\"));\n            add(Arrays.<Object>asList(2.0));\n        }};\n        List<List<Object>> permutations = TupleCombinationGenerator.generateCombinations(inputLists);\n        Assert.assertEquals(\n                \"[[1, bar, 2.0], [1, baz, 2.0], [2, bar, 2.0], [2, baz, 2.0], [3, bar, 2.0], [3, baz, 2.0]]\",\n                permutations.toString()\n        );\n    }", "signature": "void testGenerateCombinations_DescendingListSize()", "full_signature": "@Test public void testGenerateCombinations_DescendingListSize()", "class_method_signature": "TupleCombinationGeneratorTest.testGenerateCombinations_DescendingListSize()", "testcase": true, "constructor": false, "invocations": ["add", "asList", "add", "asList", "add", "asList", "generateCombinations", "assertEquals", "toString"]}, "focal_class": {"identifier": "TupleCombinationGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateCombinations", "parameters": "(List<? extends Iterable<T>> inputLists)", "modifiers": "public static", "return": "List<List<T>>", "signature": "List<List<T>> generateCombinations(List<? extends Iterable<T>> inputLists)", "full_signature": "public static List<List<T>> generateCombinations(List<? extends Iterable<T>> inputLists)", "class_method_signature": "TupleCombinationGenerator.generateCombinations(List<? extends Iterable<T>> inputLists)", "testcase": false, "constructor": false}, {"identifier": "TupleCombinationGenerator", "parameters": "()", "modifiers": "", "return": "", "signature": " TupleCombinationGenerator()", "full_signature": "  TupleCombinationGenerator()", "class_method_signature": "TupleCombinationGenerator.TupleCombinationGenerator()", "testcase": false, "constructor": true}], "file": "code/src/main/java/com/googlecode/cqengine/index/compound/support/TupleCombinationGenerator.java"}, "focal_method": {"identifier": "generateCombinations", "parameters": "(List<? extends Iterable<T>> inputLists)", "modifiers": "public static", "return": "List<List<T>>", "body": "public static <T> List<List<T>> generateCombinations(List<? extends Iterable<T>> inputLists) {\n        if (inputLists.isEmpty()) {\n            return Collections.emptyList();\n        }\n        List<List<T>> results = new ArrayList<List<T>>();\n        Iterable<T> currentList = inputLists.get(0);\n        if (inputLists.size() == 1) {\n            for (T object : currentList) {\n                // This is the last list in the input lists supplied - processed first due to eager recursion below.\n                // Add each object in this input list as a single element in its own new LinkedList.\n                // The other branch will subsequently add objects from preceding input lists\n                // to the _start_ of this LinkedList. We use LinkedList to avoid shuffling elements.\n                results.add(new LinkedList<T>(Collections.singleton(object)));\n            }\n        }\n        else {\n            // Start processing objects from the first input list supplied,\n            // but note that we will call this method recursively before we move on to the next object...\n            for (T object : currentList) {\n                // Prepare a tail list of the input lists (the input lists after this first one).\n                // The tail list is actually a _view_ onto the original input lists, (no data is copied)...\n                List<? extends Iterable<T>> tail = inputLists.subList(1, inputLists.size());\n                // Call this method recursively, getting the first objects in the tail lists first...\n                for (List<T> permutations : generateCombinations(tail)) {\n                    // Insert the object from the first list at the _start_ of the permutations list...\n                    permutations.add(0, object);\n                    // As the stack unwinds, we have assembled permutations in the correct order.\n                    // Add each permutation to results, to return to the preceding stack frame or to the caller...\n                    results.add(permutations);\n                }\n            }\n        }\n        return results;\n    }", "signature": "List<List<T>> generateCombinations(List<? extends Iterable<T>> inputLists)", "full_signature": "public static List<List<T>> generateCombinations(List<? extends Iterable<T>> inputLists)", "class_method_signature": "TupleCombinationGenerator.generateCombinations(List<? extends Iterable<T>> inputLists)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptyList", "get", "size", "add", "singleton", "subList", "size", "generateCombinations", "add", "add"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}