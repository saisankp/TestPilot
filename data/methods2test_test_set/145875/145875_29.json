{"test_class": {"identifier": "FilenameParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "dbdeploy-core/src/test/java/com/dbdeploy/scripts/FilenameParserTest.java"}, "test_case": {"identifier": "canParseAnyFilenameThatStartsWithANumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void canParseAnyFilenameThatStartsWithANumber() throws Exception {\n\t\tFilenameParser parser = new FilenameParser();\n\t\tassertEquals(1L, parser.extractIdFromFilename(\"0001_a_filename.txt\"));\n\t\tassertEquals(1L, parser.extractIdFromFilename(\"1_a_filename.txt\"));\n\t\tassertEquals(1L, parser.extractIdFromFilename(\"1 a filename.txt\"));\n\t\tassertEquals(1L, parser.extractIdFromFilename(\"1.txt\"));\n\t\tassertEquals(123L, parser.extractIdFromFilename(\"00123_something.txt\"));\n\t}", "signature": "void canParseAnyFilenameThatStartsWithANumber()", "full_signature": "@Test public void canParseAnyFilenameThatStartsWithANumber()", "class_method_signature": "FilenameParserTest.canParseAnyFilenameThatStartsWithANumber()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "extractIdFromFilename", "assertEquals", "extractIdFromFilename", "assertEquals", "extractIdFromFilename", "assertEquals", "extractIdFromFilename", "assertEquals", "extractIdFromFilename"]}, "focal_class": {"identifier": "FilenameParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "FilenameParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " FilenameParser()", "full_signature": "public  FilenameParser()", "class_method_signature": "FilenameParser.FilenameParser()", "testcase": false, "constructor": true}, {"identifier": "extractIdFromFilename", "parameters": "(String filename)", "modifiers": "public", "return": "long", "signature": "long extractIdFromFilename(String filename)", "full_signature": "public long extractIdFromFilename(String filename)", "class_method_signature": "FilenameParser.extractIdFromFilename(String filename)", "testcase": false, "constructor": false}], "file": "dbdeploy-core/src/main/java/com/dbdeploy/scripts/FilenameParser.java"}, "focal_method": {"identifier": "extractIdFromFilename", "parameters": "(String filename)", "modifiers": "public", "return": "long", "body": "public long extractIdFromFilename(String filename) throws UnrecognisedFilenameException {\n\t\tMatcher matches = pattern.matcher(filename);\n\t\tif (!matches.matches() || matches.groupCount() != 1)\n\t\t\tthrow new UnrecognisedFilenameException(\"Could not extract a change script number from filename: \" + filename);\n\t\t\n\t\treturn Long.parseLong(matches.group(1));\n\t }", "signature": "long extractIdFromFilename(String filename)", "full_signature": "public long extractIdFromFilename(String filename)", "class_method_signature": "FilenameParser.extractIdFromFilename(String filename)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "groupCount", "parseLong", "group"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}