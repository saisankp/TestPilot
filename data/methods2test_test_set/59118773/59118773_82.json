{"test_class": {"identifier": "TenderPercentagesControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TenderPercentagesController tenderPercentagesController;", "modifier": "@Autowired\n    private", "type": "TenderPercentagesController", "declarator": "tenderPercentagesController", "var_name": "tenderPercentagesController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TenderPercentagesControllerTest.java"}, "test_case": {"identifier": "percentTendersCancelled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void percentTendersCancelled() throws Exception {\n        final List<Document> percentTendersCancelled = tenderPercentagesController\n                .percentTendersCancelled(new YearFilterPagingRequest());\n\n        final Document first = percentTendersCancelled.get(0);\n        int year = (int) first.get(TenderPercentagesController.Keys.YEAR);\n        int totalTenders = (int) first.get(TenderPercentagesController.Keys.TOTAL_TENDERS);\n        int totalCancelled = (int) first.get(TenderPercentagesController.Keys.TOTAL_CANCELLED);\n        double percentCancelled = (double) first.get(TenderPercentagesController.Keys.PERCENT_CANCELLED);\n        Assert.assertEquals(2014, year);\n        Assert.assertEquals(1, totalTenders);\n        Assert.assertEquals(0, totalCancelled);\n        Assert.assertEquals(0.0, percentCancelled, 0);\n\n        final Document second = percentTendersCancelled.get(1);\n        year = (int) second.get(TenderPercentagesController.Keys.YEAR);\n        totalTenders = (int) second.get(TenderPercentagesController.Keys.TOTAL_TENDERS);\n        totalCancelled = (int) second.get(TenderPercentagesController.Keys.TOTAL_CANCELLED);\n        percentCancelled = (double) second.get(TenderPercentagesController.Keys.PERCENT_CANCELLED);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(2, totalTenders);\n        Assert.assertEquals(0, totalCancelled);\n        Assert.assertEquals(0.0, percentCancelled, 0);\n    }", "signature": "void percentTendersCancelled()", "full_signature": "@Test public void percentTendersCancelled()", "class_method_signature": "TenderPercentagesControllerTest.percentTendersCancelled()", "testcase": true, "constructor": false, "invocations": ["percentTendersCancelled", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "TenderPercentagesController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "percentTendersCancelled", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Returns the percent of tenders that were cancelled, grouped by year.\" + \" The year is taken from tender.tenderPeriod.startDate. The response also contains the\" + \" total number of tenders and total number of cancelled tenders for each year.\") @RequestMapping(value = \"/api/percentTendersCancelled\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Returns the percent of tenders that were cancelled, grouped by year.\" + \" The year is taken from tender.tenderPeriod.startDate. The response also contains the\" + \" total number of tenders and total number of cancelled tenders for each year.\") @RequestMapping(value = \"/api/percentTendersCancelled\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "percentTendersWithTwoOrMoreTenderers", "parameters": "(@ModelAttribute\n                                                               @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Percentage of tenders with >1 tenderer/bidder): \" + \"Count of tenders with numberOfTenderers >1 divided by total count of tenders.\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersWithTwoOrMoreTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> percentTendersWithTwoOrMoreTenderers(@ModelAttribute\n                                                               @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Percentage of tenders with >1 tenderer/bidder): \" + \"Count of tenders with numberOfTenderers >1 divided by total count of tenders.\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersWithTwoOrMoreTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersWithTwoOrMoreTenderers(@ModelAttribute\n                                                               @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersWithTwoOrMoreTenderers(@ModelAttribute\n                                                               @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "percentTendersAwarded", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Percent of awarded tenders with >1 tenderer/bidder\" + \"Count of tenders with numberOfTenderers >1 divided by total count of tenders with numberOfTenderers >0\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersAwardedWithTwoOrMoreTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> percentTendersAwarded(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Percent of awarded tenders with >1 tenderer/bidder\" + \"Count of tenders with numberOfTenderers >1 divided by total count of tenders with numberOfTenderers >0\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersAwardedWithTwoOrMoreTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersAwarded(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersAwarded(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "percentTendersUsingEBid", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Returns the percent of tenders with active awards, \" + \"with tender.submissionMethod='electronicSubmission'.\" + \"The endpoint also returns the total tenderds with active awards and the count of tenders with \" + \"tender.submissionMethod='electronicSubmission\") @RequestMapping(value = \"/api/percentTendersUsingEBid\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> percentTendersUsingEBid(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Returns the percent of tenders with active awards, \" + \"with tender.submissionMethod='electronicSubmission'.\" + \"The endpoint also returns the total tenderds with active awards and the count of tenders with \" + \"tender.submissionMethod='electronicSubmission\") @RequestMapping(value = \"/api/percentTendersUsingEBid\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersUsingEBid(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersUsingEBid(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "percentTendersWithLinkedProcurementPlan", "parameters": "(@ModelAttribute\n                                                                  @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Percentage of tenders that are associated in releases that \" + \"have the planning.budget.amount non empty,\" + \"meaning there really is a planning entity correlated with the tender entity.\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersWithLinkedProcurementPlan\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> percentTendersWithLinkedProcurementPlan(@ModelAttribute\n                                                                  @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Percentage of tenders that are associated in releases that \" + \"have the planning.budget.amount non empty,\" + \"meaning there really is a planning entity correlated with the tender entity.\" + \"This endpoint uses tender.tenderPeriod.startDate to calculate the tender year.\") @RequestMapping(value = \"/api/percentTendersWithLinkedProcurementPlan\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersWithLinkedProcurementPlan(@ModelAttribute\n                                                                  @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersWithLinkedProcurementPlan(@ModelAttribute\n                                                                  @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TenderPercentagesController.java"}, "focal_method": {"identifier": "percentTendersCancelled", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Returns the percent of tenders that were cancelled, grouped by year.\" + \" The year is taken from tender.tenderPeriod.startDate. The response also contains the\" + \" total number of tenders and total number of cancelled tenders for each year.\") @RequestMapping(value = \"/api/percentTendersCancelled\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(\"Returns the percent of tenders that were cancelled, grouped by year.\"\n            + \" The year is taken from tender.tenderPeriod.startDate. The response also contains the\"\n            + \" total number of tenders and total number of cancelled tenders for each year.\")\n    @RequestMapping(value = \"/api/percentTendersCancelled\",\n            method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project1 = new BasicDBObject();\n        addYearlyMonthlyProjection(filter, project1, ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE));\n        project1.put(MongoConstants.FieldNames.TENDER_STATUS, 1);\n\n        DBObject group = new BasicDBObject();\n        addYearlyMonthlyReferenceToGroup(filter, group);\n        group.put(Keys.TOTAL_TENDERS, new BasicDBObject(\"$sum\", 1));\n        group.put(Keys.TOTAL_CANCELLED, new BasicDBObject(\"$sum\", new BasicDBObject(\n                \"$cond\",\n                Arrays.asList(new BasicDBObject(\"$eq\", Arrays.asList(\n                        ref(MongoConstants.FieldNames.TENDER_STATUS), Tender.Status.cancelled.toString())), 1, 0)\n        )));\n\n        DBObject project2 = new BasicDBObject();\n        project2.put(Keys.TOTAL_TENDERS, 1);\n        project2.put(Keys.TOTAL_CANCELLED, 1);\n        project2.put(Keys.PERCENT_CANCELLED, new BasicDBObject(\n                \"$multiply\",\n                Arrays.asList(new BasicDBObject(\"$divide\", Arrays.asList(\"$totalCancelled\", \"$totalTenders\")), 100)\n        ));\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                new CustomProjectionOperation(project1), new CustomGroupingOperation(group),\n                new CustomProjectionOperation(project2),\n                transformYearlyGrouping(filter).andInclude(Keys.TOTAL_TENDERS,\n                        Keys.TOTAL_CANCELLED, Keys.PERCENT_TENDERS, Keys.PERCENT_CANCELLED\n                ),\n                getSortByYearMonth(filter),\n                skip(filter.getSkip()), limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Returns the percent of tenders that were cancelled, grouped by year.\" + \" The year is taken from tender.tenderPeriod.startDate. The response also contains the\" + \" total number of tenders and total number of cancelled tenders for each year.\") @RequestMapping(value = \"/api/percentTendersCancelled\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TenderPercentagesController.percentTendersCancelled(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["addYearlyMonthlyProjection", "ref", "put", "addYearlyMonthlyReferenceToGroup", "put", "put", "asList", "asList", "ref", "toString", "put", "put", "put", "asList", "asList", "newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "andInclude", "transformYearlyGrouping", "getSortByYearMonth", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}