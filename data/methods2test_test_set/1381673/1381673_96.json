{"test_class": {"identifier": "BaseExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ClassLoader classLoader = BaseExpressionEvaluatorTest.class.getClassLoader();", "modifier": "private final static", "type": "ClassLoader", "declarator": "classLoader = BaseExpressionEvaluatorTest.class.getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final static AbstractExpressionEvaluator expressionEvaluator = new BaseExpressionEvaluator(classLoader);", "modifier": "private final static", "type": "AbstractExpressionEvaluator", "declarator": "expressionEvaluator = new BaseExpressionEvaluator(classLoader)", "var_name": "expressionEvaluator"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/BaseExpressionEvaluatorTest.java"}, "test_case": {"identifier": "createObjectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createObjectTest() {\n        assertNotNull(expressionEvaluator.createObject(String.class.getCanonicalName(), Collections.emptyList()));\n        assertTrue(expressionEvaluator.createObject(Map.class.getCanonicalName(), Arrays.asList(String.class.getCanonicalName(), String.class.getCanonicalName())) instanceof Map);\n\n        Assertions.assertThatThrownBy(() -> expressionEvaluator.createObject(\"com.invalid.class.Name\", Collections.emptyList())).isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"Impossible to instantiate com.invalid.class.Name\");\n    }", "signature": "void createObjectTest()", "full_signature": "@Test public void createObjectTest()", "class_method_signature": "BaseExpressionEvaluatorTest.createObjectTest()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "createObject", "getCanonicalName", "emptyList", "assertTrue", "createObject", "getCanonicalName", "asList", "getCanonicalName", "getCanonicalName", "hasMessage", "isInstanceOf", "assertThatThrownBy", "createObject", "emptyList"]}, "focal_class": {"identifier": "BaseExpressionEvaluator", "superclass": "extends AbstractExpressionEvaluator", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "methods": [{"identifier": "BaseExpressionEvaluator", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " BaseExpressionEvaluator(ClassLoader classLoader)", "full_signature": "public  BaseExpressionEvaluator(ClassLoader classLoader)", "class_method_signature": "BaseExpressionEvaluator.BaseExpressionEvaluator(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "fromObjectToExpression", "parameters": "(Object value)", "modifiers": "@Override public", "return": "String", "signature": "String fromObjectToExpression(Object value)", "full_signature": "@Override public String fromObjectToExpression(Object value)", "class_method_signature": "BaseExpressionEvaluator.fromObjectToExpression(Object value)", "testcase": false, "constructor": false}, {"identifier": "internalUnaryEvaluation", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "full_signature": "@Override protected boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "class_method_signature": "BaseExpressionEvaluator.internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "testcase": false, "constructor": false}, {"identifier": "internalLiteralEvaluation", "parameters": "(String rawValue, String className)", "modifiers": "@Override protected", "return": "Object", "signature": "Object internalLiteralEvaluation(String rawValue, String className)", "full_signature": "@Override protected Object internalLiteralEvaluation(String rawValue, String className)", "class_method_signature": "BaseExpressionEvaluator.internalLiteralEvaluation(String rawValue, String className)", "testcase": false, "constructor": false}, {"identifier": "extractFieldValue", "parameters": "(Object result, String fieldName)", "modifiers": "@Override protected", "return": "Object", "signature": "Object extractFieldValue(Object result, String fieldName)", "full_signature": "@Override protected Object extractFieldValue(Object result, String fieldName)", "class_method_signature": "BaseExpressionEvaluator.extractFieldValue(Object result, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Object", "signature": "Object createObject(String className, List<String> genericClasses)", "full_signature": "@Override protected Object createObject(String className, List<String> genericClasses)", "class_method_signature": "BaseExpressionEvaluator.createObject(String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object toReturn, String fieldName, Object fieldValue)", "modifiers": "@Override protected", "return": "void", "signature": "void setField(Object toReturn, String fieldName, Object fieldValue)", "full_signature": "@Override protected void setField(Object toReturn, String fieldName, Object fieldValue)", "class_method_signature": "BaseExpressionEvaluator.setField(Object toReturn, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "getFieldClassNameAndGenerics", "parameters": "(Object element, String fieldName, String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Map.Entry<String, List<String>>", "signature": "Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "full_signature": "@Override protected Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "class_method_signature": "BaseExpressionEvaluator.getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/BaseExpressionEvaluator.java"}, "focal_method": {"identifier": "createObject", "parameters": "(String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object createObject(String className, List<String> genericClasses) {\n        if (ScenarioSimulationSharedUtils.isMap(className)) {\n            return new HashMap();\n        } else {\n            try {\n                return classLoader.loadClass(className).newInstance();\n            } catch (Exception e) {\n                throw new IllegalArgumentException(\"Impossible to instantiate \" + className, e);\n            }\n        }\n    }", "signature": "Object createObject(String className, List<String> genericClasses)", "full_signature": "@Override protected Object createObject(String className, List<String> genericClasses)", "class_method_signature": "BaseExpressionEvaluator.createObject(String className, List<String> genericClasses)", "testcase": false, "constructor": false, "invocations": ["isMap", "newInstance", "loadClass"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}