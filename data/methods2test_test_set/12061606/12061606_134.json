{"test_class": {"identifier": "LocaliseTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/LocaliseTest.java"}, "test_case": {"identifier": "smallRingTest_8", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void smallRingTest_8() throws Exception {\n        Graph g = Graph.fromSmiles(\"C1CCCCCCC1\");\n        assertFalse(Localise.inSmallRing(g, g.edge(0, 1)));\n    }", "signature": "void smallRingTest_8()", "full_signature": "@Test public void smallRingTest_8()", "class_method_signature": "LocaliseTest.smallRingTest_8()", "testcase": true, "constructor": false, "invocations": ["fromSmiles", "assertFalse", "inSmallRing", "edge"]}, "focal_class": {"identifier": "Localise", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateKekuleForm", "parameters": "(Graph g, BitSet subset, BitSet aromatic, boolean inplace)", "modifiers": "private static", "return": "Graph", "signature": "Graph generateKekuleForm(Graph g, BitSet subset, BitSet aromatic, boolean inplace)", "full_signature": "private static Graph generateKekuleForm(Graph g, BitSet subset, BitSet aromatic, boolean inplace)", "class_method_signature": "Localise.generateKekuleForm(Graph g, BitSet subset, BitSet aromatic, boolean inplace)", "testcase": false, "constructor": false}, {"identifier": "copyAndAssign", "parameters": "(Graph delocalised, BitSet subset, BitSet aromatic, Matching m)", "modifiers": "private static", "return": "Graph", "signature": "Graph copyAndAssign(Graph delocalised, BitSet subset, BitSet aromatic, Matching m)", "full_signature": "private static Graph copyAndAssign(Graph delocalised, BitSet subset, BitSet aromatic, Matching m)", "class_method_signature": "Localise.copyAndAssign(Graph delocalised, BitSet subset, BitSet aromatic, Matching m)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Graph g, BitSet subset, BitSet aromatic, Matching m)", "modifiers": "private static", "return": "Graph", "signature": "Graph assign(Graph g, BitSet subset, BitSet aromatic, Matching m)", "full_signature": "private static Graph assign(Graph g, BitSet subset, BitSet aromatic, Matching m)", "class_method_signature": "Localise.assign(Graph g, BitSet subset, BitSet aromatic, Matching m)", "testcase": false, "constructor": false}, {"identifier": "buildSet", "parameters": "(Graph g, BitSet aromatic)", "modifiers": "static", "return": "BitSet", "signature": "BitSet buildSet(Graph g, BitSet aromatic)", "full_signature": "static BitSet buildSet(Graph g, BitSet aromatic)", "class_method_signature": "Localise.buildSet(Graph g, BitSet aromatic)", "testcase": false, "constructor": false}, {"identifier": "predetermined", "parameters": "(Graph g, int v)", "modifiers": "static", "return": "boolean", "signature": "boolean predetermined(Graph g, int v)", "full_signature": "static boolean predetermined(Graph g, int v)", "class_method_signature": "Localise.predetermined(Graph g, int v)", "testcase": false, "constructor": false}, {"identifier": "inSmallRing", "parameters": "(Graph g, Edge e)", "modifiers": "static", "return": "boolean", "signature": "boolean inSmallRing(Graph g, Edge e)", "full_signature": "static boolean inSmallRing(Graph g, Edge e)", "class_method_signature": "Localise.inSmallRing(Graph g, Edge e)", "testcase": false, "constructor": false}, {"identifier": "inSmallRing", "parameters": "(Graph g, int v, int prev, int t, int d, BitSet visit)", "modifiers": "static", "return": "boolean", "signature": "boolean inSmallRing(Graph g, int v, int prev, int t, int d, BitSet visit)", "full_signature": "static boolean inSmallRing(Graph g, int v, int prev, int t, int d, BitSet visit)", "class_method_signature": "Localise.inSmallRing(Graph g, int v, int prev, int t, int d, BitSet visit)", "testcase": false, "constructor": false}, {"identifier": "resonate", "parameters": "(Graph g, BitSet cyclic, boolean ordered)", "modifiers": "static", "return": "Graph", "signature": "Graph resonate(Graph g, BitSet cyclic, boolean ordered)", "full_signature": "static Graph resonate(Graph g, BitSet cyclic, boolean ordered)", "class_method_signature": "Localise.resonate(Graph g, BitSet cyclic, boolean ordered)", "testcase": false, "constructor": false}, {"identifier": "resonate", "parameters": "(Graph g)", "modifiers": "static", "return": "Graph", "signature": "Graph resonate(Graph g)", "full_signature": "static Graph resonate(Graph g)", "class_method_signature": "Localise.resonate(Graph g)", "testcase": false, "constructor": false}, {"identifier": "hasAdditionalCyclicDoubleBond", "parameters": "(Graph g, BitSet cyclic, int u, int v)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasAdditionalCyclicDoubleBond(Graph g, BitSet cyclic, int u, int v)", "full_signature": "private static boolean hasAdditionalCyclicDoubleBond(Graph g, BitSet cyclic, int u, int v)", "class_method_signature": "Localise.hasAdditionalCyclicDoubleBond(Graph g, BitSet cyclic, int u, int v)", "testcase": false, "constructor": false}, {"identifier": "hasAdjDirectionalLabels", "parameters": "(Graph g, Edge e, BitSet cyclic)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasAdjDirectionalLabels(Graph g, Edge e, BitSet cyclic)", "full_signature": "private static boolean hasAdjDirectionalLabels(Graph g, Edge e, BitSet cyclic)", "class_method_signature": "Localise.hasAdjDirectionalLabels(Graph g, Edge e, BitSet cyclic)", "testcase": false, "constructor": false}, {"identifier": "hasAdjDirectionalLabels", "parameters": "(Graph g, int u, BitSet cyclic)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasAdjDirectionalLabels(Graph g, int u, BitSet cyclic)", "full_signature": "private static boolean hasAdjDirectionalLabels(Graph g, int u, BitSet cyclic)", "class_method_signature": "Localise.hasAdjDirectionalLabels(Graph g, int u, BitSet cyclic)", "testcase": false, "constructor": false}, {"identifier": "localise", "parameters": "(Graph delocalised)", "modifiers": "static", "return": "Graph", "signature": "Graph localise(Graph delocalised)", "full_signature": "static Graph localise(Graph delocalised)", "class_method_signature": "Localise.localise(Graph delocalised)", "testcase": false, "constructor": false}, {"identifier": "localiseInPlace", "parameters": "(Graph delocalised)", "modifiers": "static", "return": "Graph", "signature": "Graph localiseInPlace(Graph delocalised)", "full_signature": "static Graph localiseInPlace(Graph delocalised)", "class_method_signature": "Localise.localiseInPlace(Graph delocalised)", "testcase": false, "constructor": false}, {"identifier": "hasOddCardinality", "parameters": "(BitSet s)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasOddCardinality(BitSet s)", "full_signature": "private static boolean hasOddCardinality(BitSet s)", "class_method_signature": "Localise.hasOddCardinality(BitSet s)", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/Localise.java"}, "focal_method": {"identifier": "inSmallRing", "parameters": "(Graph g, Edge e)", "modifiers": "static", "return": "boolean", "body": "static boolean inSmallRing(Graph g, Edge e) {\n        BitSet visit = new BitSet();\n        return inSmallRing(g, e.either(), e.other(e.either()), e.other(e.either()), 1, new BitSet());\n    }", "signature": "boolean inSmallRing(Graph g, Edge e)", "full_signature": "static boolean inSmallRing(Graph g, Edge e)", "class_method_signature": "Localise.inSmallRing(Graph g, Edge e)", "testcase": false, "constructor": false, "invocations": ["inSmallRing", "either", "other", "either", "other", "either"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}