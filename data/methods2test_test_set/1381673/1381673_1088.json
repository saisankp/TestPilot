{"test_class": {"identifier": "KiePMMLSimplePredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SIMPLE_PREDICATE_NAME = \"SIMPLEPREDICATENAME\";", "modifier": "private final", "type": "String", "declarator": "SIMPLE_PREDICATE_NAME = \"SIMPLEPREDICATENAME\"", "var_name": "SIMPLE_PREDICATE_NAME"}], "file": "kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicateTest.java"}, "test_case": {"identifier": "evaluationStringEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluationStringEqual() {\n        Object value = \"43\";\n        KiePMMLSimplePredicate kiePMMLSimplePredicate = getKiePMMLSimplePredicate(OPERATOR.EQUAL, value);\n        assertFalse(kiePMMLSimplePredicate.evaluation(\"NOT\"));\n        assertTrue(kiePMMLSimplePredicate.evaluation(value));\n    }", "signature": "void evaluationStringEqual()", "full_signature": "@Test public void evaluationStringEqual()", "class_method_signature": "KiePMMLSimplePredicateTest.evaluationStringEqual()", "testcase": true, "constructor": false, "invocations": ["getKiePMMLSimplePredicate", "assertFalse", "evaluation", "assertTrue", "evaluation"]}, "focal_class": {"identifier": "KiePMMLSimplePredicate", "superclass": "extends KiePMMLPredicate", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLSimplePredicate.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLSimplePredicate.class)", "var_name": "logger"}, {"original_string": "private final OPERATOR operator;", "modifier": "private final", "type": "OPERATOR", "declarator": "operator", "var_name": "operator"}, {"original_string": "protected Object value;", "modifier": "protected", "type": "Object", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "KiePMMLSimplePredicate", "parameters": "(final String name, final List<KiePMMLExtension> extensions, final OPERATOR operator)", "modifiers": "protected", "return": "", "signature": " KiePMMLSimplePredicate(final String name, final List<KiePMMLExtension> extensions, final OPERATOR operator)", "full_signature": "protected  KiePMMLSimplePredicate(final String name, final List<KiePMMLExtension> extensions, final OPERATOR operator)", "class_method_signature": "KiePMMLSimplePredicate.KiePMMLSimplePredicate(final String name, final List<KiePMMLExtension> extensions, final OPERATOR operator)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "(String name, List<KiePMMLExtension> extensions, OPERATOR operator)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(String name, List<KiePMMLExtension> extensions, OPERATOR operator)", "full_signature": "public static Builder builder(String name, List<KiePMMLExtension> extensions, OPERATOR operator)", "class_method_signature": "KiePMMLSimplePredicate.builder(String name, List<KiePMMLExtension> extensions, OPERATOR operator)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Map<String, Object> values)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate(Map<String, Object> values)", "full_signature": "@Override public boolean evaluate(Map<String, Object> values)", "class_method_signature": "KiePMMLSimplePredicate.evaluate(Map<String, Object> values)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "KiePMMLSimplePredicate.getName()", "testcase": false, "constructor": false}, {"identifier": "getOperator", "parameters": "()", "modifiers": "public", "return": "OPERATOR", "signature": "OPERATOR getOperator()", "full_signature": "public OPERATOR getOperator()", "class_method_signature": "KiePMMLSimplePredicate.getOperator()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "KiePMMLSimplePredicate.getValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "KiePMMLSimplePredicate.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "KiePMMLSimplePredicate.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KiePMMLSimplePredicate.hashCode()", "testcase": false, "constructor": false}, {"identifier": "evaluation", "parameters": "(Object inputValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean evaluation(Object inputValue)", "full_signature": "protected boolean evaluation(Object inputValue)", "class_method_signature": "KiePMMLSimplePredicate.evaluation(Object inputValue)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java"}, "focal_method": {"identifier": "evaluation", "parameters": "(Object inputValue)", "modifiers": "protected", "return": "boolean", "body": "protected boolean evaluation(Object inputValue) {\n        switch (operator) {\n            case EQUAL:\n                return value.equals(inputValue);\n            case NOT_EQUAL:\n                return !value.equals(inputValue);\n            case LESS_THAN:\n                if (inputValue instanceof Number && value instanceof Number) {\n                    return ((Number) inputValue).doubleValue() < ((Number) value).doubleValue();\n                } else {\n                    return false;\n                }\n            case LESS_OR_EQUAL:\n                if (inputValue instanceof Number && value instanceof Number) {\n                    return ((Number) inputValue).doubleValue() <= ((Number) value).doubleValue();\n                } else {\n                    return false;\n                }\n            case GREATER_THAN:\n                if (inputValue instanceof Number && value instanceof Number) {\n                    return ((Number) inputValue).doubleValue() > ((Number) value).doubleValue();\n                } else {\n                    return false;\n                }\n            case GREATER_OR_EQUAL:\n                if (inputValue instanceof Number && value instanceof Number) {\n                    return ((Number) inputValue).doubleValue() >= ((Number) value).doubleValue();\n                } else {\n                    return false;\n                }\n            case IS_MISSING:\n            case IS_NOT_MISSING:\n                // TODO {gcardosi} DROOLS-5604\n                throw new IllegalArgumentException(SURROGATE + \" not supported, yet\");\n            default:\n                throw new KiePMMLException(\"Unknown OPERATOR \" + operator);\n        }\n    }", "signature": "boolean evaluation(Object inputValue)", "full_signature": "protected boolean evaluation(Object inputValue)", "class_method_signature": "KiePMMLSimplePredicate.evaluation(Object inputValue)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "doubleValue", "doubleValue", "doubleValue", "doubleValue", "doubleValue", "doubleValue", "doubleValue", "doubleValue"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}