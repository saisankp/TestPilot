{"test_class": {"identifier": "UcteConverterHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Network reference;", "modifier": "private static", "type": "Network", "declarator": "reference", "var_name": "reference"}], "file": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/util/UcteConverterHelperTest.java"}, "test_case": {"identifier": "calculateAsymmAngleDuTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateAsymmAngleDuTest() {\n        assertEquals(1.000, calculateAsymmAngleDu(reference.getTwoWindingsTransformer(\"HDDDDD2  HCCCCC1  1\")), 0.0001);\n    }", "signature": "void calculateAsymmAngleDuTest()", "full_signature": "@Test public void calculateAsymmAngleDuTest()", "class_method_signature": "UcteConverterHelperTest.calculateAsymmAngleDuTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateAsymmAngleDu", "getTwoWindingsTransformer"]}, "focal_class": {"identifier": "UcteConverterHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "UcteConverterHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " UcteConverterHelper()", "full_signature": "private  UcteConverterHelper()", "class_method_signature": "UcteConverterHelper.UcteConverterHelper()", "testcase": false, "constructor": true}, {"identifier": "calculatePhaseDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateSymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateAsymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateAsymmAngleTheta", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}], "file": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/util/UcteConverterHelper.java"}, "focal_method": {"identifier": "calculateAsymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "body": "public static double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer) {\n        PhaseTapChanger phaseTapChanger = twoWindingsTransformer.getPhaseTapChanger();\n        int lowTapPosition = phaseTapChanger.getLowTapPosition();\n        int highTapPosition = phaseTapChanger.getHighTapPosition();\n        int tapNumber = phaseTapChanger.getStepCount();\n        double lowPositionAlpha = Math.toRadians(-phaseTapChanger.getStep(lowTapPosition).getAlpha());\n        double lowPositionRho = 1 / phaseTapChanger.getStep(lowTapPosition).getRho();\n        double highPositionAlpha = Math.toRadians(-phaseTapChanger.getStep(highTapPosition).getAlpha());\n        double highPositionRho = 1 / phaseTapChanger.getStep(highTapPosition).getRho();\n        double xa = lowPositionRho * Math.cos(lowPositionAlpha);\n        double ya = lowPositionRho * Math.sin(lowPositionAlpha);\n        double xb = highPositionRho * Math.cos(highPositionAlpha);\n        double yb = highPositionRho * Math.sin(highPositionAlpha);\n        double distance = Math.sqrt((xb - xa) * (xb - xa) + (yb - ya) * (yb - ya));\n        double du = 100 * distance / (tapNumber - 1);\n        return BigDecimal.valueOf(du).setScale(4, RoundingMode.HALF_UP).doubleValue();\n    }", "signature": "double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false, "invocations": ["getPhaseTapChanger", "getLowTapPosition", "getHighTapPosition", "getStepCount", "toRadians", "getAlpha", "getStep", "getRho", "getStep", "toRadians", "getAlpha", "getStep", "getRho", "getStep", "cos", "sin", "cos", "sin", "sqrt", "doubleValue", "setScale", "valueOf"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}