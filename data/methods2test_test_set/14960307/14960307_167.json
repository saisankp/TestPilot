{"test_class": {"identifier": "UnwrappedWeakReferenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/UnwrappedWeakReferenceTest.java"}, "test_case": {"identifier": "equals", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"IncompatibleEquals\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"IncompatibleEquals\")\n    public void equals() throws Exception {\n        String o = new String();\n        \n        // verify WeakReference does not work correctly with CopyOnWriteArrayList\n        WeakReference ref0 = new UnwrappedWeakReference(o);\n        WeakReference ref1 = new UnwrappedWeakReference(o);\n        \n        Assert.assertTrue(ref0.equals(ref1));\n        // also test non-unwrapping\n        Assert.assertTrue(ref0.equals(o));\n        Assert.assertTrue(ref1.equals(o));\n    }", "signature": "void equals()", "full_signature": "@Test @SuppressWarnings(\"IncompatibleEquals\") public void equals()", "class_method_signature": "UnwrappedWeakReferenceTest.equals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "UnwrappedWeakReference", "superclass": "extends WeakReference<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "UnwrappedWeakReference", "parameters": "(T ref)", "modifiers": "public", "return": "", "signature": " UnwrappedWeakReference(T ref)", "full_signature": "public  UnwrappedWeakReference(T ref)", "class_method_signature": "UnwrappedWeakReference.UnwrappedWeakReference(T ref)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "UnwrappedWeakReference.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UnwrappedWeakReference.hashCode()", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/UnwrappedWeakReference.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        // unwrap both objects!\n        T thisObject = this.get();\n        \n        // if the other object is also a WeakRefe\n        if (obj instanceof WeakReference) {\n            obj = ((WeakReference)obj).get();\n        }\n        \n        // check if anything is null (was garbage collected)\n        if (thisObject == null) {\n            if (obj == null) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        \n        return thisObject.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "UnwrappedWeakReference.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["get", "get", "equals"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}