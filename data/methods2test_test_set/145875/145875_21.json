{"test_class": {"identifier": "PrettyPrinterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PrettyPrinter prettyPrinter = new PrettyPrinter();", "modifier": "", "type": "PrettyPrinter", "declarator": "prettyPrinter = new PrettyPrinter()", "var_name": "prettyPrinter"}], "file": "dbdeploy-core/src/test/java/com/dbdeploy/PrettyPrinterTest.java"}, "test_case": {"identifier": "canDealWithMixtureOfRangesAndNonRanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void canDealWithMixtureOfRangesAndNonRanges() throws Exception {\n\t\tassertEquals(\"1, 2, 4, 7..10, 12\", prettyPrinter.format(Arrays.asList(1L, 2L, 4L, 7L, 8L, 9L, 10L, 12L)));\n\t}", "signature": "void canDealWithMixtureOfRangesAndNonRanges()", "full_signature": "@Test public void canDealWithMixtureOfRangesAndNonRanges()", "class_method_signature": "PrettyPrinterTest.canDealWithMixtureOfRangesAndNonRanges()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "format", "asList"]}, "focal_class": {"identifier": "PrettyPrinter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "format", "parameters": "(List<Long> appliedChanges)", "modifiers": "public", "return": "String", "signature": "String format(List<Long> appliedChanges)", "full_signature": "public String format(List<Long> appliedChanges)", "class_method_signature": "PrettyPrinter.format(List<Long> appliedChanges)", "testcase": false, "constructor": false}, {"identifier": "appendRange", "parameters": "(StringBuilder builder, Long lastRangeStart, Long lastNumber)", "modifiers": "private", "return": "void", "signature": "void appendRange(StringBuilder builder, Long lastRangeStart, Long lastNumber)", "full_signature": "private void appendRange(StringBuilder builder, Long lastRangeStart, Long lastNumber)", "class_method_signature": "PrettyPrinter.appendRange(StringBuilder builder, Long lastRangeStart, Long lastNumber)", "testcase": false, "constructor": false}, {"identifier": "appendWithPossibleComma", "parameters": "(StringBuilder builder, Object o)", "modifiers": "private", "return": "void", "signature": "void appendWithPossibleComma(StringBuilder builder, Object o)", "full_signature": "private void appendWithPossibleComma(StringBuilder builder, Object o)", "class_method_signature": "PrettyPrinter.appendWithPossibleComma(StringBuilder builder, Object o)", "testcase": false, "constructor": false}, {"identifier": "formatChangeScriptList", "parameters": "(List<ChangeScript> changeScripts)", "modifiers": "public", "return": "String", "signature": "String formatChangeScriptList(List<ChangeScript> changeScripts)", "full_signature": "public String formatChangeScriptList(List<ChangeScript> changeScripts)", "class_method_signature": "PrettyPrinter.formatChangeScriptList(List<ChangeScript> changeScripts)", "testcase": false, "constructor": false}], "file": "dbdeploy-core/src/main/java/com/dbdeploy/PrettyPrinter.java"}, "focal_method": {"identifier": "format", "parameters": "(List<Long> appliedChanges)", "modifiers": "public", "return": "String", "body": "public String format(List<Long> appliedChanges) {\n\t\tif (appliedChanges.isEmpty()) {\n\t\t\treturn \"(none)\";\n\t\t}\n\t\t\n\t\tStringBuilder builder = new StringBuilder();\n\t\t\n\t\tLong lastRangeStart = null;\n\t\tLong lastNumber = null;\n\t\t\n\t\tfor (Long thisNumber : appliedChanges) {\n\t\t\tif (lastNumber == null) {\n\t\t\t\t// first in loop\n\t\t\t\tlastNumber = thisNumber;\n\t\t\t\tlastRangeStart = thisNumber;\n\t\t\t} else if (thisNumber == lastNumber + 1) {\n\t\t\t\t// continuation of current range\n\t\t\t\tlastNumber = thisNumber;\n\t\t\t} else {\n\t\t\t\t// doesn't fit into last range - so output the old range and\n\t\t\t\t// start a new one\n\t\t\t\tappendRange(builder, lastRangeStart, lastNumber);\n\t\t\t\tlastNumber = thisNumber;\n\t\t\t\tlastRangeStart = thisNumber;\n\t\t\t}\n\t\t}\n\n\t\tappendRange(builder, lastRangeStart, lastNumber);\n\t\treturn builder.toString();\n\t}", "signature": "String format(List<Long> appliedChanges)", "full_signature": "public String format(List<Long> appliedChanges)", "class_method_signature": "PrettyPrinter.format(List<Long> appliedChanges)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "appendRange", "appendRange", "toString"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}