{"test_class": {"identifier": "TestDatabaseFDFlowManager", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FDFlowManager flowManager;", "modifier": "@Autowired\n    private", "type": "FDFlowManager", "declarator": "flowManager", "var_name": "flowManager"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/service/flow/TestDatabaseFDFlowManager.java"}, "test_case": {"identifier": "testDeleteFlowEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteFlowEvent() {\n        // Verify that we start with 3 events for flow #2\n        final String flowId = \"2\";\n        final List<FDFlowEvent> flowEvents = flowManager.getFlowEvents(flowId);\n        assertEquals(3, flowEvents.size());\n\n        final FDFlowEvent flowEvent2 = flowManager.deleteFlowEvent(\"2\");\n        assertNotNull(flowEvent2);\n\n        final FDFlowEvent flowEvent3 = flowManager.deleteFlowEvent(\"3\");\n        assertNotNull(flowEvent3);\n\n        try {\n            flowManager.deleteFlowEvent(\"4\");\n            Assert.fail(\"Should have thrown exception\");\n        } catch (Exception e) {\n\n        }\n    }", "signature": "void testDeleteFlowEvent()", "full_signature": "@Test public void testDeleteFlowEvent()", "class_method_signature": "TestDatabaseFDFlowManager.testDeleteFlowEvent()", "testcase": true, "constructor": false, "invocations": ["getFlowEvents", "assertEquals", "size", "deleteFlowEvent", "assertNotNull", "deleteFlowEvent", "assertNotNull", "deleteFlowEvent", "fail"]}, "focal_class": {"identifier": "DatabaseFDFlowManager", "superclass": "extends BaseService", "interfaces": "implements FDFlowManager", "fields": [{"original_string": "static final String ROOT_PROCESS_GROUP_NAME = \"root\";", "modifier": "static final", "type": "String", "declarator": "ROOT_PROCESS_GROUP_NAME = \"root\"", "var_name": "ROOT_PROCESS_GROUP_NAME"}, {"original_string": "static final String UNPUBLISHED = \"UNPUBLISHED\";", "modifier": "static final", "type": "String", "declarator": "UNPUBLISHED = \"UNPUBLISHED\"", "var_name": "UNPUBLISHED"}, {"original_string": "public static final FDFlowFormat CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1;", "modifier": "public static final", "type": "FDFlowFormat", "declarator": "CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1", "var_name": "CURRENT_FLOW_FORMAT"}, {"original_string": "private final FDFlowRepository flowRepository;", "modifier": "private final", "type": "FDFlowRepository", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private final FDFlowEventRepository flowEventRepository;", "modifier": "private final", "type": "FDFlowEventRepository", "declarator": "flowEventRepository", "var_name": "flowEventRepository"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private Map<String,FDFlow> flowsById = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String,FDFlow>", "declarator": "flowsById = new ConcurrentHashMap<>()", "var_name": "flowsById"}], "methods": [{"identifier": "DatabaseFDFlowManager", "parameters": "(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "modifiers": "@Autowired public", "return": "", "signature": " DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "full_signature": "@Autowired public  DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "class_method_signature": "DatabaseFDFlowManager.DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "testcase": false, "constructor": true}, {"identifier": "getFlowMetadata", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowMetadata>", "signature": "Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "full_signature": "@Override public Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowMetadata(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlow>", "signature": "Optional<FDFlow> getFlow(final String flowId)", "full_signature": "@Override public Optional<FDFlow> getFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "createFlow", "parameters": "(final String agentClass, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "full_signature": "@Override public FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.createFlow(final String agentClass, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "getAvailableFlows", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowMetadata>", "signature": "List<FDFlowMetadata> getAvailableFlows()", "full_signature": "@Override public List<FDFlowMetadata> getAvailableFlows()", "class_method_signature": "DatabaseFDFlowManager.getAvailableFlows()", "testcase": false, "constructor": false}, {"identifier": "getFlowSummaries", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowSummary>", "signature": "List<FDFlowSummary> getFlowSummaries()", "full_signature": "@Override public List<FDFlowSummary> getFlowSummaries()", "class_method_signature": "DatabaseFDFlowManager.getFlowSummaries()", "testcase": false, "constructor": false}, {"identifier": "deleteFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata deleteFlow(final String flowId)", "full_signature": "@Override public FDFlowMetadata deleteFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "List<FDFlowEvent>", "signature": "List<FDFlowEvent> getFlowEvents(final String flowId)", "full_signature": "@Override public List<FDFlowEvent> getFlowEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEventEntity", "parameters": "(final String flowId)", "modifiers": "private", "return": "Optional<FDFlowEventEntity>", "signature": "Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "full_signature": "private Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEventEntity(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestPublishFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestPublishFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "full_signature": "@Override public Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "addFlowEvent", "parameters": "(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "full_signature": "@Override public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "deleteFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent deleteFlowEvent(final String flowEventId)", "full_signature": "@Override public FDFlowEvent deleteFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "retainPublishEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "void", "signature": "void retainPublishEvents(final String flowId)", "full_signature": "@Override public void retainPublishEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.retainPublishEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "revertToFlowRevision", "parameters": "(final String flowId, final BigInteger flowRevision)", "modifiers": "@Override public", "return": "void", "signature": "void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "full_signature": "@Override public void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "class_method_signature": "DatabaseFDFlowManager.revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "testcase": false, "constructor": false}, {"identifier": "serializeFlowContent", "parameters": "(final VersionedProcessGroup flowContent)", "modifiers": "private", "return": "String", "signature": "String serializeFlowContent(final VersionedProcessGroup flowContent)", "full_signature": "private String serializeFlowContent(final VersionedProcessGroup flowContent)", "class_method_signature": "DatabaseFDFlowManager.serializeFlowContent(final VersionedProcessGroup flowContent)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String flowContent)", "modifiers": "private", "return": "VersionedProcessGroup", "signature": "VersionedProcessGroup deserialize(String flowContent)", "full_signature": "private VersionedProcessGroup deserialize(String flowContent)", "class_method_signature": "DatabaseFDFlowManager.deserialize(String flowContent)", "testcase": false, "constructor": false}, {"identifier": "createVersionInfo", "parameters": "(final FDFlowEventEntity flowEvent)", "modifiers": "private", "return": "FDVersionInfo", "signature": "FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "full_signature": "private FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "class_method_signature": "DatabaseFDFlowManager.createVersionInfo(final FDFlowEventEntity flowEvent)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/service/flow/DatabaseFDFlowManager.java"}, "focal_method": {"identifier": "deleteFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "FDFlowEvent", "body": "@Override\n    public FDFlowEvent deleteFlowEvent(final String flowEventId) {\n        if (StringUtils.isBlank(flowEventId)) {\n            throw new IllegalArgumentException(\"Flow event id cannot be null or blank\");\n        }\n\n        final Optional<FDFlowEventEntity> flowEventEntity = flowEventRepository.findById(flowEventId);\n        if (!flowEventEntity.isPresent()) {\n            throw new ResourceNotFoundException(\"No flow event exists for the given id\");\n        }\n\n        if (flowEventEntity.get().getEventType() == FDFlowEventType.FLOW_PUBLISHED) {\n            throw new IllegalArgumentException(\"Cannot delete event because deleting events of type \"\n                    + FDFlowEventType.FLOW_PUBLISHED + \" is not allowed\");\n        }\n\n        final FDFlowEntity flowEntity = flowEventEntity.get().getFlow();\n\n        final Long numEventsForFlow = flowEventRepository.countByFlow(flowEntity);\n        if (numEventsForFlow <= 1) {\n            throw new IllegalStateException(\"Cannot delete event because there is only one event for the given flow\");\n        }\n\n        flowEventRepository.delete(flowEventEntity.get());\n\n        // we don't know if the event being deleted is the latest event, and if it is then the cached version of\n        // the flow is no longer accurate because it was based on the deleted event\n        if (flowsById.containsKey(flowEntity.getId())) {\n            flowsById.remove(flowEntity.getId());\n        }\n\n        return modelMapper.map(flowEventEntity.get(), FDFlowEvent.class);\n    }", "signature": "FDFlowEvent deleteFlowEvent(final String flowEventId)", "full_signature": "@Override public FDFlowEvent deleteFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlowEvent(final String flowEventId)", "testcase": false, "constructor": false, "invocations": ["isBlank", "findById", "isPresent", "getEventType", "get", "getFlow", "get", "countByFlow", "delete", "get", "containsKey", "getId", "remove", "getId", "map", "get"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}