{"test_class": {"identifier": "AuditingFilesManagerTest", "superclass": "extends AuditingTestsBase", "interfaces": "", "fields": [], "file": "src/modules/rest/auditing/src/test/java/it/geosolutions/geostore/services/rest/auditing/AuditingFilesManagerTest.java"}, "test_case": {"identifier": "testCleanInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCleanInit() {\n        AuditingFilesManager auditingFilesManager =\n                new AuditingFilesManager(OUTPUT_DIRECTORY.getPath(), \"txt\");\n        File expectedOutputFile = new File(OUTPUT_DIRECTORY, \"audit-geostore.txt\");\n        assertEquals(auditingFilesManager.getOutputFile(), expectedOutputFile);\n        AuditingTestsUtils.checkDirectoryContainsFiles(OUTPUT_DIRECTORY, expectedOutputFile);\n    }", "signature": "void testCleanInit()", "full_signature": "@Test public void testCleanInit()", "class_method_signature": "AuditingFilesManagerTest.testCleanInit()", "testcase": true, "constructor": false, "invocations": ["getPath", "assertEquals", "getOutputFile", "checkDirectoryContainsFiles"]}, "focal_class": {"identifier": "AuditingFilesManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(AuditingFilesManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(AuditingFilesManager.class)", "var_name": "logger"}, {"original_string": "private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMdd\");", "modifier": "private final", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"yyyyMMdd\")", "var_name": "dateFormat"}, {"original_string": "private final File outputDirectory;", "modifier": "private final", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}, {"original_string": "private final String fileExtension;", "modifier": "private final", "type": "String", "declarator": "fileExtension", "var_name": "fileExtension"}, {"original_string": "private File outputFile;", "modifier": "private", "type": "File", "declarator": "outputFile", "var_name": "outputFile"}, {"original_string": "private String currentDayTag;", "modifier": "private", "type": "String", "declarator": "currentDayTag", "var_name": "currentDayTag"}, {"original_string": "private Pattern filePattern;", "modifier": "private", "type": "Pattern", "declarator": "filePattern", "var_name": "filePattern"}], "methods": [{"identifier": "AuditingFilesManager", "parameters": "(String outputDirectoryPath, String fileExtension)", "modifiers": "", "return": "", "signature": " AuditingFilesManager(String outputDirectoryPath, String fileExtension)", "full_signature": "  AuditingFilesManager(String outputDirectoryPath, String fileExtension)", "class_method_signature": "AuditingFilesManager.AuditingFilesManager(String outputDirectoryPath, String fileExtension)", "testcase": false, "constructor": true}, {"identifier": "rollOutputFile", "parameters": "()", "modifiers": "", "return": "File", "signature": "File rollOutputFile()", "full_signature": " File rollOutputFile()", "class_method_signature": "AuditingFilesManager.rollOutputFile()", "testcase": false, "constructor": false}, {"identifier": "getOutputFile", "parameters": "()", "modifiers": "", "return": "File", "signature": "File getOutputFile()", "full_signature": " File getOutputFile()", "class_method_signature": "AuditingFilesManager.getOutputFile()", "testcase": false, "constructor": false}, {"identifier": "getCurrentDayTag", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCurrentDayTag()", "full_signature": " String getCurrentDayTag()", "class_method_signature": "AuditingFilesManager.getCurrentDayTag()", "testcase": false, "constructor": false}, {"identifier": "makeOutputFileExists", "parameters": "()", "modifiers": "", "return": "void", "signature": "void makeOutputFileExists()", "full_signature": " void makeOutputFileExists()", "class_method_signature": "AuditingFilesManager.makeOutputFileExists()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "AuditingFilesManager.init()", "testcase": false, "constructor": false}, {"identifier": "handleExistingOutputDirectory", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleExistingOutputDirectory()", "full_signature": "private void handleExistingOutputDirectory()", "class_method_signature": "AuditingFilesManager.handleExistingOutputDirectory()", "testcase": false, "constructor": false}, {"identifier": "updateCurrentDay", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCurrentDay()", "full_signature": "private void updateCurrentDay()", "class_method_signature": "AuditingFilesManager.updateCurrentDay()", "testcase": false, "constructor": false}, {"identifier": "getRollinFileName", "parameters": "(int nextRollingValue)", "modifiers": "private", "return": "String", "signature": "String getRollinFileName(int nextRollingValue)", "full_signature": "private String getRollinFileName(int nextRollingValue)", "class_method_signature": "AuditingFilesManager.getRollinFileName(int nextRollingValue)", "testcase": false, "constructor": false}, {"identifier": "moveOutputFile", "parameters": "(File rollingFile)", "modifiers": "private", "return": "void", "signature": "void moveOutputFile(File rollingFile)", "full_signature": "private void moveOutputFile(File rollingFile)", "class_method_signature": "AuditingFilesManager.moveOutputFile(File rollingFile)", "testcase": false, "constructor": false}, {"identifier": "createOutputFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createOutputFile()", "full_signature": "private void createOutputFile()", "class_method_signature": "AuditingFilesManager.createOutputFile()", "testcase": false, "constructor": false}, {"identifier": "getNextRollingValue", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNextRollingValue()", "full_signature": "private int getNextRollingValue()", "class_method_signature": "AuditingFilesManager.getNextRollingValue()", "testcase": false, "constructor": false}, {"identifier": "getRollingValues", "parameters": "()", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getRollingValues()", "full_signature": "private List<Integer> getRollingValues()", "class_method_signature": "AuditingFilesManager.getRollingValues()", "testcase": false, "constructor": false}, {"identifier": "listOutputDirectoryFiles", "parameters": "()", "modifiers": "private", "return": "String[]", "signature": "String[] listOutputDirectoryFiles()", "full_signature": "private String[] listOutputDirectoryFiles()", "class_method_signature": "AuditingFilesManager.listOutputDirectoryFiles()", "testcase": false, "constructor": false}], "file": "src/modules/rest/auditing/src/main/java/it/geosolutions/geostore/services/rest/auditing/AuditingFilesManager.java"}, "focal_method": {"identifier": "getOutputFile", "parameters": "()", "modifiers": "", "return": "File", "body": "File getOutputFile() {\n        return outputFile;\n    }", "signature": "File getOutputFile()", "full_signature": " File getOutputFile()", "class_method_signature": "AuditingFilesManager.getOutputFile()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4157021, "url": "https://github.com/geosolutions-it/geostore", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 19, "size": 1798, "license": "licensed"}}