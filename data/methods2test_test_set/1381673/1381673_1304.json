{"test_class": {"identifier": "JavaParserUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEMPLATE_FILE = \"Template.tmpl\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE = \"Template.tmpl\"", "var_name": "TEMPLATE_FILE"}, {"original_string": "private static final String TEMPLATE_CLASS = \"Template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_CLASS = \"Template\"", "var_name": "TEMPLATE_CLASS"}, {"original_string": "private static final String NOT_PARSABLE_FILE = \"Unparsable.tmpl\";", "modifier": "private static final", "type": "String", "declarator": "NOT_PARSABLE_FILE = \"Unparsable.tmpl\"", "var_name": "NOT_PARSABLE_FILE"}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/JavaParserUtilsTest.java"}, "test_case": {"identifier": "getFromFileNameNotExisting", "parameters": "()", "modifiers": "@Test(expected = AssertionError.class) public", "return": "void", "body": "@Test(expected = AssertionError.class)\n    public void getFromFileNameNotExisting() {\n        JavaParserUtils.getFromFileName(\"not_existing\");\n    }", "signature": "void getFromFileNameNotExisting()", "full_signature": "@Test(expected = AssertionError.class) public void getFromFileNameNotExisting()", "class_method_signature": "JavaParserUtilsTest.getFromFileNameNotExisting()", "testcase": true, "constructor": false, "invocations": ["getFromFileName"]}, "focal_class": {"identifier": "JavaParserUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JavaParserUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JavaParserUtils.class)", "var_name": "logger"}, {"original_string": "public static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";", "modifier": "public static final", "type": "String", "declarator": "MAIN_CLASS_NOT_FOUND = \"Main class not found\"", "var_name": "MAIN_CLASS_NOT_FOUND"}], "methods": [{"identifier": "JavaParserUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaParserUtils()", "full_signature": "private  JavaParserUtils()", "class_method_signature": "JavaParserUtils.JavaParserUtils()", "testcase": false, "constructor": true}, {"identifier": "getFromFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "CompilationUnit", "signature": "CompilationUnit getFromFileName(String fileName)", "full_signature": "public static CompilationUnit getFromFileName(String fileName)", "class_method_signature": "JavaParserUtils.getFromFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLModelCompilationUnit", "parameters": "(final String className,\n                                                                 final String packageName,\n                                                                 final String javaTemplate,\n                                                                 final String modelClassName)", "modifiers": "public static", "return": "CompilationUnit", "signature": "CompilationUnit getKiePMMLModelCompilationUnit(final String className,\n                                                                 final String packageName,\n                                                                 final String javaTemplate,\n                                                                 final String modelClassName)", "full_signature": "public static CompilationUnit getKiePMMLModelCompilationUnit(final String className,\n                                                                 final String packageName,\n                                                                 final String javaTemplate,\n                                                                 final String modelClassName)", "class_method_signature": "JavaParserUtils.getKiePMMLModelCompilationUnit(final String className,\n                                                                 final String packageName,\n                                                                 final String javaTemplate,\n                                                                 final String modelClassName)", "testcase": false, "constructor": false}, {"identifier": "getFullClassName", "parameters": "(final CompilationUnit cu)", "modifiers": "public static", "return": "String", "signature": "String getFullClassName(final CompilationUnit cu)", "full_signature": "public static String getFullClassName(final CompilationUnit cu)", "class_method_signature": "JavaParserUtils.getFullClassName(final CompilationUnit cu)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/JavaParserUtils.java"}, "focal_method": {"identifier": "getFromFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "CompilationUnit", "body": "public static CompilationUnit getFromFileName(String fileName) {\n        try {\n            final InputStream resource = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);\n            return StaticJavaParser.parse(resource);\n        } catch (ParseProblemException e) {\n            throw new KiePMMLInternalException(String.format(\"Failed to parse %s due to %s\", fileName, e.getMessage()), e);\n        } catch (Exception e) {\n            throw new ExternalException(String.format(\"Failed to read %s due to %s\", fileName, e.getMessage()), e);\n        }\n    }", "signature": "CompilationUnit getFromFileName(String fileName)", "full_signature": "public static CompilationUnit getFromFileName(String fileName)", "class_method_signature": "JavaParserUtils.getFromFileName(String fileName)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getContextClassLoader", "currentThread", "parse", "format", "getMessage", "format", "getMessage"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}