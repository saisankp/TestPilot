{"test_class": {"identifier": "ExecutionTaskWithStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TaskDispatcher dispatcherMock;", "modifier": "private", "type": "TaskDispatcher", "declarator": "dispatcherMock", "var_name": "dispatcherMock"}, {"original_string": "private IQueue<ITask> queueMock;", "modifier": "private", "type": "IQueue<ITask>", "declarator": "queueMock", "var_name": "queueMock"}, {"original_string": "private IThreadPool threadPoolMock;", "modifier": "private", "type": "IThreadPool", "declarator": "threadPoolMock", "var_name": "threadPoolMock"}, {"original_string": "private ITaskProcessStrategy processStrategyMock;", "modifier": "private", "type": "ITaskProcessStrategy", "declarator": "processStrategyMock", "var_name": "processStrategyMock"}], "file": "CoreFeatures/Task/TaskDispatcher/src/test/java/info/smart_tools/smartactors/task/task_dispatcher/ExecutionTaskWithStrategyTest.java"}, "test_case": {"identifier": "Should_letStrategyExecuteTask", "parameters": "()", "modifiers": "@Test(timeout = 1000L) public", "return": "void", "body": "@Test(timeout = 1000L)\n    public void Should_letStrategyExecuteTask()\n            throws Exception {\n        ITask taskMock = mock(ITask.class);\n\n        when(queueMock.tryTake())\n                .thenReturn(taskMock)\n                .thenReturn(null);\n\n        ExecutionTaskWithStrategy executionTask = new ExecutionTaskWithStrategy(dispatcherMock, processStrategyMock);\n        when(dispatcherMock.getExecutionTask()).thenReturn(executionTask);\n\n        doAnswer(invocation -> {\n            invocation.getArgumentAt(0, ITaskExecutionState.class).execute();\n            return null;\n        }).when(processStrategyMock).process(any());\n\n        executionTask.execute();\n\n        verify(taskMock).execute();\n    }", "signature": "void Should_letStrategyExecuteTask()", "full_signature": "@Test(timeout = 1000L) public void Should_letStrategyExecuteTask()", "class_method_signature": "ExecutionTaskWithStrategyTest.Should_letStrategyExecuteTask()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "thenReturn", "when", "tryTake", "thenReturn", "when", "getExecutionTask", "process", "when", "doAnswer", "execute", "getArgumentAt", "any", "execute", "execute", "verify"]}, "focal_class": {"identifier": "ExecutionTaskWithStrategy", "superclass": "", "interfaces": "implements ITask", "fields": [{"original_string": "private final TaskDispatcher taskDispatcher;", "modifier": "private final", "type": "TaskDispatcher", "declarator": "taskDispatcher", "var_name": "taskDispatcher"}, {"original_string": "private final ITaskProcessStrategy taskProcessStrategy;", "modifier": "private final", "type": "ITaskProcessStrategy", "declarator": "taskProcessStrategy", "var_name": "taskProcessStrategy"}], "methods": [{"identifier": "ExecutionTaskWithStrategy", "parameters": "(\n            final TaskDispatcher taskDispatcher, final ITaskProcessStrategy taskProcessStrategy)", "modifiers": "", "return": "", "signature": " ExecutionTaskWithStrategy(\n            final TaskDispatcher taskDispatcher, final ITaskProcessStrategy taskProcessStrategy)", "full_signature": "  ExecutionTaskWithStrategy(\n            final TaskDispatcher taskDispatcher, final ITaskProcessStrategy taskProcessStrategy)", "class_method_signature": "ExecutionTaskWithStrategy.ExecutionTaskWithStrategy(\n            final TaskDispatcher taskDispatcher, final ITaskProcessStrategy taskProcessStrategy)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ExecutionTaskWithStrategy.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Task/TaskDispatcher/src/main/java/info/smart_tools/smartactors/task/task_dispatcher/ExecutionTaskWithStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() throws TaskExecutionException {\n        final ExecutionState state = new ExecutionState();\n\n        taskDispatcher.notifyThreadStart();\n\n        try {\n            while (taskDispatcher.getExecutionTask() == this) {\n                if (Thread.interrupted()) {\n                    Thread.currentThread().interrupt();\n                    return;\n                }\n\n                ITask task = taskDispatcher.getTaskQueue().tryTake();\n\n                if (null == task) {\n                    return;\n                }\n\n                taskDispatcher.notifyTaskTaken();\n\n                taskDispatcher.getThreadPool().tryExecute(this);\n\n                state.setTask(task);\n\n                try {\n                    taskProcessStrategy.process(state);\n                } catch (TaskProcessException | InvalidArgumentException e) {\n                    throw new TaskExecutionException(e);\n                }\n            }\n\n            taskDispatcher.getThreadPool().tryExecute(taskDispatcher.getExecutionTask());\n        } finally {\n            taskDispatcher.notifyThreadStop();\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ExecutionTaskWithStrategy.execute()", "testcase": false, "constructor": false, "invocations": ["notifyThreadStart", "getExecutionTask", "interrupted", "interrupt", "currentThread", "tryTake", "getTaskQueue", "notifyTaskTaken", "tryExecute", "getThreadPool", "setTask", "process", "tryExecute", "getThreadPool", "getExecutionTask", "notifyThreadStop"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}