{"test_class": {"identifier": "WFSGetDomainTest", "superclass": "", "interfaces": "", "fields": [], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/domain/WFSGetDomainTest.java"}, "test_case": {"identifier": "testGetDomainValuesAsStrings", "parameters": "()", "modifiers": "@Test @Ignore // ignoring until I can actually mock this sort of thing out public", "return": "void", "body": "@Test\n    @Ignore // ignoring until I can actually mock this sort of thing out\n    public void testGetDomainValuesAsStrings() throws Exception {\n        WFSService service = new WFSService();\n        service.setEndpoint(\"https://marine.usgs.gov/coastalchangehazardsportal/geoserver/proxied/ows\");\n        service.setTypeName(\"proxied:MauiK_shorelines\");\n        WFSGetDomain instance = new WFSGetDomain();\n        Set<String> result = instance.getDomainValuesAsStrings(service, \"DATE_\");\n        assertThat(19, is(equalTo(result.size())));\n    }", "signature": "void testGetDomainValuesAsStrings()", "full_signature": "@Test @Ignore // ignoring until I can actually mock this sort of thing out public void testGetDomainValuesAsStrings()", "class_method_signature": "WFSGetDomainTest.testGetDomainValuesAsStrings()", "testcase": true, "constructor": false, "invocations": ["setEndpoint", "setTypeName", "getDomainValuesAsStrings", "assertThat", "is", "equalTo", "size"]}, "focal_class": {"identifier": "WFSGetDomain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(WFSGetDomain.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WFSGetDomain.class)", "var_name": "log"}, {"original_string": "private static final int TIMEOUT_MILLISECONDS = 30 * 1000;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_MILLISECONDS = 30 * 1000", "var_name": "TIMEOUT_MILLISECONDS"}, {"original_string": "private WFSDataStoreFactory datastore;", "modifier": "private", "type": "WFSDataStoreFactory", "declarator": "datastore", "var_name": "datastore"}], "methods": [{"identifier": "WFSGetDomain", "parameters": "()", "modifiers": "public", "return": "", "signature": " WFSGetDomain()", "full_signature": "public  WFSGetDomain()", "class_method_signature": "WFSGetDomain.WFSGetDomain()", "testcase": false, "constructor": true}, {"identifier": "getDomainValuesAsStrings", "parameters": "(WFSService service, String attribute)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getDomainValuesAsStrings(WFSService service, String attribute)", "full_signature": "public Set<String> getDomainValuesAsStrings(WFSService service, String attribute)", "class_method_signature": "WFSGetDomain.getDomainValuesAsStrings(WFSService service, String attribute)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/domain/WFSGetDomain.java"}, "focal_method": {"identifier": "getDomainValuesAsStrings", "parameters": "(WFSService service, String attribute)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getDomainValuesAsStrings(WFSService service, String attribute) throws IOException {\n        Set<String> domain = new HashSet<>();\n        \n        URL getCapsUrl = WFSDataStoreFactory.createGetCapabilitiesRequest(new URL(service.getEndpoint()), Version.v1_1_0);\n        log.debug(\"Getting domains from wfs at \" + getCapsUrl);\n        \n        Map params = new HashMap<>();\n        params.put(WFSDataStoreFactory.URL.key, getCapsUrl);\n        params.put(WFSDataStoreFactory.TIMEOUT.key, TIMEOUT_MILLISECONDS);\n        WFSDataStore wfs = datastore.createDataStore(params);\n        if (wfs == null) {\n            log.debug(\"Could not set up WFS datastore\");\n            throw new WFSException(\"Could not set up WFS datastore\");\n        }\n        try {\n            Query query = new Query(service.getTypeName(), Filter.INCLUDE, new String[] {attribute});\n\n            SimpleFeatureSource featureSource = wfs.getFeatureSource(service.getTypeName());\n            SimpleFeatureCollection features = featureSource.getFeatures(query);\n            SimpleFeatureIterator iterator = features.features();\n            while (iterator.hasNext()) {\n                SimpleFeature next = iterator.next();\n                Object attr = next.getAttribute(attribute);\n                if (attr instanceof String) {\n                    String attrVal = (String) attr;\n                    domain.add(attrVal);\n                } else {\n                    throw new UnsupportedOperationException(\"Currently only string attributes are allowed\");\n                }\n            }\n        } finally {\n            wfs.dispose();\n        }\n        return domain;\n    }", "signature": "Set<String> getDomainValuesAsStrings(WFSService service, String attribute)", "full_signature": "public Set<String> getDomainValuesAsStrings(WFSService service, String attribute)", "class_method_signature": "WFSGetDomain.getDomainValuesAsStrings(WFSService service, String attribute)", "testcase": false, "constructor": false, "invocations": ["createGetCapabilitiesRequest", "getEndpoint", "debug", "put", "put", "createDataStore", "debug", "getTypeName", "getFeatureSource", "getTypeName", "getFeatures", "features", "hasNext", "next", "getAttribute", "add", "dispose"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}