{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Autowired\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "file": "08/Jdbc/src/test/java/com/example/demo/controller/UserControllerTest.java"}, "test_case": {"identifier": "getUserByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUserByName() throws Exception {\n        String name=\"longzhiran\";\n        String sql = \"SELECT * FROM user WHERE USERNAME = ?\";\n        List<User> list = jdbcTemplate.query(sql, new User(), new Object[]{name});\n        for (User user : list) {\n            System.out.println(user);\n        }\n    }", "signature": "void getUserByName()", "full_signature": "@Test public void getUserByName()", "class_method_signature": "UserControllerTest.getUserByName()", "testcase": true, "constructor": false, "invocations": ["query", "println"]}, "focal_class": {"identifier": "UserController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Autowired\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "methods": [{"identifier": "createUserTable", "parameters": "()", "modifiers": "@GetMapping(\"createUserTable\") public", "return": "String", "signature": "String createUserTable()", "full_signature": "@GetMapping(\"createUserTable\") public String createUserTable()", "class_method_signature": "UserController.createUserTable()", "testcase": false, "constructor": false}, {"identifier": "saveUserTest", "parameters": "()", "modifiers": "@GetMapping(\"saveUserTest\") public", "return": "String", "signature": "String saveUserTest()", "full_signature": "@GetMapping(\"saveUserTest\") public String saveUserTest()", "class_method_signature": "UserController.saveUserTest()", "testcase": false, "constructor": false}, {"identifier": "batchSaveUser", "parameters": "()", "modifiers": "@GetMapping(\"batchSave\") public", "return": "String", "signature": "String batchSaveUser()", "full_signature": "@GetMapping(\"batchSave\") public String batchSaveUser()", "class_method_signature": "UserController.batchSaveUser()", "testcase": false, "constructor": false}, {"identifier": "addUser", "parameters": "(String userName, String passWord)", "modifiers": "@GetMapping(\"add\") public", "return": "String", "signature": "String addUser(String userName, String passWord)", "full_signature": "@GetMapping(\"add\") public String addUser(String userName, String passWord)", "class_method_signature": "UserController.addUser(String userName, String passWord)", "testcase": false, "constructor": false}, {"identifier": "updateUserPassword", "parameters": "(int id, String passWord)", "modifiers": "@GetMapping(\"updateUserPassword\") public", "return": "String", "signature": "String updateUserPassword(int id, String passWord)", "full_signature": "@GetMapping(\"updateUserPassword\") public String updateUserPassword(int id, String passWord)", "class_method_signature": "UserController.updateUserPassword(int id, String passWord)", "testcase": false, "constructor": false}, {"identifier": "deleteUserById", "parameters": "(int id)", "modifiers": "@GetMapping(\"deleteUserById\") public", "return": "String", "signature": "String deleteUserById(int id)", "full_signature": "@GetMapping(\"deleteUserById\") public String deleteUserById(int id)", "class_method_signature": "UserController.deleteUserById(int id)", "testcase": false, "constructor": false}, {"identifier": "getUserByName", "parameters": "(String userName)", "modifiers": "@GetMapping(\"getUserByName\") public", "return": "List", "signature": "List getUserByName(String userName)", "full_signature": "@GetMapping(\"getUserByName\") public List getUserByName(String userName)", "class_method_signature": "UserController.getUserByName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getMapById", "parameters": "(Integer id)", "modifiers": "@GetMapping(\"getMapById\") public", "return": "Map", "signature": "Map getMapById(Integer id)", "full_signature": "@GetMapping(\"getMapById\") public Map getMapById(Integer id)", "class_method_signature": "UserController.getMapById(Integer id)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(Integer id)", "modifiers": "@GetMapping(\"getUserById\") public", "return": "User", "signature": "User getUserById(Integer id)", "full_signature": "@GetMapping(\"getUserById\") public User getUserById(Integer id)", "class_method_signature": "UserController.getUserById(Integer id)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@GetMapping(\"list\") public", "return": "List<User>", "signature": "List<User> list()", "full_signature": "@GetMapping(\"list\") public List<User> list()", "class_method_signature": "UserController.list()", "testcase": false, "constructor": false}], "file": "08/Jdbc/src/main/java/com/example/demo/controller/UserController.java"}, "focal_method": {"identifier": "getUserByName", "parameters": "(String userName)", "modifiers": "@GetMapping(\"getUserByName\") public", "return": "List", "body": "@GetMapping(\"getUserByName\")\n    public List getUserByName(String userName)throws Exception {\n        String sql = \"SELECT * FROM user WHERE USERNAME = ?\";\n        List<User> list = jdbcTemplate.query(sql, new User(), new Object[]{userName});\n        return list;\n    }", "signature": "List getUserByName(String userName)", "full_signature": "@GetMapping(\"getUserByName\") public List getUserByName(String userName)", "class_method_signature": "UserController.getUserByName(String userName)", "testcase": false, "constructor": false, "invocations": ["query"]}, "repository": {"repo_id": 208270825, "url": "https://github.com/xiuhuai/Spring-Boot-Book", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 56, "size": 2704, "license": "licensed"}}