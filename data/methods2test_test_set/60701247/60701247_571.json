{"test_class": {"identifier": "DefaultHTreeChartReducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int FAKE_HEIGHT = 5;", "modifier": "private static final", "type": "int", "declarator": "FAKE_HEIGHT = 5", "var_name": "FAKE_HEIGHT"}, {"original_string": "private static float EPS = 1e-6f;", "modifier": "private static", "type": "float", "declarator": "EPS = 1e-6f", "var_name": "EPS"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/hchart/DefaultHTreeChartReducerTest.java"}, "test_case": {"identifier": "testReducer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReducer() {\n    List<Rectangle2D.Float> expectedRectangles = Arrays.asList(\n      new Rectangle2D.Float(0, 0, 10, 5),\n      new Rectangle2D.Float(0, 5, 5, 5),\n      new Rectangle2D.Float(6, 5, 4, 5),\n      new Rectangle2D.Float(0, 10, 0.9f, 5),\n      new Rectangle2D.Float(2.1f, 10, 0.3f, 5),\n      new Rectangle2D.Float(7.9f, 10, 0.1f, 5)\n    );\n    List<String> expectedNodes = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"F\", \"H\");\n\n    HTreeChartReducer<DefaultHNode<String>> reducer = new DefaultHTreeChartReducer<>();\n    List<DefaultHNode<String>> nodes = new ArrayList<>();\n    List<Rectangle2D.Float> rectangles = new ArrayList<>();\n\n    addNode(\"A\", 0, 10, 0, nodes, rectangles);\n\n    addNode(\"B\", 0, 5, 1, nodes, rectangles);\n    addNode(\"C\", 6, 10, 1, nodes, rectangles);\n\n    addNode(\"D\", 0, 0.5f, 2, nodes, rectangles);\n    addNode(\"E\", 0.7f, 0.9f, 2, nodes, rectangles);\n    addNode(\"F\", 2.1f, 2.2f, 2, nodes, rectangles);\n    addNode(\"G\", 2.2f, 2.4f, 2, nodes, rectangles);\n    addNode(\"H\", 7.9f, 8.0f, 2, nodes, rectangles);\n\n    reducer.reduce(rectangles, nodes);\n\n    checkRectanglesEqual(expectedRectangles, rectangles);\n\n    assertEquals(expectedNodes.size(), nodes.size());\n    for (int i = 0; i < nodes.size(); ++i) {\n      assertEquals(expectedNodes.get(i), nodes.get(i).getData());\n    }\n  }", "signature": "void testReducer()", "full_signature": "@Test public void testReducer()", "class_method_signature": "DefaultHTreeChartReducerTest.testReducer()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "reduce", "checkRectanglesEqual", "assertEquals", "size", "size", "size", "assertEquals", "get", "getData", "get"]}, "focal_class": {"identifier": "DefaultHTreeChartReducer", "superclass": "", "interfaces": "implements HTreeChartReducer<N>", "fields": [], "methods": [{"identifier": "reduce", "parameters": "(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "modifiers": "@Override public", "return": "void", "signature": "void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "full_signature": "@Override public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "class_method_signature": "DefaultHTreeChartReducer.reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/hchart/DefaultHTreeChartReducer.java"}, "focal_method": {"identifier": "reduce", "parameters": "(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes) {\n    assert nodes.size() == rectangles.size();\n    int n = nodes.size();\n    int index = 0;\n    int keepIndex = 0;\n    while (index < n) {\n      Rectangle2D.Float rect = rectangles.get(index);\n      N node = nodes.get(index);\n      if (Math.floor(rect.getMinX()) < Math.floor(rect.getMaxX())) {\n        // Crossing several pixels on X axis\n        rectangles.set(keepIndex, rect);\n        nodes.set(keepIndex, node);\n        ++keepIndex;\n        ++index;\n        continue;\n      }\n\n      // Whole rectangle inside a pixel on X axis, let's combine all rectangles inside the pixel\n      int pixel = (int)Math.floor(rect.getMaxX());\n      int curDepth = node.getDepth();\n\n      N keepNode = node;\n      Rectangle2D.Float keepRect = rect;\n\n      while (index < n) {\n        rect = rectangles.get(index);\n        node = nodes.get(index);\n\n        if (node.getDepth() != curDepth || Math.floor(rect.getMaxX()) != pixel) {\n          break;\n        }\n        keepRect.width = (float)(rect.getMaxX() - keepRect.getMinX());\n        ++index;\n      }\n\n      rectangles.set(keepIndex, keepRect);\n      nodes.set(keepIndex, keepNode);\n      ++keepIndex;\n    }\n    rectangles.subList(keepIndex, rectangles.size()).clear();\n    nodes.subList(keepIndex, nodes.size()).clear();\n  }", "signature": "void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "full_signature": "@Override public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "class_method_signature": "DefaultHTreeChartReducer.reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<N> nodes)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "get", "get", "floor", "getMinX", "floor", "getMaxX", "set", "set", "floor", "getMaxX", "getDepth", "get", "get", "getDepth", "floor", "getMaxX", "getMaxX", "getMinX", "set", "set", "clear", "subList", "size", "clear", "subList", "size"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}