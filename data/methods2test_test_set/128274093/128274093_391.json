{"test_class": {"identifier": "ObservableScalarXMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableScalarXMapTest.java"}, "test_case": {"identifier": "scalarMapToEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scalarMapToEmpty() {\n        ObservableScalarXMap.scalarXMap(1, new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer v) throws Exception {\n                return Observable.empty();\n            }\n        })\n        .test()\n        .assertResult();\n    }", "signature": "void scalarMapToEmpty()", "full_signature": "@Test public void scalarMapToEmpty()", "class_method_signature": "ObservableScalarXMapTest.scalarMapToEmpty()", "testcase": true, "constructor": false, "invocations": ["assertResult", "test", "scalarXMap", "empty"]}, "focal_class": {"identifier": "ObservableScalarXMap", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ObservableScalarXMap", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObservableScalarXMap()", "full_signature": "private  ObservableScalarXMap()", "class_method_signature": "ObservableScalarXMap.ObservableScalarXMap()", "testcase": false, "constructor": true}, {"identifier": "tryScalarXMapSubscribe", "parameters": "(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "signature": "boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "class_method_signature": "ObservableScalarXMap.tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "testcase": false, "constructor": false}, {"identifier": "scalarXMap", "parameters": "(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "modifiers": "public static", "return": "Observable<U>", "signature": "Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "full_signature": "public static Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "class_method_signature": "ObservableScalarXMap.scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableScalarXMap.java"}, "focal_method": {"identifier": "scalarXMap", "parameters": "(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "modifiers": "public static", "return": "Observable<U>", "body": "public static <T, U> Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper) {\n        return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper));\n    }", "signature": "Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "full_signature": "public static Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "class_method_signature": "ObservableScalarXMap.scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "testcase": false, "constructor": false, "invocations": ["onAssembly"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}