{"test_class": {"identifier": "DataSetConversionUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "core/src/test/java/com/alibaba/alink/common/utils/DataSetConversionUtilTest.java"}, "test_case": {"identifier": "testForceType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testForceType() {\n\t\tExecutionEnvironment env = MLEnvironmentFactory.getDefault().getExecutionEnvironment();\n\n\t\tDataSet<Row> input = env.fromElements(Row.of(\"s1\")).map(new GenericTypeMap());\n\t\tTable table2 = DataSetConversionUtil.toTable(MLEnvironmentFactory.DEFAULT_ML_ENVIRONMENT_ID,\n\t\t\t\tinput,\n\t\t\t\tnew String[] {\"word\"},\n\t\t\t\tnew TypeInformation[] {TypeInformation.of(Integer.class)}\n\t\t);\n\t\tAssert.assertEquals(\n\t\t\t\tnew TableSchema(new String[] {\"word\"}, new TypeInformation[] {TypeInformation.of(Integer.class)}),\n\t\t\t\ttable2.getSchema()\n\t\t);\n\n\t}", "signature": "void testForceType()", "full_signature": "@Test public void testForceType()", "class_method_signature": "DataSetConversionUtilTest.testForceType()", "testcase": true, "constructor": false, "invocations": ["getExecutionEnvironment", "getDefault", "map", "fromElements", "of", "toTable", "of", "assertEquals", "of", "getSchema"]}, "focal_class": {"identifier": "DataSetConversionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fromTable", "parameters": "(Long sessionId, Table table)", "modifiers": "public static", "return": "DataSet <Row>", "signature": "DataSet <Row> fromTable(Long sessionId, Table table)", "full_signature": "public static DataSet <Row> fromTable(Long sessionId, Table table)", "class_method_signature": "DataSetConversionUtil.fromTable(Long sessionId, Table table)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(Long sessionId, DataSet <Row> data, TableSchema schema)", "modifiers": "public static", "return": "Table", "signature": "Table toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "full_signature": "public static Table toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "class_method_signature": "DataSetConversionUtil.toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(Long sessionId, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "modifiers": "public static", "return": "Table", "signature": "Table toTable(Long sessionId, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "full_signature": "public static Table toTable(Long sessionId, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "class_method_signature": "DataSetConversionUtil.toTable(Long sessionId, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(Long sessionId, DataSet <Row> data, String[] colNames)", "modifiers": "public static", "return": "Table", "signature": "Table toTable(Long sessionId, DataSet <Row> data, String[] colNames)", "full_signature": "public static Table toTable(Long sessionId, DataSet <Row> data, String[] colNames)", "class_method_signature": "DataSetConversionUtil.toTable(Long sessionId, DataSet <Row> data, String[] colNames)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(MLEnvironment session, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "modifiers": "public static", "return": "Table", "signature": "Table toTable(MLEnvironment session, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "full_signature": "public static Table toTable(MLEnvironment session, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "class_method_signature": "DataSetConversionUtil.toTable(MLEnvironment session, DataSet <Row> data, String[] colNames, TypeInformation <?>[] colTypes)", "testcase": false, "constructor": false}, {"identifier": "toTable", "parameters": "(MLEnvironment session, DataSet <Row> data, String[] colNames)", "modifiers": "public static", "return": "Table", "signature": "Table toTable(MLEnvironment session, DataSet <Row> data, String[] colNames)", "full_signature": "public static Table toTable(MLEnvironment session, DataSet <Row> data, String[] colNames)", "class_method_signature": "DataSetConversionUtil.toTable(MLEnvironment session, DataSet <Row> data, String[] colNames)", "testcase": false, "constructor": false}, {"identifier": "getDataSetWithExplicitTypeDefine", "parameters": "(\n\t\tDataSet <Row> data,\n\t\tString[] colNames,\n\t\tTypeInformation <?>[] colTypes)", "modifiers": "private static", "return": "DataSet <Row>", "signature": "DataSet <Row> getDataSetWithExplicitTypeDefine(\n\t\tDataSet <Row> data,\n\t\tString[] colNames,\n\t\tTypeInformation <?>[] colTypes)", "full_signature": "private static DataSet <Row> getDataSetWithExplicitTypeDefine(\n\t\tDataSet <Row> data,\n\t\tString[] colNames,\n\t\tTypeInformation <?>[] colTypes)", "class_method_signature": "DataSetConversionUtil.getDataSetWithExplicitTypeDefine(\n\t\tDataSet <Row> data,\n\t\tString[] colNames,\n\t\tTypeInformation <?>[] colTypes)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/utils/DataSetConversionUtil.java"}, "focal_method": {"identifier": "toTable", "parameters": "(Long sessionId, DataSet <Row> data, TableSchema schema)", "modifiers": "public static", "return": "Table", "body": "public static Table toTable(Long sessionId, DataSet <Row> data, TableSchema schema) {\n\t\treturn toTable(sessionId, data, schema.getFieldNames(), schema.getFieldTypes());\n\t}", "signature": "Table toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "full_signature": "public static Table toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "class_method_signature": "DataSetConversionUtil.toTable(Long sessionId, DataSet <Row> data, TableSchema schema)", "testcase": false, "constructor": false, "invocations": ["toTable", "getFieldNames", "getFieldTypes"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}