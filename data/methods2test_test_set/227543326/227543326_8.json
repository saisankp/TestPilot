{"test_class": {"identifier": "SPISQLExecutionHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SPISQLExecutionHook spiSQLExecutionHook;", "modifier": "private", "type": "SPISQLExecutionHook", "declarator": "spiSQLExecutionHook", "var_name": "spiSQLExecutionHook"}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/test/java/org/apache/shardingsphere/core/execute/hook/SPISQLExecutionHookTest.java"}, "test_case": {"identifier": "assertFinishFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertFinishFailure() {\n        spiSQLExecutionHook.finishFailure(null);\n        assertTrue(SQLExecutionHookFixture.containsAction(\"finishFailure\"));\n    }", "signature": "void assertFinishFailure()", "full_signature": "@Test public void assertFinishFailure()", "class_method_signature": "SPISQLExecutionHookTest.assertFinishFailure()", "testcase": true, "constructor": false, "invocations": ["finishFailure", "assertTrue", "containsAction"]}, "focal_class": {"identifier": "SPISQLExecutionHook", "superclass": "", "interfaces": "implements SQLExecutionHook", "fields": [{"original_string": "private final Collection<SQLExecutionHook> sqlExecutionHooks = NewInstanceServiceLoader.newServiceInstances(SQLExecutionHook.class);", "modifier": "private final", "type": "Collection<SQLExecutionHook>", "declarator": "sqlExecutionHooks = NewInstanceServiceLoader.newServiceInstances(SQLExecutionHook.class)", "var_name": "sqlExecutionHooks"}], "methods": [{"identifier": "start", "parameters": "(final RouteUnit routeUnit, final DataSourceMetaData dataSourceMetaData, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap)", "modifiers": "@Override public", "return": "void", "signature": "void start(final RouteUnit routeUnit, final DataSourceMetaData dataSourceMetaData, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap)", "full_signature": "@Override public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSourceMetaData, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap)", "class_method_signature": "SPISQLExecutionHook.start(final RouteUnit routeUnit, final DataSourceMetaData dataSourceMetaData, final boolean isTrunkThread, final Map<String, Object> shardingExecuteDataMap)", "testcase": false, "constructor": false}, {"identifier": "finishSuccess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finishSuccess()", "full_signature": "@Override public void finishSuccess()", "class_method_signature": "SPISQLExecutionHook.finishSuccess()", "testcase": false, "constructor": false}, {"identifier": "finishFailure", "parameters": "(final Exception cause)", "modifiers": "@Override public", "return": "void", "signature": "void finishFailure(final Exception cause)", "full_signature": "@Override public void finishFailure(final Exception cause)", "class_method_signature": "SPISQLExecutionHook.finishFailure(final Exception cause)", "testcase": false, "constructor": false}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/hook/SPISQLExecutionHook.java"}, "focal_method": {"identifier": "finishFailure", "parameters": "(final Exception cause)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void finishFailure(final Exception cause) {\n        for (SQLExecutionHook each : sqlExecutionHooks) {\n            each.finishFailure(cause);\n        }\n    }", "signature": "void finishFailure(final Exception cause)", "full_signature": "@Override public void finishFailure(final Exception cause)", "class_method_signature": "SPISQLExecutionHook.finishFailure(final Exception cause)", "testcase": false, "constructor": false, "invocations": ["finishFailure"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}