{"test_class": {"identifier": "GroovyScriptTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GroovyScriptTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GroovyScriptTest.class)", "var_name": "LOG"}], "file": "streams/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/script/GroovyScriptTest.java"}, "test_case": {"identifier": "testGroovyScriptEnsuresThreadSafe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroovyScriptEnsuresThreadSafe() throws InterruptedException {\n        GroovyScriptEngine groovyScriptEngine = new GroovyScriptEngine();\n        String groovyExpression = \"a % 2 == 0\";\n\n        final GroovyScript<Boolean> groovyScript = new GroovyScript<>(groovyExpression, groovyScriptEngine);\n        final AtomicInteger index = new AtomicInteger(0);\n\n        List<Thread> threads = new ArrayList<>();\n        final AtomicReference<Throwable> anyException = new AtomicReference<>();\n        for (int i = 0 ; i < 500 ; i++) {\n            Thread t = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    for (int j = 0 ; j < 10 ; j++) {\n                        try {\n                            Thread.sleep(new Random().nextInt(10));\n                        } catch (InterruptedException e) {\n                            // no-op\n                        }\n\n                        int aVal = index.getAndIncrement();\n\n                        HashMap<String, Object> fieldsAndValue = new HashMap<>();\n                        fieldsAndValue.put(\"a\", aVal);\n\n                        try {\n                            assertEquals(aVal % 2 == 0, groovyScript.evaluate(StreamlineEventImpl.builder().fieldsAndValues(fieldsAndValue).dataSourceId(\"1\").build()));\n                        } catch (Throwable e) {\n                            e.printStackTrace();\n                            anyException.set(e);\n                        }\n                    }\n                }\n            });\n            threads.add(t);\n            t.start();\n        }\n\n        for (Thread t : threads) {\n            t.join();\n        }\n\n        if (anyException.get() != null) {\n            Assert.fail(\"Exception occurred within thread, first one is \" + anyException.get().getMessage());\n        }\n    }", "signature": "void testGroovyScriptEnsuresThreadSafe()", "full_signature": "@Test public void testGroovyScriptEnsuresThreadSafe()", "class_method_signature": "GroovyScriptTest.testGroovyScriptEnsuresThreadSafe()", "testcase": true, "constructor": false, "invocations": ["sleep", "nextInt", "getAndIncrement", "put", "assertEquals", "evaluate", "build", "dataSourceId", "fieldsAndValues", "builder", "printStackTrace", "set", "add", "start", "join", "get", "fail", "getMessage", "get"]}, "focal_class": {"identifier": "GroovyScript", "superclass": "extends Script<StreamlineEvent, O, javax.script.ScriptEngine>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GroovyScript.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GroovyScript.class)", "var_name": "LOG"}, {"original_string": "private transient volatile ThreadLocal<groovy.lang.Script> parsedScript;", "modifier": "private transient volatile", "type": "ThreadLocal<groovy.lang.Script>", "declarator": "parsedScript", "var_name": "parsedScript"}, {"original_string": "private final Map<String, Object> initialBindings;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "initialBindings", "var_name": "initialBindings"}], "methods": [{"identifier": "GroovyScript", "parameters": "(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine)", "modifiers": "public", "return": "", "signature": " GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine)", "full_signature": "public  GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine)", "class_method_signature": "GroovyScript.GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine)", "testcase": false, "constructor": true}, {"identifier": "GroovyScript", "parameters": "(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine, Map<String, Object> initialBindings)", "modifiers": "public", "return": "", "signature": " GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine, Map<String, Object> initialBindings)", "full_signature": "public  GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine, Map<String, Object> initialBindings)", "class_method_signature": "GroovyScript.GroovyScript(String expression, com.hortonworks.streamline.streams.runtime.script.engine.ScriptEngine<ScriptEngine> scriptEngine, Map<String, Object> initialBindings)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(StreamlineEvent event)", "modifiers": "@Override public", "return": "O", "signature": "O evaluate(StreamlineEvent event)", "full_signature": "@Override public O evaluate(StreamlineEvent event)", "class_method_signature": "GroovyScript.evaluate(StreamlineEvent event)", "testcase": false, "constructor": false}, {"identifier": "createBinding", "parameters": "(Map<String, Object> fieldsToValues)", "modifiers": "private", "return": "Binding", "signature": "Binding createBinding(Map<String, Object> fieldsToValues)", "full_signature": "private Binding createBinding(Map<String, Object> fieldsToValues)", "class_method_signature": "GroovyScript.createBinding(Map<String, Object> fieldsToValues)", "testcase": false, "constructor": false}, {"identifier": "addToBinding", "parameters": "(Map<String, Object> fieldsToValues, Binding binding)", "modifiers": "private", "return": "void", "signature": "void addToBinding(Map<String, Object> fieldsToValues, Binding binding)", "full_signature": "private void addToBinding(Map<String, Object> fieldsToValues, Binding binding)", "class_method_signature": "GroovyScript.addToBinding(Map<String, Object> fieldsToValues, Binding binding)", "testcase": false, "constructor": false}, {"identifier": "getParsedScript", "parameters": "()", "modifiers": "private", "return": "groovy.lang.Script", "signature": "groovy.lang.Script getParsedScript()", "full_signature": "private groovy.lang.Script getParsedScript()", "class_method_signature": "GroovyScript.getParsedScript()", "testcase": false, "constructor": false}], "file": "streams/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/script/GroovyScript.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(StreamlineEvent event)", "modifiers": "@Override public", "return": "O", "body": "@Override\n    public O evaluate(StreamlineEvent event) throws ScriptException {\n        LOG.debug(\"Evaluating [{}] with [{}]\", expression, event);\n        groovy.lang.Script parsedScript = getParsedScript();\n        O evaluatedResult = null;\n\n        if (event != null) {\n            try {\n                Binding binding = createBinding(event);\n                parsedScript.setBinding(binding);\n                LOG.debug(\"Set script binding to [{}]\", event);\n\n                evaluatedResult = (O) parsedScript.run();\n\n                LOG.debug(\"Expression [{}] evaluated to [{}]\", expression, evaluatedResult);\n            } catch (groovy.lang.MissingPropertyException e) {\n                LOG.debug(\"Missing property: Expression [{}] params [{}]\", expression, event);\n                throw new ScriptException(e);\n            }\n        }\n        return evaluatedResult;\n    }", "signature": "O evaluate(StreamlineEvent event)", "full_signature": "@Override public O evaluate(StreamlineEvent event)", "class_method_signature": "GroovyScript.evaluate(StreamlineEvent event)", "testcase": false, "constructor": false, "invocations": ["debug", "getParsedScript", "createBinding", "setBinding", "debug", "run", "debug", "debug"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}