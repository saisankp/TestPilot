{"test_class": {"identifier": "LdapTransactionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DirContext dirContextMock;", "modifier": "private", "type": "DirContext", "declarator": "dirContextMock", "var_name": "dirContextMock"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/LdapTransactionUtilsTest.java"}, "test_case": {"identifier": "testIsSupportedWriteTransactionOperation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSupportedWriteTransactionOperation() {\n        assertTrue(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"bind\"));\n        assertTrue(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"rebind\"));\n        assertTrue(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"unbind\"));\n        assertTrue(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"modifyAttributes\"));\n        assertTrue(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"rename\"));\n        assertFalse(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"lookup\"));\n        assertFalse(LdapTransactionUtils\n                .isSupportedWriteTransactionOperation(\"search\"));\n    }", "signature": "void testIsSupportedWriteTransactionOperation()", "full_signature": "@Test public void testIsSupportedWriteTransactionOperation()", "class_method_signature": "LdapTransactionUtilsTest.testIsSupportedWriteTransactionOperation()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSupportedWriteTransactionOperation", "assertTrue", "isSupportedWriteTransactionOperation", "assertTrue", "isSupportedWriteTransactionOperation", "assertTrue", "isSupportedWriteTransactionOperation", "assertTrue", "isSupportedWriteTransactionOperation", "assertFalse", "isSupportedWriteTransactionOperation", "assertFalse", "isSupportedWriteTransactionOperation"]}, "focal_class": {"identifier": "LdapTransactionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String REBIND_METHOD_NAME = \"rebind\";", "modifier": "public static final", "type": "String", "declarator": "REBIND_METHOD_NAME = \"rebind\"", "var_name": "REBIND_METHOD_NAME"}, {"original_string": "public static final String BIND_METHOD_NAME = \"bind\";", "modifier": "public static final", "type": "String", "declarator": "BIND_METHOD_NAME = \"bind\"", "var_name": "BIND_METHOD_NAME"}, {"original_string": "public static final String RENAME_METHOD_NAME = \"rename\";", "modifier": "public static final", "type": "String", "declarator": "RENAME_METHOD_NAME = \"rename\"", "var_name": "RENAME_METHOD_NAME"}, {"original_string": "public static final String UNBIND_METHOD_NAME = \"unbind\";", "modifier": "public static final", "type": "String", "declarator": "UNBIND_METHOD_NAME = \"unbind\"", "var_name": "UNBIND_METHOD_NAME"}, {"original_string": "public static final String MODIFY_ATTRIBUTES_METHOD_NAME = \"modifyAttributes\";", "modifier": "public static final", "type": "String", "declarator": "MODIFY_ATTRIBUTES_METHOD_NAME = \"modifyAttributes\"", "var_name": "MODIFY_ATTRIBUTES_METHOD_NAME"}], "methods": [{"identifier": "LdapTransactionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " LdapTransactionUtils()", "full_signature": "private  LdapTransactionUtils()", "class_method_signature": "LdapTransactionUtils.LdapTransactionUtils()", "testcase": false, "constructor": true}, {"identifier": "getFirstArgumentAsName", "parameters": "(Object[] args)", "modifiers": "public static", "return": "Name", "signature": "Name getFirstArgumentAsName(Object[] args)", "full_signature": "public static Name getFirstArgumentAsName(Object[] args)", "class_method_signature": "LdapTransactionUtils.getFirstArgumentAsName(Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getArgumentAsName", "parameters": "(Object arg)", "modifiers": "public static", "return": "Name", "signature": "Name getArgumentAsName(Object arg)", "full_signature": "public static Name getArgumentAsName(Object arg)", "class_method_signature": "LdapTransactionUtils.getArgumentAsName(Object arg)", "testcase": false, "constructor": false}, {"identifier": "isSupportedWriteTransactionOperation", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedWriteTransactionOperation(String methodName)", "full_signature": "public static boolean isSupportedWriteTransactionOperation(String methodName)", "class_method_signature": "LdapTransactionUtils.isSupportedWriteTransactionOperation(String methodName)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/LdapTransactionUtils.java"}, "focal_method": {"identifier": "isSupportedWriteTransactionOperation", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSupportedWriteTransactionOperation(String methodName) {\n        return (ObjectUtils.nullSafeEquals(methodName, BIND_METHOD_NAME)\n                || ObjectUtils.nullSafeEquals(methodName, REBIND_METHOD_NAME)\n                || ObjectUtils.nullSafeEquals(methodName, RENAME_METHOD_NAME)\n                || ObjectUtils.nullSafeEquals(methodName, MODIFY_ATTRIBUTES_METHOD_NAME)\n                || ObjectUtils.nullSafeEquals(methodName, UNBIND_METHOD_NAME));\n\n    }", "signature": "boolean isSupportedWriteTransactionOperation(String methodName)", "full_signature": "public static boolean isSupportedWriteTransactionOperation(String methodName)", "class_method_signature": "LdapTransactionUtils.isSupportedWriteTransactionOperation(String methodName)", "testcase": false, "constructor": false, "invocations": ["nullSafeEquals", "nullSafeEquals", "nullSafeEquals", "nullSafeEquals", "nullSafeEquals"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}