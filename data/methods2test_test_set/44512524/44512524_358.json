{"test_class": {"identifier": "DistinctTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Integer> ANY_INT_SET_ONE = Sets.newHashSet(1, 2, 3);", "modifier": "private static final", "type": "Set<Integer>", "declarator": "ANY_INT_SET_ONE = Sets.newHashSet(1, 2, 3)", "var_name": "ANY_INT_SET_ONE"}, {"original_string": "private static final Set<Integer> ANY_INT_SET_TWO = Sets.newHashSet(2, 3, 4);", "modifier": "private static final", "type": "Set<Integer>", "declarator": "ANY_INT_SET_TWO = Sets.newHashSet(2, 3, 4)", "var_name": "ANY_INT_SET_TWO"}, {"original_string": "private static final Distinct distinct = new Distinct();", "modifier": "private static final", "type": "Distinct", "declarator": "distinct = new Distinct()", "var_name": "distinct"}], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/lib/operation/DistinctTest.java"}, "test_case": {"identifier": "testInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInit() throws Exception {\n    TridentTuple tuple = mock(TridentTuple.class);\n    when(tuple.getInteger(1)).thenReturn(1);\n    Set<Integer> init = distinct.init(tuple);\n    assertThat(init)\n            .isNotNull()\n            .hasSize(1)\n            .contains(1);\n  }", "signature": "void testInit()", "full_signature": "@Test public void testInit()", "class_method_signature": "DistinctTest.testInit()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getInteger", "init", "contains", "hasSize", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "Distinct", "superclass": "", "interfaces": "implements CombinerAggregator<Set<Integer>>", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(Distinct.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(Distinct.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = 7592229830682953885L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7592229830682953885L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "init", "parameters": "(TridentTuple tuple)", "modifiers": "@Override public", "return": "Set<Integer>", "signature": "Set<Integer> init(TridentTuple tuple)", "full_signature": "@Override public Set<Integer> init(TridentTuple tuple)", "class_method_signature": "Distinct.init(TridentTuple tuple)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(Set<Integer> val1, Set<Integer> val2)", "modifiers": "@Override public", "return": "Set<Integer>", "signature": "Set<Integer> combine(Set<Integer> val1, Set<Integer> val2)", "full_signature": "@Override public Set<Integer> combine(Set<Integer> val1, Set<Integer> val2)", "class_method_signature": "Distinct.combine(Set<Integer> val1, Set<Integer> val2)", "testcase": false, "constructor": false}, {"identifier": "zero", "parameters": "()", "modifiers": "@Override public", "return": "Set<Integer>", "signature": "Set<Integer> zero()", "full_signature": "@Override public Set<Integer> zero()", "class_method_signature": "Distinct.zero()", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/lib/operation/Distinct.java"}, "focal_method": {"identifier": "init", "parameters": "(TridentTuple tuple)", "modifiers": "@Override public", "return": "Set<Integer>", "body": "@Override\n  public Set<Integer> init(TridentTuple tuple) {\n    LOG.debug(\"get tuple: \" + tuple);\n    Set<Integer> singleton = new HashSet<Integer>();\n    singleton.add(tuple.getInteger(1));\n    return singleton;\n  }", "signature": "Set<Integer> init(TridentTuple tuple)", "full_signature": "@Override public Set<Integer> init(TridentTuple tuple)", "class_method_signature": "Distinct.init(TridentTuple tuple)", "testcase": false, "constructor": false, "invocations": ["debug", "add", "getInteger"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}