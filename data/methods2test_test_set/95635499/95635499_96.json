{"test_class": {"identifier": "SquaredBackwardDifferenceComplexityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "double[] timeSeries1 = { 1, 1, 1, 1, 1, 1 };", "modifier": "", "type": "double[]", "declarator": "timeSeries1 = { 1, 1, 1, 1, 1, 1 }", "var_name": "timeSeries1"}, {"original_string": "double[] timeSeries2 = { .0, Math.sqrt(8), .0, Math.sqrt(8), .0, Math.sqrt(8) };", "modifier": "", "type": "double[]", "declarator": "timeSeries2 = { .0, Math.sqrt(8), .0, Math.sqrt(8), .0, Math.sqrt(8) }", "var_name": "timeSeries2"}], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/complexity/SquaredBackwardDifferenceComplexityTest.java"}, "test_case": {"identifier": "testComplexityCalculation2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComplexityCalculation2() throws IllegalArgumentException {\n        SquaredBackwardDifferenceComplexity sc = new SquaredBackwardDifferenceComplexity();\n        double complexity = sc.complexity(timeSeries2);\n        double expectation = Math.sqrt(40);\n        String message = \"Calculated %f, but %f was expected\";\n        assertEquals(String.format(message, complexity, expectation), expectation, complexity, 0.001);\n    }", "signature": "void testComplexityCalculation2()", "full_signature": "@Test public void testComplexityCalculation2()", "class_method_signature": "SquaredBackwardDifferenceComplexityTest.testComplexityCalculation2()", "testcase": true, "constructor": false, "invocations": ["complexity", "sqrt", "assertEquals", "format"]}, "focal_class": {"identifier": "SquaredBackwardDifferenceComplexity", "superclass": "", "interfaces": "implements ITimeSeriesComplexity", "fields": [], "methods": [{"identifier": "complexity", "parameters": "(final double[] t)", "modifiers": "@Override public", "return": "double", "signature": "double complexity(final double[] t)", "full_signature": "@Override public double complexity(final double[] t)", "class_method_signature": "SquaredBackwardDifferenceComplexity.complexity(final double[] t)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/complexity/SquaredBackwardDifferenceComplexity.java"}, "focal_method": {"identifier": "complexity", "parameters": "(final double[] t)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double complexity(final double[] t) {\n\t\tint n = t.length;\n\t\tdouble sum = .0;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tsum += (t[i] - t[i + 1]) * (t[i] - t[i + 1]);\n\t\t}\n\t\treturn Math.sqrt(sum);\n\t}", "signature": "double complexity(final double[] t)", "full_signature": "@Override public double complexity(final double[] t)", "class_method_signature": "SquaredBackwardDifferenceComplexity.complexity(final double[] t)", "testcase": false, "constructor": false, "invocations": ["sqrt"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}