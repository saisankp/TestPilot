{"test_class": {"identifier": "RepeatableRandomTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long FIXED_SEED = 12345;", "modifier": "private static final", "type": "long", "declarator": "FIXED_SEED = 12345", "var_name": "FIXED_SEED"}, {"original_string": "private static final int TEST_ITERATIONS = 50;", "modifier": "private static final", "type": "int", "declarator": "TEST_ITERATIONS = 50", "var_name": "TEST_ITERATIONS"}, {"original_string": "private static final int TEST_ITERATIONS_FOR_UNIQUENESS_CHECK = 1_000_000;", "modifier": "private static final", "type": "int", "declarator": "TEST_ITERATIONS_FOR_UNIQUENESS_CHECK = 1_000_000", "var_name": "TEST_ITERATIONS_FOR_UNIQUENESS_CHECK"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/random/RepeatableRandomTest.java"}, "test_case": {"identifier": "seededRandom_shufflesArrayDeterministically", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void seededRandom_shufflesArrayDeterministically() {\n        testFunctionDeterminism(() -> {\n            Integer[] mutableInput = new Integer[]{1, 2, 3, 4, 5};\n            RepeatableRandom.shuffle(mutableInput);\n            return Arrays.asList(mutableInput); // Array.equals falls back to Object.equals, so we need to convert to a list\n        }, \"shuffleArrays\");\n    }", "signature": "void seededRandom_shufflesArrayDeterministically()", "full_signature": "@Test public void seededRandom_shufflesArrayDeterministically()", "class_method_signature": "RepeatableRandomTest.seededRandom_shufflesArrayDeterministically()", "testcase": true, "constructor": false, "invocations": ["testFunctionDeterminism", "shuffle", "asList"]}, "focal_class": {"identifier": "RepeatableRandom", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double MIN_FIXED_VALUE = 0.0;", "modifier": "public static final", "type": "double", "declarator": "MIN_FIXED_VALUE = 0.0", "var_name": "MIN_FIXED_VALUE"}, {"original_string": "public static final double MAX_FIXED_VALUE = 0.999999999;", "modifier": "public static final", "type": "double", "declarator": "MAX_FIXED_VALUE = 0.999999999", "var_name": "MAX_FIXED_VALUE"}, {"original_string": "private static InstancedRepeatableRandom instancedRepeatableRandom;", "modifier": "private static", "type": "InstancedRepeatableRandom", "declarator": "instancedRepeatableRandom", "var_name": "instancedRepeatableRandom"}], "methods": [{"identifier": "RepeatableRandom", "parameters": "()", "modifiers": "private", "return": "", "signature": " RepeatableRandom()", "full_signature": "private  RepeatableRandom()", "class_method_signature": "RepeatableRandom.RepeatableRandom()", "testcase": false, "constructor": true}, {"identifier": "initialiseWithSeed", "parameters": "(long masterSeed)", "modifiers": "public static", "return": "void", "signature": "void initialiseWithSeed(long masterSeed)", "full_signature": "public static void initialiseWithSeed(long masterSeed)", "class_method_signature": "RepeatableRandom.initialiseWithSeed(long masterSeed)", "testcase": false, "constructor": false}, {"identifier": "initialiseWithFixedValue", "parameters": "(double fixedValue)", "modifiers": "public static", "return": "void", "signature": "void initialiseWithFixedValue(double fixedValue)", "full_signature": "public static void initialiseWithFixedValue(double fixedValue)", "class_method_signature": "RepeatableRandom.initialiseWithFixedValue(double fixedValue)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "RepeatableRandom.clear()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "InstancedRepeatableRandom", "signature": "InstancedRepeatableRandom newInstance()", "full_signature": "public static InstancedRepeatableRandom newInstance()", "class_method_signature": "RepeatableRandom.newInstance()", "testcase": false, "constructor": false}, {"identifier": "nextDouble", "parameters": "()", "modifiers": "public static", "return": "double", "signature": "double nextDouble()", "full_signature": "public static double nextDouble()", "class_method_signature": "RepeatableRandom.nextDouble()", "testcase": false, "constructor": false}, {"identifier": "nextDouble", "parameters": "(double origin, double bound)", "modifiers": "public static", "return": "double", "signature": "double nextDouble(double origin, double bound)", "full_signature": "public static double nextDouble(double origin, double bound)", "class_method_signature": "RepeatableRandom.nextDouble(double origin, double bound)", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "(int bound)", "modifiers": "public static", "return": "int", "signature": "int nextInt(int bound)", "full_signature": "public static int nextInt(int bound)", "class_method_signature": "RepeatableRandom.nextInt(int bound)", "testcase": false, "constructor": false}, {"identifier": "nextBoolean", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean nextBoolean()", "full_signature": "public static boolean nextBoolean()", "class_method_signature": "RepeatableRandom.nextBoolean()", "testcase": false, "constructor": false}, {"identifier": "nextUUID", "parameters": "()", "modifiers": "public static", "return": "UUID", "signature": "UUID nextUUID()", "full_signature": "public static UUID nextUUID()", "class_method_signature": "RepeatableRandom.nextUUID()", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long nextLong()", "full_signature": "public static long nextLong()", "class_method_signature": "RepeatableRandom.nextLong()", "testcase": false, "constructor": false}, {"identifier": "nextGaussian", "parameters": "()", "modifiers": "public static", "return": "double", "signature": "double nextGaussian()", "full_signature": "public static double nextGaussian()", "class_method_signature": "RepeatableRandom.nextGaussian()", "testcase": false, "constructor": false}, {"identifier": "shuffle", "parameters": "(List<T> list)", "modifiers": "public static", "return": "void", "signature": "void shuffle(List<T> list)", "full_signature": "public static void shuffle(List<T> list)", "class_method_signature": "RepeatableRandom.shuffle(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "shuffle", "parameters": "(T[] array)", "modifiers": "public static", "return": "void", "signature": "void shuffle(T[] array)", "full_signature": "public static void shuffle(T[] array)", "class_method_signature": "RepeatableRandom.shuffle(T[] array)", "testcase": false, "constructor": false}, {"identifier": "randomElementOf", "parameters": "(Collection<T> collection)", "modifiers": "public static", "return": "T", "signature": "T randomElementOf(Collection<T> collection)", "full_signature": "public static T randomElementOf(Collection<T> collection)", "class_method_signature": "RepeatableRandom.randomElementOf(Collection<T> collection)", "testcase": false, "constructor": false}, {"identifier": "randomElementOf", "parameters": "(List<T> list)", "modifiers": "public static", "return": "T", "signature": "T randomElementOf(List<T> list)", "full_signature": "public static T randomElementOf(List<T> list)", "class_method_signature": "RepeatableRandom.randomElementOf(List<T> list)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/random/RepeatableRandom.java"}, "focal_method": {"identifier": "shuffle", "parameters": "(List<T> list)", "modifiers": "public static", "return": "void", "body": "public static <T> void shuffle(List<T> list) {\n        instancedRepeatableRandom.shuffle(list);\n    }", "signature": "void shuffle(List<T> list)", "full_signature": "public static void shuffle(List<T> list)", "class_method_signature": "RepeatableRandom.shuffle(List<T> list)", "testcase": false, "constructor": false, "invocations": ["shuffle"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}