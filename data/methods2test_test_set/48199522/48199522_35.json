{"test_class": {"identifier": "TimeDatumStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TimeDatumStream stream;", "modifier": "private static", "type": "TimeDatumStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private static MacroBaseConf conf = new MacroBaseConf();", "modifier": "private static", "type": "MacroBaseConf", "declarator": "conf = new MacroBaseConf()", "var_name": "conf"}, {"original_string": "private static List<Datum> data = new ArrayList<>();", "modifier": "private static", "type": "List<Datum>", "declarator": "data = new ArrayList<>()", "var_name": "data"}], "file": "contrib/src/test/java/macrobase/analysis/pipeline/stream/TimeDatumStreamTest.java"}, "test_case": {"identifier": "testDrainDuration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDrainDuration() {\n        conf.set(MacroBaseConf.TIME_COLUMN, 0);\n\n        for (int i = 0; i < 100; ++i) {\n            Datum d = TestUtils.createTimeDatum(2 * i, 100 - i);\n            data.add(d);\n        }\n\n        stream = new TimeDatumStream(data, 0);\n        List<Datum> result = stream.drainDuration(1);\n        assertTrue(result.size() == 1);\n        result = stream.drainDuration(100);\n        assertTrue(result.size() == 50);\n        result = stream.drainDuration(200);\n        assertTrue(result.size() == 49);\n    }", "signature": "void testDrainDuration()", "full_signature": "@Test public void testDrainDuration()", "class_method_signature": "TimeDatumStreamTest.testDrainDuration()", "testcase": true, "constructor": false, "invocations": ["set", "createTimeDatum", "add", "drainDuration", "assertTrue", "size", "drainDuration", "assertTrue", "size", "drainDuration", "assertTrue", "size"]}, "focal_class": {"identifier": "TimeDatumStream", "superclass": "extends MBStream<Datum>", "interfaces": "", "fields": [{"original_string": "private int timeColumn;", "modifier": "private", "type": "int", "declarator": "timeColumn", "var_name": "timeColumn"}], "methods": [{"identifier": "TimeDatumStream", "parameters": "(int timeColumn)", "modifiers": "public", "return": "", "signature": " TimeDatumStream(int timeColumn)", "full_signature": "public  TimeDatumStream(int timeColumn)", "class_method_signature": "TimeDatumStream.TimeDatumStream(int timeColumn)", "testcase": false, "constructor": true}, {"identifier": "TimeDatumStream", "parameters": "(List<Datum> data, int timeColumn)", "modifiers": "public", "return": "", "signature": " TimeDatumStream(List<Datum> data, int timeColumn)", "full_signature": "public  TimeDatumStream(List<Datum> data, int timeColumn)", "class_method_signature": "TimeDatumStream.TimeDatumStream(List<Datum> data, int timeColumn)", "testcase": false, "constructor": true}, {"identifier": "getDatumTime", "parameters": "(int i)", "modifiers": "private", "return": "long", "signature": "long getDatumTime(int i)", "full_signature": "private long getDatumTime(int i)", "class_method_signature": "TimeDatumStream.getDatumTime(int i)", "testcase": false, "constructor": false}, {"identifier": "drainDuration", "parameters": "(long duration)", "modifiers": "public", "return": "List<Datum>", "signature": "List<Datum> drainDuration(long duration)", "full_signature": "public List<Datum> drainDuration(long duration)", "class_method_signature": "TimeDatumStream.drainDuration(long duration)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public", "return": "Datum", "signature": "Datum peek()", "full_signature": "public Datum peek()", "class_method_signature": "TimeDatumStream.peek()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/pipeline/stream/TimeDatumStream.java"}, "focal_method": {"identifier": "drainDuration", "parameters": "(long duration)", "modifiers": "public", "return": "List<Datum>", "body": "public List<Datum> drainDuration(long duration) {\n        int i = 0;\n        long startTime = getDatumTime(i);\n        while (i < output.size() && getDatumTime(i) - startTime < duration) {\n            i ++;\n        }\n        return drain(i);\n    }", "signature": "List<Datum> drainDuration(long duration)", "full_signature": "public List<Datum> drainDuration(long duration)", "class_method_signature": "TimeDatumStream.drainDuration(long duration)", "testcase": false, "constructor": false, "invocations": ["getDatumTime", "size", "getDatumTime", "drain"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}