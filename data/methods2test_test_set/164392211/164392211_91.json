{"test_class": {"identifier": "IntTimSortTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private IntComparator reverseSort = IntTimSortTest::reverseCompare;", "modifier": "private", "type": "IntComparator", "declarator": "reverseSort = IntTimSortTest::reverseCompare", "var_name": "reverseSort"}], "file": "dflib/src/test/java/com/nhl/dflib/sort/IntTimSortTest.java"}, "test_case": {"identifier": "testSort_WithRefComparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSort_WithRefComparator() {\n\n        String[] strings = {\"x\", \"y\", \"z\", \"a\", \"x\"};\n        IntComparator comparator = (i1, i2) -> strings[i1 - 1].compareTo(strings[i2 - 1]);\n\n        int[] ints = {1, 2, 3, 4, 5};\n        IntTimSort.sort(ints, comparator);\n        assertArrayEquals(new int[]{4, 1, 5, 2, 3}, ints);\n    }", "signature": "void testSort_WithRefComparator()", "full_signature": "@Test public void testSort_WithRefComparator()", "class_method_signature": "IntTimSortTest.testSort_WithRefComparator()", "testcase": true, "constructor": false, "invocations": ["compareTo", "sort", "assertArrayEquals"]}, "focal_class": {"identifier": "IntTimSort", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MIN_MERGE = 32;", "modifier": "private static final", "type": "int", "declarator": "MIN_MERGE = 32", "var_name": "MIN_MERGE"}, {"original_string": "private static final int MIN_GALLOP = 7;", "modifier": "private static final", "type": "int", "declarator": "MIN_GALLOP = 7", "var_name": "MIN_GALLOP"}, {"original_string": "private static final int INITIAL_TMP_STORAGE_LENGTH = 256;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_TMP_STORAGE_LENGTH = 256", "var_name": "INITIAL_TMP_STORAGE_LENGTH"}, {"original_string": "private final int[] a;", "modifier": "private final", "type": "int[]", "declarator": "a", "var_name": "a"}, {"original_string": "private final IntComparator c;", "modifier": "private final", "type": "IntComparator", "declarator": "c", "var_name": "c"}, {"original_string": "private final int[] runBase;", "modifier": "private final", "type": "int[]", "declarator": "runBase", "var_name": "runBase"}, {"original_string": "private final int[] runLen;", "modifier": "private final", "type": "int[]", "declarator": "runLen", "var_name": "runLen"}, {"original_string": "private int minGallop = MIN_GALLOP;", "modifier": "private", "type": "int", "declarator": "minGallop = MIN_GALLOP", "var_name": "minGallop"}, {"original_string": "private int[] tmp;", "modifier": "private", "type": "int[]", "declarator": "tmp", "var_name": "tmp"}, {"original_string": "private int stackSize = 0;", "modifier": "private", "type": "int", "declarator": "stackSize = 0", "var_name": "stackSize"}], "methods": [{"identifier": "IntTimSort", "parameters": "(int[] a, IntComparator c)", "modifiers": "private", "return": "", "signature": " IntTimSort(int[] a, IntComparator c)", "full_signature": "private  IntTimSort(int[] a, IntComparator c)", "class_method_signature": "IntTimSort.IntTimSort(int[] a, IntComparator c)", "testcase": false, "constructor": true}, {"identifier": "sort", "parameters": "(int[] a, IntComparator c)", "modifiers": "public static", "return": "void", "signature": "void sort(int[] a, IntComparator c)", "full_signature": "public static void sort(int[] a, IntComparator c)", "class_method_signature": "IntTimSort.sort(int[] a, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] a, int lo, int hi, IntComparator c)", "modifiers": "public static", "return": "void", "signature": "void sort(int[] a, int lo, int hi, IntComparator c)", "full_signature": "public static void sort(int[] a, int lo, int hi, IntComparator c)", "class_method_signature": "IntTimSort.sort(int[] a, int lo, int hi, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "binarySort", "parameters": "(int[] a, int lo, int hi, int start, IntComparator c)", "modifiers": "@SuppressWarnings(\"fallthrough\") private static", "return": "void", "signature": "void binarySort(int[] a, int lo, int hi, int start, IntComparator c)", "full_signature": "@SuppressWarnings(\"fallthrough\") private static void binarySort(int[] a, int lo, int hi, int start, IntComparator c)", "class_method_signature": "IntTimSort.binarySort(int[] a, int lo, int hi, int start, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "countRunAndMakeAscending", "parameters": "(int[] a, int lo, int hi, IntComparator c)", "modifiers": "private static", "return": "int", "signature": "int countRunAndMakeAscending(int[] a, int lo, int hi, IntComparator c)", "full_signature": "private static int countRunAndMakeAscending(int[] a, int lo, int hi, IntComparator c)", "class_method_signature": "IntTimSort.countRunAndMakeAscending(int[] a, int lo, int hi, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "reverseRange", "parameters": "(int[] a, int lo, int hi)", "modifiers": "private static", "return": "void", "signature": "void reverseRange(int[] a, int lo, int hi)", "full_signature": "private static void reverseRange(int[] a, int lo, int hi)", "class_method_signature": "IntTimSort.reverseRange(int[] a, int lo, int hi)", "testcase": false, "constructor": false}, {"identifier": "minRunLength", "parameters": "(int n)", "modifiers": "private static", "return": "int", "signature": "int minRunLength(int n)", "full_signature": "private static int minRunLength(int n)", "class_method_signature": "IntTimSort.minRunLength(int n)", "testcase": false, "constructor": false}, {"identifier": "gallopLeft", "parameters": "(int key, int[] a, int base, int len, int hint, IntComparator c)", "modifiers": "private static", "return": "int", "signature": "int gallopLeft(int key, int[] a, int base, int len, int hint, IntComparator c)", "full_signature": "private static int gallopLeft(int key, int[] a, int base, int len, int hint, IntComparator c)", "class_method_signature": "IntTimSort.gallopLeft(int key, int[] a, int base, int len, int hint, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "gallopRight", "parameters": "(int key, int[] a, int base, int len, int hint, IntComparator c)", "modifiers": "private static", "return": "int", "signature": "int gallopRight(int key, int[] a, int base, int len, int hint, IntComparator c)", "full_signature": "private static int gallopRight(int key, int[] a, int base, int len, int hint, IntComparator c)", "class_method_signature": "IntTimSort.gallopRight(int key, int[] a, int base, int len, int hint, IntComparator c)", "testcase": false, "constructor": false}, {"identifier": "pushRun", "parameters": "(int runBase, int runLen)", "modifiers": "private", "return": "void", "signature": "void pushRun(int runBase, int runLen)", "full_signature": "private void pushRun(int runBase, int runLen)", "class_method_signature": "IntTimSort.pushRun(int runBase, int runLen)", "testcase": false, "constructor": false}, {"identifier": "mergeCollapse", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mergeCollapse()", "full_signature": "private void mergeCollapse()", "class_method_signature": "IntTimSort.mergeCollapse()", "testcase": false, "constructor": false}, {"identifier": "mergeForceCollapse", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mergeForceCollapse()", "full_signature": "private void mergeForceCollapse()", "class_method_signature": "IntTimSort.mergeForceCollapse()", "testcase": false, "constructor": false}, {"identifier": "mergeAt", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void mergeAt(int i)", "full_signature": "private void mergeAt(int i)", "class_method_signature": "IntTimSort.mergeAt(int i)", "testcase": false, "constructor": false}, {"identifier": "mergeLo", "parameters": "(int base1, int len1, int base2, int len2)", "modifiers": "private", "return": "void", "signature": "void mergeLo(int base1, int len1, int base2, int len2)", "full_signature": "private void mergeLo(int base1, int len1, int base2, int len2)", "class_method_signature": "IntTimSort.mergeLo(int base1, int len1, int base2, int len2)", "testcase": false, "constructor": false}, {"identifier": "mergeHi", "parameters": "(int base1, int len1, int base2, int len2)", "modifiers": "private", "return": "void", "signature": "void mergeHi(int base1, int len1, int base2, int len2)", "full_signature": "private void mergeHi(int base1, int len1, int base2, int len2)", "class_method_signature": "IntTimSort.mergeHi(int base1, int len1, int base2, int len2)", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int minCapacity)", "modifiers": "private", "return": "int[]", "signature": "int[] ensureCapacity(int minCapacity)", "full_signature": "private int[] ensureCapacity(int minCapacity)", "class_method_signature": "IntTimSort.ensureCapacity(int minCapacity)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/sort/IntTimSort.java"}, "focal_method": {"identifier": "sort", "parameters": "(int[] a, IntComparator c)", "modifiers": "public static", "return": "void", "body": "public static void sort(int[] a, IntComparator c) {\n        sort(a, 0, a.length, c);\n    }", "signature": "void sort(int[] a, IntComparator c)", "full_signature": "public static void sort(int[] a, IntComparator c)", "class_method_signature": "IntTimSort.sort(int[] a, IntComparator c)", "testcase": false, "constructor": false, "invocations": ["sort"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}