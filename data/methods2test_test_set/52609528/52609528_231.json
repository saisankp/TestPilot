{"test_class": {"identifier": "LockUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private Logger log;", "modifier": "private", "type": "Logger", "declarator": "log", "var_name": "log"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/LockUtilTest.java"}, "test_case": {"identifier": "testAcquireLockError", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAcquireLockError(TestContext context) {\n        Mockito.when(lock.acquireLock(anyString(), anyString(), anyLong())).thenReturn(Future.failedFuture(\"Booom\"));\n        Async async = context.async();\n        LockUtil.acquireLock(lock, \"someLock\", \"someToken\", 100, log).setHandler(event -> {\n            context.assertFalse(event.succeeded());\n            context.assertEquals(\"Booom\", event.cause().getMessage());\n            async.complete();\n        });\n    }", "signature": "void testAcquireLockError(TestContext context)", "full_signature": "@Test public void testAcquireLockError(TestContext context)", "class_method_signature": "LockUtilTest.testAcquireLockError(TestContext context)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "acquireLock", "anyString", "anyString", "anyLong", "failedFuture", "async", "setHandler", "acquireLock", "assertFalse", "succeeded", "assertEquals", "getMessage", "cause", "complete"]}, "focal_class": {"identifier": "LockUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LockUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " LockUtil()", "full_signature": "private  LockUtil()", "class_method_signature": "LockUtil.LockUtil()", "testcase": false, "constructor": true}, {"identifier": "acquireLock", "parameters": "(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "modifiers": "public static", "return": "Future<Boolean>", "signature": "Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "full_signature": "public static Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "class_method_signature": "LockUtil.acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "testcase": false, "constructor": false}, {"identifier": "releaseLock", "parameters": "(Lock lockImpl, String lock, String token, Logger log)", "modifiers": "public static", "return": "void", "signature": "void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "full_signature": "public static void releaseLock(Lock lockImpl, String lock, String token, Logger log)", "class_method_signature": "LockUtil.releaseLock(Lock lockImpl, String lock, String token, Logger log)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/LockUtil.java"}, "focal_method": {"identifier": "acquireLock", "parameters": "(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "modifiers": "public static", "return": "Future<Boolean>", "body": "public static Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log){\n        Future<Boolean> future = Future.future();\n\n        if(lockImpl == null){\n            log.info(\"No lock implementation defined, going to pretend like we got the lock\");\n            future.complete(Boolean.TRUE);\n            return future;\n        }\n\n        log.debug(\"Trying to acquire lock '\"+lock+\"' with token '\"+token+\"' and expiry \" + lockExpiryMs + \"ms\");\n        lockImpl.acquireLock(lock, token, lockExpiryMs).setHandler(lockEvent -> {\n            if(lockEvent.succeeded()){\n                if(lockEvent.result()){\n                    log.debug(\"Acquired lock '\"+lock+\"' with token '\"+token+\"'\");\n                    future.complete(Boolean.TRUE);\n                } else {\n                    future.complete(Boolean.FALSE);\n                }\n            } else {\n                future.fail(lockEvent.cause());\n            }\n        });\n\n        return future;\n    }", "signature": "Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "full_signature": "public static Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "class_method_signature": "LockUtil.acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log)", "testcase": false, "constructor": false, "invocations": ["future", "info", "complete", "debug", "setHandler", "acquireLock", "succeeded", "result", "debug", "complete", "complete", "fail", "cause"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}