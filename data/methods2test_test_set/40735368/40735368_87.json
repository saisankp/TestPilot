{"test_class": {"identifier": "ArcSDEDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(ArcSDEDataStoreTest.class.getPackage().getName());", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(ArcSDEDataStoreTest.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "private static TestData testData;", "modifier": "private static", "type": "TestData", "declarator": "testData", "var_name": "testData"}, {"original_string": "private DataStore store;", "modifier": "private", "type": "DataStore", "declarator": "store", "var_name": "store"}, {"original_string": "FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);", "modifier": "", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(null)", "var_name": "ff"}], "file": "modules/plugin/arcsde/datastore/src/test/java/org/geotools/arcsde/data/ArcSDEDataStoreTest.java"}, "test_case": {"identifier": "testGetInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInfo() {\n        ServiceInfo info = store.getInfo();\n        assertNotNull(info);\n        assertNotNull(info.getTitle());\n        assertNotNull(info.getDescription());\n        assertNotNull(info.getSchema());\n    }", "signature": "void testGetInfo()", "full_signature": "@Test public void testGetInfo()", "class_method_signature": "ArcSDEDataStoreTest.testGetInfo()", "testcase": true, "constructor": false, "invocations": ["getInfo", "assertNotNull", "assertNotNull", "getTitle", "assertNotNull", "getDescription", "assertNotNull", "getSchema"]}, "focal_class": {"identifier": "ArcSDEDataStore", "superclass": "", "interfaces": "implements DataStore", "fields": [{"original_string": "private static final Logger LOGGER = Logging.getLogger(\"org.geotools.arcsde.data\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.arcsde.data\")", "var_name": "LOGGER"}, {"original_string": "private static final int DEFAULT_LAYER_NAMES_CACHE_UPDATE_FREQ_SECS = 60;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LAYER_NAMES_CACHE_UPDATE_FREQ_SECS = 60", "var_name": "DEFAULT_LAYER_NAMES_CACHE_UPDATE_FREQ_SECS"}, {"original_string": "final FeatureListenerManager listenerManager = new FeatureListenerManager();", "modifier": "final", "type": "FeatureListenerManager", "declarator": "listenerManager = new FeatureListenerManager()", "var_name": "listenerManager"}, {"original_string": "final ISessionPool connectionPool;", "modifier": "final", "type": "ISessionPool", "declarator": "connectionPool", "var_name": "connectionPool"}, {"original_string": "final FeatureTypeInfoCache typeInfoCache;", "modifier": "final", "type": "FeatureTypeInfoCache", "declarator": "typeInfoCache", "var_name": "typeInfoCache"}, {"original_string": "private String version;", "modifier": "private", "type": "String", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "ArcSDEDataStore", "parameters": "(final ISessionPool connPool)", "modifiers": "public", "return": "", "signature": " ArcSDEDataStore(final ISessionPool connPool)", "full_signature": "public  ArcSDEDataStore(final ISessionPool connPool)", "class_method_signature": "ArcSDEDataStore.ArcSDEDataStore(final ISessionPool connPool)", "testcase": false, "constructor": true}, {"identifier": "ArcSDEDataStore", "parameters": "(final ISessionPool connPool, final String namespaceUri,\n            final String versionName, final boolean allowNonSpatialTables)", "modifiers": "public", "return": "", "signature": " ArcSDEDataStore(final ISessionPool connPool, final String namespaceUri,\n            final String versionName, final boolean allowNonSpatialTables)", "full_signature": "public  ArcSDEDataStore(final ISessionPool connPool, final String namespaceUri,\n            final String versionName, final boolean allowNonSpatialTables)", "class_method_signature": "ArcSDEDataStore.ArcSDEDataStore(final ISessionPool connPool, final String namespaceUri,\n            final String versionName, final boolean allowNonSpatialTables)", "testcase": false, "constructor": true}, {"identifier": "getSession", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "ISession", "signature": "ISession getSession(Transaction transaction)", "full_signature": "public ISession getSession(Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getSession(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(final Transaction transaction)", "modifiers": "private", "return": "ArcTransactionState", "signature": "ArcTransactionState getState(final Transaction transaction)", "full_signature": "private ArcTransactionState getState(final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getState(final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(final SimpleFeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void createSchema(final SimpleFeatureType featureType)", "full_signature": "public void createSchema(final SimpleFeatureType featureType)", "class_method_signature": "ArcSDEDataStore.createSchema(final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(final String typeName)", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getSchema(final String typeName)", "full_signature": "public SimpleFeatureType getSchema(final String typeName)", "class_method_signature": "ArcSDEDataStore.getSchema(final String typeName)", "testcase": false, "constructor": false}, {"identifier": "getTypeNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getTypeNames()", "full_signature": "public String[] getTypeNames()", "class_method_signature": "ArcSDEDataStore.getTypeNames()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "ServiceInfo", "signature": "ServiceInfo getInfo()", "full_signature": "public ServiceInfo getInfo()", "class_method_signature": "ArcSDEDataStore.getInfo()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "ArcSDEDataStore.dispose()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "ArcSDEDataStore.finalize()", "testcase": false, "constructor": false}, {"identifier": "getFeatureReader", "parameters": "(final Query query,\n            final Transaction transaction)", "modifiers": "public", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final Transaction transaction)", "full_signature": "public FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getFeatureReader(final Query query,\n            final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureReader", "parameters": "(final Query query,\n            final Transaction transaction, final SimpleFeatureType featureType)", "modifiers": "public", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final Transaction transaction, final SimpleFeatureType featureType)", "full_signature": "public FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final Transaction transaction, final SimpleFeatureType featureType)", "class_method_signature": "ArcSDEDataStore.getFeatureReader(final Query query,\n            final Transaction transaction, final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getFeatureReader", "parameters": "(final Query query,\n            final SimpleFeatureType targetSchema, final ISession session,\n            final ArcSdeVersionHandler versionHandler)", "modifiers": "private", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final SimpleFeatureType targetSchema, final ISession session,\n            final ArcSdeVersionHandler versionHandler)", "full_signature": "private FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(final Query query,\n            final SimpleFeatureType targetSchema, final ISession session,\n            final ArcSdeVersionHandler versionHandler)", "class_method_signature": "ArcSDEDataStore.getFeatureReader(final Query query,\n            final SimpleFeatureType targetSchema, final ISession session,\n            final ArcSdeVersionHandler versionHandler)", "testcase": false, "constructor": false}, {"identifier": "getGeometryFactory", "parameters": "(final Hints queryHints)", "modifiers": "private", "return": "GeometryFactory", "signature": "GeometryFactory getGeometryFactory(final Hints queryHints)", "full_signature": "private GeometryFactory getGeometryFactory(final Hints queryHints)", "class_method_signature": "ArcSDEDataStore.getGeometryFactory(final Hints queryHints)", "testcase": false, "constructor": false}, {"identifier": "getQueryType", "parameters": "(Query query)", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getQueryType(Query query)", "full_signature": "public SimpleFeatureType getQueryType(Query query)", "class_method_signature": "ArcSDEDataStore.getQueryType(Query query)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "(final String typeName)", "modifiers": "public", "return": "SimpleFeatureSource", "signature": "SimpleFeatureSource getFeatureSource(final String typeName)", "full_signature": "public SimpleFeatureSource getFeatureSource(final String typeName)", "class_method_signature": "ArcSDEDataStore.getFeatureSource(final String typeName)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(final String typeName, final Transaction transaction)", "modifiers": "public", "return": "ArcSdeFeatureWriter", "signature": "ArcSdeFeatureWriter getFeatureWriter(final String typeName, final Transaction transaction)", "full_signature": "public ArcSdeFeatureWriter getFeatureWriter(final String typeName, final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getFeatureWriter(final String typeName, final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getVersionHandler", "parameters": "(final String typeName, final Transaction transaction)", "modifiers": "", "return": "ArcSdeVersionHandler", "signature": "ArcSdeVersionHandler getVersionHandler(final String typeName, final Transaction transaction)", "full_signature": " ArcSdeVersionHandler getVersionHandler(final String typeName, final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getVersionHandler(final String typeName, final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(final String typeName, final Filter filter,\n            final Transaction transaction)", "modifiers": "public", "return": "ArcSdeFeatureWriter", "signature": "ArcSdeFeatureWriter getFeatureWriter(final String typeName, final Filter filter,\n            final Transaction transaction)", "full_signature": "public ArcSdeFeatureWriter getFeatureWriter(final String typeName, final Filter filter,\n            final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getFeatureWriter(final String typeName, final Filter filter,\n            final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriterAppend", "parameters": "(final String typeName,\n            final Transaction transaction)", "modifiers": "public", "return": "ArcSdeFeatureWriter", "signature": "ArcSdeFeatureWriter getFeatureWriterAppend(final String typeName,\n            final Transaction transaction)", "full_signature": "public ArcSdeFeatureWriter getFeatureWriterAppend(final String typeName,\n            final Transaction transaction)", "class_method_signature": "ArcSDEDataStore.getFeatureWriterAppend(final String typeName,\n            final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getLockingManager", "parameters": "()", "modifiers": "public", "return": "LockingManager", "signature": "LockingManager getLockingManager()", "full_signature": "public LockingManager getLockingManager()", "class_method_signature": "ArcSDEDataStore.getLockingManager()", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(final String typeName, final SimpleFeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void updateSchema(final String typeName, final SimpleFeatureType featureType)", "full_signature": "public void updateSchema(final String typeName, final SimpleFeatureType featureType)", "class_method_signature": "ArcSDEDataStore.updateSchema(final String typeName, final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "(Name typeName)", "modifiers": "public", "return": "SimpleFeatureSource", "signature": "SimpleFeatureSource getFeatureSource(Name typeName)", "full_signature": "public SimpleFeatureSource getFeatureSource(Name typeName)", "class_method_signature": "ArcSDEDataStore.getFeatureSource(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "List<Name>", "signature": "List<Name> getNames()", "full_signature": "public List<Name> getNames()", "class_method_signature": "ArcSDEDataStore.getNames()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(Name name)", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getSchema(Name name)", "full_signature": "public SimpleFeatureType getSchema(Name name)", "class_method_signature": "ArcSDEDataStore.getSchema(Name name)", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(Name typeName, SimpleFeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void updateSchema(Name typeName, SimpleFeatureType featureType)", "full_signature": "public void updateSchema(Name typeName, SimpleFeatureType featureType)", "class_method_signature": "ArcSDEDataStore.updateSchema(Name typeName, SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(final SimpleFeatureType featureType, final Map<String, String> hints)", "modifiers": "public", "return": "void", "signature": "void createSchema(final SimpleFeatureType featureType, final Map<String, String> hints)", "full_signature": "public void createSchema(final SimpleFeatureType featureType, final Map<String, String> hints)", "class_method_signature": "ArcSDEDataStore.createSchema(final SimpleFeatureType featureType, final Map<String, String> hints)", "testcase": false, "constructor": false}, {"identifier": "registerView", "parameters": "(final String typeName, final PlainSelect select)", "modifiers": "", "return": "void", "signature": "void registerView(final String typeName, final PlainSelect select)", "full_signature": " void registerView(final String typeName, final PlainSelect select)", "class_method_signature": "ArcSDEDataStore.registerView(final String typeName, final PlainSelect select)", "testcase": false, "constructor": false}, {"identifier": "verifyQueryIsSupported", "parameters": "(PlainSelect select)", "modifiers": "private", "return": "void", "signature": "void verifyQueryIsSupported(PlainSelect select)", "full_signature": "private void verifyQueryIsSupported(PlainSelect select)", "class_method_signature": "ArcSDEDataStore.verifyQueryIsSupported(PlainSelect select)", "testcase": false, "constructor": false}, {"identifier": "verifyUnsupportedSqlConstruct", "parameters": "(List<Object> errors, Object construct)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void verifyUnsupportedSqlConstruct(List<Object> errors, Object construct)", "full_signature": "@SuppressWarnings(\"unchecked\") private void verifyUnsupportedSqlConstruct(List<Object> errors, Object construct)", "class_method_signature": "ArcSDEDataStore.verifyUnsupportedSqlConstruct(List<Object> errors, Object construct)", "testcase": false, "constructor": false}, {"identifier": "removeSchema", "parameters": "(Name typeName)", "modifiers": "@Override public", "return": "void", "signature": "void removeSchema(Name typeName)", "full_signature": "@Override public void removeSchema(Name typeName)", "class_method_signature": "ArcSDEDataStore.removeSchema(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "removeSchema", "parameters": "(String typeName)", "modifiers": "@Override public", "return": "void", "signature": "void removeSchema(String typeName)", "full_signature": "@Override public void removeSchema(String typeName)", "class_method_signature": "ArcSDEDataStore.removeSchema(String typeName)", "testcase": false, "constructor": false}], "file": "modules/plugin/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEDataStore.java"}, "focal_method": {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "ServiceInfo", "body": "public ServiceInfo getInfo() {\n        DefaultServiceInfo info = new DefaultServiceInfo();\n        info.setTitle(\"ArcSDE connection to \" + connectionPool.getConfig().getServerName()\n                + \" using database version '\" + version + \"'\");\n        info.setDescription(\"GeoTools ArcSDE DataStore plugin\");\n        try {\n            info.setSchema(typeInfoCache.getNamesapceURI() == null ? FeatureTypes.DEFAULT_NAMESPACE\n                    : new URI(typeInfoCache.getNamesapceURI()));\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n        return info;\n    }", "signature": "ServiceInfo getInfo()", "full_signature": "public ServiceInfo getInfo()", "class_method_signature": "ArcSDEDataStore.getInfo()", "testcase": false, "constructor": false, "invocations": ["setTitle", "getServerName", "getConfig", "setDescription", "setSchema", "getNamesapceURI", "getNamesapceURI", "printStackTrace"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}