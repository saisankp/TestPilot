{"test_class": {"identifier": "RollingCommandLatencyDistributionStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "RollingCommandLatencyDistributionStream stream;", "modifier": "", "type": "RollingCommandLatencyDistributionStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "HystrixRequestContext context;", "modifier": "", "type": "HystrixRequestContext", "declarator": "context", "var_name": "context"}, {"original_string": "static HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"CommandLatency\");", "modifier": "static", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"CommandLatency\")", "var_name": "groupKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/RollingCommandLatencyDistributionStreamTest.java"}, "test_case": {"identifier": "testThreadPoolRejectedCommandDoesNotGetLatencyTracked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testThreadPoolRejectedCommandDoesNotGetLatencyTracked() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(\"CMD-Latency-E\");\n        stream = RollingCommandLatencyDistributionStream.getInstance(key, 10, 100);\n        stream.startCachingStreamValuesIfUnstarted();\n\n        //10 commands with latency should occupy the entire threadpool.  execute those, then wait for bucket to roll\n        //next command should be a thread-pool rejection\n        List<Command> commands = new ArrayList<Command>();\n        for (int i = 0; i < 10; i++) {\n            commands.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 200));\n        }\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(new Subscriber<CachedValuesHistogram>() {\n            @Override\n            public void onCompleted() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                fail(e.getMessage());\n            }\n\n            @Override\n            public void onNext(CachedValuesHistogram distribution) {\n                System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" Received distribution with count : \" + distribution.getTotalCount() + \" and mean : \" + distribution.getMean());\n//                if (distribution.getTotalCount() > 0) {\n//                    assertBetween(200, 250, (int) distribution.getMean());\n//                }\n            }\n        });\n\n        for (Command cmd: commands) {\n            cmd.observe();\n        }\n\n        Command threadPoolRejected = Command.from(groupKey, key, HystrixEventType.SUCCESS);\n\n        try {\n            Thread.sleep(40);\n            threadPoolRejected.observe();\n        } catch (InterruptedException ie) {\n            fail(ie.getMessage());\n        }\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n        assertEquals(10, stream.getLatest().getTotalCount());\n        assertBetween(200, 250, stream.getLatestMean());\n        System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertTrue(threadPoolRejected.isResponseThreadPoolRejected());\n    }", "signature": "void testThreadPoolRejectedCommandDoesNotGetLatencyTracked()", "full_signature": "@Test public void testThreadPoolRejectedCommandDoesNotGetLatencyTracked()", "class_method_signature": "RollingCommandLatencyDistributionStreamTest.testThreadPoolRejectedCommandDoesNotGetLatencyTracked()", "testcase": true, "constructor": false, "invocations": ["asKey", "getInstance", "startCachingStreamValuesIfUnstarted", "add", "from", "subscribe", "take", "observe", "countDown", "fail", "getMessage", "println", "currentTimeMillis", "getName", "currentThread", "getTotalCount", "getMean", "observe", "from", "sleep", "observe", "fail", "getMessage", "assertTrue", "await", "fail", "assertEquals", "getTotalCount", "getLatest", "assertBetween", "getLatestMean", "println", "getExecutedCommandsAsString", "getCurrentRequest", "assertTrue", "isResponseThreadPoolRejected"]}, "focal_class": {"identifier": "RollingCommandLatencyDistributionStream", "superclass": "extends RollingDistributionStream<HystrixCommandCompletion>", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, RollingCommandLatencyDistributionStream> streams = new ConcurrentHashMap<String, RollingCommandLatencyDistributionStream>();", "modifier": "private static final", "type": "ConcurrentMap<String, RollingCommandLatencyDistributionStream>", "declarator": "streams = new ConcurrentHashMap<String, RollingCommandLatencyDistributionStream>()", "var_name": "streams"}, {"original_string": "private static final Func2<Histogram, HystrixCommandCompletion, Histogram> addValuesToBucket = new Func2<Histogram, HystrixCommandCompletion, Histogram>() {\n        @Override\n        public Histogram call(Histogram initialDistribution, HystrixCommandCompletion event) {\n            if (event.didCommandExecute() && event.getExecutionLatency() > -1) {\n                initialDistribution.recordValue(event.getExecutionLatency());\n            }\n            return initialDistribution;\n        }\n    };", "modifier": "private static final", "type": "Func2<Histogram, HystrixCommandCompletion, Histogram>", "declarator": "addValuesToBucket = new Func2<Histogram, HystrixCommandCompletion, Histogram>() {\n        @Override\n        public Histogram call(Histogram initialDistribution, HystrixCommandCompletion event) {\n            if (event.didCommandExecute() && event.getExecutionLatency() > -1) {\n                initialDistribution.recordValue(event.getExecutionLatency());\n            }\n            return initialDistribution;\n        }\n    }", "var_name": "addValuesToBucket"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "RollingCommandLatencyDistributionStream", "signature": "RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "RollingCommandLatencyDistributionStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "modifiers": "public static", "return": "RollingCommandLatencyDistributionStream", "signature": "RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "full_signature": "public static RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "class_method_signature": "RollingCommandLatencyDistributionStream.getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "RollingCommandLatencyDistributionStream.reset()", "testcase": false, "constructor": false}, {"identifier": "RollingCommandLatencyDistributionStream", "parameters": "(HystrixCommandKey commandKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "modifiers": "private", "return": "", "signature": " RollingCommandLatencyDistributionStream(HystrixCommandKey commandKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "full_signature": "private  RollingCommandLatencyDistributionStream(HystrixCommandKey commandKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "class_method_signature": "RollingCommandLatencyDistributionStream.RollingCommandLatencyDistributionStream(HystrixCommandKey commandKey, int numPercentileBuckets, int percentileBucketSizeInMs)", "testcase": false, "constructor": true}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/RollingCommandLatencyDistributionStream.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "RollingCommandLatencyDistributionStream", "body": "public static RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties) {\n        final int percentileMetricWindow = properties.metricsRollingPercentileWindowInMilliseconds().get();\n        final int numPercentileBuckets = properties.metricsRollingPercentileWindowBuckets().get();\n        final int percentileBucketSizeInMs = percentileMetricWindow / numPercentileBuckets;\n\n        return getInstance(commandKey, numPercentileBuckets, percentileBucketSizeInMs);\n    }", "signature": "RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static RollingCommandLatencyDistributionStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "RollingCommandLatencyDistributionStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false, "invocations": ["get", "metricsRollingPercentileWindowInMilliseconds", "get", "metricsRollingPercentileWindowBuckets", "getInstance"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}