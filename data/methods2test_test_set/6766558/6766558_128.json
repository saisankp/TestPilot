{"test_class": {"identifier": "HystrixCollapserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public HystrixRequestContextRule context = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "context = new HystrixRequestContextRule()", "var_name": "context"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixCollapserTest.java"}, "test_case": {"identifier": "testRequestThenTwoCacheHitsAllUnsubscribed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestThenTwoCacheHitsAllUnsubscribed() throws Exception {\n        TestCollapserTimer timer = new TestCollapserTimer();\n        HystrixCollapser<List<String>, String, String> collapser1 = new SuccessfulCacheableCollapsedCommand(timer, \"foo\", true);\n        Observable<String> response1 = collapser1.observe();\n        HystrixCollapser<List<String>, String, String> collapser2 = new SuccessfulCacheableCollapsedCommand(timer, \"foo\", true);\n        Observable<String> response2 = collapser2.observe();\n        HystrixCollapser<List<String>, String, String> collapser3 = new SuccessfulCacheableCollapsedCommand(timer, \"foo\", true);\n        Observable<String> response3 = collapser3.observe();\n\n        final CountDownLatch latch1 = new CountDownLatch(1);\n        final CountDownLatch latch2 = new CountDownLatch(1);\n        final CountDownLatch latch3 = new CountDownLatch(1);\n\n\n        final AtomicReference<String> value1 = new AtomicReference<String>(null);\n        final AtomicReference<String> value2 = new AtomicReference<String>(null);\n        final AtomicReference<String> value3 = new AtomicReference<String>(null);\n\n\n        Subscription s1 = response1\n                .doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        System.out.println(System.currentTimeMillis() + \" : s1 Unsubscribed!\");\n                        latch1.countDown();\n                    }\n                })\n                .subscribe(new Subscriber<String>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : s1 OnCompleted\");\n                        latch1.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : s1 OnError : \" + e);\n                        latch1.countDown();\n                    }\n\n                    @Override\n                    public void onNext(String s) {\n                        System.out.println(System.currentTimeMillis() + \" : s1 OnNext : \" + s);\n                        value1.set(s);\n                    }\n                });\n\n        Subscription s2 = response2\n                .doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        System.out.println(System.currentTimeMillis() + \" : s2 Unsubscribed!\");\n                        latch2.countDown();\n                    }\n                })\n                .subscribe(new Subscriber<String>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : s2 OnCompleted\");\n                        latch2.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : s2 OnError : \" + e);\n                        latch2.countDown();\n                    }\n\n                    @Override\n                    public void onNext(String s) {\n                        System.out.println(System.currentTimeMillis() + \" : s2 OnNext : \" + s);\n                        value2.set(s);\n                    }\n                });\n\n        Subscription s3 = response3\n                .doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        System.out.println(System.currentTimeMillis() + \" : s3 Unsubscribed!\");\n                        latch3.countDown();\n                    }\n                })\n                .subscribe(new Subscriber<String>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : s3 OnCompleted\");\n                        latch3.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : s3 OnError : \" + e);\n                        latch3.countDown();\n                    }\n\n                    @Override\n                    public void onNext(String s) {\n                        System.out.println(System.currentTimeMillis() + \" : s3 OnNext : \" + s);\n                        value3.set(s);\n                    }\n                });\n\n        s1.unsubscribe();\n        s2.unsubscribe();\n        s3.unsubscribe();\n\n        timer.incrementTime(10); // let time pass that equals the default delay/period\n\n        assertTrue(latch1.await(1000, TimeUnit.MILLISECONDS));\n        assertTrue(latch2.await(1000, TimeUnit.MILLISECONDS));\n\n        assertNull(value1.get());\n        assertNull(value2.get());\n        assertNull(value3.get());\n\n\n        System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(0, HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n    }", "signature": "void testRequestThenTwoCacheHitsAllUnsubscribed()", "full_signature": "@Test public void testRequestThenTwoCacheHitsAllUnsubscribed()", "class_method_signature": "HystrixCollapserTest.testRequestThenTwoCacheHitsAllUnsubscribed()", "testcase": true, "constructor": false, "invocations": ["observe", "observe", "observe", "subscribe", "doOnUnsubscribe", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "set", "subscribe", "doOnUnsubscribe", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "set", "subscribe", "doOnUnsubscribe", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "countDown", "println", "currentTimeMillis", "set", "unsubscribe", "unsubscribe", "unsubscribe", "incrementTime", "assertTrue", "await", "assertTrue", "await", "assertNull", "get", "assertNull", "get", "assertNull", "get", "println", "getExecutedCommandsAsString", "getCurrentRequest", "assertEquals", "size", "getAllExecutedCommands", "getCurrentRequest"]}, "focal_class": {"identifier": "HystrixCollapser", "superclass": "", "interfaces": "implements HystrixExecutable<ResponseType>, HystrixObservable<ResponseType>", "fields": [{"original_string": "static final Logger logger = LoggerFactory.getLogger(HystrixCollapser.class);", "modifier": "static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HystrixCollapser.class)", "var_name": "logger"}, {"original_string": "private final RequestCollapserFactory<BatchReturnType, ResponseType, RequestArgumentType> collapserFactory;", "modifier": "private final", "type": "RequestCollapserFactory<BatchReturnType, ResponseType, RequestArgumentType>", "declarator": "collapserFactory", "var_name": "collapserFactory"}, {"original_string": "private final HystrixRequestCache requestCache;", "modifier": "private final", "type": "HystrixRequestCache", "declarator": "requestCache", "var_name": "requestCache"}, {"original_string": "private final HystrixCollapserBridge<BatchReturnType, ResponseType, RequestArgumentType> collapserInstanceWrapper;", "modifier": "private final", "type": "HystrixCollapserBridge<BatchReturnType, ResponseType, RequestArgumentType>", "declarator": "collapserInstanceWrapper", "var_name": "collapserInstanceWrapper"}, {"original_string": "private final HystrixCollapserMetrics metrics;", "modifier": "private final", "type": "HystrixCollapserMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private static ConcurrentHashMap<Class<? extends HystrixCollapser>, String> defaultNameCache = new ConcurrentHashMap<Class<? extends HystrixCollapser>, String>();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private static", "type": "ConcurrentHashMap<Class<? extends HystrixCollapser>, String>", "declarator": "defaultNameCache = new ConcurrentHashMap<Class<? extends HystrixCollapser>, String>()", "var_name": "defaultNameCache"}], "methods": [{"identifier": "HystrixCollapser", "parameters": "()", "modifiers": "protected", "return": "", "signature": " HystrixCollapser()", "full_signature": "protected  HystrixCollapser()", "class_method_signature": "HystrixCollapser.HystrixCollapser()", "testcase": false, "constructor": true}, {"identifier": "HystrixCollapser", "parameters": "(HystrixCollapserKey collapserKey)", "modifiers": "protected", "return": "", "signature": " HystrixCollapser(HystrixCollapserKey collapserKey)", "full_signature": "protected  HystrixCollapser(HystrixCollapserKey collapserKey)", "class_method_signature": "HystrixCollapser.HystrixCollapser(HystrixCollapserKey collapserKey)", "testcase": false, "constructor": true}, {"identifier": "HystrixCollapser", "parameters": "(Setter setter)", "modifiers": "protected", "return": "", "signature": " HystrixCollapser(Setter setter)", "full_signature": "protected  HystrixCollapser(Setter setter)", "class_method_signature": "HystrixCollapser.HystrixCollapser(Setter setter)", "testcase": false, "constructor": true}, {"identifier": "HystrixCollapser", "parameters": "(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder)", "modifiers": "", "return": "", "signature": " HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder)", "full_signature": "  HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder)", "class_method_signature": "HystrixCollapser.HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder)", "testcase": false, "constructor": true}, {"identifier": "HystrixCollapser", "parameters": "(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "modifiers": "", "return": "", "signature": " HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "full_signature": "  HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "class_method_signature": "HystrixCollapser.HystrixCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "testcase": false, "constructor": true}, {"identifier": "getProperties", "parameters": "()", "modifiers": "private", "return": "HystrixCollapserProperties", "signature": "HystrixCollapserProperties getProperties()", "full_signature": "private HystrixCollapserProperties getProperties()", "class_method_signature": "HystrixCollapser.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getCollapserKey", "parameters": "()", "modifiers": "public", "return": "HystrixCollapserKey", "signature": "HystrixCollapserKey getCollapserKey()", "full_signature": "public HystrixCollapserKey getCollapserKey()", "class_method_signature": "HystrixCollapser.getCollapserKey()", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "Scope", "signature": "Scope getScope()", "full_signature": "public Scope getScope()", "class_method_signature": "HystrixCollapser.getScope()", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "public", "return": "HystrixCollapserMetrics", "signature": "HystrixCollapserMetrics getMetrics()", "full_signature": "public HystrixCollapserMetrics getMetrics()", "class_method_signature": "HystrixCollapser.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getRequestArgument", "parameters": "()", "modifiers": "public abstract", "return": "RequestArgumentType", "signature": "RequestArgumentType getRequestArgument()", "full_signature": "public abstract RequestArgumentType getRequestArgument()", "class_method_signature": "HystrixCollapser.getRequestArgument()", "testcase": false, "constructor": false}, {"identifier": "createCommand", "parameters": "(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "modifiers": "protected abstract", "return": "HystrixCommand<BatchReturnType>", "signature": "HystrixCommand<BatchReturnType> createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "full_signature": "protected abstract HystrixCommand<BatchReturnType> createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "class_method_signature": "HystrixCollapser.createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "testcase": false, "constructor": false}, {"identifier": "shardRequests", "parameters": "(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "modifiers": "protected", "return": "Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>>", "signature": "Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>> shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "full_signature": "protected Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>> shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "class_method_signature": "HystrixCollapser.shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "testcase": false, "constructor": false}, {"identifier": "mapResponseToRequests", "parameters": "(BatchReturnType batchResponse, Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "modifiers": "protected abstract", "return": "void", "signature": "void mapResponseToRequests(BatchReturnType batchResponse, Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "full_signature": "protected abstract void mapResponseToRequests(BatchReturnType batchResponse, Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "class_method_signature": "HystrixCollapser.mapResponseToRequests(BatchReturnType batchResponse, Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> observe()", "full_signature": "public Observable<ResponseType> observe()", "class_method_signature": "HystrixCollapser.observe()", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> toObservable()", "full_signature": "public Observable<ResponseType> toObservable()", "class_method_signature": "HystrixCollapser.toObservable()", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(Scheduler observeOn)", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> toObservable(Scheduler observeOn)", "full_signature": "public Observable<ResponseType> toObservable(Scheduler observeOn)", "class_method_signature": "HystrixCollapser.toObservable(Scheduler observeOn)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "ResponseType", "signature": "ResponseType execute()", "full_signature": "public ResponseType execute()", "class_method_signature": "HystrixCollapser.execute()", "testcase": false, "constructor": false}, {"identifier": "queue", "parameters": "()", "modifiers": "public", "return": "Future<ResponseType>", "signature": "Future<ResponseType> queue()", "full_signature": "public Future<ResponseType> queue()", "class_method_signature": "HystrixCollapser.queue()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCacheKey()", "full_signature": "protected String getCacheKey()", "class_method_signature": "HystrixCollapser.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void reset()", "full_signature": "static void reset()", "class_method_signature": "HystrixCollapser.reset()", "testcase": false, "constructor": false}, {"identifier": "getDefaultNameFromClass", "parameters": "(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixCollapser> cls)", "modifiers": "private static", "return": "String", "signature": "String getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixCollapser> cls)", "full_signature": "private static String getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixCollapser> cls)", "class_method_signature": "HystrixCollapser.getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixCollapser> cls)", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixCollapser.java"}, "focal_method": {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "body": "public Observable<ResponseType> observe() {\n        // use a ReplaySubject to buffer the eagerly subscribed-to Observable\n        ReplaySubject<ResponseType> subject = ReplaySubject.create();\n        // eagerly kick off subscription\n        final Subscription underlyingSubscription = toObservable().subscribe(subject);\n        // return the subject that can be subscribed to later while the execution has already started\n        return subject.doOnUnsubscribe(new Action0() {\n            @Override\n            public void call() {\n                underlyingSubscription.unsubscribe();\n            }\n        });\n    }", "signature": "Observable<ResponseType> observe()", "full_signature": "public Observable<ResponseType> observe()", "class_method_signature": "HystrixCollapser.observe()", "testcase": false, "constructor": false, "invocations": ["create", "subscribe", "toObservable", "doOnUnsubscribe", "unsubscribe"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}