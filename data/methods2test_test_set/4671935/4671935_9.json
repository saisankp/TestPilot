{"test_class": {"identifier": "LaserMeasurementTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/lasers/LaserMeasurementTest.java"}, "test_case": {"identifier": "parseFreedom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseFreedom() throws ParseException {\n        assertEquals(1, LaserMeasurement.parse(\"100 200\", false, true).size());\n        assertEquals(2, LaserMeasurement.parse(\"100 200\\n20.0 -50.0\", false, true).size());\n    }", "signature": "void parseFreedom()", "full_signature": "@Test public void parseFreedom()", "class_method_signature": "LaserMeasurementTest.parseFreedom()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "parse", "assertEquals", "size", "parse"]}, "focal_class": {"identifier": "LaserMeasurement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"LaserMeasurement\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"LaserMeasurement\"", "var_name": "TAG"}, {"original_string": "public final double x;", "modifier": "public final", "type": "double", "declarator": "x", "var_name": "x"}, {"original_string": "public final double y;", "modifier": "public final", "type": "double", "declarator": "y", "var_name": "y"}], "methods": [{"identifier": "LaserMeasurement", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " LaserMeasurement(double x, double y)", "full_signature": "public  LaserMeasurement(double x, double y)", "class_method_signature": "LaserMeasurement.LaserMeasurement(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "LaserMeasurement.toString()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@NonNull String pointString, boolean metric, boolean strict)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "full_signature": "@NonNull public static List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "class_method_signature": "LaserMeasurement.parse(@NonNull String pointString, boolean metric, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "parseSafe", "parameters": "(@NonNull String pointString, boolean metric)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> parseSafe(@NonNull String pointString, boolean metric)", "full_signature": "@NonNull public static List<LaserMeasurement> parseSafe(@NonNull String pointString, boolean metric)", "class_method_signature": "LaserMeasurement.parseSafe(@NonNull String pointString, boolean metric)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(@NonNull List<LaserMeasurement> points, boolean metric)", "modifiers": "@NonNull public static", "return": "CharSequence", "signature": "CharSequence render(@NonNull List<LaserMeasurement> points, boolean metric)", "full_signature": "@NonNull public static CharSequence render(@NonNull List<LaserMeasurement> points, boolean metric)", "class_method_signature": "LaserMeasurement.render(@NonNull List<LaserMeasurement> points, boolean metric)", "testcase": false, "constructor": false}, {"identifier": "reorder", "parameters": "(@NonNull List<LaserMeasurement> points)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "signature": "List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "full_signature": "@NonNull public static List<LaserMeasurement> reorder(@NonNull List<LaserMeasurement> points)", "class_method_signature": "LaserMeasurement.reorder(@NonNull List<LaserMeasurement> points)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/lasers/LaserMeasurement.java"}, "focal_method": {"identifier": "parse", "parameters": "(@NonNull String pointString, boolean metric, boolean strict)", "modifiers": "@NonNull public static", "return": "List<LaserMeasurement>", "body": "@NonNull\n    public static List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict) throws ParseException {\n        final List<LaserMeasurement> points = new ArrayList<>();\n        final String[] lines = pointString.split(\"\\n\");\n        final double units = metric ? 1 : Convert.FT;\n        for (int i = 0; i < lines.length; i++) {\n            final String line = lines[i];\n            final String[] row = line.trim().split(\"[, \\t/]+\", -1);\n            if (row.length == 2) {\n                try {\n                    final double x = Double.parseDouble(row[0]) * units;\n                    final double y = Double.parseDouble(row[1]) * units;\n                    if (Numbers.isReal(x) && Numbers.isReal(y)) {\n                        points.add(new LaserMeasurement(x, y));\n                    } else {\n                        Log.w(TAG, \"Laser measurements must be real \" + x + \" \" + y);\n                        if (strict) {\n                            throw new ParseException(\"Invalid measurement\", i + 1);\n                        }\n                    }\n                } catch (NumberFormatException e) {\n                    Log.w(TAG, \"Error parsing laser profile \" + e);\n                    if (strict) {\n                        throw new ParseException(\"Invalid measurement\", i + 1);\n                    }\n                }\n            } else {\n                if (strict) {\n                    throw new ParseException(\"Invalid measurement\", i + 1);\n                }\n            }\n        }\n        return points;\n    }", "signature": "List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "full_signature": "@NonNull public static List<LaserMeasurement> parse(@NonNull String pointString, boolean metric, boolean strict)", "class_method_signature": "LaserMeasurement.parse(@NonNull String pointString, boolean metric, boolean strict)", "testcase": false, "constructor": false, "invocations": ["split", "split", "trim", "parseDouble", "parseDouble", "isReal", "isReal", "add", "w", "w"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}