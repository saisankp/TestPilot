{"test_class": {"identifier": "PoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Pool<ListNode<Integer>> pool;", "modifier": "private", "type": "Pool<ListNode<Integer>>", "declarator": "pool", "var_name": "pool"}], "file": "src/edu/lclark/orego/util/PoolTest.java"}, "test_case": {"identifier": "testFree", "parameters": "()", "modifiers": "@SuppressWarnings(\"boxing\") @Test public", "return": "void", "body": "@SuppressWarnings(\"boxing\")\n\t@Test\n\tpublic void testFree() {\n\t\t// Make a node and add it to the pool\n\t\tListNode<Integer> node = new ListNode<>();\n\t\tnode.setKey(-8);\n\t\tpool.free(node);\n\t\t// Allocate should return this node\n\t\tassertSame(node, pool.allocate());\n\t\tassertEquals(-8, node.getKey().intValue());\n\t}", "signature": "void testFree()", "full_signature": "@SuppressWarnings(\"boxing\") @Test public void testFree()", "class_method_signature": "PoolTest.testFree()", "testcase": true, "constructor": false, "invocations": ["setKey", "free", "assertSame", "allocate", "assertEquals", "intValue", "getKey"]}, "focal_class": {"identifier": "Pool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private T free;", "modifier": "private", "type": "T", "declarator": "free", "var_name": "free"}], "methods": [{"identifier": "allocate", "parameters": "()", "modifiers": "public synchronized", "return": "T", "signature": "T allocate()", "full_signature": "public synchronized T allocate()", "class_method_signature": "Pool.allocate()", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "(T element)", "modifiers": "public", "return": "T", "signature": "T free(T element)", "full_signature": "public T free(T element)", "class_method_signature": "Pool.free(T element)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Pool.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Pool.size()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/util/Pool.java"}, "focal_method": {"identifier": "free", "parameters": "(T element)", "modifiers": "public", "return": "T", "body": "public T free(T element) {\n\t\tfinal T result = element.getNext();\n\t\telement.setNext(free);\n\t\tfree = element;\n\t\treturn result;\n\t}", "signature": "T free(T element)", "full_signature": "public T free(T element)", "class_method_signature": "Pool.free(T element)", "testcase": false, "constructor": false, "invocations": ["getNext", "setNext"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}