{"test_class": {"identifier": "ExecutorServiceWorkRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutorServiceWorkRunner underTest;", "modifier": "private", "type": "ExecutorServiceWorkRunner", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Rule public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "mobius-core/src/test/java/com/spotify/mobius/runners/ExecutorServiceWorkRunnerTest.java"}, "test_case": {"identifier": "disposingShouldStopUnderlyingExecutorService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void disposingShouldStopUnderlyingExecutorService() throws Exception {\n    ExecutorService service = Executors.newSingleThreadExecutor();\n\n    underTest = new ExecutorServiceWorkRunner(service);\n    underTest.dispose();\n\n    assertThat(service.isTerminated(), is(true));\n  }", "signature": "void disposingShouldStopUnderlyingExecutorService()", "full_signature": "@Test public void disposingShouldStopUnderlyingExecutorService()", "class_method_signature": "ExecutorServiceWorkRunnerTest.disposingShouldStopUnderlyingExecutorService()", "testcase": true, "constructor": false, "invocations": ["newSingleThreadExecutor", "dispose", "assertThat", "isTerminated", "is"]}, "focal_class": {"identifier": "ExecutorServiceWorkRunner", "superclass": "", "interfaces": "implements WorkRunner", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExecutorServiceWorkRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExecutorServiceWorkRunner.class)", "var_name": "LOGGER"}, {"original_string": "@Nonnull private final ExecutorService service;", "modifier": "@Nonnull private final", "type": "ExecutorService", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "ExecutorServiceWorkRunner", "parameters": "(ExecutorService service)", "modifiers": "public", "return": "", "signature": " ExecutorServiceWorkRunner(ExecutorService service)", "full_signature": "public  ExecutorServiceWorkRunner(ExecutorService service)", "class_method_signature": "ExecutorServiceWorkRunner.ExecutorServiceWorkRunner(ExecutorService service)", "testcase": false, "constructor": true}, {"identifier": "post", "parameters": "(Runnable runnable)", "modifiers": "@SuppressWarnings(\"FutureReturnValueIgnored\") @Override public", "return": "void", "signature": "void post(Runnable runnable)", "full_signature": "@SuppressWarnings(\"FutureReturnValueIgnored\") @Override public void post(Runnable runnable)", "class_method_signature": "ExecutorServiceWorkRunner.post(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ExecutorServiceWorkRunner.dispose()", "testcase": false, "constructor": false}], "file": "mobius-core/src/main/java/com/spotify/mobius/runners/ExecutorServiceWorkRunner.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void dispose() {\n    try {\n      List<Runnable> runnables = service.shutdownNow();\n\n      if (!runnables.isEmpty()) {\n        LOGGER.warn(\n            \"Disposing ExecutorServiceWorkRunner with {} outstanding tasks.\", runnables.size());\n      }\n\n      if (!service.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n        LOGGER.error(\"ExecutorService shutdown timed out; there are still tasks executing\");\n      }\n    } catch (InterruptedException e) {\n      LOGGER.error(\"Timeout when disposing work runner\", e);\n    }\n  }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ExecutorServiceWorkRunner.dispose()", "testcase": false, "constructor": false, "invocations": ["shutdownNow", "isEmpty", "warn", "size", "awaitTermination", "error", "error"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}