{"test_class": {"identifier": "BoltServerTest", "superclass": "", "interfaces": "", "fields": [], "file": "remoting/remoting-bolt/src/test/java/com/alipay/sofa/rpc/server/bolt/BoltServerTest.java"}, "test_case": {"identifier": "start", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void start() throws Exception {\n        String host = \"127.0.0.1\";\n        int port = 17701;\n        ServerConfig serverConfig = new ServerConfig();\n        serverConfig.setBoundHost(host);\n        serverConfig.setPort(port);\n        serverConfig.setProtocol(RpcConstants.PROTOCOL_TYPE_BOLT);\n\n        BoltServer server = new BoltServer();\n        server.init(serverConfig);\n        server.start();\n        Assert.assertTrue(server.started);\n        Assert.assertTrue(NetUtils.canTelnet(host, port, 1000));\n\n        // start use bound port will throw exception\n        ServerConfig serverConfig2 = new ServerConfig();\n        serverConfig2.setBoundHost(host);\n        serverConfig2.setPort(port);\n        serverConfig2.setProtocol(RpcConstants.PROTOCOL_TYPE_BOLT);\n        BoltServer server2 = new BoltServer();\n        server2.init(serverConfig2);\n        boolean error = false;\n        try {\n            server2.start();\n        } catch (Exception e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n\n        server.stop();\n        Assert.assertFalse(server.started);\n        Thread.sleep(1000); // \u5347\u7ea7bolt\u540e\u5220\u9664\u6b64\u884c\n        Assert.assertFalse(NetUtils.canTelnet(host, port, 1000));\n\n        server.start();\n        Assert.assertTrue(server.started);\n        Assert.assertTrue(NetUtils.canTelnet(host, port, 1000));\n\n        server.stop();\n        Assert.assertFalse(server.started);\n        Thread.sleep(1000); // \u5347\u7ea7bolt\u540e\u5220\u9664\u6b64\u884c\n        Assert.assertFalse(NetUtils.canTelnet(host, port, 1000));\n\n        server.destroy();\n    }", "signature": "void start()", "full_signature": "@Test public void start()", "class_method_signature": "BoltServerTest.start()", "testcase": true, "constructor": false, "invocations": ["setBoundHost", "setPort", "setProtocol", "init", "start", "assertTrue", "assertTrue", "canTelnet", "setBoundHost", "setPort", "setProtocol", "init", "start", "assertTrue", "stop", "assertFalse", "sleep", "assertFalse", "canTelnet", "start", "assertTrue", "assertTrue", "canTelnet", "stop", "assertFalse", "sleep", "assertFalse", "canTelnet", "destroy"]}, "focal_class": {"identifier": "BoltServer", "superclass": "", "interfaces": "implements Server", "fields": [{"original_string": "private static final Logger    LOGGER     = LoggerFactory.getLogger(BoltServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER     = LoggerFactory.getLogger(BoltServer.class)", "var_name": "LOGGER"}, {"original_string": "protected volatile boolean     started;", "modifier": "protected volatile", "type": "boolean", "declarator": "started", "var_name": "started"}, {"original_string": "protected RemotingServer       remotingServer;", "modifier": "protected", "type": "RemotingServer", "declarator": "remotingServer", "var_name": "remotingServer"}, {"original_string": "protected ServerConfig         serverConfig;", "modifier": "protected", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}, {"original_string": "protected BoltServerProcessor  boltServerProcessor;", "modifier": "protected", "type": "BoltServerProcessor", "declarator": "boltServerProcessor", "var_name": "boltServerProcessor"}, {"original_string": "protected ThreadPoolExecutor   bizThreadPool;", "modifier": "protected", "type": "ThreadPoolExecutor", "declarator": "bizThreadPool", "var_name": "bizThreadPool"}, {"original_string": "protected Map<String, Invoker> invokerMap = new ConcurrentHashMap<String, Invoker>();", "modifier": "protected", "type": "Map<String, Invoker>", "declarator": "invokerMap = new ConcurrentHashMap<String, Invoker>()", "var_name": "invokerMap"}], "methods": [{"identifier": "init", "parameters": "(ServerConfig serverConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServerConfig serverConfig)", "full_signature": "@Override public void init(ServerConfig serverConfig)", "class_method_signature": "BoltServer.init(ServerConfig serverConfig)", "testcase": false, "constructor": false}, {"identifier": "initThreadPool", "parameters": "(ServerConfig serverConfig)", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor initThreadPool(ServerConfig serverConfig)", "full_signature": "protected ThreadPoolExecutor initThreadPool(ServerConfig serverConfig)", "class_method_signature": "BoltServer.initThreadPool(ServerConfig serverConfig)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "BoltServer.start()", "testcase": false, "constructor": false}, {"identifier": "initRemotingServer", "parameters": "()", "modifiers": "protected", "return": "RemotingServer", "signature": "RemotingServer initRemotingServer()", "full_signature": "protected RemotingServer initRemotingServer()", "class_method_signature": "BoltServer.initRemotingServer()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "@Override public boolean isStarted()", "class_method_signature": "BoltServer.isStarted()", "testcase": false, "constructor": false}, {"identifier": "hasNoEntry", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNoEntry()", "full_signature": "@Override public boolean hasNoEntry()", "class_method_signature": "BoltServer.hasNoEntry()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "BoltServer.stop()", "testcase": false, "constructor": false}, {"identifier": "registerProcessor", "parameters": "(ProviderConfig providerConfig, Invoker instance)", "modifiers": "@Override public", "return": "void", "signature": "void registerProcessor(ProviderConfig providerConfig, Invoker instance)", "full_signature": "@Override public void registerProcessor(ProviderConfig providerConfig, Invoker instance)", "class_method_signature": "BoltServer.registerProcessor(ProviderConfig providerConfig, Invoker instance)", "testcase": false, "constructor": false}, {"identifier": "unRegisterProcessor", "parameters": "(ProviderConfig providerConfig, boolean closeIfNoEntry)", "modifiers": "@Override public", "return": "void", "signature": "void unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "full_signature": "@Override public void unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "class_method_signature": "BoltServer.unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "BoltServer.destroy()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(DestroyHook hook)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(DestroyHook hook)", "full_signature": "@Override public void destroy(DestroyHook hook)", "class_method_signature": "BoltServer.destroy(DestroyHook hook)", "testcase": false, "constructor": false}, {"identifier": "getBizThreadPool", "parameters": "()", "modifiers": "public", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getBizThreadPool()", "full_signature": "public ThreadPoolExecutor getBizThreadPool()", "class_method_signature": "BoltServer.getBizThreadPool()", "testcase": false, "constructor": false}, {"identifier": "findInvoker", "parameters": "(String serviceName)", "modifiers": "public", "return": "Invoker", "signature": "Invoker findInvoker(String serviceName)", "full_signature": "public Invoker findInvoker(String serviceName)", "class_method_signature": "BoltServer.findInvoker(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "cleanReflectCache", "parameters": "(ProviderConfig providerConfig)", "modifiers": "public", "return": "void", "signature": "void cleanReflectCache(ProviderConfig providerConfig)", "full_signature": "public void cleanReflectCache(ProviderConfig providerConfig)", "class_method_signature": "BoltServer.cleanReflectCache(ProviderConfig providerConfig)", "testcase": false, "constructor": false}], "file": "remoting/remoting-bolt/src/main/java/com/alipay/sofa/rpc/server/bolt/BoltServer.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start() {\n        if (started) {\n            return;\n        }\n        synchronized (this) {\n            if (started) {\n                return;\n            }\n            // \u751f\u6210Server\u5bf9\u8c61\n            remotingServer = initRemotingServer();\n            try {\n                if (remotingServer.start()) {\n                    if (LOGGER.isInfoEnabled()) {\n                        LOGGER.info(\"Bolt server has been bind to {}:{}\", serverConfig.getBoundHost(),\n                            serverConfig.getPort());\n                    }\n                } else {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_BOLT_SERVER));\n                }\n                started = true;\n\n                if (EventBus.isEnable(ServerStartedEvent.class)) {\n                    EventBus.post(new ServerStartedEvent(serverConfig, bizThreadPool));\n                }\n\n            } catch (SofaRpcRuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_BOLT_SERVER), e);\n            }\n        }\n    }", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "BoltServer.start()", "testcase": false, "constructor": false, "invocations": ["initRemotingServer", "start", "isInfoEnabled", "info", "getBoundHost", "getPort", "getLog", "isEnable", "post", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}