{"test_class": {"identifier": "ZagrebIndexDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ZagrebIndexDescriptorTest.java"}, "test_case": {"identifier": "test2Dvs3D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test2Dvs3D() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"O1C2C34C(C(C1O)CCCc1cc(cc(c1)C(F)(F)F)C(F)(F)F)CCC(C3CCC(O2)(OO4)C)C\");\n\n        addExplicitHydrogens(mol);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n\n        double value2D = ((DoubleResult) descriptor.calculate(mol).getValue()).doubleValue();\n\n        String filename = \"data/mdl/cpsa-uncharged.sdf\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new MDLV2000Reader(ins);\n        ChemFile content = (ChemFile) reader.read((ChemObject) new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        mol = (IAtomContainer) cList.get(0);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n\n        double value3D = ((DoubleResult) descriptor.calculate(mol).getValue()).doubleValue();\n\n        Assert.assertEquals(value2D, value3D, 0.001);\n\n    }", "signature": "void test2Dvs3D()", "full_signature": "@Test public void test2Dvs3D()", "class_method_signature": "ZagrebIndexDescriptorTest.test2Dvs3D()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "doubleValue", "getValue", "calculate", "getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "doubleValue", "getValue", "calculate", "assertEquals"]}, "focal_class": {"identifier": "ZagrebIndexDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"Zagreb\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"Zagreb\"}", "var_name": "NAMES"}], "methods": [{"identifier": "ZagrebIndexDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ZagrebIndexDescriptor()", "full_signature": "public  ZagrebIndexDescriptor()", "class_method_signature": "ZagrebIndexDescriptor.ZagrebIndexDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ZagrebIndexDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ZagrebIndexDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ZagrebIndexDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ZagrebIndexDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "ZagrebIndexDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "ZagrebIndexDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ZagrebIndexDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ZagrebIndexDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ZagrebIndexDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        double zagreb = 0;\n        for (IAtom atom : atomContainer.atoms()) {\n            if (atom.getAtomicNumber() == IElement.H) continue;\n            int atomDegree = 0;\n            List<IAtom> neighbours = atomContainer.getConnectedAtomsList(atom);\n            for (IAtom neighbour : neighbours) {\n                if (neighbour.getAtomicNumber() != IElement.H) {\n                    atomDegree += 1;\n                }\n            }\n            zagreb += (atomDegree * atomDegree);\n        }\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(zagreb),\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "ZagrebIndexDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["atoms", "getAtomicNumber", "getConnectedAtomsList", "getAtomicNumber", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}