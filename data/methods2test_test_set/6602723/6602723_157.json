{"test_class": {"identifier": "TestCircuitBreaker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CircuitBreaker impl;", "modifier": "private", "type": "CircuitBreaker", "declarator": "impl", "var_name": "impl"}, {"original_string": "private Callable<Object> mockCallable;", "modifier": "private", "type": "Callable<Object>", "declarator": "mockCallable", "var_name": "mockCallable"}, {"original_string": "private Runnable mockRunnable;", "modifier": "private", "type": "Runnable", "declarator": "mockRunnable", "var_name": "mockRunnable"}, {"original_string": "private Clock mockClock;", "modifier": "private", "type": "Clock", "declarator": "mockClock", "var_name": "mockClock"}, {"original_string": "Status theStatus;", "modifier": "", "type": "Status", "declarator": "theStatus", "var_name": "theStatus"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestCircuitBreaker.java"}, "test_case": {"identifier": "testGetStatusWhenOpen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStatusWhenOpen() {\n        impl.state = CircuitBreaker.BreakerState.OPEN;\n        Assert.assertEquals(Status.DOWN, impl.getStatus());\n    }", "signature": "void testGetStatusWhenOpen()", "full_signature": "@Test public void testGetStatusWhenOpen()", "class_method_signature": "TestCircuitBreaker.testGetStatusWhenOpen()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getStatus"]}, "focal_class": {"identifier": "CircuitBreaker", "superclass": "", "interfaces": "implements MonitoredService, ServiceWrapper", "fields": [{"original_string": "private Throwable tripException = null;", "modifier": "private", "type": "Throwable", "declarator": "tripException = null", "var_name": "tripException"}, {"original_string": "protected volatile BreakerState state = BreakerState.CLOSED;", "modifier": "protected volatile", "type": "BreakerState", "declarator": "state = BreakerState.CLOSED", "var_name": "state"}, {"original_string": "protected AtomicLong lastFailure = new AtomicLong(0L);", "modifier": "protected", "type": "AtomicLong", "declarator": "lastFailure = new AtomicLong(0L)", "var_name": "lastFailure"}, {"original_string": "protected AtomicLong openCount = new AtomicLong(0L);", "modifier": "protected", "type": "AtomicLong", "declarator": "openCount = new AtomicLong(0L)", "var_name": "openCount"}, {"original_string": "protected AtomicLong resetMillis = new AtomicLong(15 * 1000L);", "modifier": "protected", "type": "AtomicLong", "declarator": "resetMillis = new AtomicLong(15 * 1000L)", "var_name": "resetMillis"}, {"original_string": "protected Clock clock = new SystemClock();", "modifier": "protected", "type": "Clock", "declarator": "clock = new SystemClock()", "var_name": "clock"}, {"original_string": "protected FailureInterpreter failureInterpreter =\n        new DefaultFailureInterpreter();", "modifier": "protected", "type": "FailureInterpreter", "declarator": "failureInterpreter =\n        new DefaultFailureInterpreter()", "var_name": "failureInterpreter"}, {"original_string": "protected CircuitBreakerExceptionMapper<? extends Exception> exceptionMapper;", "modifier": "protected", "type": "CircuitBreakerExceptionMapper<? extends Exception>", "declarator": "exceptionMapper", "var_name": "exceptionMapper"}, {"original_string": "protected List<CircuitBreakerNotificationCallback> cbNotifyList =\n            Collections.synchronizedList(new ArrayList<CircuitBreakerNotificationCallback>());", "modifier": "protected", "type": "List<CircuitBreakerNotificationCallback>", "declarator": "cbNotifyList =\n            Collections.synchronizedList(new ArrayList<CircuitBreakerNotificationCallback>())", "var_name": "cbNotifyList"}, {"original_string": "private boolean isHardTrip;", "modifier": "private", "type": "boolean", "declarator": "isHardTrip", "var_name": "isHardTrip"}, {"original_string": "protected boolean byPass = false;", "modifier": "protected", "type": "boolean", "declarator": "byPass = false", "var_name": "byPass"}, {"original_string": "protected boolean isAttemptLive = false;", "modifier": "protected", "type": "boolean", "declarator": "isAttemptLive = false", "var_name": "isAttemptLive"}, {"original_string": "private static final String DEFAULT_NAME=\"CircuitBreaker\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_NAME=\"CircuitBreaker\"", "var_name": "DEFAULT_NAME"}, {"original_string": "protected String name = DEFAULT_NAME;", "modifier": "protected", "type": "String", "declarator": "name = DEFAULT_NAME", "var_name": "name"}], "methods": [{"identifier": "getTripException", "parameters": "()", "modifiers": "public", "return": "Throwable", "signature": "Throwable getTripException()", "full_signature": "public Throwable getTripException()", "class_method_signature": "CircuitBreaker.getTripException()", "testcase": false, "constructor": false}, {"identifier": "getTripExceptionAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTripExceptionAsString()", "full_signature": "public String getTripExceptionAsString()", "class_method_signature": "CircuitBreaker.getTripExceptionAsString()", "testcase": false, "constructor": false}, {"identifier": "CircuitBreaker", "parameters": "()", "modifiers": "public", "return": "", "signature": " CircuitBreaker()", "full_signature": "public  CircuitBreaker()", "class_method_signature": "CircuitBreaker.CircuitBreaker()", "testcase": false, "constructor": true}, {"identifier": "CircuitBreaker", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " CircuitBreaker(String name)", "full_signature": "public  CircuitBreaker(String name)", "class_method_signature": "CircuitBreaker.CircuitBreaker(String name)", "testcase": false, "constructor": true}, {"identifier": "CircuitBreaker", "parameters": "(FailureInterpreter fi)", "modifiers": "public", "return": "", "signature": " CircuitBreaker(FailureInterpreter fi)", "full_signature": "public  CircuitBreaker(FailureInterpreter fi)", "class_method_signature": "CircuitBreaker.CircuitBreaker(FailureInterpreter fi)", "testcase": false, "constructor": true}, {"identifier": "CircuitBreaker", "parameters": "(String name, FailureInterpreter fi)", "modifiers": "public", "return": "", "signature": " CircuitBreaker(String name, FailureInterpreter fi)", "full_signature": "public  CircuitBreaker(String name, FailureInterpreter fi)", "class_method_signature": "CircuitBreaker.CircuitBreaker(String name, FailureInterpreter fi)", "testcase": false, "constructor": true}, {"identifier": "CircuitBreaker", "parameters": "(String name, CircuitBreakerExceptionMapper<? extends Exception> mapper)", "modifiers": "public", "return": "", "signature": " CircuitBreaker(String name, CircuitBreakerExceptionMapper<? extends Exception> mapper)", "full_signature": "public  CircuitBreaker(String name, CircuitBreakerExceptionMapper<? extends Exception> mapper)", "class_method_signature": "CircuitBreaker.CircuitBreaker(String name, CircuitBreakerExceptionMapper<? extends Exception> mapper)", "testcase": false, "constructor": true}, {"identifier": "CircuitBreaker", "parameters": "(String name,\n                          FailureInterpreter fi,\n                          CircuitBreakerExceptionMapper<? extends Exception> mapper)", "modifiers": "public", "return": "", "signature": " CircuitBreaker(String name,\n                          FailureInterpreter fi,\n                          CircuitBreakerExceptionMapper<? extends Exception> mapper)", "full_signature": "public  CircuitBreaker(String name,\n                          FailureInterpreter fi,\n                          CircuitBreakerExceptionMapper<? extends Exception> mapper)", "class_method_signature": "CircuitBreaker.CircuitBreaker(String name,\n                          FailureInterpreter fi,\n                          CircuitBreakerExceptionMapper<? extends Exception> mapper)", "testcase": false, "constructor": true}, {"identifier": "setClock", "parameters": "(Clock clock)", "modifiers": "public", "return": "void", "signature": "void setClock(Clock clock)", "full_signature": "public void setClock(Clock clock)", "class_method_signature": "CircuitBreaker.setClock(Clock clock)", "testcase": false, "constructor": false}, {"identifier": "getClock", "parameters": "()", "modifiers": "public", "return": "Clock", "signature": "Clock getClock()", "full_signature": "public Clock getClock()", "class_method_signature": "CircuitBreaker.getClock()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Callable<V> c)", "modifiers": "public", "return": "V", "signature": "V invoke(Callable<V> c)", "full_signature": "public V invoke(Callable<V> c)", "class_method_signature": "CircuitBreaker.invoke(Callable<V> c)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Runnable r)", "modifiers": "public", "return": "void", "signature": "void invoke(Runnable r)", "full_signature": "public void invoke(Runnable r)", "class_method_signature": "CircuitBreaker.invoke(Runnable r)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Runnable r, V result)", "modifiers": "public", "return": "V", "signature": "V invoke(Runnable r, V result)", "full_signature": "public V invoke(Runnable r, V result)", "class_method_signature": "CircuitBreaker.invoke(Runnable r, V result)", "testcase": false, "constructor": false}, {"identifier": "setByPassState", "parameters": "(boolean b)", "modifiers": "public", "return": "void", "signature": "void setByPassState(boolean b)", "full_signature": "public void setByPassState(boolean b)", "class_method_signature": "CircuitBreaker.setByPassState(boolean b)", "testcase": false, "constructor": false}, {"identifier": "getByPassState", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getByPassState()", "full_signature": "public boolean getByPassState()", "class_method_signature": "CircuitBreaker.getByPassState()", "testcase": false, "constructor": false}, {"identifier": "trip", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void trip()", "full_signature": "public void trip()", "class_method_signature": "CircuitBreaker.trip()", "testcase": false, "constructor": false}, {"identifier": "tripHard", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void tripHard()", "full_signature": "public void tripHard()", "class_method_signature": "CircuitBreaker.tripHard()", "testcase": false, "constructor": false}, {"identifier": "getLastTripTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastTripTime()", "full_signature": "public long getLastTripTime()", "class_method_signature": "CircuitBreaker.getLastTripTime()", "testcase": false, "constructor": false}, {"identifier": "getTripCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTripCount()", "full_signature": "public long getTripCount()", "class_method_signature": "CircuitBreaker.getTripCount()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "CircuitBreaker.reset()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "CircuitBreaker.getStatus()", "testcase": false, "constructor": false}, {"identifier": "getServiceStatus", "parameters": "()", "modifiers": "public", "return": "ServiceStatus", "signature": "ServiceStatus getServiceStatus()", "full_signature": "public ServiceStatus getServiceStatus()", "class_method_signature": "CircuitBreaker.getServiceStatus()", "testcase": false, "constructor": false}, {"identifier": "getResetMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getResetMillis()", "full_signature": "public long getResetMillis()", "class_method_signature": "CircuitBreaker.getResetMillis()", "testcase": false, "constructor": false}, {"identifier": "setResetMillis", "parameters": "(long l)", "modifiers": "public", "return": "void", "signature": "void setResetMillis(long l)", "full_signature": "public void setResetMillis(long l)", "class_method_signature": "CircuitBreaker.setResetMillis(long l)", "testcase": false, "constructor": false}, {"identifier": "getHealthCheck", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHealthCheck()", "full_signature": "public String getHealthCheck()", "class_method_signature": "CircuitBreaker.getHealthCheck()", "testcase": false, "constructor": false}, {"identifier": "setLimit", "parameters": "(int limit)", "modifiers": "public", "return": "void", "signature": "void setLimit(int limit)", "full_signature": "public void setLimit(int limit)", "class_method_signature": "CircuitBreaker.setLimit(int limit)", "testcase": false, "constructor": false}, {"identifier": "setIgnore", "parameters": "(Collection<Class<? extends Throwable>> ignore)", "modifiers": "public", "return": "void", "signature": "void setIgnore(Collection<Class<? extends Throwable>> ignore)", "full_signature": "public void setIgnore(Collection<Class<? extends Throwable>> ignore)", "class_method_signature": "CircuitBreaker.setIgnore(Collection<Class<? extends Throwable>> ignore)", "testcase": false, "constructor": false}, {"identifier": "setWindowMillis", "parameters": "(long windowMillis)", "modifiers": "public", "return": "void", "signature": "void setWindowMillis(long windowMillis)", "full_signature": "public void setWindowMillis(long windowMillis)", "class_method_signature": "CircuitBreaker.setWindowMillis(long windowMillis)", "testcase": false, "constructor": false}, {"identifier": "setFailureInterpreter", "parameters": "(FailureInterpreter failureInterpreter)", "modifiers": "public", "return": "void", "signature": "void setFailureInterpreter(FailureInterpreter failureInterpreter)", "full_signature": "public void setFailureInterpreter(FailureInterpreter failureInterpreter)", "class_method_signature": "CircuitBreaker.setFailureInterpreter(FailureInterpreter failureInterpreter)", "testcase": false, "constructor": false}, {"identifier": "getFailureInterpreter", "parameters": "()", "modifiers": "public", "return": "FailureInterpreter", "signature": "FailureInterpreter getFailureInterpreter()", "full_signature": "public FailureInterpreter getFailureInterpreter()", "class_method_signature": "CircuitBreaker.getFailureInterpreter()", "testcase": false, "constructor": false}, {"identifier": "setExceptionMapper", "parameters": "(CircuitBreakerExceptionMapper<? extends Exception> mapper)", "modifiers": "public", "return": "void", "signature": "void setExceptionMapper(CircuitBreakerExceptionMapper<? extends Exception> mapper)", "full_signature": "public void setExceptionMapper(CircuitBreakerExceptionMapper<? extends Exception> mapper)", "class_method_signature": "CircuitBreaker.setExceptionMapper(CircuitBreakerExceptionMapper<? extends Exception> mapper)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(CircuitBreakerNotificationCallback listener)", "modifiers": "public", "return": "void", "signature": "void addListener(CircuitBreakerNotificationCallback listener)", "full_signature": "public void addListener(CircuitBreakerNotificationCallback listener)", "class_method_signature": "CircuitBreaker.addListener(CircuitBreakerNotificationCallback listener)", "testcase": false, "constructor": false}, {"identifier": "setListeners", "parameters": "(ArrayList<CircuitBreakerNotificationCallback> listeners)", "modifiers": "public", "return": "void", "signature": "void setListeners(ArrayList<CircuitBreakerNotificationCallback> listeners)", "full_signature": "public void setListeners(ArrayList<CircuitBreakerNotificationCallback> listeners)", "class_method_signature": "CircuitBreaker.setListeners(ArrayList<CircuitBreakerNotificationCallback> listeners)", "testcase": false, "constructor": false}, {"identifier": "getExceptionMapper", "parameters": "()", "modifiers": "public", "return": "CircuitBreakerExceptionMapper<? extends Exception>", "signature": "CircuitBreakerExceptionMapper<? extends Exception> getExceptionMapper()", "full_signature": "public CircuitBreakerExceptionMapper<? extends Exception> getExceptionMapper()", "class_method_signature": "CircuitBreaker.getExceptionMapper()", "testcase": false, "constructor": false}, {"identifier": "mapException", "parameters": "(CircuitBreakerException cbe)", "modifiers": "protected", "return": "Exception", "signature": "Exception mapException(CircuitBreakerException cbe)", "full_signature": "protected Exception mapException(CircuitBreakerException cbe)", "class_method_signature": "CircuitBreaker.mapException(CircuitBreakerException cbe)", "testcase": false, "constructor": false}, {"identifier": "handleFailure", "parameters": "(Throwable cause)", "modifiers": "protected", "return": "void", "signature": "void handleFailure(Throwable cause)", "full_signature": "protected void handleFailure(Throwable cause)", "class_method_signature": "CircuitBreaker.handleFailure(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void close()", "full_signature": "protected void close()", "class_method_signature": "CircuitBreaker.close()", "testcase": false, "constructor": false}, {"identifier": "canAttempt", "parameters": "()", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean canAttempt()", "full_signature": "private synchronized boolean canAttempt()", "class_method_signature": "CircuitBreaker.canAttempt()", "testcase": false, "constructor": false}, {"identifier": "notifyBreakerStateChange", "parameters": "(Status status)", "modifiers": "private", "return": "void", "signature": "void notifyBreakerStateChange(Status status)", "full_signature": "private void notifyBreakerStateChange(Status status)", "class_method_signature": "CircuitBreaker.notifyBreakerStateChange(Status status)", "testcase": false, "constructor": false}, {"identifier": "allowRequest", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean allowRequest()", "full_signature": "protected boolean allowRequest()", "class_method_signature": "CircuitBreaker.allowRequest()", "testcase": false, "constructor": false}, {"identifier": "getFullStackTrace", "parameters": "(Throwable t)", "modifiers": "private", "return": "String", "signature": "String getFullStackTrace(Throwable t)", "full_signature": "private String getFullStackTrace(Throwable t)", "class_method_signature": "CircuitBreaker.getFullStackTrace(Throwable t)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/CircuitBreaker.java"}, "focal_method": {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "body": "public Status getStatus() {\n        return getServiceStatus().getStatus();\n    }", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "CircuitBreaker.getStatus()", "testcase": false, "constructor": false, "invocations": ["getStatus", "getServiceStatus"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}