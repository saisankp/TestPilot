{"test_class": {"identifier": "ProviderInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderInfoTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() throws Exception {\n\n        ProviderInfo p1 = new ProviderInfo();\n        ProviderInfo p2 = new ProviderInfo();\n\n        Assert.assertEquals(p1, p2);\n\n        List<ProviderInfo> ps = new ArrayList<ProviderInfo>();\n        ps.add(p1);\n        ps.remove(p2);\n        Assert.assertEquals(ps.size(), 0);\n\n        p1.setHost(\"127.0.0.1\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setHost(\"127.0.0.2\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setHost(\"127.0.0.1\");\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setPort(12200);\n        Assert.assertFalse(p1.equals(p2));\n        p2.setPort(12201);\n        Assert.assertFalse(p1.equals(p2));\n        p2.setPort(12200);\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setRpcVersion(4420);\n        Assert.assertFalse(p1.equals(p2));\n        p2.setRpcVersion(4421);\n        Assert.assertFalse(p1.equals(p2));\n        p2.setRpcVersion(4420);\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setProtocolType(\"p1\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setProtocolType(\"p2\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setProtocolType(\"p1\");\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setSerializationType(\"zzz\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setSerializationType(\"yyy\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setSerializationType(\"zzz\");\n        Assert.assertTrue(p1.equals(p2));\n\n        //        p1.setInterfaceId(\"com.xxx\");\n        //        Assert.assertFalse(p1.equals(p2));\n        //        p2.setInterfaceId(\"com.yyy\");\n        //        Assert.assertFalse(p1.equals(p2));\n        //        p2.setInterfaceId(\"com.xxx\");\n        //        Assert.assertTrue(p1.equals(p2));\n        //\n        //        p1.setUniqueId(\"u1\");\n        //        Assert.assertFalse(p1.equals(p2));\n        //        p2.setUniqueId(\"u2\");\n        //        Assert.assertFalse(p1.equals(p2));\n        //        p2.setUniqueId(\"u1\");\n        //        Assert.assertTrue(p1.equals(p2));\n\n        p1.setPath(\"/aaa\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setPath(\"/bbb\");\n        Assert.assertFalse(p1.equals(p2));\n        p2.setPath(\"/aaa\");\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setWeight(200);\n        Assert.assertTrue(p1.equals(p2));\n        p2.setWeight(300);\n        Assert.assertTrue(p1.equals(p2));\n        p2.setWeight(200);\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setDynamicAttr(\"x1\", \"y1\");\n        Assert.assertTrue(p1.equals(p2));\n        p2.setDynamicAttr(\"x1\", \"y1\");\n        Assert.assertTrue(p1.equals(p2));\n        p2.setDynamicAttr(\"x2\", \"y2\");\n        Assert.assertTrue(p1.equals(p2));\n\n        p1.setStaticAttr(\"x1\", \"y1\");\n        Assert.assertTrue(p1.equals(p2));\n        p2.setStaticAttr(\"x1\", \"y1\");\n        Assert.assertTrue(p1.equals(p2));\n        p1.setStaticAttr(\"x2\", \"y2\");\n        Assert.assertTrue(p1.equals(p2));\n        p2.setStaticAttr(\"x2\", \"y2\");\n        Assert.assertTrue(p1.equals(p2));\n\n        ps.add(p1);\n        ps.remove(p2);\n        Assert.assertEquals(ps.size(), 0);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ProviderInfoTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "add", "remove", "assertEquals", "size", "setHost", "assertFalse", "equals", "setHost", "assertFalse", "equals", "setHost", "assertTrue", "equals", "setPort", "assertFalse", "equals", "setPort", "assertFalse", "equals", "setPort", "assertTrue", "equals", "setRpcVersion", "assertFalse", "equals", "setRpcVersion", "assertFalse", "equals", "setRpcVersion", "assertTrue", "equals", "setProtocolType", "assertFalse", "equals", "setProtocolType", "assertFalse", "equals", "setProtocolType", "assertTrue", "equals", "setSerializationType", "assertFalse", "equals", "setSerializationType", "assertFalse", "equals", "setSerializationType", "assertTrue", "equals", "setPath", "assertFalse", "equals", "setPath", "assertFalse", "equals", "setPath", "assertTrue", "equals", "setWeight", "assertTrue", "equals", "setWeight", "assertTrue", "equals", "setWeight", "assertTrue", "equals", "setDynamicAttr", "assertTrue", "equals", "setDynamicAttr", "assertTrue", "equals", "setDynamicAttr", "assertTrue", "equals", "setStaticAttr", "assertTrue", "equals", "setStaticAttr", "assertTrue", "equals", "setStaticAttr", "assertTrue", "equals", "setStaticAttr", "assertTrue", "equals", "add", "remove", "assertEquals", "size"]}, "focal_class": {"identifier": "ProviderInfo", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long                             serialVersionUID = -6438690329875954051L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6438690329875954051L", "var_name": "serialVersionUID"}, {"original_string": "private transient String                              originUrl;", "modifier": "private transient", "type": "String", "declarator": "originUrl", "var_name": "originUrl"}, {"original_string": "private String                                        protocolType     = RpcConfigs\n                                                                               .getStringValue(RpcOptions.DEFAULT_PROTOCOL);", "modifier": "private", "type": "String", "declarator": "protocolType     = RpcConfigs\n                                                                               .getStringValue(RpcOptions.DEFAULT_PROTOCOL)", "var_name": "protocolType"}, {"original_string": "private String                                        host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private int                                           port             = 80;", "modifier": "private", "type": "int", "declarator": "port             = 80", "var_name": "port"}, {"original_string": "private String                                        path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private String                                        serializationType;", "modifier": "private", "type": "String", "declarator": "serializationType", "var_name": "serializationType"}, {"original_string": "private int                                           rpcVersion;", "modifier": "private", "type": "int", "declarator": "rpcVersion", "var_name": "rpcVersion"}, {"original_string": "private transient volatile int                        weight           = RpcConfigs\n                                                                               .getIntValue(RpcOptions.PROVIDER_WEIGHT);", "modifier": "private transient volatile", "type": "int", "declarator": "weight           = RpcConfigs\n                                                                               .getIntValue(RpcOptions.PROVIDER_WEIGHT)", "var_name": "weight"}, {"original_string": "private transient volatile ProviderStatus             status           = ProviderStatus.AVAILABLE;", "modifier": "private transient volatile", "type": "ProviderStatus", "declarator": "status           = ProviderStatus.AVAILABLE", "var_name": "status"}, {"original_string": "private final ConcurrentMap<String, String>           staticAttrs      = new ConcurrentHashMap<String, String>();", "modifier": "private final", "type": "ConcurrentMap<String, String>", "declarator": "staticAttrs      = new ConcurrentHashMap<String, String>()", "var_name": "staticAttrs"}, {"original_string": "private final transient ConcurrentMap<String, Object> dynamicAttrs     = new ConcurrentHashMap<String, Object>();", "modifier": "private final transient", "type": "ConcurrentMap<String, Object>", "declarator": "dynamicAttrs     = new ConcurrentHashMap<String, Object>()", "var_name": "dynamicAttrs"}], "methods": [{"identifier": "ProviderInfo", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProviderInfo()", "full_signature": "public  ProviderInfo()", "class_method_signature": "ProviderInfo.ProviderInfo()", "testcase": false, "constructor": true}, {"identifier": "ProviderInfo", "parameters": "(String host, int port)", "modifiers": "public", "return": "", "signature": " ProviderInfo(String host, int port)", "full_signature": "public  ProviderInfo(String host, int port)", "class_method_signature": "ProviderInfo.ProviderInfo(String host, int port)", "testcase": false, "constructor": true}, {"identifier": "ProviderInfo", "parameters": "(String host, int port, String originUrl)", "modifiers": "public", "return": "", "signature": " ProviderInfo(String host, int port, String originUrl)", "full_signature": "public  ProviderInfo(String host, int port, String originUrl)", "class_method_signature": "ProviderInfo.ProviderInfo(String host, int port, String originUrl)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(String url)", "modifiers": "@Deprecated public static", "return": "ProviderInfo", "signature": "ProviderInfo valueOf(String url)", "full_signature": "@Deprecated public static ProviderInfo valueOf(String url)", "class_method_signature": "ProviderInfo.valueOf(String url)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "()", "modifiers": "@Deprecated public", "return": "String", "signature": "String toUrl()", "full_signature": "@Deprecated public String toUrl()", "class_method_signature": "ProviderInfo.toUrl()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ProviderInfo.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ProviderInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getOriginUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginUrl()", "full_signature": "public String getOriginUrl()", "class_method_signature": "ProviderInfo.getOriginUrl()", "testcase": false, "constructor": false}, {"identifier": "setOriginUrl", "parameters": "(String originUrl)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setOriginUrl(String originUrl)", "full_signature": "public ProviderInfo setOriginUrl(String originUrl)", "class_method_signature": "ProviderInfo.setOriginUrl(String originUrl)", "testcase": false, "constructor": false}, {"identifier": "getProtocolType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProtocolType()", "full_signature": "public String getProtocolType()", "class_method_signature": "ProviderInfo.getProtocolType()", "testcase": false, "constructor": false}, {"identifier": "setProtocolType", "parameters": "(String protocolType)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setProtocolType(String protocolType)", "full_signature": "public ProviderInfo setProtocolType(String protocolType)", "class_method_signature": "ProviderInfo.setProtocolType(String protocolType)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "ProviderInfo.getHost()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(String host)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setHost(String host)", "full_signature": "public ProviderInfo setHost(String host)", "class_method_signature": "ProviderInfo.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "ProviderInfo.getPort()", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setPort(int port)", "full_signature": "public ProviderInfo setPort(int port)", "class_method_signature": "ProviderInfo.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "ProviderInfo.getPath()", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(String path)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setPath(String path)", "full_signature": "public ProviderInfo setPath(String path)", "class_method_signature": "ProviderInfo.setPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getSerializationType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSerializationType()", "full_signature": "public String getSerializationType()", "class_method_signature": "ProviderInfo.getSerializationType()", "testcase": false, "constructor": false}, {"identifier": "setSerializationType", "parameters": "(String serializationType)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setSerializationType(String serializationType)", "full_signature": "public ProviderInfo setSerializationType(String serializationType)", "class_method_signature": "ProviderInfo.setSerializationType(String serializationType)", "testcase": false, "constructor": false}, {"identifier": "getWeight", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWeight()", "full_signature": "public int getWeight()", "class_method_signature": "ProviderInfo.getWeight()", "testcase": false, "constructor": false}, {"identifier": "setWeight", "parameters": "(int weight)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setWeight(int weight)", "full_signature": "public ProviderInfo setWeight(int weight)", "class_method_signature": "ProviderInfo.setWeight(int weight)", "testcase": false, "constructor": false}, {"identifier": "getRpcVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRpcVersion()", "full_signature": "public int getRpcVersion()", "class_method_signature": "ProviderInfo.getRpcVersion()", "testcase": false, "constructor": false}, {"identifier": "setRpcVersion", "parameters": "(int rpcVersion)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setRpcVersion(int rpcVersion)", "full_signature": "public ProviderInfo setRpcVersion(int rpcVersion)", "class_method_signature": "ProviderInfo.setRpcVersion(int rpcVersion)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "ProviderStatus", "signature": "ProviderStatus getStatus()", "full_signature": "public ProviderStatus getStatus()", "class_method_signature": "ProviderInfo.getStatus()", "testcase": false, "constructor": false}, {"identifier": "setStatus", "parameters": "(ProviderStatus status)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setStatus(ProviderStatus status)", "full_signature": "public ProviderInfo setStatus(ProviderStatus status)", "class_method_signature": "ProviderInfo.setStatus(ProviderStatus status)", "testcase": false, "constructor": false}, {"identifier": "getStaticAttrs", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<String, String>", "signature": "ConcurrentMap<String, String> getStaticAttrs()", "full_signature": "public ConcurrentMap<String, String> getStaticAttrs()", "class_method_signature": "ProviderInfo.getStaticAttrs()", "testcase": false, "constructor": false}, {"identifier": "setStaticAttrs", "parameters": "(Map<String, String> staticAttrs)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setStaticAttrs(Map<String, String> staticAttrs)", "full_signature": "public ProviderInfo setStaticAttrs(Map<String, String> staticAttrs)", "class_method_signature": "ProviderInfo.setStaticAttrs(Map<String, String> staticAttrs)", "testcase": false, "constructor": false}, {"identifier": "getDynamicAttrs", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<String, Object>", "signature": "ConcurrentMap<String, Object> getDynamicAttrs()", "full_signature": "public ConcurrentMap<String, Object> getDynamicAttrs()", "class_method_signature": "ProviderInfo.getDynamicAttrs()", "testcase": false, "constructor": false}, {"identifier": "setDynamicAttrs", "parameters": "(Map<String, Object> dynamicAttrs)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setDynamicAttrs(Map<String, Object> dynamicAttrs)", "full_signature": "public ProviderInfo setDynamicAttrs(Map<String, Object> dynamicAttrs)", "class_method_signature": "ProviderInfo.setDynamicAttrs(Map<String, Object> dynamicAttrs)", "testcase": false, "constructor": false}, {"identifier": "getStaticAttr", "parameters": "(String staticAttrKey)", "modifiers": "public", "return": "String", "signature": "String getStaticAttr(String staticAttrKey)", "full_signature": "public String getStaticAttr(String staticAttrKey)", "class_method_signature": "ProviderInfo.getStaticAttr(String staticAttrKey)", "testcase": false, "constructor": false}, {"identifier": "setStaticAttr", "parameters": "(String staticAttrKey, String staticAttrValue)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setStaticAttr(String staticAttrKey, String staticAttrValue)", "full_signature": "public ProviderInfo setStaticAttr(String staticAttrKey, String staticAttrValue)", "class_method_signature": "ProviderInfo.setStaticAttr(String staticAttrKey, String staticAttrValue)", "testcase": false, "constructor": false}, {"identifier": "getDynamicAttr", "parameters": "(String dynamicAttrKey)", "modifiers": "public", "return": "Object", "signature": "Object getDynamicAttr(String dynamicAttrKey)", "full_signature": "public Object getDynamicAttr(String dynamicAttrKey)", "class_method_signature": "ProviderInfo.getDynamicAttr(String dynamicAttrKey)", "testcase": false, "constructor": false}, {"identifier": "setDynamicAttr", "parameters": "(String dynamicAttrKey, Object dynamicAttrValue)", "modifiers": "public", "return": "ProviderInfo", "signature": "ProviderInfo setDynamicAttr(String dynamicAttrKey, Object dynamicAttrValue)", "full_signature": "public ProviderInfo setDynamicAttr(String dynamicAttrKey, Object dynamicAttrValue)", "class_method_signature": "ProviderInfo.setDynamicAttr(String dynamicAttrKey, Object dynamicAttrValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ProviderInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getAttr(String key)", "full_signature": "public String getAttr(String key)", "class_method_signature": "ProviderInfo.getAttr(String key)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/client/ProviderInfo.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        ProviderInfo that = (ProviderInfo) o;\n\n        if (port != that.port) {\n            return false;\n        }\n        if (rpcVersion != that.rpcVersion) {\n            return false;\n        }\n        if (protocolType != null ? !protocolType.equals(that.protocolType) : that.protocolType != null) {\n            return false;\n        }\n        if (host != null ? !host.equals(that.host) : that.host != null) {\n            return false;\n        }\n        if (path != null ? !path.equals(that.path) : that.path != null) {\n            return false;\n        }\n        if (serializationType != null ? !serializationType.equals(that.serializationType)\n            : that.serializationType != null) {\n            return false;\n        }\n        // return staticAttrs != null ? staticAttrs.equals(that.staticAttrs) : that.staticAttrs == null;\n        return true;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ProviderInfo.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}