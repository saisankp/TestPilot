{"test_class": {"identifier": "LotComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger logger = LoggerFactory.getLogger(LotComparatorTest.class);", "modifier": "static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LotComparatorTest.class)", "var_name": "logger"}, {"original_string": "public LotComparator lotComparator = new LotComparator();", "modifier": "public", "type": "LotComparator", "declarator": "lotComparator = new LotComparator()", "var_name": "lotComparator"}], "file": "cadastrapp/src/test/java/org/georchestra/cadastrapp/helper/LotComparatorTest.java"}, "test_case": {"identifier": "testBiggerNbOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBiggerNbOne() {\n\t\t\n\t\tMap<String, Object> lotsInformation1 = new HashMap<String, Object>();\n\t\tlotsInformation1.put(CadastrappConstants.PB_LOT_ID, \"002\");\n\t\t\n\t\tMap<String, Object> lotsInformation2 = new HashMap<String, Object>();\n\t\tlotsInformation2.put(CadastrappConstants.PB_LOT_ID, \"001\");\n\t\t\n\t\tint result = lotComparator.compare(lotsInformation1, lotsInformation2);\n\t\tassertEquals(1, result);\t\t\t\n\t}", "signature": "void testBiggerNbOne()", "full_signature": "@Test public void testBiggerNbOne()", "class_method_signature": "LotComparatorTest.testBiggerNbOne()", "testcase": true, "constructor": false, "invocations": ["put", "put", "compare", "assertEquals"]}, "focal_class": {"identifier": "LotComparator", "superclass": "", "interfaces": "implements Comparator<Map<String, Object>>", "fields": [{"original_string": "private final String numberRegex = \"^[0-9]*$\";", "modifier": "private final", "type": "String", "declarator": "numberRegex = \"^[0-9]*$\"", "var_name": "numberRegex"}, {"original_string": "private final String numberStartRegex = \"^[0-9]\";", "modifier": "private final", "type": "String", "declarator": "numberStartRegex = \"^[0-9]\"", "var_name": "numberStartRegex"}], "methods": [{"identifier": "compare", "parameters": "(Map<String, Object> o1, Map<String, Object> o2)", "modifiers": "public", "return": "int", "signature": "int compare(Map<String, Object> o1, Map<String, Object> o2)", "full_signature": "public int compare(Map<String, Object> o1, Map<String, Object> o2)", "class_method_signature": "LotComparator.compare(Map<String, Object> o1, Map<String, Object> o2)", "testcase": false, "constructor": false}], "file": "cadastrapp/src/main/java/org/georchestra/cadastrapp/helper/LotComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(Map<String, Object> o1, Map<String, Object> o2)", "modifiers": "public", "return": "int", "body": "public int compare(Map<String, Object> o1, Map<String, Object> o2) {\n\t\t\n\t\tint compareValue = 0;\n\t\t\n\t\t// Get dnulot information\n\t\tString dnulot1 = (String)o1.get(CadastrappConstants.PB_LOT_ID);\n\t\tString dnulot2 = (String)o2.get(CadastrappConstants.PB_LOT_ID);\n\t\t\n\t\t// If contains only number\t\t\n\t\tif(dnulot1.matches(numberRegex) && dnulot2.matches(numberRegex)){\n\t\t\tcompareValue = Integer.valueOf(dnulot1).compareTo(Integer.valueOf(dnulot2));\n\t\t}\n\t\t// If both start by number, but finish with char\n\t\telse if(dnulot1.matches(numberStartRegex) && dnulot2.matches(numberStartRegex)){\t\n\t\t\tcompareValue = Integer.valueOf(dnulot1.replaceAll(\"[^\\\\d]\", \"\")).compareTo(Integer.valueOf(dnulot2.replaceAll(\"[^\\\\d]\", \"\")));\n\t\t\t// If same number compare end string value\n\t\t\tif(compareValue == 0){\n\t\t\t\tcompareValue = dnulot1.replaceAll(\"[0-9]\", \"\").compareTo(dnulot2.replaceAll(\"[0-9]\", \"\"));\n\t\t\t}\n\t\t}\n\t\t// If one start with number and the other is char\n\t\telse if(dnulot1.matches(numberStartRegex)){\t\n\t\t\tcompareValue = -1;\n\t\t}\n\t\t// If one is char and the other start by number\n\t\telse if(dnulot2.matches(numberStartRegex)){\t\n\t\t\tcompareValue = 1;\n\t\t}\n\t\t// All other case\n\t\telse{\n\t\t\tcompareValue = dnulot1.compareTo(dnulot2);\n\t\t}\n\t\t\n\t\treturn compareValue;\n\t}", "signature": "int compare(Map<String, Object> o1, Map<String, Object> o2)", "full_signature": "public int compare(Map<String, Object> o1, Map<String, Object> o2)", "class_method_signature": "LotComparator.compare(Map<String, Object> o1, Map<String, Object> o2)", "testcase": false, "constructor": false, "invocations": ["get", "get", "matches", "matches", "compareTo", "valueOf", "valueOf", "matches", "matches", "compareTo", "valueOf", "replaceAll", "valueOf", "replaceAll", "compareTo", "replaceAll", "replaceAll", "matches", "matches", "compareTo"]}, "repository": {"repo_id": 33718145, "url": "https://github.com/georchestra/cadastrapp", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 7, "size": 6139, "license": "licensed"}}