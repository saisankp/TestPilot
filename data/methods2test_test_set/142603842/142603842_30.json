{"test_class": {"identifier": "RoutingConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/routing/RoutingConfigTest.java"}, "test_case": {"identifier": "should_throw_exception_when_url_is_malformed", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void should_throw_exception_when_url_is_malformed() {\n        Path osmFile = Mockito.mock(Path.class);\n        String malformedUrl = \"x+y\";\n        assertThatExceptionOfType(RoutingEngineException.class)\n                .isThrownBy(() -> RoutingConfig.downloadOsmFile(malformedUrl, osmFile))\n                .withMessageContaining(\"malformed\");\n    }", "signature": "void should_throw_exception_when_url_is_malformed()", "full_signature": "@Test void should_throw_exception_when_url_is_malformed()", "class_method_signature": "RoutingConfigTest.should_throw_exception_when_url_is_malformed()", "testcase": true, "constructor": false, "invocations": ["mock", "withMessageContaining", "isThrownBy", "assertThatExceptionOfType", "downloadOsmFile"]}, "focal_class": {"identifier": "RoutingConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoutingConfig.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoutingConfig.class)", "var_name": "logger"}, {"original_string": "private final Path osmDir;", "modifier": "private final", "type": "Path", "declarator": "osmDir", "var_name": "osmDir"}, {"original_string": "private final Path osmFile;", "modifier": "private final", "type": "Path", "declarator": "osmFile", "var_name": "osmFile"}, {"original_string": "private final String osmDownloadUrl;", "modifier": "private final", "type": "String", "declarator": "osmDownloadUrl", "var_name": "osmDownloadUrl"}, {"original_string": "private final Path graphHopperDir;", "modifier": "private final", "type": "Path", "declarator": "graphHopperDir", "var_name": "graphHopperDir"}, {"original_string": "private final Path graphDir;", "modifier": "private final", "type": "Path", "declarator": "graphDir", "var_name": "graphDir"}], "methods": [{"identifier": "RoutingConfig", "parameters": "(RoutingProperties routingProperties)", "modifiers": "@Autowired", "return": "", "signature": " RoutingConfig(RoutingProperties routingProperties)", "full_signature": "@Autowired  RoutingConfig(RoutingProperties routingProperties)", "class_method_signature": "RoutingConfig.RoutingConfig(RoutingProperties routingProperties)", "testcase": false, "constructor": true}, {"identifier": "graphHopper", "parameters": "()", "modifiers": "@Profile(Profiles.NOT_TEST) @Bean @ConditionalOnProperty(prefix = \"app.routing\", name = \"engine\", havingValue = \"graphhopper\", matchIfMissing = true)", "return": "GraphHopperOSM", "signature": "GraphHopperOSM graphHopper()", "full_signature": "@Profile(Profiles.NOT_TEST) @Bean @ConditionalOnProperty(prefix = \"app.routing\", name = \"engine\", havingValue = \"graphhopper\", matchIfMissing = true) GraphHopperOSM graphHopper()", "class_method_signature": "RoutingConfig.graphHopper()", "testcase": false, "constructor": false}, {"identifier": "initDirs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initDirs()", "full_signature": "private void initDirs()", "class_method_signature": "RoutingConfig.initDirs()", "testcase": false, "constructor": false}, {"identifier": "downloadOsmFile", "parameters": "(String urlString, Path osmFile)", "modifiers": "static", "return": "void", "signature": "void downloadOsmFile(String urlString, Path osmFile)", "full_signature": "static void downloadOsmFile(String urlString, Path osmFile)", "class_method_signature": "RoutingConfig.downloadOsmFile(String urlString, Path osmFile)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/routing/RoutingConfig.java"}, "focal_method": {"identifier": "downloadOsmFile", "parameters": "(String urlString, Path osmFile)", "modifiers": "static", "return": "void", "body": "static void downloadOsmFile(String urlString, Path osmFile) {\n        HttpURLConnection con;\n        URL url;\n        try {\n            url = new URL(urlString);\n            con = (HttpURLConnection) url.openConnection();\n        } catch (MalformedURLException e) {\n            throw new RoutingEngineException(\"The OSM file URL is malformed\", e);\n        } catch (IOException e) {\n            throw new RoutingEngineException(\"The OSM file cannot be downloaded\", e);\n        }\n        try {\n            con.setRequestMethod(\"GET\");\n        } catch (ProtocolException e) {\n            throw new IllegalStateException(\"Can't set request method\", e);\n        }\n\n        con.setConnectTimeout(10000);\n        con.setReadTimeout(10000);\n\n        logger.info(\"Downloading OSM file from {}\", urlString);\n        try {\n            Files.copy(con.getInputStream(), osmFile);\n        } catch (IOException e) {\n            throw new RoutingEngineException(\"OSM file download failed\", e);\n        }\n        logger.info(\"File saved to {}\", osmFile);\n    }", "signature": "void downloadOsmFile(String urlString, Path osmFile)", "full_signature": "static void downloadOsmFile(String urlString, Path osmFile)", "class_method_signature": "RoutingConfig.downloadOsmFile(String urlString, Path osmFile)", "testcase": false, "constructor": false, "invocations": ["openConnection", "setRequestMethod", "setConnectTimeout", "setReadTimeout", "info", "copy", "getInputStream", "info"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}