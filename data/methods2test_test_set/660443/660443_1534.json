{"test_class": {"identifier": "HybridizationRatioDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/HybridizationRatioDescriptorTest.java"}, "test_case": {"identifier": "testHybRatioDescriptor3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHybRatioDescriptor3() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"[H]C#N\");\n        Assert.assertEquals(Double.NaN, ((DoubleResult) descriptor.calculate(mol).getValue()).doubleValue(), 0.1);\n    }", "signature": "void testHybRatioDescriptor3()", "full_signature": "@Test public void testHybRatioDescriptor3()", "class_method_signature": "HybridizationRatioDescriptorTest.testHybRatioDescriptor3()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "assertEquals", "doubleValue", "getValue", "calculate"]}, "focal_class": {"identifier": "HybridizationRatioDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [], "methods": [{"identifier": "HybridizationRatioDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " HybridizationRatioDescriptor()", "full_signature": "public  HybridizationRatioDescriptor()", "class_method_signature": "HybridizationRatioDescriptor.HybridizationRatioDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "HybridizationRatioDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "HybridizationRatioDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "HybridizationRatioDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "HybridizationRatioDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "HybridizationRatioDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "HybridizationRatioDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "HybridizationRatioDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "HybridizationRatioDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "HybridizationRatioDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/HybridizationRatioDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        try {\n            IAtomContainer clone = (IAtomContainer) container.clone();\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone);\n            int nsp2 = 0;\n            int nsp3 = 0;\n            for (IAtom atom : clone.atoms()) {\n                if (atom.getAtomicNumber() != IElement.C) continue;\n                if (atom.getHybridization() == Hybridization.SP2)\n                    nsp2++;\n                else if (atom.getHybridization() == Hybridization.SP3) nsp3++;\n            }\n            double ratio = nsp3 / (double) (nsp2 + nsp3);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(),\n                    new DoubleResult(ratio), getDescriptorNames());\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(e);\n        }\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "HybridizationRatioDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["clone", "percieveAtomTypesAndConfigureAtoms", "atoms", "getAtomicNumber", "getHybridization", "getHybridization", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getDummyDescriptorValue", "getDummyDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}