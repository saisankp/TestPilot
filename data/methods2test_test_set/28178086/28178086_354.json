{"test_class": {"identifier": "Chi2Test", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/dstats/Chi2Test.java"}, "test_case": {"identifier": "testRandomsOld", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testRandomsOld() {\n        double s = 0;\n        int N = 1000000;\n        long t0 = System.currentTimeMillis();\n        MersenneTwister rng = MersenneTwister.fromSystemNanoTime();\n        for (int i = 0; i < N; ++i) {\n            s += StochasticRandomizer.chi2(rng, 20);\n        }\n        long t1 = System.currentTimeMillis();\n        System.out.println(\"Old\");\n        System.out.println(t1 - t0);\n        System.out.println(s / N);\n    }", "signature": "void testRandomsOld()", "full_signature": "@Test @Ignore public void testRandomsOld()", "class_method_signature": "Chi2Test.testRandomsOld()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "fromSystemNanoTime", "chi2", "currentTimeMillis", "println", "println", "println"]}, "focal_class": {"identifier": "Chi2", "superclass": "", "interfaces": "implements IContinuousDistribution", "fields": [{"original_string": "public static final String NAME = \"Chi2\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"Chi2\"", "var_name": "NAME"}, {"original_string": "private int df_;", "modifier": "private", "type": "int", "declarator": "df_", "var_name": "df_"}, {"original_string": "private double b, vm, vd, vp;", "modifier": "private", "type": "double", "declarator": "b", "var_name": "b"}], "methods": [{"identifier": "Chi2", "parameters": "()", "modifiers": "@Deprecated public", "return": "", "signature": " Chi2()", "full_signature": "@Deprecated public  Chi2()", "class_method_signature": "Chi2.Chi2()", "testcase": false, "constructor": true}, {"identifier": "Chi2", "parameters": "(final int df)", "modifiers": "public", "return": "", "signature": " Chi2(final int df)", "full_signature": "public  Chi2(final int df)", "class_method_signature": "Chi2.Chi2(final int df)", "testcase": false, "constructor": true}, {"identifier": "getDegreesofFreedom", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDegreesofFreedom()", "full_signature": "public int getDegreesofFreedom()", "class_method_signature": "Chi2.getDegreesofFreedom()", "testcase": false, "constructor": false}, {"identifier": "getDensity", "parameters": "(final double x)", "modifiers": "@Override public", "return": "double", "signature": "double getDensity(final double x)", "full_signature": "@Override public double getDensity(final double x)", "class_method_signature": "Chi2.getDensity(final double x)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "Chi2.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getExpectation", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getExpectation()", "full_signature": "@Override public double getExpectation()", "class_method_signature": "Chi2.getExpectation()", "testcase": false, "constructor": false}, {"identifier": "getLeftBound", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLeftBound()", "full_signature": "@Override public double getLeftBound()", "class_method_signature": "Chi2.getLeftBound()", "testcase": false, "constructor": false}, {"identifier": "getProbability", "parameters": "(final double x, final ProbabilityType pt)", "modifiers": "@Override public", "return": "double", "signature": "double getProbability(final double x, final ProbabilityType pt)", "full_signature": "@Override public double getProbability(final double x, final ProbabilityType pt)", "class_method_signature": "Chi2.getProbability(final double x, final ProbabilityType pt)", "testcase": false, "constructor": false}, {"identifier": "getProbabilityInverse", "parameters": "(double p, final ProbabilityType pt)", "modifiers": "@Override public", "return": "double", "signature": "double getProbabilityInverse(double p, final ProbabilityType pt)", "full_signature": "@Override public double getProbabilityInverse(double p, final ProbabilityType pt)", "class_method_signature": "Chi2.getProbabilityInverse(double p, final ProbabilityType pt)", "testcase": false, "constructor": false}, {"identifier": "getRightBound", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getRightBound()", "full_signature": "@Override public double getRightBound()", "class_method_signature": "Chi2.getRightBound()", "testcase": false, "constructor": false}, {"identifier": "getVariance", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getVariance()", "full_signature": "@Override public double getVariance()", "class_method_signature": "Chi2.getVariance()", "testcase": false, "constructor": false}, {"identifier": "hasLeftBound", "parameters": "()", "modifiers": "@Override public", "return": "BoundaryType", "signature": "BoundaryType hasLeftBound()", "full_signature": "@Override public BoundaryType hasLeftBound()", "class_method_signature": "Chi2.hasLeftBound()", "testcase": false, "constructor": false}, {"identifier": "hasRightBound", "parameters": "()", "modifiers": "@Override public", "return": "BoundaryType", "signature": "BoundaryType hasRightBound()", "full_signature": "@Override public BoundaryType hasRightBound()", "class_method_signature": "Chi2.hasRightBound()", "testcase": false, "constructor": false}, {"identifier": "isSymmetrical", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSymmetrical()", "full_signature": "@Override public boolean isSymmetrical()", "class_method_signature": "Chi2.isSymmetrical()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(IRandomNumberGenerator rng)", "modifiers": "@Override /** * REFERENCE : - J.F. Monahan (1987): An algorithm for * generating chi * random variables, ACM Trans. * Math. Software 13, 168-172. * Based on \"cern.jet.random.ChiSquare\", from the Colt library * Copyright (c) 1999 CERN - European Organization for Nuclear Research. */ public", "return": "double", "signature": "double random(IRandomNumberGenerator rng)", "full_signature": "@Override /** * REFERENCE : - J.F. Monahan (1987): An algorithm for * generating chi * random variables, ACM Trans. * Math. Software 13, 168-172. * Based on \"cern.jet.random.ChiSquare\", from the Colt library * Copyright (c) 1999 CERN - European Organization for Nuclear Research. */ public double random(IRandomNumberGenerator rng)", "class_method_signature": "Chi2.random(IRandomNumberGenerator rng)", "testcase": false, "constructor": false}, {"identifier": "setDegreesofFreedom", "parameters": "(final int df)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setDegreesofFreedom(final int df)", "full_signature": "@Deprecated public void setDegreesofFreedom(final int df)", "class_method_signature": "Chi2.setDegreesofFreedom(final int df)", "testcase": false, "constructor": false}, {"identifier": "fillHelpers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fillHelpers()", "full_signature": "private void fillHelpers()", "class_method_signature": "Chi2.fillHelpers()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Chi2.toString()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/dstats/Chi2.java"}, "focal_method": {"identifier": "Chi2", "parameters": "()", "modifiers": "@Deprecated public", "return": "", "body": "@Deprecated\n    public Chi2() {\n        df_ = 2;\n        fillHelpers();\n    }", "signature": " Chi2()", "full_signature": "@Deprecated public  Chi2()", "class_method_signature": "Chi2.Chi2()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}