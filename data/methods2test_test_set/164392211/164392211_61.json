{"test_class": {"identifier": "SeriesGroupByTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/SeriesGroupByTest.java"}, "test_case": {"identifier": "testToSeries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToSeries() {\n        SeriesGroupBy<String> gb = Series.forData(\"a\", \"b\", \"cd\", \"e\", \"fg\")\n                .group((String s) -> s.length());\n\n        new SeriesAsserts(gb.toSeries()).expectData(\"a\", \"b\", \"e\", \"cd\", \"fg\");\n    }", "signature": "void testToSeries()", "full_signature": "@Test public void testToSeries()", "class_method_signature": "SeriesGroupByTest.testToSeries()", "testcase": true, "constructor": false, "invocations": ["group", "forData", "length", "expectData", "toSeries"]}, "focal_class": {"identifier": "SeriesGroupBy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Series<T> ungrouped;", "modifier": "private", "type": "Series<T>", "declarator": "ungrouped", "var_name": "ungrouped"}, {"original_string": "private Map<Object, IntSeries> groupsIndex;", "modifier": "private", "type": "Map<Object, IntSeries>", "declarator": "groupsIndex", "var_name": "groupsIndex"}, {"original_string": "private Map<Object, Series<T>> resolvedGroups;", "modifier": "private", "type": "Map<Object, Series<T>>", "declarator": "resolvedGroups", "var_name": "resolvedGroups"}], "methods": [{"identifier": "SeriesGroupBy", "parameters": "(Series<T> ungrouped, Map<Object, IntSeries> groupsIndex)", "modifiers": "public", "return": "", "signature": " SeriesGroupBy(Series<T> ungrouped, Map<Object, IntSeries> groupsIndex)", "full_signature": "public  SeriesGroupBy(Series<T> ungrouped, Map<Object, IntSeries> groupsIndex)", "class_method_signature": "SeriesGroupBy.SeriesGroupBy(Series<T> ungrouped, Map<Object, IntSeries> groupsIndex)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SeriesGroupBy.size()", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "public", "return": "Collection<Object>", "signature": "Collection<Object> getGroups()", "full_signature": "public Collection<Object> getGroups()", "class_method_signature": "SeriesGroupBy.getGroups()", "testcase": false, "constructor": false}, {"identifier": "hasGroup", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasGroup(Object key)", "full_signature": "public boolean hasGroup(Object key)", "class_method_signature": "SeriesGroupBy.hasGroup(Object key)", "testcase": false, "constructor": false}, {"identifier": "getGroupIndex", "parameters": "(Object key)", "modifiers": "public", "return": "IntSeries", "signature": "IntSeries getGroupIndex(Object key)", "full_signature": "public IntSeries getGroupIndex(Object key)", "class_method_signature": "SeriesGroupBy.getGroupIndex(Object key)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(Object key)", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> getGroup(Object key)", "full_signature": "public Series<T> getGroup(Object key)", "class_method_signature": "SeriesGroupBy.getGroup(Object key)", "testcase": false, "constructor": false}, {"identifier": "toSeries", "parameters": "()", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> toSeries()", "full_signature": "public Series<T> toSeries()", "class_method_signature": "SeriesGroupBy.toSeries()", "testcase": false, "constructor": false}, {"identifier": "agg", "parameters": "(SeriesAggregator<? super T, R> aggregator)", "modifiers": "public", "return": "Series<R>", "signature": "Series<R> agg(SeriesAggregator<? super T, R> aggregator)", "full_signature": "public Series<R> agg(SeriesAggregator<? super T, R> aggregator)", "class_method_signature": "SeriesGroupBy.agg(SeriesAggregator<? super T, R> aggregator)", "testcase": false, "constructor": false}, {"identifier": "aggMultiple", "parameters": "(SeriesAggregator<? super T, ?>... aggregators)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame aggMultiple(SeriesAggregator<? super T, ?>... aggregators)", "full_signature": "public DataFrame aggMultiple(SeriesAggregator<? super T, ?>... aggregators)", "class_method_signature": "SeriesGroupBy.aggMultiple(SeriesAggregator<? super T, ?>... aggregators)", "testcase": false, "constructor": false}, {"identifier": "resolveGroup", "parameters": "(Object key)", "modifiers": "protected", "return": "Series<T>", "signature": "Series<T> resolveGroup(Object key)", "full_signature": "protected Series<T> resolveGroup(Object key)", "class_method_signature": "SeriesGroupBy.resolveGroup(Object key)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/SeriesGroupBy.java"}, "focal_method": {"identifier": "toSeries", "parameters": "()", "modifiers": "public", "return": "Series<T>", "body": "public Series<T> toSeries() {\n        IntSeries index = SeriesConcat.intConcat(groupsIndex.values());\n\n        // this should hopefully preserve the nature of any primitive-based Series\n        return ungrouped.select(index);\n    }", "signature": "Series<T> toSeries()", "full_signature": "public Series<T> toSeries()", "class_method_signature": "SeriesGroupBy.toSeries()", "testcase": false, "constructor": false, "invocations": ["intConcat", "values", "select"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}