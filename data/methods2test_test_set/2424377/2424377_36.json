{"test_class": {"identifier": "AttrsTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/attrs/AttrsTest.java"}, "test_case": {"identifier": "testCustomDictionary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCustomDictionary() {\n    class Entry implements AcceptingVisitor {\n      String match;\n      String[] tokens;\n\n      @Override\n      public void accept(AttrVisitor visitor) {\n        AttrString a1 = AttrString.builder().defaultValue(match);\n        visitor.visit(\"match\", a1);\n        this.match = a1.get();\n\n        AttrStringArray a2 = AttrStringArray.builder().defaultValue(tokens);\n        visitor.visit(\"tokens\", a2);\n        tokens = a2.get();\n      }\n    }\n\n    class AdHocDict extends AttrComposite {\n      List<Entry> entries;\n\n      {\n        attributes.register(\n            \"entries\",\n            AttrObjectArray.builder(Entry.class, () -> new Entry())\n                .getset(() -> entries, (list) -> entries = list)\n                .defaultValue(null));\n      }\n    }\n\n    class Clazz extends AttrComposite {\n      AdHocDict adHocDict = new AdHocDict();\n\n      {\n        attributes.register(\n            \"adhoc\",\n            AttrObject.builder(AdHocDict.class)\n                .getset(() -> adHocDict, (v) -> adHocDict = v)\n                .defaultValue(() -> new AdHocDict()));\n      }\n    }\n\n    Entry entry = new Entry();\n    entry.match = \"e\";\n    entry.tokens = new String[] {\"foo\", \"bar\"};\n\n    Clazz ob = new Clazz();\n    ob.adHocDict.entries = Arrays.asList(entry, entry);\n    System.out.println(Attrs.toJson(ob, JvmNameMapper.INSTANCE));\n  }", "signature": "void testCustomDictionary()", "full_signature": "@Test public void testCustomDictionary()", "class_method_signature": "AttrsTest.testCustomDictionary()", "testcase": true, "constructor": false, "invocations": ["defaultValue", "builder", "visit", "get", "defaultValue", "builder", "visit", "get", "register", "defaultValue", "getset", "builder", "register", "defaultValue", "getset", "builder", "asList", "println", "toJson"]}, "focal_class": {"identifier": "Attrs", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEY_WRAPPED = \"@value\";", "modifier": "private static final", "type": "String", "declarator": "KEY_WRAPPED = \"@value\"", "var_name": "KEY_WRAPPED"}, {"original_string": "static final String KEY_TYPE = \"@type\";", "modifier": "static final", "type": "String", "declarator": "KEY_TYPE = \"@type\"", "var_name": "KEY_TYPE"}], "methods": [{"identifier": "toMap", "parameters": "(AcceptingVisitor composite)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(AcceptingVisitor composite)", "full_signature": "public static Map<String, Object> toMap(AcceptingVisitor composite)", "class_method_signature": "Attrs.toMap(AcceptingVisitor composite)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "full_signature": "public static Map<String, Object> toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "class_method_signature": "Attrs.toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(\n      Class<? extends E> clazz, Map<String, Object> map)", "modifiers": "public static", "return": "E", "signature": "E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "full_signature": "public static E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "class_method_signature": "Attrs.fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "modifiers": "public static", "return": "E", "signature": "E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "full_signature": "public static E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "class_method_signature": "Attrs.fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "full_signature": "public static Map<String, Object> extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "class_method_signature": "Attrs.extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(AcceptingVisitor instance)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> extract(AcceptingVisitor instance)", "full_signature": "public static Map<String, Object> extract(AcceptingVisitor instance)", "class_method_signature": "Attrs.extract(AcceptingVisitor instance)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(E instance, Map<String, Object> map)", "modifiers": "public static", "return": "E", "signature": "E populate(E instance, Map<String, Object> map)", "full_signature": "public static E populate(E instance, Map<String, Object> map)", "class_method_signature": "Attrs.populate(E instance, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "modifiers": "public static", "return": "E", "signature": "E populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "full_signature": "public static E populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "class_method_signature": "Attrs.populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "modifiers": "public static", "return": "String", "signature": "String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "full_signature": "public static String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "class_method_signature": "Attrs.toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(AcceptingVisitor composite, Function<Object, String> classToName)", "modifiers": "public static", "return": "String", "signature": "String toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "full_signature": "public static String toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "class_method_signature": "Attrs.toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "safeCast", "parameters": "(Object value, String key, Class<T> clazz)", "modifiers": "static", "return": "T", "signature": "T safeCast(Object value, String key, Class<T> clazz)", "full_signature": "static T safeCast(Object value, String key, Class<T> clazz)", "class_method_signature": "Attrs.safeCast(Object value, String key, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "toDebugString", "parameters": "(Object value)", "modifiers": "static", "return": "String", "signature": "String toDebugString(Object value)", "full_signature": "static String toDebugString(Object value)", "class_method_signature": "Attrs.toDebugString(Object value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/attrs/Attrs.java"}, "focal_method": {"identifier": "toJson", "parameters": "(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "modifiers": "public static", "return": "String", "body": "public static String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper) {\n    return toJson(composite, classNameMapper::toName);\n  }", "signature": "String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "full_signature": "public static String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "class_method_signature": "Attrs.toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "testcase": false, "constructor": false, "invocations": ["toJson"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}