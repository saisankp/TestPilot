{"test_class": {"identifier": "ImageDownloadTaskManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImageDownloadTaskManager subject;", "modifier": "private", "type": "ImageDownloadTaskManager", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock private TaskManagerListener<DownloadResponse> mMockImageTaskManagerListener;", "modifier": "@Mock private", "type": "TaskManagerListener<DownloadResponse>", "declarator": "mMockImageTaskManagerListener", "var_name": "mMockImageTaskManagerListener"}, {"original_string": "private Semaphore semaphore;", "modifier": "private", "type": "Semaphore", "declarator": "semaphore", "var_name": "semaphore"}, {"original_string": "private Map<String, DownloadResponse> networkImages;", "modifier": "private", "type": "Map<String, DownloadResponse>", "declarator": "networkImages", "var_name": "networkImages"}, {"original_string": "private int testMaxWidth;", "modifier": "private", "type": "int", "declarator": "testMaxWidth", "var_name": "testMaxWidth"}, {"original_string": "private FakeHttpLayer fakeHttpLayer;", "modifier": "private", "type": "FakeHttpLayer", "declarator": "fakeHttpLayer", "var_name": "fakeHttpLayer"}, {"original_string": "private String url1;", "modifier": "private", "type": "String", "declarator": "url1", "var_name": "url1"}, {"original_string": "private String url2;", "modifier": "private", "type": "String", "declarator": "url2", "var_name": "url2"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java"}, "test_case": {"identifier": "execute_withSingleNon200Response_shouldFailAllTasks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void execute_withSingleNon200Response_shouldFailAllTasks() throws Exception {\n        subject = new ImageDownloadTaskManager(\n                Arrays.asList(url1, url1, url1, url1, url1),\n                mMockImageTaskManagerListener,\n                testMaxWidth\n        );\n\n        fakeHttpLayer.addPendingHttpResponse(200, \"\");\n        fakeHttpLayer.addPendingHttpResponse(200, \"\");\n        fakeHttpLayer.addPendingHttpResponse(200, \"\");\n        fakeHttpLayer.addPendingHttpResponse(200, \"\");\n        fakeHttpLayer.addPendingHttpResponse(599, \"\");\n\n        subject.execute();\n        semaphore.acquire();\n\n        verify(mMockImageTaskManagerListener, never()).onSuccess(anyMap());\n        verify(mMockImageTaskManagerListener).onFail();\n    }", "signature": "void execute_withSingleNon200Response_shouldFailAllTasks()", "full_signature": "@Test public void execute_withSingleNon200Response_shouldFailAllTasks()", "class_method_signature": "ImageDownloadTaskManagerTest.execute_withSingleNon200Response_shouldFailAllTasks()", "testcase": true, "constructor": false, "invocations": ["asList", "addPendingHttpResponse", "addPendingHttpResponse", "addPendingHttpResponse", "addPendingHttpResponse", "addPendingHttpResponse", "execute", "acquire", "onSuccess", "verify", "never", "anyMap", "onFail", "verify"]}, "focal_class": {"identifier": "ImageDownloadTaskManager", "superclass": "extends TaskManager<DownloadResponse>", "interfaces": "", "fields": [{"original_string": "@NonNull private final Map<HttpUriRequest, DownloadTask> mDownloadTasks;", "modifier": "@NonNull private final", "type": "Map<HttpUriRequest, DownloadTask>", "declarator": "mDownloadTasks", "var_name": "mDownloadTasks"}, {"original_string": "private final int mRequestedWidth;", "modifier": "private final", "type": "int", "declarator": "mRequestedWidth", "var_name": "mRequestedWidth"}], "methods": [{"identifier": "ImageDownloadTaskManager", "parameters": "(@NonNull final List<String> urls,\n                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,\n                             final int requestedWidth)", "modifiers": "", "return": "", "signature": " ImageDownloadTaskManager(@NonNull final List<String> urls,\n                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,\n                             final int requestedWidth)", "full_signature": "  ImageDownloadTaskManager(@NonNull final List<String> urls,\n                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,\n                             final int requestedWidth)", "class_method_signature": "ImageDownloadTaskManager.ImageDownloadTaskManager(@NonNull final List<String> urls,\n                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,\n                             final int requestedWidth)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override", "return": "void", "signature": "void execute()", "full_signature": "@Override void execute()", "class_method_signature": "ImageDownloadTaskManager.execute()", "testcase": false, "constructor": false}, {"identifier": "failAllTasks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void failAllTasks()", "full_signature": " void failAllTasks()", "class_method_signature": "ImageDownloadTaskManager.failAllTasks()", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override", "return": "void", "body": "@Override\n    void execute() {\n        if (mDownloadTasks.isEmpty()) {\n            mImageTaskManagerListener.onSuccess(mResults);\n        }\n\n        for (final Entry<HttpUriRequest, DownloadTask> entry : mDownloadTasks.entrySet()) {\n            final HttpUriRequest httpUriRequest = entry.getKey();\n            final DownloadTask downloadTask = entry.getValue();\n\n            try {\n                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);\n            } catch (Exception e) {\n                MoPubLog.d(\"Failed to download image\", e);\n\n                mImageTaskManagerListener.onFail();\n            }\n        }\n    }", "signature": "void execute()", "full_signature": "@Override void execute()", "class_method_signature": "ImageDownloadTaskManager.execute()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "onSuccess", "entrySet", "getKey", "getValue", "safeExecuteOnExecutor", "d", "onFail"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}