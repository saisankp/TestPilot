{"test_class": {"identifier": "ChiSqSelectorBatchOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/batch/feature/ChiSqSelectorBatchOpTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception {\n        Row[] testArray =\n            new Row[]{\n                Row.of(\"a\", 1L, 1, 2.0, true),\n                Row.of(null, 2L, 2, -3.0, true),\n                Row.of(\"c\", null, null, 2.0, false),\n                Row.of(\"a\", 0L, 0, null, null),\n            };\n\n        String[] colNames = new String[]{\"f_string\", \"f_long\", \"f_int\", \"f_double\", \"f_boolean\"};\n\n        MemSourceBatchOp data = new MemSourceBatchOp(Arrays.asList(testArray), colNames);\n\n        ChiSqSelectorBatchOp selector = new ChiSqSelectorBatchOp()\n            .setSelectedCols(new String[]{\"f_string\", \"f_long\", \"f_int\", \"f_double\"})\n            .setLabelCol(\"f_boolean\")\n            .setNumTopFeatures(2);\n\n        selector.linkFrom(data);\n\n        selector.lazyPrintModelInfo();\n\n        selector.lazyCollectModelInfo(\n            new Consumer<ChisqSelectorModelInfo>() {\n                @Override\n                public void accept(ChisqSelectorModelInfo chisqSelectorSummary) {\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"f_long\"), 8.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"f_int\"), 8.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"f_string\"), 5.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"f_double\"), 5.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.pValue(\"f_double\"), 0.2872974951836462, 10e-10);\n                 }\n            }\n        );\n\n        BatchOperator.execute();\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ChiSqSelectorBatchOpTest.test()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "asList", "setNumTopFeatures", "setLabelCol", "setSelectedCols", "linkFrom", "lazyPrintModelInfo", "lazyCollectModelInfo", "assertEquals", "chisq", "assertEquals", "chisq", "assertEquals", "chisq", "assertEquals", "chisq", "assertEquals", "pValue", "execute"]}, "focal_class": {"identifier": "ChiSqSelectorBatchOp", "superclass": "extends BatchOperator<ChiSqSelectorBatchOp>", "interfaces": "implements ChiSqSelectorParams<ChiSqSelectorBatchOp>,\n    WithModelInfoBatchOp<ChisqSelectorModelInfo, ChiSqSelectorBatchOp, ChisqSelectorModelInfoBatchOp>", "fields": [{"original_string": "private static final long serialVersionUID = 942267749590810559L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 942267749590810559L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ChiSqSelectorBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChiSqSelectorBatchOp()", "full_signature": "public  ChiSqSelectorBatchOp()", "class_method_signature": "ChiSqSelectorBatchOp.ChiSqSelectorBatchOp()", "testcase": false, "constructor": true}, {"identifier": "ChiSqSelectorBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " ChiSqSelectorBatchOp(Params params)", "full_signature": "public  ChiSqSelectorBatchOp(Params params)", "class_method_signature": "ChiSqSelectorBatchOp.ChiSqSelectorBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "ChiSqSelectorBatchOp", "signature": "ChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public ChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "ChiSqSelectorBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}, {"identifier": "getModelInfoBatchOp", "parameters": "()", "modifiers": "@Override public", "return": "ChisqSelectorModelInfoBatchOp", "signature": "ChisqSelectorModelInfoBatchOp getModelInfoBatchOp()", "full_signature": "@Override public ChisqSelectorModelInfoBatchOp getModelInfoBatchOp()", "class_method_signature": "ChiSqSelectorBatchOp.getModelInfoBatchOp()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/feature/ChiSqSelectorBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "ChiSqSelectorBatchOp", "body": "@Override\n    public ChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs) {\n        BatchOperator<?> in = checkAndGetFirst(inputs);\n        String[] selectedColNames = getSelectedCols();\n        String labelColName = getLabelCol();\n\n        SelectorType selectorType = getParams().get(SELECTOR_TYPE);\n        int numTopFeatures = getParams().get(NUM_TOP_FEATURES);\n        double percentile = getParams().get(PERCENTILE);\n        double fpr = getParams().get(FPR);\n        double fdr = getParams().get(FDR);\n        double fwe = getParams().get(FWE);\n\n        DataSet<Row> chiSquareTest =\n            ChiSquareTestUtil.test(in, selectedColNames, labelColName);\n\n        DataSet<Row> model = chiSquareTest.mapPartition(\n            new ChisqSelectorUtil.ChiSquareSelector(selectedColNames, selectorType, numTopFeatures, percentile, fpr, fdr, fwe))\n            .name(\"FilterFeature\")\n            .setParallelism(1);\n\n        setOutputTable(DataSetConversionUtil.toTable(in.getMLEnvironmentId(), model, new ChiSqSelectorModelDataConverter().getModelSchema()));\n\n        return this;\n    }", "signature": "ChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public ChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "ChiSqSelectorBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "getSelectedCols", "getLabelCol", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "test", "setParallelism", "name", "mapPartition", "setOutputTable", "toTable", "getMLEnvironmentId", "getModelSchema"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}