{"test_class": {"identifier": "KStreamMapValuesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "final private Serde<Integer> intSerde = Serdes.Integer();", "modifier": "final private", "type": "Serde<Integer>", "declarator": "intSerde = Serdes.Integer()", "var_name": "intSerde"}, {"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "private KStreamTestDriver driver;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamMapValuesTest.java"}, "test_case": {"identifier": "testFlatMapValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMapValues() {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        ValueMapper<String, Integer> mapper =\n            new ValueMapper<String, Integer>() {\n                @Override\n                public Integer apply(String value) {\n                    return value.length();\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(intSerde, stringSerde, topicName);\n        stream.mapValues(mapper).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], Integer.toString(expectedKeys[i]));\n        }\n\n        assertEquals(4, processor.processed.size());\n\n        String[] expected = {\"1:1\", \"10:2\", \"100:3\", \"1000:4\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }", "signature": "void testFlatMapValues()", "full_signature": "@Test public void testFlatMapValues()", "class_method_signature": "KStreamMapValuesTest.testFlatMapValues()", "testcase": true, "constructor": false, "invocations": ["length", "stream", "process", "mapValues", "process", "toString", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "KStreamMapValues", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final ValueMapper<V, V1> mapper;", "modifier": "private final", "type": "ValueMapper<V, V1>", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "KStreamMapValues", "parameters": "(ValueMapper<V, V1> mapper)", "modifiers": "public", "return": "", "signature": " KStreamMapValues(ValueMapper<V, V1> mapper)", "full_signature": "public  KStreamMapValues(ValueMapper<V, V1> mapper)", "class_method_signature": "KStreamMapValues.KStreamMapValues(ValueMapper<V, V1> mapper)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamMapValues.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamMapValues.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return new KStreamMapProcessor();\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamMapValues.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}