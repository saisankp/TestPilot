{"test_class": {"identifier": "AbstractMessageServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "Week3/Day2/src/test/java/service/AbstractMessageServiceTest.java"}, "test_case": {"identifier": "mockUnitTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void mockUnitTest() {\n\t\tMessageService messageService = mock(MessageService.class);\n\t\t// when(messageService.generateMessage(\"Luke\")).thenReturn(\"Foo!\");\n\t\twhen(messageService.generateMessage(anyString())).thenReturn(\"Foo!\");\n\n\t\tGreetingClient client = new GreetingClient(messageService);\n\n\t\tassertEquals(\"FOO!\", client.greetUser(\"doesn't matter\"));\n\n\t\t// Optionally verify how mock was used.\n\t\t// verify(messageService).generateMessage(\"doesn't matter\");\n\t}", "signature": "void mockUnitTest()", "full_signature": "@Test public void mockUnitTest()", "class_method_signature": "AbstractMessageServiceTest.mockUnitTest()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "generateMessage", "anyString", "assertEquals", "greetUser"]}, "focal_class": {"identifier": "AbstractMessageService", "superclass": "", "interfaces": "implements MessageService", "fields": [], "methods": [{"identifier": "generateMessage", "parameters": "(String name)", "modifiers": "@Override public final", "return": "String", "signature": "String generateMessage(String name)", "full_signature": "@Override public final String generateMessage(String name)", "class_method_signature": "AbstractMessageService.generateMessage(String name)", "testcase": false, "constructor": false}, {"identifier": "getHelloText", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getHelloText()", "full_signature": "protected abstract String getHelloText()", "class_method_signature": "AbstractMessageService.getHelloText()", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getTemplate()", "full_signature": "protected String getTemplate()", "class_method_signature": "AbstractMessageService.getTemplate()", "testcase": false, "constructor": false}], "file": "Week3/Day2/src/main/java/service/AbstractMessageService.java"}, "focal_method": {"identifier": "generateMessage", "parameters": "(String name)", "modifiers": "@Override public final", "return": "String", "body": "@Override\n\tpublic final String generateMessage(String name) {\n\t\treturn String.format(getTemplate(),  getHelloText(), name);\n\t}", "signature": "String generateMessage(String name)", "full_signature": "@Override public final String generateMessage(String name)", "class_method_signature": "AbstractMessageService.generateMessage(String name)", "testcase": false, "constructor": false, "invocations": ["format", "getTemplate", "getHelloText"]}, "repository": {"repo_id": 83988988, "url": "https://github.com/fderisio/Propulsion-Academy", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 18119, "license": "licensed"}}