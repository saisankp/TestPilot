{"test_class": {"identifier": "NIOServerCnxnTest", "superclass": "extends ClientBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory\n                        .getLogger(NIOServerCnxnTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n                        .getLogger(NIOServerCnxnTest.class)", "var_name": "LOG"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java"}, "test_case": {"identifier": "testClientResponseStatsUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater then zero after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n        }\n    }", "signature": "void testClientResponseStatsUpdate()", "full_signature": "@Test public void testClientResponseStatsUpdate()", "class_method_signature": "NIOServerCnxnTest.testClientResponseStatsUpdate()", "testcase": true, "constructor": false, "invocations": ["createClient", "getClientResponseStats", "serverStats", "getZooKeeperServer", "assertThat", "getLastBufferSize", "equalTo", "create", "getBytes", "assertThat", "getLastBufferSize", "greaterThan"]}, "focal_class": {"identifier": "NIOServerCnxn", "superclass": "extends ServerCnxn", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NIOServerCnxn.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NIOServerCnxn.class)", "var_name": "LOG"}, {"original_string": "private final NIOServerCnxnFactory factory;", "modifier": "private final", "type": "NIOServerCnxnFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final SocketChannel sock;", "modifier": "private final", "type": "SocketChannel", "declarator": "sock", "var_name": "sock"}, {"original_string": "private final SelectorThread selectorThread;", "modifier": "private final", "type": "SelectorThread", "declarator": "selectorThread", "var_name": "selectorThread"}, {"original_string": "private final SelectionKey sk;", "modifier": "private final", "type": "SelectionKey", "declarator": "sk", "var_name": "sk"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private final ByteBuffer lenBuffer = ByteBuffer.allocate(4);", "modifier": "private final", "type": "ByteBuffer", "declarator": "lenBuffer = ByteBuffer.allocate(4)", "var_name": "lenBuffer"}, {"original_string": "private ByteBuffer incomingBuffer = lenBuffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "incomingBuffer = lenBuffer", "var_name": "incomingBuffer"}, {"original_string": "private final Queue<ByteBuffer> outgoingBuffers =\n        new LinkedBlockingQueue<ByteBuffer>();", "modifier": "private final", "type": "Queue<ByteBuffer>", "declarator": "outgoingBuffers =\n        new LinkedBlockingQueue<ByteBuffer>()", "var_name": "outgoingBuffers"}, {"original_string": "private int sessionTimeout;", "modifier": "private", "type": "int", "declarator": "sessionTimeout", "var_name": "sessionTimeout"}, {"original_string": "private final ZooKeeperServer zkServer;", "modifier": "private final", "type": "ZooKeeperServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private final AtomicInteger outstandingRequests = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "outstandingRequests = new AtomicInteger(0)", "var_name": "outstandingRequests"}, {"original_string": "private long sessionId;", "modifier": "private", "type": "long", "declarator": "sessionId", "var_name": "sessionId"}, {"original_string": "private final int outstandingLimit;", "modifier": "private final", "type": "int", "declarator": "outstandingLimit", "var_name": "outstandingLimit"}, {"original_string": "private final AtomicBoolean selectable = new AtomicBoolean(true);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "selectable = new AtomicBoolean(true)", "var_name": "selectable"}, {"original_string": "private final AtomicBoolean throttled = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "throttled = new AtomicBoolean(false)", "var_name": "throttled"}], "methods": [{"identifier": "NIOServerCnxn", "parameters": "(ZooKeeperServer zk, SocketChannel sock,\n                         SelectionKey sk, NIOServerCnxnFactory factory,\n                         SelectorThread selectorThread)", "modifiers": "public", "return": "", "signature": " NIOServerCnxn(ZooKeeperServer zk, SocketChannel sock,\n                         SelectionKey sk, NIOServerCnxnFactory factory,\n                         SelectorThread selectorThread)", "full_signature": "public  NIOServerCnxn(ZooKeeperServer zk, SocketChannel sock,\n                         SelectionKey sk, NIOServerCnxnFactory factory,\n                         SelectorThread selectorThread)", "class_method_signature": "NIOServerCnxn.NIOServerCnxn(ZooKeeperServer zk, SocketChannel sock,\n                         SelectionKey sk, NIOServerCnxnFactory factory,\n                         SelectorThread selectorThread)", "testcase": false, "constructor": true}, {"identifier": "sendCloseSession", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendCloseSession()", "full_signature": "public void sendCloseSession()", "class_method_signature": "NIOServerCnxn.sendCloseSession()", "testcase": false, "constructor": false}, {"identifier": "sendBufferSync", "parameters": "(ByteBuffer bb)", "modifiers": "", "return": "void", "signature": "void sendBufferSync(ByteBuffer bb)", "full_signature": " void sendBufferSync(ByteBuffer bb)", "class_method_signature": "NIOServerCnxn.sendBufferSync(ByteBuffer bb)", "testcase": false, "constructor": false}, {"identifier": "sendBuffer", "parameters": "(ByteBuffer bb)", "modifiers": "public", "return": "void", "signature": "void sendBuffer(ByteBuffer bb)", "full_signature": "public void sendBuffer(ByteBuffer bb)", "class_method_signature": "NIOServerCnxn.sendBuffer(ByteBuffer bb)", "testcase": false, "constructor": false}, {"identifier": "readPayload", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readPayload()", "full_signature": "private void readPayload()", "class_method_signature": "NIOServerCnxn.readPayload()", "testcase": false, "constructor": false}, {"identifier": "isSelectable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSelectable()", "full_signature": "public boolean isSelectable()", "class_method_signature": "NIOServerCnxn.isSelectable()", "testcase": false, "constructor": false}, {"identifier": "disableSelectable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableSelectable()", "full_signature": "public void disableSelectable()", "class_method_signature": "NIOServerCnxn.disableSelectable()", "testcase": false, "constructor": false}, {"identifier": "enableSelectable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableSelectable()", "full_signature": "public void enableSelectable()", "class_method_signature": "NIOServerCnxn.enableSelectable()", "testcase": false, "constructor": false}, {"identifier": "requestInterestOpsUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void requestInterestOpsUpdate()", "full_signature": "private void requestInterestOpsUpdate()", "class_method_signature": "NIOServerCnxn.requestInterestOpsUpdate()", "testcase": false, "constructor": false}, {"identifier": "handleWrite", "parameters": "(SelectionKey k)", "modifiers": "", "return": "void", "signature": "void handleWrite(SelectionKey k)", "full_signature": " void handleWrite(SelectionKey k)", "class_method_signature": "NIOServerCnxn.handleWrite(SelectionKey k)", "testcase": false, "constructor": false}, {"identifier": "isSocketOpen", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isSocketOpen()", "full_signature": "protected boolean isSocketOpen()", "class_method_signature": "NIOServerCnxn.isSocketOpen()", "testcase": false, "constructor": false}, {"identifier": "doIO", "parameters": "(SelectionKey k)", "modifiers": "", "return": "void", "signature": "void doIO(SelectionKey k)", "full_signature": " void doIO(SelectionKey k)", "class_method_signature": "NIOServerCnxn.doIO(SelectionKey k)", "testcase": false, "constructor": false}, {"identifier": "readRequest", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readRequest()", "full_signature": "private void readRequest()", "class_method_signature": "NIOServerCnxn.readRequest()", "testcase": false, "constructor": false}, {"identifier": "incrOutstandingRequests", "parameters": "(RequestHeader h)", "modifiers": "protected", "return": "void", "signature": "void incrOutstandingRequests(RequestHeader h)", "full_signature": "protected void incrOutstandingRequests(RequestHeader h)", "class_method_signature": "NIOServerCnxn.incrOutstandingRequests(RequestHeader h)", "testcase": false, "constructor": false}, {"identifier": "getWriteInterest", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean getWriteInterest()", "full_signature": "private boolean getWriteInterest()", "class_method_signature": "NIOServerCnxn.getWriteInterest()", "testcase": false, "constructor": false}, {"identifier": "getReadInterest", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean getReadInterest()", "full_signature": "private boolean getReadInterest()", "class_method_signature": "NIOServerCnxn.getReadInterest()", "testcase": false, "constructor": false}, {"identifier": "disableRecv", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableRecv()", "full_signature": "public void disableRecv()", "class_method_signature": "NIOServerCnxn.disableRecv()", "testcase": false, "constructor": false}, {"identifier": "enableRecv", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableRecv()", "full_signature": "public void enableRecv()", "class_method_signature": "NIOServerCnxn.enableRecv()", "testcase": false, "constructor": false}, {"identifier": "readConnectRequest", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readConnectRequest()", "full_signature": "private void readConnectRequest()", "class_method_signature": "NIOServerCnxn.readConnectRequest()", "testcase": false, "constructor": false}, {"identifier": "checkFourLetterWord", "parameters": "(final SelectionKey k, final int len)", "modifiers": "private", "return": "boolean", "signature": "boolean checkFourLetterWord(final SelectionKey k, final int len)", "full_signature": "private boolean checkFourLetterWord(final SelectionKey k, final int len)", "class_method_signature": "NIOServerCnxn.checkFourLetterWord(final SelectionKey k, final int len)", "testcase": false, "constructor": false}, {"identifier": "readLength", "parameters": "(SelectionKey k)", "modifiers": "private", "return": "boolean", "signature": "boolean readLength(SelectionKey k)", "full_signature": "private boolean readLength(SelectionKey k)", "class_method_signature": "NIOServerCnxn.readLength(SelectionKey k)", "testcase": false, "constructor": false}, {"identifier": "isZKServerRunning", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isZKServerRunning()", "full_signature": " boolean isZKServerRunning()", "class_method_signature": "NIOServerCnxn.isZKServerRunning()", "testcase": false, "constructor": false}, {"identifier": "getOutstandingRequests", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getOutstandingRequests()", "full_signature": "public long getOutstandingRequests()", "class_method_signature": "NIOServerCnxn.getOutstandingRequests()", "testcase": false, "constructor": false}, {"identifier": "getSessionTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSessionTimeout()", "full_signature": "public int getSessionTimeout()", "class_method_signature": "NIOServerCnxn.getSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NIOServerCnxn.toString()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NIOServerCnxn.close()", "testcase": false, "constructor": false}, {"identifier": "closeSock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeSock()", "full_signature": "private void closeSock()", "class_method_signature": "NIOServerCnxn.closeSock()", "testcase": false, "constructor": false}, {"identifier": "closeSock", "parameters": "(SocketChannel sock)", "modifiers": "public static", "return": "void", "signature": "void closeSock(SocketChannel sock)", "full_signature": "public static void closeSock(SocketChannel sock)", "class_method_signature": "NIOServerCnxn.closeSock(SocketChannel sock)", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(ReplyHeader h, Record r, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void sendResponse(ReplyHeader h, Record r, String tag)", "full_signature": "@Override public void sendResponse(ReplyHeader h, Record r, String tag)", "class_method_signature": "NIOServerCnxn.sendResponse(ReplyHeader h, Record r, String tag)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(WatchedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void process(WatchedEvent event)", "full_signature": "@Override public void process(WatchedEvent event)", "class_method_signature": "NIOServerCnxn.process(WatchedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getSessionId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSessionId()", "full_signature": "@Override public long getSessionId()", "class_method_signature": "NIOServerCnxn.getSessionId()", "testcase": false, "constructor": false}, {"identifier": "setSessionId", "parameters": "(long sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionId(long sessionId)", "full_signature": "@Override public void setSessionId(long sessionId)", "class_method_signature": "NIOServerCnxn.setSessionId(long sessionId)", "testcase": false, "constructor": false}, {"identifier": "setSessionTimeout", "parameters": "(int sessionTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionTimeout(int sessionTimeout)", "full_signature": "@Override public void setSessionTimeout(int sessionTimeout)", "class_method_signature": "NIOServerCnxn.setSessionTimeout(int sessionTimeout)", "testcase": false, "constructor": false}, {"identifier": "getInterestOps", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getInterestOps()", "full_signature": "@Override public int getInterestOps()", "class_method_signature": "NIOServerCnxn.getInterestOps()", "testcase": false, "constructor": false}, {"identifier": "getRemoteSocketAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getRemoteSocketAddress()", "full_signature": "@Override public InetSocketAddress getRemoteSocketAddress()", "class_method_signature": "NIOServerCnxn.getRemoteSocketAddress()", "testcase": false, "constructor": false}, {"identifier": "getSocketAddress", "parameters": "()", "modifiers": "public", "return": "InetAddress", "signature": "InetAddress getSocketAddress()", "full_signature": "public InetAddress getSocketAddress()", "class_method_signature": "NIOServerCnxn.getSocketAddress()", "testcase": false, "constructor": false}, {"identifier": "serverStats", "parameters": "()", "modifiers": "@Override protected", "return": "ServerStats", "signature": "ServerStats serverStats()", "full_signature": "@Override protected ServerStats serverStats()", "class_method_signature": "NIOServerCnxn.serverStats()", "testcase": false, "constructor": false}, {"identifier": "isSecure", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecure()", "full_signature": "@Override public boolean isSecure()", "class_method_signature": "NIOServerCnxn.isSecure()", "testcase": false, "constructor": false}, {"identifier": "getClientCertificateChain", "parameters": "()", "modifiers": "@Override public", "return": "Certificate[]", "signature": "Certificate[] getClientCertificateChain()", "full_signature": "@Override public Certificate[] getClientCertificateChain()", "class_method_signature": "NIOServerCnxn.getClientCertificateChain()", "testcase": false, "constructor": false}, {"identifier": "setClientCertificateChain", "parameters": "(Certificate[] chain)", "modifiers": "@Override public", "return": "void", "signature": "void setClientCertificateChain(Certificate[] chain)", "full_signature": "@Override public void setClientCertificateChain(Certificate[] chain)", "class_method_signature": "NIOServerCnxn.setClientCertificateChain(Certificate[] chain)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java"}, "focal_method": {"identifier": "serverStats", "parameters": "()", "modifiers": "@Override protected", "return": "ServerStats", "body": "@Override\n    protected ServerStats serverStats() {\n        if (zkServer == null) {\n            return null;\n        }\n        return zkServer.serverStats();\n    }", "signature": "ServerStats serverStats()", "full_signature": "@Override protected ServerStats serverStats()", "class_method_signature": "NIOServerCnxn.serverStats()", "testcase": false, "constructor": false, "invocations": ["serverStats"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}