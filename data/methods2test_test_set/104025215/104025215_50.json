{"test_class": {"identifier": "RoomSQLiteQueryTest", "superclass": "", "interfaces": "", "fields": [], "file": "room/runtime/src/test/java/android/arch/persistence/room/RoomSQLiteQueryTest.java"}, "test_case": {"identifier": "acquireSameSizeWithoutRelease", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void acquireSameSizeWithoutRelease() {\n        RoomSQLiteQuery query = RoomSQLiteQuery.acquire(\"abc\", 3);\n        assertThat(RoomSQLiteQuery.acquire(\"fda\", 3), not(sameInstance(query)));\n    }", "signature": "void acquireSameSizeWithoutRelease()", "full_signature": "@Test public void acquireSameSizeWithoutRelease()", "class_method_signature": "RoomSQLiteQueryTest.acquireSameSizeWithoutRelease()", "testcase": true, "constructor": false, "invocations": ["acquire", "assertThat", "acquire", "not", "sameInstance"]}, "focal_class": {"identifier": "RoomSQLiteQuery", "superclass": "", "interfaces": "implements SupportSQLiteQuery, SupportSQLiteProgram", "fields": [{"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    // Maximum number of queries we'll keep cached.\n    static final int POOL_LIMIT = 15;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    // Maximum number of queries we'll keep cached.\n    static final", "type": "int", "declarator": "POOL_LIMIT = 15", "var_name": "POOL_LIMIT"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    // Once we hit POOL_LIMIT, we'll bring the pool size back to the desired number. We always\n    // clear the bigger queries (# of arguments).\n    static final int DESIRED_POOL_SIZE = 10;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    // Once we hit POOL_LIMIT, we'll bring the pool size back to the desired number. We always\n    // clear the bigger queries (# of arguments).\n    static final", "type": "int", "declarator": "DESIRED_POOL_SIZE = 10", "var_name": "DESIRED_POOL_SIZE"}, {"original_string": "private volatile String mQuery;", "modifier": "private volatile", "type": "String", "declarator": "mQuery", "var_name": "mQuery"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final long[] mLongBindings;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final", "type": "long[]", "declarator": "mLongBindings", "var_name": "mLongBindings"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final double[] mDoubleBindings;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final", "type": "double[]", "declarator": "mDoubleBindings", "var_name": "mDoubleBindings"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final String[] mStringBindings;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final", "type": "String[]", "declarator": "mStringBindings", "var_name": "mStringBindings"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final byte[][] mBlobBindings;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final", "type": "byte[][]", "declarator": "mBlobBindings", "var_name": "mBlobBindings"}, {"original_string": "@Binding\n    private final int[] mBindingTypes;", "modifier": "@Binding\n    private final", "type": "int[]", "declarator": "mBindingTypes", "var_name": "mBindingTypes"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final int mCapacity;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    final", "type": "int", "declarator": "mCapacity", "var_name": "mCapacity"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    int mArgCount;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting", "type": "int", "declarator": "mArgCount", "var_name": "mArgCount"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    static final TreeMap<Integer, RoomSQLiteQuery> sQueryPool = new TreeMap<>();", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    static final", "type": "TreeMap<Integer, RoomSQLiteQuery>", "declarator": "sQueryPool = new TreeMap<>()", "var_name": "sQueryPool"}, {"original_string": "private static final int NULL = 1;", "modifier": "private static final", "type": "int", "declarator": "NULL = 1", "var_name": "NULL"}, {"original_string": "private static final int LONG = 2;", "modifier": "private static final", "type": "int", "declarator": "LONG = 2", "var_name": "LONG"}, {"original_string": "private static final int DOUBLE = 3;", "modifier": "private static final", "type": "int", "declarator": "DOUBLE = 3", "var_name": "DOUBLE"}, {"original_string": "private static final int STRING = 4;", "modifier": "private static final", "type": "int", "declarator": "STRING = 4", "var_name": "STRING"}, {"original_string": "private static final int BLOB = 5;", "modifier": "private static final", "type": "int", "declarator": "BLOB = 5", "var_name": "BLOB"}], "methods": [{"identifier": "acquire", "parameters": "(String query, int argumentCount)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "RoomSQLiteQuery", "signature": "RoomSQLiteQuery acquire(String query, int argumentCount)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static RoomSQLiteQuery acquire(String query, int argumentCount)", "class_method_signature": "RoomSQLiteQuery.acquire(String query, int argumentCount)", "testcase": false, "constructor": false}, {"identifier": "RoomSQLiteQuery", "parameters": "(int capacity)", "modifiers": "private", "return": "", "signature": " RoomSQLiteQuery(int capacity)", "full_signature": "private  RoomSQLiteQuery(int capacity)", "class_method_signature": "RoomSQLiteQuery.RoomSQLiteQuery(int capacity)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(String query, int argCount)", "modifiers": "@SuppressWarnings(\"WeakerAccess\")", "return": "void", "signature": "void init(String query, int argCount)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") void init(String query, int argCount)", "class_method_signature": "RoomSQLiteQuery.init(String query, int argCount)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void release()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void release()", "class_method_signature": "RoomSQLiteQuery.release()", "testcase": false, "constructor": false}, {"identifier": "prunePoolLocked", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void prunePoolLocked()", "full_signature": "private static void prunePoolLocked()", "class_method_signature": "RoomSQLiteQuery.prunePoolLocked()", "testcase": false, "constructor": false}, {"identifier": "getSql", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSql()", "full_signature": "@Override public String getSql()", "class_method_signature": "RoomSQLiteQuery.getSql()", "testcase": false, "constructor": false}, {"identifier": "getArgCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getArgCount()", "full_signature": "public int getArgCount()", "class_method_signature": "RoomSQLiteQuery.getArgCount()", "testcase": false, "constructor": false}, {"identifier": "bindTo", "parameters": "(SupportSQLiteProgram program)", "modifiers": "@Override public", "return": "void", "signature": "void bindTo(SupportSQLiteProgram program)", "full_signature": "@Override public void bindTo(SupportSQLiteProgram program)", "class_method_signature": "RoomSQLiteQuery.bindTo(SupportSQLiteProgram program)", "testcase": false, "constructor": false}, {"identifier": "bindNull", "parameters": "(int index)", "modifiers": "@Override public", "return": "void", "signature": "void bindNull(int index)", "full_signature": "@Override public void bindNull(int index)", "class_method_signature": "RoomSQLiteQuery.bindNull(int index)", "testcase": false, "constructor": false}, {"identifier": "bindLong", "parameters": "(int index, long value)", "modifiers": "@Override public", "return": "void", "signature": "void bindLong(int index, long value)", "full_signature": "@Override public void bindLong(int index, long value)", "class_method_signature": "RoomSQLiteQuery.bindLong(int index, long value)", "testcase": false, "constructor": false}, {"identifier": "bindDouble", "parameters": "(int index, double value)", "modifiers": "@Override public", "return": "void", "signature": "void bindDouble(int index, double value)", "full_signature": "@Override public void bindDouble(int index, double value)", "class_method_signature": "RoomSQLiteQuery.bindDouble(int index, double value)", "testcase": false, "constructor": false}, {"identifier": "bindString", "parameters": "(int index, String value)", "modifiers": "@Override public", "return": "void", "signature": "void bindString(int index, String value)", "full_signature": "@Override public void bindString(int index, String value)", "class_method_signature": "RoomSQLiteQuery.bindString(int index, String value)", "testcase": false, "constructor": false}, {"identifier": "bindBlob", "parameters": "(int index, byte[] value)", "modifiers": "@Override public", "return": "void", "signature": "void bindBlob(int index, byte[] value)", "full_signature": "@Override public void bindBlob(int index, byte[] value)", "class_method_signature": "RoomSQLiteQuery.bindBlob(int index, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RoomSQLiteQuery.close()", "testcase": false, "constructor": false}, {"identifier": "copyArgumentsFrom", "parameters": "(RoomSQLiteQuery other)", "modifiers": "public", "return": "void", "signature": "void copyArgumentsFrom(RoomSQLiteQuery other)", "full_signature": "public void copyArgumentsFrom(RoomSQLiteQuery other)", "class_method_signature": "RoomSQLiteQuery.copyArgumentsFrom(RoomSQLiteQuery other)", "testcase": false, "constructor": false}, {"identifier": "clearBindings", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearBindings()", "full_signature": "@Override public void clearBindings()", "class_method_signature": "RoomSQLiteQuery.clearBindings()", "testcase": false, "constructor": false}], "file": "room/runtime/src/main/java/android/arch/persistence/room/RoomSQLiteQuery.java"}, "focal_method": {"identifier": "acquire", "parameters": "(String query, int argumentCount)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "RoomSQLiteQuery", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static RoomSQLiteQuery acquire(String query, int argumentCount) {\n        synchronized (sQueryPool) {\n            final Map.Entry<Integer, RoomSQLiteQuery> entry =\n                    sQueryPool.ceilingEntry(argumentCount);\n            if (entry != null) {\n                sQueryPool.remove(entry.getKey());\n                final RoomSQLiteQuery sqliteQuery = entry.getValue();\n                sqliteQuery.init(query, argumentCount);\n                return sqliteQuery;\n            }\n        }\n        RoomSQLiteQuery sqLiteQuery = new RoomSQLiteQuery(argumentCount);\n        sqLiteQuery.init(query, argumentCount);\n        return sqLiteQuery;\n    }", "signature": "RoomSQLiteQuery acquire(String query, int argumentCount)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static RoomSQLiteQuery acquire(String query, int argumentCount)", "class_method_signature": "RoomSQLiteQuery.acquire(String query, int argumentCount)", "testcase": false, "constructor": false, "invocations": ["ceilingEntry", "remove", "getKey", "getValue", "init", "init"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}