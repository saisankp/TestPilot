{"test_class": {"identifier": "QuarticRootFinderTest", "superclass": "", "interfaces": "implements UtilityClassTest", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/maths/QuarticRootFinderTest.java"}, "test_case": {"identifier": "find_whenQuarticHasFourComplexRoots_thenReturnsCorrectRoots", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void find_whenQuarticHasFourComplexRoots_thenReturnsCorrectRoots() {\n        ImmutableList<Complex> roots = QuarticRootFinder.find(1, 1, 3, -1, 12);\n\n        ImmutableList<Pair<Double, Double>> expectedRoots = ImmutableList.of(\n                Pair.of(-1.3122, 1.7320),\n                Pair.of(0.8122, 1.3717),\n                Pair.of(0.8122, -1.3717),\n                Pair.of(-1.3122, -1.7320)\n        );\n        assertEquals(expectedRoots, roots);\n    }", "signature": "void find_whenQuarticHasFourComplexRoots_thenReturnsCorrectRoots()", "full_signature": "@Test void find_whenQuarticHasFourComplexRoots_thenReturnsCorrectRoots()", "class_method_signature": "QuarticRootFinderTest.find_whenQuarticHasFourComplexRoots_thenReturnsCorrectRoots()", "testcase": true, "constructor": false, "invocations": ["find", "of", "of", "of", "of", "of", "assertEquals"]}, "focal_class": {"identifier": "QuarticRootFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 1e-14;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 1e-14", "var_name": "EPSILON"}], "methods": [{"identifier": "QuarticRootFinder", "parameters": "()", "modifiers": "private", "return": "", "signature": " QuarticRootFinder()", "full_signature": "private  QuarticRootFinder()", "class_method_signature": "QuarticRootFinder.QuarticRootFinder()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(double a, double b, double c, double d, double e)", "modifiers": "public static", "return": "ImmutableList<Complex>", "signature": "ImmutableList<Complex> find(double a, double b, double c, double d, double e)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c, double d, double e)", "class_method_signature": "QuarticRootFinder.find(double a, double b, double c, double d, double e)", "testcase": false, "constructor": false}, {"identifier": "calculateRoot", "parameters": "(double p, double q, Complex m, boolean firstIsPositive, boolean secondIsPositive)", "modifiers": "private static", "return": "Complex", "signature": "Complex calculateRoot(double p, double q, Complex m, boolean firstIsPositive, boolean secondIsPositive)", "full_signature": "private static Complex calculateRoot(double p, double q, Complex m, boolean firstIsPositive, boolean secondIsPositive)", "class_method_signature": "QuarticRootFinder.calculateRoot(double p, double q, Complex m, boolean firstIsPositive, boolean secondIsPositive)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/maths/QuarticRootFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(double a, double b, double c, double d, double e)", "modifiers": "public static", "return": "ImmutableList<Complex>", "body": "public static ImmutableList<Complex> find(double a, double b, double c, double d, double e) {\n        if (a == 0) {\n            return CubicRootFinder.find(b, c, d, e);\n        }\n\n        //See https://en.wikipedia.org/wiki/Quartic_function#Solution_methods - subsection: Ferrari's Solution\n\n        //Simplify equation so its of the form x^4 + bx^3 + cx^2 + dx + e = 0\n        b = b / a;\n        c = c / a;\n        d = d / a;\n        e = e / a;\n\n        //Define y^4 + py^2 + qy + r = 0 (where x = y - b/4)\n        Complex yToXAdjustment = new Complex(-b / 4, 0);\n        double p = c - 3 * Math.pow(b, 2) / 8;\n        double q = d + (Math.pow(b, 3) / 8) - (b * c / 2);\n        double r = e - (3 * Math.pow(b, 4) / 256) + (Math.pow(b, 2) * c / 16) - (b * d / 4);\n\n        //Special case of y^4 = 0\n        if (p == 0 && q == 0 && r == 0) {\n            return ImmutableList.of(yToXAdjustment, yToXAdjustment, yToXAdjustment, yToXAdjustment);\n        }\n\n        //Solve the following cubic for m\n        ImmutableList<Complex> rootsOfCubic = CubicRootFinder.find(1,  p, (Math.pow(p, 2) / 4) - r, -Math.pow(q, 2) / 8);\n        Complex m = rootsOfCubic.stream()\n                .filter(complex -> Math.abs(complex.getImaginary()) >  EPSILON || Math.abs(complex.getReal()) > EPSILON)\n                .findFirst()\n                .orElseThrow(() -> new IllegalStateException(\"No non-zero solution for m found\"));\n\n        Complex yRoot1 = calculateRoot(p, q, m, true, true);\n        Complex yRoot2 = calculateRoot(p, q, m, true, false);\n        Complex yRoot3 = calculateRoot(p, q, m, false, true);\n        Complex yRoot4 = calculateRoot(p, q, m, false, false);\n\n        return ImmutableList.of(\n                yRoot1.add(yToXAdjustment),\n                yRoot2.add(yToXAdjustment),\n                yRoot3.add(yToXAdjustment),\n                yRoot4.add(yToXAdjustment));\n    }", "signature": "ImmutableList<Complex> find(double a, double b, double c, double d, double e)", "full_signature": "public static ImmutableList<Complex> find(double a, double b, double c, double d, double e)", "class_method_signature": "QuarticRootFinder.find(double a, double b, double c, double d, double e)", "testcase": false, "constructor": false, "invocations": ["find", "pow", "pow", "pow", "pow", "of", "find", "pow", "pow", "orElseThrow", "findFirst", "filter", "stream", "abs", "getImaginary", "abs", "getReal", "calculateRoot", "calculateRoot", "calculateRoot", "calculateRoot", "of", "add", "add", "add", "add"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}