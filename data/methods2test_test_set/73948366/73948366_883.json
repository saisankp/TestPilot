{"test_class": {"identifier": "JDBCSSHRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private PoolableDataSource mockDataSrc;", "modifier": "@Mock private", "type": "PoolableDataSource", "declarator": "mockDataSrc", "var_name": "mockDataSrc"}, {"original_string": "@Mock private Statement mockStmt;", "modifier": "@Mock private", "type": "Statement", "declarator": "mockStmt", "var_name": "mockStmt"}, {"original_string": "@Mock private PreparedStatement mockPrepStmt;", "modifier": "@Mock private", "type": "PreparedStatement", "declarator": "mockPrepStmt", "var_name": "mockPrepStmt"}, {"original_string": "@Mock private Connection mockConn;", "modifier": "@Mock private", "type": "Connection", "declarator": "mockConn", "var_name": "mockConn"}, {"original_string": "@Mock private ResultSet mockResultSet;", "modifier": "@Mock private", "type": "ResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/JDBCSSHRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testdeleteExpiredSSHCertRecords", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testdeleteExpiredSSHCertRecords() throws Exception {\n        \n        JDBCSSHRecordStoreConnection jdbcConn = new JDBCSSHRecordStoreConnection(mockConn);\n\n        Mockito.doReturn(1).when(mockPrepStmt).executeUpdate();\n        jdbcConn.deleteExpiredSSHCertRecords(360);\n        \n        Mockito.verify(mockPrepStmt, times(1)).setInt(1, 360);\n        jdbcConn.close();\n    }", "signature": "void testdeleteExpiredSSHCertRecords()", "full_signature": "@Test public void testdeleteExpiredSSHCertRecords()", "class_method_signature": "JDBCSSHRecordStoreConnectionTest.testdeleteExpiredSSHCertRecords()", "testcase": true, "constructor": false, "invocations": ["executeUpdate", "when", "doReturn", "deleteExpiredSSHCertRecords", "setInt", "verify", "times", "close"]}, "focal_class": {"identifier": "JDBCSSHRecordStoreConnection", "superclass": "", "interfaces": "implements SSHRecordStoreConnection", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JDBCSSHRecordStoreConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JDBCSSHRecordStoreConnection.class)", "var_name": "LOGGER"}, {"original_string": "private static final int MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062;", "modifier": "private static final", "type": "int", "declarator": "MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062", "var_name": "MYSQL_ER_OPTION_DUPLICATE_ENTRY"}, {"original_string": "private static final String SQL_GET_SSH_RECORD = \"SELECT * FROM ssh_certificates WHERE instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_SSH_RECORD = \"SELECT * FROM ssh_certificates WHERE instanceId=? AND service=?;\"", "var_name": "SQL_GET_SSH_RECORD"}, {"original_string": "private static final String SQL_INSERT_SSH_RECORD = \"INSERT INTO ssh_certificates \" +\n            \"(instanceId, service, principals, clientIP, privateIP) \" +\n            \"VALUES (?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_SSH_RECORD = \"INSERT INTO ssh_certificates \" +\n            \"(instanceId, service, principals, clientIP, privateIP) \" +\n            \"VALUES (?,?,?,?,?);\"", "var_name": "SQL_INSERT_SSH_RECORD"}, {"original_string": "private static final String SQL_UPDATE_SSH_RECORD = \"UPDATE ssh_certificates SET \" +\n            \"principals=?, clientIP=?, privateIP=?, issueTime=CURRENT_TIMESTAMP(3) \" +\n            \"WHERE instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_SSH_RECORD = \"UPDATE ssh_certificates SET \" +\n            \"principals=?, clientIP=?, privateIP=?, issueTime=CURRENT_TIMESTAMP(3) \" +\n            \"WHERE instanceId=? AND service=?;\"", "var_name": "SQL_UPDATE_SSH_RECORD"}, {"original_string": "private static final String SQL_DELETE_SSH_RECORD = \"DELETE from ssh_certificates \" +\n            \"WHERE instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_SSH_RECORD = \"DELETE from ssh_certificates \" +\n            \"WHERE instanceId=? AND service=?;\"", "var_name": "SQL_DELETE_SSH_RECORD"}, {"original_string": "private static final String SQL_DELETE_EXPIRED_X509_RECORDS = \"DELETE FROM ssh_certificates \" +\n            \"WHERE issueTime < ADDDATE(NOW(), INTERVAL -? MINUTE);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_EXPIRED_X509_RECORDS = \"DELETE FROM ssh_certificates \" +\n            \"WHERE issueTime < ADDDATE(NOW(), INTERVAL -? MINUTE);\"", "var_name": "SQL_DELETE_EXPIRED_X509_RECORDS"}, {"original_string": "public static final String DB_COLUMN_INSTANCE_ID    = \"instanceId\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_INSTANCE_ID    = \"instanceId\"", "var_name": "DB_COLUMN_INSTANCE_ID"}, {"original_string": "public static final String DB_COLUMN_SERVICE        = \"service\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_SERVICE        = \"service\"", "var_name": "DB_COLUMN_SERVICE"}, {"original_string": "public static final String DB_COLUMN_CLIENT_IP      = \"clientIP\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_CLIENT_IP      = \"clientIP\"", "var_name": "DB_COLUMN_CLIENT_IP"}, {"original_string": "public static final String DB_COLUMN_PRIVATE_IP     = \"privateIP\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_PRIVATE_IP     = \"privateIP\"", "var_name": "DB_COLUMN_PRIVATE_IP"}, {"original_string": "public static final String DB_COLUMN_PRINCIPALS     = \"principals\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_PRINCIPALS     = \"principals\"", "var_name": "DB_COLUMN_PRINCIPALS"}, {"original_string": "Connection con;", "modifier": "", "type": "Connection", "declarator": "con", "var_name": "con"}, {"original_string": "int queryTimeout = 10;", "modifier": "", "type": "int", "declarator": "queryTimeout = 10", "var_name": "queryTimeout"}], "methods": [{"identifier": "JDBCSSHRecordStoreConnection", "parameters": "(Connection con)", "modifiers": "public", "return": "", "signature": " JDBCSSHRecordStoreConnection(Connection con)", "full_signature": "public  JDBCSSHRecordStoreConnection(Connection con)", "class_method_signature": "JDBCSSHRecordStoreConnection.JDBCSSHRecordStoreConnection(Connection con)", "testcase": false, "constructor": true}, {"identifier": "setOperationTimeout", "parameters": "(int queryTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int queryTimeout)", "full_signature": "@Override public void setOperationTimeout(int queryTimeout)", "class_method_signature": "JDBCSSHRecordStoreConnection.setOperationTimeout(int queryTimeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCSSHRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "int", "signature": "int executeUpdate(PreparedStatement ps, String caller)", "full_signature": " int executeUpdate(PreparedStatement ps, String caller)", "class_method_signature": "JDBCSSHRecordStoreConnection.executeUpdate(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "ResultSet", "signature": "ResultSet executeQuery(PreparedStatement ps, String caller)", "full_signature": " ResultSet executeQuery(PreparedStatement ps, String caller)", "class_method_signature": "JDBCSSHRecordStoreConnection.executeQuery(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "processInsertValue", "parameters": "(String value)", "modifiers": "", "return": "String", "signature": "String processInsertValue(String value)", "full_signature": " String processInsertValue(String value)", "class_method_signature": "JDBCSSHRecordStoreConnection.processInsertValue(String value)", "testcase": false, "constructor": false}, {"identifier": "getSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "SSHCertRecord", "signature": "SSHCertRecord getSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public SSHCertRecord getSSHCertRecord(String instanceId, String service)", "class_method_signature": "JDBCSSHRecordStoreConnection.getSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "updateSSHCertRecord", "parameters": "(SSHCertRecord sshCertRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSSHCertRecord(SSHCertRecord sshCertRecord)", "full_signature": "@Override public boolean updateSSHCertRecord(SSHCertRecord sshCertRecord)", "class_method_signature": "JDBCSSHRecordStoreConnection.updateSSHCertRecord(SSHCertRecord sshCertRecord)", "testcase": false, "constructor": false}, {"identifier": "insertSSHCertRecord", "parameters": "(SSHCertRecord sshCertRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertSSHCertRecord(SSHCertRecord sshCertRecord)", "full_signature": "@Override public boolean insertSSHCertRecord(SSHCertRecord sshCertRecord)", "class_method_signature": "JDBCSSHRecordStoreConnection.insertSSHCertRecord(SSHCertRecord sshCertRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public boolean deleteSSHCertRecord(String instanceId, String service)", "class_method_signature": "JDBCSSHRecordStoreConnection.deleteSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredSSHCertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredSSHCertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredSSHCertRecords(int expiryTimeMins)", "class_method_signature": "JDBCSSHRecordStoreConnection.deleteExpiredSSHCertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "sqlError", "parameters": "(SQLException ex, String caller)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException sqlError(SQLException ex, String caller)", "full_signature": " RuntimeException sqlError(SQLException ex, String caller)", "class_method_signature": "JDBCSSHRecordStoreConnection.sqlError(SQLException ex, String caller)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/JDBCSSHRecordStoreConnection.java"}, "focal_method": {"identifier": "deleteExpiredSSHCertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int deleteExpiredSSHCertRecords(int expiryTimeMins) {\n\n        int affectedRows;\n        final String caller = \"deleteExpiredSSHCertRecords\";\n        \n        // make sure we have a valid value specified for expiry time\n        \n        if (expiryTimeMins <= 0) {\n            return 0;\n        }\n        \n        try (PreparedStatement ps = con.prepareStatement(SQL_DELETE_EXPIRED_X509_RECORDS)) {\n            ps.setInt(1, expiryTimeMins);\n            affectedRows = executeUpdate(ps, caller);\n        } catch (SQLException ex) {\n            throw sqlError(ex, caller);\n        }\n        return affectedRows;\n    }", "signature": "int deleteExpiredSSHCertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredSSHCertRecords(int expiryTimeMins)", "class_method_signature": "JDBCSSHRecordStoreConnection.deleteExpiredSSHCertRecords(int expiryTimeMins)", "testcase": false, "constructor": false, "invocations": ["prepareStatement", "setInt", "executeUpdate", "sqlError"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}