{"test_class": {"identifier": "RoleChangerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public RoleChanger roleChanger;", "modifier": "public", "type": "RoleChanger", "declarator": "roleChanger", "var_name": "roleChanger"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/core/internal/RoleChangerTest.java"}, "test_case": {"identifier": "testVerifyRoleReplyReceived", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyRoleReplyReceived() {\n        LinkedList<OFSwitchImpl> switches = new LinkedList<OFSwitchImpl>();\n        \n        // Add a switch that has received a role reply\n        OFSwitchImpl sw1 = EasyMock.createMock(OFSwitchImpl.class);\n        expect(sw1.checkFirstPendingRoleRequestCookie(123456))\n                        .andReturn(false).once();\n        switches.add(sw1);\n        \n        // Add a switch that has not yet received a role reply\n        OFSwitchImpl sw2 = EasyMock.createMock(OFSwitchImpl.class);\n        expect(sw2.checkFirstPendingRoleRequestCookie(123456))\n                        .andReturn(true).once();\n        Channel channel2 = createMock(Channel.class);\n        expect(sw2.getChannel()).andReturn(channel2);\n        expect(channel2.close()).andReturn(null);\n        switches.add(sw2);\n        \n        \n        replay(sw1, sw2);\n        roleChanger.verifyRoleReplyReceived(switches, 123456);\n        verify(sw1, sw2);\n        \n        assertEquals(2, switches.size());\n    }", "signature": "void testVerifyRoleReplyReceived()", "full_signature": "@Test public void testVerifyRoleReplyReceived()", "class_method_signature": "RoleChangerTest.testVerifyRoleReplyReceived()", "testcase": true, "constructor": false, "invocations": ["createMock", "once", "andReturn", "expect", "checkFirstPendingRoleRequestCookie", "add", "createMock", "once", "andReturn", "expect", "checkFirstPendingRoleRequestCookie", "createMock", "andReturn", "expect", "getChannel", "andReturn", "expect", "close", "add", "replay", "verifyRoleReplyReceived", "verify", "assertEquals", "size"]}, "focal_class": {"identifier": "RoleChanger", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected DelayQueue<RoleChangeTask> pendingTasks;", "modifier": "protected", "type": "DelayQueue<RoleChangeTask>", "declarator": "pendingTasks", "var_name": "pendingTasks"}, {"original_string": "protected long lastSubmitTime;", "modifier": "protected", "type": "long", "declarator": "lastSubmitTime", "var_name": "lastSubmitTime"}, {"original_string": "protected Thread workerThread;", "modifier": "protected", "type": "Thread", "declarator": "workerThread", "var_name": "workerThread"}, {"original_string": "protected long timeout;", "modifier": "protected", "type": "long", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "protected static long DEFAULT_TIMEOUT = 15L*1000*1000*1000L;", "modifier": "protected static", "type": "long", "declarator": "DEFAULT_TIMEOUT = 15L*1000*1000*1000L", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "protected static Logger log = LoggerFactory.getLogger(RoleChanger.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RoleChanger.class)", "var_name": "log"}], "methods": [{"identifier": "RoleChanger", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoleChanger()", "full_signature": "public  RoleChanger()", "class_method_signature": "RoleChanger.RoleChanger()", "testcase": false, "constructor": true}, {"identifier": "submitRequest", "parameters": "(Collection<OFSwitchImpl> switches, Role role)", "modifiers": "public synchronized", "return": "void", "signature": "void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "full_signature": "public synchronized void submitRequest(Collection<OFSwitchImpl> switches, Role role)", "class_method_signature": "RoleChanger.submitRequest(Collection<OFSwitchImpl> switches, Role role)", "testcase": false, "constructor": false}, {"identifier": "sendRoleRequest", "parameters": "(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Failed to send role request message \" + \"to switch {switch}: {message}. Disconnecting\", explanation=\"An I/O error occurred while attempting to change \" + \"the switch HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Failed to send role request message \" + \"to switch {switch}: {message}. Disconnecting\", explanation=\"An I/O error occurred while attempting to change \" + \"the switch HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "class_method_signature": "RoleChanger.sendRoleRequest(Collection<OFSwitchImpl> switches,\n                                   Role role, long cookie)", "testcase": false, "constructor": false}, {"identifier": "verifyRoleReplyReceived", "parameters": "(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "class_method_signature": "RoleChanger.verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/core/internal/RoleChanger.java"}, "focal_method": {"identifier": "verifyRoleReplyReceived", "parameters": "(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "body": "@LogMessageDoc(level=\"WARN\",\n            message=\"Timeout while waiting for role reply from switch {switch}.\"\n                    + \" Disconnecting\",\n            explanation=\"Timed out waiting for the switch to respond to \" +\n            \t\t\"a request to change the HA role.\",\n            recommendation=LogMessageDoc.CHECK_SWITCH)                              \n    protected void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie) {\n        for (OFSwitchImpl sw: switches) {\n            if (sw.checkFirstPendingRoleRequestCookie(cookie)) {\n                sw.getChannel().close();\n                log.warn(\"Timeout while waiting for role reply from switch {}.\"\n                         + \" Disconnecting\", sw);\n            }\n        }\n    }", "signature": "void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Timeout while waiting for role reply from switch {switch}.\" + \" Disconnecting\", explanation=\"Timed out waiting for the switch to respond to \" + \"a request to change the HA role.\", recommendation=LogMessageDoc.CHECK_SWITCH) protected void verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "class_method_signature": "RoleChanger.verifyRoleReplyReceived(Collection<OFSwitchImpl> switches,\n                                   long cookie)", "testcase": false, "constructor": false, "invocations": ["checkFirstPendingRoleRequestCookie", "close", "getChannel", "warn"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}