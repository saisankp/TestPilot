{"test_class": {"identifier": "ISINGridTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ISINGrid grid = new ISINGrid(ISINGrid.DEFAULT_ROW_COUNT);", "modifier": "private", "type": "ISINGrid", "declarator": "grid = new ISINGrid(ISINGrid.DEFAULT_ROW_COUNT)", "var_name": "grid"}], "file": "s3tbx-merisl3-reader/src/test/java/org/esa/s3tbx/dataio/merisl3/ISINGridTest.java"}, "test_case": {"identifier": "test_getRowLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_getRowLength() {\n        assertEquals(3, grid.getRowLength(0));\n        assertEquals(9, grid.getRowLength(1));\n        assertEquals(16, grid.getRowLength(2));\n        assertEquals(22, grid.getRowLength(3));\n\n        assertEquals(4320, grid.getRowLength(2160 / 2 - 1));\n        assertEquals(4320, grid.getRowLength(2160 / 2));\n\n        assertEquals(3, grid.getRowLength(2160 - 1 - 0));\n        assertEquals(9, grid.getRowLength(2160 - 1 - 1));\n        assertEquals(16, grid.getRowLength(2160 - 1 - 2));\n        assertEquals(22, grid.getRowLength(2160 - 1 - 3));\n    }", "signature": "void test_getRowLength()", "full_signature": "@Test public void test_getRowLength()", "class_method_signature": "ISINGridTest.test_getRowLength()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength", "assertEquals", "getRowLength"]}, "focal_class": {"identifier": "ISINGrid", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double RE = 6378.137;", "modifier": "public static final", "type": "double", "declarator": "RE = 6378.137", "var_name": "RE"}, {"original_string": "public static final int DEFAULT_ROW_COUNT = 2160;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_ROW_COUNT = 2160", "var_name": "DEFAULT_ROW_COUNT"}, {"original_string": "private final int rowCount;", "modifier": "private final", "type": "int", "declarator": "rowCount", "var_name": "rowCount"}, {"original_string": "private final double binSize;", "modifier": "private final", "type": "double", "declarator": "binSize", "var_name": "binSize"}, {"original_string": "private final double deltaLat;", "modifier": "private final", "type": "double", "declarator": "deltaLat", "var_name": "deltaLat"}, {"original_string": "private final double[] lats;", "modifier": "private final", "type": "double[]", "declarator": "lats", "var_name": "lats"}, {"original_string": "private final double[] deltaLons;", "modifier": "private final", "type": "double[]", "declarator": "deltaLons", "var_name": "deltaLons"}, {"original_string": "private final int[] rowLength;", "modifier": "private final", "type": "int[]", "declarator": "rowLength", "var_name": "rowLength"}, {"original_string": "private final int[] binOffsets;", "modifier": "private final", "type": "int[]", "declarator": "binOffsets", "var_name": "binOffsets"}, {"original_string": "private final int totalBinCount;", "modifier": "private final", "type": "int", "declarator": "totalBinCount", "var_name": "totalBinCount"}], "methods": [{"identifier": "ISINGrid", "parameters": "(int rowCount)", "modifiers": "public", "return": "", "signature": " ISINGrid(int rowCount)", "full_signature": "public  ISINGrid(int rowCount)", "class_method_signature": "ISINGrid.ISINGrid(int rowCount)", "testcase": false, "constructor": true}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "ISINGrid.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getBinSize", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBinSize()", "full_signature": "public double getBinSize()", "class_method_signature": "ISINGrid.getBinSize()", "testcase": false, "constructor": false}, {"identifier": "getDeltaLat", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeltaLat()", "full_signature": "public double getDeltaLat()", "class_method_signature": "ISINGrid.getDeltaLat()", "testcase": false, "constructor": false}, {"identifier": "getTotalBinCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalBinCount()", "full_signature": "public int getTotalBinCount()", "class_method_signature": "ISINGrid.getTotalBinCount()", "testcase": false, "constructor": false}, {"identifier": "getLat", "parameters": "(int rowIndex)", "modifiers": "public", "return": "double", "signature": "double getLat(int rowIndex)", "full_signature": "public double getLat(int rowIndex)", "class_method_signature": "ISINGrid.getLat(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getDeltaLon", "parameters": "(int rowIndex)", "modifiers": "public", "return": "double", "signature": "double getDeltaLon(int rowIndex)", "full_signature": "public double getDeltaLon(int rowIndex)", "class_method_signature": "ISINGrid.getDeltaLon(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getRowLength", "parameters": "(int rowIndex)", "modifiers": "public", "return": "int", "signature": "int getRowLength(int rowIndex)", "full_signature": "public int getRowLength(int rowIndex)", "class_method_signature": "ISINGrid.getRowLength(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getBinOffset", "parameters": "(int rowIndex)", "modifiers": "public", "return": "int", "signature": "int getBinOffset(int rowIndex)", "full_signature": "public int getBinOffset(int rowIndex)", "class_method_signature": "ISINGrid.getBinOffset(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getRowIndex", "parameters": "(int binIndex)", "modifiers": "public", "return": "int", "signature": "int getRowIndex(int binIndex)", "full_signature": "public int getRowIndex(int binIndex)", "class_method_signature": "ISINGrid.getRowIndex(int binIndex)", "testcase": false, "constructor": false}, {"identifier": "getGridPoint", "parameters": "(int binIndex, Point gridPoint)", "modifiers": "public", "return": "Point", "signature": "Point getGridPoint(int binIndex, Point gridPoint)", "full_signature": "public Point getGridPoint(int binIndex, Point gridPoint)", "class_method_signature": "ISINGrid.getGridPoint(int binIndex, Point gridPoint)", "testcase": false, "constructor": false}, {"identifier": "getBinIndex", "parameters": "(Point gridPoint)", "modifiers": "public", "return": "int", "signature": "int getBinIndex(Point gridPoint)", "full_signature": "public int getBinIndex(Point gridPoint)", "class_method_signature": "ISINGrid.getBinIndex(Point gridPoint)", "testcase": false, "constructor": false}, {"identifier": "getColIndex", "parameters": "(int rowIndex, double lon)", "modifiers": "public", "return": "int", "signature": "int getColIndex(int rowIndex, double lon)", "full_signature": "public int getColIndex(int rowIndex, double lon)", "class_method_signature": "ISINGrid.getColIndex(int rowIndex, double lon)", "testcase": false, "constructor": false}, {"identifier": "getBinIndex", "parameters": "(int rowIndex, double lon)", "modifiers": "public", "return": "int", "signature": "int getBinIndex(int rowIndex, double lon)", "full_signature": "public int getBinIndex(int rowIndex, double lon)", "class_method_signature": "ISINGrid.getBinIndex(int rowIndex, double lon)", "testcase": false, "constructor": false}, {"identifier": "detectRowCount", "parameters": "(String productName)", "modifiers": "public static", "return": "int", "signature": "int detectRowCount(String productName)", "full_signature": "public static int detectRowCount(String productName)", "class_method_signature": "ISINGrid.detectRowCount(String productName)", "testcase": false, "constructor": false}], "file": "s3tbx-merisl3-reader/src/main/java/org/esa/s3tbx/dataio/merisl3/ISINGrid.java"}, "focal_method": {"identifier": "getRowLength", "parameters": "(int rowIndex)", "modifiers": "public", "return": "int", "body": "public int getRowLength(int rowIndex) {\n        return rowLength[rowIndex];\n    }", "signature": "int getRowLength(int rowIndex)", "full_signature": "public int getRowLength(int rowIndex)", "class_method_signature": "ISINGrid.getRowLength(int rowIndex)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}