{"test_class": {"identifier": "ShapeSuggesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private ShapeSuggester suggester;", "modifier": "private", "type": "ShapeSuggester", "declarator": "suggester", "var_name": "suggester"}, {"original_string": "private ShapeTable shapeTable;", "modifier": "private", "type": "ShapeTable", "declarator": "shapeTable", "var_name": "shapeTable"}, {"original_string": "private HistoryObserver history;", "modifier": "private", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}], "file": "src/edu/lclark/orego/feature/ShapeSuggesterTest.java"}, "test_case": {"identifier": "testGetMoves", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetMoves() {\n\t\tString[] diagram = {\n\t\t\t\t\".........\",\n\t\t\t\t\"OO.OO....\",\n\t\t\t\t\".........\",\n\t\t\t\t\".........\",\n\t\t\t\t\".........\",\n\t\t\t\t\"OO.......\",\n\t\t\t\t\".........\",\n\t\t\t\t\"OO.##....\",\n\t\t\t\t\"OO.OO....\",\n\t\t};\n\t\tboard.setUpProblem(diagram, BLACK);\n\t\tlong hash = PatternFinder.getHash(board, board.getCoordinateSystem().at(\"c8\"), 4, history.get(board.getTurn()-1));\n\t\tfor(int i = 0; i < 500; i++){\n\t\t\tshapeTable.update(hash, true);\n\t\t}\n\t\tassertEquals(board.getCoordinateSystem().at(\"c8\"), suggester.getMoves().get(0));\n\t}", "signature": "void testGetMoves()", "full_signature": "@Test public void testGetMoves()", "class_method_signature": "ShapeSuggesterTest.testGetMoves()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "getHash", "at", "getCoordinateSystem", "get", "getTurn", "update", "assertEquals", "at", "getCoordinateSystem", "get", "getMoves"]}, "focal_class": {"identifier": "ShapeSuggester", "superclass": "", "interfaces": "implements Suggester", "fields": [{"original_string": "private final int bias;", "modifier": "private final", "type": "int", "declarator": "bias", "var_name": "bias"}, {"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final CoordinateSystem coords;", "modifier": "private final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private final ShortSet moves;", "modifier": "private final", "type": "ShortSet", "declarator": "moves", "var_name": "moves"}, {"original_string": "private ShapeTable shapeTable;", "modifier": "private", "type": "ShapeTable", "declarator": "shapeTable", "var_name": "shapeTable"}, {"original_string": "private double shapeThreshold;", "modifier": "private", "type": "double", "declarator": "shapeThreshold", "var_name": "shapeThreshold"}, {"original_string": "private final int minStones;", "modifier": "private final", "type": "int", "declarator": "minStones", "var_name": "minStones"}, {"original_string": "private final HistoryObserver history;", "modifier": "private final", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}], "methods": [{"identifier": "ShapeSuggester", "parameters": "(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones)", "modifiers": "public", "return": "", "signature": " ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones)", "full_signature": "public  ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones)", "class_method_signature": "ShapeSuggester.ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones)", "testcase": false, "constructor": true}, {"identifier": "ShapeSuggester", "parameters": "(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones, int bias)", "modifiers": "public", "return": "", "signature": " ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones, int bias)", "full_signature": "public  ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones, int bias)", "class_method_signature": "ShapeSuggester.ShapeSuggester(Board board, HistoryObserver history, ShapeTable shapeTable, double shapeThreshold, int minStones, int bias)", "testcase": false, "constructor": true}, {"identifier": "getBias", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBias()", "full_signature": "@Override public int getBias()", "class_method_signature": "ShapeSuggester.getBias()", "testcase": false, "constructor": false}, {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "ShapeSuggester.getMoves()", "testcase": false, "constructor": false}, {"identifier": "setTable", "parameters": "(ShapeTable shapeTable)", "modifiers": "public", "return": "void", "signature": "void setTable(ShapeTable shapeTable)", "full_signature": "public void setTable(ShapeTable shapeTable)", "class_method_signature": "ShapeSuggester.setTable(ShapeTable shapeTable)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/ShapeSuggester.java"}, "focal_method": {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "body": "@Override\n\tpublic ShortSet getMoves() {\n\t\tmoves.clear();\n\t\tfor (short p : coords.getAllPointsOnBoard()) {\n\t\t\tif (board.getColorAt(p) == VACANT) {\n\t\t\t\tlong hash = PatternFinder.getHash(board, p, minStones, history.get(board.getTurn()-1));\n\t\t\t\tif (shapeTable.getWinRate(hash) > shapeThreshold) {\n\t\t\t\t\tmoves.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "ShapeSuggester.getMoves()", "testcase": false, "constructor": false, "invocations": ["clear", "getAllPointsOnBoard", "getColorAt", "getHash", "get", "getTurn", "getWinRate", "add"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}