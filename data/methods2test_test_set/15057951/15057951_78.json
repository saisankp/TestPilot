{"test_class": {"identifier": "ReflectionSetterInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReflectionSetterInvoker reflectionSetterInvoker;", "modifier": "private", "type": "ReflectionSetterInvoker", "declarator": "reflectionSetterInvoker", "var_name": "reflectionSetterInvoker"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/util/reflection/ReflectionSetterInvokerTest.java"}, "test_case": {"identifier": "shouldFindSingleArgumentVoidMethodAndRecognizeItAsASetterNevermindingNamingConvention", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFindSingleArgumentVoidMethodAndRecognizeItAsASetterNevermindingNamingConvention() {\n        // given\n        // when\n        Method method = reflectionSetterInvoker.findSetter(ReflectionSetterInvokerTestObject.class, \"TEST\");\n\n        // then\n        assertThat(method.getName()).isEqualTo(\"inconventionalSetter\");\n    }", "signature": "void shouldFindSingleArgumentVoidMethodAndRecognizeItAsASetterNevermindingNamingConvention()", "full_signature": "@Test public void shouldFindSingleArgumentVoidMethodAndRecognizeItAsASetterNevermindingNamingConvention()", "class_method_signature": "ReflectionSetterInvokerTest.shouldFindSingleArgumentVoidMethodAndRecognizeItAsASetterNevermindingNamingConvention()", "testcase": true, "constructor": false, "invocations": ["findSetter", "isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "ReflectionSetterInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Class<?>, Map<Class<?>, Setter>> setterCache = new ConcurrentHashMap<Class<?>, Map<Class<?>, Setter>>();", "modifier": "private final", "type": "Map<Class<?>, Map<Class<?>, Setter>>", "declarator": "setterCache = new ConcurrentHashMap<Class<?>, Map<Class<?>, Setter>>()", "var_name": "setterCache"}], "methods": [{"identifier": "invokeSetter", "parameters": "(Object setterHostObject, Object forArg)", "modifiers": "public", "return": "boolean", "signature": "boolean invokeSetter(Object setterHostObject, Object forArg)", "full_signature": "public boolean invokeSetter(Object setterHostObject, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.invokeSetter(Object setterHostObject, Object forArg)", "testcase": false, "constructor": false}, {"identifier": "invokerSetter", "parameters": "(Method setter, Object setterHostObject, Object argument)", "modifiers": "public static", "return": "void", "signature": "void invokerSetter(Method setter, Object setterHostObject, Object argument)", "full_signature": "public static void invokerSetter(Method setter, Object setterHostObject, Object argument)", "class_method_signature": "ReflectionSetterInvoker.invokerSetter(Method setter, Object setterHostObject, Object argument)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionForSetterInvocation", "parameters": "(Exception exception, Method setter, Object setterHostObject, Object argument)", "modifiers": "private static", "return": "void", "signature": "void throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "full_signature": "private static void throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "class_method_signature": "ReflectionSetterInvoker.throwExceptionForSetterInvocation(Exception exception, Method setter, Object setterHostObject, Object argument)", "testcase": false, "constructor": false}, {"identifier": "findSetter", "parameters": "(Class<?> setterHostClass, Object forArg)", "modifiers": "public", "return": "Method", "signature": "Method findSetter(Class<?> setterHostClass, Object forArg)", "full_signature": "public Method findSetter(Class<?> setterHostClass, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.findSetter(Class<?> setterHostClass, Object forArg)", "testcase": false, "constructor": false}, {"identifier": "lookupSetter", "parameters": "(Class<?> setterHostClass, Class<?> propertyClass)", "modifiers": "private", "return": "Method", "signature": "Method lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "full_signature": "private Method lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "class_method_signature": "ReflectionSetterInvoker.lookupSetter(Class<?> setterHostClass, Class<?> propertyClass)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(Method method, Class<?> propertyClass)", "modifiers": "private", "return": "boolean", "signature": "boolean isSetter(Method method, Class<?> propertyClass)", "full_signature": "private boolean isSetter(Method method, Class<?> propertyClass)", "class_method_signature": "ReflectionSetterInvoker.isSetter(Method method, Class<?> propertyClass)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/util/reflection/ReflectionSetterInvoker.java"}, "focal_method": {"identifier": "findSetter", "parameters": "(Class<?> setterHostClass, Object forArg)", "modifiers": "public", "return": "Method", "body": "public Method findSetter(Class<?> setterHostClass, Object forArg) {\n        Class<?> argClass = forArg.getClass();\n        Map<Class<?>, Setter> settersMap = setterCache.get(setterHostClass);\n        if (settersMap == null) {\n            settersMap = new ConcurrentHashMap<Class<?>, Setter>();\n            setterCache.put(getClass(), settersMap);\n        }\n\n        Setter setter = settersMap.get(argClass);\n        if (setter == null) {\n            Method method = lookupSetter(setterHostClass, argClass);\n            setter = new Setter(method);\n            settersMap.put(argClass, setter);\n        }\n\n        return setter.getMethod();\n    }", "signature": "Method findSetter(Class<?> setterHostClass, Object forArg)", "full_signature": "public Method findSetter(Class<?> setterHostClass, Object forArg)", "class_method_signature": "ReflectionSetterInvoker.findSetter(Class<?> setterHostClass, Object forArg)", "testcase": false, "constructor": false, "invocations": ["getClass", "get", "put", "getClass", "get", "lookupSetter", "put", "getMethod"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}