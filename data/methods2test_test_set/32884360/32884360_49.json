{"test_class": {"identifier": "StringsTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/util/StringsTest.java"}, "test_case": {"identifier": "hex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hex() {\n        assertEquals(\"\", Strings.hex(new byte[]{}));\n        assertEquals(\"00\", Strings.hex(new byte[]{ 0 }));\n        assertEquals(\"0001\", Strings.hex(new byte[]{ 0, 1 }));\n        assertEquals(\"00017F80FF\", Strings.hex(new byte[]{ 0, 1, 127, (byte)128, (byte)255}));\n    }", "signature": "void hex()", "full_signature": "@Test public void hex()", "class_method_signature": "StringsTest.hex()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hex", "assertEquals", "hex", "assertEquals", "hex", "assertEquals", "hex"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NL = nl();", "modifier": "public static final", "type": "String", "declarator": "NL = nl()", "var_name": "NL"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Strings.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Strings.class)", "var_name": "LOG"}], "methods": [{"identifier": "entriesToString", "parameters": "(Map<?, ?> map)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> entriesToString(Map<?, ?> map)", "full_signature": "public static List<String> entriesToString(Map<?, ?> map)", "class_method_signature": "Strings.entriesToString(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "nl", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String nl()", "full_signature": "public static String nl()", "class_method_signature": "Strings.nl()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<?> strings)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<?> strings)", "full_signature": "public static String join(Collection<?> strings)", "class_method_signature": "Strings.join(Collection<?> strings)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object... strings)", "modifiers": "public static", "return": "String", "signature": "String join(Object... strings)", "full_signature": "public static String join(Object... strings)", "class_method_signature": "Strings.join(Object... strings)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<?> strings, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<?> strings, String delimiter)", "full_signature": "public static String join(Collection<?> strings, String delimiter)", "class_method_signature": "Strings.join(Collection<?> strings, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "repeatString", "parameters": "(String str, int count)", "modifiers": "public static", "return": "String", "signature": "String repeatString(String str, int count)", "full_signature": "public static String repeatString(String str, int count)", "class_method_signature": "Strings.repeatString(String str, int count)", "testcase": false, "constructor": false}, {"identifier": "stringAndSort", "parameters": "(Collection<?> inputs)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> stringAndSort(Collection<?> inputs)", "full_signature": "public static List<String> stringAndSort(Collection<?> inputs)", "class_method_signature": "Strings.stringAndSort(Collection<?> inputs)", "testcase": false, "constructor": false}, {"identifier": "stringAndSort", "parameters": "(Map<?,?> inputs)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> stringAndSort(Map<?,?> inputs)", "full_signature": "public static List<String> stringAndSort(Map<?,?> inputs)", "class_method_signature": "Strings.stringAndSort(Map<?,?> inputs)", "testcase": false, "constructor": false}, {"identifier": "stringAndSort", "parameters": "(Object item)", "modifiers": "private static", "return": "String", "signature": "String stringAndSort(Object item)", "full_signature": "private static String stringAndSort(Object item)", "class_method_signature": "Strings.stringAndSort(Object item)", "testcase": false, "constructor": false}, {"identifier": "dumpResource", "parameters": "(Class<?> forClass, String path)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> dumpResource(Class<?> forClass, String path)", "full_signature": "public static List<String> dumpResource(Class<?> forClass, String path)", "class_method_signature": "Strings.dumpResource(Class<?> forClass, String path)", "testcase": false, "constructor": false}, {"identifier": "dumpURLs", "parameters": "(Enumeration<URL> urls)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> dumpURLs(Enumeration<URL> urls)", "full_signature": "public static List<String> dumpURLs(Enumeration<URL> urls)", "class_method_signature": "Strings.dumpURLs(Enumeration<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "dumpException", "parameters": "(Throwable t)", "modifiers": "@SuppressWarnings(\"unused\") // primarily useful in debuggers public static", "return": "String[]", "signature": "String[] dumpException(Throwable t)", "full_signature": "@SuppressWarnings(\"unused\") // primarily useful in debuggers public static String[] dumpException(Throwable t)", "class_method_signature": "Strings.dumpException(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "toOctal", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toOctal(byte[] bytes)", "full_signature": "public static String toOctal(byte[] bytes)", "class_method_signature": "Strings.toOctal(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String hex(byte[] bytes)", "full_signature": "public static String hex(byte[] bytes)", "class_method_signature": "Strings.hex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(ByteSource byteSource)", "modifiers": "public static", "return": "String", "signature": "String hex(ByteSource byteSource)", "full_signature": "public static String hex(ByteSource byteSource)", "class_method_signature": "Strings.hex(ByteSource byteSource)", "testcase": false, "constructor": false}, {"identifier": "hex", "parameters": "(byte[] bytes, int start, int length)", "modifiers": "public static", "return": "String", "signature": "String hex(byte[] bytes, int start, int length)", "full_signature": "public static String hex(byte[] bytes, int start, int length)", "class_method_signature": "Strings.hex(byte[] bytes, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "hexCharToInt", "parameters": "(char c)", "modifiers": "private static", "return": "int", "signature": "int hexCharToInt(char c)", "full_signature": "private static int hexCharToInt(char c)", "class_method_signature": "Strings.hexCharToInt(char c)", "testcase": false, "constructor": false}, {"identifier": "hexCharsToByte", "parameters": "(char highChar, char lowChar)", "modifiers": "private static", "return": "byte", "signature": "byte hexCharsToByte(char highChar, char lowChar)", "full_signature": "private static byte hexCharsToByte(char highChar, char lowChar)", "class_method_signature": "Strings.hexCharsToByte(char highChar, char lowChar)", "testcase": false, "constructor": false}, {"identifier": "parseHexWithout0x", "parameters": "(String st)", "modifiers": "public static", "return": "ByteSource", "signature": "ByteSource parseHexWithout0x(String st)", "full_signature": "public static ByteSource parseHexWithout0x(String st)", "class_method_signature": "Strings.parseHexWithout0x(String st)", "testcase": false, "constructor": false}, {"identifier": "parseHex", "parameters": "(String string)", "modifiers": "public static", "return": "ByteSource", "signature": "ByteSource parseHex(String string)", "full_signature": "public static ByteSource parseHex(String string)", "class_method_signature": "Strings.parseHex(String string)", "testcase": false, "constructor": false}, {"identifier": "readStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readStream(InputStream is)", "full_signature": "public static List<String> readStream(InputStream is)", "class_method_signature": "Strings.readStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "readStreamTo", "parameters": "(InputStream is, Appendable out, boolean keepNL)", "modifiers": "public static", "return": "void", "signature": "void readStreamTo(InputStream is, Appendable out, boolean keepNL)", "full_signature": "public static void readStreamTo(InputStream is, Appendable out, boolean keepNL)", "class_method_signature": "Strings.readStreamTo(InputStream is, Appendable out, boolean keepNL)", "testcase": false, "constructor": false}, {"identifier": "readerTo", "parameters": "(BufferedReader reader, Appendable out, boolean keepNL)", "modifiers": "private static", "return": "void", "signature": "void readerTo(BufferedReader reader, Appendable out, boolean keepNL)", "full_signature": "private static void readerTo(BufferedReader reader, Appendable out, boolean keepNL)", "class_method_signature": "Strings.readerTo(BufferedReader reader, Appendable out, boolean keepNL)", "testcase": false, "constructor": false}, {"identifier": "readJarConnectionTo", "parameters": "(JarURLConnection connection, List<String> result)", "modifiers": "private static", "return": "void", "signature": "void readJarConnectionTo(JarURLConnection connection, List<String> result)", "full_signature": "private static void readJarConnectionTo(JarURLConnection connection, List<String> result)", "class_method_signature": "Strings.readJarConnectionTo(JarURLConnection connection, List<String> result)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Multimap<T,?> map)", "modifiers": "public static", "return": "String", "signature": "String toString(Multimap<T,?> map)", "full_signature": "public static String toString(Multimap<T,?> map)", "class_method_signature": "Strings.toString(Multimap<T,?> map)", "testcase": false, "constructor": false}, {"identifier": "stripr", "parameters": "(String input, String suffix)", "modifiers": "public static", "return": "String", "signature": "String stripr(String input, String suffix)", "full_signature": "public static String stripr(String input, String suffix)", "class_method_signature": "Strings.stripr(String input, String suffix)", "testcase": false, "constructor": false}, {"identifier": "dumpFile", "parameters": "(File file)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> dumpFile(File file)", "full_signature": "public static List<String> dumpFile(File file)", "class_method_signature": "Strings.dumpFile(File file)", "testcase": false, "constructor": false}, {"identifier": "dumpFileToString", "parameters": "(File file)", "modifiers": "public static", "return": "String", "signature": "String dumpFileToString(File file)", "full_signature": "public static String dumpFileToString(File file)", "class_method_signature": "Strings.dumpFileToString(File file)", "testcase": false, "constructor": false}, {"identifier": "mapToString", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> mapToString(Collection<?> collection)", "full_signature": "public static List<String> mapToString(Collection<?> collection)", "class_method_signature": "Strings.mapToString(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "equalCharsets", "parameters": "(Charset one, String two)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalCharsets(Charset one, String two)", "full_signature": "public static boolean equalCharsets(Charset one, String two)", "class_method_signature": "Strings.equalCharsets(Charset one, String two)", "testcase": false, "constructor": false}, {"identifier": "bufferedReader", "parameters": "(InputStream is)", "modifiers": "private static", "return": "BufferedReader", "signature": "BufferedReader bufferedReader(InputStream is)", "full_signature": "private static BufferedReader bufferedReader(InputStream is)", "class_method_signature": "Strings.bufferedReader(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "formatMD5", "parameters": "(byte[] md5, boolean toLowerCase)", "modifiers": "public static", "return": "String", "signature": "String formatMD5(byte[] md5, boolean toLowerCase)", "full_signature": "public static String formatMD5(byte[] md5, boolean toLowerCase)", "class_method_signature": "Strings.formatMD5(byte[] md5, boolean toLowerCase)", "testcase": false, "constructor": false}, {"identifier": "truncateIfNecessary", "parameters": "(String str, int codePointCount)", "modifiers": "public static", "return": "String", "signature": "String truncateIfNecessary(String str, int codePointCount)", "full_signature": "public static String truncateIfNecessary(String str, int codePointCount)", "class_method_signature": "Strings.truncateIfNecessary(String str, int codePointCount)", "testcase": false, "constructor": false}, {"identifier": "toBase64", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toBase64(byte[] bytes)", "full_signature": "public static String toBase64(byte[] bytes)", "class_method_signature": "Strings.toBase64(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toBase64", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String toBase64(byte[] bytes, int offset, int length)", "full_signature": "public static String toBase64(byte[] bytes, int offset, int length)", "class_method_signature": "Strings.toBase64(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "fromBase64", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] fromBase64(CharSequence cs)", "full_signature": "public static byte[] fromBase64(CharSequence cs)", "class_method_signature": "Strings.fromBase64(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "parseQualifiedName", "parameters": "(String arg, int maxParts)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseQualifiedName(String arg, int maxParts)", "full_signature": "public static String[] parseQualifiedName(String arg, int maxParts)", "class_method_signature": "Strings.parseQualifiedName(String arg, int maxParts)", "testcase": false, "constructor": false}, {"identifier": "quotedIdent", "parameters": "(String s, char quote, boolean force)", "modifiers": "public static", "return": "String", "signature": "String quotedIdent(String s, char quote, boolean force)", "full_signature": "public static String quotedIdent(String s, char quote, boolean force)", "class_method_signature": "Strings.quotedIdent(String s, char quote, boolean force)", "testcase": false, "constructor": false}, {"identifier": "escapeIdentifier", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String escapeIdentifier(String s)", "full_signature": "public static String escapeIdentifier(String s)", "class_method_signature": "Strings.escapeIdentifier(String s)", "testcase": false, "constructor": false}, {"identifier": "consumeIdentifier", "parameters": "(String arg, int begin, int end, boolean toLower)", "modifiers": "private static", "return": "String", "signature": "String consumeIdentifier(String arg, int begin, int end, boolean toLower)", "full_signature": "private static String consumeIdentifier(String arg, int begin, int end, boolean toLower)", "class_method_signature": "Strings.consumeIdentifier(String arg, int begin, int end, boolean toLower)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/util/Strings.java"}, "focal_method": {"identifier": "hex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "body": "public static String hex(byte[] bytes) {\n        return hex(bytes, 0, bytes.length);\n    }", "signature": "String hex(byte[] bytes)", "full_signature": "public static String hex(byte[] bytes)", "class_method_signature": "Strings.hex(byte[] bytes)", "testcase": false, "constructor": false, "invocations": ["hex"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}