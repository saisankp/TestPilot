{"test_class": {"identifier": "ExistsTransactionRequestTest", "superclass": "extends AbstractReadTransactionRequestTest<ExistsTransactionRequest>", "interfaces": "", "fields": [{"original_string": "private static final ExistsTransactionRequest OBJECT = new ExistsTransactionRequest(\n            TRANSACTION_IDENTIFIER, 0, ACTOR_REF, PATH, SNAPSHOT_ONLY);", "modifier": "private static final", "type": "ExistsTransactionRequest", "declarator": "OBJECT = new ExistsTransactionRequest(\n            TRANSACTION_IDENTIFIER, 0, ACTOR_REF, PATH, SNAPSHOT_ONLY)", "var_name": "OBJECT"}], "file": "opendaylight/md-sal/cds-access-api/src/test/java/org/opendaylight/controller/cluster/access/commands/ExistsTransactionRequestTest.java"}, "test_case": {"identifier": "cloneAsVersionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cloneAsVersionTest() {\n        final ABIVersion cloneVersion = ABIVersion.TEST_FUTURE_VERSION;\n        final ExistsTransactionRequest clone = OBJECT.cloneAsVersion(cloneVersion);\n        Assert.assertEquals(cloneVersion, clone.getVersion());\n        Assert.assertEquals(OBJECT.getPath(), clone.getPath());\n        Assert.assertEquals(OBJECT.isSnapshotOnly(), clone.isSnapshotOnly());\n    }", "signature": "void cloneAsVersionTest()", "full_signature": "@Test public void cloneAsVersionTest()", "class_method_signature": "ExistsTransactionRequestTest.cloneAsVersionTest()", "testcase": true, "constructor": false, "invocations": ["cloneAsVersion", "assertEquals", "getVersion", "assertEquals", "getPath", "getPath", "assertEquals", "isSnapshotOnly", "isSnapshotOnly"]}, "focal_class": {"identifier": "ExistsTransactionRequest", "superclass": "extends AbstractReadPathTransactionRequest<ExistsTransactionRequest>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ExistsTransactionRequest", "parameters": "(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull  ActorRef replyTo, final @NonNull YangInstanceIdentifier path, final boolean snapshotOnly)", "modifiers": "public", "return": "", "signature": " ExistsTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull  ActorRef replyTo, final @NonNull YangInstanceIdentifier path, final boolean snapshotOnly)", "full_signature": "public  ExistsTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull  ActorRef replyTo, final @NonNull YangInstanceIdentifier path, final boolean snapshotOnly)", "class_method_signature": "ExistsTransactionRequest.ExistsTransactionRequest(final @NonNull TransactionIdentifier identifier, final long sequence,\n            final @NonNull  ActorRef replyTo, final @NonNull YangInstanceIdentifier path, final boolean snapshotOnly)", "testcase": false, "constructor": true}, {"identifier": "ExistsTransactionRequest", "parameters": "(final ExistsTransactionRequest request, final ABIVersion version)", "modifiers": "private", "return": "", "signature": " ExistsTransactionRequest(final ExistsTransactionRequest request, final ABIVersion version)", "full_signature": "private  ExistsTransactionRequest(final ExistsTransactionRequest request, final ABIVersion version)", "class_method_signature": "ExistsTransactionRequest.ExistsTransactionRequest(final ExistsTransactionRequest request, final ABIVersion version)", "testcase": false, "constructor": true}, {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ExistsTransactionRequest", "signature": "ExistsTransactionRequest cloneAsVersion(final ABIVersion version)", "full_signature": "@Override protected ExistsTransactionRequest cloneAsVersion(final ABIVersion version)", "class_method_signature": "ExistsTransactionRequest.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false}, {"identifier": "externalizableProxy", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ExistsTransactionRequestProxyV1", "signature": "ExistsTransactionRequestProxyV1 externalizableProxy(final ABIVersion version)", "full_signature": "@Override protected ExistsTransactionRequestProxyV1 externalizableProxy(final ABIVersion version)", "class_method_signature": "ExistsTransactionRequest.externalizableProxy(final ABIVersion version)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-api/src/main/java/org/opendaylight/controller/cluster/access/commands/ExistsTransactionRequest.java"}, "focal_method": {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ExistsTransactionRequest", "body": "@Override\n    protected ExistsTransactionRequest cloneAsVersion(final ABIVersion version) {\n        return new ExistsTransactionRequest(this, version);\n    }", "signature": "ExistsTransactionRequest cloneAsVersion(final ABIVersion version)", "full_signature": "@Override protected ExistsTransactionRequest cloneAsVersion(final ABIVersion version)", "class_method_signature": "ExistsTransactionRequest.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}