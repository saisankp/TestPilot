{"test_class": {"identifier": "FlowsValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private final double r = 0.04;", "modifier": "private final", "type": "double", "declarator": "r = 0.04", "var_name": "r"}, {"original_string": "private final double x = 0.423;", "modifier": "private final", "type": "double", "declarator": "x = 0.423", "var_name": "x"}, {"original_string": "private final double g1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "g1 = 0.0", "var_name": "g1"}, {"original_string": "private final double g2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "g2 = 0.0", "var_name": "g2"}, {"original_string": "private final double b1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "b1 = 0.0", "var_name": "b1"}, {"original_string": "private final double b2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "b2 = 0.0", "var_name": "b2"}, {"original_string": "private final double rho1 = 1;", "modifier": "private final", "type": "double", "declarator": "rho1 = 1", "var_name": "rho1"}, {"original_string": "private final double rho2 = 11.249999728;", "modifier": "private final", "type": "double", "declarator": "rho2 = 11.249999728", "var_name": "rho2"}, {"original_string": "private final double alpha1 = 0.0;", "modifier": "private final", "type": "double", "declarator": "alpha1 = 0.0", "var_name": "alpha1"}, {"original_string": "private final double alpha2 = 0.0;", "modifier": "private final", "type": "double", "declarator": "alpha2 = 0.0", "var_name": "alpha2"}, {"original_string": "private final double u1 = 236.80258178710938;", "modifier": "private final", "type": "double", "declarator": "u1 = 236.80258178710938", "var_name": "u1"}, {"original_string": "private final double ratedU1 = 225.0;", "modifier": "private final", "type": "double", "declarator": "ratedU1 = 225.0", "var_name": "ratedU1"}, {"original_string": "private final double u2 = 21.04814910888672;", "modifier": "private final", "type": "double", "declarator": "u2 = 21.04814910888672", "var_name": "u2"}, {"original_string": "private final double ratedU2 = 20.0;", "modifier": "private final", "type": "double", "declarator": "ratedU2 = 20.0", "var_name": "ratedU2"}, {"original_string": "private final double theta1 = 0.1257718437996544;", "modifier": "private final", "type": "double", "declarator": "theta1 = 0.1257718437996544", "var_name": "theta1"}, {"original_string": "private final double theta2 = 0.12547118123496284;", "modifier": "private final", "type": "double", "declarator": "theta2 = 0.12547118123496284", "var_name": "theta2"}, {"original_string": "private final boolean connected1 = true;", "modifier": "private final", "type": "boolean", "declarator": "connected1 = true", "var_name": "connected1"}, {"original_string": "private final boolean connected2 = true;", "modifier": "private final", "type": "boolean", "declarator": "connected2 = true", "var_name": "connected2"}, {"original_string": "private final boolean mainComponent1 = true;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent1 = true", "var_name": "mainComponent1"}, {"original_string": "private final boolean mainComponent2 = true;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent2 = true", "var_name": "mainComponent2"}, {"original_string": "private Bus bus1;", "modifier": "private", "type": "Bus", "declarator": "bus1", "var_name": "bus1"}, {"original_string": "private Bus bus2;", "modifier": "private", "type": "Bus", "declarator": "bus2", "var_name": "bus2"}, {"original_string": "private Terminal terminal1;", "modifier": "private", "type": "Terminal", "declarator": "terminal1", "var_name": "terminal1"}, {"original_string": "private Terminal terminal2;", "modifier": "private", "type": "Terminal", "declarator": "terminal2", "var_name": "terminal2"}, {"original_string": "private Line line1;", "modifier": "private", "type": "Line", "declarator": "line1", "var_name": "line1"}, {"original_string": "private RatioTapChanger ratioTapChanger;", "modifier": "private", "type": "RatioTapChanger", "declarator": "ratioTapChanger", "var_name": "ratioTapChanger"}, {"original_string": "private TwoWindingsTransformer transformer1;", "modifier": "private", "type": "TwoWindingsTransformer", "declarator": "transformer1", "var_name": "transformer1"}, {"original_string": "private ValidationConfig looseConfigSpecificCompatibility;", "modifier": "private", "type": "ValidationConfig", "declarator": "looseConfigSpecificCompatibility", "var_name": "looseConfigSpecificCompatibility"}, {"original_string": "private ValidationConfig strictConfigSpecificCompatibility;", "modifier": "private", "type": "ValidationConfig", "declarator": "strictConfigSpecificCompatibility", "var_name": "strictConfigSpecificCompatibility"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/FlowsValidationTest.java"}, "test_case": {"identifier": "checkNetworkFlows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkNetworkFlows() throws IOException {\n        Line line2 = Mockito.mock(Line.class);\n        Mockito.when(line2.getId()).thenReturn(\"line2\");\n        Mockito.when(line2.getTerminal1()).thenReturn(terminal1);\n        Mockito.when(line2.getTerminal2()).thenReturn(terminal2);\n        Mockito.when(line2.getR()).thenReturn(r);\n        Mockito.when(line2.getX()).thenReturn(x);\n        Mockito.when(line2.getG1()).thenReturn(g1);\n        Mockito.when(line2.getG2()).thenReturn(g2);\n        Mockito.when(line2.getB1()).thenReturn(b1);\n        Mockito.when(line2.getB2()).thenReturn(b2);\n\n        TwoWindingsTransformer transformer2 = Mockito.mock(TwoWindingsTransformer.class);\n        Mockito.when(transformer2.getId()).thenReturn(\"transformer2\");\n        Mockito.when(transformer2.getTerminal1()).thenReturn(terminal1);\n        Mockito.when(transformer2.getTerminal2()).thenReturn(terminal2);\n        Mockito.when(transformer2.getR()).thenReturn(r * (1 - r / 100));\n        Mockito.when(transformer2.getX()).thenReturn(x * (1 - x / 100));\n        Mockito.when(transformer2.getG()).thenReturn(g1 * (1 - g1 / 100));\n        Mockito.when(transformer2.getB()).thenReturn(b1 * 2 * (1 - b1 / 100));\n        Mockito.when(transformer2.getRatioTapChanger()).thenReturn(ratioTapChanger);\n        Mockito.when(transformer2.getOptionalRatioTapChanger()).thenReturn(Optional.ofNullable(ratioTapChanger));\n        Mockito.when(transformer2.hasRatioTapChanger()).thenReturn(true);\n        Mockito.when(transformer2.getRatedU1()).thenReturn(ratedU1);\n        Mockito.when(transformer2.getRatedU2()).thenReturn(ratedU2);\n\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(transformer2, looseConfig, NullWriter.NULL_WRITER));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(transformer2, strictConfig, NullWriter.NULL_WRITER));\n\n        Network network = Mockito.mock(Network.class);\n        Mockito.when(network.getId()).thenReturn(\"network\");\n        Mockito.when(network.getLineStream()).thenAnswer(dummy -> Stream.of(line2, line1));\n        Mockito.when(network.getTwoWindingsTransformerStream()).thenAnswer(dummy -> Stream.of(transformer2, transformer1));\n\n        assertTrue(FlowsValidation.INSTANCE.checkFlows(network, looseConfig, data));\n        assertFalse(FlowsValidation.INSTANCE.checkFlows(network, strictConfig, data));\n\n        assertTrue(ValidationType.FLOWS.check(network, looseConfig, tmpDir));\n        assertFalse(ValidationType.FLOWS.check(network, strictConfig, tmpDir));\n\n        ValidationWriter validationWriter = ValidationUtils.createValidationWriter(network.getId(), looseConfig, NullWriter.NULL_WRITER, ValidationType.FLOWS);\n        assertTrue(ValidationType.FLOWS.check(network, looseConfig, validationWriter));\n    }", "signature": "void checkNetworkFlows()", "full_signature": "@Test public void checkNetworkFlows()", "class_method_signature": "FlowsValidationTest.checkNetworkFlows()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "thenReturn", "when", "getTerminal1", "thenReturn", "when", "getTerminal2", "thenReturn", "when", "getR", "thenReturn", "when", "getX", "thenReturn", "when", "getG1", "thenReturn", "when", "getG2", "thenReturn", "when", "getB1", "thenReturn", "when", "getB2", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getTerminal1", "thenReturn", "when", "getTerminal2", "thenReturn", "when", "getR", "thenReturn", "when", "getX", "thenReturn", "when", "getG", "thenReturn", "when", "getB", "thenReturn", "when", "getRatioTapChanger", "thenReturn", "when", "getOptionalRatioTapChanger", "ofNullable", "thenReturn", "when", "hasRatioTapChanger", "thenReturn", "when", "getRatedU1", "thenReturn", "when", "getRatedU2", "assertTrue", "checkFlows", "assertFalse", "checkFlows", "mock", "thenReturn", "when", "getId", "thenAnswer", "when", "getLineStream", "of", "thenAnswer", "when", "getTwoWindingsTransformerStream", "of", "assertTrue", "checkFlows", "assertFalse", "checkFlows", "assertTrue", "check", "assertFalse", "check", "createValidationWriter", "getId", "assertTrue", "check"]}, "focal_class": {"identifier": "FlowsValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FlowsValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FlowsValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final FlowsValidation INSTANCE = new FlowsValidation();", "modifier": "public static final", "type": "FlowsValidation", "declarator": "INSTANCE = new FlowsValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "FlowsValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " FlowsValidation()", "full_signature": "private  FlowsValidation()", "class_method_signature": "FlowsValidation.FlowsValidation()", "testcase": false, "constructor": true}, {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkDisconnectedTerminal", "parameters": "(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "full_signature": "private static boolean checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "class_method_signature": "FlowsValidation.checkDisconnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "checkConnectedTerminal", "parameters": "(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "full_signature": "private static boolean checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "class_method_signature": "FlowsValidation.checkConnectedTerminal(String id, String terminalNumber, double p, double pCalc, double q, double qCalc, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Line l, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Line l, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(Line l, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(Line l, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(Line l, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, Path file)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkFlows", "parameters": "(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "full_signature": "public boolean checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "class_method_signature": "FlowsValidation.checkFlows(Network network, ValidationConfig config, ValidationWriter flowsWriter)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/FlowsValidation.java"}, "focal_method": {"identifier": "checkFlows", "parameters": "(BranchData branch, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "body": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer) {\n        Objects.requireNonNull(branch);\n        Objects.requireNonNull(branch.getId());\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(writer);\n\n        try (ValidationWriter flowsWriter = ValidationUtils.createValidationWriter(branch.getId(), config, writer, ValidationType.FLOWS)) {\n            return checkFlows(branch, config, flowsWriter);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "class_method_signature": "FlowsValidation.checkFlows(BranchData branch, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "getId", "requireNonNull", "requireNonNull", "createValidationWriter", "getId", "checkFlows"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}