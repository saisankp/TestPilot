{"test_class": {"identifier": "RefreshRateEstimatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/RefreshRateEstimatorTest.java"}, "test_case": {"identifier": "init5hz", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void init5hz() {\n        RefreshRateEstimator estimator = new RefreshRateEstimator();\n        estimator.addSample(0);\n        estimator.addSample(200);\n        assertEquals(5.0, estimator.refreshRate, 0.01);\n        estimator.addSample(400);\n        estimator.addSample(600);\n        assertEquals(5.0, estimator.refreshRate, 0.01);\n    }", "signature": "void init5hz()", "full_signature": "@Test public void init5hz()", "class_method_signature": "RefreshRateEstimatorTest.init5hz()", "testcase": true, "constructor": false, "invocations": ["addSample", "addSample", "assertEquals", "addSample", "addSample", "assertEquals"]}, "focal_class": {"identifier": "RefreshRateEstimator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float epsilon = 0.05f;", "modifier": "private static final", "type": "float", "declarator": "epsilon = 0.05f", "var_name": "epsilon"}, {"original_string": "public float refreshRate = 0;", "modifier": "public", "type": "float", "declarator": "refreshRate = 0", "var_name": "refreshRate"}, {"original_string": "private long lastMillis = -1;", "modifier": "private", "type": "long", "declarator": "lastMillis = -1", "var_name": "lastMillis"}, {"original_string": "private int missedCount = 0;", "modifier": "private", "type": "int", "declarator": "missedCount = 0", "var_name": "missedCount"}], "methods": [{"identifier": "addSample", "parameters": "(long millis)", "modifiers": "public", "return": "void", "signature": "void addSample(long millis)", "full_signature": "public void addSample(long millis)", "class_method_signature": "RefreshRateEstimator.addSample(long millis)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/RefreshRateEstimator.java"}, "focal_method": {"identifier": "addSample", "parameters": "(long millis)", "modifiers": "public", "return": "void", "body": "public void addSample(long millis) {\n        final long delta = millis - lastMillis; // time since last refresh\n        // Deltas over 62 seconds are discarded (so we can handle 1 sample/min)\n        if (0 <= lastMillis && 0 < delta && delta < 62000L) {\n            final float newRefreshRate = 1000f / delta; // Refresh rate based on last 2 samples\n            // Special case for missing sample where refreshRate ~= 2 * newRefreshRate\n            final boolean missed = 2 * newRefreshRate - epsilon < refreshRate && refreshRate < 2 * newRefreshRate + epsilon;\n            if (refreshRate == 0) {\n                refreshRate = newRefreshRate;\n            } else if (missed && missedCount == 0) {\n                // Special case for first missing sample\n                missedCount++;\n            } else {\n                missedCount = 0;\n                // Moving average\n                refreshRate += (newRefreshRate - refreshRate) * 0.5f;\n            }\n\n            // Sanity checks\n            if (refreshRate < 0 || Double.isNaN(refreshRate) || Double.isInfinite(refreshRate)) {\n                Exceptions.report(new Exception(\"Invalid refresh rate, delta = \" + delta + \" refreshRate = \" + refreshRate));\n                refreshRate = 0;\n            }\n        }\n        lastMillis = millis;\n    }", "signature": "void addSample(long millis)", "full_signature": "public void addSample(long millis)", "class_method_signature": "RefreshRateEstimator.addSample(long millis)", "testcase": false, "constructor": false, "invocations": ["isNaN", "isInfinite", "report"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}