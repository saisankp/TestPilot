{"test_class": {"identifier": "ImplementationPlatformReaperTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml/src/test/java/org/jvoicexml/implementation/jvxml/ImplementationPlatformReaperTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() throws InterruptedException {\n        final JVoiceXmlImplementationPlatform platform =\n                new JVoiceXmlImplementationPlatform(null, null, null, null);\n        final Session session = Mockito.mock(Session.class);\n        Mockito.when(session.getSessionId()).thenReturn(\"42\");\n        platform.setSession(session);\n        final ImplementationPlatformReaper reaper =\n                new ImplementationPlatformReaper(platform, null, null);\n        final long delay = 200;\n        reaper.setReapingDelay(delay);\n        reaper.start();\n        Thread.sleep(delay + 100);\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "ImplementationPlatformReaperTest.testRun()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSessionId", "setSession", "setReapingDelay", "start", "sleep"]}, "focal_class": {"identifier": "ImplementationPlatformReaper", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(ImplementationPlatformReaper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(ImplementationPlatformReaper.class)", "var_name": "LOGGER"}, {"original_string": "private static final long DEFAULT_REAPING_DELAY = 120 * 1000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_REAPING_DELAY = 120 * 1000", "var_name": "DEFAULT_REAPING_DELAY"}, {"original_string": "private final JVoiceXmlImplementationPlatform platform;", "modifier": "private final", "type": "JVoiceXmlImplementationPlatform", "declarator": "platform", "var_name": "platform"}, {"original_string": "private final Object lock;", "modifier": "private final", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private boolean stopReaping;", "modifier": "private", "type": "boolean", "declarator": "stopReaping", "var_name": "stopReaping"}, {"original_string": "private final SpokenInput input;", "modifier": "private final", "type": "SpokenInput", "declarator": "input", "var_name": "input"}, {"original_string": "private final SynthesizedOutput output;", "modifier": "private final", "type": "SynthesizedOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private long reapingDelay;", "modifier": "private", "type": "long", "declarator": "reapingDelay", "var_name": "reapingDelay"}], "methods": [{"identifier": "ImplementationPlatformReaper", "parameters": "(\n            final JVoiceXmlImplementationPlatform impl, final JVoiceXmlUserInput in,\n            final JVoiceXmlSystemOutput out)", "modifiers": "", "return": "", "signature": " ImplementationPlatformReaper(\n            final JVoiceXmlImplementationPlatform impl, final JVoiceXmlUserInput in,\n            final JVoiceXmlSystemOutput out)", "full_signature": "  ImplementationPlatformReaper(\n            final JVoiceXmlImplementationPlatform impl, final JVoiceXmlUserInput in,\n            final JVoiceXmlSystemOutput out)", "class_method_signature": "ImplementationPlatformReaper.ImplementationPlatformReaper(\n            final JVoiceXmlImplementationPlatform impl, final JVoiceXmlUserInput in,\n            final JVoiceXmlSystemOutput out)", "testcase": false, "constructor": true}, {"identifier": "setReapingDelay", "parameters": "(final long delay)", "modifiers": "public", "return": "void", "signature": "void setReapingDelay(final long delay)", "full_signature": "public void setReapingDelay(final long delay)", "class_method_signature": "ImplementationPlatformReaper.setReapingDelay(final long delay)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ImplementationPlatformReaper.run()", "testcase": false, "constructor": false}, {"identifier": "forceReturnResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void forceReturnResources()", "full_signature": "private void forceReturnResources()", "class_method_signature": "ImplementationPlatformReaper.forceReturnResources()", "testcase": false, "constructor": false}, {"identifier": "stopReaping", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopReaping()", "full_signature": "public void stopReaping()", "class_method_signature": "ImplementationPlatformReaper.stopReaping()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/implementation/jvxml/ImplementationPlatformReaper.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        LOGGER.info(\"implementation platform reaper started with a delay of \"\n                + reapingDelay + \" msecs\");\n        synchronized (lock) {\n            try {\n                lock.wait(reapingDelay);\n                if (!stopReaping) {\n                    LOGGER.info(\"delay exceeded: cleaning up\");\n                    forceReturnResources();\n                }\n            } catch (InterruptedException e) {\n                return;\n            }\n        }\n        LOGGER.info(\"reaper stopped\");\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ImplementationPlatformReaper.run()", "testcase": false, "constructor": false, "invocations": ["info", "wait", "info", "forceReturnResources", "info"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}