{"test_class": {"identifier": "LightProcessRuntimeTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm/jbpm-flow/src/test/java/org/jbpm/process/instance/LightProcessRuntimeTest.java"}, "test_case": {"identifier": "testInstantiation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstantiation() {\n        LightProcessRuntimeServiceProvider services =\n                new LightProcessRuntimeServiceProvider();\n\n        MyProcess myProcess = new MyProcess();\n        LightProcessRuntimeContext rtc = new LightProcessRuntimeContext(\n                Collections.singletonList(myProcess.process));\n\n        LightProcessRuntime rt = new LightProcessRuntime(rtc, services);\n\n        rt.startProcess(myProcess.process.getId());\n\n        assertEquals(\"Hello!\", myProcess.result);\n\n    }", "signature": "void testInstantiation()", "full_signature": "@Test public void testInstantiation()", "class_method_signature": "LightProcessRuntimeTest.testInstantiation()", "testcase": true, "constructor": false, "invocations": ["singletonList", "startProcess", "getId", "assertEquals"]}, "focal_class": {"identifier": "LightProcessRuntime", "superclass": "", "interfaces": "implements InternalProcessRuntime", "fields": [{"original_string": "private ProcessRuntimeContext runtimeContext;", "modifier": "private", "type": "ProcessRuntimeContext", "declarator": "runtimeContext", "var_name": "runtimeContext"}, {"original_string": "private final InternalKnowledgeRuntime knowledgeRuntime;", "modifier": "private final", "type": "InternalKnowledgeRuntime", "declarator": "knowledgeRuntime", "var_name": "knowledgeRuntime"}, {"original_string": "private ProcessInstanceManager processInstanceManager;", "modifier": "private", "type": "ProcessInstanceManager", "declarator": "processInstanceManager", "var_name": "processInstanceManager"}, {"original_string": "private SignalManager signalManager;", "modifier": "private", "type": "SignalManager", "declarator": "signalManager", "var_name": "signalManager"}, {"original_string": "private JobsService jobService;", "modifier": "private", "type": "JobsService", "declarator": "jobService", "var_name": "jobService"}, {"original_string": "private ProcessEventSupport processEventSupport;", "modifier": "private", "type": "ProcessEventSupport", "declarator": "processEventSupport", "var_name": "processEventSupport"}, {"original_string": "private final WorkItemManager workItemManager;", "modifier": "private final", "type": "WorkItemManager", "declarator": "workItemManager", "var_name": "workItemManager"}, {"original_string": "private UnitOfWorkManager unitOfWorkManager;", "modifier": "private", "type": "UnitOfWorkManager", "declarator": "unitOfWorkManager", "var_name": "unitOfWorkManager"}], "methods": [{"identifier": "ofProcess", "parameters": "(Process p)", "modifiers": "public static", "return": "LightProcessRuntime", "signature": "LightProcessRuntime ofProcess(Process p)", "full_signature": "public static LightProcessRuntime ofProcess(Process p)", "class_method_signature": "LightProcessRuntime.ofProcess(Process p)", "testcase": false, "constructor": false}, {"identifier": "LightProcessRuntime", "parameters": "(ProcessRuntimeContext runtimeContext, ProcessRuntimeServiceProvider services)", "modifiers": "public", "return": "", "signature": " LightProcessRuntime(ProcessRuntimeContext runtimeContext, ProcessRuntimeServiceProvider services)", "full_signature": "public  LightProcessRuntime(ProcessRuntimeContext runtimeContext, ProcessRuntimeServiceProvider services)", "class_method_signature": "LightProcessRuntime.LightProcessRuntime(ProcessRuntimeContext runtimeContext, ProcessRuntimeServiceProvider services)", "testcase": false, "constructor": true}, {"identifier": "initStartTimers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initStartTimers()", "full_signature": "public void initStartTimers()", "class_method_signature": "LightProcessRuntime.initStartTimers()", "testcase": false, "constructor": false}, {"identifier": "startProcess", "parameters": "(String processId)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance startProcess(String processId)", "full_signature": "public ProcessInstance startProcess(String processId)", "class_method_signature": "LightProcessRuntime.startProcess(String processId)", "testcase": false, "constructor": false}, {"identifier": "startProcess", "parameters": "(String processId, Map<String, Object> parameters)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance startProcess(String processId, Map<String, Object> parameters)", "full_signature": "public ProcessInstance startProcess(String processId, Map<String, Object> parameters)", "class_method_signature": "LightProcessRuntime.startProcess(String processId, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "startProcess", "parameters": "(String processId, Map<String, Object> parameters, String trigger)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance startProcess(String processId, Map<String, Object> parameters, String trigger)", "full_signature": "public ProcessInstance startProcess(String processId, Map<String, Object> parameters, String trigger)", "class_method_signature": "LightProcessRuntime.startProcess(String processId, Map<String, Object> parameters, String trigger)", "testcase": false, "constructor": false}, {"identifier": "createProcessInstance", "parameters": "(String processId, Map<String, Object> parameters)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance createProcessInstance(String processId, Map<String, Object> parameters)", "full_signature": "public ProcessInstance createProcessInstance(String processId, Map<String, Object> parameters)", "class_method_signature": "LightProcessRuntime.createProcessInstance(String processId, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "startProcessInstance", "parameters": "(String processInstanceId, String trigger)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance startProcessInstance(String processInstanceId, String trigger)", "full_signature": "public ProcessInstance startProcessInstance(String processInstanceId, String trigger)", "class_method_signature": "LightProcessRuntime.startProcessInstance(String processInstanceId, String trigger)", "testcase": false, "constructor": false}, {"identifier": "startProcessInstance", "parameters": "(String processInstanceId)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance startProcessInstance(String processInstanceId)", "full_signature": "public ProcessInstance startProcessInstance(String processInstanceId)", "class_method_signature": "LightProcessRuntime.startProcessInstance(String processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "startProcess", "parameters": "(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "ProcessInstance", "signature": "ProcessInstance startProcess(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "full_signature": "@Override public ProcessInstance startProcess(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "class_method_signature": "LightProcessRuntime.startProcess(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "createProcessInstance", "parameters": "(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "ProcessInstance", "signature": "ProcessInstance createProcessInstance(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "full_signature": "@Override public ProcessInstance createProcessInstance(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "class_method_signature": "LightProcessRuntime.createProcessInstance(String processId, CorrelationKey correlationKey, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "createProcessInstance", "parameters": "(Process process, CorrelationKey correlationKey, Map<String, Object> parameters)", "modifiers": "private", "return": "org.jbpm.process.instance.ProcessInstance", "signature": "org.jbpm.process.instance.ProcessInstance createProcessInstance(Process process, CorrelationKey correlationKey, Map<String, Object> parameters)", "full_signature": "private org.jbpm.process.instance.ProcessInstance createProcessInstance(Process process, CorrelationKey correlationKey, Map<String, Object> parameters)", "class_method_signature": "LightProcessRuntime.createProcessInstance(Process process, CorrelationKey correlationKey, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "getProcessInstanceManager", "parameters": "()", "modifiers": "public", "return": "ProcessInstanceManager", "signature": "ProcessInstanceManager getProcessInstanceManager()", "full_signature": "public ProcessInstanceManager getProcessInstanceManager()", "class_method_signature": "LightProcessRuntime.getProcessInstanceManager()", "testcase": false, "constructor": false}, {"identifier": "getJobsService", "parameters": "()", "modifiers": "public", "return": "JobsService", "signature": "JobsService getJobsService()", "full_signature": "public JobsService getJobsService()", "class_method_signature": "LightProcessRuntime.getJobsService()", "testcase": false, "constructor": false}, {"identifier": "getSignalManager", "parameters": "()", "modifiers": "public", "return": "SignalManager", "signature": "SignalManager getSignalManager()", "full_signature": "public SignalManager getSignalManager()", "class_method_signature": "LightProcessRuntime.getSignalManager()", "testcase": false, "constructor": false}, {"identifier": "getProcessInstances", "parameters": "()", "modifiers": "public", "return": "Collection<ProcessInstance>", "signature": "Collection<ProcessInstance> getProcessInstances()", "full_signature": "public Collection<ProcessInstance> getProcessInstances()", "class_method_signature": "LightProcessRuntime.getProcessInstances()", "testcase": false, "constructor": false}, {"identifier": "getProcessInstance", "parameters": "(String id)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance getProcessInstance(String id)", "full_signature": "public ProcessInstance getProcessInstance(String id)", "class_method_signature": "LightProcessRuntime.getProcessInstance(String id)", "testcase": false, "constructor": false}, {"identifier": "getProcessInstance", "parameters": "(String id, boolean readOnly)", "modifiers": "public", "return": "ProcessInstance", "signature": "ProcessInstance getProcessInstance(String id, boolean readOnly)", "full_signature": "public ProcessInstance getProcessInstance(String id, boolean readOnly)", "class_method_signature": "LightProcessRuntime.getProcessInstance(String id, boolean readOnly)", "testcase": false, "constructor": false}, {"identifier": "removeProcessInstance", "parameters": "(ProcessInstance processInstance)", "modifiers": "public", "return": "void", "signature": "void removeProcessInstance(ProcessInstance processInstance)", "full_signature": "public void removeProcessInstance(ProcessInstance processInstance)", "class_method_signature": "LightProcessRuntime.removeProcessInstance(ProcessInstance processInstance)", "testcase": false, "constructor": false}, {"identifier": "initProcessEventListeners", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initProcessEventListeners()", "full_signature": "public void initProcessEventListeners()", "class_method_signature": "LightProcessRuntime.initProcessEventListeners()", "testcase": false, "constructor": false}, {"identifier": "removeProcessEventListeners", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeProcessEventListeners()", "full_signature": "public void removeProcessEventListeners()", "class_method_signature": "LightProcessRuntime.removeProcessEventListeners()", "testcase": false, "constructor": false}, {"identifier": "removeProcessEventListener", "parameters": "(Process process)", "modifiers": "private", "return": "void", "signature": "void removeProcessEventListener(Process process)", "full_signature": "private void removeProcessEventListener(Process process)", "class_method_signature": "LightProcessRuntime.removeProcessEventListener(Process process)", "testcase": false, "constructor": false}, {"identifier": "initProcessEventListener", "parameters": "(Process process)", "modifiers": "private", "return": "void", "signature": "void initProcessEventListener(Process process)", "full_signature": "private void initProcessEventListener(Process process)", "class_method_signature": "LightProcessRuntime.initProcessEventListener(Process process)", "testcase": false, "constructor": false}, {"identifier": "getProcessEventSupport", "parameters": "()", "modifiers": "public", "return": "ProcessEventSupport", "signature": "ProcessEventSupport getProcessEventSupport()", "full_signature": "public ProcessEventSupport getProcessEventSupport()", "class_method_signature": "LightProcessRuntime.getProcessEventSupport()", "testcase": false, "constructor": false}, {"identifier": "addEventListener", "parameters": "(final ProcessEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addEventListener(final ProcessEventListener listener)", "full_signature": "public void addEventListener(final ProcessEventListener listener)", "class_method_signature": "LightProcessRuntime.addEventListener(final ProcessEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeEventListener", "parameters": "(final ProcessEventListener listener)", "modifiers": "public", "return": "void", "signature": "void removeEventListener(final ProcessEventListener listener)", "full_signature": "public void removeEventListener(final ProcessEventListener listener)", "class_method_signature": "LightProcessRuntime.removeEventListener(final ProcessEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "getProcessEventListeners", "parameters": "()", "modifiers": "public", "return": "List<ProcessEventListener>", "signature": "List<ProcessEventListener> getProcessEventListeners()", "full_signature": "public List<ProcessEventListener> getProcessEventListeners()", "class_method_signature": "LightProcessRuntime.getProcessEventListeners()", "testcase": false, "constructor": false}, {"identifier": "initProcessActivationListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initProcessActivationListener()", "full_signature": "private void initProcessActivationListener()", "class_method_signature": "LightProcessRuntime.initProcessActivationListener()", "testcase": false, "constructor": false}, {"identifier": "startProcessWithParamsAndTrigger", "parameters": "(String processId, Map<String, Object> params, String type, boolean dispose)", "modifiers": "private", "return": "void", "signature": "void startProcessWithParamsAndTrigger(String processId, Map<String, Object> params, String type, boolean dispose)", "full_signature": "private void startProcessWithParamsAndTrigger(String processId, Map<String, Object> params, String type, boolean dispose)", "class_method_signature": "LightProcessRuntime.startProcessWithParamsAndTrigger(String processId, Map<String, Object> params, String type, boolean dispose)", "testcase": false, "constructor": false}, {"identifier": "abortProcessInstance", "parameters": "(String processInstanceId)", "modifiers": "public", "return": "void", "signature": "void abortProcessInstance(String processInstanceId)", "full_signature": "public void abortProcessInstance(String processInstanceId)", "class_method_signature": "LightProcessRuntime.abortProcessInstance(String processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "getWorkItemManager", "parameters": "()", "modifiers": "public", "return": "WorkItemManager", "signature": "WorkItemManager getWorkItemManager()", "full_signature": "public WorkItemManager getWorkItemManager()", "class_method_signature": "LightProcessRuntime.getWorkItemManager()", "testcase": false, "constructor": false}, {"identifier": "getUnitOfWorkManager", "parameters": "()", "modifiers": "@Override public", "return": "UnitOfWorkManager", "signature": "UnitOfWorkManager getUnitOfWorkManager()", "full_signature": "@Override public UnitOfWorkManager getUnitOfWorkManager()", "class_method_signature": "LightProcessRuntime.getUnitOfWorkManager()", "testcase": false, "constructor": false}, {"identifier": "signalEvent", "parameters": "(String type, Object event)", "modifiers": "public", "return": "void", "signature": "void signalEvent(String type, Object event)", "full_signature": "public void signalEvent(String type, Object event)", "class_method_signature": "LightProcessRuntime.signalEvent(String type, Object event)", "testcase": false, "constructor": false}, {"identifier": "signalEvent", "parameters": "(String type, Object event, String processInstanceId)", "modifiers": "public", "return": "void", "signature": "void signalEvent(String type, Object event, String processInstanceId)", "full_signature": "public void signalEvent(String type, Object event, String processInstanceId)", "class_method_signature": "LightProcessRuntime.signalEvent(String type, Object event, String processInstanceId)", "testcase": false, "constructor": false}, {"identifier": "setProcessEventSupport", "parameters": "(ProcessEventSupport processEventSupport)", "modifiers": "public", "return": "void", "signature": "void setProcessEventSupport(ProcessEventSupport processEventSupport)", "full_signature": "public void setProcessEventSupport(ProcessEventSupport processEventSupport)", "class_method_signature": "LightProcessRuntime.setProcessEventSupport(ProcessEventSupport processEventSupport)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "LightProcessRuntime.dispose()", "testcase": false, "constructor": false}, {"identifier": "clearProcessInstances", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearProcessInstances()", "full_signature": "public void clearProcessInstances()", "class_method_signature": "LightProcessRuntime.clearProcessInstances()", "testcase": false, "constructor": false}, {"identifier": "clearProcessInstancesState", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearProcessInstancesState()", "full_signature": "public void clearProcessInstancesState()", "class_method_signature": "LightProcessRuntime.clearProcessInstancesState()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "LightProcessRuntime.isActive()", "testcase": false, "constructor": false}, {"identifier": "createTimerInstance", "parameters": "(Timer timer, InternalKnowledgeRuntime kruntime)", "modifiers": "protected", "return": "ExpirationTime", "signature": "ExpirationTime createTimerInstance(Timer timer, InternalKnowledgeRuntime kruntime)", "full_signature": "protected ExpirationTime createTimerInstance(Timer timer, InternalKnowledgeRuntime kruntime)", "class_method_signature": "LightProcessRuntime.createTimerInstance(Timer timer, InternalKnowledgeRuntime kruntime)", "testcase": false, "constructor": false}, {"identifier": "configureTimerInstance", "parameters": "(Timer timer)", "modifiers": "private", "return": "ExpirationTime", "signature": "ExpirationTime configureTimerInstance(Timer timer)", "full_signature": "private ExpirationTime configureTimerInstance(Timer timer)", "class_method_signature": "LightProcessRuntime.configureTimerInstance(Timer timer)", "testcase": false, "constructor": false}, {"identifier": "getInternalKieRuntime", "parameters": "()", "modifiers": "@Override public", "return": "InternalKnowledgeRuntime", "signature": "InternalKnowledgeRuntime getInternalKieRuntime()", "full_signature": "@Override public InternalKnowledgeRuntime getInternalKieRuntime()", "class_method_signature": "LightProcessRuntime.getInternalKieRuntime()", "testcase": false, "constructor": false}], "file": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightProcessRuntime.java"}, "focal_method": {"identifier": "startProcess", "parameters": "(String processId)", "modifiers": "public", "return": "ProcessInstance", "body": "public ProcessInstance startProcess(String processId) {\n        return startProcess(processId, null);\n    }", "signature": "ProcessInstance startProcess(String processId)", "full_signature": "public ProcessInstance startProcess(String processId)", "class_method_signature": "LightProcessRuntime.startProcess(String processId)", "testcase": false, "constructor": false, "invocations": ["startProcess"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}