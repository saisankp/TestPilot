{"test_class": {"identifier": "CryptoExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/CryptoExceptionTest.java"}, "test_case": {"identifier": "testCryptoExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCryptoExceptions() {\n\n        CryptoException ex = new CryptoException();\n        assertNotNull(ex);\n        assertEquals(ex.getCode(), CryptoException.CRYPTO_ERROR);\n\n        assertNotNull(new CryptoException(new NoSuchAlgorithmException()));\n        assertNotNull(new CryptoException(new InvalidKeyException()));\n        assertNotNull(new CryptoException(new NoSuchProviderException()));\n        assertNotNull(new CryptoException(new SignatureException()));\n        assertNotNull(new CryptoException(new FileNotFoundException()));\n        assertNotNull(new CryptoException(new IOException()));\n        assertNotNull(new CryptoException(new CertificateException()));\n        assertNotNull(new CryptoException(new InvalidKeySpecException()));\n        assertNotNull(new CryptoException(new OperatorCreationException(\"unit-test\")));\n        assertNotNull(new CryptoException(new PKCSException(\"unit-test\")));\n        assertNotNull(new CryptoException(new CMSException(\"unit-test\")));\n\n        ex = new CryptoException(CryptoException.CERT_HASH_MISMATCH, \"X.509 Certificate hash mismatch\");\n        assertEquals(ex.getCode(), CryptoException.CERT_HASH_MISMATCH);\n    }", "signature": "void testCryptoExceptions()", "full_signature": "@Test public void testCryptoExceptions()", "class_method_signature": "CryptoExceptionTest.testCryptoExceptions()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getCode", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertEquals", "getCode"]}, "focal_class": {"identifier": "CryptoException", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "public static final int CRYPTO_ERROR = 1;", "modifier": "public static final", "type": "int", "declarator": "CRYPTO_ERROR = 1", "var_name": "CRYPTO_ERROR"}, {"original_string": "public static final int CERT_HASH_MISMATCH = 2;", "modifier": "public static final", "type": "int", "declarator": "CERT_HASH_MISMATCH = 2", "var_name": "CERT_HASH_MISMATCH"}, {"original_string": "private static final long serialVersionUID = -4194687652165603898L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4194687652165603898L", "var_name": "serialVersionUID"}, {"original_string": "private int code = CRYPTO_ERROR;", "modifier": "private", "type": "int", "declarator": "code = CRYPTO_ERROR", "var_name": "code"}], "methods": [{"identifier": "CryptoException", "parameters": "()", "modifiers": "public", "return": "", "signature": " CryptoException()", "full_signature": "public  CryptoException()", "class_method_signature": "CryptoException.CryptoException()", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(String message)", "modifiers": "public", "return": "", "signature": " CryptoException(String message)", "full_signature": "public  CryptoException(String message)", "class_method_signature": "CryptoException.CryptoException(String message)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(int code, final String message)", "modifiers": "public", "return": "", "signature": " CryptoException(int code, final String message)", "full_signature": "public  CryptoException(int code, final String message)", "class_method_signature": "CryptoException.CryptoException(int code, final String message)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(NoSuchAlgorithmException e)", "modifiers": "public", "return": "", "signature": " CryptoException(NoSuchAlgorithmException e)", "full_signature": "public  CryptoException(NoSuchAlgorithmException e)", "class_method_signature": "CryptoException.CryptoException(NoSuchAlgorithmException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(InvalidKeyException e)", "modifiers": "public", "return": "", "signature": " CryptoException(InvalidKeyException e)", "full_signature": "public  CryptoException(InvalidKeyException e)", "class_method_signature": "CryptoException.CryptoException(InvalidKeyException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(NoSuchProviderException e)", "modifiers": "public", "return": "", "signature": " CryptoException(NoSuchProviderException e)", "full_signature": "public  CryptoException(NoSuchProviderException e)", "class_method_signature": "CryptoException.CryptoException(NoSuchProviderException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(SignatureException e)", "modifiers": "public", "return": "", "signature": " CryptoException(SignatureException e)", "full_signature": "public  CryptoException(SignatureException e)", "class_method_signature": "CryptoException.CryptoException(SignatureException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(FileNotFoundException e)", "modifiers": "public", "return": "", "signature": " CryptoException(FileNotFoundException e)", "full_signature": "public  CryptoException(FileNotFoundException e)", "class_method_signature": "CryptoException.CryptoException(FileNotFoundException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(IOException e)", "modifiers": "public", "return": "", "signature": " CryptoException(IOException e)", "full_signature": "public  CryptoException(IOException e)", "class_method_signature": "CryptoException.CryptoException(IOException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(CertificateException e)", "modifiers": "public", "return": "", "signature": " CryptoException(CertificateException e)", "full_signature": "public  CryptoException(CertificateException e)", "class_method_signature": "CryptoException.CryptoException(CertificateException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(InvalidKeySpecException e)", "modifiers": "public", "return": "", "signature": " CryptoException(InvalidKeySpecException e)", "full_signature": "public  CryptoException(InvalidKeySpecException e)", "class_method_signature": "CryptoException.CryptoException(InvalidKeySpecException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(OperatorCreationException e)", "modifiers": "public", "return": "", "signature": " CryptoException(OperatorCreationException e)", "full_signature": "public  CryptoException(OperatorCreationException e)", "class_method_signature": "CryptoException.CryptoException(OperatorCreationException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(PKCSException e)", "modifiers": "public", "return": "", "signature": " CryptoException(PKCSException e)", "full_signature": "public  CryptoException(PKCSException e)", "class_method_signature": "CryptoException.CryptoException(PKCSException e)", "testcase": false, "constructor": true}, {"identifier": "CryptoException", "parameters": "(CMSException e)", "modifiers": "public", "return": "", "signature": " CryptoException(CMSException e)", "full_signature": "public  CryptoException(CMSException e)", "class_method_signature": "CryptoException.CryptoException(CMSException e)", "testcase": false, "constructor": true}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCode()", "full_signature": "public int getCode()", "class_method_signature": "CryptoException.getCode()", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/CryptoException.java"}, "focal_method": {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getCode() {\n        return code;\n    }", "signature": "int getCode()", "full_signature": "public int getCode()", "class_method_signature": "CryptoException.getCode()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}