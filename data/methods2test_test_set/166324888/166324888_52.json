{"test_class": {"identifier": "TransactionManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}, {"original_string": "public Web3jManager web3jManager;", "modifier": "public", "type": "Web3jManager", "declarator": "web3jManager", "var_name": "web3jManager"}], "file": "wallet/src/test/java/com/platon/aton/engine/TransactionManagerTest.java"}, "test_case": {"identifier": "getTransactionReceipt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTransactionReceipt() {\n        String hashs[] = {\"0x6ee4c7c22cae33226884900a2f78aeb2bbdc1bdc88913235a70469f0a248cc3c\", \"0xf4fa892f8cdab498c1058b78dff1d30e4047950f29188a2197944109ee2c08a3\",\n                \"0x7c60553fe3dcdf19f641ee58c5691e49b63c4d7055b92fe1b09b517471f26143\", \"0x1f96da0638287b8db23c3b25d4afea1cca7fb881b4dca75a52aeb98af219e9a9\"};\n        String hash = \"0x6ee4c7c22cae33226884900a2f78aeb2bbdc1bdc88913235a70469f0a248cc3c\";\n\n        TransactionReceipt receipt = ServerUtils\n                .getCommonApi()\n                .getTransactionsStatus(ApiRequestBody.newBuilder()\n                        .put(\"hash\", Arrays.asList(hashs))\n                        .build())\n                .filter(new Predicate<Response<ApiResponse<List<TransactionReceipt>>>>() {\n                    @Override\n                    public boolean test(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        return apiResponseResponse != null && apiResponseResponse.isSuccessful();\n                    }\n                })\n                .filter(new Predicate<Response<ApiResponse<List<TransactionReceipt>>>>() {\n                    @Override\n                    public boolean test(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        List<TransactionReceipt> transactionReceiptList = apiResponseResponse.body().getData();\n                        return transactionReceiptList != null && !transactionReceiptList.isEmpty();\n                    }\n                })\n                .map(new Function<Response<ApiResponse<List<TransactionReceipt>>>, TransactionReceipt>() {\n                    @Override\n                    public TransactionReceipt apply(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        return apiResponseResponse.body().getData().get(0);\n                    }\n                })\n                .defaultIfEmpty(new TransactionReceipt(TransactionStatus.PENDING.ordinal(), hash))\n                .onErrorReturnItem(new TransactionReceipt(TransactionStatus.PENDING.ordinal(), hash))\n                .toSingle()\n                .blockingGet();\n\n        Log.d(\"======\", \"\u5f97\u5230\u7ed3\u679cresult---------->\" + receipt.getHash() + \"==========\" + receipt.getStatus());\n    }", "signature": "void getTransactionReceipt()", "full_signature": "@Test public void getTransactionReceipt()", "class_method_signature": "TransactionManagerTest.getTransactionReceipt()", "testcase": true, "constructor": false, "invocations": ["blockingGet", "toSingle", "onErrorReturnItem", "defaultIfEmpty", "map", "filter", "filter", "getTransactionsStatus", "getCommonApi", "build", "put", "newBuilder", "asList", "isSuccessful", "getData", "body", "isEmpty", "get", "getData", "body", "ordinal", "ordinal", "d", ") + \"==", "s());"]}, "focal_class": {"identifier": "TransactionManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String UTF_8 = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "UTF_8 = \"UTF-8\"", "var_name": "UTF_8"}, {"original_string": "private volatile Map<String, Disposable> mDisposableMap = new HashMap<>();", "modifier": "private volatile", "type": "Map<String, Disposable>", "declarator": "mDisposableMap = new HashMap<>()", "var_name": "mDisposableMap"}, {"original_string": "private volatile Map<String, Object> mPendingMap = new HashMap<>();", "modifier": "private volatile", "type": "Map<String, Object>", "declarator": "mPendingMap = new HashMap<>()", "var_name": "mPendingMap"}, {"original_string": "String  signedStr = \"\";", "modifier": "", "type": "String", "declarator": "signedStr = \"\"", "var_name": "signedStr"}], "methods": [{"identifier": "TransactionManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " TransactionManager()", "full_signature": "private  TransactionManager()", "class_method_signature": "TransactionManager.TransactionManager()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "TransactionManager", "signature": "TransactionManager getInstance()", "full_signature": "public static TransactionManager getInstance()", "class_method_signature": "TransactionManager.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getBalanceByAddress", "parameters": "(Wallet walletEntity)", "modifiers": "public", "return": "Wallet", "signature": "Wallet getBalanceByAddress(Wallet walletEntity)", "full_signature": "public Wallet getBalanceByAddress(Wallet walletEntity)", "class_method_signature": "TransactionManager.getBalanceByAddress(Wallet walletEntity)", "testcase": false, "constructor": false}, {"identifier": "removeTaskByHash", "parameters": "(String hash)", "modifiers": "public", "return": "Disposable", "signature": "Disposable removeTaskByHash(String hash)", "full_signature": "public Disposable removeTaskByHash(String hash)", "class_method_signature": "TransactionManager.removeTaskByHash(String hash)", "testcase": false, "constructor": false}, {"identifier": "putPendingTransaction", "parameters": "(String from, long timeStamp)", "modifiers": "public", "return": "void", "signature": "void putPendingTransaction(String from, long timeStamp)", "full_signature": "public void putPendingTransaction(String from, long timeStamp)", "class_method_signature": "TransactionManager.putPendingTransaction(String from, long timeStamp)", "testcase": false, "constructor": false}, {"identifier": "getPendingTransactionTimeStamp", "parameters": "(String from)", "modifiers": "public", "return": "long", "signature": "long getPendingTransactionTimeStamp(String from)", "full_signature": "public long getPendingTransactionTimeStamp(String from)", "class_method_signature": "TransactionManager.getPendingTransactionTimeStamp(String from)", "testcase": false, "constructor": false}, {"identifier": "removePendingTransaction", "parameters": "(String from)", "modifiers": "public", "return": "void", "signature": "void removePendingTransaction(String from)", "full_signature": "public void removePendingTransaction(String from)", "class_method_signature": "TransactionManager.removePendingTransaction(String from)", "testcase": false, "constructor": false}, {"identifier": "getSendTransactionTimeInterval", "parameters": "(String from, long currentTime)", "modifiers": "public", "return": "long", "signature": "long getSendTransactionTimeInterval(String from, long currentTime)", "full_signature": "public long getSendTransactionTimeInterval(String from, long currentTime)", "class_method_signature": "TransactionManager.getSendTransactionTimeInterval(String from, long currentTime)", "testcase": false, "constructor": false}, {"identifier": "isAllowSendTransaction", "parameters": "(String from, long currentTime)", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowSendTransaction(String from, long currentTime)", "full_signature": "public boolean isAllowSendTransaction(String from, long currentTime)", "class_method_signature": "TransactionManager.isAllowSendTransaction(String from, long currentTime)", "testcase": false, "constructor": false}, {"identifier": "putTask", "parameters": "(String hash, Disposable disposable)", "modifiers": "public", "return": "void", "signature": "void putTask(String hash, Disposable disposable)", "full_signature": "public void putTask(String hash, Disposable disposable)", "class_method_signature": "TransactionManager.putTask(String hash, Disposable disposable)", "testcase": false, "constructor": false}, {"identifier": "cancelTaskByHash", "parameters": "(String hash)", "modifiers": "public", "return": "void", "signature": "void cancelTaskByHash(String hash)", "full_signature": "public void cancelTaskByHash(String hash)", "class_method_signature": "TransactionManager.cancelTaskByHash(String hash)", "testcase": false, "constructor": false}, {"identifier": "sendContractTransaction", "parameters": "(PlatOnContract platOnContract, Credentials credentials, PlatOnFunction platOnFunction, String nonce)", "modifiers": "public", "return": "Single<RPCTransactionResult>", "signature": "Single<RPCTransactionResult> sendContractTransaction(PlatOnContract platOnContract, Credentials credentials, PlatOnFunction platOnFunction, String nonce)", "full_signature": "public Single<RPCTransactionResult> sendContractTransaction(PlatOnContract platOnContract, Credentials credentials, PlatOnFunction platOnFunction, String nonce)", "class_method_signature": "TransactionManager.sendContractTransaction(PlatOnContract platOnContract, Credentials credentials, PlatOnFunction platOnFunction, String nonce)", "testcase": false, "constructor": false}, {"identifier": "submitTransaction", "parameters": "(String sign, String signedMessage, String remark)", "modifiers": "public", "return": "Single<RPCTransactionResult>", "signature": "Single<RPCTransactionResult> submitTransaction(String sign, String signedMessage, String remark)", "full_signature": "public Single<RPCTransactionResult> submitTransaction(String sign, String signedMessage, String remark)", "class_method_signature": "TransactionManager.submitTransaction(String sign, String signedMessage, String remark)", "testcase": false, "constructor": false}, {"identifier": "getNonce", "parameters": "(String from)", "modifiers": "public", "return": "Single<BigInteger>", "signature": "Single<BigInteger> getNonce(String from)", "full_signature": "public Single<BigInteger> getNonce(String from)", "class_method_signature": "TransactionManager.getNonce(String from)", "testcase": false, "constructor": false}, {"identifier": "getSignedMessageSingle", "parameters": "(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "modifiers": "private", "return": "String", "signature": "String getSignedMessageSingle(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "full_signature": "private String getSignedMessageSingle(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "class_method_signature": "TransactionManager.getSignedMessageSingle(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "getSignedMessage", "parameters": "(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "modifiers": "private", "return": "String", "signature": "String getSignedMessage(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "full_signature": "private String getSignedMessage(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "class_method_signature": "TransactionManager.getSignedMessage(ECKeyPair ecKeyPair, String from, String toAddress, BigDecimal amount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "createSigned", "parameters": "(ECKeyPair ecKeyPair, String signedData, String remark)", "modifiers": "private", "return": "String", "signature": "String createSigned(ECKeyPair ecKeyPair, String signedData, String remark)", "full_signature": "private String createSigned(ECKeyPair ecKeyPair, String signedData, String remark)", "class_method_signature": "TransactionManager.createSigned(ECKeyPair ecKeyPair, String signedData, String remark)", "testcase": false, "constructor": false}, {"identifier": "getSignedData", "parameters": "(ECKeyPair ecKeyPair, String data)", "modifiers": "private", "return": "String", "signature": "String getSignedData(ECKeyPair ecKeyPair, String data)", "full_signature": "private String getSignedData(ECKeyPair ecKeyPair, String data)", "class_method_signature": "TransactionManager.getSignedData(ECKeyPair ecKeyPair, String data)", "testcase": false, "constructor": false}, {"identifier": "signedTransaction", "parameters": "(PlatOnContract platOnContract, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String to,\n                                             String data, BigInteger value, String nonce)", "modifiers": "private", "return": "Single<String>", "signature": "Single<String> signedTransaction(PlatOnContract platOnContract, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String to,\n                                             String data, BigInteger value, String nonce)", "full_signature": "private Single<String> signedTransaction(PlatOnContract platOnContract, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String to,\n                                             String data, BigInteger value, String nonce)", "class_method_signature": "TransactionManager.signedTransaction(PlatOnContract platOnContract, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String to,\n                                             String data, BigInteger value, String nonce)", "testcase": false, "constructor": false}, {"identifier": "getTransactionResult", "parameters": "(String hexValue)", "modifiers": "public", "return": "RPCTransactionResult", "signature": "RPCTransactionResult getTransactionResult(String hexValue)", "full_signature": "public RPCTransactionResult getTransactionResult(String hexValue)", "class_method_signature": "TransactionManager.getTransactionResult(String hexValue)", "testcase": false, "constructor": false}, {"identifier": "sendContractTransaction", "parameters": "(String signedMessage)", "modifiers": "public", "return": "String", "signature": "String sendContractTransaction(String signedMessage)", "full_signature": "public String sendContractTransaction(String signedMessage)", "class_method_signature": "TransactionManager.sendContractTransaction(String signedMessage)", "testcase": false, "constructor": false}, {"identifier": "sendTransactionReturnPlatonSendTransaction", "parameters": "(String signedMessage)", "modifiers": "public", "return": "PlatonSendTransaction", "signature": "PlatonSendTransaction sendTransactionReturnPlatonSendTransaction(String signedMessage)", "full_signature": "public PlatonSendTransaction sendTransactionReturnPlatonSendTransaction(String signedMessage)", "class_method_signature": "TransactionManager.sendTransactionReturnPlatonSendTransaction(String signedMessage)", "testcase": false, "constructor": false}, {"identifier": "signTransaction", "parameters": "(Credentials credentials, String data, String toAddress, BigDecimal amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "modifiers": "public", "return": "String", "signature": "String signTransaction(Credentials credentials, String data, String toAddress, BigDecimal amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "full_signature": "public String signTransaction(Credentials credentials, String data, String toAddress, BigDecimal amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "class_method_signature": "TransactionManager.signTransaction(Credentials credentials, String data, String toAddress, BigDecimal amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "testcase": false, "constructor": false}, {"identifier": "sendTransferTransaction", "parameters": "(ECKeyPair ecKeyPair, String fromAddress, String toAddress, String walletName, BigDecimal transferAmount, BigDecimal feeAmount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce, String remark)", "modifiers": "public", "return": "Single<Transaction>", "signature": "Single<Transaction> sendTransferTransaction(ECKeyPair ecKeyPair, String fromAddress, String toAddress, String walletName, BigDecimal transferAmount, BigDecimal feeAmount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce, String remark)", "full_signature": "public Single<Transaction> sendTransferTransaction(ECKeyPair ecKeyPair, String fromAddress, String toAddress, String walletName, BigDecimal transferAmount, BigDecimal feeAmount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce, String remark)", "class_method_signature": "TransactionManager.sendTransferTransaction(ECKeyPair ecKeyPair, String fromAddress, String toAddress, String walletName, BigDecimal transferAmount, BigDecimal feeAmount, BigInteger gasPrice, BigInteger gasLimit, BigInteger nonce, String remark)", "testcase": false, "constructor": false}, {"identifier": "getTransactionByLoop", "parameters": "(Transaction transaction)", "modifiers": "public", "return": "Disposable", "signature": "Disposable getTransactionByLoop(Transaction transaction)", "full_signature": "public Disposable getTransactionByLoop(Transaction transaction)", "class_method_signature": "TransactionManager.getTransactionByLoop(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getTransactionReceipt", "parameters": "(String hash)", "modifiers": "private", "return": "TransactionReceipt", "signature": "TransactionReceipt getTransactionReceipt(String hash)", "full_signature": "private TransactionReceipt getTransactionReceipt(String hash)", "class_method_signature": "TransactionManager.getTransactionReceipt(String hash)", "testcase": false, "constructor": false}, {"identifier": "buildPendingMapKey", "parameters": "(String from)", "modifiers": "private", "return": "String", "signature": "String buildPendingMapKey(String from)", "full_signature": "private String buildPendingMapKey(String from)", "class_method_signature": "TransactionManager.buildPendingMapKey(String from)", "testcase": false, "constructor": false}, {"identifier": "createRPCTransactionResult", "parameters": "(RPCTransactionResult rpcTransactionResult)", "modifiers": "private", "return": "Single<RPCTransactionResult>", "signature": "Single<RPCTransactionResult> createRPCTransactionResult(RPCTransactionResult rpcTransactionResult)", "full_signature": "private Single<RPCTransactionResult> createRPCTransactionResult(RPCTransactionResult rpcTransactionResult)", "class_method_signature": "TransactionManager.createRPCTransactionResult(RPCTransactionResult rpcTransactionResult)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/engine/TransactionManager.java"}, "focal_method": {"identifier": "getTransactionReceipt", "parameters": "(String hash)", "modifiers": "private", "return": "TransactionReceipt", "body": "private TransactionReceipt getTransactionReceipt(String hash) {\n\n        return ServerUtils\n                .getCommonApi()\n                .getTransactionsStatus(ApiRequestBody.newBuilder()\n                        .put(\"hash\", Arrays.asList(hash))\n                        .build())\n                .filter(new Predicate<Response<ApiResponse<List<TransactionReceipt>>>>() {\n                    @Override\n                    public boolean test(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        return apiResponseResponse != null && apiResponseResponse.isSuccessful();\n                    }\n                })\n                .filter(new Predicate<Response<ApiResponse<List<TransactionReceipt>>>>() {\n                    @Override\n                    public boolean test(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        List<TransactionReceipt> transactionReceiptList = apiResponseResponse.body().getData();\n                        return transactionReceiptList != null && !transactionReceiptList.isEmpty();\n                    }\n                })\n                .map(new Function<Response<ApiResponse<List<TransactionReceipt>>>, TransactionReceipt>() {\n                    @Override\n                    public TransactionReceipt apply(Response<ApiResponse<List<TransactionReceipt>>> apiResponseResponse) throws Exception {\n                        return apiResponseResponse.body().getData().get(0);\n                    }\n                })\n                .defaultIfEmpty(new TransactionReceipt(TransactionStatus.PENDING.ordinal(), hash))\n                .onErrorReturnItem(new TransactionReceipt(TransactionStatus.PENDING.ordinal(), hash))\n                .toSingle()\n                .blockingGet();\n\n    }", "signature": "TransactionReceipt getTransactionReceipt(String hash)", "full_signature": "private TransactionReceipt getTransactionReceipt(String hash)", "class_method_signature": "TransactionManager.getTransactionReceipt(String hash)", "testcase": false, "constructor": false, "invocations": ["blockingGet", "toSingle", "onErrorReturnItem", "defaultIfEmpty", "map", "filter", "filter", "getTransactionsStatus", "getCommonApi", "build", "put", "newBuilder", "asList", "isSuccessful", "getData", "body", "isEmpty", "get", "getData", "body", "ordinal", "ordinal"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}