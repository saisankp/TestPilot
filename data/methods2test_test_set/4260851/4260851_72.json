{"test_class": {"identifier": "DataSourceDestinationTest", "superclass": "", "interfaces": "", "fields": [], "file": "DbSetup-core/src/test/java/com/ninja_squad/dbsetup/destination/DataSourceDestinationTest.java"}, "test_case": {"identifier": "toStringWorks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toStringWorks() {\n        DataSource dataSource1 = mock(DataSource.class);\n        when(dataSource1.toString()).thenReturn(\"dataSource1\");\n        assertEquals(\"DataSourceDestination [dataSource=dataSource1]\",\n                     new DataSourceDestination(dataSource1).toString());\n    }", "signature": "void toStringWorks()", "full_signature": "@Test public void toStringWorks()", "class_method_signature": "DataSourceDestinationTest.toStringWorks()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "toString", "assertEquals", "toString"]}, "focal_class": {"identifier": "DataSourceDestination", "superclass": "", "interfaces": "implements Destination", "fields": [{"original_string": "private final DataSource dataSource;", "modifier": "private final", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}], "methods": [{"identifier": "DataSourceDestination", "parameters": "(@Nonnull DataSource dataSource)", "modifiers": "public", "return": "", "signature": " DataSourceDestination(@Nonnull DataSource dataSource)", "full_signature": "public  DataSourceDestination(@Nonnull DataSource dataSource)", "class_method_signature": "DataSourceDestination.DataSourceDestination(@Nonnull DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "with", "parameters": "(@Nonnull DataSource dataSource)", "modifiers": "public static", "return": "DataSourceDestination", "signature": "DataSourceDestination with(@Nonnull DataSource dataSource)", "full_signature": "public static DataSourceDestination with(@Nonnull DataSource dataSource)", "class_method_signature": "DataSourceDestination.with(@Nonnull DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "@Override public Connection getConnection()", "class_method_signature": "DataSourceDestination.getConnection()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataSourceDestination.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataSourceDestination.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataSourceDestination.equals(Object obj)", "testcase": false, "constructor": false}], "file": "DbSetup-core/src/main/java/com/ninja_squad/dbsetup/destination/DataSourceDestination.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return \"DataSourceDestination [dataSource=\" + dataSource + \"]\";\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataSourceDestination.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4260851, "url": "https://github.com/Ninja-Squad/DbSetup", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 183, "size": 1379, "license": "licensed"}}