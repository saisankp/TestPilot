{"test_class": {"identifier": "Vector2dfxTest", "superclass": "extends AbstractVector2DTest<Vector2dfx, Point2dfx, Vector2dfx>", "interfaces": "", "fields": [], "file": "advanced/mathfx/src/test/java/org/arakhne/afc/math/geometry/d2/dfx/Vector2dfxTest.java"}, "test_case": {"identifier": "staticToOrientationVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void staticToOrientationVector() {\n\t\tassertFpVectorEquals(1, 0, Vector2dfx.toOrientationVector(0));\n\t\tassertFpVectorEquals(-1, 0, Vector2dfx.toOrientationVector(Math.PI));\n\t\tassertFpVectorEquals(0, 1, Vector2dfx.toOrientationVector(Math.PI/2));\n\t\tassertFpVectorEquals(0, -1, Vector2dfx.toOrientationVector(-Math.PI/2));\n\n\t\tassertInlineParameterUsage(Vector2dfx.class, \"toOrientationVector\", double.class); //$NON-NLS-1$\n\t}", "signature": "void staticToOrientationVector()", "full_signature": "@Test public void staticToOrientationVector()", "class_method_signature": "Vector2dfxTest.staticToOrientationVector()", "testcase": true, "constructor": false, "invocations": ["assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertInlineParameterUsage"]}, "focal_class": {"identifier": "Vector2dfx", "superclass": "extends Tuple2dfx<Vector2dfx>", "interfaces": "implements Vector2D<Vector2dfx, Point2dfx>", "fields": [{"original_string": "private static final long serialVersionUID = 8394433458442716159L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8394433458442716159L", "var_name": "serialVersionUID"}, {"original_string": "private ReadOnlyDoubleWrapper lengthSquareProperty;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "lengthSquareProperty", "var_name": "lengthSquareProperty"}, {"original_string": "private ReadOnlyDoubleWrapper lengthProperty;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "lengthProperty", "var_name": "lengthProperty"}], "methods": [{"identifier": "Vector2dfx", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector2dfx()", "full_signature": "public  Vector2dfx()", "class_method_signature": "Vector2dfx.Vector2dfx()", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(DoubleProperty x, DoubleProperty y)", "modifiers": "public", "return": "", "signature": " Vector2dfx(DoubleProperty x, DoubleProperty y)", "full_signature": "public  Vector2dfx(DoubleProperty x, DoubleProperty y)", "class_method_signature": "Vector2dfx.Vector2dfx(DoubleProperty x, DoubleProperty y)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(Tuple2D<?> tuple)", "modifiers": "public", "return": "", "signature": " Vector2dfx(Tuple2D<?> tuple)", "full_signature": "public  Vector2dfx(Tuple2D<?> tuple)", "class_method_signature": "Vector2dfx.Vector2dfx(Tuple2D<?> tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(int[] tuple)", "modifiers": "public", "return": "", "signature": " Vector2dfx(int[] tuple)", "full_signature": "public  Vector2dfx(int[] tuple)", "class_method_signature": "Vector2dfx.Vector2dfx(int[] tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(double[] tuple)", "modifiers": "public", "return": "", "signature": " Vector2dfx(double[] tuple)", "full_signature": "public  Vector2dfx(double[] tuple)", "class_method_signature": "Vector2dfx.Vector2dfx(double[] tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(int x, int y)", "modifiers": "public", "return": "", "signature": " Vector2dfx(int x, int y)", "full_signature": "public  Vector2dfx(int x, int y)", "class_method_signature": "Vector2dfx.Vector2dfx(int x, int y)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(float x, float y)", "modifiers": "public", "return": "", "signature": " Vector2dfx(float x, float y)", "full_signature": "public  Vector2dfx(float x, float y)", "class_method_signature": "Vector2dfx.Vector2dfx(float x, float y)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " Vector2dfx(double x, double y)", "full_signature": "public  Vector2dfx(double x, double y)", "class_method_signature": "Vector2dfx.Vector2dfx(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "Vector2dfx", "parameters": "(long x, long y)", "modifiers": "public", "return": "", "signature": " Vector2dfx(long x, long y)", "full_signature": "public  Vector2dfx(long x, long y)", "class_method_signature": "Vector2dfx.Vector2dfx(long x, long y)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Tuple2D<?> tuple)", "modifiers": "public static", "return": "Vector2dfx", "signature": "Vector2dfx convert(Tuple2D<?> tuple)", "full_signature": "public static Vector2dfx convert(Tuple2D<?> tuple)", "class_method_signature": "Vector2dfx.convert(Tuple2D<?> tuple)", "testcase": false, "constructor": false}, {"identifier": "toOrientationVector", "parameters": "(double angle)", "modifiers": "@Pure @Inline(value = \"new Vector2dfx(Math.cos($1), Math.sin($1))\", imported = {Vector2dfx.class}) public static", "return": "Vector2dfx", "signature": "Vector2dfx toOrientationVector(double angle)", "full_signature": "@Pure @Inline(value = \"new Vector2dfx(Math.cos($1), Math.sin($1))\", imported = {Vector2dfx.class}) public static Vector2dfx toOrientationVector(double angle)", "class_method_signature": "Vector2dfx.toOrientationVector(double angle)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Vector2dfx", "signature": "Vector2dfx clone()", "full_signature": "@Override public Vector2dfx clone()", "class_method_signature": "Vector2dfx.clone()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLength()", "full_signature": "@Override public double getLength()", "class_method_signature": "Vector2dfx.getLength()", "testcase": false, "constructor": false}, {"identifier": "lengthProperty", "parameters": "()", "modifiers": "public", "return": "ReadOnlyDoubleProperty", "signature": "ReadOnlyDoubleProperty lengthProperty()", "full_signature": "public ReadOnlyDoubleProperty lengthProperty()", "class_method_signature": "Vector2dfx.lengthProperty()", "testcase": false, "constructor": false}, {"identifier": "getLengthSquared", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLengthSquared()", "full_signature": "@Override public double getLengthSquared()", "class_method_signature": "Vector2dfx.getLengthSquared()", "testcase": false, "constructor": false}, {"identifier": "lengthSquaredProperty", "parameters": "()", "modifiers": "public", "return": "ReadOnlyDoubleProperty", "signature": "ReadOnlyDoubleProperty lengthSquaredProperty()", "full_signature": "public ReadOnlyDoubleProperty lengthSquaredProperty()", "class_method_signature": "Vector2dfx.lengthSquaredProperty()", "testcase": false, "constructor": false}, {"identifier": "getGeomFactory", "parameters": "()", "modifiers": "@Override public", "return": "GeomFactory2dfx", "signature": "GeomFactory2dfx getGeomFactory()", "full_signature": "@Override public GeomFactory2dfx getGeomFactory()", "class_method_signature": "Vector2dfx.getGeomFactory()", "testcase": false, "constructor": false}, {"identifier": "toUnmodifiable", "parameters": "()", "modifiers": "@Override public", "return": "UnmodifiableVector2D<Vector2dfx, Point2dfx>", "signature": "UnmodifiableVector2D<Vector2dfx, Point2dfx> toUnmodifiable()", "full_signature": "@Override public UnmodifiableVector2D<Vector2dfx, Point2dfx> toUnmodifiable()", "class_method_signature": "Vector2dfx.toUnmodifiable()", "testcase": false, "constructor": false}], "file": "advanced/mathfx/src/main/java/org/arakhne/afc/math/geometry/d2/dfx/Vector2dfx.java"}, "focal_method": {"identifier": "toOrientationVector", "parameters": "(double angle)", "modifiers": "@Pure @Inline(value = \"new Vector2dfx(Math.cos($1), Math.sin($1))\", imported = {Vector2dfx.class}) public static", "return": "Vector2dfx", "body": "@Pure\n\t@Inline(value = \"new Vector2dfx(Math.cos($1), Math.sin($1))\", imported = {Vector2dfx.class})\n\tpublic static Vector2dfx toOrientationVector(double angle) {\n\t\treturn new Vector2dfx(Math.cos(angle), Math.sin(angle));\n\t}", "signature": "Vector2dfx toOrientationVector(double angle)", "full_signature": "@Pure @Inline(value = \"new Vector2dfx(Math.cos($1), Math.sin($1))\", imported = {Vector2dfx.class}) public static Vector2dfx toOrientationVector(double angle)", "class_method_signature": "Vector2dfx.toOrientationVector(double angle)", "testcase": false, "constructor": false, "invocations": ["cos", "sin"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}