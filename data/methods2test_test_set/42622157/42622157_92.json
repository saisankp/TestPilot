{"test_class": {"identifier": "TopologyTemplateResourceTest", "superclass": "extends AbstractResourceTest", "interfaces": "", "fields": [{"original_string": "private static final String FOLDERPATH = \"http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/topologytemplate/\";", "modifier": "private static final", "type": "String", "declarator": "FOLDERPATH = \"http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/topologytemplate/\"", "var_name": "FOLDERPATH"}, {"original_string": "private static final String ENTITY_TYPE = \"topologytemplates/\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE = \"topologytemplates/\"", "var_name": "ENTITY_TYPE"}, {"original_string": "private static final String INSTANCE_XML_PATH = \"servicetemplates/\" + ENTITY_TYPE + \"fruits-at-3fe0df76e98d46ead68295920e5d1cf1354bdea1.xml\";", "modifier": "private static final", "type": "String", "declarator": "INSTANCE_XML_PATH = \"servicetemplates/\" + ENTITY_TYPE + \"fruits-at-3fe0df76e98d46ead68295920e5d1cf1354bdea1.xml\"", "var_name": "INSTANCE_XML_PATH"}, {"original_string": "private static final String BAOBAB_JSON_PATH = \"servicetemplates/\" + ENTITY_TYPE + \"list-at-3fe0df76e98d46ead68295920e5d1cf1354bdea1.json\";", "modifier": "private static final", "type": "String", "declarator": "BAOBAB_JSON_PATH = \"servicetemplates/\" + ENTITY_TYPE + \"list-at-3fe0df76e98d46ead68295920e5d1cf1354bdea1.json\"", "var_name": "BAOBAB_JSON_PATH"}, {"original_string": "private static final String INSTANCE_URL = \"servicetemplates/\" + FOLDERPATH;", "modifier": "private static final", "type": "String", "declarator": "INSTANCE_URL = \"servicetemplates/\" + FOLDERPATH", "var_name": "INSTANCE_URL"}], "file": "org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/topologytemplates/TopologyTemplateResourceTest.java"}, "test_case": {"identifier": "getComponentInstanceXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getComponentInstanceXML() throws Exception {\n        this.setRevisionTo(\"3fe0df76e98d46ead68295920e5d1cf1354bdea1\");\n        this.assertGet(\"servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/topologytemplate/\", \"servicetemplates/baobab_topologytemplate.xml\");\n    }", "signature": "void getComponentInstanceXML()", "full_signature": "@Test public void getComponentInstanceXML()", "class_method_signature": "TopologyTemplateResourceTest.getComponentInstanceXML()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "assertGet"]}, "focal_class": {"identifier": "TopologyTemplateResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TopologyTemplateResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TopologyTemplateResource.class)", "var_name": "LOGGER"}, {"original_string": "private final TTopologyTemplate topologyTemplate;", "modifier": "private final", "type": "TTopologyTemplate", "declarator": "topologyTemplate", "var_name": "topologyTemplate"}, {"original_string": "private final AbstractComponentInstanceResourceContainingATopology parent;", "modifier": "private final", "type": "AbstractComponentInstanceResourceContainingATopology", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "TopologyTemplateResource", "parameters": "(AbstractComponentInstanceResourceContainingATopology parent, TTopologyTemplate topologyTemplate, String type)", "modifiers": "public", "return": "", "signature": " TopologyTemplateResource(AbstractComponentInstanceResourceContainingATopology parent, TTopologyTemplate topologyTemplate, String type)", "full_signature": "public  TopologyTemplateResource(AbstractComponentInstanceResourceContainingATopology parent, TTopologyTemplate topologyTemplate, String type)", "class_method_signature": "TopologyTemplateResource.TopologyTemplateResource(AbstractComponentInstanceResourceContainingATopology parent, TTopologyTemplate topologyTemplate, String type)", "testcase": false, "constructor": true}, {"identifier": "getHTML", "parameters": "(\n        @QueryParam(value = \"edit\") String edit,\n        @QueryParam(value = \"script\") @ApiParam(value = \"the script to include in a <script> tag. The function wineryViewExternalScriptOnLoad if it is defined. Only available if 'view' is also set\") String script,\n        @QueryParam(value = \"view\") String view,\n        @QueryParam(value = \"autoLayoutOnLoad\") String autoLayoutOnLoad,\n        @Context UriInfo uriInfo)", "modifiers": "@GET @ApiOperation(value = \"?edit is used in the URL to get the jsPlumb-based editor\") @Produces(MediaType.TEXT_HTML) // @formatter:off public", "return": "Response", "signature": "Response getHTML(\n        @QueryParam(value = \"edit\") String edit,\n        @QueryParam(value = \"script\") @ApiParam(value = \"the script to include in a <script> tag. The function wineryViewExternalScriptOnLoad if it is defined. Only available if 'view' is also set\") String script,\n        @QueryParam(value = \"view\") String view,\n        @QueryParam(value = \"autoLayoutOnLoad\") String autoLayoutOnLoad,\n        @Context UriInfo uriInfo)", "full_signature": "@GET @ApiOperation(value = \"?edit is used in the URL to get the jsPlumb-based editor\") @Produces(MediaType.TEXT_HTML) // @formatter:off public Response getHTML(\n        @QueryParam(value = \"edit\") String edit,\n        @QueryParam(value = \"script\") @ApiParam(value = \"the script to include in a <script> tag. The function wineryViewExternalScriptOnLoad if it is defined. Only available if 'view' is also set\") String script,\n        @QueryParam(value = \"view\") String view,\n        @QueryParam(value = \"autoLayoutOnLoad\") String autoLayoutOnLoad,\n        @Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.getHTML(\n        @QueryParam(value = \"edit\") String edit,\n        @QueryParam(value = \"script\") @ApiParam(value = \"the script to include in a <script> tag. The function wineryViewExternalScriptOnLoad if it is defined. Only available if 'view' is also set\") String script,\n        @QueryParam(value = \"view\") String view,\n        @QueryParam(value = \"autoLayoutOnLoad\") String autoLayoutOnLoad,\n        @Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "getTopologyTempalte", "parameters": "()", "modifiers": "@GET @ApiOperation(value = \"Returns a JSON representation of the topology template.\" + \"X and Y coordinates are embedded as attributes. QName string with Namespace: \" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE}\" + \"@return The JSON representation of the topology template <em>without</em> associated artifacts and without the parent service template\") @Produces(MediaType.APPLICATION_JSON) // @formatter:on public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate getTopologyTempalte()", "full_signature": "@GET @ApiOperation(value = \"Returns a JSON representation of the topology template.\" + \"X and Y coordinates are embedded as attributes. QName string with Namespace: \" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE}\" + \"@return The JSON representation of the topology template <em>without</em> associated artifacts and without the parent service template\") @Produces(MediaType.APPLICATION_JSON) // @formatter:on public TTopologyTemplate getTopologyTempalte()", "class_method_signature": "TopologyTemplateResource.getTopologyTempalte()", "testcase": false, "constructor": false}, {"identifier": "mergeWithOtherTopologyTemplate", "parameters": "(String strOtherServiceTemplateQName)", "modifiers": "@Path(\"merge/\") @Consumes(MediaType.TEXT_PLAIN) @POST public", "return": "Response", "signature": "Response mergeWithOtherTopologyTemplate(String strOtherServiceTemplateQName)", "full_signature": "@Path(\"merge/\") @Consumes(MediaType.TEXT_PLAIN) @POST public Response mergeWithOtherTopologyTemplate(String strOtherServiceTemplateQName)", "class_method_signature": "TopologyTemplateResource.mergeWithOtherTopologyTemplate(String strOtherServiceTemplateQName)", "testcase": false, "constructor": false}, {"identifier": "getNodeTemplatesResource", "parameters": "()", "modifiers": "@Path(\"nodetemplates/\") public", "return": "NodeTemplatesResource", "signature": "NodeTemplatesResource getNodeTemplatesResource()", "full_signature": "@Path(\"nodetemplates/\") public NodeTemplatesResource getNodeTemplatesResource()", "class_method_signature": "TopologyTemplateResource.getNodeTemplatesResource()", "testcase": false, "constructor": false}, {"identifier": "getRelationshipTemplatesResource", "parameters": "()", "modifiers": "@Path(\"relationshiptemplates/\") public", "return": "RelationshipTemplatesResource", "signature": "RelationshipTemplatesResource getRelationshipTemplatesResource()", "full_signature": "@Path(\"relationshiptemplates/\") public RelationshipTemplatesResource getRelationshipTemplatesResource()", "class_method_signature": "TopologyTemplateResource.getRelationshipTemplatesResource()", "testcase": false, "constructor": false}, {"identifier": "setModel", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "@PUT @ApiOperation(value = \"Replaces the topology by the information given in the XML\") @Consumes(MediaType.TEXT_XML) public", "return": "Response", "signature": "Response setModel(TTopologyTemplate topologyTemplate)", "full_signature": "@PUT @ApiOperation(value = \"Replaces the topology by the information given in the XML\") @Consumes(MediaType.TEXT_XML) public Response setModel(TTopologyTemplate topologyTemplate)", "class_method_signature": "TopologyTemplateResource.setModel(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "setModelJson", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "@PUT @ApiOperation(value = \"Replaces the topology by the information given in the JSON\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response setModelJson(TTopologyTemplate topologyTemplate)", "full_signature": "@PUT @ApiOperation(value = \"Replaces the topology by the information given in the JSON\") @Consumes(MediaType.APPLICATION_JSON) public Response setModelJson(TTopologyTemplate topologyTemplate)", "class_method_signature": "TopologyTemplateResource.setModelJson(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getComponentInstanceXML", "parameters": "()", "modifiers": "@GET @ApiOperation(value = \"<p>Returns an XML representation of the topology template.\" + \" X and Y coordinates are embedded as attributes. Namespace:\" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE} </p>\" + \"<p>{@link org.eclipse.winery.repository.client.WineryRepositoryClient.\" + \"getTopologyTemplate(QName)} consumes this template</p>\" + \"<p>@return The XML representation of the topology template <em>without</em>\" + \"associated artifacts and without the parent service template </p>\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML}) // @formatter:on public", "return": "Response", "signature": "Response getComponentInstanceXML()", "full_signature": "@GET @ApiOperation(value = \"<p>Returns an XML representation of the topology template.\" + \" X and Y coordinates are embedded as attributes. Namespace:\" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE} </p>\" + \"<p>{@link org.eclipse.winery.repository.client.WineryRepositoryClient.\" + \"getTopologyTemplate(QName)} consumes this template</p>\" + \"<p>@return The XML representation of the topology template <em>without</em>\" + \"associated artifacts and without the parent service template </p>\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML}) // @formatter:on public Response getComponentInstanceXML()", "class_method_signature": "TopologyTemplateResource.getComponentInstanceXML()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@Path(\"split/\") @Produces(MediaType.TEXT_PLAIN) @POST public", "return": "Response", "signature": "Response split(@Context UriInfo uriInfo)", "full_signature": "@Path(\"split/\") @Produces(MediaType.TEXT_PLAIN) @POST public Response split(@Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.split(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@Path(\"match/\") @Produces(MediaType.TEXT_PLAIN) @POST public", "return": "Response", "signature": "Response match(@Context UriInfo uriInfo)", "full_signature": "@Path(\"match/\") @Produces(MediaType.TEXT_PLAIN) @POST public Response match(@Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.match(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(@Context UriInfo uriInfo, AllocationRequest allocationRequest)", "modifiers": "@Path(\"allocate\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @POST public", "return": "Response", "signature": "Response allocate(@Context UriInfo uriInfo, AllocationRequest allocationRequest)", "full_signature": "@Path(\"allocate\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @POST public Response allocate(@Context UriInfo uriInfo, AllocationRequest allocationRequest)", "class_method_signature": "TopologyTemplateResource.allocate(@Context UriInfo uriInfo, AllocationRequest allocationRequest)", "testcase": false, "constructor": false}, {"identifier": "composeServiceTemplates", "parameters": "(CompositionData compositionData, @Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"compose/\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public", "return": "Response", "signature": "Response composeServiceTemplates(CompositionData compositionData, @Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"compose/\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public Response composeServiceTemplates(CompositionData compositionData, @Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.composeServiceTemplates(CompositionData compositionData, @Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"resolve/\") @Produces(MediaType.TEXT_PLAIN) public", "return": "Response", "signature": "Response resolve(@Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"resolve/\") @Produces(MediaType.TEXT_PLAIN) public Response resolve(@Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.resolve(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "computeDi", "parameters": "(UpdateInfo updateInfo)", "modifiers": "@POST @Path(\"kvcomparison\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "PropertyDiffList", "signature": "PropertyDiffList computeDi(UpdateInfo updateInfo)", "full_signature": "@POST @Path(\"kvcomparison\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public PropertyDiffList computeDi(UpdateInfo updateInfo)", "class_method_signature": "TopologyTemplateResource.computeDi(UpdateInfo updateInfo)", "testcase": false, "constructor": false}, {"identifier": "updateVersionOfNodeTemplate", "parameters": "(UpdateInfo updateInfo)", "modifiers": "@POST @Path(\"update\") @Consumes(MediaType.APPLICATION_JSON) public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate updateVersionOfNodeTemplate(UpdateInfo updateInfo)", "full_signature": "@POST @Path(\"update\") @Consumes(MediaType.APPLICATION_JSON) public TTopologyTemplate updateVersionOfNodeTemplate(UpdateInfo updateInfo)", "class_method_signature": "TopologyTemplateResource.updateVersionOfNodeTemplate(UpdateInfo updateInfo)", "testcase": false, "constructor": false}, {"identifier": "applySolution", "parameters": "(SolutionInputData data)", "modifiers": "@POST @Path(\"applysolution\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate applySolution(SolutionInputData data)", "full_signature": "@POST @Path(\"applysolution\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public TTopologyTemplate applySolution(SolutionInputData data)", "class_method_signature": "TopologyTemplateResource.applySolution(SolutionInputData data)", "testcase": false, "constructor": false}, {"identifier": "determineStatefulComponents", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"determinestatefulcomponents\") public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate determineStatefulComponents()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"determinestatefulcomponents\") public TTopologyTemplate determineStatefulComponents()", "class_method_signature": "TopologyTemplateResource.determineStatefulComponents()", "testcase": false, "constructor": false}, {"identifier": "determineFreezableComponents", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"determinefreezablecomponents\") public", "return": "TopologyAndErrorList", "signature": "TopologyAndErrorList determineFreezableComponents()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"determinefreezablecomponents\") public TopologyAndErrorList determineFreezableComponents()", "class_method_signature": "TopologyTemplateResource.determineFreezableComponents()", "testcase": false, "constructor": false}, {"identifier": "cleanFreezableComponents", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"cleanfreezablecomponents\") public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate cleanFreezableComponents()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"cleanfreezablecomponents\") public TTopologyTemplate cleanFreezableComponents()", "class_method_signature": "TopologyTemplateResource.cleanFreezableComponents()", "testcase": false, "constructor": false}, {"identifier": "getAvailableFeatures", "parameters": "()", "modifiers": "@GET @Path(\"availablefeatures\") @Produces(MediaType.APPLICATION_JSON) public", "return": "ArrayList<AvailableFeaturesApiData>", "signature": "ArrayList<AvailableFeaturesApiData> getAvailableFeatures()", "full_signature": "@GET @Path(\"availablefeatures\") @Produces(MediaType.APPLICATION_JSON) public ArrayList<AvailableFeaturesApiData> getAvailableFeatures()", "class_method_signature": "TopologyTemplateResource.getAvailableFeatures()", "testcase": false, "constructor": false}, {"identifier": "applyAvailableFeatures", "parameters": "(ArrayList<AvailableFeaturesApiData> featuresList)", "modifiers": "@PUT @Path(\"availablefeatures\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public", "return": "TTopologyTemplate", "signature": "TTopologyTemplate applyAvailableFeatures(ArrayList<AvailableFeaturesApiData> featuresList)", "full_signature": "@PUT @Path(\"availablefeatures\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public TTopologyTemplate applyAvailableFeatures(ArrayList<AvailableFeaturesApiData> featuresList)", "class_method_signature": "TopologyTemplateResource.applyAvailableFeatures(ArrayList<AvailableFeaturesApiData> featuresList)", "testcase": false, "constructor": false}, {"identifier": "getNewVersionList", "parameters": "()", "modifiers": "@GET @Path(\"newversions\") @Produces(MediaType.APPLICATION_JSON) public", "return": "List<NewVersionListElement>", "signature": "List<NewVersionListElement> getNewVersionList()", "full_signature": "@GET @Path(\"newversions\") @Produces(MediaType.APPLICATION_JSON) public List<NewVersionListElement> getNewVersionList()", "class_method_signature": "TopologyTemplateResource.getNewVersionList()", "testcase": false, "constructor": false}, {"identifier": "applyGroupingAndPlacement", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"applyplacement\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response applyGroupingAndPlacement(@Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"applyplacement\") @Produces(MediaType.APPLICATION_JSON) public Response applyGroupingAndPlacement(@Context UriInfo uriInfo)", "class_method_signature": "TopologyTemplateResource.applyGroupingAndPlacement(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/topologytemplates/TopologyTemplateResource.java"}, "focal_method": {"identifier": "getComponentInstanceXML", "parameters": "()", "modifiers": "@GET @ApiOperation(value = \"<p>Returns an XML representation of the topology template.\" + \" X and Y coordinates are embedded as attributes. Namespace:\" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE} </p>\" + \"<p>{@link org.eclipse.winery.repository.client.WineryRepositoryClient.\" + \"getTopologyTemplate(QName)} consumes this template</p>\" + \"<p>@return The XML representation of the topology template <em>without</em>\" + \"associated artifacts and without the parent service template </p>\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML}) // @formatter:on public", "return": "Response", "body": "@GET\n    @ApiOperation(value = \"<p>Returns an XML representation of the topology template.\" +\n        \" X and Y coordinates are embedded as attributes. Namespace:\" +\n        \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE} </p>\" +\n        \"<p>{@link org.eclipse.winery.repository.client.WineryRepositoryClient.\" +\n        \"getTopologyTemplate(QName)} consumes this template</p>\" +\n        \"<p>@return The XML representation of the topology template <em>without</em>\" +\n        \"associated artifacts and without the parent service template </p>\")\n    @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML})\n    // @formatter:on\n    public Response getComponentInstanceXML() {\n        return RestUtils.getXML(TTopologyTemplate.class, this.topologyTemplate);\n    }", "signature": "Response getComponentInstanceXML()", "full_signature": "@GET @ApiOperation(value = \"<p>Returns an XML representation of the topology template.\" + \" X and Y coordinates are embedded as attributes. Namespace:\" + \"{@link org.eclipse.winery.repository.common.constants.Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE} </p>\" + \"<p>{@link org.eclipse.winery.repository.client.WineryRepositoryClient.\" + \"getTopologyTemplate(QName)} consumes this template</p>\" + \"<p>@return The XML representation of the topology template <em>without</em>\" + \"associated artifacts and without the parent service template </p>\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML}) // @formatter:on public Response getComponentInstanceXML()", "class_method_signature": "TopologyTemplateResource.getComponentInstanceXML()", "testcase": false, "constructor": false, "invocations": ["getXML"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}