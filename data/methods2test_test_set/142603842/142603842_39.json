{"test_class": {"identifier": "VehicleRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private VehicleCrudRepository crudRepository;", "modifier": "@Mock\n    private", "type": "VehicleCrudRepository", "declarator": "crudRepository", "var_name": "crudRepository"}, {"original_string": "@InjectMocks\n    private VehicleRepositoryImpl repository;", "modifier": "@InjectMocks\n    private", "type": "VehicleRepositoryImpl", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Captor\n    private ArgumentCaptor<VehicleEntity> vehicleEntityCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<VehicleEntity>", "declarator": "vehicleEntityCaptor", "var_name": "vehicleEntityCaptor"}, {"original_string": "private final Vehicle testVehicle = VehicleFactory.createVehicle(19, \"vehicle name\", 1100);", "modifier": "private final", "type": "Vehicle", "declarator": "testVehicle = VehicleFactory.createVehicle(19, \"vehicle name\", 1100)", "var_name": "testVehicle"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImplTest.java"}, "test_case": {"identifier": "create_vehicle_from_given_data", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void create_vehicle_from_given_data() {\n        // arrange\n        VehicleEntity newEntity = vehicleEntity(testVehicle);\n        when(crudRepository.save(vehicleEntityCaptor.capture())).thenReturn(newEntity);\n\n        VehicleData vehicleData = VehicleFactory.vehicleData(\"x\", 1);\n\n        // act\n        Vehicle newVehicle = repository.createVehicle(vehicleData);\n\n        // assert\n        // -- the correct values were used to save the entity\n        VehicleEntity savedVehicle = vehicleEntityCaptor.getValue();\n\n        assertThat(savedVehicle.getName()).isEqualTo(vehicleData.name());\n        assertThat(savedVehicle.getCapacity()).isEqualTo(vehicleData.capacity());\n\n        // -- created domain vehicle is equal to the entity returned by repository.save()\n        assertThat(newVehicle.id()).isEqualTo(newEntity.getId());\n        assertThat(newVehicle.name()).isEqualTo(newEntity.getName());\n        assertThat(newVehicle.capacity()).isEqualTo(newEntity.getCapacity());\n    }", "signature": "void create_vehicle_from_given_data()", "full_signature": "@Test void create_vehicle_from_given_data()", "class_method_signature": "VehicleRepositoryImplTest.create_vehicle_from_given_data()", "testcase": true, "constructor": false, "invocations": ["vehicleEntity", "thenReturn", "when", "save", "capture", "vehicleData", "createVehicle", "getValue", "isEqualTo", "assertThat", "getName", "name", "isEqualTo", "assertThat", "getCapacity", "capacity", "isEqualTo", "assertThat", "id", "getId", "isEqualTo", "assertThat", "name", "getName", "isEqualTo", "assertThat", "capacity", "getCapacity"]}, "focal_class": {"identifier": "VehicleRepositoryImpl", "superclass": "", "interfaces": "implements VehicleRepository", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(VehicleRepositoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(VehicleRepositoryImpl.class)", "var_name": "logger"}, {"original_string": "private final VehicleCrudRepository repository;", "modifier": "private final", "type": "VehicleCrudRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "VehicleRepositoryImpl", "parameters": "(VehicleCrudRepository repository)", "modifiers": "public", "return": "", "signature": " VehicleRepositoryImpl(VehicleCrudRepository repository)", "full_signature": "public  VehicleRepositoryImpl(VehicleCrudRepository repository)", "class_method_signature": "VehicleRepositoryImpl.VehicleRepositoryImpl(VehicleCrudRepository repository)", "testcase": false, "constructor": true}, {"identifier": "createVehicle", "parameters": "(int capacity)", "modifiers": "@Override public", "return": "Vehicle", "signature": "Vehicle createVehicle(int capacity)", "full_signature": "@Override public Vehicle createVehicle(int capacity)", "class_method_signature": "VehicleRepositoryImpl.createVehicle(int capacity)", "testcase": false, "constructor": false}, {"identifier": "createVehicle", "parameters": "(VehicleData vehicleData)", "modifiers": "@Override public", "return": "Vehicle", "signature": "Vehicle createVehicle(VehicleData vehicleData)", "full_signature": "@Override public Vehicle createVehicle(VehicleData vehicleData)", "class_method_signature": "VehicleRepositoryImpl.createVehicle(VehicleData vehicleData)", "testcase": false, "constructor": false}, {"identifier": "vehicles", "parameters": "()", "modifiers": "@Override public", "return": "List<Vehicle>", "signature": "List<Vehicle> vehicles()", "full_signature": "@Override public List<Vehicle> vehicles()", "class_method_signature": "VehicleRepositoryImpl.vehicles()", "testcase": false, "constructor": false}, {"identifier": "removeVehicle", "parameters": "(long id)", "modifiers": "@Override public", "return": "Vehicle", "signature": "Vehicle removeVehicle(long id)", "full_signature": "@Override public Vehicle removeVehicle(long id)", "class_method_signature": "VehicleRepositoryImpl.removeVehicle(long id)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAll()", "full_signature": "@Override public void removeAll()", "class_method_signature": "VehicleRepositoryImpl.removeAll()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(long vehicleId)", "modifiers": "@Override public", "return": "Optional<Vehicle>", "signature": "Optional<Vehicle> find(long vehicleId)", "full_signature": "@Override public Optional<Vehicle> find(long vehicleId)", "class_method_signature": "VehicleRepositoryImpl.find(long vehicleId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Vehicle vehicle)", "modifiers": "@Override public", "return": "void", "signature": "void update(Vehicle vehicle)", "full_signature": "@Override public void update(Vehicle vehicle)", "class_method_signature": "VehicleRepositoryImpl.update(Vehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "toDomain", "parameters": "(VehicleEntity vehicleEntity)", "modifiers": "private static", "return": "Vehicle", "signature": "Vehicle toDomain(VehicleEntity vehicleEntity)", "full_signature": "private static Vehicle toDomain(VehicleEntity vehicleEntity)", "class_method_signature": "VehicleRepositoryImpl.toDomain(VehicleEntity vehicleEntity)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImpl.java"}, "focal_method": {"identifier": "createVehicle", "parameters": "(int capacity)", "modifiers": "@Override public", "return": "Vehicle", "body": "@Override\n    public Vehicle createVehicle(int capacity) {\n        long id = repository.save(new VehicleEntity(0, null, capacity)).getId();\n        VehicleEntity vehicleEntity = repository.save(new VehicleEntity(id, \"Vehicle \" + id, capacity));\n        Vehicle vehicle = toDomain(vehicleEntity);\n        logger.info(\"Created vehicle {}.\", vehicle);\n        return vehicle;\n    }", "signature": "Vehicle createVehicle(int capacity)", "full_signature": "@Override public Vehicle createVehicle(int capacity)", "class_method_signature": "VehicleRepositoryImpl.createVehicle(int capacity)", "testcase": false, "constructor": false, "invocations": ["getId", "save", "save", "toDomain", "info"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}