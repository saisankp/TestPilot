{"test_class": {"identifier": "PlayersTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Player pante = when(mock(Player.class).getName()).thenReturn(\"Pante\").getMock();", "modifier": "static", "type": "Player", "declarator": "pante = when(mock(Player.class).getName()).thenReturn(\"Pante\").getMock()", "var_name": "pante"}, {"original_string": "static Player player = mock(Player.class);", "modifier": "static", "type": "Player", "declarator": "player = mock(Player.class)", "var_name": "player"}, {"original_string": "static CommandSender sender = mock(CommandSender.class);", "modifier": "static", "type": "CommandSender", "declarator": "sender = mock(CommandSender.class)", "var_name": "sender"}, {"original_string": "PlayersType type = new PlayersType();", "modifier": "", "type": "PlayersType", "declarator": "type = new PlayersType()", "var_name": "type"}], "file": "commons/src/test/java/com/karuslabs/commons/command/types/PlayersTypeTest.java"}, "test_case": {"identifier": "getExamples", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getExamples() {\n        assertEquals(List.of(\"@a\", \"@r\", \"\\\"Pante, Kevaasaurus\\\"\"), type.getExamples());\n    }", "signature": "void getExamples()", "full_signature": "@Test void getExamples()", "class_method_signature": "PlayersTypeTest.getExamples()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "getExamples"]}, "focal_class": {"identifier": "PlayersType", "superclass": "", "interfaces": "implements StringType<List<Player>>", "fields": [{"original_string": "private static final SimpleCommandExceptionType INVALID = new SimpleCommandExceptionType(new LiteralMessage(\"'@a' cannot be used in a list of players.\"));", "modifier": "private static final", "type": "SimpleCommandExceptionType", "declarator": "INVALID = new SimpleCommandExceptionType(new LiteralMessage(\"'@a' cannot be used in a list of players.\"))", "var_name": "INVALID"}, {"original_string": "private static final DynamicCommandExceptionType UNKNOWN = new DynamicCommandExceptionType(name -> new LiteralMessage(\"Unknown player or selector: \" + name));", "modifier": "private static final", "type": "DynamicCommandExceptionType", "declarator": "UNKNOWN = new DynamicCommandExceptionType(name -> new LiteralMessage(\"Unknown player or selector: \" + name))", "var_name": "UNKNOWN"}, {"original_string": "private static final List<String> EXAMPLES = List.of(\"@a\", \"@r\", \"\\\"Pante, Kevaasaurus\\\"\");", "modifier": "private static final", "type": "List<String>", "declarator": "EXAMPLES = List.of(\"@a\", \"@r\", \"\\\"Pante, Kevaasaurus\\\"\")", "var_name": "EXAMPLES"}, {"original_string": "static final Message ALL = new LiteralMessage(\"All online players\");", "modifier": "static final", "type": "Message", "declarator": "ALL = new LiteralMessage(\"All online players\")", "var_name": "ALL"}, {"original_string": "static final Message RANDOM = new LiteralMessage(\"A online player chosen at random\");", "modifier": "static final", "type": "Message", "declarator": "RANDOM = new LiteralMessage(\"A online player chosen at random\")", "var_name": "RANDOM"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}], "methods": [{"identifier": "PlayersType", "parameters": "()", "modifiers": "public", "return": "", "signature": " PlayersType()", "full_signature": "public  PlayersType()", "class_method_signature": "PlayersType.PlayersType()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(StringReader reader)", "modifiers": "@Override public", "return": "List<Player>", "signature": "List<Player> parse(StringReader reader)", "full_signature": "@Override public List<Player> parse(StringReader reader)", "class_method_signature": "PlayersType.parse(StringReader reader)", "testcase": false, "constructor": false}, {"identifier": "online", "parameters": "()", "modifiers": "", "return": "List<Player>", "signature": "List<Player> online()", "full_signature": " List<Player> online()", "class_method_signature": "PlayersType.online()", "testcase": false, "constructor": false}, {"identifier": "listSuggestions", "parameters": "(S source, CommandContext<S> context, SuggestionsBuilder builder)", "modifiers": "@Override public", "return": "CompletableFuture<Suggestions>", "signature": "CompletableFuture<Suggestions> listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "full_signature": "@Override public CompletableFuture<Suggestions> listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "class_method_signature": "PlayersType.listSuggestions(S source, CommandContext<S> context, SuggestionsBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getExamples", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getExamples()", "full_signature": "@Override public List<String> getExamples()", "class_method_signature": "PlayersType.getExamples()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/types/PlayersType.java"}, "focal_method": {"identifier": "getExamples", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "body": "@Override\n    public List<String> getExamples() {\n        return EXAMPLES;\n    }", "signature": "List<String> getExamples()", "full_signature": "@Override public List<String> getExamples()", "class_method_signature": "PlayersType.getExamples()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}