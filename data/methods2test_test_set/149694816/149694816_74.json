{"test_class": {"identifier": "FileContentTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/FileContentTest.java"}, "test_case": {"identifier": "testOpen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOpen() throws IOException {\n    final byte[] bytes = randomUUID().toString().getBytes();\n    final FileContent fileContent = new FileContent(\n        randomUUID().toString(),\n        () -> new ByteArrayInputStream(bytes));\n    try (InputStream in = fileContent.open()) {\n      assertArrayEquals(bytes, from(in));\n    }\n  }", "signature": "void testOpen()", "full_signature": "@Test public void testOpen()", "class_method_signature": "FileContentTest.testOpen()", "testcase": true, "constructor": false, "invocations": ["getBytes", "toString", "randomUUID", "toString", "randomUUID", "open", "assertArrayEquals", "from"]}, "focal_class": {"identifier": "FileContent", "superclass": "", "interfaces": "implements Comparable<FileContent>", "fields": [{"original_string": "@Getter\n  @NonNull\n  protected final String path;", "modifier": "@Getter\n  @NonNull\n  protected final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "protected final DangerousSupplier<InputStream> contentSupplier;", "modifier": "protected final", "type": "DangerousSupplier<InputStream>", "declarator": "contentSupplier", "var_name": "contentSupplier"}], "methods": [{"identifier": "open", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream open()", "full_signature": "public InputStream open()", "class_method_signature": "FileContent.open()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileContent.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final FileContent o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final FileContent o)", "full_signature": "@Override public int compareTo(final FileContent o)", "class_method_signature": "FileContent.compareTo(final FileContent o)", "testcase": false, "constructor": false}, {"identifier": "getFileFrom", "parameters": "(File base)", "modifiers": "public", "return": "File", "signature": "File getFileFrom(File base)", "full_signature": "public File getFileFrom(File base)", "class_method_signature": "FileContent.getFileFrom(File base)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/FileContent.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "InputStream", "body": "public InputStream open() throws IOException {\n    try {\n      return contentSupplier.get();\n    } catch (final IOException ex) {\n      throw ex;\n    } catch (final Throwable ex) {\n      throw new IOException(ex);\n    }\n  }", "signature": "InputStream open()", "full_signature": "public InputStream open()", "class_method_signature": "FileContent.open()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}