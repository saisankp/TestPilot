{"test_class": {"identifier": "HmsLocalRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    InventoryUtil inventoryUtil;", "modifier": "@Mock", "type": "InventoryUtil", "declarator": "inventoryUtil", "var_name": "inventoryUtil"}, {"original_string": "HMSLocalRestService hmsLocalRestServiceMock = mock( HMSLocalRestService.class );", "modifier": "", "type": "HMSLocalRestService", "declarator": "hmsLocalRestServiceMock = mock( HMSLocalRestService.class )", "var_name": "hmsLocalRestServiceMock"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/controller/HmsLocalRestServiceTest.java"}, "test_case": {"identifier": "getMirrorHostInfo_nodeInNodeMap", "parameters": "()", "modifiers": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) @Test public", "return": "void", "body": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } )\n    @Test\n    public void getMirrorHostInfo_nodeInNodeMap()\n        throws Exception\n    {\n        ResponseEntity responseEntityMock = mock( ResponseEntity.class );\n        HmsOobAgentRestTemplate restTemplateMock = mock( HmsOobAgentRestTemplate.class );\n        whenNew( HmsOobAgentRestTemplate.class ).withAnyArguments().thenReturn( restTemplateMock );\n        when( restTemplateMock.exchange( any( HttpMethod.class ), anyString(), anyString(),\n                                         any( Class.class ) ) ).thenReturn( responseEntityMock );\n\n        HMSLocalRestService hmsLocalRestService = new HMSLocalRestService();\n        HttpServletRequest requestMock = mock( HttpServletRequest.class );\n        HttpServletResponse responseMock = mock( HttpServletResponse.class );\n        when( requestMock.getServletPath() ).thenReturn( \"/test\" );\n        when( requestMock.getPathInfo() ).thenReturn( \"/test\" );\n        when( requestMock.getQueryString() ).thenReturn( \"test\" );\n        when( requestMock.getMethod() ).thenReturn( \"GET\" );\n        ResponseEntity response =\n            hmsLocalRestService.getMirrorHostInfo( null, HttpMethod.GET, requestMock, responseMock );\n\n        assertSame( responseEntityMock, response );\n    }", "signature": "void getMirrorHostInfo_nodeInNodeMap()", "full_signature": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) @Test public void getMirrorHostInfo_nodeInNodeMap()", "class_method_signature": "HmsLocalRestServiceTest.getMirrorHostInfo_nodeInNodeMap()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "exchange", "any", "anyString", "anyString", "any", "mock", "mock", "thenReturn", "when", "getServletPath", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getQueryString", "thenReturn", "when", "getMethod", "getMirrorHostInfo", "assertSame"]}, "focal_class": {"identifier": "HMSLocalRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( HMSLocalRestService.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HMSLocalRestService.class )", "var_name": "logger"}, {"original_string": "InbandServiceImpl inbandServiceImpl = new InbandServiceImpl();", "modifier": "", "type": "InbandServiceImpl", "declarator": "inbandServiceImpl = new InbandServiceImpl()", "var_name": "inbandServiceImpl"}, {"original_string": "@Autowired\n    private HmsDataCache hmsDataCache;", "modifier": "@Autowired\n    private", "type": "HmsDataCache", "declarator": "hmsDataCache", "var_name": "hmsDataCache"}, {"original_string": "@Autowired\n    private ApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Value( \"${hms.oob.nodes.pathinfo}\" )\n    private String hmsOobPathInfo;", "modifier": "@Value( \"${hms.oob.nodes.pathinfo}\" )\n    private", "type": "String", "declarator": "hmsOobPathInfo", "var_name": "hmsOobPathInfo"}, {"original_string": "@Value( \"${hms.ib.inventory.location}\" )\n    private String hmsIbInventoryLocation;", "modifier": "@Value( \"${hms.ib.inventory.location}\" )\n    private", "type": "String", "declarator": "hmsIbInventoryLocation", "var_name": "hmsIbInventoryLocation"}, {"original_string": "@Value( \"${hms.oob.inventory.poll.interval}\" )\n    private int hmsOobInventoryPollInterval;", "modifier": "@Value( \"${hms.oob.inventory.poll.interval}\" )\n    private", "type": "int", "declarator": "hmsOobInventoryPollInterval", "var_name": "hmsOobInventoryPollInterval"}, {"original_string": "@Value( \"${hms.switch.username}\" )\n    private String hmsOobUsername;", "modifier": "@Value( \"${hms.switch.username}\" )\n    private", "type": "String", "declarator": "hmsOobUsername", "var_name": "hmsOobUsername"}, {"original_string": "@Value( \"${hms.switch.password}\" )\n    private String hmsOobPassword;", "modifier": "@Value( \"${hms.switch.password}\" )\n    private", "type": "String", "declarator": "hmsOobPassword", "var_name": "hmsOobPassword"}, {"original_string": "@Autowired\n    TopologyAggregator topologyAggregator;", "modifier": "@Autowired", "type": "TopologyAggregator", "declarator": "topologyAggregator", "var_name": "topologyAggregator"}, {"original_string": "@Autowired\n    HmsOutOfBandHandshakeTask outOfBandHandShakeTask;", "modifier": "@Autowired", "type": "HmsOutOfBandHandshakeTask", "declarator": "outOfBandHandShakeTask", "var_name": "outOfBandHandShakeTask"}, {"original_string": "@Autowired\n    private HostDataAggregator hostDataAggregator;", "modifier": "@Autowired\n    private", "type": "HostDataAggregator", "declarator": "hostDataAggregator", "var_name": "hostDataAggregator"}], "methods": [{"identifier": "getMirrorHostInfo", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/inventory\", \"/switches\", \"/switches/{switch_id}/**\" } ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/inventory\", \"/switches\", \"/switches/{switch_id}/**\" } ) @ResponseBody public ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getSwitchEvents", "parameters": "( @PathVariable( \"switch_id\" ) String switch_id,\n                                        @PathVariable( \"event_source\" ) EventComponent event_source )", "modifiers": "@RequestMapping( value = \"/event/switches/{switch_id}/{event_source}\", method = RequestMethod.GET ) @ResponseBody public", "return": "List<Event>", "signature": "List<Event> getSwitchEvents( @PathVariable( \"switch_id\" ) String switch_id,\n                                        @PathVariable( \"event_source\" ) EventComponent event_source )", "full_signature": "@RequestMapping( value = \"/event/switches/{switch_id}/{event_source}\", method = RequestMethod.GET ) @ResponseBody public List<Event> getSwitchEvents( @PathVariable( \"switch_id\" ) String switch_id,\n                                        @PathVariable( \"event_source\" ) EventComponent event_source )", "class_method_signature": "HMSLocalRestService.getSwitchEvents( @PathVariable( \"switch_id\" ) String switch_id,\n                                        @PathVariable( \"event_source\" ) EventComponent event_source )", "testcase": false, "constructor": false}, {"identifier": "getSwitchInfo", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/switches/{switch_id}\", method = RequestMethod.GET ) @ResponseBody public", "return": "SwitchInfo", "signature": "SwitchInfo getSwitchInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/switches/{switch_id}\", method = RequestMethod.GET ) @ResponseBody public SwitchInfo getSwitchInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getSwitchInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "updateSwitchNode", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/switches/{switch_id}\", method = RequestMethod.PUT ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> updateSwitchNode( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/switches/{switch_id}\", method = RequestMethod.PUT ) @ResponseBody public ResponseEntity<Object> updateSwitchNode( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.updateSwitchNode( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getAboutResponse", "parameters": "()", "modifiers": "@RequestMapping( value = \"/about\", method = RequestMethod.GET ) @ResponseBody public", "return": "Map<String, AboutResponse>", "signature": "Map<String, AboutResponse> getAboutResponse()", "full_signature": "@RequestMapping( value = \"/about\", method = RequestMethod.GET ) @ResponseBody public Map<String, AboutResponse> getAboutResponse()", "class_method_signature": "HMSLocalRestService.getAboutResponse()", "testcase": false, "constructor": false}, {"identifier": "getAllNodes", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                              HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/nodes\", method = RequestMethod.GET ) @ResponseBody public", "return": "Map<String, Object[]>", "signature": "Map<String, Object[]> getAllNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                              HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/nodes\", method = RequestMethod.GET ) @ResponseBody public Map<String, Object[]> getAllNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                              HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getAllNodes( @RequestBody( required = false ) String body, HttpMethod method,\n                                              HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getAllHostCache", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/host/cache\", method = RequestMethod.GET ) @ResponseBody public", "return": "Map<String, ServerInfo>", "signature": "Map<String, ServerInfo> getAllHostCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/host/cache\", method = RequestMethod.GET ) @ResponseBody public Map<String, ServerInfo> getAllHostCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getAllHostCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                    HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getAllSwitchCache", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                        HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/switch/cache\", method = RequestMethod.GET ) @ResponseBody public", "return": "Map<String, NBSwitchInfo>", "signature": "Map<String, NBSwitchInfo> getAllSwitchCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                        HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/switch/cache\", method = RequestMethod.GET ) @ResponseBody public Map<String, NBSwitchInfo> getAllSwitchCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                        HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getAllSwitchCache( @RequestBody( required = false ) String body, HttpMethod method,\n                                                        HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getDiscoveryStatus", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/discover\", method = RequestMethod.GET ) @ResponseBody public", "return": "NodeDiscoveryResponse", "signature": "NodeDiscoveryResponse getDiscoveryStatus( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/discover\", method = RequestMethod.GET ) @ResponseBody public NodeDiscoveryResponse getDiscoveryStatus( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getDiscoveryStatus( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getNetTop", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                          HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/topology\", method = RequestMethod.GET ) @ResponseBody public", "return": "List<NetTopElement>", "signature": "List<NetTopElement> getNetTop( @RequestBody( required = false ) String body, HttpMethod method,\n                                          HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/topology\", method = RequestMethod.GET ) @ResponseBody public List<NetTopElement> getNetTop( @RequestBody( required = false ) String body, HttpMethod method,\n                                          HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getNetTop( @RequestBody( required = false ) String body, HttpMethod method,\n                                          HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void initialize()", "full_signature": "@PostConstruct public void initialize()", "class_method_signature": "HMSLocalRestService.initialize()", "testcase": false, "constructor": false}, {"identifier": "initializeInventory", "parameters": "()", "modifiers": "public", "return": "BaseResponse", "signature": "BaseResponse initializeInventory()", "full_signature": "public BaseResponse initializeInventory()", "class_method_signature": "HMSLocalRestService.initializeInventory()", "testcase": false, "constructor": false}, {"identifier": "refreshInventory", "parameters": "( @RequestBody( required = false ) String body,\n                                                          HttpMethod method )", "modifiers": "@RequestMapping( value = \"/refreshinventory\", method = RequestMethod.POST ) @ResponseBody public", "return": "ResponseEntity<BaseResponse>", "signature": "ResponseEntity<BaseResponse> refreshInventory( @RequestBody( required = false ) String body,\n                                                          HttpMethod method )", "full_signature": "@RequestMapping( value = \"/refreshinventory\", method = RequestMethod.POST ) @ResponseBody public ResponseEntity<BaseResponse> refreshInventory( @RequestBody( required = false ) String body,\n                                                          HttpMethod method )", "class_method_signature": "HMSLocalRestService.refreshInventory( @RequestBody( required = false ) String body,\n                                                          HttpMethod method )", "testcase": false, "constructor": false}, {"identifier": "updateHmsCacheOnRefreshInventory", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateHmsCacheOnRefreshInventory()", "full_signature": "public void updateHmsCacheOnRefreshInventory()", "class_method_signature": "HMSLocalRestService.updateHmsCacheOnRefreshInventory()", "testcase": false, "constructor": false}, {"identifier": "createHmsInMemoryCacheOnBootUp", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createHmsInMemoryCacheOnBootUp()", "full_signature": "public void createHmsInMemoryCacheOnBootUp()", "class_method_signature": "HMSLocalRestService.createHmsInMemoryCacheOnBootUp()", "testcase": false, "constructor": false}, {"identifier": "updateInventory", "parameters": "( @RequestBody( required = false ) String body )", "modifiers": "@RequestMapping( value = { \"/host/inventory\" }, method = RequestMethod.PUT ) public @ResponseBody", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> updateInventory( @RequestBody( required = false ) String body )", "full_signature": "@RequestMapping( value = { \"/host/inventory\" }, method = RequestMethod.PUT ) public @ResponseBody ResponseEntity<Object> updateInventory( @RequestBody( required = false ) String body )", "class_method_signature": "HMSLocalRestService.updateInventory( @RequestBody( required = false ) String body )", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                             HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/handshake\" } ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> handshake( @RequestBody( required = false ) String body, HttpMethod method,\n                                             HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/handshake\" } ) @ResponseBody public ResponseEntity<Object> handshake( @RequestBody( required = false ) String body, HttpMethod method,\n                                             HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.handshake( @RequestBody( required = false ) String body, HttpMethod method,\n                                             HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getNewHosts", "parameters": "()", "modifiers": "@SuppressWarnings( \"unchecked\" ) @RequestMapping( value = { \"/newhosts\" }, method = RequestMethod.GET ) @ResponseBody public", "return": "ResponseEntity<T>", "signature": "ResponseEntity<T> getNewHosts()", "full_signature": "@SuppressWarnings( \"unchecked\" ) @RequestMapping( value = { \"/newhosts\" }, method = RequestMethod.GET ) @ResponseBody public ResponseEntity<T> getNewHosts()", "class_method_signature": "HMSLocalRestService.getNewHosts()", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "( @PathVariable( \"aggregator_ip\" ) String aggregatorIp )", "modifiers": "@RequestMapping( value = \"/handshake/{aggregator_ip}\", method = RequestMethod.POST ) @ResponseBody public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> handshake( @PathVariable( \"aggregator_ip\" ) String aggregatorIp )", "full_signature": "@RequestMapping( value = \"/handshake/{aggregator_ip}\", method = RequestMethod.POST ) @ResponseBody public ResponseEntity<Object> handshake( @PathVariable( \"aggregator_ip\" ) String aggregatorIp )", "class_method_signature": "HMSLocalRestService.handshake( @PathVariable( \"aggregator_ip\" ) String aggregatorIp )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/controller/HMSLocalRestService.java"}, "focal_method": {"identifier": "getMirrorHostInfo", "parameters": "( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "modifiers": "@RequestMapping( value = { \"/inventory\", \"/switches\", \"/switches/{switch_id}/**\" } ) @ResponseBody public", "return": "ResponseEntity<Object>", "body": "@RequestMapping( value = { \"/inventory\", \"/switches\", \"/switches/{switch_id}/**\" } )\n    @ResponseBody\n    public ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )\n        throws HMSRestException, JsonParseException, JsonMappingException, IOException\n    {\n        ResponseEntity<Object> nodes;\n        String path = null;\n\n        try\n        {\n            path = request.getServletPath() + request.getPathInfo();\n            String query = request.getQueryString();\n            HttpMethod httpMethod = HttpMethod.valueOf( request.getMethod() );\n            String contentType = request.getContentType();\n\n            HmsOobAgentRestTemplate<String> restTemplate = new HmsOobAgentRestTemplate<String>( body, contentType );\n            nodes = restTemplate.exchange( httpMethod, path, query, Object.class );\n\n        }\n        catch ( HttpStatusCodeException e )\n        {\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType( MediaType.APPLICATION_JSON );\n            nodes = new ResponseEntity<Object>( e.getResponseBodyAsString(), headers, e.getStatusCode() );\n        }\n        catch ( Exception e )\n        {\n            throw new HMSRestException( HttpStatus.INTERNAL_SERVER_ERROR.value(), \"Server Error\",\n                                        \"Exception while connecting to hms.\" + ( ( path != null ) ? path : \"\" ) );\n        }\n        return nodes;\n    }", "signature": "ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "full_signature": "@RequestMapping( value = { \"/inventory\", \"/switches\", \"/switches/{switch_id}/**\" } ) @ResponseBody public ResponseEntity<Object> getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "HMSLocalRestService.getMirrorHostInfo( @RequestBody( required = false ) String body, HttpMethod method,\n                                                     HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false, "invocations": ["getServletPath", "getPathInfo", "getQueryString", "valueOf", "getMethod", "getContentType", "exchange", "setContentType", "getResponseBodyAsString", "getStatusCode", "value"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}