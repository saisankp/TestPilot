{"test_class": {"identifier": "ExperimentRestApiTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ExperimentRestApi experimentRestApi;", "modifier": "private static", "type": "ExperimentRestApi", "declarator": "experimentRestApi", "var_name": "experimentRestApi"}, {"original_string": "private static ExperimentManager mockExperimentManager;", "modifier": "private static", "type": "ExperimentManager", "declarator": "mockExperimentManager", "var_name": "mockExperimentManager"}, {"original_string": "private final AtomicInteger experimentCounter = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "experimentCounter = new AtomicInteger(0)", "var_name": "experimentCounter"}, {"original_string": "EnvironmentSpec environmentSpec = new EnvironmentSpec();", "modifier": "", "type": "EnvironmentSpec", "declarator": "environmentSpec = new EnvironmentSpec()", "var_name": "environmentSpec"}, {"original_string": "KernelSpec kernelSpec = new KernelSpec();", "modifier": "", "type": "KernelSpec", "declarator": "kernelSpec = new KernelSpec()", "var_name": "kernelSpec"}, {"original_string": "ExperimentMeta meta = new ExperimentMeta();", "modifier": "", "type": "ExperimentMeta", "declarator": "meta = new ExperimentMeta()", "var_name": "meta"}, {"original_string": "ExperimentSpec experimentSpec = new ExperimentSpec();", "modifier": "", "type": "ExperimentSpec", "declarator": "experimentSpec = new ExperimentSpec()", "var_name": "experimentSpec"}, {"original_string": "private Experiment actualExperiment;", "modifier": "private", "type": "Experiment", "declarator": "actualExperiment", "var_name": "actualExperiment"}, {"original_string": "private static final GsonBuilder gsonBuilder = new GsonBuilder()\n      .registerTypeAdapter(ExperimentId.class, new ExperimentIdSerializer())\n      .registerTypeAdapter(ExperimentId.class, new ExperimentIdDeserializer());", "modifier": "private static final", "type": "GsonBuilder", "declarator": "gsonBuilder = new GsonBuilder()\n      .registerTypeAdapter(ExperimentId.class, new ExperimentIdSerializer())\n      .registerTypeAdapter(ExperimentId.class, new ExperimentIdDeserializer())", "var_name": "gsonBuilder"}, {"original_string": "private static Gson gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();", "modifier": "private static", "type": "Gson", "declarator": "gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create()", "var_name": "gson"}, {"original_string": "private static final String experimentAcceptedTime = \"2020-08-06T08:39:22.000+08:00\";", "modifier": "private static final", "type": "String", "declarator": "experimentAcceptedTime = \"2020-08-06T08:39:22.000+08:00\"", "var_name": "experimentAcceptedTime"}, {"original_string": "private static final String experimentCreatedTime = \"2020-08-06T08:39:22.000+08:00\";", "modifier": "private static final", "type": "String", "declarator": "experimentCreatedTime = \"2020-08-06T08:39:22.000+08:00\"", "var_name": "experimentCreatedTime"}, {"original_string": "private static final String experimentRunningTime = \"2020-08-06T08:39:23.000+08:00\";", "modifier": "private static final", "type": "String", "declarator": "experimentRunningTime = \"2020-08-06T08:39:23.000+08:00\"", "var_name": "experimentRunningTime"}, {"original_string": "private static final String experimentFinishedTime = \"2020-08-06T08:41:07.000+08:00\";", "modifier": "private static final", "type": "String", "declarator": "experimentFinishedTime = \"2020-08-06T08:41:07.000+08:00\"", "var_name": "experimentFinishedTime"}, {"original_string": "private static final String experimentName = \"tf-example\";", "modifier": "private static final", "type": "String", "declarator": "experimentName = \"tf-example\"", "var_name": "experimentName"}, {"original_string": "private static final String experimentUid = \"0b617cea-81fa-40b6-bbff-da3e400d2be4\";", "modifier": "private static final", "type": "String", "declarator": "experimentUid = \"0b617cea-81fa-40b6-bbff-da3e400d2be4\"", "var_name": "experimentUid"}, {"original_string": "private static final String experimentStatus = \"Succeeded\";", "modifier": "private static final", "type": "String", "declarator": "experimentStatus = \"Succeeded\"", "var_name": "experimentStatus"}, {"original_string": "private static final String metaName = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "metaName = \"foo\"", "var_name": "metaName"}, {"original_string": "private static final String metaFramework = \"TensorFlow\";", "modifier": "private static final", "type": "String", "declarator": "metaFramework = \"TensorFlow\"", "var_name": "metaFramework"}, {"original_string": "private static final String metaNamespace = \"fooNamespace\";", "modifier": "private static final", "type": "String", "declarator": "metaNamespace = \"fooNamespace\"", "var_name": "metaNamespace"}, {"original_string": "private static final String dockerImage = \"continuumio/anaconda3\";", "modifier": "private static final", "type": "String", "declarator": "dockerImage = \"continuumio/anaconda3\"", "var_name": "dockerImage"}, {"original_string": "private static final String kernelSpecName = \"team_default_python_3\";", "modifier": "private static final", "type": "String", "declarator": "kernelSpecName = \"team_default_python_3\"", "var_name": "kernelSpecName"}, {"original_string": "private static final List<String> kernelChannels = Arrays.asList(\"defaults\", \"anaconda\");", "modifier": "private static final", "type": "List<String>", "declarator": "kernelChannels = Arrays.asList(\"defaults\", \"anaconda\")", "var_name": "kernelChannels"}, {"original_string": "private static final List<String> kernelDependencies = Arrays.asList(\n      \"_ipyw_jlab_nb_ext_conf=0.1.0=py37_0\",\n      \"alabaster=0.7.12=py37_0\",\n      \"anaconda=2020.02=py37_0\",\n      \"anaconda-client=1.7.2=py37_0\",\n      \"anaconda-navigator=1.9.12=py37_0\");", "modifier": "private static final", "type": "List<String>", "declarator": "kernelDependencies = Arrays.asList(\n      \"_ipyw_jlab_nb_ext_conf=0.1.0=py37_0\",\n      \"alabaster=0.7.12=py37_0\",\n      \"anaconda=2020.02=py37_0\",\n      \"anaconda-client=1.7.2=py37_0\",\n      \"anaconda-navigator=1.9.12=py37_0\")", "var_name": "kernelDependencies"}, {"original_string": "private final ExperimentId experimentId = ExperimentId.newInstance(SubmarineServer.getServerTimeStamp(),\n      experimentCounter.incrementAndGet());", "modifier": "private final", "type": "ExperimentId", "declarator": "experimentId = ExperimentId.newInstance(SubmarineServer.getServerTimeStamp(),\n      experimentCounter.incrementAndGet())", "var_name": "experimentId"}, {"original_string": "private final String dummyId = \"experiment_1597012631706_0001\";", "modifier": "private final", "type": "String", "declarator": "dummyId = \"experiment_1597012631706_0001\"", "var_name": "dummyId"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/rest/ExperimentRestApiTest.java"}, "test_case": {"identifier": "testDeleteExperiment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeleteExperiment() {\n    String log1ID = \"experiment_1597012631706_0002\";\n    when(mockExperimentManager.deleteExperiment(log1ID)).thenReturn(actualExperiment);\n    Response deleteExperimentResponse = experimentRestApi.deleteExperiment(log1ID);\n    Experiment result = getResultFromResponse(deleteExperimentResponse, Experiment.class);\n    verifyResult(result, experimentUid);\n  }", "signature": "void testDeleteExperiment()", "full_signature": "@Test public void testDeleteExperiment()", "class_method_signature": "ExperimentRestApiTest.testDeleteExperiment()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "deleteExperiment", "deleteExperiment", "getResultFromResponse", "verifyResult"]}, "focal_class": {"identifier": "ExperimentRestApi", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExperimentManager experimentManager = ExperimentManager.getInstance();", "modifier": "private", "type": "ExperimentManager", "declarator": "experimentManager = ExperimentManager.getInstance()", "var_name": "experimentManager"}], "methods": [{"identifier": "setExperimentManager", "parameters": "(ExperimentManager experimentManager)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setExperimentManager(ExperimentManager experimentManager)", "full_signature": "@VisibleForTesting public void setExperimentManager(ExperimentManager experimentManager)", "class_method_signature": "ExperimentRestApi.setExperimentManager(ExperimentManager experimentManager)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "()", "modifiers": "@GET @Path(RestConstants.PING) @Consumes(MediaType.APPLICATION_JSON) @Operation(summary = \"Ping submarine server\", tags = {\"experiment\"}, description = \"Return the Pong message for test the connectivity\", responses = { @ApiResponse(responseCode = \"200\", description = \"successful operation\", content = @Content(schema = @Schema(implementation = String.class)))}) public", "return": "Response", "signature": "Response ping()", "full_signature": "@GET @Path(RestConstants.PING) @Consumes(MediaType.APPLICATION_JSON) @Operation(summary = \"Ping submarine server\", tags = {\"experiment\"}, description = \"Return the Pong message for test the connectivity\", responses = { @ApiResponse(responseCode = \"200\", description = \"successful operation\", content = @Content(schema = @Schema(implementation = String.class)))}) public Response ping()", "class_method_signature": "ExperimentRestApi.ping()", "testcase": false, "constructor": false}, {"identifier": "createExperiment", "parameters": "(ExperimentSpec spec)", "modifiers": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create an experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response createExperiment(ExperimentSpec spec)", "full_signature": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create an experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public Response createExperiment(ExperimentSpec spec)", "class_method_signature": "ExperimentRestApi.createExperiment(ExperimentSpec spec)", "testcase": false, "constructor": false}, {"identifier": "SubmitExperimentTemplate", "parameters": "(@PathParam(\"name\") String name, \n        ExperimentTemplateSubmit spec)", "modifiers": "@POST @Path(\"/{name}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"use experiment template to create an experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response SubmitExperimentTemplate(@PathParam(\"name\") String name, \n        ExperimentTemplateSubmit spec)", "full_signature": "@POST @Path(\"/{name}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"use experiment template to create an experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public Response SubmitExperimentTemplate(@PathParam(\"name\") String name, \n        ExperimentTemplateSubmit spec)", "class_method_signature": "ExperimentRestApi.SubmitExperimentTemplate(@PathParam(\"name\") String name, \n        ExperimentTemplateSubmit spec)", "testcase": false, "constructor": false}, {"identifier": "listExperiments", "parameters": "(@QueryParam(\"status\") String status)", "modifiers": "@GET @Operation(summary = \"List experiments\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response listExperiments(@QueryParam(\"status\") String status)", "full_signature": "@GET @Operation(summary = \"List experiments\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public Response listExperiments(@QueryParam(\"status\") String status)", "class_method_signature": "ExperimentRestApi.listExperiments(@QueryParam(\"status\") String status)", "testcase": false, "constructor": false}, {"identifier": "getExperiment", "parameters": "(@PathParam(RestConstants.ID) String id)", "modifiers": "@GET @Path(\"/{id}\") @Operation(summary = \"Get the experiment's detailed info by id\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public", "return": "Response", "signature": "Response getExperiment(@PathParam(RestConstants.ID) String id)", "full_signature": "@GET @Path(\"/{id}\") @Operation(summary = \"Get the experiment's detailed info by id\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public Response getExperiment(@PathParam(RestConstants.ID) String id)", "class_method_signature": "ExperimentRestApi.getExperiment(@PathParam(RestConstants.ID) String id)", "testcase": false, "constructor": false}, {"identifier": "patchExperiment", "parameters": "(@PathParam(RestConstants.ID) String id, ExperimentSpec spec)", "modifiers": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the experiment in the submarine server with spec\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public", "return": "Response", "signature": "Response patchExperiment(@PathParam(RestConstants.ID) String id, ExperimentSpec spec)", "full_signature": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the experiment in the submarine server with spec\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public Response patchExperiment(@PathParam(RestConstants.ID) String id, ExperimentSpec spec)", "class_method_signature": "ExperimentRestApi.patchExperiment(@PathParam(RestConstants.ID) String id, ExperimentSpec spec)", "testcase": false, "constructor": false}, {"identifier": "deleteExperiment", "parameters": "(@PathParam(RestConstants.ID) String id)", "modifiers": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public", "return": "Response", "signature": "Response deleteExperiment(@PathParam(RestConstants.ID) String id)", "full_signature": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public Response deleteExperiment(@PathParam(RestConstants.ID) String id)", "class_method_signature": "ExperimentRestApi.deleteExperiment(@PathParam(RestConstants.ID) String id)", "testcase": false, "constructor": false}, {"identifier": "listLog", "parameters": "(@QueryParam(\"status\") String status)", "modifiers": "@GET @Path(\"/logs\") @Operation(summary = \"List experiment's log\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response listLog(@QueryParam(\"status\") String status)", "full_signature": "@GET @Path(\"/logs\") @Operation(summary = \"List experiment's log\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class)))}) public Response listLog(@QueryParam(\"status\") String status)", "class_method_signature": "ExperimentRestApi.listLog(@QueryParam(\"status\") String status)", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "(@PathParam(RestConstants.ID) String id)", "modifiers": "@GET @Path(\"/logs/{id}\") @Operation(summary = \"Log experiment by id\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public", "return": "Response", "signature": "Response getLog(@PathParam(RestConstants.ID) String id)", "full_signature": "@GET @Path(\"/logs/{id}\") @Operation(summary = \"Log experiment by id\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public Response getLog(@PathParam(RestConstants.ID) String id)", "class_method_signature": "ExperimentRestApi.getLog(@PathParam(RestConstants.ID) String id)", "testcase": false, "constructor": false}, {"identifier": "parseExperimentServiceException", "parameters": "(SubmarineRuntimeException e)", "modifiers": "private", "return": "Response", "signature": "Response parseExperimentServiceException(SubmarineRuntimeException e)", "full_signature": "private Response parseExperimentServiceException(SubmarineRuntimeException e)", "class_method_signature": "ExperimentRestApi.parseExperimentServiceException(SubmarineRuntimeException e)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/rest/ExperimentRestApi.java"}, "focal_method": {"identifier": "deleteExperiment", "parameters": "(@PathParam(RestConstants.ID) String id)", "modifiers": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public", "return": "Response", "body": "@DELETE\n  @Path(\"/{id}\")\n  @Operation(summary = \"Delete the experiment\",\n      tags = {\"experiment\"},\n      responses = {\n          @ApiResponse(description = \"successful operation\", content = @Content(\n              schema = @Schema(implementation = JsonResponse.class))),\n          @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")})\n  public Response deleteExperiment(@PathParam(RestConstants.ID) String id) {\n    try {\n      Experiment experiment = experimentManager.deleteExperiment(id);\n      return new JsonResponse.Builder<Experiment>(Response.Status.OK).success(true)\n          .result(experiment).build();\n    } catch (SubmarineRuntimeException e) {\n      return parseExperimentServiceException(e);\n    }\n  }", "signature": "Response deleteExperiment(@PathParam(RestConstants.ID) String id)", "full_signature": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experiment\", tags = {\"experiment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse(responseCode = \"404\", description = \"Experiment not found\")}) public Response deleteExperiment(@PathParam(RestConstants.ID) String id)", "class_method_signature": "ExperimentRestApi.deleteExperiment(@PathParam(RestConstants.ID) String id)", "testcase": false, "constructor": false, "invocations": ["deleteExperiment", "build", "result", "success", "parseExperimentServiceException"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}