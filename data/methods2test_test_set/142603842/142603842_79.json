{"test_class": {"identifier": "PortableRoutingPlanFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/PortableRoutingPlanFactoryTest.java"}, "test_case": {"identifier": "portable_routing_plan_empty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void portable_routing_plan_empty() {\n        PortableRoutingPlan portablePlan = PortableRoutingPlanFactory.fromRoutingPlan(RoutingPlan.empty());\n        assertThat(portablePlan.getDistance()).isEqualTo(PortableDistance.fromDistance(Distance.ZERO));\n        assertThat(portablePlan.getVehicles()).isEmpty();\n        assertThat(portablePlan.getDepot()).isNull();\n        assertThat(portablePlan.getRoutes()).isEmpty();\n    }", "signature": "void portable_routing_plan_empty()", "full_signature": "@Test void portable_routing_plan_empty()", "class_method_signature": "PortableRoutingPlanFactoryTest.portable_routing_plan_empty()", "testcase": true, "constructor": false, "invocations": ["fromRoutingPlan", "empty", "isEqualTo", "assertThat", "getDistance", "fromDistance", "isEmpty", "assertThat", "getVehicles", "isNull", "assertThat", "getDepot", "isEmpty", "assertThat", "getRoutes"]}, "focal_class": {"identifier": "PortableRoutingPlanFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PortableRoutingPlanFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " PortableRoutingPlanFactory()", "full_signature": "private  PortableRoutingPlanFactory()", "class_method_signature": "PortableRoutingPlanFactory.PortableRoutingPlanFactory()", "testcase": false, "constructor": true}, {"identifier": "fromRoutingPlan", "parameters": "(RoutingPlan routingPlan)", "modifiers": "static", "return": "PortableRoutingPlan", "signature": "PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "full_signature": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "class_method_signature": "PortableRoutingPlanFactory.fromRoutingPlan(RoutingPlan routingPlan)", "testcase": false, "constructor": false}, {"identifier": "portableTrack", "parameters": "(List<List<Coordinates>> track)", "modifiers": "private static", "return": "List<List<PortableCoordinates>>", "signature": "List<List<PortableCoordinates>> portableTrack(List<List<Coordinates>> track)", "full_signature": "private static List<List<PortableCoordinates>> portableTrack(List<List<Coordinates>> track)", "class_method_signature": "PortableRoutingPlanFactory.portableTrack(List<List<Coordinates>> track)", "testcase": false, "constructor": false}, {"identifier": "portableVisits", "parameters": "(List<Location> visits)", "modifiers": "private static", "return": "List<PortableLocation>", "signature": "List<PortableLocation> portableVisits(List<Location> visits)", "full_signature": "private static List<PortableLocation> portableVisits(List<Location> visits)", "class_method_signature": "PortableRoutingPlanFactory.portableVisits(List<Location> visits)", "testcase": false, "constructor": false}, {"identifier": "portableVehicles", "parameters": "(List<Vehicle> vehicles)", "modifiers": "private static", "return": "List<PortableVehicle>", "signature": "List<PortableVehicle> portableVehicles(List<Vehicle> vehicles)", "full_signature": "private static List<PortableVehicle> portableVehicles(List<Vehicle> vehicles)", "class_method_signature": "PortableRoutingPlanFactory.portableVehicles(List<Vehicle> vehicles)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableRoutingPlanFactory.java"}, "focal_method": {"identifier": "fromRoutingPlan", "parameters": "(RoutingPlan routingPlan)", "modifiers": "static", "return": "PortableRoutingPlan", "body": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan) {\n        PortableDistance distance = PortableDistance.fromDistance(routingPlan.distance());\n        List<PortableVehicle> vehicles = portableVehicles(routingPlan.vehicles());\n        PortableLocation depot = routingPlan.depot().map(PortableLocation::fromLocation).orElse(null);\n        List<PortableLocation> visits = portableVisits(routingPlan.visits());\n        List<PortableRoute> routes = routingPlan.routes().stream()\n                .map(routeWithTrack -> new PortableRoute(\n                        PortableVehicle.fromVehicle(routeWithTrack.vehicle()),\n                        depot,\n                        portableVisits(routeWithTrack.visits()),\n                        portableTrack(routeWithTrack.track())))\n                .collect(toList());\n        return new PortableRoutingPlan(distance, vehicles, depot, visits, routes);\n    }", "signature": "PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "full_signature": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "class_method_signature": "PortableRoutingPlanFactory.fromRoutingPlan(RoutingPlan routingPlan)", "testcase": false, "constructor": false, "invocations": ["fromDistance", "distance", "portableVehicles", "vehicles", "orElse", "map", "depot", "portableVisits", "visits", "collect", "map", "stream", "routes", "fromVehicle", "vehicle", "portableVisits", "visits", "portableTrack", "track", "toList"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}