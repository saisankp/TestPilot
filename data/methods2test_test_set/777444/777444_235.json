{"test_class": {"identifier": "StringToObjectConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringToObjectConverter converter;", "modifier": "", "type": "StringToObjectConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/object/StringToObjectConverterTest.java"}, "test_case": {"identifier": "dateConversionFailed", "parameters": "()", "modifiers": "@Test(expectedExceptions = { IllegalArgumentException.class}) public", "return": "void", "body": "@Test(expectedExceptions = { IllegalArgumentException.class})\n    public void dateConversionFailed() {\n        converter.prepareValue(Date.class.getName(),\"illegal-date-format\");\n    }", "signature": "void dateConversionFailed()", "full_signature": "@Test(expectedExceptions = { IllegalArgumentException.class}) public void dateConversionFailed()", "class_method_signature": "StringToObjectConverterTest.dateConversionFailed()", "testcase": true, "constructor": false, "invocations": ["prepareValue", "getName"]}, "focal_class": {"identifier": "StringToObjectConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String,Parser> PARSER_MAP = new HashMap<String,Parser>();", "modifier": "private static final", "type": "Map<String,Parser>", "declarator": "PARSER_MAP = new HashMap<String,Parser>()", "var_name": "PARSER_MAP"}, {"original_string": "private static final Map<String,Class> TYPE_SIGNATURE_MAP = new HashMap<String, Class>();", "modifier": "private static final", "type": "Map<String,Class>", "declarator": "TYPE_SIGNATURE_MAP = new HashMap<String, Class>()", "var_name": "TYPE_SIGNATURE_MAP"}], "methods": [{"identifier": "prepareValue", "parameters": "(String pExpectedClassName, Object pValue)", "modifiers": "public", "return": "Object", "signature": "Object prepareValue(String pExpectedClassName, Object pValue)", "full_signature": "public Object prepareValue(String pExpectedClassName, Object pValue)", "class_method_signature": "StringToObjectConverter.prepareValue(String pExpectedClassName, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "prepareValue", "parameters": "(Class expectedClass, Object pValue)", "modifiers": "private", "return": "Object", "signature": "Object prepareValue(Class expectedClass, Object pValue)", "full_signature": "private Object prepareValue(Class expectedClass, Object pValue)", "class_method_signature": "StringToObjectConverter.prepareValue(Class expectedClass, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "convertSpecialStringTags", "parameters": "(String pValue)", "modifiers": "public static", "return": "String", "signature": "String convertSpecialStringTags(String pValue)", "full_signature": "public static String convertSpecialStringTags(String pValue)", "class_method_signature": "StringToObjectConverter.convertSpecialStringTags(String pValue)", "testcase": false, "constructor": false}, {"identifier": "prepareForDirectUsage", "parameters": "(Class expectedClass, Object pArgument)", "modifiers": "private", "return": "Object", "signature": "Object prepareForDirectUsage(Class expectedClass, Object pArgument)", "full_signature": "private Object prepareForDirectUsage(Class expectedClass, Object pArgument)", "class_method_signature": "StringToObjectConverter.prepareForDirectUsage(Class expectedClass, Object pArgument)", "testcase": false, "constructor": false}, {"identifier": "convertByConstructor", "parameters": "(String pType, String pValue)", "modifiers": "private", "return": "Object", "signature": "Object convertByConstructor(String pType, String pValue)", "full_signature": "private Object convertByConstructor(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertByConstructor(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertFromString", "parameters": "(String pType, String pValue)", "modifiers": "public", "return": "Object", "signature": "Object convertFromString(String pType, String pValue)", "full_signature": "public Object convertFromString(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertFromString(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertToArray", "parameters": "(String pType, String pValue)", "modifiers": "private", "return": "Object", "signature": "Object convertToArray(String pType, String pValue)", "full_signature": "private Object convertToArray(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertToArray(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertListToArray", "parameters": "(Class pType, List pList)", "modifiers": "private", "return": "Object", "signature": "Object convertListToArray(Class pType, List pList)", "full_signature": "private Object convertListToArray(Class pType, List pList)", "class_method_signature": "StringToObjectConverter.convertListToArray(Class pType, List pList)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/object/StringToObjectConverter.java"}, "focal_method": {"identifier": "prepareValue", "parameters": "(String pExpectedClassName, Object pValue)", "modifiers": "public", "return": "Object", "body": "public Object prepareValue(String pExpectedClassName, Object pValue) {\n        if (pValue == null) {\n            return null;\n        } else {\n            Class expectedClass = ClassUtil.classForName(pExpectedClassName);\n            Object param = null;\n            if (expectedClass != null) {\n                param = prepareValue(expectedClass,pValue);\n            }\n            if (param == null) {\n                // Ok, we try to convert it from a string\n                // If expectedClass is null, it is probably a native type, so we\n                // let happen the string conversion\n                // later on (e.g. conversion of pArgument.toString()) which will throw\n                // an exception at this point if conversion can not be done\n\n                return convertFromString(pExpectedClassName, pValue.toString());\n            }\n            return param;\n        }\n    }", "signature": "Object prepareValue(String pExpectedClassName, Object pValue)", "full_signature": "public Object prepareValue(String pExpectedClassName, Object pValue)", "class_method_signature": "StringToObjectConverter.prepareValue(String pExpectedClassName, Object pValue)", "testcase": false, "constructor": false, "invocations": ["classForName", "prepareValue", "convertFromString", "toString"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}