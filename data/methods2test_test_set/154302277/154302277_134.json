{"test_class": {"identifier": "UpdateFirmwareRequestMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    protected DlmsConnectionHelper connectionHelper;", "modifier": "@Mock\n    protected", "type": "DlmsConnectionHelper", "declarator": "connectionHelper", "var_name": "connectionHelper"}, {"original_string": "@Mock\n    protected DeviceResponseMessageSender responseMessageSender;", "modifier": "@Mock\n    protected", "type": "DeviceResponseMessageSender", "declarator": "responseMessageSender", "var_name": "responseMessageSender"}, {"original_string": "@Mock\n    private RetryHeaderFactory retryHeaderFactory;", "modifier": "@Mock\n    private", "type": "RetryHeaderFactory", "declarator": "retryHeaderFactory", "var_name": "retryHeaderFactory"}, {"original_string": "@Mock\n    private ConfigurationService configurationService;", "modifier": "@Mock\n    private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Mock\n    private FirmwareService firmwareService;", "modifier": "@Mock\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}, {"original_string": "@Mock\n    private OsgpRequestMessageSender osgpRequestMessageSender;", "modifier": "@Mock\n    private", "type": "OsgpRequestMessageSender", "declarator": "osgpRequestMessageSender", "var_name": "osgpRequestMessageSender"}, {"original_string": "@Mock\n    private DomainHelperService domainHelperService;", "modifier": "@Mock\n    private", "type": "DomainHelperService", "declarator": "domainHelperService", "var_name": "domainHelperService"}, {"original_string": "@Mock\n    private DlmsConnectionManager dlmsConnectionManagerMock;", "modifier": "@Mock\n    private", "type": "DlmsConnectionManager", "declarator": "dlmsConnectionManagerMock", "var_name": "dlmsConnectionManagerMock"}, {"original_string": "@Mock\n    private DlmsMessageListener messageListenerMock;", "modifier": "@Mock\n    private", "type": "DlmsMessageListener", "declarator": "messageListenerMock", "var_name": "messageListenerMock"}, {"original_string": "@Mock\n    private ThrottlingService throttlingService;", "modifier": "@Mock\n    private", "type": "ThrottlingService", "declarator": "throttlingService", "var_name": "throttlingService"}, {"original_string": "private DlmsDevice device;", "modifier": "private", "type": "DlmsDevice", "declarator": "device", "var_name": "device"}, {"original_string": "@InjectMocks\n    private UpdateFirmwareRequestMessageProcessor processor;", "modifier": "@InjectMocks\n    private", "type": "UpdateFirmwareRequestMessageProcessor", "declarator": "processor", "var_name": "processor"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/UpdateFirmwareRequestMessageProcessorTest.java"}, "test_case": {"identifier": "processMessageShouldUpdateFirmwareWhenFirmwareFileAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processMessageShouldUpdateFirmwareWhenFirmwareFileAvailable() throws JMSException, OsgpException {\n        // Arrange\n        final String firmwareIdentification = \"available\";\n        final ObjectMessage message = new ObjectMessageBuilder().withObject(firmwareIdentification).build();\n        when(this.firmwareService.isFirmwareFileAvailable(firmwareIdentification)).thenReturn(true);\n\n        // Act\n        this.processor.processMessage(message);\n\n        // Assert\n        verify(this.configurationService, times(1)).updateFirmware(null, this.device, firmwareIdentification);\n    }", "signature": "void processMessageShouldUpdateFirmwareWhenFirmwareFileAvailable()", "full_signature": "@Test public void processMessageShouldUpdateFirmwareWhenFirmwareFileAvailable()", "class_method_signature": "UpdateFirmwareRequestMessageProcessorTest.processMessageShouldUpdateFirmwareWhenFirmwareFileAvailable()", "testcase": true, "constructor": false, "invocations": ["build", "withObject", "thenReturn", "when", "isFirmwareFileAvailable", "processMessage", "updateFirmware", "verify", "times"]}, "focal_class": {"identifier": "UpdateFirmwareRequestMessageProcessor", "superclass": "extends DeviceRequestMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UpdateFirmwareRequestMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UpdateFirmwareRequestMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationService configurationService;", "modifier": "@Autowired\n    private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n    private FirmwareService firmwareService;", "modifier": "@Autowired\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}, {"original_string": "@Autowired\n    private OsgpRequestMessageSender osgpRequestMessageSender;", "modifier": "@Autowired\n    private", "type": "OsgpRequestMessageSender", "declarator": "osgpRequestMessageSender", "var_name": "osgpRequestMessageSender"}], "methods": [{"identifier": "UpdateFirmwareRequestMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " UpdateFirmwareRequestMessageProcessor()", "full_signature": "protected  UpdateFirmwareRequestMessageProcessor()", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.UpdateFirmwareRequestMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable requestObject)", "modifiers": "@Override protected", "return": "Serializable", "signature": "Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable requestObject)", "full_signature": "@Override protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable requestObject)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable requestObject)", "testcase": false, "constructor": false}, {"identifier": "processUpdateFirmwareRequest", "parameters": "(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "modifiers": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. private", "return": "void", "signature": "void processUpdateFirmwareRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "full_signature": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. private void processUpdateFirmwareRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.processUpdateFirmwareRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "testcase": false, "constructor": false}, {"identifier": "sendGetFirmwareFileRequest", "parameters": "(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "modifiers": "private", "return": "void", "signature": "void sendGetFirmwareFileRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "full_signature": "private void sendGetFirmwareFileRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.sendGetFirmwareFileRequest(final MessageMetadata messageMetadata,\n            final String firmwareIdentification)", "testcase": false, "constructor": false}, {"identifier": "createRequestMessage", "parameters": "(final MessageMetadata messageMetadata, final Serializable messageData)", "modifiers": "private", "return": "RequestMessage", "signature": "RequestMessage createRequestMessage(final MessageMetadata messageMetadata, final Serializable messageData)", "full_signature": "private RequestMessage createRequestMessage(final MessageMetadata messageMetadata, final Serializable messageData)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.createRequestMessage(final MessageMetadata messageMetadata, final Serializable messageData)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/processors/UpdateFirmwareRequestMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) {\n        LOGGER.debug(\"Processing {} request message\", this.messageType);\n        MessageMetadata messageMetadata = null;\n\n        try {\n            messageMetadata = MessageMetadata.fromMessage(message);\n\n            LOGGER.info(\"{} called for device: {} for organisation: {}\", messageMetadata.getMessageType(),\n                    messageMetadata.getDeviceIdentification(), messageMetadata.getOrganisationIdentification());\n\n            final String firmwareIdentification = (String) message.getObject();\n\n            if (this.firmwareService.isFirmwareFileAvailable(firmwareIdentification)) {\n                LOGGER.info(\"[{}] - Firmware file [{}] available. Updating firmware on device [{}]\",\n                        messageMetadata.getCorrelationUid(), firmwareIdentification,\n                        messageMetadata.getDeviceIdentification());\n                this.processUpdateFirmwareRequest(messageMetadata, firmwareIdentification);\n            } else {\n                LOGGER.info(\"[{}] - Firmware file [{}] not available. Sending GetFirmwareFile request to core.\",\n                        messageMetadata.getCorrelationUid(), firmwareIdentification);\n                this.sendGetFirmwareFileRequest(messageMetadata, firmwareIdentification);\n            }\n        } catch (final JMSException exception) {\n            this.logJmsException(LOGGER, exception, messageMetadata);\n        }\n\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "UpdateFirmwareRequestMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["debug", "fromMessage", "info", "getMessageType", "getDeviceIdentification", "getOrganisationIdentification", "getObject", "isFirmwareFileAvailable", "info", "getCorrelationUid", "getDeviceIdentification", "processUpdateFirmwareRequest", "info", "getCorrelationUid", "sendGetFirmwareFileRequest", "logJmsException"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}