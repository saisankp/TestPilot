{"test_class": {"identifier": "MockDataSourceTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [{"original_string": "static final int RAW_LOWER_BOUND = 50000;", "modifier": "static final", "type": "int", "declarator": "RAW_LOWER_BOUND = 50000", "var_name": "RAW_LOWER_BOUND"}, {"original_string": "static final int RAW_UPPER_BOUND = 150000;", "modifier": "static final", "type": "int", "declarator": "RAW_UPPER_BOUND = 150000", "var_name": "RAW_UPPER_BOUND"}], "file": "app/src/test/java/com/eveningoutpost/dexdrip/UtilityModels/MockDataSourceTest.java"}, "test_case": {"identifier": "test_getFakeWifiData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_getFakeWifiData() {\n        final String str = MockDataSource.getFakeWifiData();\n        log(\"Mock Data: \" + str);\n\n        assertThat(\"Data not null\", str != null, is(true));\n        assertThat(\"Marker found\", str.contains(\"RelativeTime\"), is(true));\n\n        final Gson gson = new GsonBuilder().create();\n        final TransmitterRawData trd = gson.fromJson(str, TransmitterRawData.class);\n        log(trd.toTableString());\n\n        assertThat(\"Sane Raw\", trd.getRawValue() < RAW_UPPER_BOUND && trd.getRawValue() > RAW_LOWER_BOUND, is(true));\n        assertThat(\"Sane Filtered\", trd.getFilteredValue() < RAW_UPPER_BOUND && trd.getFilteredValue() > RAW_LOWER_BOUND, is(true));\n\n    }", "signature": "void test_getFakeWifiData()", "full_signature": "@Test public void test_getFakeWifiData()", "class_method_signature": "MockDataSourceTest.test_getFakeWifiData()", "testcase": true, "constructor": false, "invocations": ["getFakeWifiData", "log", "assertThat", "is", "assertThat", "contains", "is", "create", "fromJson", "log", "toTableString", "assertThat", "getRawValue", "getRawValue", "is", "assertThat", "getFilteredValue", "getFilteredValue", "is"]}, "focal_class": {"identifier": "MockDataSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"MockDataSource\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"MockDataSource\"", "var_name": "TAG"}, {"original_string": "private static final String PREF_BROKEN_RAW = \"MockDataSource-broken-raw\";", "modifier": "private static final", "type": "String", "declarator": "PREF_BROKEN_RAW = \"MockDataSource-broken-raw\"", "var_name": "PREF_BROKEN_RAW"}], "methods": [{"identifier": "getFakeWifiData", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getFakeWifiData()", "full_signature": "public static String getFakeWifiData()", "class_method_signature": "MockDataSource.getFakeWifiData()", "testcase": false, "constructor": false}, {"identifier": "breakRaw", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void breakRaw()", "full_signature": "public static void breakRaw()", "class_method_signature": "MockDataSource.breakRaw()", "testcase": false, "constructor": false}, {"identifier": "fixRaw", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void fixRaw()", "full_signature": "public static void fixRaw()", "class_method_signature": "MockDataSource.fixRaw()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MockDataSource.java"}, "focal_method": {"identifier": "getFakeWifiData", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getFakeWifiData() {\n\n        long time = JoH.tsl();\n        double divisor_scale = 5000000;\n        double mod_raw = (time / divisor_scale) % Math.PI;\n        double mod_filtered = ((time - 500000) / divisor_scale) % Math.PI;\n        double raw_value = (Math.sin(mod_raw) * 100000) + 50000;\n        double filtered_value = (Math.sin(mod_filtered) * 100000) + 50000;\n\n        if (Pref.getBooleanDefaultFalse(PREF_BROKEN_RAW)) {\n            raw_value = Math.sin(mod_raw) * 1000;\n        }\n\n        final JSONObject json = new JSONObject();\n        try {\n            json.put(\"CaptureDateTime\", time);\n            json.put(\"RelativeTime\", 0L);\n            json.put(\"TransmitterId\", \"123456\");\n            json.put(\"RawValue\", (long) raw_value);\n            json.put(\"FilteredValue\", (long) filtered_value);\n            json.put(\"BatteryLife\", \"100\");\n            json.put(\"ReceivedSignalStrength\", 1);\n            json.put(\"TransmissionId\", 1);\n\n        } catch (JSONException e) {\n            UserError.Log.e(TAG, \"Got weird Json exception: \", e);\n        }\n        return json.toString();\n    }", "signature": "String getFakeWifiData()", "full_signature": "public static String getFakeWifiData()", "class_method_signature": "MockDataSource.getFakeWifiData()", "testcase": false, "constructor": false, "invocations": ["tsl", "sin", "sin", "getBooleanDefaultFalse", "sin", "put", "put", "put", "put", "put", "put", "put", "put", "e", "toString"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}