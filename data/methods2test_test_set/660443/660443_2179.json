{"test_class": {"identifier": "MDLValenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLValenceTest.java"}, "test_case": {"identifier": "bismuth_isImplicit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bismuth_isImplicit() {\n        IAtomContainer container = new AtomContainer();\n        IAtom bi1 = new Atom(\"Bi\");\n        IAtom h2 = new Atom(\"H\");\n        bi1.setFormalCharge(+2);\n        container.addAtom(bi1);\n        container.addAtom(h2);\n        container.addBond(0, 1, IBond.Order.SINGLE);\n        MDLValence.apply(container);\n        assertThat(bi1.getValency(), is(3));\n        assertThat(h2.getValency(), is(1));\n        assertThat(bi1.getImplicitHydrogenCount(), is(2));\n        assertThat(h2.getImplicitHydrogenCount(), is(0));\n    }", "signature": "void bismuth_isImplicit()", "full_signature": "@Test public void bismuth_isImplicit()", "class_method_signature": "MDLValenceTest.bismuth_isImplicit()", "testcase": true, "constructor": false, "invocations": ["setFormalCharge", "addAtom", "addAtom", "addBond", "apply", "assertThat", "getValency", "is", "assertThat", "getValency", "is", "assertThat", "getImplicitHydrogenCount", "is", "assertThat", "getImplicitHydrogenCount", "is"]}, "focal_class": {"identifier": "MDLValence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MDLValence", "parameters": "()", "modifiers": "private", "return": "", "signature": " MDLValence()", "full_signature": "private  MDLValence()", "class_method_signature": "MDLValence.MDLValence()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(IAtomContainer container)", "modifiers": "static", "return": "IAtomContainer", "signature": "IAtomContainer apply(IAtomContainer container)", "full_signature": "static IAtomContainer apply(IAtomContainer container)", "class_method_signature": "MDLValence.apply(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "implicitValence", "parameters": "(int elem, int q, int val)", "modifiers": "static", "return": "int", "signature": "int implicitValence(int elem, int q, int val)", "full_signature": "static int implicitValence(int elem, int q, int val)", "class_method_signature": "MDLValence.implicitValence(int elem, int q, int val)", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLValence.java"}, "focal_method": {"identifier": "apply", "parameters": "(IAtomContainer container)", "modifiers": "static", "return": "IAtomContainer", "body": "static IAtomContainer apply(IAtomContainer container) {\n\n        int n = container.getAtomCount();\n\n        int[] valences = new int[n];\n\n        Map<IAtom, Integer> atomToIndex = Maps.newHashMapWithExpectedSize(n);\n        for (IAtom atom : container.atoms())\n            atomToIndex.put(atom, atomToIndex.size());\n\n        // compute the bond order sums\n        for (IBond bond : container.bonds()) {\n            int u = atomToIndex.get(bond.getBegin());\n            int v = atomToIndex.get(bond.getEnd());\n\n            int bondOrder = bond.getOrder().numeric();\n\n            valences[u] += bondOrder;\n            valences[v] += bondOrder;\n        }\n\n        for (int i = 0; i < n; i++) {\n\n            IAtom atom = container.getAtom(i);\n            Integer charge = atom.getFormalCharge();\n            Integer element = atom.getAtomicNumber();\n\n            if (element == null) continue;\n\n            // unset = 0 in this case\n            charge = charge == null ? 0 : charge;\n\n            int explicit = valences[i];\n\n            // if there was a valence read from the mol file use that otherwise\n            // use the default value from the valence model to set the correct\n            // number of implied hydrogens\n            if (atom.getValency() != null) {\n                atom.setImplicitHydrogenCount(atom.getValency() - explicit);\n            } else {\n                int implicit = implicitValence(element, charge, valences[i]);\n                atom.setImplicitHydrogenCount(implicit - explicit);\n                atom.setValency(implicit);\n            }\n        }\n\n        return container;\n    }", "signature": "IAtomContainer apply(IAtomContainer container)", "full_signature": "static IAtomContainer apply(IAtomContainer container)", "class_method_signature": "MDLValence.apply(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "newHashMapWithExpectedSize", "atoms", "put", "size", "bonds", "get", "getBegin", "get", "getEnd", "numeric", "getOrder", "getAtom", "getFormalCharge", "getAtomicNumber", "getValency", "setImplicitHydrogenCount", "getValency", "implicitValence", "setImplicitHydrogenCount", "setValency"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}