{"test_class": {"identifier": "TestParentQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestParentQueue.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestParentQueue.class)", "var_name": "LOG"}, {"original_string": "RMContext rmContext;", "modifier": "", "type": "RMContext", "declarator": "rmContext", "var_name": "rmContext"}, {"original_string": "YarnConfiguration conf;", "modifier": "", "type": "YarnConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "CapacitySchedulerConfiguration csConf;", "modifier": "", "type": "CapacitySchedulerConfiguration", "declarator": "csConf", "var_name": "csConf"}, {"original_string": "CapacitySchedulerContext csContext;", "modifier": "", "type": "CapacitySchedulerContext", "declarator": "csContext", "var_name": "csContext"}, {"original_string": "final static int GB = 1024;", "modifier": "final static", "type": "int", "declarator": "GB = 1024", "var_name": "GB"}, {"original_string": "final static String DEFAULT_RACK = \"/default\";", "modifier": "final static", "type": "String", "declarator": "DEFAULT_RACK = \"/default\"", "var_name": "DEFAULT_RACK"}, {"original_string": "private final ResourceCalculator resourceComparator =\n      new DefaultResourceCalculator();", "modifier": "private final", "type": "ResourceCalculator", "declarator": "resourceComparator =\n      new DefaultResourceCalculator()", "var_name": "resourceComparator"}, {"original_string": "private static final String A = \"a\";", "modifier": "private static final", "type": "String", "declarator": "A = \"a\"", "var_name": "A"}, {"original_string": "private static final String B = \"b\";", "modifier": "private static final", "type": "String", "declarator": "B = \"b\"", "var_name": "B"}, {"original_string": "final static float DELTA = 0.0001f;", "modifier": "final static", "type": "float", "declarator": "DELTA = 0.0001f", "var_name": "DELTA"}, {"original_string": "private static final String C = \"c\";", "modifier": "private static final", "type": "String", "declarator": "C = \"c\"", "var_name": "C"}, {"original_string": "private static final String C1 = \"c1\";", "modifier": "private static final", "type": "String", "declarator": "C1 = \"c1\"", "var_name": "C1"}, {"original_string": "private static final String C11 = \"c11\";", "modifier": "private static final", "type": "String", "declarator": "C11 = \"c11\"", "var_name": "C11"}, {"original_string": "private static final String C111 = \"c111\";", "modifier": "private static final", "type": "String", "declarator": "C111 = \"c111\"", "var_name": "C111"}, {"original_string": "private static final String C1111 = \"c1111\";", "modifier": "private static final", "type": "String", "declarator": "C1111 = \"c1111\"", "var_name": "C1111"}, {"original_string": "private static final String D = \"d\";", "modifier": "private static final", "type": "String", "declarator": "D = \"d\"", "var_name": "D"}, {"original_string": "private static final String A1 = \"a1\";", "modifier": "private static final", "type": "String", "declarator": "A1 = \"a1\"", "var_name": "A1"}, {"original_string": "private static final String A2 = \"a2\";", "modifier": "private static final", "type": "String", "declarator": "A2 = \"a2\"", "var_name": "A2"}, {"original_string": "private static final String B1 = \"b1\";", "modifier": "private static final", "type": "String", "declarator": "B1 = \"b1\"", "var_name": "B1"}, {"original_string": "private static final String B2 = \"b2\";", "modifier": "private static final", "type": "String", "declarator": "B2 = \"b2\"", "var_name": "B2"}, {"original_string": "private static final String B3 = \"b3\";", "modifier": "private static final", "type": "String", "declarator": "B3 = \"b3\"", "var_name": "B3"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestParentQueue.java"}, "test_case": {"identifier": "testOffSwitchScheduling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOffSwitchScheduling() throws Exception {\n    // Setup queue configs\n    setupSingleLevelQueues(csConf);\n    \n    Map<String, CSQueue> queues = new HashMap<String, CSQueue>();\n    CSQueue root = \n        CapacityScheduler.parseQueue(csContext, csConf, null, \n            CapacitySchedulerConfiguration.ROOT, queues, queues, \n            TestUtils.spyHook);\n\n    // Setup some nodes\n    final int memoryPerNode = 10;\n    final int coresPerNode = 16;\n    final int numNodes = 2;\n    \n    FiCaSchedulerNode node_0 = \n        TestUtils.getMockNode(\"host_0\", DEFAULT_RACK, 0, memoryPerNode*GB);\n    FiCaSchedulerNode node_1 = \n        TestUtils.getMockNode(\"host_1\", DEFAULT_RACK, 0, memoryPerNode*GB);\n    \n    final Resource clusterResource = \n        Resources.createResource(numNodes * (memoryPerNode*GB), \n            numNodes * coresPerNode);\n    when(csContext.getNumClusterNodes()).thenReturn(numNodes);\n\n    // Start testing\n    LeafQueue a = (LeafQueue)queues.get(A);\n    LeafQueue b = (LeafQueue)queues.get(B);\n    \n    // Simulate B returning a container on node_0\n    stubQueueAllocation(a, clusterResource, node_0, 0*GB, NodeType.OFF_SWITCH);\n    stubQueueAllocation(b, clusterResource, node_0, 1*GB, NodeType.OFF_SWITCH);\n    root.assignContainers(clusterResource, node_0, \n        new ResourceLimits(clusterResource));\n    verifyQueueMetrics(a, 0*GB, clusterResource);\n    verifyQueueMetrics(b, 1*GB, clusterResource);\n    \n    // Now, A should get the scheduling opportunity since A=0G/6G, B=1G/14G\n    // also, B gets a scheduling opportunity since A allocates RACK_LOCAL\n    stubQueueAllocation(a, clusterResource, node_1, 2*GB, NodeType.RACK_LOCAL);\n    stubQueueAllocation(b, clusterResource, node_1, 1*GB, NodeType.OFF_SWITCH);\n    root.assignContainers(clusterResource, node_1, \n        new ResourceLimits(clusterResource));\n    InOrder allocationOrder = inOrder(a, b);\n    allocationOrder.verify(a).assignContainers(eq(clusterResource), \n        any(FiCaSchedulerNode.class), anyResourceLimits());\n    allocationOrder.verify(b).assignContainers(eq(clusterResource), \n        any(FiCaSchedulerNode.class), anyResourceLimits());\n    verifyQueueMetrics(a, 2*GB, clusterResource);\n    verifyQueueMetrics(b, 2*GB, clusterResource);\n    \n    // Now, B should get the scheduling opportunity \n    // since A has 2/6G while B has 2/14G, \n    // However, since B returns off-switch, A won't get an opportunity\n    stubQueueAllocation(a, clusterResource, node_0, 1*GB, NodeType.NODE_LOCAL);\n    stubQueueAllocation(b, clusterResource, node_0, 2*GB, NodeType.OFF_SWITCH);\n    root.assignContainers(clusterResource, node_0, \n        new ResourceLimits(clusterResource));\n    allocationOrder = inOrder(b, a);\n    allocationOrder.verify(b).assignContainers(eq(clusterResource), \n        any(FiCaSchedulerNode.class), anyResourceLimits());\n    allocationOrder.verify(a).assignContainers(eq(clusterResource), \n        any(FiCaSchedulerNode.class), anyResourceLimits());\n    verifyQueueMetrics(a, 2*GB, clusterResource);\n    verifyQueueMetrics(b, 4*GB, clusterResource);\n\n  }", "signature": "void testOffSwitchScheduling()", "full_signature": "@Test public void testOffSwitchScheduling()", "class_method_signature": "TestParentQueue.testOffSwitchScheduling()", "testcase": true, "constructor": false, "invocations": ["setupSingleLevelQueues", "parseQueue", "getMockNode", "getMockNode", "createResource", "thenReturn", "when", "getNumClusterNodes", "get", "get", "stubQueueAllocation", "stubQueueAllocation", "assignContainers", "verifyQueueMetrics", "verifyQueueMetrics", "stubQueueAllocation", "stubQueueAllocation", "assignContainers", "inOrder", "assignContainers", "verify", "eq", "any", "anyResourceLimits", "assignContainers", "verify", "eq", "any", "anyResourceLimits", "verifyQueueMetrics", "verifyQueueMetrics", "stubQueueAllocation", "stubQueueAllocation", "assignContainers", "inOrder", "assignContainers", "verify", "eq", "any", "anyResourceLimits", "assignContainers", "verify", "eq", "any", "anyResourceLimits", "verifyQueueMetrics", "verifyQueueMetrics"]}, "focal_class": {"identifier": "ParentQueue", "superclass": "extends AbstractCSQueue", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ParentQueue.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ParentQueue.class)", "var_name": "LOG"}, {"original_string": "protected final Set<CSQueue> childQueues;", "modifier": "protected final", "type": "Set<CSQueue>", "declarator": "childQueues", "var_name": "childQueues"}, {"original_string": "private final boolean rootQueue;", "modifier": "private final", "type": "boolean", "declarator": "rootQueue", "var_name": "rootQueue"}, {"original_string": "final Comparator<CSQueue> queueComparator;", "modifier": "final", "type": "Comparator<CSQueue>", "declarator": "queueComparator", "var_name": "queueComparator"}, {"original_string": "volatile int numApplications;", "modifier": "volatile", "type": "int", "declarator": "numApplications", "var_name": "numApplications"}, {"original_string": "private final CapacitySchedulerContext scheduler;", "modifier": "private final", "type": "CapacitySchedulerContext", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final RecordFactory recordFactory = \n    RecordFactoryProvider.getRecordFactory(null);", "modifier": "private final", "type": "RecordFactory", "declarator": "recordFactory = \n    RecordFactoryProvider.getRecordFactory(null)", "var_name": "recordFactory"}, {"original_string": "private static float PRECISION = 0.0005f;", "modifier": "private static", "type": "float", "declarator": "PRECISION = 0.0005f", "var_name": "PRECISION"}], "methods": [{"identifier": "ParentQueue", "parameters": "(CapacitySchedulerContext cs, \n      String queueName, CSQueue parent, CSQueue old)", "modifiers": "public", "return": "", "signature": " ParentQueue(CapacitySchedulerContext cs, \n      String queueName, CSQueue parent, CSQueue old)", "full_signature": "public  ParentQueue(CapacitySchedulerContext cs, \n      String queueName, CSQueue parent, CSQueue old)", "class_method_signature": "ParentQueue.ParentQueue(CapacitySchedulerContext cs, \n      String queueName, CSQueue parent, CSQueue old)", "testcase": false, "constructor": true}, {"identifier": "setupQueueConfigs", "parameters": "(Resource clusterResource)", "modifiers": "synchronized", "return": "void", "signature": "void setupQueueConfigs(Resource clusterResource)", "full_signature": "synchronized void setupQueueConfigs(Resource clusterResource)", "class_method_signature": "ParentQueue.setupQueueConfigs(Resource clusterResource)", "testcase": false, "constructor": false}, {"identifier": "setChildQueues", "parameters": "(Collection<CSQueue> childQueues)", "modifiers": "synchronized", "return": "void", "signature": "void setChildQueues(Collection<CSQueue> childQueues)", "full_signature": "synchronized void setChildQueues(Collection<CSQueue> childQueues)", "class_method_signature": "ParentQueue.setChildQueues(Collection<CSQueue> childQueues)", "testcase": false, "constructor": false}, {"identifier": "getQueuePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getQueuePath()", "full_signature": "@Override public String getQueuePath()", "class_method_signature": "ParentQueue.getQueuePath()", "testcase": false, "constructor": false}, {"identifier": "getQueueInfo", "parameters": "( \n      boolean includeChildQueues, boolean recursive)", "modifiers": "@Override public synchronized", "return": "QueueInfo", "signature": "QueueInfo getQueueInfo( \n      boolean includeChildQueues, boolean recursive)", "full_signature": "@Override public synchronized QueueInfo getQueueInfo( \n      boolean includeChildQueues, boolean recursive)", "class_method_signature": "ParentQueue.getQueueInfo( \n      boolean includeChildQueues, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getUserAclInfo", "parameters": "(\n      UserGroupInformation user)", "modifiers": "private synchronized", "return": "QueueUserACLInfo", "signature": "QueueUserACLInfo getUserAclInfo(\n      UserGroupInformation user)", "full_signature": "private synchronized QueueUserACLInfo getUserAclInfo(\n      UserGroupInformation user)", "class_method_signature": "ParentQueue.getUserAclInfo(\n      UserGroupInformation user)", "testcase": false, "constructor": false}, {"identifier": "getQueueUserAclInfo", "parameters": "(\n      UserGroupInformation user)", "modifiers": "@Override public synchronized", "return": "List<QueueUserACLInfo>", "signature": "List<QueueUserACLInfo> getQueueUserAclInfo(\n      UserGroupInformation user)", "full_signature": "@Override public synchronized List<QueueUserACLInfo> getQueueUserAclInfo(\n      UserGroupInformation user)", "class_method_signature": "ParentQueue.getQueueUserAclInfo(\n      UserGroupInformation user)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ParentQueue.toString()", "testcase": false, "constructor": false}, {"identifier": "reinitialize", "parameters": "(CSQueue newlyParsedQueue,\n      Resource clusterResource)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource)", "full_signature": "@Override public synchronized void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource)", "class_method_signature": "ParentQueue.reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource)", "testcase": false, "constructor": false}, {"identifier": "getQueues", "parameters": "(Set<CSQueue> queues)", "modifiers": "", "return": "Map<String, CSQueue>", "signature": "Map<String, CSQueue> getQueues(Set<CSQueue> queues)", "full_signature": " Map<String, CSQueue> getQueues(Set<CSQueue> queues)", "class_method_signature": "ParentQueue.getQueues(Set<CSQueue> queues)", "testcase": false, "constructor": false}, {"identifier": "submitApplication", "parameters": "(ApplicationId applicationId, String user,\n      String queue)", "modifiers": "@Override public", "return": "void", "signature": "void submitApplication(ApplicationId applicationId, String user,\n      String queue)", "full_signature": "@Override public void submitApplication(ApplicationId applicationId, String user,\n      String queue)", "class_method_signature": "ParentQueue.submitApplication(ApplicationId applicationId, String user,\n      String queue)", "testcase": false, "constructor": false}, {"identifier": "submitApplicationAttempt", "parameters": "(FiCaSchedulerApp application,\n      String userName)", "modifiers": "@Override public", "return": "void", "signature": "void submitApplicationAttempt(FiCaSchedulerApp application,\n      String userName)", "full_signature": "@Override public void submitApplicationAttempt(FiCaSchedulerApp application,\n      String userName)", "class_method_signature": "ParentQueue.submitApplicationAttempt(FiCaSchedulerApp application,\n      String userName)", "testcase": false, "constructor": false}, {"identifier": "finishApplicationAttempt", "parameters": "(FiCaSchedulerApp application,\n      String queue)", "modifiers": "@Override public", "return": "void", "signature": "void finishApplicationAttempt(FiCaSchedulerApp application,\n      String queue)", "full_signature": "@Override public void finishApplicationAttempt(FiCaSchedulerApp application,\n      String queue)", "class_method_signature": "ParentQueue.finishApplicationAttempt(FiCaSchedulerApp application,\n      String queue)", "testcase": false, "constructor": false}, {"identifier": "addApplication", "parameters": "(ApplicationId applicationId,\n      String user)", "modifiers": "private synchronized", "return": "void", "signature": "void addApplication(ApplicationId applicationId,\n      String user)", "full_signature": "private synchronized void addApplication(ApplicationId applicationId,\n      String user)", "class_method_signature": "ParentQueue.addApplication(ApplicationId applicationId,\n      String user)", "testcase": false, "constructor": false}, {"identifier": "finishApplication", "parameters": "(ApplicationId application, String user)", "modifiers": "@Override public", "return": "void", "signature": "void finishApplication(ApplicationId application, String user)", "full_signature": "@Override public void finishApplication(ApplicationId application, String user)", "class_method_signature": "ParentQueue.finishApplication(ApplicationId application, String user)", "testcase": false, "constructor": false}, {"identifier": "removeApplication", "parameters": "(ApplicationId applicationId, \n      String user)", "modifiers": "private synchronized", "return": "void", "signature": "void removeApplication(ApplicationId applicationId, \n      String user)", "full_signature": "private synchronized void removeApplication(ApplicationId applicationId, \n      String user)", "class_method_signature": "ParentQueue.removeApplication(ApplicationId applicationId, \n      String user)", "testcase": false, "constructor": false}, {"identifier": "assignContainers", "parameters": "(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "modifiers": "@Override public synchronized", "return": "CSAssignment", "signature": "CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "full_signature": "@Override public synchronized CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "class_method_signature": "ParentQueue.assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "testcase": false, "constructor": false}, {"identifier": "canAssign", "parameters": "(Resource clusterResource, FiCaSchedulerNode node)", "modifiers": "private", "return": "boolean", "signature": "boolean canAssign(Resource clusterResource, FiCaSchedulerNode node)", "full_signature": "private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node)", "class_method_signature": "ParentQueue.canAssign(Resource clusterResource, FiCaSchedulerNode node)", "testcase": false, "constructor": false}, {"identifier": "getResourceLimitsOfChild", "parameters": "(CSQueue child,\n      Resource clusterResource, ResourceLimits parentLimits)", "modifiers": "private", "return": "ResourceLimits", "signature": "ResourceLimits getResourceLimitsOfChild(CSQueue child,\n      Resource clusterResource, ResourceLimits parentLimits)", "full_signature": "private ResourceLimits getResourceLimitsOfChild(CSQueue child,\n      Resource clusterResource, ResourceLimits parentLimits)", "class_method_signature": "ParentQueue.getResourceLimitsOfChild(CSQueue child,\n      Resource clusterResource, ResourceLimits parentLimits)", "testcase": false, "constructor": false}, {"identifier": "assignContainersToChildQueues", "parameters": "(\n      Resource cluster, FiCaSchedulerNode node, ResourceLimits limits)", "modifiers": "private synchronized", "return": "CSAssignment", "signature": "CSAssignment assignContainersToChildQueues(\n      Resource cluster, FiCaSchedulerNode node, ResourceLimits limits)", "full_signature": "private synchronized CSAssignment assignContainersToChildQueues(\n      Resource cluster, FiCaSchedulerNode node, ResourceLimits limits)", "class_method_signature": "ParentQueue.assignContainersToChildQueues(\n      Resource cluster, FiCaSchedulerNode node, ResourceLimits limits)", "testcase": false, "constructor": false}, {"identifier": "getChildQueuesToPrint", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getChildQueuesToPrint()", "full_signature": " String getChildQueuesToPrint()", "class_method_signature": "ParentQueue.getChildQueuesToPrint()", "testcase": false, "constructor": false}, {"identifier": "printChildQueues", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printChildQueues()", "full_signature": "private void printChildQueues()", "class_method_signature": "ParentQueue.printChildQueues()", "testcase": false, "constructor": false}, {"identifier": "completedContainer", "parameters": "(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues)", "modifiers": "@Override public", "return": "void", "signature": "void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues)", "full_signature": "@Override public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues)", "class_method_signature": "ParentQueue.completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues)", "testcase": false, "constructor": false}, {"identifier": "updateClusterResource", "parameters": "(Resource clusterResource,\n      ResourceLimits resourceLimits)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void updateClusterResource(Resource clusterResource,\n      ResourceLimits resourceLimits)", "full_signature": "@Override public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits resourceLimits)", "class_method_signature": "ParentQueue.updateClusterResource(Resource clusterResource,\n      ResourceLimits resourceLimits)", "testcase": false, "constructor": false}, {"identifier": "getChildQueues", "parameters": "()", "modifiers": "@Override public synchronized", "return": "List<CSQueue>", "signature": "List<CSQueue> getChildQueues()", "full_signature": "@Override public synchronized List<CSQueue> getChildQueues()", "class_method_signature": "ParentQueue.getChildQueues()", "testcase": false, "constructor": false}, {"identifier": "recoverContainer", "parameters": "(Resource clusterResource,\n      SchedulerApplicationAttempt attempt, RMContainer rmContainer)", "modifiers": "@Override public", "return": "void", "signature": "void recoverContainer(Resource clusterResource,\n      SchedulerApplicationAttempt attempt, RMContainer rmContainer)", "full_signature": "@Override public void recoverContainer(Resource clusterResource,\n      SchedulerApplicationAttempt attempt, RMContainer rmContainer)", "class_method_signature": "ParentQueue.recoverContainer(Resource clusterResource,\n      SchedulerApplicationAttempt attempt, RMContainer rmContainer)", "testcase": false, "constructor": false}, {"identifier": "getActiveUsersManager", "parameters": "()", "modifiers": "@Override public", "return": "ActiveUsersManager", "signature": "ActiveUsersManager getActiveUsersManager()", "full_signature": "@Override public ActiveUsersManager getActiveUsersManager()", "class_method_signature": "ParentQueue.getActiveUsersManager()", "testcase": false, "constructor": false}, {"identifier": "collectSchedulerApplications", "parameters": "(\n      Collection<ApplicationAttemptId> apps)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void collectSchedulerApplications(\n      Collection<ApplicationAttemptId> apps)", "full_signature": "@Override public synchronized void collectSchedulerApplications(\n      Collection<ApplicationAttemptId> apps)", "class_method_signature": "ParentQueue.collectSchedulerApplications(\n      Collection<ApplicationAttemptId> apps)", "testcase": false, "constructor": false}, {"identifier": "attachContainer", "parameters": "(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "modifiers": "@Override public", "return": "void", "signature": "void attachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "full_signature": "@Override public void attachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "class_method_signature": "ParentQueue.attachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "testcase": false, "constructor": false}, {"identifier": "detachContainer", "parameters": "(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "modifiers": "@Override public", "return": "void", "signature": "void detachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "full_signature": "@Override public void detachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "class_method_signature": "ParentQueue.detachContainer(Resource clusterResource,\n      FiCaSchedulerApp application, RMContainer rmContainer)", "testcase": false, "constructor": false}, {"identifier": "getNumApplications", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getNumApplications()", "full_signature": "public synchronized int getNumApplications()", "class_method_signature": "ParentQueue.getNumApplications()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"}, "focal_method": {"identifier": "assignContainers", "parameters": "(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "modifiers": "@Override public synchronized", "return": "CSAssignment", "body": "@Override\n  public synchronized CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits) {\n    CSAssignment assignment = \n        new CSAssignment(Resources.createResource(0, 0), NodeType.NODE_LOCAL);\n    Set<String> nodeLabels = node.getLabels();\n    \n    // if our queue cannot access this node, just return\n    if (!SchedulerUtils.checkQueueAccessToNode(accessibleLabels, nodeLabels)) {\n      return assignment;\n    }\n    \n    while (canAssign(clusterResource, node)) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to assign containers to child-queue of \"\n          + getQueueName());\n      }\n      \n      // Are we over maximum-capacity for this queue?\n      // This will also consider parent's limits and also continuous reservation\n      // looking\n      if (!super.canAssignToThisQueue(clusterResource, nodeLabels, resourceLimits,\n          minimumAllocation, Resources.createResource(getMetrics()\n              .getReservedMB(), getMetrics().getReservedVirtualCores()))) {\n        break;\n      }\n      \n      // Schedule\n      CSAssignment assignedToChild = \n          assignContainersToChildQueues(clusterResource, node, resourceLimits);\n      assignment.setType(assignedToChild.getType());\n      \n      // Done if no child-queue assigned anything\n      if (Resources.greaterThan(\n              resourceCalculator, clusterResource, \n              assignedToChild.getResource(), Resources.none())) {\n        // Track resource utilization for the parent-queue\n        super.allocateResource(clusterResource, assignedToChild.getResource(),\n            nodeLabels);\n        \n        // Track resource utilization in this pass of the scheduler\n        Resources.addTo(assignment.getResource(), assignedToChild.getResource());\n        \n        LOG.info(\"assignedContainer\" +\n            \" queue=\" + getQueueName() + \n            \" usedCapacity=\" + getUsedCapacity() +\n            \" absoluteUsedCapacity=\" + getAbsoluteUsedCapacity() +\n            \" used=\" + queueUsage.getUsed() + \n            \" cluster=\" + clusterResource);\n\n      } else {\n        break;\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"ParentQ=\" + getQueueName()\n          + \" assignedSoFarInThisIteration=\" + assignment.getResource()\n          + \" usedCapacity=\" + getUsedCapacity()\n          + \" absoluteUsedCapacity=\" + getAbsoluteUsedCapacity());\n      }\n\n      // Do not assign more than one container if this isn't the root queue\n      // or if we've already assigned an off-switch container\n      if (!rootQueue || assignment.getType() == NodeType.OFF_SWITCH) {\n        if (LOG.isDebugEnabled()) {\n          if (rootQueue && assignment.getType() == NodeType.OFF_SWITCH) {\n            LOG.debug(\"Not assigning more than one off-switch container,\" +\n                \" assignments so far: \" + assignment);\n          }\n        }\n        break;\n      }\n    } \n    \n    return assignment;\n  }", "signature": "CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "full_signature": "@Override public synchronized CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "class_method_signature": "ParentQueue.assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, ResourceLimits resourceLimits)", "testcase": false, "constructor": false, "invocations": ["createResource", "getLabels", "checkQueueAccessToNode", "canAssign", "isDebugEnabled", "debug", "getQueueName", "canAssignToThisQueue", "createResource", "getReservedMB", "getMetrics", "getReservedVirtualCores", "getMetrics", "assignContainersToChildQueues", "setType", "getType", "greaterThan", "getResource", "none", "allocateResource", "getResource", "addTo", "getResource", "getResource", "info", "getQueueName", "getUsedCapacity", "getAbsoluteUsedCapacity", "getUsed", "isDebugEnabled", "debug", "getQueueName", "getResource", "getUsedCapacity", "getAbsoluteUsedCapacity", "getType", "isDebugEnabled", "getType", "debug"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}