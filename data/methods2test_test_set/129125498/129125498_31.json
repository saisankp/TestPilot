{"test_class": {"identifier": "TypesafeConfigLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypesafeConfigLoader loader;", "modifier": "private", "type": "TypesafeConfigLoader", "declarator": "loader", "var_name": "loader"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/TypesafeConfigLoaderTest.java"}, "test_case": {"identifier": "testLoadBaseConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadBaseConfig() {\n        val config = loader.loadBaseConfig();\n        assertEquals(\"kafkasvc:9092\", config.getString(\"streams.bootstrap.servers\"));\n    }", "signature": "void testLoadBaseConfig()", "full_signature": "@Test public void testLoadBaseConfig()", "class_method_signature": "TypesafeConfigLoaderTest.testLoadBaseConfig()", "testcase": true, "constructor": false, "invocations": ["loadBaseConfig", "assertEquals", "getString"]}, "focal_class": {"identifier": "TypesafeConfigLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_APP_CONFIG_PATH = \"config/base.conf\";", "modifier": "private static final", "type": "String", "declarator": "BASE_APP_CONFIG_PATH = \"config/base.conf\"", "var_name": "BASE_APP_CONFIG_PATH"}, {"original_string": "private static final String CK_KSTREAM_APP_DEFAULT_CONFIG = \"kstream.app.default\";", "modifier": "private static final", "type": "String", "declarator": "CK_KSTREAM_APP_DEFAULT_CONFIG = \"kstream.app.default\"", "var_name": "CK_KSTREAM_APP_DEFAULT_CONFIG"}, {"original_string": "private static final String EV_OVERRIDES_CONFIG_PATH = \"AA_OVERRIDES_CONFIG_PATH\";", "modifier": "private static final", "type": "String", "declarator": "EV_OVERRIDES_CONFIG_PATH = \"AA_OVERRIDES_CONFIG_PATH\"", "var_name": "EV_OVERRIDES_CONFIG_PATH"}, {"original_string": "private String appKey;", "modifier": "private", "type": "String", "declarator": "appKey", "var_name": "appKey"}], "methods": [{"identifier": "TypesafeConfigLoader", "parameters": "(String appKey)", "modifiers": "public", "return": "", "signature": " TypesafeConfigLoader(String appKey)", "full_signature": "public  TypesafeConfigLoader(String appKey)", "class_method_signature": "TypesafeConfigLoader.TypesafeConfigLoader(String appKey)", "testcase": false, "constructor": true}, {"identifier": "loadBaseConfig", "parameters": "()", "modifiers": "public", "return": "Config", "signature": "Config loadBaseConfig()", "full_signature": "public Config loadBaseConfig()", "class_method_signature": "TypesafeConfigLoader.loadBaseConfig()", "testcase": false, "constructor": false}, {"identifier": "loadOverridesConfig", "parameters": "()", "modifiers": "public", "return": "Config", "signature": "Config loadOverridesConfig()", "full_signature": "public Config loadOverridesConfig()", "class_method_signature": "TypesafeConfigLoader.loadOverridesConfig()", "testcase": false, "constructor": false}, {"identifier": "loadMergedConfig", "parameters": "()", "modifiers": "public", "return": "Config", "signature": "Config loadMergedConfig()", "full_signature": "public Config loadMergedConfig()", "class_method_signature": "TypesafeConfigLoader.loadMergedConfig()", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/TypesafeConfigLoader.java"}, "focal_method": {"identifier": "loadBaseConfig", "parameters": "()", "modifiers": "public", "return": "Config", "body": "public Config loadBaseConfig() {\n        log.info(\"Loading base configuration: appKey={}\", appKey);\n        val baseAppConfigs = ConfigFactory.load(BASE_APP_CONFIG_PATH);\n        val defaultAppConfig = baseAppConfigs.getConfig(CK_KSTREAM_APP_DEFAULT_CONFIG);\n        return baseAppConfigs.getConfig(appKey).withFallback(defaultAppConfig);\n    }", "signature": "Config loadBaseConfig()", "full_signature": "public Config loadBaseConfig()", "class_method_signature": "TypesafeConfigLoader.loadBaseConfig()", "testcase": false, "constructor": false, "invocations": ["info", "load", "getConfig", "withFallback", "getConfig"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}