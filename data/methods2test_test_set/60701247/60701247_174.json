{"test_class": {"identifier": "AndroidLogcatFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ZoneId TIME_ZONE = ZoneId.of(\"America/Los_Angeles\");", "modifier": "private static final", "type": "ZoneId", "declarator": "TIME_ZONE = ZoneId.of(\"America/Los_Angeles\")", "var_name": "TIME_ZONE"}, {"original_string": "private AndroidLogcatPreferences myPreferences;", "modifier": "private", "type": "AndroidLogcatPreferences", "declarator": "myPreferences", "var_name": "myPreferences"}, {"original_string": "private AndroidLogcatFormatter myFormatter;", "modifier": "private", "type": "AndroidLogcatFormatter", "declarator": "myFormatter", "var_name": "myFormatter"}], "file": "android/testSrc/com/android/tools/idea/logcat/AndroidLogcatFormatterTest.java"}, "test_case": {"identifier": "parseMessageForTagAndLogLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void parseMessageForTagAndLogLevel() {\n    String message = \"2018-02-12 17:04:44.005   1282-12/com.google.android.apps\" +\n                     \".maps:GoogleLocationService D/dalvikvm: Debugger has detached; object \" +\n                     \"registry had 1 entries\";\n\n    LogCatHeader header = myFormatter.parseMessage(message).getHeader();\n\n    assertEquals(LogLevel.DEBUG, header.getLogLevel());\n    assertEquals(\"dalvikvm\", header.getTag());\n  }", "signature": "void parseMessageForTagAndLogLevel()", "full_signature": "@Test public void parseMessageForTagAndLogLevel()", "class_method_signature": "AndroidLogcatFormatterTest.parseMessageForTagAndLogLevel()", "testcase": true, "constructor": false, "invocations": ["getHeader", "parseMessage", "assertEquals", "getLogLevel", "assertEquals", "getTag"]}, "focal_class": {"identifier": "AndroidLogcatFormatter", "superclass": "extends DefaultLogFormatter", "interfaces": "", "fields": [{"original_string": "private static final String FULL_FORMAT = createCustomFormat(true, true, true, true);", "modifier": "private static final", "type": "String", "declarator": "FULL_FORMAT = createCustomFormat(true, true, true, true)", "var_name": "FULL_FORMAT"}, {"original_string": "@NonNls private static final Pattern CONTINUATION_PATTERN = Pattern.compile(\"^\\\\+ (.*)$\");", "modifier": "@NonNls private static final", "type": "Pattern", "declarator": "CONTINUATION_PATTERN = Pattern.compile(\"^\\\\+ (.*)$\")", "var_name": "CONTINUATION_PATTERN"}, {"original_string": "public static final CharSequence CONTINUATION_INDENT = \"    \";", "modifier": "public static final", "type": "CharSequence", "declarator": "CONTINUATION_INDENT = \"    \"", "var_name": "CONTINUATION_INDENT"}, {"original_string": "private final MessageFormatter myLongEpochFormatter;", "modifier": "private final", "type": "MessageFormatter", "declarator": "myLongEpochFormatter", "var_name": "myLongEpochFormatter"}, {"original_string": "private final MessageFormatter myLongFormatter;", "modifier": "private final", "type": "MessageFormatter", "declarator": "myLongFormatter", "var_name": "myLongFormatter"}, {"original_string": "private final AndroidLogcatPreferences myPreferences;", "modifier": "private final", "type": "AndroidLogcatPreferences", "declarator": "myPreferences", "var_name": "myPreferences"}], "methods": [{"identifier": "AndroidLogcatFormatter", "parameters": "(@NotNull ZoneId timeZone, @NotNull AndroidLogcatPreferences preferences)", "modifiers": "public", "return": "", "signature": " AndroidLogcatFormatter(@NotNull ZoneId timeZone, @NotNull AndroidLogcatPreferences preferences)", "full_signature": "public  AndroidLogcatFormatter(@NotNull ZoneId timeZone, @NotNull AndroidLogcatPreferences preferences)", "class_method_signature": "AndroidLogcatFormatter.AndroidLogcatFormatter(@NotNull ZoneId timeZone, @NotNull AndroidLogcatPreferences preferences)", "testcase": false, "constructor": true}, {"identifier": "formatMessageFull", "parameters": "(@NotNull LogCatHeader header, @NotNull String message)", "modifiers": "@NotNull", "return": "String", "signature": "String formatMessageFull(@NotNull LogCatHeader header, @NotNull String message)", "full_signature": "@NotNull String formatMessageFull(@NotNull LogCatHeader header, @NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.formatMessageFull(@NotNull LogCatHeader header, @NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "formatContinuation", "parameters": "(@NotNull String message)", "modifiers": "@NotNull public static", "return": "String", "signature": "String formatContinuation(@NotNull String message)", "full_signature": "@NotNull public static String formatContinuation(@NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.formatContinuation(@NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "createCustomFormat", "parameters": "(boolean showTime, boolean showPid, boolean showPackage, boolean showTag)", "modifiers": "@NotNull public static", "return": "String", "signature": "String createCustomFormat(boolean showTime, boolean showPid, boolean showPackage, boolean showTag)", "full_signature": "@NotNull public static String createCustomFormat(boolean showTime, boolean showPid, boolean showPackage, boolean showTag)", "class_method_signature": "AndroidLogcatFormatter.createCustomFormat(boolean showTime, boolean showPid, boolean showPackage, boolean showTag)", "testcase": false, "constructor": false}, {"identifier": "formatMessage", "parameters": "(@NotNull String format, @NotNull LogCatHeader header, @NotNull String message)", "modifiers": "@NotNull public", "return": "String", "signature": "String formatMessage(@NotNull String format, @NotNull LogCatHeader header, @NotNull String message)", "full_signature": "@NotNull public String formatMessage(@NotNull String format, @NotNull LogCatHeader header, @NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.formatMessage(@NotNull String format, @NotNull LogCatHeader header, @NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "parseMessage", "parameters": "(@NotNull String message)", "modifiers": "@NotNull", "return": "LogCatMessage", "signature": "LogCatMessage parseMessage(@NotNull String message)", "full_signature": "@NotNull LogCatMessage parseMessage(@NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.parseMessage(@NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "tryParseMessage", "parameters": "(@NotNull String message)", "modifiers": "@Nullable", "return": "LogCatMessage", "signature": "LogCatMessage tryParseMessage(@NotNull String message)", "full_signature": "@Nullable LogCatMessage tryParseMessage(@NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.tryParseMessage(@NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "tryParseContinuation", "parameters": "(@NotNull String msg)", "modifiers": "@Nullable public static", "return": "String", "signature": "String tryParseContinuation(@NotNull String msg)", "full_signature": "@Nullable public static String tryParseContinuation(@NotNull String msg)", "class_method_signature": "AndroidLogcatFormatter.tryParseContinuation(@NotNull String msg)", "testcase": false, "constructor": false}, {"identifier": "formatPrefix", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "String", "signature": "String formatPrefix(String prefix)", "full_signature": "@Override public String formatPrefix(String prefix)", "class_method_signature": "AndroidLogcatFormatter.formatPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "formatMessage", "parameters": "(@NotNull String message)", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String formatMessage(@NotNull String message)", "full_signature": "@NotNull @Override public String formatMessage(@NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.formatMessage(@NotNull String message)", "testcase": false, "constructor": false}, {"identifier": "formatMessage", "parameters": "(@NotNull LogCatMessage message)", "modifiers": "@NotNull", "return": "String", "signature": "String formatMessage(@NotNull LogCatMessage message)", "full_signature": "@NotNull String formatMessage(@NotNull LogCatMessage message)", "class_method_signature": "AndroidLogcatFormatter.formatMessage(@NotNull LogCatMessage message)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/logcat/AndroidLogcatFormatter.java"}, "focal_method": {"identifier": "parseMessage", "parameters": "(@NotNull String message)", "modifiers": "@NotNull", "return": "LogCatMessage", "body": "@NotNull\n  LogCatMessage parseMessage(@NotNull String message) {\n    LogCatMessage result = tryParseMessage(message);\n    if (result == null) {\n      throw new IllegalArgumentException(\"Invalid message doesn't match expected logcat pattern: \" + message);\n    }\n\n    return result;\n  }", "signature": "LogCatMessage parseMessage(@NotNull String message)", "full_signature": "@NotNull LogCatMessage parseMessage(@NotNull String message)", "class_method_signature": "AndroidLogcatFormatter.parseMessage(@NotNull String message)", "testcase": false, "constructor": false, "invocations": ["tryParseMessage"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}