{"test_class": {"identifier": "ParallelFunctionEvaluatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/evaluators/ParallelFunctionEvaluatorTest.java"}, "test_case": {"identifier": "testGetIndexBehindIndividual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetIndexBehindIndividual() throws Exception {\n        ParallelFunctionEvaluator evaluator = new ParallelFunctionEvaluator();\n        Population[] populations = new Population[]{new SimplePopulation(new Individual[6]), new SimplePopulation(new Individual[4]), new SimplePopulation(new Individual[3])};\n\n        ParallelFunctionEvaluator.PositionDescriptor descriptor = evaluator.getIndexBehindIndividual(populations, 0);\n        assertEquals(0, descriptor.getPopulationIndex());\n        assertEquals(1, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 6);\n        assertEquals(1, descriptor.getPopulationIndex());\n        assertEquals(1, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 1);\n        assertEquals(0, descriptor.getPopulationIndex());\n        assertEquals(2, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 5);\n        assertEquals(0, descriptor.getPopulationIndex());\n        assertEquals(6, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 9);\n        assertEquals(1, descriptor.getPopulationIndex());\n        assertEquals(4, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 10);\n        assertEquals(2, descriptor.getPopulationIndex());\n        assertEquals(1, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 12);\n        assertEquals(2, descriptor.getPopulationIndex());\n        assertEquals(3, descriptor.getIndividualIndex());\n\n        descriptor = evaluator.getIndexBehindIndividual(populations, 13);\n        assertEquals(2, descriptor.getPopulationIndex());\n        assertEquals(3, descriptor.getIndividualIndex());\n\n        // over-indexed, then return one position after the last individual\n        descriptor = evaluator.getIndexBehindIndividual(populations, 14);\n        assertEquals(2, descriptor.getPopulationIndex());\n        assertEquals(3, descriptor.getIndividualIndex());\n    }", "signature": "void testGetIndexBehindIndividual()", "full_signature": "@Test public void testGetIndexBehindIndividual()", "class_method_signature": "ParallelFunctionEvaluatorTest.testGetIndexBehindIndividual()", "testcase": true, "constructor": false, "invocations": ["getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex", "getIndexBehindIndividual", "assertEquals", "getPopulationIndex", "assertEquals", "getIndividualIndex"]}, "focal_class": {"identifier": "ParallelFunctionEvaluator", "superclass": "", "interfaces": "implements FunctionEvaluator", "fields": [{"original_string": "protected CyclicBarrier barrier;", "modifier": "protected", "type": "CyclicBarrier", "declarator": "barrier", "var_name": "barrier"}, {"original_string": "protected int numProcessors;", "modifier": "protected", "type": "int", "declarator": "numProcessors", "var_name": "numProcessors"}], "methods": [{"identifier": "ParallelFunctionEvaluator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ParallelFunctionEvaluator()", "full_signature": "public  ParallelFunctionEvaluator()", "class_method_signature": "ParallelFunctionEvaluator.ParallelFunctionEvaluator()", "testcase": false, "constructor": true}, {"identifier": "ParallelFunctionEvaluator", "parameters": "(int numThreads)", "modifiers": "public", "return": "", "signature": " ParallelFunctionEvaluator(int numThreads)", "full_signature": "public  ParallelFunctionEvaluator(int numThreads)", "class_method_signature": "ParallelFunctionEvaluator.ParallelFunctionEvaluator(int numThreads)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(Population[] populations, Function function)", "modifiers": "public synchronized", "return": "void", "signature": "void evaluate(Population[] populations, Function function)", "full_signature": "public synchronized void evaluate(Population[] populations, Function function)", "class_method_signature": "ParallelFunctionEvaluator.evaluate(Population[] populations, Function function)", "testcase": false, "constructor": false}, {"identifier": "getIndexBehindIndividual", "parameters": "(Population[] populations, int individualIdx)", "modifiers": "protected", "return": "PositionDescriptor", "signature": "PositionDescriptor getIndexBehindIndividual(Population[] populations, int individualIdx)", "full_signature": "protected PositionDescriptor getIndexBehindIndividual(Population[] populations, int individualIdx)", "class_method_signature": "ParallelFunctionEvaluator.getIndexBehindIndividual(Population[] populations, int individualIdx)", "testcase": false, "constructor": false}, {"identifier": "getIndexForIndividual", "parameters": "(Population[] populations, int individualIdx)", "modifiers": "protected", "return": "PositionDescriptor", "signature": "PositionDescriptor getIndexForIndividual(Population[] populations, int individualIdx)", "full_signature": "protected PositionDescriptor getIndexForIndividual(Population[] populations, int individualIdx)", "class_method_signature": "ParallelFunctionEvaluator.getIndexForIndividual(Population[] populations, int individualIdx)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/evaluators/ParallelFunctionEvaluator.java"}, "focal_method": {"identifier": "getIndexBehindIndividual", "parameters": "(Population[] populations, int individualIdx)", "modifiers": "protected", "return": "PositionDescriptor", "body": "protected PositionDescriptor getIndexBehindIndividual(Population[] populations, int individualIdx){\n        for (int i = 0; i < populations.length; i++){\n            Individual[] individuals = populations[i].getIndividuals();\n            if (individuals.length > individualIdx ){\n                return new PositionDescriptor(i, individualIdx+1);\n            } else {\n                individualIdx -= individuals.length;\n            }\n        }\n        // if individual too far, then return first index ahead\n        return new PositionDescriptor(populations.length-1, populations[populations.length-1].getIndividuals().length);\n    }", "signature": "PositionDescriptor getIndexBehindIndividual(Population[] populations, int individualIdx)", "full_signature": "protected PositionDescriptor getIndexBehindIndividual(Population[] populations, int individualIdx)", "class_method_signature": "ParallelFunctionEvaluator.getIndexBehindIndividual(Population[] populations, int individualIdx)", "testcase": false, "constructor": false, "invocations": ["getIndividuals", "getIndividuals"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}