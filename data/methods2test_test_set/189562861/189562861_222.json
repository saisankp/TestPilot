{"test_class": {"identifier": "FailsafeLoggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/logger/support/FailsafeLoggerTest.java"}, "test_case": {"identifier": "testGetLogger", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testGetLogger() {\n        Logger failLogger = mock(Logger.class);\n        FailsafeLogger failsafeLogger = new FailsafeLogger(failLogger);\n\n        doThrow(new RuntimeException()).when(failLogger).error(anyString());\n        failsafeLogger.getLogger().error(\"should get error\");\n    }", "signature": "void testGetLogger()", "full_signature": "@Test(expected = RuntimeException.class) public void testGetLogger()", "class_method_signature": "FailsafeLoggerTest.testGetLogger()", "testcase": true, "constructor": false, "invocations": ["mock", "error", "when", "doThrow", "anyString", "error", "getLogger"]}, "focal_class": {"identifier": "FailsafeLogger", "superclass": "", "interfaces": "implements Logger", "fields": [{"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "FailsafeLogger", "parameters": "(Logger logger)", "modifiers": "public", "return": "", "signature": " FailsafeLogger(Logger logger)", "full_signature": "public  FailsafeLogger(Logger logger)", "class_method_signature": "FailsafeLogger.FailsafeLogger(Logger logger)", "testcase": false, "constructor": true}, {"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "public Logger getLogger()", "class_method_signature": "FailsafeLogger.getLogger()", "testcase": false, "constructor": false}, {"identifier": "setLogger", "parameters": "(Logger logger)", "modifiers": "public", "return": "void", "signature": "void setLogger(Logger logger)", "full_signature": "public void setLogger(Logger logger)", "class_method_signature": "FailsafeLogger.setLogger(Logger logger)", "testcase": false, "constructor": false}, {"identifier": "appendContextMessage", "parameters": "(String msg)", "modifiers": "private", "return": "String", "signature": "String appendContextMessage(String msg)", "full_signature": "private String appendContextMessage(String msg)", "class_method_signature": "FailsafeLogger.appendContextMessage(String msg)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String msg, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void trace(String msg, Throwable e)", "full_signature": "@Override public void trace(String msg, Throwable e)", "class_method_signature": "FailsafeLogger.trace(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void trace(Throwable e)", "full_signature": "@Override public void trace(Throwable e)", "class_method_signature": "FailsafeLogger.trace(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String msg)", "modifiers": "@Override public", "return": "void", "signature": "void trace(String msg)", "full_signature": "@Override public void trace(String msg)", "class_method_signature": "FailsafeLogger.trace(String msg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String msg, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void debug(String msg, Throwable e)", "full_signature": "@Override public void debug(String msg, Throwable e)", "class_method_signature": "FailsafeLogger.debug(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void debug(Throwable e)", "full_signature": "@Override public void debug(Throwable e)", "class_method_signature": "FailsafeLogger.debug(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String msg)", "modifiers": "@Override public", "return": "void", "signature": "void debug(String msg)", "full_signature": "@Override public void debug(String msg)", "class_method_signature": "FailsafeLogger.debug(String msg)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String msg, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void info(String msg, Throwable e)", "full_signature": "@Override public void info(String msg, Throwable e)", "class_method_signature": "FailsafeLogger.info(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String msg)", "modifiers": "@Override public", "return": "void", "signature": "void info(String msg)", "full_signature": "@Override public void info(String msg)", "class_method_signature": "FailsafeLogger.info(String msg)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String msg, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void warn(String msg, Throwable e)", "full_signature": "@Override public void warn(String msg, Throwable e)", "class_method_signature": "FailsafeLogger.warn(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String msg)", "modifiers": "@Override public", "return": "void", "signature": "void warn(String msg)", "full_signature": "@Override public void warn(String msg)", "class_method_signature": "FailsafeLogger.warn(String msg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String msg, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void error(String msg, Throwable e)", "full_signature": "@Override public void error(String msg, Throwable e)", "class_method_signature": "FailsafeLogger.error(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String msg)", "modifiers": "@Override public", "return": "void", "signature": "void error(String msg)", "full_signature": "@Override public void error(String msg)", "class_method_signature": "FailsafeLogger.error(String msg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void error(Throwable e)", "full_signature": "@Override public void error(Throwable e)", "class_method_signature": "FailsafeLogger.error(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void info(Throwable e)", "full_signature": "@Override public void info(Throwable e)", "class_method_signature": "FailsafeLogger.info(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void warn(Throwable e)", "full_signature": "@Override public void warn(Throwable e)", "class_method_signature": "FailsafeLogger.warn(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "isTraceEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTraceEnabled()", "full_signature": "@Override public boolean isTraceEnabled()", "class_method_signature": "FailsafeLogger.isTraceEnabled()", "testcase": false, "constructor": false}, {"identifier": "isDebugEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDebugEnabled()", "full_signature": "@Override public boolean isDebugEnabled()", "class_method_signature": "FailsafeLogger.isDebugEnabled()", "testcase": false, "constructor": false}, {"identifier": "isInfoEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInfoEnabled()", "full_signature": "@Override public boolean isInfoEnabled()", "class_method_signature": "FailsafeLogger.isInfoEnabled()", "testcase": false, "constructor": false}, {"identifier": "isWarnEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWarnEnabled()", "full_signature": "@Override public boolean isWarnEnabled()", "class_method_signature": "FailsafeLogger.isWarnEnabled()", "testcase": false, "constructor": false}, {"identifier": "isErrorEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isErrorEnabled()", "full_signature": "@Override public boolean isErrorEnabled()", "class_method_signature": "FailsafeLogger.isErrorEnabled()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/logger/support/FailsafeLogger.java"}, "focal_method": {"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "Logger", "body": "public Logger getLogger() {\n        return logger;\n    }", "signature": "Logger getLogger()", "full_signature": "public Logger getLogger()", "class_method_signature": "FailsafeLogger.getLogger()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}