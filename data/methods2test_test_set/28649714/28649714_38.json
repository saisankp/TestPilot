{"test_class": {"identifier": "MapStructAbstractGatewayTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    HibernateEntityDao<TestHibernateEntity> dao;", "modifier": "@Mock", "type": "HibernateEntityDao<TestHibernateEntity>", "declarator": "dao", "var_name": "dao"}, {"original_string": "@Mock\n    MapStructAbstractGateway.Converter<TestDomainAddPayload, TestHibernateEntity>\n            domainAddPayloadToHibernateEntityConverter;", "modifier": "@Mock", "type": "MapStructAbstractGateway.Converter<TestDomainAddPayload, TestHibernateEntity>", "declarator": "domainAddPayloadToHibernateEntityConverter", "var_name": "domainAddPayloadToHibernateEntityConverter"}, {"original_string": "@Mock\n    MapStructAbstractGateway.Merger<TestDomainEntity, TestHibernateEntity>\n            domainEntityToHibernateEntityMerger;", "modifier": "@Mock", "type": "MapStructAbstractGateway.Merger<TestDomainEntity, TestHibernateEntity>", "declarator": "domainEntityToHibernateEntityMerger", "var_name": "domainEntityToHibernateEntityMerger"}, {"original_string": "@Mock\n    MapStructAbstractGateway.Converter<TestHibernateEntity, TestDomainEntity>\n            hibernateEntityToDomainEntityConverter;", "modifier": "@Mock", "type": "MapStructAbstractGateway.Converter<TestHibernateEntity, TestDomainEntity>", "declarator": "hibernateEntityToDomainEntityConverter", "var_name": "hibernateEntityToDomainEntityConverter"}, {"original_string": "@Mock\n    MapStructAbstractGateway.Converter<List<TestHibernateEntity>, List<TestDomainEntity>>\n            hibernateEntitiesToDomainEntitiesConverter;", "modifier": "@Mock", "type": "MapStructAbstractGateway.Converter<List<TestHibernateEntity>, List<TestDomainEntity>>", "declarator": "hibernateEntitiesToDomainEntitiesConverter", "var_name": "hibernateEntitiesToDomainEntitiesConverter"}, {"original_string": "private TestMapStructAbstractGateway gateway;", "modifier": "private", "type": "TestMapStructAbstractGateway", "declarator": "gateway", "var_name": "gateway"}], "file": "service/src/test/java/org/coner/core/gateway/MapStructAbstractGatewayTest.java"}, "test_case": {"identifier": "whenAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenAdd() {\n        TestDomainAddPayload domainAddPayload = mock(TestDomainAddPayload.class);\n        TestHibernateEntity hibernateEntity = mock(TestHibernateEntity.class);\n        when(domainAddPayloadToHibernateEntityConverter.convert(domainAddPayload)).thenReturn(hibernateEntity);\n        TestDomainEntity domainEntity = mock(TestDomainEntity.class);\n        when(hibernateEntityToDomainEntityConverter.convert(hibernateEntity)).thenReturn(domainEntity);\n\n        TestDomainEntity actual = gateway.add(domainAddPayload);\n\n        verify(dao).create(hibernateEntity);\n        verifyNoMoreInteractions(dao);\n        assertThat(actual).isSameAs(domainEntity);\n    }", "signature": "void whenAdd()", "full_signature": "@Test public void whenAdd()", "class_method_signature": "MapStructAbstractGatewayTest.whenAdd()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "convert", "mock", "thenReturn", "when", "convert", "add", "create", "verify", "verifyNoMoreInteractions", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "MapStructAbstractGateway", "superclass": "", "interfaces": "implements Gateway<DE, AP>", "fields": [{"original_string": "protected final D dao;", "modifier": "protected final", "type": "D", "declarator": "dao", "var_name": "dao"}, {"original_string": "protected final Converter<AP, HE> domainAddPayloadToHibernateEntityConverter;", "modifier": "protected final", "type": "Converter<AP, HE>", "declarator": "domainAddPayloadToHibernateEntityConverter", "var_name": "domainAddPayloadToHibernateEntityConverter"}, {"original_string": "protected final Merger<DE, HE> domainEntityToHibernateEntityMerger;", "modifier": "protected final", "type": "Merger<DE, HE>", "declarator": "domainEntityToHibernateEntityMerger", "var_name": "domainEntityToHibernateEntityMerger"}, {"original_string": "protected final Converter<HE, DE> hibernateEntityToDomainEntityConverter;", "modifier": "protected final", "type": "Converter<HE, DE>", "declarator": "hibernateEntityToDomainEntityConverter", "var_name": "hibernateEntityToDomainEntityConverter"}, {"original_string": "protected final Converter<List<HE>, List<DE>> hibernateEntitiesToDomainEntitiesConverter;", "modifier": "protected final", "type": "Converter<List<HE>, List<DE>>", "declarator": "hibernateEntitiesToDomainEntitiesConverter", "var_name": "hibernateEntitiesToDomainEntitiesConverter"}], "methods": [{"identifier": "MapStructAbstractGateway", "parameters": "(\n            Converter<AP, HE> domainAddPayloadToHibernateEntityConverter,\n            Merger<DE, HE> domainEntityToHibernateEntityMerger,\n            Converter<HE, DE> hibernateEntityToDomainEntityConverter,\n            Converter<List<HE>, List<DE>> hibernateEntitiesToDomainEntitiesConverter,\n            D dao\n    )", "modifiers": "protected", "return": "", "signature": " MapStructAbstractGateway(\n            Converter<AP, HE> domainAddPayloadToHibernateEntityConverter,\n            Merger<DE, HE> domainEntityToHibernateEntityMerger,\n            Converter<HE, DE> hibernateEntityToDomainEntityConverter,\n            Converter<List<HE>, List<DE>> hibernateEntitiesToDomainEntitiesConverter,\n            D dao\n    )", "full_signature": "protected  MapStructAbstractGateway(\n            Converter<AP, HE> domainAddPayloadToHibernateEntityConverter,\n            Merger<DE, HE> domainEntityToHibernateEntityMerger,\n            Converter<HE, DE> hibernateEntityToDomainEntityConverter,\n            Converter<List<HE>, List<DE>> hibernateEntitiesToDomainEntitiesConverter,\n            D dao\n    )", "class_method_signature": "MapStructAbstractGateway.MapStructAbstractGateway(\n            Converter<AP, HE> domainAddPayloadToHibernateEntityConverter,\n            Merger<DE, HE> domainEntityToHibernateEntityMerger,\n            Converter<HE, DE> hibernateEntityToDomainEntityConverter,\n            Converter<List<HE>, List<DE>> hibernateEntitiesToDomainEntitiesConverter,\n            D dao\n    )", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(AP payload)", "modifiers": "public", "return": "DE", "signature": "DE add(AP payload)", "full_signature": "public DE add(AP payload)", "class_method_signature": "MapStructAbstractGateway.add(AP payload)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "List<DE>", "signature": "List<DE> getAll()", "full_signature": "@Override public List<DE> getAll()", "class_method_signature": "MapStructAbstractGateway.getAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(String id)", "modifiers": "@Override public", "return": "DE", "signature": "DE findById(String id)", "full_signature": "@Override public DE findById(String id)", "class_method_signature": "MapStructAbstractGateway.findById(String id)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(String id, DE entity)", "modifiers": "@Override public", "return": "DE", "signature": "DE save(String id, DE entity)", "full_signature": "@Override public DE save(String id, DE entity)", "class_method_signature": "MapStructAbstractGateway.save(String id, DE entity)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/gateway/MapStructAbstractGateway.java"}, "focal_method": {"identifier": "add", "parameters": "(AP payload)", "modifiers": "public", "return": "DE", "body": "public DE add(AP payload) {\n        Preconditions.checkNotNull(payload);\n        HE hibernateEntity = domainAddPayloadToHibernateEntityConverter.convert(payload);\n        dao.create(hibernateEntity);\n        return hibernateEntityToDomainEntityConverter.convert(hibernateEntity);\n    }", "signature": "DE add(AP payload)", "full_signature": "public DE add(AP payload)", "class_method_signature": "MapStructAbstractGateway.add(AP payload)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "convert", "create", "convert"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}