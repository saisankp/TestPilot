{"test_class": {"identifier": "RangeBoundaryTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/matchers/type/RangeBoundaryTest.java"}, "test_case": {"identifier": "shouldCreatePlusInfinitiBoundaryWhenNullValuePassed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreatePlusInfinitiBoundaryWhenNullValuePassed() {\n        // when\n        RangeBoundary<Integer> boundary = new RangeBoundary<Integer>(null);\n\n        // then\n        assertThat(boundary.isPlusInfinity()).isTrue();\n    }", "signature": "void shouldCreatePlusInfinitiBoundaryWhenNullValuePassed()", "full_signature": "@Test public void shouldCreatePlusInfinitiBoundaryWhenNullValuePassed()", "class_method_signature": "RangeBoundaryTest.shouldCreatePlusInfinitiBoundaryWhenNullValuePassed()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isPlusInfinity"]}, "focal_class": {"identifier": "RangeBoundary", "superclass": "", "interfaces": "implements Comparable<RangeBoundary<C>>", "fields": [{"original_string": "private final C value;", "modifier": "private final", "type": "C", "declarator": "value", "var_name": "value"}, {"original_string": "private final boolean infinity;", "modifier": "private final", "type": "boolean", "declarator": "infinity", "var_name": "infinity"}, {"original_string": "private final int infinitySign;", "modifier": "private final", "type": "int", "declarator": "infinitySign", "var_name": "infinitySign"}], "methods": [{"identifier": "RangeBoundary", "parameters": "(C value, boolean infinity, int infinitySign)", "modifiers": "private", "return": "", "signature": " RangeBoundary(C value, boolean infinity, int infinitySign)", "full_signature": "private  RangeBoundary(C value, boolean infinity, int infinitySign)", "class_method_signature": "RangeBoundary.RangeBoundary(C value, boolean infinity, int infinitySign)", "testcase": false, "constructor": true}, {"identifier": "RangeBoundary", "parameters": "(C value)", "modifiers": "public", "return": "", "signature": " RangeBoundary(C value)", "full_signature": "public  RangeBoundary(C value)", "class_method_signature": "RangeBoundary.RangeBoundary(C value)", "testcase": false, "constructor": true}, {"identifier": "plusInfinity", "parameters": "()", "modifiers": "static", "return": "RangeBoundary<C>", "signature": "RangeBoundary<C> plusInfinity()", "full_signature": "static RangeBoundary<C> plusInfinity()", "class_method_signature": "RangeBoundary.plusInfinity()", "testcase": false, "constructor": false}, {"identifier": "minusInfinity", "parameters": "()", "modifiers": "static", "return": "RangeBoundary<C>", "signature": "RangeBoundary<C> minusInfinity()", "full_signature": "static RangeBoundary<C> minusInfinity()", "class_method_signature": "RangeBoundary.minusInfinity()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "", "return": "C", "signature": "C value()", "full_signature": " C value()", "class_method_signature": "RangeBoundary.value()", "testcase": false, "constructor": false}, {"identifier": "finite", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean finite()", "full_signature": " boolean finite()", "class_method_signature": "RangeBoundary.finite()", "testcase": false, "constructor": false}, {"identifier": "isPlusInfinity", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isPlusInfinity()", "full_signature": " boolean isPlusInfinity()", "class_method_signature": "RangeBoundary.isPlusInfinity()", "testcase": false, "constructor": false}, {"identifier": "isMinusInfinity", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isMinusInfinity()", "full_signature": " boolean isMinusInfinity()", "class_method_signature": "RangeBoundary.isMinusInfinity()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(RangeBoundary<C> other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(RangeBoundary<C> other)", "full_signature": "@Override public int compareTo(RangeBoundary<C> other)", "class_method_signature": "RangeBoundary.compareTo(RangeBoundary<C> other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RangeBoundary.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RangeBoundary.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "RangeBoundary.equals(Object obj)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/matchers/type/RangeBoundary.java"}, "focal_method": {"identifier": "isPlusInfinity", "parameters": "()", "modifiers": "", "return": "boolean", "body": "boolean isPlusInfinity() {\n        return infinity && infinitySign > 0;\n    }", "signature": "boolean isPlusInfinity()", "full_signature": " boolean isPlusInfinity()", "class_method_signature": "RangeBoundary.isPlusInfinity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}