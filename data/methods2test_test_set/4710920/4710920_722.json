{"test_class": {"identifier": "HeaderExchangeChannelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HeaderExchangeChannel header;", "modifier": "private", "type": "HeaderExchangeChannel", "declarator": "header", "var_name": "header"}, {"original_string": "private MockChannel channel;", "modifier": "private", "type": "MockChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private URL url = URL.valueOf(\"dubbo://localhost:20880\");", "modifier": "private", "type": "URL", "declarator": "url = URL.valueOf(\"dubbo://localhost:20880\")", "var_name": "url"}, {"original_string": "private static final String CHANNEL_KEY = HeaderExchangeChannel.class.getName() + \".CHANNEL\";", "modifier": "private static final", "type": "String", "declarator": "CHANNEL_KEY = HeaderExchangeChannel.class.getName() + \".CHANNEL\"", "var_name": "CHANNEL_KEY"}], "file": "dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeChannelTest.java"}, "test_case": {"identifier": "getLocalAddressTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLocalAddressTest() {\n        Assertions.assertNull(header.getLocalAddress());\n    }", "signature": "void getLocalAddressTest()", "full_signature": "@Test public void getLocalAddressTest()", "class_method_signature": "HeaderExchangeChannelTest.getLocalAddressTest()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getLocalAddress"]}, "focal_class": {"identifier": "HeaderExchangeChannel", "superclass": "", "interfaces": "implements ExchangeChannel", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HeaderExchangeChannel.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HeaderExchangeChannel.class)", "var_name": "logger"}, {"original_string": "private static final String CHANNEL_KEY = HeaderExchangeChannel.class.getName() + \".CHANNEL\";", "modifier": "private static final", "type": "String", "declarator": "CHANNEL_KEY = HeaderExchangeChannel.class.getName() + \".CHANNEL\"", "var_name": "CHANNEL_KEY"}, {"original_string": "private final Channel channel;", "modifier": "private final", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private volatile boolean closed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "HeaderExchangeChannel", "parameters": "(Channel channel)", "modifiers": "", "return": "", "signature": " HeaderExchangeChannel(Channel channel)", "full_signature": "  HeaderExchangeChannel(Channel channel)", "class_method_signature": "HeaderExchangeChannel.HeaderExchangeChannel(Channel channel)", "testcase": false, "constructor": true}, {"identifier": "getOrAddChannel", "parameters": "(Channel ch)", "modifiers": "static", "return": "HeaderExchangeChannel", "signature": "HeaderExchangeChannel getOrAddChannel(Channel ch)", "full_signature": "static HeaderExchangeChannel getOrAddChannel(Channel ch)", "class_method_signature": "HeaderExchangeChannel.getOrAddChannel(Channel ch)", "testcase": false, "constructor": false}, {"identifier": "removeChannelIfDisconnected", "parameters": "(Channel ch)", "modifiers": "static", "return": "void", "signature": "void removeChannelIfDisconnected(Channel ch)", "full_signature": "static void removeChannelIfDisconnected(Channel ch)", "class_method_signature": "HeaderExchangeChannel.removeChannelIfDisconnected(Channel ch)", "testcase": false, "constructor": false}, {"identifier": "removeChannel", "parameters": "(Channel ch)", "modifiers": "static", "return": "void", "signature": "void removeChannel(Channel ch)", "full_signature": "static void removeChannel(Channel ch)", "class_method_signature": "HeaderExchangeChannel.removeChannel(Channel ch)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Object message)", "modifiers": "@Override public", "return": "void", "signature": "void send(Object message)", "full_signature": "@Override public void send(Object message)", "class_method_signature": "HeaderExchangeChannel.send(Object message)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Object message, boolean sent)", "modifiers": "@Override public", "return": "void", "signature": "void send(Object message, boolean sent)", "full_signature": "@Override public void send(Object message, boolean sent)", "class_method_signature": "HeaderExchangeChannel.send(Object message, boolean sent)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request)", "modifiers": "@Override public", "return": "CompletableFuture<Object>", "signature": "CompletableFuture<Object> request(Object request)", "full_signature": "@Override public CompletableFuture<Object> request(Object request)", "class_method_signature": "HeaderExchangeChannel.request(Object request)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request, int timeout)", "modifiers": "@Override public", "return": "CompletableFuture<Object>", "signature": "CompletableFuture<Object> request(Object request, int timeout)", "full_signature": "@Override public CompletableFuture<Object> request(Object request, int timeout)", "class_method_signature": "HeaderExchangeChannel.request(Object request, int timeout)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request, ExecutorService executor)", "modifiers": "@Override public", "return": "CompletableFuture<Object>", "signature": "CompletableFuture<Object> request(Object request, ExecutorService executor)", "full_signature": "@Override public CompletableFuture<Object> request(Object request, ExecutorService executor)", "class_method_signature": "HeaderExchangeChannel.request(Object request, ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Object request, int timeout, ExecutorService executor)", "modifiers": "@Override public", "return": "CompletableFuture<Object>", "signature": "CompletableFuture<Object> request(Object request, int timeout, ExecutorService executor)", "full_signature": "@Override public CompletableFuture<Object> request(Object request, int timeout, ExecutorService executor)", "class_method_signature": "HeaderExchangeChannel.request(Object request, int timeout, ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "HeaderExchangeChannel.isClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HeaderExchangeChannel.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(int timeout)", "modifiers": "@Override public", "return": "void", "signature": "void close(int timeout)", "full_signature": "@Override public void close(int timeout)", "class_method_signature": "HeaderExchangeChannel.close(int timeout)", "testcase": false, "constructor": false}, {"identifier": "startClose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startClose()", "full_signature": "@Override public void startClose()", "class_method_signature": "HeaderExchangeChannel.startClose()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getLocalAddress()", "full_signature": "@Override public InetSocketAddress getLocalAddress()", "class_method_signature": "HeaderExchangeChannel.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "getRemoteAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "signature": "InetSocketAddress getRemoteAddress()", "full_signature": "@Override public InetSocketAddress getRemoteAddress()", "class_method_signature": "HeaderExchangeChannel.getRemoteAddress()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "HeaderExchangeChannel.getUrl()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "HeaderExchangeChannel.isConnected()", "testcase": false, "constructor": false}, {"identifier": "getChannelHandler", "parameters": "()", "modifiers": "@Override public", "return": "ChannelHandler", "signature": "ChannelHandler getChannelHandler()", "full_signature": "@Override public ChannelHandler getChannelHandler()", "class_method_signature": "HeaderExchangeChannel.getChannelHandler()", "testcase": false, "constructor": false}, {"identifier": "getExchangeHandler", "parameters": "()", "modifiers": "@Override public", "return": "ExchangeHandler", "signature": "ExchangeHandler getExchangeHandler()", "full_signature": "@Override public ExchangeHandler getExchangeHandler()", "class_method_signature": "HeaderExchangeChannel.getExchangeHandler()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(String key)", "full_signature": "@Override public Object getAttribute(String key)", "class_method_signature": "HeaderExchangeChannel.getAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(String key, Object value)", "full_signature": "@Override public void setAttribute(String key, Object value)", "class_method_signature": "HeaderExchangeChannel.setAttribute(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void removeAttribute(String key)", "full_signature": "@Override public void removeAttribute(String key)", "class_method_signature": "HeaderExchangeChannel.removeAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "hasAttribute", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAttribute(String key)", "full_signature": "@Override public boolean hasAttribute(String key)", "class_method_signature": "HeaderExchangeChannel.hasAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HeaderExchangeChannel.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "HeaderExchangeChannel.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HeaderExchangeChannel.toString()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeChannel.java"}, "focal_method": {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "@Override public", "return": "InetSocketAddress", "body": "@Override\n    public InetSocketAddress getLocalAddress() {\n        return channel.getLocalAddress();\n    }", "signature": "InetSocketAddress getLocalAddress()", "full_signature": "@Override public InetSocketAddress getLocalAddress()", "class_method_signature": "HeaderExchangeChannel.getLocalAddress()", "testcase": false, "constructor": false, "invocations": ["getLocalAddress"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}