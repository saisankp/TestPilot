{"test_class": {"identifier": "HBaseDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HBaseDataStore HBaseDataStore;", "modifier": "private", "type": "HBaseDataStore", "declarator": "HBaseDataStore", "var_name": "HBaseDataStore"}, {"original_string": "private HTableInterface tableInterface;", "modifier": "private", "type": "HTableInterface", "declarator": "tableInterface", "var_name": "tableInterface"}, {"original_string": "private HbaseTableConnection hBaseTableConnection;", "modifier": "private", "type": "HbaseTableConnection", "declarator": "hBaseTableConnection", "var_name": "hBaseTableConnection"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DATA_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DATA_FIELD_NAME"}, {"original_string": "private static final String TEST_APP_NAME = \"test-app\";", "modifier": "private static final", "type": "String", "declarator": "TEST_APP_NAME = \"test-app\"", "var_name": "TEST_APP_NAME"}, {"original_string": "private static final Table TEST_APP = new Table(TEST_APP_NAME, 7);", "modifier": "private static final", "type": "Table", "declarator": "TEST_APP = new Table(TEST_APP_NAME, 7)", "var_name": "TEST_APP"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStoreTest.java"}, "test_case": {"identifier": "testGetBulkNullIdList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBulkNullIdList() throws Exception {\n        List<String> ids = null;\n        try {\n            HBaseDataStore.get(TEST_APP, ids);\n            fail();\n        } catch (DataStoreException ex) {\n            assertEquals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, ex.getErrorCode());\n        }\n    }", "signature": "void testGetBulkNullIdList()", "full_signature": "@Test public void testGetBulkNullIdList()", "class_method_signature": "HBaseDataStoreTest.testGetBulkNullIdList()", "testcase": true, "constructor": false, "invocations": ["get", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "HBaseDataStore", "superclass": "", "interfaces": "implements DataStore", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DATA_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DATA_FIELD_NAME"}, {"original_string": "private static final byte[] TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\");", "modifier": "private static final", "type": "byte[]", "declarator": "TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\")", "var_name": "TIMESTAMP_FIELD_NAME"}, {"original_string": "private final HbaseTableConnection tableWrapper;", "modifier": "private final", "type": "HbaseTableConnection", "declarator": "tableWrapper", "var_name": "tableWrapper"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "HBaseDataStore", "parameters": "(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "full_signature": "public  HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "class_method_signature": "HBaseDataStore.HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(final Table table, Document document)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Table table, Document document)", "full_signature": "@Override public void save(final Table table, Document document)", "class_method_signature": "HBaseDataStore.save(final Table table, Document document)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final Table table, List<Document> documents)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Table table, List<Document> documents)", "full_signature": "@Override public void save(final Table table, List<Document> documents)", "class_method_signature": "HBaseDataStore.save(final Table table, List<Document> documents)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Table table, String id)", "modifiers": "@Override public", "return": "Document", "signature": "Document get(final Table table, String id)", "full_signature": "@Override public Document get(final Table table, String id)", "class_method_signature": "HBaseDataStore.get(final Table table, String id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Table table, List<String> ids)", "modifiers": "@Override public", "return": "List<Document>", "signature": "List<Document> get(final Table table, List<String> ids)", "full_signature": "@Override public List<Document> get(final Table table, List<String> ids)", "class_method_signature": "HBaseDataStore.get(final Table table, List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getPutForDocument", "parameters": "(final Table table, Document document)", "modifiers": "public", "return": "Put", "signature": "Put getPutForDocument(final Table table, Document document)", "full_signature": "public Put getPutForDocument(final Table table, Document document)", "class_method_signature": "HBaseDataStore.getPutForDocument(final Table table, Document document)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStore.java"}, "focal_method": {"identifier": "get", "parameters": "(final Table table, String id)", "modifiers": "@Override public", "return": "Document", "body": "@Override\n    public Document get(final Table table, String id) throws DataStoreException {\n        HTableInterface hTable = null;\n        try {\n            Get get = new Get(Bytes.toBytes(id + \":\" + table.getName()))\n                    .addColumn(COLUMN_FAMILY, DATA_FIELD_NAME)\n                    .addColumn(COLUMN_FAMILY, TIMESTAMP_FIELD_NAME);\n            hTable = tableWrapper.getTable(table);\n            Result getResult = hTable.get(get);\n            if (!getResult.isEmpty()) {\n                byte[] data = getResult.getValue(COLUMN_FAMILY, DATA_FIELD_NAME);\n                byte[] timestamp = getResult.getValue(COLUMN_FAMILY, TIMESTAMP_FIELD_NAME);\n                long time = Bytes.toLong(timestamp);\n                return new Document(id, time, mapper.readTree(data));\n            } else {\n                throw new DataStoreException(DataStoreException.ErrorCode.STORE_NO_DATA_FOUND_FOR_ID,\n                        String.format(\"No data found for ID: %s\", id));\n            }\n        } catch (DataStoreException ex) {\n            throw ex;\n        } catch (IOException ex) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_SINGLE_GET,\n                    ex.getMessage(), ex);\n        } catch (Exception ex) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_SINGLE_GET,\n                    ex.getMessage(), ex);\n        } finally {\n            if (null != hTable) {\n                try {\n                    hTable.close();\n                } catch (IOException e) {\n                    logger.error(\"Error closing table: \", e);\n                }\n            }\n        }\n    }", "signature": "Document get(final Table table, String id)", "full_signature": "@Override public Document get(final Table table, String id)", "class_method_signature": "HBaseDataStore.get(final Table table, String id)", "testcase": false, "constructor": false, "invocations": ["addColumn", "addColumn", "toBytes", "getName", "getTable", "get", "isEmpty", "getValue", "getValue", "toLong", "readTree", "format", "getMessage", "getMessage", "close", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}