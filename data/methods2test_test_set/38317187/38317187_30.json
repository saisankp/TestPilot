{"test_class": {"identifier": "LookupResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LookupResult lookupResult;", "modifier": "private", "type": "LookupResult", "declarator": "lookupResult", "var_name": "lookupResult"}, {"original_string": "private AddressTemplate template;", "modifier": "private", "type": "AddressTemplate", "declarator": "template", "var_name": "template"}], "file": "meta/src/test/java/org/jboss/hal/meta/processing/LookupResultTest.java"}, "test_case": {"identifier": "allPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void allPresent() {\n        LookupResult localLookupResult = new LookupResult(Sets.newHashSet(\n                AddressTemplate.of(\"one\"),\n                AddressTemplate.of(\"two\"),\n                AddressTemplate.of(\"three\")));\n\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"one\"), ALL_PRESENT);\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"two\"), RESOURCE_DESCRIPTION_PRESENT);\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"three\"), SECURITY_CONTEXT_PRESENT);\n        assertFalse(localLookupResult.allPresent());\n\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"one\"), ALL_PRESENT);\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"two\"), ALL_PRESENT);\n        localLookupResult.markMetadataPresent(AddressTemplate.of(\"three\"), ALL_PRESENT);\n        assertTrue(localLookupResult.allPresent());\n    }", "signature": "void allPresent()", "full_signature": "@Test public void allPresent()", "class_method_signature": "LookupResultTest.allPresent()", "testcase": true, "constructor": false, "invocations": ["newHashSet", "of", "of", "of", "markMetadataPresent", "of", "markMetadataPresent", "of", "markMetadataPresent", "of", "assertFalse", "allPresent", "markMetadataPresent", "of", "markMetadataPresent", "of", "markMetadataPresent", "of", "assertTrue", "allPresent"]}, "focal_class": {"identifier": "LookupResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int NOTHING_PRESENT = 0b00;", "modifier": "static final", "type": "int", "declarator": "NOTHING_PRESENT = 0b00", "var_name": "NOTHING_PRESENT"}, {"original_string": "static final int RESOURCE_DESCRIPTION_PRESENT = 0b10;", "modifier": "static final", "type": "int", "declarator": "RESOURCE_DESCRIPTION_PRESENT = 0b10", "var_name": "RESOURCE_DESCRIPTION_PRESENT"}, {"original_string": "static final int SECURITY_CONTEXT_PRESENT = 0b01;", "modifier": "static final", "type": "int", "declarator": "SECURITY_CONTEXT_PRESENT = 0b01", "var_name": "SECURITY_CONTEXT_PRESENT"}, {"original_string": "static final int ALL_PRESENT = 0b11;", "modifier": "static final", "type": "int", "declarator": "ALL_PRESENT = 0b11", "var_name": "ALL_PRESENT"}, {"original_string": "private final Map<AddressTemplate, Integer> templates;", "modifier": "private final", "type": "Map<AddressTemplate, Integer>", "declarator": "templates", "var_name": "templates"}], "methods": [{"identifier": "LookupResult", "parameters": "(Set<AddressTemplate> templates)", "modifiers": "", "return": "", "signature": " LookupResult(Set<AddressTemplate> templates)", "full_signature": "  LookupResult(Set<AddressTemplate> templates)", "class_method_signature": "LookupResult.LookupResult(Set<AddressTemplate> templates)", "testcase": false, "constructor": true}, {"identifier": "templates", "parameters": "()", "modifiers": "", "return": "Set<AddressTemplate>", "signature": "Set<AddressTemplate> templates()", "full_signature": " Set<AddressTemplate> templates()", "class_method_signature": "LookupResult.templates()", "testcase": false, "constructor": false}, {"identifier": "markMetadataPresent", "parameters": "(AddressTemplate template, int flag)", "modifiers": "", "return": "void", "signature": "void markMetadataPresent(AddressTemplate template, int flag)", "full_signature": " void markMetadataPresent(AddressTemplate template, int flag)", "class_method_signature": "LookupResult.markMetadataPresent(AddressTemplate template, int flag)", "testcase": false, "constructor": false}, {"identifier": "missingMetadata", "parameters": "(AddressTemplate template)", "modifiers": "", "return": "int", "signature": "int missingMetadata(AddressTemplate template)", "full_signature": " int missingMetadata(AddressTemplate template)", "class_method_signature": "LookupResult.missingMetadata(AddressTemplate template)", "testcase": false, "constructor": false}, {"identifier": "allPresent", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean allPresent()", "full_signature": " boolean allPresent()", "class_method_signature": "LookupResult.allPresent()", "testcase": false, "constructor": false}, {"identifier": "failFastGet", "parameters": "(AddressTemplate template)", "modifiers": "private", "return": "int", "signature": "int failFastGet(AddressTemplate template)", "full_signature": "private int failFastGet(AddressTemplate template)", "class_method_signature": "LookupResult.failFastGet(AddressTemplate template)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LookupResult.toString()", "testcase": false, "constructor": false}], "file": "meta/src/main/java/org/jboss/hal/meta/processing/LookupResult.java"}, "focal_method": {"identifier": "allPresent", "parameters": "()", "modifiers": "", "return": "boolean", "body": "boolean allPresent() {\n        for (Integer flags : templates.values()) {\n            if (flags != ALL_PRESENT) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean allPresent()", "full_signature": " boolean allPresent()", "class_method_signature": "LookupResult.allPresent()", "testcase": false, "constructor": false, "invocations": ["values"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}