{"test_class": {"identifier": "DataTypeCollectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "gdp-data-access/src/test/java/gov/usgs/cida/gdp/dataaccess/bean/DataTypeCollectionTest.java"}, "test_case": {"identifier": "testBuildFromCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBuildFromCache() {\n\t\tDataTypeBean dtb = new DataTypeBean();\n\t\tDataTypeCollection inputBean = null;\n\t\tinputBean = new DataTypeCollection(\"test-type\", dtb);\n\t\tinputBean.getDataTypeCollection().get(0).setDescription(\"TEST DESCRIPTION\");\n\t\tinputBean.getDataTypeCollection().get(0).setName(\"TEST NAME\");\n\t\tinputBean.getDataTypeCollection().get(0).setShape(new int[]{1,2,3,4});\n\t\tinputBean.getDataTypeCollection().get(0).setRank(1024);\n\t\tinputBean.getDataTypeCollection().get(0).setShortname(\"SHORT NAME\");\n\t\tinputBean.getDataTypeCollection().get(0).setUnitsstring(\"UNITS STRING\");\n\t\tResponseCache.CacheIdentifier cacheId = null;\n\t\ttry {\n\t\t\tcacheId = new ResponseCache.CacheIdentifier(\"https://not-a-r-eal-url.gov\", ResponseCache.CacheIdentifier.CacheType.DATA_TYPE, \"Dummy cache data\");\n\t\t\tboolean didWrite = inputBean.writeToCache(cacheId);\n\t\t\tassertTrue(didWrite);\n\t\t\tDataTypeCollection resultBean = DataTypeCollection.buildFromCache(cacheId);\n\t\t\tassertNotNull(resultBean);\n\t\t\t\n\t\t\tassertEquals(resultBean.getDataType(), \"test-type\");\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getDescription(), \"TEST DESCRIPTION\");\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getName(), \"TEST NAME\");\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getShortname(), \"SHORT NAME\");\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getUnitsstring(), \"UNITS STRING\");\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getShape()[0], 1);\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getShape()[1], 2);\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getShape()[2], 3);\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getShape()[3], 4);\n\t\t\tassertEquals(resultBean.getDataTypeCollection().get(0).getRank(), 1024);\n\t\t} finally {\n\t\t\tif (cacheId != null) {\n\t\t\t\ttry {\n\t\t\t\t\tFileUtils.deleteQuietly(cacheId.getFile());\n\t\t\t\t} catch (IOException ex) {\n\t\t\t\t\t// Not handled\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void testBuildFromCache()", "full_signature": "@Test public void testBuildFromCache()", "class_method_signature": "DataTypeCollectionTest.testBuildFromCache()", "testcase": true, "constructor": false, "invocations": ["setDescription", "get", "getDataTypeCollection", "setName", "get", "getDataTypeCollection", "setShape", "get", "getDataTypeCollection", "setRank", "get", "getDataTypeCollection", "setShortname", "get", "getDataTypeCollection", "setUnitsstring", "get", "getDataTypeCollection", "writeToCache", "assertTrue", "buildFromCache", "assertNotNull", "assertEquals", "getDataType", "assertEquals", "getDescription", "get", "getDataTypeCollection", "assertEquals", "getName", "get", "getDataTypeCollection", "assertEquals", "getShortname", "get", "getDataTypeCollection", "assertEquals", "getUnitsstring", "get", "getDataTypeCollection", "assertEquals", "getShape", "get", "getDataTypeCollection", "assertEquals", "getShape", "get", "getDataTypeCollection", "assertEquals", "getShape", "get", "getDataTypeCollection", "assertEquals", "getShape", "get", "getDataTypeCollection", "assertEquals", "getRank", "get", "getDataTypeCollection", "deleteQuietly", "getFile"]}, "focal_class": {"identifier": "DataTypeCollection", "superclass": "extends Response", "interfaces": "", "fields": [{"original_string": "private static final transient org.slf4j.Logger log = LoggerFactory.getLogger(DataTypeCollection.class);", "modifier": "private static final transient", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(DataTypeCollection.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 32424L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 32424L", "var_name": "serialVersionUID"}, {"original_string": "@XStreamAlias(\"datatype\")\n\t@XStreamAsAttribute\n\tprivate String dataType;", "modifier": "@XStreamAlias(\"datatype\")\n\t@XStreamAsAttribute\n\tprivate", "type": "String", "declarator": "dataType", "var_name": "dataType"}, {"original_string": "@XStreamAlias(\"types\")\n\t@XStreamImplicit(itemFieldName = \"types\")\n\tprivate List<DataTypeBean> dataTypeCollection;", "modifier": "@XStreamAlias(\"types\")\n\t@XStreamImplicit(itemFieldName = \"types\")\n\tprivate", "type": "List<DataTypeBean>", "declarator": "dataTypeCollection", "var_name": "dataTypeCollection"}], "methods": [{"identifier": "DataTypeCollection", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataTypeCollection()", "full_signature": "public  DataTypeCollection()", "class_method_signature": "DataTypeCollection.DataTypeCollection()", "testcase": false, "constructor": true}, {"identifier": "DataTypeCollection", "parameters": "(String type, DataTypeBean... dataTypeArray)", "modifiers": "public", "return": "", "signature": " DataTypeCollection(String type, DataTypeBean... dataTypeArray)", "full_signature": "public  DataTypeCollection(String type, DataTypeBean... dataTypeArray)", "class_method_signature": "DataTypeCollection.DataTypeCollection(String type, DataTypeBean... dataTypeArray)", "testcase": false, "constructor": true}, {"identifier": "DataTypeCollection", "parameters": "(String type, VariableSimpleIF... variableSimpleIFArray)", "modifiers": "public", "return": "", "signature": " DataTypeCollection(String type, VariableSimpleIF... variableSimpleIFArray)", "full_signature": "public  DataTypeCollection(String type, VariableSimpleIF... variableSimpleIFArray)", "class_method_signature": "DataTypeCollection.DataTypeCollection(String type, VariableSimpleIF... variableSimpleIFArray)", "testcase": false, "constructor": true}, {"identifier": "toXML", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toXML()", "full_signature": "@Override public String toXML()", "class_method_signature": "DataTypeCollection.toXML()", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDataType()", "full_signature": "public String getDataType()", "class_method_signature": "DataTypeCollection.getDataType()", "testcase": false, "constructor": false}, {"identifier": "setDataType", "parameters": "(String dataType)", "modifiers": "public", "return": "void", "signature": "void setDataType(String dataType)", "full_signature": "public void setDataType(String dataType)", "class_method_signature": "DataTypeCollection.setDataType(String dataType)", "testcase": false, "constructor": false}, {"identifier": "getDataTypeCollection", "parameters": "()", "modifiers": "public", "return": "List<DataTypeBean>", "signature": "List<DataTypeBean> getDataTypeCollection()", "full_signature": "public List<DataTypeBean> getDataTypeCollection()", "class_method_signature": "DataTypeCollection.getDataTypeCollection()", "testcase": false, "constructor": false}, {"identifier": "setDataTypeCollection", "parameters": "(List<DataTypeBean> dataTypeCollection)", "modifiers": "public", "return": "void", "signature": "void setDataTypeCollection(List<DataTypeBean> dataTypeCollection)", "full_signature": "public void setDataTypeCollection(List<DataTypeBean> dataTypeCollection)", "class_method_signature": "DataTypeCollection.setDataTypeCollection(List<DataTypeBean> dataTypeCollection)", "testcase": false, "constructor": false}, {"identifier": "buildFromCache", "parameters": "(ResponseCache.CacheIdentifier ci)", "modifiers": "public static", "return": "DataTypeCollection", "signature": "DataTypeCollection buildFromCache(ResponseCache.CacheIdentifier ci)", "full_signature": "public static DataTypeCollection buildFromCache(ResponseCache.CacheIdentifier ci)", "class_method_signature": "DataTypeCollection.buildFromCache(ResponseCache.CacheIdentifier ci)", "testcase": false, "constructor": false}, {"identifier": "writeToCache", "parameters": "(ResponseCache.CacheIdentifier ci)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean writeToCache(ResponseCache.CacheIdentifier ci)", "full_signature": "@Override public boolean writeToCache(ResponseCache.CacheIdentifier ci)", "class_method_signature": "DataTypeCollection.writeToCache(ResponseCache.CacheIdentifier ci)", "testcase": false, "constructor": false}], "file": "gdp-data-access/src/main/java/gov/usgs/cida/gdp/dataaccess/bean/DataTypeCollection.java"}, "focal_method": {"identifier": "buildFromCache", "parameters": "(ResponseCache.CacheIdentifier ci)", "modifiers": "public static", "return": "DataTypeCollection", "body": "public static DataTypeCollection buildFromCache(ResponseCache.CacheIdentifier ci) {\n\t\tDataTypeCollection result;\n\t\tFileInputStream fileIn = null;\n\t\tObjectInputStream in = null;\n\t\tFile cacheFile;\n\t\ttry {\n\t\t\tcacheFile = ci.getFile();\n\t\t} catch (IOException ex) {\n\t\t\tlog.warn(\"Could not create new cache file\", ex);\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tfileIn = new FileInputStream(cacheFile);\n\t\t\t} catch (FileNotFoundException ex) {\n\t\t\t\tlog.warn(\"Could not find cache file {}\", cacheFile.getPath(), ex);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tin = new ObjectInputStream(fileIn);\n\t\t\t} catch (IOException ex) {\n\t\t\t\tlog.warn(\"Could not read cache file {}\", cacheFile.getPath(), ex);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tresult = (DataTypeCollection) in.readObject();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tlog.warn(\"Could not inflate cache file {}\", cacheFile.getPath(), ex);\n\t\t\t\treturn null;\n\t\t\t} catch (ClassNotFoundException ex) {\n\t\t\t\tlog.warn(\"Could not inflate cache file {}\", cacheFile.getPath(), ex);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(in);\n\t\t\tIOUtils.closeQuietly(fileIn);\n\t\t}\n\t\treturn result;\n\t}", "signature": "DataTypeCollection buildFromCache(ResponseCache.CacheIdentifier ci)", "full_signature": "public static DataTypeCollection buildFromCache(ResponseCache.CacheIdentifier ci)", "class_method_signature": "DataTypeCollection.buildFromCache(ResponseCache.CacheIdentifier ci)", "testcase": false, "constructor": false, "invocations": ["getFile", "warn", "warn", "getPath", "warn", "getPath", "readObject", "warn", "getPath", "warn", "getPath", "closeQuietly", "closeQuietly"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}