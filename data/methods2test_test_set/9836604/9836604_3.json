{"test_class": {"identifier": "EncryCredentialManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EncryCredentialManagerImpl encryCredentialManager;", "modifier": "private", "type": "EncryCredentialManagerImpl", "declarator": "encryCredentialManager", "var_name": "encryCredentialManager"}], "file": "ki4so-common/src/test/java/com/github/ebnew/ki4so/core/authentication/EncryCredentialManagerImplTest.java"}, "test_case": {"identifier": "testEncrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEncrypt() throws UnsupportedEncodingException {\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u5f02\u5e38\u60c5\u51b5\u3002\n\t\t */\n\t\tAssert.assertEquals(0, encryCredentialManager.encrypt(null).length());\n\t\t\n\t\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tEncryCredentialInfo encryCredentialInfo = new EncryCredentialInfo();\n\t\tKeyService keyService = Mockito.mock(KeyService.class);\n\t\tencryCredentialManager.setKeyService(keyService);\n\t\tString result = encryCredentialManager.encrypt(encryCredentialInfo);\n\t\tcheckData(result, encryCredentialInfo);\n\t\t\n\t\t\n\t\t/**\n\t\t * \u8bbe\u7f6e\u6a21\u62df\u670d\u52a1\uff0c\u67e5\u8be2\u5230\u7684key\u4e3anull.\n\t\t */\n\t\tresult = encryCredentialManager.encrypt(encryCredentialInfo);\n\t\tcheckData(result, encryCredentialInfo);\n\t\t\n\t\t/**\n\t\t * \u8bbe\u7f6e\u6a21\u62df\u670d\u52a1\uff0c\u67e5\u8be2\u5230\u7684key\u4e0d\u662fnull.\n\t\t */\n\t\tString keyId = \"1001\";\n\t\tKi4soKey key = new Ki4soKey();\n\t\tkey.setKeyId(keyId);\n\t\tkey.setValue(\"dafdasfdasfds\");\n\t\tencryCredentialInfo.setKeyId(keyId);\n\t\tMockito.when(keyService.findKeyByKeyId(keyId)).thenReturn(key);\n\t\tresult = encryCredentialManager.encrypt(encryCredentialInfo);\n\t\tcheckData(result, encryCredentialInfo);\n\t\n\t\t/**\n\t\t * \u6d4b\u8bd5\u6b63\u5e38\u7684\u60c5\u51b5\u3002\n\t\t */\n\t\tString appId = \"1000\";\n\t\tString userId = \"test\";\n\t\tencryCredentialInfo.setAppId(appId);\n\t\tDate now = new Date();\n\t\tencryCredentialInfo.setCreateTime(now);\n\t\tencryCredentialInfo.setExpiredTime(now);\n\t\tencryCredentialInfo.setKeyId(keyId);\n\t\tencryCredentialInfo.setUserId(userId);\n\t\t//\u52a0\u7801\u3002\n\t\tresult = encryCredentialManager.encrypt(encryCredentialInfo);\n\t\tEncryCredential encryCredential = new EncryCredential(result);\n\t\t//\u89e3\u7801\u3002\n\t\tEncryCredentialInfo encryCredentialInfo2 = this.encryCredentialManager.decrypt(encryCredential);\n\t\tcheckEncryCredentialInfo(encryCredentialInfo, encryCredentialInfo2);\n\t}", "signature": "void testEncrypt()", "full_signature": "@Test public void testEncrypt()", "class_method_signature": "EncryCredentialManagerImplTest.testEncrypt()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "length", "encrypt", "mock", "setKeyService", "encrypt", "checkData", "encrypt", "checkData", "setKeyId", "setValue", "setKeyId", "thenReturn", "when", "findKeyByKeyId", "encrypt", "checkData", "setAppId", "setCreateTime", "setExpiredTime", "setKeyId", "setUserId", "encrypt", "decrypt", "checkEncryCredentialInfo"]}, "focal_class": {"identifier": "EncryCredentialManagerImpl", "superclass": "", "interfaces": "implements EncryCredentialManager", "fields": [{"original_string": "private KeyService keyService;", "modifier": "private", "type": "KeyService", "declarator": "keyService", "var_name": "keyService"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(EncryCredentialManagerImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(EncryCredentialManagerImpl.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "setKeyService", "parameters": "(KeyService keyService)", "modifiers": "public", "return": "void", "signature": "void setKeyService(KeyService keyService)", "full_signature": "public void setKeyService(KeyService keyService)", "class_method_signature": "EncryCredentialManagerImpl.setKeyService(KeyService keyService)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(EncryCredential encryCredential)", "modifiers": "@Override public", "return": "EncryCredentialInfo", "signature": "EncryCredentialInfo decrypt(EncryCredential encryCredential)", "full_signature": "@Override public EncryCredentialInfo decrypt(EncryCredential encryCredential)", "class_method_signature": "EncryCredentialManagerImpl.decrypt(EncryCredential encryCredential)", "testcase": false, "constructor": false}, {"identifier": "parseEncryCredential", "parameters": "(String credential)", "modifiers": "private", "return": "EncryCredentialInfo", "signature": "EncryCredentialInfo parseEncryCredential(String credential)", "full_signature": "private EncryCredentialInfo parseEncryCredential(String credential)", "class_method_signature": "EncryCredentialManagerImpl.parseEncryCredential(String credential)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(EncryCredentialInfo encryCredentialInfo)", "modifiers": "@Override public", "return": "String", "signature": "String encrypt(EncryCredentialInfo encryCredentialInfo)", "full_signature": "@Override public String encrypt(EncryCredentialInfo encryCredentialInfo)", "class_method_signature": "EncryCredentialManagerImpl.encrypt(EncryCredentialInfo encryCredentialInfo)", "testcase": false, "constructor": false}, {"identifier": "encryptSensitiveInfo", "parameters": "(EncryCredentialInfo encryCredentialInfo)", "modifiers": "private", "return": "String", "signature": "String encryptSensitiveInfo(EncryCredentialInfo encryCredentialInfo)", "full_signature": "private String encryptSensitiveInfo(EncryCredentialInfo encryCredentialInfo)", "class_method_signature": "EncryCredentialManagerImpl.encryptSensitiveInfo(EncryCredentialInfo encryCredentialInfo)", "testcase": false, "constructor": false}, {"identifier": "checkEncryCredentialInfo", "parameters": "(\n\t\t\tEncryCredentialInfo encryCredentialInfo)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkEncryCredentialInfo(\n\t\t\tEncryCredentialInfo encryCredentialInfo)", "full_signature": "@Override public boolean checkEncryCredentialInfo(\n\t\t\tEncryCredentialInfo encryCredentialInfo)", "class_method_signature": "EncryCredentialManagerImpl.checkEncryCredentialInfo(\n\t\t\tEncryCredentialInfo encryCredentialInfo)", "testcase": false, "constructor": false}, {"identifier": "getCurrentDate", "parameters": "()", "modifiers": "private", "return": "Date", "signature": "Date getCurrentDate()", "full_signature": "private Date getCurrentDate()", "class_method_signature": "EncryCredentialManagerImpl.getCurrentDate()", "testcase": false, "constructor": false}], "file": "ki4so-common/src/main/java/com/github/ebnew/ki4so/core/authentication/EncryCredentialManagerImpl.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(EncryCredentialInfo encryCredentialInfo)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String encrypt(EncryCredentialInfo encryCredentialInfo) {\n\t\tStringBuffer sb = new StringBuffer();\n\t\tif(encryCredentialInfo!=null){\n\t\t\ttry {\n\t\t\t\tString data = encryptSensitiveInfo(encryCredentialInfo);\n\t\t\t\tsb.append(data).append(\"?appId=\").append(encryCredentialInfo.getAppId())\n\t\t\t\t.append(\"&keyId=\").append(encryCredentialInfo.getKeyId());\n\t\t\t\t//\u518d\u8fdb\u884cBASE64\u7f16\u7801\uff0c\u907f\u514d\u4f20\u8f93\u9519\u8bef\u3002\n\t\t\t\treturn URLEncoder.encode(Base64Coder.encryptBASE64(sb.toString().getBytes()), \"UTF-8\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOGGER.log(Level.SEVERE, \"encrypt data exception\", e);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}", "signature": "String encrypt(EncryCredentialInfo encryCredentialInfo)", "full_signature": "@Override public String encrypt(EncryCredentialInfo encryCredentialInfo)", "class_method_signature": "EncryCredentialManagerImpl.encrypt(EncryCredentialInfo encryCredentialInfo)", "testcase": false, "constructor": false, "invocations": ["encryptSensitiveInfo", "append", "append", "append", "append", "append", "getAppId", "getKeyId", "encode", "encryptBASE64", "getBytes", "toString", "log", "toString"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}