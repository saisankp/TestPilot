{"test_class": {"identifier": "InflectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Inflector inflector;", "modifier": "private", "type": "Inflector", "declarator": "inflector", "var_name": "inflector"}], "file": "modeshape-common/src/test/java/org/modeshape/common/text/InflectorTest.java"}, "test_case": {"identifier": "shouldReplaceAllWithUppercase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReplaceAllWithUppercase() {\n        assertEquals(\"hEllO\", Inflector.replaceAllWithUppercase(\"hello\", \"([aeiou])\", 1));\n        assertEquals(\"hLlo\", Inflector.replaceAllWithUppercase(\"hello\", \"([aeiou])(l)\", 2));\n    }", "signature": "void shouldReplaceAllWithUppercase()", "full_signature": "@Test public void shouldReplaceAllWithUppercase()", "class_method_signature": "InflectorTest.shouldReplaceAllWithUppercase()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "replaceAllWithUppercase", "assertEquals", "replaceAllWithUppercase"]}, "focal_class": {"identifier": "Inflector", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Inflector INSTANCE = new Inflector();", "modifier": "protected static final", "type": "Inflector", "declarator": "INSTANCE = new Inflector()", "var_name": "INSTANCE"}, {"original_string": "private LinkedList<Rule> plurals = new LinkedList<Rule>();", "modifier": "private", "type": "LinkedList<Rule>", "declarator": "plurals = new LinkedList<Rule>()", "var_name": "plurals"}, {"original_string": "private LinkedList<Rule> singulars = new LinkedList<Rule>();", "modifier": "private", "type": "LinkedList<Rule>", "declarator": "singulars = new LinkedList<Rule>()", "var_name": "singulars"}, {"original_string": "private final Set<String> uncountables = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "uncountables = new HashSet<String>()", "var_name": "uncountables"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static final", "return": "Inflector", "signature": "Inflector getInstance()", "full_signature": "public static final Inflector getInstance()", "class_method_signature": "Inflector.getInstance()", "testcase": false, "constructor": false}, {"identifier": "Inflector", "parameters": "()", "modifiers": "public", "return": "", "signature": " Inflector()", "full_signature": "public  Inflector()", "class_method_signature": "Inflector.Inflector()", "testcase": false, "constructor": true}, {"identifier": "Inflector", "parameters": "( Inflector original )", "modifiers": "protected", "return": "", "signature": " Inflector( Inflector original )", "full_signature": "protected  Inflector( Inflector original )", "class_method_signature": "Inflector.Inflector( Inflector original )", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Inflector", "signature": "Inflector clone()", "full_signature": "@Override public Inflector clone()", "class_method_signature": "Inflector.clone()", "testcase": false, "constructor": false}, {"identifier": "pluralize", "parameters": "( Object word )", "modifiers": "public", "return": "String", "signature": "String pluralize( Object word )", "full_signature": "public String pluralize( Object word )", "class_method_signature": "Inflector.pluralize( Object word )", "testcase": false, "constructor": false}, {"identifier": "pluralize", "parameters": "( Object word,\n                             int count )", "modifiers": "public", "return": "String", "signature": "String pluralize( Object word,\n                             int count )", "full_signature": "public String pluralize( Object word,\n                             int count )", "class_method_signature": "Inflector.pluralize( Object word,\n                             int count )", "testcase": false, "constructor": false}, {"identifier": "singularize", "parameters": "( Object word )", "modifiers": "public", "return": "String", "signature": "String singularize( Object word )", "full_signature": "public String singularize( Object word )", "class_method_signature": "Inflector.singularize( Object word )", "testcase": false, "constructor": false}, {"identifier": "lowerCamelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "full_signature": "public String lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "class_method_signature": "Inflector.lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "upperCamelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "full_signature": "public String upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "class_method_signature": "Inflector.upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "camelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "full_signature": "public String camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "class_method_signature": "Inflector.camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "underscore", "parameters": "( String camelCaseWord,\n                              char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String underscore( String camelCaseWord,\n                              char... delimiterChars )", "full_signature": "public String underscore( String camelCaseWord,\n                              char... delimiterChars )", "class_method_signature": "Inflector.underscore( String camelCaseWord,\n                              char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "( String words )", "modifiers": "public", "return": "String", "signature": "String capitalize( String words )", "full_signature": "public String capitalize( String words )", "class_method_signature": "Inflector.capitalize( String words )", "testcase": false, "constructor": false}, {"identifier": "humanize", "parameters": "( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "modifiers": "public", "return": "String", "signature": "String humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "full_signature": "public String humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "class_method_signature": "Inflector.humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "testcase": false, "constructor": false}, {"identifier": "titleCase", "parameters": "( String words,\n                             String... removableTokens )", "modifiers": "public", "return": "String", "signature": "String titleCase( String words,\n                             String... removableTokens )", "full_signature": "public String titleCase( String words,\n                             String... removableTokens )", "class_method_signature": "Inflector.titleCase( String words,\n                             String... removableTokens )", "testcase": false, "constructor": false}, {"identifier": "ordinalize", "parameters": "( int number )", "modifiers": "public", "return": "String", "signature": "String ordinalize( int number )", "full_signature": "public String ordinalize( int number )", "class_method_signature": "Inflector.ordinalize( int number )", "testcase": false, "constructor": false}, {"identifier": "isUncountable", "parameters": "( String word )", "modifiers": "public", "return": "boolean", "signature": "boolean isUncountable( String word )", "full_signature": "public boolean isUncountable( String word )", "class_method_signature": "Inflector.isUncountable( String word )", "testcase": false, "constructor": false}, {"identifier": "getUncountables", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getUncountables()", "full_signature": "public Set<String> getUncountables()", "class_method_signature": "Inflector.getUncountables()", "testcase": false, "constructor": false}, {"identifier": "addPluralize", "parameters": "( String rule,\n                              String replacement )", "modifiers": "public", "return": "void", "signature": "void addPluralize( String rule,\n                              String replacement )", "full_signature": "public void addPluralize( String rule,\n                              String replacement )", "class_method_signature": "Inflector.addPluralize( String rule,\n                              String replacement )", "testcase": false, "constructor": false}, {"identifier": "addSingularize", "parameters": "( String rule,\n                                String replacement )", "modifiers": "public", "return": "void", "signature": "void addSingularize( String rule,\n                                String replacement )", "full_signature": "public void addSingularize( String rule,\n                                String replacement )", "class_method_signature": "Inflector.addSingularize( String rule,\n                                String replacement )", "testcase": false, "constructor": false}, {"identifier": "addIrregular", "parameters": "( String singular,\n                              String plural )", "modifiers": "public", "return": "void", "signature": "void addIrregular( String singular,\n                              String plural )", "full_signature": "public void addIrregular( String singular,\n                              String plural )", "class_method_signature": "Inflector.addIrregular( String singular,\n                              String plural )", "testcase": false, "constructor": false}, {"identifier": "addUncountable", "parameters": "( String... words )", "modifiers": "public", "return": "void", "signature": "void addUncountable( String... words )", "full_signature": "public void addUncountable( String... words )", "class_method_signature": "Inflector.addUncountable( String... words )", "testcase": false, "constructor": false}, {"identifier": "replaceAllWithUppercase", "parameters": "( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "modifiers": "protected static", "return": "String", "signature": "String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "full_signature": "protected static String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "class_method_signature": "Inflector.replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Inflector.clear()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initialize()", "full_signature": "protected void initialize()", "class_method_signature": "Inflector.initialize()", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/text/Inflector.java"}, "focal_method": {"identifier": "replaceAllWithUppercase", "parameters": "( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "modifiers": "protected static", "return": "String", "body": "protected static String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase ) {\n        Pattern underscoreAndDotPattern = Pattern.compile(regex);\n        Matcher matcher = underscoreAndDotPattern.matcher(input);\n        // CHECKSTYLE IGNORE check FOR NEXT 1 LINES\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            matcher.appendReplacement(sb, matcher.group(groupNumberToUppercase).toUpperCase());\n        }\n        matcher.appendTail(sb);\n        return sb.toString();\n    }", "signature": "String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "full_signature": "protected static String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "class_method_signature": "Inflector.replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "find", "appendReplacement", "toUpperCase", "group", "appendTail", "toString"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}