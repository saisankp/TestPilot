{"test_class": {"identifier": "AsynchronousProcessListWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AsynchronousProcessListWriter processListWriter;", "modifier": "private", "type": "AsynchronousProcessListWriter", "declarator": "processListWriter", "var_name": "processListWriter"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/async/AsynchronousProcessListWriterTest.java"}, "test_case": {"identifier": "writesListOfAsynchronousProcessAsPlainText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writesListOfAsynchronousProcessAsPlainText() throws Exception {\n        List<AsynchronousProcess> processes = newArrayList(new AsynchronousProcess(\"andrew\", 1L, \"/a\", \"running\"),\n                                                           new AsynchronousProcess(\"user\", 2L, \"/b\", \"done\"));\n\n        List<List<String>> expectedProcessesTable = newArrayList(newArrayList(\"USER\", \"ID\", \"STAT\", \"PATH\"),\n                                                                 newArrayList(\"andrew\", \"1\", \"running\", \"/a\"),\n                                                                 newArrayList(\"user\", \"2\", \"done\", \"/b\"));\n\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        processListWriter.writeTo(processes, List.class,\n                                  newParameterizedType(List.class, AsynchronousProcess.class),\n                                  new Annotation[0],\n                                  MediaType.TEXT_PLAIN_TYPE,\n                                  new MultivaluedHashMap<>(),\n                                  bout);\n\n        List<String> lines = CharStreams.readLines(new StringReader(bout.toString()));\n        assertEquals(3, lines.size());\n\n        Pattern pattern = Pattern.compile(\"(\\\\w+)\\\\s+(\\\\w+)\\\\s+(\\\\w+)\\\\s+(/?\\\\w+)\");\n\n        List<List<String>> processesTable = newArrayList();\n        for (String line : lines) {\n            Matcher matcher = pattern.matcher(line);\n            assertTrue(String.format(\"String '%s' is not matched to pattern\", line), matcher.matches());\n            processesTable.add(getAllGroups(matcher));\n        }\n\n        assertEquals(expectedProcessesTable, processesTable);\n    }", "signature": "void writesListOfAsynchronousProcessAsPlainText()", "full_signature": "@Test public void writesListOfAsynchronousProcessAsPlainText()", "class_method_signature": "AsynchronousProcessListWriterTest.writesListOfAsynchronousProcessAsPlainText()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "writeTo", "newParameterizedType", "readLines", "toString", "assertEquals", "size", "compile", "newArrayList", "matcher", "assertTrue", "format", "matches", "add", "getAllGroups", "assertEquals"]}, "focal_class": {"identifier": "AsynchronousProcessListWriter", "superclass": "", "interfaces": "implements MessageBodyWriter<Iterable<AsynchronousProcess>>", "fields": [{"original_string": "private static final String OUTPUT_FORMAT = \"%-30s%-10s%-10s%s%n\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FORMAT = \"%-30s%-10s%-10s%s%n\"", "var_name": "OUTPUT_FORMAT"}], "methods": [{"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "AsynchronousProcessListWriter.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType)", "full_signature": "@Override public long getSize(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType)", "class_method_signature": "AsynchronousProcessListWriter.getSize(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "AsynchronousProcessListWriter.writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/async/AsynchronousProcessListWriter.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream) throws IOException, WebApplicationException {\n        PrintWriter writer = new PrintWriter(new OutputStreamWriter(entityStream));\n        try {\n            writer.format(OUTPUT_FORMAT, \"USER\", \"ID\", \"STAT\", \"PATH\");\n            for (AsynchronousProcess process : asynchronousProcesses) {\n                writer.format(OUTPUT_FORMAT, process.getOwner() == null ? \"unknown\" : process.getOwner(), process.getId(), process.getStatus(), process.getPath());\n            }\n        } finally {\n            writer.flush();\n        }\n    }", "signature": "void writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "AsynchronousProcessListWriter.writeTo(Iterable<AsynchronousProcess> asynchronousProcesses,\n                        Class<?> type, Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["format", "format", "getOwner", "getOwner", "getId", "getStatus", "getPath", "flush"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}