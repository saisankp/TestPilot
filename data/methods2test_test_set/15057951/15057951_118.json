{"test_class": {"identifier": "MatchAllMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/matchers/MatchAllMatcherTest.java"}, "test_case": {"identifier": "shouldAlwaysAllowAllValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAlwaysAllowAllValues() {\n        // given\n        MatchAllMatcher matcher = new MatchAllMatcher();\n\n        // when\n        boolean matches = matcher.matches(\"something\", \"whatever\", null);\n\n        // then\n        assertThat(matches).isTrue();\n    }", "signature": "void shouldAlwaysAllowAllValues()", "full_signature": "@Test public void shouldAlwaysAllowAllValues()", "class_method_signature": "MatchAllMatcherTest.shouldAlwaysAllowAllValues()", "testcase": true, "constructor": false, "invocations": ["matches", "isTrue", "assertThat"]}, "focal_class": {"identifier": "MatchAllMatcher", "superclass": "", "interfaces": "implements Matcher", "fields": [{"original_string": "public static final String MATCH_ALL = \"equals/anything\";", "modifier": "public static final", "type": "String", "declarator": "MATCH_ALL = \"equals/anything\"", "var_name": "MATCH_ALL"}], "methods": [{"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "MatchAllMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/matchers/MatchAllMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public <T extends ValueHolder> boolean matches(String value, String pattern, Type<T> type) {\n        return true;\n    }", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "MatchAllMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}