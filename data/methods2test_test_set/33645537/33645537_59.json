{"test_class": {"identifier": "RearrangeInputToTargetTest", "superclass": "", "interfaces": "", "fields": [], "file": "algs/src/test/java/com/github/kowshik/bigo/arrays/RearrangeInputToTargetTest.java"}, "test_case": {"identifier": "rearrange_inputIsDifferentFromOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void rearrange_inputIsDifferentFromOutput() {\n\t\tint[] target = { 5, 0, 3, 2, 9 };\n\t\tint[] input = { 0, 2, 5, 9, 3 };\n\n\t\tRearrangeInputToTarget.rearrange(input, target);\n\t\tassertArrayEquals(input, target);\n\t}", "signature": "void rearrange_inputIsDifferentFromOutput()", "full_signature": "@Test public void rearrange_inputIsDifferentFromOutput()", "class_method_signature": "RearrangeInputToTargetTest.rearrange_inputIsDifferentFromOutput()", "testcase": true, "constructor": false, "invocations": ["rearrange", "assertArrayEquals"]}, "focal_class": {"identifier": "RearrangeInputToTarget", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "rearrange", "parameters": "(int[] input, int[] target)", "modifiers": "public static", "return": "void", "signature": "void rearrange(int[] input, int[] target)", "full_signature": "public static void rearrange(int[] input, int[] target)", "class_method_signature": "RearrangeInputToTarget.rearrange(int[] input, int[] target)", "testcase": false, "constructor": false}, {"identifier": "buildIndex", "parameters": "(int[] input, Map<Integer, Integer> index)", "modifiers": "private static", "return": "void", "signature": "void buildIndex(int[] input, Map<Integer, Integer> index)", "full_signature": "private static void buildIndex(int[] input, Map<Integer, Integer> index)", "class_method_signature": "RearrangeInputToTarget.buildIndex(int[] input, Map<Integer, Integer> index)", "testcase": false, "constructor": false}, {"identifier": "findFirstOutOfOrderIndex", "parameters": "(int[] input, int[] target)", "modifiers": "private static", "return": "int", "signature": "int findFirstOutOfOrderIndex(int[] input, int[] target)", "full_signature": "private static int findFirstOutOfOrderIndex(int[] input, int[] target)", "class_method_signature": "RearrangeInputToTarget.findFirstOutOfOrderIndex(int[] input, int[] target)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/arrays/RearrangeInputToTarget.java"}, "focal_method": {"identifier": "rearrange", "parameters": "(int[] input, int[] target)", "modifiers": "public static", "return": "void", "body": "public static void rearrange(int[] input, int[] target) {\n\t\tassert (input.length == target.length);\n\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tbuildIndex(input, map);\n\t\tint zeroIndex = com.github.kowshik.bigo.common.ArrayUtils.findIndex(input, 0);\n\t\tint numMoves = 0;\n\n\t\twhile (numMoves < input.length) {\n\t\t\t// zero has reached its final location. So we displace it\n\t\t\t// temporarily so that we can continue putting other elements in\n\t\t\t// their final locations.\n\t\t\tif (target[zeroIndex] == 0) {\n\t\t\t\tint outOfOrderIndex = findFirstOutOfOrderIndex(input, target);\n\t\t\t\tif (outOfOrderIndex == -1) {\n\t\t\t\t\t// All elements including '0' are in their final locations.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmap.put(input[outOfOrderIndex], zeroIndex);\n\t\t\t\t// We need to update the index because we are going to modify\n\t\t\t\t// the original location of the value in input[outOfOrderIndex].\n\t\t\t\tcom.github.kowshik.bigo.common.ArrayUtils.swap(input, zeroIndex, outOfOrderIndex);\n\t\t\t\tzeroIndex = outOfOrderIndex;\n\n\t\t\t} else {\n\t\t\t\t// Swap zero with what should actually be in zero's location\n\t\t\t\t// in the target array.\n\t\t\t\tint nextZeroIndex = map.get(target[zeroIndex]);\n\t\t\t\tcom.github.kowshik.bigo.common.ArrayUtils.swap(input, zeroIndex, nextZeroIndex);\n\t\t\t\tzeroIndex = nextZeroIndex;\n\t\t\t\tnumMoves++;\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void rearrange(int[] input, int[] target)", "full_signature": "public static void rearrange(int[] input, int[] target)", "class_method_signature": "RearrangeInputToTarget.rearrange(int[] input, int[] target)", "testcase": false, "constructor": false, "invocations": ["buildIndex", "findIndex", "findFirstOutOfOrderIndex", "put", "swap", "get", "swap"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}