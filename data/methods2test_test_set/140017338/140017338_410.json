{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "http-support/src/test/java/org/eclipse/sw360/antenna/http/utils/HttpUtilsTest.java"}, "test_case": {"identifier": "testWaitForFailedFutureWithIOException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWaitForFailedFutureWithIOException() {\n        Exception exception = new IOException(\"No connection\");\n        CompletableFuture<Object> future = failedFuture(exception);\n\n        try {\n            HttpUtils.waitFor(future);\n            fail(\"No exception was thrown!\");\n        } catch (IOException e) {\n            assertThat(e).isEqualTo(exception);\n        }\n    }", "signature": "void testWaitForFailedFutureWithIOException()", "full_signature": "@Test public void testWaitForFailedFutureWithIOException()", "class_method_signature": "HttpUtilsTest.testWaitForFailedFutureWithIOException()", "testcase": true, "constructor": false, "invocations": ["failedFuture", "waitFor", "fail", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Predicate<Response> SUCCESS_STATUS = Response::isSuccess;", "modifier": "public static final", "type": "Predicate<Response>", "declarator": "SUCCESS_STATUS = Response::isSuccess", "var_name": "SUCCESS_STATUS"}, {"original_string": "private static final String PARAMETER_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_SEPARATOR = \"&\"", "var_name": "PARAMETER_SEPARATOR"}, {"original_string": "private static final char KEY_VALUE_SEPARATOR = '=';", "modifier": "private static final", "type": "char", "declarator": "KEY_VALUE_SEPARATOR = '='", "var_name": "KEY_VALUE_SEPARATOR"}, {"original_string": "private static final char QUERY_PREFIX = '?';", "modifier": "private static final", "type": "char", "declarator": "QUERY_PREFIX = '?'", "var_name": "QUERY_PREFIX"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "HttpUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " HttpUtils()", "full_signature": "private  HttpUtils()", "class_method_signature": "HttpUtils.HttpUtils()", "testcase": false, "constructor": true}, {"identifier": "waitFor", "parameters": "(Future<? extends T> future)", "modifiers": "public static", "return": "T", "signature": "T waitFor(Future<? extends T> future)", "full_signature": "public static T waitFor(Future<? extends T> future)", "class_method_signature": "HttpUtils.waitFor(Future<? extends T> future)", "testcase": false, "constructor": false}, {"identifier": "unwrapCompletionException", "parameters": "(Throwable ex)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable unwrapCompletionException(Throwable ex)", "full_signature": "public static Throwable unwrapCompletionException(Throwable ex)", "class_method_signature": "HttpUtils.unwrapCompletionException(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "isSuccessStatus", "parameters": "(int status)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSuccessStatus(int status)", "full_signature": "public static boolean isSuccessStatus(int status)", "class_method_signature": "HttpUtils.isSuccessStatus(int status)", "testcase": false, "constructor": false}, {"identifier": "checkResponse", "parameters": "(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate,\n                                                         String tag)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate,\n                                                         String tag)", "full_signature": "public static ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate,\n                                                         String tag)", "class_method_signature": "HttpUtils.checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate,\n                                                         String tag)", "testcase": false, "constructor": false}, {"identifier": "checkResponse", "parameters": "(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate)", "full_signature": "public static ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate)", "class_method_signature": "HttpUtils.checkResponse(ResponseProcessor<T> processor,\n                                                         Predicate<Response> successPredicate)", "testcase": false, "constructor": false}, {"identifier": "checkResponse", "parameters": "(ResponseProcessor<T> processor, String tag)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor, String tag)", "full_signature": "public static ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor, String tag)", "class_method_signature": "HttpUtils.checkResponse(ResponseProcessor<T> processor, String tag)", "testcase": false, "constructor": false}, {"identifier": "checkResponse", "parameters": "(ResponseProcessor<T> processor)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor)", "full_signature": "public static ResponseProcessor<T> checkResponse(ResponseProcessor<T> processor)", "class_method_signature": "HttpUtils.checkResponse(ResponseProcessor<T> processor)", "testcase": false, "constructor": false}, {"identifier": "hasStatus", "parameters": "(int status)", "modifiers": "public static", "return": "Predicate<Response>", "signature": "Predicate<Response> hasStatus(int status)", "full_signature": "public static Predicate<Response> hasStatus(int status)", "class_method_signature": "HttpUtils.hasStatus(int status)", "testcase": false, "constructor": false}, {"identifier": "createExceptionForResponse", "parameters": "(Response response, String tag)", "modifiers": "public static", "return": "FailedRequestException", "signature": "FailedRequestException createExceptionForResponse(Response response, String tag)", "full_signature": "public static FailedRequestException createExceptionForResponse(Response response, String tag)", "class_method_signature": "HttpUtils.createExceptionForResponse(Response response, String tag)", "testcase": false, "constructor": false}, {"identifier": "jsonResult", "parameters": "(ObjectMapper mapper, Class<T> resultClass)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> jsonResult(ObjectMapper mapper, Class<T> resultClass)", "full_signature": "public static ResponseProcessor<T> jsonResult(ObjectMapper mapper, Class<T> resultClass)", "class_method_signature": "HttpUtils.jsonResult(ObjectMapper mapper, Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "jsonResult", "parameters": "(ObjectMapper mapper, TypeReference<T> typeReference)", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> jsonResult(ObjectMapper mapper, TypeReference<T> typeReference)", "full_signature": "public static ResponseProcessor<T> jsonResult(ObjectMapper mapper, TypeReference<T> typeReference)", "class_method_signature": "HttpUtils.jsonResult(ObjectMapper mapper, TypeReference<T> typeReference)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String uri)", "modifiers": "public static", "return": "Consumer<RequestBuilder>", "signature": "Consumer<RequestBuilder> get(String uri)", "full_signature": "public static Consumer<RequestBuilder> get(String uri)", "class_method_signature": "HttpUtils.get(String uri)", "testcase": false, "constructor": false}, {"identifier": "nullProcessor", "parameters": "()", "modifiers": "public static", "return": "ResponseProcessor<T>", "signature": "ResponseProcessor<T> nullProcessor()", "full_signature": "public static ResponseProcessor<T> nullProcessor()", "class_method_signature": "HttpUtils.nullProcessor()", "testcase": false, "constructor": false}, {"identifier": "urlEncode", "parameters": "(String src)", "modifiers": "public static", "return": "String", "signature": "String urlEncode(String src)", "full_signature": "public static String urlEncode(String src)", "class_method_signature": "HttpUtils.urlEncode(String src)", "testcase": false, "constructor": false}, {"identifier": "addQueryParameters", "parameters": "(String url, Map<String, ?> params)", "modifiers": "public static", "return": "String", "signature": "String addQueryParameters(String url, Map<String, ?> params)", "full_signature": "public static String addQueryParameters(String url, Map<String, ?> params)", "class_method_signature": "HttpUtils.addQueryParameters(String url, Map<String, ?> params)", "testcase": false, "constructor": false}, {"identifier": "addQueryParameters", "parameters": "(String url, Map<String, ?> params, boolean filterUndefined)", "modifiers": "public static", "return": "String", "signature": "String addQueryParameters(String url, Map<String, ?> params, boolean filterUndefined)", "full_signature": "public static String addQueryParameters(String url, Map<String, ?> params, boolean filterUndefined)", "class_method_signature": "HttpUtils.addQueryParameters(String url, Map<String, ?> params, boolean filterUndefined)", "testcase": false, "constructor": false}, {"identifier": "addQueryParameter", "parameters": "(String url, String key, Object value)", "modifiers": "public static", "return": "String", "signature": "String addQueryParameter(String url, String key, Object value)", "full_signature": "public static String addQueryParameter(String url, String key, Object value)", "class_method_signature": "HttpUtils.addQueryParameter(String url, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "wrapInIOException", "parameters": "(Throwable e)", "modifiers": "private static", "return": "IOException", "signature": "IOException wrapInIOException(Throwable e)", "full_signature": "private static IOException wrapInIOException(Throwable e)", "class_method_signature": "HttpUtils.wrapInIOException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "encodeQueryParameter", "parameters": "(String key, Object value)", "modifiers": "private static", "return": "String", "signature": "String encodeQueryParameter(String key, Object value)", "full_signature": "private static String encodeQueryParameter(String key, Object value)", "class_method_signature": "HttpUtils.encodeQueryParameter(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "isParameterDefined", "parameters": "(Object value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isParameterDefined(Object value)", "full_signature": "private static boolean isParameterDefined(Object value)", "class_method_signature": "HttpUtils.isParameterDefined(Object value)", "testcase": false, "constructor": false}], "file": "http-support/src/main/java/org/eclipse/sw360/antenna/http/utils/HttpUtils.java"}, "focal_method": {"identifier": "waitFor", "parameters": "(Future<? extends T> future)", "modifiers": "public static", "return": "T", "body": "public static <T> T waitFor(Future<? extends T> future) throws IOException {\n        try {\n            return future.get();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();  // reset interrupted flag\n            throw new IOException(e);\n        } catch (ExecutionException e) {\n            throw wrapInIOException(e.getCause());\n        }\n    }", "signature": "T waitFor(Future<? extends T> future)", "full_signature": "public static T waitFor(Future<? extends T> future)", "class_method_signature": "HttpUtils.waitFor(Future<? extends T> future)", "testcase": false, "constructor": false, "invocations": ["get", "interrupt", "currentThread", "wrapInIOException", "getCause"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}