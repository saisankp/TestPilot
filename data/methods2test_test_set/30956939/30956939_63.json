{"test_class": {"identifier": "WorkflowReportJSONTest", "superclass": "extends DummyWorkflowReport", "interfaces": "", "fields": [{"original_string": "private final WorkflowReportJSON workflowReportJson = new WorkflowReportJSON();", "modifier": "private final", "type": "WorkflowReportJSON", "declarator": "workflowReportJson = new WorkflowReportJSON()", "var_name": "workflowReportJson"}], "file": "taverna-run-impl/src/test/java/org/apache/taverna/platform/run/impl/WorkflowReportJSONTest.java"}, "test_case": {"identifier": "save", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void save() throws Exception {\n        workflowReportJson.save(wfReport, dataBundle);\n        Path path = wfReport.getDataBundle().getRoot().resolve(\"/workflowrun.json\");\n        assertTrue(\"Did not save to expected path \"  + path, Files.exists(path));\n\n//        System.out.println(DataBundles.getStringValue(path));\n        \n        JsonNode json;\n        try (InputStream jsonIn = Files.newInputStream(path)) {\n            json = new ObjectMapper().readTree(jsonIn);\n        }\n        assertEquals(\"COMPLETED\", json.get(\"state\").asText());\n        assertEquals(\"2013-01-02T13:37:00.000+0000\", json.get(\"createdDate\").asText());\n        assertEquals(\"2013-01-02T14:50:00.000+0000\", json.get(\"startedDate\").asText());\n        assertEquals(\"2013-12-31T00:00:00.000+0000\", json.get(\"completedDate\").asText());\n        String wfId = wfBundle.getGlobalBaseURI().toString();\n        assertEquals(wfId + \"workflow/Hello_Anyone/\", \n                json.get(\"subject\").asText());\n        \n        // workflow invocation\n        JsonNode wfInvoc = json.get(\"invocations\").get(0);\n        assertEquals(\"wf0\", wfInvoc.get(\"id\").asText());\n        assertEquals(\"wf0\", wfInvoc.get(\"name\").asText());\n        \n        assertEquals(\"2013-01-02T14:51:00.000+0000\", wfInvoc.get(\"startedDate\").asText());\n        assertEquals(\"2013-12-30T23:50:00.000+0000\", wfInvoc.get(\"completedDate\").asText());\n\n        String inputsName = wfInvoc.get(\"inputs\").get(\"name\").asText();\n        assertEquals(\"/inputs/name\", inputsName);\n        String outputsGreeting = wfInvoc.get(\"outputs\").get(\"greeting\").asText();\n        assertEquals(\"/outputs/greeting\", outputsGreeting);\n        assertEquals(\n                \"John Doe\",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(inputsName)));        \n        assertEquals(\n                \"Hello, John Doe\",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(outputsGreeting)));        \n\n        // NOTE: This assumes alphabetical ordering when constructing\n        // processor reports - which generally is given as\n        // Workflow.getProcessors() is sorted.\n        JsonNode proc0 = json.get(\"processorReports\").get(0);\n        assertEquals(wfId + \"workflow/Hello_Anyone/processor/Concatenate_two_strings/\",\n                proc0.get(\"subject\").asText());\n        assertEquals(\"COMPLETED\", proc0.get(\"state\").asText());\n        assertEquals(\"2013-02-01T00:00:00.000+0000\", proc0.get(\"createdDate\").asText());\n        assertEquals(\"2013-02-02T00:00:00.000+0000\", proc0.get(\"startedDate\").asText());\n        assertEquals(\"2013-02-03T00:00:00.000+0000\", proc0.get(\"pausedDates\").get(0).asText());\n        assertEquals(\"2013-02-05T00:00:00.000+0000\", proc0.get(\"pausedDates\").get(1).asText());\n        assertEquals(\"2013-02-05T00:00:00.000+0000\", proc0.get(\"pausedDate\").asText());\n\n        assertEquals(\"2013-02-04T00:00:00.000+0000\", proc0.get(\"resumedDates\").get(0).asText());\n        assertEquals(\"2013-02-06T00:00:00.000+0000\", proc0.get(\"resumedDates\").get(1).asText());\n        assertEquals(\"2013-02-06T00:00:00.000+0000\", proc0.get(\"resumedDate\").asText());\n\n        assertEquals(\"2013-07-28T12:00:00.000+0000\", proc0.get(\"completedDate\").asText());\n\n        // processor invocations\n        JsonNode pInvoc0 = proc0.get(\"invocations\").get(0);\n        assertEquals(\"proc-Concatenate_two_strings0\", pInvoc0.get(\"name\").asText());\n        assertEquals(\"wf0/proc-Concatenate_two_strings0\", pInvoc0.get(\"id\").asText());\n        assertEquals(\"wf0\", pInvoc0.get(\"parent\").asText());\n\n        String inputString1 = pInvoc0.get(\"inputs\").get(\"string1\").asText();\n        assertTrue(inputString1.startsWith(\"/intermediates/\"));\n        assertEquals(\n                \"Hello, \",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(inputString1)));        \n        \n        String inputString2 = pInvoc0.get(\"inputs\").get(\"string2\").asText();\n        assertEquals(\"/inputs/name\", inputString2);\n        String output = pInvoc0.get(\"outputs\").get(\"output\").asText();\n        assertTrue(output.startsWith(\"/intermediates/\"));\n        assertEquals(\n                \"Hello, John Doe\",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(output)));        \n\n        // Activity reports\n        JsonNode act0 = proc0.get(\"activityReports\").get(0);\n        assertEquals(\"CANCELLED\", act0.get(\"state\").asText());\n        assertEquals(wfId + \"profile/taverna-2.4.0/activity/Concatenate_two_strings/\", \n                act0.get(\"subject\").asText());\n        \n        \n        // activity invocation\n        JsonNode aInvoc0 = act0.get(\"invocations\").get(0);\n\n        assertEquals(\"act-Concatenate_two_strings0\", aInvoc0.get(\"name\").asText());\n        assertEquals(\"wf0/proc-Concatenate_two_strings0/act-Concatenate_two_strings0\", aInvoc0.get(\"id\").asText());\n        assertEquals(\"wf0/proc-Concatenate_two_strings0\", aInvoc0.get(\"parent\").asText());\n\n        String actInputString1 = aInvoc0.get(\"inputs\").get(\"string1\").asText();\n        assertTrue(actInputString1.startsWith(\"/intermediates/\"));\n        assertEquals(\n                \"Hello, \",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(actInputString1)));        \n        \n        String actInputString2 = aInvoc0.get(\"inputs\").get(\"string2\").asText();\n        assertEquals(\"/inputs/name\", actInputString2);\n        String actOutput = pInvoc0.get(\"outputs\").get(\"output\").asText();\n        assertTrue(actOutput.startsWith(\"/intermediates/\"));\n        assertEquals(\n                \"Hello, John Doe\",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(actOutput)));        \n\n        \n        \n        \n        JsonNode proc1 = json.get(\"processorReports\").get(1);\n        assertEquals(wfId + \"workflow/Hello_Anyone/processor/hello/\",\n                proc1.get(\"subject\").asText());\n        assertEquals(\"COMPLETED\", proc1.get(\"state\").asText());\n        assertEquals(\"2013-02-01T00:00:00.000+0000\", proc1.get(\"createdDate\").asText());\n        assertEquals(\"2013-02-02T00:00:00.000+0000\", proc1.get(\"startedDate\").asText());\n        // etc.\n\n        JsonNode pInvoc1 = proc1.get(\"invocations\").get(0);\n\n        String value = pInvoc1.get(\"outputs\").get(\"value\").asText();\n        assertTrue(value.startsWith(\"/intermediates/\"));\n        assertEquals(\n                \"Hello, \",\n                DataBundles.getStringValue(wfReport.getDataBundle().getRoot()\n                        .resolve(value)));        \n        assertEquals(inputString1, value);\n    }", "signature": "void save()", "full_signature": "@Test public void save()", "class_method_signature": "WorkflowReportJSONTest.save()", "testcase": true, "constructor": false, "invocations": ["save", "resolve", "getRoot", "getDataBundle", "assertTrue", "exists", "newInputStream", "readTree", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "toString", "getGlobalBaseURI", "assertEquals", "asText", "get", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "asText", "get", "get", "assertEquals", "asText", "get", "get", "assertEquals", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "get", "assertEquals", "asText", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "get", "assertEquals", "asText", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "asText", "get", "get", "assertTrue", "startsWith", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "asText", "get", "get", "assertEquals", "asText", "get", "get", "assertTrue", "startsWith", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "asText", "get", "get", "assertTrue", "startsWith", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "asText", "get", "get", "assertEquals", "asText", "get", "get", "assertTrue", "startsWith", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "get", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "assertEquals", "asText", "get", "get", "get", "asText", "get", "get", "assertTrue", "startsWith", "assertEquals", "getStringValue", "resolve", "getRoot", "getDataBundle", "assertEquals"]}, "focal_class": {"identifier": "WorkflowReportJSON", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static URITools uriTools = new URITools();", "modifier": "private static", "type": "URITools", "declarator": "uriTools = new URITools()", "var_name": "uriTools"}, {"original_string": "private static final StdDateFormat STD_DATE_FORMAT = new StdDateFormat();", "modifier": "private static final", "type": "StdDateFormat", "declarator": "STD_DATE_FORMAT = new StdDateFormat()", "var_name": "STD_DATE_FORMAT"}], "methods": [{"identifier": "save", "parameters": "(WorkflowReport wfReport, Path path)", "modifiers": "public", "return": "void", "signature": "void save(WorkflowReport wfReport, Path path)", "full_signature": "public void save(WorkflowReport wfReport, Path path)", "class_method_signature": "WorkflowReportJSON.save(WorkflowReport wfReport, Path path)", "testcase": false, "constructor": false}, {"identifier": "makeObjectMapperForLoad", "parameters": "()", "modifiers": "protected static", "return": "ObjectMapper", "signature": "ObjectMapper makeObjectMapperForLoad()", "full_signature": "protected static ObjectMapper makeObjectMapperForLoad()", "class_method_signature": "WorkflowReportJSON.makeObjectMapperForLoad()", "testcase": false, "constructor": false}, {"identifier": "makeObjectMapperForSave", "parameters": "()", "modifiers": "protected static", "return": "ObjectMapper", "signature": "ObjectMapper makeObjectMapperForSave()", "full_signature": "protected static ObjectMapper makeObjectMapperForSave()", "class_method_signature": "WorkflowReportJSON.makeObjectMapperForSave()", "testcase": false, "constructor": false}, {"identifier": "injectContext", "parameters": "(ObjectNode objNode)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "void", "signature": "void injectContext(ObjectNode objNode)", "full_signature": "@SuppressWarnings(\"unused\") private void injectContext(ObjectNode objNode)", "class_method_signature": "WorkflowReportJSON.injectContext(ObjectNode objNode)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(WorkflowReport wfReport, Bundle dataBundle)", "modifiers": "public", "return": "void", "signature": "void save(WorkflowReport wfReport, Bundle dataBundle)", "full_signature": "public void save(WorkflowReport wfReport, Bundle dataBundle)", "class_method_signature": "WorkflowReportJSON.save(WorkflowReport wfReport, Bundle dataBundle)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Bundle bundle)", "modifiers": "public", "return": "WorkflowReport", "signature": "WorkflowReport load(Bundle bundle)", "full_signature": "public WorkflowReport load(Bundle bundle)", "class_method_signature": "WorkflowReportJSON.load(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "public", "return": "WorkflowReport", "signature": "WorkflowReport load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "public WorkflowReport load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseWorkflowReport", "parameters": "(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "WorkflowReport", "signature": "WorkflowReport parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected WorkflowReport parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseProcessorReport", "parameters": "(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "ProcessorReport", "signature": "ProcessorReport parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected ProcessorReport parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseActivityReport", "parameters": "(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "ActivityReport", "signature": "ActivityReport parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected ActivityReport parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseInvocation", "parameters": "(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "modifiers": "protected", "return": "void", "signature": "void parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "full_signature": "protected void parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "class_method_signature": "WorkflowReportJSON.parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "testcase": false, "constructor": false}, {"identifier": "parseValues", "parameters": "(JsonNode json, Path basePath)", "modifiers": "protected", "return": "Map<String, Path>", "signature": "Map<String, Path> parseValues(JsonNode json, Path basePath)", "full_signature": "protected Map<String, Path> parseValues(JsonNode json, Path basePath)", "class_method_signature": "WorkflowReportJSON.parseValues(JsonNode json, Path basePath)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(final Iterator<T> iterator)", "modifiers": "private static", "return": "Iterable<T>", "signature": "Iterable<T> iterate(final Iterator<T> iterator)", "full_signature": "private static Iterable<T> iterate(final Iterator<T> iterator)", "class_method_signature": "WorkflowReportJSON.iterate(final Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "parseDates", "parameters": "(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "modifiers": "protected", "return": "void", "signature": "void parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "full_signature": "protected void parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "class_method_signature": "WorkflowReportJSON.parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(JsonNode json, String name)", "modifiers": "protected", "return": "Date", "signature": "Date getDate(JsonNode json, String name)", "full_signature": "protected Date getDate(JsonNode json, String name)", "class_method_signature": "WorkflowReportJSON.getDate(JsonNode json, String name)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "private", "return": "WorkflowBean", "signature": "WorkflowBean getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "private WorkflowBean getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "loadWorkflowReportJson", "parameters": "(Path path)", "modifiers": "protected", "return": "JsonNode", "signature": "JsonNode loadWorkflowReportJson(Path path)", "full_signature": "protected JsonNode loadWorkflowReportJson(Path path)", "class_method_signature": "WorkflowReportJSON.loadWorkflowReportJson(Path path)", "testcase": false, "constructor": false}], "file": "taverna-run-impl/src/main/java/org/apache/taverna/platform/run/impl/WorkflowReportJSON.java"}, "focal_method": {"identifier": "save", "parameters": "(WorkflowReport wfReport, Path path)", "modifiers": "public", "return": "void", "body": "public void save(WorkflowReport wfReport, Path path) throws IOException {\n\t\tObjectMapper om = makeObjectMapperForSave();\n\t\ttry (Writer w = newBufferedWriter(path, Charset.forName(\"UTF-8\"),\n\t\t\t\tWRITE, CREATE, TRUNCATE_EXISTING)) {\n\t\t\tom.writeValue(w, wfReport);\n\t\t}\n\t}", "signature": "void save(WorkflowReport wfReport, Path path)", "full_signature": "public void save(WorkflowReport wfReport, Path path)", "class_method_signature": "WorkflowReportJSON.save(WorkflowReport wfReport, Path path)", "testcase": false, "constructor": false, "invocations": ["makeObjectMapperForSave", "newBufferedWriter", "forName", "writeValue"]}, "repository": {"repo_id": 30956939, "url": "https://github.com/apache/incubator-taverna-engine", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 12, "size": 6590, "license": "licensed"}}