{"test_class": {"identifier": "ShardManagerTest", "superclass": "extends AbstractShardManagerTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShardManagerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShardManagerTest.class)", "var_name": "LOG"}, {"original_string": "private static final MemberName MEMBER_2 = MemberName.forName(\"member-2\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_2 = MemberName.forName(\"member-2\")", "var_name": "MEMBER_2"}, {"original_string": "private static final MemberName MEMBER_3 = MemberName.forName(\"member-3\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_3 = MemberName.forName(\"member-3\")", "var_name": "MEMBER_3"}, {"original_string": "private static EffectiveModelContext TEST_SCHEMA_CONTEXT;", "modifier": "private static", "type": "EffectiveModelContext", "declarator": "TEST_SCHEMA_CONTEXT", "var_name": "TEST_SCHEMA_CONTEXT"}, {"original_string": "private final String shardMgrID = ShardManagerIdentifier.builder().type(shardMrgIDSuffix).build().toString();", "modifier": "private final", "type": "String", "declarator": "shardMgrID = ShardManagerIdentifier.builder().type(shardMrgIDSuffix).build().toString()", "var_name": "shardMgrID"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManagerTest.java"}, "test_case": {"identifier": "testRoleChangeNotificationAndShardLeaderStateChangedReleaseReady", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoleChangeNotificationAndShardLeaderStateChangedReleaseReady() throws Exception {\n        TestShardManager shardManager = newTestShardManager();\n\n        String memberId = \"member-1-shard-default-\" + shardMrgIDSuffix;\n        shardManager.handleCommand(new RoleChangeNotification(\n                memberId, RaftState.Candidate.name(), RaftState.Leader.name()));\n        assertFalse(ready.isDone());\n\n        shardManager.handleCommand(new ShardLeaderStateChanged(memberId, memberId,\n                mock(DataTree.class), DataStoreVersions.CURRENT_VERSION));\n        assertTrue(ready.isDone());\n    }", "signature": "void testRoleChangeNotificationAndShardLeaderStateChangedReleaseReady()", "full_signature": "@Test public void testRoleChangeNotificationAndShardLeaderStateChangedReleaseReady()", "class_method_signature": "ShardManagerTest.testRoleChangeNotificationAndShardLeaderStateChangedReleaseReady()", "testcase": true, "constructor": false, "invocations": ["newTestShardManager", "handleCommand", "name", "name", "assertFalse", "isDone", "handleCommand", "mock", "assertTrue", "isDone"]}, "focal_class": {"identifier": "ShardManager", "superclass": "extends AbstractUntypedPersistentActorWithMetering", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShardManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShardManager.class)", "var_name": "LOG"}, {"original_string": "@VisibleForTesting\n    final Map<String, ShardInformation> localShards = new HashMap<>();", "modifier": "@VisibleForTesting\n    final", "type": "Map<String, ShardInformation>", "declarator": "localShards = new HashMap<>()", "var_name": "localShards"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final ClusterWrapper cluster;", "modifier": "private final", "type": "ClusterWrapper", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@VisibleForTesting\n    final String shardDispatcherPath;", "modifier": "@VisibleForTesting\n    final", "type": "String", "declarator": "shardDispatcherPath", "var_name": "shardDispatcherPath"}, {"original_string": "private final ShardManagerInfo shardManagerMBean;", "modifier": "private final", "type": "ShardManagerInfo", "declarator": "shardManagerMBean", "var_name": "shardManagerMBean"}, {"original_string": "private DatastoreContextFactory datastoreContextFactory;", "modifier": "private", "type": "DatastoreContextFactory", "declarator": "datastoreContextFactory", "var_name": "datastoreContextFactory"}, {"original_string": "private final SettableFuture<Void> readinessFuture;", "modifier": "private final", "type": "SettableFuture<Void>", "declarator": "readinessFuture", "var_name": "readinessFuture"}, {"original_string": "private final PrimaryShardInfoFutureCache primaryShardInfoCache;", "modifier": "private final", "type": "PrimaryShardInfoFutureCache", "declarator": "primaryShardInfoCache", "var_name": "primaryShardInfoCache"}, {"original_string": "@VisibleForTesting\n    final ShardPeerAddressResolver peerAddressResolver;", "modifier": "@VisibleForTesting\n    final", "type": "ShardPeerAddressResolver", "declarator": "peerAddressResolver", "var_name": "peerAddressResolver"}, {"original_string": "private EffectiveModelContext schemaContext;", "modifier": "private", "type": "EffectiveModelContext", "declarator": "schemaContext", "var_name": "schemaContext"}, {"original_string": "private DatastoreSnapshot restoreFromSnapshot;", "modifier": "private", "type": "DatastoreSnapshot", "declarator": "restoreFromSnapshot", "var_name": "restoreFromSnapshot"}, {"original_string": "private ShardManagerSnapshot currentSnapshot;", "modifier": "private", "type": "ShardManagerSnapshot", "declarator": "currentSnapshot", "var_name": "currentSnapshot"}, {"original_string": "private final Set<String> shardReplicaOperationsInProgress = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "shardReplicaOperationsInProgress = new HashSet<>()", "var_name": "shardReplicaOperationsInProgress"}, {"original_string": "private final Map<String, CompositeOnComplete<Boolean>> shardActorsStopping = new HashMap<>();", "modifier": "private final", "type": "Map<String, CompositeOnComplete<Boolean>>", "declarator": "shardActorsStopping = new HashMap<>()", "var_name": "shardActorsStopping"}, {"original_string": "private final Set<Consumer<String>> shardAvailabilityCallbacks = new HashSet<>();", "modifier": "private final", "type": "Set<Consumer<String>>", "declarator": "shardAvailabilityCallbacks = new HashSet<>()", "var_name": "shardAvailabilityCallbacks"}, {"original_string": "private final String persistenceId;", "modifier": "private final", "type": "String", "declarator": "persistenceId", "var_name": "persistenceId"}, {"original_string": "private final AbstractDataStore dataStore;", "modifier": "private final", "type": "AbstractDataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private PrefixedShardConfigUpdateHandler configUpdateHandler;", "modifier": "private", "type": "PrefixedShardConfigUpdateHandler", "declarator": "configUpdateHandler", "var_name": "configUpdateHandler"}], "methods": [{"identifier": "ShardManager", "parameters": "(final AbstractShardManagerCreator<?> builder)", "modifiers": "", "return": "", "signature": " ShardManager(final AbstractShardManagerCreator<?> builder)", "full_signature": "  ShardManager(final AbstractShardManagerCreator<?> builder)", "class_method_signature": "ShardManager.ShardManager(final AbstractShardManagerCreator<?> builder)", "testcase": false, "constructor": true}, {"identifier": "preStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preStart()", "full_signature": "@Override public void preStart()", "class_method_signature": "ShardManager.preStart()", "testcase": false, "constructor": false}, {"identifier": "postStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postStop()", "full_signature": "@Override public void postStop()", "class_method_signature": "ShardManager.postStop()", "testcase": false, "constructor": false}, {"identifier": "handleCommand", "parameters": "(final Object message)", "modifiers": "@Override public", "return": "void", "signature": "void handleCommand(final Object message)", "full_signature": "@Override public void handleCommand(final Object message)", "class_method_signature": "ShardManager.handleCommand(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onRegisterForShardAvailabilityChanges", "parameters": "(final RegisterForShardAvailabilityChanges message)", "modifiers": "private", "return": "void", "signature": "void onRegisterForShardAvailabilityChanges(final RegisterForShardAvailabilityChanges message)", "full_signature": "private void onRegisterForShardAvailabilityChanges(final RegisterForShardAvailabilityChanges message)", "class_method_signature": "ShardManager.onRegisterForShardAvailabilityChanges(final RegisterForShardAvailabilityChanges message)", "testcase": false, "constructor": false}, {"identifier": "onGetShardRole", "parameters": "(final GetShardRole message)", "modifiers": "private", "return": "void", "signature": "void onGetShardRole(final GetShardRole message)", "full_signature": "private void onGetShardRole(final GetShardRole message)", "class_method_signature": "ShardManager.onGetShardRole(final GetShardRole message)", "testcase": false, "constructor": false}, {"identifier": "onInitConfigListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onInitConfigListener()", "full_signature": "private void onInitConfigListener()", "class_method_signature": "ShardManager.onInitConfigListener()", "testcase": false, "constructor": false}, {"identifier": "onShutDown", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onShutDown()", "full_signature": " void onShutDown()", "class_method_signature": "ShardManager.onShutDown()", "testcase": false, "constructor": false}, {"identifier": "onWrappedShardResponse", "parameters": "(final WrappedShardResponse message)", "modifiers": "private", "return": "void", "signature": "void onWrappedShardResponse(final WrappedShardResponse message)", "full_signature": "private void onWrappedShardResponse(final WrappedShardResponse message)", "class_method_signature": "ShardManager.onWrappedShardResponse(final WrappedShardResponse message)", "testcase": false, "constructor": false}, {"identifier": "onRemoveServerReply", "parameters": "(final ActorRef originalSender, final ShardIdentifier shardId,\n            final RemoveServerReply replyMsg, final String leaderPath)", "modifiers": "private", "return": "void", "signature": "void onRemoveServerReply(final ActorRef originalSender, final ShardIdentifier shardId,\n            final RemoveServerReply replyMsg, final String leaderPath)", "full_signature": "private void onRemoveServerReply(final ActorRef originalSender, final ShardIdentifier shardId,\n            final RemoveServerReply replyMsg, final String leaderPath)", "class_method_signature": "ShardManager.onRemoveServerReply(final ActorRef originalSender, final ShardIdentifier shardId,\n            final RemoveServerReply replyMsg, final String leaderPath)", "testcase": false, "constructor": false}, {"identifier": "removePrefixShardReplica", "parameters": "(final RemovePrefixShardReplica contextMessage, final String shardName,\n                                          final String primaryPath, final ActorRef sender)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void removePrefixShardReplica(final RemovePrefixShardReplica contextMessage, final String shardName,\n                                          final String primaryPath, final ActorRef sender)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void removePrefixShardReplica(final RemovePrefixShardReplica contextMessage, final String shardName,\n                                          final String primaryPath, final ActorRef sender)", "class_method_signature": "ShardManager.removePrefixShardReplica(final RemovePrefixShardReplica contextMessage, final String shardName,\n                                          final String primaryPath, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "removeShardReplica", "parameters": "(final RemoveShardReplica contextMessage, final String shardName,\n            final String primaryPath, final ActorRef sender)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void removeShardReplica(final RemoveShardReplica contextMessage, final String shardName,\n            final String primaryPath, final ActorRef sender)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void removeShardReplica(final RemoveShardReplica contextMessage, final String shardName,\n            final String primaryPath, final ActorRef sender)", "class_method_signature": "ShardManager.removeShardReplica(final RemoveShardReplica contextMessage, final String shardName,\n            final String primaryPath, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onShardReplicaRemoved", "parameters": "(final ServerRemoved message)", "modifiers": "private", "return": "void", "signature": "void onShardReplicaRemoved(final ServerRemoved message)", "full_signature": "private void onShardReplicaRemoved(final ServerRemoved message)", "class_method_signature": "ShardManager.onShardReplicaRemoved(final ServerRemoved message)", "testcase": false, "constructor": false}, {"identifier": "removeShard", "parameters": "(final ShardIdentifier shardId)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void removeShard(final ShardIdentifier shardId)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void removeShard(final ShardIdentifier shardId)", "class_method_signature": "ShardManager.removeShard(final ShardIdentifier shardId)", "testcase": false, "constructor": false}, {"identifier": "onGetSnapshot", "parameters": "(final GetSnapshot getSnapshot)", "modifiers": "private", "return": "void", "signature": "void onGetSnapshot(final GetSnapshot getSnapshot)", "full_signature": "private void onGetSnapshot(final GetSnapshot getSnapshot)", "class_method_signature": "ShardManager.onGetSnapshot(final GetSnapshot getSnapshot)", "testcase": false, "constructor": false}, {"identifier": "onCreateShard", "parameters": "(final CreateShard createShard)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void onCreateShard(final CreateShard createShard)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void onCreateShard(final CreateShard createShard)", "class_method_signature": "ShardManager.onCreateShard(final CreateShard createShard)", "testcase": false, "constructor": false}, {"identifier": "onPrefixShardCreated", "parameters": "(final PrefixShardCreated message)", "modifiers": "private", "return": "void", "signature": "void onPrefixShardCreated(final PrefixShardCreated message)", "full_signature": "private void onPrefixShardCreated(final PrefixShardCreated message)", "class_method_signature": "ShardManager.onPrefixShardCreated(final PrefixShardCreated message)", "testcase": false, "constructor": false}, {"identifier": "isPreviousShardActorStopInProgress", "parameters": "(final String shardName, final Object messageToDefer)", "modifiers": "private", "return": "boolean", "signature": "boolean isPreviousShardActorStopInProgress(final String shardName, final Object messageToDefer)", "full_signature": "private boolean isPreviousShardActorStopInProgress(final String shardName, final Object messageToDefer)", "class_method_signature": "ShardManager.isPreviousShardActorStopInProgress(final String shardName, final Object messageToDefer)", "testcase": false, "constructor": false}, {"identifier": "doCreatePrefixShard", "parameters": "(final PrefixShardConfiguration config, final ShardIdentifier shardId,\n            final String shardName)", "modifiers": "private", "return": "void", "signature": "void doCreatePrefixShard(final PrefixShardConfiguration config, final ShardIdentifier shardId,\n            final String shardName)", "full_signature": "private void doCreatePrefixShard(final PrefixShardConfiguration config, final ShardIdentifier shardId,\n            final String shardName)", "class_method_signature": "ShardManager.doCreatePrefixShard(final PrefixShardConfiguration config, final ShardIdentifier shardId,\n            final String shardName)", "testcase": false, "constructor": false}, {"identifier": "onPrefixShardRemoved", "parameters": "(final PrefixShardRemoved message)", "modifiers": "private", "return": "void", "signature": "void onPrefixShardRemoved(final PrefixShardRemoved message)", "full_signature": "private void onPrefixShardRemoved(final PrefixShardRemoved message)", "class_method_signature": "ShardManager.onPrefixShardRemoved(final PrefixShardRemoved message)", "testcase": false, "constructor": false}, {"identifier": "doCreateShard", "parameters": "(final CreateShard createShard)", "modifiers": "private", "return": "void", "signature": "void doCreateShard(final CreateShard createShard)", "full_signature": "private void doCreateShard(final CreateShard createShard)", "class_method_signature": "ShardManager.doCreateShard(final CreateShard createShard)", "testcase": false, "constructor": false}, {"identifier": "newShardDatastoreContextBuilder", "parameters": "(final String shardName)", "modifiers": "private", "return": "DatastoreContext.Builder", "signature": "DatastoreContext.Builder newShardDatastoreContextBuilder(final String shardName)", "full_signature": "private DatastoreContext.Builder newShardDatastoreContextBuilder(final String shardName)", "class_method_signature": "ShardManager.newShardDatastoreContextBuilder(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "newShardDatastoreContext", "parameters": "(final String shardName)", "modifiers": "private", "return": "DatastoreContext", "signature": "DatastoreContext newShardDatastoreContext(final String shardName)", "full_signature": "private DatastoreContext newShardDatastoreContext(final String shardName)", "class_method_signature": "ShardManager.newShardDatastoreContext(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "checkReady", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkReady()", "full_signature": "private void checkReady()", "class_method_signature": "ShardManager.checkReady()", "testcase": false, "constructor": false}, {"identifier": "onLeaderStateChanged", "parameters": "(final ShardLeaderStateChanged leaderStateChanged)", "modifiers": "private", "return": "void", "signature": "void onLeaderStateChanged(final ShardLeaderStateChanged leaderStateChanged)", "full_signature": "private void onLeaderStateChanged(final ShardLeaderStateChanged leaderStateChanged)", "class_method_signature": "ShardManager.onLeaderStateChanged(final ShardLeaderStateChanged leaderStateChanged)", "testcase": false, "constructor": false}, {"identifier": "notifyShardAvailabilityCallbacks", "parameters": "(final ShardInformation shardInformation)", "modifiers": "private", "return": "void", "signature": "void notifyShardAvailabilityCallbacks(final ShardInformation shardInformation)", "full_signature": "private void notifyShardAvailabilityCallbacks(final ShardInformation shardInformation)", "class_method_signature": "ShardManager.notifyShardAvailabilityCallbacks(final ShardInformation shardInformation)", "testcase": false, "constructor": false}, {"identifier": "onShardNotInitializedTimeout", "parameters": "(final ShardNotInitializedTimeout message)", "modifiers": "private", "return": "void", "signature": "void onShardNotInitializedTimeout(final ShardNotInitializedTimeout message)", "full_signature": "private void onShardNotInitializedTimeout(final ShardNotInitializedTimeout message)", "class_method_signature": "ShardManager.onShardNotInitializedTimeout(final ShardNotInitializedTimeout message)", "testcase": false, "constructor": false}, {"identifier": "onFollowerInitialSyncStatus", "parameters": "(final FollowerInitialSyncUpStatus status)", "modifiers": "private", "return": "void", "signature": "void onFollowerInitialSyncStatus(final FollowerInitialSyncUpStatus status)", "full_signature": "private void onFollowerInitialSyncStatus(final FollowerInitialSyncUpStatus status)", "class_method_signature": "ShardManager.onFollowerInitialSyncStatus(final FollowerInitialSyncUpStatus status)", "testcase": false, "constructor": false}, {"identifier": "onRoleChangeNotification", "parameters": "(final RoleChangeNotification roleChanged)", "modifiers": "private", "return": "void", "signature": "void onRoleChangeNotification(final RoleChangeNotification roleChanged)", "full_signature": "private void onRoleChangeNotification(final RoleChangeNotification roleChanged)", "class_method_signature": "ShardManager.onRoleChangeNotification(final RoleChangeNotification roleChanged)", "testcase": false, "constructor": false}, {"identifier": "findShardInformation", "parameters": "(final String memberId)", "modifiers": "private", "return": "ShardInformation", "signature": "ShardInformation findShardInformation(final String memberId)", "full_signature": "private ShardInformation findShardInformation(final String memberId)", "class_method_signature": "ShardManager.findShardInformation(final String memberId)", "testcase": false, "constructor": false}, {"identifier": "isReadyWithLeaderId", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isReadyWithLeaderId()", "full_signature": "private boolean isReadyWithLeaderId()", "class_method_signature": "ShardManager.isReadyWithLeaderId()", "testcase": false, "constructor": false}, {"identifier": "isInSync", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isInSync()", "full_signature": "private boolean isInSync()", "class_method_signature": "ShardManager.isInSync()", "testcase": false, "constructor": false}, {"identifier": "onActorInitialized", "parameters": "(final Object message)", "modifiers": "private", "return": "void", "signature": "void onActorInitialized(final Object message)", "full_signature": "private void onActorInitialized(final Object message)", "class_method_signature": "ShardManager.onActorInitialized(final Object message)", "testcase": false, "constructor": false}, {"identifier": "markShardAsInitialized", "parameters": "(final String shardName)", "modifiers": "private", "return": "void", "signature": "void markShardAsInitialized(final String shardName)", "full_signature": "private void markShardAsInitialized(final String shardName)", "class_method_signature": "ShardManager.markShardAsInitialized(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "handleRecover", "parameters": "(final Object message)", "modifiers": "@Override protected", "return": "void", "signature": "void handleRecover(final Object message)", "full_signature": "@Override protected void handleRecover(final Object message)", "class_method_signature": "ShardManager.handleRecover(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onRecoveryCompleted", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void onRecoveryCompleted()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void onRecoveryCompleted()", "class_method_signature": "ShardManager.onRecoveryCompleted()", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(final ShardInformation shardInformation, final boolean doWait,\n            final boolean wantShardReady, final Supplier<Object> messageSupplier)", "modifiers": "private", "return": "void", "signature": "void sendResponse(final ShardInformation shardInformation, final boolean doWait,\n            final boolean wantShardReady, final Supplier<Object> messageSupplier)", "full_signature": "private void sendResponse(final ShardInformation shardInformation, final boolean doWait,\n            final boolean wantShardReady, final Supplier<Object> messageSupplier)", "class_method_signature": "ShardManager.sendResponse(final ShardInformation shardInformation, final boolean doWait,\n            final boolean wantShardReady, final Supplier<Object> messageSupplier)", "testcase": false, "constructor": false}, {"identifier": "createNotInitializedException", "parameters": "(final ShardIdentifier shardId)", "modifiers": "private static", "return": "NotInitializedException", "signature": "NotInitializedException createNotInitializedException(final ShardIdentifier shardId)", "full_signature": "private static NotInitializedException createNotInitializedException(final ShardIdentifier shardId)", "class_method_signature": "ShardManager.createNotInitializedException(final ShardIdentifier shardId)", "testcase": false, "constructor": false}, {"identifier": "memberToName", "parameters": "(final Member member)", "modifiers": "@VisibleForTesting static", "return": "MemberName", "signature": "MemberName memberToName(final Member member)", "full_signature": "@VisibleForTesting static MemberName memberToName(final Member member)", "class_method_signature": "ShardManager.memberToName(final Member member)", "testcase": false, "constructor": false}, {"identifier": "memberRemoved", "parameters": "(final ClusterEvent.MemberRemoved message)", "modifiers": "private", "return": "void", "signature": "void memberRemoved(final ClusterEvent.MemberRemoved message)", "full_signature": "private void memberRemoved(final ClusterEvent.MemberRemoved message)", "class_method_signature": "ShardManager.memberRemoved(final ClusterEvent.MemberRemoved message)", "testcase": false, "constructor": false}, {"identifier": "memberExited", "parameters": "(final ClusterEvent.MemberExited message)", "modifiers": "private", "return": "void", "signature": "void memberExited(final ClusterEvent.MemberExited message)", "full_signature": "private void memberExited(final ClusterEvent.MemberExited message)", "class_method_signature": "ShardManager.memberExited(final ClusterEvent.MemberExited message)", "testcase": false, "constructor": false}, {"identifier": "memberUp", "parameters": "(final ClusterEvent.MemberUp message)", "modifiers": "private", "return": "void", "signature": "void memberUp(final ClusterEvent.MemberUp message)", "full_signature": "private void memberUp(final ClusterEvent.MemberUp message)", "class_method_signature": "ShardManager.memberUp(final ClusterEvent.MemberUp message)", "testcase": false, "constructor": false}, {"identifier": "memberUp", "parameters": "(final MemberName memberName, final Address address)", "modifiers": "private", "return": "void", "signature": "void memberUp(final MemberName memberName, final Address address)", "full_signature": "private void memberUp(final MemberName memberName, final Address address)", "class_method_signature": "ShardManager.memberUp(final MemberName memberName, final Address address)", "testcase": false, "constructor": false}, {"identifier": "memberWeaklyUp", "parameters": "(final MemberWeaklyUp message)", "modifiers": "private", "return": "void", "signature": "void memberWeaklyUp(final MemberWeaklyUp message)", "full_signature": "private void memberWeaklyUp(final MemberWeaklyUp message)", "class_method_signature": "ShardManager.memberWeaklyUp(final MemberWeaklyUp message)", "testcase": false, "constructor": false}, {"identifier": "addPeerAddress", "parameters": "(final MemberName memberName, final Address address)", "modifiers": "private", "return": "void", "signature": "void addPeerAddress(final MemberName memberName, final Address address)", "full_signature": "private void addPeerAddress(final MemberName memberName, final Address address)", "class_method_signature": "ShardManager.addPeerAddress(final MemberName memberName, final Address address)", "testcase": false, "constructor": false}, {"identifier": "memberReachable", "parameters": "(final ClusterEvent.ReachableMember message)", "modifiers": "private", "return": "void", "signature": "void memberReachable(final ClusterEvent.ReachableMember message)", "full_signature": "private void memberReachable(final ClusterEvent.ReachableMember message)", "class_method_signature": "ShardManager.memberReachable(final ClusterEvent.ReachableMember message)", "testcase": false, "constructor": false}, {"identifier": "memberUnreachable", "parameters": "(final ClusterEvent.UnreachableMember message)", "modifiers": "private", "return": "void", "signature": "void memberUnreachable(final ClusterEvent.UnreachableMember message)", "full_signature": "private void memberUnreachable(final ClusterEvent.UnreachableMember message)", "class_method_signature": "ShardManager.memberUnreachable(final ClusterEvent.UnreachableMember message)", "testcase": false, "constructor": false}, {"identifier": "markMemberUnavailable", "parameters": "(final MemberName memberName)", "modifiers": "private", "return": "void", "signature": "void markMemberUnavailable(final MemberName memberName)", "full_signature": "private void markMemberUnavailable(final MemberName memberName)", "class_method_signature": "ShardManager.markMemberUnavailable(final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "markMemberAvailable", "parameters": "(final MemberName memberName)", "modifiers": "private", "return": "void", "signature": "void markMemberAvailable(final MemberName memberName)", "full_signature": "private void markMemberAvailable(final MemberName memberName)", "class_method_signature": "ShardManager.markMemberAvailable(final MemberName memberName)", "testcase": false, "constructor": false}, {"identifier": "onDatastoreContextFactory", "parameters": "(final DatastoreContextFactory factory)", "modifiers": "private", "return": "void", "signature": "void onDatastoreContextFactory(final DatastoreContextFactory factory)", "full_signature": "private void onDatastoreContextFactory(final DatastoreContextFactory factory)", "class_method_signature": "ShardManager.onDatastoreContextFactory(final DatastoreContextFactory factory)", "testcase": false, "constructor": false}, {"identifier": "onGetLocalShardIds", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onGetLocalShardIds()", "full_signature": "private void onGetLocalShardIds()", "class_method_signature": "ShardManager.onGetLocalShardIds()", "testcase": false, "constructor": false}, {"identifier": "onSwitchShardBehavior", "parameters": "(final SwitchShardBehavior message)", "modifiers": "private", "return": "void", "signature": "void onSwitchShardBehavior(final SwitchShardBehavior message)", "full_signature": "private void onSwitchShardBehavior(final SwitchShardBehavior message)", "class_method_signature": "ShardManager.onSwitchShardBehavior(final SwitchShardBehavior message)", "testcase": false, "constructor": false}, {"identifier": "switchShardBehavior", "parameters": "(final ShardInformation info, final SwitchBehavior switchBehavior)", "modifiers": "private", "return": "void", "signature": "void switchShardBehavior(final ShardInformation info, final SwitchBehavior switchBehavior)", "full_signature": "private void switchShardBehavior(final ShardInformation info, final SwitchBehavior switchBehavior)", "class_method_signature": "ShardManager.switchShardBehavior(final ShardInformation info, final SwitchBehavior switchBehavior)", "testcase": false, "constructor": false}, {"identifier": "updateSchemaContext", "parameters": "(final Object message)", "modifiers": "private", "return": "void", "signature": "void updateSchemaContext(final Object message)", "full_signature": "private void updateSchemaContext(final Object message)", "class_method_signature": "ShardManager.updateSchemaContext(final Object message)", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "ClusterWrapper", "signature": "ClusterWrapper getCluster()", "full_signature": "@VisibleForTesting protected ClusterWrapper getCluster()", "class_method_signature": "ShardManager.getCluster()", "testcase": false, "constructor": false}, {"identifier": "newShardActor", "parameters": "(final ShardInformation info)", "modifiers": "@VisibleForTesting protected", "return": "ActorRef", "signature": "ActorRef newShardActor(final ShardInformation info)", "full_signature": "@VisibleForTesting protected ActorRef newShardActor(final ShardInformation info)", "class_method_signature": "ShardManager.newShardActor(final ShardInformation info)", "testcase": false, "constructor": false}, {"identifier": "findPrimary", "parameters": "(final FindPrimary message)", "modifiers": "private", "return": "void", "signature": "void findPrimary(final FindPrimary message)", "full_signature": "private void findPrimary(final FindPrimary message)", "class_method_signature": "ShardManager.findPrimary(final FindPrimary message)", "testcase": false, "constructor": false}, {"identifier": "findPrimary", "parameters": "(final String shardName, final FindPrimaryResponseHandler handler)", "modifiers": "private", "return": "void", "signature": "void findPrimary(final String shardName, final FindPrimaryResponseHandler handler)", "full_signature": "private void findPrimary(final String shardName, final FindPrimaryResponseHandler handler)", "class_method_signature": "ShardManager.findPrimary(final String shardName, final FindPrimaryResponseHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getShardIdentifier", "parameters": "(final MemberName memberName, final String shardName)", "modifiers": "private", "return": "ShardIdentifier", "signature": "ShardIdentifier getShardIdentifier(final MemberName memberName, final String shardName)", "full_signature": "private ShardIdentifier getShardIdentifier(final MemberName memberName, final String shardName)", "class_method_signature": "ShardManager.getShardIdentifier(final MemberName memberName, final String shardName)", "testcase": false, "constructor": false}, {"identifier": "createLocalShards", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createLocalShards()", "full_signature": "private void createLocalShards()", "class_method_signature": "ShardManager.createLocalShards()", "testcase": false, "constructor": false}, {"identifier": "createShardInfoFor", "parameters": "(final String shardName, final ShardIdentifier shardId,\n                                        final Map<String, String> peerAddresses,\n                                        final DatastoreContext datastoreContext,\n                                        final Map<String, DatastoreSnapshot.ShardSnapshot> shardSnapshots)", "modifiers": "@VisibleForTesting", "return": "ShardInformation", "signature": "ShardInformation createShardInfoFor(final String shardName, final ShardIdentifier shardId,\n                                        final Map<String, String> peerAddresses,\n                                        final DatastoreContext datastoreContext,\n                                        final Map<String, DatastoreSnapshot.ShardSnapshot> shardSnapshots)", "full_signature": "@VisibleForTesting ShardInformation createShardInfoFor(final String shardName, final ShardIdentifier shardId,\n                                        final Map<String, String> peerAddresses,\n                                        final DatastoreContext datastoreContext,\n                                        final Map<String, DatastoreSnapshot.ShardSnapshot> shardSnapshots)", "class_method_signature": "ShardManager.createShardInfoFor(final String shardName, final ShardIdentifier shardId,\n                                        final Map<String, String> peerAddresses,\n                                        final DatastoreContext datastoreContext,\n                                        final Map<String, DatastoreSnapshot.ShardSnapshot> shardSnapshots)", "testcase": false, "constructor": false}, {"identifier": "getPeerAddresses", "parameters": "(final String shardName)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> getPeerAddresses(final String shardName)", "full_signature": " Map<String, String> getPeerAddresses(final String shardName)", "class_method_signature": "ShardManager.getPeerAddresses(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "getPeerAddresses", "parameters": "(final String shardName, final Collection<MemberName> members)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getPeerAddresses(final String shardName, final Collection<MemberName> members)", "full_signature": "private Map<String, String> getPeerAddresses(final String shardName, final Collection<MemberName> members)", "class_method_signature": "ShardManager.getPeerAddresses(final String shardName, final Collection<MemberName> members)", "testcase": false, "constructor": false}, {"identifier": "supervisorStrategy", "parameters": "()", "modifiers": "@Override public", "return": "SupervisorStrategy", "signature": "SupervisorStrategy supervisorStrategy()", "full_signature": "@Override public SupervisorStrategy supervisorStrategy()", "class_method_signature": "ShardManager.supervisorStrategy()", "testcase": false, "constructor": false}, {"identifier": "persistenceId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String persistenceId()", "full_signature": "@Override public String persistenceId()", "class_method_signature": "ShardManager.persistenceId()", "testcase": false, "constructor": false}, {"identifier": "getMBean", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ShardManagerInfoMBean", "signature": "ShardManagerInfoMBean getMBean()", "full_signature": "@VisibleForTesting ShardManagerInfoMBean getMBean()", "class_method_signature": "ShardManager.getMBean()", "testcase": false, "constructor": false}, {"identifier": "isShardReplicaOperationInProgress", "parameters": "(final String shardName, final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean isShardReplicaOperationInProgress(final String shardName, final ActorRef sender)", "full_signature": "private boolean isShardReplicaOperationInProgress(final String shardName, final ActorRef sender)", "class_method_signature": "ShardManager.isShardReplicaOperationInProgress(final String shardName, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onAddPrefixShardReplica", "parameters": "(final AddPrefixShardReplica message)", "modifiers": "private", "return": "void", "signature": "void onAddPrefixShardReplica(final AddPrefixShardReplica message)", "full_signature": "private void onAddPrefixShardReplica(final AddPrefixShardReplica message)", "class_method_signature": "ShardManager.onAddPrefixShardReplica(final AddPrefixShardReplica message)", "testcase": false, "constructor": false}, {"identifier": "onAddShardReplica", "parameters": "(final AddShardReplica shardReplicaMsg)", "modifiers": "private", "return": "void", "signature": "void onAddShardReplica(final AddShardReplica shardReplicaMsg)", "full_signature": "private void onAddShardReplica(final AddShardReplica shardReplicaMsg)", "class_method_signature": "ShardManager.onAddShardReplica(final AddShardReplica shardReplicaMsg)", "testcase": false, "constructor": false}, {"identifier": "sendLocalReplicaAlreadyExistsReply", "parameters": "(final String shardName, final ActorRef sender)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void sendLocalReplicaAlreadyExistsReply(final String shardName, final ActorRef sender)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void sendLocalReplicaAlreadyExistsReply(final String shardName, final ActorRef sender)", "class_method_signature": "ShardManager.sendLocalReplicaAlreadyExistsReply(final String shardName, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "addPrefixShard", "parameters": "(final String shardName, final YangInstanceIdentifier shardPrefix,\n                                final RemotePrimaryShardFound response, final ActorRef sender)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void addPrefixShard(final String shardName, final YangInstanceIdentifier shardPrefix,\n                                final RemotePrimaryShardFound response, final ActorRef sender)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void addPrefixShard(final String shardName, final YangInstanceIdentifier shardPrefix,\n                                final RemotePrimaryShardFound response, final ActorRef sender)", "class_method_signature": "ShardManager.addPrefixShard(final String shardName, final YangInstanceIdentifier shardPrefix,\n                                final RemotePrimaryShardFound response, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "addShard", "parameters": "(final String shardName, final RemotePrimaryShardFound response, final ActorRef sender)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void addShard(final String shardName, final RemotePrimaryShardFound response, final ActorRef sender)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void addShard(final String shardName, final RemotePrimaryShardFound response, final ActorRef sender)", "class_method_signature": "ShardManager.addShard(final String shardName, final RemotePrimaryShardFound response, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "execAddShard", "parameters": "(final String shardName,\n                              final ShardInformation shardInfo,\n                              final RemotePrimaryShardFound response,\n                              final boolean removeShardOnFailure,\n                              final ActorRef sender)", "modifiers": "private", "return": "void", "signature": "void execAddShard(final String shardName,\n                              final ShardInformation shardInfo,\n                              final RemotePrimaryShardFound response,\n                              final boolean removeShardOnFailure,\n                              final ActorRef sender)", "full_signature": "private void execAddShard(final String shardName,\n                              final ShardInformation shardInfo,\n                              final RemotePrimaryShardFound response,\n                              final boolean removeShardOnFailure,\n                              final ActorRef sender)", "class_method_signature": "ShardManager.execAddShard(final String shardName,\n                              final ShardInformation shardInfo,\n                              final RemotePrimaryShardFound response,\n                              final boolean removeShardOnFailure,\n                              final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onAddServerFailure", "parameters": "(final String shardName, final String message, final Throwable failure,\n            final ActorRef sender, final boolean removeShardOnFailure)", "modifiers": "private", "return": "void", "signature": "void onAddServerFailure(final String shardName, final String message, final Throwable failure,\n            final ActorRef sender, final boolean removeShardOnFailure)", "full_signature": "private void onAddServerFailure(final String shardName, final String message, final Throwable failure,\n            final ActorRef sender, final boolean removeShardOnFailure)", "class_method_signature": "ShardManager.onAddServerFailure(final String shardName, final String message, final Throwable failure,\n            final ActorRef sender, final boolean removeShardOnFailure)", "testcase": false, "constructor": false}, {"identifier": "onAddServerReply", "parameters": "(final ShardInformation shardInfo, final AddServerReply replyMsg,\n            final ActorRef sender, final String leaderPath, final boolean removeShardOnFailure)", "modifiers": "private", "return": "void", "signature": "void onAddServerReply(final ShardInformation shardInfo, final AddServerReply replyMsg,\n            final ActorRef sender, final String leaderPath, final boolean removeShardOnFailure)", "full_signature": "private void onAddServerReply(final ShardInformation shardInfo, final AddServerReply replyMsg,\n            final ActorRef sender, final String leaderPath, final boolean removeShardOnFailure)", "class_method_signature": "ShardManager.onAddServerReply(final ShardInformation shardInfo, final AddServerReply replyMsg,\n            final ActorRef sender, final String leaderPath, final boolean removeShardOnFailure)", "testcase": false, "constructor": false}, {"identifier": "getServerChangeException", "parameters": "(final Class<?> serverChange,\n            final ServerChangeStatus serverChangeStatus, final String leaderPath, final ShardIdentifier shardId)", "modifiers": "private static", "return": "Exception", "signature": "Exception getServerChangeException(final Class<?> serverChange,\n            final ServerChangeStatus serverChangeStatus, final String leaderPath, final ShardIdentifier shardId)", "full_signature": "private static Exception getServerChangeException(final Class<?> serverChange,\n            final ServerChangeStatus serverChangeStatus, final String leaderPath, final ShardIdentifier shardId)", "class_method_signature": "ShardManager.getServerChangeException(final Class<?> serverChange,\n            final ServerChangeStatus serverChangeStatus, final String leaderPath, final ShardIdentifier shardId)", "testcase": false, "constructor": false}, {"identifier": "onRemoveShardReplica", "parameters": "(final RemoveShardReplica shardReplicaMsg)", "modifiers": "private", "return": "void", "signature": "void onRemoveShardReplica(final RemoveShardReplica shardReplicaMsg)", "full_signature": "private void onRemoveShardReplica(final RemoveShardReplica shardReplicaMsg)", "class_method_signature": "ShardManager.onRemoveShardReplica(final RemoveShardReplica shardReplicaMsg)", "testcase": false, "constructor": false}, {"identifier": "onRemovePrefixShardReplica", "parameters": "(final RemovePrefixShardReplica message)", "modifiers": "private", "return": "void", "signature": "void onRemovePrefixShardReplica(final RemovePrefixShardReplica message)", "full_signature": "private void onRemovePrefixShardReplica(final RemovePrefixShardReplica message)", "class_method_signature": "ShardManager.onRemovePrefixShardReplica(final RemovePrefixShardReplica message)", "testcase": false, "constructor": false}, {"identifier": "persistShardList", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void persistShardList()", "full_signature": "private void persistShardList()", "class_method_signature": "ShardManager.persistShardList()", "testcase": false, "constructor": false}, {"identifier": "updateShardManagerSnapshot", "parameters": "(\n            final List<String> shardList,\n            final Map<DOMDataTreeIdentifier, PrefixShardConfiguration> allPrefixShardConfigurations)", "modifiers": "private", "return": "ShardManagerSnapshot", "signature": "ShardManagerSnapshot updateShardManagerSnapshot(\n            final List<String> shardList,\n            final Map<DOMDataTreeIdentifier, PrefixShardConfiguration> allPrefixShardConfigurations)", "full_signature": "private ShardManagerSnapshot updateShardManagerSnapshot(\n            final List<String> shardList,\n            final Map<DOMDataTreeIdentifier, PrefixShardConfiguration> allPrefixShardConfigurations)", "class_method_signature": "ShardManager.updateShardManagerSnapshot(\n            final List<String> shardList,\n            final Map<DOMDataTreeIdentifier, PrefixShardConfiguration> allPrefixShardConfigurations)", "testcase": false, "constructor": false}, {"identifier": "applyShardManagerSnapshot", "parameters": "(final ShardManagerSnapshot snapshot)", "modifiers": "private", "return": "void", "signature": "void applyShardManagerSnapshot(final ShardManagerSnapshot snapshot)", "full_signature": "private void applyShardManagerSnapshot(final ShardManagerSnapshot snapshot)", "class_method_signature": "ShardManager.applyShardManagerSnapshot(final ShardManagerSnapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "onSaveSnapshotSuccess", "parameters": "(final SaveSnapshotSuccess successMessage)", "modifiers": "private", "return": "void", "signature": "void onSaveSnapshotSuccess(final SaveSnapshotSuccess successMessage)", "full_signature": "private void onSaveSnapshotSuccess(final SaveSnapshotSuccess successMessage)", "class_method_signature": "ShardManager.onSaveSnapshotSuccess(final SaveSnapshotSuccess successMessage)", "testcase": false, "constructor": false}, {"identifier": "onChangeShardServersVotingStatus", "parameters": "(final ChangeShardMembersVotingStatus changeMembersVotingStatus)", "modifiers": "private", "return": "void", "signature": "void onChangeShardServersVotingStatus(final ChangeShardMembersVotingStatus changeMembersVotingStatus)", "full_signature": "private void onChangeShardServersVotingStatus(final ChangeShardMembersVotingStatus changeMembersVotingStatus)", "class_method_signature": "ShardManager.onChangeShardServersVotingStatus(final ChangeShardMembersVotingStatus changeMembersVotingStatus)", "testcase": false, "constructor": false}, {"identifier": "onFlipShardMembersVotingStatus", "parameters": "(final FlipShardMembersVotingStatus flipMembersVotingStatus)", "modifiers": "private", "return": "void", "signature": "void onFlipShardMembersVotingStatus(final FlipShardMembersVotingStatus flipMembersVotingStatus)", "full_signature": "private void onFlipShardMembersVotingStatus(final FlipShardMembersVotingStatus flipMembersVotingStatus)", "class_method_signature": "ShardManager.onFlipShardMembersVotingStatus(final FlipShardMembersVotingStatus flipMembersVotingStatus)", "testcase": false, "constructor": false}, {"identifier": "findLocalShard", "parameters": "(final FindLocalShard message)", "modifiers": "private", "return": "void", "signature": "void findLocalShard(final FindLocalShard message)", "full_signature": "private void findLocalShard(final FindLocalShard message)", "class_method_signature": "ShardManager.findLocalShard(final FindLocalShard message)", "testcase": false, "constructor": false}, {"identifier": "findLocalShard", "parameters": "(final String shardName, final ActorRef sender,\n            final Consumer<LocalShardFound> onLocalShardFound)", "modifiers": "private", "return": "void", "signature": "void findLocalShard(final String shardName, final ActorRef sender,\n            final Consumer<LocalShardFound> onLocalShardFound)", "full_signature": "private void findLocalShard(final String shardName, final ActorRef sender,\n            final Consumer<LocalShardFound> onLocalShardFound)", "class_method_signature": "ShardManager.findLocalShard(final String shardName, final ActorRef sender,\n            final Consumer<LocalShardFound> onLocalShardFound)", "testcase": false, "constructor": false}, {"identifier": "changeShardMembersVotingStatus", "parameters": "(final ChangeServersVotingStatus changeServersVotingStatus,\n            final String shardName, final ActorRef shardActorRef, final ActorRef sender)", "modifiers": "private", "return": "void", "signature": "void changeShardMembersVotingStatus(final ChangeServersVotingStatus changeServersVotingStatus,\n            final String shardName, final ActorRef shardActorRef, final ActorRef sender)", "full_signature": "private void changeShardMembersVotingStatus(final ChangeServersVotingStatus changeServersVotingStatus,\n            final String shardName, final ActorRef shardActorRef, final ActorRef sender)", "class_method_signature": "ShardManager.changeShardMembersVotingStatus(final ChangeServersVotingStatus changeServersVotingStatus,\n            final String shardName, final ActorRef shardActorRef, final ActorRef sender)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManager.java"}, "focal_method": {"identifier": "handleCommand", "parameters": "(final Object message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleCommand(final Object message) throws Exception {\n        if (message  instanceof FindPrimary) {\n            findPrimary((FindPrimary)message);\n        } else if (message instanceof FindLocalShard) {\n            findLocalShard((FindLocalShard) message);\n        } else if (message instanceof UpdateSchemaContext) {\n            updateSchemaContext(message);\n        } else if (message instanceof ActorInitialized) {\n            onActorInitialized(message);\n        } else if (message instanceof ClusterEvent.MemberUp) {\n            memberUp((ClusterEvent.MemberUp) message);\n        } else if (message instanceof ClusterEvent.MemberWeaklyUp) {\n            memberWeaklyUp((ClusterEvent.MemberWeaklyUp) message);\n        } else if (message instanceof ClusterEvent.MemberExited) {\n            memberExited((ClusterEvent.MemberExited) message);\n        } else if (message instanceof ClusterEvent.MemberRemoved) {\n            memberRemoved((ClusterEvent.MemberRemoved) message);\n        } else if (message instanceof ClusterEvent.UnreachableMember) {\n            memberUnreachable((ClusterEvent.UnreachableMember) message);\n        } else if (message instanceof ClusterEvent.ReachableMember) {\n            memberReachable((ClusterEvent.ReachableMember) message);\n        } else if (message instanceof DatastoreContextFactory) {\n            onDatastoreContextFactory((DatastoreContextFactory) message);\n        } else if (message instanceof RoleChangeNotification) {\n            onRoleChangeNotification((RoleChangeNotification) message);\n        } else if (message instanceof FollowerInitialSyncUpStatus) {\n            onFollowerInitialSyncStatus((FollowerInitialSyncUpStatus) message);\n        } else if (message instanceof ShardNotInitializedTimeout) {\n            onShardNotInitializedTimeout((ShardNotInitializedTimeout) message);\n        } else if (message instanceof ShardLeaderStateChanged) {\n            onLeaderStateChanged((ShardLeaderStateChanged) message);\n        } else if (message instanceof SwitchShardBehavior) {\n            onSwitchShardBehavior((SwitchShardBehavior) message);\n        } else if (message instanceof CreateShard) {\n            onCreateShard((CreateShard)message);\n        } else if (message instanceof AddShardReplica) {\n            onAddShardReplica((AddShardReplica) message);\n        } else if (message instanceof AddPrefixShardReplica) {\n            onAddPrefixShardReplica((AddPrefixShardReplica) message);\n        } else if (message instanceof PrefixShardCreated) {\n            onPrefixShardCreated((PrefixShardCreated) message);\n        } else if (message instanceof PrefixShardRemoved) {\n            onPrefixShardRemoved((PrefixShardRemoved) message);\n        } else if (message instanceof InitConfigListener) {\n            onInitConfigListener();\n        } else if (message instanceof ForwardedAddServerReply) {\n            ForwardedAddServerReply msg = (ForwardedAddServerReply)message;\n            onAddServerReply(msg.shardInfo, msg.addServerReply, getSender(), msg.leaderPath,\n                    msg.removeShardOnFailure);\n        } else if (message instanceof ForwardedAddServerFailure) {\n            ForwardedAddServerFailure msg = (ForwardedAddServerFailure)message;\n            onAddServerFailure(msg.shardName, msg.failureMessage, msg.failure, getSender(), msg.removeShardOnFailure);\n        } else if (message instanceof RemoveShardReplica) {\n            onRemoveShardReplica((RemoveShardReplica) message);\n        } else if (message instanceof RemovePrefixShardReplica) {\n            onRemovePrefixShardReplica((RemovePrefixShardReplica) message);\n        } else if (message instanceof WrappedShardResponse) {\n            onWrappedShardResponse((WrappedShardResponse) message);\n        } else if (message instanceof GetSnapshot) {\n            onGetSnapshot((GetSnapshot) message);\n        } else if (message instanceof ServerRemoved) {\n            onShardReplicaRemoved((ServerRemoved) message);\n        } else if (message instanceof ChangeShardMembersVotingStatus) {\n            onChangeShardServersVotingStatus((ChangeShardMembersVotingStatus) message);\n        } else if (message instanceof FlipShardMembersVotingStatus) {\n            onFlipShardMembersVotingStatus((FlipShardMembersVotingStatus) message);\n        } else if (message instanceof SaveSnapshotSuccess) {\n            onSaveSnapshotSuccess((SaveSnapshotSuccess) message);\n        } else if (message instanceof SaveSnapshotFailure) {\n            LOG.error(\"{}: SaveSnapshotFailure received for saving snapshot of shards\", persistenceId(),\n                    ((SaveSnapshotFailure) message).cause());\n        } else if (message instanceof Shutdown) {\n            onShutDown();\n        } else if (message instanceof GetLocalShardIds) {\n            onGetLocalShardIds();\n        } else if (message instanceof GetShardRole) {\n            onGetShardRole((GetShardRole) message);\n        } else if (message instanceof RunnableMessage) {\n            ((RunnableMessage)message).run();\n        } else if (message instanceof RegisterForShardAvailabilityChanges) {\n            onRegisterForShardAvailabilityChanges((RegisterForShardAvailabilityChanges)message);\n        } else if (message instanceof DeleteSnapshotsFailure) {\n            LOG.warn(\"{}: Failed to delete prior snapshots\", persistenceId(),\n                    ((DeleteSnapshotsFailure) message).cause());\n        } else if (message instanceof DeleteSnapshotsSuccess) {\n            LOG.debug(\"{}: Successfully deleted prior snapshots\", persistenceId());\n        } else if (message instanceof RegisterRoleChangeListenerReply) {\n            LOG.trace(\"{}: Received RegisterRoleChangeListenerReply\", persistenceId());\n        } else if (message instanceof ClusterEvent.MemberEvent) {\n            LOG.trace(\"{}: Received other ClusterEvent.MemberEvent: {}\", persistenceId(), message);\n        } else {\n            unknownMessage(message);\n        }\n    }", "signature": "void handleCommand(final Object message)", "full_signature": "@Override public void handleCommand(final Object message)", "class_method_signature": "ShardManager.handleCommand(final Object message)", "testcase": false, "constructor": false, "invocations": ["findPrimary", "findLocalShard", "updateSchemaContext", "onActorInitialized", "memberUp", "memberWeaklyUp", "memberExited", "memberRemoved", "memberUnreachable", "memberReachable", "onDatastoreContextFactory", "onRoleChangeNotification", "onFollowerInitialSyncStatus", "onShardNotInitializedTimeout", "onLeaderStateChanged", "onSwitchShardBehavior", "onCreateShard", "onAddShardReplica", "onAddPrefixShardReplica", "onPrefixShardCreated", "onPrefixShardRemoved", "onInitConfigListener", "onAddServerReply", "getSender", "onAddServerFailure", "getSender", "onRemoveShardReplica", "onRemovePrefixShardReplica", "onWrappedShardResponse", "onGetSnapshot", "onShardReplicaRemoved", "onChangeShardServersVotingStatus", "onFlipShardMembersVotingStatus", "onSaveSnapshotSuccess", "error", "persistenceId", "cause", "onShutDown", "onGetLocalShardIds", "onGetShardRole", "run", "onRegisterForShardAvailabilityChanges", "warn", "persistenceId", "cause", "debug", "persistenceId", "trace", "persistenceId", "trace", "persistenceId", "unknownMessage"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}