{"test_class": {"identifier": "UniqueIndexTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/unique/UniqueIndexTest.java"}, "test_case": {"identifier": "testUniqueIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUniqueIndex() {\n        IndexedCollection<Car> cars = new ConcurrentIndexedCollection<Car>();\n\n        // Add some indexes...\n        cars.addIndex(UniqueIndex.onAttribute(Car.CAR_ID));\n        cars.addIndex(HashIndex.onAttribute(Car.CAR_ID));\n\n        // Add some objects to the collection...\n        cars.add(new Car(1, \"ford focus\", \"great condition, low mileage\", Arrays.asList(\"spare tyre\", \"sunroof\")));\n        cars.add(new Car(2, \"ford taurus\", \"dirty and unreliable, flat tyre\", Arrays.asList(\"spare tyre\", \"radio\")));\n        cars.add(new Car(3, \"honda civic\", \"has a flat tyre and high mileage\", Arrays.asList(\"radio\")));\n\n        Query<Car> query = equal(Car.CAR_ID, 2);\n        ResultSet<Car> rs = cars.retrieve(query);\n        Assert.assertEquals(\"should prefer unique index over hash index\", UniqueIndex.INDEX_RETRIEVAL_COST, rs.getRetrievalCost());\n\n        Assert.assertEquals(\"should retrieve car 2\", 2, rs.uniqueResult().carId);\n    }", "signature": "void testUniqueIndex()", "full_signature": "@Test public void testUniqueIndex()", "class_method_signature": "UniqueIndexTest.testUniqueIndex()", "testcase": true, "constructor": false, "invocations": ["addIndex", "onAttribute", "addIndex", "onAttribute", "add", "asList", "add", "asList", "add", "asList", "equal", "retrieve", "assertEquals", "getRetrievalCost", "assertEquals", "uniqueResult"]}, "focal_class": {"identifier": "UniqueIndex", "superclass": "extends AbstractAttributeIndex<A,O>", "interfaces": "implements OnHeapTypeIndex", "fields": [{"original_string": "protected static final int INDEX_RETRIEVAL_COST = 25;", "modifier": "protected static final", "type": "int", "declarator": "INDEX_RETRIEVAL_COST = 25", "var_name": "INDEX_RETRIEVAL_COST"}, {"original_string": "protected final Factory<ConcurrentMap<A,O>> indexMapFactory;", "modifier": "protected final", "type": "Factory<ConcurrentMap<A,O>>", "declarator": "indexMapFactory", "var_name": "indexMapFactory"}, {"original_string": "protected final ConcurrentMap<A,O> indexMap;", "modifier": "protected final", "type": "ConcurrentMap<A,O>", "declarator": "indexMap", "var_name": "indexMap"}], "methods": [{"identifier": "UniqueIndex", "parameters": "(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "modifiers": "protected", "return": "", "signature": " UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "full_signature": "protected  UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "class_method_signature": "UniqueIndex.UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "testcase": false, "constructor": true}, {"identifier": "supportsQuery", "parameters": "(Query<O> query, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "full_signature": "@Override public boolean supportsQuery(Query<O> query, QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.supportsQuery(Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "UniqueIndex.isMutable()", "testcase": false, "constructor": false}, {"identifier": "isQuantized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isQuantized()", "full_signature": "@Override public boolean isQuantized()", "class_method_signature": "UniqueIndex.isQuantized()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index<O>", "signature": "Index<O> getEffectiveIndex()", "full_signature": "@Override public Index<O> getEffectiveIndex()", "class_method_signature": "UniqueIndex.getEffectiveIndex()", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.retrieve(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveIn", "parameters": "(final In<O, A> in, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "modifiers": "protected", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveIn(final In<O, A> in, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "full_signature": "protected ResultSet<O> retrieveIn(final In<O, A> in, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "class_method_signature": "UniqueIndex.retrieveIn(final In<O, A> in, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "testcase": false, "constructor": false}, {"identifier": "retrieveEqual", "parameters": "(final Equal<O, A> equal, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "modifiers": "protected", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "full_signature": "protected ResultSet<O> retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "class_method_signature": "UniqueIndex.retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions, final ConcurrentMap<A, O> indexMap)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(ObjectSet<O> objectSet, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "full_signature": "@Override public boolean addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.addAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(ObjectSet<O> objectSet, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "full_signature": "@Override public boolean removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.removeAll(ObjectSet<O> objectSet, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ObjectStore<O> objectStore, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "full_signature": "@Override public void init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.init(ObjectStore<O> objectStore, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(QueryOptions queryOptions)", "full_signature": "@Override public void destroy(QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.destroy(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void clear(QueryOptions queryOptions)", "full_signature": "@Override public void clear(QueryOptions queryOptions)", "class_method_signature": "UniqueIndex.clear(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "onAttribute", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "UniqueIndex<A, O>", "signature": "UniqueIndex<A, O> onAttribute(Attribute<O, A> attribute)", "full_signature": "public static UniqueIndex<A, O> onAttribute(Attribute<O, A> attribute)", "class_method_signature": "UniqueIndex.onAttribute(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "onAttribute", "parameters": "(Factory<ConcurrentMap<A, O>> indexMapFactory, Attribute<O, A> attribute)", "modifiers": "public static", "return": "UniqueIndex<A, O>", "signature": "UniqueIndex<A, O> onAttribute(Factory<ConcurrentMap<A, O>> indexMapFactory, Attribute<O, A> attribute)", "full_signature": "public static UniqueIndex<A, O> onAttribute(Factory<ConcurrentMap<A, O>> indexMapFactory, Attribute<O, A> attribute)", "class_method_signature": "UniqueIndex.onAttribute(Factory<ConcurrentMap<A, O>> indexMapFactory, Attribute<O, A> attribute)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/unique/UniqueIndex.java"}, "focal_method": {"identifier": "UniqueIndex", "parameters": "(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "modifiers": "protected", "return": "", "body": "protected UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)\t{\n        super(attribute, new HashSet<Class<? extends Query>>() {{\n            add(Equal.class);\n            add(In.class);\n        }});\n        this.indexMapFactory = indexMapFactory;\n        this.indexMap = indexMapFactory.create();\n    }", "signature": " UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "full_signature": "protected  UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "class_method_signature": "UniqueIndex.UniqueIndex(Factory<ConcurrentMap<A,O>> indexMapFactory, Attribute<O, A> attribute)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}