{"test_class": {"identifier": "SetConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Set<String> input;", "modifier": "", "type": "Set<String>", "declarator": "input", "var_name": "input"}], "file": "lib/src/test/java/com/busybusy/dbc/conditions/SetConditionTest.java"}, "test_case": {"identifier": "contains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void contains() throws Exception\n\t{\n\t\tSetCondition<Set<String>, String> condition = new SetCondition<>(this.input);\n\t\tcondition.contains(\"One\");\n\n\t\tSetCondition<Set<String>, String> badCondition = new SetCondition<>(this.input);\n\t\tAssertions.assertThatThrownBy(() -> badCondition.contains(\"Fail\"))\n\t\t          .isInstanceOf(DbcAssertionError.class)\n\t\t          .hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void contains()", "full_signature": "@Test public void contains()", "class_method_signature": "SetConditionTest.contains()", "testcase": true, "constructor": false, "invocations": ["contains", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "contains"]}, "focal_class": {"identifier": "SetCondition", "superclass": "extends BasicCondition<T, SetCondition<T, E>>", "interfaces": "implements SetChecks<T, E, SetCondition<T, E>>", "fields": [], "methods": [{"identifier": "SetCondition", "parameters": "(T subject)", "modifiers": "public", "return": "", "signature": " SetCondition(T subject)", "full_signature": "public  SetCondition(T subject)", "class_method_signature": "SetCondition.SetCondition(T subject)", "testcase": false, "constructor": true}, {"identifier": "isNotEmpty", "parameters": "()", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> isNotEmpty()", "full_signature": "@Override public SetCondition<T, E> isNotEmpty()", "class_method_signature": "SetCondition.isNotEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasSize", "parameters": "(int size)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSize(int size)", "full_signature": "@Override public SetCondition<T, E> hasSize(int size)", "class_method_signature": "SetCondition.hasSize(int size)", "testcase": false, "constructor": false}, {"identifier": "hasSizeBetween", "parameters": "(int startInclusive, int endInclusive)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSizeBetween(int startInclusive, int endInclusive)", "full_signature": "@Override public SetCondition<T, E> hasSizeBetween(int startInclusive, int endInclusive)", "class_method_signature": "SetCondition.hasSizeBetween(int startInclusive, int endInclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThan", "parameters": "(int minSizeExclusive)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSizeGreaterThan(int minSizeExclusive)", "full_signature": "@Override public SetCondition<T, E> hasSizeGreaterThan(int minSizeExclusive)", "class_method_signature": "SetCondition.hasSizeGreaterThan(int minSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThanOrEqual", "parameters": "(int minSize)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSizeGreaterThanOrEqual(int minSize)", "full_signature": "@Override public SetCondition<T, E> hasSizeGreaterThanOrEqual(int minSize)", "class_method_signature": "SetCondition.hasSizeGreaterThanOrEqual(int minSize)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThan", "parameters": "(int maxSizeExclusive)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSizeLessThan(int maxSizeExclusive)", "full_signature": "@Override public SetCondition<T, E> hasSizeLessThan(int maxSizeExclusive)", "class_method_signature": "SetCondition.hasSizeLessThan(int maxSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThanOrEqual", "parameters": "(int maxSize)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> hasSizeLessThanOrEqual(int maxSize)", "full_signature": "@Override public SetCondition<T, E> hasSizeLessThanOrEqual(int maxSize)", "class_method_signature": "SetCondition.hasSizeLessThanOrEqual(int maxSize)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(E value)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "signature": "SetCondition<T, E> contains(E value)", "full_signature": "@Override public SetCondition<T, E> contains(E value)", "class_method_signature": "SetCondition.contains(E value)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/SetCondition.java"}, "focal_method": {"identifier": "contains", "parameters": "(E value)", "modifiers": "@Override public", "return": "SetCondition<T, E>", "body": "@Override\n\tpublic SetCondition<T, E> contains(E value)\n\t{\n\t\trequire(this.subject).isNotNull();\n\n\t\tif (!this.subject.contains(value))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"Expected set to contain value: \" + value), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "SetCondition<T, E> contains(E value)", "full_signature": "@Override public SetCondition<T, E> contains(E value)", "class_method_signature": "SetCondition.contains(E value)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "contains", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}