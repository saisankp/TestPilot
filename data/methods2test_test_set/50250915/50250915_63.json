{"test_class": {"identifier": "JwtAuthenticationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-jwt/src/test/java/io/jenkins/blueocean/auth/jwt/impl/JwtAuthenticationServiceImplTest.java"}, "test_case": {"identifier": "getJwks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getJwks() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        JenkinsRule.WebClient webClient = j.createWebClient();\n\n        User user = User.get(\"alice\");\n        user.setFullName(\"Alice Cooper\");\n        user.addProperty(new Mailer.UserProperty(\"alice@jenkins-ci.org\"));\n\n        webClient.login(\"alice\");\n        String token = getToken(webClient); // this call triggers the creation of a RSA key in RSAConfidentialKey::getPrivateKey\n\n        String jwksPayload = webClient.goTo(\"jwt-auth/jwk-set\", \"application/json\").getWebResponse().getContentAsString();\n        System.out.println(jwksPayload);\n        JsonWebKeySet jsonWebKeySet = new JsonWebKeySet(jwksPayload);\n        JwksVerificationKeyResolver jwksResolver = new JwksVerificationKeyResolver(jsonWebKeySet.getJsonWebKeys());\n\n        JwtConsumer jwtConsumer = new JwtConsumerBuilder()\n            .setRequireExpirationTime() // the JWT must have an expiration time\n            .setAllowedClockSkewInSeconds(30) // allow some leeway in validating time based claims to account for clock skew\n            .setRequireSubject() // the JWT must have a subject claim\n            .setVerificationKeyResolver(jwksResolver) // verify the sign with the public key\n            .build(); // create the JwtConsumer instance\n\n        JwtClaims claims = jwtConsumer.processToClaims(token);\n        Assert.assertEquals(\"alice\", claims.getSubject());\n\n        Map<String,Object> claimMap = claims.getClaimsMap();\n        Map<String,Object> context = (Map<String, Object>) claimMap.get(\"context\");\n        Map<String,String> userContext = (Map<String, String>) context.get(\"user\");\n        Assert.assertEquals(\"alice\", userContext.get(\"id\"));\n        Assert.assertEquals(\"Alice Cooper\", userContext.get(\"fullName\"));\n        Assert.assertEquals(\"alice@jenkins-ci.org\", userContext.get(\"email\"));\n    }", "signature": "void getJwks()", "full_signature": "@Test public void getJwks()", "class_method_signature": "JwtAuthenticationServiceImplTest.getJwks()", "testcase": true, "constructor": false, "invocations": ["setSecurityRealm", "createDummySecurityRealm", "createWebClient", "get", "setFullName", "addProperty", "login", "getToken", "getContentAsString", "getWebResponse", "goTo", "println", "getJsonWebKeys", "build", "setVerificationKeyResolver", "setRequireSubject", "setAllowedClockSkewInSeconds", "setRequireExpirationTime", "processToClaims", "assertEquals", "getSubject", "getClaimsMap", "get", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "JwtAuthenticationServiceImpl", "superclass": "extends JwtAuthenticationService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(JwtAuthenticationServiceImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JwtAuthenticationServiceImpl.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static int DEFAULT_EXPIRY_IN_SEC = 1800;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_EXPIRY_IN_SEC = 1800", "var_name": "DEFAULT_EXPIRY_IN_SEC"}, {"original_string": "private static int DEFAULT_MAX_EXPIRY_TIME_IN_MIN = 480;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_MAX_EXPIRY_TIME_IN_MIN = 480", "var_name": "DEFAULT_MAX_EXPIRY_TIME_IN_MIN"}, {"original_string": "private static int DEFAULT_NOT_BEFORE_IN_SEC = 30;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_NOT_BEFORE_IN_SEC = 30", "var_name": "DEFAULT_NOT_BEFORE_IN_SEC"}], "methods": [{"identifier": "getToken", "parameters": "(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "modifiers": "@Override public", "return": "JwtToken", "signature": "JwtToken getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "full_signature": "@Override public JwtToken getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "class_method_signature": "JwtAuthenticationServiceImpl.getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "testcase": false, "constructor": false}, {"identifier": "getJwkSet", "parameters": "()", "modifiers": "@Override public", "return": "JSONObject", "signature": "JSONObject getJwkSet()", "full_signature": "@Override public JSONObject getJwkSet()", "class_method_signature": "JwtAuthenticationServiceImpl.getJwkSet()", "testcase": false, "constructor": false}, {"identifier": "getIconFileName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIconFileName()", "full_signature": "@Override public String getIconFileName()", "class_method_signature": "JwtAuthenticationServiceImpl.getIconFileName()", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@Override public String getDisplayName()", "class_method_signature": "JwtAuthenticationServiceImpl.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getJwtStore", "parameters": "(Authentication authentication)", "modifiers": "public static", "return": "JwtAuthenticationStore", "signature": "JwtAuthenticationStore getJwtStore(Authentication authentication)", "full_signature": "public static JwtAuthenticationStore getJwtStore(Authentication authentication)", "class_method_signature": "JwtAuthenticationServiceImpl.getJwtStore(Authentication authentication)", "testcase": false, "constructor": false}], "file": "blueocean-jwt/src/main/java/io/jenkins/blueocean/auth/jwt/impl/JwtAuthenticationServiceImpl.java"}, "focal_method": {"identifier": "getToken", "parameters": "(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "modifiers": "@Override public", "return": "JwtToken", "body": "@Override\n    public JwtToken getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins) {\n        long expiryTime= Long.getLong(\"EXPIRY_TIME_IN_MINS\",DEFAULT_EXPIRY_IN_SEC);\n\n        int maxExpiryTime = Integer.getInteger(\"MAX_EXPIRY_TIME_IN_MINS\",DEFAULT_MAX_EXPIRY_TIME_IN_MIN);\n\n        if(maxExpiryTimeInMins != null){\n            maxExpiryTime = maxExpiryTimeInMins;\n        }\n        if(expiryTimeInMins != null){\n            if(expiryTimeInMins > maxExpiryTime) {\n                throw new ServiceException.BadRequestException(\n                    String.format(\"expiryTimeInMins %s can't be greater than %s\", expiryTimeInMins, maxExpiryTime));\n            }\n            expiryTime = expiryTimeInMins * 60;\n        }\n\n        Authentication authentication = Jenkins.getAuthentication();\n\n        String userId = authentication.getName();\n\n        User user = User.get(userId, false, Collections.emptyMap());\n        String email = null;\n        String fullName = null;\n        if(user != null) {\n            fullName = user.getFullName();\n            userId = user.getId();\n            Mailer.UserProperty p = user.getProperty(Mailer.UserProperty.class);\n            if(p!=null)\n                email = p.getAddress();\n        }\n        Plugin plugin = Jenkins.getInstance().getPlugin(\"blueocean-jwt\");\n        String issuer = \"blueocean-jwt:\"+ ((plugin!=null) ? plugin.getWrapper().getVersion() : \"\");\n\n        JwtToken jwtToken = new JwtToken();\n        jwtToken.claim.put(\"jti\", UUID.randomUUID().toString().replace(\"-\",\"\"));\n        jwtToken.claim.put(\"iss\", issuer);\n        jwtToken.claim.put(\"sub\", userId);\n        jwtToken.claim.put(\"name\", fullName);\n        long currentTime = System.currentTimeMillis()/1000;\n        jwtToken.claim.put(\"iat\", currentTime);\n        jwtToken.claim.put(\"exp\", currentTime+expiryTime);\n        jwtToken.claim.put(\"nbf\", currentTime - DEFAULT_NOT_BEFORE_IN_SEC);\n\n        //set claim\n        JSONObject context = new JSONObject();\n\n        JSONObject userObject = new JSONObject();\n        userObject.put(\"id\", userId);\n        userObject.put(\"fullName\", fullName);\n        userObject.put(\"email\", email);\n\n        JwtAuthenticationStore authenticationStore = getJwtStore(authentication);\n\n        authenticationStore.store(authentication, context);\n\n        context.put(\"user\", userObject);\n        jwtToken.claim.put(\"context\", context);\n\n        return jwtToken;\n    }", "signature": "JwtToken getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "full_signature": "@Override public JwtToken getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "class_method_signature": "JwtAuthenticationServiceImpl.getToken(@Nullable @QueryParameter(\"expiryTimeInMins\") Integer expiryTimeInMins, @Nullable @QueryParameter(\"maxExpiryTimeInMins\") Integer maxExpiryTimeInMins)", "testcase": false, "constructor": false, "invocations": ["getLong", "getInteger", "format", "getAuthentication", "getName", "get", "emptyMap", "getFullName", "getId", "getProperty", "getAddress", "getPlugin", "getInstance", "getVersion", "getWrapper", "put", "replace", "toString", "randomUUID", "put", "put", "put", "currentTimeMillis", "put", "put", "put", "put", "put", "put", "getJwtStore", "store", "put", "put"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}