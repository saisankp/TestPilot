{"test_class": {"identifier": "ExpressionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.01;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.01", "var_name": "DELTA"}], "file": "dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/ExpressionUtilsTest.java"}, "test_case": {"identifier": "testIsNumeric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsNumeric()\n    {\n        assertTrue( ExpressionUtils.isNumeric( \"123\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"0\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"1.2\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"12.34\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"0.0\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"1.234\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"-1234\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"-12.34\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"-0.34\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"6.34\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"3.34\" ) );\n        assertTrue( ExpressionUtils.isNumeric( \"2.43\" ) );\n\n        assertFalse( ExpressionUtils.isNumeric( \"Hey\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"45 Perinatal Condition\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"Long street 2\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"1.2f\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"1 234\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \".\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"1.\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \".1\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \" \" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"+1234  \" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"1234  \" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"  1234\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"1,234\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"0,1\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"0,\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"0.\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"01\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"001\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"00.23\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"01.23\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"4.23E\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"4.23Ef\" ) );\n        assertFalse( ExpressionUtils.isNumeric( \"E5\" ) );\n    }", "signature": "void testIsNumeric()", "full_signature": "@Test public void testIsNumeric()", "class_method_signature": "ExpressionUtilsTest.testIsNumeric()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertTrue", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric", "assertFalse", "isNumeric"]}, "focal_class": {"identifier": "ExpressionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JexlEngine JEXL = new JexlEngine();", "modifier": "private static final", "type": "JexlEngine", "declarator": "JEXL = new JexlEngine()", "var_name": "JEXL"}, {"original_string": "private static final JexlEngine JEXL_STRICT = new JexlEngine();", "modifier": "private static final", "type": "JexlEngine", "declarator": "JEXL_STRICT = new JexlEngine()", "var_name": "JEXL_STRICT"}, {"original_string": "private static final Map<String, String> EL_SQL_MAP = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "EL_SQL_MAP = new HashMap<>()", "var_name": "EL_SQL_MAP"}, {"original_string": "private static final String IGNORED_KEYWORDS_REGEX =\n        \"SUM|sum|AVG|avg|COUNT|count|STDDEV|stddev|VARIANCE|variance|MIN|min|MAX|max|NONE|none\";", "modifier": "private static final", "type": "String", "declarator": "IGNORED_KEYWORDS_REGEX =\n        \"SUM|sum|AVG|avg|COUNT|count|STDDEV|stddev|VARIANCE|variance|MIN|min|MAX|max|NONE|none\"", "var_name": "IGNORED_KEYWORDS_REGEX"}, {"original_string": "private static final Pattern NUMERIC_PATTERN = Pattern.compile( \"^(-?0|-?[1-9]\\\\d*)(\\\\.\\\\d+)?$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "NUMERIC_PATTERN = Pattern.compile( \"^(-?0|-?[1-9]\\\\d*)(\\\\.\\\\d+)?$\" )", "var_name": "NUMERIC_PATTERN"}], "methods": [{"identifier": "evaluate", "parameters": "( String expression, Map<String, Object> vars )", "modifiers": "public static", "return": "Object", "signature": "Object evaluate( String expression, Map<String, Object> vars )", "full_signature": "public static Object evaluate( String expression, Map<String, Object> vars )", "class_method_signature": "ExpressionUtils.evaluate( String expression, Map<String, Object> vars )", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "( String expression, Map<String, Object> vars, boolean strict )", "modifiers": "private static", "return": "Object", "signature": "Object evaluate( String expression, Map<String, Object> vars, boolean strict )", "full_signature": "private static Object evaluate( String expression, Map<String, Object> vars, boolean strict )", "class_method_signature": "ExpressionUtils.evaluate( String expression, Map<String, Object> vars, boolean strict )", "testcase": false, "constructor": false}, {"identifier": "evaluateToDouble", "parameters": "( String expression, Map<String, Object> vars )", "modifiers": "public static", "return": "Double", "signature": "Double evaluateToDouble( String expression, Map<String, Object> vars )", "full_signature": "public static Double evaluateToDouble( String expression, Map<String, Object> vars )", "class_method_signature": "ExpressionUtils.evaluateToDouble( String expression, Map<String, Object> vars )", "testcase": false, "constructor": false}, {"identifier": "isTrue", "parameters": "( String expression, Map<String, Object> vars )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTrue( String expression, Map<String, Object> vars )", "full_signature": "public static boolean isTrue( String expression, Map<String, Object> vars )", "class_method_signature": "ExpressionUtils.isTrue( String expression, Map<String, Object> vars )", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "( String expression, Map<String, Object> vars )", "modifiers": "public static", "return": "boolean", "signature": "boolean isBoolean( String expression, Map<String, Object> vars )", "full_signature": "public static boolean isBoolean( String expression, Map<String, Object> vars )", "class_method_signature": "ExpressionUtils.isBoolean( String expression, Map<String, Object> vars )", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "( String expression, Map<String, Object> vars )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid( String expression, Map<String, Object> vars )", "full_signature": "public static boolean isValid( String expression, Map<String, Object> vars )", "class_method_signature": "ExpressionUtils.isValid( String expression, Map<String, Object> vars )", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric( String value )", "full_signature": "public static boolean isNumeric( String value )", "class_method_signature": "ExpressionUtils.isNumeric( String value )", "testcase": false, "constructor": false}, {"identifier": "asSql", "parameters": "( String expression )", "modifiers": "public static", "return": "String", "signature": "String asSql( String expression )", "full_signature": "public static String asSql( String expression )", "class_method_signature": "ExpressionUtils.asSql( String expression )", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "( String expression )", "modifiers": "public static", "return": "Object", "signature": "Object evaluate( String expression )", "full_signature": "public static Object evaluate( String expression )", "class_method_signature": "ExpressionUtils.evaluate( String expression )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/util/ExpressionUtils.java"}, "focal_method": {"identifier": "isNumeric", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isNumeric( String value )\n    {\n        return NUMERIC_PATTERN.matcher( value ).matches();\n    }", "signature": "boolean isNumeric( String value )", "full_signature": "public static boolean isNumeric( String value )", "class_method_signature": "ExpressionUtils.isNumeric( String value )", "testcase": false, "constructor": false, "invocations": ["matches", "matcher"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}