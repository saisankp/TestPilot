{"test_class": {"identifier": "MaxTest", "superclass": "extends OperationBaseTest", "interfaces": "", "fields": [], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/aggregation/operation/MaxTest.java"}, "test_case": {"identifier": "shouldComputeMin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldComputeMin() {\n        // given when\n        AggregationResult result = new AggregationResult(Operator.MAX);\n        aggregator.accept(getRow(\"toto\", \"5123.4\"), result);\n        aggregator.accept(getRow(\"tata\", \"-50.2\"), result);\n        aggregator.accept(getRow(\"toto\", \"786.884\"), result);\n        aggregator.accept(getRow(\"tata\", \"-0.2\"), result);\n        aggregator.accept(getRow(\"toto\", \"41843.453\"), result); // <-- max here for toto\n        aggregator.accept(getRow(\"toto\", \"0\"), result);\n        aggregator.accept(getRow(\"tata\", \"20\"), result);\n        aggregator.accept(getRow(\"toto\", \"-1\"), result);\n        aggregator.accept(getRow(\"toto\", \"8.87\"), result);\n        aggregator.accept(getRow(\"tata\", \"875\"), result); // <-- max here for tata\n        aggregator.accept(getRow(\"toto\", \"-0.01\"), result);\n        aggregator.accept(getRow(\"tutu\", \"sdfs\"), result); // <-- should not be part of the result\n\n        // then\n        Assert.assertEquals(result.get(\"toto\").getValue(), 41843.453, 0);\n        Assert.assertEquals(result.get(\"tata\").getValue(), 875, 0);\n        Assert.assertNull(result.get(\"sdfs\"));\n    }", "signature": "void shouldComputeMin()", "full_signature": "@Test public void shouldComputeMin()", "class_method_signature": "MaxTest.shouldComputeMin()", "testcase": true, "constructor": false, "invocations": ["accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "accept", "getRow", "assertEquals", "getValue", "get", "assertEquals", "getValue", "get", "assertNull", "get"]}, "focal_class": {"identifier": "Max", "superclass": "extends AbstractAggregator", "interfaces": "implements Aggregator", "fields": [], "methods": [{"identifier": "Max", "parameters": "(String groupBy, String columnId)", "modifiers": "", "return": "", "signature": " Max(String groupBy, String columnId)", "full_signature": "  Max(String groupBy, String columnId)", "class_method_signature": "Max.Max(String groupBy, String columnId)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(DataSetRow row, AggregationResult result)", "modifiers": "@Override public", "return": "void", "signature": "void accept(DataSetRow row, AggregationResult result)", "full_signature": "@Override public void accept(DataSetRow row, AggregationResult result)", "class_method_signature": "Max.accept(DataSetRow row, AggregationResult result)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(AggregationResult result)", "modifiers": "@Override public", "return": "void", "signature": "void normalize(AggregationResult result)", "full_signature": "@Override public void normalize(AggregationResult result)", "class_method_signature": "Max.normalize(AggregationResult result)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/aggregation/operation/Max.java"}, "focal_method": {"identifier": "accept", "parameters": "(DataSetRow row, AggregationResult result)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(DataSetRow row, AggregationResult result) {\n        final String maxKey = row.get(groupBy);\n\n        // skip value not found\n        if (StringUtils.isEmpty(maxKey)) {\n            return;\n        }\n\n        // get the value\n        double value;\n        try {\n            value = Double.parseDouble(row.get(columnId));\n        } catch (NumberFormatException e) {\n            // skip non number\n            return;\n        }\n\n        // init the group by in the result\n        if (!result.contains(maxKey)) {\n            result.put(maxKey, new NumberContext(value));\n        }\n\n        NumberContext context = (NumberContext) result.get(maxKey);\n\n        if (value > context.getValue()) {\n            context.setValue(value);\n        }\n    }", "signature": "void accept(DataSetRow row, AggregationResult result)", "full_signature": "@Override public void accept(DataSetRow row, AggregationResult result)", "class_method_signature": "Max.accept(DataSetRow row, AggregationResult result)", "testcase": false, "constructor": false, "invocations": ["get", "isEmpty", "parseDouble", "get", "contains", "put", "get", "getValue", "setValue"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}