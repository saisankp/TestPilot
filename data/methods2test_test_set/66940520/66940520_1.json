{"test_class": {"identifier": "StdDevOutlierAnalysisServiceTest", "superclass": "extends DhisSpringTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    @Qualifier( \"org.hisp.dhis.dataanalysis.StdDevOutlierAnalysisService\" )\n    private DataAnalysisService stdDevOutlierAnalysisService;", "modifier": "@Autowired\n    @Qualifier( \"org.hisp.dhis.dataanalysis.StdDevOutlierAnalysisService\" )\n    private", "type": "DataAnalysisService", "declarator": "stdDevOutlierAnalysisService", "var_name": "stdDevOutlierAnalysisService"}, {"original_string": "@Autowired\n    private DataElementService dataElementService;", "modifier": "@Autowired\n    private", "type": "DataElementService", "declarator": "dataElementService", "var_name": "dataElementService"}, {"original_string": "@Autowired\n    private CategoryService categoryService;", "modifier": "@Autowired\n    private", "type": "CategoryService", "declarator": "categoryService", "var_name": "categoryService"}, {"original_string": "@Autowired\n    private DataSetService dataSetService;", "modifier": "@Autowired\n    private", "type": "DataSetService", "declarator": "dataSetService", "var_name": "dataSetService"}, {"original_string": "@Autowired\n    private OrganisationUnitService organisationUnitService;", "modifier": "@Autowired\n    private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "@Autowired\n    private DataValueService dataValueService;", "modifier": "@Autowired\n    private", "type": "DataValueService", "declarator": "dataValueService", "var_name": "dataValueService"}, {"original_string": "@Autowired\n    private PeriodService periodService;", "modifier": "@Autowired\n    private", "type": "PeriodService", "declarator": "periodService", "var_name": "periodService"}, {"original_string": "private DataElement dataElementSingleQuoteName;", "modifier": "private", "type": "DataElement", "declarator": "dataElementSingleQuoteName", "var_name": "dataElementSingleQuoteName"}, {"original_string": "private DataElement dataElementB;", "modifier": "private", "type": "DataElement", "declarator": "dataElementB", "var_name": "dataElementB"}, {"original_string": "private DataElement dataElementC;", "modifier": "private", "type": "DataElement", "declarator": "dataElementC", "var_name": "dataElementC"}, {"original_string": "private DataElement dataElementD;", "modifier": "private", "type": "DataElement", "declarator": "dataElementD", "var_name": "dataElementD"}, {"original_string": "private DataValue dataValueA;", "modifier": "private", "type": "DataValue", "declarator": "dataValueA", "var_name": "dataValueA"}, {"original_string": "private DataValue dataValueB;", "modifier": "private", "type": "DataValue", "declarator": "dataValueB", "var_name": "dataValueB"}, {"original_string": "private Set<DataElement> dataElementsA = new HashSet<>();", "modifier": "private", "type": "Set<DataElement>", "declarator": "dataElementsA = new HashSet<>()", "var_name": "dataElementsA"}, {"original_string": "private CategoryCombo categoryCombo;", "modifier": "private", "type": "CategoryCombo", "declarator": "categoryCombo", "var_name": "categoryCombo"}, {"original_string": "private CategoryOptionCombo categoryOptionCombo;", "modifier": "private", "type": "CategoryOptionCombo", "declarator": "categoryOptionCombo", "var_name": "categoryOptionCombo"}, {"original_string": "private Period periodA;", "modifier": "private", "type": "Period", "declarator": "periodA", "var_name": "periodA"}, {"original_string": "private Period periodB;", "modifier": "private", "type": "Period", "declarator": "periodB", "var_name": "periodB"}, {"original_string": "private Period periodC;", "modifier": "private", "type": "Period", "declarator": "periodC", "var_name": "periodC"}, {"original_string": "private Period periodD;", "modifier": "private", "type": "Period", "declarator": "periodD", "var_name": "periodD"}, {"original_string": "private Period periodE;", "modifier": "private", "type": "Period", "declarator": "periodE", "var_name": "periodE"}, {"original_string": "private Period periodF;", "modifier": "private", "type": "Period", "declarator": "periodF", "var_name": "periodF"}, {"original_string": "private Period periodG;", "modifier": "private", "type": "Period", "declarator": "periodG", "var_name": "periodG"}, {"original_string": "private Period periodH;", "modifier": "private", "type": "Period", "declarator": "periodH", "var_name": "periodH"}, {"original_string": "private Period periodI;", "modifier": "private", "type": "Period", "declarator": "periodI", "var_name": "periodI"}, {"original_string": "private Period periodJ;", "modifier": "private", "type": "Period", "declarator": "periodJ", "var_name": "periodJ"}, {"original_string": "private Date from = getDate( 1998, 1, 1 );", "modifier": "private", "type": "Date", "declarator": "from = getDate( 1998, 1, 1 )", "var_name": "from"}, {"original_string": "private OrganisationUnit organisationUnitA;", "modifier": "private", "type": "OrganisationUnit", "declarator": "organisationUnitA", "var_name": "organisationUnitA"}], "file": "dhis-2/dhis-services/dhis-service-validation/src/test/java/org/hisp/dhis/dataanalysis/StdDevOutlierAnalysisServiceTest.java"}, "test_case": {"identifier": "testGetFindOutliers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFindOutliers()\n    {\n        dataValueA = createDataValue( dataElementSingleQuoteName, periodI, organisationUnitA, \"71\",\n            categoryOptionCombo );\n        dataValueB = createDataValue( dataElementSingleQuoteName, periodJ, organisationUnitA, \"-71\",\n            categoryOptionCombo );\n\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodA, organisationUnitA, \"5\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodB, organisationUnitA, \"-5\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodC, organisationUnitA, \"5\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodD, organisationUnitA, \"-5\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodE, organisationUnitA, \"10\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodF, organisationUnitA, \"-10\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodG, organisationUnitA, \"13\", categoryOptionCombo ) );\n        dataValueService.addDataValue(\n            createDataValue( dataElementSingleQuoteName, periodH, organisationUnitA, \"-13\", categoryOptionCombo ) );\n        dataValueService.addDataValue( dataValueA );\n        dataValueService.addDataValue( dataValueB );\n\n        double stdDevFactor = 2.0;\n        List<Period> periods = new ArrayList<>();\n        periods.add( periodI );\n        periods.add( periodJ );\n        periods.add( periodA );\n        periods.add( periodE );\n\n        List<DeflatedDataValue> values = stdDevOutlierAnalysisService.analyse( Lists.newArrayList( organisationUnitA ),\n            dataElementsA, periods, stdDevFactor, from );\n\n        double lowerBound = -34.51 * stdDevFactor;\n        double upperBound = 34.51 * stdDevFactor;\n\n        DeflatedDataValue valueA = new DeflatedDataValue( dataValueA );\n        DeflatedDataValue valueB = new DeflatedDataValue( dataValueB );\n\n        assertEquals( 1, values.size() );\n        assertTrue( values.contains( valueA ) );\n        assertFalse( values.contains( valueB ) );\n    }", "signature": "void testGetFindOutliers()", "full_signature": "@Test public void testGetFindOutliers()", "class_method_signature": "StdDevOutlierAnalysisServiceTest.testGetFindOutliers()", "testcase": true, "constructor": false, "invocations": ["createDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "createDataValue", "addDataValue", "addDataValue", "add", "add", "add", "add", "analyse", "newArrayList", "assertEquals", "size", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "StdDevOutlierAnalysisService", "superclass": "", "interfaces": "implements DataAnalysisService", "fields": [{"original_string": "private final DataAnalysisStore dataAnalysisStore;", "modifier": "private final", "type": "DataAnalysisStore", "declarator": "dataAnalysisStore", "var_name": "dataAnalysisStore"}], "methods": [{"identifier": "StdDevOutlierAnalysisService", "parameters": "( DataAnalysisStore dataAnalysisStore )", "modifiers": "public", "return": "", "signature": " StdDevOutlierAnalysisService( DataAnalysisStore dataAnalysisStore )", "full_signature": "public  StdDevOutlierAnalysisService( DataAnalysisStore dataAnalysisStore )", "class_method_signature": "StdDevOutlierAnalysisService.StdDevOutlierAnalysisService( DataAnalysisStore dataAnalysisStore )", "testcase": false, "constructor": true}, {"identifier": "analyse", "parameters": "( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "modifiers": "@Override public final", "return": "List<DeflatedDataValue>", "signature": "List<DeflatedDataValue> analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "full_signature": "@Override public final List<DeflatedDataValue> analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "class_method_signature": "StdDevOutlierAnalysisService.analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-validation/src/main/java/org/hisp/dhis/dataanalysis/StdDevOutlierAnalysisService.java"}, "focal_method": {"identifier": "analyse", "parameters": "( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "modifiers": "@Override public final", "return": "List<DeflatedDataValue>", "body": "@Override\n    public final List<DeflatedDataValue> analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )\n    {\n        log.info( \"Starting std dev analysis, no of org units: \" + parents.size() + \", factor: \" + stdDevFactor + \", from: \" + from );\n\n        List<DeflatedDataValue> outlierCollection = new ArrayList<>();\n\n        List<String> parentsPaths = parents.stream().map( OrganisationUnit::getPath ).collect( Collectors.toList() );\n\n        loop : for ( DataElement dataElement : dataElements )\n        {\n            // TODO filter periods with data element period type\n\n            if ( dataElement.getValueType().isNumeric() && stdDevFactor != null )\n            {\n                Set<CategoryOptionCombo> categoryOptionCombos = dataElement.getCategoryOptionCombos();\n\n                List<DataAnalysisMeasures> measuresList = dataAnalysisStore.getDataAnalysisMeasures( dataElement, categoryOptionCombos, parentsPaths, from );\n\n                MapMap<Long, Long, Integer> lowBoundMapMap = new MapMap<>(); // catOptionComboId, orgUnitId, lowBound\n                MapMap<Long, Long, Integer> highBoundMapMap = new MapMap<>(); // catOptionComboId, orgUnitId, highBound\n\n                for ( DataAnalysisMeasures measures : measuresList )\n                {\n                    int lowBound = (int) Math.round( MathUtils.getLowBound( measures.getStandardDeviation(), stdDevFactor, measures.getAverage() ) );\n                    int highBound = (int) Math.round( MathUtils.getHighBound( measures.getStandardDeviation(), stdDevFactor, measures.getAverage() ) );\n\n                    lowBoundMapMap.putEntry( measures.getCategoryOptionComboId(), measures.getOrgUnitId(), lowBound );\n                    highBoundMapMap.putEntry( measures.getCategoryOptionComboId(), measures.getOrgUnitId(), highBound );\n                }\n\n                for ( CategoryOptionCombo categoryOptionCombo : categoryOptionCombos )\n                {\n                    Map<Long, Integer> lowBoundMap = lowBoundMapMap.get( categoryOptionCombo.getId() );\n                    Map<Long, Integer> highBoundMap = highBoundMapMap.get( categoryOptionCombo.getId() );\n\n                    outlierCollection.addAll( dataAnalysisStore.getDeflatedDataValues( dataElement, categoryOptionCombo, periods,\n                        lowBoundMap, highBoundMap ) );\n\n                    if ( outlierCollection.size() > MAX_OUTLIERS )\n                    {\n                        break loop;\n                    }\n                }\n            }\n        }\n\n        return outlierCollection;\n    }", "signature": "List<DeflatedDataValue> analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "full_signature": "@Override public final List<DeflatedDataValue> analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "class_method_signature": "StdDevOutlierAnalysisService.analyse( Collection<OrganisationUnit> parents,\n        Collection<DataElement> dataElements, Collection<Period> periods, Double stdDevFactor, Date from )", "testcase": false, "constructor": false, "invocations": ["info", "size", "collect", "map", "stream", "toList", "isNumeric", "getValueType", "getCategoryOptionCombos", "getDataAnalysisMeasures", "round", "getLowBound", "getStandardDeviation", "getAverage", "round", "getHighBound", "getStandardDeviation", "getAverage", "putEntry", "getCategoryOptionComboId", "getOrgUnitId", "putEntry", "getCategoryOptionComboId", "getOrgUnitId", "get", "getId", "get", "getId", "addAll", "getDeflatedDataValues", "size"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}