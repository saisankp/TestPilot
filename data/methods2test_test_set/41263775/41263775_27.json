{"test_class": {"identifier": "CQNParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CQNParser<Car> parser = new CQNParser<Car>(Car.class){{\n        registerAttribute(Car.CAR_ID);\n        registerAttribute(Car.MANUFACTURER);\n        registerAttribute(Car.MODEL);\n        registerAttribute(Car.COLOR);\n        registerAttribute(Car.DOORS);\n        registerAttribute(Car.PRICE);\n        registerAttribute(Car.FEATURES);\n    }};", "modifier": "final", "type": "CQNParser<Car>", "declarator": "parser = new CQNParser<Car>(Car.class){{\n        registerAttribute(Car.CAR_ID);\n        registerAttribute(Car.MANUFACTURER);\n        registerAttribute(Car.MODEL);\n        registerAttribute(Car.COLOR);\n        registerAttribute(Car.DOORS);\n        registerAttribute(Car.PRICE);\n        registerAttribute(Car.FEATURES);\n    }}", "var_name": "parser"}, {"original_string": "final CQNParser<MobileTerminating> mtParser = new CQNParser<MobileTerminating>(MobileTerminating.class) {{\n        registerAttribute(MobileTerminating.PREFIX);\n        registerAttribute(MobileTerminating.OPERATOR_NAME);\n        registerAttribute(MobileTerminating.REGION);\n        registerAttribute(MobileTerminating.ZONE);\n    }};", "modifier": "final", "type": "CQNParser<MobileTerminating>", "declarator": "mtParser = new CQNParser<MobileTerminating>(MobileTerminating.class) {{\n        registerAttribute(MobileTerminating.PREFIX);\n        registerAttribute(MobileTerminating.OPERATOR_NAME);\n        registerAttribute(MobileTerminating.REGION);\n        registerAttribute(MobileTerminating.ZONE);\n    }}", "var_name": "mtParser"}], "file": "code/src/test/java/com/googlecode/cqengine/query/parser/cqn/CQNParserTest.java"}, "test_case": {"identifier": "testOrderBy_ComplexOrdering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrderBy_ComplexOrdering() {\n        ParseResult<Car> parseResult = parser.parse(\"equal(\\\"manufacturer\\\", \\\"Ford\\\"), queryOptions(orderBy(ascending(\\\"manufacturer\\\"), descending(\\\"carId\\\")))\");\n        assertQueriesEquals(equal(Car.MANUFACTURER, \"Ford\"), parseResult.getQuery());\n        Assert.assertEquals(queryOptions(orderBy(ascending(Car.MANUFACTURER), descending(Car.CAR_ID))), parseResult.getQueryOptions());\n    }", "signature": "void testOrderBy_ComplexOrdering()", "full_signature": "@Test public void testOrderBy_ComplexOrdering()", "class_method_signature": "CQNParserTest.testOrderBy_ComplexOrdering()", "testcase": true, "constructor": false, "invocations": ["parse", "assertQueriesEquals", "equal", "getQuery", "assertEquals", "queryOptions", "orderBy", "ascending", "descending", "getQueryOptions"]}, "focal_class": {"identifier": "CQNParser", "superclass": "extends QueryParser<O>", "interfaces": "", "fields": [], "methods": [{"identifier": "CQNParser", "parameters": "(Class<O> objectType)", "modifiers": "public", "return": "", "signature": " CQNParser(Class<O> objectType)", "full_signature": "public  CQNParser(Class<O> objectType)", "class_method_signature": "CQNParser.CQNParser(Class<O> objectType)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String query)", "modifiers": "@Override public", "return": "ParseResult<O>", "signature": "ParseResult<O> parse(String query)", "full_signature": "@Override public ParseResult<O> parse(String query)", "class_method_signature": "CQNParser.parse(String query)", "testcase": false, "constructor": false}, {"identifier": "forPojo", "parameters": "(Class<O> pojoClass)", "modifiers": "public static", "return": "CQNParser<O>", "signature": "CQNParser<O> forPojo(Class<O> pojoClass)", "full_signature": "public static CQNParser<O> forPojo(Class<O> pojoClass)", "class_method_signature": "CQNParser.forPojo(Class<O> pojoClass)", "testcase": false, "constructor": false}, {"identifier": "forPojoWithAttributes", "parameters": "(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "modifiers": "public static", "return": "CQNParser<O>", "signature": "CQNParser<O> forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "full_signature": "public static CQNParser<O> forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "class_method_signature": "CQNParser.forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/parser/cqn/CQNParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String query)", "modifiers": "@Override public", "return": "ParseResult<O>", "body": "@Override\n    public ParseResult<O> parse(String query) {\n        try {\n            if (query == null) {\n                throw new IllegalArgumentException(\"Query was null\");\n            }\n            CQNGrammarLexer lexer = new CQNGrammarLexer(new ANTLRInputStream(query));\n            lexer.removeErrorListeners();\n            lexer.addErrorListener(SYNTAX_ERROR_LISTENER);\n\n            CommonTokenStream tokens = new CommonTokenStream(lexer);\n\n            CQNGrammarParser parser = new CQNGrammarParser(tokens);\n            parser.removeErrorListeners();\n            parser.addErrorListener(SYNTAX_ERROR_LISTENER);\n\n            CQNGrammarParser.StartContext queryContext = parser.start();\n\n            ParseTreeWalker walker = new ParseTreeWalker();\n            CQNAntlrListener<O> listener = new CQNAntlrListener<O>(this);\n            walker.walk(listener, queryContext);\n            return new ParseResult<O>(listener.getParsedQuery(), listener.getQueryOptions());\n        }\n        catch (InvalidQueryException e) {\n            throw e;\n        }\n        catch (Exception e) {\n            throw new InvalidQueryException(\"Failed to parse query\", e);\n        }\n    }", "signature": "ParseResult<O> parse(String query)", "full_signature": "@Override public ParseResult<O> parse(String query)", "class_method_signature": "CQNParser.parse(String query)", "testcase": false, "constructor": false, "invocations": ["removeErrorListeners", "addErrorListener", "removeErrorListeners", "addErrorListener", "start", "walk", "getParsedQuery", "getQueryOptions"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}