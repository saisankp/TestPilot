{"test_class": {"identifier": "BatchHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BatchHelper.Factory batchFactory;", "modifier": "private", "type": "BatchHelper.Factory", "declarator": "batchFactory", "var_name": "batchFactory"}, {"original_string": "private TrackingHttpRequestInitializer httpRequestInitializer;", "modifier": "private", "type": "TrackingHttpRequestInitializer", "declarator": "httpRequestInitializer", "var_name": "httpRequestInitializer"}], "file": "gcsio/src/test/java/com/google/cloud/hadoop/gcsio/BatchHelperTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsEmpty() {\n    Storage storage = new Storage(HTTP_TRANSPORT, JSON_FACTORY, httpRequestInitializer);\n    BatchHelper batchHelper =\n        batchFactory.newBatchHelper(httpRequestInitializer, storage, /* maxRequestsPerBatch= */ 2);\n\n    assertThat(batchHelper.isEmpty()).isTrue();\n  }", "signature": "void testIsEmpty()", "full_signature": "@Test public void testIsEmpty()", "class_method_signature": "BatchHelperTest.testIsEmpty()", "testcase": true, "constructor": false, "invocations": ["newBatchHelper", "isTrue", "assertThat", "isEmpty"]}, "focal_class": {"identifier": "BatchHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private static final ThreadFactory THREAD_FACTORY =\n      new ThreadFactoryBuilder().setNameFormat(\"gcsfs-batch-helper-%d\").setDaemon(true).build();", "modifier": "private static final", "type": "ThreadFactory", "declarator": "THREAD_FACTORY =\n      new ThreadFactoryBuilder().setNameFormat(\"gcsfs-batch-helper-%d\").setDaemon(true).build()", "var_name": "THREAD_FACTORY"}, {"original_string": "private final Queue<QueueRequestCallback> pendingRequests = new ConcurrentLinkedQueue<>();", "modifier": "private final", "type": "Queue<QueueRequestCallback>", "declarator": "pendingRequests = new ConcurrentLinkedQueue<>()", "var_name": "pendingRequests"}, {"original_string": "private final ExecutorService requestsExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "requestsExecutor", "var_name": "requestsExecutor"}, {"original_string": "private final Queue<Future<Void>> responseFutures = new ConcurrentLinkedQueue<>();", "modifier": "private final", "type": "Queue<Future<Void>>", "declarator": "responseFutures = new ConcurrentLinkedQueue<>()", "var_name": "responseFutures"}, {"original_string": "private final HttpRequestInitializer requestInitializer;", "modifier": "private final", "type": "HttpRequestInitializer", "declarator": "requestInitializer", "var_name": "requestInitializer"}, {"original_string": "private final Storage gcs;", "modifier": "private final", "type": "Storage", "declarator": "gcs", "var_name": "gcs"}, {"original_string": "private final long maxRequestsPerBatch;", "modifier": "private final", "type": "long", "declarator": "maxRequestsPerBatch", "var_name": "maxRequestsPerBatch"}, {"original_string": "private final Lock flushLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "flushLock = new ReentrantLock()", "var_name": "flushLock"}], "methods": [{"identifier": "BatchHelper", "parameters": "(\n      HttpRequestInitializer requestInitializer,\n      Storage gcs,\n      long maxRequestsPerBatch,\n      int numThreads)", "modifiers": "private", "return": "", "signature": " BatchHelper(\n      HttpRequestInitializer requestInitializer,\n      Storage gcs,\n      long maxRequestsPerBatch,\n      int numThreads)", "full_signature": "private  BatchHelper(\n      HttpRequestInitializer requestInitializer,\n      Storage gcs,\n      long maxRequestsPerBatch,\n      int numThreads)", "class_method_signature": "BatchHelper.BatchHelper(\n      HttpRequestInitializer requestInitializer,\n      Storage gcs,\n      long maxRequestsPerBatch,\n      int numThreads)", "testcase": false, "constructor": true}, {"identifier": "newRequestsExecutor", "parameters": "(int numThreads)", "modifiers": "private static", "return": "ExecutorService", "signature": "ExecutorService newRequestsExecutor(int numThreads)", "full_signature": "private static ExecutorService newRequestsExecutor(int numThreads)", "class_method_signature": "BatchHelper.newRequestsExecutor(int numThreads)", "testcase": false, "constructor": false}, {"identifier": "queue", "parameters": "(StorageRequest<T> req, JsonBatchCallback<T> callback)", "modifiers": "public", "return": "void", "signature": "void queue(StorageRequest<T> req, JsonBatchCallback<T> callback)", "full_signature": "public void queue(StorageRequest<T> req, JsonBatchCallback<T> callback)", "class_method_signature": "BatchHelper.queue(StorageRequest<T> req, JsonBatchCallback<T> callback)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(StorageRequest<T> req, JsonBatchCallback<T> callback)", "modifiers": "private static", "return": "void", "signature": "void execute(StorageRequest<T> req, JsonBatchCallback<T> callback)", "full_signature": "private static void execute(StorageRequest<T> req, JsonBatchCallback<T> callback)", "class_method_signature": "BatchHelper.execute(StorageRequest<T> req, JsonBatchCallback<T> callback)", "testcase": false, "constructor": false}, {"identifier": "flushIfPossibleAndRequired", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flushIfPossibleAndRequired()", "full_signature": "private void flushIfPossibleAndRequired()", "class_method_signature": "BatchHelper.flushIfPossibleAndRequired()", "testcase": false, "constructor": false}, {"identifier": "flushIfPossible", "parameters": "(boolean flushAll)", "modifiers": "private", "return": "void", "signature": "void flushIfPossible(boolean flushAll)", "full_signature": "private void flushIfPossible(boolean flushAll)", "class_method_signature": "BatchHelper.flushIfPossible(boolean flushAll)", "testcase": false, "constructor": false}, {"identifier": "flushPendingRequests", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flushPendingRequests()", "full_signature": "private void flushPendingRequests()", "class_method_signature": "BatchHelper.flushPendingRequests()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "BatchHelper.flush()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "BatchHelper.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "awaitRequestsCompletion", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void awaitRequestsCompletion()", "full_signature": "private void awaitRequestsCompletion()", "class_method_signature": "BatchHelper.awaitRequestsCompletion()", "testcase": false, "constructor": false}], "file": "gcsio/src/main/java/com/google/cloud/hadoop/gcsio/BatchHelper.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isEmpty() {\n    return pendingRequests.isEmpty();\n  }", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "BatchHelper.isEmpty()", "testcase": false, "constructor": false, "invocations": ["isEmpty"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}