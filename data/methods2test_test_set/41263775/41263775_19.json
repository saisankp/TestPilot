{"test_class": {"identifier": "StringStartsWithTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/StringStartsWithTest.java"}, "test_case": {"identifier": "testStringStartsWith", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStringStartsWith() {\n\n        Attribute<String, String> stringIdentity = new SelfAttribute<String>(String.class, \"identity\");\n        assertTrue(startsWith(stringIdentity, \"THIS\").matches(\"THIS IS A TEST\", noQueryOptions()));\n        assertFalse(startsWith(stringIdentity, \"TEST\").matches(\"THIS IS A TEST\", noQueryOptions()));\n        assertFalse(startsWith(stringIdentity, \"HIS\").matches(\"THIS IS A TEST\", noQueryOptions()));\n        assertTrue(startsWith(stringIdentity, \"\").matches(\"THIS IS A TEST\", noQueryOptions()));\n        assertTrue(startsWith(stringIdentity, \"\").matches(\"\", noQueryOptions()));\n        assertFalse(startsWith(stringIdentity, \"TEST\").matches(\"\", noQueryOptions()));\n    }", "signature": "void testStringStartsWith()", "full_signature": "@Test public void testStringStartsWith()", "class_method_signature": "StringStartsWithTest.testStringStartsWith()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "startsWith", "noQueryOptions", "assertFalse", "matches", "startsWith", "noQueryOptions", "assertFalse", "matches", "startsWith", "noQueryOptions", "assertTrue", "matches", "startsWith", "noQueryOptions", "assertTrue", "matches", "startsWith", "noQueryOptions", "assertFalse", "matches", "startsWith", "noQueryOptions"]}, "focal_class": {"identifier": "StringStartsWith", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [{"original_string": "private final A value;", "modifier": "private final", "type": "A", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "StringStartsWith", "parameters": "(Attribute<O, A> attribute, A value)", "modifiers": "public", "return": "", "signature": " StringStartsWith(Attribute<O, A> attribute, A value)", "full_signature": "public  StringStartsWith(Attribute<O, A> attribute, A value)", "class_method_signature": "StringStartsWith.StringStartsWith(Attribute<O, A> attribute, A value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "A", "signature": "A getValue()", "full_signature": "public A getValue()", "class_method_signature": "StringStartsWith.getValue()", "testcase": false, "constructor": false}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringStartsWith.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringStartsWith.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesValue", "parameters": "(CharSequence aValue, CharSequence bValue, QueryOptions queryOptions)", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "boolean", "signature": "boolean matchesValue(CharSequence aValue, CharSequence bValue, QueryOptions queryOptions)", "full_signature": "@SuppressWarnings(\"unused\") public static boolean matchesValue(CharSequence aValue, CharSequence bValue, QueryOptions queryOptions)", "class_method_signature": "StringStartsWith.matchesValue(CharSequence aValue, CharSequence bValue, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "StringStartsWith.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override protected int calcHashCode()", "class_method_signature": "StringStartsWith.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringStartsWith.toString()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/StringStartsWith.java"}, "focal_method": {"identifier": "StringStartsWith", "parameters": "(Attribute<O, A> attribute, A value)", "modifiers": "public", "return": "", "body": "public StringStartsWith(Attribute<O, A> attribute, A value) {\n        super(attribute);\n        this.value = checkQueryValueNotNull(value);\n    }", "signature": " StringStartsWith(Attribute<O, A> attribute, A value)", "full_signature": "public  StringStartsWith(Attribute<O, A> attribute, A value)", "class_method_signature": "StringStartsWith.StringStartsWith(Attribute<O, A> attribute, A value)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}