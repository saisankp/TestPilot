{"test_class": {"identifier": "FCMapTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String testDir = TestUtil.TEST_BASE_DIR + \"sdb/unit/level_2_table_test\";", "modifier": "private static", "type": "String", "declarator": "testDir = TestUtil.TEST_BASE_DIR + \"sdb/unit/level_2_table_test\"", "var_name": "testDir"}, {"original_string": "private FCMapTable mapTable;", "modifier": "private", "type": "FCMapTable", "declarator": "mapTable", "var_name": "mapTable"}], "file": "zava/src/test/java/com/ctriposs/sdb/table/FCMapTableTest.java"}, "test_case": {"identifier": "testLoopAndReopen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLoopAndReopen() throws IOException, ClassNotFoundException {\n\t\tlong createdTime = System.nanoTime();\n\t\tint loop =  32 * 1024;\n\t\tmapTable = new FCMapTable(testDir, 1, createdTime, loop);\n\n\t\tassertTrue(mapTable.getLevel() == 1);\n\t\tassertTrue(mapTable.getCreatedTime() == createdTime);\n\t\tassertTrue(mapTable.getAppendedSize() == 0);\n\t\tassertTrue(mapTable.isEmpty());\n\t\tassertTrue(mapTable.getBackFileSize() == HashMapTable.INIT_INDEX_FILE_SIZE + HashMapTable.INIT_DATA_FILE_SIZE  + HashMapTable.INDEX_ITEM_LENGTH);\n\t\tassertFalse(mapTable.isUsable());\n\n\n\t\tList<byte[]> list = new ArrayList<byte[]>();\n\t\tfor(int i = 0; i < loop; i++) {\n\t\t\tlist.add((\"key\" + i).getBytes());\n\t\t}\n\t\tCollections.sort(list, new Comparator<byte[]>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(byte[] arg0, byte[] arg1) {\n\t\t\t\tint hash0 = Arrays.hashCode(arg0);\n\t\t\t\tint hash1 = Arrays.hashCode(arg1);\n\t\t\t\tif (hash0 < hash1) return -1;\n\t\t\t\telse if (hash0 > hash1) return 1;\n\t\t\t\telse return 0;\n\t\t\t}\n\n\n\t\t});\n\n\t\tfor(int i = 0; i < loop; i++) {\n\t\t\tmapTable.appendNew(list.get(i), (\"value\" + i).getBytes(), -1);\n\t\t}\n\n\t\tassertTrue(mapTable.getAppendedSize() == loop);\n\n\t\tlong start = System.currentTimeMillis();\n\t\tfor(int i = 0; i < loop; i++) {\n\t\t\tGetResult result = mapTable.get((\"key\" + i).getBytes());\n\t\t\tassertTrue(result.isFound());\n\t\t}\n\t\tlong time = System.currentTimeMillis() - start;\n\t\tSystem.out.printf(\"Get %,d K ops per second%n\",\n\t\t\t\t(int) (loop / time));\n\n\t\tGetResult result = mapTable.get((\"key\" + loop).getBytes());\n\t\tassertFalse(result.isFound());\n\t\tassertFalse(result.isDeleted() || result.isExpired());\n\n\t\tmapTable.markUsable(true);\n\n\t\tmapTable.saveMetadata();\n\t\tmapTable.close();\n\n\t\tmapTable = new FCMapTable(testDir, mapTable.getFileName());\n\t\tassertTrue(mapTable.isUsable());\n\n\t\tassertTrue(mapTable.getAppendedSize() == loop);\n\n\t\tfor(int i = 0; i < loop; i++) {\n\t\t\tresult = mapTable.get((\"key\" + i).getBytes());\n\t\t\tassertTrue(result.isFound());\n\t\t}\n\n\t\tresult = mapTable.get((\"key\" + loop).getBytes());\n\t\tassertFalse(result.isFound());\n\t\tassertFalse(result.isDeleted() || result.isExpired());\n\n\t\tmapTable.markUsable(false);\n\n\t\tmapTable.saveMetadata();\n\t\tmapTable.close();\n\n\t\tmapTable = new FCMapTable(testDir, mapTable.getFileName());\n\t\tassertFalse(mapTable.isUsable());\n\n\t\tassertTrue(mapTable.getAppendedSize() == loop);\n\n\t\tfor(int i = 0; i < loop; i++) {\n\t\t\tresult = mapTable.get((\"key\" + i).getBytes());\n\t\t\tassertTrue(result.isFound());\n\t\t}\n\n\t}", "signature": "void testLoopAndReopen()", "full_signature": "@Test public void testLoopAndReopen()", "class_method_signature": "FCMapTableTest.testLoopAndReopen()", "testcase": true, "constructor": false, "invocations": ["nanoTime", "assertTrue", "getLevel", "assertTrue", "getCreatedTime", "assertTrue", "getAppendedSize", "assertTrue", "isEmpty", "assertTrue", "getBackFileSize", "assertFalse", "isUsable", "add", "getBytes", "sort", "hashCode", "hashCode", "appendNew", "get", "getBytes", "assertTrue", "getAppendedSize", "currentTimeMillis", "get", "getBytes", "assertTrue", "isFound", "currentTimeMillis", "printf", "get", "getBytes", "assertFalse", "isFound", "assertFalse", "isDeleted", "isExpired", "markUsable", "saveMetadata", "close", "getFileName", "assertTrue", "isUsable", "assertTrue", "getAppendedSize", "get", "getBytes", "assertTrue", "isFound", "get", "getBytes", "assertFalse", "isFound", "assertFalse", "isDeleted", "isExpired", "markUsable", "saveMetadata", "close", "getFileName", "assertFalse", "isUsable", "assertTrue", "getAppendedSize", "get", "getBytes", "assertTrue", "isFound"]}, "focal_class": {"identifier": "FCMapTable", "superclass": "extends AbstractSortedMapTable", "interfaces": "", "fields": [], "methods": [{"identifier": "FCMapTable", "parameters": "(String dir, int level, long createdTime, int expectedInsertions)", "modifiers": "public", "return": "", "signature": " FCMapTable(String dir, int level, long createdTime, int expectedInsertions)", "full_signature": "public  FCMapTable(String dir, int level, long createdTime, int expectedInsertions)", "class_method_signature": "FCMapTable.FCMapTable(String dir, int level, long createdTime, int expectedInsertions)", "testcase": false, "constructor": true}, {"identifier": "FCMapTable", "parameters": "(String dir, short shard, int level, long createdTime, int expectedInsertions)", "modifiers": "public", "return": "", "signature": " FCMapTable(String dir, short shard, int level, long createdTime, int expectedInsertions)", "full_signature": "public  FCMapTable(String dir, short shard, int level, long createdTime, int expectedInsertions)", "class_method_signature": "FCMapTable.FCMapTable(String dir, short shard, int level, long createdTime, int expectedInsertions)", "testcase": false, "constructor": true}, {"identifier": "FCMapTable", "parameters": "(String dir, String fileName)", "modifiers": "public", "return": "", "signature": " FCMapTable(String dir, String fileName)", "full_signature": "public  FCMapTable(String dir, String fileName)", "class_method_signature": "FCMapTable.FCMapTable(String dir, String fileName)", "testcase": false, "constructor": true}, {"identifier": "appendNew", "parameters": "(byte[] key, byte[] value, long timeToLive)", "modifiers": "public", "return": "IMapEntry", "signature": "IMapEntry appendNew(byte[] key, byte[] value, long timeToLive)", "full_signature": "public IMapEntry appendNew(byte[] key, byte[] value, long timeToLive)", "class_method_signature": "FCMapTable.appendNew(byte[] key, byte[] value, long timeToLive)", "testcase": false, "constructor": false}, {"identifier": "appendNew", "parameters": "(byte[] key, int keyHash, byte[] value, long timeToLive, long createdTime, boolean deleted, boolean compressed)", "modifiers": "@Override public", "return": "IMapEntry", "signature": "IMapEntry appendNew(byte[] key, int keyHash, byte[] value, long timeToLive, long createdTime, boolean deleted, boolean compressed)", "full_signature": "@Override public IMapEntry appendNew(byte[] key, int keyHash, byte[] value, long timeToLive, long createdTime, boolean deleted, boolean compressed)", "class_method_signature": "FCMapTable.appendNew(byte[] key, int keyHash, byte[] value, long timeToLive, long createdTime, boolean deleted, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "getMapEntry", "parameters": "(int index)", "modifiers": "@Override public", "return": "IMapEntry", "signature": "IMapEntry getMapEntry(int index)", "full_signature": "@Override public IMapEntry getMapEntry(int index)", "class_method_signature": "FCMapTable.getMapEntry(int index)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/ctriposs/sdb/table/FCMapTable.java"}, "focal_method": {"identifier": "appendNew", "parameters": "(byte[] key, byte[] value, long timeToLive)", "modifiers": "public", "return": "IMapEntry", "body": "public IMapEntry appendNew(byte[] key, byte[] value, long timeToLive) throws IOException {\n\t\treturn this.appendNew(key, Arrays.hashCode(key), value, timeToLive, System.currentTimeMillis(), false, false);\n\t}", "signature": "IMapEntry appendNew(byte[] key, byte[] value, long timeToLive)", "full_signature": "public IMapEntry appendNew(byte[] key, byte[] value, long timeToLive)", "class_method_signature": "FCMapTable.appendNew(byte[] key, byte[] value, long timeToLive)", "testcase": false, "constructor": false, "invocations": ["appendNew", "hashCode", "currentTimeMillis"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}