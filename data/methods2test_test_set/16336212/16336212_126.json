{"test_class": {"identifier": "IncidentDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AGENT_ID = \"\";", "modifier": "private static final", "type": "String", "declarator": "AGENT_ID = \"\"", "var_name": "AGENT_ID"}, {"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private IncidentDao incidentDao;", "modifier": "private", "type": "IncidentDao", "declarator": "incidentDao", "var_name": "incidentDao"}], "file": "agent/embedded/src/test/java/org/glowroot/agent/embedded/repo/IncidentDaoTest.java"}, "test_case": {"identifier": "shouldNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotExist() throws Exception {\n        AlertCondition alertCondition = AlertCondition.newBuilder()\n                .setMetricCondition(MetricCondition.newBuilder()\n                        .setMetric(\"transaction:x-percentile\")\n                        .setTransactionType(\"Web\")\n                        .setPercentile(OptionalDouble.newBuilder().setValue(95))\n                        .setThreshold(SECONDS.toNanos(2))\n                        .setTimePeriodSeconds(60)\n                        .setMinTransactionCount(100)\n                        .build())\n                .build();\n        assertThat(incidentDao.readOpenIncident(AGENT_ID, alertCondition, AlertSeverity.HIGH))\n                .isNull();\n    }", "signature": "void shouldNotExist()", "full_signature": "@Test public void shouldNotExist()", "class_method_signature": "IncidentDaoTest.shouldNotExist()", "testcase": true, "constructor": false, "invocations": ["build", "setMetricCondition", "newBuilder", "build", "setMinTransactionCount", "setTimePeriodSeconds", "setThreshold", "setPercentile", "setTransactionType", "setMetric", "newBuilder", "setValue", "newBuilder", "toNanos", "isNull", "assertThat", "readOpenIncident"]}, "focal_class": {"identifier": "IncidentDao", "superclass": "", "interfaces": "implements IncidentRepository", "fields": [{"original_string": "private static final String AGENT_ID = \"\";", "modifier": "private static final", "type": "String", "declarator": "AGENT_ID = \"\"", "var_name": "AGENT_ID"}, {"original_string": "private static final ImmutableList<Column> incidentColumns = ImmutableList.<Column>of(\n            ImmutableColumn.of(\"open_time\", ColumnType.BIGINT),\n            ImmutableColumn.of(\"resolve_time\", ColumnType.BIGINT),\n            ImmutableColumn.of(\"condition\", ColumnType.VARBINARY),\n            ImmutableColumn.of(\"severity\", ColumnType.VARCHAR),\n            ImmutableColumn.of(\"notification\", ColumnType.VARBINARY));", "modifier": "private static final", "type": "ImmutableList<Column>", "declarator": "incidentColumns = ImmutableList.<Column>of(\n            ImmutableColumn.of(\"open_time\", ColumnType.BIGINT),\n            ImmutableColumn.of(\"resolve_time\", ColumnType.BIGINT),\n            ImmutableColumn.of(\"condition\", ColumnType.VARBINARY),\n            ImmutableColumn.of(\"severity\", ColumnType.VARCHAR),\n            ImmutableColumn.of(\"notification\", ColumnType.VARBINARY))", "var_name": "incidentColumns"}, {"original_string": "private static final ImmutableList<Index> incidentIndexes = ImmutableList.<Index>of(\n            ImmutableIndex.of(\"incident_resolve_time_idx\", ImmutableList.of(\"resolve_time\")),\n            ImmutableIndex.of(\"incident_condition_idx\", ImmutableList.of(\"condition\")));", "modifier": "private static final", "type": "ImmutableList<Index>", "declarator": "incidentIndexes = ImmutableList.<Index>of(\n            ImmutableIndex.of(\"incident_resolve_time_idx\", ImmutableList.of(\"resolve_time\")),\n            ImmutableIndex.of(\"incident_condition_idx\", ImmutableList.of(\"condition\")))", "var_name": "incidentIndexes"}, {"original_string": "private final DataSource dataSource;", "modifier": "private final", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}], "methods": [{"identifier": "IncidentDao", "parameters": "(DataSource dataSource)", "modifiers": "", "return": "", "signature": " IncidentDao(DataSource dataSource)", "full_signature": "  IncidentDao(DataSource dataSource)", "class_method_signature": "IncidentDao.IncidentDao(DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "insertOpenIncident", "parameters": "(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity, AlertNotification notification, long openTime)", "modifiers": "@Override public", "return": "void", "signature": "void insertOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity, AlertNotification notification, long openTime)", "full_signature": "@Override public void insertOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity, AlertNotification notification, long openTime)", "class_method_signature": "IncidentDao.insertOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity, AlertNotification notification, long openTime)", "testcase": false, "constructor": false}, {"identifier": "readOpenIncident", "parameters": "(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "modifiers": "@Override public @Nullable", "return": "OpenIncident", "signature": "OpenIncident readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "full_signature": "@Override public @Nullable OpenIncident readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "class_method_signature": "IncidentDao.readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "testcase": false, "constructor": false}, {"identifier": "readOpenIncidents", "parameters": "(String agentRollupId)", "modifiers": "@Override public", "return": "List<OpenIncident>", "signature": "List<OpenIncident> readOpenIncidents(String agentRollupId)", "full_signature": "@Override public List<OpenIncident> readOpenIncidents(String agentRollupId)", "class_method_signature": "IncidentDao.readOpenIncidents(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "readAllOpenIncidents", "parameters": "()", "modifiers": "@Override public", "return": "List<OpenIncident>", "signature": "List<OpenIncident> readAllOpenIncidents()", "full_signature": "@Override public List<OpenIncident> readAllOpenIncidents()", "class_method_signature": "IncidentDao.readAllOpenIncidents()", "testcase": false, "constructor": false}, {"identifier": "resolveIncident", "parameters": "(OpenIncident incident, long resolveTime)", "modifiers": "@Override public", "return": "void", "signature": "void resolveIncident(OpenIncident incident, long resolveTime)", "full_signature": "@Override public void resolveIncident(OpenIncident incident, long resolveTime)", "class_method_signature": "IncidentDao.resolveIncident(OpenIncident incident, long resolveTime)", "testcase": false, "constructor": false}, {"identifier": "readResolvedIncidents", "parameters": "(long from)", "modifiers": "@Override public", "return": "List<ResolvedIncident>", "signature": "List<ResolvedIncident> readResolvedIncidents(long from)", "full_signature": "@Override public List<ResolvedIncident> readResolvedIncidents(long from)", "class_method_signature": "IncidentDao.readResolvedIncidents(long from)", "testcase": false, "constructor": false}, {"identifier": "deleteResolvedIncidentsBefore", "parameters": "(long resolvedTime)", "modifiers": "", "return": "void", "signature": "void deleteResolvedIncidentsBefore(long resolvedTime)", "full_signature": " void deleteResolvedIncidentsBefore(long resolvedTime)", "class_method_signature": "IncidentDao.deleteResolvedIncidentsBefore(long resolvedTime)", "testcase": false, "constructor": false}], "file": "agent/embedded/src/main/java/org/glowroot/agent/embedded/repo/IncidentDao.java"}, "focal_method": {"identifier": "readOpenIncident", "parameters": "(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "modifiers": "@Override public @Nullable", "return": "OpenIncident", "body": "@Override\n    public @Nullable OpenIncident readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity) throws Exception {\n        return dataSource.query(new SingleOpenIncident(condition, severity));\n    }", "signature": "OpenIncident readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "full_signature": "@Override public @Nullable OpenIncident readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "class_method_signature": "IncidentDao.readOpenIncident(String agentRollupId, AlertCondition condition,\n            AlertSeverity severity)", "testcase": false, "constructor": false, "invocations": ["query"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}