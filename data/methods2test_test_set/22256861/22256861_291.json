{"test_class": {"identifier": "C2rccModisAlgorithmTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/modis/C2rccModisAlgorithmTest.java"}, "test_case": {"identifier": "testIt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIt() throws Exception {\n        C2rccModisAlgorithm algo = new C2rccModisAlgorithm();\n\n        C2rccModisAlgorithm.Result result1 = algo.processPixel(\n                    new double[]{\n                                0.17401233, 0.14464998, 0.109189205,\n                                0.07873539, 0.07067424, 0.041668475,\n                                0.040452786, 0.032773286, 0.024377074\n                    },\n                    64.19979, 158.32169,\n                    24.818445, 102.8721,\n                    1019.4312, 277.9019);\n\n        assertNotNull(result1);\n        assertEquals(9, result1.rw.length);\n        assertEquals(5, result1.iops.length);\n\n\n//        // Line #1 in MER_RR__1PTACR20051013_outfile.txt\n//        double[] y1 = {5.415e+01, 7.946e+00, 6.420e+01, 2.482e+01, 5.545e+01 - 3.759e+00,\n//                       5.127e+00, 1.019e+03, 2.779e+02, 7.203e+01, 1.500e+01,\n//                       3.500e+01, 1.011e-02, 1.208e-02, 1.752e-02, 1.894e-02,\n//                       2.064e-02, 7.203e-03, 4.387e-03, 4.018e-03, 2.270e-03,\n//                       6.658e-04, 7.215e-04, 2.917e-04, 2.234e-01, 1.818e-01,\n//                       1.345e-01, 1.171e-01, 8.844e-02, 6.418e-02, 5.200e-02,\n//                       4.859e-02, 4.321e-02, 3.632e-02, 3.321e-02, 2.537e-02,\n//                       7.128e-01, 7.609e-01, 8.163e-01, 8.357e-01, 8.715e-01,\n//                       9.015e-01, 9.177e-01, 9.226e-01, 9.304e-01, 9.406e-01,\n//                       9.454e-01, 9.579e-01, 8.341e-01, 8.682e-01, 9.045e-01,\n//                       9.166e-01, 9.377e-01, 9.541e-01, 9.625e-01, 9.650e-01,\n//                       9.688e-01, 9.737e-01, 9.759e-01, 9.816e-01, 8.428e-02,\n//                       1.421e-01, 5.155e-02, 5.880e-01, 1.328e+00, 1.961e-02,\n//                       1.572e-02, 1.291e-02, 2.337e-01, 2.619e-01, 1.603e+00,\n//                       3.315e+00, 2.431e-01, 3.131e-01, 3.518e-01, 2.946e-02,\n//                       3.199e-02, 1.146e-01, 5.358e-02, 1.983e-01, 1.001e+00,\n//                       1.001e+00, 0000};\n//\n//        double[] rwExpected1 = new double[result1.rw.length];\n//        System.arraycopy(y1, 11, rwExpected1, 0, rwExpected1.length);\n//        assertArrayEquals(rwExpected1, result1.rw, 1e-4);\n//\n//        double[] iopsExpected1 = new double[result1.iops.length];\n//        System.arraycopy(y1, 59, iopsExpected1, 0, iopsExpected1.length);\n//        assertArrayEquals(iopsExpected1, result1.iops, 1e-2);\n    }", "signature": "void testIt()", "full_signature": "@Test public void testIt()", "class_method_signature": "C2rccModisAlgorithmTest.testIt()", "testcase": true, "constructor": false, "invocations": ["processPixel", "assertNotNull", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "C2rccModisAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int FLAG_INDEX_RTOSA_OOS = 0;", "modifier": "public static final", "type": "int", "declarator": "FLAG_INDEX_RTOSA_OOS = 0", "var_name": "FLAG_INDEX_RTOSA_OOS"}, {"original_string": "public static final int FLAG_INDEX_RTOSA_OOR = 1;", "modifier": "public static final", "type": "int", "declarator": "FLAG_INDEX_RTOSA_OOR = 1", "var_name": "FLAG_INDEX_RTOSA_OOR"}, {"original_string": "public static final int FLAG_INDEX_RHOW_OOR = 2;", "modifier": "public static final", "type": "int", "declarator": "FLAG_INDEX_RHOW_OOR = 2", "var_name": "FLAG_INDEX_RHOW_OOR"}, {"original_string": "public static final int FLAG_INDEX_VALID_PE = 31;", "modifier": "public static final", "type": "int", "declarator": "FLAG_INDEX_VALID_PE = 31", "var_name": "FLAG_INDEX_VALID_PE"}, {"original_string": "public final static int[] NN_INPUT_REFLEC_WAVELENGTHS = new int[]{\n                412,\n                443,\n                488,\n                531,\n                547,\n                667,\n                678,\n                748,\n                869\n    };", "modifier": "public final static", "type": "int[]", "declarator": "NN_INPUT_REFLEC_WAVELENGTHS = new int[]{\n                412,\n                443,\n                488,\n                531,\n                547,\n                667,\n                678,\n                748,\n                869\n    }", "var_name": "NN_INPUT_REFLEC_WAVELENGTHS"}, {"original_string": "public final static int[] ALL_REFLEC_WAVELENGTHS = new int[]{\n                412,\n                443,\n                469,\n                488,\n                531,\n                547,\n                555,\n                645,\n                667,\n                678,\n                748,\n                859,\n                869,\n                1240,\n                1640,\n                2130\n    };", "modifier": "public final static", "type": "int[]", "declarator": "ALL_REFLEC_WAVELENGTHS = new int[]{\n                412,\n                443,\n                469,\n                488,\n                531,\n                547,\n                555,\n                645,\n                667,\n                678,\n                748,\n                859,\n                869,\n                1240,\n                1640,\n                2130\n    }", "var_name": "ALL_REFLEC_WAVELENGTHS"}, {"original_string": "public final static double[] k_oz_per_wl = new double[]{\n                1.987E-03, // k_oz(1) =   Lambda(1) = 412\n                3.189E-03, // k_oz(2) =   Lambda(2) = 443\n                2.032E-02, // k_oz(3) =   Lambda(3) = 488\n                6.838E-02, // k_oz(4) =   Lambda(4) = 531\n                8.622E-02, // k_oz(5) =   Lambda(5) = 547\n                //             #Lambda(5) = 551\n                4.890E-02, // k_oz(6) =   Lambda(6) = 667\n                3.787E-02, // k_oz(7) =   Lambda(7) = 678\n                1.235E-02, // k_oz(8) =   Lambda(8) = 748\n                1.936E-03  // k_oz(9) =   Lambda(9) = 869\n    };", "modifier": "public final static", "type": "double[]", "declarator": "k_oz_per_wl = new double[]{\n                1.987E-03, // k_oz(1) =   Lambda(1) = 412\n                3.189E-03, // k_oz(2) =   Lambda(2) = 443\n                2.032E-02, // k_oz(3) =   Lambda(3) = 488\n                6.838E-02, // k_oz(4) =   Lambda(4) = 531\n                8.622E-02, // k_oz(5) =   Lambda(5) = 547\n                //             #Lambda(5) = 551\n                4.890E-02, // k_oz(6) =   Lambda(6) = 667\n                3.787E-02, // k_oz(7) =   Lambda(7) = 678\n                1.235E-02, // k_oz(8) =   Lambda(8) = 748\n                1.936E-03  // k_oz(9) =   Lambda(9) = 869\n    }", "var_name": "k_oz_per_wl"}, {"original_string": "private double salinity = 35.0;", "modifier": "private", "type": "double", "declarator": "salinity = 35.0", "var_name": "salinity"}, {"original_string": "private double temperature = 15.0;", "modifier": "private", "type": "double", "declarator": "temperature = 15.0", "var_name": "temperature"}, {"original_string": "double[] thresh_rtosaaaNNrat = {0.95, 1.05};", "modifier": "", "type": "double[]", "declarator": "thresh_rtosaaaNNrat = {0.95, 1.05}", "var_name": "thresh_rtosaaaNNrat"}, {"original_string": "double[] thresh_rwslope = {0.95, 1.05};", "modifier": "", "type": "double[]", "declarator": "thresh_rwslope = {0.95, 1.05}", "var_name": "thresh_rwslope"}, {"original_string": "private ThreadLocal<NNffbpAlphaTabFast> rtoa_rw_nn3;", "modifier": "private", "type": "ThreadLocal<NNffbpAlphaTabFast>", "declarator": "rtoa_rw_nn3", "var_name": "rtoa_rw_nn3"}, {"original_string": "private ThreadLocal<NNffbpAlphaTabFast> rw_IOP;", "modifier": "private", "type": "ThreadLocal<NNffbpAlphaTabFast>", "declarator": "rw_IOP", "var_name": "rw_IOP"}, {"original_string": "private ThreadLocal<NNffbpAlphaTabFast> rtoa_aaNN7;", "modifier": "private", "type": "ThreadLocal<NNffbpAlphaTabFast>", "declarator": "rtoa_aaNN7", "var_name": "rtoa_aaNN7"}], "methods": [{"identifier": "setTemperature", "parameters": "(double temperature)", "modifiers": "public", "return": "void", "signature": "void setTemperature(double temperature)", "full_signature": "public void setTemperature(double temperature)", "class_method_signature": "C2rccModisAlgorithm.setTemperature(double temperature)", "testcase": false, "constructor": false}, {"identifier": "setSalinity", "parameters": "(double salinity)", "modifiers": "public", "return": "void", "signature": "void setSalinity(double salinity)", "full_signature": "public void setSalinity(double salinity)", "class_method_signature": "C2rccModisAlgorithm.setSalinity(double salinity)", "testcase": false, "constructor": false}, {"identifier": "C2rccModisAlgorithm", "parameters": "()", "modifiers": "public", "return": "", "signature": " C2rccModisAlgorithm()", "full_signature": "public  C2rccModisAlgorithm()", "class_method_signature": "C2rccModisAlgorithm.C2rccModisAlgorithm()", "testcase": false, "constructor": true}, {"identifier": "processPixel", "parameters": "(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "modifiers": "public", "return": "Result", "signature": "Result processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "full_signature": "public Result processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "class_method_signature": "C2rccModisAlgorithm.processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "testcase": false, "constructor": false}, {"identifier": "nnhs", "parameters": "(String path)", "modifiers": "private", "return": "ThreadLocal<NNffbpAlphaTabFast>", "signature": "ThreadLocal<NNffbpAlphaTabFast> nnhs(String path)", "full_signature": "private ThreadLocal<NNffbpAlphaTabFast> nnhs(String path)", "class_method_signature": "C2rccModisAlgorithm.nnhs(String path)", "testcase": false, "constructor": false}, {"identifier": "readFully", "parameters": "(InputStream stream)", "modifiers": "private", "return": "String", "signature": "String readFully(InputStream stream)", "full_signature": "private String readFully(InputStream stream)", "class_method_signature": "C2rccModisAlgorithm.readFully(InputStream stream)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/modis/C2rccModisAlgorithm.java"}, "focal_method": {"identifier": "processPixel", "parameters": "(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "modifiers": "public", "return": "Result", "body": "public Result processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone) {\n\n        //  (9.2) compute angles\n        final double cos_sun_zen = cos(toRadians(sun_zeni));\n        final double cos_sensor_zen = cos(toRadians(sensor_zeni));\n        final double sin_sun = sin(toRadians(sun_zeni));\n        final double sin_sensor_zen = sin(toRadians(sensor_zeni));\n\n        final double azi_diff_rad = toRadians(view_azi - sun_azi);\n        final double cos_azi_diff = cos(azi_diff_rad);\n        final double sin_azi_diff = sin(azi_diff_rad);\n        final double azi_diff_deg = toDegrees(azi_diff_rad);\n\n        double x = sin_sensor_zen * cos_azi_diff;\n        double y = sin_sensor_zen * sin_azi_diff;\n        double z = cos_sensor_zen;\n\n        double[] r_tosa = new double[toa_ref.length];\n        for (int i = 0; i < toa_ref.length; i++) {\n            double trans_ozoned12 = exp(-(k_oz_per_wl[i] * ozone / 1000.0) / cos_sun_zen);\n            double trans_ozoneu12 = exp(-(k_oz_per_wl[i] * ozone / 1000.0) / cos_sensor_zen);\n            double trans_ozone12 = trans_ozoned12 * trans_ozoneu12;\n            r_tosa[i] = toa_ref[i] / trans_ozone12;\n        }\n        double[] log_rtosa = a_log(r_tosa);\n\n        // set NN input\n        double[] nn_in = new double[7 + log_rtosa.length];\n        nn_in[0] = sun_zeni;\n        nn_in[1] = x;\n        nn_in[2] = y;\n        nn_in[3] = z;\n        nn_in[4] = temperature;\n        nn_in[5] = salinity;\n        nn_in[6] = atm_press;\n        System.arraycopy(log_rtosa, 0, nn_in, 7, log_rtosa.length);\n\n        double[] log_rw = rtoa_rw_nn3.get().calc(nn_in);\n        double[] rw = a_exp(log_rw);\n\n         // (9.5) test out of scope spectra with autoassociative neural network\n        double[] log_rtosa_aann = rtoa_aaNN7.get().calc(nn_in);\n        double[] rtosa_aann = a_exp(log_rtosa_aann);\n        double[] rtosa_aaNNrat = a_div(rtosa_aann, r_tosa);\n        //rtosa_aaNNrat_a(ipix,:)=rtosa_aaNNrat;\n\n        int flags = 0;\n\n        // (9.6.1) set rho_toa out of scope flag\n        double rtosa_aaNNrat_min = a_min(rtosa_aaNNrat);\n        double rtosa_aaNNrat_max = a_max(rtosa_aaNNrat);\n        //double rtosa_aaNNrat_minmax_a = Math.max(rtosa_aaNNrat_max, 1.0 / rtosa_aaNNrat_min); // (ipix)\n\n        boolean flag_rtosa = false; // (ipix)\n        if (rtosa_aaNNrat_min < thresh_rtosaaaNNrat[0] || rtosa_aaNNrat_max > thresh_rtosaaaNNrat[1]) {\n            flag_rtosa = true; // set flag if difference of band 5 > threshold // (ipix)\n        }\n        flags = BitSetter.setFlag(flags, FLAG_INDEX_RTOSA_OOS, flag_rtosa);\n\n        // (9.6.2) test if input tosa spectrum is out of range\n        // mima=aa_rtosa_nn_bn7_9(5); // minima and maxima of aaNN input\n        double[] mi = rtoa_aaNN7.get().getInmin();\n        double[] ma = rtoa_aaNN7.get().getInmax();\n        boolean tosa_oor_flag = false; // (ipix)\n        // for iv=1:19,// variables\n        for (int iv = 0; iv < nn_in.length; iv++) { // variables\n            if (nn_in[iv] < mi[iv] || nn_in[iv] > ma[iv]) {\n                tosa_oor_flag = true; // (ipix)\n            }\n        }\n        flags = BitSetter.setFlag(flags, FLAG_INDEX_RTOSA_OOR, tosa_oor_flag);\n\n        // (9.10.1) NN compute IOPs from rw\n\n        // define input to water NNs\n        //nn_in_inv=[sun_zeni view_zeni azi_diff_deg temperature salinity log_rw(1:10)];\n        double[] nn_in_inv = new double[5 + 10];\n        nn_in_inv[0] = sun_zeni;\n        nn_in_inv[1] = sensor_zeni;\n        nn_in_inv[2] = azi_diff_deg;\n        nn_in_inv[3] = temperature;\n        nn_in_inv[4] = salinity;\n        System.arraycopy(log_rw, 0, nn_in_inv, 5, log_rw.length - 1);\n        double[] log_iops_nn1 = rw_IOP.get().calc(nn_in_inv);\n        double[] iops_nn1 = a_exp(log_iops_nn1);\n\n        // (9.10.2) test if input tosa spectrum is out of range\n        //mima=inv_nn7(5); // minima and maxima of aaNN input\n        mi = rw_IOP.get().getInmin();\n        ma = rw_IOP.get().getInmax();\n        boolean rw_oor_flag = false; // (ipix)\n        //for iv=1:15,// variables\n        for (int iv = 0; iv < mi.length; iv++) {\n            if (nn_in_inv[iv] < mi[iv] | nn_in_inv[iv] > ma[iv]) {\n                rw_oor_flag = true; // (ipix)\n            }\n        }\n        flags = BitSetter.setFlag(flags, FLAG_INDEX_RHOW_OOR, rw_oor_flag);\n\n// todo (nf): migrate following code to Java\n/*\n        // (9.14) compute combined IOPs and concentrations\n        // split IOPs\n        double log_conc_ap_nn1=log_iops_nn1[0];\n        double log_conc_ad_nn1=log_iops_nn1[1];\n        double log_conc_ag_nn1=log_iops_nn1[2];\n        double log_conc_bp_nn1=log_iops_nn1[3];\n        double log_conc_bw_nn1=log_iops_nn1[4];\n\n        double ap_a_nn1=exp(log_conc_ap_nn1);\n        double ad_a_nn1=exp(log_conc_ad_nn1);\n        double ag_a_nn1=exp(log_conc_ag_nn1);\n        double bp_a_nn1=exp(log_conc_bp_nn1);\n        double bw_a_nn1=exp(log_conc_bw_nn1);\n\n        // combine IOPs\n        double adg_a_nn1  = ad_a_nn1+ag_a_nn1;\n        double atot_a_nn1 = adg_a_nn1+ap_a_nn1;\n        double btot_a_nn1 = bp_a_nn1+bw_a_nn1;\n\n        // compute concentrations\n        double chl_a_nn1 = 21.0.*(ap_a_nn1)^(1.04);\n        double tsm_a_nn1 = btot_a_nn1*1.73;\n\n        // (9.15) )NN compute uncertainties\n        double diff_log_abs_iop=nnhs_ff(unc_biasc_nn1,log_iops_nn1);\n        double diff_log_abs_iop_a(ipix,:)=diff_log_abs_iop;\n        double unc_iop_rel(ipix,:)=(exp(diff_log_abs_iop)-1).*100;\n        double unc_iop_abs(ipix,:)=iop_nn1(ipix,:).*(1.0-exp(-diff_log_abs_iop));\n\n        double unc_abs_chl = 21.0.*unc_iop_abs(ipix,1).^(1.04);\n\n        // (9.16) NN compute uncertainties for combined IOPs and kd\n        double[] diff_log_abs_combi_kd=nnhs_ff(unc_biasc_atotkd_nn,log_iops_nn1);\n        double diff_log_abs_adg  = diff_log_abs_combi_kd[0];\n        double diff_log_abs_atot = diff_log_abs_combi_kd[1];\n        double diff_log_abs_btot = diff_log_abs_combi_kd[2];\n\n        double unc_abs_adg   = (1.0-exp(-diff_log_abs_adg))* adg_a_nn1;\n        double unc_abs_atot  = (1.0-exp(-diff_log_abs_atot))* atot_a_nn1;\n        double unc_abs_btot  = (1.0-exp(-diff_log_abs_btot))* btot_a_nn1;\n        double unc_abs_tsm = 1.73.*unc_abs_btot;\n*/\n\n        return new Result(rw, iops_nn1, r_tosa, rtosa_aann, rtosa_aaNNrat_min, rtosa_aaNNrat_max, flags);\n    }", "signature": "Result processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "full_signature": "public Result processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "class_method_signature": "C2rccModisAlgorithm.processPixel(double[] toa_ref,\n                               double sun_zeni,\n                               double sun_azi,\n                               double sensor_zeni,\n                               double view_azi,\n                               double atm_press,\n                               double ozone)", "testcase": false, "constructor": false, "invocations": ["cos", "toRadians", "cos", "toRadians", "sin", "toRadians", "sin", "toRadians", "toRadians", "cos", "sin", "toDegrees", "exp", "exp", "a_log", "arraycopy", "calc", "get", "a_exp", "calc", "get", "a_exp", "a_div", "a_min", "a_max", "setFlag", "getInmin", "get", "getInmax", "get", "setFlag", "arraycopy", "calc", "get", "a_exp", "getInmin", "get", "getInmax", "get", "setFlag"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}