{"test_class": {"identifier": "CSVParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CSVINPUT = \"a,b,c,d\\n\"\n                    + \" a , b , 1 2 \\n\"\n                    + \"\\\"foo baar\\\", b,\\n\"\n                    // + \"   \\\"foo\\n,,\\n\\\"\\\",,\\n\\\\\\\"\\\",d,e\\n\";\n                    + \"   \\\"foo\\n,,\\n\\\"\\\",,\\n\\\"\\\"\\\",d,e\\n\";", "modifier": "private static final", "type": "String", "declarator": "CSVINPUT = \"a,b,c,d\\n\"\n                    + \" a , b , 1 2 \\n\"\n                    + \"\\\"foo baar\\\", b,\\n\"\n                    // + \"   \\\"foo\\n,,\\n\\\"\\\",,\\n\\\\\\\"\\\",d,e\\n\";\n                    + \"   \\\"foo\\n,,\\n\\\"\\\",,\\n\\\"\\\"\\\",d,e\\n\"", "var_name": "CSVINPUT"}, {"original_string": "private static final String[][] RESULT = {\n            {\"a\", \"b\", \"c\", \"d\"},\n            {\"a\", \"b\", \"1 2\"},\n            {\"foo baar\", \"b\", \"\"},\n            {\"foo\\n,,\\n\\\",,\\n\\\"\", \"d\", \"e\"}\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "RESULT = {\n            {\"a\", \"b\", \"c\", \"d\"},\n            {\"a\", \"b\", \"1 2\"},\n            {\"foo baar\", \"b\", \"\"},\n            {\"foo\\n,,\\n\\\",,\\n\\\"\", \"d\", \"e\"}\n    }", "var_name": "RESULT"}], "file": "base/lang/src/test/java/leap/lang/csv/CSVParserTest.java"}, "test_case": {"identifier": "testGetRecords", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRecords() throws IOException {\n        final CSVParser parser = CSVParser.parse(CSVINPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(RESULT.length, records.size());\n        assertTrue(records.size() > 0);\n        for (int i = 0; i < RESULT.length; i++) {\n            assertArrayEquals(RESULT[i], records.get(i).values());\n        }\n    }", "signature": "void testGetRecords()", "full_signature": "@Test public void testGetRecords()", "class_method_signature": "CSVParserTest.testGetRecords()", "testcase": true, "constructor": false, "invocations": ["parse", "withIgnoreSurroundingSpaces", "getRecords", "assertEquals", "size", "assertTrue", "size", "assertArrayEquals", "values", "get"]}, "focal_class": {"identifier": "CSVParser", "superclass": "", "interfaces": "implements Iterable<CSVRecord>, Closeable", "fields": [{"original_string": "private final CSVFormat format;", "modifier": "private final", "type": "CSVFormat", "declarator": "format", "var_name": "format"}, {"original_string": "private final Map<String, Integer> headerMap;", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "headerMap", "var_name": "headerMap"}, {"original_string": "private final Lexer lexer;", "modifier": "private final", "type": "Lexer", "declarator": "lexer", "var_name": "lexer"}, {"original_string": "private final List<String> record = new ArrayList<String>();", "modifier": "private final", "type": "List<String>", "declarator": "record = new ArrayList<String>()", "var_name": "record"}, {"original_string": "private boolean readComment = true;", "modifier": "private", "type": "boolean", "declarator": "readComment = true", "var_name": "readComment"}, {"original_string": "private String recordComment;", "modifier": "private", "type": "String", "declarator": "recordComment", "var_name": "recordComment"}, {"original_string": "private long recordNumber;", "modifier": "private", "type": "long", "declarator": "recordNumber", "var_name": "recordNumber"}, {"original_string": "private final Token reusableToken = new Token();", "modifier": "private final", "type": "Token", "declarator": "reusableToken = new Token()", "var_name": "reusableToken"}], "methods": [{"identifier": "parse", "parameters": "(File file, final CSVFormat format)", "modifiers": "public static", "return": "CSVParser", "signature": "CSVParser parse(File file, final CSVFormat format)", "full_signature": "public static CSVParser parse(File file, final CSVFormat format)", "class_method_signature": "CSVParser.parse(File file, final CSVFormat format)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String string, final CSVFormat format)", "modifiers": "public static", "return": "CSVParser", "signature": "CSVParser parse(String string, final CSVFormat format)", "full_signature": "public static CSVParser parse(String string, final CSVFormat format)", "class_method_signature": "CSVParser.parse(String string, final CSVFormat format)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(URL url, Charset charset, final CSVFormat format)", "modifiers": "public static", "return": "CSVParser", "signature": "CSVParser parse(URL url, Charset charset, final CSVFormat format)", "full_signature": "public static CSVParser parse(URL url, Charset charset, final CSVFormat format)", "class_method_signature": "CSVParser.parse(URL url, Charset charset, final CSVFormat format)", "testcase": false, "constructor": false}, {"identifier": "CSVParser", "parameters": "(final Reader reader, final CSVFormat format)", "modifiers": "public", "return": "", "signature": " CSVParser(final Reader reader, final CSVFormat format)", "full_signature": "public  CSVParser(final Reader reader, final CSVFormat format)", "class_method_signature": "CSVParser.CSVParser(final Reader reader, final CSVFormat format)", "testcase": false, "constructor": true}, {"identifier": "addRecordValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addRecordValue()", "full_signature": "private void addRecordValue()", "class_method_signature": "CSVParser.addRecordValue()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "CSVParser.close()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLineNumber", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCurrentLineNumber()", "full_signature": "public long getCurrentLineNumber()", "class_method_signature": "CSVParser.getCurrentLineNumber()", "testcase": false, "constructor": false}, {"identifier": "getHeaderMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getHeaderMap()", "full_signature": "public Map<String, Integer> getHeaderMap()", "class_method_signature": "CSVParser.getHeaderMap()", "testcase": false, "constructor": false}, {"identifier": "getRecordNumber", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRecordNumber()", "full_signature": "public long getRecordNumber()", "class_method_signature": "CSVParser.getRecordNumber()", "testcase": false, "constructor": false}, {"identifier": "getRecords", "parameters": "()", "modifiers": "public", "return": "List<CSVRecord>", "signature": "List<CSVRecord> getRecords()", "full_signature": "public List<CSVRecord> getRecords()", "class_method_signature": "CSVParser.getRecords()", "testcase": false, "constructor": false}, {"identifier": "getRecords1", "parameters": "()", "modifiers": "", "return": "List<String[]>", "signature": "List<String[]> getRecords1()", "full_signature": " List<String[]> getRecords1()", "class_method_signature": "CSVParser.getRecords1()", "testcase": false, "constructor": false}, {"identifier": "initializeHeader", "parameters": "()", "modifiers": "private", "return": "Map<String, Integer>", "signature": "Map<String, Integer> initializeHeader()", "full_signature": "private Map<String, Integer> initializeHeader()", "class_method_signature": "CSVParser.initializeHeader()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "CSVParser.isClosed()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<CSVRecord>", "signature": "Iterator<CSVRecord> iterator()", "full_signature": "public Iterator<CSVRecord> iterator()", "class_method_signature": "CSVParser.iterator()", "testcase": false, "constructor": false}, {"identifier": "nextRecord", "parameters": "()", "modifiers": "", "return": "CSVRecord", "signature": "CSVRecord nextRecord()", "full_signature": " CSVRecord nextRecord()", "class_method_signature": "CSVParser.nextRecord()", "testcase": false, "constructor": false}, {"identifier": "nextRecord1", "parameters": "()", "modifiers": "", "return": "String[]", "signature": "String[] nextRecord1()", "full_signature": " String[] nextRecord1()", "class_method_signature": "CSVParser.nextRecord1()", "testcase": false, "constructor": false}, {"identifier": "tryNextRecord", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean tryNextRecord()", "full_signature": " boolean tryNextRecord()", "class_method_signature": "CSVParser.tryNextRecord()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/csv/CSVParser.java"}, "focal_method": {"identifier": "getRecords", "parameters": "()", "modifiers": "public", "return": "List<CSVRecord>", "body": "public List<CSVRecord> getRecords() throws IOException {\n        final List<CSVRecord> records = new ArrayList<CSVRecord>();\n        CSVRecord rec;\n        while ((rec = this.nextRecord()) != null) {\n            records.add(rec);\n        }\n        return records;\n    }", "signature": "List<CSVRecord> getRecords()", "full_signature": "public List<CSVRecord> getRecords()", "class_method_signature": "CSVParser.getRecords()", "testcase": false, "constructor": false, "invocations": ["nextRecord", "add"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}