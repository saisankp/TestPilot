{"test_class": {"identifier": "RaftActorSnapshotMessageSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class)", "var_name": "LOG"}, {"original_string": "@Mock\n    private DataPersistenceProvider mockPersistence;", "modifier": "@Mock\n    private", "type": "DataPersistenceProvider", "declarator": "mockPersistence", "var_name": "mockPersistence"}, {"original_string": "@Mock\n    private RaftActorBehavior mockBehavior;", "modifier": "@Mock\n    private", "type": "RaftActorBehavior", "declarator": "mockBehavior", "var_name": "mockBehavior"}, {"original_string": "@Mock\n    private RaftActorSnapshotCohort mockCohort;", "modifier": "@Mock\n    private", "type": "RaftActorSnapshotCohort", "declarator": "mockCohort", "var_name": "mockCohort"}, {"original_string": "@Mock\n    private SnapshotManager mockSnapshotManager;", "modifier": "@Mock\n    private", "type": "SnapshotManager", "declarator": "mockSnapshotManager", "var_name": "mockSnapshotManager"}, {"original_string": "@Mock\n    ActorRef mockRaftActorRef;", "modifier": "@Mock", "type": "ActorRef", "declarator": "mockRaftActorRef", "var_name": "mockRaftActorRef"}, {"original_string": "private RaftActorSnapshotMessageSupport support;", "modifier": "private", "type": "RaftActorSnapshotMessageSupport", "declarator": "support", "var_name": "support"}, {"original_string": "private RaftActorContext context;", "modifier": "private", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final DefaultConfigParamsImpl configParams = new DefaultConfigParamsImpl();", "modifier": "private final", "type": "DefaultConfigParamsImpl", "declarator": "configParams = new DefaultConfigParamsImpl()", "var_name": "configParams"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorSnapshotMessageSupportTest.java"}, "test_case": {"identifier": "testOnSaveSnapshotSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnSaveSnapshotSuccess() {\n\n        long sequenceNumber = 100;\n        long timeStamp = 1234L;\n        sendMessageToSupport(new SaveSnapshotSuccess(new SnapshotMetadata(\"foo\", sequenceNumber, timeStamp)));\n\n        verify(mockSnapshotManager).commit(eq(sequenceNumber), eq(timeStamp));\n    }", "signature": "void testOnSaveSnapshotSuccess()", "full_signature": "@Test public void testOnSaveSnapshotSuccess()", "class_method_signature": "RaftActorSnapshotMessageSupportTest.testOnSaveSnapshotSuccess()", "testcase": true, "constructor": false, "invocations": ["sendMessageToSupport", "commit", "verify", "eq", "eq"]}, "focal_class": {"identifier": "RaftActorSnapshotMessageSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Object COMMIT_SNAPSHOT = new Object() {\n        @Override\n        public String toString() {\n            return \"commit_snapshot\";\n        }\n    };", "modifier": "static final", "type": "Object", "declarator": "COMMIT_SNAPSHOT = new Object() {\n        @Override\n        public String toString() {\n            return \"commit_snapshot\";\n        }\n    }", "var_name": "COMMIT_SNAPSHOT"}, {"original_string": "private final RaftActorContext context;", "modifier": "private final", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final RaftActorSnapshotCohort cohort;", "modifier": "private final", "type": "RaftActorSnapshotCohort", "declarator": "cohort", "var_name": "cohort"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private FiniteDuration snapshotReplyActorTimeout = FiniteDuration.create(30, TimeUnit.SECONDS);", "modifier": "private", "type": "FiniteDuration", "declarator": "snapshotReplyActorTimeout = FiniteDuration.create(30, TimeUnit.SECONDS)", "var_name": "snapshotReplyActorTimeout"}], "methods": [{"identifier": "RaftActorSnapshotMessageSupport", "parameters": "(final RaftActorContext context, final RaftActorSnapshotCohort cohort)", "modifiers": "", "return": "", "signature": " RaftActorSnapshotMessageSupport(final RaftActorContext context, final RaftActorSnapshotCohort cohort)", "full_signature": "  RaftActorSnapshotMessageSupport(final RaftActorContext context, final RaftActorSnapshotCohort cohort)", "class_method_signature": "RaftActorSnapshotMessageSupport.RaftActorSnapshotMessageSupport(final RaftActorContext context, final RaftActorSnapshotCohort cohort)", "testcase": false, "constructor": true}, {"identifier": "getSnapshotCohort", "parameters": "()", "modifiers": "", "return": "RaftActorSnapshotCohort", "signature": "RaftActorSnapshotCohort getSnapshotCohort()", "full_signature": " RaftActorSnapshotCohort getSnapshotCohort()", "class_method_signature": "RaftActorSnapshotMessageSupport.getSnapshotCohort()", "testcase": false, "constructor": false}, {"identifier": "handleSnapshotMessage", "parameters": "(Object message, ActorRef sender)", "modifiers": "", "return": "boolean", "signature": "boolean handleSnapshotMessage(Object message, ActorRef sender)", "full_signature": " boolean handleSnapshotMessage(Object message, ActorRef sender)", "class_method_signature": "RaftActorSnapshotMessageSupport.handleSnapshotMessage(Object message, ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onCaptureSnapshotReply", "parameters": "(CaptureSnapshotReply reply)", "modifiers": "private", "return": "void", "signature": "void onCaptureSnapshotReply(CaptureSnapshotReply reply)", "full_signature": "private void onCaptureSnapshotReply(CaptureSnapshotReply reply)", "class_method_signature": "RaftActorSnapshotMessageSupport.onCaptureSnapshotReply(CaptureSnapshotReply reply)", "testcase": false, "constructor": false}, {"identifier": "onSaveSnapshotFailure", "parameters": "(SaveSnapshotFailure saveSnapshotFailure)", "modifiers": "private", "return": "void", "signature": "void onSaveSnapshotFailure(SaveSnapshotFailure saveSnapshotFailure)", "full_signature": "private void onSaveSnapshotFailure(SaveSnapshotFailure saveSnapshotFailure)", "class_method_signature": "RaftActorSnapshotMessageSupport.onSaveSnapshotFailure(SaveSnapshotFailure saveSnapshotFailure)", "testcase": false, "constructor": false}, {"identifier": "onSaveSnapshotSuccess", "parameters": "(SaveSnapshotSuccess success)", "modifiers": "private", "return": "void", "signature": "void onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "full_signature": "private void onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "class_method_signature": "RaftActorSnapshotMessageSupport.onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "testcase": false, "constructor": false}, {"identifier": "onApplySnapshot", "parameters": "(ApplySnapshot message)", "modifiers": "private", "return": "void", "signature": "void onApplySnapshot(ApplySnapshot message)", "full_signature": "private void onApplySnapshot(ApplySnapshot message)", "class_method_signature": "RaftActorSnapshotMessageSupport.onApplySnapshot(ApplySnapshot message)", "testcase": false, "constructor": false}, {"identifier": "onGetSnapshot", "parameters": "(ActorRef sender, GetSnapshot getSnapshot)", "modifiers": "private", "return": "void", "signature": "void onGetSnapshot(ActorRef sender, GetSnapshot getSnapshot)", "full_signature": "private void onGetSnapshot(ActorRef sender, GetSnapshot getSnapshot)", "class_method_signature": "RaftActorSnapshotMessageSupport.onGetSnapshot(ActorRef sender, GetSnapshot getSnapshot)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotReplyActorTimeout", "parameters": "(FiniteDuration snapshotReplyActorTimeout)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setSnapshotReplyActorTimeout(FiniteDuration snapshotReplyActorTimeout)", "full_signature": "@VisibleForTesting void setSnapshotReplyActorTimeout(FiniteDuration snapshotReplyActorTimeout)", "class_method_signature": "RaftActorSnapshotMessageSupport.setSnapshotReplyActorTimeout(FiniteDuration snapshotReplyActorTimeout)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActorSnapshotMessageSupport.java"}, "focal_method": {"identifier": "onSaveSnapshotSuccess", "parameters": "(SaveSnapshotSuccess success)", "modifiers": "private", "return": "void", "body": "private void onSaveSnapshotSuccess(SaveSnapshotSuccess success) {\n        long sequenceNumber = success.metadata().sequenceNr();\n\n        log.info(\"{}: SaveSnapshotSuccess received for snapshot, sequenceNr: {}\", context.getId(), sequenceNumber);\n\n        context.getSnapshotManager().commit(sequenceNumber, success.metadata().timestamp());\n    }", "signature": "void onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "full_signature": "private void onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "class_method_signature": "RaftActorSnapshotMessageSupport.onSaveSnapshotSuccess(SaveSnapshotSuccess success)", "testcase": false, "constructor": false, "invocations": ["sequenceNr", "metadata", "info", "getId", "commit", "getSnapshotManager", "timestamp", "metadata"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}