{"test_class": {"identifier": "XmlBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(XmlBeanTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(XmlBeanTest.class)", "var_name": "logger"}], "file": "ch-commons-xbean/src/test/java/com/cloudhopper/commons/xbean/XmlBeanTest.java"}, "test_case": {"identifier": "configureComplexWithPropertyNotFoundExceptionEnsureNoPropertiesChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void configureComplexWithPropertyNotFoundExceptionEnsureNoPropertiesChanged() throws Exception {\n        // build xml\n        StringBuilder string0 = new StringBuilder(200)\n                .append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\")\n                .append(\"<configuration>\\n\")\n                .append(\"   <url>http://www.google.com/</url>\\n\")\n                .append(\"   <server>\\n\")\n                .append(\"     <host>www2.google.com</host>\\n\")      // this should be changed\n                .append(\"     <port2>80</port2>\\n\")                 // this should cause an error to be thrown and caused \"server\" to not be saved\n                .append(\"   </server>\\n\")\n                .append(\"</configuration>\")\n                .append(\"\");\n\n        // parse xml\n        ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes());\n        XmlParser parser = new XmlParser();\n        XmlParser.Node rootNode = parser.parse(is);\n\n        // object we'll configure\n        ComplexConfiguration config = new ComplexConfiguration();\n\n        // configure it using default options\n        XmlBean bean = new XmlBean();\n\n        try {\n            bean.configure(rootNode, config);\n            Assert.fail(\"Configure should have failed\");\n        } catch (XmlBeanException e) {\n            // ignore it\n        }\n\n        // server should remain the same\n        Assert.assertNull(config.getServer());\n        Assert.assertEquals(\"http://www.google.com/\", config.url);\n    }", "signature": "void configureComplexWithPropertyNotFoundExceptionEnsureNoPropertiesChanged()", "full_signature": "@Test public void configureComplexWithPropertyNotFoundExceptionEnsureNoPropertiesChanged()", "class_method_signature": "XmlBeanTest.configureComplexWithPropertyNotFoundExceptionEnsureNoPropertiesChanged()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "getBytes", "toString", "parse", "configure", "fail", "assertNull", "getServer", "assertEquals"]}, "focal_class": {"identifier": "XmlBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String rootTag;", "modifier": "private", "type": "String", "declarator": "rootTag", "var_name": "rootTag"}, {"original_string": "private boolean accessPrivateProperties;", "modifier": "private", "type": "boolean", "declarator": "accessPrivateProperties", "var_name": "accessPrivateProperties"}], "methods": [{"identifier": "XmlBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlBean()", "full_signature": "public  XmlBean()", "class_method_signature": "XmlBean.XmlBean()", "testcase": false, "constructor": true}, {"identifier": "setRootTag", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void setRootTag(String value)", "full_signature": "public void setRootTag(String value)", "class_method_signature": "XmlBean.setRootTag(String value)", "testcase": false, "constructor": false}, {"identifier": "setAccessPrivateProperties", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setAccessPrivateProperties(boolean value)", "full_signature": "public void setAccessPrivateProperties(boolean value)", "class_method_signature": "XmlBean.setAccessPrivateProperties(boolean value)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String xml, Object obj)", "modifiers": "public", "return": "void", "signature": "void configure(String xml, Object obj)", "full_signature": "public void configure(String xml, Object obj)", "class_method_signature": "XmlBean.configure(String xml, Object obj)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String xml, Object obj, String xpath)", "modifiers": "public", "return": "void", "signature": "void configure(String xml, Object obj, String xpath)", "full_signature": "public void configure(String xml, Object obj, String xpath)", "class_method_signature": "XmlBean.configure(String xml, Object obj, String xpath)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(InputStream in, Object obj)", "modifiers": "public", "return": "void", "signature": "void configure(InputStream in, Object obj)", "full_signature": "public void configure(InputStream in, Object obj)", "class_method_signature": "XmlBean.configure(InputStream in, Object obj)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(InputStream in, Object obj, String xpath)", "modifiers": "public", "return": "void", "signature": "void configure(InputStream in, Object obj, String xpath)", "full_signature": "public void configure(InputStream in, Object obj, String xpath)", "class_method_signature": "XmlBean.configure(InputStream in, Object obj, String xpath)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(File file, Object obj)", "modifiers": "public", "return": "void", "signature": "void configure(File file, Object obj)", "full_signature": "public void configure(File file, Object obj)", "class_method_signature": "XmlBean.configure(File file, Object obj)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(File file, Object obj, String xpath)", "modifiers": "public", "return": "void", "signature": "void configure(File file, Object obj, String xpath)", "full_signature": "public void configure(File file, Object obj, String xpath)", "class_method_signature": "XmlBean.configure(File file, Object obj, String xpath)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(XmlParser.Node rootNode, Object obj, String xpath)", "modifiers": "public", "return": "void", "signature": "void configure(XmlParser.Node rootNode, Object obj, String xpath)", "full_signature": "public void configure(XmlParser.Node rootNode, Object obj, String xpath)", "class_method_signature": "XmlBean.configure(XmlParser.Node rootNode, Object obj, String xpath)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(XmlParser.Node rootNode, Object obj)", "modifiers": "public", "return": "void", "signature": "void configure(XmlParser.Node rootNode, Object obj)", "full_signature": "public void configure(XmlParser.Node rootNode, Object obj)", "class_method_signature": "XmlBean.configure(XmlParser.Node rootNode, Object obj)", "testcase": false, "constructor": false}, {"identifier": "doConfigure", "parameters": "(XmlParser.Node rootNode, Object obj, HashMap<String,String> properties, boolean checkForDuplicates, CollectionHelper ch)", "modifiers": "private", "return": "void", "signature": "void doConfigure(XmlParser.Node rootNode, Object obj, HashMap<String,String> properties, boolean checkForDuplicates, CollectionHelper ch)", "full_signature": "private void doConfigure(XmlParser.Node rootNode, Object obj, HashMap<String,String> properties, boolean checkForDuplicates, CollectionHelper ch)", "class_method_signature": "XmlBean.doConfigure(XmlParser.Node rootNode, Object obj, HashMap<String,String> properties, boolean checkForDuplicates, CollectionHelper ch)", "testcase": false, "constructor": false}, {"identifier": "createCollectionHelper", "parameters": "(XmlParser.Node node, Object obj, Object value, String propertyName, BeanProperty property, String valueAttrString, String keyAttrString)", "modifiers": "public", "return": "CollectionHelper", "signature": "CollectionHelper createCollectionHelper(XmlParser.Node node, Object obj, Object value, String propertyName, BeanProperty property, String valueAttrString, String keyAttrString)", "full_signature": "public CollectionHelper createCollectionHelper(XmlParser.Node node, Object obj, Object value, String propertyName, BeanProperty property, String valueAttrString, String keyAttrString)", "class_method_signature": "XmlBean.createCollectionHelper(XmlParser.Node node, Object obj, Object value, String propertyName, BeanProperty property, String valueAttrString, String keyAttrString)", "testcase": false, "constructor": false}], "file": "ch-commons-xbean/src/main/java/com/cloudhopper/commons/xbean/XmlBean.java"}, "focal_method": {"identifier": "configure", "parameters": "(String xml, Object obj)", "modifiers": "public", "return": "void", "body": "public void configure(String xml, Object obj) throws XmlBeanException, IOException, SAXException {\n        configure(xml, obj, null);\n    }", "signature": "void configure(String xml, Object obj)", "full_signature": "public void configure(String xml, Object obj)", "class_method_signature": "XmlBean.configure(String xml, Object obj)", "testcase": false, "constructor": false, "invocations": ["configure"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}