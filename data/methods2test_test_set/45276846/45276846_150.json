{"test_class": {"identifier": "TestRoundRobinOperationQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "public int count = 10000;", "modifier": "public", "type": "int", "declarator": "count = 10000", "var_name": "count"}, {"original_string": "public int keyCount = 10;", "modifier": "public", "type": "int", "declarator": "keyCount = 10", "var_name": "keyCount"}, {"original_string": "public int iterationCount = 3;", "modifier": "public", "type": "int", "declarator": "iterationCount = 3", "var_name": "iterationCount"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestRoundRobinOperationQueue.java"}, "test_case": {"identifier": "testLimitDifferentKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLimitDifferentKeys() {\n        RoundRobinOperationQueue q = new RoundRobinOperationQueue(\"sayonara\", 2);\n        assertTrue(q.offer(\"k1\", Operation.createGet(URI.create(\"/test\"))));\n        assertTrue(q.offer(\"k2\", Operation.createGet(URI.create(\"/test\"))));\n        Operation excess = Operation.createGet(URI.create(\"/test\"));\n        assertFalse(q.offer(\"k3\", excess));\n        assertEquals(503, excess.getStatusCode());\n        assertTrue(excess.getErrorResponseBody().message.contains(\"sayonara\"));\n    }", "signature": "void testLimitDifferentKeys()", "full_signature": "@Test public void testLimitDifferentKeys()", "class_method_signature": "TestRoundRobinOperationQueue.testLimitDifferentKeys()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "offer", "createGet", "create", "assertTrue", "offer", "createGet", "create", "createGet", "create", "assertFalse", "offer", "assertEquals", "getStatusCode", "assertTrue", "contains", "getErrorResponseBody"]}, "focal_class": {"identifier": "RoundRobinOperationQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INITIAL_CAPACITY = 256;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_CAPACITY = 256", "var_name": "INITIAL_CAPACITY"}, {"original_string": "private final NavigableMap<String, Queue<Operation>> queues = new ConcurrentSkipListMap<>();", "modifier": "private final", "type": "NavigableMap<String, Queue<Operation>>", "declarator": "queues = new ConcurrentSkipListMap<>()", "var_name": "queues"}, {"original_string": "private String activeKey = \"\";", "modifier": "private", "type": "String", "declarator": "activeKey = \"\"", "var_name": "activeKey"}, {"original_string": "private String description = \"\";", "modifier": "private", "type": "String", "declarator": "description = \"\"", "var_name": "description"}, {"original_string": "private final int limit;", "modifier": "private final", "type": "int", "declarator": "limit", "var_name": "limit"}, {"original_string": "private int totalCount;", "modifier": "private", "type": "int", "declarator": "totalCount", "var_name": "totalCount"}], "methods": [{"identifier": "RoundRobinOperationQueue", "parameters": "(String description, int limit)", "modifiers": "public", "return": "", "signature": " RoundRobinOperationQueue(String description, int limit)", "full_signature": "public  RoundRobinOperationQueue(String description, int limit)", "class_method_signature": "RoundRobinOperationQueue.RoundRobinOperationQueue(String description, int limit)", "testcase": false, "constructor": true}, {"identifier": "offer", "parameters": "(String key, Operation op)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean offer(String key, Operation op)", "full_signature": "public synchronized boolean offer(String key, Operation op)", "class_method_signature": "RoundRobinOperationQueue.offer(String key, Operation op)", "testcase": false, "constructor": false}, {"identifier": "makeQueue", "parameters": "(String key)", "modifiers": "private", "return": "Queue<Operation>", "signature": "Queue<Operation> makeQueue(String key)", "full_signature": "private Queue<Operation> makeQueue(String key)", "class_method_signature": "RoundRobinOperationQueue.makeQueue(String key)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "public synchronized", "return": "Operation", "signature": "Operation poll()", "full_signature": "public synchronized Operation poll()", "class_method_signature": "RoundRobinOperationQueue.poll()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "RoundRobinOperationQueue.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "sizesByKey", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> sizesByKey()", "full_signature": "public Map<String, Integer> sizesByKey()", "class_method_signature": "RoundRobinOperationQueue.sizesByKey()", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/RoundRobinOperationQueue.java"}, "focal_method": {"identifier": "offer", "parameters": "(String key, Operation op)", "modifiers": "public synchronized", "return": "boolean", "body": "public synchronized boolean offer(String key, Operation op) {\n        if (key == null || op == null) {\n            throw new IllegalArgumentException(format(\"key and operation are required (%s)\", this.description));\n        }\n\n        if (this.totalCount >= this.limit) {\n            op.setStatusCode(Operation.STATUS_CODE_UNAVAILABLE);\n            op.fail(new CancellationException(format(\"Limit for queue %s exceeded: %d\", this.description, this.limit)));\n            return false;\n        }\n\n        Queue<Operation> q = this.queues.computeIfAbsent(key, this::makeQueue);\n        q.offer(op);\n        this.totalCount++;\n\n        return true;\n    }", "signature": "boolean offer(String key, Operation op)", "full_signature": "public synchronized boolean offer(String key, Operation op)", "class_method_signature": "RoundRobinOperationQueue.offer(String key, Operation op)", "testcase": false, "constructor": false, "invocations": ["format", "setStatusCode", "fail", "format", "computeIfAbsent", "offer"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}