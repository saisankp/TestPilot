{"test_class": {"identifier": "MenuTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"nav2\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"nav2\"", "var_name": "testdataDirectory"}], "file": "ontopia-navigator/src/test/java/net/ontopia/topicmaps/nav2/portlets/pojos/MenuTest.java"}, "test_case": {"identifier": "testDeleteMenu", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeleteMenu() throws IOException {\n    // initialize\n    TopicMapIF tm = load(\"condition-menu.ltm\");\n    TopicIF topic = getTopicById(tm, \"menu1\");\n    Assert.assertTrue(\"menu topic not found\",\n               topic != null);\n\n    // test menu\n    Menu menu = new Menu(topic);\n\t\n\t// names must have types, check presence\n\tTopicIF tname = tm.getTopicBySubjectIdentifier(PSI.getSAMNameType());\n\tAssert.assertNotNull(tname);\n\t\n\t// 23 topics + nametype = 24\n    Assert.assertEquals(24, tm.getTopics().size());\n    Assert.assertEquals(6, tm.getAssociations().size());\n    menu.delete();\n\t\n\t// 20 topics + nametype = 21\n    Assert.assertEquals(21, tm.getTopics().size());\n    Assert.assertEquals(1, tm.getAssociations().size());\n\n    Assert.assertNull(topic.getTopicMap());\n    // Since the topic is not part of a topic map anymore,\n    // there's no further persistence tests to do.\n    // The menu cannot be reconstructed as it doesn't exist.\n  }", "signature": "void testDeleteMenu()", "full_signature": "@Test public void testDeleteMenu()", "class_method_signature": "MenuTest.testDeleteMenu()", "testcase": true, "constructor": false, "invocations": ["load", "getTopicById", "assertTrue", "getTopicBySubjectIdentifier", "getSAMNameType", "assertNotNull", "assertEquals", "size", "getTopics", "assertEquals", "size", "getAssociations", "delete", "assertEquals", "size", "getTopics", "assertEquals", "size", "getAssociations", "assertNull", "getTopicMap"]}, "focal_class": {"identifier": "Menu", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TopicIF topic;", "modifier": "private", "type": "TopicIF", "declarator": "topic", "var_name": "topic"}, {"original_string": "private TopicIF owner;", "modifier": "private", "type": "TopicIF", "declarator": "owner", "var_name": "owner"}], "methods": [{"identifier": "Menu", "parameters": "(TopicIF topic)", "modifiers": "public", "return": "", "signature": " Menu(TopicIF topic)", "full_signature": "public  Menu(TopicIF topic)", "class_method_signature": "Menu.Menu(TopicIF topic)", "testcase": false, "constructor": true}, {"identifier": "getTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTitle()", "full_signature": "public String getTitle()", "class_method_signature": "Menu.getTitle()", "testcase": false, "constructor": false}, {"identifier": "getTopic", "parameters": "()", "modifiers": "public", "return": "TopicIF", "signature": "TopicIF getTopic()", "full_signature": "public TopicIF getTopic()", "class_method_signature": "Menu.getTopic()", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "public", "return": "TopicIF", "signature": "TopicIF getOwner()", "full_signature": "public TopicIF getOwner()", "class_method_signature": "Menu.getOwner()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getChildren()", "full_signature": "public List getChildren()", "class_method_signature": "Menu.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getHasChildren", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getHasChildren()", "full_signature": "public boolean getHasChildren()", "class_method_signature": "Menu.getHasChildren()", "testcase": false, "constructor": false}, {"identifier": "setTitle", "parameters": "(String title)", "modifiers": "public", "return": "void", "signature": "void setTitle(String title)", "full_signature": "public void setTitle(String title)", "class_method_signature": "Menu.setTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "setOwner", "parameters": "(TopicIF owner)", "modifiers": "public", "return": "void", "signature": "void setOwner(TopicIF owner)", "full_signature": "public void setOwner(TopicIF owner)", "class_method_signature": "Menu.setOwner(TopicIF owner)", "testcase": false, "constructor": false}, {"identifier": "createHeading", "parameters": "(String title)", "modifiers": "public", "return": "Heading", "signature": "Heading createHeading(String title)", "full_signature": "public Heading createHeading(String title)", "class_method_signature": "Menu.createHeading(String title)", "testcase": false, "constructor": false}, {"identifier": "createItem", "parameters": "(String title)", "modifiers": "public", "return": "Item", "signature": "Item createItem(String title)", "full_signature": "public Item createItem(String title)", "class_method_signature": "Menu.createItem(String title)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void delete()", "full_signature": "public void delete()", "class_method_signature": "Menu.delete()", "testcase": false, "constructor": false}, {"identifier": "buildHeading", "parameters": "(TopicIF topic)", "modifiers": "private static", "return": "Heading", "signature": "Heading buildHeading(TopicIF topic)", "full_signature": "private static Heading buildHeading(TopicIF topic)", "class_method_signature": "Menu.buildHeading(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "buildItem", "parameters": "(TopicIF topic)", "modifiers": "private static", "return": "Item", "signature": "Item buildItem(TopicIF topic)", "full_signature": "private static Item buildItem(TopicIF topic)", "class_method_signature": "Menu.buildItem(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "buildChildren", "parameters": "(TopicIF topic)", "modifiers": "private static", "return": "List", "signature": "List buildChildren(TopicIF topic)", "full_signature": "private static List buildChildren(TopicIF topic)", "class_method_signature": "Menu.buildChildren(TopicIF topic)", "testcase": false, "constructor": false}], "file": "ontopia-navigator/src/main/java/net/ontopia/topicmaps/nav2/portlets/pojos/Menu.java"}, "focal_method": {"identifier": "delete", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void delete() {\n    Collection children = getChildren();\n    Iterator childrenIt = children.iterator();\n    while (childrenIt.hasNext()) {\n      ChildIF currentChild = (ChildIF)childrenIt.next();\n      currentChild.delete();\n    }\n    \n    // Delete the topic, all associations it's part of and all its occurrences\n    topic.remove();\n  }", "signature": "void delete()", "full_signature": "public void delete()", "class_method_signature": "Menu.delete()", "testcase": false, "constructor": false, "invocations": ["getChildren", "iterator", "hasNext", "next", "delete", "remove"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}