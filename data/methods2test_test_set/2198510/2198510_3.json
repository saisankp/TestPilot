{"test_class": {"identifier": "TestFileChannel", "superclass": "extends TestFileChannelBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory\n          .getLogger(TestFileChannel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n          .getLogger(TestFileChannel.class)", "var_name": "LOG"}, {"original_string": "public static final String TEST_KEY = \"test_key\";", "modifier": "public static final", "type": "String", "declarator": "TEST_KEY = \"test_key\"", "var_name": "TEST_KEY"}], "file": "flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannel.java"}, "test_case": {"identifier": "testReferenceCounts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReferenceCounts() throws Exception {\n    Map<String, String> overrides = Maps.newHashMap();\n    overrides.put(FileChannelConfiguration.CHECKPOINT_INTERVAL, \"10000\");\n    overrides.put(FileChannelConfiguration.MAX_FILE_SIZE, \"150\");\n    final FileChannel channel = createFileChannel(overrides);\n    channel.start();\n    putEvents(channel, \"testing-reference-counting\", 1, 15);\n    Transaction tx = channel.getTransaction();\n    takeWithoutCommit(channel, tx, 10);\n    forceCheckpoint(channel);\n    tx.rollback();\n    //Since we did not commit the original transaction. now we should get 15\n    //events back.\n    final Set<String> takenEvents = Sets.newHashSet();\n    Executors.newSingleThreadExecutor().submit(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          takenEvents.addAll(takeEvents(channel, 15));\n        } catch (Exception ex) {\n          Throwables.propagate(ex);\n        }\n      }\n    }).get();\n    Assert.assertEquals(15, takenEvents.size());\n  }", "signature": "void testReferenceCounts()", "full_signature": "@Test public void testReferenceCounts()", "class_method_signature": "TestFileChannel.testReferenceCounts()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "put", "put", "createFileChannel", "start", "putEvents", "getTransaction", "takeWithoutCommit", "forceCheckpoint", "rollback", "newHashSet", "get", "submit", "newSingleThreadExecutor", "addAll", "takeEvents", "propagate", "assertEquals", "size"]}, "focal_class": {"identifier": "FileChannel", "superclass": "extends BasicChannelSemantics", "interfaces": "implements TransactionCapacitySupported", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileChannel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileChannel.class)", "var_name": "LOG"}, {"original_string": "private Integer capacity = 0;", "modifier": "private", "type": "Integer", "declarator": "capacity = 0", "var_name": "capacity"}, {"original_string": "private int keepAlive;", "modifier": "private", "type": "int", "declarator": "keepAlive", "var_name": "keepAlive"}, {"original_string": "protected Integer transactionCapacity = 0;", "modifier": "protected", "type": "Integer", "declarator": "transactionCapacity = 0", "var_name": "transactionCapacity"}, {"original_string": "private Long checkpointInterval = 0L;", "modifier": "private", "type": "Long", "declarator": "checkpointInterval = 0L", "var_name": "checkpointInterval"}, {"original_string": "private long maxFileSize;", "modifier": "private", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private long minimumRequiredSpace;", "modifier": "private", "type": "long", "declarator": "minimumRequiredSpace", "var_name": "minimumRequiredSpace"}, {"original_string": "private File checkpointDir;", "modifier": "private", "type": "File", "declarator": "checkpointDir", "var_name": "checkpointDir"}, {"original_string": "private File backupCheckpointDir;", "modifier": "private", "type": "File", "declarator": "backupCheckpointDir", "var_name": "backupCheckpointDir"}, {"original_string": "private File[] dataDirs;", "modifier": "private", "type": "File[]", "declarator": "dataDirs", "var_name": "dataDirs"}, {"original_string": "private Log log;", "modifier": "private", "type": "Log", "declarator": "log", "var_name": "log"}, {"original_string": "private volatile boolean open;", "modifier": "private volatile", "type": "boolean", "declarator": "open", "var_name": "open"}, {"original_string": "private volatile Throwable startupError;", "modifier": "private volatile", "type": "Throwable", "declarator": "startupError", "var_name": "startupError"}, {"original_string": "private Semaphore queueRemaining;", "modifier": "private", "type": "Semaphore", "declarator": "queueRemaining", "var_name": "queueRemaining"}, {"original_string": "private final ThreadLocal<FileBackedTransaction> transactions =\n      new ThreadLocal<FileBackedTransaction>();", "modifier": "private final", "type": "ThreadLocal<FileBackedTransaction>", "declarator": "transactions =\n      new ThreadLocal<FileBackedTransaction>()", "var_name": "transactions"}, {"original_string": "private String channelNameDescriptor = \"[channel=unknown]\";", "modifier": "private", "type": "String", "declarator": "channelNameDescriptor = \"[channel=unknown]\"", "var_name": "channelNameDescriptor"}, {"original_string": "private FileChannelCounter channelCounter;", "modifier": "private", "type": "FileChannelCounter", "declarator": "channelCounter", "var_name": "channelCounter"}, {"original_string": "private boolean useLogReplayV1;", "modifier": "private", "type": "boolean", "declarator": "useLogReplayV1", "var_name": "useLogReplayV1"}, {"original_string": "private boolean useFastReplay = false;", "modifier": "private", "type": "boolean", "declarator": "useFastReplay = false", "var_name": "useFastReplay"}, {"original_string": "private KeyProvider encryptionKeyProvider;", "modifier": "private", "type": "KeyProvider", "declarator": "encryptionKeyProvider", "var_name": "encryptionKeyProvider"}, {"original_string": "private String encryptionActiveKey;", "modifier": "private", "type": "String", "declarator": "encryptionActiveKey", "var_name": "encryptionActiveKey"}, {"original_string": "private String encryptionCipherProvider;", "modifier": "private", "type": "String", "declarator": "encryptionCipherProvider", "var_name": "encryptionCipherProvider"}, {"original_string": "private boolean useDualCheckpoints;", "modifier": "private", "type": "boolean", "declarator": "useDualCheckpoints", "var_name": "useDualCheckpoints"}, {"original_string": "private boolean compressBackupCheckpoint;", "modifier": "private", "type": "boolean", "declarator": "compressBackupCheckpoint", "var_name": "compressBackupCheckpoint"}, {"original_string": "private boolean fsyncPerTransaction;", "modifier": "private", "type": "boolean", "declarator": "fsyncPerTransaction", "var_name": "fsyncPerTransaction"}, {"original_string": "private int fsyncInterval;", "modifier": "private", "type": "int", "declarator": "fsyncInterval", "var_name": "fsyncInterval"}, {"original_string": "private boolean checkpointOnClose = true;", "modifier": "private", "type": "boolean", "declarator": "checkpointOnClose = true", "var_name": "checkpointOnClose"}], "methods": [{"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setName(String name)", "full_signature": "@Override public synchronized void setName(String name)", "class_method_signature": "FileChannel.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "FileChannel.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "FileChannel.start()", "testcase": false, "constructor": false}, {"identifier": "createLogBuilder", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Builder", "signature": "Builder createLogBuilder()", "full_signature": "@VisibleForTesting Builder createLogBuilder()", "class_method_signature": "FileChannel.createLogBuilder()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "FileChannel.stop()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileChannel.toString()", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "()", "modifiers": "@Override protected", "return": "BasicTransactionSemantics", "signature": "BasicTransactionSemantics createTransaction()", "full_signature": "@Override protected BasicTransactionSemantics createTransaction()", "class_method_signature": "FileChannel.createTransaction()", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getDepth()", "full_signature": "protected int getDepth()", "class_method_signature": "FileChannel.getDepth()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "", "return": "void", "signature": "void close()", "full_signature": " void close()", "class_method_signature": "FileChannel.close()", "testcase": false, "constructor": false}, {"identifier": "didFastReplay", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean didFastReplay()", "full_signature": "@VisibleForTesting boolean didFastReplay()", "class_method_signature": "FileChannel.didFastReplay()", "testcase": false, "constructor": false}, {"identifier": "didFullReplayDueToBadCheckpointException", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean didFullReplayDueToBadCheckpointException()", "full_signature": "@VisibleForTesting boolean didFullReplayDueToBadCheckpointException()", "class_method_signature": "FileChannel.didFullReplayDueToBadCheckpointException()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "FileChannel.isOpen()", "testcase": false, "constructor": false}, {"identifier": "setOpen", "parameters": "(boolean open)", "modifiers": "private", "return": "void", "signature": "void setOpen(boolean open)", "full_signature": "private void setOpen(boolean open)", "class_method_signature": "FileChannel.setOpen(boolean open)", "testcase": false, "constructor": false}, {"identifier": "checkpointBackupRestored", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean checkpointBackupRestored()", "full_signature": "@VisibleForTesting boolean checkpointBackupRestored()", "class_method_signature": "FileChannel.checkpointBackupRestored()", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Log", "signature": "Log getLog()", "full_signature": "@VisibleForTesting Log getLog()", "class_method_signature": "FileChannel.getLog()", "testcase": false, "constructor": false}, {"identifier": "getChannelCounter", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "FileChannelCounter", "signature": "FileChannelCounter getChannelCounter()", "full_signature": "@VisibleForTesting FileChannelCounter getChannelCounter()", "class_method_signature": "FileChannel.getChannelCounter()", "testcase": false, "constructor": false}, {"identifier": "getTransactionCapacity", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getTransactionCapacity()", "full_signature": "@Override public long getTransactionCapacity()", "class_method_signature": "FileChannel.getTransactionCapacity()", "testcase": false, "constructor": false}], "file": "flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FileChannel.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void start() {\n    LOG.info(\"Starting {}...\", this);\n    channelCounter.start();\n    try {\n      Builder builder = createLogBuilder();\n      log = builder.build();\n      log.replay();\n      setOpen(true);\n\n      int depth = getDepth();\n      Preconditions.checkState(queueRemaining.tryAcquire(depth),\n          \"Unable to acquire \" + depth + \" permits \" + channelNameDescriptor);\n      LOG.info(\"Queue Size after replay: \" + depth + \" \"\n          + channelNameDescriptor);\n    } catch (Throwable t) {\n      setOpen(false);\n      channelCounter.setUnhealthy(1);\n      startupError = t;\n      LOG.error(\"Failed to start the file channel \" + channelNameDescriptor, t);\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n    if (open) {\n      channelCounter.setChannelSize(getDepth());\n      channelCounter.setChannelCapacity(capacity);\n    }\n    super.start();\n  }", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "FileChannel.start()", "testcase": false, "constructor": false, "invocations": ["info", "start", "createLogBuilder", "build", "replay", "setOpen", "getDepth", "checkState", "tryAcquire", "info", "setOpen", "setUnhealthy", "error", "setChannelSize", "getDepth", "setChannelCapacity", "start"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}