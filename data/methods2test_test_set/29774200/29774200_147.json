{"test_class": {"identifier": "SonarTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    org.sonar.wsclient.Sonar sonar;", "modifier": "@Mock", "type": "org.sonar.wsclient.Sonar", "declarator": "sonar", "var_name": "sonar"}, {"original_string": "@Mock\n    GenericSoftwareClient genericSoftwareClient;", "modifier": "@Mock", "type": "GenericSoftwareClient", "declarator": "genericSoftwareClient", "var_name": "genericSoftwareClient"}, {"original_string": "Sonar sonarClient;", "modifier": "", "type": "Sonar", "declarator": "sonarClient", "var_name": "sonarClient"}], "file": "component/core/src/test/java/fr/norad/visuwall/providers/sonar/SonarTest.java"}, "test_case": {"identifier": "should_throw_exception_if_sonar_metrics_are_not_found", "parameters": "()", "modifiers": "@Test(expected = SonarMetricsNotFoundException.class) public", "return": "void", "body": "@Test(expected = SonarMetricsNotFoundException.class)\n    public void should_throw_exception_if_sonar_metrics_are_not_found() throws Exception {\n        Object call = genericSoftwareClient.resource(anyString(), any(Class.class));\n        when(call).thenThrow(new ResourceNotFoundException(\"not found\"));\n\n        sonarClient.findMetrics();\n    }", "signature": "void should_throw_exception_if_sonar_metrics_are_not_found()", "full_signature": "@Test(expected = SonarMetricsNotFoundException.class) public void should_throw_exception_if_sonar_metrics_are_not_found()", "class_method_signature": "SonarTest.should_throw_exception_if_sonar_metrics_are_not_found()", "testcase": true, "constructor": false, "invocations": ["resource", "anyString", "any", "thenThrow", "when", "findMetrics"]}, "focal_class": {"identifier": "Sonar", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    GenericSoftwareClient client;", "modifier": "@VisibleForTesting", "type": "GenericSoftwareClient", "declarator": "client", "var_name": "client"}, {"original_string": "@VisibleForTesting\n    org.sonar.wsclient.Sonar sonar;", "modifier": "@VisibleForTesting", "type": "org.sonar.wsclient.Sonar", "declarator": "sonar", "var_name": "sonar"}, {"original_string": "private String sonarUrl;", "modifier": "private", "type": "String", "declarator": "sonarUrl", "var_name": "sonarUrl"}], "methods": [{"identifier": "Sonar", "parameters": "(String url)", "modifiers": "public", "return": "", "signature": " Sonar(String url)", "full_signature": "public  Sonar(String url)", "class_method_signature": "Sonar.Sonar(String url)", "testcase": false, "constructor": true}, {"identifier": "Sonar", "parameters": "(String url, String login, String password)", "modifiers": "public", "return": "", "signature": " Sonar(String url, String login, String password)", "full_signature": "public  Sonar(String url, String login, String password)", "class_method_signature": "Sonar.Sonar(String url, String login, String password)", "testcase": false, "constructor": true}, {"identifier": "findMeasure", "parameters": "(String artifactId, String measureKey)", "modifiers": "public", "return": "Measure", "signature": "Measure findMeasure(String artifactId, String measureKey)", "full_signature": "public Measure findMeasure(String artifactId, String measureKey)", "class_method_signature": "Sonar.findMeasure(String artifactId, String measureKey)", "testcase": false, "constructor": false}, {"identifier": "findMeasureFromSonar", "parameters": "(String artifactId, String measureKey)", "modifiers": "private", "return": "Measure", "signature": "Measure findMeasureFromSonar(String artifactId, String measureKey)", "full_signature": "private Measure findMeasureFromSonar(String artifactId, String measureKey)", "class_method_signature": "Sonar.findMeasureFromSonar(String artifactId, String measureKey)", "testcase": false, "constructor": false}, {"identifier": "findResource", "parameters": "(String resourceId)", "modifiers": "public", "return": "Resource", "signature": "Resource findResource(String resourceId)", "full_signature": "public Resource findResource(String resourceId)", "class_method_signature": "Sonar.findResource(String resourceId)", "testcase": false, "constructor": false}, {"identifier": "findMetrics", "parameters": "()", "modifiers": "public", "return": "Map<String, SonarQualityMetric>", "signature": "Map<String, SonarQualityMetric> findMetrics()", "full_signature": "public Map<String, SonarQualityMetric> findMetrics()", "class_method_signature": "Sonar.findMetrics()", "testcase": false, "constructor": false}, {"identifier": "findProjects", "parameters": "()", "modifiers": "public", "return": "Projects", "signature": "Projects findProjects()", "full_signature": "public Projects findProjects()", "class_method_signature": "Sonar.findProjects()", "testcase": false, "constructor": false}, {"identifier": "findProject", "parameters": "(String projectKey)", "modifiers": "public", "return": "Project", "signature": "Project findProject(String projectKey)", "full_signature": "public Project findProject(String projectKey)", "class_method_signature": "Sonar.findProject(String projectKey)", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/providers/sonar/Sonar.java"}, "focal_method": {"identifier": "findMetrics", "parameters": "()", "modifiers": "public", "return": "Map<String, SonarQualityMetric>", "body": "public Map<String, SonarQualityMetric> findMetrics() throws SonarMetricsNotFoundException {\n        try {\n            String metricUrl = sonarUrl + \"/api/metrics?format=xml\";\n            SonarMetrics sonarMetrics = client.resource(metricUrl, SonarMetrics.class);\n            Map<String, SonarQualityMetric> qualityMetrics = new HashMap<String, SonarQualityMetric>();\n            for (SonarQualityMetric metric : sonarMetrics.metric) {\n                qualityMetrics.put(metric.getKey(), metric);\n            }\n            return qualityMetrics;\n        } catch (ResourceNotFoundException e) {\n            throw new SonarMetricsNotFoundException(\"Can't find sonar metrics with Sonar: \" + sonarUrl, e);\n        }\n    }", "signature": "Map<String, SonarQualityMetric> findMetrics()", "full_signature": "public Map<String, SonarQualityMetric> findMetrics()", "class_method_signature": "Sonar.findMetrics()", "testcase": false, "constructor": false, "invocations": ["resource", "put", "getKey"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}