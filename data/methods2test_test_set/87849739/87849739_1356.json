{"test_class": {"identifier": "ImmutableSubjectsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SubjectId KNOWN_SUBJECT_ID_1 = SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself1\");", "modifier": "private static final", "type": "SubjectId", "declarator": "KNOWN_SUBJECT_ID_1 = SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself1\")", "var_name": "KNOWN_SUBJECT_ID_1"}, {"original_string": "private static final SubjectId KNOWN_SUBJECT_ID_2 = SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself2\");", "modifier": "private static final", "type": "SubjectId", "declarator": "KNOWN_SUBJECT_ID_2 = SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself2\")", "var_name": "KNOWN_SUBJECT_ID_2"}, {"original_string": "private static final Subject SUBJECT_1 = ImmutableSubject.of(KNOWN_SUBJECT_ID_1);", "modifier": "private static final", "type": "Subject", "declarator": "SUBJECT_1 = ImmutableSubject.of(KNOWN_SUBJECT_ID_1)", "var_name": "SUBJECT_1"}, {"original_string": "private static final Subject SUBJECT_2 = ImmutableSubject.of(KNOWN_SUBJECT_ID_2);", "modifier": "private static final", "type": "Subject", "declarator": "SUBJECT_2 = ImmutableSubject.of(KNOWN_SUBJECT_ID_2)", "var_name": "SUBJECT_2"}], "file": "model/policies/src/test/java/org/eclipse/ditto/model/policies/ImmutableSubjectsTest.java"}, "test_case": {"identifier": "createResourcesWithSamePathsShouldFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createResourcesWithSamePathsShouldFail() {\n        final Collection<Subject> subjectList = Arrays.asList(SUBJECT_1, SUBJECT_1);\n\n        assertThatExceptionOfType(IllegalArgumentException.class)\n                .isThrownBy(() -> ImmutableSubjects.of(subjectList))\n                .withMessageStartingWith(\"There is more than one Subject with the ID\")\n                .withNoCause();\n    }", "signature": "void createResourcesWithSamePathsShouldFail()", "full_signature": "@Test public void createResourcesWithSamePathsShouldFail()", "class_method_signature": "ImmutableSubjectsTest.createResourcesWithSamePathsShouldFail()", "testcase": true, "constructor": false, "invocations": ["asList", "withNoCause", "withMessageStartingWith", "isThrownBy", "assertThatExceptionOfType", "of"]}, "focal_class": {"identifier": "ImmutableSubjects", "superclass": "", "interfaces": "implements Subjects", "fields": [{"original_string": "private final Map<SubjectId, Subject> subjects;", "modifier": "private final", "type": "Map<SubjectId, Subject>", "declarator": "subjects", "var_name": "subjects"}], "methods": [{"identifier": "ImmutableSubjects", "parameters": "(final Map<SubjectId, Subject> theSubjects)", "modifiers": "private", "return": "", "signature": " ImmutableSubjects(final Map<SubjectId, Subject> theSubjects)", "full_signature": "private  ImmutableSubjects(final Map<SubjectId, Subject> theSubjects)", "class_method_signature": "ImmutableSubjects.ImmutableSubjects(final Map<SubjectId, Subject> theSubjects)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final Iterable<Subject> subjects)", "modifiers": "public static", "return": "ImmutableSubjects", "signature": "ImmutableSubjects of(final Iterable<Subject> subjects)", "full_signature": "public static ImmutableSubjects of(final Iterable<Subject> subjects)", "class_method_signature": "ImmutableSubjects.of(final Iterable<Subject> subjects)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "ImmutableSubjects", "signature": "ImmutableSubjects fromJson(final JsonObject jsonObject)", "full_signature": "public static ImmutableSubjects fromJson(final JsonObject jsonObject)", "class_method_signature": "ImmutableSubjects.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "(final SubjectId subjectId)", "modifiers": "@Override public", "return": "Optional<Subject>", "signature": "Optional<Subject> getSubject(final SubjectId subjectId)", "full_signature": "@Override public Optional<Subject> getSubject(final SubjectId subjectId)", "class_method_signature": "ImmutableSubjects.getSubject(final SubjectId subjectId)", "testcase": false, "constructor": false}, {"identifier": "setSubject", "parameters": "(final Subject subject)", "modifiers": "@Override public", "return": "Subjects", "signature": "Subjects setSubject(final Subject subject)", "full_signature": "@Override public Subjects setSubject(final Subject subject)", "class_method_signature": "ImmutableSubjects.setSubject(final Subject subject)", "testcase": false, "constructor": false}, {"identifier": "createNewSubjectsWithNewSubject", "parameters": "(final Subject newSubject)", "modifiers": "private", "return": "Subjects", "signature": "Subjects createNewSubjectsWithNewSubject(final Subject newSubject)", "full_signature": "private Subjects createNewSubjectsWithNewSubject(final Subject newSubject)", "class_method_signature": "ImmutableSubjects.createNewSubjectsWithNewSubject(final Subject newSubject)", "testcase": false, "constructor": false}, {"identifier": "copySubjects", "parameters": "()", "modifiers": "private", "return": "Map<SubjectId, Subject>", "signature": "Map<SubjectId, Subject> copySubjects()", "full_signature": "private Map<SubjectId, Subject> copySubjects()", "class_method_signature": "ImmutableSubjects.copySubjects()", "testcase": false, "constructor": false}, {"identifier": "removeSubject", "parameters": "(final SubjectId subjectId)", "modifiers": "@Override public", "return": "Subjects", "signature": "Subjects removeSubject(final SubjectId subjectId)", "full_signature": "@Override public Subjects removeSubject(final SubjectId subjectId)", "class_method_signature": "ImmutableSubjects.removeSubject(final SubjectId subjectId)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ImmutableSubjects.getSize()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutableSubjects.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutableSubjects.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "subjectsToJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject subjectsToJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "private JsonObject subjectsToJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutableSubjects.subjectsToJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Subject>", "signature": "Iterator<Subject> iterator()", "full_signature": "@Override public Iterator<Subject> iterator()", "class_method_signature": "ImmutableSubjects.iterator()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<Subject>", "signature": "Stream<Subject> stream()", "full_signature": "@Override public Stream<Subject> stream()", "class_method_signature": "ImmutableSubjects.stream()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@SuppressWarnings({\"squid:MethodCyclomaticComplexity\", \"squid:S1067\"}) @Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@SuppressWarnings({\"squid:MethodCyclomaticComplexity\", \"squid:S1067\"}) @Override public boolean equals(final Object o)", "class_method_signature": "ImmutableSubjects.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableSubjects.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableSubjects.toString()", "testcase": false, "constructor": false}], "file": "model/policies/src/main/java/org/eclipse/ditto/model/policies/ImmutableSubjects.java"}, "focal_method": {"identifier": "of", "parameters": "(final Iterable<Subject> subjects)", "modifiers": "public static", "return": "ImmutableSubjects", "body": "public static ImmutableSubjects of(final Iterable<Subject> subjects) {\n        checkNotNull(subjects, \"subjects\");\n\n        final Map<SubjectId, Subject> subjectsMap = new HashMap<>();\n        subjects.forEach(subject -> {\n            final Subject existingSubject = subjectsMap.put(subject.getId(), subject);\n            if (null != existingSubject) {\n                final String msgTemplate = \"There is more than one Subject with the ID <{0}>!\";\n                throw new IllegalArgumentException(MessageFormat.format(msgTemplate, subject.getId()));\n            }\n        });\n\n        return new ImmutableSubjects(subjectsMap);\n    }", "signature": "ImmutableSubjects of(final Iterable<Subject> subjects)", "full_signature": "public static ImmutableSubjects of(final Iterable<Subject> subjects)", "class_method_signature": "ImmutableSubjects.of(final Iterable<Subject> subjects)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "forEach", "put", "getId", "format", "getId"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}