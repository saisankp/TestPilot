{"test_class": {"identifier": "HashedWheelTimerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java"}, "test_case": {"identifier": "newTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newTimeout() throws InterruptedException {\n        final Timer timer = newTimer();\n        for (int i = 0; i < 10; i++) {\n            timer.newTimeout(new PrintTask(), 1, TimeUnit.SECONDS);\n            Thread.sleep(1000);\n        }\n        Thread.sleep(5000);\n    }", "signature": "void newTimeout()", "full_signature": "@Test public void newTimeout()", "class_method_signature": "HashedWheelTimerTest.newTimeout()", "testcase": true, "constructor": false, "invocations": ["newTimer", "newTimeout", "sleep", "sleep"]}, "focal_class": {"identifier": "HashedWheelTimer", "superclass": "", "interfaces": "implements Timer", "fields": [{"original_string": "public static final String NAME = \"hased\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"hased\"", "var_name": "NAME"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(HashedWheelTimer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HashedWheelTimer.class)", "var_name": "logger"}, {"original_string": "private static final AtomicInteger INSTANCE_COUNTER = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "INSTANCE_COUNTER = new AtomicInteger()", "var_name": "INSTANCE_COUNTER"}, {"original_string": "private static final AtomicBoolean WARNED_TOO_MANY_INSTANCES = new AtomicBoolean();", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "WARNED_TOO_MANY_INSTANCES = new AtomicBoolean()", "var_name": "WARNED_TOO_MANY_INSTANCES"}, {"original_string": "private static final int INSTANCE_COUNT_LIMIT = 64;", "modifier": "private static final", "type": "int", "declarator": "INSTANCE_COUNT_LIMIT = 64", "var_name": "INSTANCE_COUNT_LIMIT"}, {"original_string": "private static final AtomicIntegerFieldUpdater<HashedWheelTimer> WORKER_STATE_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(HashedWheelTimer.class, \"workerState\");", "modifier": "private static final", "type": "AtomicIntegerFieldUpdater<HashedWheelTimer>", "declarator": "WORKER_STATE_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(HashedWheelTimer.class, \"workerState\")", "var_name": "WORKER_STATE_UPDATER"}, {"original_string": "private final Worker worker = new Worker();", "modifier": "private final", "type": "Worker", "declarator": "worker = new Worker()", "var_name": "worker"}, {"original_string": "private final Thread workerThread;", "modifier": "private final", "type": "Thread", "declarator": "workerThread", "var_name": "workerThread"}, {"original_string": "private static final int WORKER_STATE_INIT = 0;", "modifier": "private static final", "type": "int", "declarator": "WORKER_STATE_INIT = 0", "var_name": "WORKER_STATE_INIT"}, {"original_string": "private static final int WORKER_STATE_STARTED = 1;", "modifier": "private static final", "type": "int", "declarator": "WORKER_STATE_STARTED = 1", "var_name": "WORKER_STATE_STARTED"}, {"original_string": "private static final int WORKER_STATE_SHUTDOWN = 2;", "modifier": "private static final", "type": "int", "declarator": "WORKER_STATE_SHUTDOWN = 2", "var_name": "WORKER_STATE_SHUTDOWN"}, {"original_string": "@SuppressWarnings({\"unused\", \"FieldMayBeFinal\"})\n    private volatile int workerState;", "modifier": "@SuppressWarnings({\"unused\", \"FieldMayBeFinal\"})\n    private volatile", "type": "int", "declarator": "workerState", "var_name": "workerState"}, {"original_string": "private final long tickDuration;", "modifier": "private final", "type": "long", "declarator": "tickDuration", "var_name": "tickDuration"}, {"original_string": "private final HashedWheelBucket[] wheel;", "modifier": "private final", "type": "HashedWheelBucket[]", "declarator": "wheel", "var_name": "wheel"}, {"original_string": "private final int mask;", "modifier": "private final", "type": "int", "declarator": "mask", "var_name": "mask"}, {"original_string": "private final CountDownLatch startTimeInitialized = new CountDownLatch(1);", "modifier": "private final", "type": "CountDownLatch", "declarator": "startTimeInitialized = new CountDownLatch(1)", "var_name": "startTimeInitialized"}, {"original_string": "private final Queue<HashedWheelTimeout> timeouts = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "Queue<HashedWheelTimeout>", "declarator": "timeouts = new LinkedBlockingQueue<>()", "var_name": "timeouts"}, {"original_string": "private final Queue<HashedWheelTimeout> cancelledTimeouts = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "Queue<HashedWheelTimeout>", "declarator": "cancelledTimeouts = new LinkedBlockingQueue<>()", "var_name": "cancelledTimeouts"}, {"original_string": "private final AtomicLong pendingTimeouts = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "pendingTimeouts = new AtomicLong(0)", "var_name": "pendingTimeouts"}, {"original_string": "private final long maxPendingTimeouts;", "modifier": "private final", "type": "long", "declarator": "maxPendingTimeouts", "var_name": "maxPendingTimeouts"}, {"original_string": "private volatile long startTime;", "modifier": "private volatile", "type": "long", "declarator": "startTime", "var_name": "startTime"}], "methods": [{"identifier": "HashedWheelTimer", "parameters": "()", "modifiers": "public", "return": "", "signature": " HashedWheelTimer()", "full_signature": "public  HashedWheelTimer()", "class_method_signature": "HashedWheelTimer.HashedWheelTimer()", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(long tickDuration, TimeUnit unit)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(long tickDuration, TimeUnit unit)", "full_signature": "public  HashedWheelTimer(long tickDuration, TimeUnit unit)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(long tickDuration, TimeUnit unit)", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(long tickDuration, TimeUnit unit, int ticksPerWheel)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(long tickDuration, TimeUnit unit, int ticksPerWheel)", "full_signature": "public  HashedWheelTimer(long tickDuration, TimeUnit unit, int ticksPerWheel)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(long tickDuration, TimeUnit unit, int ticksPerWheel)", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(ThreadFactory threadFactory)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(ThreadFactory threadFactory)", "full_signature": "public  HashedWheelTimer(ThreadFactory threadFactory)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(ThreadFactory threadFactory)", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(\n            ThreadFactory threadFactory, long tickDuration, TimeUnit unit)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(\n            ThreadFactory threadFactory, long tickDuration, TimeUnit unit)", "full_signature": "public  HashedWheelTimer(\n            ThreadFactory threadFactory, long tickDuration, TimeUnit unit)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(\n            ThreadFactory threadFactory, long tickDuration, TimeUnit unit)", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel)", "full_signature": "public  HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel)", "testcase": false, "constructor": true}, {"identifier": "HashedWheelTimer", "parameters": "(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel,\n            long maxPendingTimeouts)", "modifiers": "public", "return": "", "signature": " HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel,\n            long maxPendingTimeouts)", "full_signature": "public  HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel,\n            long maxPendingTimeouts)", "class_method_signature": "HashedWheelTimer.HashedWheelTimer(\n            ThreadFactory threadFactory,\n            long tickDuration, TimeUnit unit, int ticksPerWheel,\n            long maxPendingTimeouts)", "testcase": false, "constructor": true}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "HashedWheelTimer.finalize()", "testcase": false, "constructor": false}, {"identifier": "createWheel", "parameters": "(int ticksPerWheel)", "modifiers": "private static", "return": "HashedWheelBucket[]", "signature": "HashedWheelBucket[] createWheel(int ticksPerWheel)", "full_signature": "private static HashedWheelBucket[] createWheel(int ticksPerWheel)", "class_method_signature": "HashedWheelTimer.createWheel(int ticksPerWheel)", "testcase": false, "constructor": false}, {"identifier": "normalizeTicksPerWheel", "parameters": "(int ticksPerWheel)", "modifiers": "private static", "return": "int", "signature": "int normalizeTicksPerWheel(int ticksPerWheel)", "full_signature": "private static int normalizeTicksPerWheel(int ticksPerWheel)", "class_method_signature": "HashedWheelTimer.normalizeTicksPerWheel(int ticksPerWheel)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "HashedWheelTimer.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "Set<Timeout>", "signature": "Set<Timeout> stop()", "full_signature": "@Override public Set<Timeout> stop()", "class_method_signature": "HashedWheelTimer.stop()", "testcase": false, "constructor": false}, {"identifier": "isStop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStop()", "full_signature": "@Override public boolean isStop()", "class_method_signature": "HashedWheelTimer.isStop()", "testcase": false, "constructor": false}, {"identifier": "newTimeout", "parameters": "(TimerTask task, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "Timeout", "signature": "Timeout newTimeout(TimerTask task, long delay, TimeUnit unit)", "full_signature": "@Override public Timeout newTimeout(TimerTask task, long delay, TimeUnit unit)", "class_method_signature": "HashedWheelTimer.newTimeout(TimerTask task, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "pendingTimeouts", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long pendingTimeouts()", "full_signature": "public long pendingTimeouts()", "class_method_signature": "HashedWheelTimer.pendingTimeouts()", "testcase": false, "constructor": false}, {"identifier": "reportTooManyInstances", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void reportTooManyInstances()", "full_signature": "private static void reportTooManyInstances()", "class_method_signature": "HashedWheelTimer.reportTooManyInstances()", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "private boolean isWindows()", "class_method_signature": "HashedWheelTimer.isWindows()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java"}, "focal_method": {"identifier": "newTimeout", "parameters": "(TimerTask task, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "Timeout", "body": "@Override\n    public Timeout newTimeout(TimerTask task, long delay, TimeUnit unit) {\n        if (task == null) {\n            throw new NullPointerException(\"task\");\n        }\n        if (unit == null) {\n            throw new NullPointerException(\"unit\");\n        }\n\n        long pendingTimeoutsCount = pendingTimeouts.incrementAndGet();\n\n        if (maxPendingTimeouts > 0 && pendingTimeoutsCount > maxPendingTimeouts) {\n            pendingTimeouts.decrementAndGet();\n            throw new RejectedExecutionException(\"Number of pending timeouts (\"\n                    + pendingTimeoutsCount + \") is greater than or equal to maximum allowed pending \"\n                    + \"timeouts (\" + maxPendingTimeouts + \")\");\n        }\n\n        start();\n\n        // Add the timeout to the timeout queue which will be processed on the next tick.\n        // During processing all the queued HashedWheelTimeouts will be added to the correct HashedWheelBucket.\n        long deadline = System.nanoTime() + unit.toNanos(delay) - startTime;\n\n        // Guard against overflow.\n        if (delay > 0 && deadline < 0) {\n            deadline = Long.MAX_VALUE;\n        }\n        HashedWheelTimeout timeout = new HashedWheelTimeout(this, task, deadline);\n        timeouts.add(timeout);\n        return timeout;\n    }", "signature": "Timeout newTimeout(TimerTask task, long delay, TimeUnit unit)", "full_signature": "@Override public Timeout newTimeout(TimerTask task, long delay, TimeUnit unit)", "class_method_signature": "HashedWheelTimer.newTimeout(TimerTask task, long delay, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["incrementAndGet", "decrementAndGet", "start", "nanoTime", "toNanos", "add"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}