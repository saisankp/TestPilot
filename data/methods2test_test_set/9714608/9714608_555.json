{"test_class": {"identifier": "MapElementGroupTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private MapPoint point;", "modifier": "private", "type": "MapPoint", "declarator": "point", "var_name": "point"}, {"original_string": "private MapMultiPoint multiPoint;", "modifier": "private", "type": "MapMultiPoint", "declarator": "multiPoint", "var_name": "multiPoint"}, {"original_string": "private MapPolyline polyline;", "modifier": "private", "type": "MapPolyline", "declarator": "polyline", "var_name": "polyline"}, {"original_string": "private MapPolygon polygon;", "modifier": "private", "type": "MapPolygon", "declarator": "polygon", "var_name": "polygon"}, {"original_string": "private MapCircle circle;", "modifier": "private", "type": "MapCircle", "declarator": "circle", "var_name": "circle"}, {"original_string": "private MapElementGroup group;", "modifier": "private", "type": "MapElementGroup", "declarator": "group", "var_name": "group"}], "file": "advanced/gis/gisinputoutput/src/test/java/org/arakhne/afc/gis/io/shape/MapElementGroupTest.java"}, "test_case": {"identifier": "classifiesElementsMapCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void classifiesElementsMapCollection() {\n\t\tMap<ShapeElementType, MapElementGroup> map = MapElementGroup.classifiesElements(\n\t\t\t\tArrays.asList(this.point, this.multiPoint, this.polyline, this.polygon, this.circle));\n\n\t\tassertSame(this.point, map.get(ShapeElementType.POINT).elements.iterator().next());\n\t\tassertSame(this.multiPoint, map.get(ShapeElementType.MULTIPOINT).elements.iterator().next());\n\t\tassertSame(this.polyline, map.get(ShapeElementType.POLYLINE).elements.iterator().next());\n\t\tassertSame(this.polygon, map.get(ShapeElementType.POLYGON).elements.iterator().next());\n\t}", "signature": "void classifiesElementsMapCollection()", "full_signature": "@Test public void classifiesElementsMapCollection()", "class_method_signature": "MapElementGroupTest.classifiesElementsMapCollection()", "testcase": true, "constructor": false, "invocations": ["classifiesElements", "asList", "assertSame", "next", "iterator", "get", "assertSame", "next", "iterator", "get", "assertSame", "next", "iterator", "get", "assertSame", "next", "iterator", "get"]}, "focal_class": {"identifier": "MapElementGroup", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"checkstyle:visibilitymodifier\")\n\tpublic final Collection<MapElement> elements;", "modifier": "@SuppressWarnings(\"checkstyle:visibilitymodifier\")\n\tpublic final", "type": "Collection<MapElement>", "declarator": "elements", "var_name": "elements"}, {"original_string": "private double minx;", "modifier": "private", "type": "double", "declarator": "minx", "var_name": "minx"}, {"original_string": "private double miny;", "modifier": "private", "type": "double", "declarator": "miny", "var_name": "miny"}, {"original_string": "private double maxx;", "modifier": "private", "type": "double", "declarator": "maxx", "var_name": "maxx"}, {"original_string": "private double maxy;", "modifier": "private", "type": "double", "declarator": "maxy", "var_name": "maxy"}], "methods": [{"identifier": "MapElementGroup", "parameters": "()", "modifiers": "public", "return": "", "signature": " MapElementGroup()", "full_signature": "public  MapElementGroup()", "class_method_signature": "MapElementGroup.MapElementGroup()", "testcase": false, "constructor": true}, {"identifier": "classifiesElement", "parameters": "(MapElement element)", "modifiers": "@Pure public static", "return": "ShapeElementType", "signature": "ShapeElementType classifiesElement(MapElement element)", "full_signature": "@Pure public static ShapeElementType classifiesElement(MapElement element)", "class_method_signature": "MapElementGroup.classifiesElement(MapElement element)", "testcase": false, "constructor": false}, {"identifier": "classifiesElements", "parameters": "(Collection<? extends MapElement> elements)", "modifiers": "@Pure public static", "return": "Map<ShapeElementType, MapElementGroup>", "signature": "Map<ShapeElementType, MapElementGroup> classifiesElements(Collection<? extends MapElement> elements)", "full_signature": "@Pure public static Map<ShapeElementType, MapElementGroup> classifiesElements(Collection<? extends MapElement> elements)", "class_method_signature": "MapElementGroup.classifiesElements(Collection<? extends MapElement> elements)", "testcase": false, "constructor": false}, {"identifier": "classifiesElements", "parameters": "(Iterator<? extends MapElement> elements)", "modifiers": "@Pure public static", "return": "Map<ShapeElementType, MapElementGroup>", "signature": "Map<ShapeElementType, MapElementGroup> classifiesElements(Iterator<? extends MapElement> elements)", "full_signature": "@Pure public static Map<ShapeElementType, MapElementGroup> classifiesElements(Iterator<? extends MapElement> elements)", "class_method_signature": "MapElementGroup.classifiesElements(Iterator<? extends MapElement> elements)", "testcase": false, "constructor": false}, {"identifier": "classifiesElements", "parameters": "(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tCollection<? extends MapElement> elements)", "modifiers": "public static", "return": "void", "signature": "void classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tCollection<? extends MapElement> elements)", "full_signature": "public static void classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tCollection<? extends MapElement> elements)", "class_method_signature": "MapElementGroup.classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tCollection<? extends MapElement> elements)", "testcase": false, "constructor": false}, {"identifier": "classifiesElements", "parameters": "(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tIterator<? extends MapElement> elements)", "modifiers": "public static", "return": "void", "signature": "void classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tIterator<? extends MapElement> elements)", "full_signature": "public static void classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tIterator<? extends MapElement> elements)", "class_method_signature": "MapElementGroup.classifiesElements(Map<ShapeElementType, MapElementGroup> classification,\n\t\t\tIterator<? extends MapElement> elements)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MapElement element)", "modifiers": "", "return": "void", "signature": "void add(MapElement element)", "full_signature": " void add(MapElement element)", "class_method_signature": "MapElementGroup.add(MapElement element)", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Pure public", "return": "ESRIBounds", "signature": "ESRIBounds getBounds()", "full_signature": "@Pure public ESRIBounds getBounds()", "class_method_signature": "MapElementGroup.getBounds()", "testcase": false, "constructor": false}], "file": "advanced/gis/gisinputoutput/src/main/java/org/arakhne/afc/gis/io/shape/MapElementGroup.java"}, "focal_method": {"identifier": "classifiesElements", "parameters": "(Collection<? extends MapElement> elements)", "modifiers": "@Pure public static", "return": "Map<ShapeElementType, MapElementGroup>", "body": "@Pure\n\tpublic static Map<ShapeElementType, MapElementGroup> classifiesElements(Collection<? extends MapElement> elements) {\n\t\treturn classifiesElements(elements.iterator());\n\t}", "signature": "Map<ShapeElementType, MapElementGroup> classifiesElements(Collection<? extends MapElement> elements)", "full_signature": "@Pure public static Map<ShapeElementType, MapElementGroup> classifiesElements(Collection<? extends MapElement> elements)", "class_method_signature": "MapElementGroup.classifiesElements(Collection<? extends MapElement> elements)", "testcase": false, "constructor": false, "invocations": ["classifiesElements", "iterator"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}