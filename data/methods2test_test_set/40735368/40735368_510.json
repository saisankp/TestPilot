{"test_class": {"identifier": "FeatureProcessTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/FeatureProcessTest.java"}, "test_case": {"identifier": "testFeatureCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFeatureCollection() throws Exception {\n        Geometry poly = new WKTReader().read(\"POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))\");\n        CoordinateReferenceSystem utm32n = CRS.decode(\"EPSG:32632\");\n        poly.setUserData(utm32n);\n        \n        SimpleFeatureCollection fc = new FeatureProcess().execute(poly, null, \"testft\");\n        assertNotNull(fc);\n        assertEquals(1, fc.size());\n        SimpleFeatureType schema = fc.getSchema();\n        assertEquals(\"testft\", schema.getTypeName());\n        assertEquals(1, schema.getAttributeCount());\n        GeometryDescriptor ad = (GeometryDescriptor) schema.getDescriptor(\"geom\");\n        assertEquals(Polygon.class, ad.getType().getBinding());\n        assertEquals(utm32n, ad.getCoordinateReferenceSystem());\n        SimpleFeature sf = fc.features().next();\n        assertEquals(poly, sf.getDefaultGeometry());\n    }", "signature": "void testFeatureCollection()", "full_signature": "@Test public void testFeatureCollection()", "class_method_signature": "FeatureProcessTest.testFeatureCollection()", "testcase": true, "constructor": false, "invocations": ["read", "decode", "setUserData", "execute", "assertNotNull", "assertEquals", "size", "getSchema", "assertEquals", "getTypeName", "assertEquals", "getAttributeCount", "getDescriptor", "assertEquals", "getBinding", "getType", "assertEquals", "getCoordinateReferenceSystem", "next", "features", "assertEquals", "getDefaultGeometry"]}, "focal_class": {"identifier": "FeatureProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "class_method_signature": "FeatureProcess.execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/FeatureProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Output feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name) {\n        // get the crs\n        if (crs == null) {\n            try {\n                crs = (CoordinateReferenceSystem) geometry.getUserData();\n            } catch (Exception e) {\n                // may not have a CRS attached\n            }\n        }\n        if (crs == null && geometry.getSRID() > 0) {\n            try {\n                crs = CRS.decode(\"EPSG:\" + geometry.getSRID());\n            } catch (Exception e) {\n                // may not have a CRS attached\n            }\n        }\n\n        // build the feature type\n        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();\n        tb.setName(name);\n        tb.add(\"geom\", geometry.getClass(), crs);\n        SimpleFeatureType schema = tb.buildFeatureType();\n\n        // build the feature\n        SimpleFeature sf = SimpleFeatureBuilder.build(schema, new Object[] { geometry }, null);\n        ListFeatureCollection result = new ListFeatureCollection(schema);\n        result.add(sf);\n        return result;\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "class_method_signature": "FeatureProcess.execute(\n            @DescribeParameter(name = \"geometry\", description = \"Input geometry\", min = 1) Geometry geometry,\n            @DescribeParameter(name = \"crs\", description = \"Coordinate reference system of the input geometry (if not provided in the geometry)\") CoordinateReferenceSystem crs,\n            @DescribeParameter(name = \"typeName\", description = \"Feauturetype name for the feature collection\", min = 1) String name)", "testcase": false, "constructor": false, "invocations": ["getUserData", "getSRID", "decode", "getSRID", "setName", "add", "getClass", "buildFeatureType", "build", "add"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}