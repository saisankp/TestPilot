{"test_class": {"identifier": "HttpTransportTest", "superclass": "", "interfaces": "", "fields": [], "file": "transporters/src/test/java/com/nextdoor/bender/ipc/http/HttpTransportTest.java"}, "test_case": {"identifier": "testGzipErrorsResponse", "parameters": "()", "modifiers": "@Test(expected = TransportException.class) public", "return": "void", "body": "@Test(expected = TransportException.class)\n  public void testGzipErrorsResponse() throws TransportException, IOException {\n    byte[] respPayload = \"gzip resp\".getBytes(StandardCharsets.UTF_8);\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    GZIPOutputStream os = new GZIPOutputStream(baos);\n    os.write(respPayload);\n    os.close();\n    byte[] compressedResponse = baos.toByteArray();\n\n    HttpClient client = getMockClientWithResponse(compressedResponse, ContentType.DEFAULT_BINARY,\n        HttpStatus.SC_INTERNAL_SERVER_ERROR, true);\n    HttpTransport transport = new HttpTransport(client, \"\", true, 1, 1);\n\n    try {\n      transport.sendBatch(\"foo\".getBytes());\n    } catch (Exception e) {\n      assertEquals(\n          \"http transport call failed because \\\"expected failure\\\" payload response \\\"gzip resp\\\"\",\n          e.getCause().getMessage());\n      throw e;\n    }\n  }", "signature": "void testGzipErrorsResponse()", "full_signature": "@Test(expected = TransportException.class) public void testGzipErrorsResponse()", "class_method_signature": "HttpTransportTest.testGzipErrorsResponse()", "testcase": true, "constructor": false, "invocations": ["getBytes", "write", "close", "toByteArray", "getMockClientWithResponse", "sendBatch", "getBytes", "assertEquals", "getMessage", "getCause"]}, "focal_class": {"identifier": "HttpTransport", "superclass": "", "interfaces": "implements UnpartitionedTransport", "fields": [{"original_string": "private final HttpClient client;", "modifier": "private final", "type": "HttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "protected final boolean useGzip;", "modifier": "protected final", "type": "boolean", "declarator": "useGzip", "var_name": "useGzip"}, {"original_string": "private final long retryDelayMs;", "modifier": "private final", "type": "long", "declarator": "retryDelayMs", "var_name": "retryDelayMs"}, {"original_string": "private final int retries;", "modifier": "private final", "type": "int", "declarator": "retries", "var_name": "retries"}, {"original_string": "private final String url;", "modifier": "private final", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private static final Logger logger = Logger.getLogger(HttpTransport.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(HttpTransport.class)", "var_name": "logger"}], "methods": [{"identifier": "HttpTransport", "parameters": "(HttpClient client, String url, boolean useGzip, int retries,\n      long retryDelayMs)", "modifiers": "public", "return": "", "signature": " HttpTransport(HttpClient client, String url, boolean useGzip, int retries,\n      long retryDelayMs)", "full_signature": "public  HttpTransport(HttpClient client, String url, boolean useGzip, int retries,\n      long retryDelayMs)", "class_method_signature": "HttpTransport.HttpTransport(HttpClient client, String url, boolean useGzip, int retries,\n      long retryDelayMs)", "testcase": false, "constructor": true}, {"identifier": "getUncompressedContentType", "parameters": "()", "modifiers": "protected", "return": "ContentType", "signature": "ContentType getUncompressedContentType()", "full_signature": "protected ContentType getUncompressedContentType()", "class_method_signature": "HttpTransport.getUncompressedContentType()", "testcase": false, "constructor": false}, {"identifier": "sendBatchUncompressed", "parameters": "(HttpPost httpPost, byte[] raw)", "modifiers": "protected", "return": "HttpResponse", "signature": "HttpResponse sendBatchUncompressed(HttpPost httpPost, byte[] raw)", "full_signature": "protected HttpResponse sendBatchUncompressed(HttpPost httpPost, byte[] raw)", "class_method_signature": "HttpTransport.sendBatchUncompressed(HttpPost httpPost, byte[] raw)", "testcase": false, "constructor": false}, {"identifier": "sendBatchCompressed", "parameters": "(HttpPost httpPost, byte[] raw)", "modifiers": "protected", "return": "HttpResponse", "signature": "HttpResponse sendBatchCompressed(HttpPost httpPost, byte[] raw)", "full_signature": "protected HttpResponse sendBatchCompressed(HttpPost httpPost, byte[] raw)", "class_method_signature": "HttpTransport.sendBatchCompressed(HttpPost httpPost, byte[] raw)", "testcase": false, "constructor": false}, {"identifier": "sendBatch", "parameters": "(TransportBuffer buf)", "modifiers": "public", "return": "void", "signature": "void sendBatch(TransportBuffer buf)", "full_signature": "public void sendBatch(TransportBuffer buf)", "class_method_signature": "HttpTransport.sendBatch(TransportBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "sendBatch", "parameters": "(byte[] raw)", "modifiers": "public", "return": "void", "signature": "void sendBatch(byte[] raw)", "full_signature": "public void sendBatch(byte[] raw)", "class_method_signature": "HttpTransport.sendBatch(byte[] raw)", "testcase": false, "constructor": false}, {"identifier": "checkResponse", "parameters": "(HttpResponse resp, String responseString)", "modifiers": "public", "return": "void", "signature": "void checkResponse(HttpResponse resp, String responseString)", "full_signature": "public void checkResponse(HttpResponse resp, String responseString)", "class_method_signature": "HttpTransport.checkResponse(HttpResponse resp, String responseString)", "testcase": false, "constructor": false}], "file": "transporters/src/main/java/com/nextdoor/bender/ipc/http/HttpTransport.java"}, "focal_method": {"identifier": "sendBatch", "parameters": "(TransportBuffer buf)", "modifiers": "public", "return": "void", "body": "public void sendBatch(TransportBuffer buf) throws TransportException {\n    GenericTransportBuffer buffer = (GenericTransportBuffer) buf;\n    sendBatch(buffer.getInternalBuffer().toByteArray());\n  }", "signature": "void sendBatch(TransportBuffer buf)", "full_signature": "public void sendBatch(TransportBuffer buf)", "class_method_signature": "HttpTransport.sendBatch(TransportBuffer buf)", "testcase": false, "constructor": false, "invocations": ["sendBatch", "toByteArray", "getInternalBuffer"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}