{"test_class": {"identifier": "PathTest", "superclass": "", "interfaces": "", "fields": [], "file": "SoftwarePraktikum/src/graphenbib/PathTest.java"}, "test_case": {"identifier": "testGetPathInOriginalGraphViaNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPathInOriginalGraphViaNodes()\n\t{\n\t\tMapGraph graph = null;\n\t\ttry\n        {\n\t        graph = new MapGraph(90, 90, 0, 0);\n\t        graph.insertNode(1, new GPSCoordinate(10,10));\n\t        graph.insertNode(2, new GPSCoordinate(10,25));\n\t        graph.insertNode(3, new GPSCoordinate(10,40));\n\t        graph.insertNode(4, new GPSCoordinate(20,65));\n\t        graph.insertNode(5, new GPSCoordinate(30,40));\n\t        graph.insertNode(6, new GPSCoordinate(30,25));\n\t        graph.insertNode(7, new GPSCoordinate(30,10));\n\t        graph.insertEdge(1, 2, 1, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(1, 6, 2, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(1, 7, 3, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(2, 1, 4, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(2, 7, 5, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(2, 6, 6, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(2, 5, 7, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(2, 3, 8, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(3, 2, 9, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(3, 6, 10, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(3, 5, 11, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(3, 4, 12, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(4, 3, 13, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(4, 5, 14, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(5, 4, 15, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(5, 3, 16, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(5, 2, 17, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(5, 6, 18, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(6, 5, 19, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(6, 3, 20, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(6, 2, 21, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(6, 1, 22, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(6, 7, 23, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(7, 1, 24, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(7, 2, 25, 6, StreetType.MOTORWAY);\n\t        graph.insertEdge(7, 6, 26, 6, StreetType.MOTORWAY);\n        } catch (Exception e)\n        {\n\t        e.printStackTrace();\n        }\n        HierarchyMapGraph hGraph = new HierarchyMapGraph();\n        try\n        {\n\t        hGraph = graph.exportToHierachyGraph(hGraph);\n        } catch (Exception e)\n        {\n\t        e.printStackTrace();\n        }\n        hGraph.insertEdge(1, 3, 1, 12, StreetType.MOTORWAY, (byte)1);\n        hGraph.insertEdge(3, 4, 12, 6, StreetType.MOTORWAY, (byte)1);\n        hGraph.insertEdge(1, 4, 1, 18, StreetType.MOTORWAY, (byte)2);\n        Path way = new Path();\n        way.appendNode(hGraph.getNode(1));\n        way.appendNode(hGraph.getNode(4));\n        int iter = 1;\n//        try TODO: Dieser Test wurde auskommentiert, das er deprecated Methoden testet.\n//        {\n//\t        for (HierarchyMapNode n : way.reconstructWayBetweenNodes(graph, hGraph, hGraph.getNode(1), hGraph.getNode(4)))\n//\t        {\n//\t        \tif (n.getUID()!=iter)\n//\t        \t\tfail(\"Der gegebene Nikolausweg wurde nicht rekonstruiert\");\n//\t        \titer++;\n//\t        }\n//        } catch (NodeNotNeighbourOfPreviousElementInPathException e)\n//        {\n//\t        e.printStackTrace();\n//\t        fail(\"Es ging schon dabei schief, dass der Pfad nicht gueltig war\");\n//        }\n//        Logger.getInstance().log(\"PathTest\",way);\n\t}", "signature": "void testGetPathInOriginalGraphViaNodes()", "full_signature": "@Test public void testGetPathInOriginalGraphViaNodes()", "class_method_signature": "PathTest.testGetPathInOriginalGraphViaNodes()", "testcase": true, "constructor": false, "invocations": ["insertNode", "insertNode", "insertNode", "insertNode", "insertNode", "insertNode", "insertNode", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "insertEdge", "printStackTrace", "exportToHierachyGraph", "printStackTrace", "insertEdge", "insertEdge", "insertEdge", "appendNode", "getNode", "appendNode", "getNode"]}, "focal_class": {"identifier": "Path", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArrayList<Integer> pathInHierarchyMapGraph= new ArrayList<Integer>();", "modifier": "private", "type": "ArrayList<Integer>", "declarator": "pathInHierarchyMapGraph= new ArrayList<Integer>()", "var_name": "pathInHierarchyMapGraph"}, {"original_string": "private int pathLength;", "modifier": "private", "type": "int", "declarator": "pathLength", "var_name": "pathLength"}, {"original_string": "private long pathTime;", "modifier": "private", "type": "long", "declarator": "pathTime", "var_name": "pathTime"}, {"original_string": "boolean reconstruted=true;", "modifier": "", "type": "boolean", "declarator": "reconstruted=true", "var_name": "reconstruted"}, {"original_string": "boolean validLength=false;", "modifier": "", "type": "boolean", "declarator": "validLength=false", "var_name": "validLength"}, {"original_string": "boolean validTime=false;", "modifier": "", "type": "boolean", "declarator": "validTime=false", "var_name": "validTime"}], "methods": [{"identifier": "appendNode", "parameters": "(HierarchyMapNode node)", "modifiers": "public", "return": "void", "signature": "void appendNode(HierarchyMapNode node)", "full_signature": "public void appendNode(HierarchyMapNode node)", "class_method_signature": "Path.appendNode(HierarchyMapNode node)", "testcase": false, "constructor": false}, {"identifier": "appendNode", "parameters": "(int uid)", "modifiers": "public", "return": "void", "signature": "void appendNode(int uid)", "full_signature": "public void appendNode(int uid)", "class_method_signature": "Path.appendNode(int uid)", "testcase": false, "constructor": false}, {"identifier": "setLength", "parameters": "(int length)", "modifiers": "public", "return": "void", "signature": "void setLength(int length)", "full_signature": "public void setLength(int length)", "class_method_signature": "Path.setLength(int length)", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(long time)", "modifiers": "public", "return": "void", "signature": "void setTime(long time)", "full_signature": "public void setTime(long time)", "class_method_signature": "Path.setTime(long time)", "testcase": false, "constructor": false}, {"identifier": "setPathAsReconstructed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setPathAsReconstructed()", "full_signature": "public void setPathAsReconstructed()", "class_method_signature": "Path.setPathAsReconstructed()", "testcase": false, "constructor": false}, {"identifier": "getPathWeight", "parameters": "(HierarchyMapGraph hGraph)", "modifiers": "public", "return": "long", "signature": "long getPathWeight(HierarchyMapGraph hGraph)", "full_signature": "public long getPathWeight(HierarchyMapGraph hGraph)", "class_method_signature": "Path.getPathWeight(HierarchyMapGraph hGraph)", "testcase": false, "constructor": false}, {"identifier": "getPathLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPathLength()", "full_signature": "public int getPathLength()", "class_method_signature": "Path.getPathLength()", "testcase": false, "constructor": false}, {"identifier": "getPathTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPathTime()", "full_signature": "public long getPathTime()", "class_method_signature": "Path.getPathTime()", "testcase": false, "constructor": false}, {"identifier": "getPathNodeIDs", "parameters": "()", "modifiers": "public", "return": "ArrayList<Integer>", "signature": "ArrayList<Integer> getPathNodeIDs()", "full_signature": "public ArrayList<Integer> getPathNodeIDs()", "class_method_signature": "Path.getPathNodeIDs()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Path.size()", "testcase": false, "constructor": false}, {"identifier": "reconstructPath", "parameters": "(HierarchyMapGraph hGraph)", "modifiers": "public", "return": "void", "signature": "void reconstructPath(HierarchyMapGraph hGraph)", "full_signature": "public void reconstructPath(HierarchyMapGraph hGraph)", "class_method_signature": "Path.reconstructPath(HierarchyMapGraph hGraph)", "testcase": false, "constructor": false}, {"identifier": "getStartNodeID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStartNodeID()", "full_signature": "public int getStartNodeID()", "class_method_signature": "Path.getStartNodeID()", "testcase": false, "constructor": false}, {"identifier": "getEndNodeID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEndNodeID()", "full_signature": "public int getEndNodeID()", "class_method_signature": "Path.getEndNodeID()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Path.toString()", "testcase": false, "constructor": false}], "file": "SoftwarePraktikum/src/graphenbib/Path.java"}, "focal_method": {"identifier": "appendNode", "parameters": "(HierarchyMapNode node)", "modifiers": "public", "return": "void", "body": "public void appendNode(HierarchyMapNode node)\n\t{\n\t\tthis.validLength=false;\n\t\tthis.validTime=false;\n\t\tthis.reconstruted=false;\n\t\tpathInHierarchyMapGraph.add(node.getUID());\n\t}", "signature": "void appendNode(HierarchyMapNode node)", "full_signature": "public void appendNode(HierarchyMapNode node)", "class_method_signature": "Path.appendNode(HierarchyMapNode node)", "testcase": false, "constructor": false, "invocations": ["add", "getUID"]}, "repository": {"repo_id": 3716960, "url": "https://github.com/auxua/SWP-Routenplaner", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 13806, "license": "licensed"}}