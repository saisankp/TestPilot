{"test_class": {"identifier": "EscapeSuggesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private EscapeSuggester movesToEscape;", "modifier": "private", "type": "EscapeSuggester", "declarator": "movesToEscape", "var_name": "movesToEscape"}], "file": "src/edu/lclark/orego/feature/EscapeSuggesterTest.java"}, "test_case": {"identifier": "testEscape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEscape(){\n\t\tString[] diagram = {\n\t\t\t\t\"O#...\",\n\t\t\t\t\"....#\",\n\t\t\t\t\"...#O\",\n\t\t\t\t\".....\",\n\t\t\t\t\".....\",\n\t\t};\n\t\tboard.setUpProblem(diagram, WHITE);\n\t\tassertTrue(movesToEscape.getMoves().contains(at(\"e2\")));\n\t\tassertTrue(movesToEscape.getMoves().contains(at(\"a4\")));\n\t}", "signature": "void testEscape()", "full_signature": "@Test public void testEscape()", "class_method_signature": "EscapeSuggesterTest.testEscape()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "assertTrue", "contains", "getMoves", "at", "assertTrue", "contains", "getMoves", "at"]}, "focal_class": {"identifier": "EscapeSuggester", "superclass": "", "interfaces": "implements Suggester", "fields": [{"original_string": "private final AtariObserver atariObserver;", "modifier": "private final", "type": "AtariObserver", "declarator": "atariObserver", "var_name": "atariObserver"}, {"original_string": "private final int bias;", "modifier": "private final", "type": "int", "declarator": "bias", "var_name": "bias"}, {"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final CoordinateSystem coords;", "modifier": "private final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private final ShortSet movesToEscape;", "modifier": "private final", "type": "ShortSet", "declarator": "movesToEscape", "var_name": "movesToEscape"}, {"original_string": "private final ShortSet tempLiberties;", "modifier": "private final", "type": "ShortSet", "declarator": "tempLiberties", "var_name": "tempLiberties"}], "methods": [{"identifier": "EscapeSuggester", "parameters": "(Board board, AtariObserver atariObserver)", "modifiers": "public", "return": "", "signature": " EscapeSuggester(Board board, AtariObserver atariObserver)", "full_signature": "public  EscapeSuggester(Board board, AtariObserver atariObserver)", "class_method_signature": "EscapeSuggester.EscapeSuggester(Board board, AtariObserver atariObserver)", "testcase": false, "constructor": true}, {"identifier": "EscapeSuggester", "parameters": "(Board board, AtariObserver atariObserver, int bias)", "modifiers": "public", "return": "", "signature": " EscapeSuggester(Board board, AtariObserver atariObserver, int bias)", "full_signature": "public  EscapeSuggester(Board board, AtariObserver atariObserver, int bias)", "class_method_signature": "EscapeSuggester.EscapeSuggester(Board board, AtariObserver atariObserver, int bias)", "testcase": false, "constructor": true}, {"identifier": "escapeByCapturing", "parameters": "(short chain)", "modifiers": "private", "return": "void", "signature": "void escapeByCapturing(short chain)", "full_signature": "private void escapeByCapturing(short chain)", "class_method_signature": "EscapeSuggester.escapeByCapturing(short chain)", "testcase": false, "constructor": false}, {"identifier": "escapeByMerging", "parameters": "(short liberty)", "modifiers": "private", "return": "void", "signature": "void escapeByMerging(short liberty)", "full_signature": "private void escapeByMerging(short liberty)", "class_method_signature": "EscapeSuggester.escapeByMerging(short liberty)", "testcase": false, "constructor": false}, {"identifier": "getBias", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBias()", "full_signature": "@Override public int getBias()", "class_method_signature": "EscapeSuggester.getBias()", "testcase": false, "constructor": false}, {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "EscapeSuggester.getMoves()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/EscapeSuggester.java"}, "focal_method": {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "body": "@Override\n\tpublic ShortSet getMoves() {\n\t\tmovesToEscape.clear();\n\t\tfinal StoneColor colorToPlay = board.getColorToPlay();\n\t\tfinal ShortSet chainsInAtari = atariObserver.getChainsInAtari(colorToPlay);\n\t\tfor (int i = 0; i < chainsInAtari.size(); i++) {\n\t\t\tfinal short chain = chainsInAtari.get(i);\n\t\t\tfinal short p = board.getLiberties(chain).get(0);\n\t\t\tif (board.getNeighborsOfColor(p, VACANT) >= 2) {\n\t\t\t\tmovesToEscape.add(p);\n\t\t\t} else if (board.getNeighborsOfColor(p, colorToPlay) > 0) {\n\t\t\t\tescapeByMerging(p);\n\t\t\t}\n\t\t\tescapeByCapturing(chain);\n\t\t}\n\t\treturn movesToEscape;\n\t}", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "EscapeSuggester.getMoves()", "testcase": false, "constructor": false, "invocations": ["clear", "getColorToPlay", "getChainsInAtari", "size", "get", "get", "getLiberties", "getNeighborsOfColor", "add", "getNeighborsOfColor", "escapeByMerging", "escapeByCapturing"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}