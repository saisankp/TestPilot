{"test_class": {"identifier": "SimpleDateFormatPoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/date/SimpleDateFormatPoolTest.java"}, "test_case": {"identifier": "testGet__multipleThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet__multipleThreads() throws InterruptedException {\n\n        // wektor, w ktorym sa obiekty SDF skojarzone z kolejnymi watkami\n        final List<SimpleDateFormat> list = Collections.synchronizedList(new ArrayList<SimpleDateFormat>());\n\n        // 10 watkow, kazdy pobiera swoj SDF i dodaje do kolekcji vector\n        Thread[] threads = new Thread[10];\n        for (int i = 0; i < 10; i++) {\n            threads[i] = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    list.add(SimpleDateFormatPool.get(\"dd-MM-yyyy\"));\n                }\n            });\n            threads[i].start();\n        }\n\n        // bariera\n        for (int i = 0; i < 10; i++) {\n            threads[i].join();\n        }\n\n        // weryfikacja\n        for (int i = 0; i < 10; i++) {\n            SimpleDateFormat sdf1 = list.get(i);\n            for (int j = 0; j < 10; j++) {\n                if (j != i) {\n                    SimpleDateFormat sdf2 = list.get(j);\n                    assertNotSame(sdf1, sdf2);\n                }\n            }\n        }\n    }", "signature": "void testGet__multipleThreads()", "full_signature": "@Test public void testGet__multipleThreads()", "class_method_signature": "SimpleDateFormatPoolTest.testGet__multipleThreads()", "testcase": true, "constructor": false, "invocations": ["synchronizedList", "add", "get", "start", "join", "get", "get", "assertNotSame"]}, "focal_class": {"identifier": "SimpleDateFormatPool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ThreadLocal<Map<String, SimpleDateFormat>> pool = new ThreadLocal<Map<String, SimpleDateFormat>>() {\n\n        @Override\n        protected Map<String, SimpleDateFormat> initialValue() {\n            return new HashMap<String, SimpleDateFormat>();\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Map<String, SimpleDateFormat>>", "declarator": "pool = new ThreadLocal<Map<String, SimpleDateFormat>>() {\n\n        @Override\n        protected Map<String, SimpleDateFormat> initialValue() {\n            return new HashMap<String, SimpleDateFormat>();\n        }\n    }", "var_name": "pool"}], "methods": [{"identifier": "get", "parameters": "(String pattern)", "modifiers": "public static", "return": "SimpleDateFormat", "signature": "SimpleDateFormat get(String pattern)", "full_signature": "public static SimpleDateFormat get(String pattern)", "class_method_signature": "SimpleDateFormatPool.get(String pattern)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/date/SimpleDateFormatPool.java"}, "focal_method": {"identifier": "get", "parameters": "(String pattern)", "modifiers": "public static", "return": "SimpleDateFormat", "body": "public static SimpleDateFormat get(String pattern) {\n\n        Map<String, SimpleDateFormat> map = pool.get();\n\n        SimpleDateFormat sdf = map.get(pattern);\n        if (sdf == null) {\n            sdf = new SimpleDateFormat(pattern);\n            sdf.setLenient(false);\n            map.put(pattern, sdf);\n        }\n        return sdf;\n    }", "signature": "SimpleDateFormat get(String pattern)", "full_signature": "public static SimpleDateFormat get(String pattern)", "class_method_signature": "SimpleDateFormatPool.get(String pattern)", "testcase": false, "constructor": false, "invocations": ["get", "get", "setLenient", "put"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}