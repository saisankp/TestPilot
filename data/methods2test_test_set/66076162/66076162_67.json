{"test_class": {"identifier": "ServerProtocolMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerProtocolMapper serverProtocolMapper;", "modifier": "private", "type": "ServerProtocolMapper", "declarator": "serverProtocolMapper", "var_name": "serverProtocolMapper"}], "file": "infrastructure/src/test/java/com/remotecraft/app/infrastructure/protocol/mapper/ServerProtocolMapperTest.java"}, "test_case": {"identifier": "shouldProperlyMapServerProtocolToServerEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProperlyMapServerProtocolToServerEntity() throws Exception {\n    ServerProtocol serverProtocol = new ServerProtocol.Builder()\n        .ssid(\"WLAN_C33C\")\n        .ip(\"127.0.0.1\")\n        .hostname(\"iMac\")\n        .os(\"macOS Sierra\")\n        .version(\"2.4.9\")\n        .seed(\"34344343\")\n        .worldName(\"Za warudo\")\n        .playerName(\"Da beasto\")\n        .encodedWorldImage(\"base64image\")\n        .build();\n\n    ServerEntity serverEntity = serverProtocolMapper.transform(serverProtocol);\n\n    assertThat(serverEntity).isNotNull();\n    assertThat(serverEntity).isInstanceOf(ServerEntity.class);\n    assertThat(serverEntity.ssid()).isEqualTo(\"WLAN_C33C\");\n    assertThat(serverEntity.ip()).isEqualTo(\"127.0.0.1\");\n    assertThat(serverEntity.hostname()).isEqualTo(\"iMac\");\n    assertThat(serverEntity.os()).isEqualTo(\"macOS Sierra\");\n    assertThat(serverEntity.version()).isEqualTo(\"2.4.9\");\n    assertThat(serverEntity.seed()).isEqualTo(\"34344343\");\n    assertThat(serverEntity.worldName()).isEqualTo(\"Za warudo\");\n    assertThat(serverEntity.playerName()).isEqualTo(\"Da beasto\");\n    assertThat(serverEntity.encodedWorldImage()).isEqualTo(\"base64image\");\n  }", "signature": "void shouldProperlyMapServerProtocolToServerEntity()", "full_signature": "@Test public void shouldProperlyMapServerProtocolToServerEntity()", "class_method_signature": "ServerProtocolMapperTest.shouldProperlyMapServerProtocolToServerEntity()", "testcase": true, "constructor": false, "invocations": ["build", "encodedWorldImage", "playerName", "worldName", "seed", "version", "os", "hostname", "ip", "ssid", "transform", "isNotNull", "assertThat", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "ssid", "isEqualTo", "assertThat", "ip", "isEqualTo", "assertThat", "hostname", "isEqualTo", "assertThat", "os", "isEqualTo", "assertThat", "version", "isEqualTo", "assertThat", "seed", "isEqualTo", "assertThat", "worldName", "isEqualTo", "assertThat", "playerName", "isEqualTo", "assertThat", "encodedWorldImage"]}, "focal_class": {"identifier": "ServerProtocolMapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ServerProtocolMapper", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " ServerProtocolMapper()", "full_signature": "@Inject public  ServerProtocolMapper()", "class_method_signature": "ServerProtocolMapper.ServerProtocolMapper()", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(ServerProtocol serverProtocol)", "modifiers": "public", "return": "ServerEntity", "signature": "ServerEntity transform(ServerProtocol serverProtocol)", "full_signature": "public ServerEntity transform(ServerProtocol serverProtocol)", "class_method_signature": "ServerProtocolMapper.transform(ServerProtocol serverProtocol)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(ServerEntity serverEntity)", "modifiers": "public", "return": "ServerProtocol", "signature": "ServerProtocol transform(ServerEntity serverEntity)", "full_signature": "public ServerProtocol transform(ServerEntity serverEntity)", "class_method_signature": "ServerProtocolMapper.transform(ServerEntity serverEntity)", "testcase": false, "constructor": false}], "file": "infrastructure/src/main/java/com/remotecraft/app/infrastructure/protocol/mapper/ServerProtocolMapper.java"}, "focal_method": {"identifier": "transform", "parameters": "(ServerProtocol serverProtocol)", "modifiers": "public", "return": "ServerEntity", "body": "public ServerEntity transform(ServerProtocol serverProtocol) {\n    if (serverProtocol == null) return null;\n\n    return ServerEntity.builder()\n        .ssid(serverProtocol.getSsid())\n        .ip(serverProtocol.getIp())\n        .hostname(serverProtocol.getHostname())\n        .os(serverProtocol.getOs())\n        .version(serverProtocol.getVersion())\n        .seed(serverProtocol.getSeed())\n        .worldName(serverProtocol.getWorldName())\n        .playerName(serverProtocol.getPlayerName())\n        .encodedWorldImage(serverProtocol.getEncodedWorldImage())\n        .build();\n  }", "signature": "ServerEntity transform(ServerProtocol serverProtocol)", "full_signature": "public ServerEntity transform(ServerProtocol serverProtocol)", "class_method_signature": "ServerProtocolMapper.transform(ServerProtocol serverProtocol)", "testcase": false, "constructor": false, "invocations": ["build", "encodedWorldImage", "playerName", "worldName", "seed", "version", "os", "hostname", "ip", "ssid", "builder", "getSsid", "getIp", "getHostname", "getOs", "getVersion", "getSeed", "getWorldName", "getPlayerName", "getEncodedWorldImage"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}