{"test_class": {"identifier": "WebActionControllerAdviceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String sessionid = \"test-sessionId\";", "modifier": "private", "type": "String", "declarator": "sessionid = \"test-sessionId\"", "var_name": "sessionid"}, {"original_string": "@InjectMocks\n\tprivate WebActionControllerAdvice testee;", "modifier": "@InjectMocks\n\tprivate", "type": "WebActionControllerAdvice", "declarator": "testee", "var_name": "testee"}, {"original_string": "@Mock\n\tprivate CommandTransactionInterceptor interceptor;", "modifier": "@Mock\n\tprivate", "type": "CommandTransactionInterceptor", "declarator": "interceptor", "var_name": "interceptor"}], "file": "nimbus-core/src/test/java/com/antheminc/oss/nimbus/channel/web/WebActionControllerAdviceTest.java"}, "test_case": {"identifier": "testFrameworkRuntimeExceptionHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFrameworkRuntimeExceptionHandler() {\n\t\tfinal FrameworkRuntimeException ex = new FrameworkRuntimeException();\n\t\tfinal MultiExecuteOutput expected = new MultiExecuteOutput(sessionid);\n\t\t\n\t\tMockito.when(this.interceptor.handleResponse(Mockito.isA(ExecuteOutput.class))).thenReturn(expected);\n\t\tfinal MultiExecuteOutput actual = this.testee.exception(ex);\n\t\t\n\t\tfinal ArgumentCaptor<ExecuteOutput> respCaptor = ArgumentCaptor.forClass(ExecuteOutput.class);\n\t\tMockito.verify(this.interceptor, Mockito.only()).handleResponse(respCaptor.capture());\n\t\t\n\t\tAssert.assertEquals(expected, actual);\n\t\tAssert.assertEquals(ex.getExecuteError(), respCaptor.getValue().getExecuteException());\n\t}", "signature": "void testFrameworkRuntimeExceptionHandler()", "full_signature": "@Test public void testFrameworkRuntimeExceptionHandler()", "class_method_signature": "WebActionControllerAdviceTest.testFrameworkRuntimeExceptionHandler()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "handleResponse", "isA", "exception", "forClass", "handleResponse", "verify", "only", "capture", "assertEquals", "assertEquals", "getExecuteError", "getExecuteException", "getValue"]}, "focal_class": {"identifier": "WebActionControllerAdvice", "superclass": "", "interfaces": "implements ResponseBodyAdvice<Object>", "fields": [{"original_string": "private JustLogit logit = new JustLogit(this.getClass());", "modifier": "private", "type": "JustLogit", "declarator": "logit = new JustLogit(this.getClass())", "var_name": "logit"}, {"original_string": "private static final String RESPONSE_INTERCEPTOR_BEAN_PREFIX = \"httpresponsebodyinterceptor.\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_INTERCEPTOR_BEAN_PREFIX = \"httpresponsebodyinterceptor.\"", "var_name": "RESPONSE_INTERCEPTOR_BEAN_PREFIX"}, {"original_string": "@Value(\"${nimbus.error.metricLoggingEnabled:true}\")\n\tprivate boolean metricLoggingEnabled;", "modifier": "@Value(\"${nimbus.error.metricLoggingEnabled:true}\")\n\tprivate", "type": "boolean", "declarator": "metricLoggingEnabled", "var_name": "metricLoggingEnabled"}, {"original_string": "@Getter @Setter\n\tprivate Map<Class<?>,String> exceptions;", "modifier": "@Getter @Setter\n\tprivate", "type": "Map<Class<?>,String>", "declarator": "exceptions", "var_name": "exceptions"}, {"original_string": "@Value(\"${nimbus.error.genericMsg:System Error ERR.UNIQUEID}\")\n\tprivate String genericMsg;", "modifier": "@Value(\"${nimbus.error.genericMsg:System Error ERR.UNIQUEID}\")\n\tprivate", "type": "String", "declarator": "genericMsg", "var_name": "genericMsg"}, {"original_string": "@Autowired CommandTransactionInterceptor defaultInterceptor;", "modifier": "@Autowired", "type": "CommandTransactionInterceptor", "declarator": "defaultInterceptor", "var_name": "defaultInterceptor"}, {"original_string": "@Autowired BeanResolverStrategy beanResolver;", "modifier": "@Autowired", "type": "BeanResolverStrategy", "declarator": "beanResolver", "var_name": "beanResolver"}], "methods": [{"identifier": "supports", "parameters": "(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "full_signature": "@Override public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "class_method_signature": "WebActionControllerAdvice.supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "testcase": false, "constructor": false}, {"identifier": "beforeBodyWrite", "parameters": "(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "class_method_signature": "WebActionControllerAdvice.beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "exception", "parameters": "(Throwable pEx)", "modifiers": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public", "return": "MultiExecuteOutput", "signature": "MultiExecuteOutput exception(Throwable pEx)", "full_signature": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public MultiExecuteOutput exception(Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.exception(Throwable pEx)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(ExecuteError execError, Throwable pEx)", "modifiers": "private", "return": "void", "signature": "void logError(ExecuteError execError, Throwable pEx)", "full_signature": "private void logError(ExecuteError execError, Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.logError(ExecuteError execError, Throwable pEx)", "testcase": false, "constructor": false}, {"identifier": "exception", "parameters": "(MethodArgumentNotValidException vEx)", "modifiers": "@ResponseStatus(value = HttpStatus.UNPROCESSABLE_ENTITY) @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseBody public", "return": "MultiExecuteOutput", "signature": "MultiExecuteOutput exception(MethodArgumentNotValidException vEx)", "full_signature": "@ResponseStatus(value = HttpStatus.UNPROCESSABLE_ENTITY) @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseBody public MultiExecuteOutput exception(MethodArgumentNotValidException vEx)", "class_method_signature": "WebActionControllerAdvice.exception(MethodArgumentNotValidException vEx)", "testcase": false, "constructor": false}, {"identifier": "constructMessage", "parameters": "(ExecuteError err)", "modifiers": "private", "return": "String", "signature": "String constructMessage(ExecuteError err)", "full_signature": "private String constructMessage(ExecuteError err)", "class_method_signature": "WebActionControllerAdvice.constructMessage(ExecuteError err)", "testcase": false, "constructor": false}, {"identifier": "constructMessage", "parameters": "(String configMsg, ExecuteError err)", "modifiers": "private", "return": "String", "signature": "String constructMessage(String configMsg, ExecuteError err)", "full_signature": "private String constructMessage(String configMsg, ExecuteError err)", "class_method_signature": "WebActionControllerAdvice.constructMessage(String configMsg, ExecuteError err)", "testcase": false, "constructor": false}, {"identifier": "constructExecError", "parameters": "(Throwable pEx)", "modifiers": "private", "return": "ExecuteError", "signature": "ExecuteError constructExecError(Throwable pEx)", "full_signature": "private ExecuteError constructExecError(Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.constructExecError(Throwable pEx)", "testcase": false, "constructor": false}], "file": "nimbus-core/src/main/java/com/antheminc/oss/nimbus/channel/web/WebActionControllerAdvice.java"}, "focal_method": {"identifier": "exception", "parameters": "(Throwable pEx)", "modifiers": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public", "return": "MultiExecuteOutput", "body": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)\n\t@ExceptionHandler(Throwable.class)\n\t@ResponseBody\n\tpublic MultiExecuteOutput exception(Throwable pEx){\n\t\tExecuteOutput<?> resp = new ExecuteOutput<>();\n\t\tExecuteError execError = constructExecError(pEx);\n\t\tString message = constructMessage(execError);\n\t\t\n\t\tif (Optional.ofNullable(exceptions).isPresent()) {\t\t\t\n\t\t\tif (exceptions.containsKey(pEx.getClass())) {\n\t\t\t\tmessage = constructMessage(exceptions.get(pEx.getClass()), execError);\n\t\t\t} else {\n\t\t\t\tOptional<Class<?>> hierarchyclass = exceptions.keySet()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.filter(c -> null != c && c.isAssignableFrom(pEx.getClass()))\n\t\t\t\t\t\t.findFirst();\n\t\t\t\n\t\t\t\tif (hierarchyclass.isPresent()) \n\t\t\t\t\tmessage = constructMessage(exceptions.get(hierarchyclass.get()), execError);\n\t\t\t}\n\t\t} \n\t\texecError.setMessage(message);\n\t\tlogError(execError, pEx);\n\t\tresp.setExecuteException(execError);\n\t\treturn defaultInterceptor.handleResponse(resp);\t\t\n\t}", "signature": "MultiExecuteOutput exception(Throwable pEx)", "full_signature": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public MultiExecuteOutput exception(Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.exception(Throwable pEx)", "testcase": false, "constructor": false, "invocations": ["constructExecError", "constructMessage", "isPresent", "ofNullable", "containsKey", "getClass", "constructMessage", "get", "getClass", "findFirst", "filter", "stream", "keySet", "isAssignableFrom", "getClass", "isPresent", "constructMessage", "get", "get", "setMessage", "logError", "setExecuteException", "handleResponse"]}, "repository": {"repo_id": 96120606, "url": "https://github.com/openanthem/nimbus-core", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 9, "size": 55787, "license": "licensed"}}