{"test_class": {"identifier": "InvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = mock(Logger.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = mock(Logger.class)", "var_name": "logger"}, {"original_string": "private final Invoker invoker = new Invoker(new GsonWebRenderer(new Gson()), logger);", "modifier": "private final", "type": "Invoker", "declarator": "invoker = new Invoker(new GsonWebRenderer(new Gson()), logger)", "var_name": "invoker"}], "file": "services/src/test/java/com/greensopinion/finance/services/web/dispatch/InvokerTest.java"}, "test_case": {"identifier": "convertEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void convertEmptyString() throws Exception {\n\t\tassertEquals(null, invoker.convert(String.class, \"\"));\n\t}", "signature": "void convertEmptyString()", "full_signature": "@Test public void convertEmptyString()", "class_method_signature": "InvokerTest.convertEmptyString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert"]}, "focal_class": {"identifier": "Invoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final GsonWebRenderer webRenderer;", "modifier": "private final", "type": "GsonWebRenderer", "declarator": "webRenderer", "var_name": "webRenderer"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "Invoker", "parameters": "(GsonWebRenderer webRenderer, Logger logger)", "modifiers": "@Inject public", "return": "", "signature": " Invoker(GsonWebRenderer webRenderer, Logger logger)", "full_signature": "@Inject public  Invoker(GsonWebRenderer webRenderer, Logger logger)", "class_method_signature": "Invoker.Invoker(GsonWebRenderer webRenderer, Logger logger)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(WebRequest request, MatchResult match, Handler handler)", "modifiers": "public", "return": "WebResponse", "signature": "WebResponse invoke(WebRequest request, MatchResult match, Handler handler)", "full_signature": "public WebResponse invoke(WebRequest request, MatchResult match, Handler handler)", "class_method_signature": "Invoker.invoke(WebRequest request, MatchResult match, Handler handler)", "testcase": false, "constructor": false}, {"identifier": "logInvocationException", "parameters": "(Exception e)", "modifiers": "protected", "return": "void", "signature": "void logInvocationException(Exception e)", "full_signature": "protected void logInvocationException(Exception e)", "class_method_signature": "Invoker.logInvocationException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "toWebResponse", "parameters": "(Exception e)", "modifiers": "", "return": "WebResponse", "signature": "WebResponse toWebResponse(Exception e)", "full_signature": " WebResponse toWebResponse(Exception e)", "class_method_signature": "Invoker.toWebResponse(Exception e)", "testcase": false, "constructor": false}, {"identifier": "toWebResponse", "parameters": "(Response response)", "modifiers": "", "return": "WebResponse", "signature": "WebResponse toWebResponse(Response response)", "full_signature": " WebResponse toWebResponse(Response response)", "class_method_signature": "Invoker.toWebResponse(Response response)", "testcase": false, "constructor": false}, {"identifier": "createParameters", "parameters": "(WebRequest request, MatchResult match, Handler handler)", "modifiers": "", "return": "Map<String, Object>", "signature": "Map<String, Object> createParameters(WebRequest request, MatchResult match, Handler handler)", "full_signature": " Map<String, Object> createParameters(WebRequest request, MatchResult match, Handler handler)", "class_method_signature": "Invoker.createParameters(WebRequest request, MatchResult match, Handler handler)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Type type, Object value)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })", "return": "Object", "signature": "Object convert(Type type, Object value)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) Object convert(Type type, Object value)", "class_method_signature": "Invoker.convert(Type type, Object value)", "testcase": false, "constructor": false}, {"identifier": "classOf", "parameters": "(Type type)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> classOf(Type type)", "full_signature": "private Class<?> classOf(Type type)", "class_method_signature": "Invoker.classOf(Type type)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/web/dispatch/Invoker.java"}, "focal_method": {"identifier": "convert", "parameters": "(Type type, Object value)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })", "return": "Object", "body": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tObject convert(Type type, Object value) throws Exception {\n\t\tif (type == Integer.class) {\n\t\t\tString v = value.toString();\n\t\t\treturn v.isEmpty() ? null : Integer.parseInt(v);\n\t\t} else if (type == Long.class) {\n\t\t\tString v = value.toString();\n\t\t\treturn v.isEmpty() ? null : Long.parseLong(v);\n\t\t} else if (type == String.class) {\n\t\t\tString v = value.toString().trim();\n\t\t\treturn v.isEmpty() ? null : v;\n\t\t}\n\t\tByteArrayInputStream stream = new ByteArrayInputStream(value.toString().getBytes(StandardCharsets.UTF_8));\n\t\tClass clazz = classOf(type);\n\t\treturn webRenderer.readFrom(clazz, type, null, null, null, stream);\n\t}", "signature": "Object convert(Type type, Object value)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) Object convert(Type type, Object value)", "class_method_signature": "Invoker.convert(Type type, Object value)", "testcase": false, "constructor": false, "invocations": ["toString", "isEmpty", "parseInt", "toString", "isEmpty", "parseLong", "trim", "toString", "isEmpty", "getBytes", "toString", "classOf", "readFrom"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}