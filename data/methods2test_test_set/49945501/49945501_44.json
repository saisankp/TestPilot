{"test_class": {"identifier": "RequestOperatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "request-parameters/src/test/java/eu/neoteric/starter/request/RequestOperatorTest.java"}, "test_case": {"identifier": "testTwoDifferentObjectsEqualsWhenSameNameGiven", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTwoDifferentObjectsEqualsWhenSameNameGiven() throws Exception {\n        RequestOperator requestOperator = RequestOperator.of(\"$eq\");\n        assertThat(requestOperator).isEqualTo(RequestOperator.of(\"$eq\"));\n    }", "signature": "void testTwoDifferentObjectsEqualsWhenSameNameGiven()", "full_signature": "@Test public void testTwoDifferentObjectsEqualsWhenSameNameGiven()", "class_method_signature": "RequestOperatorTest.testTwoDifferentObjectsEqualsWhenSameNameGiven()", "testcase": true, "constructor": false, "invocations": ["of", "isEqualTo", "assertThat", "of"]}, "focal_class": {"identifier": "RequestOperator", "superclass": "", "interfaces": "implements RequestObject", "fields": [{"original_string": "private final OperatorType operator;", "modifier": "private final", "type": "OperatorType", "declarator": "operator", "var_name": "operator"}], "methods": [{"identifier": "RequestOperator", "parameters": "(OperatorType operator)", "modifiers": "private", "return": "", "signature": " RequestOperator(OperatorType operator)", "full_signature": "private  RequestOperator(OperatorType operator)", "class_method_signature": "RequestOperator.RequestOperator(OperatorType operator)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(String operator)", "modifiers": "public static", "return": "RequestOperator", "signature": "RequestOperator of(String operator)", "full_signature": "public static RequestOperator of(String operator)", "class_method_signature": "RequestOperator.of(String operator)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(OperatorType operatorType)", "modifiers": "public static", "return": "RequestOperator", "signature": "RequestOperator of(OperatorType operatorType)", "full_signature": "public static RequestOperator of(OperatorType operatorType)", "class_method_signature": "RequestOperator.of(OperatorType operatorType)", "testcase": false, "constructor": false}, {"identifier": "getOperator", "parameters": "()", "modifiers": "public", "return": "OperatorType", "signature": "OperatorType getOperator()", "full_signature": "public OperatorType getOperator()", "class_method_signature": "RequestOperator.getOperator()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestObjectType", "signature": "RequestObjectType getType()", "full_signature": "@Override public RequestObjectType getType()", "class_method_signature": "RequestOperator.getType()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestOperator.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "RequestOperator.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "RequestOperator.hashCode()", "testcase": false, "constructor": false}], "file": "request-parameters/src/main/java/eu/neoteric/starter/request/RequestOperator.java"}, "focal_method": {"identifier": "of", "parameters": "(String operator)", "modifiers": "public static", "return": "RequestOperator", "body": "public static RequestOperator of(String operator) {\n        return of(OperatorType.fromString(operator));\n    }", "signature": "RequestOperator of(String operator)", "full_signature": "public static RequestOperator of(String operator)", "class_method_signature": "RequestOperator.of(String operator)", "testcase": false, "constructor": false, "invocations": ["of", "fromString"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}