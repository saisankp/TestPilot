{"test_class": {"identifier": "TokenBucketAdmissionControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/loadshedding/tokenbucket/TokenBucketAdmissionControllerTest.java"}, "test_case": {"identifier": "testSharedBucket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSharedBucket() {\n        TokenBucketAdmissionController controller = new TokenBucketAdmissionController(\n                Collections.singletonList(SHARED_ANY_CONFIGURATION),\n                titusRuntime\n        );\n\n        AdmissionControllerRequest request = AdmissionControllerRequest.newBuilder()\n                .withCallerId(\"any\")\n                .withEndpointName(\"any\")\n                .build();\n\n        // We assume the loop below will complete in a sec so we account for single refill only.\n        int limit = SHARED_ANY_CONFIGURATION.getCapacity() + SHARED_ANY_CONFIGURATION.getRefillRateInSec() + 1;\n\n        int stoppedAt = 0;\n        while (stoppedAt < limit) {\n            AdmissionControllerResponse response = controller.apply(request);\n            if (!response.isAllowed()) {\n                break;\n            }\n            stoppedAt++;\n        }\n\n        assertThat(stoppedAt).isGreaterThanOrEqualTo(SHARED_ANY_CONFIGURATION.getCapacity());\n        assertThat(stoppedAt).isLessThan(limit);\n    }", "signature": "void testSharedBucket()", "full_signature": "@Test public void testSharedBucket()", "class_method_signature": "TokenBucketAdmissionControllerTest.testSharedBucket()", "testcase": true, "constructor": false, "invocations": ["singletonList", "build", "withEndpointName", "withCallerId", "newBuilder", "getCapacity", "getRefillRateInSec", "apply", "isAllowed", "isGreaterThanOrEqualTo", "assertThat", "getCapacity", "isLessThan", "assertThat"]}, "focal_class": {"identifier": "TokenBucketAdmissionController", "superclass": "", "interfaces": "implements AdmissionController", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TokenBucketAdmissionController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TokenBucketAdmissionController.class)", "var_name": "logger"}, {"original_string": "private static final AdmissionControllerResponse DEFAULT_OK = AdmissionControllerResponse.newBuilder()\n            .withAllowed(true)\n            .withReasonMessage(\"Rate limits not configured\")\n            .build();", "modifier": "private static final", "type": "AdmissionControllerResponse", "declarator": "DEFAULT_OK = AdmissionControllerResponse.newBuilder()\n            .withAllowed(true)\n            .withReasonMessage(\"Rate limits not configured\")\n            .build()", "var_name": "DEFAULT_OK"}, {"original_string": "private static final int MAX_CACHE_SIZE = 10_000;", "modifier": "private static final", "type": "int", "declarator": "MAX_CACHE_SIZE = 10_000", "var_name": "MAX_CACHE_SIZE"}, {"original_string": "private static final Duration CACHE_ITEM_TIMEOUT = Duration.ofSeconds(600);", "modifier": "private static final", "type": "Duration", "declarator": "CACHE_ITEM_TIMEOUT = Duration.ofSeconds(600)", "var_name": "CACHE_ITEM_TIMEOUT"}, {"original_string": "private final List<TokenBucketConfiguration> tokenBucketConfigurations;", "modifier": "private final", "type": "List<TokenBucketConfiguration>", "declarator": "tokenBucketConfigurations", "var_name": "tokenBucketConfigurations"}, {"original_string": "private final Cache<Pair<String, String>, TokenBucketInstance> bucketsById;", "modifier": "private final", "type": "Cache<Pair<String, String>, TokenBucketInstance>", "declarator": "bucketsById", "var_name": "bucketsById"}, {"original_string": "private final Cache<AdmissionControllerRequest, Pair<String, String>> requestToBucketIdCache;", "modifier": "private final", "type": "Cache<AdmissionControllerRequest, Pair<String, String>>", "declarator": "requestToBucketIdCache", "var_name": "requestToBucketIdCache"}], "methods": [{"identifier": "TokenBucketAdmissionController", "parameters": "(List<TokenBucketConfiguration> tokenBucketConfigurations,\n                                          TitusRuntime titusRuntime)", "modifiers": "public", "return": "", "signature": " TokenBucketAdmissionController(List<TokenBucketConfiguration> tokenBucketConfigurations,\n                                          TitusRuntime titusRuntime)", "full_signature": "public  TokenBucketAdmissionController(List<TokenBucketConfiguration> tokenBucketConfigurations,\n                                          TitusRuntime titusRuntime)", "class_method_signature": "TokenBucketAdmissionController.TokenBucketAdmissionController(List<TokenBucketConfiguration> tokenBucketConfigurations,\n                                          TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(AdmissionControllerRequest request)", "modifiers": "@Override public", "return": "AdmissionControllerResponse", "signature": "AdmissionControllerResponse apply(AdmissionControllerRequest request)", "full_signature": "@Override public AdmissionControllerResponse apply(AdmissionControllerRequest request)", "class_method_signature": "TokenBucketAdmissionController.apply(AdmissionControllerRequest request)", "testcase": false, "constructor": false}, {"identifier": "findTokenBucket", "parameters": "(AdmissionControllerRequest request)", "modifiers": "private", "return": "Optional<TokenBucketInstance>", "signature": "Optional<TokenBucketInstance> findTokenBucket(AdmissionControllerRequest request)", "full_signature": "private Optional<TokenBucketInstance> findTokenBucket(AdmissionControllerRequest request)", "class_method_signature": "TokenBucketAdmissionController.findTokenBucket(AdmissionControllerRequest request)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(TokenBucketConfiguration configuration, AdmissionControllerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(TokenBucketConfiguration configuration, AdmissionControllerRequest request)", "full_signature": "private boolean matches(TokenBucketConfiguration configuration, AdmissionControllerRequest request)", "class_method_signature": "TokenBucketAdmissionController.matches(TokenBucketConfiguration configuration, AdmissionControllerRequest request)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(TokenBucketInstance tokenBucketInstance)", "modifiers": "private", "return": "AdmissionControllerResponse", "signature": "AdmissionControllerResponse consume(TokenBucketInstance tokenBucketInstance)", "full_signature": "private AdmissionControllerResponse consume(TokenBucketInstance tokenBucketInstance)", "class_method_signature": "TokenBucketAdmissionController.consume(TokenBucketInstance tokenBucketInstance)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/tokenbucket/TokenBucketAdmissionController.java"}, "focal_method": {"identifier": "apply", "parameters": "(AdmissionControllerRequest request)", "modifiers": "@Override public", "return": "AdmissionControllerResponse", "body": "@Override\n    public AdmissionControllerResponse apply(AdmissionControllerRequest request) {\n        return findTokenBucket(request).map(this::consume).orElse(DEFAULT_OK);\n    }", "signature": "AdmissionControllerResponse apply(AdmissionControllerRequest request)", "full_signature": "@Override public AdmissionControllerResponse apply(AdmissionControllerRequest request)", "class_method_signature": "TokenBucketAdmissionController.apply(AdmissionControllerRequest request)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "findTokenBucket"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}