{"test_class": {"identifier": "DXJobTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/java/src/test/java/com/dnanexus/DXJobTest.java"}, "test_case": {"identifier": "testJobDescribeDeserializationWithNullValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJobDescribeDeserializationWithNullValues() throws IOException {\n        // input, output, runInput and originalInput are missing (as if \"io\": false were supplied).\n        // Ensure that the accessors return IllegalStateException.\n        String describeJson = \"{\\\"id\\\": \\\"job-000000000000000000000000\\\"}\";\n\n        DXJob.Describe describe = new DXJob.Describe(DXJSON.safeTreeToValue(\n                DXJSON.parseJson(describeJson), DXJob.DescribeResponseHash.class),\n                DXEnvironment.create());\n\n        Assert.assertEquals(\"job-000000000000000000000000\", describe.getId());\n        try {\n            describe.getInput(ExampleInput.class);\n            Assert.fail(\"Expected retrieving input to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            describe.getOriginalInput(ExampleInput.class);\n            Assert.fail(\"Expected retrieving original input to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            describe.getRunInput(ExampleInput.class);\n            Assert.fail(\"Expected retrieving run input to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n        try {\n            describe.getOutput(ExampleOutput.class);\n            Assert.fail(\"Expected retrieving output to fail\");\n        } catch (IllegalStateException e) {\n            // Expected\n        }\n\n        // output is null (as if the job had not completed yet).\n        describeJson = \"{\\\"id\\\": \\\"job-000000000000000000000000\\\", \\\"output\\\": null}\";\n\n        describe = new DXJob.Describe(DXJSON.safeTreeToValue(DXJSON.parseJson(describeJson),\n                DXJob.DescribeResponseHash.class), DXEnvironment.create());\n\n        Assert.assertEquals(\"job-000000000000000000000000\", describe.getId());\n        Assert.assertEquals(null, describe.getOutput(ExampleOutput.class));\n    }", "signature": "void testJobDescribeDeserializationWithNullValues()", "full_signature": "@Test public void testJobDescribeDeserializationWithNullValues()", "class_method_signature": "DXJobTest.testJobDescribeDeserializationWithNullValues()", "testcase": true, "constructor": false, "invocations": ["safeTreeToValue", "parseJson", "create", "assertEquals", "getId", "getInput", "fail", "getOriginalInput", "fail", "getRunInput", "fail", "getOutput", "fail", "safeTreeToValue", "parseJson", "create", "assertEquals", "getId", "assertEquals", "getOutput"]}, "focal_class": {"identifier": "DXJob", "superclass": "extends DXExecution", "interfaces": "", "fields": [{"original_string": "private static final Set<JobState> unsuccessfulJobStates = Sets.immutableEnumSet(\n            JobState.FAILED, JobState.TERMINATED);", "modifier": "private static final", "type": "Set<JobState>", "declarator": "unsuccessfulJobStates = Sets.immutableEnumSet(\n            JobState.FAILED, JobState.TERMINATED)", "var_name": "unsuccessfulJobStates"}], "methods": [{"identifier": "getInstance", "parameters": "(String jobId)", "modifiers": "public static", "return": "DXJob", "signature": "DXJob getInstance(String jobId)", "full_signature": "public static DXJob getInstance(String jobId)", "class_method_signature": "DXJob.getInstance(String jobId)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithCachedDescribe", "parameters": "(String jobId, DXEnvironment env, JsonNode describe)", "modifiers": "static", "return": "DXJob", "signature": "DXJob getInstanceWithCachedDescribe(String jobId, DXEnvironment env, JsonNode describe)", "full_signature": "static DXJob getInstanceWithCachedDescribe(String jobId, DXEnvironment env, JsonNode describe)", "class_method_signature": "DXJob.getInstanceWithCachedDescribe(String jobId, DXEnvironment env, JsonNode describe)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithEnvironment", "parameters": "(String jobId, DXEnvironment env)", "modifiers": "public static", "return": "DXJob", "signature": "DXJob getInstanceWithEnvironment(String jobId, DXEnvironment env)", "full_signature": "public static DXJob getInstanceWithEnvironment(String jobId, DXEnvironment env)", "class_method_signature": "DXJob.getInstanceWithEnvironment(String jobId, DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "DXJob", "parameters": "(String jobId)", "modifiers": "private", "return": "", "signature": " DXJob(String jobId)", "full_signature": "private  DXJob(String jobId)", "class_method_signature": "DXJob.DXJob(String jobId)", "testcase": false, "constructor": true}, {"identifier": "DXJob", "parameters": "(String jobId, DXEnvironment env)", "modifiers": "private", "return": "", "signature": " DXJob(String jobId, DXEnvironment env)", "full_signature": "private  DXJob(String jobId, DXEnvironment env)", "class_method_signature": "DXJob.DXJob(String jobId, DXEnvironment env)", "testcase": false, "constructor": true}, {"identifier": "DXJob", "parameters": "(String jobId, DXEnvironment env, JsonNode cachedDescribe)", "modifiers": "private", "return": "", "signature": " DXJob(String jobId, DXEnvironment env, JsonNode cachedDescribe)", "full_signature": "private  DXJob(String jobId, DXEnvironment env, JsonNode cachedDescribe)", "class_method_signature": "DXJob.DXJob(String jobId, DXEnvironment env, JsonNode cachedDescribe)", "testcase": false, "constructor": true}, {"identifier": "describe", "parameters": "()", "modifiers": "@Override public", "return": "Describe", "signature": "Describe describe()", "full_signature": "@Override public Describe describe()", "class_method_signature": "DXJob.describe()", "testcase": false, "constructor": false}, {"identifier": "describeImpl", "parameters": "(JsonNode describeInput)", "modifiers": "private", "return": "Describe", "signature": "Describe describeImpl(JsonNode describeInput)", "full_signature": "private Describe describeImpl(JsonNode describeInput)", "class_method_signature": "DXJob.describeImpl(JsonNode describeInput)", "testcase": false, "constructor": false}, {"identifier": "getCachedDescribe", "parameters": "()", "modifiers": "@Override public", "return": "Describe", "signature": "Describe getCachedDescribe()", "full_signature": "@Override public Describe getCachedDescribe()", "class_method_signature": "DXJob.getCachedDescribe()", "testcase": false, "constructor": false}, {"identifier": "getOutput", "parameters": "(Class<T> outputClass)", "modifiers": "@Override public", "return": "T", "signature": "T getOutput(Class<T> outputClass)", "full_signature": "@Override public T getOutput(Class<T> outputClass)", "class_method_signature": "DXJob.getOutput(Class<T> outputClass)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void terminate()", "full_signature": "@Override public void terminate()", "class_method_signature": "DXJob.terminate()", "testcase": false, "constructor": false}, {"identifier": "waitUntilDone", "parameters": "()", "modifiers": "@Override public", "return": "DXJob", "signature": "DXJob waitUntilDone()", "full_signature": "@Override public DXJob waitUntilDone()", "class_method_signature": "DXJob.waitUntilDone()", "testcase": false, "constructor": false}], "file": "src/java/src/main/java/com/dnanexus/DXJob.java"}, "focal_method": {"identifier": "getOutput", "parameters": "(Class<T> outputClass)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getOutput(Class<T> outputClass) throws IllegalStateException {\n        // {fields: {output: true, state: true}}\n        Describe d =\n                describeImpl(DXJSON\n                        .getObjectBuilder()\n                        .put(\"fields\",\n                                DXJSON.getObjectBuilder().put(\"output\", true).put(\"state\", true)\n                                        .build()).build());\n        if (d.getState() != JobState.DONE) {\n            throw new IllegalStateException(\"Expected job to be in state DONE, but it is in state \"\n                    + d.getState());\n        }\n        return d.getOutput(outputClass);\n    }", "signature": "T getOutput(Class<T> outputClass)", "full_signature": "@Override public T getOutput(Class<T> outputClass)", "class_method_signature": "DXJob.getOutput(Class<T> outputClass)", "testcase": false, "constructor": false, "invocations": ["describeImpl", "build", "put", "getObjectBuilder", "build", "put", "put", "getObjectBuilder", "getState", "getState", "getOutput"]}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}