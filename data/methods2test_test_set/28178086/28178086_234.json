{"test_class": {"identifier": "TrendCycleFilterFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/x11/TrendCycleFilterFactoryTest.java"}, "test_case": {"identifier": "testMakeTrendFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMakeTrendFilter() {\n        for (int i = 1; i < 100; ++i) {\n            SymmetricFilter filter = TrendCycleFilterFactory.makeTrendFilter(i);\n            DataBlock w = new DataBlock(filter.getWeights());\n            assertTrue(Math.abs(w.sum() - 1) < 1e-9);\n        }\n    }", "signature": "void testMakeTrendFilter()", "full_signature": "@Test public void testMakeTrendFilter()", "class_method_signature": "TrendCycleFilterFactoryTest.testMakeTrendFilter()", "testcase": true, "constructor": false, "invocations": ["makeTrendFilter", "getWeights", "assertTrue", "abs", "sum"]}, "focal_class": {"identifier": "TrendCycleFilterFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "defaultHendersonFilterForFrequency", "parameters": "(\n\t    final int frequency)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter defaultHendersonFilterForFrequency(\n\t    final int frequency)", "full_signature": "public static SymmetricFilter defaultHendersonFilterForFrequency(\n\t    final int frequency)", "class_method_signature": "TrendCycleFilterFactory.defaultHendersonFilterForFrequency(\n\t    final int frequency)", "testcase": false, "constructor": false}, {"identifier": "makeHendersonFilter", "parameters": "(int length)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter makeHendersonFilter(int length)", "full_signature": "public static SymmetricFilter makeHendersonFilter(int length)", "class_method_signature": "TrendCycleFilterFactory.makeHendersonFilter(int length)", "testcase": false, "constructor": false}, {"identifier": "makeTrendFilter", "parameters": "(final int frequency)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter makeTrendFilter(final int frequency)", "full_signature": "public static SymmetricFilter makeTrendFilter(final int frequency)", "class_method_signature": "TrendCycleFilterFactory.makeTrendFilter(final int frequency)", "testcase": false, "constructor": false}, {"identifier": "TrendCycleFilterFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " TrendCycleFilterFactory()", "full_signature": "private  TrendCycleFilterFactory()", "class_method_signature": "TrendCycleFilterFactory.TrendCycleFilterFactory()", "testcase": false, "constructor": true}], "file": "jtstoolkit/src/main/java/ec/satoolkit/x11/TrendCycleFilterFactory.java"}, "focal_method": {"identifier": "makeTrendFilter", "parameters": "(final int frequency)", "modifiers": "public static", "return": "SymmetricFilter", "body": "public static SymmetricFilter makeTrendFilter(final int frequency) {\n\tif (frequency % 2 == 0)\n\t    return FilterFactory.makeSymmetricFilter(2, frequency);\n\telse\n\t    return FilterFactory.makeSymmetricFilter(frequency);\n    }", "signature": "SymmetricFilter makeTrendFilter(final int frequency)", "full_signature": "public static SymmetricFilter makeTrendFilter(final int frequency)", "class_method_signature": "TrendCycleFilterFactory.makeTrendFilter(final int frequency)", "testcase": false, "constructor": false, "invocations": ["makeSymmetricFilter", "makeSymmetricFilter"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}