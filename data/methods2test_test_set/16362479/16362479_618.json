{"test_class": {"identifier": "ModuleShardStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Configuration configuration;", "modifier": "private static", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardstrategy/ModuleShardStrategyTest.java"}, "test_case": {"identifier": "testFindShard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindShard() {\n        ModuleShardStrategy moduleShardStrategy = new ModuleShardStrategy(\"cars\", configuration);\n        String shard = moduleShardStrategy.findShard(CarsModel.BASE_PATH);\n        assertEquals(\"cars-1\", shard);\n    }", "signature": "void testFindShard()", "full_signature": "@Test public void testFindShard()", "class_method_signature": "ModuleShardStrategyTest.testFindShard()", "testcase": true, "constructor": false, "invocations": ["findShard", "assertEquals"]}, "focal_class": {"identifier": "ModuleShardStrategy", "superclass": "", "interfaces": "implements ShardStrategy", "fields": [{"original_string": "public static final String NAME = \"module\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"module\"", "var_name": "NAME"}, {"original_string": "private final String moduleName;", "modifier": "private final", "type": "String", "declarator": "moduleName", "var_name": "moduleName"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "ModuleShardStrategy", "parameters": "(String moduleName, Configuration configuration)", "modifiers": "public", "return": "", "signature": " ModuleShardStrategy(String moduleName, Configuration configuration)", "full_signature": "public  ModuleShardStrategy(String moduleName, Configuration configuration)", "class_method_signature": "ModuleShardStrategy.ModuleShardStrategy(String moduleName, Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "findShard", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "String", "signature": "String findShard(YangInstanceIdentifier path)", "full_signature": "@Override public String findShard(YangInstanceIdentifier path)", "class_method_signature": "ModuleShardStrategy.findShard(YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "getPrefixForPath", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "YangInstanceIdentifier", "signature": "YangInstanceIdentifier getPrefixForPath(YangInstanceIdentifier path)", "full_signature": "@Override public YangInstanceIdentifier getPrefixForPath(YangInstanceIdentifier path)", "class_method_signature": "ModuleShardStrategy.getPrefixForPath(YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardstrategy/ModuleShardStrategy.java"}, "focal_method": {"identifier": "findShard", "parameters": "(YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String findShard(YangInstanceIdentifier path) {\n        String shardName = configuration.getShardNameForModule(moduleName);\n        return shardName != null ? shardName : DefaultShardStrategy.DEFAULT_SHARD;\n    }", "signature": "String findShard(YangInstanceIdentifier path)", "full_signature": "@Override public String findShard(YangInstanceIdentifier path)", "class_method_signature": "ModuleShardStrategy.findShard(YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["getShardNameForModule"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}