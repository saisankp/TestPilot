{"test_class": {"identifier": "SubstringFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/filter/SubstringFilterTest.java"}, "test_case": {"identifier": "encode", "parameters": "(final SubstringFilter filter, final byte[] berValue)", "modifiers": "@Test(dataProvider = \"component\") public", "return": "void", "body": "@Test(dataProvider = \"component\")\n  public void encode(final SubstringFilter filter, final byte[] berValue)\n    throws Exception\n  {\n    Assert.assertEquals(filter.getEncoder().encode(), berValue);\n  }", "signature": "void encode(final SubstringFilter filter, final byte[] berValue)", "full_signature": "@Test(dataProvider = \"component\") public void encode(final SubstringFilter filter, final byte[] berValue)", "class_method_signature": "SubstringFilterTest.encode(final SubstringFilter filter, final byte[] berValue)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encode", "getEncoder"]}, "focal_class": {"identifier": "SubstringFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final int HASH_CODE_SEED = 10099;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 10099", "var_name": "HASH_CODE_SEED"}, {"original_string": "private final String attributeDesc;", "modifier": "private final", "type": "String", "declarator": "attributeDesc", "var_name": "attributeDesc"}, {"original_string": "private final byte[] subInitial;", "modifier": "private final", "type": "byte[]", "declarator": "subInitial", "var_name": "subInitial"}, {"original_string": "private final byte[][] subAny;", "modifier": "private final", "type": "byte[][]", "declarator": "subAny", "var_name": "subAny"}, {"original_string": "private final byte[] subFinal;", "modifier": "private final", "type": "byte[]", "declarator": "subFinal", "var_name": "subFinal"}], "methods": [{"identifier": "SubstringFilter", "parameters": "(final String name, final String startsWith, final String endsWith, final String... contains)", "modifiers": "public", "return": "", "signature": " SubstringFilter(final String name, final String startsWith, final String endsWith, final String... contains)", "full_signature": "public  SubstringFilter(final String name, final String startsWith, final String endsWith, final String... contains)", "class_method_signature": "SubstringFilter.SubstringFilter(final String name, final String startsWith, final String endsWith, final String... contains)", "testcase": false, "constructor": true}, {"identifier": "SubstringFilter", "parameters": "(final String name, final byte[] startsWith, final byte[] endsWith, final byte[]... contains)", "modifiers": "public", "return": "", "signature": " SubstringFilter(final String name, final byte[] startsWith, final byte[] endsWith, final byte[]... contains)", "full_signature": "public  SubstringFilter(final String name, final byte[] startsWith, final byte[] endsWith, final byte[]... contains)", "class_method_signature": "SubstringFilter.SubstringFilter(final String name, final byte[] startsWith, final byte[] endsWith, final byte[]... contains)", "testcase": false, "constructor": true}, {"identifier": "getAttributeDesc", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAttributeDesc()", "full_signature": "public String getAttributeDesc()", "class_method_signature": "SubstringFilter.getAttributeDesc()", "testcase": false, "constructor": false}, {"identifier": "getSubInitial", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSubInitial()", "full_signature": "public byte[] getSubInitial()", "class_method_signature": "SubstringFilter.getSubInitial()", "testcase": false, "constructor": false}, {"identifier": "getSubAny", "parameters": "()", "modifiers": "public", "return": "byte[][]", "signature": "byte[][] getSubAny()", "full_signature": "public byte[][] getSubAny()", "class_method_signature": "SubstringFilter.getSubAny()", "testcase": false, "constructor": false}, {"identifier": "getSubFinal", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSubFinal()", "full_signature": "public byte[] getSubFinal()", "class_method_signature": "SubstringFilter.getSubFinal()", "testcase": false, "constructor": false}, {"identifier": "getAssertionCount", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getAssertionCount()", "full_signature": "private int getAssertionCount()", "class_method_signature": "SubstringFilter.getAssertionCount()", "testcase": false, "constructor": false}, {"identifier": "getEncoder", "parameters": "()", "modifiers": "@Override public", "return": "DEREncoder", "signature": "DEREncoder getEncoder()", "full_signature": "@Override public DEREncoder getEncoder()", "class_method_signature": "SubstringFilter.getEncoder()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "SubstringFilter.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SubstringFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubstringFilter.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/filter/SubstringFilter.java"}, "focal_method": {"identifier": "getEncoder", "parameters": "()", "modifiers": "@Override public", "return": "DEREncoder", "body": "@Override\n  public DEREncoder getEncoder()\n  {\n    final DEREncoder[] encoders = new DEREncoder[getAssertionCount()];\n    int i = 0;\n    if (subInitial != null) {\n      encoders[i++] = new OctetStringType(\n        new ContextDERTag(Substrings.INITIAL.ordinal(), false), subInitial);\n    }\n    if (subAny != null && subAny.length > 0) {\n      for (byte[] assertion : subAny) {\n        encoders[i++] = new OctetStringType(new ContextDERTag(Substrings.ANY.ordinal(), false), assertion);\n      }\n    }\n    if (subFinal != null) {\n      encoders[i] = new OctetStringType(\n        new ContextDERTag(Substrings.FINAL.ordinal(), false), subFinal);\n    }\n    return new ConstructedDEREncoder(\n      new ContextDERTag(Filter.Type.SUBSTRING.ordinal(), true),\n      new OctetStringType(attributeDesc),\n      new ConstructedDEREncoder(\n        UniversalDERTag.SEQ,\n        encoders));\n  }", "signature": "DEREncoder getEncoder()", "full_signature": "@Override public DEREncoder getEncoder()", "class_method_signature": "SubstringFilter.getEncoder()", "testcase": false, "constructor": false, "invocations": ["getAssertionCount", "ordinal", "ordinal", "ordinal", "ordinal"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}