{"test_class": {"identifier": "ObjectCodecFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotatedElement metadata;", "modifier": "private", "type": "AnnotatedElement", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private CodecFactory delegate;", "modifier": "private", "type": "CodecFactory", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private BitBuffer buffer;", "modifier": "private", "type": "BitBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private Resolver resolver;", "modifier": "private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private Builder builder;", "modifier": "private", "type": "Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private BoundObject settings;", "modifier": "private", "type": "BoundObject", "declarator": "settings", "var_name": "settings"}, {"original_string": "private Choices choices;", "modifier": "private", "type": "Choices", "declarator": "choices", "var_name": "choices"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/ObjectCodecFactoryTest.java"}, "test_case": {"identifier": "testBoundObjectNoMembersTwoTypesWithPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBoundObjectNoMembersTwoTypesWithPrefix() throws DecodingException {\n        Codec codecTest3 = createMock(Codec.class);\n        Codec codecTest4 = createMock(Codec.class);\n        expect(metadata.isAnnotationPresent(Bound.class)).andReturn(false).anyTimes();\n        expect(metadata.isAnnotationPresent(BoundObject.class)).andReturn(true).anyTimes();\n        expect(settings.selectFrom()).andReturn(choices).times(2);\n        expect(choices.alternatives()).andReturn(new Choices.Choice[0]);\n        expect(choices.defaultType()).andReturn((Class) Void.class);\n        expect(metadata.getAnnotation(BoundObject.class)).andReturn(settings);\n        expect(settings.type()).andReturn((Class) Void.class);\n        expect(settings.types()).andReturn(new Class[]{TestObject3.class, TestObject4.class})\n                .times(2);\n        expect(delegate.create(null, TestObject3.class, null)).andReturn(codecTest3);\n        expect(codecTest3.getTypes()).andReturn(new Class<?>[]{TestObject3.class});\n        expect(codecTest4.getTypes()).andReturn(new Class<?>[]{TestObject4.class});\n        expect(delegate.create(null, TestObject4.class, null)).andReturn(codecTest4);\n        // expect(codecTest3.getSize(resolver)).andReturn(6);\n        // expect(codecTest4.getSize(resolver)).andReturn(6);\n        expect(buffer.readAsLong(8, ByteOrder.LittleEndian)).andReturn(0L);\n        expect(codecTest3.decode(buffer, resolver, builder)).andReturn(new TestObject3());\n        replay(metadata, delegate, buffer, resolver, settings, codecTest3, codecTest4, builder,\n                choices);\n        ObjectCodecFactory factory = new ObjectCodecFactory(delegate);\n        Codec<TestObject1> codec = factory.create(metadata, TestObject1.class, null);\n        assertNotNull(codec);\n        TestObject1 result = codec.decode(buffer, resolver, builder);\n        assertNotNull(result);\n        assertTrue(!(result instanceof TestObject4));\n        assertTrue(result instanceof TestObject3);\n        verify(metadata, delegate, buffer, resolver, settings, codecTest3, codecTest4, builder,\n                choices);\n    }", "signature": "void testBoundObjectNoMembersTwoTypesWithPrefix()", "full_signature": "@Test public void testBoundObjectNoMembersTwoTypesWithPrefix()", "class_method_signature": "ObjectCodecFactoryTest.testBoundObjectNoMembersTwoTypesWithPrefix()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "anyTimes", "andReturn", "expect", "isAnnotationPresent", "anyTimes", "andReturn", "expect", "isAnnotationPresent", "times", "andReturn", "expect", "selectFrom", "andReturn", "expect", "alternatives", "andReturn", "expect", "defaultType", "andReturn", "expect", "getAnnotation", "andReturn", "expect", "type", "times", "andReturn", "expect", "types", "andReturn", "expect", "create", "andReturn", "expect", "getTypes", "andReturn", "expect", "getTypes", "andReturn", "expect", "create", "andReturn", "expect", "readAsLong", "andReturn", "expect", "decode", "replay", "create", "assertNotNull", "decode", "assertNotNull", "assertTrue", "assertTrue", "verify"]}, "focal_class": {"identifier": "ObjectCodecFactory", "superclass": "", "interfaces": "implements CodecFactory", "fields": [{"original_string": "private BindingFactory bindingFactory;", "modifier": "private", "type": "BindingFactory", "declarator": "bindingFactory", "var_name": "bindingFactory"}, {"original_string": "private CodecFactory codecFactory;", "modifier": "private", "type": "CodecFactory", "declarator": "codecFactory", "var_name": "codecFactory"}, {"original_string": "private IdentifierRewriter rewriter = new ClassNameRewriter();", "modifier": "private", "type": "IdentifierRewriter", "declarator": "rewriter = new ClassNameRewriter()", "var_name": "rewriter"}], "methods": [{"identifier": "ObjectCodecFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ObjectCodecFactory()", "full_signature": "public  ObjectCodecFactory()", "class_method_signature": "ObjectCodecFactory.ObjectCodecFactory()", "testcase": false, "constructor": true}, {"identifier": "ObjectCodecFactory", "parameters": "(CodecFactory codecFactory)", "modifiers": "public", "return": "", "signature": " ObjectCodecFactory(CodecFactory codecFactory)", "full_signature": "public  ObjectCodecFactory(CodecFactory codecFactory)", "class_method_signature": "ObjectCodecFactory.ObjectCodecFactory(CodecFactory codecFactory)", "testcase": false, "constructor": true}, {"identifier": "ObjectCodecFactory", "parameters": "(CodecFactory codecFactory,\n                              BindingFactory bindingFactory)", "modifiers": "public", "return": "", "signature": " ObjectCodecFactory(CodecFactory codecFactory,\n                              BindingFactory bindingFactory)", "full_signature": "public  ObjectCodecFactory(CodecFactory codecFactory,\n                              BindingFactory bindingFactory)", "class_method_signature": "ObjectCodecFactory.ObjectCodecFactory(CodecFactory codecFactory,\n                              BindingFactory bindingFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "class_method_signature": "ObjectCodecFactory.create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "createCodec", "parameters": "(Class<T> type,\n                                           ResolverContext context)", "modifiers": "private", "return": "ObjectCodec<T>", "signature": "ObjectCodec<T> createCodec(Class<T> type,\n                                           ResolverContext context)", "full_signature": "private ObjectCodec<T> createCodec(Class<T> type,\n                                           ResolverContext context)", "class_method_signature": "ObjectCodecFactory.createCodec(Class<T> type,\n                                           ResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "createCodec", "parameters": "(Class<T> type, ResolverContext context,\n                                     AnnotatedElement metadata)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Codec<T>", "signature": "Codec<T> createCodec(Class<T> type, ResolverContext context,\n                                     AnnotatedElement metadata)", "full_signature": "@SuppressWarnings(\"unchecked\") private Codec<T> createCodec(Class<T> type, ResolverContext context,\n                                     AnnotatedElement metadata)", "class_method_signature": "ObjectCodecFactory.createCodec(Class<T> type, ResolverContext context,\n                                     AnnotatedElement metadata)", "testcase": false, "constructor": false}, {"identifier": "hideChoices", "parameters": "(AnnotatedElement metadata)", "modifiers": "private", "return": "AnnotatedElement", "signature": "AnnotatedElement hideChoices(AnnotatedElement metadata)", "full_signature": "private AnnotatedElement hideChoices(AnnotatedElement metadata)", "class_method_signature": "ObjectCodecFactory.hideChoices(AnnotatedElement metadata)", "testcase": false, "constructor": false}, {"identifier": "harvestBindings", "parameters": "(Class<T> type,\n                                     ObjectResolverContext context, CodecReference reference)", "modifiers": "private", "return": "void", "signature": "void harvestBindings(Class<T> type,\n                                     ObjectResolverContext context, CodecReference reference)", "full_signature": "private void harvestBindings(Class<T> type,\n                                     ObjectResolverContext context, CodecReference reference)", "class_method_signature": "ObjectCodecFactory.harvestBindings(Class<T> type,\n                                     ObjectResolverContext context, CodecReference reference)", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/ObjectCodecFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "body": "public <T> Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context) {\n        if (metadata == null) {\n            return createCodec(type, context);\n        } else if (metadata.isAnnotationPresent(Bound.class)) {\n            return createCodec(type, context);\n        } else if (metadata.isAnnotationPresent(BoundObject.class)) {\n            return createCodec(type, context, metadata);\n        } else {\n            return null;\n        }\n    }", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "class_method_signature": "ObjectCodecFactory.create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "testcase": false, "constructor": false, "invocations": ["createCodec", "isAnnotationPresent", "createCodec", "isAnnotationPresent", "createCodec"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}