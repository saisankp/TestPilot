{"test_class": {"identifier": "SpawnProcessForEachMachineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY_PROCESS_KEY = \"empty\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_PROCESS_KEY = \"empty\"", "var_name": "EMPTY_PROCESS_KEY"}, {"original_string": "private static final String RESULT = \"result\";", "modifier": "private static final", "type": "String", "declarator": "RESULT = \"result\"", "var_name": "RESULT"}, {"original_string": "private static final String BUSINESS_KEY = UUID.randomUUID().toString();", "modifier": "private static final", "type": "String", "declarator": "BUSINESS_KEY = UUID.randomUUID().toString()", "var_name": "BUSINESS_KEY"}], "file": "core/src/test/java/com/axemblr/provisionr/core/activities/SpawnProcessForEachMachineTest.java"}, "test_case": {"identifier": "testSpawnSampleProcessForLocalhost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSpawnSampleProcessForLocalhost() throws Exception {\n        DelegateExecution execution = mock(DelegateExecution.class);\n\n        when(execution.getVariable(eq(CoreProcessVariables.POOL))).thenReturn(mock(Pool.class));\n        when(execution.getVariable(eq(CoreProcessVariables.POOL_BUSINESS_KEY))).thenReturn(BUSINESS_KEY);\n\n        List<Machine> machines = Lists.newArrayList(\n            Machine.builder().localhost().createMachine(),\n            Machine.builder().localhost().externalId(\"local-2\").createMachine()\n        );\n        when(execution.getVariable(eq(CoreProcessVariables.MACHINES))).thenReturn(machines);\n\n        ProcessVariablesCollector collector = new ProcessVariablesCollector();\n        collector.install(execution);\n\n        ProcessEngine processEngine = new StandaloneInMemProcessEngineConfiguration()\n            .setJobExecutorActivate(true).buildProcessEngine();\n        processEngine.getRepositoryService().createDeployment()\n            .addClasspathResource(\"diagrams/empty.bpmn20.xml\").deploy();\n\n        try {\n            JavaDelegate delegate = new SpawnProcessForEachMachine(processEngine, EMPTY_PROCESS_KEY, \"test\", RESULT);\n            delegate.execute(execution);\n\n            @SuppressWarnings(\"unchecked\")\n            List<String> processInstanceIds = (List<String>) collector.getVariable(RESULT);\n\n            assertThat(processInstanceIds).hasSize(2);\n\n        } finally {\n            processEngine.close();\n        }\n    }", "signature": "void testSpawnSampleProcessForLocalhost()", "full_signature": "@Test public void testSpawnSampleProcessForLocalhost()", "class_method_signature": "SpawnProcessForEachMachineTest.testSpawnSampleProcessForLocalhost()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getVariable", "eq", "mock", "thenReturn", "when", "getVariable", "eq", "newArrayList", "createMachine", "localhost", "builder", "createMachine", "externalId", "localhost", "builder", "thenReturn", "when", "getVariable", "eq", "install", "buildProcessEngine", "setJobExecutorActivate", "deploy", "addClasspathResource", "createDeployment", "getRepositoryService", "execute", "getVariable", "hasSize", "assertThat", "close"]}, "focal_class": {"identifier": "SpawnProcessForEachMachine", "superclass": "", "interfaces": "implements JavaDelegate", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SpawnProcessForEachMachine.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SpawnProcessForEachMachine.class)", "var_name": "LOG"}, {"original_string": "private static final String MACHINE = \"machine\";", "modifier": "private static final", "type": "String", "declarator": "MACHINE = \"machine\"", "var_name": "MACHINE"}, {"original_string": "private final ProcessEngine processEngine;", "modifier": "private final", "type": "ProcessEngine", "declarator": "processEngine", "var_name": "processEngine"}, {"original_string": "private final String processKey;", "modifier": "private final", "type": "String", "declarator": "processKey", "var_name": "processKey"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final String resultVariable;", "modifier": "private final", "type": "String", "declarator": "resultVariable", "var_name": "resultVariable"}], "methods": [{"identifier": "SpawnProcessForEachMachine", "parameters": "(\n        ProcessEngine processEngine, String processKey, String type, String resultVariable\n    )", "modifiers": "public", "return": "", "signature": " SpawnProcessForEachMachine(\n        ProcessEngine processEngine, String processKey, String type, String resultVariable\n    )", "full_signature": "public  SpawnProcessForEachMachine(\n        ProcessEngine processEngine, String processKey, String type, String resultVariable\n    )", "class_method_signature": "SpawnProcessForEachMachine.SpawnProcessForEachMachine(\n        ProcessEngine processEngine, String processKey, String type, String resultVariable\n    )", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "SpawnProcessForEachMachine.execute(DelegateExecution execution)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/axemblr/provisionr/core/activities/SpawnProcessForEachMachine.java"}, "focal_method": {"identifier": "execute", "parameters": "(DelegateExecution execution)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(DelegateExecution execution) throws Exception {\n        final Pool pool = (Pool) execution.getVariable(CoreProcessVariables.POOL);\n        checkNotNull(pool, \"Expecting to find a pool description as process variable\");\n\n        @SuppressWarnings(\"unchecked\")\n        List<Machine> machines = (List<Machine>) execution.getVariable(CoreProcessVariables.MACHINES);\n        checkNotNull(machines, \"Expecting to find the list of machines as process variable\");\n\n        final String poolBusinessKey = String.class.cast(execution.getVariable(CoreProcessVariables.POOL_BUSINESS_KEY));\n        checkNotNull(poolBusinessKey, \"No way to link sub-processes to master process, poolBusinessKey is null\");\n\n        /* Authenticate as kermit to make the process visible in the Explorer UI */\n        processEngine.getIdentityService().setAuthenticatedUserId(CoreConstants.ACTIVITI_EXPLORER_DEFAULT_USER);\n\n        List<String> processIds = Lists.newArrayList();\n        for (Machine machine : machines) {\n            final String perMachineProcessBusinessKey = String.format(\"%s-%s-%s\",\n                execution.getProcessBusinessKey(), type, machine.getExternalId());\n\n            ProcessInstance perMachineProcess = processEngine.getRuntimeService().startProcessInstanceByKey(\n                processKey, perMachineProcessBusinessKey,\n                ImmutableMap.<String, Object>of(CoreProcessVariables.POOL, pool,\n                    CoreProcessVariables.POOL_BUSINESS_KEY, poolBusinessKey,\n                    MACHINE, machine));\n\n            LOG.info(\"Started background '\" + type + \"' process {} ({}) for machine {}\",\n                new Object[]{perMachineProcessBusinessKey, perMachineProcess.getId(), machine.getExternalId()});\n            processIds.add(perMachineProcess.getId());\n        }\n\n        LOG.info(\"Saving process IDs {} as {}\", processIds, resultVariable);\n        execution.setVariable(resultVariable, processIds);\n    }", "signature": "void execute(DelegateExecution execution)", "full_signature": "@Override public void execute(DelegateExecution execution)", "class_method_signature": "SpawnProcessForEachMachine.execute(DelegateExecution execution)", "testcase": false, "constructor": false, "invocations": ["getVariable", "checkNotNull", "getVariable", "checkNotNull", "cast", "getVariable", "checkNotNull", "setAuthenticatedUserId", "getIdentityService", "newArrayList", "format", "getProcessBusinessKey", "getExternalId", "startProcessInstanceByKey", "getRuntimeService", "of", "info", "getId", "getExternalId", "add", "getId", "info", "setVariable"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}