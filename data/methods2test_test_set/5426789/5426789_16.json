{"test_class": {"identifier": "CrescentCollectionHandlerTest", "superclass": "extends CrescentTestCaseUtil", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/config/CrescentCollectionHandlerTest.java"}, "test_case": {"identifier": "loadFromXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void loadFromXML() {\n\t\tCrescentCollectionHandler collectionHandler \n\t\t\t= SpringApplicationContext.getBean(\"crescentCollectionHandler\", CrescentCollectionHandler.class);\n\t\t\n\t\tCrescentCollections collections = collectionHandler.getCrescentCollections();\n\t\t\n\t\tSystem.out.println(collections);\n\t\t\n\t\tAssert.assertNotNull(collections);\n\t\t\n\t\tList<CrescentCollection> collectionList = collections.getCrescentCollections();\n\t\t\n\t\tAssert.assertTrue(collectionList.size() > 0);\n\t}", "signature": "void loadFromXML()", "full_signature": "@Test public void loadFromXML()", "class_method_signature": "CrescentCollectionHandlerTest.loadFromXML()", "testcase": true, "constructor": false, "invocations": ["getBean", "getCrescentCollections", "println", "assertNotNull", "getCrescentCollections", "assertTrue", "size"]}, "focal_class": {"identifier": "CrescentCollectionHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private  Logger logger = LoggerFactory.getLogger(CrescentCollectionHandler.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CrescentCollectionHandler.class)", "var_name": "logger"}, {"original_string": "@Value(\"#{systemProperties['runningMode'] == null ? 'real' : systemProperties['runningMode']}\")\n\tprivate String mode = null;", "modifier": "@Value(\"#{systemProperties['runningMode'] == null ? 'real' : systemProperties['runningMode']}\")\n\tprivate", "type": "String", "declarator": "mode = null", "var_name": "mode"}, {"original_string": "@Value(\"#{systemProperties['crescentHome'] == null ? 'default' : systemProperties['crescentHome']}\")\n\tprivate String crescentHomeLocation = null;", "modifier": "@Value(\"#{systemProperties['crescentHome'] == null ? 'default' : systemProperties['crescentHome']}\")\n\tprivate", "type": "String", "declarator": "crescentHomeLocation = null", "var_name": "crescentHomeLocation"}, {"original_string": "private CrescentCollections crescentCollections = null;", "modifier": "private", "type": "CrescentCollections", "declarator": "crescentCollections = null", "var_name": "crescentCollections"}, {"original_string": "private String collectionsXmlLocation = null;", "modifier": "private", "type": "String", "declarator": "collectionsXmlLocation = null", "var_name": "collectionsXmlLocation"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "CrescentCollectionHandler.init()", "testcase": false, "constructor": false}, {"identifier": "loadFromXML", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadFromXML()", "full_signature": "private void loadFromXML()", "class_method_signature": "CrescentCollectionHandler.loadFromXML()", "testcase": false, "constructor": false}, {"identifier": "getCrescentCollections", "parameters": "()", "modifiers": "public", "return": "CrescentCollections", "signature": "CrescentCollections getCrescentCollections()", "full_signature": "public CrescentCollections getCrescentCollections()", "class_method_signature": "CrescentCollectionHandler.getCrescentCollections()", "testcase": false, "constructor": false}, {"identifier": "writeToXML", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeToXML()", "full_signature": "public void writeToXML()", "class_method_signature": "CrescentCollectionHandler.writeToXML()", "testcase": false, "constructor": false}, {"identifier": "makeFieldsMap", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void makeFieldsMap()", "full_signature": "private void makeFieldsMap()", "class_method_signature": "CrescentCollectionHandler.makeFieldsMap()", "testcase": false, "constructor": false}, {"identifier": "makeAddtionalFields", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void makeAddtionalFields()", "full_signature": "private void makeAddtionalFields()", "class_method_signature": "CrescentCollectionHandler.makeAddtionalFields()", "testcase": false, "constructor": false}, {"identifier": "reloadCollectionsXML", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reloadCollectionsXML()", "full_signature": "public void reloadCollectionsXML()", "class_method_signature": "CrescentCollectionHandler.reloadCollectionsXML()", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/config/CrescentCollectionHandler.java"}, "focal_method": {"identifier": "loadFromXML", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void loadFromXML() {\n\t\t\n\t\t\n\t\tXStream stream = new XStream();\n\t\tstream.processAnnotations(CrescentCollections.class);\n\t\tstream.alias( \"collections\", CrescentCollections.class );\n\t\tstream.addImplicitCollection( CrescentCollections.class, \"crescentCollections\" );\n\t\t\n\t\tlogger.info(\"collectionsXmlLocation : {}\", collectionsXmlLocation);\n\t\t\n\t\tResourceLoader resourceLoader = new ResourceLoader(collectionsXmlLocation);\n\t\tInputStream inputStream = resourceLoader.getInputStream();\n\t\t\n\t\tcrescentCollections = (CrescentCollections)stream.fromXML(inputStream);\n\t\t\n\t\tif(crescentCollections == null) {\n\t\t\tString errorMsg = \"Crescent Collections is not loaded from xml : [\"+collectionsXmlLocation+\"]\";\n\t\t\tlogger.error(errorMsg);\n\t\t\t\n\t\t\tthrow new IllegalStateException(errorMsg);\n\t\t}\n\t\t\n\t\t// indexingDirectory\uac00 \uc808\ub300\uacbd\ub85c\uac00 \uc544\ub2cc\uacbd\uc6b0 \uc784\uc758\ub85c \uacbd\ub85c \uc218\uc815,  maven local profile\uc5d0\uc11c \uc0ac\uc6a9\n\t\tList<CrescentCollection> list = crescentCollections.getCrescentCollections();\n\t\tfor (CrescentCollection collection : list) {\n\t\t\tString path = collection.getIndexingDirectory();\n\t\t\tFile file = new File(path);\n\t\t\tif (!file.isAbsolute()) {\n\t\t\t\tString webRoot = System.getProperty(\"webapp.root\");\n\t\t\t\tif (webRoot != null)\n\t\t\t\t\tcollection.setIndexingDirectory(webRoot + path);\n\t\t\t}\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tinputStream.close();\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"stream close error ; \", e);\n\t\t}\n\t\t\n\t\t//Analyzer \uc0dd\uc131\n\t\tfor (CrescentCollection collection : list) {\n\t\t\tList<CrescentAnalyzerHolder> analyzerHolders = collection.getAnalyzers();\n\t\t\t\n\t\t\tfor(CrescentAnalyzerHolder analyzerHolder : analyzerHolders) {\n\t\t\t\tString type = analyzerHolder.getType();\n\t\t\t\tString className = analyzerHolder.getClassName();\n\t\t\t\tString constructorArgs = analyzerHolder.getConstructorArgs();\n\t\t\t\t\n\t\t\t\tAnalyzer analyzer = null;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tClass<Analyzer> analyzerClass = (Class<Analyzer>) Class.forName(className);\t\n\t\t\t\t\t\n\t\t\t\t\tif(constructorArgs == null || constructorArgs.trim().length() == 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tanalyzer = analyzerClass.newInstance();\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (\"true\".equals(constructorArgs.toLowerCase()) || \"false\".equals(constructorArgs.toLowerCase())) {\n\t\t\t\t\t\n\t\t\t\t\t\tboolean booleanStr = Boolean.valueOf(constructorArgs);\n\t\t\t\t\t\tClass<?>[] intArgsClass = new Class<?>[] {boolean.class};\n\t\t\t\t\t\tObject[] intArgs = new Object[] {booleanStr};\n\t\t\t\t\t\t\n\t\t\t\t\t\tConstructor<Analyzer> intArgsConstructor = analyzerClass.getConstructor(intArgsClass);\n\t\t\t\t\t\tanalyzer = (Analyzer) intArgsConstructor.newInstance(intArgs);\n\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\t\tClass<?> initArgClass = Class.forName(constructorArgs);\n\t\t\t\t\t\t\n\t\t\t\t\t\tClass<?>[] intArgsClass = new Class<?>[] {initArgClass.getClass()};\n\t\t\t\t\t\tObject[] intArgs = new Object[] {initArgClass.newInstance()};\n\t\t\t\t\t\t\n\t\t\t\t\t\tConstructor<Analyzer> intArgsConstructor = analyzerClass.getConstructor(intArgsClass);\n\t\t\t\t\t\tanalyzer = (Analyzer) intArgsConstructor.newInstance(intArgs);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(\"indexing\".equals(type)) {\n\n\t\t\t\t\t\tcollection.setIndexingModeAnalyzer(analyzer);\n\t\t\t\t\t\n\t\t\t\t\t} else if(\"search\".equals(type)) {\n\t\t\t\t\t\n\t\t\t\t\t\tcollection.setSearchModeAnalyzer(analyzer);\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new IllegalStateException(\"\uc815\uc758\ub418\uc9c0 \uc54a\uc740 Analyzer type \uc785\ub2c8\ub2e4. [\"+type+\"]\");\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (InstantiationException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (SecurityException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void loadFromXML()", "full_signature": "private void loadFromXML()", "class_method_signature": "CrescentCollectionHandler.loadFromXML()", "testcase": false, "constructor": false, "invocations": ["processAnnotations", "alias", "addImplicitCollection", "info", "getInputStream", "fromXML", "error", "getCrescentCollections", "getIndexingDirectory", "isAbsolute", "getProperty", "setIndexingDirectory", "close", "error", "getAnalyzers", "getType", "getClassName", "getConstructorArgs", "forName", "length", "trim", "newInstance", "equals", "toLowerCase", "equals", "toLowerCase", "valueOf", "getConstructor", "newInstance", "forName", "getClass", "newInstance", "getConstructor", "newInstance", "equals", "setIndexingModeAnalyzer", "equals", "setSearchModeAnalyzer", "printStackTrace", "printStackTrace", "printStackTrace", "printStackTrace", "printStackTrace", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}