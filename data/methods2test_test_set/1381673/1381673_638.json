{"test_class": {"identifier": "OverlapsFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OverlapsFunction overlapsFunction;", "modifier": "private", "type": "OverlapsFunction", "declarator": "overlapsFunction", "var_name": "overlapsFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/interval/OverlapsFunctionTest.java"}, "test_case": {"identifier": "invokeParamsCantBeCompared", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeParamsCantBeCompared() {\n        FunctionTestUtil.assertResultError( overlapsFunction.invoke(\n                new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ),\n                new RangeImpl( Range.RangeBoundary.CLOSED,  1, 2, Range.RangeBoundary.CLOSED ) ), InvalidParametersEvent.class );\n    }", "signature": "void invokeParamsCantBeCompared()", "full_signature": "@Test public void invokeParamsCantBeCompared()", "class_method_signature": "OverlapsFunctionTest.invokeParamsCantBeCompared()", "testcase": true, "constructor": false, "invocations": ["assertResultError", "invoke"]}, "focal_class": {"identifier": "OverlapsFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final OverlapsFunction INSTANCE = new OverlapsFunction();", "modifier": "public static final", "type": "OverlapsFunction", "declarator": "INSTANCE = new OverlapsFunction()", "var_name": "INSTANCE"}], "methods": [{"identifier": "OverlapsFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " OverlapsFunction()", "full_signature": "public  OverlapsFunction()", "class_method_signature": "OverlapsFunction.OverlapsFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "signature": "FEELFnResult<Boolean> invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "class_method_signature": "OverlapsFunction.invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/interval/OverlapsFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "modifiers": "public", "return": "FEELFnResult<Boolean>", "body": "public FEELFnResult<Boolean> invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2) {\n        if (range1 == null) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range1\", \"cannot be null\"));\n        }\n        if (range2 == null) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range2\", \"cannot be null\"));\n        }\n        try {\n            boolean result = (range1.getHighEndPoint().compareTo(range2.getLowEndPoint()) > 0 ||\n                              (range1.getHighEndPoint().compareTo(range2.getLowEndPoint()) == 0 &&\n                               range1.getHighBoundary() == RangeBoundary.CLOSED &&\n                               range2.getLowBoundary() == RangeBoundary.CLOSED)) &&\n                             (range1.getLowEndPoint().compareTo(range2.getHighEndPoint()) < 0 ||\n                              (range1.getLowEndPoint().compareTo(range2.getHighEndPoint()) == 0 &&\n                               range1.getLowBoundary() == RangeBoundary.CLOSED &&\n                               range2.getHighBoundary() == RangeBoundary.CLOSED));\n            return FEELFnResult.ofResult(result);\n        } catch (Exception e) {\n            // values are not comparable\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range1\", \"cannot be compared to range2\"));\n        }\n    }", "signature": "FEELFnResult<Boolean> invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "full_signature": "public FEELFnResult<Boolean> invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "class_method_signature": "OverlapsFunction.invoke(@ParameterName(\"range1\") Range range1, @ParameterName(\"range2\") Range range2)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "compareTo", "getHighEndPoint", "getLowEndPoint", "compareTo", "getHighEndPoint", "getLowEndPoint", "getHighBoundary", "getLowBoundary", "compareTo", "getLowEndPoint", "getHighEndPoint", "compareTo", "getLowEndPoint", "getHighEndPoint", "getLowBoundary", "getHighBoundary", "ofResult", "ofError"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}