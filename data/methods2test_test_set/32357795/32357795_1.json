{"test_class": {"identifier": "ModuleReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"nav2\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"nav2\"", "var_name": "testdataDirectory"}], "file": "ontopia-navigator/src/test/java/net/ontopia/topicmaps/nav2/utils/ModuleReaderTest.java"}, "test_case": {"identifier": "testEncrypted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEncrypted() throws IOException, SAXException {\n    String inpFile = TestFileUtils.getTestInputFile(testdataDirectory, \"functions\", \"encryptedTest.jsm\");\n    ModuleReaderIF modReader = new ModuleReader(true);\n    Map funcs = modReader.read(StreamUtils.getInputStream(inpFile));\n\n    Assert.assertTrue(\"Could not retrieve correct number of functions from encrypted module file\",\n               funcs.size() == 1);\n    \n    Assert.assertTrue(\"Could not retrieve function 'names' from encrypted module file\",\n               funcs.containsKey(\"names\"));\n    \n    Assert.assertTrue(\"Object is not instance of FunctionIF.\",\n               funcs.get(\"names\") instanceof FunctionIF); \n  }", "signature": "void testEncrypted()", "full_signature": "@Test public void testEncrypted()", "class_method_signature": "ModuleReaderTest.testEncrypted()", "testcase": true, "constructor": false, "invocations": ["getTestInputFile", "read", "getInputStream", "assertTrue", "size", "assertTrue", "containsKey", "assertTrue", "get"]}, "focal_class": {"identifier": "ModuleReader", "superclass": "", "interfaces": "implements ModuleReaderIF", "fields": [{"original_string": "private static Logger logger =\n    LoggerFactory.getLogger(ModuleReader.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "logger =\n    LoggerFactory.getLogger(ModuleReader.class.getName())", "var_name": "logger"}, {"original_string": "protected boolean encrypted;", "modifier": "protected", "type": "boolean", "declarator": "encrypted", "var_name": "encrypted"}, {"original_string": "protected XMLReader parser;", "modifier": "protected", "type": "XMLReader", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "ModuleReader", "parameters": "(boolean encrypted)", "modifiers": "public", "return": "", "signature": " ModuleReader(boolean encrypted)", "full_signature": "public  ModuleReader(boolean encrypted)", "class_method_signature": "ModuleReader.ModuleReader(boolean encrypted)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(InputStream source)", "modifiers": "@Override public", "return": "Map", "signature": "Map read(InputStream source)", "full_signature": "@Override public Map read(InputStream source)", "class_method_signature": "ModuleReader.read(InputStream source)", "testcase": false, "constructor": false}, {"identifier": "getXMLParser", "parameters": "()", "modifiers": "protected", "return": "XMLReader", "signature": "XMLReader getXMLParser()", "full_signature": "protected XMLReader getXMLParser()", "class_method_signature": "ModuleReader.getXMLParser()", "testcase": false, "constructor": false}], "file": "ontopia-navigator/src/main/java/net/ontopia/topicmaps/nav2/utils/ModuleReader.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream source)", "modifiers": "@Override public", "return": "Map", "body": "@Override\n  public Map read(InputStream source) throws IOException, SAXException {\n    logger.debug(\"Start to read in module.\");\n    parser = getXMLParser();\n    ModuleContentHandler handler = new ModuleContentHandler();\n    handler.register(parser);\n    InputSource inpsrc = new InputSource();\n    if (encrypted)\n      inpsrc.setByteStream(new EncryptedInputStream(source));\n    else\n      inpsrc.setByteStream(source);\n    \n    try {\n      parser.parse(inpsrc);\n    } catch (SAXParseException e) {\n      throw new SAXException(e.getLineNumber() + \":\" +\n                             e.getColumnNumber() + \": \" +\n                             e.getMessage());\n    }\n\n    return handler.getFunctions();\n  }", "signature": "Map read(InputStream source)", "full_signature": "@Override public Map read(InputStream source)", "class_method_signature": "ModuleReader.read(InputStream source)", "testcase": false, "constructor": false, "invocations": ["debug", "getXMLParser", "register", "setByteStream", "setByteStream", "parse", "getLineNumber", "getColumnNumber", "getMessage", "getFunctions"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}