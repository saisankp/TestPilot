{"test_class": {"identifier": "CommandUtilityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Path mockedPath = Paths.get(\"\\\\tmp\");", "modifier": "", "type": "Path", "declarator": "mockedPath = Paths.get(\"\\\\tmp\")", "var_name": "mockedPath"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/utils/CommandUtilityTest.java"}, "test_case": {"identifier": "testCommandUtility", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommandUtility() throws Exception{\n\n        List<String> commands = new ArrayList<>();\n        commands.add(\"# comment\");\n        commands.add(\"ps -aef | grep {0}\");\n        Stream<String> commandStream = commands.stream();\n        PowerMockito.mockStatic(Paths.class);\n        PowerMockito.mockStatic(Files.class);\n        PowerMockito.mockStatic(ClassLoader.class);\n\n        URL url = PowerMockito.mock(URL.class);\n        PowerMockito.when(ClassLoader.getSystemResource(Mockito.anyString())).thenReturn(url);\n\n        PowerMockito.when(Paths.get(Mockito.anyObject())).thenReturn(mockedPath);\n        PowerMockito.when(Files.lines(Mockito.any(Path.class))).thenReturn(commandStream);\n\n        List<String> processedCommands = CommandUtility.getCommandsFromFile(\"test.txt\", \"nginx\");\n        Assert.assertNotNull(processedCommands);\n        Assert.assertTrue(processedCommands.get(0).contains(\"nginx\"));\n    }", "signature": "void testCommandUtility()", "full_signature": "@Test public void testCommandUtility()", "class_method_signature": "CommandUtilityTest.testCommandUtility()", "testcase": true, "constructor": false, "invocations": ["add", "add", "stream", "mockStatic", "mockStatic", "mockStatic", "mock", "thenReturn", "when", "getSystemResource", "anyString", "thenReturn", "when", "get", "anyObject", "thenReturn", "when", "lines", "any", "getCommandsFromFile", "assertNotNull", "assertTrue", "contains", "get"]}, "focal_class": {"identifier": "CommandUtility", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getCommandsFromFile", "parameters": "(String fileName, String... params)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getCommandsFromFile(String fileName, String... params)", "full_signature": "public static List<String> getCommandsFromFile(String fileName, String... params)", "class_method_signature": "CommandUtility.getCommandsFromFile(String fileName, String... params)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/utils/CommandUtility.java"}, "focal_method": {"identifier": "getCommandsFromFile", "parameters": "(String fileName, String... params)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getCommandsFromFile(String fileName, String... params) {\n        List<String> commands = new ArrayList<>();\n\n        try (Stream<String> stream = Files.lines(Paths.get(ClassLoader.getSystemResource(fileName).toURI()))) {\n\n            // stream to ignore comments and empty lines\n            // replace parameters using MessageFormat\n            commands = stream\n                    .filter(line -> !line.startsWith(\"#\") && (!line.isEmpty()))\n                    .map(line-> MessageFormat.format(line, params))\n                    .collect(Collectors.toList());\n\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n\n        return commands;\n    }", "signature": "List<String> getCommandsFromFile(String fileName, String... params)", "full_signature": "public static List<String> getCommandsFromFile(String fileName, String... params)", "class_method_signature": "CommandUtility.getCommandsFromFile(String fileName, String... params)", "testcase": false, "constructor": false, "invocations": ["lines", "get", "toURI", "getSystemResource", "collect", "map", "filter", "startsWith", "isEmpty", "format", "toList", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}