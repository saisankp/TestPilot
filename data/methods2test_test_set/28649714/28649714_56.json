{"test_class": {"identifier": "EventDaoTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "private EventDao dao;", "modifier": "private", "type": "EventDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private HandicapGroupDao handicapGroupDao;", "modifier": "private", "type": "HandicapGroupDao", "declarator": "handicapGroupDao", "var_name": "handicapGroupDao"}, {"original_string": "private HandicapGroupSetDao handicapGroupSetDao;", "modifier": "private", "type": "HandicapGroupSetDao", "declarator": "handicapGroupSetDao", "var_name": "handicapGroupSetDao"}, {"original_string": "private CompetitionGroupDao competitionGroupDao;", "modifier": "private", "type": "CompetitionGroupDao", "declarator": "competitionGroupDao", "var_name": "competitionGroupDao"}, {"original_string": "private CompetitionGroupSetDao competitionGroupSetDao;", "modifier": "private", "type": "CompetitionGroupSetDao", "declarator": "competitionGroupSetDao", "var_name": "competitionGroupSetDao"}, {"original_string": "private Prerequisites prerequisites;", "modifier": "private", "type": "Prerequisites", "declarator": "prerequisites", "var_name": "prerequisites"}, {"original_string": "@Rule\n    public DAOTestRule daoTestRule = getDaoTestRuleBuilder()\n            .addEntityClass(EventHibernateEntity.class)\n            .addEntityClass(PersonHibernateEntity.class)\n            .addEntityClass(CarHibernateEntity.class)\n            .addEntityClass(RegistrationHibernateEntity.class)\n            .addEntityClass(HandicapGroupHibernateEntity.class)\n            .addEntityClass(HandicapGroupSetHibernateEntity.class)\n            .addEntityClass(CompetitionGroupHibernateEntity.class)\n            .addEntityClass(CompetitionGroupSetHibernateEntity.class)\n        .build();", "modifier": "@Rule\n    public", "type": "DAOTestRule", "declarator": "daoTestRule = getDaoTestRuleBuilder()\n            .addEntityClass(EventHibernateEntity.class)\n            .addEntityClass(PersonHibernateEntity.class)\n            .addEntityClass(CarHibernateEntity.class)\n            .addEntityClass(RegistrationHibernateEntity.class)\n            .addEntityClass(HandicapGroupHibernateEntity.class)\n            .addEntityClass(HandicapGroupSetHibernateEntity.class)\n            .addEntityClass(CompetitionGroupHibernateEntity.class)\n            .addEntityClass(CompetitionGroupSetHibernateEntity.class)\n        .build()", "var_name": "daoTestRule"}], "file": "service/src/test/java/org/coner/core/hibernate/dao/EventDaoTest.java"}, "test_case": {"identifier": "whenCreateWithoutHandicapGroupSetItShouldThrow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenCreateWithoutHandicapGroupSetItShouldThrow() {\n        EventHibernateEntity entity = buildUnsavedEvent();\n        entity.setHandicapGroupSet(null);\n\n        try {\n            daoTestRule.inTransaction(() -> dao.create(entity));\n\n            failBecauseExceptionWasNotThrown(ConstraintViolationException.class);\n        } catch (ConstraintViolationException e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"handicapGroupSet\")\n                    .containsIgnoringCase(\"null\");\n        }\n    }", "signature": "void whenCreateWithoutHandicapGroupSetItShouldThrow()", "full_signature": "@Test public void whenCreateWithoutHandicapGroupSetItShouldThrow()", "class_method_signature": "EventDaoTest.whenCreateWithoutHandicapGroupSetItShouldThrow()", "testcase": true, "constructor": false, "invocations": ["buildUnsavedEvent", "setHandicapGroupSet", "inTransaction", "create", "failBecauseExceptionWasNotThrown", "containsIgnoringCase", "containsIgnoringCase", "assertThat", "getMessage"]}, "focal_class": {"identifier": "EventDao", "superclass": "extends BaseHibernateEntityDao<EventHibernateEntity>", "interfaces": "", "fields": [], "methods": [{"identifier": "EventDao", "parameters": "(SessionFactory sessionFactory)", "modifiers": "@Inject public", "return": "", "signature": " EventDao(SessionFactory sessionFactory)", "full_signature": "@Inject public  EventDao(SessionFactory sessionFactory)", "class_method_signature": "EventDao.EventDao(SessionFactory sessionFactory)", "testcase": false, "constructor": true}, {"identifier": "findById", "parameters": "(String id)", "modifiers": "@Override public", "return": "EventHibernateEntity", "signature": "EventHibernateEntity findById(String id)", "full_signature": "@Override public EventHibernateEntity findById(String id)", "class_method_signature": "EventDao.findById(String id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@Override public", "return": "List<EventHibernateEntity>", "signature": "List<EventHibernateEntity> findAll()", "full_signature": "@Override public List<EventHibernateEntity> findAll()", "class_method_signature": "EventDao.findAll()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(EventHibernateEntity event)", "modifiers": "@Override public", "return": "void", "signature": "void create(EventHibernateEntity event)", "full_signature": "@Override public void create(EventHibernateEntity event)", "class_method_signature": "EventDao.create(EventHibernateEntity event)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/hibernate/dao/EventDao.java"}, "focal_method": {"identifier": "create", "parameters": "(EventHibernateEntity event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void create(EventHibernateEntity event) {\n        persist(event);\n    }", "signature": "void create(EventHibernateEntity event)", "full_signature": "@Override public void create(EventHibernateEntity event)", "class_method_signature": "EventDao.create(EventHibernateEntity event)", "testcase": false, "constructor": false, "invocations": ["persist"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}