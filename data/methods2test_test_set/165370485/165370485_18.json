{"test_class": {"identifier": "Socks5IqHandlerTest", "superclass": "extends Mockito", "interfaces": "", "fields": [{"original_string": "private static final Entity FROM = EntityImpl.parseUnchecked(\"requestor@vysper.org\");", "modifier": "private static final", "type": "Entity", "declarator": "FROM = EntityImpl.parseUnchecked(\"requestor@vysper.org\")", "var_name": "FROM"}, {"original_string": "private static final Entity TARGET = EntityImpl.parseUnchecked(\"target@vysper.org\");", "modifier": "private static final", "type": "Entity", "declarator": "TARGET = EntityImpl.parseUnchecked(\"target@vysper.org\")", "var_name": "TARGET"}, {"original_string": "private static final Entity TO = EntityImpl.parseUnchecked(\"socks.vysper.org\");", "modifier": "private static final", "type": "Entity", "declarator": "TO = EntityImpl.parseUnchecked(\"socks.vysper.org\")", "var_name": "TO"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext = Mockito.mock(ServerRuntimeContext.class);", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext = Mockito.mock(ServerRuntimeContext.class)", "var_name": "serverRuntimeContext"}, {"original_string": "private SessionContext sessionContext = Mockito.mock(SessionContext.class);", "modifier": "private", "type": "SessionContext", "declarator": "sessionContext = Mockito.mock(SessionContext.class)", "var_name": "sessionContext"}, {"original_string": "private IQStanza stanza = (IQStanza) IQStanza.getWrapper(buildStanza());", "modifier": "private", "type": "IQStanza", "declarator": "stanza = (IQStanza) IQStanza.getWrapper(buildStanza())", "var_name": "stanza"}, {"original_string": "private Socks5ConnectionsRegistry connectionsRegistry = mock(Socks5ConnectionsRegistry.class);", "modifier": "private", "type": "Socks5ConnectionsRegistry", "declarator": "connectionsRegistry = mock(Socks5ConnectionsRegistry.class)", "var_name": "connectionsRegistry"}, {"original_string": "private Entity jid = EntityImpl.parseUnchecked(\"socks.vysper.org\");", "modifier": "private", "type": "Entity", "declarator": "jid = EntityImpl.parseUnchecked(\"socks.vysper.org\")", "var_name": "jid"}, {"original_string": "private InetSocketAddress proxyAddress = new InetSocketAddress(\"1.2.3.4\", 12345);", "modifier": "private", "type": "InetSocketAddress", "declarator": "proxyAddress = new InetSocketAddress(\"1.2.3.4\", 12345)", "var_name": "proxyAddress"}, {"original_string": "private Socks5IqHandler handler = new Socks5IqHandler(jid, proxyAddress, connectionsRegistry);", "modifier": "private", "type": "Socks5IqHandler", "declarator": "handler = new Socks5IqHandler(jid, proxyAddress, connectionsRegistry)", "var_name": "handler"}], "file": "server/extensions/xep0065-socks/src/test/java/org/apache/vysper/xmpp/extension/xep0065_socks/Socks5IqHandlerTest.java"}, "test_case": {"identifier": "handleGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleGet() throws BindException, XMLSemanticError {\n        List<Stanza> responses = handler.handleGet(stanza, serverRuntimeContext, sessionContext, null);\n        Stanza response = responses.get(0);\n\n        Stanza expected = StanzaBuilder\n                .createIQStanza(stanza.getTo(), stanza.getFrom(), IQStanzaType.RESULT, stanza.getID())\n                .startInnerElement(\"query\", NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS)\n                .startInnerElement(\"streamhost\", NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS)\n                .addAttribute(\"host\", proxyAddress.getHostName()).addAttribute(\"jid\", jid.getFullQualifiedName())\n                .addAttribute(\"port\", Integer.toString(proxyAddress.getPort())).build();\n\n        StanzaAssert.assertEquals(expected, response);\n    }", "signature": "void handleGet()", "full_signature": "@Test public void handleGet()", "class_method_signature": "Socks5IqHandlerTest.handleGet()", "testcase": true, "constructor": false, "invocations": ["handleGet", "get", "build", "addAttribute", "addAttribute", "addAttribute", "startInnerElement", "startInnerElement", "createIQStanza", "getTo", "getFrom", "getID", "getHostName", "getFullQualifiedName", "toString", "getPort", "assertEquals"]}, "focal_class": {"identifier": "Socks5IqHandler", "superclass": "extends DefaultIQHandler", "interfaces": "", "fields": [{"original_string": "private static InetAddress DEFAULT_ADDRESS;", "modifier": "private static", "type": "InetAddress", "declarator": "DEFAULT_ADDRESS", "var_name": "DEFAULT_ADDRESS"}, {"original_string": "final Logger logger = LoggerFactory.getLogger(Socks5IqHandler.class);", "modifier": "final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Socks5IqHandler.class)", "var_name": "logger"}, {"original_string": "private Entity jid;", "modifier": "private", "type": "Entity", "declarator": "jid", "var_name": "jid"}, {"original_string": "private InetSocketAddress proxyAddress;", "modifier": "private", "type": "InetSocketAddress", "declarator": "proxyAddress", "var_name": "proxyAddress"}, {"original_string": "private Socks5ConnectionsRegistry connections;", "modifier": "private", "type": "Socks5ConnectionsRegistry", "declarator": "connections", "var_name": "connections"}], "methods": [{"identifier": "Socks5IqHandler", "parameters": "(Entity jid, InetSocketAddress proxyAddress, Socks5ConnectionsRegistry connections)", "modifiers": "public", "return": "", "signature": " Socks5IqHandler(Entity jid, InetSocketAddress proxyAddress, Socks5ConnectionsRegistry connections)", "full_signature": "public  Socks5IqHandler(Entity jid, InetSocketAddress proxyAddress, Socks5ConnectionsRegistry connections)", "class_method_signature": "Socks5IqHandler.Socks5IqHandler(Entity jid, InetSocketAddress proxyAddress, Socks5ConnectionsRegistry connections)", "testcase": false, "constructor": true}, {"identifier": "verifyInnerElement", "parameters": "(Stanza stanza)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean verifyInnerElement(Stanza stanza)", "full_signature": "@Override protected boolean verifyInnerElement(Stanza stanza)", "class_method_signature": "Socks5IqHandler.verifyInnerElement(Stanza stanza)", "testcase": false, "constructor": false}, {"identifier": "handleGet", "parameters": "(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "modifiers": "@Override protected", "return": "List<Stanza>", "signature": "List<Stanza> handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "full_signature": "@Override protected List<Stanza> handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "class_method_signature": "Socks5IqHandler.handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "testcase": false, "constructor": false}, {"identifier": "handleSet", "parameters": "(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "modifiers": "@Override protected", "return": "List<Stanza>", "signature": "List<Stanza> handleSet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "full_signature": "@Override protected List<Stanza> handleSet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "class_method_signature": "Socks5IqHandler.handleSet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "testcase": false, "constructor": false}], "file": "server/extensions/xep0065-socks/src/main/java/org/apache/vysper/xmpp/extension/xep0065_socks/Socks5IqHandler.java"}, "focal_method": {"identifier": "handleGet", "parameters": "(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "modifiers": "@Override protected", "return": "List<Stanza>", "body": "@Override\n    protected List<Stanza> handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker) {\n        /*\n            C: <iq from='requester@example.com/foo'\n                    id='uj2c15z9'\n                    to='streamer.example.com'\n                    type='get'>\n                  <query xmlns='http://jabber.org/protocol/bytestreams'/>\n               </iq>\n            \n            S: <iq from='streamer.example.com'\n                    id='uj2c15z9'\n                    to='requester@example.com/foo'\n                    type='result'>\n                  <query xmlns='http://jabber.org/protocol/bytestreams'>\n                    <streamhost\n                        host='24.24.24.1'\n                        jid='streamer.example.com'\n                        port='7625'/>\n                  </query>\n                </iq>\n         */\n        \n        StanzaBuilder builder = StanzaBuilder.createIQStanza(stanza.getTo(), stanza.getFrom(), IQStanzaType.RESULT, stanza.getID())\n            .startInnerElement(\"query\", NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS)\n            .startInnerElement(\"streamhost\", NamespaceURIs.XEP0065_SOCKS5_BYTESTREAMS);\n        \n        // if an address is provided on the proxy address, use that, else use the JID\n        if(DEFAULT_ADDRESS.equals(proxyAddress.getAddress())) {\n            builder.addAttribute(\"host\", jid.getFullQualifiedName());\n        } else {\n            builder.addAttribute(\"host\", proxyAddress.getHostName());\n        }\n        builder.addAttribute(\"jid\", jid.getFullQualifiedName())\n            .addAttribute(\"port\", Integer.toString(proxyAddress.getPort()));\n        \n        return Collections.singletonList(builder.build());\n    }", "signature": "List<Stanza> handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "full_signature": "@Override protected List<Stanza> handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "class_method_signature": "Socks5IqHandler.handleGet(IQStanza stanza, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext, StanzaBroker stanzaBroker)", "testcase": false, "constructor": false, "invocations": ["startInnerElement", "startInnerElement", "createIQStanza", "getTo", "getFrom", "getID", "equals", "getAddress", "addAttribute", "getFullQualifiedName", "addAttribute", "getHostName", "addAttribute", "addAttribute", "getFullQualifiedName", "toString", "getPort", "singletonList", "build"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}