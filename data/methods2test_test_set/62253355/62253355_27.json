{"test_class": {"identifier": "ImportsResolverImplTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private ImportsResolverImpl resolver;", "modifier": "private", "type": "ImportsResolverImpl", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private IRI headCommitIRI;", "modifier": "private", "type": "IRI", "declarator": "headCommitIRI", "var_name": "headCommitIRI"}, {"original_string": "private IRI recordIRI;", "modifier": "private", "type": "IRI", "declarator": "recordIRI", "var_name": "recordIRI"}, {"original_string": "private IRI catalogIRI;", "modifier": "private", "type": "IRI", "declarator": "catalogIRI", "var_name": "catalogIRI"}, {"original_string": "private IRI ontologyIRI;", "modifier": "private", "type": "IRI", "declarator": "ontologyIRI", "var_name": "ontologyIRI"}, {"original_string": "private Model localModel;", "modifier": "private", "type": "Model", "declarator": "localModel", "var_name": "localModel"}, {"original_string": "private static HttpUrlStreamHandler httpUrlStreamHandler;", "modifier": "private static", "type": "HttpUrlStreamHandler", "declarator": "httpUrlStreamHandler", "var_name": "httpUrlStreamHandler"}, {"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private RepositoryConfig repositoryConfig;", "modifier": "@Mock\n    private", "type": "RepositoryConfig", "declarator": "repositoryConfig", "var_name": "repositoryConfig"}, {"original_string": "@Mock\n    private SesameTransformer transformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private Branch masterBranch;", "modifier": "@Mock\n    private", "type": "Branch", "declarator": "masterBranch", "var_name": "masterBranch"}], "file": "com.mobi.ontology.utils/src/test/java/com/mobi/ontology/utils/imports/impl/ImportsResolverImplTest.java"}, "test_case": {"identifier": "retrieveOntologyLocalMasterDoesNotExistTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void retrieveOntologyLocalMasterDoesNotExistTest() {\n        when(masterBranch.getHead_resource()).thenReturn(Optional.empty());\n\n        IRI iri = vf.createIRI(\"urn:localOntology\");\n        Optional<Model> local = resolver.retrieveOntologyLocal(iri, ontologyManager);\n        assertFalse(local.isPresent());\n    }", "signature": "void retrieveOntologyLocalMasterDoesNotExistTest()", "full_signature": "@Test public void retrieveOntologyLocalMasterDoesNotExistTest()", "class_method_signature": "ImportsResolverImplTest.retrieveOntologyLocalMasterDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHead_resource", "empty", "createIRI", "retrieveOntologyLocal", "assertFalse", "isPresent"]}, "focal_class": {"identifier": "ImportsResolverImpl", "superclass": "", "interfaces": "implements ImportsResolver", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(ImportsResolverImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImportsResolverImpl.class)", "var_name": "log"}, {"original_string": "private CatalogConfigProvider catalogConfigProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "catalogConfigProvider", "var_name": "catalogConfigProvider"}, {"original_string": "private CatalogManager catalogManager;", "modifier": "private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private String userAgent;", "modifier": "private", "type": "String", "declarator": "userAgent", "var_name": "userAgent"}, {"original_string": "private static final String ACCEPT_HEADERS = \"application/rdf+xml, application/xml; q=0.7, text/xml; q=0.6,\"\n            + \"text/turtle; q=0.5, application/ld+json; q=0.4, application/trig; q=0.3, application/n-triples; q=0.2,\"\n            + \" application/n-quads; q=0.19, text/n3; q=0.18, text/plain; q=0.1, */*; q=0.09\";", "modifier": "private static final", "type": "String", "declarator": "ACCEPT_HEADERS = \"application/rdf+xml, application/xml; q=0.7, text/xml; q=0.6,\"\n            + \"text/turtle; q=0.5, application/ld+json; q=0.4, application/trig; q=0.3, application/n-triples; q=0.2,\"\n            + \" application/n-quads; q=0.19, text/n3; q=0.18, text/plain; q=0.1, */*; q=0.09\"", "var_name": "ACCEPT_HEADERS"}, {"original_string": "protected static Set<String> formats = Stream.of(\".rdf\", \".ttl\", \".owl\", \".xml\", \".jsonld\", \".trig\", \".json\", \".n3\",\n            \".nq\", \".nt\").collect(Collectors.toSet());", "modifier": "protected static", "type": "Set<String>", "declarator": "formats = Stream.of(\".rdf\", \".ttl\", \".owl\", \".xml\", \".jsonld\", \".trig\", \".json\", \".n3\",\n            \".nq\", \".nt\").collect(Collectors.toSet())", "var_name": "formats"}, {"original_string": "static final String COMPONENT_NAME = \"com.mobi.ontology.utils.imports.ImportsResolver\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.ontology.utils.imports.ImportsResolver\"", "var_name": "COMPONENT_NAME"}], "methods": [{"identifier": "setCatalogConfigProvider", "parameters": "(CatalogConfigProvider catalogConfigProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogConfigProvider(CatalogConfigProvider catalogConfigProvider)", "full_signature": "@Reference void setCatalogConfigProvider(CatalogConfigProvider catalogConfigProvider)", "class_method_signature": "ImportsResolverImpl.setCatalogConfigProvider(CatalogConfigProvider catalogConfigProvider)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "ImportsResolverImpl.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory mf)", "modifiers": "@Reference", "return": "void", "signature": "void setModelFactory(ModelFactory mf)", "full_signature": "@Reference void setModelFactory(ModelFactory mf)", "class_method_signature": "ImportsResolverImpl.setModelFactory(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(SesameTransformer transformer)", "modifiers": "@Reference", "return": "void", "signature": "void setTransformer(SesameTransformer transformer)", "full_signature": "@Reference void setTransformer(SesameTransformer transformer)", "class_method_signature": "ImportsResolverImpl.setTransformer(SesameTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate protected", "return": "void", "signature": "void activate(Map<String, Object> props)", "full_signature": "@Activate protected void activate(Map<String, Object> props)", "class_method_signature": "ImportsResolverImpl.activate(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "retrieveOntologyFromWeb", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "Optional<Model>", "signature": "Optional<Model> retrieveOntologyFromWeb(Resource resource)", "full_signature": "@Override public Optional<Model> retrieveOntologyFromWeb(Resource resource)", "class_method_signature": "ImportsResolverImpl.retrieveOntologyFromWeb(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "(String urlStr, RDFParser... parsers)", "modifiers": "private", "return": "Optional<Model>", "signature": "Optional<Model> getModel(String urlStr, RDFParser... parsers)", "full_signature": "private Optional<Model> getModel(String urlStr, RDFParser... parsers)", "class_method_signature": "ImportsResolverImpl.getModel(String urlStr, RDFParser... parsers)", "testcase": false, "constructor": false}, {"identifier": "retrieveOntologyLocal", "parameters": "(Resource ontologyIRI, OntologyManager ontologyManager)", "modifiers": "@Override public", "return": "Optional<Model>", "signature": "Optional<Model> retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "full_signature": "@Override public Optional<Model> retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "class_method_signature": "ImportsResolverImpl.retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "private", "return": "Long", "signature": "Long getStartTime()", "full_signature": "private Long getStartTime()", "class_method_signature": "ImportsResolverImpl.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "logDebug", "parameters": "(String operationDescription, Long start)", "modifiers": "private", "return": "void", "signature": "void logDebug(String operationDescription, Long start)", "full_signature": "private void logDebug(String operationDescription, Long start)", "class_method_signature": "ImportsResolverImpl.logDebug(String operationDescription, Long start)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.utils/src/main/java/com/mobi/ontology/utils/imports/impl/ImportsResolverImpl.java"}, "focal_method": {"identifier": "retrieveOntologyLocal", "parameters": "(Resource ontologyIRI, OntologyManager ontologyManager)", "modifiers": "@Override public", "return": "Optional<Model>", "body": "@Override\n    public Optional<Model> retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager) {\n        Long startTime = getStartTime();\n        Model model = mf.createModel();\n        Optional<Resource> recordIRIOpt = ontologyManager.getOntologyRecordResource(ontologyIRI);\n        if (recordIRIOpt.isPresent()) {\n            Resource recordIRI = recordIRIOpt.get();\n            Optional<Resource> masterHead = catalogManager.getMasterBranch(\n                    catalogConfigProvider.getLocalCatalogIRI(), recordIRI).getHead_resource();\n            if (masterHead.isPresent()) {\n                model = catalogManager.getCompiledResource(masterHead.get());\n            }\n        }\n        logDebug(\"Retrieving ontology from local catalog\", startTime);\n        return model.size() > 0 ? Optional.of(model) : Optional.empty();\n    }", "signature": "Optional<Model> retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "full_signature": "@Override public Optional<Model> retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "class_method_signature": "ImportsResolverImpl.retrieveOntologyLocal(Resource ontologyIRI, OntologyManager ontologyManager)", "testcase": false, "constructor": false, "invocations": ["getStartTime", "createModel", "getOntologyRecordResource", "isPresent", "get", "getHead_resource", "getMasterBranch", "getLocalCatalogIRI", "isPresent", "getCompiledResource", "get", "logDebug", "size", "of", "empty"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}