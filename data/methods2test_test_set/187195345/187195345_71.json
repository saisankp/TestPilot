{"test_class": {"identifier": "GeometryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double BEARING_L4_PAL_AGAINST_DIRECTION = 347.81124542247596;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L4_PAL_AGAINST_DIRECTION = 347.81124542247596", "var_name": "BEARING_L4_PAL_AGAINST_DIRECTION"}, {"original_string": "private static final double BEARING_L3_PAL_IN_DIRECTION = 229.04320047566506;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L3_PAL_IN_DIRECTION = 229.04320047566506", "var_name": "BEARING_L3_PAL_IN_DIRECTION"}, {"original_string": "private static final double BEARING_L2_PAL_AGAINST_DIRECTION = 306.42629695892174;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L2_PAL_AGAINST_DIRECTION = 306.42629695892174", "var_name": "BEARING_L2_PAL_AGAINST_DIRECTION"}, {"original_string": "private static final double BEARING_L1_PAL_IN_DIRECTION = 143.0818227792747;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L1_PAL_IN_DIRECTION = 143.0818227792747", "var_name": "BEARING_L1_PAL_IN_DIRECTION"}, {"original_string": "private static final double BEARING_L4_AGAINST_DIRECTION = 351.8056536951603;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L4_AGAINST_DIRECTION = 351.8056536951603", "var_name": "BEARING_L4_AGAINST_DIRECTION"}, {"original_string": "private static final double BEARING_L3_IN_DIRECTION = 226.68116808410966;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L3_IN_DIRECTION = 226.68116808410966", "var_name": "BEARING_L3_IN_DIRECTION"}, {"original_string": "private static final double BEARING_L2_AGAINST_DIRECTION = 289.5999085596942;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L2_AGAINST_DIRECTION = 289.5999085596942", "var_name": "BEARING_L2_AGAINST_DIRECTION"}, {"original_string": "private static final double BEARING_L1_IN_DIRECTION = 135.0879067689071;", "modifier": "private static final", "type": "double", "declarator": "BEARING_L1_IN_DIRECTION = 135.0879067689071", "var_name": "BEARING_L1_IN_DIRECTION"}, {"original_string": "private static final double BEARING_0 = 0.0;", "modifier": "private static final", "type": "double", "declarator": "BEARING_0 = 0.0", "var_name": "BEARING_0"}, {"original_string": "private static final double BEARING_180 = 180.0;", "modifier": "private static final", "type": "double", "declarator": "BEARING_180 = 180.0", "var_name": "BEARING_180"}, {"original_string": "private static final double HUNDRED_EIGHTY_DEGREE = 180.0;", "modifier": "private static final", "type": "double", "declarator": "HUNDRED_EIGHTY_DEGREE = 180.0", "var_name": "HUNDRED_EIGHTY_DEGREE"}, {"original_string": "private static final double NINETY_DEGREE = 90.0;", "modifier": "private static final", "type": "double", "declarator": "NINETY_DEGREE = 90.0", "var_name": "NINETY_DEGREE"}, {"original_string": "private static final double VERY_SMALL = 0.0000000000001;", "modifier": "private static final", "type": "double", "declarator": "VERY_SMALL = 0.0000000000001", "var_name": "VERY_SMALL"}, {"original_string": "private static final double EXPECTED_BEARING_ERROR = -1.0;", "modifier": "private static final", "type": "double", "declarator": "EXPECTED_BEARING_ERROR = -1.0", "var_name": "EXPECTED_BEARING_ERROR"}, {"original_string": "private static final Point2D.Double DISTANCE_POINT_A = new Point2D.Double(\n            13.40833, 52.51833);", "modifier": "private static final", "type": "Point2D.Double", "declarator": "DISTANCE_POINT_A = new Point2D.Double(\n            13.40833, 52.51833)", "var_name": "DISTANCE_POINT_A"}, {"original_string": "private static final Point2D.Double DISTANCE_POINT_B = new Point2D.Double(\n            4.89044, 52.37019);", "modifier": "private static final", "type": "Point2D.Double", "declarator": "DISTANCE_POINT_B = new Point2D.Double(\n            4.89044, 52.37019)", "var_name": "DISTANCE_POINT_B"}, {"original_string": "private static final double DISTANCE_RESULT = 579079.6452902432;", "modifier": "private static final", "type": "double", "declarator": "DISTANCE_RESULT = 579079.6452902432", "var_name": "DISTANCE_RESULT"}, {"original_string": "private static final int BEARING_DISTANCE = 20;", "modifier": "private static final", "type": "int", "declarator": "BEARING_DISTANCE = 20", "var_name": "BEARING_DISTANCE"}, {"original_string": "private static final int PAL_DISTANCE_LONG = 30;", "modifier": "private static final", "type": "int", "declarator": "PAL_DISTANCE_LONG = 30", "var_name": "PAL_DISTANCE_LONG"}, {"original_string": "private static final int PAL_DISTANCE_SHORT = 3;", "modifier": "private static final", "type": "int", "declarator": "PAL_DISTANCE_SHORT = 3", "var_name": "PAL_DISTANCE_SHORT"}], "file": "map/src/test/java/openlr/map/utils/GeometryUtilsTest.java"}, "test_case": {"identifier": "testCalculateLineBearing", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testCalculateLineBearing() {\n\n\n        Map<Lines, Line> lines = mockBearingTestLines();\n\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L1),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE, 0),\n                BEARING_L1_IN_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L2),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE, Lines.L2.lenght),\n                BEARING_L2_AGAINST_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L3),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE, 0),\n                BEARING_L3_IN_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L4),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE, Lines.L4.lenght),\n                BEARING_L4_AGAINST_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(null, null,\n                BEARING_DISTANCE, 0), EXPECTED_BEARING_ERROR);\n\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L1),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_LONG), BEARING_L1_PAL_IN_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L2),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_LONG), BEARING_L2_PAL_AGAINST_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L3),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_SHORT), BEARING_L3_PAL_IN_DIRECTION);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.L4),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_SHORT), BEARING_L4_PAL_AGAINST_DIRECTION);\n\n        // test the bearing calculation in the case all points are in the same\n        // latitude line.\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.VERTICAL_LINE),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE, 0),\n                BEARING_180);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.VERTICAL_LINE),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE, 0),\n                BEARING_0);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.VERTICAL_LINE),\n                BearingDirection.IN_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_SHORT), BEARING_180);\n        assertEquals(GeometryUtils.calculateLineBearing(lines.get(Lines.VERTICAL_LINE),\n                BearingDirection.AGAINST_DIRECTION, BEARING_DISTANCE,\n                PAL_DISTANCE_SHORT), BEARING_0);\n    }", "signature": "void testCalculateLineBearing()", "full_signature": "@Test public final void testCalculateLineBearing()", "class_method_signature": "GeometryUtilsTest.testCalculateLineBearing()", "testcase": true, "constructor": false, "invocations": ["mockBearingTestLines", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get", "assertEquals", "calculateLineBearing", "get"]}, "focal_class": {"identifier": "GeometryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final float MAX_LAT = 90;", "modifier": "public static final", "type": "float", "declarator": "MAX_LAT = 90", "var_name": "MAX_LAT"}, {"original_string": "public static final float MIN_LAT = -90;", "modifier": "public static final", "type": "float", "declarator": "MIN_LAT = -90", "var_name": "MIN_LAT"}, {"original_string": "public static final float MAX_LON = 180;", "modifier": "public static final", "type": "float", "declarator": "MAX_LON = 180", "var_name": "MAX_LON"}, {"original_string": "public static final float MIN_LON = -180;", "modifier": "public static final", "type": "float", "declarator": "MIN_LON = -180", "var_name": "MIN_LON"}, {"original_string": "public static final double ZERO_CIRCLE = 0;", "modifier": "public static final", "type": "double", "declarator": "ZERO_CIRCLE = 0", "var_name": "ZERO_CIRCLE"}, {"original_string": "public static final double HALF_CIRCLE = 180;", "modifier": "public static final", "type": "double", "declarator": "HALF_CIRCLE = 180", "var_name": "HALF_CIRCLE"}, {"original_string": "public static final double QUARTER_CIRCLE = 90;", "modifier": "public static final", "type": "double", "declarator": "QUARTER_CIRCLE = 90", "var_name": "QUARTER_CIRCLE"}, {"original_string": "public static final double FULL_CIRCLE = 360;", "modifier": "public static final", "type": "double", "declarator": "FULL_CIRCLE = 360", "var_name": "FULL_CIRCLE"}, {"original_string": "public static final double THREE_QUARTER_CIRCLE = 270;", "modifier": "public static final", "type": "double", "declarator": "THREE_QUARTER_CIRCLE = 270", "var_name": "THREE_QUARTER_CIRCLE"}, {"original_string": "public static final int FULL_CIRCLE_DEGREE = 360;", "modifier": "public static final", "type": "int", "declarator": "FULL_CIRCLE_DEGREE = 360", "var_name": "FULL_CIRCLE_DEGREE"}, {"original_string": "private static final int DEFAULT_PRECISION = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PRECISION = 5", "var_name": "DEFAULT_PRECISION"}, {"original_string": "private static final int TEN = 10;", "modifier": "private static final", "type": "int", "declarator": "TEN = 10", "var_name": "TEN"}, {"original_string": "private static final int THREE = 3;", "modifier": "private static final", "type": "int", "declarator": "THREE = 3", "var_name": "THREE"}, {"original_string": "private static final float METER_PER_KILOMETER = 1000.0f;", "modifier": "private static final", "type": "float", "declarator": "METER_PER_KILOMETER = 1000.0f", "var_name": "METER_PER_KILOMETER"}, {"original_string": "private static final int DIVISIONS_PER_DEGREE = 100000;", "modifier": "private static final", "type": "int", "declarator": "DIVISIONS_PER_DEGREE = 100000", "var_name": "DIVISIONS_PER_DEGREE"}, {"original_string": "private static final double RAD_FACTOR = 0.017453292519943294;", "modifier": "private static final", "type": "double", "declarator": "RAD_FACTOR = 0.017453292519943294", "var_name": "RAD_FACTOR"}, {"original_string": "private static final double EQUATORIAL_RADIUS = 6378137;", "modifier": "private static final", "type": "double", "declarator": "EQUATORIAL_RADIUS = 6378137", "var_name": "EQUATORIAL_RADIUS"}, {"original_string": "private static final double INVERSE_FLATTENING = 298.257223563;", "modifier": "private static final", "type": "double", "declarator": "INVERSE_FLATTENING = 298.257223563", "var_name": "INVERSE_FLATTENING"}, {"original_string": "private static final double OBLATENESS = 1. / INVERSE_FLATTENING;", "modifier": "private static final", "type": "double", "declarator": "OBLATENESS = 1. / INVERSE_FLATTENING", "var_name": "OBLATENESS"}, {"original_string": "private static final BearingPointCalculator bearingPointCalculator = new BearingPointCalculator();", "modifier": "private static final", "type": "BearingPointCalculator", "declarator": "bearingPointCalculator = new BearingPointCalculator()", "var_name": "bearingPointCalculator"}], "methods": [{"identifier": "GeometryUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " GeometryUtils()", "full_signature": "private  GeometryUtils()", "class_method_signature": "GeometryUtils.GeometryUtils()", "testcase": false, "constructor": true}, {"identifier": "toRadians", "parameters": "(final double value)", "modifiers": "private static", "return": "double", "signature": "double toRadians(final double value)", "full_signature": "private static double toRadians(final double value)", "class_method_signature": "GeometryUtils.toRadians(final double value)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(final GeoCoordinates coord1,\n                                  final GeoCoordinates coord2)", "modifiers": "public static", "return": "double", "signature": "double distance(final GeoCoordinates coord1,\n                                  final GeoCoordinates coord2)", "full_signature": "public static double distance(final GeoCoordinates coord1,\n                                  final GeoCoordinates coord2)", "class_method_signature": "GeometryUtils.distance(final GeoCoordinates coord1,\n                                  final GeoCoordinates coord2)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(final double longitude1,\n                                  final double latitude1, final double longitude2,\n                                  final double latitude2)", "modifiers": "public static", "return": "double", "signature": "double distance(final double longitude1,\n                                  final double latitude1, final double longitude2,\n                                  final double latitude2)", "full_signature": "public static double distance(final double longitude1,\n                                  final double latitude1, final double longitude2,\n                                  final double latitude2)", "class_method_signature": "GeometryUtils.distance(final double longitude1,\n                                  final double latitude1, final double longitude2,\n                                  final double latitude2)", "testcase": false, "constructor": false}, {"identifier": "transformDecaMicroDeg", "parameters": "(final double val)", "modifiers": "private static", "return": "double", "signature": "double transformDecaMicroDeg(final double val)", "full_signature": "private static double transformDecaMicroDeg(final double val)", "class_method_signature": "GeometryUtils.transformDecaMicroDeg(final double val)", "testcase": false, "constructor": false}, {"identifier": "bearing", "parameters": "(final GeoCoordinates coord1,\n                                 final GeoCoordinates coord2)", "modifiers": "public static", "return": "double", "signature": "double bearing(final GeoCoordinates coord1,\n                                 final GeoCoordinates coord2)", "full_signature": "public static double bearing(final GeoCoordinates coord1,\n                                 final GeoCoordinates coord2)", "class_method_signature": "GeometryUtils.bearing(final GeoCoordinates coord1,\n                                 final GeoCoordinates coord2)", "testcase": false, "constructor": false}, {"identifier": "bearing", "parameters": "(final double p1Longitude,\n                                 final double p1Latitude, final double p2Longitude,\n                                 final double p2Latitude)", "modifiers": "public static", "return": "double", "signature": "double bearing(final double p1Longitude,\n                                 final double p1Latitude, final double p2Longitude,\n                                 final double p2Latitude)", "full_signature": "public static double bearing(final double p1Longitude,\n                                 final double p1Latitude, final double p2Longitude,\n                                 final double p2Latitude)", "class_method_signature": "GeometryUtils.bearing(final double p1Longitude,\n                                 final double p1Latitude, final double p2Longitude,\n                                 final double p2Latitude)", "testcase": false, "constructor": false}, {"identifier": "hMult", "parameters": "(final double y)", "modifiers": "private static", "return": "double", "signature": "double hMult(final double y)", "full_signature": "private static double hMult(final double y)", "class_method_signature": "GeometryUtils.hMult(final double y)", "testcase": false, "constructor": false}, {"identifier": "calculateLineBearing", "parameters": "(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "modifiers": "public static", "return": "double", "signature": "double calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "full_signature": "public static double calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "class_method_signature": "GeometryUtils.calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "testcase": false, "constructor": false}, {"identifier": "checkCoordinateBounds", "parameters": "(final double lon,\n                                                final double lat)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkCoordinateBounds(final double lon,\n                                                final double lat)", "full_signature": "public static boolean checkCoordinateBounds(final double lon,\n                                                final double lat)", "class_method_signature": "GeometryUtils.checkCoordinateBounds(final double lon,\n                                                final double lat)", "testcase": false, "constructor": false}, {"identifier": "intersectStraights", "parameters": "(\n            final GeoCoordinates coord1, final double bear1,\n            final GeoCoordinates coord2, final double bear2)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates intersectStraights(\n            final GeoCoordinates coord1, final double bear1,\n            final GeoCoordinates coord2, final double bear2)", "full_signature": "public static GeoCoordinates intersectStraights(\n            final GeoCoordinates coord1, final double bear1,\n            final GeoCoordinates coord2, final double bear2)", "class_method_signature": "GeometryUtils.intersectStraights(\n            final GeoCoordinates coord1, final double bear1,\n            final GeoCoordinates coord2, final double bear2)", "testcase": false, "constructor": false}, {"identifier": "intersectStraights", "parameters": "(final double longitude1,\n                                                    final double latitude1, final double bear1,\n                                                    final double longitude2, final double latitude2, final double bear2)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates intersectStraights(final double longitude1,\n                                                    final double latitude1, final double bear1,\n                                                    final double longitude2, final double latitude2, final double bear2)", "full_signature": "public static GeoCoordinates intersectStraights(final double longitude1,\n                                                    final double latitude1, final double bear1,\n                                                    final double longitude2, final double latitude2, final double bear2)", "class_method_signature": "GeometryUtils.intersectStraights(final double longitude1,\n                                                    final double latitude1, final double bear1,\n                                                    final double longitude2, final double latitude2, final double bear2)", "testcase": false, "constructor": false}, {"identifier": "lineIntersection", "parameters": "(final GeoCoordinates gc1Start,\n                                           final GeoCoordinates gc1End, final GeoCoordinates gc2Start,\n                                           final GeoCoordinates gc2End)", "modifiers": "public static", "return": "boolean", "signature": "boolean lineIntersection(final GeoCoordinates gc1Start,\n                                           final GeoCoordinates gc1End, final GeoCoordinates gc2Start,\n                                           final GeoCoordinates gc2End)", "full_signature": "public static boolean lineIntersection(final GeoCoordinates gc1Start,\n                                           final GeoCoordinates gc1End, final GeoCoordinates gc2Start,\n                                           final GeoCoordinates gc2End)", "class_method_signature": "GeometryUtils.lineIntersection(final GeoCoordinates gc1Start,\n                                           final GeoCoordinates gc1End, final GeoCoordinates gc2Start,\n                                           final GeoCoordinates gc2End)", "testcase": false, "constructor": false}, {"identifier": "pointAlongLine", "parameters": "(final GeoCoordinates coord1,\n                                                final GeoCoordinates coord2, final double offset)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates pointAlongLine(final GeoCoordinates coord1,\n                                                final GeoCoordinates coord2, final double offset)", "full_signature": "public static GeoCoordinates pointAlongLine(final GeoCoordinates coord1,\n                                                final GeoCoordinates coord2, final double offset)", "class_method_signature": "GeometryUtils.pointAlongLine(final GeoCoordinates coord1,\n                                                final GeoCoordinates coord2, final double offset)", "testcase": false, "constructor": false}, {"identifier": "pointAlongLine", "parameters": "(final double longitudeA,\n                                                final double latitudeA, final double longitudeB,\n                                                final double latitudeB, final double offset)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates pointAlongLine(final double longitudeA,\n                                                final double latitudeA, final double longitudeB,\n                                                final double latitudeB, final double offset)", "full_signature": "public static GeoCoordinates pointAlongLine(final double longitudeA,\n                                                final double latitudeA, final double longitudeB,\n                                                final double latitudeB, final double offset)", "class_method_signature": "GeometryUtils.pointAlongLine(final double longitudeA,\n                                                final double latitudeA, final double longitudeB,\n                                                final double latitudeB, final double offset)", "testcase": false, "constructor": false}, {"identifier": "scaleUpperRightCoordinate", "parameters": "(\n            final GeoCoordinates lowerLeft, final GeoCoordinates upperRight,\n            final double xfactor, final double yfactor)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates scaleUpperRightCoordinate(\n            final GeoCoordinates lowerLeft, final GeoCoordinates upperRight,\n            final double xfactor, final double yfactor)", "full_signature": "public static GeoCoordinates scaleUpperRightCoordinate(\n            final GeoCoordinates lowerLeft, final GeoCoordinates upperRight,\n            final double xfactor, final double yfactor)", "class_method_signature": "GeometryUtils.scaleUpperRightCoordinate(\n            final GeoCoordinates lowerLeft, final GeoCoordinates upperRight,\n            final double xfactor, final double yfactor)", "testcase": false, "constructor": false}, {"identifier": "scaleUpperRightCoordinate", "parameters": "(\n            final double lowerLeftLon, final double lowerLeftLat,\n            final double upperRightLon, final double upperRightLat,\n            final double xfactor, final double yfactor)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates scaleUpperRightCoordinate(\n            final double lowerLeftLon, final double lowerLeftLat,\n            final double upperRightLon, final double upperRightLat,\n            final double xfactor, final double yfactor)", "full_signature": "public static GeoCoordinates scaleUpperRightCoordinate(\n            final double lowerLeftLon, final double lowerLeftLat,\n            final double upperRightLon, final double upperRightLat,\n            final double xfactor, final double yfactor)", "class_method_signature": "GeometryUtils.scaleUpperRightCoordinate(\n            final double lowerLeftLon, final double lowerLeftLat,\n            final double upperRightLon, final double upperRightLat,\n            final double xfactor, final double yfactor)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(final double val)", "modifiers": "public static", "return": "double", "signature": "double round(final double val)", "full_signature": "public static double round(final double val)", "class_method_signature": "GeometryUtils.round(final double val)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(final double val, final int decimalPlaces)", "modifiers": "public static", "return": "double", "signature": "double round(final double val, final int decimalPlaces)", "full_signature": "public static double round(final double val, final int decimalPlaces)", "class_method_signature": "GeometryUtils.round(final double val, final int decimalPlaces)", "testcase": false, "constructor": false}, {"identifier": "determineCoordinateInDistance", "parameters": "(\n            final GeoCoordinates coord, final int angle, final double distanceKm)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates determineCoordinateInDistance(\n            final GeoCoordinates coord, final int angle, final double distanceKm)", "full_signature": "public static GeoCoordinates determineCoordinateInDistance(\n            final GeoCoordinates coord, final int angle, final double distanceKm)", "class_method_signature": "GeometryUtils.determineCoordinateInDistance(\n            final GeoCoordinates coord, final int angle, final double distanceKm)", "testcase": false, "constructor": false}, {"identifier": "determineCoordinateInDistance", "parameters": "(\n            final double lon, final double lat, final int angle,\n            final double distanceKm)", "modifiers": "public static", "return": "GeoCoordinates", "signature": "GeoCoordinates determineCoordinateInDistance(\n            final double lon, final double lat, final int angle,\n            final double distanceKm)", "full_signature": "public static GeoCoordinates determineCoordinateInDistance(\n            final double lon, final double lat, final int angle,\n            final double distanceKm)", "class_method_signature": "GeometryUtils.determineCoordinateInDistance(\n            final double lon, final double lat, final int angle,\n            final double distanceKm)", "testcase": false, "constructor": false}, {"identifier": "bearingDifference", "parameters": "(double firstBearing, double secondBearing)", "modifiers": "public static", "return": "double", "signature": "double bearingDifference(double firstBearing, double secondBearing)", "full_signature": "public static double bearingDifference(double firstBearing, double secondBearing)", "class_method_signature": "GeometryUtils.bearingDifference(double firstBearing, double secondBearing)", "testcase": false, "constructor": false}], "file": "map/src/main/java/openlr/map/utils/GeometryUtils.java"}, "focal_method": {"identifier": "calculateLineBearing", "parameters": "(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "modifiers": "public static", "return": "double", "body": "public static double calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine) {\n        if (line == null || projectionAlongLine < 0 || projectionAlongLine > line.getLineLength()) {\n            return -1.0;\n        }\n\n        GeoCoordinates p1 = line.getGeoCoordinateAlongLine(projectionAlongLine);\n        GeoCoordinates p2;\n        if (dir == BearingDirection.IN_DIRECTION) {\n            p2 = bearingPointCalculator.calculateBearingDestinationInDirection(line, pointDistance, projectionAlongLine);\n        } else {\n            p2 = bearingPointCalculator.calculateBearingDestinationAgainstDirection(line, pointDistance, projectionAlongLine);\n\n        }\n\n        return bearing(p1, p2);\n    }", "signature": "double calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "full_signature": "public static double calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "class_method_signature": "GeometryUtils.calculateLineBearing(final Line line,\n                                              final BearingDirection dir, final int pointDistance,\n                                              final int projectionAlongLine)", "testcase": false, "constructor": false, "invocations": ["getLineLength", "getGeoCoordinateAlongLine", "calculateBearingDestinationInDirection", "calculateBearingDestinationAgainstDirection", "bearing"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}