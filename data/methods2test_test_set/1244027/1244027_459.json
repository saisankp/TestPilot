{"test_class": {"identifier": "TikaTextExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MimeTypeDetector DETECTOR = new TikaContentDetector(new LocalEnvironment());", "modifier": "private static final", "type": "MimeTypeDetector", "declarator": "DETECTOR = new TikaContentDetector(new LocalEnvironment())", "var_name": "DETECTOR"}, {"original_string": "private static final int DEFAULT_TIKA_WRITE_LIMIT = 100000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TIKA_WRITE_LIMIT = 100000", "var_name": "DEFAULT_TIKA_WRITE_LIMIT"}, {"original_string": "private static final String CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";", "modifier": "private static final", "type": "String", "declarator": "CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "var_name": "CHARS"}, {"original_string": "private static final Random RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "private TikaTextExtractor extractor;", "modifier": "private", "type": "TikaTextExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private LinkedList<String> extracted = null;", "modifier": "private", "type": "LinkedList<String>", "declarator": "extracted = null", "var_name": "extracted"}, {"original_string": "private LinkedList<String> expected = null;", "modifier": "private", "type": "LinkedList<String>", "declarator": "expected = null", "var_name": "expected"}], "file": "extractors/modeshape-extractor-tika/src/test/java/org/modeshape/extractor/tika/TikaTextExtractorTest.java"}, "test_case": {"identifier": "shouldSupportExtractingFromPdfFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSupportExtractingFromPdfFiles() throws Exception {\n        assertThat(extractor.supportsMimeType(\"application/pdf\"), is(true));\n    }", "signature": "void shouldSupportExtractingFromPdfFiles()", "full_signature": "@Test public void shouldSupportExtractingFromPdfFiles()", "class_method_signature": "TikaTextExtractorTest.shouldSupportExtractingFromPdfFiles()", "testcase": true, "constructor": false, "invocations": ["assertThat", "supportsMimeType", "is"]}, "focal_class": {"identifier": "TikaTextExtractor", "superclass": "extends TextExtractor", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOGGER = Logger.getLogger(TikaTextExtractor.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(TikaTextExtractor.class)", "var_name": "LOGGER"}, {"original_string": "protected static final Set<MediaType> DEFAULT_EXCLUDED_MIME_TYPES = Collections.unmodifiableSet(\n            MediaType.application(\"x-archive\"), MediaType.application(\"x-bzip\"), MediaType.application(\"x-bzip2\"),\n            MediaType.application(\"x-cpio\"), MediaType.application(\"x-gtar\"), MediaType.application(\"x-gzip\"),\n            MediaType.application(\"x-tar\"), MediaType.application(\"zip\"), MediaType.application(\"vnd.teiid.vdb\"),\n            MediaType.image(\"*\"), MediaType.audio(\"*\"), MediaType.video(\"*\"));", "modifier": "protected static final", "type": "Set<MediaType>", "declarator": "DEFAULT_EXCLUDED_MIME_TYPES = Collections.unmodifiableSet(\n            MediaType.application(\"x-archive\"), MediaType.application(\"x-bzip\"), MediaType.application(\"x-bzip2\"),\n            MediaType.application(\"x-cpio\"), MediaType.application(\"x-gtar\"), MediaType.application(\"x-gzip\"),\n            MediaType.application(\"x-tar\"), MediaType.application(\"zip\"), MediaType.application(\"vnd.teiid.vdb\"),\n            MediaType.image(\"*\"), MediaType.audio(\"*\"), MediaType.video(\"*\"))", "var_name": "DEFAULT_EXCLUDED_MIME_TYPES"}, {"original_string": "private final Set<MediaType> excludedMediaTypes = new HashSet<>();", "modifier": "private final", "type": "Set<MediaType>", "declarator": "excludedMediaTypes = new HashSet<>()", "var_name": "excludedMediaTypes"}, {"original_string": "private final Set<MediaType> includedMediaTypes = new HashSet<>();", "modifier": "private final", "type": "Set<MediaType>", "declarator": "includedMediaTypes = new HashSet<>()", "var_name": "includedMediaTypes"}, {"original_string": "private final Set<MediaType> parserSupportedMediaTypes = new HashSet<>();", "modifier": "private final", "type": "Set<MediaType>", "declarator": "parserSupportedMediaTypes = new HashSet<>()", "var_name": "parserSupportedMediaTypes"}, {"original_string": "private Integer writeLimit;", "modifier": "private", "type": "Integer", "declarator": "writeLimit", "var_name": "writeLimit"}, {"original_string": "private final AtomicReference<DefaultParser> parser = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<DefaultParser>", "declarator": "parser = new AtomicReference<>()", "var_name": "parser"}], "methods": [{"identifier": "TikaTextExtractor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TikaTextExtractor()", "full_signature": "public  TikaTextExtractor()", "class_method_signature": "TikaTextExtractor.TikaTextExtractor()", "testcase": false, "constructor": true}, {"identifier": "supportsMimeType", "parameters": "( String mimeType )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsMimeType( String mimeType )", "full_signature": "@Override public boolean supportsMimeType( String mimeType )", "class_method_signature": "TikaTextExtractor.supportsMimeType( String mimeType )", "testcase": false, "constructor": false}, {"identifier": "extractFrom", "parameters": "( final Binary binary,\n                             final TextExtractor.Output output,\n                             final Context context )", "modifiers": "@Override public", "return": "void", "signature": "void extractFrom( final Binary binary,\n                             final TextExtractor.Output output,\n                             final Context context )", "full_signature": "@Override public void extractFrom( final Binary binary,\n                             final TextExtractor.Output output,\n                             final Context context )", "class_method_signature": "TikaTextExtractor.extractFrom( final Binary binary,\n                             final TextExtractor.Output output,\n                             final Context context )", "testcase": false, "constructor": false}, {"identifier": "prepareMetadata", "parameters": "( final Binary binary,\n                                              final Context context )", "modifiers": "protected final", "return": "Metadata", "signature": "Metadata prepareMetadata( final Binary binary,\n                                              final Context context )", "full_signature": "protected final Metadata prepareMetadata( final Binary binary,\n                                              final Context context )", "class_method_signature": "TikaTextExtractor.prepareMetadata( final Binary binary,\n                                              final Context context )", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "DefaultParser", "signature": "DefaultParser initialize()", "full_signature": "protected DefaultParser initialize()", "class_method_signature": "TikaTextExtractor.initialize()", "testcase": false, "constructor": false}, {"identifier": "newDefaultParser", "parameters": "()", "modifiers": "private", "return": "DefaultParser", "signature": "DefaultParser newDefaultParser()", "full_signature": "private DefaultParser newDefaultParser()", "class_method_signature": "TikaTextExtractor.newDefaultParser()", "testcase": false, "constructor": false}, {"identifier": "convertStringMimeTypesToMediaTypes", "parameters": "(Set<String> mimeTypes, Set<MediaType> mediaTypes)", "modifiers": "private", "return": "void", "signature": "void convertStringMimeTypesToMediaTypes(Set<String> mimeTypes, Set<MediaType> mediaTypes)", "full_signature": "private void convertStringMimeTypesToMediaTypes(Set<String> mimeTypes, Set<MediaType> mediaTypes)", "class_method_signature": "TikaTextExtractor.convertStringMimeTypesToMediaTypes(Set<String> mimeTypes, Set<MediaType> mediaTypes)", "testcase": false, "constructor": false}, {"identifier": "setWriteLimit", "parameters": "( Integer writeLimit )", "modifiers": "protected", "return": "void", "signature": "void setWriteLimit( Integer writeLimit )", "full_signature": "protected void setWriteLimit( Integer writeLimit )", "class_method_signature": "TikaTextExtractor.setWriteLimit( Integer writeLimit )", "testcase": false, "constructor": false}, {"identifier": "getExcludedMediaTypes", "parameters": "()", "modifiers": "protected", "return": "Set<MediaType>", "signature": "Set<MediaType> getExcludedMediaTypes()", "full_signature": "protected Set<MediaType> getExcludedMediaTypes()", "class_method_signature": "TikaTextExtractor.getExcludedMediaTypes()", "testcase": false, "constructor": false}, {"identifier": "getIncludedMediaTypes", "parameters": "()", "modifiers": "protected", "return": "Set<MediaType>", "signature": "Set<MediaType> getIncludedMediaTypes()", "full_signature": "protected Set<MediaType> getIncludedMediaTypes()", "class_method_signature": "TikaTextExtractor.getIncludedMediaTypes()", "testcase": false, "constructor": false}, {"identifier": "getParserSupportedMediaTypes", "parameters": "()", "modifiers": "protected", "return": "Set<MediaType>", "signature": "Set<MediaType> getParserSupportedMediaTypes()", "full_signature": "protected Set<MediaType> getParserSupportedMediaTypes()", "class_method_signature": "TikaTextExtractor.getParserSupportedMediaTypes()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TikaTextExtractor.toString()", "testcase": false, "constructor": false}], "file": "extractors/modeshape-extractor-tika/src/main/java/org/modeshape/extractor/tika/TikaTextExtractor.java"}, "focal_method": {"identifier": "supportsMimeType", "parameters": "( String mimeType )", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean supportsMimeType( String mimeType ) {\n        MediaType mediaType = MediaType.parse(mimeType);\n        if (mediaType == null) {\n            logger().debug(\"Invalid mime-type: {0}\", mimeType);\n            return false;\n        }\n        initialize();\n        for (MediaType excludedMediaType : excludedMediaTypes) {\n            if (excludedMediaType.equals(mediaType)) {\n                return false;\n            }\n            if (excludedMediaType.getSubtype().equalsIgnoreCase(\"*\") && mediaType.getType().equalsIgnoreCase(excludedMediaType.getType())) {\n                return false;\n            }\n        }\n        return includedMediaTypes.isEmpty() ? parserSupportedMediaTypes.contains(mediaType)\n                                            : parserSupportedMediaTypes.contains(mediaType) && includedMediaTypes.contains(mediaType);\n    }", "signature": "boolean supportsMimeType( String mimeType )", "full_signature": "@Override public boolean supportsMimeType( String mimeType )", "class_method_signature": "TikaTextExtractor.supportsMimeType( String mimeType )", "testcase": false, "constructor": false, "invocations": ["parse", "debug", "logger", "initialize", "equals", "equalsIgnoreCase", "getSubtype", "equalsIgnoreCase", "getType", "getType", "isEmpty", "contains", "contains", "contains"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}