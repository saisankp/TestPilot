{"test_class": {"identifier": "StubDescriptorEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DIALOG_DESCRIPTOR_NAME = \"dialog-descriptor\";", "modifier": "private static final", "type": "String", "declarator": "DIALOG_DESCRIPTOR_NAME = \"dialog-descriptor\"", "var_name": "DIALOG_DESCRIPTOR_NAME"}, {"original_string": "private static final String REQUEST_BODY = \"body\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_BODY = \"body\"", "var_name": "REQUEST_BODY"}, {"original_string": "private static final String DEFAULT_GROUPNAME = \"test\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_GROUPNAME = \"test\"", "var_name": "DEFAULT_GROUPNAME"}, {"original_string": "private List<DialogDescriptor> dialogDescriptors;", "modifier": "private", "type": "List<DialogDescriptor>", "declarator": "dialogDescriptors", "var_name": "dialogDescriptors"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private DialogDescriptor dialogDescriptor;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "DialogDescriptor", "declarator": "dialogDescriptor", "var_name": "dialogDescriptor"}, {"original_string": "@Mock\n    private StubDescriptor stubDescriptor;", "modifier": "@Mock\n    private", "type": "StubDescriptor", "declarator": "stubDescriptor", "var_name": "stubDescriptor"}, {"original_string": "@Mock\n    private ConditionEvaluator conditionEvaluator;", "modifier": "@Mock\n    private", "type": "ConditionEvaluator", "declarator": "conditionEvaluator", "var_name": "conditionEvaluator"}, {"original_string": "@Mock\n    private ConditionDescriptor conditionDescriptor;", "modifier": "@Mock\n    private", "type": "ConditionDescriptor", "declarator": "conditionDescriptor", "var_name": "conditionDescriptor"}, {"original_string": "@Mock\n    private ResponseDescriptorDTO responseDescriptorDTO;", "modifier": "@Mock\n    private", "type": "ResponseDescriptorDTO", "declarator": "responseDescriptorDTO", "var_name": "responseDescriptorDTO"}, {"original_string": "@Mock\n    private ResponseDescriptorDTO responseDescriptorDTOWithError;", "modifier": "@Mock\n    private", "type": "ResponseDescriptorDTO", "declarator": "responseDescriptorDTOWithError", "var_name": "responseDescriptorDTOWithError"}, {"original_string": "@Mock\n    private ResponseDescriptorDtoFactory responseDescriptorDtoFactory;", "modifier": "@Mock\n    private", "type": "ResponseDescriptorDtoFactory", "declarator": "responseDescriptorDtoFactory", "var_name": "responseDescriptorDtoFactory"}, {"original_string": "@Mock\n    private Condition condition;", "modifier": "@Mock\n    private", "type": "Condition", "declarator": "condition", "var_name": "condition"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private StackTraceToStringConverter stackTraceConverter;", "modifier": "@Mock\n    private", "type": "StackTraceToStringConverter", "declarator": "stackTraceConverter", "var_name": "stackTraceConverter"}, {"original_string": "@Mock\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Mock\n    private WilmaHttpRequest clonedRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "clonedRequest", "var_name": "clonedRequest"}, {"original_string": "@Mock\n    private DialogDescriptorService dialogDescriptorService;", "modifier": "@Mock\n    private", "type": "DialogDescriptorService", "declarator": "dialogDescriptorService", "var_name": "dialogDescriptorService"}, {"original_string": "private Map<String, StubDescriptor> stubDescriptors;", "modifier": "private", "type": "Map<String, StubDescriptor>", "declarator": "stubDescriptors", "var_name": "stubDescriptors"}, {"original_string": "private StubDescriptorAttributes attributes;", "modifier": "private", "type": "StubDescriptorAttributes", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "@InjectMocks\n    private StubDescriptorEvaluator underTest;", "modifier": "@InjectMocks\n    private", "type": "StubDescriptorEvaluator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-route-engine/src/test/java/com/epam/wilma/router/evaluation/StubDescriptorEvaluatorTest.java"}, "test_case": {"identifier": "testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError() {\n        //GIVEN\n        NullPointerException nullPointerException = new NullPointerException();\n        given(stubDescriptor.getDialogDescriptors()).willReturn(dialogDescriptors);\n        given(dialogDescriptor.getConditionDescriptor()).willReturn(conditionDescriptor);\n        given(dialogDescriptor.getAttributes().getName()).willReturn(DIALOG_DESCRIPTOR_NAME);\n        given(conditionDescriptor.getCondition()).willReturn(condition);\n        given(conditionEvaluator.evaluate(condition, clonedRequest)).willThrow(nullPointerException);\n        given(stackTraceConverter.getStackTraceAsString(nullPointerException)).willReturn(\"error\");\n        Whitebox.setInternalState(underTest, \"logger\", logger);\n        //WHEN\n        underTest.findResponseDescriptor(stubDescriptors, request);\n        //THEN\n        verify(logger).error(Mockito.eq(\"Error during condition evaluation in the dialog descriptor 'dialog-descriptor'!\"),\n                Mockito.any(NullPointerException.class));\n    }", "signature": "void testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError()", "full_signature": "@Test public void testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError()", "class_method_signature": "StubDescriptorEvaluatorTest.testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getDialogDescriptors", "willReturn", "given", "getConditionDescriptor", "willReturn", "given", "getName", "getAttributes", "willReturn", "given", "getCondition", "willThrow", "given", "evaluate", "willReturn", "given", "getStackTraceAsString", "setInternalState", "findResponseDescriptor", "error", "verify", "eq", "any"]}, "focal_class": {"identifier": "StubDescriptorEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(StubDescriptorEvaluator.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StubDescriptorEvaluator.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private ConditionEvaluator conditionEvaluator;", "modifier": "@Autowired\n    private", "type": "ConditionEvaluator", "declarator": "conditionEvaluator", "var_name": "conditionEvaluator"}, {"original_string": "@Autowired\n    private ResponseDescriptorDtoFactory responseDescriptorDtoFactory;", "modifier": "@Autowired\n    private", "type": "ResponseDescriptorDtoFactory", "declarator": "responseDescriptorDtoFactory", "var_name": "responseDescriptorDtoFactory"}, {"original_string": "@Autowired\n    private StackTraceToStringConverter stackTraceConverter;", "modifier": "@Autowired\n    private", "type": "StackTraceToStringConverter", "declarator": "stackTraceConverter", "var_name": "stackTraceConverter"}, {"original_string": "@Autowired\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Autowired\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Autowired\n    private DialogDescriptorService dialogDescriptorService;", "modifier": "@Autowired\n    private", "type": "DialogDescriptorService", "declarator": "dialogDescriptorService", "var_name": "dialogDescriptorService"}], "methods": [{"identifier": "findResponseDescriptor", "parameters": "(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "modifiers": "public", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "full_signature": "public ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "class_method_signature": "StubDescriptorEvaluator.findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "evaluateDialogDescriptor", "parameters": "(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor)", "modifiers": "private", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO evaluateDialogDescriptor(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor)", "full_signature": "private ResponseDescriptorDTO evaluateDialogDescriptor(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor)", "class_method_signature": "StubDescriptorEvaluator.evaluateDialogDescriptor(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor)", "testcase": false, "constructor": false}, {"identifier": "evaluateCondition", "parameters": "(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor, final Condition condition)", "modifiers": "private", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO evaluateCondition(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor, final Condition condition)", "full_signature": "private ResponseDescriptorDTO evaluateCondition(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor, final Condition condition)", "class_method_signature": "StubDescriptorEvaluator.evaluateCondition(final WilmaHttpRequest request, final DialogDescriptor dialogDescriptor, final Condition condition)", "testcase": false, "constructor": false}, {"identifier": "createResponseDescriptorDTO", "parameters": "(final DialogDescriptor dialogDescriptor, final String requestBody)", "modifiers": "private", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO createResponseDescriptorDTO(final DialogDescriptor dialogDescriptor, final String requestBody)", "full_signature": "private ResponseDescriptorDTO createResponseDescriptorDTO(final DialogDescriptor dialogDescriptor, final String requestBody)", "class_method_signature": "StubDescriptorEvaluator.createResponseDescriptorDTO(final DialogDescriptor dialogDescriptor, final String requestBody)", "testcase": false, "constructor": false}, {"identifier": "getResponseDescriptorDTOWithError", "parameters": "(final DialogDescriptor dialogDescriptor, final String requestBody,\n            final Exception e)", "modifiers": "private", "return": "ResponseDescriptorDTO", "signature": "ResponseDescriptorDTO getResponseDescriptorDTOWithError(final DialogDescriptor dialogDescriptor, final String requestBody,\n            final Exception e)", "full_signature": "private ResponseDescriptorDTO getResponseDescriptorDTOWithError(final DialogDescriptor dialogDescriptor, final String requestBody,\n            final Exception e)", "class_method_signature": "StubDescriptorEvaluator.getResponseDescriptorDTOWithError(final DialogDescriptor dialogDescriptor, final String requestBody,\n            final Exception e)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-route-engine/src/main/java/com/epam/wilma/router/evaluation/StubDescriptorEvaluator.java"}, "focal_method": {"identifier": "findResponseDescriptor", "parameters": "(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "modifiers": "public", "return": "ResponseDescriptorDTO", "body": "public ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request) {\n        ResponseDescriptorDTO responseDescriptorDTO = null;\n        for (StubDescriptor stubDescriptor : stubDescriptors.values()) {\n            StubDescriptorAttributes attributes = stubDescriptor.getAttributes();\n            if (attributes.isActive()) {\n                Iterator<DialogDescriptor> iterator = stubDescriptor.getDialogDescriptors().iterator();\n                while (iterator.hasNext() && responseDescriptorDTO == null) {\n                    DialogDescriptor dialogDescriptor = iterator.next();\n                    responseDescriptorDTO = evaluateDialogDescriptor(request, dialogDescriptor);\n                }\n            }\n        }\n        return responseDescriptorDTO;\n    }", "signature": "ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "full_signature": "public ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "class_method_signature": "StubDescriptorEvaluator.findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request)", "testcase": false, "constructor": false, "invocations": ["values", "getAttributes", "isActive", "iterator", "getDialogDescriptors", "hasNext", "next", "evaluateDialogDescriptor"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}