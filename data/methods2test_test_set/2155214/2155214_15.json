{"test_class": {"identifier": "PathTemplateFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/gatein/management/api/PathTemplateFilterTest.java"}, "test_case": {"identifier": "testAllowNullsOnParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testAllowNullsOnParse() throws ParseException\n   {\n      PathTemplateFilter filter = PathTemplateFilter.parse(null);\n      Assert.assertNotNull(filter);\n\n      // No attributes means no filter, so PathAddress should accept filter.\n      Assert.assertTrue(PathAddress.pathAddress(\"some\", \"path\").accepts(filter));\n   }", "signature": "void testAllowNullsOnParse()", "full_signature": "@Test public void testAllowNullsOnParse()", "class_method_signature": "PathTemplateFilterTest.testAllowNullsOnParse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertNotNull", "assertTrue", "accepts", "pathAddress"]}, "focal_class": {"identifier": "PathTemplateFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATH_TEMPLATE_REGEX = \"\\\\s*([\\\\w\\\\.-]*)\\\\s*:\\\\s*(!)?([^!]*)\";", "modifier": "private static final", "type": "String", "declarator": "PATH_TEMPLATE_REGEX = \"\\\\s*([\\\\w\\\\.-]*)\\\\s*:\\\\s*(!)?([^!]*)\"", "var_name": "PATH_TEMPLATE_REGEX"}, {"original_string": "private static final Pattern PATH_TEMPLATE_PATTERN = Pattern.compile(PATH_TEMPLATE_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "PATH_TEMPLATE_PATTERN = Pattern.compile(PATH_TEMPLATE_REGEX)", "var_name": "PATH_TEMPLATE_PATTERN"}, {"original_string": "private static final String WILDCARD = \"*\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD = \"*\"", "var_name": "WILDCARD"}, {"original_string": "private static final PathTemplateFilter NO_OP_FILTER = new PathTemplateFilter()\n   {\n      @Override\n      FilteredAddress filter(PathAddress address)\n      {\n         return new FilteredAddress()\n         {\n            @Override\n            public boolean isFiltered()\n            {\n               return true;\n            }\n\n            @Override\n            public boolean matches()\n            {\n               return true;\n            }\n         };\n      }\n\n      @Override\n      public boolean hasPathTemplate(String pathTemplateName)\n      {\n         return false;\n      }\n   };", "modifier": "private static final", "type": "PathTemplateFilter", "declarator": "NO_OP_FILTER = new PathTemplateFilter()\n   {\n      @Override\n      FilteredAddress filter(PathAddress address)\n      {\n         return new FilteredAddress()\n         {\n            @Override\n            public boolean isFiltered()\n            {\n               return true;\n            }\n\n            @Override\n            public boolean matches()\n            {\n               return true;\n            }\n         };\n      }\n\n      @Override\n      public boolean hasPathTemplate(String pathTemplateName)\n      {\n         return false;\n      }\n   }", "var_name": "NO_OP_FILTER"}], "methods": [{"identifier": "filter", "parameters": "(PathAddress address)", "modifiers": "abstract", "return": "FilteredAddress", "signature": "FilteredAddress filter(PathAddress address)", "full_signature": "abstract FilteredAddress filter(PathAddress address)", "class_method_signature": "PathTemplateFilter.filter(PathAddress address)", "testcase": false, "constructor": false}, {"identifier": "hasPathTemplate", "parameters": "(String pathTemplateName)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean hasPathTemplate(String pathTemplateName)", "full_signature": "public abstract boolean hasPathTemplate(String pathTemplateName)", "class_method_signature": "PathTemplateFilter.hasPathTemplate(String pathTemplateName)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(List<String> attributes)", "modifiers": "public static", "return": "PathTemplateFilter", "signature": "PathTemplateFilter parse(List<String> attributes)", "full_signature": "public static PathTemplateFilter parse(List<String> attributes)", "class_method_signature": "PathTemplateFilter.parse(List<String> attributes)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String pathTemplate)", "modifiers": "public static", "return": "Builder", "signature": "Builder create(String pathTemplate)", "full_signature": "public static Builder create(String pathTemplate)", "class_method_signature": "PathTemplateFilter.create(String pathTemplate)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/gatein/management/api/PathTemplateFilter.java"}, "focal_method": {"identifier": "parse", "parameters": "(List<String> attributes)", "modifiers": "public static", "return": "PathTemplateFilter", "body": "public static PathTemplateFilter parse(List<String> attributes) throws ParseException\n   {\n      if (attributes == null || attributes.isEmpty())\n      {\n         return NO_OP_FILTER;\n      }\n\n      Builder builder = null;\n      for (String attribute : attributes)\n      {\n         for (String attr : PathAddress.split(attribute, \";\"))\n         {\n            Matcher matcher = PATH_TEMPLATE_PATTERN.matcher(attr);\n            if (matcher.matches())\n            {\n               String pathTemplate = matcher.group(1);\n               if (builder == null)\n               {\n                  builder = create(pathTemplate);\n               }\n               else\n               {\n                  builder.and(pathTemplate);\n               }\n\n               boolean exclusion = (matcher.group(2) != null);\n               List<String> expressions = PathAddress.split(matcher.group(3), \",\");\n               for (String expression : expressions)\n               {\n                  boolean wildcard = WILDCARD.equals(expression);\n                  if (exclusion)\n                  {\n                     if (wildcard)\n                     {\n                        builder.excludeAll();\n                     }\n                     else\n                     {\n                        builder.exclude(expression);\n                     }\n                  }\n                  else\n                  {\n                     if (wildcard)\n                     {\n                        builder.includeAll();\n                     }\n                     else\n                     {\n                        builder.include(expression);\n                     }\n                  }\n               }\n            }\n            else\n            {\n               throw new ParseException(\"Filter attribute '\" + attribute + \"' is not valid.\", 0);\n            }\n         }\n      }\n\n      return (builder == null) ? NO_OP_FILTER : builder.build();\n   }", "signature": "PathTemplateFilter parse(List<String> attributes)", "full_signature": "public static PathTemplateFilter parse(List<String> attributes)", "class_method_signature": "PathTemplateFilter.parse(List<String> attributes)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "split", "matcher", "matches", "group", "create", "and", "group", "split", "group", "equals", "excludeAll", "exclude", "includeAll", "include", "build"]}, "repository": {"repo_id": 2155214, "url": "https://github.com/gatein/gatein-management", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3383, "license": "licensed"}}