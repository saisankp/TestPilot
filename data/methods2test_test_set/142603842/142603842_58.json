{"test_class": {"identifier": "WebSocketControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RouteListener routeListener;", "modifier": "@Mock\n    private", "type": "RouteListener", "declarator": "routeListener", "var_name": "routeListener"}, {"original_string": "@Mock\n    private RegionService regionService;", "modifier": "@Mock\n    private", "type": "RegionService", "declarator": "regionService", "var_name": "regionService"}, {"original_string": "@Mock\n    private LocationService locationService;", "modifier": "@Mock\n    private", "type": "LocationService", "declarator": "locationService", "var_name": "locationService"}, {"original_string": "@Mock\n    private VehicleService vehicleService;", "modifier": "@Mock\n    private", "type": "VehicleService", "declarator": "vehicleService", "var_name": "vehicleService"}, {"original_string": "@Mock\n    private DemoService demoService;", "modifier": "@Mock\n    private", "type": "DemoService", "declarator": "demoService", "var_name": "demoService"}, {"original_string": "@Mock\n    private ApplicationEventPublisher eventPublisher;", "modifier": "@Mock\n    private", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}, {"original_string": "@InjectMocks\n    private WebSocketController webSocketController;", "modifier": "@InjectMocks\n    private", "type": "WebSocketController", "declarator": "webSocketController", "var_name": "webSocketController"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/WebSocketControllerTest.java"}, "test_case": {"identifier": "subscribeToRouteTopic", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void subscribeToRouteTopic() {\n        // arrange\n        Distance distance = Distance.ofMillis(987_654_321);\n        Location depot = new Location(1, Coordinates.valueOf(3, 5));\n        Vehicle vehicle = VehicleFactory.createVehicle(1, \"vehicle\", 77);\n        Location visit = new Location(2, Coordinates.valueOf(321, 123));\n        Route route = new Route(vehicle, depot, singletonList(visit));\n        Coordinates pointOnTrack = Coordinates.valueOf(0, 0);\n        RouteWithTrack routeWithTrack = new RouteWithTrack(route, singletonList(singletonList(pointOnTrack)));\n        RoutingPlan plan = new RoutingPlan(\n                distance,\n                singletonList(vehicle),\n                depot,\n                singletonList(visit),\n                singletonList(routeWithTrack));\n        when(routeListener.getBestRoutingPlan()).thenReturn(plan);\n\n        // act\n        PortableRoutingPlan portableRoutingPlan = webSocketController.subscribeToRouteTopic();\n\n        // assert\n        assertThat(portableRoutingPlan.getDistance()).isEqualTo(PortableDistance.fromDistance(distance));\n        assertThat(portableRoutingPlan.getVisits()).containsExactly(PortableLocation.fromLocation(visit));\n        assertThat(portableRoutingPlan.getVehicles()).containsExactly(PortableVehicle.fromVehicle(vehicle));\n        assertThat(portableRoutingPlan.getDepot()).isEqualTo(PortableLocation.fromLocation(depot));\n        assertThat(portableRoutingPlan.getRoutes()).hasSize(1);\n    }", "signature": "void subscribeToRouteTopic()", "full_signature": "@Test void subscribeToRouteTopic()", "class_method_signature": "WebSocketControllerTest.subscribeToRouteTopic()", "testcase": true, "constructor": false, "invocations": ["ofMillis", "valueOf", "createVehicle", "valueOf", "singletonList", "valueOf", "singletonList", "singletonList", "singletonList", "singletonList", "singletonList", "thenReturn", "when", "getBestRoutingPlan", "subscribeToRouteTopic", "isEqualTo", "assertThat", "getDistance", "fromDistance", "containsExactly", "assertThat", "getVisits", "fromLocation", "containsExactly", "assertThat", "getVehicles", "fromVehicle", "isEqualTo", "assertThat", "getDepot", "fromLocation", "hasSize", "assertThat", "getRoutes"]}, "focal_class": {"identifier": "WebSocketController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WebSocketController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WebSocketController.class)", "var_name": "logger"}, {"original_string": "private final RouteListener routeListener;", "modifier": "private final", "type": "RouteListener", "declarator": "routeListener", "var_name": "routeListener"}, {"original_string": "private final RegionService regionService;", "modifier": "private final", "type": "RegionService", "declarator": "regionService", "var_name": "regionService"}, {"original_string": "private final LocationService locationService;", "modifier": "private final", "type": "LocationService", "declarator": "locationService", "var_name": "locationService"}, {"original_string": "private final VehicleService vehicleService;", "modifier": "private final", "type": "VehicleService", "declarator": "vehicleService", "var_name": "vehicleService"}, {"original_string": "private final DemoService demoService;", "modifier": "private final", "type": "DemoService", "declarator": "demoService", "var_name": "demoService"}, {"original_string": "private final ApplicationEventPublisher eventPublisher;", "modifier": "private final", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}], "methods": [{"identifier": "WebSocketController", "parameters": "(\n            RouteListener routeListener,\n            RegionService regionService,\n            LocationService locationService,\n            VehicleService vehicleService,\n            DemoService demoService,\n            ApplicationEventPublisher eventPublisher)", "modifiers": "@Autowired", "return": "", "signature": " WebSocketController(\n            RouteListener routeListener,\n            RegionService regionService,\n            LocationService locationService,\n            VehicleService vehicleService,\n            DemoService demoService,\n            ApplicationEventPublisher eventPublisher)", "full_signature": "@Autowired  WebSocketController(\n            RouteListener routeListener,\n            RegionService regionService,\n            LocationService locationService,\n            VehicleService vehicleService,\n            DemoService demoService,\n            ApplicationEventPublisher eventPublisher)", "class_method_signature": "WebSocketController.WebSocketController(\n            RouteListener routeListener,\n            RegionService regionService,\n            LocationService locationService,\n            VehicleService vehicleService,\n            DemoService demoService,\n            ApplicationEventPublisher eventPublisher)", "testcase": false, "constructor": true}, {"identifier": "handleException", "parameters": "(Exception exception)", "modifiers": "@MessageExceptionHandler", "return": "void", "signature": "void handleException(Exception exception)", "full_signature": "@MessageExceptionHandler void handleException(Exception exception)", "class_method_signature": "WebSocketController.handleException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "subscribeToServerInfoTopic", "parameters": "()", "modifiers": "@SubscribeMapping(\"/serverInfo\")", "return": "ServerInfo", "signature": "ServerInfo subscribeToServerInfoTopic()", "full_signature": "@SubscribeMapping(\"/serverInfo\") ServerInfo subscribeToServerInfoTopic()", "class_method_signature": "WebSocketController.subscribeToServerInfoTopic()", "testcase": false, "constructor": false}, {"identifier": "subscribeToRouteTopic", "parameters": "()", "modifiers": "@SubscribeMapping(\"/route\")", "return": "PortableRoutingPlan", "signature": "PortableRoutingPlan subscribeToRouteTopic()", "full_signature": "@SubscribeMapping(\"/route\") PortableRoutingPlan subscribeToRouteTopic()", "class_method_signature": "WebSocketController.subscribeToRouteTopic()", "testcase": false, "constructor": false}, {"identifier": "addLocation", "parameters": "(PortableLocation request)", "modifiers": "@MessageMapping(\"/location\")", "return": "void", "signature": "void addLocation(PortableLocation request)", "full_signature": "@MessageMapping(\"/location\") void addLocation(PortableLocation request)", "class_method_signature": "WebSocketController.addLocation(PortableLocation request)", "testcase": false, "constructor": false}, {"identifier": "removeLocation", "parameters": "(@DestinationVariable long id)", "modifiers": "@MessageMapping(\"/location/{id}/delete\")", "return": "void", "signature": "void removeLocation(@DestinationVariable long id)", "full_signature": "@MessageMapping(\"/location/{id}/delete\") void removeLocation(@DestinationVariable long id)", "class_method_signature": "WebSocketController.removeLocation(@DestinationVariable long id)", "testcase": false, "constructor": false}, {"identifier": "demo", "parameters": "(@DestinationVariable String name)", "modifiers": "@MessageMapping(\"/demo/{name}\")", "return": "void", "signature": "void demo(@DestinationVariable String name)", "full_signature": "@MessageMapping(\"/demo/{name}\") void demo(@DestinationVariable String name)", "class_method_signature": "WebSocketController.demo(@DestinationVariable String name)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@MessageMapping(\"/clear\")", "return": "void", "signature": "void clear()", "full_signature": "@MessageMapping(\"/clear\") void clear()", "class_method_signature": "WebSocketController.clear()", "testcase": false, "constructor": false}, {"identifier": "addVehicle", "parameters": "()", "modifiers": "@MessageMapping(\"vehicle\")", "return": "void", "signature": "void addVehicle()", "full_signature": "@MessageMapping(\"vehicle\") void addVehicle()", "class_method_signature": "WebSocketController.addVehicle()", "testcase": false, "constructor": false}, {"identifier": "removeVehicle", "parameters": "(@DestinationVariable long id)", "modifiers": "@MessageMapping(\"/vehicle/{id}/delete\")", "return": "void", "signature": "void removeVehicle(@DestinationVariable long id)", "full_signature": "@MessageMapping(\"/vehicle/{id}/delete\") void removeVehicle(@DestinationVariable long id)", "class_method_signature": "WebSocketController.removeVehicle(@DestinationVariable long id)", "testcase": false, "constructor": false}, {"identifier": "removeAnyVehicle", "parameters": "()", "modifiers": "@MessageMapping(\"/vehicle/deleteAny\")", "return": "void", "signature": "void removeAnyVehicle()", "full_signature": "@MessageMapping(\"/vehicle/deleteAny\") void removeAnyVehicle()", "class_method_signature": "WebSocketController.removeAnyVehicle()", "testcase": false, "constructor": false}, {"identifier": "changeCapacity", "parameters": "(@DestinationVariable long id, int capacity)", "modifiers": "@MessageMapping(\"/vehicle/{id}/capacity\")", "return": "void", "signature": "void changeCapacity(@DestinationVariable long id, int capacity)", "full_signature": "@MessageMapping(\"/vehicle/{id}/capacity\") void changeCapacity(@DestinationVariable long id, int capacity)", "class_method_signature": "WebSocketController.changeCapacity(@DestinationVariable long id, int capacity)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/WebSocketController.java"}, "focal_method": {"identifier": "subscribeToRouteTopic", "parameters": "()", "modifiers": "@SubscribeMapping(\"/route\")", "return": "PortableRoutingPlan", "body": "@SubscribeMapping(\"/route\")\n    PortableRoutingPlan subscribeToRouteTopic() {\n        RoutingPlan routingPlan = routeListener.getBestRoutingPlan();\n        return PortableRoutingPlanFactory.fromRoutingPlan(routingPlan);\n    }", "signature": "PortableRoutingPlan subscribeToRouteTopic()", "full_signature": "@SubscribeMapping(\"/route\") PortableRoutingPlan subscribeToRouteTopic()", "class_method_signature": "WebSocketController.subscribeToRouteTopic()", "testcase": false, "constructor": false, "invocations": ["getBestRoutingPlan", "fromRoutingPlan"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}