{"test_class": {"identifier": "GeoIdTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private GeoLocationPointList loc11;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc11", "var_name": "loc11"}, {"original_string": "private GeoLocationPointList loc12;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc12", "var_name": "loc12"}, {"original_string": "private GeoLocationPointList loc13;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc13", "var_name": "loc13"}, {"original_string": "private GeoLocationPointList loc21;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc21", "var_name": "loc21"}, {"original_string": "private GeoLocationPointList loc22;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc22", "var_name": "loc22"}, {"original_string": "private GeoLocationPointList loc23;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "loc23", "var_name": "loc23"}, {"original_string": "private GeoId id11;", "modifier": "private", "type": "GeoId", "declarator": "id11", "var_name": "id11"}, {"original_string": "private GeoId id12;", "modifier": "private", "type": "GeoId", "declarator": "id12", "var_name": "id12"}, {"original_string": "private GeoId id13;", "modifier": "private", "type": "GeoId", "declarator": "id13", "var_name": "id13"}, {"original_string": "private GeoId id21;", "modifier": "private", "type": "GeoId", "declarator": "id21", "var_name": "id21"}, {"original_string": "private GeoId id22;", "modifier": "private", "type": "GeoId", "declarator": "id22", "var_name": "id22"}, {"original_string": "private GeoId id23;", "modifier": "private", "type": "GeoId", "declarator": "id23", "var_name": "id23"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/location/GeoIdTest.java"}, "test_case": {"identifier": "testEqualsStringString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEqualsStringString() {\n\t\t// Get string representations\n\t\tString geoid11 = this.id11.toString();\n\t\tString geoid12 = this.id12.toString();\n\t\tString geoid13 = this.id13.toString();\n\n\t\tString geoid21 = this.id21.toString();\n\t\tString geoid22 = this.id22.toString();\n\t\tString geoid23 = this.id23.toString();\n\n\t\tassertEquals(geoid11, geoid12);\n\t\tassertEquals(geoid12, geoid11);\n\t\tassertNotEquals(geoid11, geoid13);\n\t\tassertNotEquals(geoid12, geoid13);\n\t\tassertNotEquals(geoid13, geoid11);\n\t\tassertNotEquals(geoid13, geoid11);\n\n\t\tassertEquals(geoid21, geoid22);\n\t\tassertEquals(geoid22, geoid21);\n\t\tassertNotEquals(geoid21, geoid23);\n\t\tassertNotEquals(geoid22, geoid23);\n\t\tassertNotEquals(geoid23, geoid21);\n\t\tassertNotEquals(geoid23, geoid22);\n\t}", "signature": "void testEqualsStringString()", "full_signature": "@Test public void testEqualsStringString()", "class_method_signature": "GeoIdTest.testEqualsStringString()", "testcase": true, "constructor": false, "invocations": ["toString", "toString", "toString", "toString", "toString", "toString", "assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "GeoId", "superclass": "", "interfaces": "implements Serializable, Comparable<GeoId>", "fields": [{"original_string": "private static final long serialVersionUID = 5402736192573807251L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5402736192573807251L", "var_name": "serialVersionUID"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "GeoId", "parameters": "(String id)", "modifiers": "", "return": "", "signature": " GeoId(String id)", "full_signature": "  GeoId(String id)", "class_method_signature": "GeoId.GeoId(String id)", "testcase": false, "constructor": true}, {"identifier": "GeoId", "parameters": "(double lowerx, double lowery, double upperx, double uppery, String id)", "modifiers": "", "return": "", "signature": " GeoId(double lowerx, double lowery, double upperx, double uppery, String id)", "full_signature": "  GeoId(double lowerx, double lowery, double upperx, double uppery, String id)", "class_method_signature": "GeoId.GeoId(double lowerx, double lowery, double upperx, double uppery, String id)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(String geoId)", "modifiers": "@Pure public static", "return": "GeoId", "signature": "GeoId valueOf(String geoId)", "full_signature": "@Pure public static GeoId valueOf(String geoId)", "class_method_signature": "GeoId.valueOf(String geoId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "signature": "String toString()", "full_signature": "@Override @Pure public String toString()", "class_method_signature": "GeoId.toString()", "testcase": false, "constructor": false}, {"identifier": "toUUID", "parameters": "()", "modifiers": "@Pure public", "return": "UUID", "signature": "UUID toUUID()", "full_signature": "@Pure public UUID toUUID()", "class_method_signature": "GeoId.toUUID()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(GeoId obj)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int compareTo(GeoId obj)", "full_signature": "@Pure @Override public int compareTo(GeoId obj)", "class_method_signature": "GeoId.compareTo(GeoId obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Pure @Override public boolean equals(Object obj)", "class_method_signature": "GeoId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Pure @Override public int hashCode()", "class_method_signature": "GeoId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toBounds2D", "parameters": "()", "modifiers": "@Pure public", "return": "Rectangle2d", "signature": "Rectangle2d toBounds2D()", "full_signature": "@Pure public Rectangle2d toBounds2D()", "class_method_signature": "GeoId.toBounds2D()", "testcase": false, "constructor": false}, {"identifier": "getInternalId", "parameters": "()", "modifiers": "@Pure public", "return": "String", "signature": "String getInternalId()", "full_signature": "@Pure public String getInternalId()", "class_method_signature": "GeoId.getInternalId()", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/location/GeoId.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "body": "@Override\n\t@Pure\n\tpublic String toString() {\n\t\treturn this.id;\n\t}", "signature": "String toString()", "full_signature": "@Override @Pure public String toString()", "class_method_signature": "GeoId.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}