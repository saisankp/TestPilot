{"test_class": {"identifier": "InterpolationConverterFactoryTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static final Class<Interpolation> INTERPOLATION_CLASS = Interpolation.class;", "modifier": "private static final", "type": "Class<Interpolation>", "declarator": "INTERPOLATION_CLASS = Interpolation.class", "var_name": "INTERPOLATION_CLASS"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/util/InterpolationConverterFactoryTest.java"}, "test_case": {"identifier": "testInterpolationConverterFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInterpolationConverterFactory() {\n\n        // make sure the class is registered and assigned\n        Set<ConverterFactory> set = Converters.getConverterFactories(String.class,\n                INTERPOLATION_CLASS);\n        assertNotNull(set);\n        assertFalse(set.isEmpty());\n        assertEquals(set.size(), 1);\n        assertSame(set.iterator().next().getClass(), InterpolationConverterFactory.class);\n\n        //\n        assertNull(new InterpolationConverterFactory().createConverter(null, null, null));\n        assertNull(new InterpolationConverterFactory().createConverter(String.class, null, null));\n        assertNull(new InterpolationConverterFactory().createConverter(String.class, Double.class,\n                null));\n\n    }", "signature": "void testInterpolationConverterFactory()", "full_signature": "@Test public void testInterpolationConverterFactory()", "class_method_signature": "InterpolationConverterFactoryTest.testInterpolationConverterFactory()", "testcase": true, "constructor": false, "invocations": ["getConverterFactories", "assertNotNull", "assertFalse", "isEmpty", "assertEquals", "size", "assertSame", "getClass", "next", "iterator", "assertNull", "createConverter", "assertNull", "createConverter", "assertNull", "createConverter"]}, "focal_class": {"identifier": "InterpolationConverterFactory", "superclass": "", "interfaces": "implements ConverterFactory", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(InterpolationConverterFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(InterpolationConverterFactory.class)", "var_name": "LOGGER"}, {"original_string": "private final static InterpolationConverter THE_INTERPOLATION_CONVERTER = new InterpolationConverter();", "modifier": "private final static", "type": "InterpolationConverter", "declarator": "THE_INTERPOLATION_CONVERTER = new InterpolationConverter()", "var_name": "THE_INTERPOLATION_CONVERTER"}], "methods": [{"identifier": "createConverter", "parameters": "(Class<?> source, Class<?> target, Hints hints)", "modifiers": "public", "return": "Converter", "signature": "Converter createConverter(Class<?> source, Class<?> target, Hints hints)", "full_signature": "public Converter createConverter(Class<?> source, Class<?> target, Hints hints)", "class_method_signature": "InterpolationConverterFactory.createConverter(Class<?> source, Class<?> target, Hints hints)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/util/InterpolationConverterFactory.java"}, "focal_method": {"identifier": "createConverter", "parameters": "(Class<?> source, Class<?> target, Hints hints)", "modifiers": "public", "return": "Converter", "body": "public Converter createConverter(Class<?> source, Class<?> target, Hints hints) {\n        if (source == null || target == null || !source.equals(String.class)) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"InterpolationConverterFactory can be applied from Strings to Interpolation only.\");\n            }\n            return null; // only do strings\n        }\n        if (Interpolation.class.isAssignableFrom(target)) {\n            return THE_INTERPOLATION_CONVERTER;\n        } else {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.fine(\"InterpolationConverterFactory can be applied from Strings to Interpolation  only.\");\n            }\n        }\n        return null;\n    }", "signature": "Converter createConverter(Class<?> source, Class<?> target, Hints hints)", "full_signature": "public Converter createConverter(Class<?> source, Class<?> target, Hints hints)", "class_method_signature": "InterpolationConverterFactory.createConverter(Class<?> source, Class<?> target, Hints hints)", "testcase": false, "constructor": false, "invocations": ["equals", "isLoggable", "fine", "isAssignableFrom", "isLoggable", "fine"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}