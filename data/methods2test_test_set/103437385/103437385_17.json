{"test_class": {"identifier": "CronExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] VALID_EXPRESSIONS = {\n            \"0 15 10 * * ? 2005\",\n            \"0 0 0 1 * ?\",\n            \"19 15 10 4 Apr ?\",\n            \"0 43 9 ? * 5L\",\n            \"0 0 0 ? * 4#1 *\",\n            \"0 0 0 ? * * *\",\n            \"0 0 12 */7 * ?\",\n            \"* 0,12 0,13 1W MAY ? *\",\n            \"0 0 0 ? * WED *\",\n            \"0 0,1 2-22 1W * ? *\",\n            \"9/5 0,1 3 LW * ? *\",\n            \"* 4 3 ? 1 4L *\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "VALID_EXPRESSIONS = {\n            \"0 15 10 * * ? 2005\",\n            \"0 0 0 1 * ?\",\n            \"19 15 10 4 Apr ?\",\n            \"0 43 9 ? * 5L\",\n            \"0 0 0 ? * 4#1 *\",\n            \"0 0 0 ? * * *\",\n            \"0 0 12 */7 * ?\",\n            \"* 0,12 0,13 1W MAY ? *\",\n            \"0 0 0 ? * WED *\",\n            \"0 0,1 2-22 1W * ? *\",\n            \"9/5 0,1 3 LW * ? *\",\n            \"* 4 3 ? 1 4L *\"\n    }", "var_name": "VALID_EXPRESSIONS"}, {"original_string": "private static final String[] INVALID_VALID_EXPRESSIONS = {\n            \"* * * * Foo ?\",\n            \"* * * * Jan-Foo ?\",\n            \"0 0 * * * *\",\n            \"0 0 * 4 * *\",\n            \"0 0 * * * 4\",\n            \"0 43 9 1,5,29,L * ?\",\n            \"0 43 9 ? * SAT,SUN,L\",\n            \"0 43 9 ? * 6,7,L\",\n            \"0 0 0 L-1 * ? *\",\n            \"* * 0 *\",\n            \"0/1 43 9 ? * 6,7,L\",\n            \"0/a 43 9 ? * 6,7,L\",\n            \"0 0 12 * * THU\",\n            \"# # # # # #\",\n            \"0 0 102 2 * ?\",\n            \"425 0 1 2 * ?\",\n            \"0 0 12 */q * ?\",\n            \"0 0 12 * * THU,WED-SAT\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "INVALID_VALID_EXPRESSIONS = {\n            \"* * * * Foo ?\",\n            \"* * * * Jan-Foo ?\",\n            \"0 0 * * * *\",\n            \"0 0 * 4 * *\",\n            \"0 0 * * * 4\",\n            \"0 43 9 1,5,29,L * ?\",\n            \"0 43 9 ? * SAT,SUN,L\",\n            \"0 43 9 ? * 6,7,L\",\n            \"0 0 0 L-1 * ? *\",\n            \"* * 0 *\",\n            \"0/1 43 9 ? * 6,7,L\",\n            \"0/a 43 9 ? * 6,7,L\",\n            \"0 0 12 * * THU\",\n            \"# # # # # #\",\n            \"0 0 102 2 * ?\",\n            \"425 0 1 2 * ?\",\n            \"0 0 12 */q * ?\",\n            \"0 0 12 * * THU,WED-SAT\",\n    }", "var_name": "INVALID_VALID_EXPRESSIONS"}], "file": "kie-soup-commons/src/test/java/org/kie/soup/commons/cron/CronExpressionTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() throws Exception {\n        assertEquals(\"0 15 10 * * ? 2005\", new CronExpression(\"0 15 10 * * ? 2005\").toString());\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "CronExpressionTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "CronExpression", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 510L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 510L", "var_name": "serialVersionUID"}, {"original_string": "protected static final int YEAR_TO_GIVEUP_SCHEDULING_AT = 2299;", "modifier": "protected static final", "type": "int", "declarator": "YEAR_TO_GIVEUP_SCHEDULING_AT = 2299", "var_name": "YEAR_TO_GIVEUP_SCHEDULING_AT"}, {"original_string": "protected static final int SECOND = 0;", "modifier": "protected static final", "type": "int", "declarator": "SECOND = 0", "var_name": "SECOND"}, {"original_string": "protected static final int MINUTE = 1;", "modifier": "protected static final", "type": "int", "declarator": "MINUTE = 1", "var_name": "MINUTE"}, {"original_string": "protected static final int HOUR = 2;", "modifier": "protected static final", "type": "int", "declarator": "HOUR = 2", "var_name": "HOUR"}, {"original_string": "protected static final int DAY_OF_MONTH = 3;", "modifier": "protected static final", "type": "int", "declarator": "DAY_OF_MONTH = 3", "var_name": "DAY_OF_MONTH"}, {"original_string": "protected static final int MONTH = 4;", "modifier": "protected static final", "type": "int", "declarator": "MONTH = 4", "var_name": "MONTH"}, {"original_string": "protected static final int DAY_OF_WEEK = 5;", "modifier": "protected static final", "type": "int", "declarator": "DAY_OF_WEEK = 5", "var_name": "DAY_OF_WEEK"}, {"original_string": "protected static final int YEAR = 6;", "modifier": "protected static final", "type": "int", "declarator": "YEAR = 6", "var_name": "YEAR"}, {"original_string": "protected static final int ALL_SPEC_INT = 99;", "modifier": "protected static final", "type": "int", "declarator": "ALL_SPEC_INT = 99", "var_name": "ALL_SPEC_INT"}, {"original_string": "protected static final int NO_SPEC_INT = 98;", "modifier": "protected static final", "type": "int", "declarator": "NO_SPEC_INT = 98", "var_name": "NO_SPEC_INT"}, {"original_string": "protected static final Integer ALL_SPEC = ALL_SPEC_INT;", "modifier": "protected static final", "type": "Integer", "declarator": "ALL_SPEC = ALL_SPEC_INT", "var_name": "ALL_SPEC"}, {"original_string": "protected static final Integer NO_SPEC = NO_SPEC_INT;", "modifier": "protected static final", "type": "Integer", "declarator": "NO_SPEC = NO_SPEC_INT", "var_name": "NO_SPEC"}, {"original_string": "protected static final Map<String, Integer> monthMap = new HashMap<>(20);", "modifier": "protected static final", "type": "Map<String, Integer>", "declarator": "monthMap = new HashMap<>(20)", "var_name": "monthMap"}, {"original_string": "protected static final Map<String, Integer> dayMap = new HashMap<>(60);", "modifier": "protected static final", "type": "Map<String, Integer>", "declarator": "dayMap = new HashMap<>(60)", "var_name": "dayMap"}, {"original_string": "protected String cronExpression;", "modifier": "protected", "type": "String", "declarator": "cronExpression", "var_name": "cronExpression"}, {"original_string": "protected transient TreeSet seconds;", "modifier": "protected transient", "type": "TreeSet", "declarator": "seconds", "var_name": "seconds"}, {"original_string": "protected transient TreeSet minutes;", "modifier": "protected transient", "type": "TreeSet", "declarator": "minutes", "var_name": "minutes"}, {"original_string": "protected transient TreeSet hours;", "modifier": "protected transient", "type": "TreeSet", "declarator": "hours", "var_name": "hours"}, {"original_string": "protected transient TreeSet daysOfMonth;", "modifier": "protected transient", "type": "TreeSet", "declarator": "daysOfMonth", "var_name": "daysOfMonth"}, {"original_string": "protected transient TreeSet months;", "modifier": "protected transient", "type": "TreeSet", "declarator": "months", "var_name": "months"}, {"original_string": "protected transient TreeSet daysOfWeek;", "modifier": "protected transient", "type": "TreeSet", "declarator": "daysOfWeek", "var_name": "daysOfWeek"}, {"original_string": "protected transient TreeSet years;", "modifier": "protected transient", "type": "TreeSet", "declarator": "years", "var_name": "years"}, {"original_string": "protected transient boolean lastdayOfWeek = false;", "modifier": "protected transient", "type": "boolean", "declarator": "lastdayOfWeek = false", "var_name": "lastdayOfWeek"}, {"original_string": "protected transient int nthdayOfWeek = 0;", "modifier": "protected transient", "type": "int", "declarator": "nthdayOfWeek = 0", "var_name": "nthdayOfWeek"}, {"original_string": "protected transient boolean lastdayOfMonth = false;", "modifier": "protected transient", "type": "boolean", "declarator": "lastdayOfMonth = false", "var_name": "lastdayOfMonth"}, {"original_string": "protected transient boolean nearestWeekday = false;", "modifier": "protected transient", "type": "boolean", "declarator": "nearestWeekday = false", "var_name": "nearestWeekday"}, {"original_string": "protected transient boolean expressionParsed = false;", "modifier": "protected transient", "type": "boolean", "declarator": "expressionParsed = false", "var_name": "expressionParsed"}], "methods": [{"identifier": "CronExpression", "parameters": "(String cronExpression)", "modifiers": "public", "return": "", "signature": " CronExpression(String cronExpression)", "full_signature": "public  CronExpression(String cronExpression)", "class_method_signature": "CronExpression.CronExpression(String cronExpression)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "CronExpression.toString()", "testcase": false, "constructor": false}, {"identifier": "isValidExpression", "parameters": "(String cronExpression)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidExpression(String cronExpression)", "full_signature": "public static boolean isValidExpression(String cronExpression)", "class_method_signature": "CronExpression.isValidExpression(String cronExpression)", "testcase": false, "constructor": false}, {"identifier": "buildExpression", "parameters": "(String expression)", "modifiers": "protected", "return": "void", "signature": "void buildExpression(String expression)", "full_signature": "protected void buildExpression(String expression)", "class_method_signature": "CronExpression.buildExpression(String expression)", "testcase": false, "constructor": false}, {"identifier": "storeExpressionVals", "parameters": "(int pos, String s, int type)", "modifiers": "protected", "return": "int", "signature": "int storeExpressionVals(int pos, String s, int type)", "full_signature": "protected int storeExpressionVals(int pos, String s, int type)", "class_method_signature": "CronExpression.storeExpressionVals(int pos, String s, int type)", "testcase": false, "constructor": false}, {"identifier": "checkNext", "parameters": "(int pos, String s, int val, int type)", "modifiers": "protected", "return": "int", "signature": "int checkNext(int pos, String s, int val, int type)", "full_signature": "protected int checkNext(int pos, String s, int val, int type)", "class_method_signature": "CronExpression.checkNext(int pos, String s, int val, int type)", "testcase": false, "constructor": false}, {"identifier": "getCronExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCronExpression()", "full_signature": "public String getCronExpression()", "class_method_signature": "CronExpression.getCronExpression()", "testcase": false, "constructor": false}, {"identifier": "getExpressionSummary", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExpressionSummary()", "full_signature": "public String getExpressionSummary()", "class_method_signature": "CronExpression.getExpressionSummary()", "testcase": false, "constructor": false}, {"identifier": "getExpressionSetSummary", "parameters": "(java.util.Set set)", "modifiers": "protected", "return": "String", "signature": "String getExpressionSetSummary(java.util.Set set)", "full_signature": "protected String getExpressionSetSummary(java.util.Set set)", "class_method_signature": "CronExpression.getExpressionSetSummary(java.util.Set set)", "testcase": false, "constructor": false}, {"identifier": "getExpressionSetSummary", "parameters": "(java.util.ArrayList list)", "modifiers": "protected", "return": "String", "signature": "String getExpressionSetSummary(java.util.ArrayList list)", "full_signature": "protected String getExpressionSetSummary(java.util.ArrayList list)", "class_method_signature": "CronExpression.getExpressionSetSummary(java.util.ArrayList list)", "testcase": false, "constructor": false}, {"identifier": "skipWhiteSpace", "parameters": "(int i, String s)", "modifiers": "protected", "return": "int", "signature": "int skipWhiteSpace(int i, String s)", "full_signature": "protected int skipWhiteSpace(int i, String s)", "class_method_signature": "CronExpression.skipWhiteSpace(int i, String s)", "testcase": false, "constructor": false}, {"identifier": "findNextWhiteSpace", "parameters": "(int i, String s)", "modifiers": "protected", "return": "int", "signature": "int findNextWhiteSpace(int i, String s)", "full_signature": "protected int findNextWhiteSpace(int i, String s)", "class_method_signature": "CronExpression.findNextWhiteSpace(int i, String s)", "testcase": false, "constructor": false}, {"identifier": "addToSet", "parameters": "(int val, int end, int incr, int type)", "modifiers": "protected", "return": "void", "signature": "void addToSet(int val, int end, int incr, int type)", "full_signature": "protected void addToSet(int val, int end, int incr, int type)", "class_method_signature": "CronExpression.addToSet(int val, int end, int incr, int type)", "testcase": false, "constructor": false}, {"identifier": "getSet", "parameters": "(int type)", "modifiers": "protected", "return": "TreeSet", "signature": "TreeSet getSet(int type)", "full_signature": "protected TreeSet getSet(int type)", "class_method_signature": "CronExpression.getSet(int type)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int v, String s, int i)", "modifiers": "protected", "return": "ValueSet", "signature": "ValueSet getValue(int v, String s, int i)", "full_signature": "protected ValueSet getValue(int v, String s, int i)", "class_method_signature": "CronExpression.getValue(int v, String s, int i)", "testcase": false, "constructor": false}, {"identifier": "getNumericValue", "parameters": "(String s, int i)", "modifiers": "protected", "return": "int", "signature": "int getNumericValue(String s, int i)", "full_signature": "protected int getNumericValue(String s, int i)", "class_method_signature": "CronExpression.getNumericValue(String s, int i)", "testcase": false, "constructor": false}, {"identifier": "getMonthNumber", "parameters": "(String s)", "modifiers": "protected", "return": "int", "signature": "int getMonthNumber(String s)", "full_signature": "protected int getMonthNumber(String s)", "class_method_signature": "CronExpression.getMonthNumber(String s)", "testcase": false, "constructor": false}, {"identifier": "getDayOfWeekNumber", "parameters": "(String s)", "modifiers": "protected", "return": "int", "signature": "int getDayOfWeekNumber(String s)", "full_signature": "protected int getDayOfWeekNumber(String s)", "class_method_signature": "CronExpression.getDayOfWeekNumber(String s)", "testcase": false, "constructor": false}], "file": "kie-soup-commons/src/main/java/org/kie/soup/commons/cron/CronExpression.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String toString() {\n        return cronExpression;\n    }", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "CronExpression.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}