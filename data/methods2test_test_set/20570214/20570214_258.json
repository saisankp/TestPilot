{"test_class": {"identifier": "RsaSsaPkcs1SignJceTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/RsaSsaPkcs1SignJceTest.java"}, "test_case": {"identifier": "testBasicAgainstJce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasicAgainstJce() throws Exception {\n    int keySize = 2048;\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n    keyGen.initialize(keySize);\n    KeyPair keyPair = keyGen.generateKeyPair();\n    RSAPublicKey pub = (RSAPublicKey) keyPair.getPublic();\n    RSAPrivateCrtKey priv = (RSAPrivateCrtKey) keyPair.getPrivate();\n\n    // Sign with RsaSsaPkcs1SignJce.\n    String message = \"Hello\";\n    RsaSsaPkcs1SignJce signer = new RsaSsaPkcs1SignJce(priv, HashType.SHA256);\n    byte[] signature = signer.sign(message.getBytes(\"UTF-8\"));\n\n    // Verify with JCE's Signature.\n    Signature verifier = Signature.getInstance(\"SHA256withRSA\");\n    verifier.initVerify(pub);\n    verifier.update(message.getBytes(\"UTF-8\"));\n    assertTrue(verifier.verify(signature));\n  }", "signature": "void testBasicAgainstJce()", "full_signature": "@Test public void testBasicAgainstJce()", "class_method_signature": "RsaSsaPkcs1SignJceTest.testBasicAgainstJce()", "testcase": true, "constructor": false, "invocations": ["getInstance", "initialize", "generateKeyPair", "getPublic", "getPrivate", "sign", "getBytes", "getInstance", "initVerify", "update", "getBytes", "assertTrue", "verify"]}, "focal_class": {"identifier": "RsaSsaPkcs1SignJce", "superclass": "", "interfaces": "implements PublicKeySign", "fields": [{"original_string": "private final RSAPrivateCrtKey privateKey;", "modifier": "private final", "type": "RSAPrivateCrtKey", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private final RSAPublicKey publicKey;", "modifier": "private final", "type": "RSAPublicKey", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private final String signatureAlgorithm;", "modifier": "private final", "type": "String", "declarator": "signatureAlgorithm", "var_name": "signatureAlgorithm"}], "methods": [{"identifier": "RsaSsaPkcs1SignJce", "parameters": "(final RSAPrivateCrtKey priv, HashType hash)", "modifiers": "public", "return": "", "signature": " RsaSsaPkcs1SignJce(final RSAPrivateCrtKey priv, HashType hash)", "full_signature": "public  RsaSsaPkcs1SignJce(final RSAPrivateCrtKey priv, HashType hash)", "class_method_signature": "RsaSsaPkcs1SignJce.RsaSsaPkcs1SignJce(final RSAPrivateCrtKey priv, HashType hash)", "testcase": false, "constructor": true}, {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "RsaSsaPkcs1SignJce.sign(final byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/RsaSsaPkcs1SignJce.java"}, "focal_method": {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] sign(final byte[] data) throws GeneralSecurityException {\n    Signature signer = EngineFactory.SIGNATURE.getInstance(signatureAlgorithm);\n    signer.initSign(privateKey);\n    signer.update(data);\n    byte[] signature = signer.sign();\n    // Verify the signature to prevent against faulty signature computation.\n    Signature verifier = EngineFactory.SIGNATURE.getInstance(signatureAlgorithm);\n    verifier.initVerify(publicKey);\n    verifier.update(data);\n    if (!verifier.verify(signature)) {\n      throw new java.lang.RuntimeException(\"Security bug: RSA signature computation error\");\n    }\n    return signature;\n  }", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "RsaSsaPkcs1SignJce.sign(final byte[] data)", "testcase": false, "constructor": false, "invocations": ["getInstance", "initSign", "update", "sign", "getInstance", "initVerify", "update", "verify"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}