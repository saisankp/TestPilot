{"test_class": {"identifier": "KubeConstraintTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SchedulerConfiguration schedulerConfiguration = mock(SchedulerConfiguration.class);", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration = mock(SchedulerConfiguration.class)", "var_name": "schedulerConfiguration"}, {"original_string": "private final MesosConfiguration mesosConfiguration = mock(MesosConfiguration.class);", "modifier": "private final", "type": "MesosConfiguration", "declarator": "mesosConfiguration = mock(MesosConfiguration.class)", "var_name": "mesosConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final KubeApiFacade kubeApiFacade = createKubeApiFacade();", "modifier": "private final", "type": "KubeApiFacade", "declarator": "kubeApiFacade = createKubeApiFacade()", "var_name": "kubeApiFacade"}, {"original_string": "private final Indexer<V1Node> indexer = kubeApiFacade.getNodeInformer().getIndexer();", "modifier": "private final", "type": "Indexer<V1Node>", "declarator": "indexer = kubeApiFacade.getNodeInformer().getIndexer()", "var_name": "indexer"}, {"original_string": "private final TaskTrackerState taskTrackerState = mock(TaskTrackerState.class);", "modifier": "private final", "type": "TaskTrackerState", "declarator": "taskTrackerState = mock(TaskTrackerState.class)", "var_name": "taskTrackerState"}, {"original_string": "private final KubeConstraint kubeConstraint = new KubeConstraint(schedulerConfiguration, mesosConfiguration, agentManagementService, kubeApiFacade);", "modifier": "private final", "type": "KubeConstraint", "declarator": "kubeConstraint = new KubeConstraint(schedulerConfiguration, mesosConfiguration, agentManagementService, kubeApiFacade)", "var_name": "kubeConstraint"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/scheduler/constraint/KubeConstraintTest.java"}, "test_case": {"identifier": "successfullyScheduled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void successfullyScheduled() {\n        AgentInstance agentInstance = createAgentInstance(INSTANCE_ID, INSTANCE_GROUP_ID);\n        when(agentManagementService.findAgentInstance(INSTANCE_ID)).thenReturn(Optional.of(agentInstance));\n\n        V1Taint taint = createTaint(\"tolerated_taint_key\", \"NoSchedule\", \"tolerated_taint_value\");\n        V1Node node = createNode(INSTANCE_ID, true, Collections.singletonList(taint));\n        when(indexer.getByKey(INSTANCE_ID)).thenReturn(node);\n\n        ConstraintEvaluator.Result result = kubeConstraint.evaluate(\n                createTaskRequest(TASK_ID),\n                createVirtualMachineCurrentStateMock(INSTANCE_ID, Collections.emptyList(), Collections.emptyList()),\n                taskTrackerState);\n        assertThat(result.isSuccessful()).isTrue();\n    }", "signature": "void successfullyScheduled()", "full_signature": "@Test public void successfullyScheduled()", "class_method_signature": "KubeConstraintTest.successfullyScheduled()", "testcase": true, "constructor": false, "invocations": ["createAgentInstance", "thenReturn", "when", "findAgentInstance", "of", "createTaint", "createNode", "singletonList", "thenReturn", "when", "getByKey", "evaluate", "createTaskRequest", "createVirtualMachineCurrentStateMock", "emptyList", "emptyList", "isTrue", "assertThat", "isSuccessful"]}, "focal_class": {"identifier": "KubeConstraint", "superclass": "", "interfaces": "implements SystemConstraint", "fields": [{"original_string": "public static final String NAME = \"KubeConstraint\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"KubeConstraint\"", "var_name": "NAME"}, {"original_string": "public static final String INSTANCE_NOT_FOUND_REASON = \"Instance for node not found in agent management\";", "modifier": "public static final", "type": "String", "declarator": "INSTANCE_NOT_FOUND_REASON = \"Instance for node not found in agent management\"", "var_name": "INSTANCE_NOT_FOUND_REASON"}, {"original_string": "public static final String NODE_NOT_FOUND_REASON = \"Node not found in shared informer\";", "modifier": "public static final", "type": "String", "declarator": "NODE_NOT_FOUND_REASON = \"Node not found in shared informer\"", "var_name": "NODE_NOT_FOUND_REASON"}, {"original_string": "public static final String NODE_NOT_READY_REASON = \"Node ready condition is not true\";", "modifier": "public static final", "type": "String", "declarator": "NODE_NOT_READY_REASON = \"Node ready condition is not true\"", "var_name": "NODE_NOT_READY_REASON"}, {"original_string": "public static final String TAINT_NOT_TOLERATED_IN_CONFIGURATION_REASON = \"Node has a taint that is not configured to be tolerated\";", "modifier": "public static final", "type": "String", "declarator": "TAINT_NOT_TOLERATED_IN_CONFIGURATION_REASON = \"Node has a taint that is not configured to be tolerated\"", "var_name": "TAINT_NOT_TOLERATED_IN_CONFIGURATION_REASON"}, {"original_string": "private static final Result VALID = new Result(true, null);", "modifier": "private static final", "type": "Result", "declarator": "VALID = new Result(true, null)", "var_name": "VALID"}, {"original_string": "private static final Set<String> FAILURE_REASONS = Stream.of(KubeConstraint.Failure.values())\n            .map(f -> f.toResult().getFailureReason())\n            .collect(Collectors.toSet());", "modifier": "private static final", "type": "Set<String>", "declarator": "FAILURE_REASONS = Stream.of(KubeConstraint.Failure.values())\n            .map(f -> f.toResult().getFailureReason())\n            .collect(Collectors.toSet())", "var_name": "FAILURE_REASONS"}, {"original_string": "private final SchedulerConfiguration schedulerConfiguration;", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration", "var_name": "schedulerConfiguration"}, {"original_string": "private final MesosConfiguration mesosConfiguration;", "modifier": "private final", "type": "MesosConfiguration", "declarator": "mesosConfiguration", "var_name": "mesosConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final KubeApiFacade kubeApiFacade;", "modifier": "private final", "type": "KubeApiFacade", "declarator": "kubeApiFacade", "var_name": "kubeApiFacade"}], "methods": [{"identifier": "isKubeConstraintReason", "parameters": "(String reason)", "modifiers": "public static", "return": "boolean", "signature": "boolean isKubeConstraintReason(String reason)", "full_signature": "public static boolean isKubeConstraintReason(String reason)", "class_method_signature": "KubeConstraint.isKubeConstraintReason(String reason)", "testcase": false, "constructor": false}, {"identifier": "KubeConstraint", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                          MesosConfiguration mesosConfiguration,\n                          AgentManagementService agentManagementService,\n                          KubeApiFacade kubeApiFacade)", "modifiers": "@Inject public", "return": "", "signature": " KubeConstraint(SchedulerConfiguration schedulerConfiguration,\n                          MesosConfiguration mesosConfiguration,\n                          AgentManagementService agentManagementService,\n                          KubeApiFacade kubeApiFacade)", "full_signature": "@Inject public  KubeConstraint(SchedulerConfiguration schedulerConfiguration,\n                          MesosConfiguration mesosConfiguration,\n                          AgentManagementService agentManagementService,\n                          KubeApiFacade kubeApiFacade)", "class_method_signature": "KubeConstraint.KubeConstraint(SchedulerConfiguration schedulerConfiguration,\n                          MesosConfiguration mesosConfiguration,\n                          AgentManagementService agentManagementService,\n                          KubeApiFacade kubeApiFacade)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "KubeConstraint.getName()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void prepare()", "full_signature": "@Override public void prepare()", "class_method_signature": "KubeConstraint.prepare()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "KubeConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/KubeConstraint.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) {\n        if (!mesosConfiguration.isKubeApiServerIntegrationEnabled()) {\n            return VALID;\n        }\n\n        Optional<AgentInstance> instanceOpt = SchedulerUtils.findInstance(agentManagementService, schedulerConfiguration.getInstanceAttributeName(), targetVM);\n        if (!instanceOpt.isPresent()) {\n            return Failure.INSTANCE_NOT_FOUND.toResult();\n        }\n\n        String instanceId = instanceOpt.get().getId();\n        V1Node node = kubeApiFacade.getNodeInformer().getIndexer().getByKey(instanceId);\n        if (node == null) {\n            return Failure.NODE_NOT_FOUND.toResult();\n        }\n\n        Set<String> toleratedTaints = mesosConfiguration.getFenzoTaintTolerations();\n        if (toleratedTaints == null || toleratedTaints.isEmpty()) {\n            return VALID;\n        }\n\n        if (node.getSpec() != null) {\n            List<V1Taint> taints = node.getSpec().getTaints();\n            if (taints != null && !taints.isEmpty()) {\n                for (V1Taint taint : taints) {\n                    String taintKey = taint.getKey();\n                    if (!toleratedTaints.contains(taintKey)) {\n                        return Failure.TAINT_NOT_TOLERATED_IN_CONFIGURATION.toResult();\n                    }\n                }\n            }\n        }\n\n        return VALID;\n    }", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "KubeConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false, "invocations": ["isKubeApiServerIntegrationEnabled", "findInstance", "getInstanceAttributeName", "isPresent", "toResult", "getId", "get", "getByKey", "getIndexer", "getNodeInformer", "toResult", "getFenzoTaintTolerations", "isEmpty", "getSpec", "getTaints", "getSpec", "isEmpty", "getKey", "contains", "toResult"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}