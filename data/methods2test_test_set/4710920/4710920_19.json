{"test_class": {"identifier": "ShutdownTelnetHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TelnetHandler handler = new ShutdownTelnetHandler();", "modifier": "private static", "type": "TelnetHandler", "declarator": "handler = new ShutdownTelnetHandler()", "var_name": "handler"}, {"original_string": "private Channel mockChannel;", "modifier": "private", "type": "Channel", "declarator": "mockChannel", "var_name": "mockChannel"}], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/legacy/ShutdownTelnetHandlerTest.java"}, "test_case": {"identifier": "testInvoke", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testInvoke() throws RemotingException {\n        mockChannel = mock(Channel.class);\n        String result = handler.telnet(mockChannel, \"\");\n        assertTrue(result.contains(\"Application has shutdown successfully\"));\n    }", "signature": "void testInvoke()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testInvoke()", "class_method_signature": "ShutdownTelnetHandlerTest.testInvoke()", "testcase": true, "constructor": false, "invocations": ["mock", "telnet", "assertTrue", "contains"]}, "focal_class": {"identifier": "ShutdownTelnetHandler", "superclass": "", "interfaces": "implements TelnetHandler", "fields": [], "methods": [{"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "ShutdownTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/ShutdownTelnetHandler.java"}, "focal_method": {"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String telnet(Channel channel, String message) throws RemotingException {\n\n        int sleepMilliseconds = 0;\n        if (StringUtils.isNotEmpty(message)) {\n            String[] parameters = message.split(\"\\\\s+\");\n            if (parameters.length == 2 && \"-t\".equals(parameters[0]) && StringUtils.isInteger(parameters[1])) {\n                sleepMilliseconds = Integer.parseInt(parameters[1]);\n            } else {\n                return \"Invalid parameter,please input like shutdown -t 10000\";\n            }\n        }\n        long start = System.currentTimeMillis();\n        if (sleepMilliseconds > 0) {\n            try {\n                Thread.sleep(sleepMilliseconds);\n            } catch (InterruptedException e) {\n                return \"Failed to invoke shutdown command, cause: \" + e.getMessage();\n            }\n        }\n        StringBuilder buf = new StringBuilder();\n        DubboShutdownHook.getDubboShutdownHook().unregister();\n        DubboShutdownHook.getDubboShutdownHook().doDestroy();\n        long end = System.currentTimeMillis();\n        buf.append(\"Application has shutdown successfully\");\n        buf.append(\"\\r\\nelapsed: \");\n        buf.append(end - start);\n        buf.append(\" ms.\");\n        return buf.toString();\n    }", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "ShutdownTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "split", "equals", "isInteger", "parseInt", "currentTimeMillis", "sleep", "getMessage", "unregister", "getDubboShutdownHook", "doDestroy", "getDubboShutdownHook", "currentTimeMillis", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}