{"test_class": {"identifier": "BindingsManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/BindingsManagerTest.java"}, "test_case": {"identifier": "mapBindingsUpdateDestinationList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void mapBindingsUpdateDestinationList() throws Exception {\n    BindingsManager bindings = new BindingsManager(BatchInvoker.INVOKE_IMMEDIATELY_STRATEGY);\n\n    ObservableList<Integer> numericList = new ObservableList<>();\n    for (int i = 1; i <= 5; i++) {\n      numericList.add(i);\n    }\n    ObservableList<String> stringList = new ObservableList<>();\n    CountListener listener = new CountListener();\n    stringList.addListener(listener);\n\n    bindings.bind(stringList, new MapExpression<Integer, String>(numericList) {\n      @NotNull\n      @Override\n      protected String transform(@NotNull Integer srcElement) {\n        return srcElement.toString();\n      }\n    });\n\n    assertThat(stringList).containsExactly(\"1\", \"2\", \"3\", \"4\", \"5\");\n    assertThat(listener.getCount()).isEqualTo(1);\n\n    numericList.addAll(Arrays.asList(6, 7));\n\n    assertThat(stringList).containsExactly(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\");\n    assertThat(listener.getCount()).isEqualTo(2);\n\n    numericList.clear();\n\n    assertThat(stringList).isEmpty();\n    assertThat(listener.getCount()).isEqualTo(3);\n  }", "signature": "void mapBindingsUpdateDestinationList()", "full_signature": "@Test public void mapBindingsUpdateDestinationList()", "class_method_signature": "BindingsManagerTest.mapBindingsUpdateDestinationList()", "testcase": true, "constructor": false, "invocations": ["add", "addListener", "bind", "toString", "containsExactly", "assertThat", "isEqualTo", "assertThat", "getCount", "addAll", "asList", "containsExactly", "assertThat", "isEqualTo", "assertThat", "getCount", "clear", "isEmpty", "assertThat", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "BindingsManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<OneWayBinding<?>> myOneWayBindings = new ArrayList<>();", "modifier": "private final", "type": "List<OneWayBinding<?>>", "declarator": "myOneWayBindings = new ArrayList<>()", "var_name": "myOneWayBindings"}, {"original_string": "private final List<TwoWayBinding<?>> myTwoWayBindings = new ArrayList<>();", "modifier": "private final", "type": "List<TwoWayBinding<?>>", "declarator": "myTwoWayBindings = new ArrayList<>()", "var_name": "myTwoWayBindings"}, {"original_string": "private final BatchInvoker myInvoker;", "modifier": "private final", "type": "BatchInvoker", "declarator": "myInvoker", "var_name": "myInvoker"}], "methods": [{"identifier": "BindingsManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " BindingsManager()", "full_signature": "public  BindingsManager()", "class_method_signature": "BindingsManager.BindingsManager()", "testcase": false, "constructor": true}, {"identifier": "BindingsManager", "parameters": "(@NotNull BatchInvoker.Strategy invokeStrategy)", "modifiers": "public", "return": "", "signature": " BindingsManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "full_signature": "public  BindingsManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "class_method_signature": "BindingsManager.BindingsManager(@NotNull BatchInvoker.Strategy invokeStrategy)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "modifiers": "public", "return": "void", "signature": "void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "full_signature": "public void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "class_method_signature": "BindingsManager.bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src, @NotNull ObservableValue<Boolean> enabled)", "modifiers": "public", "return": "void", "signature": "void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src, @NotNull ObservableValue<Boolean> enabled)", "full_signature": "public void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src, @NotNull ObservableValue<Boolean> enabled)", "class_method_signature": "BindingsManager.bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src, @NotNull ObservableValue<Boolean> enabled)", "testcase": false, "constructor": false}, {"identifier": "bindTwoWay", "parameters": "(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "modifiers": "public", "return": "void", "signature": "void bindTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "full_signature": "public void bindTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "class_method_signature": "BindingsManager.bindTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(@NotNull SettableValue<?> dest)", "modifiers": "public", "return": "void", "signature": "void release(@NotNull SettableValue<?> dest)", "full_signature": "public void release(@NotNull SettableValue<?> dest)", "class_method_signature": "BindingsManager.release(@NotNull SettableValue<?> dest)", "testcase": false, "constructor": false}, {"identifier": "releaseTwoWay", "parameters": "(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "modifiers": "public", "return": "void", "signature": "void releaseTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "full_signature": "public void releaseTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "class_method_signature": "BindingsManager.releaseTwoWay(@NotNull SettableValue<T> first, @NotNull SettableValue<T> second)", "testcase": false, "constructor": false}, {"identifier": "releaseTwoWay", "parameters": "(@NotNull SettableValue<T> value)", "modifiers": "public", "return": "void", "signature": "void releaseTwoWay(@NotNull SettableValue<T> value)", "full_signature": "public void releaseTwoWay(@NotNull SettableValue<T> value)", "class_method_signature": "BindingsManager.releaseTwoWay(@NotNull SettableValue<T> value)", "testcase": false, "constructor": false}, {"identifier": "releaseAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void releaseAll()", "full_signature": "public void releaseAll()", "class_method_signature": "BindingsManager.releaseAll()", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/BindingsManager.java"}, "focal_method": {"identifier": "bind", "parameters": "(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "modifiers": "public", "return": "void", "body": "public <T> void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src) {\n    bind(dest, src, ObservableBool.TRUE);\n  }", "signature": "void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "full_signature": "public void bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "class_method_signature": "BindingsManager.bind(@NotNull SettableValue<T> dest, @NotNull ObservableValue<T> src)", "testcase": false, "constructor": false, "invocations": ["bind"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}