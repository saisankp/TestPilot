{"test_class": {"identifier": "MLocationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MLocation seattle = new MLocation(1541348400990L, 47.60, -122.33, 100.0, -2.0, 3.0, 4.0, 0f, 0f, 0f, 0f, 0, 0);", "modifier": "private final", "type": "MLocation", "declarator": "seattle = new MLocation(1541348400990L, 47.60, -122.33, 100.0, -2.0, 3.0, 4.0, 0f, 0f, 0f, 0f, 0, 0)", "var_name": "seattle"}, {"original_string": "private final LatLng la = new LatLng(34.0, -118.2);", "modifier": "private final", "type": "LatLng", "declarator": "la = new LatLng(34.0, -118.2)", "var_name": "la"}, {"original_string": "private final double bearing = 165.66;", "modifier": "private final", "type": "double", "declarator": "bearing = 165.66", "var_name": "bearing"}, {"original_string": "private final double distance = 1551093.52;", "modifier": "private final", "type": "double", "declarator": "distance = 1551093.52", "var_name": "distance"}], "file": "common/src/test/java/com/platypii/baseline/measurements/MLocationTest.java"}, "test_case": {"identifier": "stringify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stringify() {\n        assertEquals(\"MLocation(1541348400990,47.600000,-122.330000,100.0,3,4)\", seattle.toString());\n    }", "signature": "void stringify()", "full_signature": "@Test public void stringify()", "class_method_signature": "MLocationTest.stringify()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "MLocation", "superclass": "extends Measurement", "interfaces": "implements Comparable<MLocation>", "fields": [{"original_string": "private static final String TAG = \"MLocation\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"MLocation\"", "var_name": "TAG"}, {"original_string": "public final double latitude;", "modifier": "public final", "type": "double", "declarator": "latitude", "var_name": "latitude"}, {"original_string": "public final double longitude;", "modifier": "public final", "type": "double", "declarator": "longitude", "var_name": "longitude"}, {"original_string": "public final double altitude_gps;", "modifier": "public final", "type": "double", "declarator": "altitude_gps", "var_name": "altitude_gps"}, {"original_string": "private final double vN;", "modifier": "private final", "type": "double", "declarator": "vN", "var_name": "vN"}, {"original_string": "private final double vE;", "modifier": "private final", "type": "double", "declarator": "vE", "var_name": "vE"}, {"original_string": "public float hAcc = Float.NaN;", "modifier": "public", "type": "float", "declarator": "hAcc = Float.NaN", "var_name": "hAcc"}, {"original_string": "public final float pdop;", "modifier": "public final", "type": "float", "declarator": "pdop", "var_name": "pdop"}, {"original_string": "public final float hdop;", "modifier": "public final", "type": "float", "declarator": "hdop", "var_name": "hdop"}, {"original_string": "public final float vdop;", "modifier": "public final", "type": "float", "declarator": "vdop", "var_name": "vdop"}, {"original_string": "public final int satellitesUsed;", "modifier": "public final", "type": "int", "declarator": "satellitesUsed", "var_name": "satellitesUsed"}, {"original_string": "public final int satellitesInView;", "modifier": "public final", "type": "int", "declarator": "satellitesInView", "var_name": "satellitesInView"}, {"original_string": "public final double climb;", "modifier": "public final", "type": "double", "declarator": "climb", "var_name": "climb"}], "methods": [{"identifier": "MLocation", "parameters": "(long millis, double latitude, double longitude, double altitude_gps,\n                     double climb, // Usually taken from altimeter\n                     double vN, double vE,\n                     float hAcc, float pdop, float hdop, float vdop,\n                     int satellitesUsed, int satellitesInView)", "modifiers": "public", "return": "", "signature": " MLocation(long millis, double latitude, double longitude, double altitude_gps,\n                     double climb, // Usually taken from altimeter\n                     double vN, double vE,\n                     float hAcc, float pdop, float hdop, float vdop,\n                     int satellitesUsed, int satellitesInView)", "full_signature": "public  MLocation(long millis, double latitude, double longitude, double altitude_gps,\n                     double climb, // Usually taken from altimeter\n                     double vN, double vE,\n                     float hAcc, float pdop, float hdop, float vdop,\n                     int satellitesUsed, int satellitesInView)", "class_method_signature": "MLocation.MLocation(long millis, double latitude, double longitude, double altitude_gps,\n                     double climb, // Usually taken from altimeter\n                     double vN, double vE,\n                     float hAcc, float pdop, float hdop, float vdop,\n                     int satellitesUsed, int satellitesInView)", "testcase": false, "constructor": true}, {"identifier": "toRow", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toRow()", "full_signature": "@NonNull @Override public String toRow()", "class_method_signature": "MLocation.toRow()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "MLocation.toString()", "testcase": false, "constructor": false}, {"identifier": "groundSpeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double groundSpeed()", "full_signature": "public double groundSpeed()", "class_method_signature": "MLocation.groundSpeed()", "testcase": false, "constructor": false}, {"identifier": "totalSpeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double totalSpeed()", "full_signature": "public double totalSpeed()", "class_method_signature": "MLocation.totalSpeed()", "testcase": false, "constructor": false}, {"identifier": "glideRatio", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double glideRatio()", "full_signature": "public double glideRatio()", "class_method_signature": "MLocation.glideRatio()", "testcase": false, "constructor": false}, {"identifier": "glideAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double glideAngle()", "full_signature": "public double glideAngle()", "class_method_signature": "MLocation.glideAngle()", "testcase": false, "constructor": false}, {"identifier": "bearing", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double bearing()", "full_signature": "public double bearing()", "class_method_signature": "MLocation.bearing()", "testcase": false, "constructor": false}, {"identifier": "latLng", "parameters": "()", "modifiers": "@NonNull public", "return": "LatLng", "signature": "LatLng latLng()", "full_signature": "@NonNull public LatLng latLng()", "class_method_signature": "MLocation.latLng()", "testcase": false, "constructor": false}, {"identifier": "bearingTo", "parameters": "(@NonNull MLocation dest)", "modifiers": "public", "return": "double", "signature": "double bearingTo(@NonNull MLocation dest)", "full_signature": "public double bearingTo(@NonNull MLocation dest)", "class_method_signature": "MLocation.bearingTo(@NonNull MLocation dest)", "testcase": false, "constructor": false}, {"identifier": "bearingTo", "parameters": "(@NonNull LatLng dest)", "modifiers": "public", "return": "double", "signature": "double bearingTo(@NonNull LatLng dest)", "full_signature": "public double bearingTo(@NonNull LatLng dest)", "class_method_signature": "MLocation.bearingTo(@NonNull LatLng dest)", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(@NonNull MLocation dest)", "modifiers": "public", "return": "double", "signature": "double distanceTo(@NonNull MLocation dest)", "full_signature": "public double distanceTo(@NonNull MLocation dest)", "class_method_signature": "MLocation.distanceTo(@NonNull MLocation dest)", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(@NonNull LatLng dest)", "modifiers": "public", "return": "double", "signature": "double distanceTo(@NonNull LatLng dest)", "full_signature": "public double distanceTo(@NonNull LatLng dest)", "class_method_signature": "MLocation.distanceTo(@NonNull LatLng dest)", "testcase": false, "constructor": false}, {"identifier": "moveDirection", "parameters": "(double bearing, double distance)", "modifiers": "@NonNull public", "return": "LatLng", "signature": "LatLng moveDirection(double bearing, double distance)", "full_signature": "@NonNull public LatLng moveDirection(double bearing, double distance)", "class_method_signature": "MLocation.moveDirection(double bearing, double distance)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NonNull MLocation loc)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NonNull MLocation loc)", "full_signature": "@Override public int compareTo(@NonNull MLocation loc)", "class_method_signature": "MLocation.compareTo(@NonNull MLocation loc)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@NonNull MLocation loc)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(@NonNull MLocation loc)", "full_signature": "public boolean equals(@NonNull MLocation loc)", "class_method_signature": "MLocation.equals(@NonNull MLocation loc)", "testcase": false, "constructor": false}, {"identifier": "MLocation", "parameters": "()", "modifiers": "public", "return": "", "signature": " MLocation()", "full_signature": "public  MLocation()", "class_method_signature": "MLocation.MLocation()", "testcase": false, "constructor": true}], "file": "common/src/main/java/com/platypii/baseline/measurements/MLocation.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "body": "@NonNull\n    @Override\n    public String toString() {\n        return String.format(Locale.US, \"MLocation(%d,%.6f,%.6f,%.1f,%.0f,%.0f)\", millis, latitude, longitude, altitude_gps, vN, vE);\n    }", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "MLocation.toString()", "testcase": false, "constructor": false, "invocations": ["format"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}