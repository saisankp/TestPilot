{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvert() throws ClassNotFoundException {\n    final Object[][] testParameters = new Object[][] {{127, Byte.class, (byte) 127},\n        {128, Short.class, (short) 128}, {255, Integer.class, 255}, {256L, Long.class, 256L},\n        {new BigInteger(\"511\"), BigInteger.class, BigInteger.valueOf(511)},\n        {new BigDecimal(\"512\"), BigInteger.class, new BigDecimal(\"512\").toBigInteger()},\n        {1023f, Float.class, 1023f}, {1024d, Double.class, 1024d},\n        {new BigDecimal(\"2047\"), BigDecimal.class, new BigDecimal(\"2047\")}};\n\n    for (final Object[] testParameter : testParameters) {\n      Object expected = Class.forName(testParameter[2].getClass().getName()).cast(testParameter[2]);\n      Number number = (Number) testParameter[0];\n      Class<?> targetClass = (Class<?>) testParameter[1];\n      assertEquals(expected, NumberUtils.convert(number, targetClass));\n    }\n  }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "NumberUtilsTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["valueOf", "toBigInteger", "cast", "forName", "getName", "getClass", "assertEquals", "convert"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "throwOverflowException", "parameters": "(final Number number, final Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void throwOverflowException(final Number number, final Class<?> targetClass)", "full_signature": "private static void throwOverflowException(final Number number, final Class<?> targetClass)", "class_method_signature": "NumberUtils.throwOverflowException(final Number number, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "modifiers": "public static", "return": "T", "signature": "T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "full_signature": "public static T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "class_method_signature": "NumberUtils.parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/NumberUtils.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n  public static <T> T convert(final Number number, final Class<T> targetClass)\n      throws IllegalArgumentException {\n\n    assertNotNull(number, \"Number must not be null\");\n    assertNotNull(targetClass, \"Target class must not be null\");\n\n    if (targetClass.isInstance(number)) {\n      return (T) number;\n    } else if (targetClass.equals(Byte.class) || targetClass.equals(byte.class)) {\n      final long value = number.longValue();\n      if (value < Byte.MIN_VALUE || Byte.MAX_VALUE < value) {\n        throwOverflowException(number, targetClass);\n      }\n      return (T) Byte.valueOf((byte) value);\n    } else if (targetClass.equals(Short.class) || targetClass.equals(short.class)) {\n      final long value = number.longValue();\n      if (value < Short.MIN_VALUE || Short.MAX_VALUE < value) {\n        throwOverflowException(number, targetClass);\n      }\n      return (T) Short.valueOf((short) value);\n    } else if (targetClass.equals(Integer.class) || targetClass.equals(int.class)) {\n      final long value = number.longValue();\n      if (value < Integer.MIN_VALUE || Integer.MAX_VALUE < value) {\n        throwOverflowException(number, targetClass);\n      }\n      return (T) Integer.valueOf((int) value);\n    } else if (targetClass.equals(Long.class) || targetClass.equals(long.class)) {\n      return (T) Long.valueOf(number.longValue());\n    } else if (targetClass.equals(BigInteger.class)) {\n      if (number instanceof BigDecimal) {\n        // do not lose precision - use BigDecimal's own conversion\n        return (T) ((BigDecimal) number).toBigInteger();\n      } else {\n        // original value is not a Big* number - use standard long conversion\n        return (T) BigInteger.valueOf(number.longValue());\n      }\n    } else if (targetClass.equals(Float.class) || targetClass.equals(float.class)) {\n      return (T) Float.valueOf(number.floatValue());\n    } else if (targetClass.equals(Double.class) || targetClass.equals(double.class)) {\n      return (T) Double.valueOf(number.doubleValue());\n    } else if (targetClass.equals(BigDecimal.class)) {\n      // always use BigDecimal(String) here to avoid unpredictability of BigDecimal(double)\n      // (see BigDecimal javadoc for details)\n      return (T) new BigDecimal(number.toString());\n    }\n    throw new IllegalArgumentException(\n        \"Could not convert number [\" + number + \"] of type [\" + number.getClass().getName()\n            + \"] to unknown target class [\" + targetClass.getName() + \"]\");\n  }", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "isInstance", "equals", "equals", "longValue", "throwOverflowException", "valueOf", "equals", "equals", "longValue", "throwOverflowException", "valueOf", "equals", "equals", "longValue", "throwOverflowException", "valueOf", "equals", "equals", "valueOf", "longValue", "equals", "toBigInteger", "valueOf", "longValue", "equals", "equals", "valueOf", "floatValue", "equals", "equals", "valueOf", "doubleValue", "equals", "toString", "getName", "getClass", "getName"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}