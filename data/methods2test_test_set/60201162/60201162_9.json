{"test_class": {"identifier": "TestWorkloadInfoRetriever", "superclass": "", "interfaces": "", "fields": [], "file": "uReplicator-Common/src/test/java/com/uber/stream/kafka/mirrormaker/common/core/TestWorkloadInfoRetriever.java"}, "test_case": {"identifier": "testGetTopicWorkload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTopicWorkload() {\n        WorkloadInfoRetriever retriever = new WorkloadInfoRetriever();\n        LinkedList<TopicWorkload> workloadLst = new LinkedList<>();\n        retriever._topicWorkloadMap.put(\"trip_created\", workloadLst);\n\n        // Case #1 some workload updated within 2 hours\n        TopicWorkload wl = new TopicWorkload(10 * 1024, 10);\n        long currentTime = System.currentTimeMillis();\n        wl.setLastUpdate(currentTime - TimeUnit.HOURS.toMillis(1));\n        workloadLst.add(wl);\n        TopicWorkload oldWorkload =  new TopicWorkload(20 * 1024, 20);\n        oldWorkload.setLastUpdate(currentTime - TimeUnit.HOURS.toMillis(9));\n        workloadLst.add(oldWorkload);\n\n        Assert.assertEquals(retriever.topicWorkload(\"trip_created\").compareTo(wl), 0);\n\n        workloadLst.clear();\n        workloadLst.add(oldWorkload);\n        Assert.assertEquals(retriever.topicWorkload(\"trip_created\").compareTo(oldWorkload), 0);\n\n    }", "signature": "void testGetTopicWorkload()", "full_signature": "@Test public void testGetTopicWorkload()", "class_method_signature": "TestWorkloadInfoRetriever.testGetTopicWorkload()", "testcase": true, "constructor": false, "invocations": ["put", "currentTimeMillis", "setLastUpdate", "toMillis", "add", "setLastUpdate", "toMillis", "add", "assertEquals", "compareTo", "topicWorkload", "clear", "add", "assertEquals", "compareTo", "topicWorkload"]}, "focal_class": {"identifier": "WorkloadInfoRetriever", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WorkloadInfoRetriever.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WorkloadInfoRetriever.class)", "var_name": "LOGGER"}, {"original_string": "@VisibleForTesting\n  final Map<String, LinkedList<TopicWorkload>> _topicWorkloadMap = new ConcurrentHashMap<>();", "modifier": "@VisibleForTesting\n  final", "type": "Map<String, LinkedList<TopicWorkload>>", "declarator": "_topicWorkloadMap = new ConcurrentHashMap<>()", "var_name": "_topicWorkloadMap"}, {"original_string": "private TopicWorkload _defaultTopicWorkload;", "modifier": "private", "type": "TopicWorkload", "declarator": "_defaultTopicWorkload", "var_name": "_defaultTopicWorkload"}, {"original_string": "private final IHelixManager _helixMirrorMakerManager;", "modifier": "private final", "type": "IHelixManager", "declarator": "_helixMirrorMakerManager", "var_name": "_helixMirrorMakerManager"}, {"original_string": "private final String _srcKafkaCluster;", "modifier": "private final", "type": "String", "declarator": "_srcKafkaCluster", "var_name": "_srcKafkaCluster"}, {"original_string": "private final String _simpleSrcKafkaCluster;", "modifier": "private final", "type": "String", "declarator": "_simpleSrcKafkaCluster", "var_name": "_simpleSrcKafkaCluster"}, {"original_string": "private boolean _initialized = false;", "modifier": "private", "type": "boolean", "declarator": "_initialized = false", "var_name": "_initialized"}, {"original_string": "private final ScheduledExecutorService _periodicalScheduler = Executors.newSingleThreadScheduledExecutor();", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "_periodicalScheduler = Executors.newSingleThreadScheduledExecutor()", "var_name": "_periodicalScheduler"}, {"original_string": "private final long _refreshPeriodInSeconds;", "modifier": "private final", "type": "long", "declarator": "_refreshPeriodInSeconds", "var_name": "_refreshPeriodInSeconds"}, {"original_string": "private long _lastRefreshTimeMillis = 0;", "modifier": "private", "type": "long", "declarator": "_lastRefreshTimeMillis = 0", "var_name": "_lastRefreshTimeMillis"}, {"original_string": "private final long _minRefreshIntervalMillis = 60000;", "modifier": "private final", "type": "long", "declarator": "_minRefreshIntervalMillis = 60000", "var_name": "_minRefreshIntervalMillis"}, {"original_string": "private final String _c3Host;", "modifier": "private final", "type": "String", "declarator": "_c3Host", "var_name": "_c3Host"}, {"original_string": "private final int _c3Port;", "modifier": "private final", "type": "int", "declarator": "_c3Port", "var_name": "_c3Port"}, {"original_string": "private final boolean isController;", "modifier": "private final", "type": "boolean", "declarator": "isController", "var_name": "isController"}, {"original_string": "private static final long DEFAULT_WORKLOAD_WINDOW_MILLIS = TimeUnit.MINUTES.toMillis(10);", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_WORKLOAD_WINDOW_MILLIS = TimeUnit.MINUTES.toMillis(10)", "var_name": "DEFAULT_WORKLOAD_WINDOW_MILLIS"}, {"original_string": "private static final long DEFAULT_WORKLOAD_COARSE_WINDOW_MILLIS = TimeUnit.HOURS.toMillis(3);", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_WORKLOAD_COARSE_WINDOW_MILLIS = TimeUnit.HOURS.toMillis(3)", "var_name": "DEFAULT_WORKLOAD_COARSE_WINDOW_MILLIS"}, {"original_string": "private long _maxValidTimeMillis = TimeUnit.HOURS.toMillis(25);", "modifier": "private", "type": "long", "declarator": "_maxValidTimeMillis = TimeUnit.HOURS.toMillis(25)", "var_name": "_maxValidTimeMillis"}, {"original_string": "private long _estimationLookBackWindow = TimeUnit.HOURS.toMillis(2);", "modifier": "private", "type": "long", "declarator": "_estimationLookBackWindow = TimeUnit.HOURS.toMillis(2)", "var_name": "_estimationLookBackWindow"}], "methods": [{"identifier": "WorkloadInfoRetriever", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "", "signature": " WorkloadInfoRetriever()", "full_signature": "@VisibleForTesting  WorkloadInfoRetriever()", "class_method_signature": "WorkloadInfoRetriever.WorkloadInfoRetriever()", "testcase": false, "constructor": true}, {"identifier": "WorkloadInfoRetriever", "parameters": "(IHelixManager helixMirrorMakerManager, boolean isController)", "modifiers": "public", "return": "", "signature": " WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController)", "full_signature": "public  WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController)", "class_method_signature": "WorkloadInfoRetriever.WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController)", "testcase": false, "constructor": true}, {"identifier": "WorkloadInfoRetriever", "parameters": "(IHelixManager helixMirrorMakerManager, boolean isController, String srcKafkaZkPath)", "modifiers": "public", "return": "", "signature": " WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController, String srcKafkaZkPath)", "full_signature": "public  WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController, String srcKafkaZkPath)", "class_method_signature": "WorkloadInfoRetriever.WorkloadInfoRetriever(IHelixManager helixMirrorMakerManager, boolean isController, String srcKafkaZkPath)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "WorkloadInfoRetriever.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "WorkloadInfoRetriever.stop()", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "public boolean isInitialized()", "class_method_signature": "WorkloadInfoRetriever.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "topicWorkload", "parameters": "(String topic)", "modifiers": "public", "return": "TopicWorkload", "signature": "TopicWorkload topicWorkload(String topic)", "full_signature": "public TopicWorkload topicWorkload(String topic)", "class_method_signature": "WorkloadInfoRetriever.topicWorkload(String topic)", "testcase": false, "constructor": false}, {"identifier": "setTopicDefaultWorkload", "parameters": "(TopicWorkload defaultWorkload)", "modifiers": "public", "return": "void", "signature": "void setTopicDefaultWorkload(TopicWorkload defaultWorkload)", "full_signature": "public void setTopicDefaultWorkload(TopicWorkload defaultWorkload)", "class_method_signature": "WorkloadInfoRetriever.setTopicDefaultWorkload(TopicWorkload defaultWorkload)", "testcase": false, "constructor": false}, {"identifier": "refreshWorkloads", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshWorkloads()", "full_signature": "public void refreshWorkloads()", "class_method_signature": "WorkloadInfoRetriever.refreshWorkloads()", "testcase": false, "constructor": false}, {"identifier": "initializeWorkloads", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initializeWorkloads()", "full_signature": "public void initializeWorkloads()", "class_method_signature": "WorkloadInfoRetriever.initializeWorkloads()", "testcase": false, "constructor": false}, {"identifier": "retrieveWorkload", "parameters": "(long timeInMs, long windowInMs, Map<String, Integer> topicsPartitions)", "modifiers": "private", "return": "void", "signature": "void retrieveWorkload(long timeInMs, long windowInMs, Map<String, Integer> topicsPartitions)", "full_signature": "private void retrieveWorkload(long timeInMs, long windowInMs, Map<String, Integer> topicsPartitions)", "class_method_signature": "WorkloadInfoRetriever.retrieveWorkload(long timeInMs, long windowInMs, Map<String, Integer> topicsPartitions)", "testcase": false, "constructor": false}, {"identifier": "getTopicsPartitions", "parameters": "(List<String> topics)", "modifiers": "private", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getTopicsPartitions(List<String> topics)", "full_signature": "private Map<String, Integer> getTopicsPartitions(List<String> topics)", "class_method_signature": "WorkloadInfoRetriever.getTopicsPartitions(List<String> topics)", "testcase": false, "constructor": false}], "file": "uReplicator-Common/src/main/java/com/uber/stream/kafka/mirrormaker/common/core/WorkloadInfoRetriever.java"}, "focal_method": {"identifier": "topicWorkload", "parameters": "(String topic)", "modifiers": "public", "return": "TopicWorkload", "body": "public TopicWorkload topicWorkload(String topic) {\n    LinkedList<TopicWorkload> tws = _topicWorkloadMap.get(topic);\n    if (tws == null || tws.isEmpty()) {\n      return _defaultTopicWorkload;\n    }\n    // return the maximum bytes-in-rate during the valid window\n    TopicWorkload maxTw = null;\n    long current = System.currentTimeMillis();\n    long lookbackWindow = _maxValidTimeMillis;\n    if (tws.stream().anyMatch(topicWorkload -> {\n      return current - topicWorkload.getLastUpdate() < _estimationLookBackWindow;\n    })) {\n      lookbackWindow = _estimationLookBackWindow;\n    }\n    for (TopicWorkload tw : tws) {\n      if (current - tw.getLastUpdate() > lookbackWindow) {\n        continue;\n      }\n      if (maxTw == null || maxTw.getBytesPerSecond() < tw.getBytesPerSecond()) {\n        maxTw = tw;\n      }\n    }\n    return (maxTw != null) ? maxTw : _defaultTopicWorkload;\n  }", "signature": "TopicWorkload topicWorkload(String topic)", "full_signature": "public TopicWorkload topicWorkload(String topic)", "class_method_signature": "WorkloadInfoRetriever.topicWorkload(String topic)", "testcase": false, "constructor": false, "invocations": ["get", "isEmpty", "currentTimeMillis", "anyMatch", "stream", "getLastUpdate", "getLastUpdate", "getBytesPerSecond", "getBytesPerSecond"]}, "repository": {"repo_id": 60201162, "url": "https://github.com/uber/uReplicator", "language": "Java", "is_fork": false, "fork_count": 148, "stargazer_count": 652, "size": 2223, "license": "licensed"}}