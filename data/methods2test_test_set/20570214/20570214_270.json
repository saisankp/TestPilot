{"test_class": {"identifier": "SubtleUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/SubtleUtilTest.java"}, "test_case": {"identifier": "testToEcdsaAlgo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToEcdsaAlgo() throws Exception {\n    assertEquals(\"SHA256withECDSA\", SubtleUtil.toEcdsaAlgo(HashType.SHA256));\n    assertEquals(\"SHA512withECDSA\", SubtleUtil.toEcdsaAlgo(HashType.SHA512));\n    try {\n      SubtleUtil.toEcdsaAlgo(HashType.SHA1);\n      fail(\"Invalid hash, should have thrown exception\");\n    } catch (GeneralSecurityException expected) {\n    }\n  }", "signature": "void testToEcdsaAlgo()", "full_signature": "@Test public void testToEcdsaAlgo()", "class_method_signature": "SubtleUtilTest.testToEcdsaAlgo()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toEcdsaAlgo", "assertEquals", "toEcdsaAlgo", "toEcdsaAlgo", "fail"]}, "focal_class": {"identifier": "SubtleUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toEcdsaAlgo", "parameters": "(HashType hash)", "modifiers": "public static", "return": "String", "signature": "String toEcdsaAlgo(HashType hash)", "full_signature": "public static String toEcdsaAlgo(HashType hash)", "class_method_signature": "SubtleUtil.toEcdsaAlgo(HashType hash)", "testcase": false, "constructor": false}, {"identifier": "toRsaSsaPkcs1Algo", "parameters": "(HashType hash)", "modifiers": "public static", "return": "String", "signature": "String toRsaSsaPkcs1Algo(HashType hash)", "full_signature": "public static String toRsaSsaPkcs1Algo(HashType hash)", "class_method_signature": "SubtleUtil.toRsaSsaPkcs1Algo(HashType hash)", "testcase": false, "constructor": false}, {"identifier": "toDigestAlgo", "parameters": "(HashType hash)", "modifiers": "public static", "return": "String", "signature": "String toDigestAlgo(HashType hash)", "full_signature": "public static String toDigestAlgo(HashType hash)", "class_method_signature": "SubtleUtil.toDigestAlgo(HashType hash)", "testcase": false, "constructor": false}, {"identifier": "isAndroid", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAndroid()", "full_signature": "public static boolean isAndroid()", "class_method_signature": "SubtleUtil.isAndroid()", "testcase": false, "constructor": false}, {"identifier": "bytes2Integer", "parameters": "(byte[] bs)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger bytes2Integer(byte[] bs)", "full_signature": "public static BigInteger bytes2Integer(byte[] bs)", "class_method_signature": "SubtleUtil.bytes2Integer(byte[] bs)", "testcase": false, "constructor": false}, {"identifier": "integer2Bytes", "parameters": "(BigInteger num, int intendedLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] integer2Bytes(BigInteger num, int intendedLength)", "full_signature": "public static byte[] integer2Bytes(BigInteger num, int intendedLength)", "class_method_signature": "SubtleUtil.integer2Bytes(BigInteger num, int intendedLength)", "testcase": false, "constructor": false}, {"identifier": "mgf1", "parameters": "(byte[] mgfSeed, int maskLen, HashType mgfHash)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] mgf1(byte[] mgfSeed, int maskLen, HashType mgfHash)", "full_signature": "public static byte[] mgf1(byte[] mgfSeed, int maskLen, HashType mgfHash)", "class_method_signature": "SubtleUtil.mgf1(byte[] mgfSeed, int maskLen, HashType mgfHash)", "testcase": false, "constructor": false}, {"identifier": "putAsUnsigedInt", "parameters": "(ByteBuffer buffer, long value)", "modifiers": "public static", "return": "void", "signature": "void putAsUnsigedInt(ByteBuffer buffer, long value)", "full_signature": "public static void putAsUnsigedInt(ByteBuffer buffer, long value)", "class_method_signature": "SubtleUtil.putAsUnsigedInt(ByteBuffer buffer, long value)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/SubtleUtil.java"}, "focal_method": {"identifier": "toEcdsaAlgo", "parameters": "(HashType hash)", "modifiers": "public static", "return": "String", "body": "public static String toEcdsaAlgo(HashType hash) throws GeneralSecurityException {\n    Validators.validateSignatureHash(hash);\n    return hash + \"withECDSA\";\n  }", "signature": "String toEcdsaAlgo(HashType hash)", "full_signature": "public static String toEcdsaAlgo(HashType hash)", "class_method_signature": "SubtleUtil.toEcdsaAlgo(HashType hash)", "testcase": false, "constructor": false, "invocations": ["validateSignatureHash"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}