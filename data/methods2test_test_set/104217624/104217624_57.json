{"test_class": {"identifier": "CertificateTreeValidationServiceTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TrustAnchorsFactory factory;", "modifier": "@Autowired\n    private", "type": "TrustAnchorsFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Autowired\n    private CertificateTreeValidationService subject;", "modifier": "@Autowired\n    private", "type": "CertificateTreeValidationService", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Autowired\n    private ValidationScheduler validationScheduler;", "modifier": "@Autowired\n    private", "type": "ValidationScheduler", "declarator": "validationScheduler", "var_name": "validationScheduler"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/validation/CertificateTreeValidationServiceTest.java"}, "test_case": {"identifier": "should_report_proper_error_when_repository_is_available_but_manifest_is_invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_report_proper_error_when_repository_is_available_but_manifest_is_invalid() {\n        KeyPair childKeyPair = KEY_PAIR_FACTORY.generate();\n\n        final ValidityPeriod mftValidityPeriod = new ValidityPeriod(\n            Instant.now().minus(Duration.standardDays(2)),\n            Instant.now().minus(Duration.standardDays(1))\n        );\n\n        TrustAnchor ta = wtx(tx -> {\n            TrustAnchor ta1 = factory.createTrustAnchor(tx, x -> {\n                CertificateAuthority child = CertificateAuthority.builder()\n                        .dn(\"CN=child-ca\")\n                        .keyPair(childKeyPair)\n                        .certificateLocation(\"rsync://rpki.test/CN=child-ca.cer\")\n                        .resources(IpResourceSet.parse(\"192.168.128.0/17\"))\n                        .notifyURI(TA_RRDP_NOTIFY_URI)\n                        .manifestURI(\"rsync://rpki.test/CN=child-ca/child-ca.mft\")\n                        .repositoryURI(\"rsync://rpki.test/CN=child-ca/\")\n                        .crlDistributionPoint(\"rsync://rpki.test/CN=child-ca/child-ca.crl\")\n                        .build();\n                x.children(Collections.singletonList(child));\n            }, mftValidityPeriod);\n            this.getTrustAnchors().add(tx, ta1);\n            return ta1;\n        });\n\n\n        RpkiRepository repository = wtx(tx -> {\n            final Ref<TrustAnchor> trustAnchorRef = this.getTrustAnchors().makeRef(tx, ta.key());\n            RpkiRepository r = this.getRpkiRepositories().register(tx, trustAnchorRef, TA_RRDP_NOTIFY_URI, RpkiRepository.Type.RRDP);\n            r.setFailed();\n            this.getRpkiRepositories().update(tx, r);\n            return r;\n        });\n\n        subject.validate(ta.key().asLong());\n\n        rtx0(tx -> {\n            List<CertificateTreeValidationRun> completed = this.getValidationRuns().findAll(tx, CertificateTreeValidationRun.class);\n            assertThat(completed).hasSize(1);\n            final List<ValidationCheck> checks = completed.get(0).getValidationChecks();\n            assertThat(checks.get(0).getKey()).isEqualTo(ValidationString.VALIDATOR_OLD_LOCAL_MANIFEST_REPOSITORY_FAILED);\n            assertThat(checks.get(0).getParameters()).isEqualTo(Collections.singletonList(repository.getRrdpNotifyUri()));\n        });\n    }", "signature": "void should_report_proper_error_when_repository_is_available_but_manifest_is_invalid()", "full_signature": "@Test public void should_report_proper_error_when_repository_is_available_but_manifest_is_invalid()", "class_method_signature": "CertificateTreeValidationServiceTest.should_report_proper_error_when_repository_is_available_but_manifest_is_invalid()", "testcase": true, "constructor": false, "invocations": ["generate", "minus", "now", "standardDays", "minus", "now", "standardDays", "wtx", "createTrustAnchor", "build", "crlDistributionPoint", "repositoryURI", "manifestURI", "notifyURI", "resources", "certificateLocation", "keyPair", "dn", "builder", "parse", "children", "singletonList", "add", "getTrustAnchors", "wtx", "makeRef", "getTrustAnchors", "key", "register", "getRpkiRepositories", "setFailed", "update", "getRpkiRepositories", "validate", "asLong", "key", "rtx0", "findAll", "getValidationRuns", "hasSize", "assertThat", "getValidationChecks", "get", "isEqualTo", "assertThat", "getKey", "get", "isEqualTo", "assertThat", "getParameters", "get", "singletonList", "getRrdpNotifyUri"]}, "focal_class": {"identifier": "CertificateTreeValidationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final long LONG_DURATION_WARNING_MS = 60_000;", "modifier": "public final", "type": "long", "declarator": "LONG_DURATION_WARNING_MS = 60_000", "var_name": "LONG_DURATION_WARNING_MS"}, {"original_string": "private final ValidationConfig validationConfig;", "modifier": "private final", "type": "ValidationConfig", "declarator": "validationConfig", "var_name": "validationConfig"}, {"original_string": "private final TrustAnchorMetricsService taMetricsService;", "modifier": "private final", "type": "TrustAnchorMetricsService", "declarator": "taMetricsService", "var_name": "taMetricsService"}, {"original_string": "private final RpkiObjects rpkiObjects;", "modifier": "private final", "type": "RpkiObjects", "declarator": "rpkiObjects", "var_name": "rpkiObjects"}, {"original_string": "private final RpkiRepositories rpkiRepositories;", "modifier": "private final", "type": "RpkiRepositories", "declarator": "rpkiRepositories", "var_name": "rpkiRepositories"}, {"original_string": "private final Settings settings;", "modifier": "private final", "type": "Settings", "declarator": "settings", "var_name": "settings"}, {"original_string": "private final ValidationScheduler validationScheduler;", "modifier": "private final", "type": "ValidationScheduler", "declarator": "validationScheduler", "var_name": "validationScheduler"}, {"original_string": "private final ValidationRuns validationRuns;", "modifier": "private final", "type": "ValidationRuns", "declarator": "validationRuns", "var_name": "validationRuns"}, {"original_string": "private final TrustAnchors trustAnchors;", "modifier": "private final", "type": "TrustAnchors", "declarator": "trustAnchors", "var_name": "trustAnchors"}, {"original_string": "private final Storage storage;", "modifier": "private final", "type": "Storage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final ValidatedRpkiObjects validatedRpkiObjects;", "modifier": "private final", "type": "ValidatedRpkiObjects", "declarator": "validatedRpkiObjects", "var_name": "validatedRpkiObjects"}, {"original_string": "private final TrustAnchorState trustAnchorState;", "modifier": "private final", "type": "TrustAnchorState", "declarator": "trustAnchorState", "var_name": "trustAnchorState"}], "methods": [{"identifier": "CertificateTreeValidationService", "parameters": "(RpkiObjects rpkiObjects,\n                                            RpkiRepositories rpkiRepositories,\n                                            Settings settings,\n                                            ValidationScheduler validationScheduler,\n                                            ValidationRuns validationRuns,\n                                            TrustAnchors trustAnchors,\n                                            ValidatedRpkiObjects validatedRpkiObjects,\n                                            Storage storage,\n                                            TrustAnchorState trustAnchorState,\n                                            TrustAnchorMetricsService taMetricsService,\n                                            ValidationConfig validationConfig)", "modifiers": "@Autowired public", "return": "", "signature": " CertificateTreeValidationService(RpkiObjects rpkiObjects,\n                                            RpkiRepositories rpkiRepositories,\n                                            Settings settings,\n                                            ValidationScheduler validationScheduler,\n                                            ValidationRuns validationRuns,\n                                            TrustAnchors trustAnchors,\n                                            ValidatedRpkiObjects validatedRpkiObjects,\n                                            Storage storage,\n                                            TrustAnchorState trustAnchorState,\n                                            TrustAnchorMetricsService taMetricsService,\n                                            ValidationConfig validationConfig)", "full_signature": "@Autowired public  CertificateTreeValidationService(RpkiObjects rpkiObjects,\n                                            RpkiRepositories rpkiRepositories,\n                                            Settings settings,\n                                            ValidationScheduler validationScheduler,\n                                            ValidationRuns validationRuns,\n                                            TrustAnchors trustAnchors,\n                                            ValidatedRpkiObjects validatedRpkiObjects,\n                                            Storage storage,\n                                            TrustAnchorState trustAnchorState,\n                                            TrustAnchorMetricsService taMetricsService,\n                                            ValidationConfig validationConfig)", "class_method_signature": "CertificateTreeValidationService.CertificateTreeValidationService(RpkiObjects rpkiObjects,\n                                            RpkiRepositories rpkiRepositories,\n                                            Settings settings,\n                                            ValidationScheduler validationScheduler,\n                                            ValidationRuns validationRuns,\n                                            TrustAnchors trustAnchors,\n                                            ValidatedRpkiObjects validatedRpkiObjects,\n                                            Storage storage,\n                                            TrustAnchorState trustAnchorState,\n                                            TrustAnchorMetricsService taMetricsService,\n                                            ValidationConfig validationConfig)", "testcase": false, "constructor": true}, {"identifier": "logForDuration", "parameters": "(final String message, Object o1, long delta)", "modifiers": "private", "return": "void", "signature": "void logForDuration(final String message, Object o1, long delta)", "full_signature": "private void logForDuration(final String message, Object o1, long delta)", "class_method_signature": "CertificateTreeValidationService.logForDuration(final String message, Object o1, long delta)", "testcase": false, "constructor": false}, {"identifier": "logForDuration", "parameters": "(final String message, Object o1, Object o2, long delta)", "modifiers": "private", "return": "void", "signature": "void logForDuration(final String message, Object o1, Object o2, long delta)", "full_signature": "private void logForDuration(final String message, Object o1, Object o2, long delta)", "class_method_signature": "CertificateTreeValidationService.logForDuration(final String message, Object o1, Object o2, long delta)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(long trustAnchorId)", "modifiers": "public", "return": "void", "signature": "void validate(long trustAnchorId)", "full_signature": "public void validate(long trustAnchorId)", "class_method_signature": "CertificateTreeValidationService.validate(long trustAnchorId)", "testcase": false, "constructor": false}, {"identifier": "validateTa", "parameters": "(TrustAnchor trustAnchor)", "modifiers": "private", "return": "void", "signature": "void validateTa(TrustAnchor trustAnchor)", "full_signature": "private void validateTa(TrustAnchor trustAnchor)", "class_method_signature": "CertificateTreeValidationService.validateTa(TrustAnchor trustAnchor)", "testcase": false, "constructor": false}, {"identifier": "markTaObjectsReachable", "parameters": "(Tx.Write tx, X509ResourceCertificate taCertificate)", "modifiers": "private", "return": "void", "signature": "void markTaObjectsReachable(Tx.Write tx, X509ResourceCertificate taCertificate)", "full_signature": "private void markTaObjectsReachable(Tx.Write tx, X509ResourceCertificate taCertificate)", "class_method_signature": "CertificateTreeValidationService.markTaObjectsReachable(Tx.Write tx, X509ResourceCertificate taCertificate)", "testcase": false, "constructor": false}, {"identifier": "isValidationRunCompleted", "parameters": "(ValidationResult validationResult)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidationRunCompleted(ValidationResult validationResult)", "full_signature": "private boolean isValidationRunCompleted(ValidationResult validationResult)", "class_method_signature": "CertificateTreeValidationService.isValidationRunCompleted(ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "validateCertificateAuthority", "parameters": "(\n            final TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            final CertificateRepositoryObjectValidationContext context\n    )", "modifiers": "private", "return": "CertificateAuthorityValidationResult", "signature": "CertificateAuthorityValidationResult validateCertificateAuthority(\n            final TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            final CertificateRepositoryObjectValidationContext context\n    )", "full_signature": "private CertificateAuthorityValidationResult validateCertificateAuthority(\n            final TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            final CertificateRepositoryObjectValidationContext context\n    )", "class_method_signature": "CertificateTreeValidationService.validateCertificateAuthority(\n            final TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            final CertificateRepositoryObjectValidationContext context\n    )", "testcase": false, "constructor": false}, {"identifier": "validateManifestEntries", "parameters": "(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            ManifestCms manifest,\n            URI crlUri,\n            X509Crl x509Crl\n    )", "modifiers": "private", "return": "CertificateAuthorityValidationResult", "signature": "CertificateAuthorityValidationResult validateManifestEntries(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            ManifestCms manifest,\n            URI crlUri,\n            X509Crl x509Crl\n    )", "full_signature": "private CertificateAuthorityValidationResult validateManifestEntries(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            ManifestCms manifest,\n            URI crlUri,\n            X509Crl x509Crl\n    )", "class_method_signature": "CertificateTreeValidationService.validateManifestEntries(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            ManifestCms manifest,\n            URI crlUri,\n            X509Crl x509Crl\n    )", "testcase": false, "constructor": false}, {"identifier": "validateManifestEntry", "parameters": "(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            URI crlUri,\n            X509Crl crl,\n            Map.Entry<String, byte[]> entry\n    )", "modifiers": "private", "return": "CertificateAuthorityValidationResult", "signature": "CertificateAuthorityValidationResult validateManifestEntry(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            URI crlUri,\n            X509Crl crl,\n            Map.Entry<String, byte[]> entry\n    )", "full_signature": "private CertificateAuthorityValidationResult validateManifestEntry(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            URI crlUri,\n            X509Crl crl,\n            Map.Entry<String, byte[]> entry\n    )", "class_method_signature": "CertificateTreeValidationService.validateManifestEntry(\n            TrustAnchorData trustAnchor,\n            final Map<URI, RpkiRepository> registeredRepositories,\n            CertificateRepositoryObjectValidationContext context,\n            URI manifestUri,\n            URI crlUri,\n            X509Crl crl,\n            Map.Entry<String, byte[]> entry\n    )", "testcase": false, "constructor": false}, {"identifier": "registerRepository", "parameters": "(Tx.Write tx,\n                                              TrustAnchorData trustAnchor,\n                                              Map<URI, RpkiRepository> registeredRepositories,\n                                              CertificateRepositoryObjectValidationContext context)", "modifiers": "private", "return": "RpkiRepository", "signature": "RpkiRepository registerRepository(Tx.Write tx,\n                                              TrustAnchorData trustAnchor,\n                                              Map<URI, RpkiRepository> registeredRepositories,\n                                              CertificateRepositoryObjectValidationContext context)", "full_signature": "private RpkiRepository registerRepository(Tx.Write tx,\n                                              TrustAnchorData trustAnchor,\n                                              Map<URI, RpkiRepository> registeredRepositories,\n                                              CertificateRepositoryObjectValidationContext context)", "class_method_signature": "CertificateTreeValidationService.registerRepository(Tx.Write tx,\n                                              TrustAnchorData trustAnchor,\n                                              Map<URI, RpkiRepository> registeredRepositories,\n                                              CertificateRepositoryObjectValidationContext context)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/validation/CertificateTreeValidationService.java"}, "focal_method": {"identifier": "validate", "parameters": "(long trustAnchorId)", "modifiers": "public", "return": "void", "body": "public void validate(long trustAnchorId) {\n        Optional<TrustAnchor> maybeTrustAnchor = storage.readTx(tx -> trustAnchors.get(tx, Key.of(trustAnchorId)));\n        if (maybeTrustAnchor.isPresent()) {\n            final TrustAnchor trustAnchor = maybeTrustAnchor.get();\n            Bench.mark0(\"validateTa \" + trustAnchor.getName(), () -> validateTa(trustAnchor));\n        } else {\n            log.error(\"Couldn't find trust anchor {}\", trustAnchorId);\n        }\n    }", "signature": "void validate(long trustAnchorId)", "full_signature": "public void validate(long trustAnchorId)", "class_method_signature": "CertificateTreeValidationService.validate(long trustAnchorId)", "testcase": false, "constructor": false, "invocations": ["readTx", "get", "of", "isPresent", "get", "mark0", "getName", "validateTa", "error"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}