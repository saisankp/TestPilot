{"test_class": {"identifier": "CommonMethodsImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-parent/core/src/test/java/fr/javatronic/damapping/processor/sourcegenerator/writer/CommonMethodsImplTest.java"}, "test_case": {"identifier": "appendType_type_from_current_package_without_import_uses_simple_reference", "parameters": "(DAType type)", "modifiers": "@Test(dataProvider = \"array_or_declared_DP\") public", "return": "void", "body": "@Test(dataProvider = \"array_or_declared_DP\")\n  public void appendType_type_from_current_package_without_import_uses_simple_reference(DAType type) throws Exception {\n    FileContextTestImpl fileContext = fileContext(\"com.acme\", false, false);\n    CommonMethods commonMethods = new CommonMethodsImpl(fileContext, 0);\n\n    commonMethods.appendType(type);\n\n    assertThat(fileContext.getRes()).isEqualTo(type.isArray() ? \"Name[]\" : \"Name\");\n  }", "signature": "void appendType_type_from_current_package_without_import_uses_simple_reference(DAType type)", "full_signature": "@Test(dataProvider = \"array_or_declared_DP\") public void appendType_type_from_current_package_without_import_uses_simple_reference(DAType type)", "class_method_signature": "CommonMethodsImplTest.appendType_type_from_current_package_without_import_uses_simple_reference(DAType type)", "testcase": true, "constructor": false, "invocations": ["fileContext", "appendType", "isEqualTo", "assertThat", "getRes", "isArray"]}, "focal_class": {"identifier": "CommonMethodsImpl", "superclass": "", "interfaces": "implements CommonMethods", "fields": [{"original_string": "protected static final String INDENT = \"    \";", "modifier": "protected static final", "type": "String", "declarator": "INDENT = \"    \"", "var_name": "INDENT"}, {"original_string": "private final FileContext fileContext;", "modifier": "private final", "type": "FileContext", "declarator": "fileContext", "var_name": "fileContext"}, {"original_string": "private final int indentOffset;", "modifier": "private final", "type": "int", "declarator": "indentOffset", "var_name": "indentOffset"}], "methods": [{"identifier": "CommonMethodsImpl", "parameters": "(@Nonnull FileContext fileContext, int indentOffset)", "modifiers": "public", "return": "", "signature": " CommonMethodsImpl(@Nonnull FileContext fileContext, int indentOffset)", "full_signature": "public  CommonMethodsImpl(@Nonnull FileContext fileContext, int indentOffset)", "class_method_signature": "CommonMethodsImpl.CommonMethodsImpl(@Nonnull FileContext fileContext, int indentOffset)", "testcase": false, "constructor": true}, {"identifier": "getFileContext", "parameters": "()", "modifiers": "@Override public", "return": "FileContext", "signature": "FileContext getFileContext()", "full_signature": "@Override public FileContext getFileContext()", "class_method_signature": "CommonMethodsImpl.getFileContext()", "testcase": false, "constructor": false}, {"identifier": "getIndentOffset", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndentOffset()", "full_signature": "@Override public int getIndentOffset()", "class_method_signature": "CommonMethodsImpl.getIndentOffset()", "testcase": false, "constructor": false}, {"identifier": "appendIndent", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void appendIndent()", "full_signature": "@Override public void appendIndent()", "class_method_signature": "CommonMethodsImpl.appendIndent()", "testcase": false, "constructor": false}, {"identifier": "appendModifiers", "parameters": "(@Nullable DAModifier[] modifiers)", "modifiers": "@Override public", "return": "void", "signature": "void appendModifiers(@Nullable DAModifier[] modifiers)", "full_signature": "@Override public void appendModifiers(@Nullable DAModifier[] modifiers)", "class_method_signature": "CommonMethodsImpl.appendModifiers(@Nullable DAModifier[] modifiers)", "testcase": false, "constructor": false}, {"identifier": "appendModifier", "parameters": "(@Nullable DAModifier modifier)", "modifiers": "private", "return": "void", "signature": "void appendModifier(@Nullable DAModifier modifier)", "full_signature": "private void appendModifier(@Nullable DAModifier modifier)", "class_method_signature": "CommonMethodsImpl.appendModifier(@Nullable DAModifier modifier)", "testcase": false, "constructor": false}, {"identifier": "appendAnnotations", "parameters": "(Collection<DAAnnotation> annotations)", "modifiers": "@Override public", "return": "void", "signature": "void appendAnnotations(Collection<DAAnnotation> annotations)", "full_signature": "@Override public void appendAnnotations(Collection<DAAnnotation> annotations)", "class_method_signature": "CommonMethodsImpl.appendAnnotations(Collection<DAAnnotation> annotations)", "testcase": false, "constructor": false}, {"identifier": "appendInlineAnnotations", "parameters": "(Collection<DAAnnotation> annotations)", "modifiers": "@Override public", "return": "void", "signature": "void appendInlineAnnotations(Collection<DAAnnotation> annotations)", "full_signature": "@Override public void appendInlineAnnotations(Collection<DAAnnotation> annotations)", "class_method_signature": "CommonMethodsImpl.appendInlineAnnotations(Collection<DAAnnotation> annotations)", "testcase": false, "constructor": false}, {"identifier": "appendAnnotationMembers", "parameters": "(Collection<DAAnnotationMember> annotationMembers)", "modifiers": "private", "return": "void", "signature": "void appendAnnotationMembers(Collection<DAAnnotationMember> annotationMembers)", "full_signature": "private void appendAnnotationMembers(Collection<DAAnnotationMember> annotationMembers)", "class_method_signature": "CommonMethodsImpl.appendAnnotationMembers(Collection<DAAnnotationMember> annotationMembers)", "testcase": false, "constructor": false}, {"identifier": "appendType", "parameters": "(DAType type)", "modifiers": "@Override public", "return": "void", "signature": "void appendType(DAType type)", "full_signature": "@Override public void appendType(DAType type)", "class_method_signature": "CommonMethodsImpl.appendType(DAType type)", "testcase": false, "constructor": false}, {"identifier": "useQualifiedReference", "parameters": "(DAType type)", "modifiers": "private", "return": "boolean", "signature": "boolean useQualifiedReference(DAType type)", "full_signature": "private boolean useQualifiedReference(DAType type)", "class_method_signature": "CommonMethodsImpl.useQualifiedReference(DAType type)", "testcase": false, "constructor": false}, {"identifier": "appendTypeArgs", "parameters": "(List<DAType> typeArgs)", "modifiers": "@Override public", "return": "void", "signature": "void appendTypeArgs(List<DAType> typeArgs)", "full_signature": "@Override public void appendTypeArgs(List<DAType> typeArgs)", "class_method_signature": "CommonMethodsImpl.appendTypeArgs(List<DAType> typeArgs)", "testcase": false, "constructor": false}, {"identifier": "newLine", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void newLine()", "full_signature": "@Override public void newLine()", "class_method_signature": "CommonMethodsImpl.newLine()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "CommonMethodsImpl.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CommonMethodsImpl.close()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(CharSequence csq)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(CharSequence csq)", "full_signature": "@Override public Writer append(CharSequence csq)", "class_method_signature": "CommonMethodsImpl.append(CharSequence csq)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(CharSequence csq, int start, int end)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(CharSequence csq, int start, int end)", "full_signature": "@Override public Writer append(CharSequence csq, int start, int end)", "class_method_signature": "CommonMethodsImpl.append(CharSequence csq, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(char c)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(char c)", "full_signature": "@Override public Writer append(char c)", "class_method_signature": "CommonMethodsImpl.append(char c)", "testcase": false, "constructor": false}], "file": "core-parent/core/src/main/java/fr/javatronic/damapping/processor/sourcegenerator/writer/CommonMethodsImpl.java"}, "focal_method": {"identifier": "appendType", "parameters": "(DAType type)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void appendType(DAType type) throws IOException {\n    append(useQualifiedReference(type) ? type.getQualifiedName() : type.getSimpleName());\n    if (type.getExtendsBound() != null) {\n      append(\" extends \");\n      appendType(type.getExtendsBound());\n    }\n    else if (type.getSuperBound() != null) {\n      append(\" super \");\n      appendType(type.getExtendsBound());\n    }\n    appendTypeArgs(type.getTypeArgs());\n    if (type.isArray()) {\n      append(\"[]\");\n    }\n  }", "signature": "void appendType(DAType type)", "full_signature": "@Override public void appendType(DAType type)", "class_method_signature": "CommonMethodsImpl.appendType(DAType type)", "testcase": false, "constructor": false, "invocations": ["append", "useQualifiedReference", "getQualifiedName", "getSimpleName", "getExtendsBound", "append", "appendType", "getExtendsBound", "getSuperBound", "append", "appendType", "getExtendsBound", "appendTypeArgs", "getTypeArgs", "isArray", "append"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}