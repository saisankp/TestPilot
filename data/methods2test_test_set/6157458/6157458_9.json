{"test_class": {"identifier": "DependencyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DependencyResolver resolver;", "modifier": "private", "type": "DependencyResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "pf4j/src/test/java/org/pf4j/DependencyResolverTest.java"}, "test_case": {"identifier": "sortedPlugins", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sortedPlugins() {\n        // create incomplete plugin descriptor (ignore some attributes)\n        PluginDescriptor pd1 = new DefaultPluginDescriptor()\n            .setPluginId(\"p1\")\n            .setDependencies(\"p2\");\n\n        PluginDescriptor pd2 = new DefaultPluginDescriptor()\n            .setPluginId(\"p2\")\n            .setPluginVersion(\"0.0.0\"); // needed in \"checkDependencyVersion\" method\n\n        List<PluginDescriptor> plugins = new ArrayList<>();\n        plugins.add(pd1);\n        plugins.add(pd2);\n\n        DependencyResolver.Result result = resolver.resolve(plugins);\n\n        assertTrue(result.getNotFoundDependencies().isEmpty());\n        assertEquals(result.getSortedPlugins(), Arrays.asList(\"p2\", \"p1\"));\n    }", "signature": "void sortedPlugins()", "full_signature": "@Test public void sortedPlugins()", "class_method_signature": "DependencyResolverTest.sortedPlugins()", "testcase": true, "constructor": false, "invocations": ["setDependencies", "setPluginId", "setPluginVersion", "setPluginId", "add", "add", "resolve", "assertTrue", "isEmpty", "getNotFoundDependencies", "assertEquals", "getSortedPlugins", "asList"]}, "focal_class": {"identifier": "DependencyResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DependencyResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DependencyResolver.class)", "var_name": "log"}, {"original_string": "private VersionManager versionManager;", "modifier": "private", "type": "VersionManager", "declarator": "versionManager", "var_name": "versionManager"}, {"original_string": "private DirectedGraph<String> dependenciesGraph;", "modifier": "private", "type": "DirectedGraph<String>", "declarator": "dependenciesGraph", "var_name": "dependenciesGraph"}, {"original_string": "private DirectedGraph<String> dependentsGraph;", "modifier": "private", "type": "DirectedGraph<String>", "declarator": "dependentsGraph", "var_name": "dependentsGraph"}, {"original_string": "private boolean resolved;", "modifier": "private", "type": "boolean", "declarator": "resolved", "var_name": "resolved"}], "methods": [{"identifier": "DependencyResolver", "parameters": "(VersionManager versionManager)", "modifiers": "public", "return": "", "signature": " DependencyResolver(VersionManager versionManager)", "full_signature": "public  DependencyResolver(VersionManager versionManager)", "class_method_signature": "DependencyResolver.DependencyResolver(VersionManager versionManager)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(List<PluginDescriptor> plugins)", "modifiers": "public", "return": "Result", "signature": "Result resolve(List<PluginDescriptor> plugins)", "full_signature": "public Result resolve(List<PluginDescriptor> plugins)", "class_method_signature": "DependencyResolver.resolve(List<PluginDescriptor> plugins)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "(String pluginId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDependencies(String pluginId)", "full_signature": "public List<String> getDependencies(String pluginId)", "class_method_signature": "DependencyResolver.getDependencies(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getDependents", "parameters": "(String pluginId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDependents(String pluginId)", "full_signature": "public List<String> getDependents(String pluginId)", "class_method_signature": "DependencyResolver.getDependents(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "checkDependencyVersion", "parameters": "(String requiredVersion, String existingVersion)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkDependencyVersion(String requiredVersion, String existingVersion)", "full_signature": "protected boolean checkDependencyVersion(String requiredVersion, String existingVersion)", "class_method_signature": "DependencyResolver.checkDependencyVersion(String requiredVersion, String existingVersion)", "testcase": false, "constructor": false}, {"identifier": "addPlugin", "parameters": "(PluginDescriptor descriptor)", "modifiers": "private", "return": "void", "signature": "void addPlugin(PluginDescriptor descriptor)", "full_signature": "private void addPlugin(PluginDescriptor descriptor)", "class_method_signature": "DependencyResolver.addPlugin(PluginDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "checkResolved", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkResolved()", "full_signature": "private void checkResolved()", "class_method_signature": "DependencyResolver.checkResolved()", "testcase": false, "constructor": false}, {"identifier": "getDependencyVersionSupport", "parameters": "(PluginDescriptor dependent, String dependencyId)", "modifiers": "private", "return": "String", "signature": "String getDependencyVersionSupport(PluginDescriptor dependent, String dependencyId)", "full_signature": "private String getDependencyVersionSupport(PluginDescriptor dependent, String dependencyId)", "class_method_signature": "DependencyResolver.getDependencyVersionSupport(PluginDescriptor dependent, String dependencyId)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DependencyResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(List<PluginDescriptor> plugins)", "modifiers": "public", "return": "Result", "body": "public Result resolve(List<PluginDescriptor> plugins) {\n        // create graphs\n        dependenciesGraph = new DirectedGraph<>();\n        dependentsGraph = new DirectedGraph<>();\n\n        // populate graphs\n        Map<String, PluginDescriptor> pluginByIds = new HashMap<>();\n        for (PluginDescriptor plugin : plugins) {\n            addPlugin(plugin);\n            pluginByIds.put(plugin.getPluginId(), plugin);\n        }\n\n        log.debug(\"Graph: {}\", dependenciesGraph);\n\n        // get a sorted list of dependencies\n        List<String> sortedPlugins = dependenciesGraph.reverseTopologicalSort();\n        log.debug(\"Plugins order: {}\", sortedPlugins);\n\n        // create the result object\n        Result result = new Result(sortedPlugins);\n\n        resolved = true;\n\n        if (sortedPlugins != null) { // no cyclic dependency\n            // detect not found dependencies\n            for (String pluginId : sortedPlugins) {\n                if (!pluginByIds.containsKey(pluginId)) {\n                    result.addNotFoundDependency(pluginId);\n                }\n            }\n        }\n\n        // check dependencies versions\n        for (PluginDescriptor plugin : plugins) {\n            String pluginId = plugin.getPluginId();\n            String existingVersion = plugin.getVersion();\n\n            List<String> dependents = new ArrayList<>(getDependents(pluginId));\n            while (!dependents.isEmpty()) {\n                String dependentId = dependents.remove(0);\n                PluginDescriptor dependent = pluginByIds.get(dependentId);\n                String requiredVersion = getDependencyVersionSupport(dependent, pluginId);\n                boolean ok = checkDependencyVersion(requiredVersion, existingVersion);\n                if (!ok) {\n                    result.addWrongDependencyVersion(new WrongDependencyVersion(pluginId, dependentId, existingVersion, requiredVersion));\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "Result resolve(List<PluginDescriptor> plugins)", "full_signature": "public Result resolve(List<PluginDescriptor> plugins)", "class_method_signature": "DependencyResolver.resolve(List<PluginDescriptor> plugins)", "testcase": false, "constructor": false, "invocations": ["addPlugin", "put", "getPluginId", "debug", "reverseTopologicalSort", "debug", "containsKey", "addNotFoundDependency", "getPluginId", "getVersion", "getDependents", "isEmpty", "remove", "get", "getDependencyVersionSupport", "checkDependencyVersion", "addWrongDependencyVersion"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}