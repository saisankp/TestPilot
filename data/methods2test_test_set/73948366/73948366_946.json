{"test_class": {"identifier": "X509CertUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class)", "var_name": "LOGGER"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509CertUtilsTest.java"}, "test_case": {"identifier": "extractReqeustInstanceIdFromURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void extractReqeustInstanceIdFromURI() {\n\n        // first no list\n\n        List<String> uriList = new ArrayList<>();\n        assertNull(X509CertUtils.extractRequestInstanceIdFromURI(uriList));\n\n        // does not start with uri\n\n        uriList.add(\"spiffe://athenz/sa/api\");\n        assertNull(X509CertUtils.extractRequestInstanceIdFromURI(uriList));\n\n        // does not have correct format\n\n        uriList.add(\"athenz://instanceid/provider-id-001\");\n        assertNull(X509CertUtils.extractRequestInstanceIdFromURI(uriList));\n\n        // finally correct format\n\n        uriList.add(\"athenz://instanceid/provider/id-001\");\n        assertEquals(X509CertUtils.extractRequestInstanceIdFromURI(uriList), \"id-001\");\n    }", "signature": "void extractReqeustInstanceIdFromURI()", "full_signature": "@Test public void extractReqeustInstanceIdFromURI()", "class_method_signature": "X509CertUtilsTest.extractReqeustInstanceIdFromURI()", "testcase": true, "constructor": false, "invocations": ["assertNull", "extractRequestInstanceIdFromURI", "add", "assertNull", "extractRequestInstanceIdFromURI", "add", "assertNull", "extractRequestInstanceIdFromURI", "add", "assertEquals", "extractRequestInstanceIdFromURI"]}, "focal_class": {"identifier": "X509CertUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class)", "var_name": "LOGGER"}, {"original_string": "private static final ThreadLocal<StringBuilder> TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256));", "modifier": "private static final", "type": "ThreadLocal<StringBuilder>", "declarator": "TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256))", "var_name": "TLS_BUILDER"}], "methods": [{"identifier": "extractRequestInstanceIdFromURI", "parameters": "(final List<String> uriList)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromURI(final List<String> uriList)", "full_signature": "public static String extractRequestInstanceIdFromURI(final List<String> uriList)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromURI(final List<String> uriList)", "testcase": false, "constructor": false}, {"identifier": "extractItemFromURI", "parameters": "(final List<String> uriList, final String item)", "modifiers": "public static", "return": "String", "signature": "String extractItemFromURI(final List<String> uriList, final String item)", "full_signature": "public static String extractItemFromURI(final List<String> uriList, final String item)", "class_method_signature": "X509CertUtils.extractItemFromURI(final List<String> uriList, final String item)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceIdFromDnsNames", "parameters": "(final List<String> dnsNames)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "full_signature": "public static String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceId", "parameters": "(X509Certificate cert)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceId(X509Certificate cert)", "full_signature": "public static String extractRequestInstanceId(X509Certificate cert)", "class_method_signature": "X509CertUtils.extractRequestInstanceId(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "logCert", "parameters": "(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "modifiers": "public static", "return": "void", "signature": "void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "full_signature": "public static void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "logSSH", "parameters": "(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "modifiers": "public static", "return": "void", "signature": "void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "full_signature": "public static void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "class_method_signature": "X509CertUtils.logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "testcase": false, "constructor": false}, {"identifier": "logRecord", "parameters": "(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "full_signature": "public static String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertUtils.java"}, "focal_method": {"identifier": "extractRequestInstanceIdFromURI", "parameters": "(final List<String> uriList)", "modifiers": "public static", "return": "String", "body": "public static String extractRequestInstanceIdFromURI(final List<String> uriList) {\n\n        for (String uri : uriList) {\n            if (!uri.startsWith(ZTSConsts.ZTS_CERT_INSTANCE_ID_URI)) {\n                continue;\n            }\n            // skip the provider value\n            int idx = uri.substring(ZTSConsts.ZTS_CERT_INSTANCE_ID_URI.length()).indexOf('/');\n            if (idx != -1) {\n                return uri.substring(ZTSConsts.ZTS_CERT_INSTANCE_ID_URI.length() + idx + 1);\n            }\n        }\n\n        return null;\n    }", "signature": "String extractRequestInstanceIdFromURI(final List<String> uriList)", "full_signature": "public static String extractRequestInstanceIdFromURI(final List<String> uriList)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromURI(final List<String> uriList)", "testcase": false, "constructor": false, "invocations": ["startsWith", "indexOf", "substring", "length", "substring", "length"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}