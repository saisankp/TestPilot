{"test_class": {"identifier": "ObjectPropertyUtilsTest", "superclass": "extends ProcessLoggingUnitTest", "interfaces": "", "fields": [{"original_string": "final Logger LOG = LoggerFactory.getLogger(ObjectPropertyUtilsTest.class);", "modifier": "final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ObjectPropertyUtilsTest.class)", "var_name": "LOG"}], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/uif/util/ObjectPropertyUtilsTest.java"}, "test_case": {"identifier": "testCanonicalPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanonicalPath() {\n        String path = \"foo.foo1.foo2\";\n        assertEquals(path, ObjectPropertyUtils.getCanonicalPath(path));\n\n        path = \"foo[1]\";\n        assertEquals(\"foo\", ObjectPropertyUtils.getCanonicalPath(path));\n\n        path = \"foo.foo1['key.nested'].foo2\";\n        assertEquals(\"foo.foo1.foo2\", ObjectPropertyUtils.getCanonicalPath(path));\n\n        path = \"foo.foo1['key.nested'].foo2.foo3['key.nest.nest'].foo4\";\n        assertEquals(\"foo.foo1.foo2.foo3.foo4\", ObjectPropertyUtils.getCanonicalPath(path));\n    }", "signature": "void testCanonicalPath()", "full_signature": "@Test public void testCanonicalPath()", "class_method_signature": "ObjectPropertyUtilsTest.testCanonicalPath()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCanonicalPath", "assertEquals", "getCanonicalPath", "assertEquals", "getCanonicalPath", "assertEquals", "getCanonicalPath"]}, "focal_class": {"identifier": "ObjectPropertyUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(ObjectPropertyUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(ObjectPropertyUtils.class)", "var_name": "LOG"}, {"original_string": "private static final Map<Class<?>, ObjectPropertyMetadata> METADATA_CACHE = Collections\n            .synchronizedMap(new WeakHashMap<Class<?>, ObjectPropertyMetadata>(2048));", "modifier": "private static final", "type": "Map<Class<?>, ObjectPropertyMetadata>", "declarator": "METADATA_CACHE = Collections\n            .synchronizedMap(new WeakHashMap<Class<?>, ObjectPropertyMetadata>(2048))", "var_name": "METADATA_CACHE"}, {"original_string": "private static final SplitPropertyPathEntry SPLIT_PROPERTY_PATH_ENTRY = new SplitPropertyPathEntry();", "modifier": "private static final", "type": "SplitPropertyPathEntry", "declarator": "SPLIT_PROPERTY_PATH_ENTRY = new SplitPropertyPathEntry()", "var_name": "SPLIT_PROPERTY_PATH_ENTRY"}, {"original_string": "private static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}], "methods": [{"identifier": "getPropertyDescriptors", "parameters": "(Class<?> beanClass)", "modifiers": "public static", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> getPropertyDescriptors(Class<?> beanClass)", "full_signature": "public static Map<String, PropertyDescriptor> getPropertyDescriptors(Class<?> beanClass)", "class_method_signature": "ObjectPropertyUtils.getPropertyDescriptors(Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptor", "parameters": "(Class<?> beanClass, String propertyName)", "modifiers": "public static", "return": "PropertyDescriptor", "signature": "PropertyDescriptor getPropertyDescriptor(Class<?> beanClass, String propertyName)", "full_signature": "public static PropertyDescriptor getPropertyDescriptor(Class<?> beanClass, String propertyName)", "class_method_signature": "ObjectPropertyUtils.getPropertyDescriptor(Class<?> beanClass, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "registerPropertyEditors", "parameters": "(PropertyEditorRegistry registry)", "modifiers": "public static", "return": "void", "signature": "void registerPropertyEditors(PropertyEditorRegistry registry)", "full_signature": "public static void registerPropertyEditors(PropertyEditorRegistry registry)", "class_method_signature": "ObjectPropertyUtils.registerPropertyEditors(PropertyEditorRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNames", "parameters": "(Class<?> beanClass)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNames(Class<?> beanClass)", "full_signature": "public static Set<String> getReadablePropertyNames(Class<?> beanClass)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNames(Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getReadMethod", "parameters": "(Class<?> beanClass, String propertyName)", "modifiers": "public static", "return": "Method", "signature": "Method getReadMethod(Class<?> beanClass, String propertyName)", "full_signature": "public static Method getReadMethod(Class<?> beanClass, String propertyName)", "class_method_signature": "ObjectPropertyUtils.getReadMethod(Class<?> beanClass, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getWriteMethod", "parameters": "(Class<?> beanClass, String propertyName)", "modifiers": "public static", "return": "Method", "signature": "Method getWriteMethod(Class<?> beanClass, String propertyName)", "full_signature": "public static Method getWriteMethod(Class<?> beanClass, String propertyName)", "class_method_signature": "ObjectPropertyUtils.getWriteMethod(Class<?> beanClass, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesToObject", "parameters": "(Map<String, String> properties, Object object)", "modifiers": "public static", "return": "void", "signature": "void copyPropertiesToObject(Map<String, String> properties, Object object)", "full_signature": "public static void copyPropertiesToObject(Map<String, String> properties, Object object)", "class_method_signature": "ObjectPropertyUtils.copyPropertiesToObject(Map<String, String> properties, Object object)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Class<?> beanClass, String propertyPath)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPropertyType(Class<?> beanClass, String propertyPath)", "full_signature": "public static Class<?> getPropertyType(Class<?> beanClass, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.getPropertyType(Class<?> beanClass, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Object object, String propertyPath)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPropertyType(Object object, String propertyPath)", "full_signature": "public static Class<?> getPropertyType(Object object, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.getPropertyType(Object object, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByType", "parameters": "(Object bean, Class<?> propertyType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByType(Object bean, Class<?> propertyType)", "full_signature": "public static Set<String> getReadablePropertyNamesByType(Object bean, Class<?> propertyType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByType(Object bean, Class<?> propertyType)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByType", "parameters": "(Class<?> beanClass, Class<?> propertyType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByType(Class<?> beanClass, Class<?> propertyType)", "full_signature": "public static Set<String> getReadablePropertyNamesByType(Class<?> beanClass, Class<?> propertyType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByType(Class<?> beanClass, Class<?> propertyType)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByAnnotationType", "parameters": "(Object bean,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByAnnotationType(Object bean,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static Set<String> getReadablePropertyNamesByAnnotationType(Object bean,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByAnnotationType(Object bean,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByAnnotationType", "parameters": "(\n            Class<?> beanClass, Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByAnnotationType(\n            Class<?> beanClass, Class<? extends Annotation> annotationType)", "full_signature": "public static Set<String> getReadablePropertyNamesByAnnotationType(\n            Class<?> beanClass, Class<? extends Annotation> annotationType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByAnnotationType(\n            Class<?> beanClass, Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByCollectionType", "parameters": "(Object bean, Class<?> collectionType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByCollectionType(Object bean, Class<?> collectionType)", "full_signature": "public static Set<String> getReadablePropertyNamesByCollectionType(Object bean, Class<?> collectionType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByCollectionType(Object bean, Class<?> collectionType)", "testcase": false, "constructor": false}, {"identifier": "getWritablePropertyNames", "parameters": "(Object bean)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getWritablePropertyNames(Object bean)", "full_signature": "public static Set<String> getWritablePropertyNames(Object bean)", "class_method_signature": "ObjectPropertyUtils.getWritablePropertyNames(Object bean)", "testcase": false, "constructor": false}, {"identifier": "getReadablePropertyNamesByCollectionType", "parameters": "(Class<?> beanClass, Class<?> collectionType)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getReadablePropertyNamesByCollectionType(Class<?> beanClass, Class<?> collectionType)", "full_signature": "public static Set<String> getReadablePropertyNamesByCollectionType(Class<?> beanClass, Class<?> collectionType)", "class_method_signature": "ObjectPropertyUtils.getReadablePropertyNamesByCollectionType(Class<?> beanClass, Class<?> collectionType)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(Object object, String propertyPath)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getPropertyValue(Object object, String propertyPath)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getPropertyValue(Object object, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.getPropertyValue(Object object, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValueAsText", "parameters": "(Object bean, String path)", "modifiers": "public static", "return": "String", "signature": "String getPropertyValueAsText(Object bean, String path)", "full_signature": "public static String getPropertyValueAsText(Object bean, String path)", "class_method_signature": "ObjectPropertyUtils.getPropertyValueAsText(Object bean, String path)", "testcase": false, "constructor": false}, {"identifier": "getPropertyEditorRegistry", "parameters": "()", "modifiers": "public static", "return": "PropertyEditorRegistry", "signature": "PropertyEditorRegistry getPropertyEditorRegistry()", "full_signature": "public static PropertyEditorRegistry getPropertyEditorRegistry()", "class_method_signature": "ObjectPropertyUtils.getPropertyEditorRegistry()", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPrimitiveType(Class<?> type)", "full_signature": "public static Class<?> getPrimitiveType(Class<?> type)", "class_method_signature": "ObjectPropertyUtils.getPrimitiveType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getPropertyEditor", "parameters": "(Object bean, String path)", "modifiers": "public static", "return": "PropertyEditor", "signature": "PropertyEditor getPropertyEditor(Object bean, String path)", "full_signature": "public static PropertyEditor getPropertyEditor(Object bean, String path)", "class_method_signature": "ObjectPropertyUtils.getPropertyEditor(Object bean, String path)", "testcase": false, "constructor": false}, {"identifier": "getPropertyEditor", "parameters": "(Class<?> propertyType)", "modifiers": "public static", "return": "PropertyEditor", "signature": "PropertyEditor getPropertyEditor(Class<?> propertyType)", "full_signature": "public static PropertyEditor getPropertyEditor(Class<?> propertyType)", "class_method_signature": "ObjectPropertyUtils.getPropertyEditor(Class<?> propertyType)", "testcase": false, "constructor": false}, {"identifier": "initializeProperty", "parameters": "(Object object, String propertyPath)", "modifiers": "public static", "return": "void", "signature": "void initializeProperty(Object object, String propertyPath)", "full_signature": "public static void initializeProperty(Object object, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.initializeProperty(Object object, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object object, String propertyPath, Object propertyValue)", "modifiers": "public static", "return": "void", "signature": "void setPropertyValue(Object object, String propertyPath, Object propertyValue)", "full_signature": "public static void setPropertyValue(Object object, String propertyPath, Object propertyValue)", "class_method_signature": "ObjectPropertyUtils.setPropertyValue(Object object, String propertyPath, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object object, String propertyPath, Object propertyValue, boolean ignoreUnknown)", "modifiers": "public static", "return": "void", "signature": "void setPropertyValue(Object object, String propertyPath, Object propertyValue, boolean ignoreUnknown)", "full_signature": "public static void setPropertyValue(Object object, String propertyPath, Object propertyValue, boolean ignoreUnknown)", "class_method_signature": "ObjectPropertyUtils.setPropertyValue(Object object, String propertyPath, Object propertyValue, boolean ignoreUnknown)", "testcase": false, "constructor": false}, {"identifier": "isReadableProperty", "parameters": "(Object object, String propertyPath)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReadableProperty(Object object, String propertyPath)", "full_signature": "public static boolean isReadableProperty(Object object, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.isReadableProperty(Object object, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "isWritableProperty", "parameters": "(Object object, String propertyPath)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWritableProperty(Object object, String propertyPath)", "full_signature": "public static boolean isWritableProperty(Object object, String propertyPath)", "class_method_signature": "ObjectPropertyUtils.isWritableProperty(Object object, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(List<Field> fields, Class<?> type, Class<?> stopAt)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields(List<Field> fields, Class<?> type, Class<?> stopAt)", "full_signature": "public static List<Field> getAllFields(List<Field> fields, Class<?> type, Class<?> stopAt)", "class_method_signature": "ObjectPropertyUtils.getAllFields(List<Field> fields, Class<?> type, Class<?> stopAt)", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "(Type type)", "modifiers": "public static", "return": "Type", "signature": "Type getComponentType(Type type)", "full_signature": "public static Type getComponentType(Type type)", "class_method_signature": "ObjectPropertyUtils.getComponentType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getUpperBound", "parameters": "(Type valueType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getUpperBound(Type valueType)", "full_signature": "public static Class<?> getUpperBound(Type valueType)", "class_method_signature": "ObjectPropertyUtils.getUpperBound(Type valueType)", "testcase": false, "constructor": false}, {"identifier": "findGenericType", "parameters": "(Class<?> sourceClass, Class<?> targetClass)", "modifiers": "public static", "return": "Type", "signature": "Type findGenericType(Class<?> sourceClass, Class<?> targetClass)", "full_signature": "public static Type findGenericType(Class<?> sourceClass, Class<?> targetClass)", "class_method_signature": "ObjectPropertyUtils.findGenericType(Class<?> sourceClass, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "rejoinTrailingIndexReference", "parameters": "(List<String> tokenList, String path)", "modifiers": "private static", "return": "void", "signature": "void rejoinTrailingIndexReference(List<String> tokenList, String path)", "full_signature": "private static void rejoinTrailingIndexReference(List<String> tokenList, String path)", "class_method_signature": "ObjectPropertyUtils.rejoinTrailingIndexReference(List<String> tokenList, String path)", "testcase": false, "constructor": false}, {"identifier": "splitPropertyPath", "parameters": "(String path)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitPropertyPath(String path)", "full_signature": "public static String[] splitPropertyPath(String path)", "class_method_signature": "ObjectPropertyUtils.splitPropertyPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getPathTail", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getPathTail(String path)", "full_signature": "public static String getPathTail(String path)", "class_method_signature": "ObjectPropertyUtils.getPathTail(String path)", "testcase": false, "constructor": false}, {"identifier": "removePathTail", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removePathTail(String path)", "full_signature": "public static String removePathTail(String path)", "class_method_signature": "ObjectPropertyUtils.removePathTail(String path)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getCanonicalPath(String path)", "full_signature": "public static String getCanonicalPath(String path)", "class_method_signature": "ObjectPropertyUtils.getCanonicalPath(String path)", "testcase": false, "constructor": false}, {"identifier": "ObjectPropertyUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObjectPropertyUtils()", "full_signature": "private  ObjectPropertyUtils()", "class_method_signature": "ObjectPropertyUtils.ObjectPropertyUtils()", "testcase": false, "constructor": true}, {"identifier": "getReadMethodByName", "parameters": "(Class<?> beanClass, String propertyName)", "modifiers": "private static", "return": "Method", "signature": "Method getReadMethodByName(Class<?> beanClass, String propertyName)", "full_signature": "private static Method getReadMethodByName(Class<?> beanClass, String propertyName)", "class_method_signature": "ObjectPropertyUtils.getReadMethodByName(Class<?> beanClass, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(Class<?> beanClass)", "modifiers": "private static", "return": "ObjectPropertyMetadata", "signature": "ObjectPropertyMetadata getMetadata(Class<?> beanClass)", "full_signature": "private static ObjectPropertyMetadata getMetadata(Class<?> beanClass)", "class_method_signature": "ObjectPropertyUtils.getMetadata(Class<?> beanClass)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/uif/util/ObjectPropertyUtils.java"}, "focal_method": {"identifier": "getCanonicalPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "body": "public static String getCanonicalPath(String path) {\n        if (path == null || path.indexOf('[') == -1) {\n            return path;\n        }\n\n        // The path has at least one left bracket, so will need to be modified\n        // copy it to a mutable StringBuilder\n        StringBuilder pathBuilder = new StringBuilder(path);\n\n        int bracketCount = 0;\n        int leftBracketPos = -1;\n        for (int i = 0; i < pathBuilder.length(); i++) {\n            char c = pathBuilder.charAt(i);\n\n            if (c == '[') {\n                bracketCount++;\n                if (bracketCount == 1)\n                    leftBracketPos = i;\n            }\n\n            if (c == ']') {\n                bracketCount--;\n\n                if (bracketCount < 0) {\n                    throw new IllegalArgumentException(\"Unmatched ']' at \" + i + \" \" + pathBuilder);\n                }\n\n                if (bracketCount == 0) {\n                    pathBuilder.delete(leftBracketPos, i + 1);\n                    i -= i + 1 - leftBracketPos;\n                    leftBracketPos = -1;\n                }\n            }\n        }\n\n        if (bracketCount > 0) {\n            throw new IllegalArgumentException(\"Unmatched '[' at \" + leftBracketPos + \" \" + pathBuilder);\n        }\n\n        return pathBuilder.toString();\n    }", "signature": "String getCanonicalPath(String path)", "full_signature": "public static String getCanonicalPath(String path)", "class_method_signature": "ObjectPropertyUtils.getCanonicalPath(String path)", "testcase": false, "constructor": false, "invocations": ["indexOf", "length", "charAt", "delete", "toString"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}