{"test_class": {"identifier": "SmartsFragmentExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/smarts/src/test/java/org/openscience/cdk/smarts/SmartsFragmentExtractorTest.java"}, "test_case": {"identifier": "indole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void indole() throws Exception {\n        String smarts = generate(\"[nH]1ccc2c1cccc2\",\n                                 SmartsFragmentExtractor.MODE_EXACT,\n                                 makeSeq(0,4));\n        assertThat(smarts, is(\"[nH1v3X3+0][cH1v4X3+0][cH1v4X3+0][cH0v4X3+0]\"));\n    }", "signature": "void indole()", "full_signature": "@Test public void indole()", "class_method_signature": "SmartsFragmentExtractorTest.indole()", "testcase": true, "constructor": false, "invocations": ["generate", "makeSeq", "assertThat", "is"]}, "focal_class": {"identifier": "SmartsFragmentExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MODE_JCOMPOUNDMAPPER = 1;", "modifier": "public static final", "type": "int", "declarator": "MODE_JCOMPOUNDMAPPER = 1", "var_name": "MODE_JCOMPOUNDMAPPER"}, {"original_string": "public static final int MODE_EXACT = 2;", "modifier": "public static final", "type": "int", "declarator": "MODE_EXACT = 2", "var_name": "MODE_EXACT"}, {"original_string": "private final IAtomContainer mol;", "modifier": "private final", "type": "IAtomContainer", "declarator": "mol", "var_name": "mol"}, {"original_string": "private final int[][] atomAdj, bondAdj;", "modifier": "private final", "type": "int[][]", "declarator": "atomAdj", "var_name": "atomAdj"}, {"original_string": "private final int[] deg;", "modifier": "private final", "type": "int[]", "declarator": "deg", "var_name": "deg"}, {"original_string": "private final String[] aexpr;", "modifier": "private final", "type": "String[]", "declarator": "aexpr", "var_name": "aexpr"}, {"original_string": "private final String[] bexpr;", "modifier": "private final", "type": "String[]", "declarator": "bexpr", "var_name": "bexpr"}, {"original_string": "private final int[] avisit;", "modifier": "private final", "type": "int[]", "declarator": "avisit", "var_name": "avisit"}, {"original_string": "private final int[] rbnds;", "modifier": "private final", "type": "int[]", "declarator": "rbnds", "var_name": "rbnds"}, {"original_string": "private final int[] rnums;", "modifier": "private final", "type": "int[]", "declarator": "rnums", "var_name": "rnums"}, {"original_string": "private       int   numVisit;", "modifier": "private", "type": "int", "declarator": "numVisit", "var_name": "numVisit"}, {"original_string": "private int mode = MODE_EXACT;", "modifier": "private", "type": "int", "declarator": "mode = MODE_EXACT", "var_name": "mode"}], "methods": [{"identifier": "SmartsFragmentExtractor", "parameters": "(IAtomContainer mol)", "modifiers": "public", "return": "", "signature": " SmartsFragmentExtractor(IAtomContainer mol)", "full_signature": "public  SmartsFragmentExtractor(IAtomContainer mol)", "class_method_signature": "SmartsFragmentExtractor.SmartsFragmentExtractor(IAtomContainer mol)", "testcase": false, "constructor": true}, {"identifier": "setMode", "parameters": "(int mode)", "modifiers": "public", "return": "void", "signature": "void setMode(int mode)", "full_signature": "public void setMode(int mode)", "class_method_signature": "SmartsFragmentExtractor.setMode(int mode)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(int[] atomIdxs)", "modifiers": "public", "return": "String", "signature": "String generate(int[] atomIdxs)", "full_signature": "public String generate(int[] atomIdxs)", "class_method_signature": "SmartsFragmentExtractor.generate(int[] atomIdxs)", "testcase": false, "constructor": false}, {"identifier": "markRings", "parameters": "(int idx, int bprev)", "modifiers": "private", "return": "void", "signature": "void markRings(int idx, int bprev)", "full_signature": "private void markRings(int idx, int bprev)", "class_method_signature": "SmartsFragmentExtractor.markRings(int idx, int bprev)", "testcase": false, "constructor": false}, {"identifier": "encodeExpr", "parameters": "(int idx, int bprev, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void encodeExpr(int idx, int bprev, StringBuilder sb)", "full_signature": "private void encodeExpr(int idx, int bprev, StringBuilder sb)", "class_method_signature": "SmartsFragmentExtractor.encodeExpr(int idx, int bprev, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "chooseRingNumber", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int chooseRingNumber()", "full_signature": "private int chooseRingNumber()", "class_method_signature": "SmartsFragmentExtractor.chooseRingNumber()", "testcase": false, "constructor": false}, {"identifier": "releaseRingNumber", "parameters": "(int rnum)", "modifiers": "private", "return": "void", "signature": "void releaseRingNumber(int rnum)", "full_signature": "private void releaseRingNumber(int rnum)", "class_method_signature": "SmartsFragmentExtractor.releaseRingNumber(int rnum)", "testcase": false, "constructor": false}, {"identifier": "encodeAtomExpr", "parameters": "(int atmIdx)", "modifiers": "private", "return": "String", "signature": "String encodeAtomExpr(int atmIdx)", "full_signature": "private String encodeAtomExpr(int atmIdx)", "class_method_signature": "SmartsFragmentExtractor.encodeAtomExpr(int atmIdx)", "testcase": false, "constructor": false}, {"identifier": "encodeBondExpr", "parameters": "(int bondIdx, int beg, int end)", "modifiers": "private", "return": "String", "signature": "String encodeBondExpr(int bondIdx, int beg, int end)", "full_signature": "private String encodeBondExpr(int bondIdx, int beg, int end)", "class_method_signature": "SmartsFragmentExtractor.encodeBondExpr(int bondIdx, int beg, int end)", "testcase": false, "constructor": false}], "file": "tool/smarts/src/main/java/org/openscience/cdk/smarts/SmartsFragmentExtractor.java"}, "focal_method": {"identifier": "generate", "parameters": "(int[] atomIdxs)", "modifiers": "public", "return": "String", "body": "public String generate(int[] atomIdxs) {\n\n        if (atomIdxs == null)\n            throw new NullPointerException(\"No atom indexes provided\");\n        if (atomIdxs.length == 0)\n            return null; // makes sense?\n\n        // special case\n        if (atomIdxs.length == 1 && mode == MODE_EXACT)\n            return aexpr[atomIdxs[0]];\n\n        // initialize traversal information\n        Arrays.fill(rbnds, 0);\n        Arrays.fill(avisit, 0);\n        for (int atmIdx : atomIdxs)\n            avisit[atmIdx] = -1;\n\n        // first visit marks ring information\n        numVisit = 1;\n        for (int atomIdx : atomIdxs) {\n            if (avisit[atomIdx] < 0)\n                markRings(atomIdx, -1);\n        }\n\n        // reset visit flags and generate\n        numVisit = 1;\n        for (int atmIdx : atomIdxs)\n            avisit[atmIdx] = -1;\n\n        // second pass builds the expression\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < atomIdxs.length; i++) {\n            if (avisit[atomIdxs[i]] < 0) {\n                if (i > 0) sb.append('.');\n                encodeExpr(atomIdxs[i], -1, sb);\n            }\n        }\n\n        return sb.toString();\n    }", "signature": "String generate(int[] atomIdxs)", "full_signature": "public String generate(int[] atomIdxs)", "class_method_signature": "SmartsFragmentExtractor.generate(int[] atomIdxs)", "testcase": false, "constructor": false, "invocations": ["fill", "fill", "markRings", "append", "encodeExpr", "toString"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}