{"test_class": {"identifier": "EntityOwnershipListenerActorTest", "superclass": "extends AbstractEntityOwnershipTest", "interfaces": "", "fields": [{"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipListenerActorTest.java"}, "test_case": {"identifier": "testOnEntityOwnershipChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnEntityOwnershipChanged() {\n        DOMEntityOwnershipListener mockListener = mock(DOMEntityOwnershipListener.class);\n\n        TestActorRef<EntityOwnershipListenerActor> listenerActor = actorFactory.createTestActor(\n                EntityOwnershipListenerActor.props(mockListener), actorFactory.generateActorId(\"listener\"));\n\n        DOMEntity entity = new DOMEntity(\"test\", YangInstanceIdentifier.of(QName.create(\"test\", \"id1\")));\n        boolean wasOwner = false;\n        boolean isOwner = true;\n        boolean hasOwner = true;\n        listenerActor.tell(new DOMEntityOwnershipChange(entity, EntityOwnershipChangeState.from(\n                wasOwner, isOwner, hasOwner)), ActorRef.noSender());\n\n        verify(mockListener, timeout(5000)).ownershipChanged(ownershipChange(entity, wasOwner, isOwner, hasOwner));\n    }", "signature": "void testOnEntityOwnershipChanged()", "full_signature": "@Test public void testOnEntityOwnershipChanged()", "class_method_signature": "EntityOwnershipListenerActorTest.testOnEntityOwnershipChanged()", "testcase": true, "constructor": false, "invocations": ["mock", "createTestActor", "props", "generateActorId", "of", "create", "tell", "from", "noSender", "ownershipChanged", "verify", "timeout", "ownershipChange"]}, "focal_class": {"identifier": "EntityOwnershipListenerActor", "superclass": "extends AbstractUntypedActor", "interfaces": "", "fields": [{"original_string": "private final DOMEntityOwnershipListener listener;", "modifier": "private final", "type": "DOMEntityOwnershipListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "EntityOwnershipListenerActor", "parameters": "(final DOMEntityOwnershipListener listener)", "modifiers": "private", "return": "", "signature": " EntityOwnershipListenerActor(final DOMEntityOwnershipListener listener)", "full_signature": "private  EntityOwnershipListenerActor(final DOMEntityOwnershipListener listener)", "class_method_signature": "EntityOwnershipListenerActor.EntityOwnershipListenerActor(final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": true}, {"identifier": "handleReceive", "parameters": "(final Object message)", "modifiers": "@Override protected", "return": "void", "signature": "void handleReceive(final Object message)", "full_signature": "@Override protected void handleReceive(final Object message)", "class_method_signature": "EntityOwnershipListenerActor.handleReceive(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onEntityOwnershipChanged", "parameters": "(final DOMEntityOwnershipChange change)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "class_method_signature": "EntityOwnershipListenerActor.onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "testcase": false, "constructor": false}, {"identifier": "props", "parameters": "(final DOMEntityOwnershipListener listener)", "modifiers": "static", "return": "Props", "signature": "Props props(final DOMEntityOwnershipListener listener)", "full_signature": "static Props props(final DOMEntityOwnershipListener listener)", "class_method_signature": "EntityOwnershipListenerActor.props(final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipListenerActor.java"}, "focal_method": {"identifier": "onEntityOwnershipChanged", "parameters": "(final DOMEntityOwnershipChange change)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "body": "@SuppressWarnings(\"checkstyle:IllegalCatch\")\n    private void onEntityOwnershipChanged(final DOMEntityOwnershipChange change) {\n        LOG.debug(\"Notifying EntityOwnershipListener {}: {}\", listener, change);\n\n        try {\n            listener.ownershipChanged(change);\n        } catch (Exception e) {\n            LOG.error(\"Error notifying listener {}\", listener, e);\n        }\n    }", "signature": "void onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "class_method_signature": "EntityOwnershipListenerActor.onEntityOwnershipChanged(final DOMEntityOwnershipChange change)", "testcase": false, "constructor": false, "invocations": ["debug", "ownershipChanged", "error"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}