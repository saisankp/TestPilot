{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "orbisgis-commons/src/test/java/org/orbisgis/commons/utils/FileUtilsTest.java"}, "test_case": {"identifier": "testNameForURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testNameForURI() {\n                File f = new File(\"/home/me/toto.shp\");\n                assertEquals(\"toto\", FileUtils.getNameFromURI(f.toURI()));\n                \n                URI u = URI.create(\"http://toto.com/wms?hello=toto&tableName=mytable\");\n                assertEquals(\"mytable\", FileUtils.getNameFromURI(u));\n                \n                URI exoticURI = URI.create(\"pgsql://poulpe.heig-vd.ch:5432/scapdata/g4districts98\");\n                assertEquals(\"g4districts98\", FileUtils.getNameFromURI(exoticURI));\n                \n                URI uJDBC = URI.create(\"postgresql://127.0.0.1:5432/gisdb?user=postgres&password=postgres&schema=gis_schema&table=bat\");\n                assertEquals(\"bat\", FileUtils.getNameFromURI(uJDBC));\n                \n                u = URI.create(\"jdbc://toto.com:4567/mydb?tableName=helloworld\");\n                assertEquals(\"helloworld\", FileUtils.getNameFromURI(u));\n\n                u = URI.create(\"jdbc:h2:/home/user/OrbisGIS/database?catalog=&schema=&table=LANDCOVER2000\");\n                assertEquals(\"LANDCOVER2000\", FileUtils.getNameFromURI(u));\n\n                u = URI.create(\"../src/test/resources/data/landcover2000.shp\");\n                assertEquals(\"landcover2000.shp\", FileUtils.getNameFromURI(u));\n        }", "signature": "void testNameForURI()", "full_signature": "@Test public void testNameForURI()", "class_method_signature": "FileUtilsTest.testNameForURI()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNameFromURI", "toURI", "create", "assertEquals", "getNameFromURI", "create", "assertEquals", "getNameFromURI", "create", "assertEquals", "getNameFromURI", "create", "assertEquals", "getNameFromURI", "create", "assertEquals", "getNameFromURI", "create", "assertEquals", "getNameFromURI"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BUF_SIZE = 1024 * 64;", "modifier": "private static final", "type": "int", "declarator": "BUF_SIZE = 1024 * 64", "var_name": "BUF_SIZE"}, {"original_string": "private static final String TABLE_PARAM = \"tablename=\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_PARAM = \"tablename=\"", "var_name": "TABLE_PARAM"}, {"original_string": "private static final String TABLE_PARAM_JDBC = \"table=\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_PARAM_JDBC = \"table=\"", "var_name": "TABLE_PARAM_JDBC"}], "methods": [{"identifier": "copyDirsRecursively", "parameters": "(File sourceDir, File destDir)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void copyDirsRecursively(File sourceDir, File destDir)", "full_signature": "@Deprecated public static void copyDirsRecursively(File sourceDir, File destDir)", "class_method_signature": "FileUtils.copyDirsRecursively(File sourceDir, File destDir)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(File file)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean deleteFile(File file)", "full_signature": "@Deprecated public static boolean deleteFile(File file)", "class_method_signature": "FileUtils.deleteFile(File file)", "testcase": false, "constructor": false}, {"identifier": "deleteSHPFiles", "parameters": "(File fileShp)", "modifiers": "public static", "return": "void", "signature": "void deleteSHPFiles(File fileShp)", "full_signature": "public static void deleteSHPFiles(File fileShp)", "class_method_signature": "FileUtils.deleteSHPFiles(File fileShp)", "testcase": false, "constructor": false}, {"identifier": "deleteFileInDir", "parameters": "(File dir)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean deleteFileInDir(File dir)", "full_signature": "@Deprecated public static boolean deleteFileInDir(File dir)", "class_method_signature": "FileUtils.deleteFileInDir(File dir)", "testcase": false, "constructor": false}, {"identifier": "deleteDir", "parameters": "(File dir)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean deleteDir(File dir)", "full_signature": "@Deprecated public static boolean deleteDir(File dir)", "class_method_signature": "FileUtils.deleteDir(File dir)", "testcase": false, "constructor": false}, {"identifier": "copyFileToDirectory", "parameters": "(File file, File destDir)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void copyFileToDirectory(File file, File destDir)", "full_signature": "@Deprecated public static void copyFileToDirectory(File file, File destDir)", "class_method_signature": "FileUtils.copyFileToDirectory(File file, File destDir)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File input, File output)", "modifiers": "@Deprecated public static", "return": "long", "signature": "long copy(File input, File output)", "full_signature": "@Deprecated public static long copy(File input, File output)", "class_method_signature": "FileUtils.copy(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File input, File output, byte[] copyBuffer)", "modifiers": "@Deprecated public static", "return": "long", "signature": "long copy(File input, File output, byte[] copyBuffer)", "full_signature": "@Deprecated public static long copy(File input, File output, byte[] copyBuffer)", "class_method_signature": "FileUtils.copy(File input, File output, byte[] copyBuffer)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(InputStream in, File outputFile)", "modifiers": "@Deprecated public static", "return": "long", "signature": "long copy(InputStream in, File outputFile)", "full_signature": "@Deprecated public static long copy(InputStream in, File outputFile)", "class_method_signature": "FileUtils.copy(InputStream in, File outputFile)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(InputStream in, OutputStream out)", "modifiers": "@Deprecated public static", "return": "long", "signature": "long copy(InputStream in, OutputStream out)", "full_signature": "@Deprecated public static long copy(InputStream in, OutputStream out)", "class_method_signature": "FileUtils.copy(InputStream in, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(InputStream in, OutputStream out, byte[] copyBuffer)", "modifiers": "@Deprecated public static", "return": "long", "signature": "long copy(InputStream in, OutputStream out, byte[] copyBuffer)", "full_signature": "@Deprecated public static long copy(InputStream in, OutputStream out, byte[] copyBuffer)", "class_method_signature": "FileUtils.copy(InputStream in, OutputStream out, byte[] copyBuffer)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(URL url, File file)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void download(URL url, File file)", "full_signature": "@Deprecated public static void download(URL url, File file)", "class_method_signature": "FileUtils.download(URL url, File file)", "testcase": false, "constructor": false}, {"identifier": "zip", "parameters": "(File toZip, File outFile)", "modifiers": "public static", "return": "void", "signature": "void zip(File toZip, File outFile)", "full_signature": "public static void zip(File toZip, File outFile)", "class_method_signature": "FileUtils.zip(File toZip, File outFile)", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "(File zipFile, File destDir)", "modifiers": "public static", "return": "void", "signature": "void unzip(File zipFile, File destDir)", "full_signature": "public static void unzip(File zipFile, File destDir)", "class_method_signature": "FileUtils.unzip(File zipFile, File destDir)", "testcase": false, "constructor": false}, {"identifier": "getRelativePath", "parameters": "(File base, File file)", "modifiers": "public static", "return": "String", "signature": "String getRelativePath(File base, File file)", "full_signature": "public static String getRelativePath(File base, File file)", "class_method_signature": "FileUtils.getRelativePath(File base, File file)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(File file)", "modifiers": "@Deprecated public static", "return": "byte[]", "signature": "byte[] getContent(File file)", "full_signature": "@Deprecated public static byte[] getContent(File file)", "class_method_signature": "FileUtils.getContent(File file)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(InputStream fis)", "modifiers": "@Deprecated public static", "return": "byte[]", "signature": "byte[] getContent(InputStream fis)", "full_signature": "@Deprecated public static byte[] getContent(InputStream fis)", "class_method_signature": "FileUtils.getContent(InputStream fis)", "testcase": false, "constructor": false}, {"identifier": "getMD5", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getMD5(File file)", "full_signature": "public static byte[] getMD5(File file)", "class_method_signature": "FileUtils.getMD5(File file)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] messageDigest)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String toHexString(byte[] messageDigest)", "full_signature": "@Deprecated public static String toHexString(byte[] messageDigest)", "class_method_signature": "FileUtils.toHexString(byte[] messageDigest)", "testcase": false, "constructor": false}, {"identifier": "setContents", "parameters": "(File file, String content)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void setContents(File file, String content)", "full_signature": "@Deprecated public static void setContents(File file, String content)", "class_method_signature": "FileUtils.setContents(File file, String content)", "testcase": false, "constructor": false}, {"identifier": "getFileNameWithoutExtensionU", "parameters": "(File file)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String getFileNameWithoutExtensionU(File file)", "full_signature": "@Deprecated public static String getFileNameWithoutExtensionU(File file)", "class_method_signature": "FileUtils.getFileNameWithoutExtensionU(File file)", "testcase": false, "constructor": false}, {"identifier": "getFileWithExtension", "parameters": "(File file, final String extension)", "modifiers": "public static", "return": "File", "signature": "File getFileWithExtension(File file, final String extension)", "full_signature": "public static File getFileWithExtension(File file, final String extension)", "class_method_signature": "FileUtils.getFileWithExtension(File file, final String extension)", "testcase": false, "constructor": false}, {"identifier": "getNameFromURI", "parameters": "(URI u)", "modifiers": "public static", "return": "String", "signature": "String getNameFromURI(URI u)", "full_signature": "public static String getNameFromURI(URI u)", "class_method_signature": "FileUtils.getNameFromURI(URI u)", "testcase": false, "constructor": false}, {"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}], "file": "orbisgis-commons/src/main/java/org/orbisgis/commons/utils/FileUtils.java"}, "focal_method": {"identifier": "getNameFromURI", "parameters": "(URI u)", "modifiers": "public static", "return": "String", "body": "public static String getNameFromURI(URI u) {\n                if (\"file\".equalsIgnoreCase(u.getScheme())) {\n                        return FilenameUtils.removeExtension(new File(u.getPath()).getName());\n                } else {\n                        if(\"jdbc\".equalsIgnoreCase(u.getScheme())) {\n                            try {\n                                u = URI.create(u.getSchemeSpecificPart());\n                            } catch (IllegalArgumentException ex) {\n                                //Ignore\n                            }\n                        }\n                        String q = u.getQuery();\n                        if (q != null && !q.isEmpty()) {\n                                // With & parameters\n                                String[] pat = q.split(\"&\");\n                                for (String aPat : pat) {\n                                    if (aPat.toLowerCase().startsWith(TABLE_PARAM)) {\n                                        // Extract Table name\n                                        return aPat.substring(TABLE_PARAM.length());\n                                    } else if (aPat.toLowerCase().startsWith(TABLE_PARAM_JDBC)) {\n                                        // Extract Table name\n                                        return aPat.substring(TABLE_PARAM_JDBC.length());\n                                    }\n                                }\n                        }\n                        String path = u.getPath();\n                        if (path != null && !path.isEmpty()) {\n                                String[] paths = path.split(\"/\");\n                                if(paths.length>=1) {\n                                        if(!paths[paths.length-1].isEmpty()) {\n                                                return paths[paths.length-1];\n                                        }\n                                }\n                        }\n                        \n                }\n                \n                throw new UnsupportedOperationException();\n        }", "signature": "String getNameFromURI(URI u)", "full_signature": "public static String getNameFromURI(URI u)", "class_method_signature": "FileUtils.getNameFromURI(URI u)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getScheme", "removeExtension", "getName", "getPath", "equalsIgnoreCase", "getScheme", "create", "getSchemeSpecificPart", "getQuery", "isEmpty", "split", "startsWith", "toLowerCase", "substring", "length", "startsWith", "toLowerCase", "substring", "length", "getPath", "isEmpty", "split", "isEmpty"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}