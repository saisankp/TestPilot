{"test_class": {"identifier": "NameParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/media/core/server-impl/src/test/java/org/mobicents/media/server/impl/naming/NameParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() {\n        String name = \"/media/aap/[1..100]\";\n        NameParser parser = new NameParser();\n        Collection<NameToken> tokens = parser.parse(name);\n        assertEquals(3, tokens.size());\n        \n        Iterator<NameToken> it = tokens.iterator();\n        NameToken t = it.next();\n        \n        assertEquals(true, t instanceof FixedToken);\n        \n        t = it.next();\n        assertEquals(true, t instanceof FixedToken);\n        \n        t = it.next();\n        assertEquals(true, t instanceof NumericRange);\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "NameParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "iterator", "next", "assertEquals", "next", "assertEquals", "next", "assertEquals"]}, "focal_class": {"identifier": "NameParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(String name)", "modifiers": "public", "return": "Collection<NameToken>", "signature": "Collection<NameToken> parse(String name)", "full_signature": "public Collection<NameToken> parse(String name)", "class_method_signature": "NameParser.parse(String name)", "testcase": false, "constructor": false}], "file": "servers/media/core/server-impl/src/main/java/org/mobicents/media/server/impl/naming/NameParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String name)", "modifiers": "public", "return": "Collection<NameToken>", "body": "public Collection<NameToken> parse(String name) {\n        ArrayList<NameToken> list = new ArrayList();\n        String[] parts = name.split(\"/\");        \n        for (String part: parts) {\n            part = part.trim();\n            \n            if (part.length() == 0) {\n                continue;\n            }\n            \n            if (part.startsWith(\"[\")) {\n                list.add(new NumericRange(part));\n            } else {\n                list.add(new FixedToken(part));\n            }\n            //FIXME: include text ranges\n        }\n        return list;\n    }", "signature": "Collection<NameToken> parse(String name)", "full_signature": "public Collection<NameToken> parse(String name)", "class_method_signature": "NameParser.parse(String name)", "testcase": false, "constructor": false, "invocations": ["split", "trim", "length", "startsWith", "add", "add"]}, "repository": {"repo_id": 128294, "url": "https://github.com/deruelle/mobicents", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 17, "size": 347121, "license": "licensed"}}