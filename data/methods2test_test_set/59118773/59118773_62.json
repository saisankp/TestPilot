{"test_class": {"identifier": "FrequentTenderersControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FrequentTenderersController frequentTenderersController;", "modifier": "@Autowired\n    private", "type": "FrequentTenderersController", "declarator": "frequentTenderersController", "var_name": "frequentTenderersController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/FrequentTenderersControllerTest.java"}, "test_case": {"identifier": "activeAwardsCountTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void activeAwardsCountTest() throws Exception {\n        final List<Document> frequentTenderers = frequentTenderersController\n                .activeAwardsCount(new YearFilterPagingRequest());\n\n        Assert.assertEquals(2, frequentTenderers.size());\n        Assert.assertEquals(1, frequentTenderers.get(0).get(\"cnt\"));\n        Assert.assertEquals(1, frequentTenderers.get(1).get(\"cnt\"));\n    }", "signature": "void activeAwardsCountTest()", "full_signature": "@Test public void activeAwardsCountTest()", "class_method_signature": "FrequentTenderersControllerTest.activeAwardsCountTest()", "testcase": true, "constructor": false, "invocations": ["activeAwardsCount", "assertEquals", "size", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "FrequentTenderersController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "frequentTenderers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "activeAwardsCount", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/FrequentTenderersController.java"}, "focal_method": {"identifier": "activeAwardsCount", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \"\n            + \"This assumes there is only  one active award, which always seems to be the case, per tender. \")\n    @RequestMapping(value = \"/api/activeAwardsCount\",\n            method = {RequestMethod.POST, RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                unwind(\"awards\"),\n                match(where(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter.awardFiltering(),\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                unwind(\"awards.suppliers\"),\n                group(MongoConstants.FieldNames.AWARDS_SUPPLIERS_ID).count().as(\"cnt\"),\n                project(\"cnt\").and(Fields.UNDERSCORE_ID).as(\"supplierId\")\n                        .andExclude(Fields.UNDERSCORE_ID)\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["newAggregation", "match", "andOperator", "is", "where", "toString", "getYearDefaultFilterCriteria", "unwind", "match", "andOperator", "is", "where", "toString", "getYearDefaultFilterCriteria", "awardFiltering", "unwind", "as", "count", "group", "andExclude", "as", "and", "project", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}