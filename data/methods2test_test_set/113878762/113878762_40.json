{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "migration/third-party/org.mapdb/src/test/java/org/mapdb/UtilsTest.java"}, "test_case": {"identifier": "testArrayPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testArrayPut(){\n        assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{1, 2, 4, 5}, 2, 3)));\n        assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{2, 3, 4, 5}, 0, 1)));\n        assertEquals(asList(1,2,3,4,5), asList(Utils.arrayPut(new Integer[]{1, 2, 3, 4}, 4, 5)));\n    }", "signature": "void testArrayPut()", "full_signature": "@Test public void testArrayPut()", "class_method_signature": "UtilsTest.testArrayPut()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "asList", "asList", "arrayPut", "assertEquals", "asList", "asList", "arrayPut", "assertEquals", "asList", "asList", "arrayPut"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = Logger.getLogger(\"JDBM\");", "modifier": "static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(\"JDBM\")", "var_name": "LOG"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final Comparator<Comparable> COMPARABLE_COMPARATOR = new Comparator<Comparable>() {\n        @Override\n        public int compare(Comparable o1, Comparable o2) {\n            return o1.compareTo(o2);\n        }\n    };", "modifier": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final", "type": "Comparator<Comparable>", "declarator": "COMPARABLE_COMPARATOR = new Comparator<Comparable>() {\n        @Override\n        public int compare(Comparable o1, Comparable o2) {\n            return o1.compareTo(o2);\n        }\n    }", "var_name": "COMPARABLE_COMPARATOR"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final Comparator<Comparable> COMPARABLE_COMPARATOR_WITH_NULLS = new Comparator<Comparable>() {\n        @Override\n        public int compare(Comparable o1, Comparable o2) {\n            return o1 == null && o2 != null ? -1 : (o1 != null && o2 == null ? 1 : o1.compareTo(o2));\n        }\n    };", "modifier": "@SuppressWarnings(\"rawtypes\")\n\tpublic static final", "type": "Comparator<Comparable>", "declarator": "COMPARABLE_COMPARATOR_WITH_NULLS = new Comparator<Comparable>() {\n        @Override\n        public int compare(Comparable o1, Comparable o2) {\n            return o1 == null && o2 != null ? -1 : (o1 != null && o2 == null ? 1 : o1.compareTo(o2));\n        }\n    }", "var_name": "COMPARABLE_COMPARATOR_WITH_NULLS"}, {"original_string": "public static final String EMPTY_STRING = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "public static final String UTF8 = \"UTF8\";", "modifier": "public static final", "type": "String", "declarator": "UTF8 = \"UTF8\"", "var_name": "UTF8"}, {"original_string": "public static Random RANDOM = new Random();", "modifier": "public static", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "private static boolean collectionAsMapValueLogged = false;", "modifier": "private static", "type": "boolean", "declarator": "collectionAsMapValueLogged = false", "var_name": "collectionAsMapValueLogged"}], "methods": [{"identifier": "packLong", "parameters": "(DataOutput out, long value)", "modifiers": "static public", "return": "void", "signature": "void packLong(DataOutput out, long value)", "full_signature": "static public void packLong(DataOutput out, long value)", "class_method_signature": "Utils.packLong(DataOutput out, long value)", "testcase": false, "constructor": false}, {"identifier": "unpackLong", "parameters": "(DataInput in)", "modifiers": "static public", "return": "long", "signature": "long unpackLong(DataInput in)", "full_signature": "static public long unpackLong(DataInput in)", "class_method_signature": "Utils.unpackLong(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "packInt", "parameters": "(DataOutput in, int value)", "modifiers": "static public", "return": "void", "signature": "void packInt(DataOutput in, int value)", "full_signature": "static public void packInt(DataOutput in, int value)", "class_method_signature": "Utils.packInt(DataOutput in, int value)", "testcase": false, "constructor": false}, {"identifier": "unpackInt", "parameters": "(DataInput is)", "modifiers": "static public", "return": "int", "signature": "int unpackInt(DataInput is)", "full_signature": "static public int unpackInt(DataInput is)", "class_method_signature": "Utils.unpackInt(DataInput is)", "testcase": false, "constructor": false}, {"identifier": "longHash", "parameters": "(final long key)", "modifiers": "public static", "return": "int", "signature": "int longHash(final long key)", "full_signature": "public static int longHash(final long key)", "class_method_signature": "Utils.longHash(final long key)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(E value, Serializer<E> serializer)", "modifiers": "public static", "return": "E", "signature": "E clone(E value, Serializer<E> serializer)", "full_signature": "public static E clone(E value, Serializer<E> serializer)", "class_method_signature": "Utils.clone(E value, Serializer<E> serializer)", "testcase": false, "constructor": false}, {"identifier": "arrayPut", "parameters": "(final Object[] array, final int pos, final Object value)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] arrayPut(final Object[] array, final int pos, final Object value)", "full_signature": "public static Object[] arrayPut(final Object[] array, final int pos, final Object value)", "class_method_signature": "Utils.arrayPut(final Object[] array, final int pos, final Object value)", "testcase": false, "constructor": false}, {"identifier": "arrayLongPut", "parameters": "(final long[] array, final int pos, final long value)", "modifiers": "public static", "return": "long[]", "signature": "long[] arrayLongPut(final long[] array, final int pos, final long value)", "full_signature": "public static long[] arrayLongPut(final long[] array, final int pos, final long value)", "class_method_signature": "Utils.arrayLongPut(final long[] array, final int pos, final long value)", "testcase": false, "constructor": false}, {"identifier": "nextPowTwo", "parameters": "(final int value)", "modifiers": "public static", "return": "int", "signature": "int nextPowTwo(final int value)", "full_signature": "public static int nextPowTwo(final int value)", "class_method_signature": "Utils.nextPowTwo(final int value)", "testcase": false, "constructor": false}, {"identifier": "tempDbFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File tempDbFile()", "full_signature": "public static File tempDbFile()", "class_method_signature": "Utils.tempDbFile()", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "public static boolean isWindows()", "class_method_signature": "Utils.isWindows()", "testcase": false, "constructor": false}, {"identifier": "isAndroid", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAndroid()", "full_signature": "public static boolean isAndroid()", "class_method_signature": "Utils.isAndroid()", "testcase": false, "constructor": false}, {"identifier": "JVMSupportsLargeMappedFiles", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean JVMSupportsLargeMappedFiles()", "full_signature": "public static boolean JVMSupportsLargeMappedFiles()", "class_method_signature": "Utils.JVMSupportsLargeMappedFiles()", "testcase": false, "constructor": false}, {"identifier": "checkMapValueIsNotCollecion", "parameters": "(Object value)", "modifiers": "public static", "return": "void", "signature": "void checkMapValueIsNotCollecion(Object value)", "full_signature": "public static void checkMapValueIsNotCollecion(Object value)", "class_method_signature": "Utils.checkMapValueIsNotCollecion(Object value)", "testcase": false, "constructor": false}, {"identifier": "printProgress", "parameters": "(final AtomicLong value)", "modifiers": "public static", "return": "void", "signature": "void printProgress(final AtomicLong value)", "full_signature": "public static void printProgress(final AtomicLong value)", "class_method_signature": "Utils.printProgress(final AtomicLong value)", "testcase": false, "constructor": false}, {"identifier": "serializer", "parameters": "(Serializer<A> serializer, A value)", "modifiers": "public static", "return": "DataOutput2", "signature": "DataOutput2 serializer(Serializer<A> serializer, A value)", "full_signature": "public static DataOutput2 serializer(Serializer<A> serializer, A value)", "class_method_signature": "Utils.serializer(Serializer<A> serializer, A value)", "testcase": false, "constructor": false}], "file": "migration/third-party/org.mapdb/src/main/java/org/mapdb/Utils.java"}, "focal_method": {"identifier": "arrayPut", "parameters": "(final Object[] array, final int pos, final Object value)", "modifiers": "public static", "return": "Object[]", "body": "public static Object[] arrayPut(final Object[] array, final int pos, final Object value){\n        final Object[] ret = Arrays.copyOf(array, array.length+1);\n        if(pos<array.length){\n            System.arraycopy(array, pos, ret, pos+1, array.length-pos);\n        }\n        ret[pos] = value;\n        return ret;\n    }", "signature": "Object[] arrayPut(final Object[] array, final int pos, final Object value)", "full_signature": "public static Object[] arrayPut(final Object[] array, final int pos, final Object value)", "class_method_signature": "Utils.arrayPut(final Object[] array, final int pos, final Object value)", "testcase": false, "constructor": false, "invocations": ["copyOf", "arraycopy"]}, "repository": {"repo_id": 113878762, "url": "https://github.com/crossminer/scava", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 16, "size": 1903904, "license": "licensed"}}