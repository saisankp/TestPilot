{"test_class": {"identifier": "MolecularFormulaRangeTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/MolecularFormulaRangeTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClone() throws Exception {\n        MolecularFormulaRange mfRange = new MolecularFormulaRange();\n        Object clone = mfRange.clone();\n        Assert.assertTrue(clone instanceof MolecularFormulaRange);\n        Assert.assertEquals(mfRange.getIsotopeCount(), ((MolecularFormulaRange) clone).getIsotopeCount());\n\n    }", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "MolecularFormulaRangeTest.testClone()", "testcase": true, "constructor": false, "invocations": ["clone", "assertTrue", "assertEquals", "getIsotopeCount", "getIsotopeCount"]}, "focal_class": {"identifier": "MolecularFormulaRange", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "private Map<IIsotope, Integer> isotopesMax;", "modifier": "private", "type": "Map<IIsotope, Integer>", "declarator": "isotopesMax", "var_name": "isotopesMax"}, {"original_string": "private Map<IIsotope, Integer> isotopesMin;", "modifier": "private", "type": "Map<IIsotope, Integer>", "declarator": "isotopesMin", "var_name": "isotopesMin"}], "methods": [{"identifier": "MolecularFormulaRange", "parameters": "()", "modifiers": "public", "return": "", "signature": " MolecularFormulaRange()", "full_signature": "public  MolecularFormulaRange()", "class_method_signature": "MolecularFormulaRange.MolecularFormulaRange()", "testcase": false, "constructor": true}, {"identifier": "addIsotope", "parameters": "(IIsotope isotope, int countMin, int countMax)", "modifiers": "public", "return": "void", "signature": "void addIsotope(IIsotope isotope, int countMin, int countMax)", "full_signature": "public void addIsotope(IIsotope isotope, int countMin, int countMax)", "class_method_signature": "MolecularFormulaRange.addIsotope(IIsotope isotope, int countMin, int countMax)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IIsotope isotope)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(IIsotope isotope)", "full_signature": "public boolean contains(IIsotope isotope)", "class_method_signature": "MolecularFormulaRange.contains(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCountMax", "parameters": "(IIsotope isotope)", "modifiers": "public", "return": "int", "signature": "int getIsotopeCountMax(IIsotope isotope)", "full_signature": "public int getIsotopeCountMax(IIsotope isotope)", "class_method_signature": "MolecularFormulaRange.getIsotopeCountMax(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCountMin", "parameters": "(IIsotope isotope)", "modifiers": "public", "return": "int", "signature": "int getIsotopeCountMin(IIsotope isotope)", "full_signature": "public int getIsotopeCountMin(IIsotope isotope)", "class_method_signature": "MolecularFormulaRange.getIsotopeCountMin(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIsotopeCount()", "full_signature": "public int getIsotopeCount()", "class_method_signature": "MolecularFormulaRange.getIsotopeCount()", "testcase": false, "constructor": false}, {"identifier": "getIsotope", "parameters": "(IIsotope isotope)", "modifiers": "private", "return": "IIsotope", "signature": "IIsotope getIsotope(IIsotope isotope)", "full_signature": "private IIsotope getIsotope(IIsotope isotope)", "class_method_signature": "MolecularFormulaRange.getIsotope(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "isotopes", "parameters": "()", "modifiers": "public", "return": "Iterable<IIsotope>", "signature": "Iterable<IIsotope> isotopes()", "full_signature": "public Iterable<IIsotope> isotopes()", "class_method_signature": "MolecularFormulaRange.isotopes()", "testcase": false, "constructor": false}, {"identifier": "removeAllIsotopes", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAllIsotopes()", "full_signature": "public void removeAllIsotopes()", "class_method_signature": "MolecularFormulaRange.removeAllIsotopes()", "testcase": false, "constructor": false}, {"identifier": "removeIsotope", "parameters": "(IIsotope isotope)", "modifiers": "public", "return": "void", "signature": "void removeIsotope(IIsotope isotope)", "full_signature": "public void removeIsotope(IIsotope isotope)", "class_method_signature": "MolecularFormulaRange.removeIsotope(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "MolecularFormulaRange.clone()", "testcase": false, "constructor": false}, {"identifier": "isTheSame", "parameters": "(IIsotope isotopeOne, IIsotope isotopeTwo)", "modifiers": "private", "return": "boolean", "signature": "boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "full_signature": "private boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "class_method_signature": "MolecularFormulaRange.isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/MolecularFormulaRange.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object clone() throws CloneNotSupportedException {\n\n        MolecularFormulaRange clone = new MolecularFormulaRange();\n        Iterator<IIsotope> iterIso = this.isotopes().iterator();\n        while (iterIso.hasNext()) {\n            IIsotope isotope = iterIso.next();\n            clone.addIsotope((IIsotope) isotope.clone(), getIsotopeCountMin(isotope), getIsotopeCountMax(isotope));\n        }\n        return clone;\n    }", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "MolecularFormulaRange.clone()", "testcase": false, "constructor": false, "invocations": ["iterator", "isotopes", "hasNext", "next", "addIsotope", "clone", "getIsotopeCountMin", "getIsotopeCountMax"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}