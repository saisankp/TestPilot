{"test_class": {"identifier": "PageCopierTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/split/PageCopierTest.java"}, "test_case": {"identifier": "copyStreamIsSanitized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyStreamIsSanitized() throws IOException {\n        try (PDDocument document = PDFParser.parse(SeekableSources.inMemorySeekableSourceFrom(\n                getClass().getClassLoader().getResourceAsStream(\"pdf/annots_in_stream.pdf\")))) {\n            PDPage page = document.getPage(0);\n            assertNotNull(\n                    page.getCOSObject().getDictionaryObject(COSName.CONTENTS, COSStream.class).getItem(COSName.ANNOTS));\n            PDPage copy = new PageCopier(false).copyOf(page);\n            assertNull(\n                    copy.getCOSObject().getDictionaryObject(COSName.CONTENTS, COSStream.class).getItem(COSName.ANNOTS));\n        }\n    }", "signature": "void copyStreamIsSanitized()", "full_signature": "@Test public void copyStreamIsSanitized()", "class_method_signature": "PageCopierTest.copyStreamIsSanitized()", "testcase": true, "constructor": false, "invocations": ["parse", "inMemorySeekableSourceFrom", "getResourceAsStream", "getClassLoader", "getClass", "getPage", "assertNotNull", "getItem", "getDictionaryObject", "getCOSObject", "copyOf", "assertNull", "getItem", "getDictionaryObject", "getCOSObject"]}, "focal_class": {"identifier": "PageCopier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PageCopier.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PageCopier.class)", "var_name": "LOG"}, {"original_string": "private boolean optimize;", "modifier": "private", "type": "boolean", "declarator": "optimize", "var_name": "optimize"}, {"original_string": "private ResourcesHitter hitter = new ResourcesHitter();", "modifier": "private", "type": "ResourcesHitter", "declarator": "hitter = new ResourcesHitter()", "var_name": "hitter"}, {"original_string": "private ResourceDictionaryCleaner cleaner = new ResourceDictionaryCleaner();", "modifier": "private", "type": "ResourceDictionaryCleaner", "declarator": "cleaner = new ResourceDictionaryCleaner()", "var_name": "cleaner"}], "methods": [{"identifier": "PageCopier", "parameters": "(boolean optimize)", "modifiers": "public", "return": "", "signature": " PageCopier(boolean optimize)", "full_signature": "public  PageCopier(boolean optimize)", "class_method_signature": "PageCopier.PageCopier(boolean optimize)", "testcase": false, "constructor": true}, {"identifier": "copyOf", "parameters": "(PDPage page)", "modifiers": "public", "return": "PDPage", "signature": "PDPage copyOf(PDPage page)", "full_signature": "public PDPage copyOf(PDPage page)", "class_method_signature": "PageCopier.copyOf(PDPage page)", "testcase": false, "constructor": false}, {"identifier": "duplicatePageStreams", "parameters": "(PDPage page, PDPage copy)", "modifiers": "private", "return": "void", "signature": "void duplicatePageStreams(PDPage page, PDPage copy)", "full_signature": "private void duplicatePageStreams(PDPage page, PDPage copy)", "class_method_signature": "PageCopier.duplicatePageStreams(PDPage page, PDPage copy)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/split/PageCopier.java"}, "focal_method": {"identifier": "copyOf", "parameters": "(PDPage page)", "modifiers": "public", "return": "PDPage", "body": "public PDPage copyOf(PDPage page) {\n        PDPage copy = new PDPage(page.getCOSObject().duplicate());\n        copy.setCropBox(page.getCropBox());\n        copy.setMediaBox(page.getMediaBox());\n        copy.setResources(page.getResources());\n        copy.setRotation(page.getRotation());\n        // we remove thread beads possibly leaking into page tree\n        copy.getCOSObject().removeItem(COSName.B);\n        COSArray annots = page.getCOSObject().getDictionaryObject(COSName.ANNOTS, COSArray.class);\n        if (nonNull(annots)) {\n            // we create an array where annotations are a copy of the original but without /P or /Dest possibly leaking into the page tree\n            COSArray cleanedAnnotationsCopy = new COSArray();\n            annots.stream().map(COSBase::getCOSObject).filter(d -> d instanceof COSDictionary)\n                    .map(d -> (COSDictionary) d).map(COSDictionary::duplicate).forEach(a -> {\n                        a.removeItem(COSName.P);\n                        a.removeItem(COSName.DEST);\n                        // Popup parent can leak into the page tree\n                        a.removeItem(COSName.getPDFName(\"Popup\"));\n                        a.removeItem(COSName.PARENT);\n                        // remove the action if it has a destination (potentially a GoTo page destination leaking into the page tree)\n                        if (ofNullable(a.getDictionaryObject(COSName.A, COSDictionary.class))\n                                .map(d -> d.containsKey(COSName.D)).orElse(false)) {\n                            a.removeItem(COSName.A);\n                        }\n                        cleanedAnnotationsCopy.add(a);\n                    });\n            copy.getCOSObject().setItem(COSName.ANNOTS, cleanedAnnotationsCopy);\n        }\n\n        if (optimize) {\n            // each page must have it's own resource dic and it's own xobject and font name dic\n            // so we don't optimize shared resource dic or xobjects/fonts name dictionaries\n            COSDictionary resources = ofNullable(copy.getResources().getCOSObject()).map(COSDictionary::duplicate)\n                    .orElseGet(COSDictionary::new);\n            // resources are cached in the PDPage so make sure they are replaced\n            copy.setResources(new PDResources(resources));\n            ofNullable(resources.getDictionaryObject(COSName.XOBJECT, COSDictionary.class)).filter(Objects::nonNull)\n                    .map(COSDictionary::duplicate).ifPresent(d -> resources.setItem(COSName.XOBJECT, d));\n            ofNullable(resources.getDictionaryObject(COSName.FONT, COSDictionary.class)).filter(Objects::nonNull)\n                    .map(COSDictionary::duplicate).ifPresent(d -> resources.setItem(COSName.FONT, d));\n            hitter.accept(copy);\n            cleaner.clean(copy);\n        }\n        duplicatePageStreams(page, copy);\n        copy.sanitizeDictionary();\n        return copy;\n    }", "signature": "PDPage copyOf(PDPage page)", "full_signature": "public PDPage copyOf(PDPage page)", "class_method_signature": "PageCopier.copyOf(PDPage page)", "testcase": false, "constructor": false, "invocations": ["duplicate", "getCOSObject", "setCropBox", "getCropBox", "setMediaBox", "getMediaBox", "setResources", "getResources", "setRotation", "getRotation", "removeItem", "getCOSObject", "getDictionaryObject", "getCOSObject", "nonNull", "forEach", "map", "map", "filter", "map", "stream", "removeItem", "removeItem", "removeItem", "getPDFName", "removeItem", "orElse", "map", "ofNullable", "getDictionaryObject", "containsKey", "removeItem", "add", "setItem", "getCOSObject", "orElseGet", "map", "ofNullable", "getCOSObject", "getResources", "setResources", "ifPresent", "map", "filter", "ofNullable", "getDictionaryObject", "setItem", "ifPresent", "map", "filter", "ofNullable", "getDictionaryObject", "setItem", "accept", "clean", "duplicatePageStreams", "sanitizeDictionary"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}