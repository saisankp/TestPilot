{"test_class": {"identifier": "ResolveByTypeStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/IOCStrategyPack/ResolveByTypeStrategy/src/test/java/info/smart_tools/smartactors/ioc_strategy_pack/resolve_by_type_strategy/ResolveByTypeStrategyTest.java"}, "test_case": {"identifier": "checkStrategyResolutionException", "parameters": "()", "modifiers": "@Test (expected = ResolveDependencyStrategyException.class) public", "return": "void", "body": "@Test (expected = ResolveDependencyStrategyException.class)\n    public void checkStrategyResolutionException()\n            throws Exception {\n        IResolveDependencyStrategy strategy = new ResolveByTypeStrategy();\n        strategy.resolve(null);\n    }", "signature": "void checkStrategyResolutionException()", "full_signature": "@Test (expected = ResolveDependencyStrategyException.class) public void checkStrategyResolutionException()", "class_method_signature": "ResolveByTypeStrategyTest.checkStrategyResolutionException()", "testcase": true, "constructor": false, "invocations": ["resolve"]}, "focal_class": {"identifier": "ResolveByTypeStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy, IAdditionDependencyStrategy", "fields": [{"original_string": "private ConcurrentMap<Class, IResolveDependencyStrategy> resolveStrategies;", "modifier": "private", "type": "ConcurrentMap<Class, IResolveDependencyStrategy>", "declarator": "resolveStrategies", "var_name": "resolveStrategies"}, {"original_string": "private ConcurrentMap<Class, IResolveDependencyStrategy> cacheStrategiesMap;", "modifier": "private", "type": "ConcurrentMap<Class, IResolveDependencyStrategy>", "declarator": "cacheStrategiesMap", "var_name": "cacheStrategiesMap"}], "methods": [{"identifier": "ResolveByTypeStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResolveByTypeStrategy()", "full_signature": "public  ResolveByTypeStrategy()", "class_method_signature": "ResolveByTypeStrategy.ResolveByTypeStrategy()", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(final Object key, final IResolveDependencyStrategy strategy)", "modifiers": "@Override public", "return": "void", "signature": "void register(final Object key, final IResolveDependencyStrategy strategy)", "full_signature": "@Override public void register(final Object key, final IResolveDependencyStrategy strategy)", "class_method_signature": "ResolveByTypeStrategy.register(final Object key, final IResolveDependencyStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Object key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(final Object key)", "full_signature": "@Override public void remove(final Object key)", "class_method_signature": "ResolveByTypeStrategy.remove(final Object key)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ResolveByTypeStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOCStrategyPack/ResolveByTypeStrategy/src/main/java/info/smart_tools/smartactors/ioc_strategy_pack/resolve_by_type_strategy/ResolveByTypeStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        try {\n            IResolveDependencyStrategy strategy = cacheStrategiesMap.get(args[0].getClass());\n            if (strategy == null) {\n                for (Map.Entry<Class, IResolveDependencyStrategy> entry : resolveStrategies.entrySet()) {\n                    if (entry.getKey().isInstance(args[0])) {\n                        strategy = entry.getValue();\n                        cacheStrategiesMap.put(args[0].getClass(), strategy);\n                        break;\n                    }\n                }\n            }\n\n            Object result = strategy.resolve(args[0]);\n            return (T) result;\n        } catch (Exception e) {\n            throw new ResolveDependencyStrategyException(\"Object resolution failed.\", e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ResolveByTypeStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["get", "getClass", "entrySet", "isInstance", "getKey", "getValue", "put", "getClass", "resolve"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}