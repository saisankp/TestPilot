{"test_class": {"identifier": "CacheManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Config config = new Config();", "modifier": "", "type": "Config", "declarator": "config = new Config()", "var_name": "config"}, {"original_string": "CacheManager cache;", "modifier": "", "type": "CacheManager", "declarator": "cache", "var_name": "cache"}, {"original_string": "MockClient client;", "modifier": "", "type": "MockClient", "declarator": "client", "var_name": "client"}], "file": "unirest/src/test/java/kong/unirest/CacheManagerTest.java"}, "test_case": {"identifier": "responsesAreDifferentForDifferentTypes", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void responsesAreDifferentForDifferentTypes() {\n        assertNotSame(\n                cache.wrap(client).request(new HttpRequestNoBody(config, GET, \"/\"), r -> new StringResponse(new MockRawResponse(), \"\"), String.class),\n                cache.wrap(client).request(new HttpRequestNoBody(config, GET, \"/\"), r -> new BasicResponse(new MockRawResponse(), \"\"), Empty.class)\n        );\n\n        assertEquals(2, client.invokes);\n    }", "signature": "void responsesAreDifferentForDifferentTypes()", "full_signature": "@Test void responsesAreDifferentForDifferentTypes()", "class_method_signature": "CacheManagerTest.responsesAreDifferentForDifferentTypes()", "testcase": true, "constructor": false, "invocations": ["assertNotSame", "request", "wrap", "request", "wrap", "assertEquals"]}, "focal_class": {"identifier": "CacheManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CacheWrapper wrapper = new CacheWrapper();", "modifier": "private final", "type": "CacheWrapper", "declarator": "wrapper = new CacheWrapper()", "var_name": "wrapper"}, {"original_string": "private final AsyncWrapper asyncWrapper = new AsyncWrapper();", "modifier": "private final", "type": "AsyncWrapper", "declarator": "asyncWrapper = new AsyncWrapper()", "var_name": "asyncWrapper"}, {"original_string": "private final Cache backingCache;", "modifier": "private final", "type": "Cache", "declarator": "backingCache", "var_name": "backingCache"}, {"original_string": "private final Cache.KeyGenerator keyGen;", "modifier": "private final", "type": "Cache.KeyGenerator", "declarator": "keyGen", "var_name": "keyGen"}, {"original_string": "private Client originalClient;", "modifier": "private", "type": "Client", "declarator": "originalClient", "var_name": "originalClient"}, {"original_string": "private AsyncClient originalAsync;", "modifier": "private", "type": "AsyncClient", "declarator": "originalAsync", "var_name": "originalAsync"}], "methods": [{"identifier": "CacheManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " CacheManager()", "full_signature": "public  CacheManager()", "class_method_signature": "CacheManager.CacheManager()", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(int depth, long ttl, Cache.KeyGenerator keyGenerator)", "modifiers": "public", "return": "", "signature": " CacheManager(int depth, long ttl, Cache.KeyGenerator keyGenerator)", "full_signature": "public  CacheManager(int depth, long ttl, Cache.KeyGenerator keyGenerator)", "class_method_signature": "CacheManager.CacheManager(int depth, long ttl, Cache.KeyGenerator keyGenerator)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(Cache backing, Cache.KeyGenerator keyGenerator)", "modifiers": "public", "return": "", "signature": " CacheManager(Cache backing, Cache.KeyGenerator keyGenerator)", "full_signature": "public  CacheManager(Cache backing, Cache.KeyGenerator keyGenerator)", "class_method_signature": "CacheManager.CacheManager(Cache backing, Cache.KeyGenerator keyGenerator)", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(Client client)", "modifiers": "", "return": "Client", "signature": "Client wrap(Client client)", "full_signature": " Client wrap(Client client)", "class_method_signature": "CacheManager.wrap(Client client)", "testcase": false, "constructor": false}, {"identifier": "wrapAsync", "parameters": "(AsyncClient client)", "modifiers": "", "return": "AsyncClient", "signature": "AsyncClient wrapAsync(AsyncClient client)", "full_signature": " AsyncClient wrapAsync(AsyncClient client)", "class_method_signature": "CacheManager.wrapAsync(AsyncClient client)", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "(HttpRequest request, Boolean isAsync, Class<?> responseType)", "modifiers": "private", "return": "Cache.Key", "signature": "Cache.Key getHash(HttpRequest request, Boolean isAsync, Class<?> responseType)", "full_signature": "private Cache.Key getHash(HttpRequest request, Boolean isAsync, Class<?> responseType)", "class_method_signature": "CacheManager.getHash(HttpRequest request, Boolean isAsync, Class<?> responseType)", "testcase": false, "constructor": false}], "file": "unirest/src/main/java/kong/unirest/CacheManager.java"}, "focal_method": {"identifier": "wrap", "parameters": "(Client client)", "modifiers": "", "return": "Client", "body": "Client wrap(Client client) {\n        this.originalClient = client;\n        return wrapper;\n    }", "signature": "Client wrap(Client client)", "full_signature": " Client wrap(Client client)", "class_method_signature": "CacheManager.wrap(Client client)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1601209, "url": "https://github.com/Kong/unirest-java", "stars": 1855, "created": "4/11/2011 9:19:53 PM +00:00", "updates": "2020-01-25T12:07:58+00:00", "fork": "False", "license": "licensed"}}