{"test_class": {"identifier": "PreparationCleanerTest", "superclass": "extends BaseMaintenanceTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private PreparationCleaner cleaner;", "modifier": "@InjectMocks\n    private", "type": "PreparationCleaner", "declarator": "cleaner", "var_name": "cleaner"}, {"original_string": "@Mock\n    private PreparationRepository repository;", "modifier": "@Mock\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n    private StepMarker marker;", "modifier": "@Mock\n    private", "type": "StepMarker", "declarator": "marker", "var_name": "marker"}], "file": "dataprep-maintenance/src/test/java/org/talend/dataprep/maintenance/preparation/PreparationCleanerTest.java"}, "test_case": {"identifier": "shouldInterruptWhenMarkerAsksForInterruption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldInterruptWhenMarkerAsksForInterruption() {\n        // given\n        cleaner.setMarkers(Collections.singletonList(marker));\n        when(marker.mark(any(), any(UUID.class))).thenReturn(StepMarker.Result.INTERRUPTED);\n\n        // when\n        cleaner.execute();\n\n        // then\n        verify(repository, never()).remove(refEq(Step.class), any(Expression.class));\n    }", "signature": "void shouldInterruptWhenMarkerAsksForInterruption()", "full_signature": "@Test public void shouldInterruptWhenMarkerAsksForInterruption()", "class_method_signature": "PreparationCleanerTest.shouldInterruptWhenMarkerAsksForInterruption()", "testcase": true, "constructor": false, "invocations": ["setMarkers", "singletonList", "thenReturn", "when", "mark", "any", "any", "execute", "remove", "verify", "never", "refEq", "any"]}, "focal_class": {"identifier": "PreparationCleaner", "superclass": "", "interfaces": "implements MaintenanceTaskProcess", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationCleaner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationCleaner.class)", "var_name": "LOGGER"}, {"original_string": "private static final String MARKER = \"marker\";", "modifier": "private static final", "type": "String", "declarator": "MARKER = \"marker\"", "var_name": "MARKER"}, {"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private List<StepMarker> markers = new ArrayList<>();", "modifier": "@Autowired\n    private", "type": "List<StepMarker>", "declarator": "markers = new ArrayList<>()", "var_name": "markers"}, {"original_string": "@Autowired\n    private ForAll forAll;", "modifier": "@Autowired\n    private", "type": "ForAll", "declarator": "forAll", "var_name": "forAll"}], "methods": [{"identifier": "performTask", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void performTask()", "full_signature": "@Override public void performTask()", "class_method_signature": "PreparationCleaner.performTask()", "testcase": false, "constructor": false}, {"identifier": "condition", "parameters": "()", "modifiers": "@Override public", "return": "Supplier<Boolean>", "signature": "Supplier<Boolean> condition()", "full_signature": "@Override public Supplier<Boolean> condition()", "class_method_signature": "PreparationCleaner.condition()", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "@Override public", "return": "ScheduleFrequency", "signature": "ScheduleFrequency getFrequency()", "full_signature": "@Override public ScheduleFrequency getFrequency()", "class_method_signature": "PreparationCleaner.getFrequency()", "testcase": false, "constructor": false}, {"identifier": "removeCurrentOrphanSteps", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeCurrentOrphanSteps()", "full_signature": "private void removeCurrentOrphanSteps()", "class_method_signature": "PreparationCleaner.removeCurrentOrphanSteps()", "testcase": false, "constructor": false}, {"identifier": "setMarkers", "parameters": "(List<StepMarker> markers)", "modifiers": "public", "return": "void", "signature": "void setMarkers(List<StepMarker> markers)", "full_signature": "public void setMarkers(List<StepMarker> markers)", "class_method_signature": "PreparationCleaner.setMarkers(List<StepMarker> markers)", "testcase": false, "constructor": false}], "file": "dataprep-maintenance/src/main/java/org/talend/dataprep/maintenance/preparation/PreparationCleaner.java"}, "focal_method": {"identifier": "setMarkers", "parameters": "(List<StepMarker> markers)", "modifiers": "public", "return": "void", "body": "public void setMarkers(List<StepMarker> markers) {\n        this.markers = markers;\n    }", "signature": "void setMarkers(List<StepMarker> markers)", "full_signature": "public void setMarkers(List<StepMarker> markers)", "class_method_signature": "PreparationCleaner.setMarkers(List<StepMarker> markers)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}