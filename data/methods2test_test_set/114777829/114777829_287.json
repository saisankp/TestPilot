{"test_class": {"identifier": "JasperInitializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "pages/jasper/src/test/java/cloud/piranha/pages/jasper/JasperInitializerTest.java"}, "test_case": {"identifier": "testOnStartup", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testOnStartup() throws Exception {\n        DefaultWebApplication servletContext = new DefaultWebApplication();\n        servletContext.addResource(new DirectoryResource(new File(\"src/test/webapp/webapp1\")));\n        JasperInitializer initializer = new JasperInitializer();\n        initializer.onStartup(new HashSet<>(), servletContext);\n    }", "signature": "void testOnStartup()", "full_signature": "@Test void testOnStartup()", "class_method_signature": "JasperInitializerTest.testOnStartup()", "testcase": true, "constructor": false, "invocations": ["addResource", "onStartup"]}, "focal_class": {"identifier": "JasperInitializer", "superclass": "", "interfaces": "implements ServletContainerInitializer", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(JasperInitializer.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JasperInitializer.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "getClassesDirectory", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "String", "signature": "String getClassesDirectory(ServletContext servletContext)", "full_signature": "private String getClassesDirectory(ServletContext servletContext)", "class_method_signature": "JasperInitializer.getClassesDirectory(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "getJarFiles", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "String", "signature": "String getJarFiles(ServletContext servletContext)", "full_signature": "private String getJarFiles(ServletContext servletContext)", "class_method_signature": "JasperInitializer.getJarFiles(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "class_method_signature": "JasperInitializer.onStartup(Set<Class<?>> classes, ServletContext servletContext)", "testcase": false, "constructor": false}], "file": "pages/jasper/src/main/java/cloud/piranha/pages/jasper/JasperInitializer.java"}, "focal_method": {"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {\n        LOGGER.fine(\"Initializing Jasper integration\");\n\n        if (JspFactory.getDefaultFactory() == null) {\n            JspFactory.setDefaultFactory(new JspFactoryImpl());\n        }\n\n        ServletRegistration.Dynamic registration = servletContext.addServlet(\"jsp\", \"org.apache.jasper.servlet.JspServlet\");\n        registration.addMapping(\"*.jsp\");\n        String classpath = System.getProperty(\"jdk.module.path\",\n                System.getProperty(\"java.class.path\")) +\n                getClassesDirectory(servletContext) +\n                getJarFiles(servletContext);\n\n        LOGGER.log(FINER, () -> \"Jasper classpath is: \" + classpath);\n\n        registration.setInitParameter(\"classpath\", classpath);\n        registration.setInitParameter(\"compilerSourceVM\", \"1.8\");\n        registration.setInitParameter(\"compilerTargetVM\", \"1.8\");\n\n        WebApplication webApplication = (WebApplication) servletContext;\n        webApplication.setJspManager(new JasperJspManager());\n\n        LOGGER.fine(\"Initialized Jasper integration\");\n    }", "signature": "void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "class_method_signature": "JasperInitializer.onStartup(Set<Class<?>> classes, ServletContext servletContext)", "testcase": false, "constructor": false, "invocations": ["fine", "getDefaultFactory", "setDefaultFactory", "addServlet", "addMapping", "getProperty", "getProperty", "getClassesDirectory", "getJarFiles", "log", "setInitParameter", "setInitParameter", "setInitParameter", "setJspManager", "fine"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}