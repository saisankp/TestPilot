{"test_class": {"identifier": "DataProviderCompilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final StringBuffer EXPECTED_RULES = new StringBuffer();", "modifier": "private static final", "type": "StringBuffer", "declarator": "EXPECTED_RULES = new StringBuffer()", "var_name": "EXPECTED_RULES"}, {"original_string": "private ArrayList<String[]> rows = new ArrayList<String[]>();", "modifier": "private", "type": "ArrayList<String[]>", "declarator": "rows = new ArrayList<String[]>()", "var_name": "rows"}], "file": "drools-templates/src/test/java/org/drools/template/DataProviderCompilerTest.java"}, "test_case": {"identifier": "testCompilerObjs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompilerObjs() throws Exception {\n        Collection<Object> objs = new ArrayList<Object>();\n        final ObjectDataCompiler converter = new ObjectDataCompiler();\n        final InputStream templateStream =\n                this.getClass().getResourceAsStream(\"/templates/rule_template_1.drl\");\n\n        for (String[] row : rows) {\n            OBJ obj = new OBJ(row);\n            objs.add(obj);\n        }\n        final String drl = converter.compile(objs,\n                                             templateStream);\n        Assertions.assertThat(EXPECTED_RULES.toString()).isEqualToIgnoringWhitespace(drl);\n    }", "signature": "void testCompilerObjs()", "full_signature": "@Test public void testCompilerObjs()", "class_method_signature": "DataProviderCompilerTest.testCompilerObjs()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "add", "compile", "isEqualToIgnoringWhitespace", "assertThat", "toString"]}, "focal_class": {"identifier": "DataProviderCompiler", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final String template)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final String template)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final String template)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final String template)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final InputStream templateStream)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final InputStream templateStream)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final InputStream templateStream)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final InputStream templateStream)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final String template,\n                          boolean replaceOptionals)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final String template,\n                          boolean replaceOptionals)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final String template,\n                          boolean replaceOptionals)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final String template,\n                          boolean replaceOptionals)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final InputStream templateStream,\n                          boolean replaceOptionals)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final InputStream templateStream,\n                          boolean replaceOptionals)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final InputStream templateStream,\n                          boolean replaceOptionals)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final InputStream templateStream,\n                          boolean replaceOptionals)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final TemplateDataListener listener,\n                          boolean replaceOptionals)", "modifiers": "public", "return": "String", "signature": "String compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener,\n                          boolean replaceOptionals)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener,\n                          boolean replaceOptionals)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final TemplateDataListener listener,\n                          boolean replaceOptionals)", "testcase": false, "constructor": false}, {"identifier": "processData", "parameters": "(final DataProvider dataProvider,\n                             List<DataListener> listeners)", "modifiers": "private", "return": "void", "signature": "void processData(final DataProvider dataProvider,\n                             List<DataListener> listeners)", "full_signature": "private void processData(final DataProvider dataProvider,\n                             List<DataListener> listeners)", "class_method_signature": "DataProviderCompiler.processData(final DataProvider dataProvider,\n                             List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "finishData", "parameters": "(List<DataListener> listeners)", "modifiers": "private", "return": "void", "signature": "void finishData(List<DataListener> listeners)", "full_signature": "private void finishData(List<DataListener> listeners)", "class_method_signature": "DataProviderCompiler.finishData(List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "newRow", "parameters": "(List<DataListener> listeners,\n                        int row,\n                        int cols)", "modifiers": "private", "return": "void", "signature": "void newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "full_signature": "private void newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "class_method_signature": "DataProviderCompiler.newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "testcase": false, "constructor": false}, {"identifier": "newCell", "parameters": "(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "modifiers": "public", "return": "void", "signature": "void newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "full_signature": "public void newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "class_method_signature": "DataProviderCompiler.newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "testcase": false, "constructor": false}, {"identifier": "closeStream", "parameters": "(final InputStream stream)", "modifiers": "protected", "return": "void", "signature": "void closeStream(final InputStream stream)", "full_signature": "protected void closeStream(final InputStream stream)", "class_method_signature": "DataProviderCompiler.closeStream(final InputStream stream)", "testcase": false, "constructor": false}], "file": "drools-templates/src/main/java/org/drools/template/DataProviderCompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(final DataProvider dataProvider,\n                          final String template)", "modifiers": "public", "return": "String", "body": "public String compile(final DataProvider dataProvider,\n                          final String template) {\n        final InputStream templateStream = this.getClass().getResourceAsStream(template);\n        return compile(dataProvider,\n                       templateStream);\n    }", "signature": "String compile(final DataProvider dataProvider,\n                          final String template)", "full_signature": "public String compile(final DataProvider dataProvider,\n                          final String template)", "class_method_signature": "DataProviderCompiler.compile(final DataProvider dataProvider,\n                          final String template)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "compile"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}