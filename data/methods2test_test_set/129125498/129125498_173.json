{"test_class": {"identifier": "LegacySeasonalNaiveDetectorFactoryProviderTest", "superclass": "extends AbstractDetectorFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private static final int ONE_WEEK_IN_SECONDS = 60 * 24 * 7;", "modifier": "private static final", "type": "int", "declarator": "ONE_WEEK_IN_SECONDS = 60 * 24 * 7", "var_name": "ONE_WEEK_IN_SECONDS"}, {"original_string": "private static final int ONE_MINUTE_IN_SECONDS = 60;", "modifier": "private static final", "type": "int", "declarator": "ONE_MINUTE_IN_SECONDS = 60", "var_name": "ONE_MINUTE_IN_SECONDS"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/LegacySeasonalNaiveDetectorFactoryProviderTest.java"}, "test_case": {"identifier": "testBuildDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildDetector() {\n        val factoryUnderTest = new LegacySeasonalNaiveDetectorFactoryProvider();\n        val document = readDocument(\"seasonal-naive\");\n        val detector = factoryUnderTest.buildDetector(document);\n        val seasonalNaive = (SeasonalNaivePointForecaster) detector.getPointForecaster();\n        val seasonalNaiveParams = seasonalNaive.getParams();\n        val multiplicative = (MultiplicativeIntervalForecaster) detector.getIntervalForecaster();\n        val multiplicativeParams = multiplicative.getParams();\n\n        assertEquals(ForecastingDetector.class, detector.getClass());\n        assertEquals(\"6ec81aa2-2cdc-415e-b4f3-abc123cba321\", detector.getUuid().toString());\n        assertEquals(AnomalyType.RIGHT_TAILED, detector.getAnomalyType());\n        assertEquals(ONE_WEEK_IN_SECONDS, seasonalNaiveParams.getCycleLength(), TOLERANCE);\n        assertEquals(ONE_MINUTE_IN_SECONDS, seasonalNaiveParams.getIntervalLength(), TOLERANCE);\n        assertEquals(DEFAULT_MISSING_VALUE_PLACEHOLDER, seasonalNaiveParams.getMissingValuePlaceholder(), TOLERANCE);\n        assertEquals(3, multiplicativeParams.getWeakMultiplier(), TOLERANCE);\n        assertEquals(4, multiplicativeParams.getStrongMultiplier(), TOLERANCE);\n    }", "signature": "void testBuildDetector()", "full_signature": "@Test public void testBuildDetector()", "class_method_signature": "LegacySeasonalNaiveDetectorFactoryProviderTest.testBuildDetector()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector", "getPointForecaster", "getParams", "getIntervalForecaster", "getParams", "assertEquals", "getClass", "assertEquals", "toString", "getUuid", "assertEquals", "getAnomalyType", "assertEquals", "getCycleLength", "assertEquals", "getIntervalLength", "assertEquals", "getMissingValuePlaceholder", "assertEquals", "getWeakMultiplier", "assertEquals", "getStrongMultiplier"]}, "focal_class": {"identifier": "LegacySeasonalNaiveDetectorFactoryProvider", "superclass": "", "interfaces": "implements DetectorFactoryProvider<ForecastingDetector>", "fields": [{"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "methods": [{"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ForecastingDetector", "signature": "ForecastingDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ForecastingDetector buildDetector(DetectorDocument document)", "class_method_signature": "LegacySeasonalNaiveDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/LegacySeasonalNaiveDetectorFactoryProvider.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ForecastingDetector", "body": "@Override\n    public ForecastingDetector buildDetector(DetectorDocument document) {\n        val uuid = document.getUuid();\n\n        val config = document.getConfig();\n        val type = AnomalyType.valueOf((String) config.get(\"type\"));\n        val paramsMap = config.get(\"params\");\n        val legacyParams = objectMapper.convertValue(paramsMap, LegacySeasonalNaiveDetectorParams.class);\n        val seasonalNaiveParams = legacyParams.toSeasonalNaiveParams();\n        val multiplicativeParams = legacyParams.toMultiplicativeParams();\n\n        val seasonalNaive = new SeasonalNaivePointForecaster(seasonalNaiveParams);\n        val multiplicativeIntervalForecaster = new MultiplicativeIntervalForecaster(multiplicativeParams);\n\n        val trusted = document.isTrusted();\n\n        return new ForecastingDetector(uuid, seasonalNaive, multiplicativeIntervalForecaster, type, trusted, \"seasonalnaive\");\n    }", "signature": "ForecastingDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ForecastingDetector buildDetector(DetectorDocument document)", "class_method_signature": "LegacySeasonalNaiveDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["getUuid", "getConfig", "valueOf", "get", "get", "convertValue", "toSeasonalNaiveParams", "toMultiplicativeParams", "isTrusted"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}