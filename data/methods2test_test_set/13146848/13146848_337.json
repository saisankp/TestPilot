{"test_class": {"identifier": "ImagesToPdfDocumentConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/image/ImagesToPdfDocumentConverterTest.java"}, "test_case": {"identifier": "imageWithExifRotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void imageWithExifRotation() throws TaskException {\n        FileSource source = BaseTaskTest.customNonPdfInputAsFileSource(\"image/with_exif_orientation.JPG\");\n        ImagesToPdfDocumentConverter converter = new ImagesToPdfDocumentConverter();\n        PDDocumentHandler d = converter.addPage(source);\n        assertEquals(90, d.getPage(1).getRotation());\n    }", "signature": "void imageWithExifRotation()", "full_signature": "@Test public void imageWithExifRotation()", "class_method_signature": "ImagesToPdfDocumentConverterTest.imageWithExifRotation()", "testcase": true, "constructor": false, "invocations": ["customNonPdfInputAsFileSource", "addPage", "assertEquals", "getRotation", "getPage"]}, "focal_class": {"identifier": "ImagesToPdfDocumentConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ImagesToPdfDocumentConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ImagesToPdfDocumentConverter.class)", "var_name": "LOG"}, {"original_string": "private PDDocumentHandler documentHandler;", "modifier": "private", "type": "PDDocumentHandler", "declarator": "documentHandler", "var_name": "documentHandler"}, {"original_string": "private PageImageWriter imageWriter;", "modifier": "private", "type": "PageImageWriter", "declarator": "imageWriter", "var_name": "imageWriter"}, {"original_string": "private boolean shouldReadRotationFromExif = true;", "modifier": "private", "type": "boolean", "declarator": "shouldReadRotationFromExif = true", "var_name": "shouldReadRotationFromExif"}], "methods": [{"identifier": "ImagesToPdfDocumentConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImagesToPdfDocumentConverter()", "full_signature": "public  ImagesToPdfDocumentConverter()", "class_method_signature": "ImagesToPdfDocumentConverter.ImagesToPdfDocumentConverter()", "testcase": false, "constructor": true}, {"identifier": "addPage", "parameters": "(Source<?> source)", "modifiers": "public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler addPage(Source<?> source)", "full_signature": "public PDDocumentHandler addPage(Source<?> source)", "class_method_signature": "ImagesToPdfDocumentConverter.addPage(Source<?> source)", "testcase": false, "constructor": false}, {"identifier": "addPage", "parameters": "(Source<?> source, PDRectangle pageSize, PageOrientation pageOrientation, \n                                     float marginInches)", "modifiers": "public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler addPage(Source<?> source, PDRectangle pageSize, PageOrientation pageOrientation, \n                                     float marginInches)", "full_signature": "public PDDocumentHandler addPage(Source<?> source, PDRectangle pageSize, PageOrientation pageOrientation, \n                                     float marginInches)", "class_method_signature": "ImagesToPdfDocumentConverter.addPage(Source<?> source, PDRectangle pageSize, PageOrientation pageOrientation, \n                                     float marginInches)", "testcase": false, "constructor": false}, {"identifier": "beforeImage", "parameters": "(Source<?> source)", "modifiers": "public", "return": "void", "signature": "void beforeImage(Source<?> source)", "full_signature": "public void beforeImage(Source<?> source)", "class_method_signature": "ImagesToPdfDocumentConverter.beforeImage(Source<?> source)", "testcase": false, "constructor": false}, {"identifier": "afterImage", "parameters": "(PDImageXObject image)", "modifiers": "public", "return": "void", "signature": "void afterImage(PDImageXObject image)", "full_signature": "public void afterImage(PDImageXObject image)", "class_method_signature": "ImagesToPdfDocumentConverter.afterImage(PDImageXObject image)", "testcase": false, "constructor": false}, {"identifier": "failedImage", "parameters": "(Source<?> source, TaskIOException e)", "modifiers": "public", "return": "void", "signature": "void failedImage(Source<?> source, TaskIOException e)", "full_signature": "public void failedImage(Source<?> source, TaskIOException e)", "class_method_signature": "ImagesToPdfDocumentConverter.failedImage(Source<?> source, TaskIOException e)", "testcase": false, "constructor": false}, {"identifier": "convertImageMergeInputToPdf", "parameters": "(BaseMergeParameters<MergeInput> parameters,\n            TaskExecutionContext context)", "modifiers": "public static", "return": "void", "signature": "void convertImageMergeInputToPdf(BaseMergeParameters<MergeInput> parameters,\n            TaskExecutionContext context)", "full_signature": "public static void convertImageMergeInputToPdf(BaseMergeParameters<MergeInput> parameters,\n            TaskExecutionContext context)", "class_method_signature": "ImagesToPdfDocumentConverter.convertImageMergeInputToPdf(BaseMergeParameters<MergeInput> parameters,\n            TaskExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "toPDRectangle", "parameters": "(PageSize pageSize)", "modifiers": "public static", "return": "PDRectangle", "signature": "PDRectangle toPDRectangle(PageSize pageSize)", "full_signature": "public static PDRectangle toPDRectangle(PageSize pageSize)", "class_method_signature": "ImagesToPdfDocumentConverter.toPDRectangle(PageSize pageSize)", "testcase": false, "constructor": false}, {"identifier": "convertImagesToPdfMergeInput", "parameters": "(ImageMergeInput image, TaskExecutionContext context)", "modifiers": "private static", "return": "PdfMergeInput", "signature": "PdfMergeInput convertImagesToPdfMergeInput(ImageMergeInput image, TaskExecutionContext context)", "full_signature": "private static PdfMergeInput convertImagesToPdfMergeInput(ImageMergeInput image, TaskExecutionContext context)", "class_method_signature": "ImagesToPdfDocumentConverter.convertImagesToPdfMergeInput(ImageMergeInput image, TaskExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "getDocumentHandler", "parameters": "()", "modifiers": "public", "return": "PDDocumentHandler", "signature": "PDDocumentHandler getDocumentHandler()", "full_signature": "public PDDocumentHandler getDocumentHandler()", "class_method_signature": "ImagesToPdfDocumentConverter.getDocumentHandler()", "testcase": false, "constructor": false}, {"identifier": "isShouldReadRotationFromExif", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShouldReadRotationFromExif()", "full_signature": "public boolean isShouldReadRotationFromExif()", "class_method_signature": "ImagesToPdfDocumentConverter.isShouldReadRotationFromExif()", "testcase": false, "constructor": false}, {"identifier": "setShouldReadRotationFromExif", "parameters": "(boolean shouldReadRotationFromExif)", "modifiers": "public", "return": "void", "signature": "void setShouldReadRotationFromExif(boolean shouldReadRotationFromExif)", "full_signature": "public void setShouldReadRotationFromExif(boolean shouldReadRotationFromExif)", "class_method_signature": "ImagesToPdfDocumentConverter.setShouldReadRotationFromExif(boolean shouldReadRotationFromExif)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/image/ImagesToPdfDocumentConverter.java"}, "focal_method": {"identifier": "addPage", "parameters": "(Source<?> source)", "modifiers": "public", "return": "PDDocumentHandler", "body": "public PDDocumentHandler addPage(Source<?> source) throws TaskException {\n        return addPage(source, null, PageOrientation.AUTO, 0);    \n    }", "signature": "PDDocumentHandler addPage(Source<?> source)", "full_signature": "public PDDocumentHandler addPage(Source<?> source)", "class_method_signature": "ImagesToPdfDocumentConverter.addPage(Source<?> source)", "testcase": false, "constructor": false, "invocations": ["addPage"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}