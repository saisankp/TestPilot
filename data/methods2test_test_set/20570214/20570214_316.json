{"test_class": {"identifier": "X25519Test", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/X25519Test.java"}, "test_case": {"identifier": "testComputeSharedSecretWithWycheproofVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputeSharedSecretWithWycheproofVectors() throws Exception {\n    JSONObject json =\n        WycheproofTestUtil.readJson(\"../wycheproof/testvectors/x25519_test.json\");\n    int errors = 0;\n    int cntSkippedTests = 0;\n    JSONArray testGroups = json.getJSONArray(\"testGroups\");\n    for (int i = 0; i < testGroups.length(); i++) {\n      JSONObject group = testGroups.getJSONObject(i);\n      JSONArray tests = group.getJSONArray(\"tests\");\n      String curve = group.getString(\"curve\");\n      for (int j = 0; j < tests.length(); j++) {\n        JSONObject testcase = tests.getJSONObject(j);\n        String tcId =\n            String.format(\n                \"testcase %d (%s)\", testcase.getInt(\"tcId\"), testcase.getString(\"comment\"));\n        String result = testcase.getString(\"result\");\n        String hexPubKey = testcase.getString(\"public\");\n        String hexPrivKey = testcase.getString(\"private\");\n        String expectedSharedSecret = testcase.getString(\"shared\");\n        if (!curve.equals(\"curve25519\")) {\n          System.out.printf(\"Skipping %s, unknown curve name: %s\", tcId, curve);\n          cntSkippedTests++;\n          continue;\n        }\n        try {\n          String sharedSecret =\n              Hex.encode(X25519.computeSharedSecret(Hex.decode(hexPrivKey), Hex.decode(hexPubKey)));\n          if (result.equals(\"invalid\")) {\n            System.out.printf(\n                \"FAIL %s: accepting invalid parameters, shared secret: %s%n\", tcId, sharedSecret);\n            errors++;\n          } else if (!expectedSharedSecret.equals(sharedSecret)) {\n            System.out.printf(\n                \"FAIL %s: incorrect shared secret, computed: %s, expected: %s%n\",\n                tcId, sharedSecret, expectedSharedSecret);\n            errors++;\n          }\n        } catch (GeneralSecurityException ex) {\n          if (result.equals(\"valid\")) {\n            System.out.printf(\"FAIL %s, exception %s%n\", tcId, ex);\n            errors++;\n          }\n        } catch (Exception ex) {\n          // Other exceptions typically indicate that something is wrong with the implementation.\n          System.out.printf(\"FAIL %s, exception %s%n\", tcId, ex);\n          errors++;\n        }\n      }\n    }\n    System.out.printf(\"Number of tests skipped: %d\", cntSkippedTests);\n    assertEquals(0, errors);\n  }", "signature": "void testComputeSharedSecretWithWycheproofVectors()", "full_signature": "@Test public void testComputeSharedSecretWithWycheproofVectors()", "class_method_signature": "X25519Test.testComputeSharedSecretWithWycheproofVectors()", "testcase": true, "constructor": false, "invocations": ["readJson", "getJSONArray", "length", "getJSONObject", "getJSONArray", "getString", "length", "getJSONObject", "format", "getInt", "getString", "getString", "getString", "getString", "getString", "equals", "printf", "encode", "computeSharedSecret", "decode", "decode", "equals", "printf", "equals", "printf", "equals", "printf", "printf", "printf", "assertEquals"]}, "focal_class": {"identifier": "X25519", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generatePrivateKey", "parameters": "()", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] generatePrivateKey()", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] generatePrivateKey()", "class_method_signature": "X25519.generatePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "computeSharedSecret", "parameters": "(byte[] privateKey, byte[] peersPublicValue)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "class_method_signature": "X25519.computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "testcase": false, "constructor": false}, {"identifier": "publicFromPrivate", "parameters": "(byte[] privateKey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicFromPrivate(byte[] privateKey)", "full_signature": "public static byte[] publicFromPrivate(byte[] privateKey)", "class_method_signature": "X25519.publicFromPrivate(byte[] privateKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/X25519.java"}, "focal_method": {"identifier": "computeSharedSecret", "parameters": "(byte[] privateKey, byte[] peersPublicValue)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "body": "@SuppressWarnings(\"NarrowingCompoundAssignment\")\n  public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)\n      throws InvalidKeyException {\n    if (privateKey.length != Field25519.FIELD_LEN) {\n      throw new InvalidKeyException(\"Private key must have 32 bytes.\");\n    }\n    long[] x = new long[Field25519.LIMB_CNT + 1];\n\n    byte[] e = Arrays.copyOf(privateKey, Field25519.FIELD_LEN);\n    e[0] &= 248;\n    e[31] &= 127;\n    e[31] |= 64;\n\n    Curve25519.curveMult(x, e, peersPublicValue);\n    return Field25519.contract(x);\n  }", "signature": "byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "class_method_signature": "X25519.computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "testcase": false, "constructor": false, "invocations": ["copyOf", "curveMult", "contract"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}