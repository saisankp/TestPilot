{"test_class": {"identifier": "WilmaHttpRequestWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TARGET_FOLDER = \"messages\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_FOLDER = \"messages\"", "var_name": "TARGET_FOLDER"}, {"original_string": "private static final String COULD_NOT_WRITE_MESSAGE_ERROR = \"Could not write message to file:src/test/resources/outputFile.txt!\";", "modifier": "private static final", "type": "String", "declarator": "COULD_NOT_WRITE_MESSAGE_ERROR = \"Could not write message to file:src/test/resources/outputFile.txt!\"", "var_name": "COULD_NOT_WRITE_MESSAGE_ERROR"}, {"original_string": "private static final String OUTPUT_FILE = \"src/test/resources/outputFile.txt\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FILE = \"src/test/resources/outputFile.txt\"", "var_name": "OUTPUT_FILE"}, {"original_string": "private static final String REQUEST_TYPE = \"req\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_TYPE = \"req\"", "var_name": "REQUEST_TYPE"}, {"original_string": "private static final String MESSAGE_ID = \"201306271455.0001\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_ID = \"201306271455.0001\"", "var_name": "MESSAGE_ID"}, {"original_string": "private static final String REQUEST_LINE = \"request line\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_LINE = \"request line\"", "var_name": "REQUEST_LINE"}, {"original_string": "private static final String REMOTE_ADDR = \"remote.addr\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_ADDR = \"remote.addr\"", "var_name": "REMOTE_ADDR"}, {"original_string": "private static final String HEADERS = \"headers\";", "modifier": "private static final", "type": "String", "declarator": "HEADERS = \"headers\"", "var_name": "HEADERS"}, {"original_string": "private static final String EXTRA_HEADERS = \"headers+\";", "modifier": "private static final", "type": "String", "declarator": "EXTRA_HEADERS = \"headers+\"", "var_name": "EXTRA_HEADERS"}, {"original_string": "private static final String EXTRA_HEADERS_REMOVE = \"headers-\";", "modifier": "private static final", "type": "String", "declarator": "EXTRA_HEADERS_REMOVE = \"headers-\"", "var_name": "EXTRA_HEADERS_REMOVE"}, {"original_string": "private static final String BODY = \"body\";", "modifier": "private static final", "type": "String", "declarator": "BODY = \"body\"", "var_name": "BODY"}, {"original_string": "private static final String MESSAGE_LOGGER_ID = \"w_201306271455.0001\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_LOGGER_ID = \"w_201306271455.0001\"", "var_name": "MESSAGE_LOGGER_ID"}, {"original_string": "private static final String FI_PREFIX = \"FI\";", "modifier": "private static final", "type": "String", "declarator": "FI_PREFIX = \"FI\"", "var_name": "FI_PREFIX"}, {"original_string": "private static final int OUTPUT_BUFFER_SIZE = 262144;", "modifier": "private static final", "type": "int", "declarator": "OUTPUT_BUFFER_SIZE = 262144", "var_name": "OUTPUT_BUFFER_SIZE"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private WilmaHttpRequest request;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private LogFilePathProvider logFilePath;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "LogFilePathProvider", "declarator": "logFilePath", "var_name": "logFilePath"}, {"original_string": "@Mock\n    private BufferedWriter bufferedWriter;", "modifier": "@Mock\n    private", "type": "BufferedWriter", "declarator": "bufferedWriter", "var_name": "bufferedWriter"}, {"original_string": "@Mock\n    private BufferedWriterFactory bufferedWriterFactory;", "modifier": "@Mock\n    private", "type": "BufferedWriterFactory", "declarator": "bufferedWriterFactory", "var_name": "bufferedWriterFactory"}, {"original_string": "@Mock\n    private File directory;", "modifier": "@Mock\n    private", "type": "File", "declarator": "directory", "var_name": "directory"}, {"original_string": "@Mock\n    private DirectoryFactory directoryFactory;", "modifier": "@Mock\n    private", "type": "DirectoryFactory", "declarator": "directoryFactory", "var_name": "directoryFactory"}, {"original_string": "@InjectMocks\n    private WilmaHttpRequestWriter underTest;", "modifier": "@InjectMocks\n    private", "type": "WilmaHttpRequestWriter", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-logger/src/test/java/com/epam/wilma/logger/writer/WilmaHttpRequestWriterTest.java"}, "test_case": {"identifier": "testWriteWhenWriterIsNullShouldDoNothing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteWhenWriterIsNullShouldDoNothing() throws IOException {\n        //GIVEN\n        doReturn(OUTPUT_FILE).when(underTest).getOutputFileName(MESSAGE_LOGGER_ID, true);\n        given(bufferedWriterFactory.createBufferedWriter(OUTPUT_FILE, OUTPUT_BUFFER_SIZE)).willReturn(null);\n        given(request.getWilmaMessageLoggerId()).willReturn(MESSAGE_LOGGER_ID);\n        //WHEN\n        underTest.write(request, true);\n        //THEN\n        verify(bufferedWriter, times(0)).append(Mockito.anyString());\n    }", "signature": "void testWriteWhenWriterIsNullShouldDoNothing()", "full_signature": "@Test public void testWriteWhenWriterIsNullShouldDoNothing()", "class_method_signature": "WilmaHttpRequestWriterTest.testWriteWhenWriterIsNullShouldDoNothing()", "testcase": true, "constructor": false, "invocations": ["getOutputFileName", "when", "doReturn", "willReturn", "given", "createBufferedWriter", "willReturn", "given", "getWilmaMessageLoggerId", "write", "append", "verify", "times", "anyString"]}, "focal_class": {"identifier": "WilmaHttpRequestWriter", "superclass": "extends WilmaHttpEntityWriter<WilmaHttpRequest>", "interfaces": "", "fields": [{"original_string": "private static final int OUTPUT_BUFFER_SIZE = 262144;", "modifier": "private static final", "type": "int", "declarator": "OUTPUT_BUFFER_SIZE = 262144", "var_name": "OUTPUT_BUFFER_SIZE"}, {"original_string": "private static final String INITIAL_FILENAME = \"00000000000000.0000req.txt\";", "modifier": "private static final", "type": "String", "declarator": "INITIAL_FILENAME = \"00000000000000.0000req.txt\"", "var_name": "INITIAL_FILENAME"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(WilmaHttpRequestWriter.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WilmaHttpRequestWriter.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private BufferedWriterFactory bufferedWriterFactory;", "modifier": "@Autowired\n    private", "type": "BufferedWriterFactory", "declarator": "bufferedWriterFactory", "var_name": "bufferedWriterFactory"}], "methods": [{"identifier": "write", "parameters": "(final WilmaHttpRequest request, final boolean bodyDecompressed)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "full_signature": "@Override public boolean write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "class_method_signature": "WilmaHttpRequestWriter.write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "testcase": false, "constructor": false}, {"identifier": "writeRequestLine", "parameters": "(final String requestLine, final BufferedWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeRequestLine(final String requestLine, final BufferedWriter writer)", "full_signature": "private void writeRequestLine(final String requestLine, final BufferedWriter writer)", "class_method_signature": "WilmaHttpRequestWriter.writeRequestLine(final String requestLine, final BufferedWriter writer)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-logger/src/main/java/com/epam/wilma/logger/writer/WilmaHttpRequestWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final WilmaHttpRequest request, final boolean bodyDecompressed)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean write(final WilmaHttpRequest request, final boolean bodyDecompressed) {\n        boolean successful = false;\n        String outputFile = INITIAL_FILENAME;\n        try {\n            String messageLoggerId = request.getWilmaMessageLoggerId();\n            String messageId = request.getWilmaMessageId();\n            outputFile = getOutputFileName(messageLoggerId, bodyDecompressed);\n            BufferedWriter writer = bufferedWriterFactory.createBufferedWriter(outputFile, OUTPUT_BUFFER_SIZE);\n            if (writer != null) {\n                String requestLine = request.getRemoteAddr() + \" \" + request.getRequestLine();\n                writeRequestLine(requestLine, writer);\n                writeWilmaLoggerId(writer, messageId);\n                String headers = prepareHeadersInfo(request);\n                writeHeaders(writer, headers);\n                String body = request.getBody();\n                writeBody(writer, body);\n                writer.close();\n                successful = true;\n            }\n        } catch (IOException e) {\n            logger.error(\"Could not write message to file:\" + outputFile + \"!\", e);\n        }\n        return successful;\n    }", "signature": "boolean write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "full_signature": "@Override public boolean write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "class_method_signature": "WilmaHttpRequestWriter.write(final WilmaHttpRequest request, final boolean bodyDecompressed)", "testcase": false, "constructor": false, "invocations": ["getWilmaMessageLoggerId", "getWilmaMessageId", "getOutputFileName", "createBufferedWriter", "getRemoteAddr", "getRequestLine", "writeRequestLine", "writeWilmaLoggerId", "prepareHeadersInfo", "writeHeaders", "getBody", "writeBody", "close", "error"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}