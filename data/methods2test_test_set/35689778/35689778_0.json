{"test_class": {"identifier": "ItemsControllerTest", "superclass": "extends RestIntegrationTest", "interfaces": "", "fields": [{"original_string": "private final Header testHeader = new Header(RequireToken.DEFAULT, \"cafebabe\");", "modifier": "private final", "type": "Header", "declarator": "testHeader = new Header(RequireToken.DEFAULT, \"cafebabe\")", "var_name": "testHeader"}], "file": "fathom-archetype-standard/src/main/resources/archetype-resources/src/test/java/controllers/ItemsControllerTest.java"}, "test_case": {"identifier": "testGetJSON", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetJSON() {\n\n        // The JSON response should look like:\n        //\n        // {\n        //   \"id\" : 1,\n        //   \"name\" : \"Apples\"\n        // }\n\n        given().accept(JSON).when().header(testHeader).get(\"/api/items/{id}\", 1).then().body(\"id\", equalTo(1));\n\n    }", "signature": "void testGetJSON()", "full_signature": "@Test public void testGetJSON()", "class_method_signature": "ItemsControllerTest.testGetJSON()", "testcase": true, "constructor": false, "invocations": ["body", "then", "get", "header", "when", "accept", "given", "equalTo"]}, "focal_class": {"identifier": "ItemsController", "superclass": "extends ApiController", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(ItemsController.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ItemsController.class)", "var_name": "log"}, {"original_string": "@Inject\n    ItemDao dao;", "modifier": "@Inject", "type": "ItemDao", "declarator": "dao", "var_name": "dao"}], "methods": [{"identifier": "get", "parameters": "(@Desc(\"ID of the item to retrieve\") int id)", "modifiers": "@GET(\"/{id: [0-9]+}\") @ApiSummary(\"Get an item by id\") @Return(code = 200, description = \"Successful operation\", onResult = Item.class) @Return(code = 404, description = \"Item not found\") @Metered public", "return": "Item", "signature": "Item get(@Desc(\"ID of the item to retrieve\") int id)", "full_signature": "@GET(\"/{id: [0-9]+}\") @ApiSummary(\"Get an item by id\") @Return(code = 200, description = \"Successful operation\", onResult = Item.class) @Return(code = 404, description = \"Item not found\") @Metered public Item get(@Desc(\"ID of the item to retrieve\") int id)", "class_method_signature": "ItemsController.get(@Desc(\"ID of the item to retrieve\") int id)", "testcase": false, "constructor": false}], "file": "fathom-archetype-standard/src/main/resources/archetype-resources/src/main/java/controllers/ItemsController.java"}, "focal_method": {"identifier": "get", "parameters": "(@Desc(\"ID of the item to retrieve\") int id)", "modifiers": "@GET(\"/{id: [0-9]+}\") @ApiSummary(\"Get an item by id\") @Return(code = 200, description = \"Successful operation\", onResult = Item.class) @Return(code = 404, description = \"Item not found\") @Metered public", "return": "Item", "body": "@GET(\"/{id: [0-9]+}\")\n    @ApiSummary(\"Get an item by id\")\n    @Return(code = 200, description = \"Successful operation\", onResult = Item.class)\n    @Return(code = 404, description = \"Item not found\")\n    @Metered\n    public Item get(@Desc(\"ID of the item to retrieve\") int id) {\n        Item item = dao.get(id);\n        return item;\n    }", "signature": "Item get(@Desc(\"ID of the item to retrieve\") int id)", "full_signature": "@GET(\"/{id: [0-9]+}\") @ApiSummary(\"Get an item by id\") @Return(code = 200, description = \"Successful operation\", onResult = Item.class) @Return(code = 404, description = \"Item not found\") @Metered public Item get(@Desc(\"ID of the item to retrieve\") int id)", "class_method_signature": "ItemsController.get(@Desc(\"ID of the item to retrieve\") int id)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 35689778, "url": "https://github.com/gitblit/fathom", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 1076, "license": "licensed"}}