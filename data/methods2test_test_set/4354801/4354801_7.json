{"test_class": {"identifier": "ReDosDetectorTest", "superclass": "extends BaseDetectorTest", "interfaces": "", "fields": [], "file": "findsecbugs-plugin/src/test/java/com/h3xstream/findsecbugs/ReDosDetectorTest.java"}, "test_case": {"identifier": "analyseSafePattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void analyseSafePattern() {\n        BugReporter reporter = mock(BugReporter.class);\n        ReDosDetector detector = new ReDosDetector(reporter);\n\n        detector.analyseRegexString(\"\");\n        detector.analyseRegexString(\"[a-zA-Z]+[0-9]*\");\n        detector.analyseRegexString(\"(id-[0-9]+)-([0-9A-F]*)\");\n\n        verify(reporter, never()).reportBug(bugDefinition().bugType(\"REDOS\").build());\n    }", "signature": "void analyseSafePattern()", "full_signature": "@Test public void analyseSafePattern()", "class_method_signature": "ReDosDetectorTest.analyseSafePattern()", "testcase": true, "constructor": false, "invocations": ["mock", "analyseRegexString", "analyseRegexString", "analyseRegexString", "reportBug", "verify", "never", "build", "bugType", "bugDefinition"]}, "focal_class": {"identifier": "ReDosDetector", "superclass": "extends OpcodeStackDetector", "interfaces": "", "fields": [{"original_string": "private static final String REDOS_TYPE = \"REDOS\";", "modifier": "private static final", "type": "String", "declarator": "REDOS_TYPE = \"REDOS\"", "var_name": "REDOS_TYPE"}, {"original_string": "private static final char[] OPENING_CHAR = {'(', '['};", "modifier": "private static final", "type": "char[]", "declarator": "OPENING_CHAR = {'(', '['}", "var_name": "OPENING_CHAR"}, {"original_string": "private static final char[] CLOSING_CHAR = {')', ']'};", "modifier": "private static final", "type": "char[]", "declarator": "CLOSING_CHAR = {')', ']'}", "var_name": "CLOSING_CHAR"}, {"original_string": "private static final char[] PLUS_CHAR = {'+', '*', '?'};", "modifier": "private static final", "type": "char[]", "declarator": "PLUS_CHAR = {'+', '*', '?'}", "var_name": "PLUS_CHAR"}, {"original_string": "private static final InvokeMatcherBuilder PATTERN_COMPILE = invokeInstruction().atClass(\"java/util/regex/Pattern\")\n            .atMethod(\"compile\").withArgs(\"(Ljava/lang/String;)Ljava/util/regex/Pattern;\");", "modifier": "private static final", "type": "InvokeMatcherBuilder", "declarator": "PATTERN_COMPILE = invokeInstruction().atClass(\"java/util/regex/Pattern\")\n            .atMethod(\"compile\").withArgs(\"(Ljava/lang/String;)Ljava/util/regex/Pattern;\")", "var_name": "PATTERN_COMPILE"}, {"original_string": "private static final InvokeMatcherBuilder STRING_MATCHES = invokeInstruction().atClass(\"java/lang/String\")\n            .atMethod(\"matches\").withArgs(\"(Ljava/lang/String;)Z\");", "modifier": "private static final", "type": "InvokeMatcherBuilder", "declarator": "STRING_MATCHES = invokeInstruction().atClass(\"java/lang/String\")\n            .atMethod(\"matches\").withArgs(\"(Ljava/lang/String;)Z\")", "var_name": "STRING_MATCHES"}, {"original_string": "private BugReporter bugReporter;", "modifier": "private", "type": "BugReporter", "declarator": "bugReporter", "var_name": "bugReporter"}], "methods": [{"identifier": "ReDosDetector", "parameters": "(BugReporter bugReporter)", "modifiers": "public", "return": "", "signature": " ReDosDetector(BugReporter bugReporter)", "full_signature": "public  ReDosDetector(BugReporter bugReporter)", "class_method_signature": "ReDosDetector.ReDosDetector(BugReporter bugReporter)", "testcase": false, "constructor": true}, {"identifier": "sawOpcode", "parameters": "(int seen)", "modifiers": "@Override public", "return": "void", "signature": "void sawOpcode(int seen)", "full_signature": "@Override public void sawOpcode(int seen)", "class_method_signature": "ReDosDetector.sawOpcode(int seen)", "testcase": false, "constructor": false}, {"identifier": "analyseRegexString", "parameters": "(String regex)", "modifiers": "public", "return": "void", "signature": "void analyseRegexString(String regex)", "full_signature": "public void analyseRegexString(String regex)", "class_method_signature": "ReDosDetector.analyseRegexString(String regex)", "testcase": false, "constructor": false}, {"identifier": "recurAnalyseRegex", "parameters": "(String regex, int startPosition, int level)", "modifiers": "private", "return": "int", "signature": "int recurAnalyseRegex(String regex, int startPosition, int level)", "full_signature": "private int recurAnalyseRegex(String regex, int startPosition, int level)", "class_method_signature": "ReDosDetector.recurAnalyseRegex(String regex, int startPosition, int level)", "testcase": false, "constructor": false}, {"identifier": "isChar", "parameters": "(String value, int position, char[] charToTest)", "modifiers": "private", "return": "boolean", "signature": "boolean isChar(String value, int position, char[] charToTest)", "full_signature": "private boolean isChar(String value, int position, char[] charToTest)", "class_method_signature": "ReDosDetector.isChar(String value, int position, char[] charToTest)", "testcase": false, "constructor": false}], "file": "findsecbugs-plugin/src/main/java/com/h3xstream/findsecbugs/ReDosDetector.java"}, "focal_method": {"identifier": "analyseRegexString", "parameters": "(String regex)", "modifiers": "public", "return": "void", "body": "public void analyseRegexString(String regex) {\n        if (regex.length() > 0) {\n            recurAnalyseRegex(regex, regex.length() - 1, 0);\n        }\n    }", "signature": "void analyseRegexString(String regex)", "full_signature": "public void analyseRegexString(String regex)", "class_method_signature": "ReDosDetector.analyseRegexString(String regex)", "testcase": false, "constructor": false, "invocations": ["length", "recurAnalyseRegex", "length"]}, "repository": {"repo_id": 4354801, "url": "https://github.com/find-sec-bugs/find-sec-bugs", "stars": 1292, "created": "5/17/2012 4:07:57 AM +00:00", "updates": "2020-01-27T13:17:10+00:00", "fork": "False", "license": "licensed"}}