{"test_class": {"identifier": "HandlerRedirectUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String localJobManagerAddress = \"akka.tcp://flink@127.0.0.1:1234/user/foobar\";", "modifier": "static final", "type": "String", "declarator": "localJobManagerAddress = \"akka.tcp://flink@127.0.0.1:1234/user/foobar\"", "var_name": "localJobManagerAddress"}, {"original_string": "static final String remoteURL = \"127.0.0.2:1235\";", "modifier": "static final", "type": "String", "declarator": "remoteURL = \"127.0.0.2:1235\"", "var_name": "remoteURL"}, {"original_string": "static final String remotePath = \"akka.tcp://flink@\" + remoteURL + \"/user/jobmanager\";", "modifier": "static final", "type": "String", "declarator": "remotePath = \"akka.tcp://flink@\" + remoteURL + \"/user/jobmanager\"", "var_name": "remotePath"}], "file": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/handlers/HandlerRedirectUtilsTest.java"}, "test_case": {"identifier": "testGetRedirectAddressWithRemoteAkkaPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetRedirectAddressWithRemoteAkkaPath() throws Exception {\n\t\tActorGateway leaderGateway = new DummyActorGateway(remotePath);\n\n\t\tTuple2<ActorGateway, Integer> leader = new Tuple2<>(leaderGateway, 1235);\n\n\t\tString redirectingAddress =HandlerRedirectUtils.getRedirectAddress(localJobManagerAddress, leader);\n\n\t\tAssert.assertEquals(remoteURL, redirectingAddress);\n\t}", "signature": "void testGetRedirectAddressWithRemoteAkkaPath()", "full_signature": "@Test public void testGetRedirectAddressWithRemoteAkkaPath()", "class_method_signature": "HandlerRedirectUtilsTest.testGetRedirectAddressWithRemoteAkkaPath()", "testcase": true, "constructor": false, "invocations": ["getRedirectAddress", "assertEquals"]}, "focal_class": {"identifier": "HandlerRedirectUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HandlerRedirectUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HandlerRedirectUtils.class)", "var_name": "LOG"}, {"original_string": "private final static Pattern LeaderAddressHostPattern = Pattern.compile(\"^.+@(.+):([0-9]+)/user/.+$\");", "modifier": "private final static", "type": "Pattern", "declarator": "LeaderAddressHostPattern = Pattern.compile(\"^.+@(.+):([0-9]+)/user/.+$\")", "var_name": "LeaderAddressHostPattern"}], "methods": [{"identifier": "getRedirectAddress", "parameters": "(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "modifiers": "public static", "return": "String", "signature": "String getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "full_signature": "public static String getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "class_method_signature": "HandlerRedirectUtils.getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "testcase": false, "constructor": false}, {"identifier": "getRedirectResponse", "parameters": "(String redirectAddress, String path)", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse getRedirectResponse(String redirectAddress, String path)", "full_signature": "public static HttpResponse getRedirectResponse(String redirectAddress, String path)", "class_method_signature": "HandlerRedirectUtils.getRedirectResponse(String redirectAddress, String path)", "testcase": false, "constructor": false}, {"identifier": "getUnavailableResponse", "parameters": "()", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse getUnavailableResponse()", "full_signature": "public static HttpResponse getUnavailableResponse()", "class_method_signature": "HandlerRedirectUtils.getUnavailableResponse()", "testcase": false, "constructor": false}], "file": "flink-runtime-web/src/main/java/org/apache/flink/runtime/webmonitor/handlers/HandlerRedirectUtils.java"}, "focal_method": {"identifier": "getRedirectAddress", "parameters": "(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "modifiers": "public static", "return": "String", "body": "public static String getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader) throws Exception {\n\n\t\tfinal String leaderAddress = leader._1().path();\n\t\tfinal int webMonitorPort = leader._2();\n\n\t\tfinal String jobManagerName = localJobManagerAddress.substring(localJobManagerAddress.lastIndexOf(\"/\") + 1);\n\n\t\tif (!localJobManagerAddress.equals(leaderAddress) &&\n\t\t\t!leaderAddress.equals(JobManager.getLocalJobManagerAkkaURL(Option.apply(jobManagerName)))) {\n\t\t\t// We are not the leader and need to redirect\n\t\t\tMatcher matcher = LeaderAddressHostPattern.matcher(leaderAddress);\n\n\t\t\tif (matcher.matches()) {\n\t\t\t\tString redirectAddress = String.format(\"%s:%d\", matcher.group(1), webMonitorPort);\n\t\t\t\treturn redirectAddress;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLOG.warn(\"Unexpected leader address pattern {}. Cannot extract host.\", leaderAddress);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}", "signature": "String getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "full_signature": "public static String getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "class_method_signature": "HandlerRedirectUtils.getRedirectAddress(\n\t\t\tString localJobManagerAddress,\n\t\t\tTuple2<ActorGateway, Integer> leader)", "testcase": false, "constructor": false, "invocations": ["path", "_1", "_2", "substring", "lastIndexOf", "equals", "equals", "getLocalJobManagerAkkaURL", "apply", "matcher", "matches", "format", "group", "warn"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}