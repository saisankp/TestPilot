{"test_class": {"identifier": "PersonTest", "superclass": "extends AbstractIntegrationTest", "interfaces": "", "fields": [{"original_string": "private Person person1;", "modifier": "private", "type": "Person", "declarator": "person1", "var_name": "person1"}, {"original_string": "private Person person2;", "modifier": "private", "type": "Person", "declarator": "person2", "var_name": "person2"}], "file": "dayatang-hrm-organisation/src/test/java/org/dayatang/hrm/organisation/domain/PersonTest.java"}, "test_case": {"identifier": "testGetIms", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetIms() {\n\t\tString jpql = \"select o from Person o join o.ims i where KEY(i) = :imType and i = :im\";\n\t\tEntityRepository repository = InstanceFactory.getInstance(EntityRepository.class);\n\t\tList<Person> persons = repository.createJpqlQuery(jpql)\n\t\t\t\t.addParameter(\"imType\", ImType.QQ).addParameter(\"im\", \"666666\").list();\n\t\tassertFalse(persons.contains(person1));\n\t\tassertTrue(persons.contains(person2));\n\t}", "signature": "void testGetIms()", "full_signature": "@Test public void testGetIms()", "class_method_signature": "PersonTest.testGetIms()", "testcase": true, "constructor": false, "invocations": ["getInstance", "list", "addParameter", "addParameter", "createJpqlQuery", "assertFalse", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "Person", "superclass": "extends AbstractEntity", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 4180083929142881138L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4180083929142881138L", "var_name": "serialVersionUID"}, {"original_string": "@Embedded\n    private PersonName name;", "modifier": "@Embedded\n    private", "type": "PersonName", "declarator": "name", "var_name": "name"}, {"original_string": "private String idNumber;", "modifier": "private", "type": "String", "declarator": "idNumber", "var_name": "idNumber"}, {"original_string": "@ElementCollection\n    @CollectionTable(name = \"person_emails\", joinColumns = @JoinColumn(name = \"person_id\"))\n    private Set<Email> emails = new HashSet<Email>();", "modifier": "@ElementCollection\n    @CollectionTable(name = \"person_emails\", joinColumns = @JoinColumn(name = \"person_id\"))\n    private", "type": "Set<Email>", "declarator": "emails = new HashSet<Email>()", "var_name": "emails"}, {"original_string": "@ElementCollection\n    @CollectionTable(name = \"person_ims\", joinColumns = @JoinColumn(name = \"person_id\"))\n    @MapKeyColumn(name = \"im_type\")\n    @MapKeyEnumerated(EnumType.STRING)\n    @Column(name = \"im_address\")\n    private Map<ImType, String> ims = new HashMap<ImType, String>();", "modifier": "@ElementCollection\n    @CollectionTable(name = \"person_ims\", joinColumns = @JoinColumn(name = \"person_id\"))\n    @MapKeyColumn(name = \"im_type\")\n    @MapKeyEnumerated(EnumType.STRING)\n    @Column(name = \"im_address\")\n    private", "type": "Map<ImType, String>", "declarator": "ims = new HashMap<ImType, String>()", "var_name": "ims"}, {"original_string": "@Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"province\", column = @Column(name = \"home_province\")),\n            @AttributeOverride(name = \"city\", column = @Column(name = \"home_city\")),\n            @AttributeOverride(name = \"detail\", column = @Column(name = \"home_detail\"))\n    })\n    private Address homeAddress;", "modifier": "@Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"province\", column = @Column(name = \"home_province\")),\n            @AttributeOverride(name = \"city\", column = @Column(name = \"home_city\")),\n            @AttributeOverride(name = \"detail\", column = @Column(name = \"home_detail\"))\n    })\n    private", "type": "Address", "declarator": "homeAddress", "var_name": "homeAddress"}, {"original_string": "@Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"province\", column = @Column(name = \"mail_province\")),\n            @AttributeOverride(name = \"city\", column = @Column(name = \"mail_city\")),\n            @AttributeOverride(name = \"detail\", column = @Column(name = \"mail_detail\"))\n    })\n    private Address mailAddress;", "modifier": "@Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"province\", column = @Column(name = \"mail_province\")),\n            @AttributeOverride(name = \"city\", column = @Column(name = \"mail_city\")),\n            @AttributeOverride(name = \"detail\", column = @Column(name = \"mail_detail\"))\n    })\n    private", "type": "Address", "declarator": "mailAddress", "var_name": "mailAddress"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "PersonName", "signature": "PersonName getName()", "full_signature": "public PersonName getName()", "class_method_signature": "Person.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(PersonName name)", "modifiers": "public", "return": "void", "signature": "void setName(PersonName name)", "full_signature": "public void setName(PersonName name)", "class_method_signature": "Person.setName(PersonName name)", "testcase": false, "constructor": false}, {"identifier": "getIdNumber", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIdNumber()", "full_signature": "public String getIdNumber()", "class_method_signature": "Person.getIdNumber()", "testcase": false, "constructor": false}, {"identifier": "setIdNumber", "parameters": "(String idNumber)", "modifiers": "public", "return": "void", "signature": "void setIdNumber(String idNumber)", "full_signature": "public void setIdNumber(String idNumber)", "class_method_signature": "Person.setIdNumber(String idNumber)", "testcase": false, "constructor": false}, {"identifier": "getEmails", "parameters": "()", "modifiers": "public", "return": "Set<Email>", "signature": "Set<Email> getEmails()", "full_signature": "public Set<Email> getEmails()", "class_method_signature": "Person.getEmails()", "testcase": false, "constructor": false}, {"identifier": "setEmails", "parameters": "(Set<Email> emails)", "modifiers": "public", "return": "void", "signature": "void setEmails(Set<Email> emails)", "full_signature": "public void setEmails(Set<Email> emails)", "class_method_signature": "Person.setEmails(Set<Email> emails)", "testcase": false, "constructor": false}, {"identifier": "addEmail", "parameters": "(Email email)", "modifiers": "public", "return": "void", "signature": "void addEmail(Email email)", "full_signature": "public void addEmail(Email email)", "class_method_signature": "Person.addEmail(Email email)", "testcase": false, "constructor": false}, {"identifier": "removeEmail", "parameters": "(Email email)", "modifiers": "public", "return": "void", "signature": "void removeEmail(Email email)", "full_signature": "public void removeEmail(Email email)", "class_method_signature": "Person.removeEmail(Email email)", "testcase": false, "constructor": false}, {"identifier": "getIms", "parameters": "()", "modifiers": "public", "return": "Map<ImType, String>", "signature": "Map<ImType, String> getIms()", "full_signature": "public Map<ImType, String> getIms()", "class_method_signature": "Person.getIms()", "testcase": false, "constructor": false}, {"identifier": "setIms", "parameters": "(Map<ImType, String> ims)", "modifiers": "public", "return": "void", "signature": "void setIms(Map<ImType, String> ims)", "full_signature": "public void setIms(Map<ImType, String> ims)", "class_method_signature": "Person.setIms(Map<ImType, String> ims)", "testcase": false, "constructor": false}, {"identifier": "setIm", "parameters": "(ImType imType, String imAddress)", "modifiers": "public", "return": "void", "signature": "void setIm(ImType imType, String imAddress)", "full_signature": "public void setIm(ImType imType, String imAddress)", "class_method_signature": "Person.setIm(ImType imType, String imAddress)", "testcase": false, "constructor": false}, {"identifier": "removeIm", "parameters": "(ImType imType)", "modifiers": "public", "return": "void", "signature": "void removeIm(ImType imType)", "full_signature": "public void removeIm(ImType imType)", "class_method_signature": "Person.removeIm(ImType imType)", "testcase": false, "constructor": false}, {"identifier": "getHomeAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address getHomeAddress()", "full_signature": "public Address getHomeAddress()", "class_method_signature": "Person.getHomeAddress()", "testcase": false, "constructor": false}, {"identifier": "setHomeAddress", "parameters": "(Address homeAddress)", "modifiers": "public", "return": "void", "signature": "void setHomeAddress(Address homeAddress)", "full_signature": "public void setHomeAddress(Address homeAddress)", "class_method_signature": "Person.setHomeAddress(Address homeAddress)", "testcase": false, "constructor": false}, {"identifier": "getMailAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address getMailAddress()", "full_signature": "public Address getMailAddress()", "class_method_signature": "Person.getMailAddress()", "testcase": false, "constructor": false}, {"identifier": "setMailAddress", "parameters": "(Address mailAddress)", "modifiers": "public", "return": "void", "signature": "void setMailAddress(Address mailAddress)", "full_signature": "public void setMailAddress(Address mailAddress)", "class_method_signature": "Person.setMailAddress(Address mailAddress)", "testcase": false, "constructor": false}, {"identifier": "businessKeys", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] businessKeys()", "full_signature": "@Override public String[] businessKeys()", "class_method_signature": "Person.businessKeys()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Person.toString()", "testcase": false, "constructor": false}], "file": "dayatang-hrm-organisation/src/main/java/org/dayatang/hrm/organisation/domain/Person.java"}, "focal_method": {"identifier": "getIms", "parameters": "()", "modifiers": "public", "return": "Map<ImType, String>", "body": "public Map<ImType, String> getIms() {\n        return Collections.unmodifiableMap(ims);\n    }", "signature": "Map<ImType, String> getIms()", "full_signature": "public Map<ImType, String> getIms()", "class_method_signature": "Person.getIms()", "testcase": false, "constructor": false, "invocations": ["unmodifiableMap"]}, "repository": {"repo_id": 12481904, "url": "https://github.com/dayatang/hrm-demo", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 80, "size": 853, "license": "licensed"}}