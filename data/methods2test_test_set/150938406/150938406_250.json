{"test_class": {"identifier": "DenseVectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}], "file": "core/src/test/java/com/alibaba/alink/common/linalg/DenseVectorTest.java"}, "test_case": {"identifier": "testSlice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSlice() throws Exception {\n        DenseVector vec = new DenseVector(new double[]{1, 2, -3});\n        DenseVector sliced = vec.slice(new int[]{0, 2});\n        Assert.assertArrayEquals(new double[]{1, -3}, sliced.getData(), 0);\n    }", "signature": "void testSlice()", "full_signature": "@Test public void testSlice()", "class_method_signature": "DenseVectorTest.testSlice()", "testcase": true, "constructor": false, "invocations": ["slice", "assertArrayEquals", "getData"]}, "focal_class": {"identifier": "DenseVector", "superclass": "extends Vector", "interfaces": "", "fields": [{"original_string": "double[] data;", "modifier": "", "type": "double[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "DenseVector", "parameters": "()", "modifiers": "public", "return": "", "signature": " DenseVector()", "full_signature": "public  DenseVector()", "class_method_signature": "DenseVector.DenseVector()", "testcase": false, "constructor": true}, {"identifier": "DenseVector", "parameters": "(int n)", "modifiers": "public", "return": "", "signature": " DenseVector(int n)", "full_signature": "public  DenseVector(int n)", "class_method_signature": "DenseVector.DenseVector(int n)", "testcase": false, "constructor": true}, {"identifier": "DenseVector", "parameters": "(double[] data)", "modifiers": "public", "return": "", "signature": " DenseVector(double[] data)", "full_signature": "public  DenseVector(double[] data)", "class_method_signature": "DenseVector.DenseVector(double[] data)", "testcase": false, "constructor": true}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData()", "full_signature": "public double[] getData()", "class_method_signature": "DenseVector.getData()", "testcase": false, "constructor": false}, {"identifier": "setData", "parameters": "(double[] data)", "modifiers": "public", "return": "void", "signature": "void setData(double[] data)", "full_signature": "public void setData(double[] data)", "class_method_signature": "DenseVector.setData(double[] data)", "testcase": false, "constructor": false}, {"identifier": "ones", "parameters": "(int n)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector ones(int n)", "full_signature": "public static DenseVector ones(int n)", "class_method_signature": "DenseVector.ones(int n)", "testcase": false, "constructor": false}, {"identifier": "zeros", "parameters": "(int n)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector zeros(int n)", "full_signature": "public static DenseVector zeros(int n)", "class_method_signature": "DenseVector.zeros(int n)", "testcase": false, "constructor": false}, {"identifier": "rand", "parameters": "(int n)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector rand(int n)", "full_signature": "public static DenseVector rand(int n)", "class_method_signature": "DenseVector.rand(int n)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector clone()", "full_signature": "@Override public DenseVector clone()", "class_method_signature": "DenseVector.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DenseVector.toString()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DenseVector.size()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "@Override public", "return": "double", "signature": "double get(int i)", "full_signature": "@Override public double get(int i)", "class_method_signature": "DenseVector.get(int i)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, double d)", "modifiers": "@Override public", "return": "void", "signature": "void set(int i, double d)", "full_signature": "@Override public void set(int i, double d)", "class_method_signature": "DenseVector.set(int i, double d)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int i, double d)", "modifiers": "@Override public", "return": "void", "signature": "void add(int i, double d)", "full_signature": "@Override public void add(int i, double d)", "class_method_signature": "DenseVector.add(int i, double d)", "testcase": false, "constructor": false}, {"identifier": "normL1", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL1()", "full_signature": "@Override public double normL1()", "class_method_signature": "DenseVector.normL1()", "testcase": false, "constructor": false}, {"identifier": "normL2", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL2()", "full_signature": "@Override public double normL2()", "class_method_signature": "DenseVector.normL2()", "testcase": false, "constructor": false}, {"identifier": "normL2Square", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL2Square()", "full_signature": "@Override public double normL2Square()", "class_method_signature": "DenseVector.normL2Square()", "testcase": false, "constructor": false}, {"identifier": "normInf", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normInf()", "full_signature": "@Override public double normInf()", "class_method_signature": "DenseVector.normInf()", "testcase": false, "constructor": false}, {"identifier": "slice", "parameters": "(int[] indices)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector slice(int[] indices)", "full_signature": "@Override public DenseVector slice(int[] indices)", "class_method_signature": "DenseVector.slice(int[] indices)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(double d)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector prefix(double d)", "full_signature": "@Override public DenseVector prefix(double d)", "class_method_signature": "DenseVector.prefix(double d)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(double d)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector append(double d)", "full_signature": "@Override public DenseVector append(double d)", "class_method_signature": "DenseVector.append(double d)", "testcase": false, "constructor": false}, {"identifier": "scaleEqual", "parameters": "(double d)", "modifiers": "@Override public", "return": "void", "signature": "void scaleEqual(double d)", "full_signature": "@Override public void scaleEqual(double d)", "class_method_signature": "DenseVector.scaleEqual(double d)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(Vector other)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector plus(Vector other)", "full_signature": "@Override public DenseVector plus(Vector other)", "class_method_signature": "DenseVector.plus(Vector other)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector other)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector minus(Vector other)", "full_signature": "@Override public DenseVector minus(Vector other)", "class_method_signature": "DenseVector.minus(Vector other)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(double d)", "modifiers": "@Override public", "return": "DenseVector", "signature": "DenseVector scale(double d)", "full_signature": "@Override public DenseVector scale(double d)", "class_method_signature": "DenseVector.scale(double d)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "double", "signature": "double dot(Vector vec)", "full_signature": "@Override public double dot(Vector vec)", "class_method_signature": "DenseVector.dot(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "standardizeEqual", "parameters": "(double mean, double stdvar)", "modifiers": "@Override public", "return": "void", "signature": "void standardizeEqual(double mean, double stdvar)", "full_signature": "@Override public void standardizeEqual(double mean, double stdvar)", "class_method_signature": "DenseVector.standardizeEqual(double mean, double stdvar)", "testcase": false, "constructor": false}, {"identifier": "normalizeEqual", "parameters": "(double p)", "modifiers": "@Override public", "return": "void", "signature": "void normalizeEqual(double p)", "full_signature": "@Override public void normalizeEqual(double p)", "class_method_signature": "DenseVector.normalizeEqual(double p)", "testcase": false, "constructor": false}, {"identifier": "setEqual", "parameters": "(DenseVector other)", "modifiers": "public", "return": "void", "signature": "void setEqual(DenseVector other)", "full_signature": "public void setEqual(DenseVector other)", "class_method_signature": "DenseVector.setEqual(DenseVector other)", "testcase": false, "constructor": false}, {"identifier": "plusEqual", "parameters": "(Vector other)", "modifiers": "public", "return": "void", "signature": "void plusEqual(Vector other)", "full_signature": "public void plusEqual(Vector other)", "class_method_signature": "DenseVector.plusEqual(Vector other)", "testcase": false, "constructor": false}, {"identifier": "minusEqual", "parameters": "(Vector other)", "modifiers": "public", "return": "void", "signature": "void minusEqual(Vector other)", "full_signature": "public void minusEqual(Vector other)", "class_method_signature": "DenseVector.minusEqual(Vector other)", "testcase": false, "constructor": false}, {"identifier": "plusScaleEqual", "parameters": "(Vector other, double alpha)", "modifiers": "public", "return": "void", "signature": "void plusScaleEqual(Vector other, double alpha)", "full_signature": "public void plusScaleEqual(Vector other, double alpha)", "class_method_signature": "DenseVector.plusScaleEqual(Vector other, double alpha)", "testcase": false, "constructor": false}, {"identifier": "outer", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix outer()", "full_signature": "@Override public DenseMatrix outer()", "class_method_signature": "DenseVector.outer()", "testcase": false, "constructor": false}, {"identifier": "outer", "parameters": "(DenseVector other)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix outer(DenseVector other)", "full_signature": "public DenseMatrix outer(DenseVector other)", "class_method_signature": "DenseVector.outer(DenseVector other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DenseVector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DenseVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "VectorIterator", "signature": "VectorIterator iterator()", "full_signature": "@Override public VectorIterator iterator()", "class_method_signature": "DenseVector.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/DenseVector.java"}, "focal_method": {"identifier": "slice", "parameters": "(int[] indices)", "modifiers": "@Override public", "return": "DenseVector", "body": "@Override\n    public DenseVector slice(int[] indices) {\n        double[] values = new double[indices.length];\n        for (int i = 0; i < indices.length; ++i) {\n            if (indices[i] >= data.length) {\n                throw new IllegalArgumentException(\"Index is larger than vector size.\");\n            }\n            values[i] = data[indices[i]];\n        }\n        return new DenseVector(values);\n    }", "signature": "DenseVector slice(int[] indices)", "full_signature": "@Override public DenseVector slice(int[] indices)", "class_method_signature": "DenseVector.slice(int[] indices)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}