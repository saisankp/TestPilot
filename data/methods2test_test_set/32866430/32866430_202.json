{"test_class": {"identifier": "LdapAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock LdapConnectionFactory ldapConnectionFactory;", "modifier": "@Mock", "type": "LdapConnectionFactory", "declarator": "ldapConnectionFactory", "var_name": "ldapConnectionFactory"}, {"original_string": "@Mock LDAPConnection ldapConnection;", "modifier": "@Mock", "type": "LDAPConnection", "declarator": "ldapConnection", "var_name": "ldapConnection"}, {"original_string": "@Mock LDAPConnection ldapUserAuthConnection;", "modifier": "@Mock", "type": "LDAPConnection", "declarator": "ldapUserAuthConnection", "var_name": "ldapUserAuthConnection"}, {"original_string": "@Mock SearchResult dnSearchResult;", "modifier": "@Mock", "type": "SearchResult", "declarator": "dnSearchResult", "var_name": "dnSearchResult"}, {"original_string": "@Mock SearchResult roleSearchResult;", "modifier": "@Mock", "type": "SearchResult", "declarator": "roleSearchResult", "var_name": "roleSearchResult"}, {"original_string": "private static final String PEOPLE_DN = \"cn=sysadmin,ou=users\";", "modifier": "private static final", "type": "String", "declarator": "PEOPLE_DN = \"cn=sysadmin,ou=users\"", "var_name": "PEOPLE_DN"}, {"original_string": "LdapAuthenticator ldapAuthenticator;", "modifier": "", "type": "LdapAuthenticator", "declarator": "ldapAuthenticator", "var_name": "ldapAuthenticator"}], "file": "server/src/test/java/keywhiz/auth/ldap/LdapAuthenticatorTest.java"}, "test_case": {"identifier": "ldapAuthenticatorThrowsWhenAuthFails", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n  @Test\n  public void ldapAuthenticatorThrowsWhenAuthFails() throws Exception {\n    // Zero results on a search indicates no valid user.\n    when(dnSearchResult.getEntryCount()).thenReturn(0);\n\n    Optional<User> missingUser =\n        ldapAuthenticator.authenticate(new BasicCredentials(\"sysadmin\", \"badpass\"));\n    assertThat(missingUser).isEmpty();\n  }", "signature": "void ldapAuthenticatorThrowsWhenAuthFails()", "full_signature": "@Ignore @Test public void ldapAuthenticatorThrowsWhenAuthFails()", "class_method_signature": "LdapAuthenticatorTest.ldapAuthenticatorThrowsWhenAuthFails()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getEntryCount", "authenticate", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "LdapAuthenticator", "superclass": "", "interfaces": "implements Authenticator<BasicCredentials, User>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LdapAuthenticator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LdapAuthenticator.class)", "var_name": "logger"}, {"original_string": "private final LdapConnectionFactory connectionFactory;", "modifier": "private final", "type": "LdapConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private final LdapLookupConfig config;", "modifier": "private final", "type": "LdapLookupConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "LdapAuthenticator", "parameters": "(LdapConnectionFactory connectionFactory, LdapLookupConfig config)", "modifiers": "public", "return": "", "signature": " LdapAuthenticator(LdapConnectionFactory connectionFactory, LdapLookupConfig config)", "full_signature": "public  LdapAuthenticator(LdapConnectionFactory connectionFactory, LdapLookupConfig config)", "class_method_signature": "LdapAuthenticator.LdapAuthenticator(LdapConnectionFactory connectionFactory, LdapLookupConfig config)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(BasicCredentials credentials)", "modifiers": "@Override public", "return": "Optional<User>", "signature": "Optional<User> authenticate(BasicCredentials credentials)", "full_signature": "@Override public Optional<User> authenticate(BasicCredentials credentials)", "class_method_signature": "LdapAuthenticator.authenticate(BasicCredentials credentials)", "testcase": false, "constructor": false}, {"identifier": "dnFromUsername", "parameters": "(String username)", "modifiers": "private", "return": "String", "signature": "String dnFromUsername(String username)", "full_signature": "private String dnFromUsername(String username)", "class_method_signature": "LdapAuthenticator.dnFromUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "rolesFromDN", "parameters": "(String userDN)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> rolesFromDN(String userDN)", "full_signature": "private Set<String> rolesFromDN(String userDN)", "class_method_signature": "LdapAuthenticator.rolesFromDN(String userDN)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/auth/ldap/LdapAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(BasicCredentials credentials)", "modifiers": "@Override public", "return": "Optional<User>", "body": "@Override\n  public Optional<User> authenticate(BasicCredentials credentials) {\n    User user = null;\n\n    try {\n      String username = credentials.getUsername();\n      if (!User.isSanitizedUsername(username)) {\n        logger.info(\"Username: {} must match pattern: {}\", username, User.USERNAME_PATTERN);\n        return Optional.empty();\n      }\n\n      String userDN = dnFromUsername(username);\n      String password = credentials.getPassword();\n\n      // Must have password for current config\n      if (Strings.isNullOrEmpty(password)) {\n        logger.info(\"No password for user provided\");\n        return Optional.empty();\n      }\n\n      LDAPConnection authenticatedConnection = connectionFactory.getLDAPConnection(userDN, password);\n      authenticatedConnection.close();\n\n      Set<String> requiredRoles = config.getRequiredRoles();\n      if (!requiredRoles.isEmpty()) {\n        Set<String> roles = rolesFromDN(userDN);\n\n        boolean accessAllowed = false;\n        for (String requiredRole : requiredRoles) {\n          if (roles.contains(requiredRole)) {\n            accessAllowed = true;\n          }\n        }\n\n        if (!accessAllowed) {\n          logger.warn(\"User {} not in one of required LDAP roles: [{}].\", username, requiredRoles);\n          throw new ForbiddenException();\n        }\n      }\n\n      user = User.named(username);\n    } catch (LDAPException le) {\n      // The INVALID_CREDENTIALS case is handled by returning an absent optional from this function\n      if (le.getResultCode() != ResultCode.INVALID_CREDENTIALS) {\n        logger.error(\"Error connecting to LDAP\", le);\n        throw Throwables.propagate(le);\n      }\n    } catch (GeneralSecurityException gse) {\n        logger.error(\"TLS error connecting to LDAP\", gse);\n        throw Throwables.propagate(gse);\n    }\n\n    return Optional.ofNullable(user);\n  }", "signature": "Optional<User> authenticate(BasicCredentials credentials)", "full_signature": "@Override public Optional<User> authenticate(BasicCredentials credentials)", "class_method_signature": "LdapAuthenticator.authenticate(BasicCredentials credentials)", "testcase": false, "constructor": false, "invocations": ["getUsername", "isSanitizedUsername", "info", "empty", "dnFromUsername", "getPassword", "isNullOrEmpty", "info", "empty", "getLDAPConnection", "close", "getRequiredRoles", "isEmpty", "rolesFromDN", "contains", "warn", "named", "getResultCode", "error", "propagate", "error", "propagate", "ofNullable"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}