{"test_class": {"identifier": "SimpleDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleDataStore dataStore = new SimpleDataStore();", "modifier": "private", "type": "SimpleDataStore", "declarator": "dataStore = new SimpleDataStore()", "var_name": "dataStore"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/store/support/SimpleDataStoreTest.java"}, "test_case": {"identifier": "testRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove() throws Exception {\n        dataStore.remove(\"xxx\", \"yyy\");\n\n        dataStore.put(\"name\", \"key\", \"1\");\n        dataStore.remove(\"name\", \"key\");\n        assertNull(dataStore.get(\"name\", \"key\"));\n    }", "signature": "void testRemove()", "full_signature": "@Test public void testRemove()", "class_method_signature": "SimpleDataStoreTest.testRemove()", "testcase": true, "constructor": false, "invocations": ["remove", "put", "remove", "assertNull", "get"]}, "focal_class": {"identifier": "SimpleDataStore", "superclass": "", "interfaces": "implements DataStore", "fields": [{"original_string": "private ConcurrentMap<String, ConcurrentMap<String, Object>> data =\n            new ConcurrentHashMap<String, ConcurrentMap<String, Object>>();", "modifier": "private", "type": "ConcurrentMap<String, ConcurrentMap<String, Object>>", "declarator": "data =\n            new ConcurrentHashMap<String, ConcurrentMap<String, Object>>()", "var_name": "data"}], "methods": [{"identifier": "get", "parameters": "(String componentName)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> get(String componentName)", "full_signature": "@Override public Map<String, Object> get(String componentName)", "class_method_signature": "SimpleDataStore.get(String componentName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String componentName, String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(String componentName, String key)", "full_signature": "@Override public Object get(String componentName, String key)", "class_method_signature": "SimpleDataStore.get(String componentName, String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String componentName, String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void put(String componentName, String key, Object value)", "full_signature": "@Override public void put(String componentName, String key, Object value)", "class_method_signature": "SimpleDataStore.put(String componentName, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String componentName, String key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String componentName, String key)", "full_signature": "@Override public void remove(String componentName, String key)", "class_method_signature": "SimpleDataStore.remove(String componentName, String key)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java"}, "focal_method": {"identifier": "remove", "parameters": "(String componentName, String key)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void remove(String componentName, String key) {\n        if (!data.containsKey(componentName)) {\n            return;\n        }\n        data.get(componentName).remove(key);\n    }", "signature": "void remove(String componentName, String key)", "full_signature": "@Override public void remove(String componentName, String key)", "class_method_signature": "SimpleDataStore.remove(String componentName, String key)", "testcase": false, "constructor": false, "invocations": ["containsKey", "remove", "get"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}