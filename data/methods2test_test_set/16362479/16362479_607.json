{"test_class": {"identifier": "ShardManagerGetSnapshotReplyActorTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private static final MemberName MEMBER_1 = MemberName.forName(\"member-1\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_1 = MemberName.forName(\"member-1\")", "var_name": "MEMBER_1"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManagerGetSnapshotReplyActorTest.java"}, "test_case": {"identifier": "testSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccess() {\n        TestKit kit = new TestKit(getSystem());\n\n        List<String> shardList = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n        ShardManagerSnapshot shardManagerSnapshot = new ShardManagerSnapshot(shardList, Collections.emptyMap());\n        ActorRef replyActor = getSystem().actorOf(ShardManagerGetSnapshotReplyActor.props(\n                shardList, \"config\", shardManagerSnapshot, kit.getRef(),\n                \"shard-manager\", FiniteDuration.create(100, TimeUnit.SECONDS)), \"testSuccess\");\n\n        kit.watch(replyActor);\n\n        ByteState shard1SnapshotState = ByteState.of(new byte[]{1,2,3});\n        replyActor.tell(new GetSnapshotReply(ShardIdentifier.create(\"shard1\", MEMBER_1, \"config\").toString(),\n                Snapshot.create(shard1SnapshotState, Collections.<ReplicatedLogEntry>emptyList(),\n                        2, 1, 2, 1, 1, \"member-1\", null)), ActorRef.noSender());\n\n        ByteState shard2SnapshotState = ByteState.of(new byte[]{4,5,6});\n        replyActor.tell(new GetSnapshotReply(ShardIdentifier.create(\"shard2\", MEMBER_1, \"config\").toString(),\n                Snapshot.create(shard2SnapshotState, Collections.<ReplicatedLogEntry>emptyList(),\n                        2, 1, 2, 1, 1, \"member-1\", null)), ActorRef.noSender());\n\n        kit.expectNoMessage(Duration.ofMillis(500));\n\n        ByteState shard3SnapshotState = ByteState.of(new byte[]{7,8,9});\n        replyActor.tell(new GetSnapshotReply(ShardIdentifier.create(\"shard3\", MEMBER_1, \"config\").toString(),\n                Snapshot.create(shard3SnapshotState, Collections.<ReplicatedLogEntry>emptyList(),\n                        2, 1, 2, 1, 1, \"member-1\", null)), ActorRef.noSender());\n\n        DatastoreSnapshot datastoreSnapshot = kit.expectMsgClass(DatastoreSnapshot.class);\n\n        assertEquals(\"getType\", \"config\", datastoreSnapshot.getType());\n        assertEquals(\"getShardManagerSnapshot\", shardManagerSnapshot.getShardList(),\n                datastoreSnapshot.getShardManagerSnapshot().getShardList());\n        List<ShardSnapshot> shardSnapshots = datastoreSnapshot.getShardSnapshots();\n        assertEquals(\"ShardSnapshot size\", 3, shardSnapshots.size());\n        assertEquals(\"ShardSnapshot 1 getName\", \"shard1\", shardSnapshots.get(0).getName());\n        assertEquals(\"ShardSnapshot 1 getSnapshot\", shard1SnapshotState,\n                shardSnapshots.get(0).getSnapshot().getState());\n        assertEquals(\"ShardSnapshot 2 getName\", \"shard2\", shardSnapshots.get(1).getName());\n        assertEquals(\"ShardSnapshot 2 getSnapshot\", shard2SnapshotState,\n                shardSnapshots.get(1).getSnapshot().getState());\n        assertEquals(\"ShardSnapshot 3 getName\", \"shard3\", shardSnapshots.get(2).getName());\n        assertEquals(\"ShardSnapshot 3 getSnapshot\", shard3SnapshotState,\n                shardSnapshots.get(2).getSnapshot().getState());\n\n        kit.expectMsgClass(Terminated.class);\n    }", "signature": "void testSuccess()", "full_signature": "@Test public void testSuccess()", "class_method_signature": "ShardManagerGetSnapshotReplyActorTest.testSuccess()", "testcase": true, "constructor": false, "invocations": ["getSystem", "asList", "emptyMap", "actorOf", "getSystem", "props", "getRef", "create", "watch", "of", "tell", "toString", "create", "create", "emptyList", "noSender", "of", "tell", "toString", "create", "create", "emptyList", "noSender", "expectNoMessage", "ofMillis", "of", "tell", "toString", "create", "create", "emptyList", "noSender", "expectMsgClass", "assertEquals", "getType", "assertEquals", "getShardList", "getShardList", "getShardManagerSnapshot", "getShardSnapshots", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getState", "getSnapshot", "get", "assertEquals", "getName", "get", "assertEquals", "getState", "getSnapshot", "get", "assertEquals", "getName", "get", "assertEquals", "getState", "getSnapshot", "get", "expectMsgClass"]}, "focal_class": {"identifier": "ShardManagerGetSnapshotReplyActor", "superclass": "extends UntypedAbstractActor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShardManagerGetSnapshotReplyActor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShardManagerGetSnapshotReplyActor.class)", "var_name": "LOG"}, {"original_string": "private final Set<String> remainingShardNames;", "modifier": "private final", "type": "Set<String>", "declarator": "remainingShardNames", "var_name": "remainingShardNames"}, {"original_string": "private final Params params;", "modifier": "private final", "type": "Params", "declarator": "params", "var_name": "params"}, {"original_string": "private final List<ShardSnapshot> shardSnapshots = new ArrayList<>();", "modifier": "private final", "type": "List<ShardSnapshot>", "declarator": "shardSnapshots = new ArrayList<>()", "var_name": "shardSnapshots"}], "methods": [{"identifier": "ShardManagerGetSnapshotReplyActor", "parameters": "(final Params params)", "modifiers": "private", "return": "", "signature": " ShardManagerGetSnapshotReplyActor(final Params params)", "full_signature": "private  ShardManagerGetSnapshotReplyActor(final Params params)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.ShardManagerGetSnapshotReplyActor(final Params params)", "testcase": false, "constructor": true}, {"identifier": "onReceive", "parameters": "(final Object message)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(final Object message)", "full_signature": "@Override public void onReceive(final Object message)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.onReceive(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onGetSnapshotReply", "parameters": "(final GetSnapshotReply getSnapshotReply)", "modifiers": "private", "return": "void", "signature": "void onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "full_signature": "private void onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "testcase": false, "constructor": false}, {"identifier": "props", "parameters": "(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "modifiers": "public static", "return": "Props", "signature": "Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "full_signature": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManagerGetSnapshotReplyActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout) {\n        return Props.create(ShardManagerGetSnapshotReplyActor.class, new Params(shardNames, datastoreType,\n                shardManagerSnapshot, replyToActor, id, receiveTimeout));\n    }", "signature": "Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "full_signature": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}