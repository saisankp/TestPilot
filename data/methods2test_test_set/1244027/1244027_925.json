{"test_class": {"identifier": "CanonicalPlannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutionContext executionContext;", "modifier": "private", "type": "ExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}, {"original_string": "private CanonicalPlanner planner;", "modifier": "private", "type": "CanonicalPlanner", "declarator": "planner", "var_name": "planner"}, {"original_string": "private TypeSystem typeSystem;", "modifier": "private", "type": "TypeSystem", "declarator": "typeSystem", "var_name": "typeSystem"}, {"original_string": "private QueryBuilder builder;", "modifier": "private", "type": "QueryBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private PlanHints hints;", "modifier": "private", "type": "PlanHints", "declarator": "hints", "var_name": "hints"}, {"original_string": "private QueryCommand query;", "modifier": "private", "type": "QueryCommand", "declarator": "query", "var_name": "query"}, {"original_string": "private PlanNode plan;", "modifier": "private", "type": "PlanNode", "declarator": "plan", "var_name": "plan"}, {"original_string": "private Problems problems;", "modifier": "private", "type": "Problems", "declarator": "problems", "var_name": "problems"}, {"original_string": "private Schemata schemata;", "modifier": "private", "type": "Schemata", "declarator": "schemata", "var_name": "schemata"}, {"original_string": "private RepositoryIndexes indexDefns;", "modifier": "private", "type": "RepositoryIndexes", "declarator": "indexDefns", "var_name": "indexDefns"}, {"original_string": "private NodeTypes nodeTypes;", "modifier": "private", "type": "NodeTypes", "declarator": "nodeTypes", "var_name": "nodeTypes"}, {"original_string": "private ImmutableSchemata.Builder schemataBuilder;", "modifier": "private", "type": "ImmutableSchemata.Builder", "declarator": "schemataBuilder", "var_name": "schemataBuilder"}, {"original_string": "private QueryContext queryContext;", "modifier": "private", "type": "QueryContext", "declarator": "queryContext", "var_name": "queryContext"}, {"original_string": "private boolean print;", "modifier": "private", "type": "boolean", "declarator": "print", "var_name": "print"}, {"original_string": "private RepositoryCache repoCache;", "modifier": "private", "type": "RepositoryCache", "declarator": "repoCache", "var_name": "repoCache"}, {"original_string": "private Set<String> workspaces;", "modifier": "private", "type": "Set<String>", "declarator": "workspaces", "var_name": "workspaces"}, {"original_string": "private BufferManager bufferMgr;", "modifier": "private", "type": "BufferManager", "declarator": "bufferMgr", "var_name": "bufferMgr"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/plan/CanonicalPlannerTest.java"}, "test_case": {"identifier": "shouldProducePlanWhenSelectingAllColumnsFromTableWithAlias", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldProducePlanWhenSelectingAllColumnsFromTableWithAlias() {\n        schemata = schemataBuilder.addTable(\"dna:someTable\", \"column1\", \"column2\", \"column3\").build();\n        query = builder.selectStar().from(\"dna:someTable AS t1\").where().path(\"t1\").isEqualTo(1L).end().query();\n        initQueryContext();\n        plan = planner.createPlan(queryContext, query);\n        assertThat(problems.hasErrors(), is(false));\n        print(plan);\n        assertThat(plan.getType(), is(PlanNode.Type.PROJECT));\n        assertThat(plan.getSelectors(), is(selectors(\"t1\")));\n    }", "signature": "void shouldProducePlanWhenSelectingAllColumnsFromTableWithAlias()", "full_signature": "@Test public void shouldProducePlanWhenSelectingAllColumnsFromTableWithAlias()", "class_method_signature": "CanonicalPlannerTest.shouldProducePlanWhenSelectingAllColumnsFromTableWithAlias()", "testcase": true, "constructor": false, "invocations": ["build", "addTable", "query", "end", "isEqualTo", "path", "where", "from", "selectStar", "initQueryContext", "createPlan", "assertThat", "hasErrors", "is", "print", "assertThat", "getType", "is", "assertThat", "getSelectors", "is", "selectors"]}, "focal_class": {"identifier": "CanonicalPlanner", "superclass": "", "interfaces": "implements Planner", "fields": [], "methods": [{"identifier": "createPlan", "parameters": "( QueryContext context,\n                                QueryCommand query )", "modifiers": "@Override public", "return": "PlanNode", "signature": "PlanNode createPlan( QueryContext context,\n                                QueryCommand query )", "full_signature": "@Override public PlanNode createPlan( QueryContext context,\n                                QueryCommand query )", "class_method_signature": "CanonicalPlanner.createPlan( QueryContext context,\n                                QueryCommand query )", "testcase": false, "constructor": false}, {"identifier": "createCanonicalPlan", "parameters": "( QueryContext context,\n                                            Query query )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode createCanonicalPlan( QueryContext context,\n                                            Query query )", "full_signature": "protected PlanNode createCanonicalPlan( QueryContext context,\n                                            Query query )", "class_method_signature": "CanonicalPlanner.createCanonicalPlan( QueryContext context,\n                                            Query query )", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "( QueryContext context,\n                             QueryCommand query,\n                             Map<SelectorName, Table> usedSelectors )", "modifiers": "protected", "return": "void", "signature": "void validate( QueryContext context,\n                             QueryCommand query,\n                             Map<SelectorName, Table> usedSelectors )", "full_signature": "protected void validate( QueryContext context,\n                             QueryCommand query,\n                             Map<SelectorName, Table> usedSelectors )", "class_method_signature": "CanonicalPlanner.validate( QueryContext context,\n                             QueryCommand query,\n                             Map<SelectorName, Table> usedSelectors )", "testcase": false, "constructor": false}, {"identifier": "createCanonicalPlan", "parameters": "( QueryContext context,\n                                            SetQuery query )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode createCanonicalPlan( QueryContext context,\n                                            SetQuery query )", "full_signature": "protected PlanNode createCanonicalPlan( QueryContext context,\n                                            SetQuery query )", "class_method_signature": "CanonicalPlanner.createCanonicalPlan( QueryContext context,\n                                            SetQuery query )", "testcase": false, "constructor": false}, {"identifier": "createPlanNode", "parameters": "( QueryContext context,\n                                       Source source,\n                                       Map<SelectorName, Table> usedSelectors )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode createPlanNode( QueryContext context,\n                                       Source source,\n                                       Map<SelectorName, Table> usedSelectors )", "full_signature": "protected PlanNode createPlanNode( QueryContext context,\n                                       Source source,\n                                       Map<SelectorName, Table> usedSelectors )", "class_method_signature": "CanonicalPlanner.createPlanNode( QueryContext context,\n                                       Source source,\n                                       Map<SelectorName, Table> usedSelectors )", "testcase": false, "constructor": false}, {"identifier": "attachCriteria", "parameters": "( final QueryContext context,\n                                       PlanNode plan,\n                                       Constraint constraint,\n                                       List<? extends Column> columns,\n                                       Map<String, Subquery> subqueriesByVariableName )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachCriteria( final QueryContext context,\n                                       PlanNode plan,\n                                       Constraint constraint,\n                                       List<? extends Column> columns,\n                                       Map<String, Subquery> subqueriesByVariableName )", "full_signature": "protected PlanNode attachCriteria( final QueryContext context,\n                                       PlanNode plan,\n                                       Constraint constraint,\n                                       List<? extends Column> columns,\n                                       Map<String, Subquery> subqueriesByVariableName )", "class_method_signature": "CanonicalPlanner.attachCriteria( final QueryContext context,\n                                       PlanNode plan,\n                                       Constraint constraint,\n                                       List<? extends Column> columns,\n                                       Map<String, Subquery> subqueriesByVariableName )", "testcase": false, "constructor": false}, {"identifier": "separateAndConstraints", "parameters": "( Constraint constraint,\n                                           List<Constraint> andableConstraints )", "modifiers": "protected", "return": "void", "signature": "void separateAndConstraints( Constraint constraint,\n                                           List<Constraint> andableConstraints )", "full_signature": "protected void separateAndConstraints( Constraint constraint,\n                                           List<Constraint> andableConstraints )", "class_method_signature": "CanonicalPlanner.separateAndConstraints( Constraint constraint,\n                                           List<Constraint> andableConstraints )", "testcase": false, "constructor": false}, {"identifier": "attachSorting", "parameters": "( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Ordering> orderings )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachSorting( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Ordering> orderings )", "full_signature": "protected PlanNode attachSorting( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Ordering> orderings )", "class_method_signature": "CanonicalPlanner.attachSorting( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Ordering> orderings )", "testcase": false, "constructor": false}, {"identifier": "attachLimits", "parameters": "( QueryContext context,\n                                     PlanNode plan,\n                                     Limit limit )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachLimits( QueryContext context,\n                                     PlanNode plan,\n                                     Limit limit )", "full_signature": "protected PlanNode attachLimits( QueryContext context,\n                                     PlanNode plan,\n                                     Limit limit )", "class_method_signature": "CanonicalPlanner.attachLimits( QueryContext context,\n                                     PlanNode plan,\n                                     Limit limit )", "testcase": false, "constructor": false}, {"identifier": "attachProject", "parameters": "( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Column> columns,\n                                      Map<SelectorName, Table> selectors )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachProject( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Column> columns,\n                                      Map<SelectorName, Table> selectors )", "full_signature": "protected PlanNode attachProject( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Column> columns,\n                                      Map<SelectorName, Table> selectors )", "class_method_signature": "CanonicalPlanner.attachProject( QueryContext context,\n                                      PlanNode plan,\n                                      List<? extends Column> columns,\n                                      Map<SelectorName, Table> selectors )", "testcase": false, "constructor": false}, {"identifier": "allColumnsFor", "parameters": "( Table table,\n                                  SelectorName tableName,\n                                  List<Column> columns,\n                                  List<String> columnTypes,\n                                  boolean includeSelectorNameInColumnName )", "modifiers": "protected", "return": "void", "signature": "void allColumnsFor( Table table,\n                                  SelectorName tableName,\n                                  List<Column> columns,\n                                  List<String> columnTypes,\n                                  boolean includeSelectorNameInColumnName )", "full_signature": "protected void allColumnsFor( Table table,\n                                  SelectorName tableName,\n                                  List<Column> columns,\n                                  List<String> columnTypes,\n                                  boolean includeSelectorNameInColumnName )", "class_method_signature": "CanonicalPlanner.allColumnsFor( Table table,\n                                  SelectorName tableName,\n                                  List<Column> columns,\n                                  List<String> columnTypes,\n                                  boolean includeSelectorNameInColumnName )", "testcase": false, "constructor": false}, {"identifier": "attachDuplicateRemoval", "parameters": "( QueryContext context,\n                                               PlanNode plan )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachDuplicateRemoval( QueryContext context,\n                                               PlanNode plan )", "full_signature": "protected PlanNode attachDuplicateRemoval( QueryContext context,\n                                               PlanNode plan )", "class_method_signature": "CanonicalPlanner.attachDuplicateRemoval( QueryContext context,\n                                               PlanNode plan )", "testcase": false, "constructor": false}, {"identifier": "attachSubqueries", "parameters": "( QueryContext context,\n                                         PlanNode plan,\n                                         Map<String, Subquery> subqueriesByVariableName )", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode attachSubqueries( QueryContext context,\n                                         PlanNode plan,\n                                         Map<String, Subquery> subqueriesByVariableName )", "full_signature": "protected PlanNode attachSubqueries( QueryContext context,\n                                         PlanNode plan,\n                                         Map<String, Subquery> subqueriesByVariableName )", "class_method_signature": "CanonicalPlanner.attachSubqueries( QueryContext context,\n                                         PlanNode plan,\n                                         Map<String, Subquery> subqueriesByVariableName )", "testcase": false, "constructor": false}, {"identifier": "setSubqueryVariableName", "parameters": "( PlanNode subqueryPlan,\n                                            String varName )", "modifiers": "protected", "return": "void", "signature": "void setSubqueryVariableName( PlanNode subqueryPlan,\n                                            String varName )", "full_signature": "protected void setSubqueryVariableName( PlanNode subqueryPlan,\n                                            String varName )", "class_method_signature": "CanonicalPlanner.setSubqueryVariableName( PlanNode subqueryPlan,\n                                            String varName )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/plan/CanonicalPlanner.java"}, "focal_method": {"identifier": "createPlan", "parameters": "( QueryContext context,\n                                QueryCommand query )", "modifiers": "@Override public", "return": "PlanNode", "body": "@Override\n    public PlanNode createPlan( QueryContext context,\n                                QueryCommand query ) {\n        PlanNode plan = null;\n        if (query instanceof Query) {\n            plan = createCanonicalPlan(context, (Query)query);\n        } else {\n            plan = createCanonicalPlan(context, (SetQuery)query);\n        }\n        return plan;\n    }", "signature": "PlanNode createPlan( QueryContext context,\n                                QueryCommand query )", "full_signature": "@Override public PlanNode createPlan( QueryContext context,\n                                QueryCommand query )", "class_method_signature": "CanonicalPlanner.createPlan( QueryContext context,\n                                QueryCommand query )", "testcase": false, "constructor": false, "invocations": ["createCanonicalPlan", "createCanonicalPlan"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}