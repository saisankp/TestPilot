{"test_class": {"identifier": "JaasAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Subject SUBJECT = new Subject();", "modifier": "private static final", "type": "Subject", "declarator": "SUBJECT = new Subject()", "var_name": "SUBJECT"}, {"original_string": "private AuthorizationHeaderParser.Result info;", "modifier": "private", "type": "AuthorizationHeaderParser.Result", "declarator": "info", "var_name": "info"}], "file": "agent/osgi/src/test/java/org/jolokia/osgi/security/JaasAuthenticatorTest.java"}, "test_case": {"identifier": "testAuthenticationNegative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticationNegative() throws Exception {\n        HttpServletRequest req = prepareRequest();\n\n        JaasAuthenticator auth = new JaasAuthenticator(\"jolokia\") {\n            @Override\n            protected LoginContext createLoginContext(String realm, CallbackHandler handler) throws LoginException {\n                LoginContext mockLogin = mock(LoginContext.class);\n                mockLogin.login();\n                EasyMock.expectLastCall().andThrow(new LoginException(\"Failed\"));\n                replay(mockLogin);\n                return mockLogin;\n            }\n        };\n        assertFalse(auth.doAuthenticate(req, info));\n    }", "signature": "void testAuthenticationNegative()", "full_signature": "@Test public void testAuthenticationNegative()", "class_method_signature": "JaasAuthenticatorTest.testAuthenticationNegative()", "testcase": true, "constructor": false, "invocations": ["prepareRequest", "mock", "login", "andThrow", "expectLastCall", "replay", "assertFalse", "doAuthenticate"]}, "focal_class": {"identifier": "JaasAuthenticator", "superclass": "extends BaseAuthenticator", "interfaces": "", "fields": [{"original_string": "private final String realm;", "modifier": "private final", "type": "String", "declarator": "realm", "var_name": "realm"}], "methods": [{"identifier": "JaasAuthenticator", "parameters": "(String pRealm)", "modifiers": "public", "return": "", "signature": " JaasAuthenticator(String pRealm)", "full_signature": "public  JaasAuthenticator(String pRealm)", "class_method_signature": "JaasAuthenticator.JaasAuthenticator(String pRealm)", "testcase": false, "constructor": true}, {"identifier": "doAuthenticate", "parameters": "(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "full_signature": "@Override protected boolean doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "class_method_signature": "JaasAuthenticator.doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "testcase": false, "constructor": false}, {"identifier": "createLoginContext", "parameters": "(String realm, CallbackHandler handler)", "modifiers": "protected", "return": "LoginContext", "signature": "LoginContext createLoginContext(String realm, CallbackHandler handler)", "full_signature": "protected LoginContext createLoginContext(String realm, CallbackHandler handler)", "class_method_signature": "JaasAuthenticator.createLoginContext(String realm, CallbackHandler handler)", "testcase": false, "constructor": false}], "file": "agent/osgi/src/main/java/org/jolokia/osgi/security/JaasAuthenticator.java"}, "focal_method": {"identifier": "doAuthenticate", "parameters": "(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n    protected boolean doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo) {\n        try {\n            String user = pAuthInfo.getUser();\n            String password = pAuthInfo.getPassword();\n\n            final CallbackHandler handler = new UserPasswordCallbackHandler(user, password);\n            LoginContext loginContext = createLoginContext(realm, handler);\n            loginContext.login();\n\n            pRequest.setAttribute(HttpContext.AUTHENTICATION_TYPE,HttpServletRequest.BASIC_AUTH);\n            pRequest.setAttribute(HttpContext.REMOTE_USER, user);\n            pRequest.setAttribute(ConfigKey.JAAS_SUBJECT_REQUEST_ATTRIBUTE,loginContext.getSubject());\n\n            return true;\n        } catch (LoginException e) {\n            return false;\n        }\n    }", "signature": "boolean doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "full_signature": "@Override protected boolean doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "class_method_signature": "JaasAuthenticator.doAuthenticate(HttpServletRequest pRequest, AuthorizationHeaderParser.Result pAuthInfo)", "testcase": false, "constructor": false, "invocations": ["getUser", "getPassword", "createLoginContext", "login", "setAttribute", "setAttribute", "setAttribute", "getSubject"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}