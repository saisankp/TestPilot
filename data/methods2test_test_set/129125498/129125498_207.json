{"test_class": {"identifier": "DefaultDetectorSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final UUID DETECTOR_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "DETECTOR_UUID = UUID.randomUUID()", "var_name": "DETECTOR_UUID"}, {"original_string": "private static final UUID DETECTOR_UUID_MISSING_DETECTOR = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "DETECTOR_UUID_MISSING_DETECTOR = UUID.randomUUID()", "var_name": "DETECTOR_UUID_MISSING_DETECTOR"}, {"original_string": "private static final UUID DETECTOR_UUID_EXCEPTION = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "DETECTOR_UUID_EXCEPTION = UUID.randomUUID()", "var_name": "DETECTOR_UUID_EXCEPTION"}, {"original_string": "private DefaultDetectorSource sourceUnderTest;", "modifier": "private", "type": "DefaultDetectorSource", "declarator": "sourceUnderTest", "var_name": "sourceUnderTest"}, {"original_string": "@Mock\n    private DetectorClient detectorClient;", "modifier": "@Mock\n    private", "type": "DetectorClient", "declarator": "detectorClient", "var_name": "detectorClient"}, {"original_string": "@Mock\n    private DetectorFactory detectorFactory;", "modifier": "@Mock\n    private", "type": "DetectorFactory", "declarator": "detectorFactory", "var_name": "detectorFactory"}, {"original_string": "private List<Map<String, String>> metricTags;", "modifier": "private", "type": "List<Map<String, String>>", "declarator": "metricTags", "var_name": "metricTags"}, {"original_string": "private DetectorMatchResponse detectorMatchResponse;", "modifier": "private", "type": "DetectorMatchResponse", "declarator": "detectorMatchResponse", "var_name": "detectorMatchResponse"}, {"original_string": "private DetectorDocument[] updatedDetectorDocuments;", "modifier": "private", "type": "DetectorDocument[]", "declarator": "updatedDetectorDocuments", "var_name": "updatedDetectorDocuments"}, {"original_string": "private DetectorMapping detectorMapping;", "modifier": "private", "type": "DetectorMapping", "declarator": "detectorMapping", "var_name": "detectorMapping"}, {"original_string": "@Mock\n    private DetectorDocument detectorDocument;", "modifier": "@Mock\n    private", "type": "DetectorDocument", "declarator": "detectorDocument", "var_name": "detectorDocument"}, {"original_string": "@Mock\n    private Detector detector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/source/DefaultDetectorSourceTest.java"}, "test_case": {"identifier": "testFindDetector_nullDetectorBuilt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDetector_nullDetectorBuilt() {\n        when(detectorClient.findDetectorDocument(DETECTOR_UUID)).thenReturn(detectorDocument);\n        when(detectorFactory.buildDetector(detectorDocument)).thenReturn(null);\n        DetectorContainer detector = sourceUnderTest.findDetector(DETECTOR_UUID);\n        assertNull(detector);\n    }", "signature": "void testFindDetector_nullDetectorBuilt()", "full_signature": "@Test public void testFindDetector_nullDetectorBuilt()", "class_method_signature": "DefaultDetectorSourceTest.testFindDetector_nullDetectorBuilt()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findDetectorDocument", "thenReturn", "when", "buildDetector", "findDetector", "assertNull"]}, "focal_class": {"identifier": "DefaultDetectorSource", "superclass": "", "interfaces": "implements DetectorSource", "fields": [{"original_string": "@NonNull\n    private final DetectorClient client;", "modifier": "@NonNull\n    private final", "type": "DetectorClient", "declarator": "client", "var_name": "client"}, {"original_string": "@NonNull\n    private final DetectorFactory detectorFactory;", "modifier": "@NonNull\n    private final", "type": "DetectorFactory", "declarator": "detectorFactory", "var_name": "detectorFactory"}], "methods": [{"identifier": "findDetectorMappings", "parameters": "(List<Map<String, String>> metricTags)", "modifiers": "@Override public", "return": "DetectorMatchResponse", "signature": "DetectorMatchResponse findDetectorMappings(List<Map<String, String>> metricTags)", "full_signature": "@Override public DetectorMatchResponse findDetectorMappings(List<Map<String, String>> metricTags)", "class_method_signature": "DefaultDetectorSource.findDetectorMappings(List<Map<String, String>> metricTags)", "testcase": false, "constructor": false}, {"identifier": "findUpdatedDetectorMappings", "parameters": "(long timePeriod)", "modifiers": "@Override public", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> findUpdatedDetectorMappings(long timePeriod)", "full_signature": "@Override public List<DetectorMapping> findUpdatedDetectorMappings(long timePeriod)", "class_method_signature": "DefaultDetectorSource.findUpdatedDetectorMappings(long timePeriod)", "testcase": false, "constructor": false}, {"identifier": "findDetectorMappingByUuid", "parameters": "(UUID uuid)", "modifiers": "@Override public", "return": "DetectorMapping", "signature": "DetectorMapping findDetectorMappingByUuid(UUID uuid)", "full_signature": "@Override public DetectorMapping findDetectorMappingByUuid(UUID uuid)", "class_method_signature": "DefaultDetectorSource.findDetectorMappingByUuid(UUID uuid)", "testcase": false, "constructor": false}, {"identifier": "findDetector", "parameters": "(UUID uuid)", "modifiers": "@Override public", "return": "DetectorContainer", "signature": "DetectorContainer findDetector(UUID uuid)", "full_signature": "@Override public DetectorContainer findDetector(UUID uuid)", "class_method_signature": "DefaultDetectorSource.findDetector(UUID uuid)", "testcase": false, "constructor": false}, {"identifier": "findUpdatedDetectors", "parameters": "(long timePeriod)", "modifiers": "@Override public", "return": "List<UUID>", "signature": "List<UUID> findUpdatedDetectors(long timePeriod)", "full_signature": "@Override public List<UUID> findUpdatedDetectors(long timePeriod)", "class_method_signature": "DefaultDetectorSource.findUpdatedDetectors(long timePeriod)", "testcase": false, "constructor": false}, {"identifier": "updatedDetectorLastUsed", "parameters": "(UUID uuid)", "modifiers": "@Override public", "return": "void", "signature": "void updatedDetectorLastUsed(UUID uuid)", "full_signature": "@Override public void updatedDetectorLastUsed(UUID uuid)", "class_method_signature": "DefaultDetectorSource.updatedDetectorLastUsed(UUID uuid)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/source/DefaultDetectorSource.java"}, "focal_method": {"identifier": "findDetector", "parameters": "(UUID uuid)", "modifiers": "@Override public", "return": "DetectorContainer", "body": "@Override\n    public DetectorContainer findDetector(UUID uuid) {\n        notNull(uuid, \"uuid can't be null\");\n        val document = client.findDetectorDocument(uuid);\n        val detector = detectorFactory.buildDetector(document);\n        if (detector == null) return null;\n        val filters = DetectorDocumentParserUtil.parseFilters(document);\n        return new DetectorContainer(detector, filters);\n    }", "signature": "DetectorContainer findDetector(UUID uuid)", "full_signature": "@Override public DetectorContainer findDetector(UUID uuid)", "class_method_signature": "DefaultDetectorSource.findDetector(UUID uuid)", "testcase": false, "constructor": false, "invocations": ["notNull", "findDetectorDocument", "buildDetector", "parseFilters"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}