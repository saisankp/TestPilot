{"test_class": {"identifier": "SyncClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SyncClientTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SyncClientTest.class)", "var_name": "logger"}, {"original_string": "private ISyncClient manager = SyncClient.getInstance();", "modifier": "private", "type": "ISyncClient", "declarator": "manager = SyncClient.getInstance()", "var_name": "manager"}, {"original_string": "private SyncSenderConfig config = SyncSenderDescriptor.getInstance().getConfig();", "modifier": "private", "type": "SyncSenderConfig", "declarator": "config = SyncSenderDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private String dataDir;", "modifier": "private", "type": "String", "declarator": "dataDir", "var_name": "dataDir"}, {"original_string": "private ISyncSenderLogAnalyzer senderLogAnalyzer;", "modifier": "private", "type": "ISyncSenderLogAnalyzer", "declarator": "senderLogAnalyzer", "var_name": "senderLogAnalyzer"}], "file": "server/src/test/java/org/apache/iotdb/db/sync/sender/transfer/SyncClientTest.java"}, "test_case": {"identifier": "makeFileSnapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void makeFileSnapshot() throws IOException {\n    Map<String, Set<File>> allFileList = new HashMap<>();\n\n    Random r = new Random(0);\n    for (int i = 0; i < 3; i++) {\n      for (int j = 0; j < 5; j++) {\n        if (!allFileList.containsKey(String.valueOf(i))) {\n          allFileList.put(String.valueOf(i), new HashSet<>());\n        }\n        String rand = String.valueOf(r.nextInt(10000));\n        String fileName = FilePathUtils.regularizePath(dataDir) + IoTDBConstant.SEQUENCE_FLODER_NAME\n            + File.separator + i\n            + File.separator + rand;\n        File file = new File(fileName);\n        allFileList.get(String.valueOf(i)).add(file);\n        if (!file.getParentFile().exists()) {\n          file.getParentFile().mkdirs();\n        }\n        if (!file.exists() && !file.createNewFile()) {\n          logger.error(\"Can not create new file {}\", file.getPath());\n        }\n        if (!new File(file.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX).exists()\n            && !new File(file.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX).createNewFile()) {\n          logger.error(\"Can not create new file {}\", file.getPath());\n        }\n      }\n    }\n\n    Map<String, Set<String>> dataFileMap = new HashMap<>();\n    File sequenceFile = new File(dataDir, IoTDBConstant.SEQUENCE_FLODER_NAME);\n    for (File sgFile : sequenceFile.listFiles()) {\n      dataFileMap.putIfAbsent(sgFile.getName(), new HashSet<>());\n      for (File tsfile : sgFile.listFiles()) {\n        if (!tsfile.getName().endsWith(TsFileResource.RESOURCE_SUFFIX)) {\n          ((SyncClient)manager).makeFileSnapshot(tsfile);\n        }\n        dataFileMap.get(sgFile.getName()).add(tsfile.getName());\n      }\n    }\n\n    assertTrue(new File(config.getSenderFolderPath()).exists());\n    assertTrue(new File(config.getSnapshotPath()).exists());\n\n    Map<String, Set<String>> snapFileMap = new HashMap<>();\n    for (File sgFile : new File(config.getSnapshotPath()).listFiles()) {\n      snapFileMap.putIfAbsent(sgFile.getName(), new HashSet<>());\n      for (File snapshotTsfile : sgFile.listFiles()) {\n        snapFileMap.get(sgFile.getName()).add(snapshotTsfile.getName());\n      }\n    }\n\n    assertEquals(dataFileMap.size(), snapFileMap.size());\n    for (Entry<String, Set<String>> entry : dataFileMap.entrySet()) {\n      String sg = entry.getKey();\n      Set<String> tsfiles = entry.getValue();\n      assertTrue(snapFileMap.containsKey(sg));\n      assertEquals(snapFileMap.get(sg).size(), tsfiles.size());\n      assertTrue(snapFileMap.get(sg).containsAll(tsfiles));\n    }\n\n    assertFalse(new File(config.getLastFileInfoPath()).exists());\n    senderLogAnalyzer.recover();\n    assertFalse(new File(config.getSnapshotPath()).exists());\n    assertTrue(new File(config.getLastFileInfoPath()).exists());\n  }", "signature": "void makeFileSnapshot()", "full_signature": "@Test public void makeFileSnapshot()", "class_method_signature": "SyncClientTest.makeFileSnapshot()", "testcase": true, "constructor": false, "invocations": ["containsKey", "valueOf", "put", "valueOf", "valueOf", "nextInt", "regularizePath", "add", "get", "valueOf", "exists", "getParentFile", "mkdirs", "getParentFile", "exists", "createNewFile", "error", "getPath", "exists", "getAbsolutePath", "createNewFile", "getAbsolutePath", "error", "getPath", "listFiles", "putIfAbsent", "getName", "listFiles", "endsWith", "getName", "makeFileSnapshot", "add", "get", "getName", "getName", "assertTrue", "exists", "getSenderFolderPath", "assertTrue", "exists", "getSnapshotPath", "listFiles", "getSnapshotPath", "putIfAbsent", "getName", "listFiles", "add", "get", "getName", "getName", "assertEquals", "size", "size", "entrySet", "getKey", "getValue", "assertTrue", "containsKey", "assertEquals", "size", "get", "size", "assertTrue", "containsAll", "get", "assertFalse", "exists", "getLastFileInfoPath", "recover", "assertFalse", "exists", "getSnapshotPath", "assertTrue", "exists", "getLastFileInfoPath"]}, "focal_class": {"identifier": "SyncClient", "superclass": "", "interfaces": "implements ISyncClient", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SyncClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SyncClient.class)", "var_name": "logger"}, {"original_string": "private static SyncSenderConfig config = SyncSenderDescriptor.getInstance().getConfig();", "modifier": "private static", "type": "SyncSenderConfig", "declarator": "config = SyncSenderDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private static final int BATCH_LINE = 1000;", "modifier": "private static final", "type": "int", "declarator": "BATCH_LINE = 1000", "var_name": "BATCH_LINE"}, {"original_string": "private static final int TIMEOUT_MS = 1000;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_MS = 1000", "var_name": "TIMEOUT_MS"}, {"original_string": "private int schemaFileLinePos;", "modifier": "private", "type": "int", "declarator": "schemaFileLinePos", "var_name": "schemaFileLinePos"}, {"original_string": "private TTransport transport;", "modifier": "private", "type": "TTransport", "declarator": "transport", "var_name": "transport"}, {"original_string": "private SyncService.Client serviceClient;", "modifier": "private", "type": "SyncService.Client", "declarator": "serviceClient", "var_name": "serviceClient"}, {"original_string": "private Map<String, Set<Long>> allSG;", "modifier": "private", "type": "Map<String, Set<Long>>", "declarator": "allSG", "var_name": "allSG"}, {"original_string": "private Map<String, Map<Long, Set<File>>> toBeSyncedFilesMap;", "modifier": "private", "type": "Map<String, Map<Long, Set<File>>>", "declarator": "toBeSyncedFilesMap", "var_name": "toBeSyncedFilesMap"}, {"original_string": "private Map<String, Map<Long, Set<File>>> deletedFilesMap;", "modifier": "private", "type": "Map<String, Map<Long, Set<File>>>", "declarator": "deletedFilesMap", "var_name": "deletedFilesMap"}, {"original_string": "private Map<String, Map<Long, Set<File>>> lastLocalFilesMap;", "modifier": "private", "type": "Map<String, Map<Long, Set<File>>>", "declarator": "lastLocalFilesMap", "var_name": "lastLocalFilesMap"}, {"original_string": "private volatile boolean syncStatus = false;", "modifier": "private volatile", "type": "boolean", "declarator": "syncStatus = false", "var_name": "syncStatus"}, {"original_string": "private ISyncSenderLogger syncLog;", "modifier": "private", "type": "ISyncSenderLogger", "declarator": "syncLog", "var_name": "syncLog"}, {"original_string": "private ISyncFileManager syncFileManager = SyncFileManager.getInstance();", "modifier": "private", "type": "ISyncFileManager", "declarator": "syncFileManager = SyncFileManager.getInstance()", "var_name": "syncFileManager"}, {"original_string": "private ScheduledExecutorService executorService;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executorService", "var_name": "executorService"}], "methods": [{"identifier": "SyncClient", "parameters": "()", "modifiers": "private", "return": "", "signature": " SyncClient()", "full_signature": "private  SyncClient()", "class_method_signature": "SyncClient.SyncClient()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SyncClient", "signature": "SyncClient getInstance()", "full_signature": "public static SyncClient getInstance()", "class_method_signature": "SyncClient.getInstance()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "SyncClient.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "verifySingleton", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void verifySingleton()", "full_signature": "@Override public void verifySingleton()", "class_method_signature": "SyncClient.verifySingleton()", "testcase": false, "constructor": false}, {"identifier": "lockInstance", "parameters": "(File lockFile)", "modifiers": "private", "return": "boolean", "signature": "boolean lockInstance(File lockFile)", "full_signature": "private boolean lockInstance(File lockFile)", "class_method_signature": "SyncClient.lockInstance(File lockFile)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "SyncClient.init()", "testcase": false, "constructor": false}, {"identifier": "startMonitor", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startMonitor()", "full_signature": "@Override public void startMonitor()", "class_method_signature": "SyncClient.startMonitor()", "testcase": false, "constructor": false}, {"identifier": "startTimedTask", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startTimedTask()", "full_signature": "@Override public void startTimedTask()", "class_method_signature": "SyncClient.startTimedTask()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "SyncClient.stop()", "testcase": false, "constructor": false}, {"identifier": "syncAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void syncAll()", "full_signature": "@Override public void syncAll()", "class_method_signature": "SyncClient.syncAll()", "testcase": false, "constructor": false}, {"identifier": "checkRecovery", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkRecovery()", "full_signature": "private void checkRecovery()", "class_method_signature": "SyncClient.checkRecovery()", "testcase": false, "constructor": false}, {"identifier": "establishConnection", "parameters": "(String serverIp, int serverPort)", "modifiers": "@Override public", "return": "void", "signature": "void establishConnection(String serverIp, int serverPort)", "full_signature": "@Override public void establishConnection(String serverIp, int serverPort)", "class_method_signature": "SyncClient.establishConnection(String serverIp, int serverPort)", "testcase": false, "constructor": false}, {"identifier": "confirmIdentity", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void confirmIdentity()", "full_signature": "@Override public void confirmIdentity()", "class_method_signature": "SyncClient.confirmIdentity()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateUUID", "parameters": "(File uuidFile)", "modifiers": "private", "return": "String", "signature": "String getOrCreateUUID(File uuidFile)", "full_signature": "private String getOrCreateUUID(File uuidFile)", "class_method_signature": "SyncClient.getOrCreateUUID(File uuidFile)", "testcase": false, "constructor": false}, {"identifier": "generateUUID", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateUUID()", "full_signature": "private String generateUUID()", "class_method_signature": "SyncClient.generateUUID()", "testcase": false, "constructor": false}, {"identifier": "syncSchema", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void syncSchema()", "full_signature": "@Override public void syncSchema()", "class_method_signature": "SyncClient.syncSchema()", "testcase": false, "constructor": false}, {"identifier": "tryToSyncSchema", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean tryToSyncSchema()", "full_signature": "private boolean tryToSyncSchema()", "class_method_signature": "SyncClient.tryToSyncSchema()", "testcase": false, "constructor": false}, {"identifier": "checkMD5ForSchema", "parameters": "(String md5OfSender)", "modifiers": "private", "return": "boolean", "signature": "boolean checkMD5ForSchema(String md5OfSender)", "full_signature": "private boolean checkMD5ForSchema(String md5OfSender)", "class_method_signature": "SyncClient.checkMD5ForSchema(String md5OfSender)", "testcase": false, "constructor": false}, {"identifier": "readSyncSchemaPos", "parameters": "(File syncSchemaLogFile)", "modifiers": "private", "return": "int", "signature": "int readSyncSchemaPos(File syncSchemaLogFile)", "full_signature": "private int readSyncSchemaPos(File syncSchemaLogFile)", "class_method_signature": "SyncClient.readSyncSchemaPos(File syncSchemaLogFile)", "testcase": false, "constructor": false}, {"identifier": "writeSyncSchemaPos", "parameters": "(File syncSchemaLogFile)", "modifiers": "private", "return": "void", "signature": "void writeSyncSchemaPos(File syncSchemaLogFile)", "full_signature": "private void writeSyncSchemaPos(File syncSchemaLogFile)", "class_method_signature": "SyncClient.writeSyncSchemaPos(File syncSchemaLogFile)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sync()", "full_signature": "@Override public void sync()", "class_method_signature": "SyncClient.sync()", "testcase": false, "constructor": false}, {"identifier": "syncDeletedFilesNameInOneGroup", "parameters": "(String sgName, Long timeRangeId, Set<File> deletedFilesName)", "modifiers": "@Override public", "return": "void", "signature": "void syncDeletedFilesNameInOneGroup(String sgName, Long timeRangeId, Set<File> deletedFilesName)", "full_signature": "@Override public void syncDeletedFilesNameInOneGroup(String sgName, Long timeRangeId, Set<File> deletedFilesName)", "class_method_signature": "SyncClient.syncDeletedFilesNameInOneGroup(String sgName, Long timeRangeId, Set<File> deletedFilesName)", "testcase": false, "constructor": false}, {"identifier": "syncDataFilesInOneGroup", "parameters": "(String sgName, Long timeRangeId, Set<File> toBeSyncFiles)", "modifiers": "@Override public", "return": "void", "signature": "void syncDataFilesInOneGroup(String sgName, Long timeRangeId, Set<File> toBeSyncFiles)", "full_signature": "@Override public void syncDataFilesInOneGroup(String sgName, Long timeRangeId, Set<File> toBeSyncFiles)", "class_method_signature": "SyncClient.syncDataFilesInOneGroup(String sgName, Long timeRangeId, Set<File> toBeSyncFiles)", "testcase": false, "constructor": false}, {"identifier": "makeFileSnapshot", "parameters": "(File file)", "modifiers": "", "return": "File", "signature": "File makeFileSnapshot(File file)", "full_signature": " File makeFileSnapshot(File file)", "class_method_signature": "SyncClient.makeFileSnapshot(File file)", "testcase": false, "constructor": false}, {"identifier": "syncSingleFile", "parameters": "(File snapshotFile)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "void", "signature": "void syncSingleFile(File snapshotFile)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private void syncSingleFile(File snapshotFile)", "class_method_signature": "SyncClient.syncSingleFile(File snapshotFile)", "testcase": false, "constructor": false}, {"identifier": "endSync", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endSync()", "full_signature": "private void endSync()", "class_method_signature": "SyncClient.endSync()", "testcase": false, "constructor": false}, {"identifier": "getSchemaPosFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getSchemaPosFile()", "full_signature": "private File getSchemaPosFile()", "class_method_signature": "SyncClient.getSchemaPosFile()", "testcase": false, "constructor": false}, {"identifier": "getSchemaLogFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getSchemaLogFile()", "full_signature": "private File getSchemaLogFile()", "class_method_signature": "SyncClient.getSchemaLogFile()", "testcase": false, "constructor": false}, {"identifier": "getLockFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getLockFile()", "full_signature": "private File getLockFile()", "class_method_signature": "SyncClient.getLockFile()", "testcase": false, "constructor": false}, {"identifier": "getUuidFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getUuidFile()", "full_signature": "private File getUuidFile()", "class_method_signature": "SyncClient.getUuidFile()", "testcase": false, "constructor": false}, {"identifier": "getSyncLogFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getSyncLogFile()", "full_signature": "private File getSyncLogFile()", "class_method_signature": "SyncClient.getSyncLogFile()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLogFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getCurrentLogFile()", "full_signature": "private File getCurrentLogFile()", "class_method_signature": "SyncClient.getCurrentLogFile()", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(SyncSenderConfig config)", "modifiers": "public", "return": "void", "signature": "void setConfig(SyncSenderConfig config)", "full_signature": "public void setConfig(SyncSenderConfig config)", "class_method_signature": "SyncClient.setConfig(SyncSenderConfig config)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/sync/sender/transfer/SyncClient.java"}, "focal_method": {"identifier": "makeFileSnapshot", "parameters": "(File file)", "modifiers": "", "return": "File", "body": "File makeFileSnapshot(File file) throws IOException {\n    File snapshotFile = SyncUtils.getSnapshotFile(file);\n    if (!snapshotFile.getParentFile().exists()) {\n      snapshotFile.getParentFile().mkdirs();\n    }\n    Path link = FileSystems.getDefault().getPath(snapshotFile.getAbsolutePath());\n    Path target = FileSystems.getDefault().getPath(file.getAbsolutePath());\n    Files.createLink(link, target);\n    link = FileSystems.getDefault()\n        .getPath(snapshotFile.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX);\n    target = FileSystems.getDefault()\n        .getPath(file.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX);\n    Files.createLink(link, target);\n    return snapshotFile;\n  }", "signature": "File makeFileSnapshot(File file)", "full_signature": " File makeFileSnapshot(File file)", "class_method_signature": "SyncClient.makeFileSnapshot(File file)", "testcase": false, "constructor": false, "invocations": ["getSnapshotFile", "exists", "getParentFile", "mkdirs", "getParentFile", "getPath", "getDefault", "getAbsolutePath", "getPath", "getDefault", "getAbsolutePath", "createLink", "getPath", "getDefault", "getAbsolutePath", "getPath", "getDefault", "getAbsolutePath", "createLink"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}