{"test_class": {"identifier": "ValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/ValidatorTest.java"}, "test_case": {"identifier": "testAdjacency_notAdjacent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdjacency_notAdjacent() throws ParserConfigurationException, IOException, SAXException, URISyntaxException {\n        final File firstSlstrFile = TestUtils.getFirstSlstrFile();\n        final File thirdSlstrFile = TestUtils.getThirdSlstrFile();\n        Document[] manifests = new Document[2];\n        manifests[0] = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(firstSlstrFile);\n        manifests[1] = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(thirdSlstrFile);\n\n        try {\n            Validator.validateAdjacency(manifests);\n            fail(\"Exception expected\");\n        } catch (PDUStitchingException e) {\n            assertEquals(\"Selected units must be adjacent\", e.getMessage());\n        }\n    }", "signature": "void testAdjacency_notAdjacent()", "full_signature": "@Test public void testAdjacency_notAdjacent()", "class_method_signature": "ValidatorTest.testAdjacency_notAdjacent()", "testcase": true, "constructor": false, "invocations": ["getFirstSlstrFile", "getThirdSlstrFile", "parse", "newDocumentBuilder", "newInstance", "parse", "newDocumentBuilder", "newInstance", "validateAdjacency", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "Validator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\";", "modifier": "private static final", "type": "String", "declarator": "SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\"", "var_name": "SLSTR_L1B_NAME_PATTERN"}], "methods": [{"identifier": "validate", "parameters": "(File[] manifestFiles)", "modifiers": "public static", "return": "void", "signature": "void validate(File[] manifestFiles)", "full_signature": "public static void validate(File[] manifestFiles)", "class_method_signature": "Validator.validate(File[] manifestFiles)", "testcase": false, "constructor": false}, {"identifier": "validateSlstrProductFiles", "parameters": "(File[] slstrProductFiles)", "modifiers": "static", "return": "void", "signature": "void validateSlstrProductFiles(File[] slstrProductFiles)", "full_signature": "static void validateSlstrProductFiles(File[] slstrProductFiles)", "class_method_signature": "Validator.validateSlstrProductFiles(File[] slstrProductFiles)", "testcase": false, "constructor": false}, {"identifier": "validateOrbitReference", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateOrbitReference(Document[] manifests)", "full_signature": "static void validateOrbitReference(Document[] manifests)", "class_method_signature": "Validator.validateOrbitReference(Document[] manifests)", "testcase": false, "constructor": false}, {"identifier": "validateAdjacency", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateAdjacency(Document[] manifests)", "full_signature": "static void validateAdjacency(Document[] manifests)", "class_method_signature": "Validator.validateAdjacency(Document[] manifests)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/Validator.java"}, "focal_method": {"identifier": "validateAdjacency", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "body": "static void validateAdjacency(Document[] manifests) throws PDUStitchingException {\n        int[] startOffsets = new int[manifests.length];\n        int[] endOffsets = new int[manifests.length];\n        for (int k = 0; k < manifests.length; k++) {\n            Document manifest = manifests[k];\n            final NodeList nadirImageSizes = manifest.getElementsByTagName(\"slstr:nadirImageSize\");\n            for (int i = 0; i < nadirImageSizes.getLength(); i++) {\n                final Node nadirImageSize = nadirImageSizes.item(i);\n                final Node grid = nadirImageSize.getAttributes().getNamedItem(\"grid\");\n                startOffsets[k] = -1;\n                endOffsets[k] = -1;\n                if (grid != null && grid.getNodeValue().equals(\"Tie Points\")) {\n                    final NodeList childNodes = nadirImageSize.getChildNodes();\n                    for (int j = 0; j < childNodes.getLength(); j++) {\n                        if (childNodes.item(j).getNodeName().equals(\"sentinel3:startOffset\")) {\n                            startOffsets[k] = Integer.parseInt(childNodes.item(j).getTextContent());\n                        } else if (childNodes.item(j).getNodeName().equals(\"sentinel3:rows\")) {\n                            endOffsets[k] = startOffsets[k] + Integer.parseInt(childNodes.item(j).getTextContent());\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        Arrays.sort(startOffsets);\n        Arrays.sort(endOffsets);\n        for (int i = 0; i < manifests.length - 1; i++) {\n            if (endOffsets[i] != -1 && startOffsets[i + 1] != -1 && endOffsets[i] != startOffsets[i + 1]) {\n                throw new PDUStitchingException(\"Selected units must be adjacent\");\n            }\n        }\n    }", "signature": "void validateAdjacency(Document[] manifests)", "full_signature": "static void validateAdjacency(Document[] manifests)", "class_method_signature": "Validator.validateAdjacency(Document[] manifests)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getLength", "item", "getNamedItem", "getAttributes", "equals", "getNodeValue", "getChildNodes", "getLength", "equals", "getNodeName", "item", "parseInt", "getTextContent", "item", "equals", "getNodeName", "item", "parseInt", "getTextContent", "item", "sort", "sort"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}