{"test_class": {"identifier": "UpdateCounterInCacheAdviceTest", "superclass": "extends AbstractCounterTest<UpdateCounterInCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final int EXPIRATION = 80;", "modifier": "private static final", "type": "int", "declarator": "EXPIRATION = 80", "var_name": "EXPIRATION"}, {"original_string": "private final Object reternValue;", "modifier": "private final", "type": "Object", "declarator": "reternValue", "var_name": "reternValue"}, {"original_string": "private final Object expectedValue;", "modifier": "private final", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/counter/UpdateCounterInCacheAdviceTest.java"}, "test_case": {"identifier": "validUpdateCounterInCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validUpdateCounterInCache() throws Throwable {\n        Assume.assumeTrue(isValid);\n\n        advice.cacheCounterInCache(pjp, reternValue);\n\n        verify(cache).setCounter(eq(cacheKey), eq(EXPIRATION), eq(((Number) expectedValue).longValue()));\n        verify(pjp, never()).proceed();\n    }", "signature": "void validUpdateCounterInCache()", "full_signature": "@Test public void validUpdateCounterInCache()", "class_method_signature": "UpdateCounterInCacheAdviceTest.validUpdateCounterInCache()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "cacheCounterInCache", "setCounter", "verify", "eq", "eq", "eq", "longValue", "proceed", "verify", "never"]}, "focal_class": {"identifier": "UpdateCounterInCacheAdvice", "superclass": "extends CounterInCacheBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UpdateCounterInCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UpdateCounterInCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "updateCounter", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.UpdateCounterInCache)\") public", "return": "void", "signature": "void updateCounter()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.UpdateCounterInCache)\") public void updateCounter()", "class_method_signature": "UpdateCounterInCacheAdvice.updateCounter()", "testcase": false, "constructor": false}, {"identifier": "cacheCounterInCache", "parameters": "(final JoinPoint jp, final Object retVal)", "modifiers": "@AfterReturning(pointcut = \"updateCounter()\", returning = \"retVal\") public", "return": "void", "signature": "void cacheCounterInCache(final JoinPoint jp, final Object retVal)", "full_signature": "@AfterReturning(pointcut = \"updateCounter()\", returning = \"retVal\") public void cacheCounterInCache(final JoinPoint jp, final Object retVal)", "class_method_signature": "UpdateCounterInCacheAdvice.cacheCounterInCache(final JoinPoint jp, final Object retVal)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "UpdateCounterInCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/counter/UpdateCounterInCacheAdvice.java"}, "focal_method": {"identifier": "cacheCounterInCache", "parameters": "(final JoinPoint jp, final Object retVal)", "modifiers": "@AfterReturning(pointcut = \"updateCounter()\", returning = \"retVal\") public", "return": "void", "body": "@AfterReturning(pointcut = \"updateCounter()\", returning = \"retVal\")\n    public void cacheCounterInCache(final JoinPoint jp, final Object retVal) throws Throwable {\n        if (isDisabled()) {\n            getLogger().info(\"Cache disabled\");\n            return;\n        }\n\n        // For Update*Cache, an AfterReturning aspect is fine. We will only\n        // apply our caching after the underlying method completes successfully, and we will have\n        // the same access to the method params.\n        String cacheKey = null;\n        UpdateCounterInCache annotation;\n        try {\n            Method methodToCache = getCacheBase().getMethodToCache(jp, UpdateCounterInCache.class);\n            annotation = methodToCache.getAnnotation(UpdateCounterInCache.class);\n            AnnotationData data = AnnotationDataBuilder.buildAnnotationData(annotation, UpdateCounterInCache.class, methodToCache);\n            cacheKey = getCacheBase().getCacheKeyBuilder().getCacheKey(data, jp.getArgs(), methodToCache.toString());\n\n            Object dataObject = getCacheBase().getUpdateData(data, methodToCache, jp.getArgs(), retVal);\n            if (checkData(dataObject, jp)) {\n                long value = ((Number) dataObject).longValue();\n                getCacheBase().getCache(data).setCounter(cacheKey, annotation.expiration(), value);\n            }\n        } catch (Exception ex) {\n            warn(ex, \"Updating counter [%s] in cache via %s aborted due to an error.\", cacheKey, jp.toShortString());\n        }\n    }", "signature": "void cacheCounterInCache(final JoinPoint jp, final Object retVal)", "full_signature": "@AfterReturning(pointcut = \"updateCounter()\", returning = \"retVal\") public void cacheCounterInCache(final JoinPoint jp, final Object retVal)", "class_method_signature": "UpdateCounterInCacheAdvice.cacheCounterInCache(final JoinPoint jp, final Object retVal)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "info", "getLogger", "getMethodToCache", "getCacheBase", "getAnnotation", "buildAnnotationData", "getCacheKey", "getCacheKeyBuilder", "getCacheBase", "getArgs", "toString", "getUpdateData", "getCacheBase", "getArgs", "checkData", "longValue", "setCounter", "getCache", "getCacheBase", "expiration", "warn", "toShortString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}