{"test_class": {"identifier": "AccountStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/core/AccountStateTest.java"}, "test_case": {"identifier": "testGetEncoded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetEncoded() {\n\t\tString expected = \"de809a01000000000000000000000000000000000000000000000000008080\";\n\t\tAccountState acct = new AccountState(BigInteger.ZERO, BigInteger.valueOf(2).pow(200));\n\t\tassertEquals(expected, Hex.toHexString(acct.getEncoded()));\n\t}", "signature": "void testGetEncoded()", "full_signature": "@Test public void testGetEncoded()", "class_method_signature": "AccountStateTest.testGetEncoded()", "testcase": true, "constructor": false, "invocations": ["pow", "valueOf", "assertEquals", "toHexString", "getEncoded"]}, "focal_class": {"identifier": "AccountState", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] rlpEncoded;", "modifier": "private", "type": "byte[]", "declarator": "rlpEncoded", "var_name": "rlpEncoded"}, {"original_string": "private BigInteger nonce;", "modifier": "private", "type": "BigInteger", "declarator": "nonce", "var_name": "nonce"}, {"original_string": "private BigInteger balance;", "modifier": "private", "type": "BigInteger", "declarator": "balance", "var_name": "balance"}, {"original_string": "private byte[] stateRoot = EMPTY_BYTE_ARRAY;", "modifier": "private", "type": "byte[]", "declarator": "stateRoot = EMPTY_BYTE_ARRAY", "var_name": "stateRoot"}, {"original_string": "private byte[] codeHash = EMPTY_BYTE_ARRAY;", "modifier": "private", "type": "byte[]", "declarator": "codeHash = EMPTY_BYTE_ARRAY", "var_name": "codeHash"}], "methods": [{"identifier": "AccountState", "parameters": "()", "modifiers": "public", "return": "", "signature": " AccountState()", "full_signature": "public  AccountState()", "class_method_signature": "AccountState.AccountState()", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(BigInteger nonce, BigInteger balance)", "modifiers": "public", "return": "", "signature": " AccountState(BigInteger nonce, BigInteger balance)", "full_signature": "public  AccountState(BigInteger nonce, BigInteger balance)", "class_method_signature": "AccountState.AccountState(BigInteger nonce, BigInteger balance)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(byte[] rlpData)", "modifiers": "public", "return": "", "signature": " AccountState(byte[] rlpData)", "full_signature": "public  AccountState(byte[] rlpData)", "class_method_signature": "AccountState.AccountState(byte[] rlpData)", "testcase": false, "constructor": true}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getNonce()", "full_signature": "public BigInteger getNonce()", "class_method_signature": "AccountState.getNonce()", "testcase": false, "constructor": false}, {"identifier": "getStateRoot", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getStateRoot()", "full_signature": "public byte[] getStateRoot()", "class_method_signature": "AccountState.getStateRoot()", "testcase": false, "constructor": false}, {"identifier": "setStateRoot", "parameters": "(byte[] stateRoot)", "modifiers": "public", "return": "void", "signature": "void setStateRoot(byte[] stateRoot)", "full_signature": "public void setStateRoot(byte[] stateRoot)", "class_method_signature": "AccountState.setStateRoot(byte[] stateRoot)", "testcase": false, "constructor": false}, {"identifier": "incrementNonce", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementNonce()", "full_signature": "public void incrementNonce()", "class_method_signature": "AccountState.incrementNonce()", "testcase": false, "constructor": false}, {"identifier": "getCodeHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getCodeHash()", "full_signature": "public byte[] getCodeHash()", "class_method_signature": "AccountState.getCodeHash()", "testcase": false, "constructor": false}, {"identifier": "setCodeHash", "parameters": "(byte[] codeHash)", "modifiers": "public", "return": "void", "signature": "void setCodeHash(byte[] codeHash)", "full_signature": "public void setCodeHash(byte[] codeHash)", "class_method_signature": "AccountState.setCodeHash(byte[] codeHash)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance()", "full_signature": "public BigInteger getBalance()", "class_method_signature": "AccountState.getBalance()", "testcase": false, "constructor": false}, {"identifier": "addToBalance", "parameters": "(BigInteger value)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger addToBalance(BigInteger value)", "full_signature": "public BigInteger addToBalance(BigInteger value)", "class_method_signature": "AccountState.addToBalance(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "subFromBalance", "parameters": "(BigInteger value)", "modifiers": "public", "return": "void", "signature": "void subFromBalance(BigInteger value)", "full_signature": "public void subFromBalance(BigInteger value)", "class_method_signature": "AccountState.subFromBalance(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncoded()", "full_signature": "public byte[] getEncoded()", "class_method_signature": "AccountState.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "AccountState.toString()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/AccountState.java"}, "focal_method": {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] getEncoded() {\n\t\tif(rlpEncoded == null) {\n\t        byte[] nonce\t\t= RLP.encodeBigInteger(this.nonce);\n\t        byte[] balance\t\t= RLP.encodeBigInteger(this.balance);\n\t        byte[] stateRoot\t= RLP.encodeElement(this.stateRoot);\n\t        byte[] codeHash\t\t= RLP.encodeElement(this.codeHash);\n\t        this.rlpEncoded = RLP.encodeList(nonce, balance, stateRoot, codeHash);\n\t\t}\n\t\treturn rlpEncoded;\n    }", "signature": "byte[] getEncoded()", "full_signature": "public byte[] getEncoded()", "class_method_signature": "AccountState.getEncoded()", "testcase": false, "constructor": false, "invocations": ["encodeBigInteger", "encodeBigInteger", "encodeElement", "encodeElement", "encodeList"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}