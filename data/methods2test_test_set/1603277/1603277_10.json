{"test_class": {"identifier": "ProfileFromMailFromServiceSensorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProfileFromMailFromServiceSensor profileFromMailFromService;", "modifier": "private", "type": "ProfileFromMailFromServiceSensor", "declarator": "profileFromMailFromService", "var_name": "profileFromMailFromService"}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.analyzers/eu.alert-project.iccs.stardom.analyzers.mailing/src/test/java/eu/alertproject/iccs/stardom/analyzers/mailing/internal/ProfileFromMailFromServiceSensorTest.java"}, "test_case": {"identifier": "getString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getString(){\n\n\n        Profile profileQuote = profileFromMailFromService.generate(\n                \"lamarque at gmail.com (Lamarque Vieira Souza)\"\n        );\n        Assert.assertEquals(profileQuote.getName(),\"Lamarque\");\n        Assert.assertEquals(profileQuote.getLastname(),\"Vieira Souza\");\n        Assert.assertEquals(profileQuote.getEmail(),\"lamarque gmail.com\");\n\n        Profile profileQuote2 = profileFromMailFromService.generate(\n                \"lam_arque at g_mail.com (Lam_arque Vieira Souza)\"\n        );\n        Assert.assertEquals(profileQuote2.getName(),\"Lam_arque\");\n        Assert.assertEquals(profileQuote2.getLastname(),\"Vieira Souza\");\n        Assert.assertEquals(profileQuote2.getEmail(),\"lam_arque g_mail.com\");\n\n\n\n        Profile withQuotes = profileFromMailFromService.generate(\n                \"teg at jklm.no (Tom Gundersen)\"\n        );\n        Assert.assertEquals(withQuotes.getName(),\"Tom\");\n        Assert.assertEquals(withQuotes.getLastname(),\"Gundersen\");\n        Assert.assertEquals(withQuotes.getEmail(),\"teg jklm.no\");\n\n\n        Profile withUtf = profileFromMailFromService.generate(\n                \"kossebau at kde.org (Friedrich W. H. Kossebau)\"\n        );\n        Assert.assertEquals(withUtf.getName(),\"Friedrich\");\n        Assert.assertEquals(withUtf.getLastname(),\"W. H. Kossebau\");\n        Assert.assertEquals(withUtf.getEmail(),\"kossebau kde.org\");\n\n\n        Profile withUTFNullResult = profileFromMailFromService.generate(\n                \"=?UTF-8?B?UmFmYcWCIE1pxYJlY2tp?= <zajec5@gmail.com>\"\n        );\n        Assert.assertNull(withUTFNullResult);\n\n    }", "signature": "void getString()", "full_signature": "@Test public void getString()", "class_method_signature": "ProfileFromMailFromServiceSensorTest.getString()", "testcase": true, "constructor": false, "invocations": ["generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertNull"]}, "focal_class": {"identifier": "ProfileFromMailFromServiceSensor", "superclass": "", "interfaces": "implements ProfileFromMailFromService", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(ProfileFromMailFromServiceSensor.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProfileFromMailFromServiceSensor.class)", "var_name": "logger"}], "methods": [{"identifier": "generate", "parameters": "(String mailFrom)", "modifiers": "@Override public", "return": "Profile", "signature": "Profile generate(String mailFrom)", "full_signature": "@Override public Profile generate(String mailFrom)", "class_method_signature": "ProfileFromMailFromServiceSensor.generate(String mailFrom)", "testcase": false, "constructor": false}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.analyzers/eu.alert-project.iccs.stardom.analyzers.mailing/src/main/java/eu/alertproject/iccs/stardom/analyzers/mailing/internal/ProfileFromMailFromServiceSensor.java"}, "focal_method": {"identifier": "generate", "parameters": "(String mailFrom)", "modifiers": "@Override public", "return": "Profile", "body": "@Override\n    public Profile generate(String mailFrom){\n\n        String[] regexes = new String[]{\n          \"\\\"?([\\\\p{L}\\\\?-_]+)\\\\s?([\\\\p{L}\\\\?\\\\.\\\\d=\\\\\\\\ _-]+)?\\\"?\\\\s*<(.*)>\", //  Alex Fiestas <afiestas@kde.org>\n          \"([\\\\p{L}\\\\.\\\\?-_]+) at ([\\\\p{L}\\\\?\\\\.\\\\d=\\\\-_]+) (\\\\((.*( .*)?)\\\\))?\"\n        };\n\n        String regex = null;\n\n        for(String reg:regexes){\n\n            if(mailFrom.matches(reg)){\n                regex = reg;\n                break;\n            }\n        }\n\n        if(regex == null){\n            logger.error(\"Could not find a suitable regular expression for {} \",mailFrom);\n            return null;\n        }\n\n        logger.debug(\"Found a match for {} \",mailFrom);\n\n        /*\n        We are making the following assumptions that we have\n            1.) Email format Name Lastname <email>\n            2.) Names are composed of a single word, the rest is the last name\n\n            Alex Fiestas <afiestas@kde.org>\n         */\n        Pattern p = Pattern.compile(regex);\n\n        int i = ArrayUtils.indexOf(regexes, regex);\n        Profile profile = new Profile();\n\n        Matcher matcher = p.matcher(mailFrom);\n        matcher.matches();\n\n        switch (i){\n            case 0:   //  Alex Fiestas <afiestas@kde.org>\n\n                if(matcher.groupCount() <= 2){\n                    //single name\n                    profile.setName(matcher.group(1).trim());\n                    profile.setEmail(matcher.group(2).trim());\n                    profile.setUsername(matcher.group(2).trim());\n                }else if( matcher.groupCount()>2){\n                    profile.setName(matcher.group(1).trim());\n                    profile.setLastname(StringUtils.trimToEmpty(matcher.group(2)));\n                    profile.setEmail(matcher.group(3).trim());\n                    profile.setUsername(matcher.group(3).trim());\n                }\n                break;\n            case 1:    //  afiestas at kde com\n                profile.setEmail(matcher.group(1).trim()+\" \"+matcher.group(2).trim());\n                profile.setName(StringUtils.substringBefore(matcher.group(4).trim(),\" \"));\n                profile.setLastname(StringUtils.defaultIfEmpty(StringUtils.substringAfter(matcher.group(4).trim(),\" \").trim(),\"\"));\n                break;\n        }\n        return profile;\n\n    }", "signature": "Profile generate(String mailFrom)", "full_signature": "@Override public Profile generate(String mailFrom)", "class_method_signature": "ProfileFromMailFromServiceSensor.generate(String mailFrom)", "testcase": false, "constructor": false, "invocations": ["matches", "error", "debug", "compile", "indexOf", "matcher", "matches", "groupCount", "setName", "trim", "group", "setEmail", "trim", "group", "setUsername", "trim", "group", "groupCount", "setName", "trim", "group", "setLastname", "trimToEmpty", "group", "setEmail", "trim", "group", "setUsername", "trim", "group", "setEmail", "trim", "group", "trim", "group", "setName", "substringBefore", "trim", "group", "setLastname", "defaultIfEmpty", "trim", "substringAfter", "trim", "group"]}, "repository": {"repo_id": 1603277, "url": "https://github.com/iccs/STARDOM", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 39514, "license": "licensed"}}