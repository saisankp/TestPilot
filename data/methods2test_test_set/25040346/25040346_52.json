{"test_class": {"identifier": "AudioEffectorTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "AudioEffector effector;", "modifier": "", "type": "AudioEffector", "declarator": "effector", "var_name": "effector"}], "file": "domain/src/test/java/org/m4m/domain/AudioEffectorTest.java"}, "test_case": {"identifier": "getFrameReturnsNullUntilFindFreeFrameIsCalled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFrameReturnsNullUntilFindFreeFrameIsCalled() {\n        assertEquals(null, effector.getFrame());\n    }", "signature": "void getFrameReturnsNullUntilFindFreeFrameIsCalled()", "full_signature": "@Test public void getFrameReturnsNullUntilFindFreeFrameIsCalled()", "class_method_signature": "AudioEffectorTest.getFrameReturnsNullUntilFindFreeFrameIsCalled()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFrame"]}, "focal_class": {"identifier": "AudioEffector", "superclass": "extends MediaCodecPlugin", "interfaces": "", "fields": [{"original_string": "private LinkedList<IAudioEffect> audioEffects = new LinkedList<IAudioEffect>();", "modifier": "private", "type": "LinkedList<IAudioEffect>", "declarator": "audioEffects = new LinkedList<IAudioEffect>()", "var_name": "audioEffects"}, {"original_string": "private LinkedList<Frame> framesPool = new LinkedList<Frame>();", "modifier": "private", "type": "LinkedList<Frame>", "declarator": "framesPool = new LinkedList<Frame>()", "var_name": "framesPool"}, {"original_string": "private LinkedList<Frame> framesOutput = new LinkedList<Frame>();", "modifier": "private", "type": "LinkedList<Frame>", "declarator": "framesOutput = new LinkedList<Frame>()", "var_name": "framesOutput"}, {"original_string": "private int capacity = 24 * 1024;", "modifier": "private", "type": "int", "declarator": "capacity = 24 * 1024", "var_name": "capacity"}], "methods": [{"identifier": "AudioEffector", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "signature": " AudioEffector(IMediaCodec mediaCodec)", "full_signature": "public  AudioEffector(IMediaCodec mediaCodec)", "class_method_signature": "AudioEffector.AudioEffector(IMediaCodec mediaCodec)", "testcase": false, "constructor": true}, {"identifier": "getAudioEffects", "parameters": "()", "modifiers": "public", "return": "LinkedList<IAudioEffect>", "signature": "LinkedList<IAudioEffect> getAudioEffects()", "full_signature": "public LinkedList<IAudioEffect> getAudioEffects()", "class_method_signature": "AudioEffector.getAudioEffects()", "testcase": false, "constructor": false}, {"identifier": "initInputCommandQueue", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void initInputCommandQueue()", "full_signature": "@Override protected void initInputCommandQueue()", "class_method_signature": "AudioEffector.initInputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "feedMeIfNotDraining", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void feedMeIfNotDraining()", "full_signature": "@Override protected void feedMeIfNotDraining()", "class_method_signature": "AudioEffector.feedMeIfNotDraining()", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "@Override public void push(Frame frame)", "class_method_signature": "AudioEffector.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "applyEffects", "parameters": "(Frame frame)", "modifiers": "private", "return": "void", "signature": "void applyEffects(Frame frame)", "full_signature": "private void applyEffects(Frame frame)", "class_method_signature": "AudioEffector.applyEffects(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "checkIfOutputQueueHasData", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void checkIfOutputQueueHasData()", "full_signature": "@Override public void checkIfOutputQueueHasData()", "class_method_signature": "AudioEffector.checkIfOutputQueueHasData()", "testcase": false, "constructor": false}, {"identifier": "releaseOutputBuffer", "parameters": "(int outputBufferIndex)", "modifiers": "@Override public", "return": "void", "signature": "void releaseOutputBuffer(int outputBufferIndex)", "full_signature": "@Override public void releaseOutputBuffer(int outputBufferIndex)", "class_method_signature": "AudioEffector.releaseOutputBuffer(int outputBufferIndex)", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void pull(Frame frame)", "full_signature": "@Override public void pull(Frame frame)", "class_method_signature": "AudioEffector.pull(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "findFreeFrame", "parameters": "()", "modifiers": "@Override public", "return": "Frame", "signature": "Frame findFreeFrame()", "full_signature": "@Override public Frame findFreeFrame()", "class_method_signature": "AudioEffector.findFreeFrame()", "testcase": false, "constructor": false}, {"identifier": "getFrame", "parameters": "()", "modifiers": "@Override public", "return": "Frame", "signature": "Frame getFrame()", "full_signature": "@Override public Frame getFrame()", "class_method_signature": "AudioEffector.getFrame()", "testcase": false, "constructor": false}, {"identifier": "outputFormatChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void outputFormatChanged()", "full_signature": "private void outputFormatChanged()", "class_method_signature": "AudioEffector.outputFormatChanged()", "testcase": false, "constructor": false}, {"identifier": "setInputMediaFormat", "parameters": "(MediaFormat mediaFormat)", "modifiers": "@Override public", "return": "void", "signature": "void setInputMediaFormat(MediaFormat mediaFormat)", "full_signature": "@Override public void setInputMediaFormat(MediaFormat mediaFormat)", "class_method_signature": "AudioEffector.setInputMediaFormat(MediaFormat mediaFormat)", "testcase": false, "constructor": false}, {"identifier": "isLastFile", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLastFile()", "full_signature": "@Override public boolean isLastFile()", "class_method_signature": "AudioEffector.isLastFile()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "AudioEffector.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "AudioEffector.stop()", "testcase": false, "constructor": false}, {"identifier": "setMediaFormat", "parameters": "(MediaFormat mediaFormat)", "modifiers": "@Override public", "return": "void", "signature": "void setMediaFormat(MediaFormat mediaFormat)", "full_signature": "@Override public void setMediaFormat(MediaFormat mediaFormat)", "class_method_signature": "AudioEffector.setMediaFormat(MediaFormat mediaFormat)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "AudioEffector.configure()", "testcase": false, "constructor": false}, {"identifier": "setOutputSurface", "parameters": "(ISurface surface)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputSurface(ISurface surface)", "full_signature": "@Override public void setOutputSurface(ISurface surface)", "class_method_signature": "AudioEffector.setOutputSurface(ISurface surface)", "testcase": false, "constructor": false}, {"identifier": "getSurface", "parameters": "()", "modifiers": "@Override public", "return": "ISurface", "signature": "ISurface getSurface()", "full_signature": "@Override public ISurface getSurface()", "class_method_signature": "AudioEffector.getSurface()", "testcase": false, "constructor": false}, {"identifier": "waitForSurface", "parameters": "(long pts)", "modifiers": "@Override public", "return": "void", "signature": "void waitForSurface(long pts)", "full_signature": "@Override public void waitForSurface(long pts)", "class_method_signature": "AudioEffector.waitForSurface(long pts)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AudioEffector.close()", "testcase": false, "constructor": false}, {"identifier": "getOutputMediaFormat", "parameters": "()", "modifiers": "@Override public", "return": "MediaFormat", "signature": "MediaFormat getOutputMediaFormat()", "full_signature": "@Override public MediaFormat getOutputMediaFormat()", "class_method_signature": "AudioEffector.getOutputMediaFormat()", "testcase": false, "constructor": false}, {"identifier": "reInitInputCommandQueue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reInitInputCommandQueue()", "full_signature": "public void reInitInputCommandQueue()", "class_method_signature": "AudioEffector.reInitInputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "setTrackId", "parameters": "(int trackId)", "modifiers": "@Override public", "return": "void", "signature": "void setTrackId(int trackId)", "full_signature": "@Override public void setTrackId(int trackId)", "class_method_signature": "AudioEffector.setTrackId(int trackId)", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/AudioEffector.java"}, "focal_method": {"identifier": "getFrame", "parameters": "()", "modifiers": "@Override public", "return": "Frame", "body": "@Override\n    public Frame getFrame() {\n        Frame frame = null;\n        if (framesOutput.size() > 0) {\n            Iterator<Frame> iterator = framesOutput.iterator();\n            frame = iterator.next();\n            framesPool.add(frame);\n            iterator.remove();\n        }\n\n        if (framesPool.size() > 0) {\n            feedMeIfNotDraining();\n        }\n        return frame;\n    }", "signature": "Frame getFrame()", "full_signature": "@Override public Frame getFrame()", "class_method_signature": "AudioEffector.getFrame()", "testcase": false, "constructor": false, "invocations": ["size", "iterator", "next", "add", "remove", "size", "feedMeIfNotDraining"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}