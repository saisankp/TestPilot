{"test_class": {"identifier": "InventoryUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String nodeId;", "modifier": "private static", "type": "String", "declarator": "nodeId", "var_name": "nodeId"}, {"original_string": "private Map<String, ServerNode> nodeMap;", "modifier": "private", "type": "Map<String, ServerNode>", "declarator": "nodeMap", "var_name": "nodeMap"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/aggregator/util/InventoryUtilTest.java"}, "test_case": {"identifier": "testRemoveServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveServer()\n        throws HmsException, JsonGenerationException, JsonMappingException, IOException\n    {\n        Map<String, Object[]> inventory = new HashMap<String, Object[]>();\n\n        // add node_1\n        String nodeId = \"N\" + TestUtil.getDateTimeStamp();\n        ServerNode serverNode = TestUtil.getServerNode( nodeId );\n        List<ServerNode> serverNodes = new ArrayList<ServerNode>();\n        serverNodes.add( serverNode );\n\n        // add node_2\n        String nodeId2 = \"N2\" + TestUtil.getDateTimeStamp();\n        ServerNode serverNode2 = TestUtil.getServerNode( nodeId2 );\n        serverNodes.add( serverNode2 );\n\n        // save inventory\n        inventory.put( Constants.HOSTS, serverNodes.toArray( new ServerNode[serverNodes.size()] ) );\n        String tempDir = TestUtil.getTemporaryDirectory();\n        String invFileName = FilenameUtils.concat( tempDir, TestUtil.getDateTimeStamp() + \".json\" );\n        String invContent = TestUtil.getValueAsString( inventory );\n        boolean createdOrUpdated = InventoryUtil.createOrUpdateInventoryFile( invFileName, invContent );\n        assertTrue( createdOrUpdated );\n\n        // remove node_1 from inventory\n        boolean removed = InventoryUtil.removeServer( invFileName, nodeId );\n        assertTrue( removed );\n\n        // Check that hosts does not contain removed node_1.\n        Map<String, Object[]> invConfig = InventoryUtil.initializeInventory( invFileName );\n        assertNotNull( invConfig );\n        assertTrue( invConfig.containsKey( Constants.HOSTS ) );\n        Object[] hosts = invConfig.get( Constants.HOSTS );\n        assertNotNull( hosts );\n        assertTrue( hosts.length == 1 );\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        ServerNode[] serverNodes1 = objectMapper.convertValue( hosts, new TypeReference<ServerNode[]>()\n        {\n        } );\n        assertNotNull( serverNodes1 );\n        assertTrue( serverNodes1.length == 1 );\n        ServerNode serverNode3 = serverNodes1[0];\n        assertTrue( StringUtils.equals( nodeId2, serverNode3.getNodeID() ) );\n        assertFalse( StringUtils.equals( nodeId, serverNode3.getNodeID() ) );\n\n        assertTrue( FileUtil.deleteDirectory( tempDir ) );\n    }", "signature": "void testRemoveServer()", "full_signature": "@Test public void testRemoveServer()", "class_method_signature": "InventoryUtilTest.testRemoveServer()", "testcase": true, "constructor": false, "invocations": ["getDateTimeStamp", "getServerNode", "add", "getDateTimeStamp", "getServerNode", "add", "put", "toArray", "size", "getTemporaryDirectory", "concat", "getDateTimeStamp", "getValueAsString", "createOrUpdateInventoryFile", "assertTrue", "removeServer", "assertTrue", "initializeInventory", "assertNotNull", "assertTrue", "containsKey", "get", "assertNotNull", "assertTrue", "convertValue", "assertNotNull", "assertTrue", "assertTrue", "equals", "getNodeID", "assertFalse", "equals", "getNodeID", "assertTrue", "deleteDirectory"]}, "focal_class": {"identifier": "InventoryUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( InventoryUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( InventoryUtil.class )", "var_name": "logger"}, {"original_string": "public static final String NODE_ID = \"nodeID\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ID = \"nodeID\"", "var_name": "NODE_ID"}, {"original_string": "public static final String IB_IP_ADDRESS = \"ibIpAddress\";", "modifier": "public static final", "type": "String", "declarator": "IB_IP_ADDRESS = \"ibIpAddress\"", "var_name": "IB_IP_ADDRESS"}, {"original_string": "public static final String USERNAME = \"osUserName\";", "modifier": "public static final", "type": "String", "declarator": "USERNAME = \"osUserName\"", "var_name": "USERNAME"}, {"original_string": "public static final String PASSWORD = \"osPassword\";", "modifier": "public static final", "type": "String", "declarator": "PASSWORD = \"osPassword\"", "var_name": "PASSWORD"}, {"original_string": "private static boolean inventoryLoaded = false;", "modifier": "private static", "type": "boolean", "declarator": "inventoryLoaded = false", "var_name": "inventoryLoaded"}], "methods": [{"identifier": "initializeInventory", "parameters": "( String inventoryFilePath, String path )", "modifiers": "public static", "return": "boolean", "signature": "boolean initializeInventory( String inventoryFilePath, String path )", "full_signature": "public static boolean initializeInventory( String inventoryFilePath, String path )", "class_method_signature": "InventoryUtil.initializeInventory( String inventoryFilePath, String path )", "testcase": false, "constructor": false}, {"identifier": "initializeInventory", "parameters": "( String inventoryFilePath )", "modifiers": "public static", "return": "Map<String, Object[]>", "signature": "Map<String, Object[]> initializeInventory( String inventoryFilePath )", "full_signature": "public static Map<String, Object[]> initializeInventory( String inventoryFilePath )", "class_method_signature": "InventoryUtil.initializeInventory( String inventoryFilePath )", "testcase": false, "constructor": false}, {"identifier": "getInventoryOOB", "parameters": "( String path, String contentType )", "modifiers": "public static", "return": "ResponseEntity<HashMap<String, Object[]>>", "signature": "ResponseEntity<HashMap<String, Object[]>> getInventoryOOB( String path, String contentType )", "full_signature": "public static ResponseEntity<HashMap<String, Object[]>> getInventoryOOB( String path, String contentType )", "class_method_signature": "InventoryUtil.getInventoryOOB( String path, String contentType )", "testcase": false, "constructor": false}, {"identifier": "putInventoryOOB", "parameters": "( String path, String contentType, HmsInventoryConfiguration conf )", "modifiers": "public static", "return": "void", "signature": "void putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "full_signature": "public static void putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "class_method_signature": "InventoryUtil.putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "testcase": false, "constructor": false}, {"identifier": "getOOBSupportedOperations", "parameters": "( String path, String contentType )", "modifiers": "public static", "return": "HashMap<String, List<HmsApi>>", "signature": "HashMap<String, List<HmsApi>> getOOBSupportedOperations( String path, String contentType )", "full_signature": "public static HashMap<String, List<HmsApi>> getOOBSupportedOperations( String path, String contentType )", "class_method_signature": "InventoryUtil.getOOBSupportedOperations( String path, String contentType )", "testcase": false, "constructor": false}, {"identifier": "getUpdatedServerInfos", "parameters": "( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static Map<String, Object> getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "class_method_signature": "InventoryUtil.getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "testcase": false, "constructor": false}, {"identifier": "getInvalidHostsinRequest", "parameters": "( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "List<String>", "signature": "List<String> getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static List<String> getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "class_method_signature": "InventoryUtil.getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateInventoryFile", "parameters": "( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "full_signature": "public static boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "class_method_signature": "InventoryUtil.createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateInventoryFile", "parameters": "( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "full_signature": "public static boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "class_method_signature": "InventoryUtil.createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "testcase": false, "constructor": false}, {"identifier": "removeServer", "parameters": "( final String inventoryFilePath, final String hostId )", "modifiers": "public static", "return": "boolean", "signature": "boolean removeServer( final String inventoryFilePath, final String hostId )", "full_signature": "public static boolean removeServer( final String inventoryFilePath, final String hostId )", "class_method_signature": "InventoryUtil.removeServer( final String inventoryFilePath, final String hostId )", "testcase": false, "constructor": false}, {"identifier": "updateInventoryNodeMap", "parameters": "( final String inventoryFileAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean updateInventoryNodeMap( final String inventoryFileAbsPath )", "full_signature": "public static boolean updateInventoryNodeMap( final String inventoryFileAbsPath )", "class_method_signature": "InventoryUtil.updateInventoryNodeMap( final String inventoryFileAbsPath )", "testcase": false, "constructor": false}, {"identifier": "isOobAgentInventoryLoaded", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isOobAgentInventoryLoaded()", "full_signature": "public static boolean isOobAgentInventoryLoaded()", "class_method_signature": "InventoryUtil.isOobAgentInventoryLoaded()", "testcase": false, "constructor": false}, {"identifier": "isInventoryLoaded", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isInventoryLoaded()", "full_signature": "public static boolean isInventoryLoaded()", "class_method_signature": "InventoryUtil.isInventoryLoaded()", "testcase": false, "constructor": false}, {"identifier": "refreshInventoryOnOutOfBand", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean refreshInventoryOnOutOfBand()", "full_signature": "public static boolean refreshInventoryOnOutOfBand()", "class_method_signature": "InventoryUtil.refreshInventoryOnOutOfBand()", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/aggregator/util/InventoryUtil.java"}, "focal_method": {"identifier": "removeServer", "parameters": "( final String inventoryFilePath, final String hostId )", "modifiers": "public static", "return": "boolean", "body": "public static boolean removeServer( final String inventoryFilePath, final String hostId )\n        throws HmsException, JsonGenerationException, JsonMappingException, IOException\n    {\n\n        // first read the inventory file.\n        Map<String, Object[]> inventory = InventoryUtil.initializeInventory( inventoryFilePath );\n        if ( inventory == null || !inventory.containsKey( Constants.HOSTS ) )\n        {\n            logger.error( \"In removeServer, invalid inventory configuration in the file {}.\", inventoryFilePath );\n            return false;\n        }\n\n        // iterate through server and remove server entry from hosts list.\n        ObjectMapper objectMapper = new ObjectMapper();\n        Object[] hosts = inventory.get( Constants.HOSTS );\n        if ( hosts != null && hosts.length > 0 )\n        {\n            List<ServerNode> serverNodesList = objectMapper.convertValue( hosts, new TypeReference<List<ServerNode>>()\n            {\n            } );\n            ServerNode serverNode = null;\n            for ( Iterator<ServerNode> iterator = serverNodesList.iterator(); iterator.hasNext(); )\n            {\n                serverNode = iterator.next();\n                if ( StringUtils.equals( hostId, serverNode.getNodeID() ) )\n                {\n                    iterator.remove();\n                    logger.debug( \"In removeServer, removed hostId '{}' from the inventory '{}'.\", hostId,\n                                  inventoryFilePath );\n                    break;\n                }\n            }\n            inventory.put( Constants.HOSTS, serverNodesList.toArray() );\n        }\n\n        // save the data back to the file.\n        String inventoryFileContent = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString( inventory );\n        return InventoryUtil.createOrUpdateInventoryFile( inventoryFilePath, inventoryFileContent, true );\n    }", "signature": "boolean removeServer( final String inventoryFilePath, final String hostId )", "full_signature": "public static boolean removeServer( final String inventoryFilePath, final String hostId )", "class_method_signature": "InventoryUtil.removeServer( final String inventoryFilePath, final String hostId )", "testcase": false, "constructor": false, "invocations": ["initializeInventory", "containsKey", "error", "get", "convertValue", "iterator", "hasNext", "next", "equals", "getNodeID", "remove", "debug", "put", "toArray", "writeValueAsString", "writerWithDefaultPrettyPrinter", "createOrUpdateInventoryFile"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}