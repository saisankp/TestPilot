{"test_class": {"identifier": "TestCheckPointCreator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CLUSTER1 = \"testcluster1\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER1 = \"testcluster1\"", "var_name": "CLUSTER1"}, {"original_string": "public static final String CLUSTER2 = \"testcluster2\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER2 = \"testcluster2\"", "var_name": "CLUSTER2"}, {"original_string": "public static final String STREAM1 = \"stream1\";", "modifier": "public static final", "type": "String", "declarator": "STREAM1 = \"stream1\"", "var_name": "STREAM1"}, {"original_string": "public static final String STREAM2 = \"stream2\";", "modifier": "public static final", "type": "String", "declarator": "STREAM2 = \"stream2\"", "var_name": "STREAM2"}, {"original_string": "private ConduitConfigParser configParser;", "modifier": "private", "type": "ConduitConfigParser", "declarator": "configParser", "var_name": "configParser"}, {"original_string": "private ConduitConfig config;", "modifier": "private", "type": "ConduitConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private Cluster cluster1, cluster2;", "modifier": "private", "type": "Cluster", "declarator": "cluster1", "var_name": "cluster1"}, {"original_string": "private FileSystem fs1, fs2;", "modifier": "private", "type": "FileSystem", "declarator": "fs1", "var_name": "fs1"}], "file": "conduit-worker/src/test/java/com/inmobi/conduit/utils/TestCheckPointCreator.java"}, "test_case": {"identifier": "testCheckPointMirrorCheckPointPathDoesntExist", "parameters": "()", "modifiers": "@Test(expectedExceptions = { Exception.class }) public", "return": "void", "body": "@Test(expectedExceptions = { Exception.class })\n  public void testCheckPointMirrorCheckPointPathDoesntExist() throws Exception {\n    Date date = new Date();\n    CheckPointCreator creator = new CheckPointCreator(config, null, CLUSTER2,\n        STREAM2, date);\n    creator.createCheckPoint();\n  }", "signature": "void testCheckPointMirrorCheckPointPathDoesntExist()", "full_signature": "@Test(expectedExceptions = { Exception.class }) public void testCheckPointMirrorCheckPointPathDoesntExist()", "class_method_signature": "TestCheckPointCreator.testCheckPointMirrorCheckPointPathDoesntExist()", "testcase": true, "constructor": false, "invocations": ["createCheckPoint"]}, "focal_class": {"identifier": "CheckPointCreator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConduitConfig config;", "modifier": "private final", "type": "ConduitConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final String srcCluster;", "modifier": "private final", "type": "String", "declarator": "srcCluster", "var_name": "srcCluster"}, {"original_string": "private final String destnCluster;", "modifier": "private final", "type": "String", "declarator": "destnCluster", "var_name": "destnCluster"}, {"original_string": "private final String stream;", "modifier": "private final", "type": "String", "declarator": "stream", "var_name": "stream"}, {"original_string": "private static final Log LOG = LogFactory.getLog(CheckPointCreator.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(CheckPointCreator.class)", "var_name": "LOG"}, {"original_string": "private final Set<String> sourceClusters = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "sourceClusters = new HashSet<String>()", "var_name": "sourceClusters"}, {"original_string": "private Date date;", "modifier": "private", "type": "Date", "declarator": "date", "var_name": "date"}], "methods": [{"identifier": "CheckPointCreator", "parameters": "(ConduitConfig config, String sourceCluster,\n      String destinationCluster, String stream, Date date)", "modifiers": "public", "return": "", "signature": " CheckPointCreator(ConduitConfig config, String sourceCluster,\n      String destinationCluster, String stream, Date date)", "full_signature": "public  CheckPointCreator(ConduitConfig config, String sourceCluster,\n      String destinationCluster, String stream, Date date)", "class_method_signature": "CheckPointCreator.CheckPointCreator(ConduitConfig config, String sourceCluster,\n      String destinationCluster, String stream, Date date)", "testcase": false, "constructor": true}, {"identifier": "getCheckPointKey", "parameters": "(String stream, String srcCluster, boolean isMerge)", "modifiers": "", "return": "String", "signature": "String getCheckPointKey(String stream, String srcCluster, boolean isMerge)", "full_signature": " String getCheckPointKey(String stream, String srcCluster, boolean isMerge)", "class_method_signature": "CheckPointCreator.getCheckPointKey(String stream, String srcCluster, boolean isMerge)", "testcase": false, "constructor": false}, {"identifier": "createCheckPoint", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createCheckPoint()", "full_signature": "public void createCheckPoint()", "class_method_signature": "CheckPointCreator.createCheckPoint()", "testcase": false, "constructor": false}], "file": "conduit-worker/src/main/java/com/inmobi/conduit/utils/CheckPointCreator.java"}, "focal_method": {"identifier": "createCheckPoint", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void createCheckPoint() throws Exception {\n    Cluster destinationCluster = config.getClusters().get(destnCluster);\n    CheckpointProvider provider = new FSCheckpointProvider(\n        destinationCluster.getCheckpointDir());\n    boolean isMerge = false;\n    Set<String> mergingStream = destinationCluster\n        .getPrimaryDestinationStreams();\n    if (mergingStream.contains(stream)) {\n      // stream is getting merged here\n      if (srcCluster == null) {// no src clusters provided;create checkpoint for\n        // all src clusters\n        SourceStream srcStream = config.getSourceStreams().get(stream);\n        sourceClusters.addAll(srcStream.getSourceClusters());\n      }\n      isMerge = true;\n    } else if (destinationCluster.getDestinationStreams().containsKey(stream)) {\n      // stream is getting mirrored since its a destination stream and not\n      // primary destination\n      if (srcCluster == null) {// no src clusters provided;create checkpoint for\n        // all src clusters\n        sourceClusters.add(config.getPrimaryClusterForDestinationStream(stream)\n            .getName());\n      }\n      isMerge = false;\n    } else {\n      LOG.error(\"Stream \" + stream + \" is not destination stream of cluster \"\n          + destnCluster);\n    }\n    if (srcCluster != null) {\n      sourceClusters.add(srcCluster);\n    }\n    for (String source : sourceClusters) {\n      Cluster srcCluster = config.getClusters().get(source);\n      FileSystem srcFS = FileSystem.get(srcCluster.getHadoopConf());\n      String checkPointValue;\n      if (isMerge) {\n        checkPointValue = srcCluster.getLocalDestDir(stream, date);\n      } else {\n        checkPointValue = srcCluster.getFinalDestDir(stream, date.getTime());\n      }\n      Path checkPoinPath = new Path(checkPointValue);\n      if (!srcFS.exists(checkPoinPath))\n        throw new Exception(\"Path \" + checkPointValue\n            + \" doesn't exist,hence checkpoint can't be created for source \"\n            + source);\n      provider.checkpoint(getCheckPointKey(stream, source, isMerge),\n          checkPointValue.getBytes());\n    }\n  }", "signature": "void createCheckPoint()", "full_signature": "public void createCheckPoint()", "class_method_signature": "CheckPointCreator.createCheckPoint()", "testcase": false, "constructor": false, "invocations": ["get", "getClusters", "getCheckpointDir", "getPrimaryDestinationStreams", "contains", "get", "getSourceStreams", "addAll", "getSourceClusters", "containsKey", "getDestinationStreams", "add", "getName", "getPrimaryClusterForDestinationStream", "error", "add", "get", "getClusters", "get", "getHadoopConf", "getLocalDestDir", "getFinalDestDir", "getTime", "exists", "checkpoint", "getCheckPointKey", "getBytes"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}