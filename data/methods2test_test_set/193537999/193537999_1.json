{"test_class": {"identifier": "ReferenceUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "vortex-api/src/test/java/mil/army/usace/hec/vortex/geo/ReferenceUtilsTest.java"}, "test_case": {"identifier": "IsShgReturnsTrueForShgWithProjectionUnitsM", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void IsShgReturnsTrueForShgWithProjectionUnitsM(){\n        AlbersInfo info = mock(AlbersInfo.class);\n        when(info.getGridType()).thenReturn(420);\n        when(info.getFirstStandardParallel()).thenReturn((float) 29.5);\n        when(info.getSecondStandardParallel()).thenReturn((float) 45.5);\n        when(info.getLatitudeOfProjectionOrigin()).thenReturn((float) 23.0);\n        when(info.getCentralMeridian()).thenReturn((float) -96.0);\n        when(info.getFalseEasting()).thenReturn((float) 0);\n        when(info.getFalseNorthing()).thenReturn((float) 0);\n        when(info.getProjectionDatum()).thenReturn(GridInfo.getNad83());\n        when(info.getProjectionUnits()).thenReturn(\"m\");\n        assertTrue(ReferenceUtils.isShg(info));\n    }", "signature": "void IsShgReturnsTrueForShgWithProjectionUnitsM()", "full_signature": "@Test void IsShgReturnsTrueForShgWithProjectionUnitsM()", "class_method_signature": "ReferenceUtilsTest.IsShgReturnsTrueForShgWithProjectionUnitsM()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getGridType", "thenReturn", "when", "getFirstStandardParallel", "thenReturn", "when", "getSecondStandardParallel", "thenReturn", "when", "getLatitudeOfProjectionOrigin", "thenReturn", "when", "getCentralMeridian", "thenReturn", "when", "getFalseEasting", "thenReturn", "when", "getFalseNorthing", "thenReturn", "when", "getProjectionDatum", "getNad83", "thenReturn", "when", "getProjectionUnits", "assertTrue", "isShg"]}, "focal_class": {"identifier": "ReferenceUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReferenceUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReferenceUtils()", "full_signature": "private  ReferenceUtils()", "class_method_signature": "ReferenceUtils.ReferenceUtils()", "testcase": false, "constructor": true}, {"identifier": "enhanceWkt", "parameters": "(String wkt)", "modifiers": "public static", "return": "String", "signature": "String enhanceWkt(String wkt)", "full_signature": "public static String enhanceWkt(String wkt)", "class_method_signature": "ReferenceUtils.enhanceWkt(String wkt)", "testcase": false, "constructor": false}, {"identifier": "getMapUnits", "parameters": "(String wkt)", "modifiers": "public static", "return": "String", "signature": "String getMapUnits(String wkt)", "full_signature": "public static String getMapUnits(String wkt)", "class_method_signature": "ReferenceUtils.getMapUnits(String wkt)", "testcase": false, "constructor": false}, {"identifier": "getUlyDirection", "parameters": "(String wkt, double llx, double lly)", "modifiers": "public static", "return": "int", "signature": "int getUlyDirection(String wkt, double llx, double lly)", "full_signature": "public static int getUlyDirection(String wkt, double llx, double lly)", "class_method_signature": "ReferenceUtils.getUlyDirection(String wkt, double llx, double lly)", "testcase": false, "constructor": false}, {"identifier": "compareSpatiallyEquivalent", "parameters": "(VortexGrid grid1, VortexGrid grid2)", "modifiers": "public static", "return": "boolean", "signature": "boolean compareSpatiallyEquivalent(VortexGrid grid1, VortexGrid grid2)", "full_signature": "public static boolean compareSpatiallyEquivalent(VortexGrid grid1, VortexGrid grid2)", "class_method_signature": "ReferenceUtils.compareSpatiallyEquivalent(VortexGrid grid1, VortexGrid grid2)", "testcase": false, "constructor": false}, {"identifier": "isShg", "parameters": "(GridInfo info)", "modifiers": "public static", "return": "boolean", "signature": "boolean isShg(GridInfo info)", "full_signature": "public static boolean isShg(GridInfo info)", "class_method_signature": "ReferenceUtils.isShg(GridInfo info)", "testcase": false, "constructor": false}], "file": "vortex-api/src/main/java/mil/army/usace/hec/vortex/geo/ReferenceUtils.java"}, "focal_method": {"identifier": "isShg", "parameters": "(GridInfo info)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isShg(GridInfo info){\n        if(info.getGridType() != 420){\n            return false;\n        }\n        AlbersInfo albersInfo = (AlbersInfo) info;\n        if(albersInfo.getFirstStandardParallel() != 29.5){\n            return false;\n        }\n        if(albersInfo.getSecondStandardParallel() != 45.5){\n            return false;\n        }\n        if(albersInfo.getLatitudeOfProjectionOrigin() != 23.0){\n            return false;\n        }\n        if(albersInfo.getCentralMeridian() != -96.0){\n            return false;\n        }\n        if(albersInfo.getFalseEasting() != 0){\n            return false;\n        }\n        if(albersInfo.getFalseNorthing() != 0){\n            return false;\n        }\n        if(albersInfo.getProjectionDatum() != GridInfo.getNad83()){\n            return false;\n        }\n        String units = albersInfo.getProjectionUnits().toLowerCase();\n        return units.equals(\"m\") || units.equals(\"meter\") || units.equals(\"meters\") || units.equals(\"metre\");\n    }", "signature": "boolean isShg(GridInfo info)", "full_signature": "public static boolean isShg(GridInfo info)", "class_method_signature": "ReferenceUtils.isShg(GridInfo info)", "testcase": false, "constructor": false, "invocations": ["getGridType", "getFirstStandardParallel", "getSecondStandardParallel", "getLatitudeOfProjectionOrigin", "getCentralMeridian", "getFalseEasting", "getFalseNorthing", "getProjectionDatum", "getNad83", "toLowerCase", "getProjectionUnits", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 193537999, "url": "https://github.com/HydrologicEngineeringCenter/Vortex", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 448543, "license": "licensed"}}