{"test_class": {"identifier": "ContingencyTopologyTraverserTest", "superclass": "", "interfaces": "", "fields": [], "file": "contingency/contingency-api/src/test/java/com/powsybl/contingency/tasks/ContingencyTopologyTraverserTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        Network network = Network.create(\"test\", \"\");\n        Substation s1 = network.newSubstation()\n                .setId(\"s1\")\n                .setCountry(Country.FR)\n                .add();\n        VoltageLevel vl1 = s1.newVoltageLevel()\n                .setId(\"vl1\")\n                .setTopologyKind(TopologyKind.BUS_BREAKER)\n                .setNominalV(400)\n                .add();\n        VoltageLevel vl2 = s1.newVoltageLevel()\n                .setId(\"vl2\")\n                .setTopologyKind(TopologyKind.BUS_BREAKER)\n                .setNominalV(400)\n                .add();\n        vl1.getBusBreakerView().newBus()\n                .setId(\"b1\")\n                .add();\n        vl2.getBusBreakerView().newBus()\n                .setId(\"b2\")\n                .add();\n        Line l1 = network.newLine()\n                .setId(\"l12\")\n                .setVoltageLevel1(\"vl1\")\n                .setConnectableBus1(\"b1\")\n                .setBus1(\"b1\")\n                .setVoltageLevel2(\"vl2\")\n                .setConnectableBus2(\"b2\")\n                .setBus2(\"b2\")\n                .setR(1)\n                .setX(1)\n                .setG1(0)\n                .setG2(0)\n                .setB1(0)\n                .setB2(0)\n                .add();\n\n        Set<Switch> switchesToOpen = new HashSet<>();\n        Set<Terminal> terminalsToDisconnect = new HashSet<>();\n        ContingencyTopologyTraverser.traverse(l1.getTerminal1(), switchesToOpen, terminalsToDisconnect);\n        assertTrue(switchesToOpen.isEmpty());\n        assertEquals(1, terminalsToDisconnect.size());\n        assertEquals(\"BusTerminal[b1]\", terminalsToDisconnect.iterator().next().toString());\n\n        l1.getTerminal1().disconnect();\n        assertNull(l1.getTerminal1().getBusBreakerView().getBus());\n\n        switchesToOpen.clear();\n        terminalsToDisconnect.clear();\n        ContingencyTopologyTraverser.traverse(l1.getTerminal1(), switchesToOpen, terminalsToDisconnect);\n        assertTrue(switchesToOpen.isEmpty());\n        assertTrue(terminalsToDisconnect.isEmpty());\n\n        switchesToOpen.clear();\n        terminalsToDisconnect.clear();\n        ContingencyTopologyTraverser.traverse(l1.getTerminal2(), switchesToOpen, terminalsToDisconnect);\n        assertTrue(switchesToOpen.isEmpty());\n        assertEquals(1, terminalsToDisconnect.size());\n        assertEquals(\"BusTerminal[b2]\", terminalsToDisconnect.iterator().next().toString());\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ContingencyTopologyTraverserTest.test()", "testcase": true, "constructor": false, "invocations": ["create", "add", "setCountry", "setId", "newSubstation", "add", "setNominalV", "setTopologyKind", "setId", "newVoltageLevel", "add", "setNominalV", "setTopologyKind", "setId", "newVoltageLevel", "add", "setId", "newBus", "getBusBreakerView", "add", "setId", "newBus", "getBusBreakerView", "add", "setB2", "setB1", "setG2", "setG1", "setX", "setR", "setBus2", "setConnectableBus2", "setVoltageLevel2", "setBus1", "setConnectableBus1", "setVoltageLevel1", "setId", "newLine", "traverse", "getTerminal1", "assertTrue", "isEmpty", "assertEquals", "size", "assertEquals", "toString", "next", "iterator", "disconnect", "getTerminal1", "assertNull", "getBus", "getBusBreakerView", "getTerminal1", "clear", "clear", "traverse", "getTerminal1", "assertTrue", "isEmpty", "assertTrue", "isEmpty", "clear", "clear", "traverse", "getTerminal2", "assertTrue", "isEmpty", "assertEquals", "size", "assertEquals", "toString", "next", "iterator"]}, "focal_class": {"identifier": "ContingencyTopologyTraverser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ContingencyTopologyTraverser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ContingencyTopologyTraverser()", "full_signature": "private  ContingencyTopologyTraverser()", "class_method_signature": "ContingencyTopologyTraverser.ContingencyTopologyTraverser()", "testcase": false, "constructor": true}, {"identifier": "isOpenable", "parameters": "(Switch aSwitch)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOpenable(Switch aSwitch)", "full_signature": "private static boolean isOpenable(Switch aSwitch)", "class_method_signature": "ContingencyTopologyTraverser.isOpenable(Switch aSwitch)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "modifiers": "static", "return": "void", "signature": "void traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "full_signature": "static void traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "class_method_signature": "ContingencyTopologyTraverser.traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "testcase": false, "constructor": false}], "file": "contingency/contingency-api/src/main/java/com/powsybl/contingency/tasks/ContingencyTopologyTraverser.java"}, "focal_method": {"identifier": "traverse", "parameters": "(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "modifiers": "static", "return": "void", "body": "static void traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect) {\n        Objects.requireNonNull(terminal);\n        Objects.requireNonNull(switchesToOpen);\n        Objects.requireNonNull(terminalsToDisconnect);\n\n        terminal.traverse(new VoltageLevel.TopologyTraverser() {\n            @Override\n            public boolean traverse(Terminal terminal, boolean connected) {\n                if (terminal.getVoltageLevel().getTopologyKind() == TopologyKind.BUS_BREAKER) {\n                    // we have no idea what kind of switch it was in the initial node/breaker topology\n                    // so to keep things simple we do not propagate the fault\n                    if (connected) {\n                        terminalsToDisconnect.add(terminal);\n                    }\n                    return false;\n                }\n                // in node/breaker topology propagation is decided only based on switch position\n                return true;\n            }\n\n            @Override\n            public boolean traverse(Switch aSwitch) {\n                boolean traverse = false;\n\n                if (isOpenable(aSwitch)) {\n                    switchesToOpen.add(aSwitch);\n                } else if (!aSwitch.isOpen()) {\n                    traverse = true;\n                }\n\n                return traverse;\n            }\n        });\n    }", "signature": "void traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "full_signature": "static void traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "class_method_signature": "ContingencyTopologyTraverser.traverse(Terminal terminal, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "traverse", "getTopologyKind", "getVoltageLevel", "add", "isOpenable", "add", "isOpen"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}