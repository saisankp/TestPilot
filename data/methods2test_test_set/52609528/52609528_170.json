{"test_class": {"identifier": "LoggingResourceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "private static final String FILE = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"file\"", "var_name": "FILE"}, {"original_string": "private static final String METADATA = \"metadata\";", "modifier": "private static final", "type": "String", "declarator": "METADATA = \"metadata\"", "var_name": "METADATA"}, {"original_string": "private static final String TRANSMISSION = \"transmission\";", "modifier": "private static final", "type": "String", "declarator": "TRANSMISSION = \"transmission\"", "var_name": "TRANSMISSION"}, {"original_string": "private static final String ADDRESS = \"address\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"address\"", "var_name": "ADDRESS"}, {"original_string": "private static final String EVENT_BUS = \"eventBus\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_BUS = \"eventBus\"", "var_name": "EVENT_BUS"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger( LoggingResourceManagerTest.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( LoggingResourceManagerTest.class )", "var_name": "logger"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String LOGGING_URI = \"/playground/server/admin/v1/logging\";", "modifier": "private final", "type": "String", "declarator": "LOGGING_URI = \"/playground/server/admin/v1/logging\"", "var_name": "LOGGING_URI"}, {"original_string": "private final String INITIAL_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INITIAL_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_logging_resource\", true)", "var_name": "INITIAL_LOGGING_RESOURCE"}, {"original_string": "private final String VALID_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "VALID_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_logging_resource\", true)", "var_name": "VALID_LOGGING_RESOURCE"}, {"original_string": "private final String INVALID_TYPE_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_type_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INVALID_TYPE_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_type_logging_resource\", true)", "var_name": "INVALID_TYPE_LOGGING_RESOURCE"}], "file": "gateleen-logging/src/test/java/org/swisspush/gateleen/logging/LoggingResourceManagerTest.java"}, "test_case": {"identifier": "testInvalidContentShouldNotBeStoredInStorage", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidContentShouldNotBeStoredInStorage(TestContext context){\n        Async async = context.async();\n        LoggingResourceManager manager = new LoggingResourceManager(vertx, storage, LOGGING_URI);\n\n        final DummyHttpServerResponse response = new DummyHttpServerResponse();\n        class UpdateLoggingResourceWithValidDataRequest extends LoggingResourcePUTRequest {\n            @Override\n            public HttpServerRequest bodyHandler(Handler<Buffer> bodyHandler) {\n                bodyHandler.handle(Buffer.buffer(INVALID_TYPE_LOGGING_RESOURCE));\n                return this;\n            }\n\n            @Override\n            public HttpServerResponse response() {\n                return response;\n            }\n        }\n\n        storage.get(LOGGING_URI, result -> {\n            context.assertEquals(INITIAL_LOGGING_RESOURCE, result.toString());\n            context.assertTrue(manager.handleLoggingResource(new UpdateLoggingResourceWithValidDataRequest()));\n            storage.get(LOGGING_URI, updatedResult -> {\n                context.assertEquals(INITIAL_LOGGING_RESOURCE, updatedResult.toString(), \"The logging resource in the storage should still be equal to the initial resource\");\n                context.assertEquals(StatusCode.BAD_REQUEST.getStatusCode(), response.getStatusCode());\n                async.complete();\n            });\n        });\n    }", "signature": "void testInvalidContentShouldNotBeStoredInStorage(TestContext context)", "full_signature": "@Test public void testInvalidContentShouldNotBeStoredInStorage(TestContext context)", "class_method_signature": "LoggingResourceManagerTest.testInvalidContentShouldNotBeStoredInStorage(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "handle", "buffer", "get", "assertEquals", "toString", "assertTrue", "handleLoggingResource", "get", "assertEquals", "toString", "assertEquals", "getStatusCode", "getStatusCode", "complete"]}, "focal_class": {"identifier": "LoggingResourceManager", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private static final String UPDATE_ADDRESS = \"gateleen.logging-updated\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_ADDRESS = \"gateleen.logging-updated\"", "var_name": "UPDATE_ADDRESS"}, {"original_string": "private final String loggingUri;", "modifier": "private final", "type": "String", "declarator": "loggingUri", "var_name": "loggingUri"}, {"original_string": "private final ResourceStorage storage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(LoggingResourceManager.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggingResourceManager.class)", "var_name": "log"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private LoggingResource loggingResource;", "modifier": "private", "type": "LoggingResource", "declarator": "loggingResource", "var_name": "loggingResource"}, {"original_string": "private final String loggingResourceSchema;", "modifier": "private final", "type": "String", "declarator": "loggingResourceSchema", "var_name": "loggingResourceSchema"}, {"original_string": "private boolean logConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logConfigurationResourceChanges = false", "var_name": "logConfigurationResourceChanges"}], "methods": [{"identifier": "getLoggingResource", "parameters": "()", "modifiers": "public", "return": "LoggingResource", "signature": "LoggingResource getLoggingResource()", "full_signature": "public LoggingResource getLoggingResource()", "class_method_signature": "LoggingResourceManager.getLoggingResource()", "testcase": false, "constructor": false}, {"identifier": "LoggingResourceManager", "parameters": "(Vertx vertx, final ResourceStorage storage, String loggingUri)", "modifiers": "public", "return": "", "signature": " LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "full_signature": "public  LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "class_method_signature": "LoggingResourceManager.LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "testcase": false, "constructor": true}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "LoggingResourceManager.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateLoggingResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateLoggingResources()", "full_signature": "private void updateLoggingResources()", "class_method_signature": "LoggingResourceManager.updateLoggingResources()", "testcase": false, "constructor": false}, {"identifier": "updateLoggingResources", "parameters": "(Buffer buffer)", "modifiers": "private", "return": "void", "signature": "void updateLoggingResources(Buffer buffer)", "full_signature": "private void updateLoggingResources(Buffer buffer)", "class_method_signature": "LoggingResourceManager.updateLoggingResources(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "handleLoggingResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handleLoggingResource(final HttpServerRequest request)", "full_signature": "public boolean handleLoggingResource(final HttpServerRequest request)", "class_method_signature": "LoggingResourceManager.handleLoggingResource(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "extractLoggingFilterValues", "parameters": "(Buffer loggingResourceBuffer)", "modifiers": "private", "return": "void", "signature": "void extractLoggingFilterValues(Buffer loggingResourceBuffer)", "full_signature": "private void extractLoggingFilterValues(Buffer loggingResourceBuffer)", "class_method_signature": "LoggingResourceManager.extractLoggingFilterValues(Buffer loggingResourceBuffer)", "testcase": false, "constructor": false}], "file": "gateleen-logging/src/main/java/org/swisspush/gateleen/logging/LoggingResourceManager.java"}, "focal_method": {"identifier": "handleLoggingResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean handleLoggingResource(final HttpServerRequest request) {\n        if (request.uri().equals(loggingUri) && HttpMethod.PUT == request.method()) {\n            request.bodyHandler(loggingResourceBuffer -> {\n                try {\n                    extractLoggingFilterValues(loggingResourceBuffer);\n                } catch (ValidationException validationException) {\n                    log.error(\"Could not parse logging resource: \" + validationException.toString());\n                    ResponseStatusCodeLogUtil.info(request, StatusCode.BAD_REQUEST, LoggingResourceManager.class);\n                    request.response().setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());\n                    request.response().setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage() + \" \" + validationException.getMessage());\n                    if(validationException.getValidationDetails() != null){\n                        request.response().headers().add(\"content-type\", \"application/json\");\n                        request.response().end(validationException.getValidationDetails().encode());\n                    } else {\n                        request.response().end(validationException.getMessage());\n                    }\n                    return;\n                }\n                storage.put(loggingUri, loggingResourceBuffer, status -> {\n                    if (status == StatusCode.OK.getStatusCode()) {\n                        if(logConfigurationResourceChanges){\n                            RequestLogger.logRequest(vertx.eventBus(), request, status, loggingResourceBuffer);\n                        }\n                        vertx.eventBus().publish(UPDATE_ADDRESS, true);\n                    } else {\n                        request.response().setStatusCode(status);\n                    }\n                    ResponseStatusCodeLogUtil.info(request, StatusCode.fromCode(status), LoggingResourceManager.class);\n                    request.response().end();\n                });\n            });\n            return true;\n        }\n\n        if (request.uri().equals(loggingUri) && HttpMethod.DELETE == request.method()) {\n            getLoggingResource().reset();\n            log.info(\"Reset LoggingResource\");\n        }\n\n        return false;\n    }", "signature": "boolean handleLoggingResource(final HttpServerRequest request)", "full_signature": "public boolean handleLoggingResource(final HttpServerRequest request)", "class_method_signature": "LoggingResourceManager.handleLoggingResource(final HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["equals", "uri", "method", "bodyHandler", "extractLoggingFilterValues", "error", "toString", "info", "setStatusCode", "response", "getStatusCode", "setStatusMessage", "response", "getStatusMessage", "getMessage", "getValidationDetails", "add", "headers", "response", "end", "response", "encode", "getValidationDetails", "end", "response", "getMessage", "put", "getStatusCode", "logRequest", "eventBus", "publish", "eventBus", "setStatusCode", "response", "info", "fromCode", "end", "response", "equals", "uri", "method", "reset", "getLoggingResource", "info"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}