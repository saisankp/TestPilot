{"test_class": {"identifier": "Eip160HFConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] emptyBytes = new byte[]{};", "modifier": "private", "type": "byte[]", "declarator": "emptyBytes = new byte[]{}", "var_name": "emptyBytes"}], "file": "ethereumj-core/src/test/java/org/ethereum/config/blockchain/Eip160HFConfigTest.java"}, "test_case": {"identifier": "testDenyTransactionWithoutSignature", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDenyTransactionWithoutSignature() throws Exception {\n        TestBlockchainConfig parent = new TestBlockchainConfig();\n        Eip160HFConfig config = new Eip160HFConfig(parent);\n        Transaction txWithoutSignature = new Transaction(emptyBytes, emptyBytes, emptyBytes, emptyBytes, emptyBytes, emptyBytes, null);\n        assertFalse(config.acceptTransactionSignature(txWithoutSignature));\n    }", "signature": "void testDenyTransactionWithoutSignature()", "full_signature": "@Test public void testDenyTransactionWithoutSignature()", "class_method_signature": "Eip160HFConfigTest.testDenyTransactionWithoutSignature()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "acceptTransactionSignature"]}, "focal_class": {"identifier": "Eip160HFConfig", "superclass": "extends Eip150HFConfig", "interfaces": "", "fields": [{"original_string": "private static final GasCost NEW_GAS_COST = new GasCostEip160HF();", "modifier": "private static final", "type": "GasCost", "declarator": "NEW_GAS_COST = new GasCostEip160HF()", "var_name": "NEW_GAS_COST"}, {"original_string": "private final Constants constants;", "modifier": "private final", "type": "Constants", "declarator": "constants", "var_name": "constants"}], "methods": [{"identifier": "Eip160HFConfig", "parameters": "(BlockchainConfig parent)", "modifiers": "public", "return": "", "signature": " Eip160HFConfig(BlockchainConfig parent)", "full_signature": "public  Eip160HFConfig(BlockchainConfig parent)", "class_method_signature": "Eip160HFConfig.Eip160HFConfig(BlockchainConfig parent)", "testcase": false, "constructor": true}, {"identifier": "getGasCost", "parameters": "()", "modifiers": "@Override public", "return": "GasCost", "signature": "GasCost getGasCost()", "full_signature": "@Override public GasCost getGasCost()", "class_method_signature": "Eip160HFConfig.getGasCost()", "testcase": false, "constructor": false}, {"identifier": "eip161", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean eip161()", "full_signature": "@Override public boolean eip161()", "class_method_signature": "Eip160HFConfig.eip161()", "testcase": false, "constructor": false}, {"identifier": "getChainId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getChainId()", "full_signature": "@Override public Integer getChainId()", "class_method_signature": "Eip160HFConfig.getChainId()", "testcase": false, "constructor": false}, {"identifier": "getConstants", "parameters": "()", "modifiers": "@Override public", "return": "Constants", "signature": "Constants getConstants()", "full_signature": "@Override public Constants getConstants()", "class_method_signature": "Eip160HFConfig.getConstants()", "testcase": false, "constructor": false}, {"identifier": "acceptTransactionSignature", "parameters": "(Transaction tx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean acceptTransactionSignature(Transaction tx)", "full_signature": "@Override public boolean acceptTransactionSignature(Transaction tx)", "class_method_signature": "Eip160HFConfig.acceptTransactionSignature(Transaction tx)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/blockchain/Eip160HFConfig.java"}, "focal_method": {"identifier": "acceptTransactionSignature", "parameters": "(Transaction tx)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean acceptTransactionSignature(Transaction tx) {\n\n        if (tx.getSignature() == null) return false;\n\n        // Restoring old logic. Making this through inheritance stinks too much\n        if (!tx.getSignature().validateComponents() ||\n                tx.getSignature().s.compareTo(SECP256K1N_HALF) > 0) return false;\n        return  tx.getChainId() == null || Objects.equals(getChainId(), tx.getChainId());\n    }", "signature": "boolean acceptTransactionSignature(Transaction tx)", "full_signature": "@Override public boolean acceptTransactionSignature(Transaction tx)", "class_method_signature": "Eip160HFConfig.acceptTransactionSignature(Transaction tx)", "testcase": false, "constructor": false, "invocations": ["getSignature", "validateComponents", "getSignature", "compareTo", "getSignature", "getChainId", "equals", "getChainId", "getChainId"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}