{"test_class": {"identifier": "PassportTransactionFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private TransactionOutput to;", "modifier": "@Mock\n    private", "type": "TransactionOutput", "declarator": "to", "var_name": "to"}, {"original_string": "@Mock\n    private Address address;", "modifier": "@Mock\n    private", "type": "Address", "declarator": "address", "var_name": "address"}, {"original_string": "@Mock\n    private PassportConnection pCon;", "modifier": "@Mock\n    private", "type": "PassportConnection", "declarator": "pCon", "var_name": "pCon"}, {"original_string": "@Mock\n    private PublicKey pubKey;", "modifier": "@Mock\n    private", "type": "PublicKey", "declarator": "pubKey", "var_name": "pubKey"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private PassportTransactionFormatter ptf;", "modifier": "private", "type": "PassportTransactionFormatter", "declarator": "ptf", "var_name": "ptf"}], "file": "app/src/test/java/com/digitalvotingpass/passportconnection/PassportTransactionFormatterTest.java"}, "test_case": {"identifier": "testSignRawTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSignRawTransaction() {\n        try {\n            //Return signed data\n            when(pCon.signData((byte[])notNull())).thenReturn(\n                    Util.hexStringToByteArray(\"0A5FADA8967CF77C8F00FAF3A8CF73D4615BC970E9BAA76883A2C4E8B9DA56C4ECC9F72E66F045D70A22918431F6263BDB6737A89393D2F5C3931007DF2532C86FDF9390A7163C98F72DE1590D21D34A\"),\n                    Util.hexStringToByteArray(\"76732217AC784D75B1A89BAD2348271F5092B6D303F72E26D7374B8ED47F5D3A3324A41BBEE6781967DAF8706A83D6BE5D8990F1CA17FABF07E2FB003C21177EF9C270F64E22828A09E65FE4ECE14039\"),\n                    Util.hexStringToByteArray(\"9585FCCCF6A430ECA5E3F9E2C52CDF7627F1E62D04042A69CB0478BFBA60AA2708F55E92FA6518578F9498B7B0A6CCBA14676D921BFB74081970E5E5B944C11BD46F123764F97988A6479D8358FFA6F3\"),\n                    Util.hexStringToByteArray(\"606D9D27341FB36052F1F04914E34F3B5C25A6073A6A0565B7BABC2A45C4B964B5B41311FE539A06AB2640B3C68ABFF1A3C78FA946C2BDF01896442956B0A675531374B3E3AE02661D59F91BA0E34557\"));\n            //return the public key\n            when(pubKey.getEncoded()).thenReturn(Util.hexStringToByteArray(\"04b41f0dda6797b6afd9dcfab9b9cc99744644705e67b5872540860cc015044b86de5cc13da2b3f23564f4c4da996c9321d3c8ea25642bd8176761eecc8fbc3fcdbf846b5c927bd488f42afa9f193517e6\"));\n\n            //build and sign raw transaction\n            byte[][] rawTransaction = ptf.buildRawTransaction();\n            byte[] transaction = ptf.signRawTransaction(pubKey, rawTransaction, pCon);\n\n            //correct format\n            byte[] correctTransaction = Util.hexStringToByteArray(\"01000000\" +\n                    \"01\" + //num inputs\n                    \"ECCF7E3034189B851985D871F91384B8EE357CD47C3024736E5676EB2DEBB3F2\" + //script\n                    \"01000000\" + //index\n                    \"FD97014D4101\" + //opcodes + length. next 4 lines signatures\n                    \"0A5FADA8967CF77C8F00FAF3A8CF73D4615BC970E9BAA76883A2C4E8B9DA56C4ECC9F72E66F045D70A22918431F6263BDB6737A89393D2F5C3931007DF2532C86FDF9390A7163C98F72DE1590D21D34A\" +\n                    \"76732217AC784D75B1A89BAD2348271F5092B6D303F72E26D7374B8ED47F5D3A3324A41BBEE6781967DAF8706A83D6BE5D8990F1CA17FABF07E2FB003C21177EF9C270F64E22828A09E65FE4ECE14039\" +\n                    \"9585FCCCF6A430ECA5E3F9E2C52CDF7627F1E62D04042A69CB0478BFBA60AA2708F55E92FA6518578F9498B7B0A6CCBA14676D921BFB74081970E5E5B944C11BD46F123764F97988A6479D8358FFA6F3\" +\n                    \"606D9D27341FB36052F1F04914E34F3B5C25A6073A6A0565B7BABC2A45C4B964B5B41311FE539A06AB2640B3C68ABFF1A3C78FA946C2BDF01896442956B0A675531374B3E3AE02661D59F91BA0E34557\" +\n                    \"014C\" + //opcodes\n                    \"51\" + //length\n                    \"04B41F0DDA6797B6AFD9DCFAB9B9CC99744644705E67B5872540860CC015044B86DE5CC13DA2B3F23564F4C4DA996C9321D3C8EA25642BD8176761EECC8FBC3FCDBF846B5C927BD488F42AFA9F193517E6\" +\n                    \"FFFFFFFF\" + //magic\n                    \"010000000\" + //num inputs\n                    \"000000000\" + //0 coin base\n                    \"19\" + //length\n                    \"76A91476A914010966776006953D5567439E5E39F86A0D88AC\" + //script to\n                    \"00000000\" + //magic\n                    \"01000000\");\n\n            //Check for the length.\n            assertEquals(correctTransaction.length, transaction.length);\n\n            //Check all bytes\n            for(int i=0; i< correctTransaction.length; i++) {\n                assertEquals(\"Error at byte \" + i, correctTransaction[i], transaction[i]);\n            }\n\n        } catch(Exception e) {\n            e.printStackTrace();\n            assertTrue(false);\n        }\n    }", "signature": "void testSignRawTransaction()", "full_signature": "@Test public void testSignRawTransaction()", "class_method_signature": "PassportTransactionFormatterTest.testSignRawTransaction()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "signData", "notNull", "hexStringToByteArray", "hexStringToByteArray", "hexStringToByteArray", "hexStringToByteArray", "thenReturn", "when", "getEncoded", "hexStringToByteArray", "buildRawTransaction", "signRawTransaction", "hexStringToByteArray", "assertEquals", "assertEquals", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "PassportTransactionFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Address destination;", "modifier": "private", "type": "Address", "declarator": "destination", "var_name": "destination"}, {"original_string": "private TransactionOutput utxo;", "modifier": "private", "type": "TransactionOutput", "declarator": "utxo", "var_name": "utxo"}, {"original_string": "private byte[] data;", "modifier": "private", "type": "byte[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "PassportTransactionFormatter", "parameters": "(TransactionOutput utxo, Address destination)", "modifiers": "public", "return": "", "signature": " PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "full_signature": "public  PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "class_method_signature": "PassportTransactionFormatter.PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "testcase": false, "constructor": true}, {"identifier": "setDestinationAddress", "parameters": "(Address destination)", "modifiers": "public", "return": "void", "signature": "void setDestinationAddress(Address destination)", "full_signature": "public void setDestinationAddress(Address destination)", "class_method_signature": "PassportTransactionFormatter.setDestinationAddress(Address destination)", "testcase": false, "constructor": false}, {"identifier": "setUTXO", "parameters": "(TransactionOutput utxo)", "modifiers": "public", "return": "void", "signature": "void setUTXO(TransactionOutput utxo)", "full_signature": "public void setUTXO(TransactionOutput utxo)", "class_method_signature": "PassportTransactionFormatter.setUTXO(TransactionOutput utxo)", "testcase": false, "constructor": false}, {"identifier": "buildAndSign", "parameters": "(PublicKey pubKey, PassportConnection pcon)", "modifiers": "public", "return": "byte[]", "signature": "byte[] buildAndSign(PublicKey pubKey, PassportConnection pcon)", "full_signature": "public byte[] buildAndSign(PublicKey pubKey, PassportConnection pcon)", "class_method_signature": "PassportTransactionFormatter.buildAndSign(PublicKey pubKey, PassportConnection pcon)", "testcase": false, "constructor": false}, {"identifier": "buildRawTransaction", "parameters": "()", "modifiers": "public", "return": "byte[][]", "signature": "byte[][] buildRawTransaction()", "full_signature": "public byte[][] buildRawTransaction()", "class_method_signature": "PassportTransactionFormatter.buildRawTransaction()", "testcase": false, "constructor": false}, {"identifier": "signRawTransaction", "parameters": "(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "modifiers": "public", "return": "byte[]", "signature": "byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "full_signature": "public byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "class_method_signature": "PassportTransactionFormatter.signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/digitalvotingpass/passportconnection/PassportTransactionFormatter.java"}, "focal_method": {"identifier": "signRawTransaction", "parameters": "(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "modifiers": "public", "return": "byte[]", "body": "public byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon) throws Exception {\n        byte[] rawTransaction = Bytes.concat(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5],\n                parts[6], parts[7], parts[8], parts[9], parts[10], parts[11], parts[12]);\n\n        // Double hash transaction\n        byte[] step14 = Sha256Hash.hash(Sha256Hash.hash(rawTransaction));\n\n        // Generate signature and get publickey\n        byte[] multiSignature = new byte[320];\n        byte[] hashPart;\n\n        for (int i = 0; i < 4; i++) {\n            hashPart = Arrays.copyOfRange(step14, i * 8, i * 8 + 8);\n            System.arraycopy(pcon.signData(hashPart), 0, multiSignature, i * 80, 80);\n        }\n\n        byte[] signatureLength = Util.hexStringToByteArray(\"fd97014d4101\");\n        byte[] hashCodeType = Util.hexStringToByteArray(\"01\");\n        byte[] publicKeyASN = pubkey.getEncoded();\n\n        byte[] publicKey = new byte[81];\n        System.arraycopy(publicKeyASN, publicKeyASN.length-81, publicKey, 0, 81);\n\n        byte[] publickeyLength = Util.hexStringToByteArray(\"4c51\");\n\n        // Set signature and pubkey in format\n        byte[] step16 = Bytes.concat(signatureLength, multiSignature, hashCodeType, publickeyLength, publicKey);\n\n        // Update transaction with signature and remove hash code type\n        byte[] step19 = Bytes.concat(parts[0], parts[1], parts[2], parts[3], step16, parts[6],\n                parts[7], parts[8], parts[9], parts[10], parts[11], parts[12]);\n\n        return step19;\n    }", "signature": "byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "full_signature": "public byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "class_method_signature": "PassportTransactionFormatter.signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "testcase": false, "constructor": false, "invocations": ["concat", "hash", "hash", "copyOfRange", "arraycopy", "signData", "hexStringToByteArray", "hexStringToByteArray", "getEncoded", "arraycopy", "hexStringToByteArray", "concat", "concat"]}, "repository": {"repo_id": 89679757, "url": "https://github.com/digital-voting-pass/polling-station-app", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 34, "size": 58794, "license": "licensed"}}