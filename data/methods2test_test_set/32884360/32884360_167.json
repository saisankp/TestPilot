{"test_class": {"identifier": "MysqlDumpRowReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final File RESOURCE_DIR = \n        new File(\"src/test/resources/\"\n                 + MysqlDumpRowReaderTest.class.getPackage().getName().replace('.', '/'));", "modifier": "public static final", "type": "File", "declarator": "RESOURCE_DIR = \n        new File(\"src/test/resources/\"\n                 + MysqlDumpRowReaderTest.class.getPackage().getName().replace('.', '/'))", "var_name": "RESOURCE_DIR"}, {"original_string": "public static final File DUMP_FILE = new File(RESOURCE_DIR, \"t1.sql\");", "modifier": "public static final", "type": "File", "declarator": "DUMP_FILE = new File(RESOURCE_DIR, \"t1.sql\")", "var_name": "DUMP_FILE"}, {"original_string": "public static final Object[][] ROWS = {\n        { 2, null },\n        { 3, \"a 'xyz' b\" },\n        { 5, \"abc\\nxyz\" },\n        { 1, \"foo\" },\n        { 6, \"\\u2603\" }\n    };", "modifier": "public static final", "type": "Object[][]", "declarator": "ROWS = {\n        { 2, null },\n        { 3, \"a 'xyz' b\" },\n        { 5, \"abc\\nxyz\" },\n        { 1, \"foo\" },\n        { 6, \"\\u2603\" }\n    }", "var_name": "ROWS"}, {"original_string": "public static final String DDL =\n        \"CREATE TABLE t1(id INT NOT NULL PRIMARY KEY, s VARCHAR(32))\";", "modifier": "public static final", "type": "String", "declarator": "DDL =\n        \"CREATE TABLE t1(id INT NOT NULL PRIMARY KEY, s VARCHAR(32))\"", "var_name": "DDL"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/service/externaldata/MysqlDumpRowReaderTest.java"}, "test_case": {"identifier": "reader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reader() throws Exception {\n        SchemaFactory schemaFactory = new SchemaFactory(\"test\");\n        AkibanInformationSchema ais = schemaFactory.aisWithRowDefs(DDL);\n        Table t1 = ais.getTable(\"test\", \"t1\");\n        InputStream istr = new FileInputStream(DUMP_FILE);\n        MysqlDumpRowReader reader = new MysqlDumpRowReader(t1, t1.getColumns(), \n                                                           istr, \"UTF-8\",\n                                                           null, MTypesTranslator.INSTANCE);\n        List<Row> rows = new ArrayList<>();\n        Row row;\n        while ((row = reader.nextRow()) != null)\n            rows.add(row);\n        istr.close();\n        assertEquals(\"number of rows\", ROWS.length, rows.size());\n        for (int i = 0; i < ROWS.length; i++) {\n            Object[] orow = ROWS[i];\n            row = rows.get(i);\n            assertEquals(\"row \" + i + \" size\", orow.length, row.rowType().nFields());\n            for (int j = 0; j < orow.length; j++) {\n                assertEquals(\"row \" + i + \" col \" + j, orow[j], ValueSources.toObject(row.value(j)));\n            }\n        }\n    }", "signature": "void reader()", "full_signature": "@Test public void reader()", "class_method_signature": "MysqlDumpRowReaderTest.reader()", "testcase": true, "constructor": false, "invocations": ["aisWithRowDefs", "getTable", "getColumns", "nextRow", "add", "close", "assertEquals", "size", "get", "assertEquals", "nFields", "rowType", "assertEquals", "toObject", "value"]}, "focal_class": {"identifier": "MysqlDumpRowReader", "superclass": "extends RowReader", "interfaces": "", "fields": [{"original_string": "private final byte[] insert, into, values, lock, unlock;", "modifier": "private final", "type": "byte[]", "declarator": "insert", "var_name": "insert"}, {"original_string": "private State state;", "modifier": "private", "type": "State", "declarator": "state", "var_name": "state"}, {"original_string": "private byte[] tableName = null;", "modifier": "private", "type": "byte[]", "declarator": "tableName = null", "var_name": "tableName"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(MysqlDumpRowReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MysqlDumpRowReader.class)", "var_name": "logger"}], "methods": [{"identifier": "MysqlDumpRowReader", "parameters": "(Table table, List<Column> columns,\n                              InputStream inputStream, String encoding,\n                              QueryContext queryContext, TypesTranslator typesTranslator)", "modifiers": "public", "return": "", "signature": " MysqlDumpRowReader(Table table, List<Column> columns,\n                              InputStream inputStream, String encoding,\n                              QueryContext queryContext, TypesTranslator typesTranslator)", "full_signature": "public  MysqlDumpRowReader(Table table, List<Column> columns,\n                              InputStream inputStream, String encoding,\n                              QueryContext queryContext, TypesTranslator typesTranslator)", "class_method_signature": "MysqlDumpRowReader.MysqlDumpRowReader(Table table, List<Column> columns,\n                              InputStream inputStream, String encoding,\n                              QueryContext queryContext, TypesTranslator typesTranslator)", "testcase": false, "constructor": true}, {"identifier": "getBytes", "parameters": "(String str, String encoding)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getBytes(String str, String encoding)", "full_signature": "private static byte[] getBytes(String str, String encoding)", "class_method_signature": "MysqlDumpRowReader.getBytes(String str, String encoding)", "testcase": false, "constructor": false}, {"identifier": "nextRow", "parameters": "()", "modifiers": "@Override public", "return": "Row", "signature": "Row nextRow()", "full_signature": "@Override public Row nextRow()", "class_method_signature": "MysqlDumpRowReader.nextRow()", "testcase": false, "constructor": false}, {"identifier": "unexpectedToken", "parameters": "(int... bytes)", "modifiers": "protected", "return": "ExternalRowReaderException", "signature": "ExternalRowReaderException unexpectedToken(int... bytes)", "full_signature": "protected ExternalRowReaderException unexpectedToken(int... bytes)", "class_method_signature": "MysqlDumpRowReader.unexpectedToken(int... bytes)", "testcase": false, "constructor": false}, {"identifier": "eofInTheMiddleOf", "parameters": "(String what)", "modifiers": "protected", "return": "ExternalRowReaderException", "signature": "ExternalRowReaderException eofInTheMiddleOf(String what)", "full_signature": "protected ExternalRowReaderException eofInTheMiddleOf(String what)", "class_method_signature": "MysqlDumpRowReader.eofInTheMiddleOf(String what)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/service/externaldata/MysqlDumpRowReader.java"}, "focal_method": {"identifier": "nextRow", "parameters": "()", "modifiers": "@Override public", "return": "Row", "body": "@Override\n    public Row nextRow() throws IOException {\n        while (true) {\n            int b = read();\n            switch (state) {\n            case STATEMENT_START:\n                if (b < 0) {\n                    return null;\n                }\n                else if (b == '-') {\n                    b = read();\n                    if (b == '-') {\n                        state = State.SINGLE_LINE_COMMENT;\n                    }\n                    else {\n                        throw unexpectedToken('-', b);\n                    }\n                }\n                else if (b == '/') {\n                    b = read();\n                    if (b == '*') {\n                        state = State.DELIMITED_COMMENT;\n                    }\n                    else {\n                        throw unexpectedToken('/', b);\n                    }\n                }\n                else if ((b >= 'A') && (b <= 'Z')) {\n                    addToField(b);\n                    state = State.STATEMENT_VERB;\n                }\n                else if ((b == ' ') || (b == '\\r') || (b == '\\n')) {\n                }\n                else {\n                    throw unexpectedToken(b);\n                }\n                break;\n            case SINGLE_LINE_COMMENT:\n                if (b < 0) {\n                    return null;\n                }\n                else if (b == '\\n') {\n                    state = State.STATEMENT_START;\n                }\n                break;\n            case DELIMITED_COMMENT:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a comment\");\n                }\n                else if (b == '*') {\n                    b = read();\n                    if (b == '/') {\n                        b = read();\n                        if (b != ';')\n                            unread(b); // Allow stray ; after comment.\n                        state = State.STATEMENT_START;\n                    }\n                    else {\n                        unread(b);\n                    }\n                }\n                break;\n            case STATEMENT_VERB:\n            case INSERT:\n            case INSERT_VALUES:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if ((b >= 'A') && (b <= 'Z')) {\n                    addToField(b);\n                }\n                else {\n                    if (b != ' ') unread(b);\n                    if (state == State.INSERT) {\n                        if (fieldMatches(into)) {\n                            clearField();\n                            state = State.INSERT_TABLE;\n                        }\n                        else {\n                            throw new ExternalRowReaderException(\"Unrecognized statement INSERT \" + decodeField());\n                        }\n                    }\n                    else if (state == State.INSERT_VALUES) {\n                        if (fieldMatches(values)) {\n                            clearField();\n                            state = State.NEXT_ROW_CTOR;\n                        }\n                        else {\n                            throw new ExternalRowReaderException(\"Unrecognized statement INSERT INTO \" + decodeField());\n                        }\n                    }\n                    else if (fieldMatches(lock) || fieldMatches(unlock)) {\n                        clearField();\n                        state = State.IGNORED_STATEMENT;\n                    }\n                    else if (fieldMatches(insert)) {\n                        clearField();\n                        state = State.INSERT;\n                    }\n                    else {\n                        throw new ExternalRowReaderException(\"Unrecognized statement \" + decodeField());\n                    }\n                }\n                break;\n            case IGNORED_STATEMENT:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == ';') {\n                    state = State.STATEMENT_START;\n                }\n                else if (b == '`') {\n                    state = State.IGNORED_BACKQUOTE;\n                }\n                break;\n            case IGNORED_BACKQUOTE:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == '`') {\n                    state = State.IGNORED_STATEMENT;\n                }\n                else if (b == '\\\\') {\n                    b = read();\n                }\n                break;\n            case INSERT_TABLE:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == '`') {\n                    addToField(b);\n                    state = State.TABLE_BACKQUOTE;\n                }\n                else if ((b == '.') || \n                         ((b >= 'A') && (b <= 'Z')) ||\n                         ((b >= 'a') && (b <= 'z')) ||\n                         ((b >= '0') && (b <= '9')) ||\n                         (b == '_')) {\n                    // Unquoted or qualified table name.\n                    addToField(b);\n                }\n                else {\n                    if (b != ' ') unread(b);\n                    if (tableName == null) {\n                        tableName = copyField();\n                        if (logger.isTraceEnabled()) {\n                            logger.trace(\"Original target table: {}\", decodeField());\n                        }\n                    }\n                    else if (!fieldMatches(tableName)) {\n                        throw new ExternalRowReaderException(\"INSERT INTO changed from \" + \n                                                             decode(tableName) +\n                                                             \" to \" + decodeField() +\n                                                             \". Does file contain multiple tables?\");\n                    }\n                    clearField();\n                    state = State.INSERT_VALUES;\n                }\n                break;\n            case TABLE_BACKQUOTE:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"table name\");\n                }\n                else if (b == '`') {\n                    addToField(b);\n                    state = State.INSERT_TABLE;\n                }\n                else if (b == '\\\\') {\n                    addToField(b);\n                    b = read();\n                    if (b >= 0)\n                        addToField(b);\n                }\n                else {\n                    addToField(b);\n                }\n                break;\n            case NEXT_ROW_CTOR:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == '(') {\n                    newRow();\n                    state = State.NEXT_FIELD;\n                }\n                else {\n                    throw unexpectedToken(b);\n                }\n                break;\n            case AFTER_ROW_CTOR:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == ';') {\n                    state = State.STATEMENT_START;\n                }\n                else if (b == ',') {\n                    state = State.NEXT_ROW_CTOR;\n                }\n                else {\n                    throw unexpectedToken(b);\n                }\n                break;\n            case NEXT_FIELD:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == ')') {\n                    state = State.AFTER_ROW_CTOR;\n                    return finishRow();\n                }\n                else if (b == '\\'') {\n                    state = State.QUOTED_FIELD;\n                }\n                else if (b == ',') {\n                    addField(false);\n                }\n                else if ((b == ' ') || (b == '\\r') || (b == '\\n')) {\n                }\n                else {\n                    addToField(b);\n                    state = State.UNQUOTED_FIELD;\n                }\n                break;\n            case UNQUOTED_FIELD:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == ',') {\n                    addField(false);\n                    state = State.NEXT_FIELD;\n                }\n                else if (b == ')') {\n                    addField(false);\n                    state = State.AFTER_ROW_CTOR;\n                    return finishRow();\n                }\n                else if (b == '\\'') {\n                    throw new ExternalRowReaderException(\"Quote in the middle of a value\");\n                }\n                else {\n                    addToField(b);\n                }\n                break;\n            case QUOTED_FIELD:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"quoted string\");\n                }\n                else if (b == '\\'') {\n                    state = State.AFTER_QUOTED_FIELD;\n                }\n                else if (b == '\\\\') {\n                    b = read();\n                    switch (b) {\n                    case -1:\n                        throw eofInTheMiddleOf(\"quoted string\");\n                    case 'n':\n                        b = '\\n';\n                        break;\n                    case 'r':\n                        b = '\\r';\n                        break;\n                    case 't':\n                        b = '\\t';\n                        break;\n                    }\n                    addToField(b);\n                }\n                else {\n                    addToField(b);\n                }\n                break;\n            case AFTER_QUOTED_FIELD:\n                if (b < 0) {\n                    throw eofInTheMiddleOf(\"a statement\");\n                }\n                else if (b == ',') {\n                    addField(true);\n                    state = State.NEXT_FIELD;\n                }\n                else if (b == ')') {\n                    addField(true);\n                    state = State.AFTER_ROW_CTOR;\n                    return finishRow();\n                }\n                else {\n                    throw unexpectedToken(b);\n                }\n                break;\n            }\n        }\n    }", "signature": "Row nextRow()", "full_signature": "@Override public Row nextRow()", "class_method_signature": "MysqlDumpRowReader.nextRow()", "testcase": false, "constructor": false, "invocations": ["read", "read", "unexpectedToken", "read", "unexpectedToken", "addToField", "unexpectedToken", "eofInTheMiddleOf", "read", "read", "unread", "unread", "eofInTheMiddleOf", "addToField", "unread", "fieldMatches", "clearField", "decodeField", "fieldMatches", "clearField", "decodeField", "fieldMatches", "fieldMatches", "clearField", "fieldMatches", "clearField", "decodeField", "eofInTheMiddleOf", "eofInTheMiddleOf", "read", "eofInTheMiddleOf", "addToField", "addToField", "unread", "copyField", "isTraceEnabled", "trace", "decodeField", "fieldMatches", "decode", "decodeField", "clearField", "eofInTheMiddleOf", "addToField", "addToField", "read", "addToField", "addToField", "eofInTheMiddleOf", "newRow", "unexpectedToken", "eofInTheMiddleOf", "unexpectedToken", "eofInTheMiddleOf", "finishRow", "addField", "addToField", "eofInTheMiddleOf", "addField", "addField", "finishRow", "addToField", "eofInTheMiddleOf", "read", "eofInTheMiddleOf", "addToField", "addToField", "eofInTheMiddleOf", "addField", "addField", "finishRow", "unexpectedToken"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}