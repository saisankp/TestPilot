{"test_class": {"identifier": "EuclideanDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/EuclideanDistanceTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectnessForDistanceCalculation2() {\n\t\t// Input.\n\t\tdouble[] timeSeries1 = { 0.50, 0.87, 0.90, 0.82, 0.70 };\n\t\tdouble[] timeSeries2 = { 0.10, 0.10, 0.10, 0.10, 0.10 };\n\t\t// Expectation.\n\t\tdouble expectation = 1.5070832757;\n\n\t\tEuclideanDistance ed = new EuclideanDistance();\n\t\tdouble distance = ed.distance(timeSeries1, timeSeries2);\n\n\t\tassertEquals(expectation, distance, 1.0E-5);\n\t}", "signature": "void testCorrectnessForDistanceCalculation2()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation2()", "class_method_signature": "EuclideanDistanceTest.testCorrectnessForDistanceCalculation2()", "testcase": true, "constructor": false, "invocations": ["distance", "assertEquals"]}, "focal_class": {"identifier": "EuclideanDistance", "superclass": "", "interfaces": "implements IDistanceMetric", "fields": [], "methods": [{"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "EuclideanDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/EuclideanDistance.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\t// Parameter checks.\n\t\tRobustnessUtil.sameLengthOrDie(a, b);\n\n\t\tint n = a.length;\n\t\t// Sum over all elements.\n\t\tdouble result = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult += Math.pow((a[i] - b[i]), 2);\n\t\t}\n\t\tresult = Math.sqrt(result);\n\n\t\treturn result;\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "EuclideanDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["sameLengthOrDie", "pow", "sqrt"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}