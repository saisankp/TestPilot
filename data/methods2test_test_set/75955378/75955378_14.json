{"test_class": {"identifier": "S3HandlerTest", "superclass": "extends HandlerTest<S3EventNotification>", "interfaces": "", "fields": [{"original_string": "private static final String S3_BUCKET = \"testbucket\";", "modifier": "private static final", "type": "String", "declarator": "S3_BUCKET = \"testbucket\"", "var_name": "S3_BUCKET"}, {"original_string": "private S3MockClientFactory clientFactory;", "modifier": "private", "type": "S3MockClientFactory", "declarator": "clientFactory", "var_name": "clientFactory"}, {"original_string": "private AmazonS3Client client;", "modifier": "private", "type": "AmazonS3Client", "declarator": "client", "var_name": "client"}], "file": "handlers/src/test/java/com/nextdoor/bender/handler/s3/S3HandlerTest.java"}, "test_case": {"identifier": "testSourceRegex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSourceRegex() throws Throwable {\n    BaseHandler.CONFIG_FILE = \"/com/nextdoor/bender/handler/config_s3_source.json\";\n\n    TestContext ctx = new TestContext();\n    ctx.setFunctionName(\"unittest\");\n    ctx.setInvokedFunctionArn(\"arn:aws:lambda:us-east-1:123:function:test-function:staging\");\n\n    BaseHandler<S3EventNotification> handler = (BaseHandler) getHandler();\n    handler.init(ctx);\n\n    handler.handler(getTestEvent(), ctx);\n    assertEquals(1, DummyTransportHelper.BufferedTransporter.output.size());\n  }", "signature": "void testSourceRegex()", "full_signature": "@Test public void testSourceRegex()", "class_method_signature": "S3HandlerTest.testSourceRegex()", "testcase": true, "constructor": false, "invocations": ["setFunctionName", "setInvokedFunctionArn", "getHandler", "init", "handler", "getTestEvent", "assertEquals", "size"]}, "focal_class": {"identifier": "S3Handler", "superclass": "extends BaseHandler<S3EventNotification>", "interfaces": "implements Handler<S3EventNotification>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(S3Handler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(S3Handler.class)", "var_name": "logger"}, {"original_string": "private static final Gson gson = new Gson();", "modifier": "private static final", "type": "Gson", "declarator": "gson = new Gson()", "var_name": "gson"}, {"original_string": "private InternalEventIterator<InternalEvent> recordIterator;", "modifier": "private", "type": "InternalEventIterator<InternalEvent>", "declarator": "recordIterator", "var_name": "recordIterator"}, {"original_string": "private Source source;", "modifier": "private", "type": "Source", "declarator": "source", "var_name": "source"}, {"original_string": "private boolean logTrigger = false;", "modifier": "private", "type": "boolean", "declarator": "logTrigger = false", "var_name": "logTrigger"}, {"original_string": "protected AmazonS3ClientFactory s3ClientFactory = new AmazonS3ClientFactory();", "modifier": "protected", "type": "AmazonS3ClientFactory", "declarator": "s3ClientFactory = new AmazonS3ClientFactory()", "var_name": "s3ClientFactory"}], "methods": [{"identifier": "handler", "parameters": "(S3EventNotification event, Context context)", "modifiers": "public", "return": "void", "signature": "void handler(S3EventNotification event, Context context)", "full_signature": "public void handler(S3EventNotification event, Context context)", "class_method_signature": "S3Handler.handler(S3EventNotification event, Context context)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource()", "full_signature": "@Override public Source getSource()", "class_method_signature": "S3Handler.getSource()", "testcase": false, "constructor": false}, {"identifier": "getSourceName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSourceName()", "full_signature": "@Override public String getSourceName()", "class_method_signature": "S3Handler.getSourceName()", "testcase": false, "constructor": false}, {"identifier": "onException", "parameters": "(Exception e)", "modifiers": "@Override public", "return": "void", "signature": "void onException(Exception e)", "full_signature": "@Override public void onException(Exception e)", "class_method_signature": "S3Handler.onException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getInternalEventIterator", "parameters": "()", "modifiers": "@Override public", "return": "InternalEventIterator<InternalEvent>", "signature": "InternalEventIterator<InternalEvent> getInternalEventIterator()", "full_signature": "@Override public InternalEventIterator<InternalEvent> getInternalEventIterator()", "class_method_signature": "S3Handler.getInternalEventIterator()", "testcase": false, "constructor": false}], "file": "handlers/src/main/java/com/nextdoor/bender/handler/s3/S3Handler.java"}, "focal_method": {"identifier": "handler", "parameters": "(S3EventNotification event, Context context)", "modifiers": "public", "return": "void", "body": "public void handler(S3EventNotification event, Context context) throws HandlerException {\n    if (!initialized) {\n      init(context);\n      S3HandlerConfig handlerConfig = (S3HandlerConfig) this.config.getHandlerConfig();\n      this.logTrigger = handlerConfig.getLogS3Trigger();\n    }\n\n    if (this.logTrigger) {\n      logger.info(\"trigger: \" + gson.toJson(event));\n    }\n\n    /*\n     * Validate the S3 file matches the regex\n     */\n    List<S3EventNotificationRecord> toProcess =\n        new ArrayList<S3EventNotificationRecord>(event.getRecords());\n    for (S3EventNotificationRecord record : event.getRecords()) {\n      String s3Path = String.format(\"s3://%s/%s\", record.getS3().getBucket().getName(),\n          record.getS3().getObject().getKey());\n      try {\n        this.source = SourceUtils.getSource(s3Path, this.sources);\n      } catch (SourceNotFoundException e) {\n        logger.warn(\"Skipping processing \" + s3Path);\n        toProcess.remove(record);\n      }\n    }\n\n    if (toProcess.size() == 0) {\n      logger.warn(\"Nothing to process\");\n      return;\n    }\n\n    this.recordIterator =\n        new S3EventIterator(new LambdaContext(context), toProcess, s3ClientFactory);\n\n    super.process(context);\n  }", "signature": "void handler(S3EventNotification event, Context context)", "full_signature": "public void handler(S3EventNotification event, Context context)", "class_method_signature": "S3Handler.handler(S3EventNotification event, Context context)", "testcase": false, "constructor": false, "invocations": ["init", "getHandlerConfig", "getLogS3Trigger", "info", "toJson", "getRecords", "getRecords", "format", "getName", "getBucket", "getS3", "getKey", "getObject", "getS3", "getSource", "warn", "remove", "size", "warn", "process"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}