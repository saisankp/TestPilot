{"test_class": {"identifier": "HystrixObservableCollapserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Action1<CollapsedRequest<String, String>> onMissingError = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setException(new IllegalStateException(\"must have a value\"));\n        }\n    };", "modifier": "private static", "type": "Action1<CollapsedRequest<String, String>>", "declarator": "onMissingError = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setException(new IllegalStateException(\"must have a value\"));\n        }\n    }", "var_name": "onMissingError"}, {"original_string": "private static Action1<CollapsedRequest<String, String>> onMissingThrow = new Action1<CollapsedRequest<String, String>>() {\n         @Override\n         public void call(CollapsedRequest<String, String> collapsedReq) {\n            throw new RuntimeException(\"synchronous error in onMissingResponse handler\");\n         }\n     };", "modifier": "private static", "type": "Action1<CollapsedRequest<String, String>>", "declarator": "onMissingThrow = new Action1<CollapsedRequest<String, String>>() {\n         @Override\n         public void call(CollapsedRequest<String, String> collapsedReq) {\n            throw new RuntimeException(\"synchronous error in onMissingResponse handler\");\n         }\n     }", "var_name": "onMissingThrow"}, {"original_string": "private static Action1<CollapsedRequest<String, String>> onMissingComplete = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setComplete();\n        }\n    };", "modifier": "private static", "type": "Action1<CollapsedRequest<String, String>>", "declarator": "onMissingComplete = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setComplete();\n        }\n    }", "var_name": "onMissingComplete"}, {"original_string": "private static Action1<CollapsedRequest<String, String>> onMissingIgnore = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            //do nothing\n        }\n    };", "modifier": "private static", "type": "Action1<CollapsedRequest<String, String>>", "declarator": "onMissingIgnore = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            //do nothing\n        }\n    }", "var_name": "onMissingIgnore"}, {"original_string": "private static Action1<CollapsedRequest<String, String>> onMissingFillIn = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setResponse(\"fillin\");\n        }\n    };", "modifier": "private static", "type": "Action1<CollapsedRequest<String, String>>", "declarator": "onMissingFillIn = new Action1<CollapsedRequest<String, String>>() {\n        @Override\n        public void call(CollapsedRequest<String, String> collapsedReq) {\n            collapsedReq.setResponse(\"fillin\");\n        }\n    }", "var_name": "onMissingFillIn"}, {"original_string": "private static Func1<String, String> prefixMapper = new Func1<String, String>() {\n\n        @Override\n        public String call(String s) {\n            return s.substring(0, s.indexOf(\":\"));\n        }\n\n    };", "modifier": "private static", "type": "Func1<String, String>", "declarator": "prefixMapper = new Func1<String, String>() {\n\n        @Override\n        public String call(String s) {\n            return s.substring(0, s.indexOf(\":\"));\n        }\n\n    }", "var_name": "prefixMapper"}, {"original_string": "private static Func1<String, String> map1To3And2To2 = new Func1<String, String>() {\n        @Override\n        public String call(String s) {\n            String prefix = s.substring(0, s.indexOf(\":\"));\n            if (prefix.equals(\"2\")) {\n                return \"2\";\n            } else {\n                return \"3\";\n            }\n        }\n    };", "modifier": "private static", "type": "Func1<String, String>", "declarator": "map1To3And2To2 = new Func1<String, String>() {\n        @Override\n        public String call(String s) {\n            String prefix = s.substring(0, s.indexOf(\":\"));\n            if (prefix.equals(\"2\")) {\n                return \"2\";\n            } else {\n                return \"3\";\n            }\n        }\n    }", "var_name": "map1To3And2To2"}, {"original_string": "private static Func1<String, String> mapWithErrorOn1 = new Func1<String, String>() {\n        @Override\n        public String call(String s) {\n            String prefix = s.substring(0, s.indexOf(\":\"));\n            if (prefix.equals(\"1\")) {\n                throw new RuntimeException(\"poorly implemented demultiplexer\");\n            } else {\n                return \"2\";\n            }\n        }\n    };", "modifier": "private static", "type": "Func1<String, String>", "declarator": "mapWithErrorOn1 = new Func1<String, String>() {\n        @Override\n        public String call(String s) {\n            String prefix = s.substring(0, s.indexOf(\":\"));\n            if (prefix.equals(\"1\")) {\n                throw new RuntimeException(\"poorly implemented demultiplexer\");\n            } else {\n                return \"2\";\n            }\n        }\n    }", "var_name": "mapWithErrorOn1"}, {"original_string": "@Rule\n    public HystrixRequestContextRule ctx = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "ctx = new HystrixRequestContextRule()", "var_name": "ctx"}, {"original_string": "private static ExecutorService threadPool = new ThreadPoolExecutor(100, 100, 10, TimeUnit.MINUTES, new SynchronousQueue<Runnable>());", "modifier": "private static", "type": "ExecutorService", "declarator": "threadPool = new ThreadPoolExecutor(100, 100, 10, TimeUnit.MINUTES, new SynchronousQueue<Runnable>())", "var_name": "threadPool"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java"}, "test_case": {"identifier": "testDuplicateArgumentsWithRequestCachingOff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDuplicateArgumentsWithRequestCachingOff() throws Exception {\n        final int NUM = 10;\n\n        List<Observable<Integer>> observables = new ArrayList<Observable<Integer>>();\n        for (int i = 0; i < NUM; i++) {\n            MyCollapser c = new MyCollapser(\"5\", false);\n            observables.add(c.toObservable());\n        }\n\n        List<TestSubscriber<Integer>> subscribers = new ArrayList<TestSubscriber<Integer>>();\n        for (final Observable<Integer> o: observables) {\n            final TestSubscriber<Integer> sub = new TestSubscriber<Integer>();\n            subscribers.add(sub);\n\n            o.subscribe(sub);\n        }\n\n        Thread.sleep(100);\n\n        AtomicInteger numErrors = new AtomicInteger(0);\n        AtomicInteger numValues = new AtomicInteger(0);\n\n        // only the first subscriber should receive the value.\n        // the others should get an error that the batch contains duplicates\n        for (TestSubscriber<Integer> sub: subscribers) {\n            sub.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);\n            if (sub.getOnCompletedEvents().isEmpty()) {\n                System.out.println(Thread.currentThread().getName() + \" Error : \" + sub.getOnErrorEvents());\n                sub.assertError(IllegalArgumentException.class);\n                sub.assertNoValues();\n                numErrors.getAndIncrement();\n\n            } else {\n                System.out.println(Thread.currentThread().getName() + \" OnNext : \" + sub.getOnNextEvents());\n                sub.assertValues(5);\n                sub.assertCompleted();\n                sub.assertNoErrors();\n                numValues.getAndIncrement();\n            }\n        }\n\n        assertEquals(1, numValues.get());\n        assertEquals(NUM - 1, numErrors.get());\n    }", "signature": "void testDuplicateArgumentsWithRequestCachingOff()", "full_signature": "@Test public void testDuplicateArgumentsWithRequestCachingOff()", "class_method_signature": "HystrixObservableCollapserTest.testDuplicateArgumentsWithRequestCachingOff()", "testcase": true, "constructor": false, "invocations": ["add", "toObservable", "add", "subscribe", "sleep", "awaitTerminalEvent", "isEmpty", "getOnCompletedEvents", "println", "getName", "currentThread", "getOnErrorEvents", "assertError", "assertNoValues", "getAndIncrement", "println", "getName", "currentThread", "getOnNextEvents", "assertValues", "assertCompleted", "assertNoErrors", "getAndIncrement", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "HystrixObservableCollapser", "superclass": "", "interfaces": "implements HystrixObservable<ResponseType>", "fields": [{"original_string": "static final Logger logger = LoggerFactory.getLogger(HystrixObservableCollapser.class);", "modifier": "static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HystrixObservableCollapser.class)", "var_name": "logger"}, {"original_string": "private final RequestCollapserFactory<BatchReturnType, ResponseType, RequestArgumentType> collapserFactory;", "modifier": "private final", "type": "RequestCollapserFactory<BatchReturnType, ResponseType, RequestArgumentType>", "declarator": "collapserFactory", "var_name": "collapserFactory"}, {"original_string": "private final HystrixRequestCache requestCache;", "modifier": "private final", "type": "HystrixRequestCache", "declarator": "requestCache", "var_name": "requestCache"}, {"original_string": "private final HystrixCollapserBridge<BatchReturnType, ResponseType, RequestArgumentType> collapserInstanceWrapper;", "modifier": "private final", "type": "HystrixCollapserBridge<BatchReturnType, ResponseType, RequestArgumentType>", "declarator": "collapserInstanceWrapper", "var_name": "collapserInstanceWrapper"}, {"original_string": "private final HystrixCollapserMetrics metrics;", "modifier": "private final", "type": "HystrixCollapserMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private static ConcurrentHashMap<Class<? extends HystrixObservableCollapser>, String> defaultNameCache = new ConcurrentHashMap<Class<? extends HystrixObservableCollapser>, String>();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private static", "type": "ConcurrentHashMap<Class<? extends HystrixObservableCollapser>, String>", "declarator": "defaultNameCache = new ConcurrentHashMap<Class<? extends HystrixObservableCollapser>, String>()", "var_name": "defaultNameCache"}], "methods": [{"identifier": "HystrixObservableCollapser", "parameters": "()", "modifiers": "protected", "return": "", "signature": " HystrixObservableCollapser()", "full_signature": "protected  HystrixObservableCollapser()", "class_method_signature": "HystrixObservableCollapser.HystrixObservableCollapser()", "testcase": false, "constructor": true}, {"identifier": "HystrixObservableCollapser", "parameters": "(HystrixCollapserKey collapserKey)", "modifiers": "protected", "return": "", "signature": " HystrixObservableCollapser(HystrixCollapserKey collapserKey)", "full_signature": "protected  HystrixObservableCollapser(HystrixCollapserKey collapserKey)", "class_method_signature": "HystrixObservableCollapser.HystrixObservableCollapser(HystrixCollapserKey collapserKey)", "testcase": false, "constructor": true}, {"identifier": "HystrixObservableCollapser", "parameters": "(Setter setter)", "modifiers": "protected", "return": "", "signature": " HystrixObservableCollapser(Setter setter)", "full_signature": "protected  HystrixObservableCollapser(Setter setter)", "class_method_signature": "HystrixObservableCollapser.HystrixObservableCollapser(Setter setter)", "testcase": false, "constructor": true}, {"identifier": "HystrixObservableCollapser", "parameters": "(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "modifiers": "", "return": "", "signature": " HystrixObservableCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "full_signature": "  HystrixObservableCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "class_method_signature": "HystrixObservableCollapser.HystrixObservableCollapser(HystrixCollapserKey collapserKey, Scope scope, CollapserTimer timer, HystrixCollapserProperties.Setter propertiesBuilder, HystrixCollapserMetrics metrics)", "testcase": false, "constructor": true}, {"identifier": "getExceptionFromThrowable", "parameters": "(Throwable t)", "modifiers": "protected", "return": "Exception", "signature": "Exception getExceptionFromThrowable(Throwable t)", "full_signature": "protected Exception getExceptionFromThrowable(Throwable t)", "class_method_signature": "HystrixObservableCollapser.getExceptionFromThrowable(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "private", "return": "HystrixCollapserProperties", "signature": "HystrixCollapserProperties getProperties()", "full_signature": "private HystrixCollapserProperties getProperties()", "class_method_signature": "HystrixObservableCollapser.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getCollapserKey", "parameters": "()", "modifiers": "public", "return": "HystrixCollapserKey", "signature": "HystrixCollapserKey getCollapserKey()", "full_signature": "public HystrixCollapserKey getCollapserKey()", "class_method_signature": "HystrixObservableCollapser.getCollapserKey()", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "Scope", "signature": "Scope getScope()", "full_signature": "public Scope getScope()", "class_method_signature": "HystrixObservableCollapser.getScope()", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "public", "return": "HystrixCollapserMetrics", "signature": "HystrixCollapserMetrics getMetrics()", "full_signature": "public HystrixCollapserMetrics getMetrics()", "class_method_signature": "HystrixObservableCollapser.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getRequestArgument", "parameters": "()", "modifiers": "public abstract", "return": "RequestArgumentType", "signature": "RequestArgumentType getRequestArgument()", "full_signature": "public abstract RequestArgumentType getRequestArgument()", "class_method_signature": "HystrixObservableCollapser.getRequestArgument()", "testcase": false, "constructor": false}, {"identifier": "createCommand", "parameters": "(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "modifiers": "protected abstract", "return": "HystrixObservableCommand<BatchReturnType>", "signature": "HystrixObservableCommand<BatchReturnType> createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "full_signature": "protected abstract HystrixObservableCommand<BatchReturnType> createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "class_method_signature": "HystrixObservableCollapser.createCommand(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "testcase": false, "constructor": false}, {"identifier": "shardRequests", "parameters": "(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "modifiers": "protected", "return": "Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>>", "signature": "Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>> shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "full_signature": "protected Collection<Collection<CollapsedRequest<ResponseType, RequestArgumentType>>> shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "class_method_signature": "HystrixObservableCollapser.shardRequests(Collection<CollapsedRequest<ResponseType, RequestArgumentType>> requests)", "testcase": false, "constructor": false}, {"identifier": "getBatchReturnTypeKeySelector", "parameters": "()", "modifiers": "protected abstract", "return": "Func1<BatchReturnType, K>", "signature": "Func1<BatchReturnType, K> getBatchReturnTypeKeySelector()", "full_signature": "protected abstract Func1<BatchReturnType, K> getBatchReturnTypeKeySelector()", "class_method_signature": "HystrixObservableCollapser.getBatchReturnTypeKeySelector()", "testcase": false, "constructor": false}, {"identifier": "getRequestArgumentKeySelector", "parameters": "()", "modifiers": "protected abstract", "return": "Func1<RequestArgumentType, K>", "signature": "Func1<RequestArgumentType, K> getRequestArgumentKeySelector()", "full_signature": "protected abstract Func1<RequestArgumentType, K> getRequestArgumentKeySelector()", "class_method_signature": "HystrixObservableCollapser.getRequestArgumentKeySelector()", "testcase": false, "constructor": false}, {"identifier": "onMissingResponse", "parameters": "(CollapsedRequest<ResponseType, RequestArgumentType> r)", "modifiers": "protected abstract", "return": "void", "signature": "void onMissingResponse(CollapsedRequest<ResponseType, RequestArgumentType> r)", "full_signature": "protected abstract void onMissingResponse(CollapsedRequest<ResponseType, RequestArgumentType> r)", "class_method_signature": "HystrixObservableCollapser.onMissingResponse(CollapsedRequest<ResponseType, RequestArgumentType> r)", "testcase": false, "constructor": false}, {"identifier": "getBatchReturnTypeToResponseTypeMapper", "parameters": "()", "modifiers": "protected abstract", "return": "Func1<BatchReturnType, ResponseType>", "signature": "Func1<BatchReturnType, ResponseType> getBatchReturnTypeToResponseTypeMapper()", "full_signature": "protected abstract Func1<BatchReturnType, ResponseType> getBatchReturnTypeToResponseTypeMapper()", "class_method_signature": "HystrixObservableCollapser.getBatchReturnTypeToResponseTypeMapper()", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> observe()", "full_signature": "public Observable<ResponseType> observe()", "class_method_signature": "HystrixObservableCollapser.observe()", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> toObservable()", "full_signature": "public Observable<ResponseType> toObservable()", "class_method_signature": "HystrixObservableCollapser.toObservable()", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(Scheduler observeOn)", "modifiers": "public", "return": "Observable<ResponseType>", "signature": "Observable<ResponseType> toObservable(Scheduler observeOn)", "full_signature": "public Observable<ResponseType> toObservable(Scheduler observeOn)", "class_method_signature": "HystrixObservableCollapser.toObservable(Scheduler observeOn)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCacheKey()", "full_signature": "protected String getCacheKey()", "class_method_signature": "HystrixObservableCollapser.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void reset()", "full_signature": "static void reset()", "class_method_signature": "HystrixObservableCollapser.reset()", "testcase": false, "constructor": false}, {"identifier": "getDefaultNameFromClass", "parameters": "(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixObservableCollapser> cls)", "modifiers": "private static", "return": "String", "signature": "String getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixObservableCollapser> cls)", "full_signature": "private static String getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixObservableCollapser> cls)", "class_method_signature": "HystrixObservableCollapser.getDefaultNameFromClass(@SuppressWarnings(\"rawtypes\") Class<? extends HystrixObservableCollapser> cls)", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixObservableCollapser.java"}, "focal_method": {"identifier": "toObservable", "parameters": "()", "modifiers": "public", "return": "Observable<ResponseType>", "body": "public Observable<ResponseType> toObservable() {\n        // when we callback with the data we want to do the work\n        // on a separate thread than the one giving us the callback\n        return toObservable(Schedulers.computation());\n    }", "signature": "Observable<ResponseType> toObservable()", "full_signature": "public Observable<ResponseType> toObservable()", "class_method_signature": "HystrixObservableCollapser.toObservable()", "testcase": false, "constructor": false, "invocations": ["toObservable", "computation"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}