{"test_class": {"identifier": "MetadataFieldTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(MetadataFieldTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(MetadataFieldTest.class)", "var_name": "log"}, {"original_string": "private MetadataField mf;", "modifier": "private", "type": "MetadataField", "declarator": "mf", "var_name": "mf"}, {"original_string": "private MetadataSchema dcSchema;", "modifier": "private", "type": "MetadataSchema", "declarator": "dcSchema", "var_name": "dcSchema"}, {"original_string": "private String element = \"contributor\";", "modifier": "private", "type": "String", "declarator": "element = \"contributor\"", "var_name": "element"}, {"original_string": "private String qualifier = \"author\";", "modifier": "private", "type": "String", "declarator": "qualifier = \"author\"", "var_name": "qualifier"}, {"original_string": "private String scopeNote = \"scope note\";", "modifier": "private", "type": "String", "declarator": "scopeNote = \"scope note\"", "var_name": "scopeNote"}, {"original_string": "protected MetadataSchemaService metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService();", "modifier": "protected", "type": "MetadataSchemaService", "declarator": "metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService()", "var_name": "metadataSchemaService"}, {"original_string": "protected MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();", "modifier": "protected", "type": "MetadataFieldService", "declarator": "metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService()", "var_name": "metadataFieldService"}], "file": "dspace-api/src/test/java/org/dspace/content/MetadataFieldTest.java"}, "test_case": {"identifier": "testGetQualifier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetQualifier() \n    {\n        assertThat(\"testGetQualifier 0\",mf.getQualifier(), equalTo(qualifier));\n    }", "signature": "void testGetQualifier()", "full_signature": "@Test public void testGetQualifier()", "class_method_signature": "MetadataFieldTest.testGetQualifier()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getQualifier", "equalTo"]}, "focal_class": {"identifier": "MetadataField", "superclass": "", "interfaces": "implements ReloadableEntity<Integer>", "fields": [{"original_string": "@Id\n    @Column(name=\"metadata_field_id\", nullable = false, unique = true)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE ,generator=\"metadatafieldregistry_seq\")\n    @SequenceGenerator(name=\"metadatafieldregistry_seq\", sequenceName=\"metadatafieldregistry_seq\", allocationSize = 1, initialValue = 1)\n    private Integer id;", "modifier": "@Id\n    @Column(name=\"metadata_field_id\", nullable = false, unique = true)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE ,generator=\"metadatafieldregistry_seq\")\n    @SequenceGenerator(name=\"metadatafieldregistry_seq\", sequenceName=\"metadatafieldregistry_seq\", allocationSize = 1, initialValue = 1)\n    private", "type": "Integer", "declarator": "id", "var_name": "id"}, {"original_string": "@ManyToOne(fetch = FetchType.EAGER)\n    @JoinColumn(name = \"metadata_schema_id\",nullable = false)\n    private MetadataSchema metadataSchema;", "modifier": "@ManyToOne(fetch = FetchType.EAGER)\n    @JoinColumn(name = \"metadata_schema_id\",nullable = false)\n    private", "type": "MetadataSchema", "declarator": "metadataSchema", "var_name": "metadataSchema"}, {"original_string": "@Column(name = \"element\", length = 64)\n    private String element;", "modifier": "@Column(name = \"element\", length = 64)\n    private", "type": "String", "declarator": "element", "var_name": "element"}, {"original_string": "@Column(name = \"qualifier\", length = 64)\n    private String qualifier = null;", "modifier": "@Column(name = \"qualifier\", length = 64)\n    private", "type": "String", "declarator": "qualifier = null", "var_name": "qualifier"}, {"original_string": "@Column(name=\"scope_note\", columnDefinition = \"text\")\n    private String scopeNote;", "modifier": "@Column(name=\"scope_note\", columnDefinition = \"text\")\n    private", "type": "String", "declarator": "scopeNote", "var_name": "scopeNote"}], "methods": [{"identifier": "MetadataField", "parameters": "()", "modifiers": "protected", "return": "", "signature": " MetadataField()", "full_signature": "protected  MetadataField()", "class_method_signature": "MetadataField.MetadataField()", "testcase": false, "constructor": true}, {"identifier": "getID", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getID()", "full_signature": "public Integer getID()", "class_method_signature": "MetadataField.getID()", "testcase": false, "constructor": false}, {"identifier": "getElement", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getElement()", "full_signature": "public String getElement()", "class_method_signature": "MetadataField.getElement()", "testcase": false, "constructor": false}, {"identifier": "setElement", "parameters": "(String element)", "modifiers": "public", "return": "void", "signature": "void setElement(String element)", "full_signature": "public void setElement(String element)", "class_method_signature": "MetadataField.setElement(String element)", "testcase": false, "constructor": false}, {"identifier": "getQualifier", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQualifier()", "full_signature": "public String getQualifier()", "class_method_signature": "MetadataField.getQualifier()", "testcase": false, "constructor": false}, {"identifier": "setQualifier", "parameters": "(String qualifier)", "modifiers": "public", "return": "void", "signature": "void setQualifier(String qualifier)", "full_signature": "public void setQualifier(String qualifier)", "class_method_signature": "MetadataField.setQualifier(String qualifier)", "testcase": false, "constructor": false}, {"identifier": "getScopeNote", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScopeNote()", "full_signature": "public String getScopeNote()", "class_method_signature": "MetadataField.getScopeNote()", "testcase": false, "constructor": false}, {"identifier": "setScopeNote", "parameters": "(String scopeNote)", "modifiers": "public", "return": "void", "signature": "void setScopeNote(String scopeNote)", "full_signature": "public void setScopeNote(String scopeNote)", "class_method_signature": "MetadataField.setScopeNote(String scopeNote)", "testcase": false, "constructor": false}, {"identifier": "getMetadataSchema", "parameters": "()", "modifiers": "public", "return": "MetadataSchema", "signature": "MetadataSchema getMetadataSchema()", "full_signature": "public MetadataSchema getMetadataSchema()", "class_method_signature": "MetadataField.getMetadataSchema()", "testcase": false, "constructor": false}, {"identifier": "setMetadataSchema", "parameters": "(MetadataSchema metadataSchema)", "modifiers": "public", "return": "void", "signature": "void setMetadataSchema(MetadataSchema metadataSchema)", "full_signature": "public void setMetadataSchema(MetadataSchema metadataSchema)", "class_method_signature": "MetadataField.setMetadataSchema(MetadataSchema metadataSchema)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "MetadataField.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MetadataField.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(char separator)", "modifiers": "public", "return": "String", "signature": "String toString(char separator)", "full_signature": "public String toString(char separator)", "class_method_signature": "MetadataField.toString(char separator)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MetadataField.toString()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/MetadataField.java"}, "focal_method": {"identifier": "getQualifier", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getQualifier()\n    {\n        return qualifier;\n    }", "signature": "String getQualifier()", "full_signature": "public String getQualifier()", "class_method_signature": "MetadataField.getQualifier()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}