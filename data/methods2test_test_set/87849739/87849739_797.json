{"test_class": {"identifier": "ImmutableHeadersPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ImmutableHeadersPlaceholder UNDER_TEST = ImmutableHeadersPlaceholder.INSTANCE;", "modifier": "private static final", "type": "ImmutableHeadersPlaceholder", "declarator": "UNDER_TEST = ImmutableHeadersPlaceholder.INSTANCE", "var_name": "UNDER_TEST"}, {"original_string": "private static final Map<String, String> HEADERS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "HEADERS = new HashMap<>()", "var_name": "HEADERS"}, {"original_string": "private static final String DEVICE_ID = \"eclipse:ditto:device1234\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_ID = \"eclipse:ditto:device1234\"", "var_name": "DEVICE_ID"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutableHeadersPlaceholderTest.java"}, "test_case": {"identifier": "testUnresolvableHeaderReturnsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnresolvableHeaderReturnsEmpty() {\n        assertThat(UNDER_TEST.resolve(HEADERS, \"thing_id\")).isEmpty();\n    }", "signature": "void testUnresolvableHeaderReturnsEmpty()", "full_signature": "@Test public void testUnresolvableHeaderReturnsEmpty()", "class_method_signature": "ImmutableHeadersPlaceholderTest.testUnresolvableHeaderReturnsEmpty()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "resolve"]}, "focal_class": {"identifier": "ImmutableHeadersPlaceholder", "superclass": "", "interfaces": "implements HeadersPlaceholder", "fields": [{"original_string": "static final ImmutableHeadersPlaceholder INSTANCE = new ImmutableHeadersPlaceholder();", "modifier": "static final", "type": "ImmutableHeadersPlaceholder", "declarator": "INSTANCE = new ImmutableHeadersPlaceholder()", "var_name": "INSTANCE"}, {"original_string": "private static final String PREFIX = \"header\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"header\"", "var_name": "PREFIX"}], "methods": [{"identifier": "ImmutableHeadersPlaceholder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ImmutableHeadersPlaceholder()", "full_signature": "private  ImmutableHeadersPlaceholder()", "class_method_signature": "ImmutableHeadersPlaceholder.ImmutableHeadersPlaceholder()", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutableHeadersPlaceholder.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSupportedNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedNames()", "full_signature": "@Override public List<String> getSupportedNames()", "class_method_signature": "ImmutableHeadersPlaceholder.getSupportedNames()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(final String name)", "full_signature": "@Override public boolean supports(final String name)", "class_method_signature": "ImmutableHeadersPlaceholder.supports(final String name)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final Map<String, String> headers, final String headerKey)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> resolve(final Map<String, String> headers, final String headerKey)", "full_signature": "@Override public Optional<String> resolve(final Map<String, String> headers, final String headerKey)", "class_method_signature": "ImmutableHeadersPlaceholder.resolve(final Map<String, String> headers, final String headerKey)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableHeadersPlaceholder.toString()", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutableHeadersPlaceholder.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Map<String, String> headers, final String headerKey)", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> resolve(final Map<String, String> headers, final String headerKey) {\n        ConditionChecker.argumentNotEmpty(headerKey, \"headerKey\");\n        ConditionChecker.argumentNotNull(headers, \"headers\");\n        return Optional.ofNullable(headers.get(headerKey));\n    }", "signature": "Optional<String> resolve(final Map<String, String> headers, final String headerKey)", "full_signature": "@Override public Optional<String> resolve(final Map<String, String> headers, final String headerKey)", "class_method_signature": "ImmutableHeadersPlaceholder.resolve(final Map<String, String> headers, final String headerKey)", "testcase": false, "constructor": false, "invocations": ["argumentNotEmpty", "argumentNotNull", "ofNullable", "get"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}