{"test_class": {"identifier": "PolygonHandlerTest", "superclass": "extends TestCaseSupport", "interfaces": "", "fields": [], "file": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/shp/PolygonHandlerTest.java"}, "test_case": {"identifier": "testHoleAssignment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHoleAssignment() {\n        java.awt.Dimension ps = new java.awt.Dimension(500, 500);\n        PrecisionModel precision = new PrecisionModel();\n\n        ArrayList shells = new ArrayList();\n        ArrayList holes = new ArrayList();\n\n        int x = 10;\n        int y = 10;\n\n        shells.add(copyTo(x, y, ps.width - 2 * x, ps.height - 2 * y, rectangle(\n                precision, 0)));\n\n        int w = 11;\n        int h = 11;\n        int s = 10;\n\n        int nx = (ps.width - 2 * x) / (w + s);\n        int ny = (ps.height - 2 * y) / (h + s);\n\n        for (int i = 0; i < nx; i++) {\n            for (int j = 0; j < ny; j++) {\n                holes.add(copyTo(x + s + i * (w + s), y + s + j * (h + s), w,\n                        h, rectangle(precision, 0)));\n            }\n        }\n\n        PolygonHandler ph = new PolygonHandler(new GeometryFactory());\n        ArrayList assigned = ph.assignHolesToShells(shells, holes);\n        assertEquals(((ArrayList) assigned.get(0)).size(), holes.size());\n\n    }", "signature": "void testHoleAssignment()", "full_signature": "@Test public void testHoleAssignment()", "class_method_signature": "PolygonHandlerTest.testHoleAssignment()", "testcase": true, "constructor": false, "invocations": ["add", "copyTo", "rectangle", "add", "copyTo", "rectangle", "assignHolesToShells", "assertEquals", "size", "get", "size"]}, "focal_class": {"identifier": "PolygonHandler", "superclass": "", "interfaces": "implements ShapeHandler", "fields": [{"original_string": "protected static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.data.shapefile\");", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.data.shapefile\")", "var_name": "LOGGER"}, {"original_string": "GeometryFactory geometryFactory;", "modifier": "", "type": "GeometryFactory", "declarator": "geometryFactory", "var_name": "geometryFactory"}, {"original_string": "final ShapeType shapeType;", "modifier": "final", "type": "ShapeType", "declarator": "shapeType", "var_name": "shapeType"}], "methods": [{"identifier": "PolygonHandler", "parameters": "(GeometryFactory gf)", "modifiers": "public", "return": "", "signature": " PolygonHandler(GeometryFactory gf)", "full_signature": "public  PolygonHandler(GeometryFactory gf)", "class_method_signature": "PolygonHandler.PolygonHandler(GeometryFactory gf)", "testcase": false, "constructor": true}, {"identifier": "PolygonHandler", "parameters": "(ShapeType type, GeometryFactory gf)", "modifiers": "public", "return": "", "signature": " PolygonHandler(ShapeType type, GeometryFactory gf)", "full_signature": "public  PolygonHandler(ShapeType type, GeometryFactory gf)", "class_method_signature": "PolygonHandler.PolygonHandler(ShapeType type, GeometryFactory gf)", "testcase": false, "constructor": true}, {"identifier": "pointInList", "parameters": "(Coordinate testPoint, Coordinate[] pointList)", "modifiers": "", "return": "boolean", "signature": "boolean pointInList(Coordinate testPoint, Coordinate[] pointList)", "full_signature": " boolean pointInList(Coordinate testPoint, Coordinate[] pointList)", "class_method_signature": "PolygonHandler.pointInList(Coordinate testPoint, Coordinate[] pointList)", "testcase": false, "constructor": false}, {"identifier": "getShapeType", "parameters": "()", "modifiers": "public", "return": "ShapeType", "signature": "ShapeType getShapeType()", "full_signature": "public ShapeType getShapeType()", "class_method_signature": "PolygonHandler.getShapeType()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "(Object geometry)", "modifiers": "public", "return": "int", "signature": "int getLength(Object geometry)", "full_signature": "public int getLength(Object geometry)", "class_method_signature": "PolygonHandler.getLength(Object geometry)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ByteBuffer buffer, ShapeType type, boolean flatFeature)", "modifiers": "public", "return": "Object", "signature": "Object read(ByteBuffer buffer, ShapeType type, boolean flatFeature)", "full_signature": "public Object read(ByteBuffer buffer, ShapeType type, boolean flatFeature)", "class_method_signature": "PolygonHandler.read(ByteBuffer buffer, ShapeType type, boolean flatFeature)", "testcase": false, "constructor": false}, {"identifier": "readCoordinates", "parameters": "(final ByteBuffer buffer,\n            final int numPoints, final int dimensions)", "modifiers": "private", "return": "CoordinateSequence", "signature": "CoordinateSequence readCoordinates(final ByteBuffer buffer,\n            final int numPoints, final int dimensions)", "full_signature": "private CoordinateSequence readCoordinates(final ByteBuffer buffer,\n            final int numPoints, final int dimensions)", "class_method_signature": "PolygonHandler.readCoordinates(final ByteBuffer buffer,\n            final int numPoints, final int dimensions)", "testcase": false, "constructor": false}, {"identifier": "buildGeometries", "parameters": "(final List shells, final List holes,\n            final List holesForShells)", "modifiers": "private", "return": "Geometry", "signature": "Geometry buildGeometries(final List shells, final List holes,\n            final List holesForShells)", "full_signature": "private Geometry buildGeometries(final List shells, final List holes,\n            final List holesForShells)", "class_method_signature": "PolygonHandler.buildGeometries(final List shells, final List holes,\n            final List holesForShells)", "testcase": false, "constructor": false}, {"identifier": "assignHolesToShells", "parameters": "(final ArrayList shells, final ArrayList holes)", "modifiers": "", "return": "ArrayList", "signature": "ArrayList assignHolesToShells(final ArrayList shells, final ArrayList holes)", "full_signature": " ArrayList assignHolesToShells(final ArrayList shells, final ArrayList holes)", "class_method_signature": "PolygonHandler.assignHolesToShells(final ArrayList shells, final ArrayList holes)", "testcase": false, "constructor": false}, {"identifier": "createMulti", "parameters": "(LinearRing single)", "modifiers": "private", "return": "MultiPolygon", "signature": "MultiPolygon createMulti(LinearRing single)", "full_signature": "private MultiPolygon createMulti(LinearRing single)", "class_method_signature": "PolygonHandler.createMulti(LinearRing single)", "testcase": false, "constructor": false}, {"identifier": "createMulti", "parameters": "(LinearRing single, List holes)", "modifiers": "private", "return": "MultiPolygon", "signature": "MultiPolygon createMulti(LinearRing single, List holes)", "full_signature": "private MultiPolygon createMulti(LinearRing single, List holes)", "class_method_signature": "PolygonHandler.createMulti(LinearRing single, List holes)", "testcase": false, "constructor": false}, {"identifier": "createNull", "parameters": "()", "modifiers": "private", "return": "MultiPolygon", "signature": "MultiPolygon createNull()", "full_signature": "private MultiPolygon createNull()", "class_method_signature": "PolygonHandler.createNull()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(ByteBuffer buffer, Object geometry)", "modifiers": "public", "return": "void", "signature": "void write(ByteBuffer buffer, Object geometry)", "full_signature": "public void write(ByteBuffer buffer, Object geometry)", "class_method_signature": "PolygonHandler.write(ByteBuffer buffer, Object geometry)", "testcase": false, "constructor": false}], "file": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/shp/PolygonHandler.java"}, "focal_method": {"identifier": "assignHolesToShells", "parameters": "(final ArrayList shells, final ArrayList holes)", "modifiers": "", "return": "ArrayList", "body": "ArrayList assignHolesToShells(final ArrayList shells, final ArrayList holes) {\n        ArrayList holesForShells = new ArrayList(shells.size());\n        for (int i = 0; i < shells.size(); i++) {\n            holesForShells.add(new ArrayList());\n        }\n\n        // find homes\n        for (int i = 0; i < holes.size(); i++) {\n            LinearRing testRing = (LinearRing) holes.get(i);\n            LinearRing minShell = null;\n            Envelope minEnv = null;\n            Envelope testEnv = testRing.getEnvelopeInternal();\n            Coordinate testPt = testRing.getCoordinateN(0);\n            LinearRing tryRing;\n\n            for (int j = 0; j < shells.size(); j++) {\n                tryRing = (LinearRing) shells.get(j);\n\n                Envelope tryEnv = tryRing.getEnvelopeInternal();\n                if (minShell != null) {\n                    minEnv = minShell.getEnvelopeInternal();\n                }\n\n                boolean isContained = false;\n                Coordinate[] coordList = tryRing.getCoordinates();\n\n                if (tryEnv.contains(testEnv)\n                        && (CGAlgorithms.isPointInRing(testPt, coordList) || (pointInList(\n                                testPt, coordList)))) {\n                    isContained = true;\n                }\n\n                // check if this new containing ring is smaller than the current\n                // minimum ring\n                if (isContained) {\n                    if ((minShell == null) || minEnv.contains(tryEnv)) {\n                        minShell = tryRing;\n                    }\n                }\n            }\n\n            if (minShell == null) {\n                // now reverse this bad \"hole\" and turn it into a shell\n                shells.add(testRing);\n                holesForShells.add(new ArrayList());\n            } else {\n                ((ArrayList) holesForShells.get(shells.indexOf(minShell)))\n                        .add(testRing);\n            }\n        }\n\n        return holesForShells;\n    }", "signature": "ArrayList assignHolesToShells(final ArrayList shells, final ArrayList holes)", "full_signature": " ArrayList assignHolesToShells(final ArrayList shells, final ArrayList holes)", "class_method_signature": "PolygonHandler.assignHolesToShells(final ArrayList shells, final ArrayList holes)", "testcase": false, "constructor": false, "invocations": ["size", "size", "add", "size", "get", "getEnvelopeInternal", "getCoordinateN", "size", "get", "getEnvelopeInternal", "getEnvelopeInternal", "getCoordinates", "contains", "isPointInRing", "pointInList", "contains", "add", "add", "add", "get", "indexOf"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}