{"test_class": {"identifier": "ArrayCompositeSubscriptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscriptions/ArrayCompositeSubscriptionTest.java"}, "test_case": {"identifier": "disposeRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void disposeRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final ArrayCompositeSubscription ac = new ArrayCompositeSubscription(1000);\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    ac.dispose();\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }", "signature": "void disposeRace()", "full_signature": "@Test public void disposeRace()", "class_method_signature": "ArrayCompositeSubscriptionTest.disposeRace()", "testcase": true, "constructor": false, "invocations": ["dispose", "race"]}, "focal_class": {"identifier": "ArrayCompositeSubscription", "superclass": "extends AtomicReferenceArray<Subscription>", "interfaces": "implements Disposable", "fields": [{"original_string": "private static final long serialVersionUID = 2746389416410565408L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2746389416410565408L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ArrayCompositeSubscription", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " ArrayCompositeSubscription(int capacity)", "full_signature": "public  ArrayCompositeSubscription(int capacity)", "class_method_signature": "ArrayCompositeSubscription.ArrayCompositeSubscription(int capacity)", "testcase": false, "constructor": true}, {"identifier": "setResource", "parameters": "(int index, Subscription resource)", "modifiers": "public", "return": "boolean", "signature": "boolean setResource(int index, Subscription resource)", "full_signature": "public boolean setResource(int index, Subscription resource)", "class_method_signature": "ArrayCompositeSubscription.setResource(int index, Subscription resource)", "testcase": false, "constructor": false}, {"identifier": "replaceResource", "parameters": "(int index, Subscription resource)", "modifiers": "public", "return": "Subscription", "signature": "Subscription replaceResource(int index, Subscription resource)", "full_signature": "public Subscription replaceResource(int index, Subscription resource)", "class_method_signature": "ArrayCompositeSubscription.replaceResource(int index, Subscription resource)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ArrayCompositeSubscription.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "ArrayCompositeSubscription.isDisposed()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscriptions/ArrayCompositeSubscription.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        if (get(0) != SubscriptionHelper.CANCELLED) {\n            int s = length();\n            for (int i = 0; i < s; i++) {\n                Subscription o = get(i);\n                if (o != SubscriptionHelper.CANCELLED) {\n                    o = getAndSet(i, SubscriptionHelper.CANCELLED);\n                    if (o != SubscriptionHelper.CANCELLED && o != null) {\n                        o.cancel();\n                    }\n                }\n            }\n        }\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ArrayCompositeSubscription.dispose()", "testcase": false, "constructor": false, "invocations": ["get", "length", "get", "getAndSet", "cancel"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}