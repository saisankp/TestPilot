{"test_class": {"identifier": "PojoUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BigPerson bigPerson;", "modifier": "", "type": "BigPerson", "declarator": "bigPerson", "var_name": "bigPerson"}], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/PojoUtilsTest.java"}, "test_case": {"identifier": "testDateTimeTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDateTimeTimestamp() throws Exception {\n        String dateStr = \"2018-09-12\";\n        String timeStr = \"10:12:33\";\n        String dateTimeStr = \"2018-09-12 10:12:33\";\n        String[] dateFormat = new String[]{\"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd\", \"HH:mm:ss\"};\n\n        //java.util.Date\n        Object date = PojoUtils.realize(dateTimeStr, Date.class, (Type) Date.class);\n        assertEquals(Date.class, date.getClass());\n        assertEquals(dateTimeStr, new SimpleDateFormat(dateFormat[0]).format(date));\n\n        //java.sql.Time\n        Object time = PojoUtils.realize(dateTimeStr, java.sql.Time.class, (Type) java.sql.Time.class);\n        assertEquals(java.sql.Time.class, time.getClass());\n        assertEquals(timeStr, new SimpleDateFormat(dateFormat[2]).format(time));\n\n        //java.sql.Date\n        Object sqlDate = PojoUtils.realize(dateTimeStr, java.sql.Date.class, (Type) java.sql.Date.class);\n        assertEquals(java.sql.Date.class, sqlDate.getClass());\n        assertEquals(dateStr, new SimpleDateFormat(dateFormat[1]).format(sqlDate));\n\n        //java.sql.Timestamp\n        Object timestamp = PojoUtils.realize(dateTimeStr, java.sql.Timestamp.class, (Type) java.sql.Timestamp.class);\n        assertEquals(java.sql.Timestamp.class, timestamp.getClass());\n        assertEquals(dateTimeStr, new SimpleDateFormat(dateFormat[0]).format(timestamp));\n    }", "signature": "void testDateTimeTimestamp()", "full_signature": "@Test public void testDateTimeTimestamp()", "class_method_signature": "PojoUtilsTest.testDateTimeTimestamp()", "testcase": true, "constructor": false, "invocations": ["realize", "assertEquals", "getClass", "assertEquals", "format", "realize", "assertEquals", "getClass", "assertEquals", "format", "realize", "assertEquals", "getClass", "assertEquals", "format", "realize", "assertEquals", "getClass", "assertEquals", "format"]}, "focal_class": {"identifier": "PojoUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, Method> NAME_METHODS_CACHE = new ConcurrentHashMap<String, Method>();", "modifier": "private static final", "type": "ConcurrentMap<String, Method>", "declarator": "NAME_METHODS_CACHE = new ConcurrentHashMap<String, Method>()", "var_name": "NAME_METHODS_CACHE"}, {"original_string": "private static final ConcurrentMap<Class<?>, ConcurrentMap<String, Field>> CLASS_FIELD_CACHE = new ConcurrentHashMap<Class<?>, ConcurrentMap<String, Field>>();", "modifier": "private static final", "type": "ConcurrentMap<Class<?>, ConcurrentMap<String, Field>>", "declarator": "CLASS_FIELD_CACHE = new ConcurrentHashMap<Class<?>, ConcurrentMap<String, Field>>()", "var_name": "CLASS_FIELD_CACHE"}], "methods": [{"identifier": "generalize", "parameters": "(Object[] objs)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] generalize(Object[] objs)", "full_signature": "public static Object[] generalize(Object[] objs)", "class_method_signature": "PojoUtils.generalize(Object[] objs)", "testcase": false, "constructor": false}, {"identifier": "realize", "parameters": "(Object[] objs, Class<?>[] types)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] realize(Object[] objs, Class<?>[] types)", "full_signature": "public static Object[] realize(Object[] objs, Class<?>[] types)", "class_method_signature": "PojoUtils.realize(Object[] objs, Class<?>[] types)", "testcase": false, "constructor": false}, {"identifier": "realize", "parameters": "(Object[] objs, Class<?>[] types, Type[] gtypes)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] realize(Object[] objs, Class<?>[] types, Type[] gtypes)", "full_signature": "public static Object[] realize(Object[] objs, Class<?>[] types, Type[] gtypes)", "class_method_signature": "PojoUtils.realize(Object[] objs, Class<?>[] types, Type[] gtypes)", "testcase": false, "constructor": false}, {"identifier": "generalize", "parameters": "(Object pojo)", "modifiers": "public static", "return": "Object", "signature": "Object generalize(Object pojo)", "full_signature": "public static Object generalize(Object pojo)", "class_method_signature": "PojoUtils.generalize(Object pojo)", "testcase": false, "constructor": false}, {"identifier": "generalize", "parameters": "(Object pojo, Map<Object, Object> history)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Object", "signature": "Object generalize(Object pojo, Map<Object, Object> history)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Object generalize(Object pojo, Map<Object, Object> history)", "class_method_signature": "PojoUtils.generalize(Object pojo, Map<Object, Object> history)", "testcase": false, "constructor": false}, {"identifier": "realize", "parameters": "(Object pojo, Class<?> type)", "modifiers": "public static", "return": "Object", "signature": "Object realize(Object pojo, Class<?> type)", "full_signature": "public static Object realize(Object pojo, Class<?> type)", "class_method_signature": "PojoUtils.realize(Object pojo, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "realize", "parameters": "(Object pojo, Class<?> type, Type genericType)", "modifiers": "public static", "return": "Object", "signature": "Object realize(Object pojo, Class<?> type, Type genericType)", "full_signature": "public static Object realize(Object pojo, Class<?> type, Type genericType)", "class_method_signature": "PojoUtils.realize(Object pojo, Class<?> type, Type genericType)", "testcase": false, "constructor": false}, {"identifier": "createCollection", "parameters": "(Class<?> type, int len)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Collection<Object>", "signature": "Collection<Object> createCollection(Class<?> type, int len)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Collection<Object> createCollection(Class<?> type, int len)", "class_method_signature": "PojoUtils.createCollection(Class<?> type, int len)", "testcase": false, "constructor": false}, {"identifier": "createMap", "parameters": "(Map src)", "modifiers": "private static", "return": "Map", "signature": "Map createMap(Map src)", "full_signature": "private static Map createMap(Map src)", "class_method_signature": "PojoUtils.createMap(Map src)", "testcase": false, "constructor": false}, {"identifier": "realize0", "parameters": "(Object pojo, Class<?> type, Type genericType, final Map<Object, Object> history)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private static", "return": "Object", "signature": "Object realize0(Object pojo, Class<?> type, Type genericType, final Map<Object, Object> history)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private static Object realize0(Object pojo, Class<?> type, Type genericType, final Map<Object, Object> history)", "class_method_signature": "PojoUtils.realize0(Object pojo, Class<?> type, Type genericType, final Map<Object, Object> history)", "testcase": false, "constructor": false}, {"identifier": "getGenericClassByIndex", "parameters": "(Type genericType, int index)", "modifiers": "private static", "return": "Type", "signature": "Type getGenericClassByIndex(Type genericType, int index)", "full_signature": "private static Type getGenericClassByIndex(Type genericType, int index)", "class_method_signature": "PojoUtils.getGenericClassByIndex(Type genericType, int index)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<?> cls)", "modifiers": "private static", "return": "Object", "signature": "Object newInstance(Class<?> cls)", "full_signature": "private static Object newInstance(Class<?> cls)", "class_method_signature": "PojoUtils.newInstance(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getSetterMethod", "parameters": "(Class<?> cls, String property, Class<?> valueCls)", "modifiers": "private static", "return": "Method", "signature": "Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "full_signature": "private static Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "class_method_signature": "PojoUtils.getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> cls, String fieldName)", "modifiers": "private static", "return": "Field", "signature": "Field getField(Class<?> cls, String fieldName)", "full_signature": "private static Field getField(Class<?> cls, String fieldName)", "class_method_signature": "PojoUtils.getField(Class<?> cls, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isPojo", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPojo(Class<?> cls)", "full_signature": "public static boolean isPojo(Class<?> cls)", "class_method_signature": "PojoUtils.isPojo(Class<?> cls)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/PojoUtils.java"}, "focal_method": {"identifier": "realize", "parameters": "(Object[] objs, Class<?>[] types)", "modifiers": "public static", "return": "Object[]", "body": "public static Object[] realize(Object[] objs, Class<?>[] types) {\n        if (objs.length != types.length)\n            throw new IllegalArgumentException(\"args.length != types.length\");\n        Object[] dests = new Object[objs.length];\n        for (int i = 0; i < objs.length; i++) {\n            dests[i] = realize(objs[i], types[i]);\n        }\n        return dests;\n    }", "signature": "Object[] realize(Object[] objs, Class<?>[] types)", "full_signature": "public static Object[] realize(Object[] objs, Class<?>[] types)", "class_method_signature": "PojoUtils.realize(Object[] objs, Class<?>[] types)", "testcase": false, "constructor": false, "invocations": ["realize"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}