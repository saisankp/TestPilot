{"test_class": {"identifier": "CreateVPCOfferingCmdTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmdTest.java"}, "test_case": {"identifier": "testServiceProvidersEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServiceProvidersEmpty() throws IllegalArgumentException,\n            IllegalAccessException {\n        CreateVPCOfferingCmd cmd = new CreateVPCOfferingCmd();\n        ApiCmdTestUtil.set(cmd, ApiConstants.SERVICE_PROVIDER_LIST, new HashMap<String, Map<String, String>>());\n        Assert.assertNull(cmd.getServiceProviders());\n    }", "signature": "void testServiceProvidersEmpty()", "full_signature": "@Test public void testServiceProvidersEmpty()", "class_method_signature": "CreateVPCOfferingCmdTest.testServiceProvidersEmpty()", "testcase": true, "constructor": false, "invocations": ["set", "assertNull", "getServiceProviders"]}, "focal_class": {"identifier": "CreateVPCOfferingCmd", "superclass": "extends BaseAsyncCreateCmd", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(CreateVPCOfferingCmd.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(CreateVPCOfferingCmd.class.getName())", "var_name": "s_logger"}, {"original_string": "private static final String s_name = \"createvpcofferingresponse\";", "modifier": "private static final", "type": "String", "declarator": "s_name = \"createvpcofferingresponse\"", "var_name": "s_name"}, {"original_string": "@Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true, description = \"the name of the vpc offering\")\n    private String vpcOfferingName;", "modifier": "@Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true, description = \"the name of the vpc offering\")\n    private", "type": "String", "declarator": "vpcOfferingName", "var_name": "vpcOfferingName"}, {"original_string": "@Parameter(name = ApiConstants.DISPLAY_TEXT, type = CommandType.STRING, required = true, description = \"the display text of \" + \"the vpc offering\")\n    private String displayText;", "modifier": "@Parameter(name = ApiConstants.DISPLAY_TEXT, type = CommandType.STRING, required = true, description = \"the display text of \" + \"the vpc offering\")\n    private", "type": "String", "declarator": "displayText", "var_name": "displayText"}, {"original_string": "@Parameter(name = ApiConstants.SUPPORTED_SERVICES,\n               type = CommandType.LIST,\n               required = true,\n               collectionType = CommandType.STRING,\n               description = \"services supported by the vpc offering\")\n    private List<String> supportedServices;", "modifier": "@Parameter(name = ApiConstants.SUPPORTED_SERVICES,\n               type = CommandType.LIST,\n               required = true,\n               collectionType = CommandType.STRING,\n               description = \"services supported by the vpc offering\")\n    private", "type": "List<String>", "declarator": "supportedServices", "var_name": "supportedServices"}, {"original_string": "@Parameter(name = ApiConstants.SERVICE_PROVIDER_LIST, type = CommandType.MAP, description = \"provider to service mapping. \"\n        + \"If not specified, the provider for the service will be mapped to the default provider on the physical network\")\n    private Map<String, ? extends Map<String, String>> serviceProviderList;", "modifier": "@Parameter(name = ApiConstants.SERVICE_PROVIDER_LIST, type = CommandType.MAP, description = \"provider to service mapping. \"\n        + \"If not specified, the provider for the service will be mapped to the default provider on the physical network\")\n    private", "type": "Map<String, ? extends Map<String, String>>", "declarator": "serviceProviderList", "var_name": "serviceProviderList"}, {"original_string": "@Parameter(name = ApiConstants.SERVICE_CAPABILITY_LIST, type = CommandType.MAP, description = \"desired service capabilities as part of vpc offering\", since = \"4.4\")\n    private Map<String, List<String>> serviceCapabilitystList;", "modifier": "@Parameter(name = ApiConstants.SERVICE_CAPABILITY_LIST, type = CommandType.MAP, description = \"desired service capabilities as part of vpc offering\", since = \"4.4\")\n    private", "type": "Map<String, List<String>>", "declarator": "serviceCapabilitystList", "var_name": "serviceCapabilitystList"}, {"original_string": "@Parameter(name = ApiConstants.SERVICE_OFFERING_ID,\n               type = CommandType.UUID,\n               entityType = ServiceOfferingResponse.class,\n               description = \"the ID of the service offering for the VPC router appliance\")\n    private Long serviceOfferingId;", "modifier": "@Parameter(name = ApiConstants.SERVICE_OFFERING_ID,\n               type = CommandType.UUID,\n               entityType = ServiceOfferingResponse.class,\n               description = \"the ID of the service offering for the VPC router appliance\")\n    private", "type": "Long", "declarator": "serviceOfferingId", "var_name": "serviceOfferingId"}], "methods": [{"identifier": "getVpcOfferingName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVpcOfferingName()", "full_signature": "public String getVpcOfferingName()", "class_method_signature": "CreateVPCOfferingCmd.getVpcOfferingName()", "testcase": false, "constructor": false}, {"identifier": "getDisplayText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDisplayText()", "full_signature": "public String getDisplayText()", "class_method_signature": "CreateVPCOfferingCmd.getDisplayText()", "testcase": false, "constructor": false}, {"identifier": "getSupportedServices", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSupportedServices()", "full_signature": "public List<String> getSupportedServices()", "class_method_signature": "CreateVPCOfferingCmd.getSupportedServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getServiceProviders()", "full_signature": "public Map<String, List<String>> getServiceProviders()", "class_method_signature": "CreateVPCOfferingCmd.getServiceProviders()", "testcase": false, "constructor": false}, {"identifier": "getServiceCapabilitystList", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getServiceCapabilitystList()", "full_signature": "public Map<String, List<String>> getServiceCapabilitystList()", "class_method_signature": "CreateVPCOfferingCmd.getServiceCapabilitystList()", "testcase": false, "constructor": false}, {"identifier": "getServiceOfferingId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getServiceOfferingId()", "full_signature": "public Long getServiceOfferingId()", "class_method_signature": "CreateVPCOfferingCmd.getServiceOfferingId()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void create()", "full_signature": "@Override public void create()", "class_method_signature": "CreateVPCOfferingCmd.create()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CreateVPCOfferingCmd.execute()", "testcase": false, "constructor": false}, {"identifier": "getEventType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getEventType()", "full_signature": "@Override public String getEventType()", "class_method_signature": "CreateVPCOfferingCmd.getEventType()", "testcase": false, "constructor": false}, {"identifier": "getEventDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getEventDescription()", "full_signature": "@Override public String getEventDescription()", "class_method_signature": "CreateVPCOfferingCmd.getEventDescription()", "testcase": false, "constructor": false}, {"identifier": "getCommandName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCommandName()", "full_signature": "@Override public String getCommandName()", "class_method_signature": "CreateVPCOfferingCmd.getCommandName()", "testcase": false, "constructor": false}, {"identifier": "getEntityOwnerId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEntityOwnerId()", "full_signature": "@Override public long getEntityOwnerId()", "class_method_signature": "CreateVPCOfferingCmd.getEntityOwnerId()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java"}, "focal_method": {"identifier": "getServiceProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "body": "public Map<String, List<String>> getServiceProviders() {\n        Map<String, List<String>> serviceProviderMap = null;\n        if (serviceProviderList != null && !serviceProviderList.isEmpty()) {\n            serviceProviderMap = new HashMap<String, List<String>>();\n            Collection<? extends Map<String, String>> servicesCollection = serviceProviderList.values();\n            Iterator<? extends Map<String, String>> iter = servicesCollection.iterator();\n            while (iter.hasNext()) {\n                Map<String, String> obj = iter.next();\n                if (s_logger.isTraceEnabled()) {\n                    s_logger.trace(\"service provider entry specified: \" + obj);\n                }\n                HashMap<String, String> services = (HashMap<String, String>)obj;\n                String service = services.get(\"service\");\n                String provider = services.get(\"provider\");\n                List<String> providerList = null;\n                if (serviceProviderMap.containsKey(service)) {\n                    providerList = serviceProviderMap.get(service);\n                } else {\n                    providerList = new ArrayList<String>();\n                }\n                providerList.add(provider);\n                serviceProviderMap.put(service, providerList);\n            }\n        }\n\n        return serviceProviderMap;\n    }", "signature": "Map<String, List<String>> getServiceProviders()", "full_signature": "public Map<String, List<String>> getServiceProviders()", "class_method_signature": "CreateVPCOfferingCmd.getServiceProviders()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "values", "iterator", "hasNext", "next", "isTraceEnabled", "trace", "get", "get", "containsKey", "get", "add", "put"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}