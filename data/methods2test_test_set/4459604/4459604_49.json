{"test_class": {"identifier": "ConcurrentMapTemplateCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars/src/test/java/com/github/jknack/handlebars/cache/ConcurrentMapTemplateCacheTest.java"}, "test_case": {"identifier": "clear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void clear() throws IOException {\n    @SuppressWarnings(\"unchecked\")\n    ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache = createMock(\n        ConcurrentMap.class);\n    cache.clear();\n\n    replay(cache);\n\n    new ConcurrentMapTemplateCache(cache).clear();\n\n    verify(cache);\n  }", "signature": "void clear()", "full_signature": "@Test public void clear()", "class_method_signature": "ConcurrentMapTemplateCacheTest.clear()", "testcase": true, "constructor": false, "invocations": ["createMock", "clear", "replay", "clear", "verify"]}, "focal_class": {"identifier": "ConcurrentMapTemplateCache", "superclass": "", "interfaces": "implements TemplateCache", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache;", "modifier": "private final", "type": "ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private boolean reload;", "modifier": "private", "type": "boolean", "declarator": "reload", "var_name": "reload"}], "methods": [{"identifier": "ConcurrentMapTemplateCache", "parameters": "(\n      final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache)", "modifiers": "protected", "return": "", "signature": " ConcurrentMapTemplateCache(\n      final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache)", "full_signature": "protected  ConcurrentMapTemplateCache(\n      final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache)", "class_method_signature": "ConcurrentMapTemplateCache.ConcurrentMapTemplateCache(\n      final ConcurrentMap<TemplateSource, Pair<TemplateSource, Template>> cache)", "testcase": false, "constructor": true}, {"identifier": "ConcurrentMapTemplateCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConcurrentMapTemplateCache()", "full_signature": "public  ConcurrentMapTemplateCache()", "class_method_signature": "ConcurrentMapTemplateCache.ConcurrentMapTemplateCache()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ConcurrentMapTemplateCache.clear()", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(final TemplateSource source)", "modifiers": "@Override public", "return": "void", "signature": "void evict(final TemplateSource source)", "full_signature": "@Override public void evict(final TemplateSource source)", "class_method_signature": "ConcurrentMapTemplateCache.evict(final TemplateSource source)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "@Override public", "return": "Template", "signature": "Template get(final TemplateSource source, final Parser parser)", "full_signature": "@Override public Template get(final TemplateSource source, final Parser parser)", "class_method_signature": "ConcurrentMapTemplateCache.get(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false}, {"identifier": "setReload", "parameters": "(final boolean reload)", "modifiers": "@Override public", "return": "ConcurrentMapTemplateCache", "signature": "ConcurrentMapTemplateCache setReload(final boolean reload)", "full_signature": "@Override public ConcurrentMapTemplateCache setReload(final boolean reload)", "class_method_signature": "ConcurrentMapTemplateCache.setReload(final boolean reload)", "testcase": false, "constructor": false}, {"identifier": "cacheGet", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "private", "return": "Template", "signature": "Template cacheGet(final TemplateSource source, final Parser parser)", "full_signature": "private Template cacheGet(final TemplateSource source, final Parser parser)", "class_method_signature": "ConcurrentMapTemplateCache.cacheGet(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false}], "file": "handlebars/src/main/java/com/github/jknack/handlebars/cache/ConcurrentMapTemplateCache.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void clear() {\n    cache.clear();\n  }", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ConcurrentMapTemplateCache.clear()", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}