{"test_class": {"identifier": "ReadHandlerTest", "superclass": "extends BaseHandlerTest", "interfaces": "", "fields": [{"original_string": "private ReadHandler handler;", "modifier": "private", "type": "ReadHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ObjectName testBeanName;", "modifier": "private", "type": "ObjectName", "declarator": "testBeanName", "var_name": "testBeanName"}], "file": "agent/core/src/test/java/org/jolokia/handler/ReadHandlerTest.java"}, "test_case": {"identifier": "searchPatternNoAttribute", "parameters": "()", "modifiers": "@Test(groups = \"java6\") public", "return": "void", "body": "@Test(groups = \"java6\")\n    public void searchPatternNoAttribute() throws Exception {\n        ObjectName patternMBean = new ObjectName(\"java.lang:type=*\");\n        JmxReadRequest[] requests = new JmxReadRequest[2];\n        requests[0] =\n                new JmxRequestBuilder(READ, patternMBean).\n                        attribute(null).\n                        build();\n        requests[1] =\n                new JmxRequestBuilder(READ, patternMBean).\n                        // A single null element is enough to denote \"all\"\n                        attributes(Arrays.asList((String) null)).\n                        build();\n\n        for (JmxReadRequest request : requests) {\n            ObjectName beans[] =  {\n                    new ObjectName(\"java.lang:type=Memory\"),\n                    new ObjectName(\"java.lang:type=GarbageCollection\")\n            };\n            MBeanServer server = prepareMultiAttributeTest(patternMBean, beans);\n            expect(server.getAttribute(beans[0],\"mem0\")).andReturn(\"memval0\");\n            expect(server.getAttribute(beans[0],\"mem1\")).andReturn(\"memval1\");\n            expect(server.getAttribute(beans[0],\"common\")).andReturn(\"commonVal0\");\n            expect(server.getAttribute(beans[1],\"gc0\")).andReturn(\"gcval0\");\n            expect(server.getAttribute(beans[1],\"gc1\")).andReturn(\"gcval1\");\n            expect(server.getAttribute(beans[1],\"gc3\")).andReturn(\"gcval3\");\n            expect(server.getAttribute(beans[1],\"common\")).andReturn(\"commonVal1\");\n            replay(server);\n\n            Map res = (Map) handler.handleRequest(getMBeanServerManager(server), request);\n\n            assertEquals(\"memval0\",((Map) res.get(\"java.lang:type=Memory\")).get(\"mem0\"));\n            assertEquals(\"memval1\",((Map) res.get(\"java.lang:type=Memory\")).get(\"mem1\"));\n            assertEquals(\"commonVal0\",((Map) res.get(\"java.lang:type=Memory\")).get(\"common\"));\n            assertEquals(\"gcval0\",((Map) res.get(\"java.lang:type=GarbageCollection\")).get(\"gc0\"));\n            assertEquals(\"gcval1\",((Map) res.get(\"java.lang:type=GarbageCollection\")).get(\"gc1\"));\n            assertEquals(\"gcval3\",((Map) res.get(\"java.lang:type=GarbageCollection\")).get(\"gc3\"));\n            assertEquals(\"commonVal1\",((Map) res.get(\"java.lang:type=GarbageCollection\")).get(\"common\"));\n\n            verify(server);\n        }\n    }", "signature": "void searchPatternNoAttribute()", "full_signature": "@Test(groups = \"java6\") public void searchPatternNoAttribute()", "class_method_signature": "ReadHandlerTest.searchPatternNoAttribute()", "testcase": true, "constructor": false, "invocations": ["build", "attribute", "build", "attributes", "asList", "prepareMultiAttributeTest", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "replay", "handleRequest", "getMBeanServerManager", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "verify"]}, "focal_class": {"identifier": "ReadHandler", "superclass": "extends JsonRequestHandler<JmxReadRequest>", "interfaces": "", "fields": [{"original_string": "private static final MBeanServerExecutor.MBeanAction<MBeanInfo> MBEAN_INFO_HANDLER =\n            new MBeanServerExecutor.MBeanAction<MBeanInfo>() {\n                /** {@inheritDoc} */\n                public MBeanInfo execute(MBeanServerConnection pConn, ObjectName pName, Object... extraArgs)\n                        throws ReflectionException, InstanceNotFoundException, IOException {\n                    try {\n                        return pConn.getMBeanInfo(pName);\n                    } catch (IntrospectionException e) {\n                        throw new IllegalArgumentException(\"Cannot inspect \" + pName + \": \" + e, e);\n                    }\n                }\n            };", "modifier": "private static final", "type": "MBeanServerExecutor.MBeanAction<MBeanInfo>", "declarator": "MBEAN_INFO_HANDLER =\n            new MBeanServerExecutor.MBeanAction<MBeanInfo>() {\n                /** {@inheritDoc} */\n                public MBeanInfo execute(MBeanServerConnection pConn, ObjectName pName, Object... extraArgs)\n                        throws ReflectionException, InstanceNotFoundException, IOException {\n                    try {\n                        return pConn.getMBeanInfo(pName);\n                    } catch (IntrospectionException e) {\n                        throw new IllegalArgumentException(\"Cannot inspect \" + pName + \": \" + e, e);\n                    }\n                }\n            }", "var_name": "MBEAN_INFO_HANDLER"}, {"original_string": "private static final MBeanServerExecutor.MBeanAction<Object> MBEAN_ATTRIBUTE_READ_HANDLER =\n            new MBeanServerExecutor.MBeanAction<Object>() {\n                /** {@inheritDoc} */\n                public Object execute(MBeanServerConnection pConn, ObjectName pName, Object... extraArgs)\n                        throws ReflectionException, InstanceNotFoundException, IOException, MBeanException, AttributeNotFoundException {\n                    String attribute = (String) extraArgs[0];\n                    return pConn.getAttribute(pName, attribute);\n                }\n            };", "modifier": "private static final", "type": "MBeanServerExecutor.MBeanAction<Object>", "declarator": "MBEAN_ATTRIBUTE_READ_HANDLER =\n            new MBeanServerExecutor.MBeanAction<Object>() {\n                /** {@inheritDoc} */\n                public Object execute(MBeanServerConnection pConn, ObjectName pName, Object... extraArgs)\n                        throws ReflectionException, InstanceNotFoundException, IOException, MBeanException, AttributeNotFoundException {\n                    String attribute = (String) extraArgs[0];\n                    return pConn.getAttribute(pName, attribute);\n                }\n            }", "var_name": "MBEAN_ATTRIBUTE_READ_HANDLER"}], "methods": [{"identifier": "ReadHandler", "parameters": "(Restrictor pRestrictor)", "modifiers": "public", "return": "", "signature": " ReadHandler(Restrictor pRestrictor)", "full_signature": "public  ReadHandler(Restrictor pRestrictor)", "class_method_signature": "ReadHandler.ReadHandler(Restrictor pRestrictor)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "RequestType", "signature": "RequestType getType()", "full_signature": "@Override /** {@inheritDoc} */ public RequestType getType()", "class_method_signature": "ReadHandler.getType()", "testcase": false, "constructor": false}, {"identifier": "handleAllServersAtOnce", "parameters": "(JmxReadRequest pRequest)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handleAllServersAtOnce(JmxReadRequest pRequest)", "full_signature": "@Override public boolean handleAllServersAtOnce(JmxReadRequest pRequest)", "class_method_signature": "ReadHandler.handleAllServersAtOnce(JmxReadRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "doHandleRequest", "parameters": "(MBeanServerConnection pServer, JmxReadRequest pRequest)", "modifiers": "@Override public", "return": "Object", "signature": "Object doHandleRequest(MBeanServerConnection pServer, JmxReadRequest pRequest)", "full_signature": "@Override public Object doHandleRequest(MBeanServerConnection pServer, JmxReadRequest pRequest)", "class_method_signature": "ReadHandler.doHandleRequest(MBeanServerConnection pServer, JmxReadRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "doHandleRequest", "parameters": "(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "Object", "signature": "Object doHandleRequest(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "full_signature": "@Override /** {@inheritDoc} */ public Object doHandleRequest(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "class_method_signature": "ReadHandler.doHandleRequest(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "fetchAttributesForMBeanPattern", "parameters": "(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "modifiers": "private", "return": "Object", "signature": "Object fetchAttributesForMBeanPattern(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "full_signature": "private Object fetchAttributesForMBeanPattern(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "class_method_signature": "ReadHandler.fetchAttributesForMBeanPattern(MBeanServerExecutor pServerManager, JmxReadRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "searchMBeans", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "modifiers": "private", "return": "Set<ObjectName>", "signature": "Set<ObjectName> searchMBeans(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "full_signature": "private Set<ObjectName> searchMBeans(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "class_method_signature": "ReadHandler.searchMBeans(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "testcase": false, "constructor": false}, {"identifier": "filterAttributeNames", "parameters": "(MBeanServerExecutor pSeverManager,ObjectName pName, List<String> pNames)", "modifiers": "private", "return": "List<String>", "signature": "List<String> filterAttributeNames(MBeanServerExecutor pSeverManager,ObjectName pName, List<String> pNames)", "full_signature": "private List<String> filterAttributeNames(MBeanServerExecutor pSeverManager,ObjectName pName, List<String> pNames)", "class_method_signature": "ReadHandler.filterAttributeNames(MBeanServerExecutor pSeverManager,ObjectName pName, List<String> pNames)", "testcase": false, "constructor": false}, {"identifier": "fetchAttributes", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pMBeanName, List<String> pAttributeNames,\n                                   ValueFaultHandler pFaultHandler)", "modifiers": "private", "return": "Object", "signature": "Object fetchAttributes(MBeanServerExecutor pServerManager, ObjectName pMBeanName, List<String> pAttributeNames,\n                                   ValueFaultHandler pFaultHandler)", "full_signature": "private Object fetchAttributes(MBeanServerExecutor pServerManager, ObjectName pMBeanName, List<String> pAttributeNames,\n                                   ValueFaultHandler pFaultHandler)", "class_method_signature": "ReadHandler.fetchAttributes(MBeanServerExecutor pServerManager, ObjectName pMBeanName, List<String> pAttributeNames,\n                                   ValueFaultHandler pFaultHandler)", "testcase": false, "constructor": false}, {"identifier": "resolveAttributes", "parameters": "(MBeanServerExecutor pServers, ObjectName pMBeanName, List<String> pAttributeNames)", "modifiers": "private", "return": "List<String>", "signature": "List<String> resolveAttributes(MBeanServerExecutor pServers, ObjectName pMBeanName, List<String> pAttributeNames)", "full_signature": "private List<String> resolveAttributes(MBeanServerExecutor pServers, ObjectName pMBeanName, List<String> pAttributeNames)", "class_method_signature": "ReadHandler.resolveAttributes(MBeanServerExecutor pServers, ObjectName pMBeanName, List<String> pAttributeNames)", "testcase": false, "constructor": false}, {"identifier": "shouldAllAttributesBeFetched", "parameters": "(List<String> pAttributeNames)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldAllAttributesBeFetched(List<String> pAttributeNames)", "full_signature": "private boolean shouldAllAttributesBeFetched(List<String> pAttributeNames)", "class_method_signature": "ReadHandler.shouldAllAttributesBeFetched(List<String> pAttributeNames)", "testcase": false, "constructor": false}, {"identifier": "getMBeanInfo", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "modifiers": "private", "return": "MBeanInfo", "signature": "MBeanInfo getMBeanInfo(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "full_signature": "private MBeanInfo getMBeanInfo(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "class_method_signature": "ReadHandler.getMBeanInfo(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "modifiers": "private", "return": "Object", "signature": "Object getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "full_signature": "private Object getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "class_method_signature": "ReadHandler.getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "testcase": false, "constructor": false}, {"identifier": "getAllAttributesNames", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getAllAttributesNames(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "full_signature": "private List<String> getAllAttributesNames(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "class_method_signature": "ReadHandler.getAllAttributesNames(MBeanServerExecutor pServerManager, ObjectName pObjectName)", "testcase": false, "constructor": false}, {"identifier": "checkRestriction", "parameters": "(ObjectName mBeanName, String attribute)", "modifiers": "private", "return": "void", "signature": "void checkRestriction(ObjectName mBeanName, String attribute)", "full_signature": "private void checkRestriction(ObjectName mBeanName, String attribute)", "class_method_signature": "ReadHandler.checkRestriction(ObjectName mBeanName, String attribute)", "testcase": false, "constructor": false}, {"identifier": "checkForRestriction", "parameters": "(JmxReadRequest pRequest)", "modifiers": "@Override protected", "return": "void", "signature": "void checkForRestriction(JmxReadRequest pRequest)", "full_signature": "@Override protected void checkForRestriction(JmxReadRequest pRequest)", "class_method_signature": "ReadHandler.checkForRestriction(JmxReadRequest pRequest)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/handler/ReadHandler.java"}, "focal_method": {"identifier": "getAttribute", "parameters": "(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "modifiers": "private", "return": "Object", "body": "private Object getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)\n            throws MBeanException, ReflectionException, IOException, AttributeNotFoundException, InstanceNotFoundException {\n        return pServerManager.call(pMBeanName, MBEAN_ATTRIBUTE_READ_HANDLER, attribute);\n    }", "signature": "Object getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "full_signature": "private Object getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "class_method_signature": "ReadHandler.getAttribute(MBeanServerExecutor pServerManager, ObjectName pMBeanName, String attribute)", "testcase": false, "constructor": false, "invocations": ["call"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}