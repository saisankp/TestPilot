{"test_class": {"identifier": "RepositoryApplicationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String PROJECT_ID = \"project\";", "modifier": "private final", "type": "String", "declarator": "PROJECT_ID = \"project\"", "var_name": "PROJECT_ID"}, {"original_string": "private final String APPLICATION_FORBIDDEN_STATUS = \"closed\";", "modifier": "private final", "type": "String", "declarator": "APPLICATION_FORBIDDEN_STATUS = \"closed\"", "var_name": "APPLICATION_FORBIDDEN_STATUS"}, {"original_string": "private final String APPLICATION_ALOWED_STATUS = \"open\";", "modifier": "private final", "type": "String", "declarator": "APPLICATION_ALOWED_STATUS = \"open\"", "var_name": "APPLICATION_ALOWED_STATUS"}, {"original_string": "@Mock\n    private ProjectService projectServiceMock;", "modifier": "@Mock\n    private", "type": "ProjectService", "declarator": "projectServiceMock", "var_name": "projectServiceMock"}, {"original_string": "@Mock\n    private ProjectApplicationRepository applicationRepoMock;", "modifier": "@Mock\n    private", "type": "ProjectApplicationRepository", "declarator": "applicationRepoMock", "var_name": "applicationRepoMock"}, {"original_string": "@Mock\n    private ProjectApplicationEventHandler applicationEventHandlerMock;", "modifier": "@Mock\n    private", "type": "ProjectApplicationEventHandler", "declarator": "applicationEventHandlerMock", "var_name": "applicationEventHandlerMock"}, {"original_string": "@Mock\n    private ProjectBoardConfigurationProperties propertiesMock;", "modifier": "@Mock\n    private", "type": "ProjectBoardConfigurationProperties", "declarator": "propertiesMock", "var_name": "propertiesMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private RepositoryApplicationService applicationService;", "modifier": "private", "type": "RepositoryApplicationService", "declarator": "applicationService", "var_name": "applicationService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/application/service/RepositoryApplicationServiceTest.java"}, "test_case": {"identifier": "createApplicationForUserThrowsExceptionWhenAlreadyApplied", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createApplicationForUserThrowsExceptionWhenAlreadyApplied() {\n        // given\n        given(projectServiceMock.getProjectById(PROJECT_ID)).willReturn(projectMock);\n        given(applicationRepoMock.existsByUserAndProject(userMock, projectMock)).willReturn(true);\n\n        given(projectMock.getStatus()).willReturn(APPLICATION_ALOWED_STATUS);\n\n        // when\n        assertThatThrownBy(() -> applicationService.createApplicationForUser(userMock, PROJECT_ID, \"\"))\n                .isInstanceOf(AlreadyAppliedException.class);\n    }", "signature": "void createApplicationForUserThrowsExceptionWhenAlreadyApplied()", "full_signature": "@Test public void createApplicationForUserThrowsExceptionWhenAlreadyApplied()", "class_method_signature": "RepositoryApplicationServiceTest.createApplicationForUserThrowsExceptionWhenAlreadyApplied()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getProjectById", "willReturn", "given", "existsByUserAndProject", "willReturn", "given", "getStatus", "isInstanceOf", "assertThatThrownBy", "createApplicationForUser"]}, "focal_class": {"identifier": "RepositoryApplicationService", "superclass": "", "interfaces": "implements ApplicationService", "fields": [{"original_string": "private final ProjectService projectService;", "modifier": "private final", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "private final ProjectApplicationRepository applicationRepo;", "modifier": "private final", "type": "ProjectApplicationRepository", "declarator": "applicationRepo", "var_name": "applicationRepo"}, {"original_string": "private final ProjectApplicationEventHandler applicationEventHandler;", "modifier": "private final", "type": "ProjectApplicationEventHandler", "declarator": "applicationEventHandler", "var_name": "applicationEventHandler"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Set<String> applicationsForbiddenStatus;", "modifier": "private final", "type": "Set<String>", "declarator": "applicationsForbiddenStatus", "var_name": "applicationsForbiddenStatus"}], "methods": [{"identifier": "RepositoryApplicationService", "parameters": "(ProjectService projectService,\n                                        ProjectApplicationRepository applicationRepo,\n                                        ProjectApplicationEventHandler applicationEventHandler,\n                                        Clock clock,\n                                        ProjectBoardConfigurationProperties properties)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryApplicationService(ProjectService projectService,\n                                        ProjectApplicationRepository applicationRepo,\n                                        ProjectApplicationEventHandler applicationEventHandler,\n                                        Clock clock,\n                                        ProjectBoardConfigurationProperties properties)", "full_signature": "@Autowired public  RepositoryApplicationService(ProjectService projectService,\n                                        ProjectApplicationRepository applicationRepo,\n                                        ProjectApplicationEventHandler applicationEventHandler,\n                                        Clock clock,\n                                        ProjectBoardConfigurationProperties properties)", "class_method_signature": "RepositoryApplicationService.RepositoryApplicationService(ProjectService projectService,\n                                        ProjectApplicationRepository applicationRepo,\n                                        ProjectApplicationEventHandler applicationEventHandler,\n                                        Clock clock,\n                                        ProjectBoardConfigurationProperties properties)", "testcase": false, "constructor": true}, {"identifier": "userHasAppliedForProject", "parameters": "(User user, Project project)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userHasAppliedForProject(User user, Project project)", "full_signature": "@Override public boolean userHasAppliedForProject(User user, Project project)", "class_method_signature": "RepositoryApplicationService.userHasAppliedForProject(User user, Project project)", "testcase": false, "constructor": false}, {"identifier": "createApplicationForUser", "parameters": "(User user, String projectId, String comment)", "modifiers": "@Override @Transactional public", "return": "ProjectApplication", "signature": "ProjectApplication createApplicationForUser(User user, String projectId, String comment)", "full_signature": "@Override @Transactional public ProjectApplication createApplicationForUser(User user, String projectId, String comment)", "class_method_signature": "RepositoryApplicationService.createApplicationForUser(User user, String projectId, String comment)", "testcase": false, "constructor": false}, {"identifier": "getApplicationsOfUser", "parameters": "(User user, Sort sort)", "modifiers": "@Override public", "return": "List<ProjectApplication>", "signature": "List<ProjectApplication> getApplicationsOfUser(User user, Sort sort)", "full_signature": "@Override public List<ProjectApplication> getApplicationsOfUser(User user, Sort sort)", "class_method_signature": "RepositoryApplicationService.getApplicationsOfUser(User user, Sort sort)", "testcase": false, "constructor": false}, {"identifier": "getApplicationsOfUsers", "parameters": "(Collection<User> users, Sort sort)", "modifiers": "@Override public", "return": "List<ProjectApplication>", "signature": "List<ProjectApplication> getApplicationsOfUsers(Collection<User> users, Sort sort)", "full_signature": "@Override public List<ProjectApplication> getApplicationsOfUsers(Collection<User> users, Sort sort)", "class_method_signature": "RepositoryApplicationService.getApplicationsOfUsers(Collection<User> users, Sort sort)", "testcase": false, "constructor": false}, {"identifier": "deleteApplication", "parameters": "(User user, long applicationId)", "modifiers": "@Transactional @Override public", "return": "ProjectApplication", "signature": "ProjectApplication deleteApplication(User user, long applicationId)", "full_signature": "@Transactional @Override public ProjectApplication deleteApplication(User user, long applicationId)", "class_method_signature": "RepositoryApplicationService.deleteApplication(User user, long applicationId)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/application/service/RepositoryApplicationService.java"}, "focal_method": {"identifier": "createApplicationForUser", "parameters": "(User user, String projectId, String comment)", "modifiers": "@Override @Transactional public", "return": "ProjectApplication", "body": "@Override\n    @Transactional\n    public ProjectApplication createApplicationForUser(User user, String projectId, String comment) {\n        var project = projectService.getProjectById(projectId);\n        var projectStatus = project.getStatus().toLowerCase();\n\n        if(userHasAppliedForProject(user, project)) {\n            throw new AlreadyAppliedException();\n        }\n\n        if(applicationsForbiddenStatus.contains(projectStatus)) {\n            throw new ProjectStatusPreventsApplicationException();\n        }\n\n        // use a clock for testing\n        var applicationDate = LocalDateTime.now(clock);\n        var application = new ProjectApplication(project, comment, user, applicationDate);\n\n        var savedApplication = applicationRepo.save(application);\n        applicationEventHandler.onApplicationReceived(savedApplication);\n\n        return savedApplication;\n    }", "signature": "ProjectApplication createApplicationForUser(User user, String projectId, String comment)", "full_signature": "@Override @Transactional public ProjectApplication createApplicationForUser(User user, String projectId, String comment)", "class_method_signature": "RepositoryApplicationService.createApplicationForUser(User user, String projectId, String comment)", "testcase": false, "constructor": false, "invocations": ["getProjectById", "toLowerCase", "getStatus", "userHasAppliedForProject", "contains", "now", "save", "onApplicationReceived"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}