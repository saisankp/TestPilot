{"test_class": {"identifier": "TaskScannerTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private static final String FIXME = \"FIXME\";", "modifier": "private static final", "type": "String", "declarator": "FIXME = \"FIXME\"", "var_name": "FIXME"}, {"original_string": "private static final String CASE_TEST_FILE = \"tasks-case-test.txt\";", "modifier": "private static final", "type": "String", "declarator": "CASE_TEST_FILE = \"tasks-case-test.txt\"", "var_name": "CASE_TEST_FILE"}, {"original_string": "private static final String PRIORITY_HIGH_MESSAGE = \"here another task with priority HIGH\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY_HIGH_MESSAGE = \"here another task with priority HIGH\"", "var_name": "PRIORITY_HIGH_MESSAGE"}, {"original_string": "private static final String PRIORITY_NORMAL_MESSAGE = \"here we have a task with priority NORMAL\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY_NORMAL_MESSAGE = \"here we have a task with priority NORMAL\"", "var_name": "PRIORITY_NORMAL_MESSAGE"}, {"original_string": "private static final String FILE_WITH_TASKS = \"file-with-tasks.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_WITH_TASKS = \"file-with-tasks.txt\"", "var_name": "FILE_WITH_TASKS"}, {"original_string": "private static final IssueBuilder ISSUE_BUILDER = new IssueBuilder();", "modifier": "private static final", "type": "IssueBuilder", "declarator": "ISSUE_BUILDER = new IssueBuilder()", "var_name": "ISSUE_BUILDER"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScannerTest.java"}, "test_case": {"identifier": "shouldIgnoreCaseInTag", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldIgnoreCaseInTag() {\n        Report tasks = new TaskScannerBuilder()\n                .setNormalTasks(\"Todo, TodoS\")\n                .setCaseMode(CaseMode.IGNORE_CASE)\n                .setMatcherMode(MatcherMode.STRING_MATCH)\n                .build()\n                .scanTasks(read(CASE_TEST_FILE), ISSUE_BUILDER);\n\n        assertThat(tasks).hasSize(12);\n        for (Issue task : tasks) {\n            assertThat(task.getType()).startsWith(\"TODO\");\n        }\n    }", "signature": "void shouldIgnoreCaseInTag()", "full_signature": "@Test void shouldIgnoreCaseInTag()", "class_method_signature": "TaskScannerTest.shouldIgnoreCaseInTag()", "testcase": true, "constructor": false, "invocations": ["scanTasks", "build", "setMatcherMode", "setCaseMode", "setNormalTasks", "read", "hasSize", "assertThat", "startsWith", "assertThat", "getType"]}, "focal_class": {"identifier": "TaskScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WORD_BOUNDARY = \"\\\\b\";", "modifier": "private static final", "type": "String", "declarator": "WORD_BOUNDARY = \"\\\\b\"", "var_name": "WORD_BOUNDARY"}, {"original_string": "private static final Pattern INVALID = Pattern.compile(\"\");", "modifier": "private static final", "type": "Pattern", "declarator": "INVALID = Pattern.compile(\"\")", "var_name": "INVALID"}, {"original_string": "private final Map<Severity, Pattern> patterns = new HashMap<>();", "modifier": "private final", "type": "Map<Severity, Pattern>", "declarator": "patterns = new HashMap<>()", "var_name": "patterns"}, {"original_string": "private final boolean isUppercase;", "modifier": "private final", "type": "boolean", "declarator": "isUppercase", "var_name": "isUppercase"}, {"original_string": "private boolean isPatternInvalid;", "modifier": "private", "type": "boolean", "declarator": "isPatternInvalid", "var_name": "isPatternInvalid"}, {"original_string": "@SuppressWarnings(\"PMD.AvoidStringBufferField\")\n    private final StringBuilder errors = new StringBuilder();", "modifier": "@SuppressWarnings(\"PMD.AvoidStringBufferField\")\n    private final", "type": "StringBuilder", "declarator": "errors = new StringBuilder()", "var_name": "errors"}], "methods": [{"identifier": "TaskScanner", "parameters": "(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "modifiers": "", "return": "", "signature": " TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "full_signature": "  TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "class_method_signature": "TaskScanner.TaskScanner(final @CheckForNull String highTags, final @CheckForNull String normalTags,\n            final @CheckForNull String lowTags,\n            final CaseMode caseMode, final MatcherMode matcherMode)", "testcase": false, "constructor": true}, {"identifier": "getTaskTags", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTaskTags()", "full_signature": " String getTaskTags()", "class_method_signature": "TaskScanner.getTaskTags()", "testcase": false, "constructor": false}, {"identifier": "isInvalidPattern", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isInvalidPattern()", "full_signature": " boolean isInvalidPattern()", "class_method_signature": "TaskScanner.isInvalidPattern()", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getErrors()", "full_signature": "public String getErrors()", "class_method_signature": "TaskScanner.getErrors()", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "modifiers": "private", "return": "Pattern", "signature": "Pattern compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "full_signature": "private Pattern compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "class_method_signature": "TaskScanner.compile(final String tagIdentifiers, final CaseMode caseMode, final MatcherMode matcherMode)", "testcase": false, "constructor": false}, {"identifier": "splitTags", "parameters": "(final String tagIdentifiers)", "modifiers": "private", "return": "String[]", "signature": "String[] splitTags(final String tagIdentifiers)", "full_signature": "private String[] splitTags(final String tagIdentifiers)", "class_method_signature": "TaskScanner.splitTags(final String tagIdentifiers)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(final Path file, final Charset charset)", "modifiers": "public", "return": "Report", "signature": "Report scan(final Path file, final Charset charset)", "full_signature": "public Report scan(final Path file, final Charset charset)", "class_method_signature": "TaskScanner.scan(final Path file, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "scanTasks", "parameters": "(final Iterator<String> lines, final IssueBuilder builder)", "modifiers": "", "return": "Report", "signature": "Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "full_signature": " Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "class_method_signature": "TaskScanner.scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/tasks/TaskScanner.java"}, "focal_method": {"identifier": "scanTasks", "parameters": "(final Iterator<String> lines, final IssueBuilder builder)", "modifiers": "", "return": "Report", "body": "Report scanTasks(final Iterator<String> lines, final IssueBuilder builder) {\n        Report report = new Report();\n\n        if (isPatternInvalid) {\n            report.logError(\"%s\", errors.toString());\n            return report;\n        }\n\n        for (int lineNumber = 1; lines.hasNext(); lineNumber++) {\n            String line = lines.next();\n\n            for (Severity severity : Severity.getPredefinedValues()) {\n                if (patterns.containsKey(severity)) {\n                    Matcher matcher = patterns.get(severity).matcher(line);\n                    if (matcher.matches() && matcher.groupCount() == 2) {\n                        String message = matcher.group(2).trim();\n                        builder.setMessage(StringUtils.removeStart(message, \":\").trim());\n\n                        String tag = matcher.group(1);\n                        if (isUppercase) {\n                            builder.setType(StringUtils.upperCase(tag));\n                        }\n                        else {\n                            builder.setType(tag);\n                        }\n                        report.add(builder.setSeverity(severity).setLineStart(lineNumber).build());\n                    }\n                }\n            }\n        }\n        return report;\n    }", "signature": "Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "full_signature": " Report scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "class_method_signature": "TaskScanner.scanTasks(final Iterator<String> lines, final IssueBuilder builder)", "testcase": false, "constructor": false, "invocations": ["logError", "toString", "hasNext", "next", "getPredefinedValues", "containsKey", "matcher", "get", "matches", "groupCount", "trim", "group", "setMessage", "trim", "removeStart", "group", "setType", "upperCase", "setType", "add", "build", "setLineStart", "setSeverity"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}