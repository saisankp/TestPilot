{"test_class": {"identifier": "MatpowerImporterTest", "superclass": "extends AbstractConverterTest", "interfaces": "", "fields": [{"original_string": "private static final LocalDate DEFAULTDATEFORTESTS = LocalDate.of(2020, Month.JANUARY, 1);", "modifier": "private static final", "type": "LocalDate", "declarator": "DEFAULTDATEFORTESTS = LocalDate.of(2020, Month.JANUARY, 1)", "var_name": "DEFAULTDATEFORTESTS"}], "file": "matpower/matpower-converter/src/test/java/com/powsybl/matpower/converter/MatpowerImporterTest.java"}, "test_case": {"identifier": "testNonexistentCase", "parameters": "()", "modifiers": "@Test(expected = UncheckedIOException.class) public", "return": "void", "body": "@Test(expected = UncheckedIOException.class)\n    public void testNonexistentCase() throws IOException {\n        testNetwork(new MatpowerImporter().importData(new FileDataSource(tmpDir, \"unknown\"), NetworkFactory.findDefault(), null));\n    }", "signature": "void testNonexistentCase()", "full_signature": "@Test(expected = UncheckedIOException.class) public void testNonexistentCase()", "class_method_signature": "MatpowerImporterTest.testNonexistentCase()", "testcase": true, "constructor": false, "invocations": ["testNetwork", "importData", "findDefault"]}, "focal_class": {"identifier": "MatpowerImporter", "superclass": "", "interfaces": "implements Importer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MatpowerImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MatpowerImporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String FORMAT = \"MATPOWER\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT = \"MATPOWER\"", "var_name": "FORMAT"}, {"original_string": "private static final String EXT = \"mat\";", "modifier": "private static final", "type": "String", "declarator": "EXT = \"mat\"", "var_name": "EXT"}, {"original_string": "private static final String BUS_PREFIX = \"BUS\";", "modifier": "private static final", "type": "String", "declarator": "BUS_PREFIX = \"BUS\"", "var_name": "BUS_PREFIX"}, {"original_string": "private static final String GENERATOR_PREFIX = \"GEN\";", "modifier": "private static final", "type": "String", "declarator": "GENERATOR_PREFIX = \"GEN\"", "var_name": "GENERATOR_PREFIX"}, {"original_string": "private static final String LINE_PREFIX = \"LINE\";", "modifier": "private static final", "type": "String", "declarator": "LINE_PREFIX = \"LINE\"", "var_name": "LINE_PREFIX"}, {"original_string": "private static final String LOAD_PREFIX = \"LOAD\";", "modifier": "private static final", "type": "String", "declarator": "LOAD_PREFIX = \"LOAD\"", "var_name": "LOAD_PREFIX"}, {"original_string": "private static final String SHUNT_PREFIX = \"SHUNT\";", "modifier": "private static final", "type": "String", "declarator": "SHUNT_PREFIX = \"SHUNT\"", "var_name": "SHUNT_PREFIX"}, {"original_string": "private static final String SUBSTATION_PREFIX = \"SUB\";", "modifier": "private static final", "type": "String", "declarator": "SUBSTATION_PREFIX = \"SUB\"", "var_name": "SUBSTATION_PREFIX"}, {"original_string": "private static final String TRANSFORMER_PREFIX = \"TWT\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORMER_PREFIX = \"TWT\"", "var_name": "TRANSFORMER_PREFIX"}, {"original_string": "private static final String VOLTAGE_LEVEL_PREFIX = \"VL\";", "modifier": "private static final", "type": "String", "declarator": "VOLTAGE_LEVEL_PREFIX = \"VL\"", "var_name": "VOLTAGE_LEVEL_PREFIX"}, {"original_string": "private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"matpower.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.TRUE);", "modifier": "private static final", "type": "Parameter", "declarator": "IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"matpower.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.TRUE)", "var_name": "IGNORE_BASE_VOLTAGE_PARAMETER"}], "methods": [{"identifier": "isTransformer", "parameters": "(MBranch branch)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTransformer(MBranch branch)", "full_signature": "private static boolean isTransformer(MBranch branch)", "class_method_signature": "MatpowerImporter.isTransformer(MBranch branch)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(String prefix, int num)", "modifiers": "private static", "return": "String", "signature": "String getId(String prefix, int num)", "full_signature": "private static String getId(String prefix, int num)", "class_method_signature": "MatpowerImporter.getId(String prefix, int num)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(String prefix, int from, int to)", "modifiers": "private static", "return": "String", "signature": "String getId(String prefix, int from, int to)", "full_signature": "private static String getId(String prefix, int from, int to)", "class_method_signature": "MatpowerImporter.getId(String prefix, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "createBuses", "parameters": "(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "modifiers": "private static", "return": "void", "signature": "void createBuses(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "full_signature": "private static void createBuses(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "class_method_signature": "MatpowerImporter.createBuses(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "testcase": false, "constructor": false}, {"identifier": "createGenerators", "parameters": "(MatpowerModel model, MBus mBus, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "void", "signature": "void createGenerators(MatpowerModel model, MBus mBus, VoltageLevel voltageLevel)", "full_signature": "private static void createGenerators(MatpowerModel model, MBus mBus, VoltageLevel voltageLevel)", "class_method_signature": "MatpowerImporter.createGenerators(MatpowerModel model, MBus mBus, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createBus", "parameters": "(MBus mBus, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "Bus", "signature": "Bus createBus(MBus mBus, VoltageLevel voltageLevel)", "full_signature": "private static Bus createBus(MBus mBus, VoltageLevel voltageLevel)", "class_method_signature": "MatpowerImporter.createBus(MBus mBus, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createSubstation", "parameters": "(Network network, String substationId)", "modifiers": "private static", "return": "Substation", "signature": "Substation createSubstation(Network network, String substationId)", "full_signature": "private static Substation createSubstation(Network network, String substationId)", "class_method_signature": "MatpowerImporter.createSubstation(Network network, String substationId)", "testcase": false, "constructor": false}, {"identifier": "createVoltageLevel", "parameters": "(MBus mBus, String voltageLevelId, Substation substation, Network network, PerUnitContext perUnitContext)", "modifiers": "private static", "return": "VoltageLevel", "signature": "VoltageLevel createVoltageLevel(MBus mBus, String voltageLevelId, Substation substation, Network network, PerUnitContext perUnitContext)", "full_signature": "private static VoltageLevel createVoltageLevel(MBus mBus, String voltageLevelId, Substation substation, Network network, PerUnitContext perUnitContext)", "class_method_signature": "MatpowerImporter.createVoltageLevel(MBus mBus, String voltageLevelId, Substation substation, Network network, PerUnitContext perUnitContext)", "testcase": false, "constructor": false}, {"identifier": "createLoad", "parameters": "(MBus mBus, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "void", "signature": "void createLoad(MBus mBus, VoltageLevel voltageLevel)", "full_signature": "private static void createLoad(MBus mBus, VoltageLevel voltageLevel)", "class_method_signature": "MatpowerImporter.createLoad(MBus mBus, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createShuntCompensator", "parameters": "(MBus mBus, VoltageLevel voltageLevel, PerUnitContext perUnitContext)", "modifiers": "private static", "return": "void", "signature": "void createShuntCompensator(MBus mBus, VoltageLevel voltageLevel, PerUnitContext perUnitContext)", "full_signature": "private static void createShuntCompensator(MBus mBus, VoltageLevel voltageLevel, PerUnitContext perUnitContext)", "class_method_signature": "MatpowerImporter.createShuntCompensator(MBus mBus, VoltageLevel voltageLevel, PerUnitContext perUnitContext)", "testcase": false, "constructor": false}, {"identifier": "isInService", "parameters": "(MBranch branch)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInService(MBranch branch)", "full_signature": "private static boolean isInService(MBranch branch)", "class_method_signature": "MatpowerImporter.isInService(MBranch branch)", "testcase": false, "constructor": false}, {"identifier": "isInService", "parameters": "(MGen generator)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInService(MGen generator)", "full_signature": "private static boolean isInService(MGen generator)", "class_method_signature": "MatpowerImporter.isInService(MGen generator)", "testcase": false, "constructor": false}, {"identifier": "createBranches", "parameters": "(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "modifiers": "private static", "return": "void", "signature": "void createBranches(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "full_signature": "private static void createBranches(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "class_method_signature": "MatpowerImporter.createBranches(MatpowerModel model, ContainersMapping containerMapping, Network network, PerUnitContext perUnitContext)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "MatpowerImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "MatpowerImporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "MatpowerImporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "MatpowerImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "MatpowerImporter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "MatpowerImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false}], "file": "matpower/matpower-converter/src/main/java/com/powsybl/matpower/converter/MatpowerImporter.java"}, "focal_method": {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "body": "@Override\n    public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n        Objects.requireNonNull(dataSource);\n        Objects.requireNonNull(networkFactory);\n        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n\n        //there is no time & date declared in the MATPOWER file: set a default now()\n        network.setCaseDate(DateTime.now());\n\n        try {\n            try (InputStream iStream = dataSource.newInputStream(null, EXT)) {\n\n                MatpowerModel model = MatpowerReader.read(iStream, dataSource.getBaseName());\n                LOGGER.debug(\"MATPOWER model {}\", model.getCaseName());\n\n                ContainersMapping containerMapping = ContainersMapping.create(model.getBuses(), model.getBranches(),\n                    MBus::getNumber, MBranch::getFrom, MBranch::getTo, branch -> 0, MBranch::getR, MBranch::getX, MatpowerImporter::isTransformer,\n                    busNums -> getId(VOLTAGE_LEVEL_PREFIX, busNums.iterator().next()), substationNum -> getId(SUBSTATION_PREFIX, substationNum));\n\n                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n                        ParameterDefaultValueConfig.INSTANCE);\n\n                PerUnitContext perUnitContext = new PerUnitContext(model.getBaseMva(), ignoreBaseVoltage);\n\n                createBuses(model, containerMapping, network, perUnitContext);\n\n                createBranches(model, containerMapping, network, perUnitContext);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n\n        return network;\n    }", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "MatpowerImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "createNetwork", "getBaseName", "setCaseDate", "now", "newInputStream", "read", "getBaseName", "debug", "getCaseName", "create", "getBuses", "getBranches", "getId", "next", "iterator", "getId", "readBooleanParameter", "getBaseMva", "createBuses", "createBranches"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}