{"test_class": {"identifier": "PortableVehicleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JacksonTester<PortableVehicle> json;", "modifier": "private", "type": "JacksonTester<PortableVehicle>", "declarator": "json", "var_name": "json"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/PortableVehicleTest.java"}, "test_case": {"identifier": "fromVehicle", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void fromVehicle() {\n        long id = 321;\n        String name = \"Pink XY-123 B\";\n        int capacity = 31;\n        PortableVehicle portableVehicle = PortableVehicle.fromVehicle(VehicleFactory.createVehicle(id, name, capacity));\n        assertThat(portableVehicle.getId()).isEqualTo(id);\n        assertThat(portableVehicle.getName()).isEqualTo(name);\n        assertThat(portableVehicle.getCapacity()).isEqualTo(capacity);\n\n        assertThatNullPointerException()\n                .isThrownBy(() -> PortableVehicle.fromVehicle(null))\n                .withMessageContaining(\"vehicle\");\n    }", "signature": "void fromVehicle()", "full_signature": "@Test void fromVehicle()", "class_method_signature": "PortableVehicleTest.fromVehicle()", "testcase": true, "constructor": false, "invocations": ["fromVehicle", "createVehicle", "isEqualTo", "assertThat", "getId", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getCapacity", "withMessageContaining", "isThrownBy", "assertThatNullPointerException", "fromVehicle"]}, "focal_class": {"identifier": "PortableVehicle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long id;", "modifier": "private final", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final int capacity;", "modifier": "private final", "type": "int", "declarator": "capacity", "var_name": "capacity"}], "methods": [{"identifier": "fromVehicle", "parameters": "(Vehicle vehicle)", "modifiers": "static", "return": "PortableVehicle", "signature": "PortableVehicle fromVehicle(Vehicle vehicle)", "full_signature": "static PortableVehicle fromVehicle(Vehicle vehicle)", "class_method_signature": "PortableVehicle.fromVehicle(Vehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "PortableVehicle", "parameters": "(long id, String name, int capacity)", "modifiers": "", "return": "", "signature": " PortableVehicle(long id, String name, int capacity)", "full_signature": "  PortableVehicle(long id, String name, int capacity)", "class_method_signature": "PortableVehicle.PortableVehicle(long id, String name, int capacity)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getId()", "full_signature": "public long getId()", "class_method_signature": "PortableVehicle.getId()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "PortableVehicle.getName()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "PortableVehicle.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PortableVehicle.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PortableVehicle.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PortableVehicle.toString()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableVehicle.java"}, "focal_method": {"identifier": "fromVehicle", "parameters": "(Vehicle vehicle)", "modifiers": "static", "return": "PortableVehicle", "body": "static PortableVehicle fromVehicle(Vehicle vehicle) {\n        Objects.requireNonNull(vehicle, \"vehicle must not be null\");\n        return new PortableVehicle(vehicle.id(), vehicle.name(), vehicle.capacity());\n    }", "signature": "PortableVehicle fromVehicle(Vehicle vehicle)", "full_signature": "static PortableVehicle fromVehicle(Vehicle vehicle)", "class_method_signature": "PortableVehicle.fromVehicle(Vehicle vehicle)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "id", "name", "capacity"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}