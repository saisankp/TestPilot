{"test_class": {"identifier": "RegistrationDateAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "herd-code/herd-model-api/src/test/java/org/finra/herd/model/api/adapters/RegistrationDateAdapterTest.java"}, "test_case": {"identifier": "unmarshalIllegalFormatTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unmarshalIllegalFormatTest()\n    {\n        RegistrationDateAdapter adapter = new RegistrationDateAdapter();\n\n        try\n        {\n            adapter.unmarshal(\"2020-02\");\n        }\n        catch (Exception e)\n        {\n            assertTrue(e instanceof IllegalArgumentException);\n            assertTrue(e.getMessage().contains(\"Valid date or date and time format must be used when specifying values for start/end registration dates.\"));\n        }\n\n        try\n        {\n            adapter.unmarshal(\"2020-02-02T12:02AM\");\n        }\n        catch (Exception e)\n        {\n            assertTrue(e instanceof IllegalArgumentException);\n            assertTrue(e.getMessage().contains(\"Valid date or date and time format must be used when specifying values for start/end registration dates.\"));\n        }\n    }", "signature": "void unmarshalIllegalFormatTest()", "full_signature": "@Test public void unmarshalIllegalFormatTest()", "class_method_signature": "RegistrationDateAdapterTest.unmarshalIllegalFormatTest()", "testcase": true, "constructor": false, "invocations": ["unmarshal", "assertTrue", "assertTrue", "contains", "getMessage", "unmarshal", "assertTrue", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "RegistrationDateAdapter", "superclass": "extends XmlAdapter<String, XMLGregorianCalendar>", "interfaces": "", "fields": [], "methods": [{"identifier": "unmarshal", "parameters": "(String datetime)", "modifiers": "@Override public", "return": "XMLGregorianCalendar", "signature": "XMLGregorianCalendar unmarshal(String datetime)", "full_signature": "@Override public XMLGregorianCalendar unmarshal(String datetime)", "class_method_signature": "RegistrationDateAdapter.unmarshal(String datetime)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(XMLGregorianCalendar xmlGregorianCalendar)", "modifiers": "@Override public", "return": "String", "signature": "String marshal(XMLGregorianCalendar xmlGregorianCalendar)", "full_signature": "@Override public String marshal(XMLGregorianCalendar xmlGregorianCalendar)", "class_method_signature": "RegistrationDateAdapter.marshal(XMLGregorianCalendar xmlGregorianCalendar)", "testcase": false, "constructor": false}], "file": "herd-code/herd-model-api/src/main/java/org/finra/herd/model/api/adapters/RegistrationDateAdapter.java"}, "focal_method": {"identifier": "unmarshal", "parameters": "(String datetime)", "modifiers": "@Override public", "return": "XMLGregorianCalendar", "body": "@Override\n    public XMLGregorianCalendar unmarshal(String datetime) throws Exception\n    {\n        try\n        {\n            final DateTimeParser[] parsers =\n                {\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mmZ\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ssZ\").getParser()\n                };\n\n            DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();\n\n            DateTime dateTime = dateTimeFormatter.withZoneUTC().parseDateTime(datetime.trim());\n\n            return DatatypeFactory.newInstance().newXMLGregorianCalendar(dateTime.toGregorianCalendar());\n        }\n        catch (IllegalArgumentException e)\n        {\n            // Since the original exception carries an error message which gives away 'too much information', we are having it\n            // swallowed and instead returning a generic error message.\n            throw new IllegalArgumentException(\"Valid date or date and time format must be used when specifying values for start/end registration dates.\");\n        }\n    }", "signature": "XMLGregorianCalendar unmarshal(String datetime)", "full_signature": "@Override public XMLGregorianCalendar unmarshal(String datetime)", "class_method_signature": "RegistrationDateAdapter.unmarshal(String datetime)", "testcase": false, "constructor": false, "invocations": ["getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "toFormatter", "append", "parseDateTime", "withZoneUTC", "trim", "newXMLGregorianCalendar", "newInstance", "toGregorianCalendar"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}