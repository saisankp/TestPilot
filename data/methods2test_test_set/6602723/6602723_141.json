{"test_class": {"identifier": "TestSampledQuantile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SampledQuantile impl;", "modifier": "private", "type": "SampledQuantile", "declarator": "impl", "var_name": "impl"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestSampledQuantile.java"}, "test_case": {"identifier": "quantileWithNoSamplesShouldReturnZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void quantileWithNoSamplesShouldReturnZero() {\n        assertEquals(0, impl.getPercentile(50));\n    }", "signature": "void quantileWithNoSamplesShouldReturnZero()", "full_signature": "@Test public void quantileWithNoSamplesShouldReturnZero()", "class_method_signature": "TestSampledQuantile.quantileWithNoSamplesShouldReturnZero()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPercentile"]}, "focal_class": {"identifier": "SampledQuantile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NUM_WINDOW_SEGMENTS = 20;", "modifier": "private static final", "type": "int", "declarator": "NUM_WINDOW_SEGMENTS = 20", "var_name": "NUM_WINDOW_SEGMENTS"}, {"original_string": "private static final int DEFAULT_MAX_SAMPLES = 200;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_SAMPLES = 200", "var_name": "DEFAULT_MAX_SAMPLES"}, {"original_string": "private List<Sample> samples = new ArrayList<Sample>();", "modifier": "private", "type": "List<Sample>", "declarator": "samples = new ArrayList<Sample>()", "var_name": "samples"}, {"original_string": "private AtomicLong samplesSeen = new AtomicLong(0L);", "modifier": "private", "type": "AtomicLong", "declarator": "samplesSeen = new AtomicLong(0L)", "var_name": "samplesSeen"}, {"original_string": "private int maxSamples = DEFAULT_MAX_SAMPLES;", "modifier": "private", "type": "int", "declarator": "maxSamples = DEFAULT_MAX_SAMPLES", "var_name": "maxSamples"}, {"original_string": "private Long windowMillis;", "modifier": "private", "type": "Long", "declarator": "windowMillis", "var_name": "windowMillis"}, {"original_string": "private LinkedList<Sample> windowSegments;", "modifier": "private", "type": "LinkedList<Sample>", "declarator": "windowSegments", "var_name": "windowSegments"}, {"original_string": "Random rand = new Random();", "modifier": "", "type": "Random", "declarator": "rand = new Random()", "var_name": "rand"}], "methods": [{"identifier": "SampledQuantile", "parameters": "()", "modifiers": "public", "return": "", "signature": " SampledQuantile()", "full_signature": "public  SampledQuantile()", "class_method_signature": "SampledQuantile.SampledQuantile()", "testcase": false, "constructor": true}, {"identifier": "SampledQuantile", "parameters": "(int maxSamples)", "modifiers": "public", "return": "", "signature": " SampledQuantile(int maxSamples)", "full_signature": "public  SampledQuantile(int maxSamples)", "class_method_signature": "SampledQuantile.SampledQuantile(int maxSamples)", "testcase": false, "constructor": true}, {"identifier": "SampledQuantile", "parameters": "(long windowLength, TimeUnit units)", "modifiers": "public", "return": "", "signature": " SampledQuantile(long windowLength, TimeUnit units)", "full_signature": "public  SampledQuantile(long windowLength, TimeUnit units)", "class_method_signature": "SampledQuantile.SampledQuantile(long windowLength, TimeUnit units)", "testcase": false, "constructor": true}, {"identifier": "SampledQuantile", "parameters": "(int maxSamples, long windowLength, TimeUnit units)", "modifiers": "public", "return": "", "signature": " SampledQuantile(int maxSamples, long windowLength, TimeUnit units)", "full_signature": "public  SampledQuantile(int maxSamples, long windowLength, TimeUnit units)", "class_method_signature": "SampledQuantile.SampledQuantile(int maxSamples, long windowLength, TimeUnit units)", "testcase": false, "constructor": true}, {"identifier": "SampledQuantile", "parameters": "(int maxSamples, long windowLength, TimeUnit units, long now)", "modifiers": "", "return": "", "signature": " SampledQuantile(int maxSamples, long windowLength, TimeUnit units, long now)", "full_signature": "  SampledQuantile(int maxSamples, long windowLength, TimeUnit units, long now)", "class_method_signature": "SampledQuantile.SampledQuantile(int maxSamples, long windowLength, TimeUnit units, long now)", "testcase": false, "constructor": true}, {"identifier": "setWindowMillis", "parameters": "(long windowLength, TimeUnit units)", "modifiers": "private", "return": "void", "signature": "void setWindowMillis(long windowLength, TimeUnit units)", "full_signature": "private void setWindowMillis(long windowLength, TimeUnit units)", "class_method_signature": "SampledQuantile.setWindowMillis(long windowLength, TimeUnit units)", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMedian()", "full_signature": "public long getMedian()", "class_method_signature": "SampledQuantile.getMedian()", "testcase": false, "constructor": false}, {"identifier": "getPercentile", "parameters": "(int i)", "modifiers": "public", "return": "long", "signature": "long getPercentile(int i)", "full_signature": "public long getPercentile(int i)", "class_method_signature": "SampledQuantile.getPercentile(int i)", "testcase": false, "constructor": false}, {"identifier": "getPercentile", "parameters": "(int i, long now)", "modifiers": "", "return": "long", "signature": "long getPercentile(int i, long now)", "full_signature": " long getPercentile(int i, long now)", "class_method_signature": "SampledQuantile.getPercentile(int i, long now)", "testcase": false, "constructor": false}, {"identifier": "getQuantile", "parameters": "(int k, int q)", "modifiers": "public", "return": "long", "signature": "long getQuantile(int k, int q)", "full_signature": "public long getQuantile(int k, int q)", "class_method_signature": "SampledQuantile.getQuantile(int k, int q)", "testcase": false, "constructor": false}, {"identifier": "getQuantile", "parameters": "(int k, int q, long now)", "modifiers": "", "return": "long", "signature": "long getQuantile(int k, int q, long now)", "full_signature": " long getQuantile(int k, int q, long now)", "class_method_signature": "SampledQuantile.getQuantile(int k, int q, long now)", "testcase": false, "constructor": false}, {"identifier": "getValidSamples", "parameters": "(long now)", "modifiers": "private", "return": "List<Sample>", "signature": "List<Sample> getValidSamples(long now)", "full_signature": "private List<Sample> getValidSamples(long now)", "class_method_signature": "SampledQuantile.getValidSamples(long now)", "testcase": false, "constructor": false}, {"identifier": "getNumSamples", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumSamples()", "full_signature": "public int getNumSamples()", "class_method_signature": "SampledQuantile.getNumSamples()", "testcase": false, "constructor": false}, {"identifier": "addSample", "parameters": "(long l)", "modifiers": "public", "return": "void", "signature": "void addSample(long l)", "full_signature": "public void addSample(long l)", "class_method_signature": "SampledQuantile.addSample(long l)", "testcase": false, "constructor": false}, {"identifier": "updateWindowSegments", "parameters": "(long now)", "modifiers": "private synchronized", "return": "void", "signature": "void updateWindowSegments(long now)", "full_signature": "private synchronized void updateWindowSegments(long now)", "class_method_signature": "SampledQuantile.updateWindowSegments(long now)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveSamplesSeen", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getEffectiveSamplesSeen()", "full_signature": "private long getEffectiveSamplesSeen()", "class_method_signature": "SampledQuantile.getEffectiveSamplesSeen()", "testcase": false, "constructor": false}, {"identifier": "addSample", "parameters": "(long l, long now)", "modifiers": "", "return": "void", "signature": "void addSample(long l, long now)", "full_signature": " void addSample(long l, long now)", "class_method_signature": "SampledQuantile.addSample(long l, long now)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/SampledQuantile.java"}, "focal_method": {"identifier": "getPercentile", "parameters": "(int i)", "modifiers": "public", "return": "long", "body": "public long getPercentile(int i) {\n        return getPercentile(i, System.currentTimeMillis());\n    }", "signature": "long getPercentile(int i)", "full_signature": "public long getPercentile(int i)", "class_method_signature": "SampledQuantile.getPercentile(int i)", "testcase": false, "constructor": false, "invocations": ["getPercentile", "currentTimeMillis"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}