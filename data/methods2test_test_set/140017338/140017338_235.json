{"test_class": {"identifier": "ArtifactAndLicenseComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ArtifactAndLicenseComparator comp = new ArtifactAndLicenseComparator();", "modifier": "", "type": "ArtifactAndLicenseComparator", "declarator": "comp = new ArtifactAndLicenseComparator()", "var_name": "comp"}], "file": "modules/attribution-document/attribution-document-generator/src/test/java/org/eclipse/sw360/antenna/attribution/document/workflow/generators/ArtifactAndLicenseComparatorTest.java"}, "test_case": {"identifier": "same", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n   void same() {\n      TestArtifactAndLicense a1 = new TestArtifactAndLicense(\"i am a teapot\", \"com.bosch:foo:23\");\n\n      int compare = comp.compare(a1, a1);\n      assertThat(compare).isEqualTo(0);\n   }", "signature": "void same()", "full_signature": "@Test void same()", "class_method_signature": "ArtifactAndLicenseComparatorTest.same()", "testcase": true, "constructor": false, "invocations": ["compare", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ArtifactAndLicenseComparator", "superclass": "", "interfaces": "implements Comparator<ArtifactAndLicense>, Serializable", "fields": [], "methods": [{"identifier": "compare", "parameters": "(ArtifactAndLicense o1, ArtifactAndLicense o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "full_signature": "@Override public int compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "class_method_signature": "ArtifactAndLicenseComparator.compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "testcase": false, "constructor": false}], "file": "modules/attribution-document/attribution-document-generator/src/main/java/org/eclipse/sw360/antenna/attribution/document/workflow/generators/ArtifactAndLicenseComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(ArtifactAndLicense o1, ArtifactAndLicense o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n   public int compare(ArtifactAndLicense o1, ArtifactAndLicense o2) {\n      boolean b1 = o1.getPurl().isPresent();\n      boolean b2 = o2.getPurl().isPresent();\n\n      int compared = 0;\n      if (b1 && b2) {\n         compared = String.CASE_INSENSITIVE_ORDER.compare(o1.getPurl().get(), o2.getPurl().get());\n      }\n      if (compared == 0) {\n         compared = String.CASE_INSENSITIVE_ORDER.compare(o1.getFilename(), o2.getFilename());\n      }\n      return compared;\n   }", "signature": "int compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "full_signature": "@Override public int compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "class_method_signature": "ArtifactAndLicenseComparator.compare(ArtifactAndLicense o1, ArtifactAndLicense o2)", "testcase": false, "constructor": false, "invocations": ["isPresent", "getPurl", "isPresent", "getPurl", "compare", "get", "getPurl", "get", "getPurl", "compare", "getFilename", "getFilename"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}