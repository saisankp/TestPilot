{"test_class": {"identifier": "DetectorManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int detectorRefreshPeriod = 1;", "modifier": "private final", "type": "int", "declarator": "detectorRefreshPeriod = 1", "var_name": "detectorRefreshPeriod"}, {"original_string": "private final int badDetectorRefreshPeriod = 0;", "modifier": "private final", "type": "int", "declarator": "badDetectorRefreshPeriod = 0", "var_name": "badDetectorRefreshPeriod"}, {"original_string": "private DetectorManager managerUnderTest;", "modifier": "private", "type": "DetectorManager", "declarator": "managerUnderTest", "var_name": "managerUnderTest"}, {"original_string": "@Mock\n    private DetectorSource detectorSource;", "modifier": "@Mock\n    private", "type": "DetectorSource", "declarator": "detectorSource", "var_name": "detectorSource"}, {"original_string": "@Mock\n    private Map<UUID, DetectorContainer> cachedDetectors;", "modifier": "@Mock\n    private", "type": "Map<UUID, DetectorContainer>", "declarator": "cachedDetectors", "var_name": "cachedDetectors"}, {"original_string": "private UUID mappedUuid;", "modifier": "private", "type": "UUID", "declarator": "mappedUuid", "var_name": "mappedUuid"}, {"original_string": "private UUID mappedUuid2;", "modifier": "private", "type": "UUID", "declarator": "mappedUuid2", "var_name": "mappedUuid2"}, {"original_string": "private UUID mappedUuid3;", "modifier": "private", "type": "UUID", "declarator": "mappedUuid3", "var_name": "mappedUuid3"}, {"original_string": "private UUID unmappedUuid;", "modifier": "private", "type": "UUID", "declarator": "unmappedUuid", "var_name": "unmappedUuid"}, {"original_string": "private List<UUID> updatedDetectors;", "modifier": "private", "type": "List<UUID>", "declarator": "updatedDetectors", "var_name": "updatedDetectors"}, {"original_string": "private MetricDefinition goodDefinition;", "modifier": "private", "type": "MetricDefinition", "declarator": "goodDefinition", "var_name": "goodDefinition"}, {"original_string": "private MetricData goodMetricData;", "modifier": "private", "type": "MetricData", "declarator": "goodMetricData", "var_name": "goodMetricData"}, {"original_string": "private MetricData goodMetricDataWithBadDataInit;", "modifier": "private", "type": "MetricData", "declarator": "goodMetricDataWithBadDataInit", "var_name": "goodMetricDataWithBadDataInit"}, {"original_string": "private MetricData goodMetricDataWithThrottledDataInit;", "modifier": "private", "type": "MetricData", "declarator": "goodMetricDataWithThrottledDataInit", "var_name": "goodMetricDataWithThrottledDataInit"}, {"original_string": "private MappedMetricData goodMappedMetricData;", "modifier": "private", "type": "MappedMetricData", "declarator": "goodMappedMetricData", "var_name": "goodMappedMetricData"}, {"original_string": "private MappedMetricData goodMappedMetricDataWithBadDataInit;", "modifier": "private", "type": "MappedMetricData", "declarator": "goodMappedMetricDataWithBadDataInit", "var_name": "goodMappedMetricDataWithBadDataInit"}, {"original_string": "private MappedMetricData goodMappedMetricDataWithThrottledDataInit;", "modifier": "private", "type": "MappedMetricData", "declarator": "goodMappedMetricDataWithThrottledDataInit", "var_name": "goodMappedMetricDataWithThrottledDataInit"}, {"original_string": "private MetricDefinition badDefinition;", "modifier": "private", "type": "MetricDefinition", "declarator": "badDefinition", "var_name": "badDefinition"}, {"original_string": "private MetricData badMetricData;", "modifier": "private", "type": "MetricData", "declarator": "badMetricData", "var_name": "badMetricData"}, {"original_string": "private MappedMetricData badMappedMetricData;", "modifier": "private", "type": "MappedMetricData", "declarator": "badMappedMetricData", "var_name": "badMappedMetricData"}, {"original_string": "private DetectorMapping detectorMapping;", "modifier": "private", "type": "DetectorMapping", "declarator": "detectorMapping", "var_name": "detectorMapping"}, {"original_string": "@Mock\n    private DataInitializer dataInitializer;", "modifier": "@Mock\n    private", "type": "DataInitializer", "declarator": "dataInitializer", "var_name": "dataInitializer"}, {"original_string": "@Mock\n    private DetectorContainer detectorContainer;", "modifier": "@Mock\n    private", "type": "DetectorContainer", "declarator": "detectorContainer", "var_name": "detectorContainer"}, {"original_string": "@Mock\n    private Detector detector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}, {"original_string": "@Mock\n    private OutlierDetectorResult outlierDetectorResult;", "modifier": "@Mock\n    private", "type": "OutlierDetectorResult", "declarator": "outlierDetectorResult", "var_name": "outlierDetectorResult"}, {"original_string": "@Mock\n    private Config config;", "modifier": "@Mock\n    private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock\n    private Config badConfig;", "modifier": "@Mock\n    private", "type": "Config", "declarator": "badConfig", "var_name": "badConfig"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/DetectorManagerTest.java"}, "test_case": {"identifier": "testClassify_skipsWhenDataInitThrottled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClassify_skipsWhenDataInitThrottled() {\n        val result = managerUnderTest.detect(goodMappedMetricDataWithThrottledDataInit);\n        assertNull(result);\n        verify(cachedDetectors, never()).put(any(UUID.class), any(DetectorContainer.class));\n        verify(detector, never()).detect(any(MetricData.class));\n        // Also asserting that no exception is thrown\n    }", "signature": "void testClassify_skipsWhenDataInitThrottled()", "full_signature": "@Test public void testClassify_skipsWhenDataInitThrottled()", "class_method_signature": "DetectorManagerTest.testClassify_skipsWhenDataInitThrottled()", "testcase": true, "constructor": false, "invocations": ["detect", "assertNull", "put", "verify", "never", "any", "any", "detect", "verify", "never", "any"]}, "focal_class": {"identifier": "DetectorManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CK_DETECTOR_REFRESH_PERIOD = \"detector-refresh-period\";", "modifier": "private static final", "type": "String", "declarator": "CK_DETECTOR_REFRESH_PERIOD = \"detector-refresh-period\"", "var_name": "CK_DETECTOR_REFRESH_PERIOD"}, {"original_string": "private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduler = Executors.newSingleThreadScheduledExecutor()", "var_name": "scheduler"}, {"original_string": "private final Timer detectorForTimer;", "modifier": "private final", "type": "Timer", "declarator": "detectorForTimer", "var_name": "detectorForTimer"}, {"original_string": "private final Meter noDetectorFoundMeter;", "modifier": "private final", "type": "Meter", "declarator": "noDetectorFoundMeter", "var_name": "noDetectorFoundMeter"}, {"original_string": "private final Function<String, Timer> detectTimer;", "modifier": "private final", "type": "Function<String, Timer>", "declarator": "detectTimer", "var_name": "detectTimer"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private final DetectorExecutorImpl detectorExecutor = new DetectorExecutorImpl();", "modifier": "private final", "type": "DetectorExecutorImpl", "declarator": "detectorExecutor = new DetectorExecutorImpl()", "var_name": "detectorExecutor"}, {"original_string": "private final Map<UUID, DetectorContainer> cachedDetectors;", "modifier": "private final", "type": "Map<UUID, DetectorContainer>", "declarator": "cachedDetectors", "var_name": "cachedDetectors"}, {"original_string": "@Getter\n    @NonNull\n    private DetectorSource detectorSource;", "modifier": "@Getter\n    @NonNull\n    private", "type": "DetectorSource", "declarator": "detectorSource", "var_name": "detectorSource"}, {"original_string": "private int detectorRefreshTimePeriod;", "modifier": "private", "type": "int", "declarator": "detectorRefreshTimePeriod", "var_name": "detectorRefreshTimePeriod"}, {"original_string": "private Queue<UUID> detectorsLastUsedTimeToBeUpdatedQueue;", "modifier": "private", "type": "Queue<UUID>", "declarator": "detectorsLastUsedTimeToBeUpdatedQueue", "var_name": "detectorsLastUsedTimeToBeUpdatedQueue"}, {"original_string": "private long cacheSyncedTillTime = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "cacheSyncedTillTime = System.currentTimeMillis()", "var_name": "cacheSyncedTillTime"}, {"original_string": "private long detectorsLastUsedSyncedTillTime = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "detectorsLastUsedSyncedTillTime = System.currentTimeMillis()", "var_name": "detectorsLastUsedSyncedTillTime"}, {"original_string": "private DataInitializer dataInitializer;", "modifier": "private", "type": "DataInitializer", "declarator": "dataInitializer", "var_name": "dataInitializer"}], "methods": [{"identifier": "DetectorManager", "parameters": "(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           Map<UUID, DetectorContainer> cachedDetectors,\n                           MetricRegistry metricRegistry)", "modifiers": "public", "return": "", "signature": " DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           Map<UUID, DetectorContainer> cachedDetectors,\n                           MetricRegistry metricRegistry)", "full_signature": "public  DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           Map<UUID, DetectorContainer> cachedDetectors,\n                           MetricRegistry metricRegistry)", "class_method_signature": "DetectorManager.DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           Map<UUID, DetectorContainer> cachedDetectors,\n                           MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "DetectorManager", "parameters": "(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           MetricRegistry metricRegistry)", "modifiers": "public", "return": "", "signature": " DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           MetricRegistry metricRegistry)", "full_signature": "public  DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           MetricRegistry metricRegistry)", "class_method_signature": "DetectorManager.DetectorManager(DetectorSource detectorSource,\n                           DataInitializer dataInitializer,\n                           Config config,\n                           MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "initScheduler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initScheduler()", "full_signature": "private void initScheduler()", "class_method_signature": "DetectorManager.initScheduler()", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(@NonNull MappedMetricData mappedMetricData)", "modifiers": "public", "return": "DetectorResult", "signature": "DetectorResult detect(@NonNull MappedMetricData mappedMetricData)", "full_signature": "public DetectorResult detect(@NonNull MappedMetricData mappedMetricData)", "class_method_signature": "DetectorManager.detect(@NonNull MappedMetricData mappedMetricData)", "testcase": false, "constructor": false}, {"identifier": "getDetector", "parameters": "(MappedMetricData mappedMetricData)", "modifiers": "private", "return": "Optional<DetectorContainer>", "signature": "Optional<DetectorContainer> getDetector(MappedMetricData mappedMetricData)", "full_signature": "private Optional<DetectorContainer> getDetector(MappedMetricData mappedMetricData)", "class_method_signature": "DetectorManager.getDetector(MappedMetricData mappedMetricData)", "testcase": false, "constructor": false}, {"identifier": "detectorFor", "parameters": "(MappedMetricData mappedMetricData)", "modifiers": "private", "return": "Optional<DetectorContainer>", "signature": "Optional<DetectorContainer> detectorFor(MappedMetricData mappedMetricData)", "full_signature": "private Optional<DetectorContainer> detectorFor(MappedMetricData mappedMetricData)", "class_method_signature": "DetectorManager.detectorFor(MappedMetricData mappedMetricData)", "testcase": false, "constructor": false}, {"identifier": "initDataAndCacheIfSuccessful", "parameters": "(MappedMetricData mappedMetricData,\n                                                                     UUID detectorUuid,\n                                                                     DetectorContainer container)", "modifiers": "private", "return": "Optional<DetectorContainer>", "signature": "Optional<DetectorContainer> initDataAndCacheIfSuccessful(MappedMetricData mappedMetricData,\n                                                                     UUID detectorUuid,\n                                                                     DetectorContainer container)", "full_signature": "private Optional<DetectorContainer> initDataAndCacheIfSuccessful(MappedMetricData mappedMetricData,\n                                                                     UUID detectorUuid,\n                                                                     DetectorContainer container)", "class_method_signature": "DetectorManager.initDataAndCacheIfSuccessful(MappedMetricData mappedMetricData,\n                                                                     UUID detectorUuid,\n                                                                     DetectorContainer container)", "testcase": false, "constructor": false}, {"identifier": "attemptDataInitialization", "parameters": "(MappedMetricData mappedMetricData, Detector detector)", "modifiers": "private", "return": "boolean", "signature": "boolean attemptDataInitialization(MappedMetricData mappedMetricData, Detector detector)", "full_signature": "private boolean attemptDataInitialization(MappedMetricData mappedMetricData, Detector detector)", "class_method_signature": "DetectorManager.attemptDataInitialization(MappedMetricData mappedMetricData, Detector detector)", "testcase": false, "constructor": false}, {"identifier": "doDetection", "parameters": "(DetectorContainer container, MetricData metricData)", "modifiers": "private", "return": "Optional<DetectorResult>", "signature": "Optional<DetectorResult> doDetection(DetectorContainer container, MetricData metricData)", "full_signature": "private Optional<DetectorResult> doDetection(DetectorContainer container, MetricData metricData)", "class_method_signature": "DetectorManager.doDetection(DetectorContainer container, MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "markAnomalyLevelMeter", "parameters": "(@NonNull Detector detector, Optional<DetectorResult> optionalDetectorResult)", "modifiers": "private", "return": "void", "signature": "void markAnomalyLevelMeter(@NonNull Detector detector, Optional<DetectorResult> optionalDetectorResult)", "full_signature": "private void markAnomalyLevelMeter(@NonNull Detector detector, Optional<DetectorResult> optionalDetectorResult)", "class_method_signature": "DetectorManager.markAnomalyLevelMeter(@NonNull Detector detector, Optional<DetectorResult> optionalDetectorResult)", "testcase": false, "constructor": false}, {"identifier": "getDetectorAndLevelMeter", "parameters": "(String name, AnomalyLevel anomalyLevel)", "modifiers": "public", "return": "Meter", "signature": "Meter getDetectorAndLevelMeter(String name, AnomalyLevel anomalyLevel)", "full_signature": "public Meter getDetectorAndLevelMeter(String name, AnomalyLevel anomalyLevel)", "class_method_signature": "DetectorManager.getDetectorAndLevelMeter(String name, AnomalyLevel anomalyLevel)", "testcase": false, "constructor": false}, {"identifier": "checkMappedMetricData", "parameters": "(MappedMetricData mappedMetricData)", "modifiers": "private", "return": "void", "signature": "void checkMappedMetricData(MappedMetricData mappedMetricData)", "full_signature": "private void checkMappedMetricData(MappedMetricData mappedMetricData)", "class_method_signature": "DetectorManager.checkMappedMetricData(MappedMetricData mappedMetricData)", "testcase": false, "constructor": false}, {"identifier": "detectorCacheSync", "parameters": "(long currentTime)", "modifiers": "", "return": "List<UUID>", "signature": "List<UUID> detectorCacheSync(long currentTime)", "full_signature": " List<UUID> detectorCacheSync(long currentTime)", "class_method_signature": "DetectorManager.detectorCacheSync(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "detectorLastUsedTimeSync", "parameters": "(long currentTime)", "modifiers": "", "return": "void", "signature": "void detectorLastUsedTimeSync(long currentTime)", "full_signature": " void detectorLastUsedTimeSync(long currentTime)", "class_method_signature": "DetectorManager.detectorLastUsedTimeSync(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "processDetectorsLastTimeUsedQueue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processDetectorsLastTimeUsedQueue()", "full_signature": "private void processDetectorsLastTimeUsedQueue()", "class_method_signature": "DetectorManager.processDetectorsLastTimeUsedQueue()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/DetectorManager.java"}, "focal_method": {"identifier": "detect", "parameters": "(@NonNull MappedMetricData mappedMetricData)", "modifiers": "public", "return": "DetectorResult", "body": "public DetectorResult detect(@NonNull MappedMetricData mappedMetricData) {\n        try {\n            MDC.put(\"DetectorUuid\", mappedMetricData.getDetectorUuid().toString());\n            checkMappedMetricData(mappedMetricData);\n            Optional<DetectorContainer> container = getDetector(mappedMetricData);\n            if (container.isPresent()) {\n                Optional<DetectorResult> optionalDetectorResult = doDetection(container.get(), mappedMetricData.getMetricData());\n                return optionalDetectorResult.orElse(null);\n            } else {\n                return null;\n            }\n        } finally {\n            MDC.remove(\"DetectorUuid\");\n        }\n    }", "signature": "DetectorResult detect(@NonNull MappedMetricData mappedMetricData)", "full_signature": "public DetectorResult detect(@NonNull MappedMetricData mappedMetricData)", "class_method_signature": "DetectorManager.detect(@NonNull MappedMetricData mappedMetricData)", "testcase": false, "constructor": false, "invocations": ["put", "toString", "getDetectorUuid", "checkMappedMetricData", "getDetector", "isPresent", "doDetection", "get", "getMetricData", "orElse", "remove"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}