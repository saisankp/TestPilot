{"test_class": {"identifier": "CallFunctionHandlerTest", "superclass": "extends AbstractArtefactHandlerTest", "interfaces": "", "fields": [{"original_string": "private static final ObjectId FUNCTION_ID_ERROR = new ObjectId();", "modifier": "private static final", "type": "ObjectId", "declarator": "FUNCTION_ID_ERROR = new ObjectId()", "var_name": "FUNCTION_ID_ERROR"}, {"original_string": "private static final ObjectId FUNCTION_ID_SUCCESS = new ObjectId();", "modifier": "private static final", "type": "ObjectId", "declarator": "FUNCTION_ID_SUCCESS = new ObjectId()", "var_name": "FUNCTION_ID_SUCCESS"}], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/artefacts/handlers/CallFunctionHandlerTest.java"}, "test_case": {"identifier": "testSimulation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSimulation() {\n\t\tExecutionContext executionContext = buildExecutionContext();\n\t\texecutionContext.getExecutionParameters().setMode(ExecutionMode.SIMULATION);\n\t\t\n\t\tFunction function = newFunction(FUNCTION_ID_SUCCESS);\n\t\t((InMemoryFunctionAccessorImpl)executionContext.get(FunctionAccessor.class)).save(function);\n\t\t\n\t\tCallFunctionHandler handler = new CallFunctionHandler();\n\t\thandler.init(executionContext);\n\t\t\n\t\tCallFunction callFunction = new CallFunction();\n\t\tcallFunction.setFunctionId(function.getId().toString());\n\t\t\n\t\tCallFunctionReportNode node = (CallFunctionReportNode) execute(callFunction);\n\t\t\n\t\tAssert.assertEquals(ReportNodeStatus.PASSED, node.getStatus());\n\t\tAssert.assertEquals(\"{}\", node.getOutput());\n\t\tAssert.assertNull(node.getError());\n\t}", "signature": "void testSimulation()", "full_signature": "@Test public void testSimulation()", "class_method_signature": "CallFunctionHandlerTest.testSimulation()", "testcase": true, "constructor": false, "invocations": ["buildExecutionContext", "setMode", "getExecutionParameters", "newFunction", "save", "get", "init", "setFunctionId", "toString", "getId", "execute", "assertEquals", "getStatus", "assertEquals", "getOutput", "assertNull", "getError"]}, "focal_class": {"identifier": "CallFunctionHandler", "superclass": "extends ArtefactHandler<CallFunction, CallFunctionReportNode>", "interfaces": "", "fields": [{"original_string": "protected FunctionExecutionService functionExecutionService;", "modifier": "protected", "type": "FunctionExecutionService", "declarator": "functionExecutionService", "var_name": "functionExecutionService"}, {"original_string": "protected FunctionAccessor functionAccessor;", "modifier": "protected", "type": "FunctionAccessor", "declarator": "functionAccessor", "var_name": "functionAccessor"}, {"original_string": "protected ReportNodeAttachmentManager reportNodeAttachmentManager;", "modifier": "protected", "type": "ReportNodeAttachmentManager", "declarator": "reportNodeAttachmentManager", "var_name": "reportNodeAttachmentManager"}, {"original_string": "protected DynamicJsonObjectResolver dynamicJsonObjectResolver;", "modifier": "protected", "type": "DynamicJsonObjectResolver", "declarator": "dynamicJsonObjectResolver", "var_name": "dynamicJsonObjectResolver"}, {"original_string": "private SelectorHelper selectorHelper;", "modifier": "private", "type": "SelectorHelper", "declarator": "selectorHelper", "var_name": "selectorHelper"}, {"original_string": "private FunctionRouter functionRouter;", "modifier": "private", "type": "FunctionRouter", "declarator": "functionRouter", "var_name": "functionRouter"}, {"original_string": "protected FunctionLocator functionLocator;", "modifier": "protected", "type": "FunctionLocator", "declarator": "functionLocator", "var_name": "functionLocator"}], "methods": [{"identifier": "init", "parameters": "(ExecutionContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(ExecutionContext context)", "full_signature": "@Override public void init(ExecutionContext context)", "class_method_signature": "CallFunctionHandler.init(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "createReportSkeleton_", "parameters": "(CallFunctionReportNode parentNode, CallFunction testArtefact)", "modifiers": "@Override protected", "return": "void", "signature": "void createReportSkeleton_(CallFunctionReportNode parentNode, CallFunction testArtefact)", "full_signature": "@Override protected void createReportSkeleton_(CallFunctionReportNode parentNode, CallFunction testArtefact)", "class_method_signature": "CallFunctionHandler.createReportSkeleton_(CallFunctionReportNode parentNode, CallFunction testArtefact)", "testcase": false, "constructor": false}, {"identifier": "execute_", "parameters": "(CallFunctionReportNode node, CallFunction testArtefact)", "modifiers": "@Override protected", "return": "void", "signature": "void execute_(CallFunctionReportNode node, CallFunction testArtefact)", "full_signature": "@Override protected void execute_(CallFunctionReportNode node, CallFunction testArtefact)", "class_method_signature": "CallFunctionHandler.execute_(CallFunctionReportNode node, CallFunction testArtefact)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(FunctionInput<JsonObject> input, Function function)", "modifiers": "private", "return": "void", "signature": "void validateInput(FunctionInput<JsonObject> input, Function function)", "full_signature": "private void validateInput(FunctionInput<JsonObject> input, Function function)", "class_method_signature": "CallFunctionHandler.validateInput(FunctionInput<JsonObject> input, Function function)", "testcase": false, "constructor": false}, {"identifier": "getFunction", "parameters": "(CallFunction testArtefact)", "modifiers": "private", "return": "Function", "signature": "Function getFunction(CallFunction testArtefact)", "full_signature": "private Function getFunction(CallFunction testArtefact)", "class_method_signature": "CallFunctionHandler.getFunction(CallFunction testArtefact)", "testcase": false, "constructor": false}, {"identifier": "drainOutput", "parameters": "(String drainOutputValue, Output<JsonObject> output)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void drainOutput(String drainOutputValue, Output<JsonObject> output)", "full_signature": "@SuppressWarnings(\"unchecked\") private void drainOutput(String drainOutputValue, Output<JsonObject> output)", "class_method_signature": "CallFunctionHandler.drainOutput(String drainOutputValue, Output<JsonObject> output)", "testcase": false, "constructor": false}, {"identifier": "jsonToMap", "parameters": "(JsonObject jsonOutput)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> jsonToMap(JsonObject jsonOutput)", "full_signature": "private Map<String, String> jsonToMap(JsonObject jsonOutput)", "class_method_signature": "CallFunctionHandler.jsonToMap(JsonObject jsonOutput)", "testcase": false, "constructor": false}, {"identifier": "callChildrenArtefacts", "parameters": "(CallFunctionReportNode node, CallFunction testArtefact)", "modifiers": "protected", "return": "void", "signature": "void callChildrenArtefacts(CallFunctionReportNode node, CallFunction testArtefact)", "full_signature": "protected void callChildrenArtefacts(CallFunctionReportNode node, CallFunction testArtefact)", "class_method_signature": "CallFunctionHandler.callChildrenArtefacts(CallFunctionReportNode node, CallFunction testArtefact)", "testcase": false, "constructor": false}, {"identifier": "buildInput", "parameters": "(String argumentStr)", "modifiers": "private", "return": "FunctionInput<JsonObject>", "signature": "FunctionInput<JsonObject> buildInput(String argumentStr)", "full_signature": "private FunctionInput<JsonObject> buildInput(String argumentStr)", "class_method_signature": "CallFunctionHandler.buildInput(String argumentStr)", "testcase": false, "constructor": false}, {"identifier": "parseAndResolveJson", "parameters": "(String functionStr)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject parseAndResolveJson(String functionStr)", "full_signature": "private JsonObject parseAndResolveJson(String functionStr)", "class_method_signature": "CallFunctionHandler.parseAndResolveJson(String functionStr)", "testcase": false, "constructor": false}, {"identifier": "createReportNode_", "parameters": "(ReportNode parentNode, CallFunction testArtefact)", "modifiers": "@Override public", "return": "CallFunctionReportNode", "signature": "CallFunctionReportNode createReportNode_(ReportNode parentNode, CallFunction testArtefact)", "full_signature": "@Override public CallFunctionReportNode createReportNode_(ReportNode parentNode, CallFunction testArtefact)", "class_method_signature": "CallFunctionHandler.createReportNode_(ReportNode parentNode, CallFunction testArtefact)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/artefacts/handlers/CallFunctionHandler.java"}, "focal_method": {"identifier": "init", "parameters": "(ExecutionContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void init(ExecutionContext context) {\n\t\tsuper.init(context);\n\t\tfunctionExecutionService = context.get(FunctionExecutionService.class);\n\t\tfunctionAccessor = context.get(FunctionAccessor.class);\n\t\tfunctionRouter = context.get(FunctionRouter.class);\n\t\treportNodeAttachmentManager = new ReportNodeAttachmentManager(context);\n\t\tdynamicJsonObjectResolver = new DynamicJsonObjectResolver(new DynamicJsonValueResolver(context.getExpressionHandler()));\n\t\tthis.selectorHelper = new SelectorHelper(dynamicJsonObjectResolver);\n\t\tthis.functionLocator = new FunctionLocator(functionAccessor, selectorHelper, context);\n\t}", "signature": "void init(ExecutionContext context)", "full_signature": "@Override public void init(ExecutionContext context)", "class_method_signature": "CallFunctionHandler.init(ExecutionContext context)", "testcase": false, "constructor": false, "invocations": ["init", "get", "get", "get", "getExpressionHandler"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}