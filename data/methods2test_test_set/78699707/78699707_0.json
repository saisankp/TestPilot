{"test_class": {"identifier": "ReversedCharSequenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "reverse-regex-util/src/test/java/com/vladsch/ReverseRegEx/util/ReversedCharSequenceTest.java"}, "test_case": {"identifier": "subSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void subSequence() throws Exception {\n        CharSequence orig = \"abcdef\";\n        CharSequence reved = \"fedcba\";\n        ReversedCharSequence test = (ReversedCharSequence) ReversedCharSequence.of(orig);\n\n        int iMax = orig.length();\n        for (int i = 0; i < iMax; i++) {\n            for (int j = iMax - i - 1; j >= 0 && j >= i; j--) {\n                assertEquals(\"subSequence(\" + i + \",\" + j + \")\", reved.subSequence(i, j), test.subSequence(i, j).toString());\n                assertEquals(\"reverse.of(subSequence(\" + i + \",\" + j + \"))\", orig.subSequence(test.mapIndex(j) + 1, test.mapIndex(j) + 1 + j - i), ReversedCharSequence.of(test.subSequence(i, j)).toString());\n                assertEquals(\"subSequence(\" + i + \",\" + j + \").hashCode()\", reved.subSequence(i, j).hashCode(), test.subSequence(i, j).hashCode());\n                assertEquals(\"subSequence(\" + i + \",\" + j + \").equals()\", true, test.subSequence(i, j).equals(reved.subSequence(i, j)));\n            }\n        }\n    }", "signature": "void subSequence()", "full_signature": "@Test public void subSequence()", "class_method_signature": "ReversedCharSequenceTest.subSequence()", "testcase": true, "constructor": false, "invocations": ["of", "length", "assertEquals", "subSequence", "toString", "subSequence", "assertEquals", "subSequence", "mapIndex", "mapIndex", "toString", "of", "subSequence", "assertEquals", "hashCode", "subSequence", "hashCode", "subSequence", "assertEquals", "equals", "subSequence", "subSequence"]}, "focal_class": {"identifier": "ReversedCharSequence", "superclass": "extends ReverseIndexMapperBase", "interfaces": "implements ReverseCharSequence", "fields": [{"original_string": "private final CharSequence myChars;", "modifier": "private final", "type": "CharSequence", "declarator": "myChars", "var_name": "myChars"}, {"original_string": "private final int myStartIndex;", "modifier": "private final", "type": "int", "declarator": "myStartIndex", "var_name": "myStartIndex"}, {"original_string": "private final int myEndIndex;", "modifier": "private final", "type": "int", "declarator": "myEndIndex", "var_name": "myEndIndex"}, {"original_string": "private int myHash;", "modifier": "private", "type": "int", "declarator": "myHash", "var_name": "myHash"}, {"original_string": "private IndexMapper myMapper;", "modifier": "private", "type": "IndexMapper", "declarator": "myMapper", "var_name": "myMapper"}], "methods": [{"identifier": "getReversedChars", "parameters": "()", "modifiers": "@Override public", "return": "CharSequence", "signature": "CharSequence getReversedChars()", "full_signature": "@Override public CharSequence getReversedChars()", "class_method_signature": "ReversedCharSequence.getReversedChars()", "testcase": false, "constructor": false}, {"identifier": "getStartIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStartIndex()", "full_signature": "public int getStartIndex()", "class_method_signature": "ReversedCharSequence.getStartIndex()", "testcase": false, "constructor": false}, {"identifier": "ReversedCharSequence", "parameters": "(CharSequence chars, int start, int end)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") private", "return": "", "signature": " ReversedCharSequence(CharSequence chars, int start, int end)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") private  ReversedCharSequence(CharSequence chars, int start, int end)", "class_method_signature": "ReversedCharSequence.ReversedCharSequence(CharSequence chars, int start, int end)", "testcase": false, "constructor": true}, {"identifier": "getIndexMapper", "parameters": "()", "modifiers": "@Override public", "return": "IndexMapper", "signature": "IndexMapper getIndexMapper()", "full_signature": "@Override public IndexMapper getIndexMapper()", "class_method_signature": "ReversedCharSequence.getIndexMapper()", "testcase": false, "constructor": false}, {"identifier": "getEndIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getEndIndex()", "full_signature": "@Override public int getEndIndex()", "class_method_signature": "ReversedCharSequence.getEndIndex()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "ReversedCharSequence.length()", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(int index)", "modifiers": "@Override public", "return": "char", "signature": "char charAt(int index)", "full_signature": "@Override public char charAt(int index)", "class_method_signature": "ReversedCharSequence.charAt(int index)", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "@Override public", "return": "ReversedCharSequence", "signature": "ReversedCharSequence subSequence(int start, int end)", "full_signature": "@Override public ReversedCharSequence subSequence(int start, int end)", "class_method_signature": "ReversedCharSequence.subSequence(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReversedCharSequence.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ReversedCharSequence.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReversedCharSequence.hashCode()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final CharSequence chars)", "modifiers": "public static", "return": "ReversedCharSequence", "signature": "ReversedCharSequence of(final CharSequence chars)", "full_signature": "public static ReversedCharSequence of(final CharSequence chars)", "class_method_signature": "ReversedCharSequence.of(final CharSequence chars)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final CharSequence chars, final int start)", "modifiers": "public static", "return": "ReversedCharSequence", "signature": "ReversedCharSequence of(final CharSequence chars, final int start)", "full_signature": "public static ReversedCharSequence of(final CharSequence chars, final int start)", "class_method_signature": "ReversedCharSequence.of(final CharSequence chars, final int start)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final CharSequence chars, final int start, final int end)", "modifiers": "public static", "return": "ReversedCharSequence", "signature": "ReversedCharSequence of(final CharSequence chars, final int start, final int end)", "full_signature": "public static ReversedCharSequence of(final CharSequence chars, final int start, final int end)", "class_method_signature": "ReversedCharSequence.of(final CharSequence chars, final int start, final int end)", "testcase": false, "constructor": false}], "file": "reverse-regex-util/src/main/java/com/vladsch/ReverseRegEx/util/ReversedCharSequence.java"}, "focal_method": {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "@Override public", "return": "ReversedCharSequence", "body": "@Override\n    public ReversedCharSequence subSequence(int start, int end) {\n        if (start < 0 || end > length())\n            throw new IndexOutOfBoundsException(\"[\" + start + \", \" + end + \") not in [0,\" + length() + \"]\");\n        final int startIndex = mapBoundary(end);\n        final int endIndex = startIndex + end - start;\n        return startIndex == myStartIndex && endIndex == myEndIndex ? this : new ReversedCharSequence(myChars, startIndex, endIndex);\n    }", "signature": "ReversedCharSequence subSequence(int start, int end)", "full_signature": "@Override public ReversedCharSequence subSequence(int start, int end)", "class_method_signature": "ReversedCharSequence.subSequence(int start, int end)", "testcase": false, "constructor": false, "invocations": ["length", "length", "mapBoundary"]}, "repository": {"repo_id": 78699707, "url": "https://github.com/vsch/reverse-regex", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 79, "license": "licensed"}}