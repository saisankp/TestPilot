{"test_class": {"identifier": "TestTimestampRoundDownUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TimeZone CUSTOM_TIMEZONE = new SimpleTimeZone(1, \"custom-timezone\");", "modifier": "private static final", "type": "TimeZone", "declarator": "CUSTOM_TIMEZONE = new SimpleTimeZone(1, \"custom-timezone\")", "var_name": "CUSTOM_TIMEZONE"}, {"original_string": "private static final Calendar BASE_CALENDAR_WITH_DEFAULT_TIMEZONE =\n      createCalendar(2012, 5, 15, 15, 12, 54, 0, null);", "modifier": "private static final", "type": "Calendar", "declarator": "BASE_CALENDAR_WITH_DEFAULT_TIMEZONE =\n      createCalendar(2012, 5, 15, 15, 12, 54, 0, null)", "var_name": "BASE_CALENDAR_WITH_DEFAULT_TIMEZONE"}, {"original_string": "private static final Calendar BASE_CALENDAR_WITH_CUSTOM_TIMEZONE =\n      createCalendar(2012, 5, 15, 15, 12, 54, 0, CUSTOM_TIMEZONE);", "modifier": "private static final", "type": "Calendar", "declarator": "BASE_CALENDAR_WITH_CUSTOM_TIMEZONE =\n      createCalendar(2012, 5, 15, 15, 12, 54, 0, CUSTOM_TIMEZONE)", "var_name": "BASE_CALENDAR_WITH_CUSTOM_TIMEZONE"}], "file": "flume-ng-core/src/test/java/org/apache/flume/tools/TestTimestampRoundDownUtil.java"}, "test_case": {"identifier": "testRoundDownTimeStampSecondsWithTimeZone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRoundDownTimeStampSecondsWithTimeZone() {\n    Calendar cal = BASE_CALENDAR_WITH_CUSTOM_TIMEZONE;\n    Calendar cal2 = createCalendar(2012, 5, 15, 15, 12, 0, 0, CUSTOM_TIMEZONE);\n\n    long timeToVerify = cal2.getTimeInMillis();\n    long withoutTimeZone = TimestampRoundDownUtil.roundDownTimeStampSeconds(\n        cal.getTimeInMillis(), 60);\n    long withTimeZone = TimestampRoundDownUtil.roundDownTimeStampSeconds(\n        cal.getTimeInMillis(), 60, CUSTOM_TIMEZONE);\n\n    assertThat(withoutTimeZone, not(equalTo(timeToVerify)));\n    Assert.assertEquals(withTimeZone, timeToVerify);\n  }", "signature": "void testRoundDownTimeStampSecondsWithTimeZone()", "full_signature": "@Test public void testRoundDownTimeStampSecondsWithTimeZone()", "class_method_signature": "TestTimestampRoundDownUtil.testRoundDownTimeStampSecondsWithTimeZone()", "testcase": true, "constructor": false, "invocations": ["createCalendar", "getTimeInMillis", "roundDownTimeStampSeconds", "getTimeInMillis", "roundDownTimeStampSeconds", "getTimeInMillis", "assertThat", "not", "equalTo", "assertEquals"]}, "focal_class": {"identifier": "TimestampRoundDownUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "roundDownTimeStampSeconds", "parameters": "(long timestamp,\n      int roundDownSec)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "full_signature": "public static long roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "testcase": false, "constructor": false}, {"identifier": "roundDownTimeStampSeconds", "parameters": "(long timestamp, int roundDownSec, TimeZone timeZone)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampSeconds(long timestamp, int roundDownSec, TimeZone timeZone)", "full_signature": "public static long roundDownTimeStampSeconds(long timestamp, int roundDownSec, TimeZone timeZone)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampSeconds(long timestamp, int roundDownSec, TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "roundDownTimeStampMinutes", "parameters": "(long timestamp,\n      int roundDownMins)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampMinutes(long timestamp,\n      int roundDownMins)", "full_signature": "public static long roundDownTimeStampMinutes(long timestamp,\n      int roundDownMins)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampMinutes(long timestamp,\n      int roundDownMins)", "testcase": false, "constructor": false}, {"identifier": "roundDownTimeStampMinutes", "parameters": "(long timestamp, int roundDownMins, TimeZone timeZone)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampMinutes(long timestamp, int roundDownMins, TimeZone timeZone)", "full_signature": "public static long roundDownTimeStampMinutes(long timestamp, int roundDownMins, TimeZone timeZone)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampMinutes(long timestamp, int roundDownMins, TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "roundDownTimeStampHours", "parameters": "(long timestamp,\n      int roundDownHours)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampHours(long timestamp,\n      int roundDownHours)", "full_signature": "public static long roundDownTimeStampHours(long timestamp,\n      int roundDownHours)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampHours(long timestamp,\n      int roundDownHours)", "testcase": false, "constructor": false}, {"identifier": "roundDownTimeStampHours", "parameters": "(long timestamp, int roundDownHours, TimeZone timeZone)", "modifiers": "public static", "return": "long", "signature": "long roundDownTimeStampHours(long timestamp, int roundDownHours, TimeZone timeZone)", "full_signature": "public static long roundDownTimeStampHours(long timestamp, int roundDownHours, TimeZone timeZone)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampHours(long timestamp, int roundDownHours, TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "roundDownField", "parameters": "(long timestamp, int field, int roundDown,\n                                         TimeZone timeZone)", "modifiers": "private static", "return": "Calendar", "signature": "Calendar roundDownField(long timestamp, int field, int roundDown,\n                                         TimeZone timeZone)", "full_signature": "private static Calendar roundDownField(long timestamp, int field, int roundDown,\n                                         TimeZone timeZone)", "class_method_signature": "TimestampRoundDownUtil.roundDownField(long timestamp, int field, int roundDown,\n                                         TimeZone timeZone)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/tools/TimestampRoundDownUtil.java"}, "focal_method": {"identifier": "roundDownTimeStampSeconds", "parameters": "(long timestamp,\n      int roundDownSec)", "modifiers": "public static", "return": "long", "body": "public static long roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec) throws IllegalStateException {\n    return roundDownTimeStampSeconds(timestamp, roundDownSec, null);\n  }", "signature": "long roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "full_signature": "public static long roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "class_method_signature": "TimestampRoundDownUtil.roundDownTimeStampSeconds(long timestamp,\n      int roundDownSec)", "testcase": false, "constructor": false, "invocations": ["roundDownTimeStampSeconds"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}