{"test_class": {"identifier": "SubscribeScopeProviderOnScopeCreationTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Scope-plugins/PluginSubscribeScopeProviderOnScopeCreation/src/test/java/info/smart_tools/smartactors/scope_plugins/subscribe_scope_provider_on_scope_creation_plugin/SubscribeScopeProviderOnScopeCreationTest.java"}, "test_case": {"identifier": "checkLoadExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkLoadExecution()\n            throws Exception {\n        Checker checker = new Checker();\n        checker.item = new BootstrapItem(\"test\");\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        List<IBootstrapItem<String>> itemList = new ArrayList<>();\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                Object[] args = invocation.getArguments();\n                checker.item = (IBootstrapItem<String>) args[0];\n                itemList.add(checker.item);\n                return null;\n            }\n        })\n                .when(bootstrap)\n                .add(any(IBootstrapItem.class));\n        IPlugin plugin = new SubscribeScopeProviderOnScopeCreation(bootstrap);\n        plugin.load();\n        assertEquals(itemList.size(), 1);\n        IBootstrapItem<String> item = itemList.get(0);\n        Object guid1  = ScopeProvider.createScope(null);\n        IScope scopeBefore = ScopeProvider.getScope(guid1);\n        IStrategyContainer containerBefore = null;\n        try {\n            containerBefore = (IStrategyContainer) scopeBefore.getValue(IOC.getIocKey());\n        } catch (Exception e) {\n\n        }\n        assertNull(containerBefore);\n        item.executeProcess();\n        Object guid2  = ScopeProvider.createScope(null);\n        IScope scopeAfter = ScopeProvider.getScope(guid2);\n        IStrategyContainer containerAfter = (IStrategyContainer) scopeAfter.getValue(IOC.getIocKey());\n        assertNotNull(containerAfter);\n        reset(bootstrap);\n    }", "signature": "void checkLoadExecution()", "full_signature": "@Test public void checkLoadExecution()", "class_method_signature": "SubscribeScopeProviderOnScopeCreationTest.checkLoadExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doAnswer", "getArguments", "add", "any", "load", "assertEquals", "size", "get", "createScope", "getScope", "getValue", "getIocKey", "assertNull", "executeProcess", "createScope", "getScope", "getValue", "getIocKey", "assertNotNull", "reset"]}, "focal_class": {"identifier": "SubscribeScopeProviderOnScopeCreation", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "SubscribeScopeProviderOnScopeCreation", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " SubscribeScopeProviderOnScopeCreation(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  SubscribeScopeProviderOnScopeCreation(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "SubscribeScopeProviderOnScopeCreation.SubscribeScopeProviderOnScopeCreation(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "SubscribeScopeProviderOnScopeCreation.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Scope-plugins/PluginSubscribeScopeProviderOnScopeCreation/src/main/java/info/smart_tools/smartactors/scope_plugins/subscribe_scope_provider_on_scope_creation_plugin/SubscribeScopeProviderOnScopeCreation.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load()\n            throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"SubscribeScopeProviderOnScopeCreation\");\n            item\n                    .before(\"CreateNewScope\")\n                    .process(\n                            () -> {\n                                try {\n                                    ScopeProvider.subscribeOnCreationNewScope(\n                                            scope -> {\n                                                try {\n                                                    scope.setValue(IOC.getIocKey(), new StrategyContainer());\n                                                } catch (Exception e) {\n                                                    throw new Error(e);\n                                                }\n                                            }\n                                    );\n                                } catch (ScopeProviderException e) {\n                                    throw new ActionExecuteException(\"SubscribeScopeProviderOnScopeCreation plugin can't load: can't subscribe on creation new scope\", e);\n                                }\n                            }\n                    );\n            this.bootstrap.add(item);\n        } catch (Throwable e) {\n            throw new PluginException(\"Load plugin execution has been failed.\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "SubscribeScopeProviderOnScopeCreation.load()", "testcase": false, "constructor": false, "invocations": ["process", "before", "subscribeOnCreationNewScope", "setValue", "getIocKey", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}