{"test_class": {"identifier": "XESExportMainTest", "superclass": "extends XESPersistenceBase", "interfaces": "", "fields": [{"original_string": "private static final String XES_IEEE_SCHEMA = \"xes-ieee-1849-2016.xsd\";", "modifier": "private static final", "type": "String", "declarator": "XES_IEEE_SCHEMA = \"xes-ieee-1849-2016.xsd\"", "var_name": "XES_IEEE_SCHEMA"}, {"original_string": "private static final String PROCESS = \"com.sample.bpmn.hello\";", "modifier": "private static final", "type": "String", "declarator": "PROCESS = \"com.sample.bpmn.hello\"", "var_name": "PROCESS"}, {"original_string": "private static final String ABORTED_XES_FILE = \"aborted.xes\";", "modifier": "private static final", "type": "String", "declarator": "ABORTED_XES_FILE = \"aborted.xes\"", "var_name": "ABORTED_XES_FILE"}, {"original_string": "private static final String ACTIVE_COMPLETED_XES_FILE = \"activeCompleted.xes\";", "modifier": "private static final", "type": "String", "declarator": "ACTIVE_COMPLETED_XES_FILE = \"activeCompleted.xes\"", "var_name": "ACTIVE_COMPLETED_XES_FILE"}, {"original_string": "private static final String COMPLETED_XES_FILE = \"completed.xes\";", "modifier": "private static final", "type": "String", "declarator": "COMPLETED_XES_FILE = \"completed.xes\"", "var_name": "COMPLETED_XES_FILE"}, {"original_string": "private static final String COMPLETED_EE_XES_FILE = \"completedEnterExit.xes\";", "modifier": "private static final", "type": "String", "declarator": "COMPLETED_EE_XES_FILE = \"completedEnterExit.xes\"", "var_name": "COMPLETED_EE_XES_FILE"}, {"original_string": "private static final String COMPLETED_REL_XES_FILE = \"completedRelevant.xes\";", "modifier": "private static final", "type": "String", "declarator": "COMPLETED_REL_XES_FILE = \"completedRelevant.xes\"", "var_name": "COMPLETED_REL_XES_FILE"}, {"original_string": "private static final String COMPLETED_1_2_XES_FILE = \"completed12.xes\";", "modifier": "private static final", "type": "String", "declarator": "COMPLETED_1_2_XES_FILE = \"completed12.xes\"", "var_name": "COMPLETED_1_2_XES_FILE"}, {"original_string": "private static final String ALL_STATUS_XES_FILE = \"allStatus.xes\";", "modifier": "private static final", "type": "String", "declarator": "ALL_STATUS_XES_FILE = \"allStatus.xes\"", "var_name": "ALL_STATUS_XES_FILE"}, {"original_string": "private static final List<String> xesFiles = Arrays.asList(ABORTED_XES_FILE, \n                                                               ACTIVE_COMPLETED_XES_FILE,\n                                                               COMPLETED_XES_FILE,\n                                                               COMPLETED_EE_XES_FILE,\n                                                               COMPLETED_REL_XES_FILE,\n                                                               ALL_STATUS_XES_FILE);", "modifier": "private static final", "type": "List<String>", "declarator": "xesFiles = Arrays.asList(ABORTED_XES_FILE, \n                                                               ACTIVE_COMPLETED_XES_FILE,\n                                                               COMPLETED_XES_FILE,\n                                                               COMPLETED_EE_XES_FILE,\n                                                               COMPLETED_REL_XES_FILE,\n                                                               ALL_STATUS_XES_FILE)", "var_name": "xesFiles"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(XESExportMainTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(XESExportMainTest.class)", "var_name": "logger"}, {"original_string": "private String driver;", "modifier": "private", "type": "String", "declarator": "driver", "var_name": "driver"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String user;", "modifier": "private", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private KieSession ksession;", "modifier": "private", "type": "KieSession", "declarator": "ksession", "var_name": "ksession"}, {"original_string": "private TaskService taskService;", "modifier": "private", "type": "TaskService", "declarator": "taskService", "var_name": "taskService"}, {"original_string": "private RuntimeEngine runtimeEngine;", "modifier": "private", "type": "RuntimeEngine", "declarator": "runtimeEngine", "var_name": "runtimeEngine"}], "file": "jbpm-xes/src/test/java/org/jbpm/xes/XESExportMainTest.java"}, "test_case": {"identifier": "testHelloProcessWithoutFilteringStatus", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHelloProcessWithoutFilteringStatus() throws Exception {      \n        XESExportMain.main(new String[] {\"-user\", user,\n                                         \"-password\", password,\n                                         \"-url\", url, \n                                         \"-driver\", driver,\n                                         \"-process\", PROCESS,\n                                         \"-file\" , ALL_STATUS_XES_FILE});\n\n        assertTrue(validateXML(ALL_STATUS_XES_FILE));\n        LogType log = assertTraceNodeInstances(ALL_STATUS_XES_FILE, 3);\n        assertStatus(log, \"active\", \"completed\", \"aborted\");\n    }", "signature": "void testHelloProcessWithoutFilteringStatus()", "full_signature": "@Test public void testHelloProcessWithoutFilteringStatus()", "class_method_signature": "XESExportMainTest.testHelloProcessWithoutFilteringStatus()", "testcase": true, "constructor": false, "invocations": ["main", "assertTrue", "validateXML", "assertTraceNodeInstances", "assertStatus"]}, "focal_class": {"identifier": "XESExportMain", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "XESExportMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "private static", "return": "Options", "signature": "Options getOptions()", "full_signature": "private static Options getOptions()", "class_method_signature": "XESExportMain.getOptions()", "testcase": false, "constructor": false}], "file": "jbpm-xes/src/main/java/org/jbpm/xes/XESExportMain.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n        // create the Options\n        Options options = getOptions();\n\n        CommandLineParser parser = new DefaultParser();\n        try (BasicDataSource ds = new BasicDataSource()) {\n            // parse the command line arguments\n            CommandLine line = parser.parse(options, args);\n\n            ds.setDriverClassName(line.getOptionValue(\"driver\"));\n            ds.setUrl(line.getOptionValue(\"url\"));\n            ds.setUsername(line.getOptionValue(\"user\"));\n            ds.setPassword(line.getOptionValue(\"password\"));\n            ds.setDefaultReadOnly(true);\n//          Test connection\n            ds.getConnection().close();\n\n            DataSetService dataSetService = new DataSetServiceImpl(() -> ds);\n            XESExportServiceImpl service = new XESExportServiceImpl();\n            service.setDataSetService(dataSetService);\n            final XESProcessFilter.Builder filter = XESProcessFilter.builder();\n            filter.withProcessId(line.getOptionValue(\"process\"));\n            if (line.hasOption(\"version\")) {\n                filter.withProcessVersion(line.getOptionValue(\"version\"));\n            }\n            if (line.hasOption(\"status\")) {\n                List<Integer> status = new ArrayList<>();\n                for (String statusLine : line.getOptionValues(\"status\")) {\n                    try {\n                        final Integer pStatus = Integer.valueOf(statusLine);\n                        //only add valid status\n                        if (pStatus >= 0 && pStatus <= 4) {\n                            status.add(pStatus);\n                        }\n                    } catch (NumberFormatException ex) {\n                        System.err.println(\"Invalid process status number for input: \" + statusLine + \", valid status are number between 0 and 4.\");\n                    }\n                }\n                if (status.isEmpty() == false) {\n                    filter.withStatus(status);\n                }\n            }\n            if (line.hasOption(\"logtype\")) {\n                filter.withNodeInstanceLogType(Integer.valueOf(line.getOptionValue(\"logtype\")));\n            }\n            if (line.hasOption(\"nodetypes\")) {\n                filter.withAllNodeTypes();\n            }\n\n            final String xml = service.export(filter.build());\n            if (line.hasOption(\"file\")) {\n                FileUtils.write(new File(line.getOptionValue(\"file\")), xml, \"UTF-8\");\n            } else {\n                System.out.println(xml);\n            }\n        } catch (ParseException exp) {\n            System.err.println(\"Parsing options failed. Reason: \" + exp.getMessage());\n            HelpFormatter formatter = new HelpFormatter();\n            formatter.printHelp(\"xes\", options, true);\n            System.exit(-1);\n        } catch (Exception ex) {\n            System.err.println(\"Failed to execute export due to: \" + ex.getMessage());\n            ex.printStackTrace();\n            System.exit(-1);\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "XESExportMain.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["getOptions", "parse", "setDriverClassName", "getOptionValue", "setUrl", "getOptionValue", "setUsername", "getOptionValue", "setPassword", "getOptionValue", "setDefaultReadOnly", "close", "getConnection", "setDataSetService", "builder", "withProcessId", "getOptionValue", "hasOption", "withProcessVersion", "getOptionValue", "hasOption", "getOptionValues", "valueOf", "add", "println", "isEmpty", "withStatus", "hasOption", "withNodeInstanceLogType", "valueOf", "getOptionValue", "hasOption", "withAllNodeTypes", "export", "build", "hasOption", "write", "getOptionValue", "println", "println", "getMessage", "printHelp", "exit", "println", "getMessage", "printStackTrace", "exit"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}