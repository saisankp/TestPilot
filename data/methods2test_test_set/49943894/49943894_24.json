{"test_class": {"identifier": "VhdProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "VhdProcessor processor;", "modifier": "", "type": "VhdProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    StorageLayer mockStorageLayer;", "modifier": "@Mock", "type": "StorageLayer", "declarator": "mockStorageLayer", "var_name": "mockStorageLayer"}], "file": "nucleo/src/test/java/com/cloud/storage/template/VhdProcessorTest.java"}, "test_case": {"identifier": "testGetVirtualSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetVirtualSize() throws Exception{\n        long virtualSize = 2000;\n        long actualSize = 1000;\n        File mockFile = Mockito.mock(File.class);\n        Mockito.when(mockFile.length()).thenReturn(actualSize);\n        Mockito.doReturn(virtualSize).when(processor).getTemplateVirtualSize((File) Mockito.any());\n        Assert.assertEquals(virtualSize, processor.getVirtualSize(mockFile));\n        Mockito.verify(mockFile,Mockito.times(0)).length();\n    }", "signature": "void testGetVirtualSize()", "full_signature": "@Test public void testGetVirtualSize()", "class_method_signature": "VhdProcessorTest.testGetVirtualSize()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "length", "getTemplateVirtualSize", "when", "doReturn", "any", "assertEquals", "getVirtualSize", "length", "verify", "times"]}, "focal_class": {"identifier": "VhdProcessor", "superclass": "extends AdapterBase", "interfaces": "implements Processor", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VhdProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VhdProcessor.class)", "var_name": "s_logger"}, {"original_string": "StorageLayer _storage;", "modifier": "", "type": "StorageLayer", "declarator": "_storage", "var_name": "_storage"}, {"original_string": "private int vhdFooterSize = 512;", "modifier": "private", "type": "int", "declarator": "vhdFooterSize = 512", "var_name": "vhdFooterSize"}, {"original_string": "private int vhdFooterCreatorAppOffset = 28;", "modifier": "private", "type": "int", "declarator": "vhdFooterCreatorAppOffset = 28", "var_name": "vhdFooterCreatorAppOffset"}, {"original_string": "private int vhdFooterCreatorVerOffset = 32;", "modifier": "private", "type": "int", "declarator": "vhdFooterCreatorVerOffset = 32", "var_name": "vhdFooterCreatorVerOffset"}, {"original_string": "private int vhdFooterCurrentSizeOffset = 48;", "modifier": "private", "type": "int", "declarator": "vhdFooterCurrentSizeOffset = 48", "var_name": "vhdFooterCurrentSizeOffset"}, {"original_string": "private byte[][] citrixCreatorApp = { {0x74, 0x61, 0x70, 0x00}, {0x43, 0x54, 0x58, 0x53}};", "modifier": "private", "type": "byte[][]", "declarator": "citrixCreatorApp = { {0x74, 0x61, 0x70, 0x00}, {0x43, 0x54, 0x58, 0x53}}", "var_name": "citrixCreatorApp"}], "methods": [{"identifier": "process", "parameters": "(String templatePath, ImageFormat format, String templateName)", "modifiers": "@Override public", "return": "FormatInfo", "signature": "FormatInfo process(String templatePath, ImageFormat format, String templateName)", "full_signature": "@Override public FormatInfo process(String templatePath, ImageFormat format, String templateName)", "class_method_signature": "VhdProcessor.process(String templatePath, ImageFormat format, String templateName)", "testcase": false, "constructor": false}, {"identifier": "getVirtualSize", "parameters": "(File file)", "modifiers": "@Override public", "return": "long", "signature": "long getVirtualSize(File file)", "full_signature": "@Override public long getVirtualSize(File file)", "class_method_signature": "VhdProcessor.getVirtualSize(File file)", "testcase": false, "constructor": false}, {"identifier": "getTemplateVirtualSize", "parameters": "(File file)", "modifiers": "protected", "return": "long", "signature": "long getTemplateVirtualSize(File file)", "full_signature": "protected long getTemplateVirtualSize(File file)", "class_method_signature": "VhdProcessor.getTemplateVirtualSize(File file)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "VhdProcessor.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}], "file": "nucleo/src/main/java/com/cloud/storage/template/VhdProcessor.java"}, "focal_method": {"identifier": "getVirtualSize", "parameters": "(File file)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long getVirtualSize(File file) throws IOException {\n        try {\n            long size = getTemplateVirtualSize(file);\n            return size;\n        } catch (Exception e) {\n            s_logger.info(\"[ignored]\" + \"failed to get template virtual size for VHD: \" + e.getLocalizedMessage());\n        }\n        return file.length();\n    }", "signature": "long getVirtualSize(File file)", "full_signature": "@Override public long getVirtualSize(File file)", "class_method_signature": "VhdProcessor.getVirtualSize(File file)", "testcase": false, "constructor": false, "invocations": ["getTemplateVirtualSize", "info", "getLocalizedMessage", "length"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}