{"test_class": {"identifier": "GitUtilsTest", "superclass": "extends PipelineBaseTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public GitSampleRepoRule repo = new GitSampleRepoRule();", "modifier": "@Rule\n    public", "type": "GitSampleRepoRule", "declarator": "repo = new GitSampleRepoRule()", "var_name": "repo"}, {"original_string": "private final String initialText = \"initial-text\";", "modifier": "private final", "type": "String", "declarator": "initialText = \"initial-text\"", "var_name": "initialText"}], "file": "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitUtilsTest.java"}, "test_case": {"identifier": "testSshUrlChecker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSshUrlChecker() {\n        Assert.assertTrue(GitUtils.isSshUrl(\"ssh://some-host/some-path\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"ssh://some-host/some-path/more\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"ssh://some-host:port/some-path/more\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"ssh://user@some-host/some-path/more\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"ssh://user@some-host:port/some-path/more\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"user@some-host:some-path\"));\n        Assert.assertTrue(GitUtils.isSshUrl(\"user@some-host:some-path/more\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"proto://user@some-host/some-path\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"proto://user@some-host:port/some-path\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"proto://user@some-host/some-path/more\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"proto://user@some-host:port/some-path/more\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"https://user@some-host/some-path\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"https://user@some-host:port/some-path\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"https://user@some-host/some-path/more\"));\n        Assert.assertTrue(!GitUtils.isSshUrl(\"https://user@some-host:port/some-path/more\"));\n    }", "signature": "void testSshUrlChecker()", "full_signature": "@Test public void testSshUrlChecker()", "class_method_signature": "GitUtilsTest.testSshUrlChecker()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl", "assertTrue", "isSshUrl"]}, "focal_class": {"identifier": "GitUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GitUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GitUtils.class)", "var_name": "logger"}, {"original_string": "private static final Pattern SSH_URL_PATTERN = Pattern.compile(\"(\\\\Qssh://\\\\E.*|[^@:]+@.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "SSH_URL_PATTERN = Pattern.compile(\"(\\\\Qssh://\\\\E.*|[^@:]+@.*)\")", "var_name": "SSH_URL_PATTERN"}], "methods": [{"identifier": "validateCredentials", "parameters": "(@Nonnull String uri, @Nullable StandardCredentials credentials)", "modifiers": "static", "return": "List<ErrorMessage.Error>", "signature": "List<ErrorMessage.Error> validateCredentials(@Nonnull String uri, @Nullable StandardCredentials credentials)", "full_signature": "static List<ErrorMessage.Error> validateCredentials(@Nonnull String uri, @Nullable StandardCredentials credentials)", "class_method_signature": "GitUtils.validateCredentials(@Nonnull String uri, @Nullable StandardCredentials credentials)", "testcase": false, "constructor": false}, {"identifier": "checkCauseNotAuthenticated", "parameters": "( GitException e)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkCauseNotAuthenticated( GitException e)", "full_signature": "private static boolean checkCauseNotAuthenticated( GitException e)", "class_method_signature": "GitUtils.checkCauseNotAuthenticated( GitException e)", "testcase": false, "constructor": false}, {"identifier": "getIllegalStateException", "parameters": "(Throwable e)", "modifiers": "private static", "return": "IllegalStateException", "signature": "IllegalStateException getIllegalStateException(Throwable e)", "full_signature": "private static IllegalStateException getIllegalStateException(Throwable e)", "class_method_signature": "GitUtils.getIllegalStateException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "validatePushAccess", "parameters": "(@Nonnull Repository repo, @Nonnull String remoteUrl, @Nullable StandardCredentials credential)", "modifiers": "public static", "return": "void", "signature": "void validatePushAccess(@Nonnull Repository repo, @Nonnull String remoteUrl, @Nullable StandardCredentials credential)", "full_signature": "public static void validatePushAccess(@Nonnull Repository repo, @Nonnull String remoteUrl, @Nullable StandardCredentials credential)", "class_method_signature": "GitUtils.validatePushAccess(@Nonnull Repository repo, @Nonnull String remoteUrl, @Nullable StandardCredentials credential)", "testcase": false, "constructor": false}, {"identifier": "isSshUrl", "parameters": "(@Nullable String remote)", "modifiers": "static", "return": "boolean", "signature": "boolean isSshUrl(@Nullable String remote)", "full_signature": "static boolean isSshUrl(@Nullable String remote)", "class_method_signature": "GitUtils.isSshUrl(@Nullable String remote)", "testcase": false, "constructor": false}, {"identifier": "isLocalUnixFileUrl", "parameters": "(@Nullable String remote)", "modifiers": "static", "return": "boolean", "signature": "boolean isLocalUnixFileUrl(@Nullable String remote)", "full_signature": "static boolean isLocalUnixFileUrl(@Nullable String remote)", "class_method_signature": "GitUtils.isLocalUnixFileUrl(@Nullable String remote)", "testcase": false, "constructor": false}, {"identifier": "isSshUrl", "parameters": "(Repository repo)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSshUrl(Repository repo)", "full_signature": "private static boolean isSshUrl(Repository repo)", "class_method_signature": "GitUtils.isSshUrl(Repository repo)", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "(ItemGroup owner, String uri, String credentialId)", "modifiers": "static", "return": "StandardCredentials", "signature": "StandardCredentials getCredentials(ItemGroup owner, String uri, String credentialId)", "full_signature": "static StandardCredentials getCredentials(ItemGroup owner, String uri, String credentialId)", "class_method_signature": "GitUtils.getCredentials(ItemGroup owner, String uri, String credentialId)", "testcase": false, "constructor": false}, {"identifier": "getSSHKeyTransport", "parameters": "(final BasicSSHUserPrivateKey privateKey)", "modifiers": "private static", "return": "TransportConfigCallback", "signature": "TransportConfigCallback getSSHKeyTransport(final BasicSSHUserPrivateKey privateKey)", "full_signature": "private static TransportConfigCallback getSSHKeyTransport(final BasicSSHUserPrivateKey privateKey)", "class_method_signature": "GitUtils.getSSHKeyTransport(final BasicSSHUserPrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(final Repository repo, final StandardCredentials credential)", "modifiers": "public static", "return": "void", "signature": "void fetch(final Repository repo, final StandardCredentials credential)", "full_signature": "public static void fetch(final Repository repo, final StandardCredentials credential)", "class_method_signature": "GitUtils.fetch(final Repository repo, final StandardCredentials credential)", "testcase": false, "constructor": false}, {"identifier": "addCredential", "parameters": "(Repository repo, TransportCommand command, StandardCredentials credential)", "modifiers": "private static", "return": "void", "signature": "void addCredential(Repository repo, TransportCommand command, StandardCredentials credential)", "full_signature": "private static void addCredential(Repository repo, TransportCommand command, StandardCredentials credential)", "class_method_signature": "GitUtils.addCredential(Repository repo, TransportCommand command, StandardCredentials credential)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final Repository repo, final String localRef, final String remoteRef)", "modifiers": "public static", "return": "void", "signature": "void merge(final Repository repo, final String localRef, final String remoteRef)", "full_signature": "public static void merge(final Repository repo, final String localRef, final String remoteRef)", "class_method_signature": "GitUtils.merge(final Repository repo, final String localRef, final String remoteRef)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final Repository repo, final String refName, final String path, final byte[] contents,\n            final String name, final String email, final String message, final TimeZone timeZone, final Date when)", "modifiers": "@SuppressFBWarnings(value={\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\"}, justification=\"JDK11 produces different bytecode - https://github.com/spotbugs/spotbugs/issues/756\") public static", "return": "void", "signature": "void commit(final Repository repo, final String refName, final String path, final byte[] contents,\n            final String name, final String email, final String message, final TimeZone timeZone, final Date when)", "full_signature": "@SuppressFBWarnings(value={\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\"}, justification=\"JDK11 produces different bytecode - https://github.com/spotbugs/spotbugs/issues/756\") public static void commit(final Repository repo, final String refName, final String path, final byte[] contents,\n            final String name, final String email, final String message, final TimeZone timeZone, final Date when)", "class_method_signature": "GitUtils.commit(final Repository repo, final String refName, final String path, final byte[] contents,\n            final String name, final String email, final String message, final TimeZone timeZone, final Date when)", "testcase": false, "constructor": false}, {"identifier": "buildPersonIdent", "parameters": "(final Repository repo, final String name, final String email,\n            final TimeZone timeZone, final Date when)", "modifiers": "private static", "return": "PersonIdent", "signature": "PersonIdent buildPersonIdent(final Repository repo, final String name, final String email,\n            final TimeZone timeZone, final Date when)", "full_signature": "private static PersonIdent buildPersonIdent(final Repository repo, final String name, final String email,\n            final TimeZone timeZone, final Date when)", "class_method_signature": "GitUtils.buildPersonIdent(final Repository repo, final String name, final String email,\n            final TimeZone timeZone, final Date when)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryIndex", "parameters": "(final Repository repo, final ObjectId headId, final String path, final byte[] contents)", "modifiers": "private static", "return": "DirCache", "signature": "DirCache createTemporaryIndex(final Repository repo, final ObjectId headId, final String path, final byte[] contents)", "full_signature": "private static DirCache createTemporaryIndex(final Repository repo, final ObjectId headId, final String path, final byte[] contents)", "class_method_signature": "GitUtils.createTemporaryIndex(final Repository repo, final ObjectId headId, final String path, final byte[] contents)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(Repository repository, String ref, String filePath)", "modifiers": "@SuppressFBWarnings(value={\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\"}, justification=\"JDK11 produces different bytecode - https://github.com/spotbugs/spotbugs/issues/756\") static", "return": "byte[]", "signature": "byte[] readFile(Repository repository, String ref, String filePath)", "full_signature": "@SuppressFBWarnings(value={\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\"}, justification=\"JDK11 produces different bytecode - https://github.com/spotbugs/spotbugs/issues/756\") static byte[] readFile(Repository repository, String ref, String filePath)", "class_method_signature": "GitUtils.readFile(Repository repository, String ref, String filePath)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(String remoteUrl, Repository repo, StandardCredentials credential, String localBranchRef, String remoteBranchRef)", "modifiers": "public static", "return": "void", "signature": "void push(String remoteUrl, Repository repo, StandardCredentials credential, String localBranchRef, String remoteBranchRef)", "full_signature": "public static void push(String remoteUrl, Repository repo, StandardCredentials credential, String localBranchRef, String remoteBranchRef)", "class_method_signature": "GitUtils.push(String remoteUrl, Repository repo, StandardCredentials credential, String localBranchRef, String remoteBranchRef)", "testcase": false, "constructor": false}], "file": "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitUtils.java"}, "focal_method": {"identifier": "isSshUrl", "parameters": "(@Nullable String remote)", "modifiers": "static", "return": "boolean", "body": "static boolean isSshUrl(@Nullable String remote) {\n        return remote != null && SSH_URL_PATTERN.matcher(remote).matches();\n    }", "signature": "boolean isSshUrl(@Nullable String remote)", "full_signature": "static boolean isSshUrl(@Nullable String remote)", "class_method_signature": "GitUtils.isSshUrl(@Nullable String remote)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}