{"test_class": {"identifier": "InMemoryEntityFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Entity ROMEO_SIDEWALK = EntityImpl.parseUnchecked(\"romeo@foo.com/sidewalk\");", "modifier": "private static final", "type": "Entity", "declarator": "ROMEO_SIDEWALK = EntityImpl.parseUnchecked(\"romeo@foo.com/sidewalk\")", "var_name": "ROMEO_SIDEWALK"}, {"original_string": "private static final Entity ROMEO_CAR = EntityImpl.parseUnchecked(\"romeo@foo.com/car\");", "modifier": "private static final", "type": "Entity", "declarator": "ROMEO_CAR = EntityImpl.parseUnchecked(\"romeo@foo.com/car\")", "var_name": "ROMEO_CAR"}, {"original_string": "private static final Entity JULIET_BALCONY = EntityImpl.parseUnchecked(\"juliet@foo.com/balcony\");", "modifier": "private static final", "type": "Entity", "declarator": "JULIET_BALCONY = EntityImpl.parseUnchecked(\"juliet@foo.com/balcony\")", "var_name": "JULIET_BALCONY"}, {"original_string": "private static final Entity JULIET_TRAIN = EntityImpl.parseUnchecked(\"juliet@foo.com/train\");", "modifier": "private static final", "type": "Entity", "declarator": "JULIET_TRAIN = EntityImpl.parseUnchecked(\"juliet@foo.com/train\")", "var_name": "JULIET_TRAIN"}, {"original_string": "private ArchivedMessage romeoSidewalkToJulietBalcony;", "modifier": "private", "type": "ArchivedMessage", "declarator": "romeoSidewalkToJulietBalcony", "var_name": "romeoSidewalkToJulietBalcony"}, {"original_string": "private ArchivedMessage romeoSidewalkToRomeoCar;", "modifier": "private", "type": "ArchivedMessage", "declarator": "romeoSidewalkToRomeoCar", "var_name": "romeoSidewalkToRomeoCar"}], "file": "server/extensions/xep0313-mam/src/test/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/in_memory/InMemoryEntityFilterTest.java"}, "test_case": {"identifier": "toAndFromIgnoringResource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toAndFromIgnoringResource() {\n        EntityFilter entityFilter = new SimpleEntityFilter(ROMEO_CAR, EntityFilter.Type.TO_AND_FROM, true);\n        InMemoryEntityFilter tested = new InMemoryEntityFilter(entityFilter);\n        assertTrue(tested.test(romeoSidewalkToRomeoCar));\n        assertFalse(tested.test(romeoSidewalkToJulietBalcony));\n    }", "signature": "void toAndFromIgnoringResource()", "full_signature": "@Test public void toAndFromIgnoringResource()", "class_method_signature": "InMemoryEntityFilterTest.toAndFromIgnoringResource()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "test", "assertFalse", "test"]}, "focal_class": {"identifier": "InMemoryEntityFilter", "superclass": "", "interfaces": "implements Predicate<ArchivedMessage>", "fields": [{"original_string": "private final EntityFilter filter;", "modifier": "private final", "type": "EntityFilter", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "InMemoryEntityFilter", "parameters": "(EntityFilter filter)", "modifiers": "public", "return": "", "signature": " InMemoryEntityFilter(EntityFilter filter)", "full_signature": "public  InMemoryEntityFilter(EntityFilter filter)", "class_method_signature": "InMemoryEntityFilter.InMemoryEntityFilter(EntityFilter filter)", "testcase": false, "constructor": true}, {"identifier": "test", "parameters": "(ArchivedMessage message)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(ArchivedMessage message)", "full_signature": "@Override public boolean test(ArchivedMessage message)", "class_method_signature": "InMemoryEntityFilter.test(ArchivedMessage message)", "testcase": false, "constructor": false}, {"identifier": "matchToAndFrom", "parameters": "(ArchivedMessage message)", "modifiers": "private", "return": "boolean", "signature": "boolean matchToAndFrom(ArchivedMessage message)", "full_signature": "private boolean matchToAndFrom(ArchivedMessage message)", "class_method_signature": "InMemoryEntityFilter.matchToAndFrom(ArchivedMessage message)", "testcase": false, "constructor": false}, {"identifier": "matchToOrFrom", "parameters": "(ArchivedMessage message)", "modifiers": "private", "return": "boolean", "signature": "boolean matchToOrFrom(ArchivedMessage message)", "full_signature": "private boolean matchToOrFrom(ArchivedMessage message)", "class_method_signature": "InMemoryEntityFilter.matchToOrFrom(ArchivedMessage message)", "testcase": false, "constructor": false}, {"identifier": "entitiesEquals", "parameters": "(Entity entity1, Entity entity2)", "modifiers": "private", "return": "boolean", "signature": "boolean entitiesEquals(Entity entity1, Entity entity2)", "full_signature": "private boolean entitiesEquals(Entity entity1, Entity entity2)", "class_method_signature": "InMemoryEntityFilter.entitiesEquals(Entity entity1, Entity entity2)", "testcase": false, "constructor": false}], "file": "server/extensions/xep0313-mam/src/main/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/in_memory/InMemoryEntityFilter.java"}, "focal_method": {"identifier": "test", "parameters": "(ArchivedMessage message)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean test(ArchivedMessage message) {\n        EntityFilter.Type type = filter.type();\n        if (type == EntityFilter.Type.TO_AND_FROM) {\n            return matchToAndFrom(message);\n        } else if (type == EntityFilter.Type.TO_OR_FROM) {\n            return matchToOrFrom(message);\n        } else {\n            throw new IllegalArgumentException(\"Unexpected entity filter type '\" + type + \"'\");\n        }\n    }", "signature": "boolean test(ArchivedMessage message)", "full_signature": "@Override public boolean test(ArchivedMessage message)", "class_method_signature": "InMemoryEntityFilter.test(ArchivedMessage message)", "testcase": false, "constructor": false, "invocations": ["type", "matchToAndFrom", "matchToOrFrom"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}