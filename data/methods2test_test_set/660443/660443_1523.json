{"test_class": {"identifier": "KierHallSmartsDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private String[] names;", "modifier": "private", "type": "String[]", "declarator": "names", "var_name": "names"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/KierHallSmartsDescriptorTest.java"}, "test_case": {"identifier": "test2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test2() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"c1c(CN)cc(CCNC)cc1C(CO)CC(=O)CCOCCCO\");\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n\n        DescriptorValue value = descriptor.calculate(mol);\n        IntegerArrayResult result = (IntegerArrayResult) value.getValue();\n\n        Assert.assertEquals(79, result.length());\n        Assert.assertEquals(2, result.get(getIndex(\"khs.sOH\")));\n        Assert.assertEquals(1, result.get(getIndex(\"khs.dO\")));\n        Assert.assertEquals(1, result.get(getIndex(\"khs.ssO\")));\n        Assert.assertEquals(1, result.get(getIndex(\"khs.sNH2\")));\n        Assert.assertEquals(1, result.get(getIndex(\"khs.ssNH\")));\n    }", "signature": "void test2()", "full_signature": "@Test public void test2()", "class_method_signature": "KierHallSmartsDescriptorTest.test2()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "calculate", "getValue", "assertEquals", "length", "assertEquals", "get", "getIndex", "assertEquals", "get", "getIndex", "assertEquals", "get", "getIndex", "assertEquals", "get", "getIndex", "assertEquals", "get", "getIndex"]}, "focal_class": {"identifier": "KierHallSmartsDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static String[] names;", "modifier": "private static", "type": "String[]", "declarator": "names", "var_name": "names"}, {"original_string": "private static final SmartsPattern[] SMARTS = EStateFragments.getPatterns();", "modifier": "private static final", "type": "SmartsPattern[]", "declarator": "SMARTS = EStateFragments.getPatterns()", "var_name": "SMARTS"}], "methods": [{"identifier": "KierHallSmartsDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " KierHallSmartsDescriptor()", "full_signature": "public  KierHallSmartsDescriptor()", "class_method_signature": "KierHallSmartsDescriptor.KierHallSmartsDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "KierHallSmartsDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "KierHallSmartsDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "KierHallSmartsDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "KierHallSmartsDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "KierHallSmartsDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "KierHallSmartsDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "KierHallSmartsDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "KierHallSmartsDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "KierHallSmartsDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/KierHallSmartsDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        if (container == null || container.getAtomCount() == 0) {\n            return getDummyDescriptorValue(new CDKException(\"Container was null or else had no atoms\"));\n        }\n\n        IAtomContainer atomContainer;\n        try {\n            atomContainer = (IAtomContainer) container.clone();\n            for (IAtom atom : atomContainer.atoms()) {\n                if (atom.getImplicitHydrogenCount() == null)\n                    atom.setImplicitHydrogenCount(0);\n            }\n            atomContainer = AtomContainerManipulator.removeHydrogens(atomContainer);\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(new CDKException(\"Error during clone\"));\n        }\n\n        int[] counts = new int[SMARTS.length];\n        SmartsPattern.prepare(atomContainer);\n        for (int i = 0; i < SMARTS.length; i++) {\n            counts[i] = SMARTS[i].matchAll(atomContainer).countUnique();\n        }\n\n        IntegerArrayResult result = new IntegerArrayResult();\n        for (Integer i : counts)\n            result.add(i);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result,\n                                   getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "KierHallSmartsDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getDummyDescriptorValue", "clone", "atoms", "getImplicitHydrogenCount", "setImplicitHydrogenCount", "removeHydrogens", "getDummyDescriptorValue", "prepare", "countUnique", "matchAll", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}