{"test_class": {"identifier": "ListDelegationAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/hannesdorfmann/adapterdelegates4/ListDelegationAdapterTest.java"}, "test_case": {"identifier": "checkDelegatesManagerInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkDelegatesManagerInstance() {\n\n        final AdapterDelegatesManager<List<Object>> manager = new AdapterDelegatesManager<>();\n\n        ListDelegationAdapter<List<Object>> adapter = new ListDelegationAdapter<List<Object>>(manager) {\n            @Override\n            public int getItemCount() {\n                // Hacky but does the job\n                Assert.assertTrue(manager == this.delegatesManager);\n                return 0;\n            }\n        };\n\n        adapter.getItemCount();\n    }", "signature": "void checkDelegatesManagerInstance()", "full_signature": "@Test public void checkDelegatesManagerInstance()", "class_method_signature": "ListDelegationAdapterTest.checkDelegatesManagerInstance()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getItemCount"]}, "focal_class": {"identifier": "ListDelegationAdapter", "superclass": "extends AbsDelegationAdapter<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "ListDelegationAdapter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ListDelegationAdapter()", "full_signature": "public  ListDelegationAdapter()", "class_method_signature": "ListDelegationAdapter.ListDelegationAdapter()", "testcase": false, "constructor": true}, {"identifier": "ListDelegationAdapter", "parameters": "(@NonNull AdapterDelegatesManager<T> delegatesManager)", "modifiers": "public", "return": "", "signature": " ListDelegationAdapter(@NonNull AdapterDelegatesManager<T> delegatesManager)", "full_signature": "public  ListDelegationAdapter(@NonNull AdapterDelegatesManager<T> delegatesManager)", "class_method_signature": "ListDelegationAdapter.ListDelegationAdapter(@NonNull AdapterDelegatesManager<T> delegatesManager)", "testcase": false, "constructor": true}, {"identifier": "ListDelegationAdapter", "parameters": "(@NonNull AdapterDelegate<T>... delegates)", "modifiers": "public", "return": "", "signature": " ListDelegationAdapter(@NonNull AdapterDelegate<T>... delegates)", "full_signature": "public  ListDelegationAdapter(@NonNull AdapterDelegate<T>... delegates)", "class_method_signature": "ListDelegationAdapter.ListDelegationAdapter(@NonNull AdapterDelegate<T>... delegates)", "testcase": false, "constructor": true}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getItemCount()", "full_signature": "@Override public int getItemCount()", "class_method_signature": "ListDelegationAdapter.getItemCount()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/hannesdorfmann/adapterdelegates4/ListDelegationAdapter.java"}, "focal_method": {"identifier": "getItemCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getItemCount() {\n        return items == null ? 0 : items.size();\n    }", "signature": "int getItemCount()", "full_signature": "@Override public int getItemCount()", "class_method_signature": "ListDelegationAdapter.getItemCount()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 39889599, "url": "https://github.com/sockeqwe/AdapterDelegates", "language": "Java", "is_fork": false, "fork_count": 285, "stargazer_count": 2498, "size": 963, "license": "licensed"}}