{"test_class": {"identifier": "ServiceProviderExtensionStorageTest", "superclass": "", "interfaces": "", "fields": [], "file": "pf4j/src/test/java/org/pf4j/processor/ServiceProviderExtensionStorageTest.java"}, "test_case": {"identifier": "ensureServiceProviderExtensionStorageReadWorks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ensureServiceProviderExtensionStorageReadWorks() throws IOException {\n        final StringReader file = new StringReader(\"#hello\\n    World\");\n        final Set<String> entries = new HashSet<>();\n        ServiceProviderExtensionStorage.read(file, entries);\n\n        assertThat(entries.size(), is(1));\n        assertThat(entries.contains(\"World\"), is(true));\n    }", "signature": "void ensureServiceProviderExtensionStorageReadWorks()", "full_signature": "@Test public void ensureServiceProviderExtensionStorageReadWorks()", "class_method_signature": "ServiceProviderExtensionStorageTest.ensureServiceProviderExtensionStorageReadWorks()", "testcase": true, "constructor": false, "invocations": ["read", "assertThat", "size", "is", "assertThat", "contains", "is"]}, "focal_class": {"identifier": "ServiceProviderExtensionStorage", "superclass": "extends ExtensionStorage", "interfaces": "", "fields": [{"original_string": "public static final String EXTENSIONS_RESOURCE = \"META-INF/services\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSIONS_RESOURCE = \"META-INF/services\"", "var_name": "EXTENSIONS_RESOURCE"}], "methods": [{"identifier": "ServiceProviderExtensionStorage", "parameters": "(ExtensionAnnotationProcessor processor)", "modifiers": "public", "return": "", "signature": " ServiceProviderExtensionStorage(ExtensionAnnotationProcessor processor)", "full_signature": "public  ServiceProviderExtensionStorage(ExtensionAnnotationProcessor processor)", "class_method_signature": "ServiceProviderExtensionStorage.ServiceProviderExtensionStorage(ExtensionAnnotationProcessor processor)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> read()", "full_signature": "@Override public Map<String, Set<String>> read()", "class_method_signature": "ServiceProviderExtensionStorage.read()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Map<String, Set<String>> extensions)", "modifiers": "@Override public", "return": "void", "signature": "void write(Map<String, Set<String>> extensions)", "full_signature": "@Override public void write(Map<String, Set<String>> extensions)", "class_method_signature": "ServiceProviderExtensionStorage.write(Map<String, Set<String>> extensions)", "testcase": false, "constructor": false}, {"identifier": "isExtensionOld", "parameters": "(String extensionPoint, String extension)", "modifiers": "private", "return": "boolean", "signature": "boolean isExtensionOld(String extensionPoint, String extension)", "full_signature": "private boolean isExtensionOld(String extensionPoint, String extension)", "class_method_signature": "ServiceProviderExtensionStorage.isExtensionOld(String extensionPoint, String extension)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/processor/ServiceProviderExtensionStorage.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "body": "@Override\n    public Map<String, Set<String>> read() {\n        Map<String, Set<String>> extensions = new HashMap<>();\n\n        for (String extensionPoint : processor.getExtensions().keySet()) {\n            try {\n                FileObject file = getFiler().getResource(StandardLocation.CLASS_OUTPUT, \"\", EXTENSIONS_RESOURCE\n                    + \"/\" + extensionPoint);\n                Set<String> entries = new HashSet<>();\n                ExtensionStorage.read(file.openReader(true), entries);\n                extensions.put(extensionPoint, entries);\n            } catch (FileNotFoundException | NoSuchFileException e) {\n                // doesn't exist, ignore\n            } catch (FilerException e) {\n                // re-opening the file for reading or after writing is ignorable\n            } catch (IOException e) {\n                error(e.getMessage());\n            }\n        }\n\n        return extensions;\n    }", "signature": "Map<String, Set<String>> read()", "full_signature": "@Override public Map<String, Set<String>> read()", "class_method_signature": "ServiceProviderExtensionStorage.read()", "testcase": false, "constructor": false, "invocations": ["keySet", "getExtensions", "getResource", "getFiler", "read", "openReader", "put", "error", "getMessage"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}