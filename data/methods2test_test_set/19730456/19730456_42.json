{"test_class": {"identifier": "RLPTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/RLPTest.java"}, "test_case": {"identifier": "test9", "parameters": "()", "modifiers": "@Test /** encode list */ public", "return": "void", "body": "@Test\n    /** encode list */\n    public void test9() {\n\n        byte[] actuals = encodeList();\n        assertArrayEquals(new byte[]{(byte) 0xc0}, actuals);\n    }", "signature": "void test9()", "full_signature": "@Test /** encode list */ public void test9()", "class_method_signature": "RLPTest.test9()", "testcase": true, "constructor": false, "invocations": ["encodeList", "assertArrayEquals"]}, "focal_class": {"identifier": "RLP", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"rlp\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"rlp\")", "var_name": "logger"}, {"original_string": "public static final byte[] EMPTY_ELEMENT_RLP = encodeElement(new byte[0]);", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_ELEMENT_RLP = encodeElement(new byte[0])", "var_name": "EMPTY_ELEMENT_RLP"}, {"original_string": "private static final int MAX_DEPTH = 16;", "modifier": "private static final", "type": "int", "declarator": "MAX_DEPTH = 16", "var_name": "MAX_DEPTH"}, {"original_string": "private static final double MAX_ITEM_LENGTH = Math.pow(256, 8);", "modifier": "private static final", "type": "double", "declarator": "MAX_ITEM_LENGTH = Math.pow(256, 8)", "var_name": "MAX_ITEM_LENGTH"}, {"original_string": "private static final int SIZE_THRESHOLD = 56;", "modifier": "private static final", "type": "int", "declarator": "SIZE_THRESHOLD = 56", "var_name": "SIZE_THRESHOLD"}, {"original_string": "private static final int OFFSET_SHORT_ITEM = 0x80;", "modifier": "private static final", "type": "int", "declarator": "OFFSET_SHORT_ITEM = 0x80", "var_name": "OFFSET_SHORT_ITEM"}, {"original_string": "private static final int OFFSET_LONG_ITEM = 0xb7;", "modifier": "private static final", "type": "int", "declarator": "OFFSET_LONG_ITEM = 0xb7", "var_name": "OFFSET_LONG_ITEM"}, {"original_string": "private static final int OFFSET_SHORT_LIST = 0xc0;", "modifier": "private static final", "type": "int", "declarator": "OFFSET_SHORT_LIST = 0xc0", "var_name": "OFFSET_SHORT_LIST"}, {"original_string": "private static final int OFFSET_LONG_LIST = 0xf7;", "modifier": "private static final", "type": "int", "declarator": "OFFSET_LONG_LIST = 0xf7", "var_name": "OFFSET_LONG_LIST"}], "methods": [{"identifier": "decodeOneByteItem", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "byte", "signature": "byte decodeOneByteItem(byte[] data, int index)", "full_signature": "private static byte decodeOneByteItem(byte[] data, int index)", "class_method_signature": "RLP.decodeOneByteItem(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeInt", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "int", "signature": "int decodeInt(byte[] data, int index)", "full_signature": "public static int decodeInt(byte[] data, int index)", "class_method_signature": "RLP.decodeInt(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeShort", "parameters": "(byte[] data, int index)", "modifiers": "static", "return": "short", "signature": "short decodeShort(byte[] data, int index)", "full_signature": "static short decodeShort(byte[] data, int index)", "class_method_signature": "RLP.decodeShort(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeLong", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "long", "signature": "long decodeLong(byte[] data, int index)", "full_signature": "public static long decodeLong(byte[] data, int index)", "class_method_signature": "RLP.decodeLong(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeStringItem", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "String", "signature": "String decodeStringItem(byte[] data, int index)", "full_signature": "private static String decodeStringItem(byte[] data, int index)", "class_method_signature": "RLP.decodeStringItem(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(byte[] data, int index)", "full_signature": "public static BigInteger decodeBigInteger(byte[] data, int index)", "class_method_signature": "RLP.decodeBigInteger(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeByteArray", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] decodeByteArray(byte[] data, int index)", "full_signature": "private static byte[] decodeByteArray(byte[] data, int index)", "class_method_signature": "RLP.decodeByteArray(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "nextItemLength", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "int", "signature": "int nextItemLength(byte[] data, int index)", "full_signature": "private static int nextItemLength(byte[] data, int index)", "class_method_signature": "RLP.nextItemLength(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "decodeIP4Bytes", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeIP4Bytes(byte[] data, int index)", "full_signature": "public static byte[] decodeIP4Bytes(byte[] data, int index)", "class_method_signature": "RLP.decodeIP4Bytes(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "getFirstListElement", "parameters": "(byte[] payload, int pos)", "modifiers": "public static", "return": "int", "signature": "int getFirstListElement(byte[] payload, int pos)", "full_signature": "public static int getFirstListElement(byte[] payload, int pos)", "class_method_signature": "RLP.getFirstListElement(byte[] payload, int pos)", "testcase": false, "constructor": false}, {"identifier": "getNextElementIndex", "parameters": "(byte[] payload, int pos)", "modifiers": "public static", "return": "int", "signature": "int getNextElementIndex(byte[] payload, int pos)", "full_signature": "public static int getNextElementIndex(byte[] payload, int pos)", "class_method_signature": "RLP.getNextElementIndex(byte[] payload, int pos)", "testcase": false, "constructor": false}, {"identifier": "calcLength", "parameters": "(int lengthOfLength, byte[] msgData, int pos)", "modifiers": "private static", "return": "int", "signature": "int calcLength(int lengthOfLength, byte[] msgData, int pos)", "full_signature": "private static int calcLength(int lengthOfLength, byte[] msgData, int pos)", "class_method_signature": "RLP.calcLength(int lengthOfLength, byte[] msgData, int pos)", "testcase": false, "constructor": false}, {"identifier": "getCommandCode", "parameters": "(byte[] data)", "modifiers": "public static", "return": "byte", "signature": "byte getCommandCode(byte[] data)", "full_signature": "public static byte getCommandCode(byte[] data)", "class_method_signature": "RLP.getCommandCode(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decode2", "parameters": "(byte[] msgData, int depthLimit)", "modifiers": "public static", "return": "RLPList", "signature": "RLPList decode2(byte[] msgData, int depthLimit)", "full_signature": "public static RLPList decode2(byte[] msgData, int depthLimit)", "class_method_signature": "RLP.decode2(byte[] msgData, int depthLimit)", "testcase": false, "constructor": false}, {"identifier": "decode2", "parameters": "(byte[] msgData)", "modifiers": "public static", "return": "RLPList", "signature": "RLPList decode2(byte[] msgData)", "full_signature": "public static RLPList decode2(byte[] msgData)", "class_method_signature": "RLP.decode2(byte[] msgData)", "testcase": false, "constructor": false}, {"identifier": "unwrapList", "parameters": "(byte[] msgData)", "modifiers": "public static", "return": "RLPList", "signature": "RLPList unwrapList(byte[] msgData)", "full_signature": "public static RLPList unwrapList(byte[] msgData)", "class_method_signature": "RLP.unwrapList(byte[] msgData)", "testcase": false, "constructor": false}, {"identifier": "decode2OneItem", "parameters": "(byte[] msgData, int startPos)", "modifiers": "public static", "return": "RLPElement", "signature": "RLPElement decode2OneItem(byte[] msgData, int startPos)", "full_signature": "public static RLPElement decode2OneItem(byte[] msgData, int startPos)", "class_method_signature": "RLP.decode2OneItem(byte[] msgData, int startPos)", "testcase": false, "constructor": false}, {"identifier": "fullTraverse", "parameters": "(byte[] msgData, int level, int startPos,\n                             int endPos, RLPList rlpList, int depth)", "modifiers": "static", "return": "void", "signature": "void fullTraverse(byte[] msgData, int level, int startPos,\n                             int endPos, RLPList rlpList, int depth)", "full_signature": "static void fullTraverse(byte[] msgData, int level, int startPos,\n                             int endPos, RLPList rlpList, int depth)", "class_method_signature": "RLP.fullTraverse(byte[] msgData, int level, int startPos,\n                             int endPos, RLPList rlpList, int depth)", "testcase": false, "constructor": false}, {"identifier": "verifyLength", "parameters": "(int suppliedLength, int availableLength)", "modifiers": "private static", "return": "void", "signature": "void verifyLength(int suppliedLength, int availableLength)", "full_signature": "private static void verifyLength(int suppliedLength, int availableLength)", "class_method_signature": "RLP.verifyLength(int suppliedLength, int availableLength)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] data, int pos)", "modifiers": "public static", "return": "DecodeResult", "signature": "DecodeResult decode(byte[] data, int pos)", "full_signature": "public static DecodeResult decode(byte[] data, int pos)", "class_method_signature": "RLP.decode(byte[] data, int pos)", "testcase": false, "constructor": false}, {"identifier": "decodeLazyList", "parameters": "(byte[] data)", "modifiers": "public static", "return": "LList", "signature": "LList decodeLazyList(byte[] data)", "full_signature": "public static LList decodeLazyList(byte[] data)", "class_method_signature": "RLP.decodeLazyList(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "decodeLazyList", "parameters": "(byte[] data, int pos, int length)", "modifiers": "public static", "return": "LList", "signature": "LList decodeLazyList(byte[] data, int pos, int length)", "full_signature": "public static LList decodeLazyList(byte[] data, int pos, int length)", "class_method_signature": "RLP.decodeLazyList(byte[] data, int pos, int length)", "testcase": false, "constructor": false}, {"identifier": "decodeList", "parameters": "(byte[] data, int pos, int prevPos, int len)", "modifiers": "private static", "return": "DecodeResult", "signature": "DecodeResult decodeList(byte[] data, int pos, int prevPos, int len)", "full_signature": "private static DecodeResult decodeList(byte[] data, int pos, int prevPos, int len)", "class_method_signature": "RLP.decodeList(byte[] data, int pos, int prevPos, int len)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Object input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(Object input)", "full_signature": "public static byte[] encode(Object input)", "class_method_signature": "RLP.encode(Object input)", "testcase": false, "constructor": false}, {"identifier": "encodeLength", "parameters": "(int length, int offset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeLength(int length, int offset)", "full_signature": "public static byte[] encodeLength(int length, int offset)", "class_method_signature": "RLP.encodeLength(int length, int offset)", "testcase": false, "constructor": false}, {"identifier": "encodeByte", "parameters": "(byte singleByte)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeByte(byte singleByte)", "full_signature": "public static byte[] encodeByte(byte singleByte)", "class_method_signature": "RLP.encodeByte(byte singleByte)", "testcase": false, "constructor": false}, {"identifier": "encodeShort", "parameters": "(short singleShort)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeShort(short singleShort)", "full_signature": "public static byte[] encodeShort(short singleShort)", "class_method_signature": "RLP.encodeShort(short singleShort)", "testcase": false, "constructor": false}, {"identifier": "encodeInt", "parameters": "(int singleInt)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeInt(int singleInt)", "full_signature": "public static byte[] encodeInt(int singleInt)", "class_method_signature": "RLP.encodeInt(int singleInt)", "testcase": false, "constructor": false}, {"identifier": "encodeString", "parameters": "(String srcString)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeString(String srcString)", "full_signature": "public static byte[] encodeString(String srcString)", "class_method_signature": "RLP.encodeString(String srcString)", "testcase": false, "constructor": false}, {"identifier": "encodeBigInteger", "parameters": "(BigInteger srcBigInteger)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeBigInteger(BigInteger srcBigInteger)", "full_signature": "public static byte[] encodeBigInteger(BigInteger srcBigInteger)", "class_method_signature": "RLP.encodeBigInteger(BigInteger srcBigInteger)", "testcase": false, "constructor": false}, {"identifier": "encodeElement", "parameters": "(byte[] srcData)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeElement(byte[] srcData)", "full_signature": "public static byte[] encodeElement(byte[] srcData)", "class_method_signature": "RLP.encodeElement(byte[] srcData)", "testcase": false, "constructor": false}, {"identifier": "calcElementPrefixSize", "parameters": "(byte[] srcData)", "modifiers": "public static", "return": "int", "signature": "int calcElementPrefixSize(byte[] srcData)", "full_signature": "public static int calcElementPrefixSize(byte[] srcData)", "class_method_signature": "RLP.calcElementPrefixSize(byte[] srcData)", "testcase": false, "constructor": false}, {"identifier": "encodeListHeader", "parameters": "(int size)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeListHeader(int size)", "full_signature": "public static byte[] encodeListHeader(int size)", "class_method_signature": "RLP.encodeListHeader(int size)", "testcase": false, "constructor": false}, {"identifier": "encodeLongElementHeader", "parameters": "(int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeLongElementHeader(int length)", "full_signature": "public static byte[] encodeLongElementHeader(int length)", "class_method_signature": "RLP.encodeLongElementHeader(int length)", "testcase": false, "constructor": false}, {"identifier": "encodeSet", "parameters": "(Set<ByteArrayWrapper> data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeSet(Set<ByteArrayWrapper> data)", "full_signature": "public static byte[] encodeSet(Set<ByteArrayWrapper> data)", "class_method_signature": "RLP.encodeSet(Set<ByteArrayWrapper> data)", "testcase": false, "constructor": false}, {"identifier": "wrapList", "parameters": "(byte[] ... data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] wrapList(byte[] ... data)", "full_signature": "public static byte[] wrapList(byte[] ... data)", "class_method_signature": "RLP.wrapList(byte[] ... data)", "testcase": false, "constructor": false}, {"identifier": "encodeList", "parameters": "(byte[]... elements)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeList(byte[]... elements)", "full_signature": "public static byte[] encodeList(byte[]... elements)", "class_method_signature": "RLP.encodeList(byte[]... elements)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(Object input)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] toBytes(Object input)", "full_signature": "private static byte[] toBytes(Object input)", "class_method_signature": "RLP.toBytes(Object input)", "testcase": false, "constructor": false}, {"identifier": "decodeItemBytes", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] decodeItemBytes(byte[] data, int index)", "full_signature": "private static byte[] decodeItemBytes(byte[] data, int index)", "class_method_signature": "RLP.decodeItemBytes(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "calculateItemLength", "parameters": "(byte[] data, int index)", "modifiers": "private static", "return": "int", "signature": "int calculateItemLength(byte[] data, int index)", "full_signature": "private static int calculateItemLength(byte[] data, int index)", "class_method_signature": "RLP.calculateItemLength(byte[] data, int index)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/RLP.java"}, "focal_method": {"identifier": "encodeList", "parameters": "(byte[]... elements)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] encodeList(byte[]... elements) {\n\n        if (elements == null) {\n            return new byte[]{(byte) OFFSET_SHORT_LIST};\n        }\n\n        int totalLength = 0;\n        for (byte[] element1 : elements) {\n            totalLength += element1.length;\n        }\n\n        byte[] data;\n        int copyPos;\n        if (totalLength < SIZE_THRESHOLD) {\n\n            data = new byte[1 + totalLength];\n            data[0] = (byte) (OFFSET_SHORT_LIST + totalLength);\n            copyPos = 1;\n        } else {\n            // length of length = BX\n            // prefix = [BX, [length]]\n            int tmpLength = totalLength;\n            byte byteNum = 0;\n            while (tmpLength != 0) {\n                ++byteNum;\n                tmpLength = tmpLength >> 8;\n            }\n            tmpLength = totalLength;\n            byte[] lenBytes = new byte[byteNum];\n            for (int i = 0; i < byteNum; ++i) {\n                lenBytes[byteNum - 1 - i] = (byte) ((tmpLength >> (8 * i)) & 0xFF);\n            }\n            // first byte = F7 + bytes.length\n            data = new byte[1 + lenBytes.length + totalLength];\n            data[0] = (byte) (OFFSET_LONG_LIST + byteNum);\n            System.arraycopy(lenBytes, 0, data, 1, lenBytes.length);\n\n            copyPos = lenBytes.length + 1;\n        }\n        for (byte[] element : elements) {\n            System.arraycopy(element, 0, data, copyPos, element.length);\n            copyPos += element.length;\n        }\n        return data;\n    }", "signature": "byte[] encodeList(byte[]... elements)", "full_signature": "public static byte[] encodeList(byte[]... elements)", "class_method_signature": "RLP.encodeList(byte[]... elements)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "arraycopy"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}