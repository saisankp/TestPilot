{"test_class": {"identifier": "PredicateBinaryExceptionClassifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/retry/PredicateBinaryExceptionClassifierTest.java"}, "test_case": {"identifier": "testClassify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClassify() {\n        Predicate predicate = Mockito.mock(Predicate.class);\n        PredicateBinaryExceptionClassifier classifier = new PredicateBinaryExceptionClassifier(predicate);\n        classifier.setPredicate(predicate);\n        Mockito.when(predicate.apply(Mockito.any(Throwable.class))).thenReturn(false);\n        Assert.assertSame(predicate, classifier.getPredicate());\n        Assert.assertFalse(classifier.classify(new RuntimeException()));\n        Mockito.verify(predicate, Mockito.times(1)).apply(Mockito.any(Throwable.class));\n    }", "signature": "void testClassify()", "full_signature": "@Test public void testClassify()", "class_method_signature": "PredicateBinaryExceptionClassifierTest.testClassify()", "testcase": true, "constructor": false, "invocations": ["mock", "setPredicate", "thenReturn", "when", "apply", "any", "assertSame", "getPredicate", "assertFalse", "classify", "apply", "verify", "times", "any"]}, "focal_class": {"identifier": "PredicateBinaryExceptionClassifier", "superclass": "extends ClassifierSupport<Throwable, Boolean>", "interfaces": "", "fields": [{"original_string": "private Predicate<Throwable> predicate;", "modifier": "private", "type": "Predicate<Throwable>", "declarator": "predicate", "var_name": "predicate"}], "methods": [{"identifier": "PredicateBinaryExceptionClassifier", "parameters": "(Predicate<Throwable> predicate)", "modifiers": "public", "return": "", "signature": " PredicateBinaryExceptionClassifier(Predicate<Throwable> predicate)", "full_signature": "public  PredicateBinaryExceptionClassifier(Predicate<Throwable> predicate)", "class_method_signature": "PredicateBinaryExceptionClassifier.PredicateBinaryExceptionClassifier(Predicate<Throwable> predicate)", "testcase": false, "constructor": true}, {"identifier": "getPredicate", "parameters": "()", "modifiers": "public", "return": "Predicate<Throwable>", "signature": "Predicate<Throwable> getPredicate()", "full_signature": "public Predicate<Throwable> getPredicate()", "class_method_signature": "PredicateBinaryExceptionClassifier.getPredicate()", "testcase": false, "constructor": false}, {"identifier": "setPredicate", "parameters": "(Predicate<Throwable> predicate)", "modifiers": "public", "return": "void", "signature": "void setPredicate(Predicate<Throwable> predicate)", "full_signature": "public void setPredicate(Predicate<Throwable> predicate)", "class_method_signature": "PredicateBinaryExceptionClassifier.setPredicate(Predicate<Throwable> predicate)", "testcase": false, "constructor": false}, {"identifier": "classify", "parameters": "(Throwable classifiable)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean classify(Throwable classifiable)", "full_signature": "@Override public Boolean classify(Throwable classifiable)", "class_method_signature": "PredicateBinaryExceptionClassifier.classify(Throwable classifiable)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/retry/PredicateBinaryExceptionClassifier.java"}, "focal_method": {"identifier": "classify", "parameters": "(Throwable classifiable)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean classify(Throwable classifiable) {\n        return predicate.apply(classifiable);\n    }", "signature": "Boolean classify(Throwable classifiable)", "full_signature": "@Override public Boolean classify(Throwable classifiable)", "class_method_signature": "PredicateBinaryExceptionClassifier.classify(Throwable classifiable)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}