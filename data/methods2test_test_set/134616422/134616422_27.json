{"test_class": {"identifier": "ConjureParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "conjure-core/src/test/java/com/palantir/conjure/parser/ConjureParserTest.java"}, "test_case": {"identifier": "testConjureRevisitedImports", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConjureRevisitedImports() throws IOException {\n        // create a hierarchy of dependencies such that a significant amount of files is visited repeatedly\n        // each file depends on all files from the previous level\n        List<String> inners = ImmutableList.of(\n                \"innerOne\",\n                \"innerTwo\",\n                \"innerThree\",\n                \"innerFour\",\n                \"innerFive\",\n                \"innerSix\",\n                \"innerSeven\",\n                \"innerEight\",\n                \"innerNine\",\n                \"innerTen\");\n        List<String> mid = ImmutableList.of(\"midOne\", \"midTwo\", \"midThree\", \"midFour\", \"midFive\");\n        List<String> top = ImmutableList.of(\"topOne\", \"topTwo\", \"topThree\", \"topFour\", \"topFive\", \"topSix\");\n\n        String root = \"root\";\n\n        generateFiles(inners, ImmutableList.of());\n        generateFiles(mid, inners);\n        generateFiles(top, mid);\n        generateFiles(ImmutableList.of(root), top);\n\n        ConjureSourceFile result = ConjureParser.parse(\n                temporaryFolder.getRoot().toPath().resolve(root + \".yml\").toFile());\n        assertThat(result.types().conjureImports()).isNotEmpty();\n    }", "signature": "void testConjureRevisitedImports()", "full_signature": "@Test public void testConjureRevisitedImports()", "class_method_signature": "ConjureParserTest.testConjureRevisitedImports()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "generateFiles", "of", "generateFiles", "generateFiles", "generateFiles", "of", "parse", "toFile", "resolve", "toPath", "getRoot", "isNotEmpty", "assertThat", "conjureImports", "types"]}, "focal_class": {"identifier": "ConjureParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = createConjureParserObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = createConjureParserObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "ConjureParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConjureParser()", "full_signature": "private  ConjureParser()", "class_method_signature": "ConjureParser.ConjureParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "ConjureSourceFile", "signature": "ConjureSourceFile parse(File file)", "full_signature": "public static ConjureSourceFile parse(File file)", "class_method_signature": "ConjureParser.parse(File file)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(File file)", "modifiers": "public static", "return": "AnnotatedConjureSourceFile", "signature": "AnnotatedConjureSourceFile parseAnnotated(File file)", "full_signature": "public static AnnotatedConjureSourceFile parseAnnotated(File file)", "class_method_signature": "ConjureParser.parseAnnotated(File file)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(Collection<File> files)", "modifiers": "public static", "return": "List<AnnotatedConjureSourceFile>", "signature": "List<AnnotatedConjureSourceFile> parseAnnotated(Collection<File> files)", "full_signature": "public static List<AnnotatedConjureSourceFile> parseAnnotated(Collection<File> files)", "class_method_signature": "ConjureParser.parseAnnotated(Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotated", "parameters": "(RecursiveParser parser, File file)", "modifiers": "private static", "return": "AnnotatedConjureSourceFile", "signature": "AnnotatedConjureSourceFile parseAnnotated(RecursiveParser parser, File file)", "full_signature": "private static AnnotatedConjureSourceFile parseAnnotated(RecursiveParser parser, File file)", "class_method_signature": "ConjureParser.parseAnnotated(RecursiveParser parser, File file)", "testcase": false, "constructor": false}, {"identifier": "createConjureParserObjectMapper", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "ObjectMapper", "signature": "ObjectMapper createConjureParserObjectMapper()", "full_signature": "@VisibleForTesting static ObjectMapper createConjureParserObjectMapper()", "class_method_signature": "ConjureParser.createConjureParserObjectMapper()", "testcase": false, "constructor": false}], "file": "conjure-core/src/main/java/com/palantir/conjure/parser/ConjureParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(File file)", "modifiers": "public static", "return": "ConjureSourceFile", "body": "public static ConjureSourceFile parse(File file) {\n        RecursiveParser parser = new RecursiveParser();\n        return parser.parse(file);\n    }", "signature": "ConjureSourceFile parse(File file)", "full_signature": "public static ConjureSourceFile parse(File file)", "class_method_signature": "ConjureParser.parse(File file)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}