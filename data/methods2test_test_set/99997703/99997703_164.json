{"test_class": {"identifier": "ConstantJerkTraversalSectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 1e-5;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 1e-5", "var_name": "EPSILON"}, {"original_string": "private final double DURATION = 1;", "modifier": "private final", "type": "double", "declarator": "DURATION = 1", "var_name": "DURATION"}, {"original_string": "private final double LOW_SPEED = 0;", "modifier": "private final", "type": "double", "declarator": "LOW_SPEED = 0", "var_name": "LOW_SPEED"}, {"original_string": "private final double HIGH_SPEED = 1.5;", "modifier": "private final", "type": "double", "declarator": "HIGH_SPEED = 1.5", "var_name": "HIGH_SPEED"}, {"original_string": "private final double LOW_ACCELERATION = 1;", "modifier": "private final", "type": "double", "declarator": "LOW_ACCELERATION = 1", "var_name": "LOW_ACCELERATION"}, {"original_string": "private final double HIGH_ACCELERATION = 2;", "modifier": "private final", "type": "double", "declarator": "HIGH_ACCELERATION = 2", "var_name": "HIGH_ACCELERATION"}, {"original_string": "private final double JERK = 1;", "modifier": "private final", "type": "double", "declarator": "JERK = 1", "var_name": "JERK"}, {"original_string": "private final double JERK_UP_DISTANCE = 2.0/3.0;", "modifier": "private final", "type": "double", "declarator": "JERK_UP_DISTANCE = 2.0/3.0", "var_name": "JERK_UP_DISTANCE"}, {"original_string": "private final double JERK_DOWN_DISTANCE = 5.0/6.0;", "modifier": "private final", "type": "double", "declarator": "JERK_DOWN_DISTANCE = 5.0/6.0", "var_name": "JERK_DOWN_DISTANCE"}, {"original_string": "private final ConstantJerkTraversalSection jerkUpAcceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_UP_DISTANCE, LOW_SPEED, HIGH_SPEED, LOW_ACCELERATION, HIGH_ACCELERATION, JERK);", "modifier": "private final", "type": "ConstantJerkTraversalSection", "declarator": "jerkUpAcceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_UP_DISTANCE, LOW_SPEED, HIGH_SPEED, LOW_ACCELERATION, HIGH_ACCELERATION, JERK)", "var_name": "jerkUpAcceleratingSection"}, {"original_string": "private final ConstantJerkTraversalSection jerkDownAcceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_DOWN_DISTANCE, LOW_SPEED, HIGH_SPEED, HIGH_ACCELERATION, LOW_ACCELERATION, -JERK);", "modifier": "private final", "type": "ConstantJerkTraversalSection", "declarator": "jerkDownAcceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_DOWN_DISTANCE, LOW_SPEED, HIGH_SPEED, HIGH_ACCELERATION, LOW_ACCELERATION, -JERK)", "var_name": "jerkDownAcceleratingSection"}, {"original_string": "private final ConstantJerkTraversalSection jerkUpDeceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_UP_DISTANCE, HIGH_SPEED, LOW_SPEED, -HIGH_ACCELERATION, -LOW_ACCELERATION, JERK);", "modifier": "private final", "type": "ConstantJerkTraversalSection", "declarator": "jerkUpDeceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_UP_DISTANCE, HIGH_SPEED, LOW_SPEED, -HIGH_ACCELERATION, -LOW_ACCELERATION, JERK)", "var_name": "jerkUpDeceleratingSection"}, {"original_string": "private final ConstantJerkTraversalSection jerkDownDeceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_DOWN_DISTANCE, HIGH_SPEED, LOW_SPEED, -LOW_ACCELERATION, -HIGH_ACCELERATION, -JERK);", "modifier": "private final", "type": "ConstantJerkTraversalSection", "declarator": "jerkDownDeceleratingSection = new ConstantJerkTraversalSection(DURATION, JERK_DOWN_DISTANCE, HIGH_SPEED, LOW_SPEED, -LOW_ACCELERATION, -HIGH_ACCELERATION, -JERK)", "var_name": "jerkDownDeceleratingSection"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/ConstantJerkTraversalSectionTest.java"}, "test_case": {"identifier": "testGetDuration_returnsFullDuration", "parameters": "()", "modifiers": "@Test @DisplayName(\"getDuration() method\")", "return": "void", "body": "@Test\n    @DisplayName(\"getDuration() method\")\n    void testGetDuration_returnsFullDuration() {\n        assertThat(jerkUpAcceleratingSection.getDuration()).isEqualTo(DURATION);\n        assertThat(jerkDownAcceleratingSection.getDuration()).isEqualTo(DURATION);\n        assertThat(jerkUpDeceleratingSection.getDuration()).isEqualTo(DURATION);\n        assertThat(jerkDownDeceleratingSection.getDuration()).isEqualTo(DURATION);\n    }", "signature": "void testGetDuration_returnsFullDuration()", "full_signature": "@Test @DisplayName(\"getDuration() method\") void testGetDuration_returnsFullDuration()", "class_method_signature": "ConstantJerkTraversalSectionTest.testGetDuration_returnsFullDuration()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getDuration", "isEqualTo", "assertThat", "getDuration", "isEqualTo", "assertThat", "getDuration", "isEqualTo", "assertThat", "getDuration"]}, "focal_class": {"identifier": "ConstantJerkTraversalSection", "superclass": "", "interfaces": "implements TraversalSection", "fields": [{"original_string": "private static final double ROUNDING_ERROR_FRACTION = 1E-9;", "modifier": "private static final", "type": "double", "declarator": "ROUNDING_ERROR_FRACTION = 1E-9", "var_name": "ROUNDING_ERROR_FRACTION"}, {"original_string": "final double duration;", "modifier": "final", "type": "double", "declarator": "duration", "var_name": "duration"}, {"original_string": "final double distance;", "modifier": "final", "type": "double", "declarator": "distance", "var_name": "distance"}, {"original_string": "final double initialSpeed;", "modifier": "final", "type": "double", "declarator": "initialSpeed", "var_name": "initialSpeed"}, {"original_string": "final double finalSpeed;", "modifier": "final", "type": "double", "declarator": "finalSpeed", "var_name": "finalSpeed"}, {"original_string": "final double initialAcceleration;", "modifier": "final", "type": "double", "declarator": "initialAcceleration", "var_name": "initialAcceleration"}, {"original_string": "final double finalAcceleration;", "modifier": "final", "type": "double", "declarator": "finalAcceleration", "var_name": "finalAcceleration"}, {"original_string": "final double jerk;", "modifier": "final", "type": "double", "declarator": "jerk", "var_name": "jerk"}], "methods": [{"identifier": "ConstantJerkTraversalSection", "parameters": "(\n            double duration,\n            double distance,\n            double initialSpeed,\n            double finalSpeed,\n            double initialAcceleration,\n            double finalAcceleration,\n            double jerk)", "modifiers": "", "return": "", "signature": " ConstantJerkTraversalSection(\n            double duration,\n            double distance,\n            double initialSpeed,\n            double finalSpeed,\n            double initialAcceleration,\n            double finalAcceleration,\n            double jerk)", "full_signature": "  ConstantJerkTraversalSection(\n            double duration,\n            double distance,\n            double initialSpeed,\n            double finalSpeed,\n            double initialAcceleration,\n            double finalAcceleration,\n            double jerk)", "class_method_signature": "ConstantJerkTraversalSection.ConstantJerkTraversalSection(\n            double duration,\n            double distance,\n            double initialSpeed,\n            double finalSpeed,\n            double initialAcceleration,\n            double finalAcceleration,\n            double jerk)", "testcase": false, "constructor": true}, {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getDuration()", "full_signature": "@Override public double getDuration()", "class_method_signature": "ConstantJerkTraversalSection.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getTotalDistance", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getTotalDistance()", "full_signature": "@Override public double getTotalDistance()", "class_method_signature": "ConstantJerkTraversalSection.getTotalDistance()", "testcase": false, "constructor": false}, {"identifier": "getTimeAtDistance", "parameters": "(@Nonnegative double distance)", "modifiers": "@Override public", "return": "double", "signature": "double getTimeAtDistance(@Nonnegative double distance)", "full_signature": "@Override public double getTimeAtDistance(@Nonnegative double distance)", "class_method_signature": "ConstantJerkTraversalSection.getTimeAtDistance(@Nonnegative double distance)", "testcase": false, "constructor": false}, {"identifier": "getDistanceAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getDistanceAtTime(@Nonnegative double time)", "full_signature": "@Override public double getDistanceAtTime(@Nonnegative double time)", "class_method_signature": "ConstantJerkTraversalSection.getDistanceAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "getSpeedAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getSpeedAtTime(@Nonnegative double time)", "full_signature": "@Override public double getSpeedAtTime(@Nonnegative double time)", "class_method_signature": "ConstantJerkTraversalSection.getSpeedAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "getAccelerationAtTime", "parameters": "(@Nonnegative double time)", "modifiers": "@Override public", "return": "double", "signature": "double getAccelerationAtTime(@Nonnegative double time)", "full_signature": "@Override public double getAccelerationAtTime(@Nonnegative double time)", "class_method_signature": "ConstantJerkTraversalSection.getAccelerationAtTime(@Nonnegative double time)", "testcase": false, "constructor": false}, {"identifier": "isConstantAcceleration", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConstantAcceleration()", "full_signature": "@Override public boolean isConstantAcceleration()", "class_method_signature": "ConstantJerkTraversalSection.isConstantAcceleration()", "testcase": false, "constructor": false}, {"identifier": "isAccelerating", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAccelerating()", "full_signature": "@Override public boolean isAccelerating()", "class_method_signature": "ConstantJerkTraversalSection.isAccelerating()", "testcase": false, "constructor": false}, {"identifier": "isDecelerating", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDecelerating()", "full_signature": "@Override public boolean isDecelerating()", "class_method_signature": "ConstantJerkTraversalSection.isDecelerating()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConstantJerkTraversalSection.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ConstantJerkTraversalSection.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isEquals", "parameters": "(double thisValue, double thatValue)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEquals(double thisValue, double thatValue)", "full_signature": "private static boolean isEquals(double thisValue, double thatValue)", "class_method_signature": "ConstantJerkTraversalSection.isEquals(double thisValue, double thatValue)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ConstantJerkTraversalSection.hashCode()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/ConstantJerkTraversalSection.java"}, "focal_method": {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getDuration() {\n        return duration;\n    }", "signature": "double getDuration()", "full_signature": "@Override public double getDuration()", "class_method_signature": "ConstantJerkTraversalSection.getDuration()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}