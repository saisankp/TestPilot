{"test_class": {"identifier": "ReceiptsTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double PRICE_1 = 12.55d;", "modifier": "private static final", "type": "double", "declarator": "PRICE_1 = 12.55d", "var_name": "PRICE_1"}, {"original_string": "private static final String NAME_1 = \"Name1\";", "modifier": "private static final", "type": "String", "declarator": "NAME_1 = \"Name1\"", "var_name": "NAME_1"}, {"original_string": "private static final int TRIP_ID_1 = 96;", "modifier": "private static final", "type": "int", "declarator": "TRIP_ID_1 = 96", "var_name": "TRIP_ID_1"}, {"original_string": "private static final Date DATE_1 = new Date(1200000000000L);", "modifier": "private static final", "type": "Date", "declarator": "DATE_1 = new Date(1200000000000L)", "var_name": "DATE_1"}, {"original_string": "private static final UUID UUID_1 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "UUID_1 = UUID.randomUUID()", "var_name": "UUID_1"}, {"original_string": "private static final double PRICE_2 = 140d;", "modifier": "private static final", "type": "double", "declarator": "PRICE_2 = 140d", "var_name": "PRICE_2"}, {"original_string": "private static final String NAME_2 = \"Name2\";", "modifier": "private static final", "type": "String", "declarator": "NAME_2 = \"Name2\"", "var_name": "NAME_2"}, {"original_string": "private static final int TRIP_ID_2 = 97;", "modifier": "private static final", "type": "int", "declarator": "TRIP_ID_2 = 97", "var_name": "TRIP_ID_2"}, {"original_string": "public static final Date DATE_2 = new Date(1300000000000L);", "modifier": "public static final", "type": "Date", "declarator": "DATE_2 = new Date(1300000000000L)", "var_name": "DATE_2"}, {"original_string": "private static final UUID UUID_2 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "UUID_2 = UUID.randomUUID()", "var_name": "UUID_2"}, {"original_string": "private static final double PRICE_3 = 12.123;", "modifier": "private static final", "type": "double", "declarator": "PRICE_3 = 12.123", "var_name": "PRICE_3"}, {"original_string": "private static final String NAME_3 = \"Name3\";", "modifier": "private static final", "type": "String", "declarator": "NAME_3 = \"Name3\"", "var_name": "NAME_3"}, {"original_string": "private static final int TRIP_ID_3 = 98;", "modifier": "private static final", "type": "int", "declarator": "TRIP_ID_3 = 98", "var_name": "TRIP_ID_3"}, {"original_string": "public static final Date DATE_3 = new Date(1400000000000L);", "modifier": "public static final", "type": "Date", "declarator": "DATE_3 = new Date(1400000000000L)", "var_name": "DATE_3"}, {"original_string": "private static final UUID UUID_3 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "UUID_3 = UUID.randomUUID()", "var_name": "UUID_3"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "ReceiptsTable mReceiptsTable;", "modifier": "", "type": "ReceiptsTable", "declarator": "mReceiptsTable", "var_name": "mReceiptsTable"}, {"original_string": "@Mock\n    SQLiteDatabase mSQLiteDatabase;", "modifier": "@Mock", "type": "SQLiteDatabase", "declarator": "mSQLiteDatabase", "var_name": "mSQLiteDatabase"}, {"original_string": "@Mock\n    TableDefaultsCustomizer mTableDefaultsCustomizer;", "modifier": "@Mock", "type": "TableDefaultsCustomizer", "declarator": "mTableDefaultsCustomizer", "var_name": "mTableDefaultsCustomizer"}, {"original_string": "@Mock\n    Table<Trip> mTripsTable;", "modifier": "@Mock", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "@Mock\n    Table<PaymentMethod> mPaymentMethodTable;", "modifier": "@Mock", "type": "Table<PaymentMethod>", "declarator": "mPaymentMethodTable", "var_name": "mPaymentMethodTable"}, {"original_string": "@Mock\n    Table<Category> mCategoryTable;", "modifier": "@Mock", "type": "Table<Category>", "declarator": "mCategoryTable", "var_name": "mCategoryTable"}, {"original_string": "@Mock\n    PersistenceManager mPersistenceManager;", "modifier": "@Mock", "type": "PersistenceManager", "declarator": "mPersistenceManager", "var_name": "mPersistenceManager"}, {"original_string": "@Mock\n    OrderingPreferencesManager orderingPreferencesManager;", "modifier": "@Mock", "type": "OrderingPreferencesManager", "declarator": "orderingPreferencesManager", "var_name": "orderingPreferencesManager"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    UserPreferenceManager mPreferences;", "modifier": "@Mock", "type": "UserPreferenceManager", "declarator": "mPreferences", "var_name": "mPreferences"}, {"original_string": "@Mock\n    Trip mTrip1;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip1", "var_name": "mTrip1"}, {"original_string": "@Mock\n    Trip mTrip2;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip2", "var_name": "mTrip2"}, {"original_string": "@Mock\n    Trip mTrip3;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip3", "var_name": "mTrip3"}, {"original_string": "@Mock\n    Category mCategory;", "modifier": "@Mock", "type": "Category", "declarator": "mCategory", "var_name": "mCategory"}, {"original_string": "@Mock\n    PaymentMethod mPaymentMethod;", "modifier": "@Mock", "type": "PaymentMethod", "declarator": "mPaymentMethod", "var_name": "mPaymentMethod"}, {"original_string": "@Captor\n    ArgumentCaptor<String> mSqlCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "mSqlCaptor", "var_name": "mSqlCaptor"}, {"original_string": "SQLiteOpenHelper mSQLiteOpenHelper;", "modifier": "", "type": "SQLiteOpenHelper", "declarator": "mSQLiteOpenHelper", "var_name": "mSQLiteOpenHelper"}, {"original_string": "Receipt mReceipt1;", "modifier": "", "type": "Receipt", "declarator": "mReceipt1", "var_name": "mReceipt1"}, {"original_string": "Receipt mReceipt2;", "modifier": "", "type": "Receipt", "declarator": "mReceipt2", "var_name": "mReceipt2"}, {"original_string": "ReceiptBuilderFactory mBuilder;", "modifier": "", "type": "ReceiptBuilderFactory", "declarator": "mBuilder", "var_name": "mBuilder"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/ReceiptsTableTest.java"}, "test_case": {"identifier": "onUpgradeFromV14", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onUpgradeFromV14() {\n        final int oldVersion = 14;\n        final int newVersion = DatabaseHelper.DATABASE_VERSION;\n\n        final TableDefaultsCustomizer customizer = mock(TableDefaultsCustomizer.class);\n        mReceiptsTable.onUpgrade(mSQLiteDatabase, oldVersion, newVersion, customizer);\n        verifyZeroInteractions(customizer);\n        verifyV1Upgrade(never());\n        verifyV3Upgrade(never());\n        verifyV4Upgrade(never());\n        verifyV7Upgrade(never());\n        verifyV11Upgrade(never());\n        verifyV12Upgrade(never());\n        verifyV13Upgrade(never());\n        verifyV14Upgrade(times(1));\n        verifyV15Upgrade(times(1));\n        verifyV18Upgrade(times(1));\n        verifyV19Upgrade(times(1));\n        verifyV20Upgrade(times(1));\n    }", "signature": "void onUpgradeFromV14()", "full_signature": "@Test public void onUpgradeFromV14()", "class_method_signature": "ReceiptsTableTest.onUpgradeFromV14()", "testcase": true, "constructor": false, "invocations": ["mock", "onUpgrade", "verifyZeroInteractions", "verifyV1Upgrade", "never", "verifyV3Upgrade", "never", "verifyV4Upgrade", "never", "verifyV7Upgrade", "never", "verifyV11Upgrade", "never", "verifyV12Upgrade", "never", "verifyV13Upgrade", "never", "verifyV14Upgrade", "times", "verifyV15Upgrade", "times", "verifyV18Upgrade", "times", "verifyV19Upgrade", "times", "verifyV20Upgrade", "times"]}, "focal_class": {"identifier": "ReceiptsTable", "superclass": "extends TripForeignKeyAbstractSqlTable<Receipt>", "interfaces": "", "fields": [{"original_string": "public static final String TABLE_NAME = \"receipts\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"receipts\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final String COLUMN_PATH = \"path\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PATH = \"path\"", "var_name": "COLUMN_PATH"}, {"original_string": "public static final String COLUMN_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME = \"name\"", "var_name": "COLUMN_NAME"}, {"original_string": "public static final String COLUMN_PARENT_TRIP_ID = \"parentKey\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PARENT_TRIP_ID = \"parentKey\"", "var_name": "COLUMN_PARENT_TRIP_ID"}, {"original_string": "public static final String COLUMN_CATEGORY_ID = \"categoryKey\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_CATEGORY_ID = \"categoryKey\"", "var_name": "COLUMN_CATEGORY_ID"}, {"original_string": "public static final String COLUMN_PRICE = \"price\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PRICE = \"price\"", "var_name": "COLUMN_PRICE"}, {"original_string": "public static final String COLUMN_TAX = \"tax\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TAX = \"tax\"", "var_name": "COLUMN_TAX"}, {"original_string": "public static final String COLUMN_TAX2 = \"tax2\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TAX2 = \"tax2\"", "var_name": "COLUMN_TAX2"}, {"original_string": "public static final String COLUMN_EXCHANGE_RATE = \"exchange_rate\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_EXCHANGE_RATE = \"exchange_rate\"", "var_name": "COLUMN_EXCHANGE_RATE"}, {"original_string": "public static final String COLUMN_DATE = \"rcpt_date\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DATE = \"rcpt_date\"", "var_name": "COLUMN_DATE"}, {"original_string": "public static final String COLUMN_TIMEZONE = \"timezone\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TIMEZONE = \"timezone\"", "var_name": "COLUMN_TIMEZONE"}, {"original_string": "public static final String COLUMN_COMMENT = \"comment\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COMMENT = \"comment\"", "var_name": "COLUMN_COMMENT"}, {"original_string": "public static final String COLUMN_REIMBURSABLE = \"expenseable\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_REIMBURSABLE = \"expenseable\"", "var_name": "COLUMN_REIMBURSABLE"}, {"original_string": "public static final String COLUMN_ISO4217 = \"isocode\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_ISO4217 = \"isocode\"", "var_name": "COLUMN_ISO4217"}, {"original_string": "public static final String COLUMN_PAYMENT_METHOD_ID = \"paymentMethodKey\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PAYMENT_METHOD_ID = \"paymentMethodKey\"", "var_name": "COLUMN_PAYMENT_METHOD_ID"}, {"original_string": "public static final String COLUMN_NOTFULLPAGEIMAGE = \"fullpageimage\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NOTFULLPAGEIMAGE = \"fullpageimage\"", "var_name": "COLUMN_NOTFULLPAGEIMAGE"}, {"original_string": "public static final String COLUMN_PROCESSING_STATUS = \"receipt_processing_status\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PROCESSING_STATUS = \"receipt_processing_status\"", "var_name": "COLUMN_PROCESSING_STATUS"}, {"original_string": "public static final String COLUMN_NAME_HIDDEN_AUTO_COMPLETE = \"name_hidden_auto_complete\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_HIDDEN_AUTO_COMPLETE = \"name_hidden_auto_complete\"", "var_name": "COLUMN_NAME_HIDDEN_AUTO_COMPLETE"}, {"original_string": "public static final String COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE = \"comment_hidden_auto_complete\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE = \"comment_hidden_auto_complete\"", "var_name": "COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE"}, {"original_string": "public static final String COLUMN_EXTRA_EDITTEXT_1 = \"extra_edittext_1\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_EXTRA_EDITTEXT_1 = \"extra_edittext_1\"", "var_name": "COLUMN_EXTRA_EDITTEXT_1"}, {"original_string": "public static final String COLUMN_EXTRA_EDITTEXT_2 = \"extra_edittext_2\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_EXTRA_EDITTEXT_2 = \"extra_edittext_2\"", "var_name": "COLUMN_EXTRA_EDITTEXT_2"}, {"original_string": "public static final String COLUMN_EXTRA_EDITTEXT_3 = \"extra_edittext_3\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_EXTRA_EDITTEXT_3 = \"extra_edittext_3\"", "var_name": "COLUMN_EXTRA_EDITTEXT_3"}, {"original_string": "@Deprecated\n    public static final String COLUMN_PARENT = \"parent\";", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "COLUMN_PARENT = \"parent\"", "var_name": "COLUMN_PARENT"}, {"original_string": "private final UserPreferenceManager userPreferenceManager;", "modifier": "private final", "type": "UserPreferenceManager", "declarator": "userPreferenceManager", "var_name": "userPreferenceManager"}], "methods": [{"identifier": "ReceiptsTable", "parameters": "(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                         @NonNull Table<Trip> tripsTable,\n                         @NonNull Table<PaymentMethod> paymentMethodTable,\n                         @NonNull Table<Category> categoryTable,\n                         @NonNull StorageManager storageManager,\n                         @NonNull UserPreferenceManager preferences,\n                         @NonNull OrderingPreferencesManager orderingPreferencesManager)", "modifiers": "public", "return": "", "signature": " ReceiptsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                         @NonNull Table<Trip> tripsTable,\n                         @NonNull Table<PaymentMethod> paymentMethodTable,\n                         @NonNull Table<Category> categoryTable,\n                         @NonNull StorageManager storageManager,\n                         @NonNull UserPreferenceManager preferences,\n                         @NonNull OrderingPreferencesManager orderingPreferencesManager)", "full_signature": "public  ReceiptsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                         @NonNull Table<Trip> tripsTable,\n                         @NonNull Table<PaymentMethod> paymentMethodTable,\n                         @NonNull Table<Category> categoryTable,\n                         @NonNull StorageManager storageManager,\n                         @NonNull UserPreferenceManager preferences,\n                         @NonNull OrderingPreferencesManager orderingPreferencesManager)", "class_method_signature": "ReceiptsTable.ReceiptsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                         @NonNull Table<Trip> tripsTable,\n                         @NonNull Table<PaymentMethod> paymentMethodTable,\n                         @NonNull Table<Category> categoryTable,\n                         @NonNull StorageManager storageManager,\n                         @NonNull UserPreferenceManager preferences,\n                         @NonNull OrderingPreferencesManager orderingPreferencesManager)", "testcase": false, "constructor": true}, {"identifier": "onCreate", "parameters": "(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "ReceiptsTable.onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "ReceiptsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "moveDataToCopyTableAndRename", "parameters": "(@NonNull SQLiteDatabase db, String dataColumns)", "modifiers": "private", "return": "void", "signature": "void moveDataToCopyTableAndRename(@NonNull SQLiteDatabase db, String dataColumns)", "full_signature": "private void moveDataToCopyTableAndRename(@NonNull SQLiteDatabase db, String dataColumns)", "class_method_signature": "ReceiptsTable.moveDataToCopyTableAndRename(@NonNull SQLiteDatabase db, String dataColumns)", "testcase": false, "constructor": false}, {"identifier": "getTripFor", "parameters": "(@NonNull Receipt receipt)", "modifiers": "@NonNull @Override protected", "return": "Trip", "signature": "Trip getTripFor(@NonNull Receipt receipt)", "full_signature": "@NonNull @Override protected Trip getTripFor(@NonNull Receipt receipt)", "class_method_signature": "ReceiptsTable.getTripFor(@NonNull Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "deleteBlocking", "parameters": "(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override public synchronized", "return": "Optional<Receipt>", "signature": "Optional<Receipt> deleteBlocking(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override public synchronized Optional<Receipt> deleteBlocking(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "ReceiptsTable.deleteBlocking(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/ReceiptsTable.java"}, "focal_method": {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer) {\n        super.onUpgrade(db, oldVersion, newVersion, customizer);\n\n        if (oldVersion <= 1) { // Add mCurrency column to receipts table\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_ISO4217 + \" TEXT NOT NULL \" + \"DEFAULT \" + userPreferenceManager.get(UserPreference.General.DefaultCurrency);\n\n            Logger.debug(this, alterReceipts);\n\n            db.execSQL(alterReceipts);\n        }\n\n        if (oldVersion <= 3) { // Add extra_edittext columns\n            final String alterReceipts1 = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1 + \" TEXT\";\n            final String alterReceipts2 = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2 + \" TEXT\";\n            final String alterReceipts3 = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3 + \" TEXT\";\n\n            Logger.debug(this, alterReceipts1);\n            Logger.debug(this, alterReceipts2);\n            Logger.debug(this, alterReceipts3);\n\n            db.execSQL(alterReceipts1);\n            db.execSQL(alterReceipts2);\n            db.execSQL(alterReceipts3);\n        }\n\n        if (oldVersion <= 4) { // Change Mileage to Decimal instead of Integer\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_TAX + \" DECIMAL(10, 2) DEFAULT 0.00\";\n\n            Logger.debug(this, alterReceipts);\n\n            db.execSQL(alterReceipts);\n        }\n\n\n        if (oldVersion <= 6) { // Fix the database to replace absolute paths with relative ones\n\n            Cursor receiptsCursor = null;\n            try {\n                receiptsCursor = db.query(ReceiptsTable.TABLE_NAME, new String[]{ReceiptsTable.COLUMN_ID, ReceiptsTable.COLUMN_PARENT, ReceiptsTable.COLUMN_PATH}, null, null, null, null, null);\n                if (receiptsCursor != null && receiptsCursor.moveToFirst()) {\n                    final int idIdx = receiptsCursor.getColumnIndex(ReceiptsTable.COLUMN_ID);\n                    final int parentIdx = receiptsCursor.getColumnIndex(ReceiptsTable.COLUMN_PARENT);\n                    final int imgIdx = receiptsCursor.getColumnIndex(ReceiptsTable.COLUMN_PATH);\n                    do {\n                        final int id = receiptsCursor.getInt(idIdx);\n                        String absParentPath = receiptsCursor.getString(parentIdx);\n                        if (absParentPath.endsWith(File.separator)) {\n                            absParentPath = absParentPath.substring(0, absParentPath.length() - 1);\n                        }\n                        final String absImgPath = receiptsCursor.getString(imgIdx);\n                        final ContentValues receiptValues = new ContentValues(2);\n                        final String relParentPath = absParentPath.substring(absParentPath.lastIndexOf(File.separatorChar) + 1, absParentPath.length());\n                        receiptValues.put(ReceiptsTable.COLUMN_PARENT, relParentPath);\n                        Logger.debug(this, \"Updating Abs. Parent Path for Receipt{}: {} => {}\", id, absParentPath, relParentPath);\n\n                        if (!absImgPath.equalsIgnoreCase(DatabaseHelper.NO_DATA)) { // This can be either a path or NO_DATA\n                            final String relImgPath = absImgPath.substring(absImgPath.lastIndexOf(File.separatorChar) + 1, absImgPath.length());\n                            receiptValues.put(ReceiptsTable.COLUMN_PATH, relImgPath);\n                            Logger.debug(this, \"Updating Abs. Img Path for Receipt{}: {} => {}\", id, absImgPath, relImgPath);\n                        }\n                        if (db.update(ReceiptsTable.TABLE_NAME, receiptValues, ReceiptsTable.COLUMN_ID + \" = ?\", new String[]{Integer.toString(id)}) == 0) {\n                            Logger.error(this, \"Receipt Update Error Occurred\");\n                        }\n                    }\n                    while (receiptsCursor.moveToNext());\n                }\n            } finally {\n                if (receiptsCursor != null) {\n                    receiptsCursor.close();\n                }\n            }\n        }\n        if (oldVersion <= 7) { // Added a timezone column to the receipts table\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_TIMEZONE + \" TEXT\";\n\n            Logger.debug(this, alterReceipts);\n\n            db.execSQL(alterReceipts);\n        }\n        if (oldVersion <= 11) { // Added trips filters, payment methods, and mileage table\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_PAYMENT_METHOD_ID + \" INTEGER REFERENCES \" + PaymentMethodsTable.TABLE_NAME + \" ON DELETE NO ACTION\";\n\n            Logger.debug(this, alterReceipts);\n\n            db.execSQL(alterReceipts);\n        }\n        if (oldVersion <= 12) { //Added better distance tracking, cost center to the trips, and status to trips/receipts\n\n            final String alterReceiptsWithProcessingStatus = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_PROCESSING_STATUS + \" TEXT\";\n\n            Logger.debug(this, alterReceiptsWithProcessingStatus);\n\n            db.execSQL(alterReceiptsWithProcessingStatus);\n        }\n        if (oldVersion <= 13) {\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_EXCHANGE_RATE + \" DECIMAL(10, 10) DEFAULT -1.00\";\n            Logger.debug(this, alterReceipts);\n            db.execSQL(alterReceipts);\n        }\n        if (oldVersion <= 14) {\n            onUpgradeToAddSyncInformation(db, oldVersion, newVersion);\n        }\n        if (oldVersion <= 15) { // Changed Categories foreign key from category's Name to Id, added new custom_order_id column\n\n            final String OLD_COLUMN_CATEGORY = \"category\";\n\n            // adding category id as a foreign key\n            final String addCategoryIdColumn = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME +\n                    \" ADD \" + ReceiptsTable.COLUMN_CATEGORY_ID + \" INTEGER REFERENCES \" + CategoriesTable.TABLE_NAME + \" ON DELETE NO ACTION\";\n            Logger.debug(this, addCategoryIdColumn);\n            db.execSQL(addCategoryIdColumn);\n\n            final String fillCategoryId = String.format(\"UPDATE %s SET %s = ( SELECT %s FROM %s WHERE %s = %s LIMIT 1 )\",\n                    ReceiptsTable.TABLE_NAME, COLUMN_CATEGORY_ID, CategoriesTable.COLUMN_ID, CategoriesTable.TABLE_NAME,\n                    CategoriesTable.COLUMN_NAME, OLD_COLUMN_CATEGORY);\n            Logger.debug(this, fillCategoryId);\n            db.execSQL(fillCategoryId);\n\n            // removing category's name column\n            final String copyTable = \"CREATE TABLE \" + ReceiptsTable.TABLE_NAME + \"_copy\" + \" (\"\n                    + ReceiptsTable.COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + ReceiptsTable.COLUMN_PATH + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_PARENT + \" TEXT REFERENCES \" + TripsTable.TABLE_NAME + \" ON DELETE CASCADE, \"\n                    + ReceiptsTable.COLUMN_NAME + \" TEXT DEFAULT \\\"New Receipt\\\", \"\n                    + ReceiptsTable.COLUMN_CATEGORY_ID + \" INTEGER REFERENCES \" + CategoriesTable.TABLE_NAME + \" ON DELETE NO ACTION, \"\n                    + ReceiptsTable.COLUMN_DATE + \" DATE DEFAULT (DATE('now', 'localtime')), \"\n                    + ReceiptsTable.COLUMN_TIMEZONE + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_COMMENT + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_ISO4217 + \" TEXT NOT NULL, \"\n                    + ReceiptsTable.COLUMN_PRICE + \" DECIMAL(10, 2) DEFAULT 0.00, \"\n                    + ReceiptsTable.COLUMN_TAX + \" DECIMAL(10, 2) DEFAULT 0.00, \"\n                    + ReceiptsTable.COLUMN_EXCHANGE_RATE + \" DECIMAL(10, 10) DEFAULT -1.00, \"\n                    + ReceiptsTable.COLUMN_PAYMENT_METHOD_ID + \" INTEGER REFERENCES \" + PaymentMethodsTable.TABLE_NAME + \" ON DELETE NO ACTION, \"\n                    + ReceiptsTable.COLUMN_REIMBURSABLE + \" BOOLEAN DEFAULT 1, \"\n                    + ReceiptsTable.COLUMN_NOTFULLPAGEIMAGE + \" BOOLEAN DEFAULT 1, \"\n                    + ReceiptsTable.COLUMN_PROCESSING_STATUS + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1 + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2 + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3 + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_SYNC_ID + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME + \" DATE, \"\n                    + AbstractSqlTable.COLUMN_CUSTOM_ORDER_ID + \" INTEGER DEFAULT 0\"\n                    + \");\";\n            Logger.debug(this, copyTable);\n            db.execSQL(copyTable);\n\n            final String finalColumns = TextUtils.join(\", \", new String[]{\n                    ReceiptsTable.COLUMN_ID, ReceiptsTable.COLUMN_PATH, ReceiptsTable.COLUMN_PARENT,\n                    ReceiptsTable.COLUMN_NAME, ReceiptsTable.COLUMN_CATEGORY_ID, ReceiptsTable.COLUMN_DATE,\n                    ReceiptsTable.COLUMN_TIMEZONE, ReceiptsTable.COLUMN_COMMENT, ReceiptsTable.COLUMN_ISO4217,\n                    ReceiptsTable.COLUMN_PRICE, ReceiptsTable.COLUMN_TAX, ReceiptsTable.COLUMN_EXCHANGE_RATE,\n                    ReceiptsTable.COLUMN_PAYMENT_METHOD_ID, ReceiptsTable.COLUMN_REIMBURSABLE,\n                    ReceiptsTable.COLUMN_NOTFULLPAGEIMAGE, ReceiptsTable.COLUMN_PROCESSING_STATUS,\n                    ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1, ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2,\n                    ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3, AbstractSqlTable.COLUMN_DRIVE_SYNC_ID,\n                    AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED, AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION,\n                    AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME});\n\n            moveDataToCopyTableAndRename(db, finalColumns);\n\n        }\n        if (oldVersion <= 18) { // v18 => 19 Changed Trip foreign key from Name to Id, added UUID column\n\n            // adding parent trip id as a foreign key\n\n            final String addTripIdColumn = String.format(\"ALTER TABLE %s ADD %s INTEGER REFERENCES %s ON DELETE CASCADE\",\n                    TABLE_NAME, COLUMN_PARENT_TRIP_ID, TripsTable.TABLE_NAME);\n            Logger.debug(this, addTripIdColumn);\n            db.execSQL(addTripIdColumn);\n\n            final String fillTripId = String.format(\"UPDATE %s SET %s = ( SELECT %s FROM %s WHERE %s = %s LIMIT 1 )\",\n                    ReceiptsTable.TABLE_NAME, COLUMN_PARENT_TRIP_ID, TripsTable.COLUMN_ID, TripsTable.TABLE_NAME,\n                    TripsTable.COLUMN_NAME, COLUMN_PARENT);\n            Logger.debug(this, fillTripId);\n            db.execSQL(fillTripId);\n\n            // removing old COLUMN_PARENT column\n\n            final String finalColumns = TextUtils.join(\",\", new String[]{\n                    COLUMN_ID, COLUMN_PATH, COLUMN_PARENT_TRIP_ID, COLUMN_NAME, COLUMN_CATEGORY_ID, COLUMN_DATE,\n                    COLUMN_TIMEZONE, COLUMN_COMMENT, COLUMN_ISO4217, COLUMN_PRICE, COLUMN_TAX, COLUMN_EXCHANGE_RATE,\n                    COLUMN_PAYMENT_METHOD_ID, COLUMN_REIMBURSABLE, COLUMN_NOTFULLPAGEIMAGE, COLUMN_PROCESSING_STATUS,\n                    COLUMN_EXTRA_EDITTEXT_1, COLUMN_EXTRA_EDITTEXT_2, COLUMN_EXTRA_EDITTEXT_3,\n                    AbstractSqlTable.COLUMN_DRIVE_SYNC_ID, AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED,\n                    AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION, AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME});\n\n            final String copyTable = \"CREATE TABLE \" + ReceiptsTable.TABLE_NAME + \"_copy\" + \" (\"\n                    + ReceiptsTable.COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + ReceiptsTable.COLUMN_PATH + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_PARENT_TRIP_ID + \" INTEGER REFERENCES \" + TripsTable.TABLE_NAME + \" ON DELETE CASCADE, \"\n                    + ReceiptsTable.COLUMN_NAME + \" TEXT DEFAULT \\\"New Receipt\\\", \"\n                    + ReceiptsTable.COLUMN_CATEGORY_ID + \" INTEGER REFERENCES \" + CategoriesTable.TABLE_NAME + \" ON DELETE NO ACTION, \"\n                    + ReceiptsTable.COLUMN_DATE + \" DATE DEFAULT (DATE('now', 'localtime')), \"\n                    + ReceiptsTable.COLUMN_TIMEZONE + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_COMMENT + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_ISO4217 + \" TEXT NOT NULL, \"\n                    + ReceiptsTable.COLUMN_PRICE + \" DECIMAL(10, 2) DEFAULT 0.00, \"\n                    + ReceiptsTable.COLUMN_TAX + \" DECIMAL(10, 2) DEFAULT 0.00, \"\n                    + ReceiptsTable.COLUMN_EXCHANGE_RATE + \" DECIMAL(10, 10) DEFAULT -1.00, \"\n                    + ReceiptsTable.COLUMN_PAYMENT_METHOD_ID + \" INTEGER REFERENCES \" + PaymentMethodsTable.TABLE_NAME + \" ON DELETE NO ACTION, \"\n                    + ReceiptsTable.COLUMN_REIMBURSABLE + \" BOOLEAN DEFAULT 1, \"\n                    + ReceiptsTable.COLUMN_NOTFULLPAGEIMAGE + \" BOOLEAN DEFAULT 1, \"\n                    + ReceiptsTable.COLUMN_PROCESSING_STATUS + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1 + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2 + \" TEXT, \"\n                    + ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3 + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_SYNC_ID + \" TEXT, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION + \" BOOLEAN DEFAULT 0, \"\n                    + AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME + \" DATE, \"\n                    + AbstractSqlTable.COLUMN_CUSTOM_ORDER_ID + \" INTEGER DEFAULT 0\"\n                    + \");\";\n            Logger.debug(this, copyTable);\n            db.execSQL(copyTable);\n\n            moveDataToCopyTableAndRename(db, finalColumns);\n\n            // adding new UUID column\n            onUpgradeToAddUUID(db, oldVersion);\n        }\n\n        if (oldVersion <= 19) {\n            final String alterReceipts = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_NAME_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\";\n            final String alterReceipts2 = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\";\n\n            Logger.debug(this, alterReceipts);\n            Logger.debug(this, alterReceipts2);\n\n            db.execSQL(alterReceipts);\n            db.execSQL(alterReceipts2);\n        }\n\n        if (oldVersion <= 20) { // add Tax2 column\n            final String addTax2Column = \"ALTER TABLE \" + ReceiptsTable.TABLE_NAME + \" ADD \" + ReceiptsTable.COLUMN_TAX2 + \" DECIMAL(10, 2) DEFAULT 0.00\";\n\n            Logger.debug(this, addTax2Column);\n\n            db.execSQL(addTax2Column);\n        }\n\n    }", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "ReceiptsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false, "invocations": ["onUpgrade", "get", "debug", "execSQL", "debug", "debug", "debug", "execSQL", "execSQL", "execSQL", "debug", "execSQL", "query", "moveToFirst", "getColumnIndex", "getColumnIndex", "getColumnIndex", "getInt", "getString", "endsWith", "substring", "length", "getString", "substring", "lastIndexOf", "length", "put", "debug", "equalsIgnoreCase", "substring", "lastIndexOf", "length", "put", "debug", "update", "toString", "error", "moveToNext", "close", "debug", "execSQL", "debug", "execSQL", "debug", "execSQL", "debug", "execSQL", "onUpgradeToAddSyncInformation", "debug", "execSQL", "format", "debug", "execSQL", "debug", "execSQL", "join", "moveDataToCopyTableAndRename", "format", "debug", "execSQL", "format", "debug", "execSQL", "join", "debug", "execSQL", "moveDataToCopyTableAndRename", "onUpgradeToAddUUID", "debug", "debug", "execSQL", "execSQL", "debug", "execSQL"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}