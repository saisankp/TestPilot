{"test_class": {"identifier": "SchedulerAdapterTest", "superclass": "extends SchedulerTestBase", "interfaces": "", "fields": [{"original_string": "private static final String JAVALISTENER = \"javaListener\";", "modifier": "private static final", "type": "String", "declarator": "JAVALISTENER = \"javaListener\"", "var_name": "JAVALISTENER"}, {"original_string": "private static final String CORRELATIONID = \"correlationId\";", "modifier": "private static final", "type": "String", "declarator": "CORRELATIONID = \"correlationId\"", "var_name": "CORRELATIONID"}, {"original_string": "private static final String MESSAGE = \"message\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "private SchedulerAdapter schedulerAdapter;", "modifier": "private", "type": "SchedulerAdapter", "declarator": "schedulerAdapter", "var_name": "schedulerAdapter"}], "file": "core/src/test/java/nl/nn/adapterframework/scheduler/SchedulerAdapterTest.java"}, "test_case": {"identifier": "testGetJobGroupNamesWithJobsToXmlWithMocks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetJobGroupNamesWithJobsToXmlWithMocks() throws SchedulerException, ParseException {\n\t\tscheduleDummyTrigger(\"DummyJob\", \"DummyGroup A\");\n\t\tscheduleDummyTrigger(\"DummyJob\", \"DummyGroup B\");\n\n\t\tIbisManager ibisManager = mock(IbisManager.class);\n\t\twhen(ibisManager.getConfigurations()).thenReturn(new LinkedList<Configuration>());\n\n\t\tString result = schedulerAdapter.getJobGroupNamesWithJobsToXml(schedulerHelper.getScheduler(), ibisManager).toXML();\n\t\tassertTrue(result.contains(\"DummyGroup A\") && result.contains(\"DummyGroup B\"));\n\t}", "signature": "void testGetJobGroupNamesWithJobsToXmlWithMocks()", "full_signature": "@Test public void testGetJobGroupNamesWithJobsToXmlWithMocks()", "class_method_signature": "SchedulerAdapterTest.testGetJobGroupNamesWithJobsToXmlWithMocks()", "testcase": true, "constructor": false, "invocations": ["scheduleDummyTrigger", "scheduleDummyTrigger", "mock", "thenReturn", "when", "getConfigurations", "toXML", "getJobGroupNamesWithJobsToXml", "getScheduler", "assertTrue", "contains", "contains"]}, "focal_class": {"identifier": "SchedulerAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Logger log=LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log=LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private DecimalFormat tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME);", "modifier": "private", "type": "DecimalFormat", "declarator": "tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME)", "var_name": "tf"}, {"original_string": "private DecimalFormat pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC);", "modifier": "private", "type": "DecimalFormat", "declarator": "pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC)", "var_name": "pf"}], "methods": [{"identifier": "getJobGroupNamesWithJobsToXml", "parameters": "(Scheduler theScheduler, IbisManager ibisManager)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "full_signature": "public XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "class_method_signature": "SchedulerAdapter.getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "testcase": false, "constructor": false}, {"identifier": "getJobTriggers", "parameters": "(List<? extends Trigger> triggers)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "full_signature": "public XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "class_method_signature": "SchedulerAdapter.getJobTriggers(List<? extends Trigger> triggers)", "testcase": false, "constructor": false}, {"identifier": "getJobMessages", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobMessages(JobDef jobdef)", "full_signature": "public XmlBuilder getJobMessages(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobMessages(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getJobRunStatistics", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobRunStatistics(JobDef jobdef)", "full_signature": "public XmlBuilder getJobRunStatistics(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobRunStatistics(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerCalendarNamesToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerMetaDataToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerMetaDataToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "jobDataMapToXmlBuilder", "parameters": "(JobDataMap jd)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "full_signature": "public XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "class_method_signature": "SchedulerAdapter.jobDataMapToXmlBuilder(JobDataMap jd)", "testcase": false, "constructor": false}, {"identifier": "jobDetailToXmlBuilder", "parameters": "(JobDetail jobDetail)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "full_signature": "public XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "class_method_signature": "SchedulerAdapter.jobDetailToXmlBuilder(JobDetail jobDetail)", "testcase": false, "constructor": false}, {"identifier": "triggerToXmlBuilder", "parameters": "(Trigger trigger)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder triggerToXmlBuilder(Trigger trigger)", "full_signature": "public XmlBuilder triggerToXmlBuilder(Trigger trigger)", "class_method_signature": "SchedulerAdapter.triggerToXmlBuilder(Trigger trigger)", "testcase": false, "constructor": false}, {"identifier": "convertDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String convertDate(Date date)", "full_signature": "private String convertDate(Date date)", "class_method_signature": "SchedulerAdapter.convertDate(Date date)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/scheduler/SchedulerAdapter.java"}, "focal_method": {"identifier": "getJobGroupNamesWithJobsToXml", "parameters": "(Scheduler theScheduler, IbisManager ibisManager)", "modifiers": "public", "return": "XmlBuilder", "body": "public XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager) {\n\t\tXmlBuilder xbRoot = new XmlBuilder(\"jobGroups\");\n\n\t\ttry {\n\t\t\t// process groups\n\t\t\tList<String> jgnames = theScheduler.getJobGroupNames();\n\n\t\t\tfor (int i = 0; i < jgnames.size(); i++) {\n\t\t\t\tXmlBuilder el = new XmlBuilder(\"jobGroup\");\n\t\t\t\tString jobGroupName = jgnames.get(i);\n\t\t\t\tel.addAttribute(\"name\", jobGroupName);\n\n\t\t\t\t// process jobs within group\n\t\t\t\tXmlBuilder jb = new XmlBuilder(\"jobs\");\n\t\t\t\tSet<JobKey> jobKeys = theScheduler.getJobKeys(GroupMatcher.jobGroupEquals(jobGroupName));\n\n\t\t\t\tfor (JobKey jobKey : jobKeys) {\n\t\t\t\t\tXmlBuilder jn = new XmlBuilder(\"job\");\n\t\t\t\t\tString jobName = jobKey.getName();\n\t\t\t\t\tjn.addAttribute(\"name\", jobName);\n\n\t\t\t\t\t// details for job\n\t\t\t\t\tJobDetail jobDetail = theScheduler.getJobDetail(jobKey);\n\t\t\t\t\tXmlBuilder jd = jobDetailToXmlBuilder(jobDetail);\n\t\t\t\t\tjn.addSubElement(jd);\n\n\t\t\t\t\t// get the triggers for this job\n\t\t\t\t\tList<? extends Trigger> triggers = theScheduler.getTriggersOfJob(jobKey);\n\t\t\t\t\tXmlBuilder tr = getJobTriggers(triggers);\n\t\t\t\t\tjn.addSubElement(tr);\n\n\n\t\t\t\t\tJobDataMap jobDataMap = jobDetail.getJobDataMap();\n\t\t\t\t\tXmlBuilder datamap = jobDataMapToXmlBuilder(jobDataMap);\n\t\t\t\t\tjn.addSubElement(datamap);\n\t\t\t\t\tjb.addSubElement(jn);\n\n\t\t\t\t\tJobDef jobDef = null;\n\t\t\t\t\tif(ibisManager != null) {\n\t\t\t\t\t\tfor (Configuration configuration : ibisManager.getConfigurations()) {\n\t\t\t\t\t\t\tjobDef = configuration.getScheduledJob(jobName);\n\t\t\t\t\t\t\tif (jobDef != null) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tXmlBuilder ms = getJobMessages(jobDef);\n\t\t\t\t\tjn.addSubElement(ms);\n\t\t\t\t\tXmlBuilder jrs= getJobRunStatistics(jobDef);\n\t\t\t\t\tjn.addSubElement(jrs);\n\t\t\t\t}\n\t\t\t\tel.addSubElement(jb);\n\t\t\t\txbRoot.addSubElement(el);\n\t\t\t}\n\t\t} catch (SchedulerException se) {\n\t\t\tlog.error(se);\n\t\t}\n\n\t\treturn xbRoot;\n\t}", "signature": "XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "full_signature": "public XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "class_method_signature": "SchedulerAdapter.getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "testcase": false, "constructor": false, "invocations": ["getJobGroupNames", "size", "get", "addAttribute", "getJobKeys", "jobGroupEquals", "getName", "addAttribute", "getJobDetail", "jobDetailToXmlBuilder", "addSubElement", "getTriggersOfJob", "getJobTriggers", "addSubElement", "getJobDataMap", "jobDataMapToXmlBuilder", "addSubElement", "addSubElement", "getConfigurations", "getScheduledJob", "getJobMessages", "addSubElement", "getJobRunStatistics", "addSubElement", "addSubElement", "addSubElement", "error"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}