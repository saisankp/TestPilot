{"test_class": {"identifier": "OrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestObject object1;", "modifier": "private", "type": "TestObject", "declarator": "object1", "var_name": "object1"}, {"original_string": "private TestObject object2;", "modifier": "private", "type": "TestObject", "declarator": "object2", "var_name": "object2"}, {"original_string": "private Property valueProperty;", "modifier": "private", "type": "Property", "declarator": "valueProperty", "var_name": "valueProperty"}, {"original_string": "private Order orderAsc;", "modifier": "private", "type": "Order", "declarator": "orderAsc", "var_name": "orderAsc"}, {"original_string": "private Order orderDesc;", "modifier": "private", "type": "Order", "declarator": "orderDesc", "var_name": "orderDesc"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/query/OrderTest.java"}, "test_case": {"identifier": "rightNullAsc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rightNullAsc()\n    {\n        object1.setValue( \"Test\" );\n        Assert.assertEquals( -1, orderAsc.compare( object1, object2 ) );\n    }", "signature": "void rightNullAsc()", "full_signature": "@Test public void rightNullAsc()", "class_method_signature": "OrderTest.rightNullAsc()", "testcase": true, "constructor": false, "invocations": ["setValue", "assertEquals", "compare"]}, "focal_class": {"identifier": "Order", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Direction direction;", "modifier": "private", "type": "Direction", "declarator": "direction", "var_name": "direction"}, {"original_string": "private boolean ignoreCase;", "modifier": "private", "type": "boolean", "declarator": "ignoreCase", "var_name": "ignoreCase"}, {"original_string": "private Property property;", "modifier": "private", "type": "Property", "declarator": "property", "var_name": "property"}], "methods": [{"identifier": "Order", "parameters": "( Property property, Direction direction )", "modifiers": "public", "return": "", "signature": " Order( Property property, Direction direction )", "full_signature": "public  Order( Property property, Direction direction )", "class_method_signature": "Order.Order( Property property, Direction direction )", "testcase": false, "constructor": true}, {"identifier": "ignoreCase", "parameters": "()", "modifiers": "public", "return": "Order", "signature": "Order ignoreCase()", "full_signature": "public Order ignoreCase()", "class_method_signature": "Order.ignoreCase()", "testcase": false, "constructor": false}, {"identifier": "isAscending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAscending()", "full_signature": "public boolean isAscending()", "class_method_signature": "Order.isAscending()", "testcase": false, "constructor": false}, {"identifier": "isIgnoreCase", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreCase()", "full_signature": "public boolean isIgnoreCase()", "class_method_signature": "Order.isIgnoreCase()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "()", "modifiers": "public", "return": "Property", "signature": "Property getProperty()", "full_signature": "public Property getProperty()", "class_method_signature": "Order.getProperty()", "testcase": false, "constructor": false}, {"identifier": "isPersisted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPersisted()", "full_signature": "public boolean isPersisted()", "class_method_signature": "Order.isPersisted()", "testcase": false, "constructor": false}, {"identifier": "isNonPersisted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNonPersisted()", "full_signature": "public boolean isNonPersisted()", "class_method_signature": "Order.isNonPersisted()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( Object lside, Object rside )", "modifiers": "public", "return": "int", "signature": "int compare( Object lside, Object rside )", "full_signature": "public int compare( Object lside, Object rside )", "class_method_signature": "Order.compare( Object lside, Object rside )", "testcase": false, "constructor": false}, {"identifier": "asc", "parameters": "( Property property )", "modifiers": "public static", "return": "Order", "signature": "Order asc( Property property )", "full_signature": "public static Order asc( Property property )", "class_method_signature": "Order.asc( Property property )", "testcase": false, "constructor": false}, {"identifier": "iasc", "parameters": "( Property property )", "modifiers": "public static", "return": "Order", "signature": "Order iasc( Property property )", "full_signature": "public static Order iasc( Property property )", "class_method_signature": "Order.iasc( Property property )", "testcase": false, "constructor": false}, {"identifier": "desc", "parameters": "( Property property )", "modifiers": "public static", "return": "Order", "signature": "Order desc( Property property )", "full_signature": "public static Order desc( Property property )", "class_method_signature": "Order.desc( Property property )", "testcase": false, "constructor": false}, {"identifier": "idesc", "parameters": "( Property property )", "modifiers": "public static", "return": "Order", "signature": "Order idesc( Property property )", "full_signature": "public static Order idesc( Property property )", "class_method_signature": "Order.idesc( Property property )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( String direction, Property property )", "modifiers": "public static", "return": "Order", "signature": "Order from( String direction, Property property )", "full_signature": "public static Order from( String direction, Property property )", "class_method_signature": "Order.from( String direction, Property property )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Order.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "Order.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "toOrderString", "parameters": "()", "modifiers": "@Nonnull public", "return": "String", "signature": "String toOrderString()", "full_signature": "@Nonnull public String toOrderString()", "class_method_signature": "Order.toOrderString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Order.toString()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/query/Order.java"}, "focal_method": {"identifier": "compare", "parameters": "( Object lside, Object rside )", "modifiers": "public", "return": "int", "body": "public int compare( Object lside, Object rside )\n    {\n        Object o1 = ReflectionUtils.invokeMethod( lside, property.getGetterMethod() );\n        Object o2 = ReflectionUtils.invokeMethod( rside, property.getGetterMethod() );\n\n        if ( o1 == o2 )\n        {\n            return 0;\n        }\n\n        // for null values use the same order like PostgreSQL in order to have same effect like DB ordering\n        // (NULLs are greater than other values)\n        if ( o1 == null || o2 == null )\n        {\n            if ( o1 == null )\n            {\n                return isAscending() ? 1 : -1;\n            }\n            return isAscending() ? -1 : 1;\n        }\n\n        if ( String.class.isInstance( o1 ) && String.class.isInstance( o2 ) )\n        {\n            String value1 = ignoreCase ? ((String) o1).toLowerCase() : (String) o1;\n            String value2 = ignoreCase ? ((String) o2).toLowerCase() : (String) o2;\n\n            return isAscending() ? value1.compareTo( value2 ) : value2.compareTo( value1 );\n        }\n        if ( Boolean.class.isInstance( o1 ) && Boolean.class.isInstance( o2 ) )\n        {\n            return isAscending() ? ((Boolean) o1).compareTo( (Boolean) o2 ) : ((Boolean) o2).compareTo( (Boolean) o1 );\n        }\n        else if ( Integer.class.isInstance( o1 ) && Integer.class.isInstance( o2 ) )\n        {\n            return isAscending() ? ((Integer) o1).compareTo( (Integer) o2 ) : ((Integer) o2).compareTo( (Integer) o1 );\n        }\n        else if ( Float.class.isInstance( o1 ) && Float.class.isInstance( o2 ) )\n        {\n            return isAscending() ? ((Float) o1).compareTo( (Float) o2 ) : ((Float) o2).compareTo( (Float) o1 );\n        }\n        else if ( Double.class.isInstance( o1 ) && Double.class.isInstance( o2 ) )\n        {\n            return isAscending() ? ((Double) o1).compareTo( (Double) o2 ) : ((Double) o2).compareTo( (Double) o1 );\n        }\n        else if ( Date.class.isInstance( o1 ) && Date.class.isInstance( o2 ) )\n        {\n            return isAscending() ? ((Date) o1).compareTo( (Date) o2 ) : ((Date) o2).compareTo( (Date) o1 );\n        }\n        else if ( Enum.class.isInstance( o1 ) && Enum.class.isInstance( o2 ) )\n        {\n            return isAscending() ? String.valueOf( o1 ).compareTo( String.valueOf( o2 ) ) : String.valueOf( o2 ).compareTo( String.valueOf( o1 ) );\n        }\n\n        return 0;\n    }", "signature": "int compare( Object lside, Object rside )", "full_signature": "public int compare( Object lside, Object rside )", "class_method_signature": "Order.compare( Object lside, Object rside )", "testcase": false, "constructor": false, "invocations": ["invokeMethod", "getGetterMethod", "invokeMethod", "getGetterMethod", "isAscending", "isAscending", "isInstance", "isInstance", "toLowerCase", "toLowerCase", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "compareTo", "isInstance", "isInstance", "isAscending", "compareTo", "valueOf", "valueOf", "compareTo", "valueOf", "valueOf"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}