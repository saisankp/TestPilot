{"test_class": {"identifier": "UnitUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/types/util/UnitUtilsTest.java"}, "test_case": {"identifier": "forBaseUnitsOfDifferentSystemsShouldBeTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void forBaseUnitsOfDifferentSystemsShouldBeTrue() {\n        assertTrue(UnitUtils.isDifferentMeasurementSystem(SIUnits.CELSIUS, ImperialUnits.FAHRENHEIT));\n        assertTrue(UnitUtils.isDifferentMeasurementSystem(ImperialUnits.MILES_PER_HOUR, SIUnits.KILOMETRE_PER_HOUR));\n    }", "signature": "void forBaseUnitsOfDifferentSystemsShouldBeTrue()", "full_signature": "@Test public void forBaseUnitsOfDifferentSystemsShouldBeTrue()", "class_method_signature": "UnitUtilsTest.forBaseUnitsOfDifferentSystemsShouldBeTrue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDifferentMeasurementSystem", "assertTrue", "isDifferentMeasurementSystem"]}, "focal_class": {"identifier": "UnitUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UnitUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UnitUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final String UNIT_PLACEHOLDER = \"%unit%\";", "modifier": "public static final", "type": "String", "declarator": "UNIT_PLACEHOLDER = \"%unit%\"", "var_name": "UNIT_PLACEHOLDER"}, {"original_string": "public static final String UNIT_PERCENT_FORMAT_STRING = \"%%\";", "modifier": "public static final", "type": "String", "declarator": "UNIT_PERCENT_FORMAT_STRING = \"%%\"", "var_name": "UNIT_PERCENT_FORMAT_STRING"}, {"original_string": "private static final String JAVAX_MEASURE_QUANTITY_PREFIX = \"javax.measure.quantity.\";", "modifier": "private static final", "type": "String", "declarator": "JAVAX_MEASURE_QUANTITY_PREFIX = \"javax.measure.quantity.\"", "var_name": "JAVAX_MEASURE_QUANTITY_PREFIX"}, {"original_string": "private static final String FRAMEWORK_DIMENSION_PREFIX = \"org.openhab.core.library.dimension.\";", "modifier": "private static final", "type": "String", "declarator": "FRAMEWORK_DIMENSION_PREFIX = \"org.openhab.core.library.dimension.\"", "var_name": "FRAMEWORK_DIMENSION_PREFIX"}, {"original_string": "private static final Collection<Class<? extends SystemOfUnits>> ALL_SYSTEM_OF_UNITS = Arrays.asList(SIUnits.class,\n            ImperialUnits.class, SmartHomeUnits.class, Units.class);", "modifier": "private static final", "type": "Collection<Class<? extends SystemOfUnits>>", "declarator": "ALL_SYSTEM_OF_UNITS = Arrays.asList(SIUnits.class,\n            ImperialUnits.class, SmartHomeUnits.class, Units.class)", "var_name": "ALL_SYSTEM_OF_UNITS"}], "methods": [{"identifier": "parseDimension", "parameters": "(String dimension)", "modifiers": "public static @Nullable", "return": "Class<? extends Quantity<?>>", "signature": "Class<? extends Quantity<?>> parseDimension(String dimension)", "full_signature": "public static @Nullable Class<? extends Quantity<?>> parseDimension(String dimension)", "class_method_signature": "UnitUtils.parseDimension(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getDimensionName", "parameters": "(Unit<?> unit)", "modifiers": "public static @Nullable", "return": "String", "signature": "String getDimensionName(Unit<?> unit)", "full_signature": "public static @Nullable String getDimensionName(Unit<?> unit)", "class_method_signature": "UnitUtils.getDimensionName(Unit<?> unit)", "testcase": false, "constructor": false}, {"identifier": "parseUnit", "parameters": "(@Nullable String pattern)", "modifiers": "public static @Nullable", "return": "Unit<?>", "signature": "Unit<?> parseUnit(@Nullable String pattern)", "full_signature": "public static @Nullable Unit<?> parseUnit(@Nullable String pattern)", "class_method_signature": "UnitUtils.parseUnit(@Nullable String pattern)", "testcase": false, "constructor": false}, {"identifier": "isDifferentMeasurementSystem", "parameters": "(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "full_signature": "public static boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "class_method_signature": "UnitUtils.isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "testcase": false, "constructor": false}, {"identifier": "isMetricConversion", "parameters": "(UnitConverter converter)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMetricConversion(UnitConverter converter)", "full_signature": "private static boolean isMetricConversion(UnitConverter converter)", "class_method_signature": "UnitUtils.isMetricConversion(UnitConverter converter)", "testcase": false, "constructor": false}, {"identifier": "dimensionClass", "parameters": "(String prefix, String name)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Class<? extends Quantity<?>>", "signature": "Class<? extends Quantity<?>> dimensionClass(String prefix, String name)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Class<? extends Quantity<?>> dimensionClass(String prefix, String name)", "class_method_signature": "UnitUtils.dimensionClass(String prefix, String name)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/types/util/UnitUtils.java"}, "focal_method": {"identifier": "isDifferentMeasurementSystem", "parameters": "(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit) {\n        Set<? extends Unit<?>> siUnits = SIUnits.getInstance().getUnits();\n        Set<? extends Unit<?>> usUnits = ImperialUnits.getInstance().getUnits();\n\n        boolean differentSystems = (siUnits.contains(thisUnit) && usUnits.contains(thatUnit)) //\n                || (siUnits.contains(thatUnit) && usUnits.contains(thisUnit));\n\n        if (!differentSystems) {\n            if (thisUnit instanceof TransformedUnit\n                    && isMetricConversion(((TransformedUnit<?>) thisUnit).getConverter())) {\n                return isDifferentMeasurementSystem(((TransformedUnit<?>) thisUnit).getParentUnit(), thatUnit);\n            }\n\n            if (thatUnit instanceof TransformedUnit\n                    && isMetricConversion(((TransformedUnit<?>) thatUnit).getConverter())) {\n                return isDifferentMeasurementSystem(thisUnit, ((TransformedUnit<?>) thatUnit).getParentUnit());\n            }\n        }\n\n        // Compare the unit symbols. For product units (e.g. 1km / 1h) the equality is not given in the Sets above.\n        if (!differentSystems) {\n            Set<String> siSymbols = siUnits.stream().map(Unit::getSymbol).collect(toSet());\n            Set<String> usSymbols = usUnits.stream().map(Unit::getSymbol).collect(toSet());\n\n            differentSystems = (siSymbols.contains(thisUnit.getSymbol()) && usSymbols.contains(thatUnit.getSymbol())) //\n                    || (siSymbols.contains(thatUnit.getSymbol()) && usSymbols.contains(thisUnit.getSymbol()));\n        }\n\n        return differentSystems;\n    }", "signature": "boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "full_signature": "public static boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "class_method_signature": "UnitUtils.isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "testcase": false, "constructor": false, "invocations": ["getUnits", "getInstance", "getUnits", "getInstance", "contains", "contains", "contains", "contains", "isMetricConversion", "getConverter", "isDifferentMeasurementSystem", "getParentUnit", "isMetricConversion", "getConverter", "isDifferentMeasurementSystem", "getParentUnit", "collect", "map", "stream", "toSet", "collect", "map", "stream", "toSet", "contains", "getSymbol", "contains", "getSymbol", "contains", "getSymbol", "contains", "getSymbol"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}