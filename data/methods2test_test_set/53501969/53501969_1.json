{"test_class": {"identifier": "SentenceWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "lt.ltbot/src/test/java/de/tudarmstadt/lt/ltbot/writer/SentenceWriterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tSentenceWriter w = new SentenceWriter(){{_sentence_maker = new SentenceMaker();}};\n\t\tw._current_stream = System.out;\n\t\tw.writeSentences(null, \"This is a test. This is also a test.\");\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SentenceWriterTest.test()", "testcase": true, "constructor": false, "invocations": ["writeSentences"]}, "focal_class": {"identifier": "SentenceWriter", "superclass": "extends Processor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(SentenceWriter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(SentenceWriter.class.getName())", "var_name": "LOG"}, {"original_string": "private final static String SENTENCE_EXTRACT = \"sent\";", "modifier": "private final static", "type": "String", "declarator": "SENTENCE_EXTRACT = \"sent\"", "var_name": "SENTENCE_EXTRACT"}, {"original_string": "private final static String FILE_NUMBER_REPLACEMENT = \"{num}\";", "modifier": "private final static", "type": "String", "declarator": "FILE_NUMBER_REPLACEMENT = \"{num}\"", "var_name": "FILE_NUMBER_REPLACEMENT"}, {"original_string": "private final static String TIME_REPLACEMENT = \"{time}\";", "modifier": "private final static", "type": "String", "declarator": "TIME_REPLACEMENT = \"{time}\"", "var_name": "TIME_REPLACEMENT"}, {"original_string": "private Object _lck = new Object();", "modifier": "private", "type": "Object", "declarator": "_lck = new Object()", "var_name": "_lck"}, {"original_string": "protected TextExtractor _textExtractorInstance;", "modifier": "protected", "type": "TextExtractor", "declarator": "_textExtractorInstance", "var_name": "_textExtractorInstance"}, {"original_string": "protected SentenceMaker _sentence_maker;", "modifier": "protected", "type": "SentenceMaker", "declarator": "_sentence_maker", "var_name": "_sentence_maker"}, {"original_string": "protected ConfigPath _path = new ConfigPath(\"Sentence writer directory\", \"${launchId}/sentences\");", "modifier": "protected", "type": "ConfigPath", "declarator": "_path = new ConfigPath(\"Sentence writer directory\", \"${launchId}/sentences\")", "var_name": "_path"}, {"original_string": "protected String _languagecode = \"default\";", "modifier": "protected", "type": "String", "declarator": "_languagecode = \"default\"", "var_name": "_languagecode"}, {"original_string": "protected long _maxFileSizeBytes = 100 * 1000000;", "modifier": "protected", "type": "long", "declarator": "_maxFileSizeBytes = 100 * 1000000", "var_name": "_maxFileSizeBytes"}, {"original_string": "protected String _prefix = \"\";", "modifier": "protected", "type": "String", "declarator": "_prefix = \"\"", "var_name": "_prefix"}, {"original_string": "protected String _filename_format = String.format(\"%s-%s.txt\", TIME_REPLACEMENT, FILE_NUMBER_REPLACEMENT);", "modifier": "protected", "type": "String", "declarator": "_filename_format = String.format(\"%s-%s.txt\", TIME_REPLACEMENT, FILE_NUMBER_REPLACEMENT)", "var_name": "_filename_format"}, {"original_string": "File _current_file = null;", "modifier": "", "type": "File", "declarator": "_current_file = null", "var_name": "_current_file"}, {"original_string": "PrintStream _current_stream = null;", "modifier": "", "type": "PrintStream", "declarator": "_current_stream = null", "var_name": "_current_stream"}, {"original_string": "int _num_current_file = -1;", "modifier": "", "type": "int", "declarator": "_num_current_file = -1", "var_name": "_num_current_file"}, {"original_string": "AtomicLong _num_sentences = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "_num_sentences = new AtomicLong()", "var_name": "_num_sentences"}, {"original_string": "AtomicLong _num_uris = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "_num_uris = new AtomicLong()", "var_name": "_num_uris"}, {"original_string": "AtomicLong _num_uris_written = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "_num_uris_written = new AtomicLong()", "var_name": "_num_uris_written"}, {"original_string": "AtomicLong _num_bytes_written = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "_num_bytes_written = new AtomicLong()", "var_name": "_num_bytes_written"}, {"original_string": "AtomicLong _num_bytes_sentences_written = new AtomicLong();", "modifier": "", "type": "AtomicLong", "declarator": "_num_bytes_sentences_written = new AtomicLong()", "var_name": "_num_bytes_sentences_written"}], "methods": [{"identifier": "SentenceWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SentenceWriter()", "full_signature": "public  SentenceWriter()", "class_method_signature": "SentenceWriter.SentenceWriter()", "testcase": false, "constructor": true}, {"identifier": "getTextExtractor", "parameters": "()", "modifiers": "public", "return": "TextExtractor", "signature": "TextExtractor getTextExtractor()", "full_signature": "public TextExtractor getTextExtractor()", "class_method_signature": "SentenceWriter.getTextExtractor()", "testcase": false, "constructor": false}, {"identifier": "setTextExtractor", "parameters": "(TextExtractor text_extractor)", "modifiers": "public", "return": "void", "signature": "void setTextExtractor(TextExtractor text_extractor)", "full_signature": "public void setTextExtractor(TextExtractor text_extractor)", "class_method_signature": "SentenceWriter.setTextExtractor(TextExtractor text_extractor)", "testcase": false, "constructor": false}, {"identifier": "getSentenceMaker", "parameters": "()", "modifiers": "public", "return": "SentenceMaker", "signature": "SentenceMaker getSentenceMaker()", "full_signature": "public SentenceMaker getSentenceMaker()", "class_method_signature": "SentenceWriter.getSentenceMaker()", "testcase": false, "constructor": false}, {"identifier": "setSentenceMaker", "parameters": "(SentenceMaker sentence_maker)", "modifiers": "public", "return": "void", "signature": "void setSentenceMaker(SentenceMaker sentence_maker)", "full_signature": "public void setSentenceMaker(SentenceMaker sentence_maker)", "class_method_signature": "SentenceWriter.setSentenceMaker(SentenceMaker sentence_maker)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "ConfigPath", "signature": "ConfigPath getPath()", "full_signature": "public ConfigPath getPath()", "class_method_signature": "SentenceWriter.getPath()", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(ConfigPath newpath)", "modifiers": "public", "return": "void", "signature": "void setPath(ConfigPath newpath)", "full_signature": "public void setPath(ConfigPath newpath)", "class_method_signature": "SentenceWriter.setPath(ConfigPath newpath)", "testcase": false, "constructor": false}, {"identifier": "getLanguageCode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLanguageCode()", "full_signature": "public String getLanguageCode()", "class_method_signature": "SentenceWriter.getLanguageCode()", "testcase": false, "constructor": false}, {"identifier": "setLanguageCode", "parameters": "(String languagecode)", "modifiers": "public", "return": "void", "signature": "void setLanguageCode(String languagecode)", "full_signature": "public void setLanguageCode(String languagecode)", "class_method_signature": "SentenceWriter.setLanguageCode(String languagecode)", "testcase": false, "constructor": false}, {"identifier": "getMaxFileSizeBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxFileSizeBytes()", "full_signature": "public long getMaxFileSizeBytes()", "class_method_signature": "SentenceWriter.getMaxFileSizeBytes()", "testcase": false, "constructor": false}, {"identifier": "setMaxFileSizeBytes", "parameters": "(long maxFileSizeBytes)", "modifiers": "public", "return": "void", "signature": "void setMaxFileSizeBytes(long maxFileSizeBytes)", "full_signature": "public void setMaxFileSizeBytes(long maxFileSizeBytes)", "class_method_signature": "SentenceWriter.setMaxFileSizeBytes(long maxFileSizeBytes)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "SentenceWriter.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void setPrefix(String prefix)", "full_signature": "public void setPrefix(String prefix)", "class_method_signature": "SentenceWriter.setPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getFilenameFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFilenameFormat()", "full_signature": "public String getFilenameFormat()", "class_method_signature": "SentenceWriter.getFilenameFormat()", "testcase": false, "constructor": false}, {"identifier": "setFilenameFormat", "parameters": "(String filename_format)", "modifiers": "public", "return": "void", "signature": "void setFilenameFormat(String filename_format)", "full_signature": "public void setFilenameFormat(String filename_format)", "class_method_signature": "SentenceWriter.setFilenameFormat(String filename_format)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "SentenceWriter.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "SentenceWriter.stop()", "testcase": false, "constructor": false}, {"identifier": "shouldProcess", "parameters": "(CrawlURI curi)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldProcess(CrawlURI curi)", "full_signature": "@Override protected boolean shouldProcess(CrawlURI curi)", "class_method_signature": "SentenceWriter.shouldProcess(CrawlURI curi)", "testcase": false, "constructor": false}, {"identifier": "innerProcess", "parameters": "(CrawlURI curi)", "modifiers": "@Override protected", "return": "void", "signature": "void innerProcess(CrawlURI curi)", "full_signature": "@Override protected void innerProcess(CrawlURI curi)", "class_method_signature": "SentenceWriter.innerProcess(CrawlURI curi)", "testcase": false, "constructor": false}, {"identifier": "writeSentences", "parameters": "(CrawlURI curi, String cleaned_plaintext)", "modifiers": "protected", "return": "void", "signature": "void writeSentences(CrawlURI curi, String cleaned_plaintext)", "full_signature": "protected void writeSentences(CrawlURI curi, String cleaned_plaintext)", "class_method_signature": "SentenceWriter.writeSentences(CrawlURI curi, String cleaned_plaintext)", "testcase": false, "constructor": false}, {"identifier": "updateOuputFile", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File updateOuputFile()", "full_signature": "protected File updateOuputFile()", "class_method_signature": "SentenceWriter.updateOuputFile()", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getFilename()", "full_signature": "protected String getFilename()", "class_method_signature": "SentenceWriter.getFilename()", "testcase": false, "constructor": false}, {"identifier": "openPrintToFileStream", "parameters": "(File outputfile)", "modifiers": "protected", "return": "PrintStream", "signature": "PrintStream openPrintToFileStream(File outputfile)", "full_signature": "protected PrintStream openPrintToFileStream(File outputfile)", "class_method_signature": "SentenceWriter.openPrintToFileStream(File outputfile)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String report()", "full_signature": "@Override public String report()", "class_method_signature": "SentenceWriter.report()", "testcase": false, "constructor": false}], "file": "lt.ltbot/src/main/java/de/tudarmstadt/lt/ltbot/writer/SentenceWriter.java"}, "focal_method": {"identifier": "writeSentences", "parameters": "(CrawlURI curi, String cleaned_plaintext)", "modifiers": "protected", "return": "void", "body": "protected void writeSentences(CrawlURI curi, String cleaned_plaintext) {\n\t\tString perplexity_value_as_string = \"null\";\n\t\tif(curi != null && curi.getData() != null){\n\t\t\tObject obj = curi.getData().get(SharedConstants.EXTRA_INFO_PERPLEXITY);\n\t\t\tif(obj != null)\n\t\t\t\tperplexity_value_as_string = (String)obj;\n\t\t}\n\t\tString time = TimeUtils.get_ISO_8601_UTC();\n\t\tint c = 0;\n\t\tsynchronized (_lck) {\n\t\t\tfor(String sentence :  _sentence_maker.getSentences(cleaned_plaintext, _languagecode)){\n\t\t\t\tString s = String.format(\"%s\\t%s\\t%s\\t%d\\t%s%n\", time, sentence, curi, ++c, perplexity_value_as_string);\n\t\t\t\t_current_stream.print(s);\n\t\t\t\t_num_bytes_written.getAndAdd(s.getBytes().length);\n\t\t\t\t_num_bytes_sentences_written.getAndAdd(sentence.getBytes().length);\n\t\t\t}\n\t\t\t_current_stream.flush();\n\t\t}\n\t\t_num_sentences.getAndAdd(c);\n\t\t_num_uris_written.getAndIncrement();\n\t}", "signature": "void writeSentences(CrawlURI curi, String cleaned_plaintext)", "full_signature": "protected void writeSentences(CrawlURI curi, String cleaned_plaintext)", "class_method_signature": "SentenceWriter.writeSentences(CrawlURI curi, String cleaned_plaintext)", "testcase": false, "constructor": false, "invocations": ["getData", "get", "getData", "get_ISO_8601_UTC", "getSentences", "format", "print", "getAndAdd", "getBytes", "getAndAdd", "getBytes", "flush", "getAndAdd", "getAndIncrement"]}, "repository": {"repo_id": 53501969, "url": "https://github.com/tudarmstadt-lt/topicrawler", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 6504, "license": "licensed"}}