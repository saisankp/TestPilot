{"test_class": {"identifier": "Poly1305Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/Poly1305Test.java"}, "test_case": {"identifier": "testPoly1305VerifyMacThrowsIllegalArgExpWhenKeyLenIsLessThan32", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPoly1305VerifyMacThrowsIllegalArgExpWhenKeyLenIsLessThan32()\n      throws GeneralSecurityException {\n    try {\n      Poly1305.verifyMac(new byte[MAC_KEY_SIZE_IN_BYTES - 1], new byte[0], new byte[0]);\n      fail(\"Expected IllegalArgumentException.\");\n    } catch (IllegalArgumentException e) {\n      Truth.assertThat(e).hasMessageThat().containsMatch(\"The key length in bytes must be 32.\");\n    }\n  }", "signature": "void testPoly1305VerifyMacThrowsIllegalArgExpWhenKeyLenIsLessThan32()", "full_signature": "@Test public void testPoly1305VerifyMacThrowsIllegalArgExpWhenKeyLenIsLessThan32()", "class_method_signature": "Poly1305Test.testPoly1305VerifyMacThrowsIllegalArgExpWhenKeyLenIsLessThan32()", "testcase": true, "constructor": false, "invocations": ["verifyMac", "fail", "containsMatch", "hasMessageThat", "assertThat"]}, "focal_class": {"identifier": "Poly1305", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAC_TAG_SIZE_IN_BYTES = 16;", "modifier": "public static final", "type": "int", "declarator": "MAC_TAG_SIZE_IN_BYTES = 16", "var_name": "MAC_TAG_SIZE_IN_BYTES"}, {"original_string": "public static final int MAC_KEY_SIZE_IN_BYTES = 32;", "modifier": "public static final", "type": "int", "declarator": "MAC_KEY_SIZE_IN_BYTES = 32", "var_name": "MAC_KEY_SIZE_IN_BYTES"}], "methods": [{"identifier": "Poly1305", "parameters": "()", "modifiers": "private", "return": "", "signature": " Poly1305()", "full_signature": "private  Poly1305()", "class_method_signature": "Poly1305.Poly1305()", "testcase": false, "constructor": true}, {"identifier": "load32", "parameters": "(byte[] in, int idx)", "modifiers": "private static", "return": "long", "signature": "long load32(byte[] in, int idx)", "full_signature": "private static long load32(byte[] in, int idx)", "class_method_signature": "Poly1305.load32(byte[] in, int idx)", "testcase": false, "constructor": false}, {"identifier": "load26", "parameters": "(byte[] in, int idx, int shift)", "modifiers": "private static", "return": "long", "signature": "long load26(byte[] in, int idx, int shift)", "full_signature": "private static long load26(byte[] in, int idx, int shift)", "class_method_signature": "Poly1305.load26(byte[] in, int idx, int shift)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(byte[] output, long num, int idx)", "modifiers": "private static", "return": "void", "signature": "void toByteArray(byte[] output, long num, int idx)", "full_signature": "private static void toByteArray(byte[] output, long num, int idx)", "class_method_signature": "Poly1305.toByteArray(byte[] output, long num, int idx)", "testcase": false, "constructor": false}, {"identifier": "copyBlockSize", "parameters": "(byte[] output, byte[] in, int idx)", "modifiers": "private static", "return": "void", "signature": "void copyBlockSize(byte[] output, byte[] in, int idx)", "full_signature": "private static void copyBlockSize(byte[] output, byte[] in, int idx)", "class_method_signature": "Poly1305.copyBlockSize(byte[] output, byte[] in, int idx)", "testcase": false, "constructor": false}, {"identifier": "computeMac", "parameters": "(final byte[] key, byte[] data)", "modifiers": "static", "return": "byte[]", "signature": "byte[] computeMac(final byte[] key, byte[] data)", "full_signature": "static byte[] computeMac(final byte[] key, byte[] data)", "class_method_signature": "Poly1305.computeMac(final byte[] key, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "verifyMac", "parameters": "(final byte[] key, byte[] data, byte[] mac)", "modifiers": "static", "return": "void", "signature": "void verifyMac(final byte[] key, byte[] data, byte[] mac)", "full_signature": "static void verifyMac(final byte[] key, byte[] data, byte[] mac)", "class_method_signature": "Poly1305.verifyMac(final byte[] key, byte[] data, byte[] mac)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Poly1305.java"}, "focal_method": {"identifier": "verifyMac", "parameters": "(final byte[] key, byte[] data, byte[] mac)", "modifiers": "static", "return": "void", "body": "static void verifyMac(final byte[] key, byte[] data, byte[] mac) throws GeneralSecurityException {\n    if (!Bytes.equal(computeMac(key, data), mac)) {\n      throw new GeneralSecurityException(\"invalid MAC\");\n    }\n  }", "signature": "void verifyMac(final byte[] key, byte[] data, byte[] mac)", "full_signature": "static void verifyMac(final byte[] key, byte[] data, byte[] mac)", "class_method_signature": "Poly1305.verifyMac(final byte[] key, byte[] data, byte[] mac)", "testcase": false, "constructor": false, "invocations": ["equal", "computeMac"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}