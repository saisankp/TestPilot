{"test_class": {"identifier": "CompositePersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/persistence/composite/CompositePersistenceTest.java"}, "test_case": {"identifier": "testCompositePersistence_EndToEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompositePersistence_EndToEnd() {\n        OffHeapPersistence<Car, Integer> offHeapPersistence = OffHeapPersistence.onPrimaryKey(Car.CAR_ID);\n        DiskPersistence<Car, Integer> diskPersistence = DiskPersistence.onPrimaryKey(Car.CAR_ID);\n        IndexedCollection<Car> collection = new ConcurrentIndexedCollection<Car>(CompositePersistence.of(\n                offHeapPersistence,\n                diskPersistence,\n                singletonList(OnHeapPersistence.onPrimaryKey(Car.CAR_ID))\n        ));\n\n        collection.addIndex(DiskIndex.onAttribute(Car.MANUFACTURER));\n        collection.addIndex(OffHeapIndex.onAttribute(Car.MODEL));\n        collection.addIndex(NavigableIndex.onAttribute(Car.PRICE));\n\n        collection.addAll(CarFactory.createCollectionOfCars(1000));\n\n        ResultSet<Car> results = null;\n        try {\n            results = collection.retrieve(\n                    and(\n                            or(\n                                    equal(Car.MANUFACTURER, \"Ford\"),\n                                    equal(Car.MODEL, \"Avensis\")\n                            ),\n                            lessThan(Car.PRICE, 6000.0)\n                    )\n            );\n            Assert.assertEquals(300, results.size());\n\n            Assert.assertTrue(offHeapPersistence.getBytesUsed() > 4096); // example: 163840\n            Assert.assertTrue(diskPersistence.getBytesUsed() > 4096); // example: 30720\n        }\n        finally {\n            CloseableRequestResources.closeQuietly(results);\n            collection.clear();\n            offHeapPersistence.close();\n            diskPersistence.getFile().delete();\n        }\n    }", "signature": "void testCompositePersistence_EndToEnd()", "full_signature": "@Test public void testCompositePersistence_EndToEnd()", "class_method_signature": "CompositePersistenceTest.testCompositePersistence_EndToEnd()", "testcase": true, "constructor": false, "invocations": ["onPrimaryKey", "onPrimaryKey", "of", "singletonList", "onPrimaryKey", "addIndex", "onAttribute", "addIndex", "onAttribute", "addIndex", "onAttribute", "addAll", "createCollectionOfCars", "retrieve", "and", "or", "equal", "equal", "lessThan", "assertEquals", "size", "assertTrue", "getBytesUsed", "assertTrue", "getBytesUsed", "closeQuietly", "clear", "close", "delete", "getFile"]}, "focal_class": {"identifier": "CompositePersistence", "superclass": "", "interfaces": "implements Persistence<O, A>", "fields": [{"original_string": "final Persistence<O, A> primaryPersistence;", "modifier": "final", "type": "Persistence<O, A>", "declarator": "primaryPersistence", "var_name": "primaryPersistence"}, {"original_string": "final Persistence<O, A> secondaryPersistence;", "modifier": "final", "type": "Persistence<O, A>", "declarator": "secondaryPersistence", "var_name": "secondaryPersistence"}, {"original_string": "final List<? extends Persistence<O, A>> additionalPersistences;", "modifier": "final", "type": "List<? extends Persistence<O, A>>", "declarator": "additionalPersistences", "var_name": "additionalPersistences"}, {"original_string": "final ConcurrentMap<Index<O>, Persistence<O, A>> indexPersistences = new ConcurrentHashMap<Index<O>, Persistence<O, A>>(1, 1.0F, 1);", "modifier": "final", "type": "ConcurrentMap<Index<O>, Persistence<O, A>>", "declarator": "indexPersistences = new ConcurrentHashMap<Index<O>, Persistence<O, A>>(1, 1.0F, 1)", "var_name": "indexPersistences"}], "methods": [{"identifier": "CompositePersistence", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "public", "return": "", "signature": " CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "public  CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryKeyAttribute", "parameters": "()", "modifiers": "@Override public", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> getPrimaryKeyAttribute()", "full_signature": "@Override public SimpleAttribute<O, A> getPrimaryKeyAttribute()", "class_method_signature": "CompositePersistence.getPrimaryKeyAttribute()", "testcase": false, "constructor": false}, {"identifier": "supportsIndex", "parameters": "(Index<O> index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsIndex(Index<O> index)", "full_signature": "@Override public boolean supportsIndex(Index<O> index)", "class_method_signature": "CompositePersistence.supportsIndex(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndex", "parameters": "(Index<O> index)", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndex(Index<O> index)", "full_signature": "public Persistence<O, A> getPersistenceForIndex(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndex(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "createObjectStore", "parameters": "()", "modifiers": "@Override public", "return": "ObjectStore<O>", "signature": "ObjectStore<O> createObjectStore()", "full_signature": "@Override public ObjectStore<O> createObjectStore()", "class_method_signature": "CompositePersistence.createObjectStore()", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndexOrNullWithCaching", "parameters": "(Index<O> index)", "modifiers": "", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndexOrNullWithCaching(Index<O> index)", "full_signature": " Persistence<O, A> getPersistenceForIndexOrNullWithCaching(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndexOrNullWithCaching(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndexOrNull", "parameters": "(Index<O> index)", "modifiers": "", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndexOrNull(Index<O> index)", "full_signature": " Persistence<O, A> getPersistenceForIndexOrNull(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndexOrNull(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryPersistence", "parameters": "()", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPrimaryPersistence()", "full_signature": "public Persistence<O, A> getPrimaryPersistence()", "class_method_signature": "CompositePersistence.getPrimaryPersistence()", "testcase": false, "constructor": false}, {"identifier": "getSecondaryPersistence", "parameters": "()", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getSecondaryPersistence()", "full_signature": "public Persistence<O, A> getSecondaryPersistence()", "class_method_signature": "CompositePersistence.getSecondaryPersistence()", "testcase": false, "constructor": false}, {"identifier": "getAdditionalPersistences", "parameters": "()", "modifiers": "public", "return": "List<? extends Persistence<O, A>>", "signature": "List<? extends Persistence<O, A>> getAdditionalPersistences()", "full_signature": "public List<? extends Persistence<O, A>> getAdditionalPersistences()", "class_method_signature": "CompositePersistence.getAdditionalPersistences()", "testcase": false, "constructor": false}, {"identifier": "validatePersistenceArguments", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "static", "return": "void", "signature": "void validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "static void validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": false}, {"identifier": "validatePersistenceArgument", "parameters": "(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "modifiers": "static", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "full_signature": "static SimpleAttribute<O, A> validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "class_method_signature": "CompositePersistence.validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "testcase": false, "constructor": false}, {"identifier": "openRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void openRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void openRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "CompositePersistence.openRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "closeRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void closeRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void closeRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "CompositePersistence.closeRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "public static", "return": "CompositePersistence<O, A>", "signature": "CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "public static CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "modifiers": "public static", "return": "CompositePersistence<O, A>", "signature": "CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "full_signature": "public static CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "class_method_signature": "CompositePersistence.of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/persistence/composite/CompositePersistence.java"}, "focal_method": {"identifier": "of", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "public static", "return": "CompositePersistence<O, A>", "body": "public static <O, A extends Comparable<A>> CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences) {\n        return new CompositePersistence<O, A>(primaryPersistence, secondaryPersistence, additionalPersistences);\n    }", "signature": "CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "public static CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}