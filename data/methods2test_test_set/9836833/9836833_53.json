{"test_class": {"identifier": "GivenJongoCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RestxSpecLoader restxSpecLoader = new RestxSpecLoader(Factory.getInstance());", "modifier": "private", "type": "RestxSpecLoader", "declarator": "restxSpecLoader = new RestxSpecLoader(Factory.getInstance())", "var_name": "restxSpecLoader"}], "file": "restx-jongo/src/test/java/restx/specs/mongo/GivenJongoCollectionTest.java"}, "test_case": {"identifier": "should_generate_yaml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_generate_yaml() throws Exception {\n        RestxSpec testCase = restxSpecLoader.load(\n                \"restx/tests/restx_test_case_example_1.yaml\");\n\n        String actual = testCase.toString();\n        System.out.println(\"actual = \" + actual);\n        assertThat(actual).isEqualTo(MoreFiles.removeWindowsCarriageReturnsBeforeLF(\n                Resources.toString(Resources.getResource(\"restx/tests/expected_restx_case_example_1.yaml\"), Charsets.UTF_8)\n        ));\n    }", "signature": "void should_generate_yaml()", "full_signature": "@Test public void should_generate_yaml()", "class_method_signature": "GivenJongoCollectionTest.should_generate_yaml()", "testcase": true, "constructor": false, "invocations": ["load", "toString", "println", "isEqualTo", "assertThat", "removeWindowsCarriageReturnsBeforeLF", "toString", "getResource"]}, "focal_class": {"identifier": "GivenJongoCollection", "superclass": "", "interfaces": "implements Given", "fields": [{"original_string": "public static final String DB_URI = \"GivenCollection.DB_URI\";", "modifier": "public static final", "type": "String", "declarator": "DB_URI = \"GivenCollection.DB_URI\"", "var_name": "DB_URI"}, {"original_string": "private final String collection;", "modifier": "private final", "type": "String", "declarator": "collection", "var_name": "collection"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final String data;", "modifier": "private final", "type": "String", "declarator": "data", "var_name": "data"}, {"original_string": "private final ImmutableList<String> sequence;", "modifier": "private final", "type": "ImmutableList<String>", "declarator": "sequence", "var_name": "sequence"}], "methods": [{"identifier": "GivenJongoCollection", "parameters": "(String collection, String path, String data, ImmutableList<String> sequence)", "modifiers": "public", "return": "", "signature": " GivenJongoCollection(String collection, String path, String data, ImmutableList<String> sequence)", "full_signature": "public  GivenJongoCollection(String collection, String path, String data, ImmutableList<String> sequence)", "class_method_signature": "GivenJongoCollection.GivenJongoCollection(String collection, String path, String data, ImmutableList<String> sequence)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(StringBuilder sb)", "modifiers": "@Override public", "return": "void", "signature": "void toString(StringBuilder sb)", "full_signature": "@Override public void toString(StringBuilder sb)", "class_method_signature": "GivenJongoCollection.toString(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getCollection", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCollection()", "full_signature": "public String getCollection()", "class_method_signature": "GivenJongoCollection.getCollection()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "GivenJongoCollection.getPath()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getData()", "full_signature": "public String getData()", "class_method_signature": "GivenJongoCollection.getData()", "testcase": false, "constructor": false}, {"identifier": "getSequence", "parameters": "()", "modifiers": "public", "return": "ImmutableList<String>", "signature": "ImmutableList<String> getSequence()", "full_signature": "public ImmutableList<String> getSequence()", "class_method_signature": "GivenJongoCollection.getSequence()", "testcase": false, "constructor": false}, {"identifier": "addSequenceId", "parameters": "(String id)", "modifiers": "public", "return": "GivenJongoCollection", "signature": "GivenJongoCollection addSequenceId(String id)", "full_signature": "public GivenJongoCollection addSequenceId(String id)", "class_method_signature": "GivenJongoCollection.addSequenceId(String id)", "testcase": false, "constructor": false}], "file": "restx-jongo/src/main/java/restx/specs/mongo/GivenJongoCollection.java"}, "focal_method": {"identifier": "toString", "parameters": "(StringBuilder sb)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void toString(StringBuilder sb) {\n        sb.append(\"  - collection: \").append(collection).append(\"\\n\");\n        if (!Strings.isNullOrEmpty(path) && !path.equals(\"data://\")) {\n            sb.append(\"    path: \").append(path).append(\"\\n\");\n        }\n        if (!data.isEmpty()) {\n            sb.append(\"    data: |\\n\").append(reindent(data.trim(), 8)).append(\"\\n\");\n        }\n        if (!sequence.isEmpty()) {\n                sb.append(\"    sequence: \");\n                Joiner.on(\", \").appendTo(sb, sequence);\n                sb.append(\"\\n\");\n        }\n    }", "signature": "void toString(StringBuilder sb)", "full_signature": "@Override public void toString(StringBuilder sb)", "class_method_signature": "GivenJongoCollection.toString(StringBuilder sb)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "isNullOrEmpty", "equals", "append", "append", "append", "isEmpty", "append", "append", "append", "reindent", "trim", "isEmpty", "append", "appendTo", "on", "append"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}