{"test_class": {"identifier": "MessageOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean TEST_CDATA=true;", "modifier": "private", "type": "boolean", "declarator": "TEST_CDATA=true", "var_name": "TEST_CDATA"}, {"original_string": "private String CDATA_START=TEST_CDATA?\"<![CDATA[\":\"\";", "modifier": "private", "type": "String", "declarator": "CDATA_START=TEST_CDATA?\"<![CDATA[\":\"\"", "var_name": "CDATA_START"}, {"original_string": "private String CDATA_END=TEST_CDATA?\"]]>\":\"\";", "modifier": "private", "type": "String", "declarator": "CDATA_END=TEST_CDATA?\"]]>\":\"\"", "var_name": "CDATA_END"}, {"original_string": "protected String testString=\"<root><sub>abc&amp;&lt;&gt;</sub><sub>\"+CDATA_START+\"<a>a&amp;b</a>\"+CDATA_END+\"</sub></root>\";", "modifier": "protected", "type": "String", "declarator": "testString=\"<root><sub>abc&amp;&lt;&gt;</sub><sub>\"+CDATA_START+\"<a>a&amp;b</a>\"+CDATA_END+\"</sub></root>\"", "var_name": "testString"}], "file": "core/src/test/java/nl/nn/adapterframework/stream/MessageOutputStreamTest.java"}, "test_case": {"identifier": "testX31ContentHandlerAsStreamError", "parameters": "()", "modifiers": "@Test @Ignore(\"No contract to call endDocument() in case of an Exception\") public", "return": "void", "body": "@Test\n\t@Ignore(\"No contract to call endDocument() in case of an Exception\")\n\tpublic void testX31ContentHandlerAsStreamError() throws Exception {\n\t\t\n\t\tCloseObservableOutputStream cos = new CloseObservableOutputStream() {\n\n\t\t\t@Override\n\t\t\tpublic void write(byte[] arg0, int arg1, int arg2) {\n\t\t\t\tthrow new RuntimeException(\"fakeFailure\");\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tResult result = new StreamResult(cos);\n\t\tSAXTransformerFactory tf = (SAXTransformerFactory) TransformerFactory.newInstance();\n\t\tTransformerHandler transformerHandler = tf.newTransformerHandler();\n\t\ttransformerHandler.setResult(result);\n\n\t\ttry (MessageOutputStream stream = new MessageOutputStream(null, transformerHandler, (IForwardTarget)null, null, null)) {\n\n\t\t\ttry {\n\t\t\t\ttry (Writer writer = stream.asWriter()) {\n\t\t\t\t\twriter.write(testString);\n\t\t\t\t}\n\t\t\t\tfail(\"exception should be thrown\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tassertThat(e.getMessage(),StringContains.containsString(\"fakeFailure\"));\n\t\t\t}\n\n\t\t}\n\t\tassertTrue(cos.isCloseCalled());\n\t}", "signature": "void testX31ContentHandlerAsStreamError()", "full_signature": "@Test @Ignore(\"No contract to call endDocument() in case of an Exception\") public void testX31ContentHandlerAsStreamError()", "class_method_signature": "MessageOutputStreamTest.testX31ContentHandlerAsStreamError()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newTransformerHandler", "setResult", "asWriter", "write", "fail", "assertThat", "getMessage", "containsString", "assertTrue", "isCloseCalled"]}, "focal_class": {"identifier": "MessageOutputStream", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private INamedObject owner;", "modifier": "private", "type": "INamedObject", "declarator": "owner", "var_name": "owner"}, {"original_string": "protected Object requestStream;", "modifier": "protected", "type": "Object", "declarator": "requestStream", "var_name": "requestStream"}, {"original_string": "private Object response;", "modifier": "private", "type": "Object", "declarator": "response", "var_name": "response"}, {"original_string": "private PipeForward forward;", "modifier": "private", "type": "PipeForward", "declarator": "forward", "var_name": "forward"}, {"original_string": "private MessageOutputStream nextStream;", "modifier": "private", "type": "MessageOutputStream", "declarator": "nextStream", "var_name": "nextStream"}, {"original_string": "private MessageOutputStream tail;", "modifier": "private", "type": "MessageOutputStream", "declarator": "tail", "var_name": "tail"}, {"original_string": "private ThreadConnector threadConnector;", "modifier": "private", "type": "ThreadConnector", "declarator": "threadConnector", "var_name": "threadConnector"}], "methods": [{"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, IForwardTarget next)", "modifiers": "protected", "return": "", "signature": " MessageOutputStream(INamedObject owner, IForwardTarget next)", "full_signature": "protected  MessageOutputStream(INamedObject owner, IForwardTarget next)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, IForwardTarget next)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, MessageOutputStream nextStream)", "modifiers": "protected", "return": "", "signature": " MessageOutputStream(INamedObject owner, MessageOutputStream nextStream)", "full_signature": "protected  MessageOutputStream(INamedObject owner, MessageOutputStream nextStream)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, MessageOutputStream nextStream)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, OutputStream stream, IForwardTarget next)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, OutputStream stream, IForwardTarget next)", "full_signature": "public  MessageOutputStream(INamedObject owner, OutputStream stream, IForwardTarget next)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, OutputStream stream, IForwardTarget next)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, OutputStream stream, MessageOutputStream nextStream)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, OutputStream stream, MessageOutputStream nextStream)", "full_signature": "public  MessageOutputStream(INamedObject owner, OutputStream stream, MessageOutputStream nextStream)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, OutputStream stream, MessageOutputStream nextStream)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, Writer writer, IForwardTarget next)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, Writer writer, IForwardTarget next)", "full_signature": "public  MessageOutputStream(INamedObject owner, Writer writer, IForwardTarget next)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, Writer writer, IForwardTarget next)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, Writer writer, MessageOutputStream nextStream)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, Writer writer, MessageOutputStream nextStream)", "full_signature": "public  MessageOutputStream(INamedObject owner, Writer writer, MessageOutputStream nextStream)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, Writer writer, MessageOutputStream nextStream)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, ContentHandler handler, IForwardTarget next, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, ContentHandler handler, IForwardTarget next, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "full_signature": "public  MessageOutputStream(INamedObject owner, ContentHandler handler, IForwardTarget next, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, ContentHandler handler, IForwardTarget next, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "testcase": false, "constructor": true}, {"identifier": "MessageOutputStream", "parameters": "(INamedObject owner, ContentHandler handler, MessageOutputStream nextStream, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "modifiers": "public", "return": "", "signature": " MessageOutputStream(INamedObject owner, ContentHandler handler, MessageOutputStream nextStream, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "full_signature": "public  MessageOutputStream(INamedObject owner, ContentHandler handler, MessageOutputStream nextStream, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "class_method_signature": "MessageOutputStream.MessageOutputStream(INamedObject owner, ContentHandler handler, MessageOutputStream nextStream, ThreadLifeCycleEventListener<Object> threadLifeCycleEventListener, IPipeLineSession session)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "(MessageOutputStream nextStream)", "modifiers": "private", "return": "void", "signature": "void connect(MessageOutputStream nextStream)", "full_signature": "private void connect(MessageOutputStream nextStream)", "class_method_signature": "MessageOutputStream.connect(MessageOutputStream nextStream)", "testcase": false, "constructor": false}, {"identifier": "setRequestStream", "parameters": "(Object requestStream)", "modifiers": "protected", "return": "void", "signature": "void setRequestStream(Object requestStream)", "full_signature": "protected void setRequestStream(Object requestStream)", "class_method_signature": "MessageOutputStream.setRequestStream(Object requestStream)", "testcase": false, "constructor": false}, {"identifier": "closeRequestStream", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeRequestStream()", "full_signature": "public void closeRequestStream()", "class_method_signature": "MessageOutputStream.closeRequestStream()", "testcase": false, "constructor": false}, {"identifier": "afterClose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void afterClose()", "full_signature": "public void afterClose()", "class_method_signature": "MessageOutputStream.afterClose()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void close()", "full_signature": "@Override public final void close()", "class_method_signature": "MessageOutputStream.close()", "testcase": false, "constructor": false}, {"identifier": "asNative", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object asNative()", "full_signature": "public Object asNative()", "class_method_signature": "MessageOutputStream.asNative()", "testcase": false, "constructor": false}, {"identifier": "getLogPrefix", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getLogPrefix()", "full_signature": "private String getLogPrefix()", "class_method_signature": "MessageOutputStream.getLogPrefix()", "testcase": false, "constructor": false}, {"identifier": "asStream", "parameters": "()", "modifiers": "public", "return": "OutputStream", "signature": "OutputStream asStream()", "full_signature": "public OutputStream asStream()", "class_method_signature": "MessageOutputStream.asStream()", "testcase": false, "constructor": false}, {"identifier": "asWriter", "parameters": "()", "modifiers": "public", "return": "Writer", "signature": "Writer asWriter()", "full_signature": "public Writer asWriter()", "class_method_signature": "MessageOutputStream.asWriter()", "testcase": false, "constructor": false}, {"identifier": "asContentHandler", "parameters": "()", "modifiers": "public", "return": "ContentHandler", "signature": "ContentHandler asContentHandler()", "full_signature": "public ContentHandler asContentHandler()", "class_method_signature": "MessageOutputStream.asContentHandler()", "testcase": false, "constructor": false}, {"identifier": "setResponse", "parameters": "(Object response)", "modifiers": "public", "return": "void", "signature": "void setResponse(Object response)", "full_signature": "public void setResponse(Object response)", "class_method_signature": "MessageOutputStream.setResponse(Object response)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getResponse()", "full_signature": "public Object getResponse()", "class_method_signature": "MessageOutputStream.getResponse()", "testcase": false, "constructor": false}, {"identifier": "setForward", "parameters": "(PipeForward forward)", "modifiers": "public", "return": "void", "signature": "void setForward(PipeForward forward)", "full_signature": "public void setForward(PipeForward forward)", "class_method_signature": "MessageOutputStream.setForward(PipeForward forward)", "testcase": false, "constructor": false}, {"identifier": "getPipeRunResult", "parameters": "()", "modifiers": "public", "return": "PipeRunResult", "signature": "PipeRunResult getPipeRunResult()", "full_signature": "public PipeRunResult getPipeRunResult()", "class_method_signature": "MessageOutputStream.getPipeRunResult()", "testcase": false, "constructor": false}, {"identifier": "getForward", "parameters": "()", "modifiers": "public", "return": "PipeForward", "signature": "PipeForward getForward()", "full_signature": "public PipeForward getForward()", "class_method_signature": "MessageOutputStream.getForward()", "testcase": false, "constructor": false}, {"identifier": "getTargetStream", "parameters": "(INamedObject owner, IPipeLineSession session, IForwardTarget next)", "modifiers": "public static", "return": "MessageOutputStream", "signature": "MessageOutputStream getTargetStream(INamedObject owner, IPipeLineSession session, IForwardTarget next)", "full_signature": "public static MessageOutputStream getTargetStream(INamedObject owner, IPipeLineSession session, IForwardTarget next)", "class_method_signature": "MessageOutputStream.getTargetStream(INamedObject owner, IPipeLineSession session, IForwardTarget next)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/stream/MessageOutputStream.java"}, "focal_method": {"identifier": "asWriter", "parameters": "()", "modifiers": "public", "return": "Writer", "body": "public Writer asWriter() throws StreamingException {\n\t\tif (requestStream instanceof Writer) {\n\t\t\tif (log.isDebugEnabled()) log.debug(getLogPrefix()+\"returning Writer as Writer\");\n\t\t\treturn (Writer) requestStream;\n\t\t}\n\t\tif (requestStream instanceof OutputStream) {\n\t\t\ttry {\n\t\t\t\tif (log.isDebugEnabled()) log.debug(getLogPrefix()+\"returning OutputStream as Writer\");\n\t\t\t\treturn new OutputStreamWriter((OutputStream) requestStream, StreamUtil.DEFAULT_INPUT_STREAM_ENCODING);\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tthrow new StreamingException(e);\n\t\t\t}\n\t\t}\n\t\tif (requestStream instanceof ContentHandler) {\n\t\t\ttry {\n\t\t\t\tif (log.isDebugEnabled()) log.debug(getLogPrefix()+\"returning ContentHandler as Writer\");\n\t\t\t\treturn new OutputStreamWriter(new ContentHandlerOutputStream((ContentHandler) requestStream, threadConnector), StreamUtil.DEFAULT_INPUT_STREAM_ENCODING);\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tthrow new StreamingException(e);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "Writer asWriter()", "full_signature": "public Writer asWriter()", "class_method_signature": "MessageOutputStream.asWriter()", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getLogPrefix", "isDebugEnabled", "debug", "getLogPrefix", "isDebugEnabled", "debug", "getLogPrefix"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}