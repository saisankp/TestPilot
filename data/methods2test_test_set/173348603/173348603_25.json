{"test_class": {"identifier": "K2JCompatTest", "superclass": "", "interfaces": "", "fields": [], "file": "k2j-compat/src/test/java/com/github/alexdochioiu/k2jcompat/K2JCompatTest.java"}, "test_case": {"identifier": "takeUnless_nullInput_returnsNullIfTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void takeUnless_nullInput_returnsNullIfTrue() {\n        final AtomicBoolean takeUnlessCalled = new AtomicBoolean(false);\n\n        final SimpleClass returned = take((SimpleClass) null)\n                .takeUnless((in) -> {\n                    takeUnlessCalled.set(true);\n                    return true;\n                })\n                .unwrap();\n\n        Assert.assertTrue(takeUnlessCalled.get());\n        Assert.assertNull(returned);\n    }", "signature": "void takeUnless_nullInput_returnsNullIfTrue()", "full_signature": "@Test public void takeUnless_nullInput_returnsNullIfTrue()", "class_method_signature": "K2JCompatTest.takeUnless_nullInput_returnsNullIfTrue()", "testcase": true, "constructor": false, "invocations": ["unwrap", "takeUnless", "take", "set", "assertTrue", "get", "assertNull"]}, "focal_class": {"identifier": "K2JCompat", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "take", "parameters": "(T object)", "modifiers": "public static", "return": "K2JWrapper<T>", "signature": "K2JWrapper<T> take(T object)", "full_signature": "public static K2JWrapper<T> take(T object)", "class_method_signature": "K2JCompat.take(T object)", "testcase": false, "constructor": false}], "file": "k2j-compat/src/main/java/com/github/alexdochioiu/k2jcompat/K2JCompat.java"}, "focal_method": {"identifier": "take", "parameters": "(T object)", "modifiers": "public static", "return": "K2JWrapper<T>", "body": "public static <T> K2JWrapper<T> take(T object) {\n        return new K2JWrapper<>(object);\n    }", "signature": "K2JWrapper<T> take(T object)", "full_signature": "public static K2JWrapper<T> take(T object)", "class_method_signature": "K2JCompat.take(T object)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 173348603, "url": "https://github.com/AlexDochioiu/K2J-Compat", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 9, "size": 151, "license": "licensed"}}