{"test_class": {"identifier": "RunfilesTest", "superclass": "", "interfaces": "", "fields": [], "file": "tools/java/runfiles/RunfilesTest.java"}, "test_case": {"identifier": "testIgnoresTestSrcdirWhenJavaRunfilesIsUndefinedAndJustFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIgnoresTestSrcdirWhenJavaRunfilesIsUndefinedAndJustFails() throws Exception {\n    Path dir =\n        Files.createTempDirectory(\n            FileSystems.getDefault().getPath(System.getenv(\"TEST_TMPDIR\")), null);\n\n    Runfiles.create(\n        ImmutableMap.of(\n            \"RUNFILES_DIR\", dir.toString(),\n            \"RUNFILES_MANIFEST_FILE\", \"ignored when RUNFILES_MANIFEST_ONLY is not set to 1\",\n            \"TEST_SRCDIR\", \"should always be ignored\"));\n\n    Runfiles.create(\n        ImmutableMap.of(\n            \"JAVA_RUNFILES\", dir.toString(),\n            \"RUNFILES_MANIFEST_FILE\", \"ignored when RUNFILES_MANIFEST_ONLY is not set to 1\",\n            \"TEST_SRCDIR\", \"should always be ignored\"));\n\n    try {\n      // The method must ignore TEST_SRCDIR, for the scenario when Bazel runs a test which itself\n      // runs Bazel to build and run java_binary. The java_binary should not pick up the test's\n      // TEST_SRCDIR.\n      Runfiles.create(\n          ImmutableMap.of(\n              \"RUNFILES_DIR\", \"\",\n              \"JAVA_RUNFILES\", \"\",\n              \"RUNFILES_MANIFEST_FILE\", \"ignored when RUNFILES_MANIFEST_ONLY is not set to 1\",\n              \"TEST_SRCDIR\", \"should always be ignored\"));\n      fail();\n    } catch (IOException e) {\n      assertThat(e).hasMessageThat().contains(\"$RUNFILES_DIR and $JAVA_RUNFILES\");\n    }\n  }", "signature": "void testIgnoresTestSrcdirWhenJavaRunfilesIsUndefinedAndJustFails()", "full_signature": "@Test public void testIgnoresTestSrcdirWhenJavaRunfilesIsUndefinedAndJustFails()", "class_method_signature": "RunfilesTest.testIgnoresTestSrcdirWhenJavaRunfilesIsUndefinedAndJustFails()", "testcase": true, "constructor": false, "invocations": ["createTempDirectory", "getPath", "getDefault", "getenv", "create", "of", "toString", "create", "of", "toString", "create", "of", "fail", "contains", "hasMessageThat", "assertThat"]}, "focal_class": {"identifier": "Runfiles", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Runfiles", "parameters": "()", "modifiers": "private", "return": "", "signature": " Runfiles()", "full_signature": "private  Runfiles()", "class_method_signature": "Runfiles.Runfiles()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "Runfiles", "signature": "Runfiles create()", "full_signature": "public static Runfiles create()", "class_method_signature": "Runfiles.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Map<String, String> env)", "modifiers": "public static", "return": "Runfiles", "signature": "Runfiles create(Map<String, String> env)", "full_signature": "public static Runfiles create(Map<String, String> env)", "class_method_signature": "Runfiles.create(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "rlocation", "parameters": "(String path)", "modifiers": "public final", "return": "String", "signature": "String rlocation(String path)", "full_signature": "public final String rlocation(String path)", "class_method_signature": "Runfiles.rlocation(String path)", "testcase": false, "constructor": false}, {"identifier": "getEnvVars", "parameters": "()", "modifiers": "public abstract", "return": "Map<String, String>", "signature": "Map<String, String> getEnvVars()", "full_signature": "public abstract Map<String, String> getEnvVars()", "class_method_signature": "Runfiles.getEnvVars()", "testcase": false, "constructor": false}, {"identifier": "isManifestOnly", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "boolean", "signature": "boolean isManifestOnly(Map<String, String> env)", "full_signature": "private static boolean isManifestOnly(Map<String, String> env)", "class_method_signature": "Runfiles.isManifestOnly(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "getManifestPath", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "String", "signature": "String getManifestPath(Map<String, String> env)", "full_signature": "private static String getManifestPath(Map<String, String> env)", "class_method_signature": "Runfiles.getManifestPath(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "getRunfilesDir", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "String", "signature": "String getRunfilesDir(Map<String, String> env)", "full_signature": "private static String getRunfilesDir(Map<String, String> env)", "class_method_signature": "Runfiles.getRunfilesDir(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "rlocationChecked", "parameters": "(String path)", "modifiers": "abstract", "return": "String", "signature": "String rlocationChecked(String path)", "full_signature": "abstract String rlocationChecked(String path)", "class_method_signature": "Runfiles.rlocationChecked(String path)", "testcase": false, "constructor": false}, {"identifier": "createManifestBasedForTesting", "parameters": "(String manifestPath)", "modifiers": "static", "return": "Runfiles", "signature": "Runfiles createManifestBasedForTesting(String manifestPath)", "full_signature": "static Runfiles createManifestBasedForTesting(String manifestPath)", "class_method_signature": "Runfiles.createManifestBasedForTesting(String manifestPath)", "testcase": false, "constructor": false}, {"identifier": "createDirectoryBasedForTesting", "parameters": "(String runfilesDir)", "modifiers": "static", "return": "Runfiles", "signature": "Runfiles createDirectoryBasedForTesting(String runfilesDir)", "full_signature": "static Runfiles createDirectoryBasedForTesting(String runfilesDir)", "class_method_signature": "Runfiles.createDirectoryBasedForTesting(String runfilesDir)", "testcase": false, "constructor": false}], "file": "tools/java/runfiles/Runfiles.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "Runfiles", "body": "public static Runfiles create() throws IOException {\n    return create(System.getenv());\n  }", "signature": "Runfiles create()", "full_signature": "public static Runfiles create()", "class_method_signature": "Runfiles.create()", "testcase": false, "constructor": false, "invocations": ["create", "getenv"]}, "repository": {"repo_id": 165012876, "url": "https://github.com/FengRillian/bazel-0.21.0-dist", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 80487, "license": "licensed"}}