{"test_class": {"identifier": "APLOutlierSummarizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLOutlierSummarizerTest.java"}, "test_case": {"identifier": "testCubeOrder3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCubeOrder3() throws Exception {\n        DataFrame df = new DataFrame();\n        String[] col1 = {\"a1\", \"a2\", \"a1\", \"a1\"};\n        String[] col2 = {\"b1\", \"b1\", \"b2\", \"b1\"};\n        String[] col3 = {\"c1\", \"c1\", \"c1\", \"c2\"};\n        double[] counts = {100, 300, 400, 500};\n        double[] oCounts = {30, 5, 5, 7};\n        df.addColumn(\"col1\", col1);\n        df.addColumn(\"col2\", col2);\n        df.addColumn(\"col3\", col3);\n        df.addColumn(\"counts\", counts);\n        df.addColumn(\"oCounts\", oCounts);\n\n        List<String> explanationAttributes = Arrays.asList(\n                \"col1\",\n                \"col2\",\n                \"col3\"\n        );\n        APLOutlierSummarizer summ = new APLOutlierSummarizer(false);\n        summ.setCountColumn(\"counts\");\n        summ.setOutlierColumn(\"oCounts\");\n        summ.setMinSupport(.1);\n        summ.setMinRatioMetric(3.0);\n        summ.setAttributes(explanationAttributes);\n        summ.process(df);\n        APLExplanation e = summ.getResults();\n        assertEquals(1, e.getResults().size());\n        assertTrue(e.prettyPrint().contains(\"col1=a1\"));\n        assertEquals(47.0, e.numOutliers(), 1e-10);\n    }", "signature": "void testCubeOrder3()", "full_signature": "@Test public void testCubeOrder3()", "class_method_signature": "APLOutlierSummarizerTest.testCubeOrder3()", "testcase": true, "constructor": false, "invocations": ["addColumn", "addColumn", "addColumn", "addColumn", "addColumn", "asList", "setCountColumn", "setOutlierColumn", "setMinSupport", "setMinRatioMetric", "setAttributes", "process", "getResults", "assertEquals", "size", "getResults", "assertTrue", "contains", "prettyPrint", "assertEquals", "numOutliers"]}, "focal_class": {"identifier": "APLOutlierSummarizer", "superclass": "extends APLSummarizer", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(\"APLOutlierSummarizer\");", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(\"APLOutlierSummarizer\")", "var_name": "log"}, {"original_string": "private String countColumn = null;", "modifier": "private", "type": "String", "declarator": "countColumn = null", "var_name": "countColumn"}, {"original_string": "private boolean useBitmaps;", "modifier": "private", "type": "boolean", "declarator": "useBitmaps", "var_name": "useBitmaps"}], "methods": [{"identifier": "APLOutlierSummarizer", "parameters": "(boolean useBitmaps)", "modifiers": "public", "return": "", "signature": " APLOutlierSummarizer(boolean useBitmaps)", "full_signature": "public  APLOutlierSummarizer(boolean useBitmaps)", "class_method_signature": "APLOutlierSummarizer.APLOutlierSummarizer(boolean useBitmaps)", "testcase": false, "constructor": true}, {"identifier": "getAggregateNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAggregateNames()", "full_signature": "@Override public List<String> getAggregateNames()", "class_method_signature": "APLOutlierSummarizer.getAggregateNames()", "testcase": false, "constructor": false}, {"identifier": "getAggregationOps", "parameters": "()", "modifiers": "@Override public", "return": "AggregationOp[]", "signature": "AggregationOp[] getAggregationOps()", "full_signature": "@Override public AggregationOp[] getAggregationOps()", "class_method_signature": "APLOutlierSummarizer.getAggregationOps()", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "(List<String[]> columns, DataFrame input)", "modifiers": "@Override public", "return": "int[][]", "signature": "int[][] getEncoded(List<String[]> columns, DataFrame input)", "full_signature": "@Override public int[][] getEncoded(List<String[]> columns, DataFrame input)", "class_method_signature": "APLOutlierSummarizer.getEncoded(List<String[]> columns, DataFrame input)", "testcase": false, "constructor": false}, {"identifier": "getAggregateColumns", "parameters": "(DataFrame input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getAggregateColumns(DataFrame input)", "full_signature": "@Override public double[][] getAggregateColumns(DataFrame input)", "class_method_signature": "APLOutlierSummarizer.getAggregateColumns(DataFrame input)", "testcase": false, "constructor": false}, {"identifier": "getQualityMetricList", "parameters": "()", "modifiers": "@Override public", "return": "List<QualityMetric>", "signature": "List<QualityMetric> getQualityMetricList()", "full_signature": "@Override public List<QualityMetric> getQualityMetricList()", "class_method_signature": "APLOutlierSummarizer.getQualityMetricList()", "testcase": false, "constructor": false}, {"identifier": "getThresholds", "parameters": "()", "modifiers": "@Override public", "return": "List<Double>", "signature": "List<Double> getThresholds()", "full_signature": "@Override public List<Double> getThresholds()", "class_method_signature": "APLOutlierSummarizer.getThresholds()", "testcase": false, "constructor": false}, {"identifier": "getNumberOutliers", "parameters": "(double[][] aggregates)", "modifiers": "@Override public", "return": "double", "signature": "double getNumberOutliers(double[][] aggregates)", "full_signature": "@Override public double getNumberOutliers(double[][] aggregates)", "class_method_signature": "APLOutlierSummarizer.getNumberOutliers(double[][] aggregates)", "testcase": false, "constructor": false}, {"identifier": "getCountColumn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCountColumn()", "full_signature": "public String getCountColumn()", "class_method_signature": "APLOutlierSummarizer.getCountColumn()", "testcase": false, "constructor": false}, {"identifier": "setCountColumn", "parameters": "(String countColumn)", "modifiers": "public", "return": "void", "signature": "void setCountColumn(String countColumn)", "full_signature": "public void setCountColumn(String countColumn)", "class_method_signature": "APLOutlierSummarizer.setCountColumn(String countColumn)", "testcase": false, "constructor": false}, {"identifier": "getMinRatioMetric", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinRatioMetric()", "full_signature": "public double getMinRatioMetric()", "class_method_signature": "APLOutlierSummarizer.getMinRatioMetric()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLOutlierSummarizer.java"}, "focal_method": {"identifier": "setCountColumn", "parameters": "(String countColumn)", "modifiers": "public", "return": "void", "body": "public void setCountColumn(String countColumn) {\n        this.countColumn = countColumn;\n    }", "signature": "void setCountColumn(String countColumn)", "full_signature": "public void setCountColumn(String countColumn)", "class_method_signature": "APLOutlierSummarizer.setCountColumn(String countColumn)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}