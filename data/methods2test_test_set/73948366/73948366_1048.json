{"test_class": {"identifier": "ZTSAuthorizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/ZTSAuthorizerTest.java"}, "test_case": {"identifier": "testAccessInvalidResourceDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccessInvalidResourceDomain() {\n        ZTSAuthorizer authz = new ZTSAuthorizer(null);\n\n        Authority authority = Mockito.mock(Authority.class);\n        Mockito.when(authority.allowAuthorization()).thenReturn(true);\n\n        Principal principal = Mockito.mock(Principal.class);\n        Mockito.when(principal.getAuthority()).thenReturn(authority);\n\n        try {\n            authz.access(\"op\", \"invalid-resource\", principal, null);\n            fail();\n        } catch (ResourceException ex) {\n            assertEquals(ex.getCode(), 404);\n        }\n    }", "signature": "void testAccessInvalidResourceDomain()", "full_signature": "@Test public void testAccessInvalidResourceDomain()", "class_method_signature": "ZTSAuthorizerTest.testAccessInvalidResourceDomain()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "allowAuthorization", "mock", "thenReturn", "when", "getAuthority", "access", "fail", "assertEquals", "getCode"]}, "focal_class": {"identifier": "ZTSAuthorizer", "superclass": "", "interfaces": "implements Authorizer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZTSAuthorizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZTSAuthorizer.class)", "var_name": "LOGGER"}, {"original_string": "final protected DataStore dataStore;", "modifier": "final protected", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "final protected ZTSGroupMembersFetcher groupMembersFetcher;", "modifier": "final protected", "type": "ZTSGroupMembersFetcher", "declarator": "groupMembersFetcher", "var_name": "groupMembersFetcher"}], "methods": [{"identifier": "ZTSAuthorizer", "parameters": "(final DataStore dataStore)", "modifiers": "public", "return": "", "signature": " ZTSAuthorizer(final DataStore dataStore)", "full_signature": "public  ZTSAuthorizer(final DataStore dataStore)", "class_method_signature": "ZTSAuthorizer.ZTSAuthorizer(final DataStore dataStore)", "testcase": false, "constructor": true}, {"identifier": "access", "parameters": "(String op, String resource, Principal principal, String trustDomain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean access(String op, String resource, Principal principal, String trustDomain)", "full_signature": "@Override public boolean access(String op, String resource, Principal principal, String trustDomain)", "class_method_signature": "ZTSAuthorizer.access(String op, String resource, Principal principal, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "evaluateAccess", "parameters": "(DataCache domain, String identity, String op, String resource,\n            String trustDomain)", "modifiers": "", "return": "AccessStatus", "signature": "AccessStatus evaluateAccess(DataCache domain, String identity, String op, String resource,\n            String trustDomain)", "full_signature": " AccessStatus evaluateAccess(DataCache domain, String identity, String op, String resource,\n            String trustDomain)", "class_method_signature": "ZTSAuthorizer.evaluateAccess(DataCache domain, String identity, String op, String resource,\n            String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "assertionMatch", "parameters": "(com.yahoo.athenz.zms.Assertion assertion, String identity, String op,\n            String resource, List<Role> roles, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean assertionMatch(com.yahoo.athenz.zms.Assertion assertion, String identity, String op,\n            String resource, List<Role> roles, String trustDomain)", "full_signature": " boolean assertionMatch(com.yahoo.athenz.zms.Assertion assertion, String identity, String op,\n            String resource, List<Role> roles, String trustDomain)", "class_method_signature": "ZTSAuthorizer.assertionMatch(com.yahoo.athenz.zms.Assertion assertion, String identity, String op,\n            String resource, List<Role> roles, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "matchPrincipal", "parameters": "(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "full_signature": " boolean matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "class_method_signature": "ZTSAuthorizer.matchPrincipal(List<Role> roles, String rolePattern, String fullUser, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "matchPrincipalInRole", "parameters": "(Role role, String roleName, String fullUser, String trustDomain)", "modifiers": "", "return": "boolean", "signature": "boolean matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "full_signature": " boolean matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "class_method_signature": "ZTSAuthorizer.matchPrincipalInRole(Role role, String roleName, String fullUser, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "delegatedTrust", "parameters": "(String domainName, String roleName, String roleMember)", "modifiers": "", "return": "boolean", "signature": "boolean delegatedTrust(String domainName, String roleName, String roleMember)", "full_signature": " boolean delegatedTrust(String domainName, String roleName, String roleMember)", "class_method_signature": "ZTSAuthorizer.delegatedTrust(String domainName, String roleName, String roleMember)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/ZTSAuthorizer.java"}, "focal_method": {"identifier": "access", "parameters": "(String op, String resource, Principal principal, String trustDomain)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean access(String op, String resource, Principal principal, String trustDomain) {\n        \n        // for consistent handling of all requests, we're going to convert\n        // all incoming object values into lower case (e.g. domain, role,\n        // policy, service, etc name)\n        \n        resource = resource.toLowerCase();\n        if (trustDomain != null) {\n            trustDomain = trustDomain.toLowerCase();\n        }\n        op = op.toLowerCase();\n        \n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"access:({}, {}, {}, {})\", op, resource, principal, trustDomain);\n        }\n        \n        // check to see if the authority is allowed to be processed in\n        // authorization checks. If this value is false then the principal\n        // must get a usertoken from ZMS first and the submit the request\n        // with that token\n        \n        if (!AuthzHelper.authorityAuthorizationAllowed(principal)) {\n            LOGGER.error(\"Authority is not allowed to support authorization checks\");\n            return false;\n        }\n        \n        // retrieve our domain based on resource and action/trustDomain pair\n        // we want to provider better error reporting to the users so if we get a\n        // request where the domain is not found instead of just returning 403\n        // forbidden (which is confusing since it assumes the user doesn't have\n        // access as oppose to possible mistype of the domain name by the user)\n        // we want to return 404 not found. The rest_core has special handling\n        // for rest.ResourceExceptions so we'll throw that exception in this\n        // special case of not found domains.\n        \n        String domainName = AuthzHelper.retrieveResourceDomain(resource, op, trustDomain);\n        if (domainName == null) {\n            throw new ResourceException(ResourceException.NOT_FOUND,\n                    new ResourceError().code(ResourceException.NOT_FOUND).message(\"Domain not found\"));\n        }\n        DataCache domain = dataStore.getDataCache(domainName);\n        if (domain == null) {\n            throw new ResourceException(ResourceException.NOT_FOUND,\n                    new ResourceError().code(ResourceException.NOT_FOUND).message(\"Domain not found\"));\n        }\n        \n        AccessStatus accessStatus = evaluateAccess(domain, principal.getFullName(), op, resource, trustDomain);\n        return accessStatus == AccessStatus.ALLOWED;\n    }", "signature": "boolean access(String op, String resource, Principal principal, String trustDomain)", "full_signature": "@Override public boolean access(String op, String resource, Principal principal, String trustDomain)", "class_method_signature": "ZTSAuthorizer.access(String op, String resource, Principal principal, String trustDomain)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "toLowerCase", "toLowerCase", "isDebugEnabled", "debug", "authorityAuthorizationAllowed", "error", "retrieveResourceDomain", "message", "code", "getDataCache", "message", "code", "evaluateAccess", "getFullName"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}