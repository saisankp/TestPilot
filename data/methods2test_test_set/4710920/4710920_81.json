{"test_class": {"identifier": "ScriptRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL SCRIPT_URL = URL.valueOf(\"script://javascript?type=javascript\");", "modifier": "private", "type": "URL", "declarator": "SCRIPT_URL = URL.valueOf(\"script://javascript?type=javascript\")", "var_name": "SCRIPT_URL"}], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterTest.java"}, "test_case": {"identifier": "testRouteHostFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRouteHostFilter() {\n        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n        MockInvoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.1:20880/com.dubbo.HelloService\"));\n        MockInvoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.2:20880/com.dubbo.HelloService\"));\n        MockInvoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.3:20880/com.dubbo.HelloService\"));\n        invokers.add(invoker1);\n        invokers.add(invoker2);\n        invokers.add(invoker3);\n\n        String script = \"function route(invokers, invocation, context){ \" +\n                \"\tvar result = new java.util.ArrayList(invokers.size()); \" +\n                \"\tvar targetHost = new java.util.ArrayList(); \" +\n                \"\ttargetHost.add(\\\"10.134.108.2\\\"); \" +\n                \"\tfor (var i = 0; i < invokers.length; i++) { \" +\n                \"\t\tif(targetHost.contains(invokers[i].getUrl().getHost())){ \" +\n                \"\t\t\tresult.add(invokers[i]); \" +\n                \"\t\t} \" +\n                \"\t} \" +\n                \"\treturn result; \" +\n                \"} \" +\n                \"route(invokers, invocation, context) \";\n\n        Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));\n        List<Invoker<String>> routeResult = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n        Assertions.assertEquals(1, routeResult.size());\n        Assertions.assertEquals(invoker2, routeResult.get(0));\n    }", "signature": "void testRouteHostFilter()", "full_signature": "@Test public void testRouteHostFilter()", "class_method_signature": "ScriptRouterTest.testRouteHostFilter()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "add", "add", "add", "getRouter", "getRouteUrl", "route", "getUrl", "get", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "ScriptRouter", "superclass": "extends AbstractRouter", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"SCRIPT_ROUTER\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"SCRIPT_ROUTER\"", "var_name": "NAME"}, {"original_string": "private static final int SCRIPT_ROUTER_DEFAULT_PRIORITY = 0;", "modifier": "private static final", "type": "int", "declarator": "SCRIPT_ROUTER_DEFAULT_PRIORITY = 0", "var_name": "SCRIPT_ROUTER_DEFAULT_PRIORITY"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ScriptRouter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ScriptRouter.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, ScriptEngine> ENGINES = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, ScriptEngine>", "declarator": "ENGINES = new ConcurrentHashMap<>()", "var_name": "ENGINES"}, {"original_string": "private final ScriptEngine engine;", "modifier": "private final", "type": "ScriptEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "private final String rule;", "modifier": "private final", "type": "String", "declarator": "rule", "var_name": "rule"}, {"original_string": "private CompiledScript function;", "modifier": "private", "type": "CompiledScript", "declarator": "function", "var_name": "function"}], "methods": [{"identifier": "ScriptRouter", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " ScriptRouter(URL url)", "full_signature": "public  ScriptRouter(URL url)", "class_method_signature": "ScriptRouter.ScriptRouter(URL url)", "testcase": false, "constructor": true}, {"identifier": "getRule", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String getRule(URL url)", "full_signature": "private String getRule(URL url)", "class_method_signature": "ScriptRouter.getRule(URL url)", "testcase": false, "constructor": false}, {"identifier": "getEngine", "parameters": "(URL url)", "modifiers": "private", "return": "ScriptEngine", "signature": "ScriptEngine getEngine(URL url)", "full_signature": "private ScriptEngine getEngine(URL url)", "class_method_signature": "ScriptRouter.getEngine(URL url)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "ScriptRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getRoutedInvokers", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> getRoutedInvokers(Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<Invoker<T>> getRoutedInvokers(Object obj)", "class_method_signature": "ScriptRouter.getRoutedInvokers(Object obj)", "testcase": false, "constructor": false}, {"identifier": "createBindings", "parameters": "(List<Invoker<T>> invokers, Invocation invocation)", "modifiers": "private", "return": "Bindings", "signature": "Bindings createBindings(List<Invoker<T>> invokers, Invocation invocation)", "full_signature": "private Bindings createBindings(List<Invoker<T>> invokers, Invocation invocation)", "class_method_signature": "ScriptRouter.createBindings(List<Invoker<T>> invokers, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isRuntime", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRuntime()", "full_signature": "@Override public boolean isRuntime()", "class_method_signature": "ScriptRouter.isRuntime()", "testcase": false, "constructor": false}, {"identifier": "isForce", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isForce()", "full_signature": "@Override public boolean isForce()", "class_method_signature": "ScriptRouter.isForce()", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouter.java"}, "focal_method": {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "List<Invoker<T>>", "body": "@Override\n    public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        try {\n            Bindings bindings = createBindings(invokers, invocation);\n            if (function == null) {\n                return invokers;\n            }\n            return getRoutedInvokers(function.eval(bindings));\n        } catch (ScriptException e) {\n            logger.error(\"route error, rule has been ignored. rule: \" + rule + \", method:\" +\n                    invocation.getMethodName() + \", url: \" + RpcContext.getContext().getUrl(), e);\n            return invokers;\n        }\n    }", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "ScriptRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["createBindings", "getRoutedInvokers", "eval", "error", "getMethodName", "getUrl", "getContext"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}