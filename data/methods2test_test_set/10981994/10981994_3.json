{"test_class": {"identifier": "RibbonClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final TestName testName = new TestName();", "modifier": "@Rule\n  public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Rule\n  public final MockWebServer server1 = new MockWebServer();", "modifier": "@Rule\n  public final", "type": "MockWebServer", "declarator": "server1 = new MockWebServer()", "var_name": "server1"}, {"original_string": "@Rule\n  public final MockWebServer server2 = new MockWebServer();", "modifier": "@Rule\n  public final", "type": "MockWebServer", "declarator": "server2 = new MockWebServer()", "var_name": "server2"}, {"original_string": "private static String oldRetryConfig = null;", "modifier": "private static", "type": "String", "declarator": "oldRetryConfig = null", "var_name": "oldRetryConfig"}, {"original_string": "private static final String SUN_RETRY_PROPERTY = \"sun.net.http.retryPost\";", "modifier": "private static final", "type": "String", "declarator": "SUN_RETRY_PROPERTY = \"sun.net.http.retryPost\"", "var_name": "SUN_RETRY_PROPERTY"}], "file": "ribbon/src/test/java/feign/ribbon/RibbonClientTest.java"}, "test_case": {"identifier": "testCleanUrlWithMatchingHostAndPart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCleanUrlWithMatchingHostAndPart() throws IOException {\n    URI uri = RibbonClient.cleanUrl(\"http://questions/questions/answer/123\", \"questions\");\n    assertEquals(\"http:///questions/answer/123\", uri.toString());\n  }", "signature": "void testCleanUrlWithMatchingHostAndPart()", "full_signature": "@Test public void testCleanUrlWithMatchingHostAndPart()", "class_method_signature": "RibbonClientTest.testCleanUrlWithMatchingHostAndPart()", "testcase": true, "constructor": false, "invocations": ["cleanUrl", "assertEquals", "toString"]}, "focal_class": {"identifier": "RibbonClient", "superclass": "", "interfaces": "implements Client", "fields": [{"original_string": "private final Client delegate;", "modifier": "private final", "type": "Client", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final LBClientFactory lbClientFactory;", "modifier": "private final", "type": "LBClientFactory", "declarator": "lbClientFactory", "var_name": "lbClientFactory"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "RibbonClient", "signature": "RibbonClient create()", "full_signature": "public static RibbonClient create()", "class_method_signature": "RibbonClient.create()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "RibbonClient.builder()", "testcase": false, "constructor": false}, {"identifier": "RibbonClient", "parameters": "()", "modifiers": "@Deprecated public", "return": "", "signature": " RibbonClient()", "full_signature": "@Deprecated public  RibbonClient()", "class_method_signature": "RibbonClient.RibbonClient()", "testcase": false, "constructor": true}, {"identifier": "RibbonClient", "parameters": "(Client delegate)", "modifiers": "@Deprecated public", "return": "", "signature": " RibbonClient(Client delegate)", "full_signature": "@Deprecated public  RibbonClient(Client delegate)", "class_method_signature": "RibbonClient.RibbonClient(Client delegate)", "testcase": false, "constructor": true}, {"identifier": "RibbonClient", "parameters": "(Client delegate, LBClientFactory lbClientFactory)", "modifiers": "", "return": "", "signature": " RibbonClient(Client delegate, LBClientFactory lbClientFactory)", "full_signature": "  RibbonClient(Client delegate, LBClientFactory lbClientFactory)", "class_method_signature": "RibbonClient.RibbonClient(Client delegate, LBClientFactory lbClientFactory)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Request request, Request.Options options)", "modifiers": "@Override public", "return": "Response", "signature": "Response execute(Request request, Request.Options options)", "full_signature": "@Override public Response execute(Request request, Request.Options options)", "class_method_signature": "RibbonClient.execute(Request request, Request.Options options)", "testcase": false, "constructor": false}, {"identifier": "propagateFirstIOException", "parameters": "(Throwable throwable)", "modifiers": "static", "return": "void", "signature": "void propagateFirstIOException(Throwable throwable)", "full_signature": "static void propagateFirstIOException(Throwable throwable)", "class_method_signature": "RibbonClient.propagateFirstIOException(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "cleanUrl", "parameters": "(String originalUrl, String host)", "modifiers": "static", "return": "URI", "signature": "URI cleanUrl(String originalUrl, String host)", "full_signature": "static URI cleanUrl(String originalUrl, String host)", "class_method_signature": "RibbonClient.cleanUrl(String originalUrl, String host)", "testcase": false, "constructor": false}, {"identifier": "lbClient", "parameters": "(String clientName)", "modifiers": "private", "return": "LBClient", "signature": "LBClient lbClient(String clientName)", "full_signature": "private LBClient lbClient(String clientName)", "class_method_signature": "RibbonClient.lbClient(String clientName)", "testcase": false, "constructor": false}], "file": "ribbon/src/main/java/feign/ribbon/RibbonClient.java"}, "focal_method": {"identifier": "cleanUrl", "parameters": "(String originalUrl, String host)", "modifiers": "static", "return": "URI", "body": "static URI cleanUrl(String originalUrl, String host) {\n    return URI.create(originalUrl.replaceFirst(host, \"\"));\n  }", "signature": "URI cleanUrl(String originalUrl, String host)", "full_signature": "static URI cleanUrl(String originalUrl, String host)", "class_method_signature": "RibbonClient.cleanUrl(String originalUrl, String host)", "testcase": false, "constructor": false, "invocations": ["create", "replaceFirst"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}