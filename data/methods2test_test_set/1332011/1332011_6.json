{"test_class": {"identifier": "InternalGitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TestingDir testdir = new TestingDir();", "modifier": "@Rule\n    public", "type": "TestingDir", "declarator": "testdir = new TestingDir()", "var_name": "testdir"}], "file": "sdkfido/src/test/java/net/erdfelt/android/sdkfido/git/internal/InternalGitTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClone() throws Throwable {\n        testdir.ensureEmpty();\n\n        File repodir = testdir.getFile(\"repo\");\n        FS.ensureDirExists(repodir);\n\n        InternalGit repo = new InternalGit(repodir, new GitMirrors());\n        Assert.assertThat(\"repo.exist()\", repo.exists(), is(false));\n\n        String url = \"http://joakim.erdfelt.com/git/clone-empty-jar.git\";\n        repo.setMonitor(new TerseProgressMonitor());\n        repo.clone(url);\n\n        Assert.assertThat(\"repo.getCurrentBranch()\", repo.getCurrentBranch(), is(\"refs/heads/master\"));\n    }", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "InternalGitTest.testClone()", "testcase": true, "constructor": false, "invocations": ["ensureEmpty", "getFile", "ensureDirExists", "assertThat", "exists", "is", "setMonitor", "clone", "assertThat", "getCurrentBranch", "is"]}, "focal_class": {"identifier": "InternalGit", "superclass": "", "interfaces": "implements IGit", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n    private static final Logger LOG = Logger.getLogger(InternalGit.class.getName());", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(InternalGit.class.getName())", "var_name": "LOG"}, {"original_string": "private File                repoDirectory;", "modifier": "private", "type": "File", "declarator": "repoDirectory", "var_name": "repoDirectory"}, {"original_string": "private FileRepository      repo;", "modifier": "private", "type": "FileRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private ProgressMonitor     progressMonitor;", "modifier": "private", "type": "ProgressMonitor", "declarator": "progressMonitor", "var_name": "progressMonitor"}, {"original_string": "private GitMirrors          mirrors;", "modifier": "private", "type": "GitMirrors", "declarator": "mirrors", "var_name": "mirrors"}], "methods": [{"identifier": "InternalGit", "parameters": "(File workDirectory, GitMirrors mirrors)", "modifiers": "public", "return": "", "signature": " InternalGit(File workDirectory, GitMirrors mirrors)", "full_signature": "public  InternalGit(File workDirectory, GitMirrors mirrors)", "class_method_signature": "InternalGit.InternalGit(File workDirectory, GitMirrors mirrors)", "testcase": false, "constructor": true}, {"identifier": "checkoutBranch", "parameters": "(String branchName)", "modifiers": "@Override public", "return": "void", "signature": "void checkoutBranch(String branchName)", "full_signature": "@Override public void checkoutBranch(String branchName)", "class_method_signature": "InternalGit.checkoutBranch(String branchName)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(String url)", "modifiers": "@Override public", "return": "void", "signature": "void clone(String url)", "full_signature": "@Override public void clone(String url)", "class_method_signature": "InternalGit.clone(String url)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists()", "full_signature": "@Override public boolean exists()", "class_method_signature": "InternalGit.exists()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBranch", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCurrentBranch()", "full_signature": "@Override public String getCurrentBranch()", "class_method_signature": "InternalGit.getCurrentBranch()", "testcase": false, "constructor": false}, {"identifier": "getProgressMonitor", "parameters": "()", "modifiers": "public", "return": "ProgressMonitor", "signature": "ProgressMonitor getProgressMonitor()", "full_signature": "public ProgressMonitor getProgressMonitor()", "class_method_signature": "InternalGit.getProgressMonitor()", "testcase": false, "constructor": false}, {"identifier": "getRepo", "parameters": "()", "modifiers": "public", "return": "Repository", "signature": "Repository getRepo()", "full_signature": "public Repository getRepo()", "class_method_signature": "InternalGit.getRepo()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "RepositoryState", "signature": "RepositoryState getState()", "full_signature": "public RepositoryState getState()", "class_method_signature": "InternalGit.getState()", "testcase": false, "constructor": false}, {"identifier": "pullRemote", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void pullRemote()", "full_signature": "@Override public void pullRemote()", "class_method_signature": "InternalGit.pullRemote()", "testcase": false, "constructor": false}, {"identifier": "setMonitor", "parameters": "(ProgressMonitor progressMonitor)", "modifiers": "public", "return": "void", "signature": "void setMonitor(ProgressMonitor progressMonitor)", "full_signature": "public void setMonitor(ProgressMonitor progressMonitor)", "class_method_signature": "InternalGit.setMonitor(ProgressMonitor progressMonitor)", "testcase": false, "constructor": false}, {"identifier": "getDir", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getDir()", "full_signature": "@Override public File getDir()", "class_method_signature": "InternalGit.getDir()", "testcase": false, "constructor": false}], "file": "sdkfido/src/main/java/net/erdfelt/android/sdkfido/git/internal/InternalGit.java"}, "focal_method": {"identifier": "clone", "parameters": "(String url)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void clone(String url) throws GitException {\n        try {\n            GitCloneCommand command = new GitCloneCommand(repo);\n            command.setProgressMonitor(getProgressMonitor());\n            String giturl = mirrors.getNewUrl(url);\n            command.setRemoteUrl(giturl);\n            command.call();\n        } catch (Throwable t) {\n            throw new GitException(t.getMessage(), t);\n        }\n    }", "signature": "void clone(String url)", "full_signature": "@Override public void clone(String url)", "class_method_signature": "InternalGit.clone(String url)", "testcase": false, "constructor": false, "invocations": ["setProgressMonitor", "getProgressMonitor", "getNewUrl", "setRemoteUrl", "call", "getMessage"]}, "repository": {"repo_id": 1332011, "url": "https://github.com/joakime/android-sdkfido", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 984, "license": "licensed"}}