{"test_class": {"identifier": "AgendaItemBoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AgendaItemBo testObject;", "modifier": "private", "type": "AgendaItemBo", "declarator": "testObject", "var_name": "testObject"}, {"original_string": "@Mock\n    KrmsTypeRepositoryService mockKrmsTypeRepositoryService;", "modifier": "@Mock", "type": "KrmsTypeRepositoryService", "declarator": "mockKrmsTypeRepositoryService", "var_name": "mockKrmsTypeRepositoryService"}, {"original_string": "@Mock\n    DataObjectService mockDataObjectService;", "modifier": "@Mock", "type": "DataObjectService", "declarator": "mockDataObjectService", "var_name": "mockDataObjectService"}, {"original_string": "@Mock\n    RepositoryBoIncrementer mockRepositoryBoIncrementer;", "modifier": "@Mock", "type": "RepositoryBoIncrementer", "declarator": "mockRepositoryBoIncrementer", "var_name": "mockRepositoryBoIncrementer"}, {"original_string": "@Mock\n    RuleBo mockRuleBo;", "modifier": "@Mock", "type": "RuleBo", "declarator": "mockRuleBo", "var_name": "mockRuleBo"}], "file": "rice-middleware/krms/impl/src/test/java/org/kuali/rice/krms/impl/repository/AgendaItemBoTest.java"}, "test_case": {"identifier": "testFromNullParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromNullParameter() {\n        assertNull(testObject.from(null));\n    }", "signature": "void testFromNullParameter()", "full_signature": "@Test public void testFromNullParameter()", "class_method_signature": "AgendaItemBoTest.testFromNullParameter()", "testcase": true, "constructor": false, "invocations": ["assertNull", "from"]}, "focal_class": {"identifier": "AgendaItemBo", "superclass": "", "interfaces": "implements AgendaItemDefinitionContract, Versioned, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String COPY_OF_TEXT = \"Copy of \";", "modifier": "public static final", "type": "String", "declarator": "COPY_OF_TEXT = \"Copy of \"", "var_name": "COPY_OF_TEXT"}, {"original_string": "public static final String AGENDA_ITEM_SEQ_NAME = \"KRMS_AGENDA_ITM_S\";", "modifier": "public static final", "type": "String", "declarator": "AGENDA_ITEM_SEQ_NAME = \"KRMS_AGENDA_ITM_S\"", "var_name": "AGENDA_ITEM_SEQ_NAME"}, {"original_string": "static RepositoryBoIncrementer agendaItemIdIncrementer = new RepositoryBoIncrementer(AGENDA_ITEM_SEQ_NAME);", "modifier": "static", "type": "RepositoryBoIncrementer", "declarator": "agendaItemIdIncrementer = new RepositoryBoIncrementer(AGENDA_ITEM_SEQ_NAME)", "var_name": "agendaItemIdIncrementer"}, {"original_string": "@Transient\n    private transient DataObjectService dataObjectService = null;", "modifier": "@Transient\n    private transient", "type": "DataObjectService", "declarator": "dataObjectService = null", "var_name": "dataObjectService"}, {"original_string": "@Transient\n    private transient KrmsTypeRepositoryService krmsTypeRepositoryService = null;", "modifier": "@Transient\n    private transient", "type": "KrmsTypeRepositoryService", "declarator": "krmsTypeRepositoryService = null", "var_name": "krmsTypeRepositoryService"}, {"original_string": "@PortableSequenceGenerator(name = AGENDA_ITEM_SEQ_NAME)\n    @GeneratedValue(generator = AGENDA_ITEM_SEQ_NAME)\n    @Id\n    @Column(name = \"AGENDA_ITM_ID\")\n    private String id;", "modifier": "@PortableSequenceGenerator(name = AGENDA_ITEM_SEQ_NAME)\n    @GeneratedValue(generator = AGENDA_ITEM_SEQ_NAME)\n    @Id\n    @Column(name = \"AGENDA_ITM_ID\")\n    private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "@Column(name = \"AGENDA_ID\")\n    private String agendaId;", "modifier": "@Column(name = \"AGENDA_ID\")\n    private", "type": "String", "declarator": "agendaId", "var_name": "agendaId"}, {"original_string": "@Column(name = \"SUB_AGENDA_ID\")\n    private String subAgendaId;", "modifier": "@Column(name = \"SUB_AGENDA_ID\")\n    private", "type": "String", "declarator": "subAgendaId", "var_name": "subAgendaId"}, {"original_string": "@Column(name = \"WHEN_TRUE\", insertable = false, updatable = false)\n    private String whenTrueId;", "modifier": "@Column(name = \"WHEN_TRUE\", insertable = false, updatable = false)\n    private", "type": "String", "declarator": "whenTrueId", "var_name": "whenTrueId"}, {"original_string": "@Column(name = \"WHEN_FALSE\", insertable = false, updatable = false)\n    private String whenFalseId;", "modifier": "@Column(name = \"WHEN_FALSE\", insertable = false, updatable = false)\n    private", "type": "String", "declarator": "whenFalseId", "var_name": "whenFalseId"}, {"original_string": "@Column(name = \"ALWAYS\", insertable = false, updatable = false)\n    private String alwaysId;", "modifier": "@Column(name = \"ALWAYS\", insertable = false, updatable = false)\n    private", "type": "String", "declarator": "alwaysId", "var_name": "alwaysId"}, {"original_string": "@ManyToOne(targetEntity = RuleBo.class, fetch = FetchType.LAZY, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.REMOVE, CascadeType.PERSIST})\n    @JoinColumn(name = \"RULE_ID\", referencedColumnName = \"RULE_ID\")\n    private RuleBo rule;", "modifier": "@ManyToOne(targetEntity = RuleBo.class, fetch = FetchType.LAZY, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.REMOVE, CascadeType.PERSIST})\n    @JoinColumn(name = \"RULE_ID\", referencedColumnName = \"RULE_ID\")\n    private", "type": "RuleBo", "declarator": "rule", "var_name": "rule"}, {"original_string": "@Column(name = \"VER_NBR\")\n    @Version\n    private Long versionNumber;", "modifier": "@Column(name = \"VER_NBR\")\n    @Version\n    private", "type": "Long", "declarator": "versionNumber", "var_name": "versionNumber"}, {"original_string": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"WHEN_TRUE\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private AgendaItemBo whenTrue;", "modifier": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"WHEN_TRUE\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private", "type": "AgendaItemBo", "declarator": "whenTrue", "var_name": "whenTrue"}, {"original_string": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"WHEN_FALSE\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private AgendaItemBo whenFalse;", "modifier": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"WHEN_FALSE\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private", "type": "AgendaItemBo", "declarator": "whenFalse", "var_name": "whenFalse"}, {"original_string": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"ALWAYS\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private AgendaItemBo always;", "modifier": "@ManyToOne(targetEntity = AgendaItemBo.class, cascade = { CascadeType.REFRESH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REMOVE })\n    @JoinColumn(name = \"ALWAYS\", referencedColumnName = \"AGENDA_ITM_ID\")\n    private", "type": "AgendaItemBo", "declarator": "always", "var_name": "always"}], "methods": [{"identifier": "getUl", "parameters": "(AgendaItemBo firstItem)", "modifiers": "public", "return": "String", "signature": "String getUl(AgendaItemBo firstItem)", "full_signature": "public String getUl(AgendaItemBo firstItem)", "class_method_signature": "AgendaItemBo.getUl(AgendaItemBo firstItem)", "testcase": false, "constructor": false}, {"identifier": "getUlHelper", "parameters": "(AgendaItemBo item)", "modifiers": "public", "return": "String", "signature": "String getUlHelper(AgendaItemBo item)", "full_signature": "public String getUlHelper(AgendaItemBo item)", "class_method_signature": "AgendaItemBo.getUlHelper(AgendaItemBo item)", "testcase": false, "constructor": false}, {"identifier": "getRuleText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRuleText()", "full_signature": "public String getRuleText()", "class_method_signature": "AgendaItemBo.getRuleText()", "testcase": false, "constructor": false}, {"identifier": "getAlwaysList", "parameters": "()", "modifiers": "public", "return": "List<AgendaItemBo>", "signature": "List<AgendaItemBo> getAlwaysList()", "full_signature": "public List<AgendaItemBo> getAlwaysList()", "class_method_signature": "AgendaItemBo.getAlwaysList()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "AgendaItemBo.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void setId(String id)", "full_signature": "public void setId(String id)", "class_method_signature": "AgendaItemBo.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "getAgendaId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAgendaId()", "full_signature": "@Override public String getAgendaId()", "class_method_signature": "AgendaItemBo.getAgendaId()", "testcase": false, "constructor": false}, {"identifier": "setAgendaId", "parameters": "(String agendaId)", "modifiers": "public", "return": "void", "signature": "void setAgendaId(String agendaId)", "full_signature": "public void setAgendaId(String agendaId)", "class_method_signature": "AgendaItemBo.setAgendaId(String agendaId)", "testcase": false, "constructor": false}, {"identifier": "getRuleId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRuleId()", "full_signature": "@Override public String getRuleId()", "class_method_signature": "AgendaItemBo.getRuleId()", "testcase": false, "constructor": false}, {"identifier": "getSubAgendaId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSubAgendaId()", "full_signature": "@Override public String getSubAgendaId()", "class_method_signature": "AgendaItemBo.getSubAgendaId()", "testcase": false, "constructor": false}, {"identifier": "setSubAgendaId", "parameters": "(String subAgendaId)", "modifiers": "public", "return": "void", "signature": "void setSubAgendaId(String subAgendaId)", "full_signature": "public void setSubAgendaId(String subAgendaId)", "class_method_signature": "AgendaItemBo.setSubAgendaId(String subAgendaId)", "testcase": false, "constructor": false}, {"identifier": "getWhenTrueId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getWhenTrueId()", "full_signature": "@Override public String getWhenTrueId()", "class_method_signature": "AgendaItemBo.getWhenTrueId()", "testcase": false, "constructor": false}, {"identifier": "setWhenTrueId", "parameters": "(String whenTrueId)", "modifiers": "public", "return": "void", "signature": "void setWhenTrueId(String whenTrueId)", "full_signature": "public void setWhenTrueId(String whenTrueId)", "class_method_signature": "AgendaItemBo.setWhenTrueId(String whenTrueId)", "testcase": false, "constructor": false}, {"identifier": "getWhenFalseId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getWhenFalseId()", "full_signature": "@Override public String getWhenFalseId()", "class_method_signature": "AgendaItemBo.getWhenFalseId()", "testcase": false, "constructor": false}, {"identifier": "setWhenFalseId", "parameters": "(String whenFalseId)", "modifiers": "public", "return": "void", "signature": "void setWhenFalseId(String whenFalseId)", "full_signature": "public void setWhenFalseId(String whenFalseId)", "class_method_signature": "AgendaItemBo.setWhenFalseId(String whenFalseId)", "testcase": false, "constructor": false}, {"identifier": "getAlwaysId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAlwaysId()", "full_signature": "@Override public String getAlwaysId()", "class_method_signature": "AgendaItemBo.getAlwaysId()", "testcase": false, "constructor": false}, {"identifier": "setAlwaysId", "parameters": "(String alwaysId)", "modifiers": "public", "return": "void", "signature": "void setAlwaysId(String alwaysId)", "full_signature": "public void setAlwaysId(String alwaysId)", "class_method_signature": "AgendaItemBo.setAlwaysId(String alwaysId)", "testcase": false, "constructor": false}, {"identifier": "getVersionNumber", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getVersionNumber()", "full_signature": "@Override public Long getVersionNumber()", "class_method_signature": "AgendaItemBo.getVersionNumber()", "testcase": false, "constructor": false}, {"identifier": "setVersionNumber", "parameters": "(Long versionNumber)", "modifiers": "public", "return": "void", "signature": "void setVersionNumber(Long versionNumber)", "full_signature": "public void setVersionNumber(Long versionNumber)", "class_method_signature": "AgendaItemBo.setVersionNumber(Long versionNumber)", "testcase": false, "constructor": false}, {"identifier": "getWhenTrue", "parameters": "()", "modifiers": "@Override public", "return": "AgendaItemBo", "signature": "AgendaItemBo getWhenTrue()", "full_signature": "@Override public AgendaItemBo getWhenTrue()", "class_method_signature": "AgendaItemBo.getWhenTrue()", "testcase": false, "constructor": false}, {"identifier": "setWhenTrue", "parameters": "(AgendaItemBo whenTrue)", "modifiers": "public", "return": "void", "signature": "void setWhenTrue(AgendaItemBo whenTrue)", "full_signature": "public void setWhenTrue(AgendaItemBo whenTrue)", "class_method_signature": "AgendaItemBo.setWhenTrue(AgendaItemBo whenTrue)", "testcase": false, "constructor": false}, {"identifier": "getWhenFalse", "parameters": "()", "modifiers": "@Override public", "return": "AgendaItemBo", "signature": "AgendaItemBo getWhenFalse()", "full_signature": "@Override public AgendaItemBo getWhenFalse()", "class_method_signature": "AgendaItemBo.getWhenFalse()", "testcase": false, "constructor": false}, {"identifier": "setWhenFalse", "parameters": "(AgendaItemBo whenFalse)", "modifiers": "public", "return": "void", "signature": "void setWhenFalse(AgendaItemBo whenFalse)", "full_signature": "public void setWhenFalse(AgendaItemBo whenFalse)", "class_method_signature": "AgendaItemBo.setWhenFalse(AgendaItemBo whenFalse)", "testcase": false, "constructor": false}, {"identifier": "getAlways", "parameters": "()", "modifiers": "@Override public", "return": "AgendaItemBo", "signature": "AgendaItemBo getAlways()", "full_signature": "@Override public AgendaItemBo getAlways()", "class_method_signature": "AgendaItemBo.getAlways()", "testcase": false, "constructor": false}, {"identifier": "setAlways", "parameters": "(AgendaItemBo always)", "modifiers": "public", "return": "void", "signature": "void setAlways(AgendaItemBo always)", "full_signature": "public void setAlways(AgendaItemBo always)", "class_method_signature": "AgendaItemBo.setAlways(AgendaItemBo always)", "testcase": false, "constructor": false}, {"identifier": "getRule", "parameters": "()", "modifiers": "@Override public", "return": "RuleBo", "signature": "RuleBo getRule()", "full_signature": "@Override public RuleBo getRule()", "class_method_signature": "AgendaItemBo.getRule()", "testcase": false, "constructor": false}, {"identifier": "getSubAgenda", "parameters": "()", "modifiers": "@Override public", "return": "AgendaDefinitionContract", "signature": "AgendaDefinitionContract getSubAgenda()", "full_signature": "@Override public AgendaDefinitionContract getSubAgenda()", "class_method_signature": "AgendaItemBo.getSubAgenda()", "testcase": false, "constructor": false}, {"identifier": "setRule", "parameters": "(RuleBo rule)", "modifiers": "public", "return": "void", "signature": "void setRule(RuleBo rule)", "full_signature": "public void setRule(RuleBo rule)", "class_method_signature": "AgendaItemBo.setRule(RuleBo rule)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(AgendaItemBo bo)", "modifiers": "static", "return": "AgendaItemDefinition", "signature": "AgendaItemDefinition to(AgendaItemBo bo)", "full_signature": "static AgendaItemDefinition to(AgendaItemBo bo)", "class_method_signature": "AgendaItemBo.to(AgendaItemBo bo)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(AgendaItemDefinition im)", "modifiers": "public static", "return": "AgendaItemBo", "signature": "AgendaItemBo from(AgendaItemDefinition im)", "full_signature": "public static AgendaItemBo from(AgendaItemDefinition im)", "class_method_signature": "AgendaItemBo.from(AgendaItemDefinition im)", "testcase": false, "constructor": false}, {"identifier": "copyAgendaItem", "parameters": "(AgendaBo copiedAgenda, Map<String, RuleBo> oldRuleIdToNew, Map<String, AgendaItemBo> oldAgendaItemIdToNew, List<AgendaItemBo> copiedAgendaItems, final String dts)", "modifiers": "public", "return": "AgendaItemBo", "signature": "AgendaItemBo copyAgendaItem(AgendaBo copiedAgenda, Map<String, RuleBo> oldRuleIdToNew, Map<String, AgendaItemBo> oldAgendaItemIdToNew, List<AgendaItemBo> copiedAgendaItems, final String dts)", "full_signature": "public AgendaItemBo copyAgendaItem(AgendaBo copiedAgenda, Map<String, RuleBo> oldRuleIdToNew, Map<String, AgendaItemBo> oldAgendaItemIdToNew, List<AgendaItemBo> copiedAgendaItems, final String dts)", "class_method_signature": "AgendaItemBo.copyAgendaItem(AgendaBo copiedAgenda, Map<String, RuleBo> oldRuleIdToNew, Map<String, AgendaItemBo> oldAgendaItemIdToNew, List<AgendaItemBo> copiedAgendaItems, final String dts)", "testcase": false, "constructor": false}, {"identifier": "getDataObjectService", "parameters": "()", "modifiers": "public", "return": "DataObjectService", "signature": "DataObjectService getDataObjectService()", "full_signature": "public DataObjectService getDataObjectService()", "class_method_signature": "AgendaItemBo.getDataObjectService()", "testcase": false, "constructor": false}, {"identifier": "setDataObjectService", "parameters": "(DataObjectService dataObjectService)", "modifiers": "public", "return": "void", "signature": "void setDataObjectService(DataObjectService dataObjectService)", "full_signature": "public void setDataObjectService(DataObjectService dataObjectService)", "class_method_signature": "AgendaItemBo.setDataObjectService(DataObjectService dataObjectService)", "testcase": false, "constructor": false}, {"identifier": "getKrmsTypeRepositoryService", "parameters": "()", "modifiers": "public", "return": "KrmsTypeRepositoryService", "signature": "KrmsTypeRepositoryService getKrmsTypeRepositoryService()", "full_signature": "public KrmsTypeRepositoryService getKrmsTypeRepositoryService()", "class_method_signature": "AgendaItemBo.getKrmsTypeRepositoryService()", "testcase": false, "constructor": false}, {"identifier": "setKrmsTypeRepositoryService", "parameters": "(KrmsTypeRepositoryService dataObjectService)", "modifiers": "public", "return": "void", "signature": "void setKrmsTypeRepositoryService(KrmsTypeRepositoryService dataObjectService)", "full_signature": "public void setKrmsTypeRepositoryService(KrmsTypeRepositoryService dataObjectService)", "class_method_signature": "AgendaItemBo.setKrmsTypeRepositoryService(KrmsTypeRepositoryService dataObjectService)", "testcase": false, "constructor": false}], "file": "rice-middleware/krms/impl/src/main/java/org/kuali/rice/krms/impl/repository/AgendaItemBo.java"}, "focal_method": {"identifier": "from", "parameters": "(AgendaItemDefinition im)", "modifiers": "public static", "return": "AgendaItemBo", "body": "public static AgendaItemBo from(AgendaItemDefinition im) {\n        if (im == null) {\n            return null;\n        }\n\n        AgendaItemBo bo = new AgendaItemBo();\n        bo.id = im.getId();\n        bo.agendaId = im.getAgendaId();\n        bo.subAgendaId = im.getSubAgendaId();\n        bo.whenTrueId = im.getWhenTrueId();\n        bo.whenFalseId = im.getWhenFalseId();\n        bo.alwaysId = im.getAlwaysId();\n        bo.versionNumber = im.getVersionNumber();\n        bo.rule = RuleBo.from(im.getRule());\n        bo.whenTrue = AgendaItemBo.from(im.getWhenTrue());\n        bo.whenFalse = AgendaItemBo.from(im.getWhenFalse());\n        bo.always = AgendaItemBo.from(im.getAlways());\n\n        return bo;\n    }", "signature": "AgendaItemBo from(AgendaItemDefinition im)", "full_signature": "public static AgendaItemBo from(AgendaItemDefinition im)", "class_method_signature": "AgendaItemBo.from(AgendaItemDefinition im)", "testcase": false, "constructor": false, "invocations": ["getId", "getAgendaId", "getSubAgendaId", "getWhenTrueId", "getWhenFalseId", "getAlwaysId", "getVersionNumber", "from", "getRule", "from", "getWhenTrue", "from", "getWhenFalse", "from", "getAlways"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}