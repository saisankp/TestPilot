{"test_class": {"identifier": "BboxTest", "superclass": "", "interfaces": "", "fields": [], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/model/BboxTest.java"}, "test_case": {"identifier": "testGetPoints", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPoints() {\n\t\tBbox testBox = new Bbox();\n\t\ttestBox.setBbox(10, 11, 20, 21);\n\t\tPair<Pair<Double,Double>,Pair<Double,Double>> points = Bbox.getPoints(testBox);\n\t\tassertEquals(new Double(10), points.getLeft().getLeft());\n\t\tassertEquals(new Double(11), points.getLeft().getRight());\n\t\tassertEquals(new Double(20), points.getRight().getLeft());\n\t\tassertEquals(new Double(21), points.getRight().getRight());\n\t}", "signature": "void testGetPoints()", "full_signature": "@Test public void testGetPoints()", "class_method_signature": "BboxTest.testGetPoints()", "testcase": true, "constructor": false, "invocations": ["setBbox", "getPoints", "assertEquals", "getLeft", "getLeft", "assertEquals", "getRight", "getLeft", "assertEquals", "getLeft", "getRight", "assertEquals", "getRight", "getRight"]}, "focal_class": {"identifier": "Bbox", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Bbox.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Bbox.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final int SRID = 4326;", "modifier": "public static final", "type": "int", "declarator": "SRID = 4326", "var_name": "SRID"}, {"original_string": "public static final String BOX_FORMAT = \"BOX(%f %f, %f %f)\";", "modifier": "public static final", "type": "String", "declarator": "BOX_FORMAT = \"BOX(%f %f, %f %f)\"", "var_name": "BOX_FORMAT"}, {"original_string": "private transient int id;", "modifier": "private transient", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private String bbox;", "modifier": "private", "type": "String", "declarator": "bbox", "var_name": "bbox"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(name = \"id\") public", "return": "int", "signature": "int getId()", "full_signature": "@Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(name = \"id\") public int getId()", "class_method_signature": "Bbox.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void setId(int id)", "full_signature": "public void setId(int id)", "class_method_signature": "Bbox.setId(int id)", "testcase": false, "constructor": false}, {"identifier": "getBbox", "parameters": "()", "modifiers": "@Column(name = \"bbox\", columnDefinition = \"box2d\") public", "return": "String", "signature": "String getBbox()", "full_signature": "@Column(name = \"bbox\", columnDefinition = \"box2d\") public String getBbox()", "class_method_signature": "Bbox.getBbox()", "testcase": false, "constructor": false}, {"identifier": "setBbox", "parameters": "(String bbox)", "modifiers": "public", "return": "void", "signature": "void setBbox(String bbox)", "full_signature": "public void setBbox(String bbox)", "class_method_signature": "Bbox.setBbox(String bbox)", "testcase": false, "constructor": false}, {"identifier": "setBbox", "parameters": "(double minX, double minY, double maxX, double maxY)", "modifiers": "public", "return": "void", "signature": "void setBbox(double minX, double minY, double maxX, double maxY)", "full_signature": "public void setBbox(double minX, double minY, double maxX, double maxY)", "class_method_signature": "Bbox.setBbox(double minX, double minY, double maxX, double maxY)", "testcase": false, "constructor": false}, {"identifier": "makeEnvelope", "parameters": "()", "modifiers": "public", "return": "Envelope", "signature": "Envelope makeEnvelope()", "full_signature": "public Envelope makeEnvelope()", "class_method_signature": "Bbox.makeEnvelope()", "testcase": false, "constructor": false}, {"identifier": "getPoints", "parameters": "(Bbox source)", "modifiers": "public static", "return": "Pair<Pair<Double,Double>,Pair<Double,Double>>", "signature": "Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "full_signature": "public static Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "class_method_signature": "Bbox.getPoints(Bbox source)", "testcase": false, "constructor": false}, {"identifier": "copyValues", "parameters": "(Bbox from, Bbox to)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyValues(Bbox from, Bbox to)", "full_signature": "public static Bbox copyValues(Bbox from, Bbox to)", "class_method_signature": "Bbox.copyValues(Bbox from, Bbox to)", "testcase": false, "constructor": false}, {"identifier": "envelopeToPolygon", "parameters": "(Envelope e)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon envelopeToPolygon(Envelope e)", "full_signature": "public static Polygon envelopeToPolygon(Envelope e)", "class_method_signature": "Bbox.envelopeToPolygon(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "copyToSquareBox", "parameters": "(Bbox source)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyToSquareBox(Bbox source)", "full_signature": "public static Bbox copyToSquareBox(Bbox source)", "class_method_signature": "Bbox.copyToSquareBox(Bbox source)", "testcase": false, "constructor": false}, {"identifier": "copyToCRS", "parameters": "(Bbox source, String targetCRS)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyToCRS(Bbox source, String targetCRS)", "full_signature": "public static Bbox copyToCRS(Bbox source, String targetCRS)", "class_method_signature": "Bbox.copyToCRS(Bbox source, String targetCRS)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/model/Bbox.java"}, "focal_method": {"identifier": "getPoints", "parameters": "(Bbox source)", "modifiers": "public static", "return": "Pair<Pair<Double,Double>,Pair<Double,Double>>", "body": "public static Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source) {\n\t\tif (source != null && source.getBbox() != null) {\n\t\t\tPattern pattern = Pattern.compile(\"BOX\\\\(\\\\s*([-\\\\d\\\\.]+)\\\\s+([-\\\\d\\\\.]+)\\\\s*,\\\\s*([-\\\\d\\\\.]+)\\\\s+([-\\\\d\\\\.]+)\\\\s*\\\\)\");\n\t\t\tMatcher matcher = pattern.matcher(source.getBbox());\n\t\t\tif (matcher.matches()) {\n\t\t\t\tdouble minX = Double.parseDouble(matcher.group(1));\n\t\t\t\tdouble minY = Double.parseDouble(matcher.group(2));\n\t\t\t\tdouble maxX = Double.parseDouble(matcher.group(3));\n\t\t\t\tdouble maxY = Double.parseDouble(matcher.group(4));\n\t\t\t\treturn new ImmutablePair<>(new ImmutablePair<>(minX,minY), new ImmutablePair<>(maxX,maxY));\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}", "signature": "Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "full_signature": "public static Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "class_method_signature": "Bbox.getPoints(Bbox source)", "testcase": false, "constructor": false, "invocations": ["getBbox", "compile", "matcher", "getBbox", "matches", "parseDouble", "group", "parseDouble", "group", "parseDouble", "group", "parseDouble", "group"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}