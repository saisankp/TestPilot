{"test_class": {"identifier": "WalCheckerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/tools/WalCheckerTest.java"}, "test_case": {"identifier": "testEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmpty() throws IOException, SystemCheckException {\n    File tempRoot = new File(TestConstant.BASE_OUTPUT_PATH.concat(\"root\"));\n    tempRoot.mkdir();\n\n    try {\n      WalChecker checker = new WalChecker(tempRoot.getAbsolutePath());\n      assertTrue(checker.doCheck().isEmpty());\n    } finally {\n      FileUtils.deleteDirectory(tempRoot);\n    }\n  }", "signature": "void testEmpty()", "full_signature": "@Test public void testEmpty()", "class_method_signature": "WalCheckerTest.testEmpty()", "testcase": true, "constructor": false, "invocations": ["concat", "mkdir", "getAbsolutePath", "assertTrue", "isEmpty", "doCheck", "deleteDirectory"]}, "focal_class": {"identifier": "WalChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WalChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WalChecker.class)", "var_name": "logger"}, {"original_string": "private String walFolder;", "modifier": "private", "type": "String", "declarator": "walFolder", "var_name": "walFolder"}], "methods": [{"identifier": "WalChecker", "parameters": "(String walFolder)", "modifiers": "public", "return": "", "signature": " WalChecker(String walFolder)", "full_signature": "public  WalChecker(String walFolder)", "class_method_signature": "WalChecker.WalChecker(String walFolder)", "testcase": false, "constructor": true}, {"identifier": "doCheck", "parameters": "()", "modifiers": "public", "return": "List<File>", "signature": "List<File> doCheck()", "full_signature": "public List<File> doCheck()", "class_method_signature": "WalChecker.doCheck()", "testcase": false, "constructor": false}, {"identifier": "checkFile", "parameters": "(File walFile)", "modifiers": "private", "return": "boolean", "signature": "boolean checkFile(File walFile)", "full_signature": "private boolean checkFile(File walFile)", "class_method_signature": "WalChecker.checkFile(File walFile)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(List<File> failedFiles)", "modifiers": "public static", "return": "void", "signature": "void report(List<File> failedFiles)", "full_signature": "public static void report(List<File> failedFiles)", "class_method_signature": "WalChecker.report(List<File> failedFiles)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "WalChecker.main(String[] args)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/tools/WalChecker.java"}, "focal_method": {"identifier": "doCheck", "parameters": "()", "modifiers": "public", "return": "List<File>", "body": "public List<File> doCheck() throws SystemCheckException {\n    File walFolderFile = SystemFileFactory.INSTANCE.getFile(walFolder);\n    logger.info(\"Checking folder: {}\", walFolderFile.getAbsolutePath());\n    if(!walFolderFile.exists() || !walFolderFile.isDirectory()) {\n      throw new SystemCheckException(walFolder);\n    }\n\n    File[] storageWalFolders = walFolderFile.listFiles();\n    if (storageWalFolders == null || storageWalFolders.length == 0) {\n      logger.info(\"No sub-directories under the given directory, check ends\");\n      return Collections.emptyList();\n    }\n\n    List<File> failedFiles = new ArrayList<>();\n    for (int dirIndex = 0; dirIndex < storageWalFolders.length; dirIndex++) {\n      File storageWalFolder = storageWalFolders[dirIndex];\n      logger.info(\"Checking the No.{} directory {}\", dirIndex, storageWalFolder.getName());\n      File walFile = SystemFileFactory.INSTANCE.getFile(storageWalFolder, WAL_FILE_NAME);\n      if (!checkFile(walFile)) {\n        failedFiles.add(walFile);\n      }\n    }\n    return failedFiles;\n  }", "signature": "List<File> doCheck()", "full_signature": "public List<File> doCheck()", "class_method_signature": "WalChecker.doCheck()", "testcase": false, "constructor": false, "invocations": ["getFile", "info", "getAbsolutePath", "exists", "isDirectory", "listFiles", "info", "emptyList", "info", "getName", "getFile", "checkFile", "add"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}