{"test_class": {"identifier": "Lookup3HashTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/util/hash/Lookup3HashTest.java"}, "test_case": {"identifier": "testHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHash()\n    {\n        Random r = new Random(0);\n        int[] utf32 = new int[20];\n        tstEquiv(utf32, 0);\n\n        utf32[0] = 0x10000;\n        tstEquiv(utf32, 1);\n        utf32[0] = 0x8000;\n        tstEquiv(utf32, 1);\n        utf32[0] = Character.MAX_CODE_POINT;\n        tstEquiv(utf32, 1);\n\n        for (int iter = 0; iter < 10000; iter++)\n        {\n            int len = r.nextInt(utf32.length + 1);\n            for (int i = 0; i < len; i++)\n            {\n                int codePoint;\n                do\n                {\n                    codePoint = r.nextInt(Character.MAX_CODE_POINT + 1);\n                } while ((codePoint & 0xF800) == 0xD800);  // avoid surrogate code points\n                utf32[i] = codePoint;\n            }\n            // System.out.println(\"len=\"+len + \",\"+utf32[0]+\",\"+utf32[1]);\n            tstEquiv(utf32, len);\n        }\n    }", "signature": "void testHash()", "full_signature": "@Test public void testHash()", "class_method_signature": "Lookup3HashTest.testHash()", "testcase": true, "constructor": false, "invocations": ["tstEquiv", "tstEquiv", "tstEquiv", "tstEquiv", "nextInt", "nextInt", "tstEquiv"]}, "focal_class": {"identifier": "Lookup3Hash", "superclass": "extends Hash", "interfaces": "", "fields": [], "methods": [{"identifier": "lookup3", "parameters": "(int[] k, int offset, int length, int initval)", "modifiers": "@SuppressWarnings(\"fallthrough\") public static", "return": "int", "signature": "int lookup3(int[] k, int offset, int length, int initval)", "full_signature": "@SuppressWarnings(\"fallthrough\") public static int lookup3(int[] k, int offset, int length, int initval)", "class_method_signature": "Lookup3Hash.lookup3(int[] k, int offset, int length, int initval)", "testcase": false, "constructor": false}, {"identifier": "lookup3ycs", "parameters": "(int[] k, int offset, int length, int initval)", "modifiers": "public static", "return": "int", "signature": "int lookup3ycs(int[] k, int offset, int length, int initval)", "full_signature": "public static int lookup3ycs(int[] k, int offset, int length, int initval)", "class_method_signature": "Lookup3Hash.lookup3ycs(int[] k, int offset, int length, int initval)", "testcase": false, "constructor": false}, {"identifier": "lookup3ycs", "parameters": "(CharSequence s, int start, int end, int initval)", "modifiers": "public static", "return": "int", "signature": "int lookup3ycs(CharSequence s, int start, int end, int initval)", "full_signature": "public static int lookup3ycs(CharSequence s, int start, int end, int initval)", "class_method_signature": "Lookup3Hash.lookup3ycs(CharSequence s, int start, int end, int initval)", "testcase": false, "constructor": false}, {"identifier": "lookup3ycs64", "parameters": "(CharSequence s, int start, int end, long initval)", "modifiers": "public static", "return": "long", "signature": "long lookup3ycs64(CharSequence s, int start, int end, long initval)", "full_signature": "public static long lookup3ycs64(CharSequence s, int start, int end, long initval)", "class_method_signature": "Lookup3Hash.lookup3ycs64(CharSequence s, int start, int end, long initval)", "testcase": false, "constructor": false}, {"identifier": "lookup3ycs64", "parameters": "(CharSequence s)", "modifiers": "public static", "return": "long", "signature": "long lookup3ycs64(CharSequence s)", "full_signature": "public static long lookup3ycs64(CharSequence s)", "class_method_signature": "Lookup3Hash.lookup3ycs64(CharSequence s)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(byte[] bytes, int length, int seed)", "modifiers": "@Override public", "return": "int", "signature": "int hash(byte[] bytes, int length, int seed)", "full_signature": "@Override public int hash(byte[] bytes, int length, int seed)", "class_method_signature": "Lookup3Hash.hash(byte[] bytes, int length, int seed)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(byte[] bytes, int length, int seed)", "modifiers": "@Override public", "return": "long", "signature": "long hash64(byte[] bytes, int length, int seed)", "full_signature": "@Override public long hash64(byte[] bytes, int length, int seed)", "class_method_signature": "Lookup3Hash.hash64(byte[] bytes, int length, int seed)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int hash(Object o)", "full_signature": "@Override public int hash(Object o)", "class_method_signature": "Lookup3Hash.hash(Object o)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(Object o)", "modifiers": "@Override public", "return": "long", "signature": "long hash64(Object o)", "full_signature": "@Override public long hash64(Object o)", "class_method_signature": "Lookup3Hash.hash64(Object o)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/util/hash/Lookup3Hash.java"}, "focal_method": {"identifier": "hash", "parameters": "(byte[] bytes, int length, int seed)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hash(byte[] bytes, int length, int seed) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }", "signature": "int hash(byte[] bytes, int length, int seed)", "full_signature": "@Override public int hash(byte[] bytes, int length, int seed)", "class_method_signature": "Lookup3Hash.hash(byte[] bytes, int length, int seed)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}