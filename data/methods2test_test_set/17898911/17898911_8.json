{"test_class": {"identifier": "TimeInstantEditorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    TimeInstantEditor.View timeInstantView;", "modifier": "@Mock", "type": "TimeInstantEditor.View", "declarator": "timeInstantView", "var_name": "timeInstantView"}, {"original_string": "@Mock\n    TimeAmountEditor timeAmountEditor;", "modifier": "@Mock", "type": "TimeAmountEditor", "declarator": "timeAmountEditor", "var_name": "timeAmountEditor"}, {"original_string": "@Mock\n    Command changeCommand;", "modifier": "@Mock", "type": "Command", "declarator": "changeCommand", "var_name": "changeCommand"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/filter/TimeInstantEditorTest.java"}, "test_case": {"identifier": "testChangeTimeMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChangeTimeMode() {\n        when(timeInstantView.getTimeModeSelectedIndex()).thenReturn(TimeInstant.TimeMode.BEGIN.getIndex());\n\n        TimeInstantEditor timeInstantEditor = new TimeInstantEditor(timeInstantView, timeAmountEditor);\n        timeInstantEditor.init(null, changeCommand);\n        timeInstantEditor.changeTimeMode();\n\n        TimeInstant timeInstant = timeInstantEditor.getTimeInstant();\n        assertEquals(timeInstant.getTimeMode(), TimeInstant.TimeMode.BEGIN);\n        verify(changeCommand).execute();\n    }", "signature": "void testChangeTimeMode()", "full_signature": "@Test public void testChangeTimeMode()", "class_method_signature": "TimeInstantEditorTest.testChangeTimeMode()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTimeModeSelectedIndex", "getIndex", "init", "changeTimeMode", "getTimeInstant", "assertEquals", "getTimeMode", "execute", "verify"]}, "focal_class": {"identifier": "TimeInstantEditor", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "static List<DateIntervalType> INTERVAL_TYPES = Arrays.asList(\n            DateIntervalType.MINUTE,\n            DateIntervalType.HOUR,\n            DateIntervalType.DAY,\n            DateIntervalType.MONTH,\n            DateIntervalType.QUARTER,\n            DateIntervalType.YEAR,\n            DateIntervalType.CENTURY,\n            DateIntervalType.MILLENIUM);", "modifier": "static", "type": "List<DateIntervalType>", "declarator": "INTERVAL_TYPES = Arrays.asList(\n            DateIntervalType.MINUTE,\n            DateIntervalType.HOUR,\n            DateIntervalType.DAY,\n            DateIntervalType.MONTH,\n            DateIntervalType.QUARTER,\n            DateIntervalType.YEAR,\n            DateIntervalType.CENTURY,\n            DateIntervalType.MILLENIUM)", "var_name": "INTERVAL_TYPES"}, {"original_string": "View view;", "modifier": "", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "TimeInstant timeInstant = null;", "modifier": "", "type": "TimeInstant", "declarator": "timeInstant = null", "var_name": "timeInstant"}, {"original_string": "TimeAmountEditor timeAmountEditor = null;", "modifier": "", "type": "TimeAmountEditor", "declarator": "timeAmountEditor = null", "var_name": "timeAmountEditor"}, {"original_string": "Command onChangeCommand = new Command() { public void execute() {} };", "modifier": "", "type": "Command", "declarator": "onChangeCommand = new Command() { public void execute() {} }", "var_name": "onChangeCommand"}], "methods": [{"identifier": "TimeInstantEditor", "parameters": "(View view, TimeAmountEditor timeAmountEditor)", "modifiers": "@Inject public", "return": "", "signature": " TimeInstantEditor(View view, TimeAmountEditor timeAmountEditor)", "full_signature": "@Inject public  TimeInstantEditor(View view, TimeAmountEditor timeAmountEditor)", "class_method_signature": "TimeInstantEditor.TimeInstantEditor(View view, TimeAmountEditor timeAmountEditor)", "testcase": false, "constructor": true}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "TimeInstantEditor.asWidget()", "testcase": false, "constructor": false}, {"identifier": "getTimeInstant", "parameters": "()", "modifiers": "public", "return": "TimeInstant", "signature": "TimeInstant getTimeInstant()", "full_signature": "public TimeInstant getTimeInstant()", "class_method_signature": "TimeInstantEditor.getTimeInstant()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(final TimeInstant ti, final Command onChangeCommand)", "modifiers": "public", "return": "void", "signature": "void init(final TimeInstant ti, final Command onChangeCommand)", "full_signature": "public void init(final TimeInstant ti, final Command onChangeCommand)", "class_method_signature": "TimeInstantEditor.init(final TimeInstant ti, final Command onChangeCommand)", "testcase": false, "constructor": false}, {"identifier": "getTimeAmountEditor", "parameters": "()", "modifiers": "public", "return": "TimeAmountEditor", "signature": "TimeAmountEditor getTimeAmountEditor()", "full_signature": "public TimeAmountEditor getTimeAmountEditor()", "class_method_signature": "TimeInstantEditor.getTimeAmountEditor()", "testcase": false, "constructor": false}, {"identifier": "initTimeModeSelector", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initTimeModeSelector()", "full_signature": "protected void initTimeModeSelector()", "class_method_signature": "TimeInstantEditor.initTimeModeSelector()", "testcase": false, "constructor": false}, {"identifier": "initIntervalTypeSelector", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initIntervalTypeSelector()", "full_signature": "protected void initIntervalTypeSelector()", "class_method_signature": "TimeInstantEditor.initIntervalTypeSelector()", "testcase": false, "constructor": false}, {"identifier": "changeTimeMode", "parameters": "()", "modifiers": "", "return": "void", "signature": "void changeTimeMode()", "full_signature": " void changeTimeMode()", "class_method_signature": "TimeInstantEditor.changeTimeMode()", "testcase": false, "constructor": false}, {"identifier": "changeIntervalType", "parameters": "()", "modifiers": "", "return": "void", "signature": "void changeIntervalType()", "full_signature": " void changeIntervalType()", "class_method_signature": "TimeInstantEditor.changeIntervalType()", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/filter/TimeInstantEditor.java"}, "focal_method": {"identifier": "changeTimeMode", "parameters": "()", "modifiers": "", "return": "void", "body": "void changeTimeMode() {\n        int selectedIdx = view.getTimeModeSelectedIndex();\n\n        TimeInstant.TimeMode mode = TimeInstant.TimeMode.getByIndex(selectedIdx);\n        timeInstant.setTimeMode(mode);\n        TimeAmount timeAmount = timeInstant.getTimeAmount();\n        if (timeAmount != null) {\n            timeAmount.setQuantity(0);\n        }\n\n        onChangeCommand.execute();\n        initIntervalTypeSelector();\n    }", "signature": "void changeTimeMode()", "full_signature": " void changeTimeMode()", "class_method_signature": "TimeInstantEditor.changeTimeMode()", "testcase": false, "constructor": false, "invocations": ["getTimeModeSelectedIndex", "getByIndex", "setTimeMode", "getTimeAmount", "setQuantity", "execute", "initIntervalTypeSelector"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}