{"test_class": {"identifier": "ListenerTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IAction<IPath> actionMock;", "modifier": "private", "type": "IAction<IPath>", "declarator": "actionMock", "var_name": "actionMock"}, {"original_string": "private IPath directoryMock;", "modifier": "private", "type": "IPath", "declarator": "directoryMock", "var_name": "directoryMock"}, {"original_string": "private FileSystem fileSystemMock;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystemMock", "var_name": "fileSystemMock"}, {"original_string": "private FileSystemProvider fileSystemProviderMock;", "modifier": "private", "type": "FileSystemProvider", "declarator": "fileSystemProviderMock", "var_name": "fileSystemProviderMock"}, {"original_string": "private WatchService watchServiceMock;", "modifier": "private", "type": "WatchService", "declarator": "watchServiceMock", "var_name": "watchServiceMock"}, {"original_string": "private WatchKey watchKeyMock;", "modifier": "private", "type": "WatchKey", "declarator": "watchKeyMock", "var_name": "watchKeyMock"}, {"original_string": "private WatchEvent event1Mock, event2Mock;", "modifier": "private", "type": "WatchEvent", "declarator": "event1Mock", "var_name": "event1Mock"}, {"original_string": "private java.nio.file.Path directoryPathMock;", "modifier": "private", "type": "java.nio.file.Path", "declarator": "directoryPathMock", "var_name": "directoryPathMock"}], "file": "CoreFeatures/FeatureLoadingSystem/FilesystemTracker/src/test/java/info/smart_tools/smartactors/feature_loading_system/filesystem_tracker/ListenerTaskTest.java"}, "test_case": {"identifier": "Should_wrapActionExceptionsIntoRuntimeExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_wrapActionExceptionsIntoRuntimeExceptions()\n            throws Exception {\n        DirectoryStream directoryStreamMock = mock(DirectoryStream.class);\n        Iterator directoryStreamIteratorMock = mock(Iterator.class);\n        java.nio.file.Path[] filesMock = new java.nio.file.Path[] {\n                mock(java.nio.file.Path.class)\n        };\n\n        when(directoryStreamIteratorMock.hasNext()).thenReturn(true, false);\n        when(directoryStreamIteratorMock.next()).thenReturn(filesMock[0]);\n        when(directoryStreamMock.iterator()).thenReturn(directoryStreamIteratorMock);\n        when(fileSystemProviderMock.newDirectoryStream(any(), any())).thenReturn(directoryStreamMock);\n\n        ListenerTask task = new ListenerTask(directoryMock, actionMock, fileSystemMock);\n\n        doThrow(new ActionExecuteException(\"\")).when(actionMock).execute(any(IPath.class));\n\n        try {\n            task.run();\n            fail();\n        } catch (RuntimeException e) {\n            assertTrue(e.getCause() instanceof ActionExecuteException);\n        }\n    }", "signature": "void Should_wrapActionExceptionsIntoRuntimeExceptions()", "full_signature": "@Test public void Should_wrapActionExceptionsIntoRuntimeExceptions()", "class_method_signature": "ListenerTaskTest.Should_wrapActionExceptionsIntoRuntimeExceptions()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "hasNext", "thenReturn", "when", "next", "thenReturn", "when", "iterator", "thenReturn", "when", "newDirectoryStream", "any", "any", "execute", "when", "doThrow", "any", "run", "fail", "assertTrue", "getCause"]}, "focal_class": {"identifier": "ListenerTask", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private WatchService watchService;", "modifier": "private", "type": "WatchService", "declarator": "watchService", "var_name": "watchService"}, {"original_string": "private IAction<IPath> newFileAction;", "modifier": "private", "type": "IAction<IPath>", "declarator": "newFileAction", "var_name": "newFileAction"}, {"original_string": "private IPath directory;", "modifier": "private", "type": "IPath", "declarator": "directory", "var_name": "directory"}], "methods": [{"identifier": "ListenerTask", "parameters": "(final IPath directory, final IAction<IPath> newFileAction)", "modifiers": "public", "return": "", "signature": " ListenerTask(final IPath directory, final IAction<IPath> newFileAction)", "full_signature": "public  ListenerTask(final IPath directory, final IAction<IPath> newFileAction)", "class_method_signature": "ListenerTask.ListenerTask(final IPath directory, final IAction<IPath> newFileAction)", "testcase": false, "constructor": true}, {"identifier": "ListenerTask", "parameters": "(final IPath directory, final IAction<IPath> newFileAction, final FileSystem fileSystem)", "modifiers": "", "return": "", "signature": " ListenerTask(final IPath directory, final IAction<IPath> newFileAction, final FileSystem fileSystem)", "full_signature": "  ListenerTask(final IPath directory, final IAction<IPath> newFileAction, final FileSystem fileSystem)", "class_method_signature": "ListenerTask.ListenerTask(final IPath directory, final IAction<IPath> newFileAction, final FileSystem fileSystem)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListenerTask.run()", "testcase": false, "constructor": false}, {"identifier": "scanExistFiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanExistFiles()", "full_signature": "private void scanExistFiles()", "class_method_signature": "ListenerTask.scanExistFiles()", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/FilesystemTracker/src/main/java/info/smart_tools/smartactors/feature_loading_system/filesystem_tracker/ListenerTask.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        try (WatchService watcher = watchService) {\n            scanExistFiles();\n\n            for (;;) {\n                WatchKey key = watcher.take();\n\n                for (WatchEvent<?> event : key.pollEvents()) {\n                    if (event.kind() == StandardWatchEventKinds.ENTRY_CREATE) {\n                        Path file = ((Path) event.context());\n                        Path dirAndFile = fileSystem.getPath(directory.getPath()).resolve(file);\n                        newFileAction.execute(new info.smart_tools.smartactors.base.path.Path(dirAndFile));\n                    }\n                }\n\n                if (!key.reset()) {\n                    break;\n                }\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } catch (IOException | ActionExecuteException | InvalidArgumentException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListenerTask.run()", "testcase": false, "constructor": false, "invocations": ["scanExistFiles", "take", "pollEvents", "kind", "context", "resolve", "getPath", "getPath", "execute", "reset", "interrupt", "currentThread"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}