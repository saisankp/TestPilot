{"test_class": {"identifier": "RunningMedianTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private RunningMedian runningMedian;", "modifier": "private", "type": "RunningMedian", "declarator": "runningMedian", "var_name": "runningMedian"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/util/RunningMedianTest.java"}, "test_case": {"identifier": "testGetMedian_empty", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testGetMedian_empty() {\n        runningMedian.getMedian();\n    }", "signature": "void testGetMedian_empty()", "full_signature": "@Test(expected = RuntimeException.class) public void testGetMedian_empty()", "class_method_signature": "RunningMedianTest.testGetMedian_empty()", "testcase": true, "constructor": false, "invocations": ["getMedian"]}, "focal_class": {"identifier": "RunningMedian", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PriorityQueue<Double> lowerHalf = new PriorityQueue<>(Collections.reverseOrder());", "modifier": "private final", "type": "PriorityQueue<Double>", "declarator": "lowerHalf = new PriorityQueue<>(Collections.reverseOrder())", "var_name": "lowerHalf"}, {"original_string": "private final PriorityQueue<Double> upperHalf = new PriorityQueue<>();", "modifier": "private final", "type": "PriorityQueue<Double>", "declarator": "upperHalf = new PriorityQueue<>()", "var_name": "upperHalf"}], "methods": [{"identifier": "add", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void add(double value)", "full_signature": "public void add(double value)", "class_method_signature": "RunningMedian.add(double value)", "testcase": false, "constructor": false}, {"identifier": "getMedian", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMedian()", "full_signature": "public double getMedian()", "class_method_signature": "RunningMedian.getMedian()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/util/RunningMedian.java"}, "focal_method": {"identifier": "getMedian", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getMedian() {\n        if (upperHalf.isEmpty() && lowerHalf.isEmpty()) {\n            throw new RuntimeException(\"Add values before getting the median\");\n        }\n\n        if (upperHalf.size() > lowerHalf.size()) {\n            return upperHalf.peek();\n        } else if (lowerHalf.size() > upperHalf.size()) {\n            return lowerHalf.peek();\n        } else {\n            return 0.5 * (lowerHalf.peek() + upperHalf.peek());\n        }\n    }", "signature": "double getMedian()", "full_signature": "public double getMedian()", "class_method_signature": "RunningMedian.getMedian()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "size", "size", "peek", "size", "size", "peek", "peek", "peek"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}