{"test_class": {"identifier": "BuildProjectTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/BuildProjectTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExecute() throws Exception {\n    // Given\n    final BuildProjectCommandMode buildProjectCommandMode = mock(BuildProjectCommandMode.class);\n    final Function<Options, BuildProjectCommandMode> factory = options -> buildProjectCommandMode;\n    final BuildProject buildProject = new BuildProject();\n    buildProject.setCommandFactory(factory);\n\n    // When\n    buildProject.execute();\n\n    // Then\n    verify(buildProjectCommandMode).execute();\n  }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "BuildProjectTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["mock", "setCommandFactory", "execute", "execute", "verify"]}, "focal_class": {"identifier": "BuildProject", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "protected static final int COMMAND_MODE = 1;", "modifier": "protected static final", "type": "int", "declarator": "COMMAND_MODE = 1", "var_name": "COMMAND_MODE"}, {"original_string": "protected static final int CONSOLE_MODE = 2;", "modifier": "protected static final", "type": "int", "declarator": "CONSOLE_MODE = 2", "var_name": "CONSOLE_MODE"}, {"original_string": "protected static final int WEB_MODE = 3;", "modifier": "protected static final", "type": "int", "declarator": "WEB_MODE = 3", "var_name": "WEB_MODE"}, {"original_string": "@Getter\n  @Setter\n  protected Function<Options, BuildProjectCommandMode> commandFactory = options -> {\n    switch (options.getMode()) {\n      case COMMAND_MODE:\n        return new BuildProjectCommandMode();\n      case WEB_MODE:\n        return new BuildProjectWebMode(options.getPort());\n      case CONSOLE_MODE:\n        return new BuildProjectConsoleMode();\n      default:\n        throw new IllegalStateException();\n    }\n  };", "modifier": "@Getter\n  @Setter\n  protected", "type": "Function<Options, BuildProjectCommandMode>", "declarator": "commandFactory = options -> {\n    switch (options.getMode()) {\n      case COMMAND_MODE:\n        return new BuildProjectCommandMode();\n      case WEB_MODE:\n        return new BuildProjectWebMode(options.getPort());\n      case CONSOLE_MODE:\n        return new BuildProjectConsoleMode();\n      default:\n        throw new IllegalStateException();\n    }\n  }", "var_name": "commandFactory"}, {"original_string": "@Getter\n  protected BuildDetails lastBuildResult;", "modifier": "@Getter\n  protected", "type": "BuildDetails", "declarator": "lastBuildResult", "var_name": "lastBuildResult"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "BuildProject.execute()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/BuildProject.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    logger.trace(\"Starting {}...\", this);\n    final Options options = parse(new Options());\n    final BuildProjectCommandMode buildProjectCommandMode = commandFactory.apply(options);\n    buildProjectCommandMode.setPrinter(getPrinter());\n    buildProjectCommandMode.execute();\n    this.lastBuildResult = buildProjectCommandMode.getLastBuildResult();\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "BuildProject.execute()", "testcase": false, "constructor": false, "invocations": ["trace", "parse", "apply", "setPrinter", "getPrinter", "execute", "getLastBuildResult"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}