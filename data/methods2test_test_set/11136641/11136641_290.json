{"test_class": {"identifier": "LdapUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPECTED_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G,OU=I,OU=M\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G,OU=I,OU=M\"", "var_name": "EXPECTED_DN_STRING"}, {"original_string": "private static final String EXPECTED_MULTIVALUE_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G+O=GR,OU=I,OU=M\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_MULTIVALUE_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G+O=GR,OU=I,OU=M\"", "var_name": "EXPECTED_MULTIVALUE_DN_STRING"}, {"original_string": "private AttributeValueCallbackHandler handlerMock;", "modifier": "private", "type": "AttributeValueCallbackHandler", "declarator": "handlerMock", "var_name": "handlerMock"}], "file": "core/src/test/java/org/springframework/ldap/support/LdapUtilsTest.java"}, "test_case": {"identifier": "testConvertBinarySidToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertBinarySidToString() throws Exception {\n        byte[] sid = {(byte) 0x01, (byte) 0x05, (byte) 0x00, (byte) 0x00,\n                (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,\n                (byte) 0x15, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n                (byte) 0xe9, (byte) 0x67, (byte) 0xbb, (byte) 0x98,\n                (byte) 0xd6, (byte) 0xb7, (byte) 0xd7, (byte) 0xbf,\n                (byte) 0x82, (byte) 0x05, (byte) 0x1e, (byte) 0x6c,\n                (byte) 0x28, (byte) 0x06, (byte) 0x00, (byte) 0x00};\n        String result = LdapUtils.convertBinarySidToString(sid);\n        assertThat(result).isEqualTo(\"S-1-5-21-2562418665-3218585558-1813906818-1576\");\n    }", "signature": "void testConvertBinarySidToString()", "full_signature": "@Test public void testConvertBinarySidToString()", "class_method_signature": "LdapUtilsTest.testConvertBinarySidToString()", "testcase": true, "constructor": false, "invocations": ["convertBinarySidToString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "LdapUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LdapUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LdapUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final int HEX = 16;", "modifier": "private static final", "type": "int", "declarator": "HEX = 16", "var_name": "HEX"}], "methods": [{"identifier": "LdapUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " LdapUtils()", "full_signature": "private  LdapUtils()", "class_method_signature": "LdapUtils.LdapUtils()", "testcase": false, "constructor": true}, {"identifier": "closeContext", "parameters": "(DirContext context)", "modifiers": "public static", "return": "void", "signature": "void closeContext(DirContext context)", "full_signature": "public static void closeContext(DirContext context)", "class_method_signature": "LdapUtils.closeContext(DirContext context)", "testcase": false, "constructor": false}, {"identifier": "convertLdapException", "parameters": "(javax.naming.NamingException ex)", "modifiers": "public static", "return": "NamingException", "signature": "NamingException convertLdapException(javax.naming.NamingException ex)", "full_signature": "public static NamingException convertLdapException(javax.naming.NamingException ex)", "class_method_signature": "LdapUtils.convertLdapException(javax.naming.NamingException ex)", "testcase": false, "constructor": false}, {"identifier": "getActualTargetClass", "parameters": "(DirContext context)", "modifiers": "public static", "return": "Class", "signature": "Class getActualTargetClass(DirContext context)", "full_signature": "public static Class getActualTargetClass(DirContext context)", "class_method_signature": "LdapUtils.getActualTargetClass(DirContext context)", "testcase": false, "constructor": false}, {"identifier": "collectAttributeValues", "parameters": "(Attributes attributes, String name, Collection<Object> collection)", "modifiers": "public static", "return": "void", "signature": "void collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "full_signature": "public static void collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "class_method_signature": "LdapUtils.collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "testcase": false, "constructor": false}, {"identifier": "collectAttributeValues", "parameters": "(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "modifiers": "public static", "return": "void", "signature": "void collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "full_signature": "public static void collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "class_method_signature": "LdapUtils.collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "iterateAttributeValues", "parameters": "(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "modifiers": "public static", "return": "void", "signature": "void iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "full_signature": "public static void iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "class_method_signature": "LdapUtils.iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "testcase": false, "constructor": false}, {"identifier": "handleAttributeValue", "parameters": "(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "modifiers": "private static", "return": "void", "signature": "void handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "full_signature": "private static void handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "class_method_signature": "LdapUtils.handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "testcase": false, "constructor": false}, {"identifier": "convertCompositeNameToString", "parameters": "(\n\t\t\tCompositeName compositeName)", "modifiers": "public static", "return": "String", "signature": "String convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "full_signature": "public static String convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "class_method_signature": "LdapUtils.convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "testcase": false, "constructor": false}, {"identifier": "newLdapName", "parameters": "(Name name)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName newLdapName(Name name)", "full_signature": "public static LdapName newLdapName(Name name)", "class_method_signature": "LdapUtils.newLdapName(Name name)", "testcase": false, "constructor": false}, {"identifier": "newLdapName", "parameters": "(String distinguishedName)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName newLdapName(String distinguishedName)", "full_signature": "public static LdapName newLdapName(String distinguishedName)", "class_method_signature": "LdapUtils.newLdapName(String distinguishedName)", "testcase": false, "constructor": false}, {"identifier": "returnOrConstructLdapNameFromName", "parameters": "(Name name)", "modifiers": "private static", "return": "LdapName", "signature": "LdapName returnOrConstructLdapNameFromName(Name name)", "full_signature": "private static LdapName returnOrConstructLdapNameFromName(Name name)", "class_method_signature": "LdapUtils.returnOrConstructLdapNameFromName(Name name)", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "(Name dn, Name pathToRemove)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName removeFirst(Name dn, Name pathToRemove)", "full_signature": "public static LdapName removeFirst(Name dn, Name pathToRemove)", "class_method_signature": "LdapUtils.removeFirst(Name dn, Name pathToRemove)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(Name dn, Name pathToPrepend)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName prepend(Name dn, Name pathToPrepend)", "full_signature": "public static LdapName prepend(Name dn, Name pathToPrepend)", "class_method_signature": "LdapUtils.prepend(Name dn, Name pathToPrepend)", "testcase": false, "constructor": false}, {"identifier": "emptyLdapName", "parameters": "()", "modifiers": "public static", "return": "LdapName", "signature": "LdapName emptyLdapName()", "full_signature": "public static LdapName emptyLdapName()", "class_method_signature": "LdapUtils.emptyLdapName()", "testcase": false, "constructor": false}, {"identifier": "getRdn", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "Rdn", "signature": "Rdn getRdn(Name name, String key)", "full_signature": "public static Rdn getRdn(Name name, String key)", "class_method_signature": "LdapUtils.getRdn(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(Name name, String key)", "full_signature": "public static Object getValue(Name name, String key)", "class_method_signature": "LdapUtils.getValue(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Name name, int index)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(Name name, int index)", "full_signature": "public static Object getValue(Name name, int index)", "class_method_signature": "LdapUtils.getValue(Name name, int index)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Name name, int index)", "modifiers": "public static", "return": "String", "signature": "String getStringValue(Name name, int index)", "full_signature": "public static String getStringValue(Name name, int index)", "class_method_signature": "LdapUtils.getStringValue(Name name, int index)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "String", "signature": "String getStringValue(Name name, String key)", "full_signature": "public static String getStringValue(Name name, String key)", "class_method_signature": "LdapUtils.getStringValue(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "convertBinarySidToString", "parameters": "(byte[] sid)", "modifiers": "public static", "return": "String", "signature": "String convertBinarySidToString(byte[] sid)", "full_signature": "public static String convertBinarySidToString(byte[] sid)", "class_method_signature": "LdapUtils.convertBinarySidToString(byte[] sid)", "testcase": false, "constructor": false}, {"identifier": "convertStringSidToBinary", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] convertStringSidToBinary(String string)", "full_signature": "public static byte[] convertStringSidToBinary(String string)", "class_method_signature": "LdapUtils.convertStringSidToBinary(String string)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(byte[] array1, byte[] array2)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] addAll(byte[] array1, byte[] array2)", "full_signature": "private static byte[] addAll(byte[] array1, byte[] array2)", "class_method_signature": "LdapUtils.addAll(byte[] array1, byte[] array2)", "testcase": false, "constructor": false}, {"identifier": "numberToBytes", "parameters": "(String number, int length, boolean bigEndian)", "modifiers": "static", "return": "byte[]", "signature": "byte[] numberToBytes(String number, int length, boolean bigEndian)", "full_signature": "static byte[] numberToBytes(String number, int length, boolean bigEndian)", "class_method_signature": "LdapUtils.numberToBytes(String number, int length, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(byte[] array)", "modifiers": "private static", "return": "void", "signature": "void reverse(byte[] array)", "full_signature": "private static void reverse(byte[] array)", "class_method_signature": "LdapUtils.reverse(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(final byte b)", "modifiers": "static", "return": "String", "signature": "String toHexString(final byte b)", "full_signature": "static String toHexString(final byte b)", "class_method_signature": "LdapUtils.toHexString(final byte b)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(final byte[] b)", "modifiers": "static", "return": "String", "signature": "String toHexString(final byte[] b)", "full_signature": "static String toHexString(final byte[] b)", "class_method_signature": "LdapUtils.toHexString(final byte[] b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java"}, "focal_method": {"identifier": "convertBinarySidToString", "parameters": "(byte[] sid)", "modifiers": "public static", "return": "String", "body": "public static String convertBinarySidToString(byte[] sid) {\n\t\t// Add the 'S' prefix\n\t\tStringBuffer sidAsString = new StringBuffer(\"S-\");\n\n\t\t// bytes[0] : in the array is the version (must be 1 but might\n\t\t// change in the future)\n\t\tsidAsString.append(sid[0]).append('-');\n\n\t\t// bytes[2..7] : the Authority\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor (int t = 2; t <= 7; t++) {\n\t\t\tString hexString = Integer.toHexString(sid[t] & 0xFF);\n\t\t\tsb.append(hexString);\n\t\t}\n\t\tsidAsString.append(Long.parseLong(sb.toString(), HEX));\n\n\t\t// bytes[1] : the sub authorities count\n\t\tint count = sid[1];\n\n\t\t// bytes[8..end] : the sub authorities (these are Integers - notice\n\t\t// the endian)\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tint currSubAuthOffset = i * 4;\n\t\t\tsb.setLength(0);\n\t\t\tsb.append(toHexString((byte) (sid[11 + currSubAuthOffset] & 0xFF)));\n\t\t\tsb.append(toHexString((byte) (sid[10 + currSubAuthOffset] & 0xFF)));\n\t\t\tsb.append(toHexString((byte) (sid[9 + currSubAuthOffset] & 0xFF)));\n\t\t\tsb.append(toHexString((byte) (sid[8 + currSubAuthOffset] & 0xFF)));\n\n\t\t\tsidAsString.append('-').append(Long.parseLong(sb.toString(), HEX));\n\t\t}\n\n\t\t// That's it - we have the SID\n\t\treturn sidAsString.toString();\n\t}", "signature": "String convertBinarySidToString(byte[] sid)", "full_signature": "public static String convertBinarySidToString(byte[] sid)", "class_method_signature": "LdapUtils.convertBinarySidToString(byte[] sid)", "testcase": false, "constructor": false, "invocations": ["append", "append", "toHexString", "append", "append", "parseLong", "toString", "setLength", "append", "toHexString", "append", "toHexString", "append", "toHexString", "append", "toHexString", "append", "append", "parseLong", "toString", "toString"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}