{"test_class": {"identifier": "MustacheRendererTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-request-mustache/src/test/java/org/apache/tiles/request/mustache/MustacheRendererTest.java"}, "test_case": {"identifier": "testRenderException", "parameters": "()", "modifiers": "@Test(expected = CannotRenderException.class) public", "return": "void", "body": "@Test(expected = CannotRenderException.class)\n    public void testRenderException() throws IOException {\n        Request request = createMock(Request.class);\n        replay(request);\n        Renderer renderer = new MustacheRenderer();\n        try {\n            renderer.render(null, request);\n        } finally {\n            verify(request);\n        }\n    }", "signature": "void testRenderException()", "full_signature": "@Test(expected = CannotRenderException.class) public void testRenderException()", "class_method_signature": "MustacheRendererTest.testRenderException()", "testcase": true, "constructor": false, "invocations": ["createMock", "replay", "render", "verify"]}, "focal_class": {"identifier": "MustacheRenderer", "superclass": "", "interfaces": "implements Renderer", "fields": [{"original_string": "private static final ThreadLocal<Request> REQUEST_HOLDER = new ThreadLocal<Request>();", "modifier": "private static final", "type": "ThreadLocal<Request>", "declarator": "REQUEST_HOLDER = new ThreadLocal<Request>()", "var_name": "REQUEST_HOLDER"}, {"original_string": "private final MustacheFactory factory;", "modifier": "private final", "type": "MustacheFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Pattern acceptPattern;", "modifier": "private", "type": "Pattern", "declarator": "acceptPattern", "var_name": "acceptPattern"}], "methods": [{"identifier": "MustacheRenderer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MustacheRenderer()", "full_signature": "public  MustacheRenderer()", "class_method_signature": "MustacheRenderer.MustacheRenderer()", "testcase": false, "constructor": true}, {"identifier": "MustacheRenderer", "parameters": "(MustacheFactory factory)", "modifiers": "public", "return": "", "signature": " MustacheRenderer(MustacheFactory factory)", "full_signature": "public  MustacheRenderer(MustacheFactory factory)", "class_method_signature": "MustacheRenderer.MustacheRenderer(MustacheFactory factory)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "MustacheRenderer.render(String path, Request request)", "testcase": false, "constructor": false}, {"identifier": "getThreadLocalRequest", "parameters": "()", "modifiers": "public static", "return": "Request", "signature": "Request getThreadLocalRequest()", "full_signature": "public static Request getThreadLocalRequest()", "class_method_signature": "MustacheRenderer.getThreadLocalRequest()", "testcase": false, "constructor": false}, {"identifier": "buildScope", "parameters": "(Request request)", "modifiers": "protected", "return": "Map<String,Object>", "signature": "Map<String,Object> buildScope(Request request)", "full_signature": "protected Map<String,Object> buildScope(Request request)", "class_method_signature": "MustacheRenderer.buildScope(Request request)", "testcase": false, "constructor": false}, {"identifier": "isRenderable", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRenderable(String path, Request request)", "full_signature": "@Override public boolean isRenderable(String path, Request request)", "class_method_signature": "MustacheRenderer.isRenderable(String path, Request request)", "testcase": false, "constructor": false}, {"identifier": "setAcceptPattern", "parameters": "(Pattern acceptPattern)", "modifiers": "public final", "return": "void", "signature": "void setAcceptPattern(Pattern acceptPattern)", "full_signature": "public final void setAcceptPattern(Pattern acceptPattern)", "class_method_signature": "MustacheRenderer.setAcceptPattern(Pattern acceptPattern)", "testcase": false, "constructor": false}], "file": "tiles-request-mustache/src/main/java/org/apache/tiles/request/mustache/MustacheRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void render(String path, Request request) throws IOException {\n        if (path == null) {\n            throw new CannotRenderException(\"Cannot dispatch a null path\");\n        }\n\n        try {\n            REQUEST_HOLDER.set(request);\n            factory\n                    .compile(path)\n                    .execute(request.getWriter(), buildScope(request));\n            REQUEST_HOLDER.remove();\n\n        } catch(MustacheException ex) {\n            throw new IOException(\"failed to MustacheRenderer.render(\" + path + \",request)\", ex);\n        }\n    }", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "MustacheRenderer.render(String path, Request request)", "testcase": false, "constructor": false, "invocations": ["set", "execute", "compile", "getWriter", "buildScope", "remove"]}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}