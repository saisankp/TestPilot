{"test_class": {"identifier": "TestDelegateHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DELEGATE_URI = \"/gateleen/server/delegate/v1/delegates/\";", "modifier": "private static final", "type": "String", "declarator": "DELEGATE_URI = \"/gateleen/server/delegate/v1/delegates/\"", "var_name": "DELEGATE_URI"}, {"original_string": "private static DelegateHandler delegateHandler;", "modifier": "private static", "type": "DelegateHandler", "declarator": "delegateHandler", "var_name": "delegateHandler"}], "file": "gateleen-delegate/src/test/java/org/swisspush/gateleen/delegate/TestDelegateHandler.java"}, "test_case": {"identifier": "testGetDelegateName_Recognition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDelegateName_Recognition() {\n        String delegateName = \"aName\";\n\n        // Positive Cases\n        // --------------\n\n        // Case 1: /gateleen/server/delegate/v1/delegates/<name>\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName ));\n\n        // Case 2: /gateleen/server/delegate/v1/delegates/<name>/\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/\"));\n\n        // Case 3: /gateleen/server/delegate/v1/delegates/<name>/execution/xxx\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/execution/xxx\"));\n\n        // Case 4: /gateleen/server/delegate/v1/delegates/<name>/execution/\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/execution/\"));\n\n        // Case 5: /gateleen/server/delegate/v1/delegates/<name>/execution\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/execution\"));\n\n        // Case 6: /gateleen/server/delegate/v1/delegates/<name>/definition\n        Assert.assertEquals(delegateName, delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/definition\"));\n\n        // --------------\n\n        // Negative Cases\n        // --------------\n        // Case 1: /gateleen/server/delegate/v1/delegates/<name>/blah\n        Assert.assertNull(delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/blah\"));\n\n        // Case 2: /gateleen/server/delegate/v1/delegates/<name>/definition/\n        Assert.assertNull(delegateHandler.getDelegateName(DELEGATE_URI + delegateName + \"/definition/\"));\n\n        // --------------\n    }", "signature": "void testGetDelegateName_Recognition()", "full_signature": "@Test public void testGetDelegateName_Recognition()", "class_method_signature": "TestDelegateHandler.testGetDelegateName_Recognition()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDelegateName", "assertEquals", "getDelegateName", "assertEquals", "getDelegateName", "assertEquals", "getDelegateName", "assertEquals", "getDelegateName", "assertEquals", "getDelegateName", "assertNull", "getDelegateName", "assertNull", "getDelegateName"]}, "focal_class": {"identifier": "DelegateHandler", "superclass": "", "interfaces": "implements Refreshable, LoggableResource", "fields": [{"original_string": "private static final String DEFINITION_RESOURCE = \"definition\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_RESOURCE = \"definition\"", "var_name": "DEFINITION_RESOURCE"}, {"original_string": "private static final String EXECUTION_RESOURCE = \"execution\";", "modifier": "private static final", "type": "String", "declarator": "EXECUTION_RESOURCE = \"execution\"", "var_name": "EXECUTION_RESOURCE"}, {"original_string": "private static final String SAVE_DELEGATE_ADDRESS = \"gateleen.delegate-insert\";", "modifier": "private static final", "type": "String", "declarator": "SAVE_DELEGATE_ADDRESS = \"gateleen.delegate-insert\"", "var_name": "SAVE_DELEGATE_ADDRESS"}, {"original_string": "private static final String REMOVE_DELEGATE_ADDRESS = \"gateleen.delegate-remove\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_DELEGATE_ADDRESS = \"gateleen.delegate-remove\"", "var_name": "REMOVE_DELEGATE_ADDRESS"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DelegateHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DelegateHandler.class)", "var_name": "LOG"}, {"original_string": "private static final int NAME_GROUP_INDEX = 1;", "modifier": "private static final", "type": "int", "declarator": "NAME_GROUP_INDEX = 1", "var_name": "NAME_GROUP_INDEX"}, {"original_string": "private static final int MESSAGE_NAME = 0;", "modifier": "private static final", "type": "int", "declarator": "MESSAGE_NAME = 0", "var_name": "MESSAGE_NAME"}, {"original_string": "private static final int MESSAGE_URL = 1;", "modifier": "private static final", "type": "int", "declarator": "MESSAGE_URL = 1", "var_name": "MESSAGE_URL"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final ResourceStorage delegateStorage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "delegateStorage", "var_name": "delegateStorage"}, {"original_string": "private final String delegatesUri;", "modifier": "private final", "type": "String", "declarator": "delegatesUri", "var_name": "delegatesUri"}, {"original_string": "private final DelegateFactory delegateFactory;", "modifier": "private final", "type": "DelegateFactory", "declarator": "delegateFactory", "var_name": "delegateFactory"}, {"original_string": "private final Pattern delegateNamePattern;", "modifier": "private final", "type": "Pattern", "declarator": "delegateNamePattern", "var_name": "delegateNamePattern"}, {"original_string": "private final Map<String, Delegate> delegateMap;", "modifier": "private final", "type": "Map<String, Delegate>", "declarator": "delegateMap", "var_name": "delegateMap"}, {"original_string": "private final Handler<Void> doneHandler;", "modifier": "private final", "type": "Handler<Void>", "declarator": "doneHandler", "var_name": "doneHandler"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private boolean logDelegateChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logDelegateChanges = false", "var_name": "logDelegateChanges"}], "methods": [{"identifier": "DelegateHandler", "parameters": "(final Vertx vertx, final HttpClient selfClient, final ResourceStorage delegateStorage,\n                           final MonitoringHandler monitoringHandler, final String delegatesUri,\n                           final Map<String, Object> properties,\n                           final Handler<Void> doneHandler)", "modifiers": "public", "return": "", "signature": " DelegateHandler(final Vertx vertx, final HttpClient selfClient, final ResourceStorage delegateStorage,\n                           final MonitoringHandler monitoringHandler, final String delegatesUri,\n                           final Map<String, Object> properties,\n                           final Handler<Void> doneHandler)", "full_signature": "public  DelegateHandler(final Vertx vertx, final HttpClient selfClient, final ResourceStorage delegateStorage,\n                           final MonitoringHandler monitoringHandler, final String delegatesUri,\n                           final Map<String, Object> properties,\n                           final Handler<Void> doneHandler)", "class_method_signature": "DelegateHandler.DelegateHandler(final Vertx vertx, final HttpClient selfClient, final ResourceStorage delegateStorage,\n                           final MonitoringHandler monitoringHandler, final String delegatesUri,\n                           final Map<String, Object> properties,\n                           final Handler<Void> doneHandler)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DelegateHandler.init()", "testcase": false, "constructor": false}, {"identifier": "loadStoredDelegates", "parameters": "(Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void loadStoredDelegates(Handler<Void> readyHandler)", "full_signature": "private void loadStoredDelegates(Handler<Void> readyHandler)", "class_method_signature": "DelegateHandler.loadStoredDelegates(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "registerDelegateRegistrationHandler", "parameters": "(Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void registerDelegateRegistrationHandler(Handler<Void> readyHandler)", "full_signature": "private void registerDelegateRegistrationHandler(Handler<Void> readyHandler)", "class_method_signature": "DelegateHandler.registerDelegateRegistrationHandler(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "unregisterDelegate", "parameters": "(String delegateName)", "modifiers": "private", "return": "void", "signature": "void unregisterDelegate(String delegateName)", "full_signature": "private void unregisterDelegate(String delegateName)", "class_method_signature": "DelegateHandler.unregisterDelegate(String delegateName)", "testcase": false, "constructor": false}, {"identifier": "registerDelegate", "parameters": "(final Buffer buffer, final String delegateName)", "modifiers": "private", "return": "void", "signature": "void registerDelegate(final Buffer buffer, final String delegateName)", "full_signature": "private void registerDelegate(final Buffer buffer, final String delegateName)", "class_method_signature": "DelegateHandler.registerDelegate(final Buffer buffer, final String delegateName)", "testcase": false, "constructor": false}, {"identifier": "handleDelegateRegistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleDelegateRegistration(final HttpServerRequest request)", "full_signature": "private void handleDelegateRegistration(final HttpServerRequest request)", "class_method_signature": "DelegateHandler.handleDelegateRegistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleDelegateUnregistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleDelegateUnregistration(final HttpServerRequest request)", "full_signature": "private void handleDelegateUnregistration(final HttpServerRequest request)", "class_method_signature": "DelegateHandler.handleDelegateUnregistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDelegateName", "parameters": "(final String uri)", "modifiers": "protected", "return": "String", "signature": "String getDelegateName(final String uri)", "full_signature": "protected String getDelegateName(final String uri)", "class_method_signature": "DelegateHandler.getDelegateName(final String uri)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handle(final HttpServerRequest request)", "full_signature": "public boolean handle(final HttpServerRequest request)", "class_method_signature": "DelegateHandler.handle(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleDelegateExecution", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleDelegateExecution(final HttpServerRequest request)", "full_signature": "private void handleDelegateExecution(final HttpServerRequest request)", "class_method_signature": "DelegateHandler.handleDelegateExecution(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "DelegateHandler.refresh()", "testcase": false, "constructor": false}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "DelegateHandler.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}], "file": "gateleen-delegate/src/main/java/org/swisspush/gateleen/delegate/DelegateHandler.java"}, "focal_method": {"identifier": "getDelegateName", "parameters": "(final String uri)", "modifiers": "protected", "return": "String", "body": "protected String getDelegateName(final String uri) {\n        /*\n            URI could be:\n                >  /gateleen/server/delegate/v1/delegates/user-zip-copy/definition\n                >  /gateleen/server/delegate/v1/delegates/user-zip-copy/\n                >  /gateleen/server/delegate/v1/delegates/user-zip-copy/execution\n         */\n        Matcher nameMatcher = delegateNamePattern.matcher(uri);\n\n        if ( nameMatcher.matches() ) {\n            return nameMatcher.group(NAME_GROUP_INDEX);\n        }\n\n        return null;\n    }", "signature": "String getDelegateName(final String uri)", "full_signature": "protected String getDelegateName(final String uri)", "class_method_signature": "DelegateHandler.getDelegateName(final String uri)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}