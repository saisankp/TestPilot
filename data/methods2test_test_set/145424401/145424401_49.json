{"test_class": {"identifier": "MetadataTest", "superclass": "", "interfaces": "", "fields": [], "file": "kb-importer/src/test/java/org/eclipse/steady/kb/util/MetadataTest.java"}, "test_case": {"identifier": "testGetVulnMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetVulnMetadata() throws JsonSyntaxException, IOException {\n    ClassLoader classLoader = getClass().getClassLoader();\n    String path = classLoader.getResource(\"testRootDir1\").getPath();\n    Vulnerability vuln = Metadata.getVulnerabilityMetadata(path);\n    assertEquals(3, vuln.getArtifacts().size());\n    assertEquals(3, vuln.getNotes().size());\n    assertEquals(\"COLLECTIONS-580\", vuln.getVulnId());\n  }", "signature": "void testGetVulnMetadata()", "full_signature": "@Test public void testGetVulnMetadata()", "class_method_signature": "MetadataTest.testGetVulnMetadata()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getPath", "getResource", "getVulnerabilityMetadata", "assertEquals", "size", "getArtifacts", "assertEquals", "size", "getNotes", "assertEquals", "getVulnId"]}, "focal_class": {"identifier": "Metadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String META_PROPERTIES_FILE = \"metadata.json\";", "modifier": "private static final", "type": "String", "declarator": "META_PROPERTIES_FILE = \"metadata.json\"", "var_name": "META_PROPERTIES_FILE"}, {"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}], "methods": [{"identifier": "getCommitMetadata", "parameters": "(String commitDir)", "modifiers": "public static", "return": "Commit", "signature": "Commit getCommitMetadata(String commitDir)", "full_signature": "public static Commit getCommitMetadata(String commitDir)", "class_method_signature": "Metadata.getCommitMetadata(String commitDir)", "testcase": false, "constructor": false}, {"identifier": "getVulnerabilityMetadata", "parameters": "(String rootDir)", "modifiers": "public static", "return": "Vulnerability", "signature": "Vulnerability getVulnerabilityMetadata(String rootDir)", "full_signature": "public static Vulnerability getVulnerabilityMetadata(String rootDir)", "class_method_signature": "Metadata.getVulnerabilityMetadata(String rootDir)", "testcase": false, "constructor": false}], "file": "kb-importer/src/main/java/org/eclipse/steady/kb/util/Metadata.java"}, "focal_method": {"identifier": "getVulnerabilityMetadata", "parameters": "(String rootDir)", "modifiers": "public static", "return": "Vulnerability", "body": "public static Vulnerability getVulnerabilityMetadata(String rootDir)\n      throws JsonSyntaxException, IOException {\n    String filePath = rootDir + File.separator + META_PROPERTIES_FILE;\n    if (!FileUtil.isAccessibleFile(filePath)) {\n      throw new IllegalArgumentException(\n          \"The root folder \"\n              + rootDir\n              + \"  or the meta file in root directory is missing \"\n              + filePath);\n    }\n\n    Gson gson = new Gson();\n    Vulnerability metadata = null;\n    metadata = gson.fromJson(FileUtil.readFile(filePath), Vulnerability.class);\n\n    if (StringUtils.isBlank(metadata.getVulnId())) {\n      throw new IllegalArgumentException(\n          \"The vulnerability_id is missing missing in the \" + filePath + \" file\");\n    }\n\n    return metadata;\n  }", "signature": "Vulnerability getVulnerabilityMetadata(String rootDir)", "full_signature": "public static Vulnerability getVulnerabilityMetadata(String rootDir)", "class_method_signature": "Metadata.getVulnerabilityMetadata(String rootDir)", "testcase": false, "constructor": false, "invocations": ["isAccessibleFile", "fromJson", "readFile", "isBlank", "getVulnId"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}