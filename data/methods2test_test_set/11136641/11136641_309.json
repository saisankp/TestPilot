{"test_class": {"identifier": "LdapUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPECTED_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G,OU=I,OU=M\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G,OU=I,OU=M\"", "var_name": "EXPECTED_DN_STRING"}, {"original_string": "private static final String EXPECTED_MULTIVALUE_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G+O=GR,OU=I,OU=M\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_MULTIVALUE_DN_STRING = \"cn=john.doe, OU=Users,OU=SE,OU=G+O=GR,OU=I,OU=M\"", "var_name": "EXPECTED_MULTIVALUE_DN_STRING"}, {"original_string": "private AttributeValueCallbackHandler handlerMock;", "modifier": "private", "type": "AttributeValueCallbackHandler", "declarator": "handlerMock", "var_name": "handlerMock"}], "file": "core/src/test/java/org/springframework/ldap/support/LdapUtilsTest.java"}, "test_case": {"identifier": "testConvertLdapExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertLdapExceptions() {\n\n        // Test the Exceptions in the javax.naming package\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.AttributeInUseException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.AttributeInUseException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.AttributeModificationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AttributeModificationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.CannotProceedException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.CannotProceedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.CommunicationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.CommunicationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.ConfigurationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.ConfigurationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.ContextNotEmptyException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.ContextNotEmptyException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.InsufficientResourcesException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.InsufficientResourcesException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.InterruptedNamingException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.InterruptedNamingException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.InvalidAttributeIdentifierException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidAttributeIdentifierException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.InvalidAttributesException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidAttributesException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.InvalidAttributeValueException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidAttributeValueException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.InvalidNameException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidNameException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.InvalidSearchControlsException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidSearchControlsException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.InvalidSearchFilterException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidSearchFilterException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.SizeLimitExceededException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.SizeLimitExceededException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.TimeLimitExceededException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.TimeLimitExceededException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.LimitExceededException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.LimitExceededException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.LinkLoopException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.LinkLoopException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.MalformedLinkException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.MalformedLinkException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.LinkException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.LinkException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.NameAlreadyBoundException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.NameAlreadyBoundException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.NameNotFoundException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NameNotFoundException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.NoPermissionException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NoPermissionException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils\n\t\t\t\t\t\t.convertLdapException(new javax.naming.AuthenticationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AuthenticationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.AuthenticationNotSupportedException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AuthenticationNotSupportedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.NoInitialContextException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.NoInitialContextException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.NoSuchAttributeException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.NoSuchAttributeException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.NotContextException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NotContextException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.OperationNotSupportedException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.OperationNotSupportedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new javax.naming.PartialResultException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.PartialResultException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.directory.SchemaViolationException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.SchemaViolationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew javax.naming.ServiceUnavailableException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.ServiceUnavailableException.class);\n\n        // Test Exceptions that extend javax.naming packaage extensions\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockAttributeInUseException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AttributeInUseException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockAttributeModificationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AttributeModificationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockCannotProceedException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.CannotProceedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockCommunicationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.CommunicationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockConfigurationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.ConfigurationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockContextNotEmptyException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.ContextNotEmptyException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInsufficientResourcesException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InsufficientResourcesException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInterruptedNamingException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InterruptedNamingException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew MockInvalidAttributeIdentifierException()).getClass())\n\t\t\t\t.isEqualTo(\n\t\t\t\t\t\torg.springframework.ldap.InvalidAttributeIdentifierException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInvalidAttributesException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidAttributesException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInvalidAttributeValueException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidAttributeValueException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInvalidNameException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.InvalidNameException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInvalidSearchControlsException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidSearchControlsException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockInvalidSearchFilterException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.InvalidSearchFilterException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockSizeLimitExceededException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.SizeLimitExceededException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockTimeLimitExceededException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.TimeLimitExceededException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockLimitExceededException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.LimitExceededException.class);\n\t\tassertThat(LdapUtils.convertLdapException(new MockLinkLoopException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.LinkLoopException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockMalformedLinkException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.MalformedLinkException.class);\n\t\tassertThat(LdapUtils.convertLdapException(new MockLinkException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.LinkException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNameAlreadyBoundException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NameAlreadyBoundException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNameNotFoundException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NameNotFoundException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNoPermissionException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NoPermissionException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockAuthenticationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.AuthenticationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(\n\t\t\t\t\t\tnew MockAuthenticationNotSupportedException()).getClass())\n\t\t\t\t.isEqualTo(\n\t\t\t\t\t\torg.springframework.ldap.AuthenticationNotSupportedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNoInitialContextException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NoInitialContextException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNoSuchAttributeException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.NoSuchAttributeException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockNotContextException()).getClass())\n\t\t\t\t.isEqualTo(org.springframework.ldap.NotContextException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockOperationNotSupportedException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.OperationNotSupportedException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockPartialResultException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.PartialResultException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockSchemaViolationException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.SchemaViolationException.class);\n\t\tassertThat(\n\t\t\t\tLdapUtils.convertLdapException(new MockServiceUnavailableException())\n\t\t\t\t\t\t.getClass()).isEqualTo(\n\t\t\t\torg.springframework.ldap.ServiceUnavailableException.class);\n    }", "signature": "void testConvertLdapExceptions()", "full_signature": "@Test public void testConvertLdapExceptions()", "class_method_signature": "LdapUtilsTest.testConvertLdapExceptions()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException", "isEqualTo", "assertThat", "getClass", "convertLdapException"]}, "focal_class": {"identifier": "LdapUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LdapUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LdapUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final int HEX = 16;", "modifier": "private static final", "type": "int", "declarator": "HEX = 16", "var_name": "HEX"}], "methods": [{"identifier": "LdapUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " LdapUtils()", "full_signature": "private  LdapUtils()", "class_method_signature": "LdapUtils.LdapUtils()", "testcase": false, "constructor": true}, {"identifier": "closeContext", "parameters": "(DirContext context)", "modifiers": "public static", "return": "void", "signature": "void closeContext(DirContext context)", "full_signature": "public static void closeContext(DirContext context)", "class_method_signature": "LdapUtils.closeContext(DirContext context)", "testcase": false, "constructor": false}, {"identifier": "convertLdapException", "parameters": "(javax.naming.NamingException ex)", "modifiers": "public static", "return": "NamingException", "signature": "NamingException convertLdapException(javax.naming.NamingException ex)", "full_signature": "public static NamingException convertLdapException(javax.naming.NamingException ex)", "class_method_signature": "LdapUtils.convertLdapException(javax.naming.NamingException ex)", "testcase": false, "constructor": false}, {"identifier": "getActualTargetClass", "parameters": "(DirContext context)", "modifiers": "public static", "return": "Class", "signature": "Class getActualTargetClass(DirContext context)", "full_signature": "public static Class getActualTargetClass(DirContext context)", "class_method_signature": "LdapUtils.getActualTargetClass(DirContext context)", "testcase": false, "constructor": false}, {"identifier": "collectAttributeValues", "parameters": "(Attributes attributes, String name, Collection<Object> collection)", "modifiers": "public static", "return": "void", "signature": "void collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "full_signature": "public static void collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "class_method_signature": "LdapUtils.collectAttributeValues(Attributes attributes, String name, Collection<Object> collection)", "testcase": false, "constructor": false}, {"identifier": "collectAttributeValues", "parameters": "(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "modifiers": "public static", "return": "void", "signature": "void collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "full_signature": "public static void collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "class_method_signature": "LdapUtils.collectAttributeValues(\n            Attributes attributes, String name, Collection<T> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "iterateAttributeValues", "parameters": "(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "modifiers": "public static", "return": "void", "signature": "void iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "full_signature": "public static void iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "class_method_signature": "LdapUtils.iterateAttributeValues(Attribute attribute, AttributeValueCallbackHandler callbackHandler)", "testcase": false, "constructor": false}, {"identifier": "handleAttributeValue", "parameters": "(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "modifiers": "private static", "return": "void", "signature": "void handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "full_signature": "private static void handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "class_method_signature": "LdapUtils.handleAttributeValue(String attributeID, Object value, int i, AttributeValueCallbackHandler callbackHandler)", "testcase": false, "constructor": false}, {"identifier": "convertCompositeNameToString", "parameters": "(\n\t\t\tCompositeName compositeName)", "modifiers": "public static", "return": "String", "signature": "String convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "full_signature": "public static String convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "class_method_signature": "LdapUtils.convertCompositeNameToString(\n\t\t\tCompositeName compositeName)", "testcase": false, "constructor": false}, {"identifier": "newLdapName", "parameters": "(Name name)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName newLdapName(Name name)", "full_signature": "public static LdapName newLdapName(Name name)", "class_method_signature": "LdapUtils.newLdapName(Name name)", "testcase": false, "constructor": false}, {"identifier": "newLdapName", "parameters": "(String distinguishedName)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName newLdapName(String distinguishedName)", "full_signature": "public static LdapName newLdapName(String distinguishedName)", "class_method_signature": "LdapUtils.newLdapName(String distinguishedName)", "testcase": false, "constructor": false}, {"identifier": "returnOrConstructLdapNameFromName", "parameters": "(Name name)", "modifiers": "private static", "return": "LdapName", "signature": "LdapName returnOrConstructLdapNameFromName(Name name)", "full_signature": "private static LdapName returnOrConstructLdapNameFromName(Name name)", "class_method_signature": "LdapUtils.returnOrConstructLdapNameFromName(Name name)", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "(Name dn, Name pathToRemove)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName removeFirst(Name dn, Name pathToRemove)", "full_signature": "public static LdapName removeFirst(Name dn, Name pathToRemove)", "class_method_signature": "LdapUtils.removeFirst(Name dn, Name pathToRemove)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(Name dn, Name pathToPrepend)", "modifiers": "public static", "return": "LdapName", "signature": "LdapName prepend(Name dn, Name pathToPrepend)", "full_signature": "public static LdapName prepend(Name dn, Name pathToPrepend)", "class_method_signature": "LdapUtils.prepend(Name dn, Name pathToPrepend)", "testcase": false, "constructor": false}, {"identifier": "emptyLdapName", "parameters": "()", "modifiers": "public static", "return": "LdapName", "signature": "LdapName emptyLdapName()", "full_signature": "public static LdapName emptyLdapName()", "class_method_signature": "LdapUtils.emptyLdapName()", "testcase": false, "constructor": false}, {"identifier": "getRdn", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "Rdn", "signature": "Rdn getRdn(Name name, String key)", "full_signature": "public static Rdn getRdn(Name name, String key)", "class_method_signature": "LdapUtils.getRdn(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(Name name, String key)", "full_signature": "public static Object getValue(Name name, String key)", "class_method_signature": "LdapUtils.getValue(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Name name, int index)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(Name name, int index)", "full_signature": "public static Object getValue(Name name, int index)", "class_method_signature": "LdapUtils.getValue(Name name, int index)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Name name, int index)", "modifiers": "public static", "return": "String", "signature": "String getStringValue(Name name, int index)", "full_signature": "public static String getStringValue(Name name, int index)", "class_method_signature": "LdapUtils.getStringValue(Name name, int index)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Name name, String key)", "modifiers": "public static", "return": "String", "signature": "String getStringValue(Name name, String key)", "full_signature": "public static String getStringValue(Name name, String key)", "class_method_signature": "LdapUtils.getStringValue(Name name, String key)", "testcase": false, "constructor": false}, {"identifier": "convertBinarySidToString", "parameters": "(byte[] sid)", "modifiers": "public static", "return": "String", "signature": "String convertBinarySidToString(byte[] sid)", "full_signature": "public static String convertBinarySidToString(byte[] sid)", "class_method_signature": "LdapUtils.convertBinarySidToString(byte[] sid)", "testcase": false, "constructor": false}, {"identifier": "convertStringSidToBinary", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] convertStringSidToBinary(String string)", "full_signature": "public static byte[] convertStringSidToBinary(String string)", "class_method_signature": "LdapUtils.convertStringSidToBinary(String string)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(byte[] array1, byte[] array2)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] addAll(byte[] array1, byte[] array2)", "full_signature": "private static byte[] addAll(byte[] array1, byte[] array2)", "class_method_signature": "LdapUtils.addAll(byte[] array1, byte[] array2)", "testcase": false, "constructor": false}, {"identifier": "numberToBytes", "parameters": "(String number, int length, boolean bigEndian)", "modifiers": "static", "return": "byte[]", "signature": "byte[] numberToBytes(String number, int length, boolean bigEndian)", "full_signature": "static byte[] numberToBytes(String number, int length, boolean bigEndian)", "class_method_signature": "LdapUtils.numberToBytes(String number, int length, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(byte[] array)", "modifiers": "private static", "return": "void", "signature": "void reverse(byte[] array)", "full_signature": "private static void reverse(byte[] array)", "class_method_signature": "LdapUtils.reverse(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(final byte b)", "modifiers": "static", "return": "String", "signature": "String toHexString(final byte b)", "full_signature": "static String toHexString(final byte b)", "class_method_signature": "LdapUtils.toHexString(final byte b)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(final byte[] b)", "modifiers": "static", "return": "String", "signature": "String toHexString(final byte[] b)", "full_signature": "static String toHexString(final byte[] b)", "class_method_signature": "LdapUtils.toHexString(final byte[] b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java"}, "focal_method": {"identifier": "convertLdapException", "parameters": "(javax.naming.NamingException ex)", "modifiers": "public static", "return": "NamingException", "body": "public static NamingException convertLdapException(javax.naming.NamingException ex) {\n\t\tAssert.notNull(ex, \"NamingException must not be null\");\n\n\t\tif (javax.naming.directory.AttributeInUseException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.AttributeInUseException(\n\t\t\t\t\t(javax.naming.directory.AttributeInUseException) ex);\n\t\t}\n\t\tif (javax.naming.directory.AttributeModificationException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.AttributeModificationException(\n\t\t\t\t\t(javax.naming.directory.AttributeModificationException) ex);\n\t\t}\n\t\tif (javax.naming.CannotProceedException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.CannotProceedException((javax.naming.CannotProceedException) ex);\n\t\t}\n\t\tif (javax.naming.CommunicationException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.CommunicationException((javax.naming.CommunicationException) ex);\n\t\t}\n\t\tif (javax.naming.ConfigurationException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.ConfigurationException((javax.naming.ConfigurationException) ex);\n\t\t}\n\t\tif (javax.naming.ContextNotEmptyException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.ContextNotEmptyException((javax.naming.ContextNotEmptyException) ex);\n\t\t}\n\t\tif (javax.naming.InsufficientResourcesException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InsufficientResourcesException(\n\t\t\t\t\t(javax.naming.InsufficientResourcesException) ex);\n\t\t}\n\t\tif (javax.naming.InterruptedNamingException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InterruptedNamingException((javax.naming.InterruptedNamingException) ex);\n\t\t}\n\t\tif (javax.naming.directory.InvalidAttributeIdentifierException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidAttributeIdentifierException(\n\t\t\t\t\t(javax.naming.directory.InvalidAttributeIdentifierException) ex);\n\t\t}\n\t\tif (javax.naming.directory.InvalidAttributesException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidAttributesException(\n\t\t\t\t\t(javax.naming.directory.InvalidAttributesException) ex);\n\t\t}\n\t\tif (javax.naming.directory.InvalidAttributeValueException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidAttributeValueException(\n\t\t\t\t\t(javax.naming.directory.InvalidAttributeValueException) ex);\n\t\t}\n\t\tif (javax.naming.InvalidNameException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidNameException((javax.naming.InvalidNameException) ex);\n\t\t}\n\t\tif (javax.naming.directory.InvalidSearchControlsException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidSearchControlsException(\n\t\t\t\t\t(javax.naming.directory.InvalidSearchControlsException) ex);\n\t\t}\n\t\tif (javax.naming.directory.InvalidSearchFilterException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.InvalidSearchFilterException(\n\t\t\t\t\t(javax.naming.directory.InvalidSearchFilterException) ex);\n\t\t}\n\n\t\tif (javax.naming.ldap.LdapReferralException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.LdapReferralException((javax.naming.ldap.LdapReferralException) ex);\n\t\t}\n\n        if (javax.naming.ReferralException.class.isAssignableFrom(ex.getClass())) {\n            return new org.springframework.ldap.ReferralException((javax.naming.ReferralException) ex);\n        }\n\n\t\t// LimitExceededException hierarchy\n\t\tif (javax.naming.SizeLimitExceededException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.SizeLimitExceededException((javax.naming.SizeLimitExceededException) ex);\n\t\t}\n\t\tif (javax.naming.TimeLimitExceededException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.TimeLimitExceededException((javax.naming.TimeLimitExceededException) ex);\n\t\t}\n\t\t// this class is the superclass of the two above\n\t\tif (javax.naming.LimitExceededException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.LimitExceededException((javax.naming.LimitExceededException) ex);\n\t\t}\n\n\t\t// LinkException hierarchy\n\t\tif (javax.naming.LinkLoopException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.LinkLoopException((javax.naming.LinkLoopException) ex);\n\t\t}\n\t\tif (javax.naming.MalformedLinkException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.MalformedLinkException((javax.naming.MalformedLinkException) ex);\n\t\t}\n\t\t// this class is the superclass of the two above\n\t\tif (javax.naming.LinkException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.LinkException((javax.naming.LinkException) ex);\n\t\t}\n\n\t\tif (javax.naming.NameAlreadyBoundException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NameAlreadyBoundException((javax.naming.NameAlreadyBoundException) ex);\n\t\t}\n\t\tif (javax.naming.NameNotFoundException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NameNotFoundException((javax.naming.NameNotFoundException) ex);\n\t\t}\n\n\t\t// NamingSecurityException hierarchy\n\t\tif (javax.naming.NoPermissionException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NoPermissionException((javax.naming.NoPermissionException) ex);\n\t\t}\n\t\tif (javax.naming.AuthenticationException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.AuthenticationException((javax.naming.AuthenticationException) ex);\n\t\t}\n\t\tif (javax.naming.AuthenticationNotSupportedException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.AuthenticationNotSupportedException(\n\t\t\t\t\t(javax.naming.AuthenticationNotSupportedException) ex);\n\t\t}\n        if (javax.naming.NamingSecurityException.class.isAssignableFrom(ex.getClass())) {\n            return new org.springframework.ldap.NamingSecurityException((javax.naming.NamingSecurityException) ex);\n        }\n\n\t\tif (javax.naming.NoInitialContextException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NoInitialContextException((javax.naming.NoInitialContextException) ex);\n\t\t}\n\t\tif (javax.naming.directory.NoSuchAttributeException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NoSuchAttributeException(\n\t\t\t\t\t(javax.naming.directory.NoSuchAttributeException) ex);\n\t\t}\n\t\tif (javax.naming.NotContextException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.NotContextException((javax.naming.NotContextException) ex);\n\t\t}\n\t\tif (javax.naming.OperationNotSupportedException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.OperationNotSupportedException(\n\t\t\t\t\t(javax.naming.OperationNotSupportedException) ex);\n\t\t}\n\t\tif (javax.naming.PartialResultException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.PartialResultException((javax.naming.PartialResultException) ex);\n\t\t}\n\t\tif (javax.naming.directory.SchemaViolationException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.SchemaViolationException(\n\t\t\t\t\t(javax.naming.directory.SchemaViolationException) ex);\n\t\t}\n\t\tif (javax.naming.ServiceUnavailableException.class.isAssignableFrom(ex.getClass())) {\n\t\t\treturn new org.springframework.ldap.ServiceUnavailableException(\n\t\t\t\t\t(javax.naming.ServiceUnavailableException) ex);\n\t\t}\n\n\t\t// fallback\n\t\treturn new org.springframework.ldap.UncategorizedLdapException(ex);\n\t}", "signature": "NamingException convertLdapException(javax.naming.NamingException ex)", "full_signature": "public static NamingException convertLdapException(javax.naming.NamingException ex)", "class_method_signature": "LdapUtils.convertLdapException(javax.naming.NamingException ex)", "testcase": false, "constructor": false, "invocations": ["notNull", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}