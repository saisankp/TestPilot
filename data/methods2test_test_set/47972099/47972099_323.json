{"test_class": {"identifier": "LocalBufferPoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int numBuffers = 1024;", "modifier": "private final static", "type": "int", "declarator": "numBuffers = 1024", "var_name": "numBuffers"}, {"original_string": "private final static int memorySegmentSize = 128;", "modifier": "private final static", "type": "int", "declarator": "memorySegmentSize = 128", "var_name": "memorySegmentSize"}, {"original_string": "private NetworkBufferPool networkBufferPool;", "modifier": "private", "type": "NetworkBufferPool", "declarator": "networkBufferPool", "var_name": "networkBufferPool"}, {"original_string": "private BufferPool localBufferPool;", "modifier": "private", "type": "BufferPool", "declarator": "localBufferPool", "var_name": "localBufferPool"}, {"original_string": "private final static ExecutorService executor = Executors.newCachedThreadPool();", "modifier": "private final static", "type": "ExecutorService", "declarator": "executor = Executors.newCachedThreadPool()", "var_name": "executor"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPoolTest.java"}, "test_case": {"identifier": "testConcurrentRequestRecycle", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void testConcurrentRequestRecycle() throws ExecutionException, InterruptedException, IOException {\n\t\tint numConcurrentTasks = 128;\n\t\tint numBuffersToRequestPerTask = 1024;\n\n\t\tlocalBufferPool.setNumBuffers(numConcurrentTasks);\n\n\t\tFuture<Boolean>[] taskResults = new Future[numConcurrentTasks];\n\t\tfor (int i = 0; i < numConcurrentTasks; i++) {\n\t\t\ttaskResults[i] = executor.submit(new BufferRequesterTask(localBufferPool, numBuffersToRequestPerTask));\n\t\t}\n\n\t\tfor (int i = 0; i < numConcurrentTasks; i++) {\n\t\t\tassertTrue(taskResults[i].get());\n\t\t}\n\t}", "signature": "void testConcurrentRequestRecycle()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testConcurrentRequestRecycle()", "class_method_signature": "LocalBufferPoolTest.testConcurrentRequestRecycle()", "testcase": true, "constructor": false, "invocations": ["setNumBuffers", "submit", "assertTrue", "get"]}, "focal_class": {"identifier": "LocalBufferPool", "superclass": "", "interfaces": "implements BufferPool", "fields": [{"original_string": "private final NetworkBufferPool networkBufferPool;", "modifier": "private final", "type": "NetworkBufferPool", "declarator": "networkBufferPool", "var_name": "networkBufferPool"}, {"original_string": "private final int numberOfRequiredMemorySegments;", "modifier": "private final", "type": "int", "declarator": "numberOfRequiredMemorySegments", "var_name": "numberOfRequiredMemorySegments"}, {"original_string": "private final Queue<MemorySegment> availableMemorySegments = new ArrayDeque<MemorySegment>();", "modifier": "private final", "type": "Queue<MemorySegment>", "declarator": "availableMemorySegments = new ArrayDeque<MemorySegment>()", "var_name": "availableMemorySegments"}, {"original_string": "private final Queue<EventListener<Buffer>> registeredListeners = new ArrayDeque<EventListener<Buffer>>();", "modifier": "private final", "type": "Queue<EventListener<Buffer>>", "declarator": "registeredListeners = new ArrayDeque<EventListener<Buffer>>()", "var_name": "registeredListeners"}, {"original_string": "private int currentPoolSize;", "modifier": "private", "type": "int", "declarator": "currentPoolSize", "var_name": "currentPoolSize"}, {"original_string": "private int numberOfRequestedMemorySegments;", "modifier": "private", "type": "int", "declarator": "numberOfRequestedMemorySegments", "var_name": "numberOfRequestedMemorySegments"}, {"original_string": "private boolean isDestroyed;", "modifier": "private", "type": "boolean", "declarator": "isDestroyed", "var_name": "isDestroyed"}, {"original_string": "private BufferPoolOwner owner;", "modifier": "private", "type": "BufferPoolOwner", "declarator": "owner", "var_name": "owner"}], "methods": [{"identifier": "LocalBufferPool", "parameters": "(NetworkBufferPool networkBufferPool, int numberOfRequiredMemorySegments)", "modifiers": "", "return": "", "signature": " LocalBufferPool(NetworkBufferPool networkBufferPool, int numberOfRequiredMemorySegments)", "full_signature": "  LocalBufferPool(NetworkBufferPool networkBufferPool, int numberOfRequiredMemorySegments)", "class_method_signature": "LocalBufferPool.LocalBufferPool(NetworkBufferPool networkBufferPool, int numberOfRequiredMemorySegments)", "testcase": false, "constructor": true}, {"identifier": "isDestroyed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDestroyed()", "full_signature": "@Override public boolean isDestroyed()", "class_method_signature": "LocalBufferPool.isDestroyed()", "testcase": false, "constructor": false}, {"identifier": "getMemorySegmentSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMemorySegmentSize()", "full_signature": "@Override public int getMemorySegmentSize()", "class_method_signature": "LocalBufferPool.getMemorySegmentSize()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRequiredMemorySegments", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumberOfRequiredMemorySegments()", "full_signature": "@Override public int getNumberOfRequiredMemorySegments()", "class_method_signature": "LocalBufferPool.getNumberOfRequiredMemorySegments()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfAvailableMemorySegments", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumberOfAvailableMemorySegments()", "full_signature": "@Override public int getNumberOfAvailableMemorySegments()", "class_method_signature": "LocalBufferPool.getNumberOfAvailableMemorySegments()", "testcase": false, "constructor": false}, {"identifier": "getNumBuffers", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumBuffers()", "full_signature": "@Override public int getNumBuffers()", "class_method_signature": "LocalBufferPool.getNumBuffers()", "testcase": false, "constructor": false}, {"identifier": "setBufferPoolOwner", "parameters": "(BufferPoolOwner owner)", "modifiers": "@Override public", "return": "void", "signature": "void setBufferPoolOwner(BufferPoolOwner owner)", "full_signature": "@Override public void setBufferPoolOwner(BufferPoolOwner owner)", "class_method_signature": "LocalBufferPool.setBufferPoolOwner(BufferPoolOwner owner)", "testcase": false, "constructor": false}, {"identifier": "requestBuffer", "parameters": "()", "modifiers": "@Override public", "return": "Buffer", "signature": "Buffer requestBuffer()", "full_signature": "@Override public Buffer requestBuffer()", "class_method_signature": "LocalBufferPool.requestBuffer()", "testcase": false, "constructor": false}, {"identifier": "requestBufferBlocking", "parameters": "()", "modifiers": "@Override public", "return": "Buffer", "signature": "Buffer requestBufferBlocking()", "full_signature": "@Override public Buffer requestBufferBlocking()", "class_method_signature": "LocalBufferPool.requestBufferBlocking()", "testcase": false, "constructor": false}, {"identifier": "requestBuffer", "parameters": "(boolean isBlocking)", "modifiers": "private", "return": "Buffer", "signature": "Buffer requestBuffer(boolean isBlocking)", "full_signature": "private Buffer requestBuffer(boolean isBlocking)", "class_method_signature": "LocalBufferPool.requestBuffer(boolean isBlocking)", "testcase": false, "constructor": false}, {"identifier": "recycle", "parameters": "(MemorySegment segment)", "modifiers": "@Override public", "return": "void", "signature": "void recycle(MemorySegment segment)", "full_signature": "@Override public void recycle(MemorySegment segment)", "class_method_signature": "LocalBufferPool.recycle(MemorySegment segment)", "testcase": false, "constructor": false}, {"identifier": "lazyDestroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void lazyDestroy()", "full_signature": "@Override public void lazyDestroy()", "class_method_signature": "LocalBufferPool.lazyDestroy()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(EventListener<Buffer> listener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addListener(EventListener<Buffer> listener)", "full_signature": "@Override public boolean addListener(EventListener<Buffer> listener)", "class_method_signature": "LocalBufferPool.addListener(EventListener<Buffer> listener)", "testcase": false, "constructor": false}, {"identifier": "setNumBuffers", "parameters": "(int numBuffers)", "modifiers": "@Override public", "return": "void", "signature": "void setNumBuffers(int numBuffers)", "full_signature": "@Override public void setNumBuffers(int numBuffers)", "class_method_signature": "LocalBufferPool.setNumBuffers(int numBuffers)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LocalBufferPool.toString()", "testcase": false, "constructor": false}, {"identifier": "returnMemorySegment", "parameters": "(MemorySegment segment)", "modifiers": "private", "return": "void", "signature": "void returnMemorySegment(MemorySegment segment)", "full_signature": "private void returnMemorySegment(MemorySegment segment)", "class_method_signature": "LocalBufferPool.returnMemorySegment(MemorySegment segment)", "testcase": false, "constructor": false}, {"identifier": "returnExcessMemorySegments", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void returnExcessMemorySegments()", "full_signature": "private void returnExcessMemorySegments()", "class_method_signature": "LocalBufferPool.returnExcessMemorySegments()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java"}, "focal_method": {"identifier": "setNumBuffers", "parameters": "(int numBuffers)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setNumBuffers(int numBuffers) throws IOException {\n\t\tsynchronized (availableMemorySegments) {\n\t\t\tcheckArgument(numBuffers >= numberOfRequiredMemorySegments, \"Buffer pool needs at least \" + numberOfRequiredMemorySegments + \" buffers, but tried to set to \" + numBuffers + \".\");\n\n\t\t\tcurrentPoolSize = numBuffers;\n\n\t\t\treturnExcessMemorySegments();\n\n\t\t\t// If there is a registered owner and we have still requested more buffers than our\n\t\t\t// size, trigger a recycle via the owner.\n\t\t\tif (owner != null && numberOfRequestedMemorySegments > currentPoolSize) {\n\t\t\t\towner.releaseMemory(numberOfRequestedMemorySegments - numBuffers);\n\t\t\t}\n\t\t}\n\t}", "signature": "void setNumBuffers(int numBuffers)", "full_signature": "@Override public void setNumBuffers(int numBuffers)", "class_method_signature": "LocalBufferPool.setNumBuffers(int numBuffers)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "returnExcessMemorySegments", "releaseMemory"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}