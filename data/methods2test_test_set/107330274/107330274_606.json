{"test_class": {"identifier": "LogStorageInfosTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final S3LogLocation DEFAULT_LOG_LOCATION = new S3LogLocation(\n            \"defaultAccountName\",\n            \"defaultAccountId\",\n            \"defaultRegion\",\n            \"defaultBucket\",\n            \"defaultKey\"\n    );", "modifier": "private static final", "type": "S3LogLocation", "declarator": "DEFAULT_LOG_LOCATION = new S3LogLocation(\n            \"defaultAccountName\",\n            \"defaultAccountId\",\n            \"defaultRegion\",\n            \"defaultBucket\",\n            \"defaultKey\"\n    )", "var_name": "DEFAULT_LOG_LOCATION"}], "file": "titus-api/src/test/java/com/netflix/titus/api/jobmanager/model/job/LogStorageInfosTest.java"}, "test_case": {"identifier": "testBuildLogLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildLogLocation() {\n        // No bucket override\n        assertThat(LogStorageInfos.buildLogLocation(JobGenerator.oneBatchTask(), DEFAULT_LOG_LOCATION)).isEqualTo(DEFAULT_LOG_LOCATION);\n\n        // Plain custom bucket name\n        assertThat(LogStorageInfos.buildLogLocation(newTask(\"bucketA\", \"pathB\"), DEFAULT_LOG_LOCATION)).isEqualTo(\n                new S3LogLocation(\n                        DEFAULT_LOG_LOCATION.getAccountName(),\n                        DEFAULT_LOG_LOCATION.getAccountId(),\n                        DEFAULT_LOG_LOCATION.getRegion(),\n                        \"bucketA\",\n                        \"pathB/defaultKey\"\n                )\n        );\n\n        // Custom bucket name with S3 ARN.\n        assertThat(LogStorageInfos.buildLogLocation(\n                newTask(\"arn:aws:s3:us-west-2:123456789012:accesspoint/test\", \"pathB\"),\n                DEFAULT_LOG_LOCATION)\n        ).isEqualTo(\n                new S3LogLocation(\n                        \"123456789012\",\n                        \"123456789012\",\n                        \"us-west-2\",\n                        \"arn:aws:s3:us-west-2:123456789012:accesspoint/test\",\n                        \"pathB/defaultKey\"\n                )\n        );\n    }", "signature": "void testBuildLogLocation()", "full_signature": "@Test public void testBuildLogLocation()", "class_method_signature": "LogStorageInfosTest.testBuildLogLocation()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "buildLogLocation", "oneBatchTask", "isEqualTo", "assertThat", "buildLogLocation", "newTask", "getAccountName", "getAccountId", "getRegion", "isEqualTo", "assertThat", "buildLogLocation", "newTask"]}, "focal_class": {"identifier": "LogStorageInfos", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern S3_ACCESS_POINT_ARN_RE = Pattern.compile(\n            \"arn:aws:s3:([^:]+):([^:]+):accesspoint/.*\"\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "S3_ACCESS_POINT_ARN_RE = Pattern.compile(\n            \"arn:aws:s3:([^:]+):([^:]+):accesspoint/.*\"\n    )", "var_name": "S3_ACCESS_POINT_ARN_RE"}], "methods": [{"identifier": "toS3LogLocationTaskContext", "parameters": "(Job<E> job)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "full_signature": "public static Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "class_method_signature": "LogStorageInfos.toS3LogLocationTaskContext(Job<E> job)", "testcase": false, "constructor": false}, {"identifier": "buildLogLocation", "parameters": "(Task task, S3LogLocation defaultLogLocation)", "modifiers": "public static", "return": "S3LogLocation", "signature": "S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "full_signature": "public static S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "class_method_signature": "LogStorageInfos.buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(Job<?> job)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(Job<?> job)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(Task task)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(Task task)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(Task task)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(Task task)", "testcase": false, "constructor": false}, {"identifier": "findCustomPathPrefix", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "full_signature": "public static Optional<String> findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "class_method_signature": "LogStorageInfos.findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "findCustomPathPrefix", "parameters": "(Task task)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findCustomPathPrefix(Task task)", "full_signature": "public static Optional<String> findCustomPathPrefix(Task task)", "class_method_signature": "LogStorageInfos.findCustomPathPrefix(Task task)", "testcase": false, "constructor": false}, {"identifier": "buildPathPrefix", "parameters": "(String first, String second)", "modifiers": "public static", "return": "String", "signature": "String buildPathPrefix(String first, String second)", "full_signature": "public static String buildPathPrefix(String first, String second)", "class_method_signature": "LogStorageInfos.buildPathPrefix(String first, String second)", "testcase": false, "constructor": false}, {"identifier": "parseS3AccessPointArn", "parameters": "(String s3AccessPointArn)", "modifiers": "@VisibleForTesting static", "return": "Optional<S3Account>", "signature": "Optional<S3Account> parseS3AccessPointArn(String s3AccessPointArn)", "full_signature": "@VisibleForTesting static Optional<S3Account> parseS3AccessPointArn(String s3AccessPointArn)", "class_method_signature": "LogStorageInfos.parseS3AccessPointArn(String s3AccessPointArn)", "testcase": false, "constructor": false}], "file": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/LogStorageInfos.java"}, "focal_method": {"identifier": "buildLogLocation", "parameters": "(Task task, S3LogLocation defaultLogLocation)", "modifiers": "public static", "return": "S3LogLocation", "body": "public static S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation) {\n        S3Bucket customS3Bucket = findCustomS3Bucket(task).orElse(null);\n        String customPathPrefix = findCustomPathPrefix(task).orElse(null);\n\n        if (customS3Bucket == null && customPathPrefix == null) {\n            return defaultLogLocation;\n        }\n\n        String fullPrefix = customPathPrefix == null\n                ? defaultLogLocation.getKey()\n                : buildPathPrefix(customPathPrefix, defaultLogLocation.getKey());\n\n\n        if (customS3Bucket == null) {\n            return new S3LogLocation(\n                    defaultLogLocation.getAccountName(),\n                    defaultLogLocation.getAccountId(),\n                    defaultLogLocation.getRegion(),\n                    defaultLogLocation.getBucket(),\n                    fullPrefix\n            );\n        }\n\n        return customS3Bucket.getS3Account()\n                .map(account ->\n                        new S3LogLocation(\n                                account.getAccountId(),\n                                account.getAccountId(),\n                                account.getRegion(),\n                                customS3Bucket.getBucketName(),\n                                fullPrefix\n                        ))\n                .orElseGet(() ->\n                        new S3LogLocation(\n                                defaultLogLocation.getAccountName(),\n                                defaultLogLocation.getAccountId(),\n                                defaultLogLocation.getRegion(),\n                                customS3Bucket.getBucketName(),\n                                fullPrefix\n                        ));\n    }", "signature": "S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "full_signature": "public static S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "class_method_signature": "LogStorageInfos.buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "testcase": false, "constructor": false, "invocations": ["orElse", "findCustomS3Bucket", "orElse", "findCustomPathPrefix", "getKey", "buildPathPrefix", "getKey", "getAccountName", "getAccountId", "getRegion", "getBucket", "orElseGet", "map", "getS3Account", "getAccountId", "getAccountId", "getRegion", "getBucketName", "getAccountName", "getAccountId", "getRegion", "getBucketName"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}